
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a1b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d5e4  0802a3b0  0802a3b0  0003a3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047994  08047994  000606d4  2**0
                  CONTENTS
  4 .ARM          00000008  08047994  08047994  00057994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804799c  0804799c  000606d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804799c  0804799c  0005799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080479a0  080479a0  000579a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d4  20000000  080479a4  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002fa24  200006d8  08048078  000606d8  2**3
                  ALLOC
 10 ._user_heap_stack 0001e804  200300fc  08048078  000700fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00091c1c  00000000  00000000  00060702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000136a9  00000000  00000000  000f231e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00053ccb  00000000  00000000  001059c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037a0  00000000  00000000  00159698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009980  00000000  00000000  0015ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049ceb  00000000  00000000  001667b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000929e7  00000000  00000000  001b04a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a671  00000000  00000000  00242e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0037d4fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d7c0  00000000  00000000  0037d54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006d8 	.word	0x200006d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a398 	.word	0x0802a398

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006dc 	.word	0x200006dc
 800023c:	0802a398 	.word	0x0802a398

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000708 	.word	0x20000708
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	20000788 	.word	0x20000788

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	20000708 	.word	0x20000708
 8000708:	40000c00 	.word	0x40000c00
 800070c:	20000788 	.word	0x20000788

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f025 feb2 	bl	802648c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f008 bf3b 	b.w	80095a8 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802a5dc 	.word	0x0802a5dc

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219b      	movs	r1, #155	; 0x9b
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f005 f88c 	bl	8005870 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219d      	movs	r1, #157	; 0x9d
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f005 f880 	bl	8005870 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f00a f803 	bl	800a82c <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219c      	movs	r1, #156	; 0x9c
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f005 f80a 	bl	8005870 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	0802a5f4 	.word	0x0802a5f4
 800086c:	20000298 	.word	0x20000298
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <ADC_Conv_complete+0x200>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <ADC_Conv_complete+0x204>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4980      	ldr	r1, [pc, #512]	; (8000a94 <ADC_Conv_complete+0x208>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ADC_Conv_complete+0x20c>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4880      	ldr	r0, [pc, #512]	; (8000a9c <ADC_Conv_complete+0x210>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681c      	ldr	r4, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ADC_Conv_complete+0x214>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7815      	ldrb	r5, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f504 64b8 	addeq.w	r4, r4, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60e3      	str	r3, [r4, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	022b      	lsls	r3, r5, #8
 80008b6:	9505      	str	r5, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460d      	mov	r5, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <ADC_Conv_complete+0x218>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a1      	str	r1, [r4, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8000af4 <ADC_Conv_complete+0x268>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	6063      	str	r3, [r4, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8d9 3000 	ldr.w	r3, [r9]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c9 3000 	str.w	r3, [r9]
	if (sigsuppress) {
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03c      	beq.n	8000972 <ADC_Conv_complete+0xe6>
		sigsend = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c9 3000 	str.w	r3, [r9]
	if (sigsend) {
 80008fe:	f8d9 3000 	ldr.w	r3, [r9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d02c      	beq.n	8000960 <ADC_Conv_complete+0xd4>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <ADC_Conv_complete+0x220>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f000 809d 	beq.w	8000a4a <ADC_Conv_complete+0x1be>
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <ADC_Conv_complete+0x208>)
		sigprev = 1;	// remember this trigger for next packet
 8000912:	2101      	movs	r1, #1
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000914:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000916:	6019      	str	r1, [r3, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000918:	440a      	add	r2, r1
		ledhang = 15;		// 15 x 10ms in Idle proc
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <ADC_Conv_complete+0x224>)
 800091c:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 800091e:	67c2      	str	r2, [r0, #124]	; 0x7c
		ledhang = 15;		// 15 x 10ms in Idle proc
 8000920:	6019      	str	r1, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000922:	4a64      	ldr	r2, [pc, #400]	; (8000ab4 <ADC_Conv_complete+0x228>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	d10b      	bne.n	8000948 <ADC_Conv_complete+0xbc>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <ADC_Conv_complete+0x22c>)
		adcbgbaseacc = 0;
 8000932:	2000      	movs	r0, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000934:	4d61      	ldr	r5, [pc, #388]	; (8000abc <ADC_Conv_complete+0x230>)
 8000936:	680b      	ldr	r3, [r1, #0]
		samplecnt = 0;
 8000938:	6010      	str	r0, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4c60      	ldr	r4, [pc, #384]	; (8000ac0 <ADC_Conv_complete+0x234>)
		adcbgbaseacc = 0;
 800093e:	6008      	str	r0, [r1, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000940:	fba5 2303 	umull	r2, r3, r5, r3
 8000944:	0b9b      	lsrs	r3, r3, #14
 8000946:	6023      	str	r3, [r4, #0]
	if (xTaskToNotify == NULL) {
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <ADC_Conv_complete+0x238>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	f000 8097 	beq.w	8000a80 <ADC_Conv_complete+0x1f4>
	} else if (sigsend) {
 8000952:	f8d9 2000 	ldr.w	r2, [r9]
 8000956:	2a00      	cmp	r2, #0
 8000958:	d17c      	bne.n	8000a54 <ADC_Conv_complete+0x1c8>
}
 800095a:	b007      	add	sp, #28
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ADC_Conv_complete+0x220>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	b112      	cbz	r2, 800096c <ADC_Conv_complete+0xe0>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <ADC_Conv_complete+0x23c>)
 8000968:	2101      	movs	r1, #1
 800096a:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7d7      	b.n	8000922 <ADC_Conv_complete+0x96>
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	469c      	mov	ip, r3
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <ADC_Conv_complete+0x240>)
 8000976:	340e      	adds	r4, #14
 8000978:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000af8 <ADC_Conv_complete+0x26c>
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <ADC_Conv_complete+0x244>)
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <ADC_Conv_complete+0x248>)
 8000984:	f8cd c010 	str.w	ip, [sp, #16]
 8000988:	881b      	ldrh	r3, [r3, #0]
				pretrigcnt++;
 800098a:	9400      	str	r4, [sp, #0]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <ADC_Conv_complete+0x250>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <ADC_Conv_complete+0x254>)
 800099c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <ADC_Conv_complete+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	9301      	str	r3, [sp, #4]
			lastmeanwindiff = abs(meanwindiff);
 80009a6:	2900      	cmp	r1, #0
			thissamp = (*adcbuf16)[i];
 80009a8:	9c00      	ldr	r4, [sp, #0]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009aa:	f00c 0a1f 	and.w	sl, ip, #31
			if (sigsend)
 80009ae:	f8d9 b000 	ldr.w	fp, [r9]
			lastmeanwindiff = abs(meanwindiff);
 80009b2:	bfb8      	it	lt
 80009b4:	4249      	neglt	r1, r1
			thissamp = (*adcbuf16)[i];
 80009b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 80009ba:	f10c 0c01 	add.w	ip, ip, #1
			lastmeanwindiff = abs(meanwindiff);
 80009be:	b28e      	uxth	r6, r1
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c0:	9903      	ldr	r1, [sp, #12]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009c2:	4418      	add	r0, r3
			adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80009c4:	441d      	add	r5, r3
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c6:	eb06 0e01 	add.w	lr, r6, r1
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009ca:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
			lastsamp[j] = thissamp;			// save last samples
 80009ce:	f828 301a 	strh.w	r3, [r8, sl, lsl #1]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009d2:	1a40      	subs	r0, r0, r1
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009d4:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
			thissamp = (*adcbuf16)[i];
 80009d8:	9400      	str	r4, [sp, #0]
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009da:	1a52      	subs	r2, r2, r1
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009dc:	f340 114f 	sbfx	r1, r0, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009e0:	9c02      	ldr	r4, [sp, #8]
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009e2:	1a5b      	subs	r3, r3, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009ea:	441a      	add	r2, r3
			meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 80009ec:	f342 114f 	sbfx	r1, r2, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
			windiff[j] = meanwindiff;	// store latest window mean of differences
 80009f4:	f847 102a 	str.w	r1, [r7, sl, lsl #2]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	eb03 0a04 	add.w	sl, r3, r4
 8000a02:	45f2      	cmp	sl, lr
 8000a04:	dd04      	ble.n	8000a10 <ADC_Conv_complete+0x184>
				pretrigcnt++;
 8000a06:	9c01      	ldr	r4, [sp, #4]
 8000a08:	3401      	adds	r4, #1
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	9404      	str	r4, [sp, #16]
			if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000a10:	4573      	cmp	r3, lr
 8000a12:	dd05      	ble.n	8000a20 <ADC_Conv_complete+0x194>
 8000a14:	f1bb 0f00 	cmp.w	fp, #0
 8000a18:	d102      	bne.n	8000a20 <ADC_Conv_complete+0x194>
				sigsend = 1; // the real trigger
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c9 3000 	str.w	r3, [r9]
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000a20:	f5bc 7f36 	cmp.w	ip, #728	; 0x2d8
 8000a24:	d1bf      	bne.n	80009a6 <ADC_Conv_complete+0x11a>
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <ADC_Conv_complete+0x250>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <ADC_Conv_complete+0x254>)
 8000a34:	8019      	strh	r1, [r3, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <ADC_Conv_complete+0x25c>)
 8000a38:	801e      	strh	r6, [r3, #0]
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af5e 	beq.w	80008fe <ADC_Conv_complete+0x72>
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <ADC_Conv_complete+0x258>)
 8000a44:	9a01      	ldr	r2, [sp, #4]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e759      	b.n	80008fe <ADC_Conv_complete+0x72>
			++adcbatchid; // start a new adc batch number
 8000a4a:	9a05      	ldr	r2, [sp, #20]
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	700a      	strb	r2, [r1, #0]
 8000a52:	e75d      	b.n	8000910 <ADC_Conv_complete+0x84>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a54:	4c25      	ldr	r4, [pc, #148]	; (8000aec <ADC_Conv_complete+0x260>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f017 fad1 	bl	8018000 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f43f af7a 	beq.w	800095a <ADC_Conv_complete+0xce>
 8000a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	b007      	add	sp, #28
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <ADC_Conv_complete+0x264>)
}
 8000a82:	b007      	add	sp, #28
 8000a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a88:	f025 bd00 	b.w	802648c <puts>
 8000a8c:	20000708 	.word	0x20000708
 8000a90:	200006f4 	.word	0x200006f4
 8000a94:	2000300c 	.word	0x2000300c
 8000a98:	20000764 	.word	0x20000764
 8000a9c:	20000704 	.word	0x20000704
 8000aa0:	20000788 	.word	0x20000788
 8000aa4:	2000076c 	.word	0x2000076c
 8000aa8:	20000780 	.word	0x20000780
 8000aac:	20000778 	.word	0x20000778
 8000ab0:	2000075c 	.word	0x2000075c
 8000ab4:	20000770 	.word	0x20000770
 8000ab8:	200006f8 	.word	0x200006f8
 8000abc:	16816817 	.word	0x16816817
 8000ac0:	2000070c 	.word	0x2000070c
 8000ac4:	20000818 	.word	0x20000818
 8000ac8:	20000774 	.word	0x20000774
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000790 	.word	0x20000790
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000810 	.word	0x20000810
 8000adc:	2000078c 	.word	0x2000078c
 8000ae0:	20000760 	.word	0x20000760
 8000ae4:	20000768 	.word	0x20000768
 8000ae8:	20000718 	.word	0x20000718
 8000aec:	20000814 	.word	0x20000814
 8000af0:	0802a60c 	.word	0x0802a60c
 8000af4:	2000077c 	.word	0x2000077c
 8000af8:	2000071c 	.word	0x2000071c

08000afc <startadc>:

void startadc() {
 8000afc:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000afe:	492b      	ldr	r1, [pc, #172]	; (8000bac <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000b00:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000b06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b08:	4d2b      	ldr	r5, [pc, #172]	; (8000bb8 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000b0e:	f025 fcbd 	bl	802648c <puts>
	osDelay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f015 fc7e 	bl	8016414 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b18:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000b1c:	f017 ff64 	bl	80189e8 <pvPortMalloc>
 8000b20:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d03d      	beq.n	8000ba2 <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000b26:	0783      	lsls	r3, r0, #30
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d128      	bne.n	8000b7e <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b2c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b30:	2155      	movs	r1, #85	; 0x55
 8000b32:	4620      	mov	r0, r4
 8000b34:	f024 fc70 	bl	8025418 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b38:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b3c:	21aa      	movs	r1, #170	; 0xaa
 8000b3e:	18a0      	adds	r0, r4, r2
 8000b40:	f024 fc6a 	bl	8025418 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b44:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b4a:	f104 0110 	add.w	r1, r4, #16
 8000b4e:	4c1c      	ldr	r4, [pc, #112]	; (8000bc0 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b50:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b54:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b58:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b5a:	f7ff fded 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <startadc+0xcc>)
 8000b60:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b64:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b66:	f008 fc71 	bl	800944c <HAL_ADC_Start>
 8000b6a:	b9b0      	cbnz	r0, 8000b9a <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <startadc+0xd4>)
 8000b6e:	f008 fc6d 	bl	800944c <HAL_ADC_Start>
 8000b72:	b970      	cbnz	r0, 8000b92 <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <startadc+0xc8>)
 8000b76:	f008 fc69 	bl	800944c <HAL_ADC_Start>
 8000b7a:	b928      	cbnz	r0, 8000b88 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <startadc+0xd8>)
 8000b80:	f025 fc84 	bl	802648c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b84:	682c      	ldr	r4, [r5, #0]
 8000b86:	e7d1      	b.n	8000b2c <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <startadc+0xdc>)
}
 8000b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b8e:	f025 bc7d 	b.w	802648c <puts>
		printf("ADC2 failed start\r\n");
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <startadc+0xe0>)
 8000b94:	f025 fc7a 	bl	802648c <puts>
 8000b98:	e7ec      	b.n	8000b74 <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <startadc+0xe4>)
 8000b9c:	f025 fc76 	bl	802648c <puts>
 8000ba0:	e7e4      	b.n	8000b6c <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <startadc+0xe8>)
 8000ba4:	f025 fc72 	bl	802648c <puts>
		for (;;)
 8000ba8:	e7fe      	b.n	8000ba8 <startadc+0xac>
 8000baa:	bf00      	nop
 8000bac:	066ff300 	.word	0x066ff300
 8000bb0:	2000300c 	.word	0x2000300c
 8000bb4:	0802a620 	.word	0x0802a620
 8000bb8:	20000764 	.word	0x20000764
 8000bbc:	20000700 	.word	0x20000700
 8000bc0:	200006fc 	.word	0x200006fc
 8000bc4:	2000216c 	.word	0x2000216c
 8000bc8:	20000705 	.word	0x20000705
 8000bcc:	200021fc 	.word	0x200021fc
 8000bd0:	200021b4 	.word	0x200021b4
 8000bd4:	0802a65c 	.word	0x0802a65c
 8000bd8:	0802a6bc 	.word	0x0802a6bc
 8000bdc:	0802a6a8 	.word	0x0802a6a8
 8000be0:	0802a694 	.word	0x0802a694
 8000be4:	0802a634 	.word	0x0802a634

08000be8 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000be8:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bea:	b169      	cbz	r1, 8000c08 <xcrc32+0x20>
 8000bec:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bf2:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bf6:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bfa:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000c04:	d1f5      	bne.n	8000bf2 <xcrc32+0xa>
 8000c06:	4770      	bx	lr
  unsigned int crc = init;
 8000c08:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000c0a:	4770      	bx	lr
 8000c0c:	0802a6d0 	.word	0x0802a6d0

08000c10 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000c10:	b500      	push	{lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000c14:	4668      	mov	r0, sp
 8000c16:	f00b fc95 	bl	800c544 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <stampboot+0x7c>)
 8000c1c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000c24:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c26:	d01b      	beq.n	8000c60 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c28:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c2c:	d015      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c2e:	f00b faa5 	bl	800c17c <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c32:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c3a:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c3c:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c3e:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c40:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c42:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c46:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c48:	f00b fba4 	bl	800c394 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c4c:	b9c0      	cbnz	r0, 8000c80 <stampboot+0x70>
			printf("stampboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c4e:	f00b fab1 	bl	800c1b4 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c52:	b980      	cbnz	r0, 8000c76 <stampboot+0x66>
			printf("stampboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <stampboot+0x80>)
 8000c56:	f025 fc19 	bl	802648c <puts>
	}
}
 8000c5a:	b009      	add	sp, #36	; 0x24
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d0f9      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c66:	f00b fa89 	bl	800c17c <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c6e:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c72:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c74:	e7e2      	b.n	8000c3c <stampboot+0x2c>
			printf("stampboot: failed to OBLaunch %d\n", res);
 8000c76:	4601      	mov	r1, r0
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <stampboot+0x84>)
 8000c7a:	f025 fb6b 	bl	8026354 <iprintf>
 8000c7e:	e7e9      	b.n	8000c54 <stampboot+0x44>
			printf("stampboot: failed to OBProgram %d\n", res);
 8000c80:	4601      	mov	r1, r0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <stampboot+0x88>)
 8000c84:	f025 fb66 	bl	8026354 <iprintf>
 8000c88:	e7e1      	b.n	8000c4e <stampboot+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	08000c11 	.word	0x08000c11
 8000c90:	0802ab18 	.word	0x0802ab18
 8000c94:	0802aaf4 	.word	0x0802aaf4
 8000c98:	0802aad0 	.word	0x0802aad0

08000c9c <printflasherr>:
void printflasherr() {
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c9e:	4d1e      	ldr	r5, [pc, #120]	; (8000d18 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000ca0:	4f1e      	ldr	r7, [pc, #120]	; (8000d1c <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000ca2:	4e1f      	ldr	r6, [pc, #124]	; (8000d20 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000ca4:	f00b fab4 	bl	800c210 <HAL_FLASH_GetError>
	switch (err) {
 8000ca8:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000caa:	4604      	mov	r4, r0
	switch (err) {
 8000cac:	2b1e      	cmp	r3, #30
 8000cae:	d811      	bhi.n	8000cd4 <printflasherr+0x38>
 8000cb0:	e8df f003 	tbb	[pc, r3]
 8000cb4:	102f102b 	.word	0x102f102b
 8000cb8:	102d1010 	.word	0x102d1010
 8000cbc:	10101010 	.word	0x10101010
 8000cc0:	10291010 	.word	0x10291010
 8000cc4:	10101010 	.word	0x10101010
 8000cc8:	10101010 	.word	0x10101010
 8000ccc:	10101010 	.word	0x10101010
 8000cd0:	1010      	.short	0x1010
 8000cd2:	1d          	.byte	0x1d
 8000cd3:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <printflasherr+0x88>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f025 fd25 	bl	8026728 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <printflasherr+0x8c>)
 8000ce2:	f025 fb37 	bl	8026354 <iprintf>
	res = HAL_FLASH_Lock();
 8000ce6:	f00b fa3f 	bl	800c168 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cea:	b940      	cbnz	r0, 8000cfe <printflasherr+0x62>
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cee:	490f      	ldr	r1, [pc, #60]	; (8000d2c <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f025 fb2f 	bl	8026354 <iprintf>
	res = HAL_FLASH_Lock();
 8000cf6:	f00b fa37 	bl	800c168 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f6      	beq.n	8000cec <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printflasherr+0x94>)
 8000d00:	f025 fbc4 	bl	802648c <puts>
		printflasherr();
 8000d04:	e7ce      	b.n	8000ca4 <printflasherr+0x8>
		msg = "Write Protected";
 8000d06:	490b      	ldr	r1, [pc, #44]	; (8000d34 <printflasherr+0x98>)
		break;
 8000d08:	e7f2      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7f0      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Programming alignment";
 8000d0e:	4639      	mov	r1, r7
 8000d10:	e7ee      	b.n	8000cf0 <printflasherr+0x54>
	switch (err) {
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <printflasherr+0x9c>)
 8000d14:	e7ec      	b.n	8000cf0 <printflasherr+0x54>
 8000d16:	bf00      	nop
 8000d18:	0802abd4 	.word	0x0802abd4
 8000d1c:	0802ab60 	.word	0x0802ab60
 8000d20:	0802ab4c 	.word	0x0802ab4c
 8000d24:	0802aba0 	.word	0x0802aba0
 8000d28:	0802abb4 	.word	0x0802abb4
 8000d2c:	0802ab40 	.word	0x0802ab40
 8000d30:	0802abf8 	.word	0x0802abf8
 8000d34:	0802ab78 	.word	0x0802ab78
 8000d38:	0802ab88 	.word	0x0802ab88

08000d3c <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d3e:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d40:	4605      	mov	r5, r0
 8000d42:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d44:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4c:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	2002      	movs	r0, #2
 8000d54:	f00b fa8e 	bl	800c274 <HAL_FLASH_Program>
 8000d58:	b990      	cbnz	r0, 8000d80 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d68:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d100      	bne.n	8000d72 <WriteFlashWord.part.0+0x36>
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d72:	4632      	mov	r2, r6
 8000d74:	4629      	mov	r1, r5
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <WriteFlashWord.part.0+0x70>)
 8000d78:	f025 faec 	bl	8026354 <iprintf>
		return (HAL_ERROR);
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d80:	f7ff ff8c 	bl	8000c9c <printflasherr>
			printflasherr();
 8000d84:	f7ff ff8a 	bl	8000c9c <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <WriteFlashWord.part.0+0x74>)
 8000d8e:	f025 fae1 	bl	8026354 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d92:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d94:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9a:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	0802ac68 	.word	0x0802ac68
 8000db0:	0802ac38 	.word	0x0802ac38

08000db4 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000dba:	f00b f9c1 	bl	800c140 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d14f      	bne.n	8000e62 <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dc2:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dc6:	4d34      	ldr	r5, [pc, #208]	; (8000e98 <EraseFlash+0xe4>)
 8000dc8:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dca:	4626      	mov	r6, r4
 8000dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dd0:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dd2:	d041      	beq.n	8000e58 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000dda:	4930      	ldr	r1, [pc, #192]	; (8000e9c <EraseFlash+0xe8>)
 8000ddc:	1f23      	subs	r3, r4, #4
 8000dde:	4421      	add	r1, r4
 8000de0:	e001      	b.n	8000de6 <EraseFlash+0x32>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d006      	beq.n	8000df4 <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000de6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dea:	3201      	adds	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <EraseFlash+0x2e>
	if ((dirty) && (notflashed)) {
 8000dee:	4f2c      	ldr	r7, [pc, #176]	; (8000ea0 <EraseFlash+0xec>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b92b      	cbnz	r3, 8000e00 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <EraseFlash+0xf0>)
 8000df6:	f025 fb49 	bl	802648c <puts>
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f015 fb06 	bl	8016414 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <EraseFlash+0xf4>)
 8000e0a:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000e0e:	f025 faa1 	bl	8026354 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e16:	a901      	add	r1, sp, #4
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e1a:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e22:	f00b fbfb 	bl	800c61c <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000e26:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e28:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e2a:	1c48      	adds	r0, r1, #1
 8000e2c:	d12d      	bne.n	8000e8a <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e2e:	bb25      	cbnz	r5, 8000e7a <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <EraseFlash+0xf8>)
 8000e32:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e36:	f025 fb29 	bl	802648c <puts>
			notflashed = 0;
 8000e3a:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e3c:	e001      	b.n	8000e42 <EraseFlash+0x8e>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d0db      	beq.n	8000dfa <EraseFlash+0x46>
 8000e42:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e44:	3604      	adds	r6, #4
 8000e46:	680b      	ldr	r3, [r1, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <EraseFlash+0x8a>
				notflashed = 1;
 8000e4c:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <EraseFlash+0xfc>)
				notflashed = 1;
 8000e50:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e52:	f025 fa7f 	bl	8026354 <iprintf>
 8000e56:	e7d0      	b.n	8000dfa <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e60:	e7bb      	b.n	8000dda <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e62:	4601      	mov	r1, r0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <EraseFlash+0x100>)
 8000e66:	f025 fa75 	bl	8026354 <iprintf>
		printflasherr();
 8000e6a:	f7ff ff17 	bl	8000c9c <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <EraseFlash+0x104>)
 8000e70:	f025 fb0c 	bl	802648c <puts>
		printflasherr();
 8000e74:	f7ff ff12 	bl	8000c9c <printflasherr>
 8000e78:	e7a3      	b.n	8000dc2 <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EraseFlash+0x108>)
 8000e7c:	f025 fb06 	bl	802648c <puts>
			printflasherr();
 8000e80:	f7ff ff0c 	bl	8000c9c <printflasherr>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <EraseFlash+0x10c>)
 8000e8c:	f025 fa62 	bl	8026354 <iprintf>
		if (res != HAL_OK) {
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d0cd      	beq.n	8000e30 <EraseFlash+0x7c>
 8000e94:	e7f1      	b.n	8000e7a <EraseFlash+0xc6>
 8000e96:	bf00      	nop
 8000e98:	2000081c 	.word	0x2000081c
 8000e9c:	0007fffc 	.word	0x0007fffc
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	0802ad44 	.word	0x0802ad44
 8000ea8:	0802acc4 	.word	0x0802acc4
 8000eac:	0802ad28 	.word	0x0802ad28
 8000eb0:	0802ad5c 	.word	0x0802ad5c
 8000eb4:	0802ac14 	.word	0x0802ac14
 8000eb8:	0802aca8 	.word	0x0802aca8
 8000ebc:	0802ad14 	.word	0x0802ad14
 8000ec0:	0802acec 	.word	0x0802acec

08000ec4 <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000ec4:	b500      	push	{lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f00b fb3b 	bl	800c544 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ece:	f00b f955 	bl	800c17c <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d008      	beq.n	8000eec <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	d009      	beq.n	8000ef8 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ee4:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ee6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000eea:	e007      	b.n	8000efc <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ef2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ef6:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000efc:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000efe:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000f00:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000f02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000f06:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000f08:	f00b fa44 	bl	800c394 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000f0c:	b990      	cbnz	r0, 8000f34 <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000f0e:	f00b f951 	bl	800c1b4 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000f12:	b950      	cbnz	r0, 8000f2a <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("swapping boot....\n");
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <swapboot+0x7c>)
 8000f16:	f025 fab9 	bl	802648c <puts>
	HAL_FLASH_OB_Lock();
 8000f1a:	f00b f941 	bl	800c1a0 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <swapboot+0x80>)
 8000f20:	f025 fab4 	bl	802648c <puts>
}
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <swapboot+0x84>)
 8000f2e:	f025 fa11 	bl	8026354 <iprintf>
 8000f32:	e7ef      	b.n	8000f14 <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f34:	4601      	mov	r1, r0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <swapboot+0x88>)
 8000f38:	f025 fa0c 	bl	8026354 <iprintf>
 8000f3c:	e7e7      	b.n	8000f0e <swapboot+0x4a>
 8000f3e:	bf00      	nop
 8000f40:	0802ae04 	.word	0x0802ae04
 8000f44:	0802ae18 	.word	0x0802ae18
 8000f48:	0802ade0 	.word	0x0802ade0
 8000f4c:	0802adbc 	.word	0x0802adbc

08000f50 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f50:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f52:	4d10      	ldr	r5, [pc, #64]	; (8000f94 <flash_writeword+0x44>)
 8000f54:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f56:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f5a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f5e:	d20a      	bcs.n	8000f76 <flash_writeword+0x26>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fee9 	bl	8000d3c <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f6a:	b938      	cbnz	r0, 8000f7c <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f6c:	6829      	ldr	r1, [r5, #0]
 8000f6e:	680b      	ldr	r3, [r1, #0]
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d109      	bne.n	8000f88 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <flash_writeword+0x48>)
 8000f78:	f025 fa88 	bl	802648c <puts>
		printf("memwrite: WriteFlash error\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <flash_writeword+0x4c>)
 8000f7e:	f025 fa85 	bl	802648c <puts>
		return (-1);
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <flash_writeword+0x50>)
 8000f8a:	f025 f9e3 	bl	8026354 <iprintf>
		return (-1);
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	2000085c 	.word	0x2000085c
 8000f98:	0802ad98 	.word	0x0802ad98
 8000f9c:	0802ae28 	.word	0x0802ae28
 8000fa0:	0802ae44 	.word	0x0802ae44

08000fa4 <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000fa8:	4e49      	ldr	r6, [pc, #292]	; (80010d0 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000faa:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (notflashed)) {
 8000fac:	4949      	ldr	r1, [pc, #292]	; (80010d4 <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fae:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000fb0:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fb2:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (notflashed)) {
 8000fb4:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (notflashed)) {
 8000fba:	b92f      	cbnz	r7, 8000fc8 <flash_memwrite+0x24>
 8000fbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010e4 <flash_memwrite+0x140>
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d179      	bne.n	80010bc <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d071      	beq.n	80010b0 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fd0:	4f41      	ldr	r7, [pc, #260]	; (80010d8 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000fd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010e8 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fd6:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fd8:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fda:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fdc:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fde:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fe2:	dd1a      	ble.n	800101a <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	dd16      	ble.n	800101a <flash_memwrite+0x76>
 8000fec:	2201      	movs	r2, #1
 8000fee:	4e3b      	ldr	r6, [pc, #236]	; (80010dc <flash_memwrite+0x138>)
			data >>= 8;
 8000ff0:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000ff2:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000ff4:	3201      	adds	r2, #1
			data >>= 8;
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	f103 0e01 	add.w	lr, r3, #1
 8001000:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8001004:	f8cd e000 	str.w	lr, [sp]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800100e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	4299      	cmp	r1, r3
 8001014:	dcec      	bgt.n	8000ff0 <flash_memwrite+0x4c>
 8001016:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 800101a:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800101e:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8001020:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4419      	add	r1, r3
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	1aeb      	subs	r3, r5, r3
 800102c:	4299      	cmp	r1, r3
 800102e:	d229      	bcs.n	8001084 <flash_memwrite+0xe0>
 8001030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010ec <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 8001034:	f8d8 3000 	ldr.w	r3, [r8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc10      	bgt.n	8001062 <flash_memwrite+0xbe>
			data >>= 8;
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	9100      	str	r1, [sp, #0]
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001054:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddee      	ble.n	8001040 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 8001062:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 8001064:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001068:	f7ff ff72 	bl	8000f50 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 8001072:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001076:	4402      	add	r2, r0
 8001078:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 800107a:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800107c:	429a      	cmp	r2, r3
		flash_memptr += 4;
 800107e:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001082:	d3d7      	bcc.n	8001034 <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	429d      	cmp	r5, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	d90c      	bls.n	80010a8 <flash_memwrite+0x104>
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <flash_memwrite+0x138>)
 8001090:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	5ca2      	ldrb	r2, [r4, r2]
 8001098:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 800109a:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d3f4      	bcc.n	8001092 <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 80010a8:	4628      	mov	r0, r5
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4629      	mov	r1, r5
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash_memwrite+0x13c>)
 80010b6:	f025 f94d 	bl	8026354 <iprintf>
 80010ba:	e787      	b.n	8000fcc <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 80010bc:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010ec <flash_memwrite+0x148>
 80010c0:	f8d9 0000 	ldr.w	r0, [r9]
 80010c4:	f7ff fe76 	bl	8000db4 <EraseFlash>
		notflashed = 0;
 80010c8:	f8c8 7000 	str.w	r7, [r8]
 80010cc:	e77c      	b.n	8000fc8 <flash_memwrite+0x24>
 80010ce:	bf00      	nop
 80010d0:	20000858 	.word	0x20000858
 80010d4:	20000854 	.word	0x20000854
 80010d8:	20000874 	.word	0x20000874
 80010dc:	20000864 	.word	0x20000864
 80010e0:	0802ae68 	.word	0x0802ae68
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000860 	.word	0x20000860
 80010ec:	2000085c 	.word	0x2000085c

080010f0 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	notflashed = 1;		// now assumed dirty
	if (flash_abort) {
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <memclose+0x120>)
	notflashed = 1;		// now assumed dirty
 80010f2:	2101      	movs	r1, #1
 80010f4:	4a47      	ldr	r2, [pc, #284]	; (8001214 <memclose+0x124>)
	if (flash_abort) {
 80010f6:	6818      	ldr	r0, [r3, #0]
	notflashed = 1;		// now assumed dirty
 80010f8:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d16e      	bne.n	80011dc <memclose+0xec>
		flash_abort = 0;
		http_downloading = NOT_LOADING;
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <memclose+0x128>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
void* memclose() {
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b085      	sub	sp, #20
	if (q_index > 0) {			// unfinished residual write still needed
 8001108:	dd0b      	ble.n	8001122 <memclose+0x32>
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <memclose+0x12c>)
 800110c:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 8001110:	f852 3b04 	ldr.w	r3, [r2], #4
 8001114:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 8001116:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 8001118:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 800111c:	d1f8      	bne.n	8001110 <memclose+0x20>
		}
		flash_writeword(residual);
 800111e:	f7ff ff17 	bl	8000f50 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 8001122:	4e3f      	ldr	r6, [pc, #252]	; (8001220 <memclose+0x130>)
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <memclose+0x134>)
 8001126:	6832      	ldr	r2, [r6, #0]
 8001128:	4c3f      	ldr	r4, [pc, #252]	; (8001228 <memclose+0x138>)
 800112a:	4d40      	ldr	r5, [pc, #256]	; (800122c <memclose+0x13c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6829      	ldr	r1, [r5, #0]
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	483f      	ldr	r0, [pc, #252]	; (8001230 <memclose+0x140>)
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	f025 f90d 	bl	8026354 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113e:	f015 f969 	bl	8016414 <osDelay>
	res = HAL_FLASH_Lock();
 8001142:	f00b f811 	bl	800c168 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8001146:	2800      	cmp	r0, #0
 8001148:	d14d      	bne.n	80011e6 <memclose+0xf6>
	if (LockFlash() != HAL_OK) {
		printf("eeprom: flash2 failed\n");
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 800114a:	6823      	ldr	r3, [r4, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001150:	682f      	ldr	r7, [r5, #0]
	crc = xcrc32(base, length, xinit);
 8001152:	4619      	mov	r1, r3
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	4638      	mov	r0, r7
 8001158:	f7ff fd46 	bl	8000be8 <xcrc32>
 800115c:	4604      	mov	r4, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 800115e:	9b03      	ldr	r3, [sp, #12]
 8001160:	463a      	mov	r2, r7
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <memclose+0x144>)
 8001164:	4621      	mov	r1, r4
 8001166:	f025 f8f5 	bl	8026354 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <memclose+0x148>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	1c53      	adds	r3, r2, #1
 8001170:	d007      	beq.n	8001182 <memclose+0x92>
 8001172:	42a2      	cmp	r2, r4
 8001174:	d005      	beq.n	8001182 <memclose+0x92>
		printf(
 8001176:	6833      	ldr	r3, [r6, #0]
 8001178:	4621      	mov	r1, r4
 800117a:	4830      	ldr	r0, [pc, #192]	; (800123c <memclose+0x14c>)
 800117c:	f025 f8ea 	bl	8026354 <iprintf>
 8001180:	e027      	b.n	80011d2 <memclose+0xe2>
		osDelay(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f015 f946 	bl	8016414 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001188:	482d      	ldr	r0, [pc, #180]	; (8001240 <memclose+0x150>)
 800118a:	f00b f9db 	bl	800c544 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 800118e:	f00a fff5 	bl	800c17c <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	482a      	ldr	r0, [pc, #168]	; (8001240 <memclose+0x150>)
 8001196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800119a:	bf0b      	itete	eq
 800119c:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80011a0:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 80011a4:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 80011a8:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 80011ac:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 80011b0:	f00b f8f0 	bl	800c394 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 80011b4:	bb38      	cbnz	r0, 8001206 <memclose+0x116>
		res = HAL_FLASH_OB_Launch();
 80011b6:	f00a fffd 	bl	800c1b4 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 80011ba:	b9f8      	cbnz	r0, 80011fc <memclose+0x10c>
		HAL_FLASH_OB_Lock();
 80011bc:	f00a fff0 	bl	800c1a0 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <memclose+0x154>)
 80011c2:	f025 f963 	bl	802648c <puts>
		osDelay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f015 f924 	bl	8016414 <osDelay>
		rebootme(0);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f002 fdd9 	bl	8003d84 <rebootme>
	http_downloading = NOT_LOADING;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <memclose+0x158>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	b005      	add	sp, #20
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flash_abort = 0;
 80011dc:	2200      	movs	r2, #0
		http_downloading = NOT_LOADING;
 80011de:	491a      	ldr	r1, [pc, #104]	; (8001248 <memclose+0x158>)
		flash_abort = 0;
 80011e0:	601a      	str	r2, [r3, #0]
		http_downloading = NOT_LOADING;
 80011e2:	600a      	str	r2, [r1, #0]
}
 80011e4:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <memclose+0x15c>)
 80011e8:	f025 f950 	bl	802648c <puts>
		printflasherr();
 80011ec:	f7ff fd56 	bl	8000c9c <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <memclose+0x160>)
 80011f2:	f025 f94b 	bl	802648c <puts>
		return ((void*) 0);
 80011f6:	2000      	movs	r0, #0
}
 80011f8:	b005      	add	sp, #20
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 80011fc:	4601      	mov	r1, r0
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <memclose+0x164>)
 8001200:	f025 f8a8 	bl	8026354 <iprintf>
 8001204:	e7da      	b.n	80011bc <memclose+0xcc>
			printf("memclose: failed to OBProgram %d\n", res);
 8001206:	4601      	mov	r1, r0
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <memclose+0x168>)
 800120a:	f025 f8a3 	bl	8026354 <iprintf>
 800120e:	e7d2      	b.n	80011b6 <memclose+0xc6>
 8001210:	20000854 	.word	0x20000854
 8001214:	20000008 	.word	0x20000008
 8001218:	20000874 	.word	0x20000874
 800121c:	20000864 	.word	0x20000864
 8001220:	20001670 	.word	0x20001670
 8001224:	2000085c 	.word	0x2000085c
 8001228:	20000858 	.word	0x20000858
 800122c:	20000004 	.word	0x20000004
 8001230:	0802ae80 	.word	0x0802ae80
 8001234:	0802afe0 	.word	0x0802afe0
 8001238:	20000850 	.word	0x20000850
 800123c:	0802aef0 	.word	0x0802aef0
 8001240:	20000830 	.word	0x20000830
 8001244:	0802afa4 	.word	0x0802afa4
 8001248:	200018bc 	.word	0x200018bc
 800124c:	0802abf8 	.word	0x0802abf8
 8001250:	0802aed8 	.word	0x0802aed8
 8001254:	0802af80 	.word	0x0802af80
 8001258:	0802af5c 	.word	0x0802af5c

0800125c <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <vApplicationMallocFailedHook>:
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <vApplicationGetIdleTaskMemory+0x18>)
{
 800126a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800126c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001272:	4c04      	ldr	r4, [pc, #16]	; (8001284 <vApplicationGetIdleTaskMemory+0x1c>)
 8001274:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001276:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000c78 	.word	0x20000c78
 8001284:	20000878 	.word	0x20000878

08001288 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <vApplicationGetTimerTaskMemory+0x18>)
{
 800128a:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800128c:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001292:	4c04      	ldr	r4, [pc, #16]	; (80012a4 <vApplicationGetTimerTaskMemory+0x1c>)
 8001294:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001296:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000152c 	.word	0x2000152c
 80012a4:	20000d2c 	.word	0x20000d2c

080012a8 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	4770      	bx	lr

080012ac <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80012ac:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 80012ae:	2000      	movs	r0, #0
	http_content_len = content_len;
 80012b0:	4b01      	ldr	r3, [pc, #4]	; (80012b8 <RecvHttpHeaderCallback+0xc>)
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20001674 	.word	0x20001674

080012bc <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012bc:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 80012be:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012c0:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 80012c2:	b158      	cbz	r0, 80012dc <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 80012c4:	1d21      	adds	r1, r4, #4
 80012c6:	42a9      	cmp	r1, r5
 80012c8:	d001      	beq.n	80012ce <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012ca:	682b      	ldr	r3, [r5, #0]
 80012cc:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012ce:	8922      	ldrh	r2, [r4, #8]
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <httpc_get_internal_addr+0x30>)
}
 80012d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012d8:	f01b bc2c 	b.w	801cb34 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <httpc_get_internal_addr+0x34>)
 80012de:	f240 1299 	movw	r2, #409	; 0x199
 80012e2:	4904      	ldr	r1, [pc, #16]	; (80012f4 <httpc_get_internal_addr+0x38>)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <httpc_get_internal_addr+0x3c>)
 80012e6:	f025 f835 	bl	8026354 <iprintf>
 80012ea:	e7eb      	b.n	80012c4 <httpc_get_internal_addr+0x8>
 80012ec:	0800173d 	.word	0x0800173d
 80012f0:	0802b00c 	.word	0x0802b00c
 80012f4:	0802b028 	.word	0x0802b028
 80012f8:	0802b034 	.word	0x0802b034

080012fc <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4604      	mov	r4, r0
	if (req->request != NULL) {
 8001300:	6900      	ldr	r0, [r0, #16]
 8001302:	b118      	cbz	r0, 800130c <httpc_free_state+0x10>
		pbuf_free(req->request);
 8001304:	f01a ff5c 	bl	801c1c0 <pbuf_free>
		req->request = NULL;
 8001308:	2300      	movs	r3, #0
 800130a:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 800130c:	6960      	ldr	r0, [r4, #20]
 800130e:	b118      	cbz	r0, 8001318 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 8001310:	f01a ff56 	bl	801c1c0 <pbuf_free>
		req->rx_hdrs = NULL;
 8001314:	2300      	movs	r3, #0
 8001316:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8001318:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 800131a:	4620      	mov	r0, r4
 800131c:	f019 fea4 	bl	801b068 <mem_free>
	if (tpcb != NULL) {
 8001320:	b1c5      	cbz	r5, 8001354 <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 8001322:	2100      	movs	r1, #0
 8001324:	4628      	mov	r0, r5
 8001326:	f01b fd0b 	bl	801cd40 <tcp_arg>
		altcp_recv(tpcb, NULL);
 800132a:	2100      	movs	r1, #0
 800132c:	4628      	mov	r0, r5
 800132e:	f01b fd0b 	bl	801cd48 <tcp_recv>
		altcp_err(tpcb, NULL);
 8001332:	2100      	movs	r1, #0
 8001334:	4628      	mov	r0, r5
 8001336:	f01b fd3f 	bl	801cdb8 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	4628      	mov	r0, r5
 800133e:	4611      	mov	r1, r2
 8001340:	f01b fd5c 	bl	801cdfc <tcp_poll>
		altcp_sent(tpcb, NULL);
 8001344:	4628      	mov	r0, r5
 8001346:	2100      	movs	r1, #0
 8001348:	f01b fd1a 	bl	801cd80 <tcp_sent>
		r = altcp_close(tpcb);
 800134c:	4628      	mov	r0, r5
 800134e:	f01c fbb3 	bl	801dab8 <tcp_close>
		if (r != ERR_OK) {
 8001352:	b908      	cbnz	r0, 8001358 <httpc_free_state+0x5c>
	return ERR_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001358:	4628      	mov	r0, r5
 800135a:	f01c f9b5 	bl	801d6c8 <tcp_abort>
			return ERR_ABRT;
 800135e:	f06f 000c 	mvn.w	r0, #12
}
 8001362:	bd38      	pop	{r3, r4, r5, pc}

08001364 <HttpClientFileReceiveCallback>:

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
}

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001364:	b510      	push	{r4, lr}
	char *buf;
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

	if (http_downloading == FLASH_LOADING) {
 8001366:	4c08      	ldr	r4, [pc, #32]	; (8001388 <HttpClientFileReceiveCallback+0x24>)
 8001368:	6824      	ldr	r4, [r4, #0]
 800136a:	2c01      	cmp	r4, #1
 800136c:	d003      	beq.n	8001376 <HttpClientFileReceiveCallback+0x12>
		stm_rx_callback(arg, pcb, p, err);
	} else if (http_downloading == NXT_LOADING) {
 800136e:	2c03      	cmp	r4, #3
 8001370:	d005      	beq.n	800137e <HttpClientFileReceiveCallback+0x1a>
		nxt_rx_callback(arg, pcb, p, err);
	}

	return (0);
}
 8001372:	2000      	movs	r0, #0
 8001374:	bd10      	pop	{r4, pc}
		stm_rx_callback(arg, pcb, p, err);
 8001376:	f000 fd99 	bl	8001eac <stm_rx_callback>
}
 800137a:	2000      	movs	r0, #0
 800137c:	bd10      	pop	{r4, pc}
		nxt_rx_callback(arg, pcb, p, err);
 800137e:	f004 fee7 	bl	8006150 <nxt_rx_callback>
}
 8001382:	2000      	movs	r0, #0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop
 8001388:	200018bc 	.word	0x200018bc

0800138c <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	460c      	mov	r4, r1
 8001394:	461d      	mov	r5, r3
 8001396:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 800139a:	b968      	cbnz	r0, 80013b8 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 800139c:	2900      	cmp	r1, #0
 800139e:	d032      	beq.n	8001406 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013a2:	462b      	mov	r3, r5
 80013a4:	4641      	mov	r1, r8
 80013a6:	4638      	mov	r0, r7
 80013a8:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 80013ae:	b004      	add	sp, #16
 80013b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013b4:	f025 b984 	b.w	80266c0 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b8:	4616      	mov	r6, r2
 80013ba:	b1e1      	cbz	r1, 80013f6 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 80013bc:	2e50      	cmp	r6, #80	; 0x50
 80013be:	d00d      	beq.n	80013dc <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 80013c0:	4623      	mov	r3, r4
 80013c2:	9403      	str	r4, [sp, #12]
 80013c4:	4c14      	ldr	r4, [pc, #80]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013c6:	4641      	mov	r1, r8
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <httpc_create_request_string.constprop.0.isra.0+0x94>)
 80013ca:	4638      	mov	r0, r7
 80013cc:	9501      	str	r5, [sp, #4]
 80013ce:	9600      	str	r6, [sp, #0]
 80013d0:	9402      	str	r4, [sp, #8]
 80013d2:	f025 f975 	bl	80266c0 <sniprintf>
}
 80013d6:	b004      	add	sp, #16
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013de:	4641      	mov	r1, r8
 80013e0:	4623      	mov	r3, r4
 80013e2:	4638      	mov	r0, r7
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 80013e8:	9402      	str	r4, [sp, #8]
 80013ea:	9500      	str	r5, [sp, #0]
 80013ec:	f025 f968 	bl	80266c0 <sniprintf>
}
 80013f0:	b004      	add	sp, #16
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013f8:	f240 12db 	movw	r2, #475	; 0x1db
 80013fc:	490b      	ldr	r1, [pc, #44]	; (800142c <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8001400:	f024 ffa8 	bl	8026354 <iprintf>
 8001404:	e7da      	b.n	80013bc <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001408:	f240 12e3 	movw	r2, #483	; 0x1e3
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800140e:	4808      	ldr	r0, [pc, #32]	; (8001430 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8001410:	f024 ffa0 	bl	8026354 <iprintf>
 8001414:	e7c4      	b.n	80013a0 <httpc_create_request_string.constprop.0.isra.0+0x14>
 8001416:	bf00      	nop
 8001418:	0802b0cc 	.word	0x0802b0cc
 800141c:	0802b15c 	.word	0x0802b15c
 8001420:	0802b070 	.word	0x0802b070
 8001424:	0802b104 	.word	0x0802b104
 8001428:	0802b00c 	.word	0x0802b00c
 800142c:	0802b05c 	.word	0x0802b05c
 8001430:	0802b034 	.word	0x0802b034

08001434 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001438:	b085      	sub	sp, #20
 800143a:	460d      	mov	r5, r1
 800143c:	4690      	mov	r8, r2
 800143e:	461e      	mov	r6, r3
 8001440:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8001444:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001446:	f1ba 0f00 	cmp.w	sl, #0
 800144a:	d063      	beq.n	8001514 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 800144c:	f04f 0900 	mov.w	r9, #0
 8001450:	4653      	mov	r3, sl
 8001452:	4632      	mov	r2, r6
 8001454:	4641      	mov	r1, r8
 8001456:	46b3      	mov	fp, r6
 8001458:	e9cd 9900 	strd	r9, r9, [sp]
 800145c:	79a8      	ldrb	r0, [r5, #6]
 800145e:	f7ff ff95 	bl	800138c <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001462:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001466:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001468:	4298      	cmp	r0, r3
 800146a:	d861      	bhi.n	8001530 <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 800146c:	2034      	movs	r0, #52	; 0x34
 800146e:	f019 ffb7 	bl	801b3e0 <mem_malloc>
	if (req == NULL) {
 8001472:	4604      	mov	r4, r0
 8001474:	2800      	cmp	r0, #0
 8001476:	d064      	beq.n	8001542 <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001478:	4649      	mov	r1, r9
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	f023 ffcc 	bl	8025418 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001480:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001482:	2364      	movs	r3, #100	; 0x64
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001484:	f107 0901 	add.w	r9, r7, #1
 8001488:	f44f 7220 	mov.w	r2, #640	; 0x280
 800148c:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001490:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001492:	f01a fcc3 	bl	801be1c <pbuf_alloc>
 8001496:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 8001498:	2800      	cmp	r0, #0
 800149a:	d043      	beq.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d140      	bne.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 80014a8:	f01c fa2e 	bl	801d908 <tcp_new>
 80014ac:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d038      	beq.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014b2:	79ab      	ldrb	r3, [r5, #6]
 80014b4:	bb63      	cbnz	r3, 8001510 <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 80014b6:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014b8:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 80014ba:	f01b fc41 	bl	801cd40 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <httpc_init_connection_common.constprop.0+0x114>)
 80014c0:	6820      	ldr	r0, [r4, #0]
 80014c2:	f01b fc41 	bl	801cd48 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 80014c6:	4921      	ldr	r1, [pc, #132]	; (800154c <httpc_init_connection_common.constprop.0+0x118>)
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	f01b fc75 	bl	801cdb8 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 80014ce:	2203      	movs	r2, #3
 80014d0:	491f      	ldr	r1, [pc, #124]	; (8001550 <httpc_init_connection_common.constprop.0+0x11c>)
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	f01b fc92 	bl	801cdfc <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 80014d8:	491e      	ldr	r1, [pc, #120]	; (8001554 <httpc_init_connection_common.constprop.0+0x120>)
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f01b fc50 	bl	801cd80 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014e0:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 80014e4:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014e6:	4653      	mov	r3, sl
 80014e8:	465a      	mov	r2, fp
 80014ea:	4641      	mov	r1, r8
 80014ec:	6840      	ldr	r0, [r0, #4]
 80014ee:	9000      	str	r0, [sp, #0]
 80014f0:	79a8      	ldrb	r0, [r5, #6]
 80014f2:	f7ff ff4b 	bl	800138c <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 80014f6:	4287      	cmp	r7, r0
 80014f8:	d11d      	bne.n	8001536 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 80014fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 80014fc:	2000      	movs	r0, #0
	req->conn_settings = settings;
 80014fe:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 8001502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001504:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8001506:	9b03      	ldr	r3, [sp, #12]
 8001508:	601c      	str	r4, [r3, #0]
}
 800150a:	b005      	add	sp, #20
 800150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001510:	88ae      	ldrh	r6, [r5, #4]
 8001512:	e7d0      	b.n	80014b6 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <httpc_init_connection_common.constprop.0+0x124>)
 8001516:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800151a:	4910      	ldr	r1, [pc, #64]	; (800155c <httpc_init_connection_common.constprop.0+0x128>)
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <httpc_init_connection_common.constprop.0+0x12c>)
 800151e:	f024 ff19 	bl	8026354 <iprintf>
 8001522:	e793      	b.n	800144c <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fee9 	bl	80012fc <httpc_free_state>
		return ERR_MEM;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	e7ec      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 8001530:	f06f 0005 	mvn.w	r0, #5
 8001534:	e7e9      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fee0 	bl	80012fc <httpc_free_state>
		return ERR_VAL;
 800153c:	f06f 0005 	mvn.w	r0, #5
 8001540:	e7e3      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	e7e0      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
 8001548:	080018cd 	.word	0x080018cd
 800154c:	080015f9 	.word	0x080015f9
 8001550:	08001891 	.word	0x08001891
 8001554:	080012a9 	.word	0x080012a9
 8001558:	0802b00c 	.word	0x0802b00c
 800155c:	0802b1ac 	.word	0x0802b1ac
 8001560:	0802b034 	.word	0x0802b034

08001564 <HttpClientPageResultCallback>:
		err_t err) {
 8001564:	b530      	push	{r4, r5, lr}
 8001566:	b083      	sub	sp, #12
 8001568:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 800156c:	b949      	cbnz	r1, 8001582 <HttpClientPageResultCallback+0x1e>
	if (err != ERR_OK) {
 800156e:	b9d5      	cbnz	r5, 80015a6 <HttpClientPageResultCallback+0x42>
 8001570:	4c18      	ldr	r4, [pc, #96]	; (80015d4 <HttpClientPageResultCallback+0x70>)
	returnpage(rxbuffer, down_total, err);
 8001572:	462a      	mov	r2, r5
 8001574:	6821      	ldr	r1, [r4, #0]
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HttpClientPageResultCallback+0x74>)
}
 8001578:	b003      	add	sp, #12
 800157a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 800157e:	f007 bb9d 	b.w	8008cbc <returnpage>
 8001582:	2909      	cmp	r1, #9
 8001584:	460c      	mov	r4, r1
	switch (err) {
 8001586:	d823      	bhi.n	80015d0 <HttpClientPageResultCallback+0x6c>
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HttpClientPageResultCallback+0x78>)
 800158a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 800158e:	4611      	mov	r1, r2
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <HttpClientPageResultCallback+0x7c>)
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	f024 fede 	bl	8026354 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001598:	9a01      	ldr	r2, [sp, #4]
 800159a:	4621      	mov	r1, r4
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <HttpClientPageResultCallback+0x80>)
 800159e:	f024 fed9 	bl	8026354 <iprintf>
	if (err != ERR_OK) {
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	d0e4      	beq.n	8001570 <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015a6:	f105 0310 	add.w	r3, r5, #16
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d905      	bls.n	80015bc <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80015b0:	4c08      	ldr	r4, [pc, #32]	; (80015d4 <HttpClientPageResultCallback+0x70>)
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <HttpClientPageResultCallback+0x84>)
 80015b4:	6821      	ldr	r1, [r4, #0]
 80015b6:	f024 fecd 	bl	8026354 <iprintf>
 80015ba:	e7da      	b.n	8001572 <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015bc:	4269      	negs	r1, r5
 80015be:	4c05      	ldr	r4, [pc, #20]	; (80015d4 <HttpClientPageResultCallback+0x70>)
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HttpClientPageResultCallback+0x88>)
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <HttpClientPageResultCallback+0x8c>)
 80015ca:	f024 fec3 	bl	8026354 <iprintf>
}
 80015ce:	e7d0      	b.n	8001572 <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015d0:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HttpClientPageResultCallback+0x90>)
 80015d2:	e7dc      	b.n	800158e <HttpClientPageResultCallback+0x2a>
 80015d4:	20001670 	.word	0x20001670
 80015d8:	20001678 	.word	0x20001678
 80015dc:	0802b57c 	.word	0x0802b57c
 80015e0:	0802b1d4 	.word	0x0802b1d4
 80015e4:	0802b1e8 	.word	0x0802b1e8
 80015e8:	0802b210 	.word	0x0802b210
 80015ec:	0802b5a4 	.word	0x0802b5a4
 80015f0:	0802b230 	.word	0x0802b230
 80015f4:	0802b1b8 	.word	0x0802b1b8

080015f8 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4604      	mov	r4, r0
 80015fc:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 8001600:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 8001602:	f024 fea7 	bl	8026354 <iprintf>
	if (req != NULL) {
 8001606:	b184      	cbz	r4, 800162a <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001608:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 800160a:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 800160c:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800160e:	b132      	cbz	r2, 800161e <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001610:	6896      	ldr	r6, [r2, #8]
 8001612:	b126      	cbz	r6, 800161e <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001616:	2104      	movs	r1, #4
 8001618:	9500      	str	r5, [sp, #0]
 800161a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800161c:	47b0      	blx	r6
		return httpc_free_state(req);
 800161e:	4620      	mov	r0, r4
}
 8001620:	b002      	add	sp, #8
 8001622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001626:	f7ff be69 	b.w	80012fc <httpc_free_state>
}
 800162a:	b002      	add	sp, #8
 800162c:	bd70      	pop	{r4, r5, r6, pc}
 800162e:	bf00      	nop
 8001630:	0802b250 	.word	0x0802b250

08001634 <HttpClientFileResultCallback>:
		err_t err) {
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
	http_downloading = NOT_LOADING;		// whatever the result
 8001636:	4825      	ldr	r0, [pc, #148]	; (80016cc <HttpClientFileResultCallback+0x98>)
		err_t err) {
 8001638:	b083      	sub	sp, #12
	http_downloading = NOT_LOADING;		// whatever the result
 800163a:	2400      	movs	r4, #0
		err_t err) {
 800163c:	4616      	mov	r6, r2
 800163e:	461d      	mov	r5, r3
 8001640:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	http_downloading = NOT_LOADING;		// whatever the result
 8001644:	6004      	str	r4, [r0, #0]
	if (httpc_result != HTTPC_RESULT_OK) {
 8001646:	b971      	cbnz	r1, 8001666 <HttpClientFileResultCallback+0x32>
	if (err != ERR_OK) {
 8001648:	2f00      	cmp	r7, #0
 800164a:	d13d      	bne.n	80016c8 <HttpClientFileResultCallback+0x94>
	if (flash_memptr != 0) {
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HttpClientFileResultCallback+0x9c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b10b      	cbz	r3, 8001656 <HttpClientFileResultCallback+0x22>
		memclose();
 8001652:	f7ff fd4d 	bl	80010f0 <memclose>
	printf("HttpClientFileResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8001656:	4632      	mov	r2, r6
 8001658:	4629      	mov	r1, r5
 800165a:	481e      	ldr	r0, [pc, #120]	; (80016d4 <HttpClientFileResultCallback+0xa0>)
}
 800165c:	b003      	add	sp, #12
 800165e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	printf("HttpClientFileResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8001662:	f024 be77 	b.w	8026354 <iprintf>
 8001666:	2909      	cmp	r1, #9
 8001668:	460c      	mov	r4, r1
	switch (err) {
 800166a:	d821      	bhi.n	80016b0 <HttpClientFileResultCallback+0x7c>
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HttpClientFileResultCallback+0xa4>)
 800166e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 8001672:	4611      	mov	r1, r2
 8001674:	4819      	ldr	r0, [pc, #100]	; (80016dc <HttpClientFileResultCallback+0xa8>)
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	f024 fe6c 	bl	8026354 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 800167c:	9a01      	ldr	r2, [sp, #4]
 800167e:	4621      	mov	r1, r4
 8001680:	4817      	ldr	r0, [pc, #92]	; (80016e0 <HttpClientFileResultCallback+0xac>)
 8001682:	f024 fe67 	bl	8026354 <iprintf>
		flash_memptr = 0;
 8001686:	4c12      	ldr	r4, [pc, #72]	; (80016d0 <HttpClientFileResultCallback+0x9c>)
 8001688:	2300      	movs	r3, #0
		nxt_abort = 1;
 800168a:	2201      	movs	r2, #1
		flash_memptr = 0;
 800168c:	6023      	str	r3, [r4, #0]
		nxt_abort = 1;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HttpClientFileResultCallback+0xb0>)
 8001690:	601a      	str	r2, [r3, #0]
	if (err != ERR_OK) {
 8001692:	2f00      	cmp	r7, #0
 8001694:	d0df      	beq.n	8001656 <HttpClientFileResultCallback+0x22>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b10      	cmp	r3, #16
 800169e:	d909      	bls.n	80016b4 <HttpClientFileResultCallback+0x80>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HttpClientFileResultCallback+0xb4>)
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <HttpClientFileResultCallback+0xb8>)
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	f024 fe55 	bl	8026354 <iprintf>
		flash_memptr = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	6023      	str	r3, [r4, #0]
	if (flash_memptr != 0) {
 80016ae:	e7d2      	b.n	8001656 <HttpClientFileResultCallback+0x22>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HttpClientFileResultCallback+0xbc>)
 80016b2:	e7de      	b.n	8001672 <HttpClientFileResultCallback+0x3e>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80016b4:	4279      	negs	r1, r7
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HttpClientFileResultCallback+0xc0>)
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HttpClientFileResultCallback+0xb4>)
 80016ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <HttpClientFileResultCallback+0xc4>)
 80016c2:	f024 fe47 	bl	8026354 <iprintf>
}
 80016c6:	e7f0      	b.n	80016aa <HttpClientFileResultCallback+0x76>
 80016c8:	4c01      	ldr	r4, [pc, #4]	; (80016d0 <HttpClientFileResultCallback+0x9c>)
 80016ca:	e7e4      	b.n	8001696 <HttpClientFileResultCallback+0x62>
 80016cc:	200018bc 	.word	0x200018bc
 80016d0:	2000085c 	.word	0x2000085c
 80016d4:	0802b28c 	.word	0x0802b28c
 80016d8:	0802b57c 	.word	0x0802b57c
 80016dc:	0802b1d4 	.word	0x0802b1d4
 80016e0:	0802b264 	.word	0x0802b264
 80016e4:	200030e0 	.word	0x200030e0
 80016e8:	20001670 	.word	0x20001670
 80016ec:	0802b210 	.word	0x0802b210
 80016f0:	0802b1b8 	.word	0x0802b1b8
 80016f4:	0802b5a4 	.word	0x0802b5a4
 80016f8:	0802b230 	.word	0x0802b230

080016fc <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 80016fc:	b530      	push	{r4, r5, lr}
 80016fe:	4614      	mov	r4, r2
 8001700:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 8001702:	b1b1      	cbz	r1, 8001732 <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fdd9 	bl	80012bc <httpc_get_internal_addr>
		if (err == ERR_OK) {
 800170a:	b180      	cbz	r0, 800172e <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 800170c:	2102      	movs	r1, #2
	if (req != NULL) {
 800170e:	b174      	cbz	r4, 800172e <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 8001710:	6a23      	ldr	r3, [r4, #32]
 8001712:	b133      	cbz	r3, 8001722 <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001714:	689d      	ldr	r5, [r3, #8]
 8001716:	b125      	cbz	r5, 8001722 <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001718:	9000      	str	r0, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001720:	47a8      	blx	r5
		return httpc_free_state(req);
 8001722:	4620      	mov	r0, r4
}
 8001724:	b003      	add	sp, #12
 8001726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800172a:	f7ff bde7 	b.w	80012fc <httpc_free_state>
}
 800172e:	b003      	add	sp, #12
 8001730:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 8001732:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001734:	f06f 000f 	mvn.w	r0, #15
 8001738:	e7e9      	b.n	800170e <httpc_dns_found+0x12>
 800173a:	bf00      	nop

0800173c <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800173c:	6901      	ldr	r1, [r0, #16]
 800173e:	2301      	movs	r3, #1
 8001740:	894a      	ldrh	r2, [r1, #10]
 8001742:	6849      	ldr	r1, [r1, #4]
 8001744:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001746:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001748:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 800174a:	b082      	sub	sp, #8
 800174c:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	f01e f8ce 	bl	801f8f0 <tcp_write>
	if (r != ERR_OK) {
 8001754:	4605      	mov	r5, r0
 8001756:	b948      	cbnz	r0, 800176c <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 8001758:	6920      	ldr	r0, [r4, #16]
 800175a:	f01a fd31 	bl	801c1c0 <pbuf_free>
	altcp_output(req->pcb);
 800175e:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 8001760:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 8001762:	f01e fedf 	bl	8020524 <tcp_output>
}
 8001766:	4628      	mov	r0, r5
 8001768:	b002      	add	sp, #8
 800176a:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 800176c:	6a23      	ldr	r3, [r4, #32]
 800176e:	b13b      	cbz	r3, 8001780 <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 8001770:	689e      	ldr	r6, [r3, #8]
 8001772:	b12e      	cbz	r6, 8001780 <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001774:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001776:	2300      	movs	r3, #0
 8001778:	9000      	str	r0, [sp, #0]
 800177a:	2107      	movs	r1, #7
 800177c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800177e:	47b0      	blx	r6
		return httpc_free_state(req);
 8001780:	4620      	mov	r0, r4
}
 8001782:	b002      	add	sp, #8
 8001784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001788:	f7ff bdb8 	b.w	80012fc <httpc_free_state>

0800178c <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 800178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001790:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001792:	2a00      	cmp	r2, #0
 8001794:	d048      	beq.n	8001828 <HttpClientPageReceiveCallback+0x9c>
	if (err != ERR_OK) {
 8001796:	2b00      	cmp	r3, #0
 8001798:	d14f      	bne.n	800183a <HttpClientPageReceiveCallback+0xae>
 800179a:	4688      	mov	r8, r1
 800179c:	4617      	mov	r7, r2
 800179e:	4614      	mov	r4, r2
 80017a0:	4d33      	ldr	r5, [pc, #204]	; (8001870 <HttpClientPageReceiveCallback+0xe4>)
 80017a2:	4e34      	ldr	r6, [pc, #208]	; (8001874 <HttpClientPageReceiveCallback+0xe8>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80017a4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800188c <HttpClientPageReceiveCallback+0x100>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 80017a8:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 80017aa:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 80017ae:	b1bb      	cbz	r3, 80017e0 <HttpClientPageReceiveCallback+0x54>
 80017b0:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017b2:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017b6:	469e      	mov	lr, r3
 80017b8:	e007      	b.n	80017ca <HttpClientPageReceiveCallback+0x3e>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ba:	602a      	str	r2, [r5, #0]
 80017bc:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 80017c0:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017c2:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 80017c4:	8962      	ldrh	r2, [r4, #10]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	da0a      	bge.n	80017e0 <HttpClientPageReceiveCallback+0x54>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017ca:	6828      	ldr	r0, [r5, #0]
 80017cc:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ce:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017d2:	d9f2      	bls.n	80017ba <HttpClientPageReceiveCallback+0x2e>
		for (i = 0; i < q->len; i++) {
 80017d4:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017d6:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 80017da:	8962      	ldrh	r2, [r4, #10]
 80017dc:	4293      	cmp	r3, r2
 80017de:	dbf4      	blt.n	80017ca <HttpClientPageReceiveCallback+0x3e>
			}
		}

		altcp_recved(pcb, p->tot_len);
 80017e0:	8939      	ldrh	r1, [r7, #8]
 80017e2:	4640      	mov	r0, r8
 80017e4:	f01b f96c 	bl	801cac0 <tcp_recved>
		err = pbuf_free_callback(p);
 80017e8:	4638      	mov	r0, r7
 80017ea:	f017 fb19 	bl	8018e20 <pbuf_free_callback>
		if (err != ERR_OK) {
 80017ee:	4682      	mov	sl, r0
 80017f0:	b920      	cbnz	r0, 80017fc <HttpClientPageReceiveCallback+0x70>
	for (q = p; q != NULL; q = q->next) {
 80017f2:	6824      	ldr	r4, [r4, #0]
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	d1d7      	bne.n	80017a8 <HttpClientPageReceiveCallback+0x1c>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
}
 80017f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			putchar('!');
 80017fc:	2021      	movs	r0, #33	; 0x21
 80017fe:	f024 fdc1 	bl	8026384 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001802:	f10a 0310 	add.w	r3, sl, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b10      	cmp	r3, #16
 800180a:	d904      	bls.n	8001816 <HttpClientPageReceiveCallback+0x8a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 800180c:	6829      	ldr	r1, [r5, #0]
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <HttpClientPageReceiveCallback+0xec>)
 8001810:	f024 fda0 	bl	8026354 <iprintf>
 8001814:	e7ed      	b.n	80017f2 <HttpClientPageReceiveCallback+0x66>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001816:	f1ca 0100 	rsb	r1, sl, #0
 800181a:	682a      	ldr	r2, [r5, #0]
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <HttpClientPageReceiveCallback+0xf0>)
 800181e:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 8001822:	f024 fd97 	bl	8026354 <iprintf>
}
 8001826:	e7e4      	b.n	80017f2 <HttpClientPageReceiveCallback+0x66>
	LWIP_ASSERT("p != NULL", p != NULL);
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HttpClientPageReceiveCallback+0xf4>)
 800182a:	f240 421a 	movw	r2, #1050	; 0x41a
 800182e:	4915      	ldr	r1, [pc, #84]	; (8001884 <HttpClientPageReceiveCallback+0xf8>)
 8001830:	4815      	ldr	r0, [pc, #84]	; (8001888 <HttpClientPageReceiveCallback+0xfc>)
 8001832:	f024 fd8f 	bl	8026354 <iprintf>
	if (err != ERR_OK) {
 8001836:	2c00      	cmp	r4, #0
 8001838:	d0de      	beq.n	80017f8 <HttpClientPageReceiveCallback+0x6c>
		putchar('^');
 800183a:	205e      	movs	r0, #94	; 0x5e
 800183c:	f024 fda2 	bl	8026384 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001840:	f104 0310 	add.w	r3, r4, #16
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b10      	cmp	r3, #16
 8001848:	d906      	bls.n	8001858 <HttpClientPageReceiveCallback+0xcc>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HttpClientPageReceiveCallback+0xe4>)
 800184c:	480a      	ldr	r0, [pc, #40]	; (8001878 <HttpClientPageReceiveCallback+0xec>)
 800184e:	6819      	ldr	r1, [r3, #0]
}
 8001850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001854:	f024 bd7e 	b.w	8026354 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001858:	4261      	negs	r1, r4
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HttpClientPageReceiveCallback+0x100>)
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HttpClientPageReceiveCallback+0xe4>)
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <HttpClientPageReceiveCallback+0xf0>)
 8001860:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001864:	6812      	ldr	r2, [r2, #0]
}
 8001866:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800186a:	f024 bd73 	b.w	8026354 <iprintf>
 800186e:	bf00      	nop
 8001870:	20001670 	.word	0x20001670
 8001874:	20001678 	.word	0x20001678
 8001878:	0802b210 	.word	0x0802b210
 800187c:	0802b230 	.word	0x0802b230
 8001880:	0802b00c 	.word	0x0802b00c
 8001884:	080468c4 	.word	0x080468c4
 8001888:	0802b034 	.word	0x0802b034
 800188c:	0802b5a4 	.word	0x0802b5a4

08001890 <httpc_tcp_poll>:
	if (req != NULL) {
 8001890:	b1d0      	cbz	r0, 80018c8 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 8001892:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 8001894:	b530      	push	{r4, r5, lr}
 8001896:	4604      	mov	r4, r0
 8001898:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 800189a:	b12b      	cbz	r3, 80018a8 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 800189c:	3b01      	subs	r3, #1
 800189e:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 80018a0:	b113      	cbz	r3, 80018a8 <httpc_tcp_poll+0x18>
}
 80018a2:	2000      	movs	r0, #0
 80018a4:	b003      	add	sp, #12
 80018a6:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	b13b      	cbz	r3, 80018bc <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80018ac:	689d      	ldr	r5, [r3, #8]
 80018ae:	b12d      	cbz	r5, 80018bc <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80018b0:	2300      	movs	r3, #0
 80018b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018b4:	2105      	movs	r1, #5
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018ba:	47a8      	blx	r5
		return httpc_free_state(req);
 80018bc:	4620      	mov	r0, r4
}
 80018be:	b003      	add	sp, #12
 80018c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 80018c4:	f7ff bd1a 	b.w	80012fc <httpc_free_state>
}
 80018c8:	2000      	movs	r0, #0
 80018ca:	4770      	bx	lr

080018cc <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 80018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	4604      	mov	r4, r0
 80018d2:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 80018d4:	4615      	mov	r5, r2
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	f000 80e2 	beq.w	8001aa0 <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80018dc:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 80018e0:	460e      	mov	r6, r1
 80018e2:	461f      	mov	r7, r3
 80018e4:	f1ba 0f02 	cmp.w	sl, #2
 80018e8:	f000 80c8 	beq.w	8001a7c <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 80018ec:	6940      	ldr	r0, [r0, #20]
 80018ee:	b190      	cbz	r0, 8001916 <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 80018f0:	4611      	mov	r1, r2
 80018f2:	f01a fc97 	bl	801c224 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 80018f6:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 80018fa:	f1ba 0f00 	cmp.w	sl, #0
 80018fe:	d00e      	beq.n	800191e <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001900:	f1ba 0f01 	cmp.w	sl, #1
 8001904:	d06e      	beq.n	80019e4 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001906:	f1ba 0f02 	cmp.w	sl, #2
 800190a:	f000 80b7 	beq.w	8001a7c <httpc_tcp_recv+0x1b0>
}
 800190e:	2000      	movs	r0, #0
 8001910:	b009      	add	sp, #36	; 0x24
 8001912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 8001916:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001918:	f1ba 0f00 	cmp.w	sl, #0
 800191c:	d1f0      	bne.n	8001900 <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 800191e:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 8001922:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001926:	4653      	mov	r3, sl
 8001928:	2202      	movs	r2, #2
 800192a:	4989      	ldr	r1, [pc, #548]	; (8001b50 <httpc_tcp_recv+0x284>)
 800192c:	4640      	mov	r0, r8
 800192e:	f01a fe67 	bl	801c600 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 8001932:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001934:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 8001936:	f000 8105 	beq.w	8001b44 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 800193a:	4653      	mov	r3, sl
 800193c:	2201      	movs	r2, #1
 800193e:	4985      	ldr	r1, [pc, #532]	; (8001b54 <httpc_tcp_recv+0x288>)
 8001940:	4640      	mov	r0, r8
 8001942:	f01a fe5d 	bl	801c600 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 8001946:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001948:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 800194a:	f000 80fb 	beq.w	8001b44 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 800194e:	4651      	mov	r1, sl
 8001950:	2305      	movs	r3, #5
 8001952:	4a81      	ldr	r2, [pc, #516]	; (8001b58 <httpc_tcp_recv+0x28c>)
 8001954:	4640      	mov	r0, r8
 8001956:	f01a fe1b 	bl	801c590 <pbuf_memcmp>
 800195a:	2800      	cmp	r0, #0
 800195c:	f040 80f2 	bne.w	8001b44 <httpc_tcp_recv+0x278>
 8001960:	2106      	movs	r1, #6
 8001962:	4640      	mov	r0, r8
 8001964:	f01a fde8 	bl	801c538 <pbuf_get_at>
 8001968:	282e      	cmp	r0, #46	; 0x2e
 800196a:	f040 80eb 	bne.w	8001b44 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 800196e:	2105      	movs	r1, #5
 8001970:	4640      	mov	r0, r8
 8001972:	f01a fde1 	bl	801c538 <pbuf_get_at>
 8001976:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001978:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 800197a:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 800197e:	4640      	mov	r0, r8
 8001980:	f01a fdda 	bl	801c538 <pbuf_get_at>
 8001984:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001986:	f109 0301 	add.w	r3, r9, #1
 800198a:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 800198c:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001990:	4970      	ldr	r1, [pc, #448]	; (8001b54 <httpc_tcp_recv+0x288>)
 8001992:	b29b      	uxth	r3, r3
				*http_version = version;
 8001994:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001996:	4640      	mov	r0, r8
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	f01a fe31 	bl	801c600 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 800199e:	4558      	cmp	r0, fp
 80019a0:	9b02      	ldr	r3, [sp, #8]
 80019a2:	f000 80a2 	beq.w	8001aea <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 80019a6:	eba0 0909 	sub.w	r9, r0, r9
 80019aa:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80019ae:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019b0:	4640      	mov	r0, r8
 80019b2:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80019b4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80019b8:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019bc:	fa1f f289 	uxth.w	r2, r9
 80019c0:	f01a fca2 	bl	801c308 <pbuf_copy_partial>
 80019c4:	4581      	cmp	r9, r0
 80019c6:	f040 80bd 	bne.w	8001b44 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 80019ca:	a804      	add	r0, sp, #16
 80019cc:	f023 fa9e 	bl	8024f0c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 80019d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80019d4:	1e42      	subs	r2, r0, #1
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f200 80b4 	bhi.w	8001b44 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019dc:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 80019de:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019e0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80019e4:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019e8:	2300      	movs	r3, #0
 80019ea:	2204      	movs	r2, #4
 80019ec:	495b      	ldr	r1, [pc, #364]	; (8001b5c <httpc_tcp_recv+0x290>)
 80019ee:	4648      	mov	r0, r9
 80019f0:	f01a fe06 	bl	801c600 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 80019f4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019f8:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 80019fa:	4298      	cmp	r0, r3
 80019fc:	f200 80a5 	bhi.w	8001b4a <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a04:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a08:	2210      	movs	r2, #16
 8001a0a:	4955      	ldr	r1, [pc, #340]	; (8001b60 <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a0e:	4648      	mov	r0, r9
 8001a10:	2300      	movs	r3, #0
 8001a12:	f01a fdf5 	bl	801c600 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001a16:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a18:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001a1a:	d16e      	bne.n	8001afa <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001a1c:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001a20:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001a22:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001a24:	4629      	mov	r1, r5
 8001a26:	f01b f84b 	bl	801cac0 <tcp_recved>
				if (req->conn_settings) {
 8001a2a:	6a23      	ldr	r3, [r4, #32]
 8001a2c:	b1cb      	cbz	r3, 8001a62 <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001a2e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001a32:	f1b8 0f00 	cmp.w	r8, #0
 8001a36:	d014      	beq.n	8001a62 <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	6962      	ldr	r2, [r4, #20]
 8001a42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a44:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001a46:	b160      	cbz	r0, 8001a62 <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001a48:	6a23      	ldr	r3, [r4, #32]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d037      	beq.n	8001abe <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001a4e:	689d      	ldr	r5, [r3, #8]
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	d034      	beq.n	8001abe <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001a54:	8b63      	ldrh	r3, [r4, #26]
 8001a56:	2108      	movs	r1, #8
 8001a58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a5a:	9000      	str	r0, [sp, #0]
 8001a5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a5e:	47a8      	blx	r5
 8001a60:	e02d      	b.n	8001abe <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001a62:	4629      	mov	r1, r5
 8001a64:	6960      	ldr	r0, [r4, #20]
 8001a66:	f01a fb8f 	bl	801c188 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001a6a:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a6c:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001a6e:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a76:	2800      	cmp	r0, #0
 8001a78:	f43f af49 	beq.w	800190e <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001a7c:	8929      	ldrh	r1, [r5, #8]
 8001a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a80:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001a84:	440b      	add	r3, r1
 8001a86:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a88:	f1be 0f00 	cmp.w	lr, #0
 8001a8c:	d026      	beq.n	8001adc <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a8e:	463b      	mov	r3, r7
 8001a90:	462a      	mov	r2, r5
 8001a92:	4631      	mov	r1, r6
 8001a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a96:	46f4      	mov	ip, lr
}
 8001a98:	b009      	add	sp, #36	; 0x24
 8001a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a9e:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001aa0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d010      	beq.n	8001aca <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001aa8:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001aaa:	6a23      	ldr	r3, [r4, #32]
 8001aac:	b13b      	cbz	r3, 8001abe <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001aae:	689d      	ldr	r5, [r3, #8]
 8001ab0:	b12d      	cbz	r5, 8001abe <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	8b63      	ldrh	r3, [r4, #26]
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001abc:	47a8      	blx	r5
		return httpc_free_state(req);
 8001abe:	4620      	mov	r0, r4
}
 8001ac0:	b009      	add	sp, #36	; 0x24
 8001ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001ac6:	f7ff bc19 	b.w	80012fc <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001aca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001acc:	1c4b      	adds	r3, r1, #1
 8001ace:	d012      	beq.n	8001af6 <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001ad0:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001ad2:	42a9      	cmp	r1, r5
 8001ad4:	bf14      	ite	ne
 8001ad6:	2109      	movne	r1, #9
 8001ad8:	2100      	moveq	r1, #0
 8001ada:	e7e6      	b.n	8001aaa <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001adc:	4630      	mov	r0, r6
 8001ade:	f01a ffef 	bl	801cac0 <tcp_recved>
			pbuf_free(p);
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f01a fb6c 	bl	801c1c0 <pbuf_free>
 8001ae8:	e711      	b.n	800190e <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001aea:	9a03      	ldr	r2, [sp, #12]
 8001aec:	eba2 0909 	sub.w	r9, r2, r9
 8001af0:	f109 39ff 	add.w	r9, r9, #4294967295
 8001af4:	e75b      	b.n	80019ae <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001af6:	4611      	mov	r1, r2
 8001af8:	e7d7      	b.n	8001aaa <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001afa:	4603      	mov	r3, r0
 8001afc:	2202      	movs	r2, #2
 8001afe:	4914      	ldr	r1, [pc, #80]	; (8001b50 <httpc_tcp_recv+0x284>)
 8001b00:	4648      	mov	r0, r9
 8001b02:	f01a fd7d 	bl	801c600 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b06:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b08:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b0a:	d087      	beq.n	8001a1c <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b0c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b10:	4648      	mov	r0, r9
 8001b12:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b14:	1b52      	subs	r2, r2, r5
 8001b16:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b18:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b1c:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b1e:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b20:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b22:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b26:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	f01a fbec 	bl	801c308 <pbuf_copy_partial>
 8001b30:	4285      	cmp	r5, r0
 8001b32:	f47f af73 	bne.w	8001a1c <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001b36:	a804      	add	r0, sp, #16
 8001b38:	f023 f9e8 	bl	8024f0c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001b3c:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001b3e:	bfa8      	it	ge
 8001b40:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001b42:	e76b      	b.n	8001a1c <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001b44:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b48:	e6da      	b.n	8001900 <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b4a:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b4e:	e6da      	b.n	8001906 <httpc_tcp_recv+0x3a>
 8001b50:	0802b158 	.word	0x0802b158
 8001b54:	0802d9d8 	.word	0x0802d9d8
 8001b58:	0802b2cc 	.word	0x0802b2cc
 8001b5c:	0802b2d4 	.word	0x0802b2d4
 8001b60:	0802b2dc 	.word	0x0802b2dc

08001b64 <httpc_get_file_dns>:
		altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	bf18      	it	ne
 8001b6e:	2a00      	cmpne	r2, #0
 8001b70:	d044      	beq.n	8001bfc <httpc_get_file_dns+0x98>
 8001b72:	4604      	mov	r4, r0
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d041      	beq.n	8001bfc <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001b78:	4610      	mov	r0, r2
 8001b7a:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b7e:	460b      	mov	r3, r1
 8001b80:	9000      	str	r0, [sp, #0]
 8001b82:	4631      	mov	r1, r6
 8001b84:	a807      	add	r0, sp, #28
 8001b86:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	f7ff fc52 	bl	8001434 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001b90:	4605      	mov	r5, r0
 8001b92:	b998      	cbnz	r0, 8001bbc <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001b94:	79b3      	ldrb	r3, [r6, #6]
 8001b96:	b9a3      	cbnz	r3, 8001bc2 <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001b98:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001b9a:	b33e      	cbz	r6, 8001bec <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001b9c:	1d31      	adds	r1, r6, #4
 8001b9e:	4633      	mov	r3, r6
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <httpc_get_file_dns+0xac>)
 8001ba4:	9105      	str	r1, [sp, #20]
 8001ba6:	f018 ffe3 	bl	801ab70 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001baa:	9905      	ldr	r1, [sp, #20]
 8001bac:	4603      	mov	r3, r0
 8001bae:	b1c0      	cbz	r0, 8001be2 <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001bb0:	1d42      	adds	r2, r0, #5
 8001bb2:	d00d      	beq.n	8001bd0 <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001bb4:	9807      	ldr	r0, [sp, #28]
		return err;
 8001bb6:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001bb8:	f7ff fba0 	bl	80012fc <httpc_free_state>
}
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001bc2:	4631      	mov	r1, r6
 8001bc4:	9807      	ldr	r0, [sp, #28]
 8001bc6:	f7ff fb79 	bl	80012bc <httpc_get_internal_addr>
 8001bca:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f1      	bne.n	8001bb4 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f2      	beq.n	8001bbc <httpc_get_file_dns+0x58>
		*connection = req;
 8001bd6:	9b07      	ldr	r3, [sp, #28]
}
 8001bd8:	4628      	mov	r0, r5
		*connection = req;
 8001bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	b008      	add	sp, #32
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001be2:	4630      	mov	r0, r6
 8001be4:	f7ff fb6a 	bl	80012bc <httpc_get_internal_addr>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e7ef      	b.n	8001bcc <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <httpc_get_file_dns+0xb0>)
 8001bee:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001bf2:	4909      	ldr	r1, [pc, #36]	; (8001c18 <httpc_get_file_dns+0xb4>)
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <httpc_get_file_dns+0xb8>)
 8001bf6:	f024 fbad 	bl	8026354 <iprintf>
 8001bfa:	e7cf      	b.n	8001b9c <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <httpc_get_file_dns+0xb0>)
 8001bfe:	f240 2292 	movw	r2, #658	; 0x292
 8001c02:	4907      	ldr	r1, [pc, #28]	; (8001c20 <httpc_get_file_dns+0xbc>)
 8001c04:	f06f 050f 	mvn.w	r5, #15
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <httpc_get_file_dns+0xb8>)
 8001c0a:	f024 fba3 	bl	8026354 <iprintf>
 8001c0e:	e7d5      	b.n	8001bbc <httpc_get_file_dns+0x58>
 8001c10:	080016fd 	.word	0x080016fd
 8001c14:	0802b00c 	.word	0x0802b00c
 8001c18:	0802b028 	.word	0x0802b028
 8001c1c:	0802b034 	.word	0x0802b034
 8001c20:	0802b2f0 	.word	0x0802b2f0

08001c24 <printlwiperr>:
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001c24:	f100 0310 	add.w	r3, r0, #16
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d904      	bls.n	8001c38 <printlwiperr+0x14>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <printlwiperr+0x28>)
 8001c30:	4807      	ldr	r0, [pc, #28]	; (8001c50 <printlwiperr+0x2c>)
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	f024 bb8e 	b.w	8026354 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001c38:	4241      	negs	r1, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <printlwiperr+0x30>)
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <printlwiperr+0x28>)
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <printlwiperr+0x34>)
 8001c40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	f024 bb85 	b.w	8026354 <iprintf>
 8001c4a:	bf00      	nop
 8001c4c:	20001670 	.word	0x20001670
 8001c50:	0802b210 	.word	0x0802b210
 8001c54:	0802b5a4 	.word	0x0802b5a4
 8001c58:	0802b230 	.word	0x0802b230

08001c5c <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001c62:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001c64:	4c1d      	ldr	r4, [pc, #116]	; (8001cdc <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c66:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001c68:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c6a:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001c6c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d04 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c70:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001c72:	4629      	mov	r1, r5
 8001c74:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001c76:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001c78:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001c7a:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001c7e:	6025      	str	r5, [r4, #0]
 8001c80:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001c82:	f023 fbc9 	bl	8025418 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <http_dlclient+0x88>)
	settings1->result_fn = HttpClientFileResultCallback;

	connection1->timeout_ticks = 1;

	strcpy(domain_name, host);
 8001c88:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001c8a:	4f17      	ldr	r7, [pc, #92]	; (8001ce8 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c8c:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001c8e:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001c90:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001c92:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001c94:	4815      	ldr	r0, [pc, #84]	; (8001cec <http_dlclient+0x90>)
 8001c96:	f024 fdee 	bl	8026876 <strcpy>
	strcpy(rxbuffer, filename);
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <http_dlclient+0x94>)
 8001c9e:	f024 fdea 	bl	8026876 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001ca2:	4914      	ldr	r1, [pc, #80]	; (8001cf4 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <http_dlclient+0x9c>)
 8001ca6:	4623      	mov	r3, r4
	expectedapage = 0;
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001caa:	f8cd 8008 	str.w	r8, [sp, #8]
 8001cae:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001cb0:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb2:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001cb6:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001cb8:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <http_dlclient+0x94>)
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <http_dlclient+0x90>)
 8001cbe:	f7ff ff51 	bl	8001b64 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001cc2:	b910      	cbnz	r0, 8001cca <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001cc4:	b004      	add	sp, #16
 8001cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cca:	4601      	mov	r1, r0
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <http_dlclient+0xa4>)
}
 8001cce:	b004      	add	sp, #16
 8001cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cd4:	f024 bb3e 	b.w	8026354 <iprintf>
 8001cd8:	200015e0 	.word	0x200015e0
 8001cdc:	20001894 	.word	0x20001894
 8001ce0:	200018b4 	.word	0x200018b4
 8001ce4:	080012ad 	.word	0x080012ad
 8001ce8:	08001635 	.word	0x08001635
 8001cec:	20001650 	.word	0x20001650
 8001cf0:	20001678 	.word	0x20001678
 8001cf4:	20001670 	.word	0x20001670
 8001cf8:	08001365 	.word	0x08001365
 8001cfc:	20003480 	.word	0x20003480
 8001d00:	0802b304 	.word	0x0802b304
 8001d04:	20001648 	.word	0x20001648

08001d08 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d0c:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d0e:	4c28      	ldr	r4, [pc, #160]	; (8001db0 <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d12:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d14:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d16:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d18:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d1a:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d1e:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001ddc <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d24:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d26:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d28:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d2a:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d2e:	f023 fb73 	bl	8025418 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d34:	4f22      	ldr	r7, [pc, #136]	; (8001dc0 <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d36:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d38:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d3a:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d3c:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d3e:	4c21      	ldr	r4, [pc, #132]	; (8001dc4 <hc_open+0xbc>)
 8001d40:	7833      	ldrb	r3, [r6, #0]
 8001d42:	5ce2      	ldrb	r2, [r4, r3]
 8001d44:	0751      	lsls	r1, r2, #29
 8001d46:	d101      	bne.n	8001d4c <hc_open+0x44>
 8001d48:	2b2f      	cmp	r3, #47	; 0x2f
 8001d4a:	d126      	bne.n	8001d9a <hc_open+0x92>
		strcpy(domain_name, servername);
 8001d4c:	4631      	mov	r1, r6
 8001d4e:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <hc_open+0xc0>)
 8001d50:	f024 fd91 	bl	8026876 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001d54:	782b      	ldrb	r3, [r5, #0]
 8001d56:	5ce2      	ldrb	r2, [r4, r3]
 8001d58:	0752      	lsls	r2, r2, #29
 8001d5a:	d101      	bne.n	8001d60 <hc_open+0x58>
 8001d5c:	2b2f      	cmp	r3, #47	; 0x2f
 8001d5e:	d118      	bne.n	8001d92 <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001d60:	4629      	mov	r1, r5
 8001d62:	481a      	ldr	r0, [pc, #104]	; (8001dcc <hc_open+0xc4>)
 8001d64:	f024 fd87 	bl	8026876 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
	expectedapage = 1;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <hc_open+0xc8>)
	down_total = 0;
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <hc_open+0xcc>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d6e:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001d72:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <hc_open+0xa8>)
 8001d78:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001d7c:	6004      	str	r4, [r0, #0]
	expectedapage = 1;
 8001d7e:	2401      	movs	r4, #1
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <hc_open+0xd0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <hc_open+0xc4>)
	expectedapage = 1;
 8001d84:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d86:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <hc_open+0xc0>)
 8001d88:	f7ff feec 	bl	8001b64 <httpc_get_file_dns>
			HttpClientPageResultCallback, &connection2);
}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <hc_open+0xc4>)
 8001d94:	222f      	movs	r2, #47	; 0x2f
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	e7e6      	b.n	8001d68 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001d9a:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001de0 <hc_open+0xd8>
 8001d9e:	4e0a      	ldr	r6, [pc, #40]	; (8001dc8 <hc_open+0xc0>)
 8001da0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001da4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da6:	f8dc 3000 	ldr.w	r3, [ip]
 8001daa:	6033      	str	r3, [r6, #0]
 8001dac:	e7d2      	b.n	8001d54 <hc_open+0x4c>
 8001dae:	bf00      	nop
 8001db0:	200018a4 	.word	0x200018a4
 8001db4:	20001614 	.word	0x20001614
 8001db8:	200018b8 	.word	0x200018b8
 8001dbc:	080012ad 	.word	0x080012ad
 8001dc0:	08001565 	.word	0x08001565
 8001dc4:	080470ad 	.word	0x080470ad
 8001dc8:	20001650 	.word	0x20001650
 8001dcc:	20001678 	.word	0x20001678
 8001dd0:	0800178d 	.word	0x0800178d
 8001dd4:	20001670 	.word	0x20001670
 8001dd8:	20003480 	.word	0x20003480
 8001ddc:	2000164c 	.word	0x2000164c
 8001de0:	0802b32c 	.word	0x0802b32c

08001de4 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = NOT_LOADING;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de8:	460c      	mov	r4, r1
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001dea:	4924      	ldr	r1, [pc, #144]	; (8001e7c <httploader+0x98>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001dec:	b084      	sub	sp, #16
	dl_filecrc = 0;
 8001dee:	4e24      	ldr	r6, [pc, #144]	; (8001e80 <httploader+0x9c>)
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001df0:	f001 6101 	and.w	r1, r1, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df4:	4605      	mov	r5, r0
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001df6:	9103      	str	r1, [sp, #12]
	dl_filecrc = 0;
 8001df8:	2100      	movs	r1, #0
 8001dfa:	6031      	str	r1, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001dfc:	9903      	ldr	r1, [sp, #12]
 8001dfe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e02:	d033      	beq.n	8001e6c <httploader+0x88>
 8001e04:	4f1f      	ldr	r7, [pc, #124]	; (8001e84 <httploader+0xa0>)
 8001e06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e0a:	f04f 0841 	mov.w	r8, #65	; 0x41
		dl_filecrc = crc1;
 8001e0e:	6032      	str	r2, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e10:	6039      	str	r1, [r7, #0]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e12:	4629      	mov	r1, r5
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	481c      	ldr	r0, [pc, #112]	; (8001e88 <httploader+0xa4>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	4622      	mov	r2, r4

	flash_memptr = flash_load_address;
 8001e1c:	4e1b      	ldr	r6, [pc, #108]	; (8001e8c <httploader+0xa8>)
	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e1e:	f024 fa99 	bl	8026354 <iprintf>
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e22:	481b      	ldr	r0, [pc, #108]	; (8001e90 <httploader+0xac>)
	flash_memptr = flash_load_address;
 8001e24:	6839      	ldr	r1, [r7, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e26:	462a      	mov	r2, r5
 8001e28:	6800      	ldr	r0, [r0, #0]
 8001e2a:	4643      	mov	r3, r8
	flash_memptr = flash_load_address;
 8001e2c:	6031      	str	r1, [r6, #0]
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);

	http_downloading = FLASH_LOADING;
 8001e2e:	2501      	movs	r5, #1
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e30:	9001      	str	r0, [sp, #4]
 8001e32:	4818      	ldr	r0, [pc, #96]	; (8001e94 <httploader+0xb0>)
	flash_filelength = 0;
 8001e34:	4918      	ldr	r1, [pc, #96]	; (8001e98 <httploader+0xb4>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e36:	6800      	ldr	r0, [r0, #0]
 8001e38:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e3e:	4917      	ldr	r1, [pc, #92]	; (8001e9c <httploader+0xb8>)
 8001e40:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <httploader+0xbc>)
 8001e42:	f024 fc71 	bl	8026728 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);
 8001e46:	4623      	mov	r3, r4
 8001e48:	6832      	ldr	r2, [r6, #0]
 8001e4a:	4915      	ldr	r1, [pc, #84]	; (8001ea0 <httploader+0xbc>)
 8001e4c:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <httploader+0xc0>)
 8001e4e:	f024 fa81 	bl	8026354 <iprintf>
	http_downloading = FLASH_LOADING;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <httploader+0xc4>)
	http_dlclient(newfilename, host, flash_memptr);
 8001e54:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <httploader+0xbc>)
 8001e56:	4621      	mov	r1, r4
 8001e58:	6832      	ldr	r2, [r6, #0]
	http_downloading = FLASH_LOADING;
 8001e5a:	601d      	str	r5, [r3, #0]
	http_dlclient(newfilename, host, flash_memptr);
 8001e5c:	f7ff fefe 	bl	8001c5c <http_dlclient>
	osDelay(5);
 8001e60:	2005      	movs	r0, #5
}
 8001e62:	b004      	add	sp, #16
 8001e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(5);
 8001e68:	f014 bad4 	b.w	8016414 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e6c:	4f05      	ldr	r7, [pc, #20]	; (8001e84 <httploader+0xa0>)
 8001e6e:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
		break;
 8001e72:	f04f 0849 	mov.w	r8, #73	; 0x49
		dl_filecrc = crc2;
 8001e76:	6033      	str	r3, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e78:	6039      	str	r1, [r7, #0]
		break;
 8001e7a:	e7ca      	b.n	8001e12 <httploader+0x2e>
 8001e7c:	08001de5 	.word	0x08001de5
 8001e80:	20000850 	.word	0x20000850
 8001e84:	20000004 	.word	0x20000004
 8001e88:	0802b5e8 	.word	0x0802b5e8
 8001e8c:	2000085c 	.word	0x2000085c
 8001e90:	20002dd4 	.word	0x20002dd4
 8001e94:	20002158 	.word	0x20002158
 8001e98:	20000858 	.word	0x20000858
 8001e9c:	0802b61c 	.word	0x0802b61c
 8001ea0:	200018c0 	.word	0x200018c0
 8001ea4:	0802b63c 	.word	0x0802b63c
 8001ea8:	200018bc 	.word	0x200018bc

08001eac <stm_rx_callback>:


// http callback for stm firmware download
// this gets called for each downloaded chunk received
//
int stm_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb0:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("stm_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001eb2:	b362      	cbz	r2, 8001f0e <stm_rx_callback+0x62>
	if (err != ERR_OK) {
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d132      	bne.n	8001f1e <stm_rx_callback+0x72>
 8001eb8:	460f      	mov	r7, r1
 8001eba:	4615      	mov	r5, r2
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001f5c <stm_rx_callback+0xb0>
		tlen = q->tot_len;
		len = q->len;
#if 0
		putchar('.');
#endif
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ec2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001f60 <stm_rx_callback+0xb4>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001ec6:	4e20      	ldr	r6, [pc, #128]	; (8001f48 <stm_rx_callback+0x9c>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ec8:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001ecc:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ed0:	f1bb 0f00 	cmp.w	fp, #0
 8001ed4:	d10b      	bne.n	8001eee <stm_rx_callback+0x42>
 8001ed6:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001eda:	4652      	mov	r2, sl
 8001edc:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ede:	b133      	cbz	r3, 8001eee <stm_rx_callback+0x42>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001ee0:	6860      	ldr	r0, [r4, #4]
 8001ee2:	f7ff f85f 	bl	8000fa4 <flash_memwrite>
 8001ee6:	4582      	cmp	sl, r0
 8001ee8:	d121      	bne.n	8001f2e <stm_rx_callback+0x82>
		down_total += q->len;
 8001eea:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001eee:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 8001ef4:	4453      	add	r3, sl
 8001ef6:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8001ef8:	f01a fde2 	bl	801cac0 <tcp_recved>
		pbuf_free(p);
 8001efc:	4628      	mov	r0, r5
 8001efe:	f01a f95f 	bl	801c1c0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8001f02:	6824      	ldr	r4, [r4, #0]
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d1df      	bne.n	8001ec8 <stm_rx_callback+0x1c>

//		p = p->next;
//		printf("stm_rx_callback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
	return (0);
 8001f08:	2000      	movs	r0, #0
}
 8001f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <stm_rx_callback+0xa0>)
 8001f10:	224f      	movs	r2, #79	; 0x4f
 8001f12:	490f      	ldr	r1, [pc, #60]	; (8001f50 <stm_rx_callback+0xa4>)
 8001f14:	480f      	ldr	r0, [pc, #60]	; (8001f54 <stm_rx_callback+0xa8>)
 8001f16:	f024 fa1d 	bl	8026354 <iprintf>
	if (err != ERR_OK) {
 8001f1a:	2c00      	cmp	r4, #0
 8001f1c:	d0f4      	beq.n	8001f08 <stm_rx_callback+0x5c>
		putchar('#');
 8001f1e:	2023      	movs	r0, #35	; 0x23
 8001f20:	f024 fa30 	bl	8026384 <putchar>
		printlwiperr(err);
 8001f24:	4620      	mov	r0, r4
}
 8001f26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8001f2a:	f7ff be7b 	b.w	8001c24 <printlwiperr>
				flash_abort = 1;
 8001f2e:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <stm_rx_callback+0xac>)
				flash_memptr = 0;
 8001f32:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 8001f36:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 8001f3a:	f024 faa7 	bl	802648c <puts>
				return (-1);
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f46:	bf00      	nop
 8001f48:	20001670 	.word	0x20001670
 8001f4c:	0802b698 	.word	0x0802b698
 8001f50:	080468c4 	.word	0x080468c4
 8001f54:	0802b034 	.word	0x0802b034
 8001f58:	0802b6b4 	.word	0x0802b6b4
 8001f5c:	20000854 	.word	0x20000854
 8001f60:	2000085c 	.word	0x2000085c

08001f64 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001f64:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001f66:	b510      	push	{r4, lr}
 8001f68:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001f6a:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	2b95      	cmp	r3, #149	; 0x95
 8001f70:	dc0d      	bgt.n	8001f8e <wait_armtx+0x2a>
 8001f72:	4c0e      	ldr	r4, [pc, #56]	; (8001fac <wait_armtx+0x48>)
 8001f74:	e007      	b.n	8001f86 <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001f76:	9b01      	ldr	r3, [sp, #4]
 8001f78:	4403      	add	r3, r0
 8001f7a:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001f7c:	f014 fa4a 	bl	8016414 <osDelay>
	while (timeoutcnt < 150) {
 8001f80:	9b01      	ldr	r3, [sp, #4]
 8001f82:	2b95      	cmp	r3, #149	; 0x95
 8001f84:	dc03      	bgt.n	8001f8e <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001f86:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	4283      	cmp	r3, r0
 8001f8c:	d1f3      	bne.n	8001f76 <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	2bf9      	cmp	r3, #249	; 0xf9
 8001f92:	dc02      	bgt.n	8001f9a <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	b002      	add	sp, #8
 8001f98:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <wait_armtx+0x4c>)
 8001f9c:	f024 fa76 	bl	802648c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <wait_armtx+0x48>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	601a      	str	r2, [r3, #0]
		return (-1);
 8001faa:	e7f4      	b.n	8001f96 <wait_armtx+0x32>
 8001fac:	2000214c 	.word	0x2000214c
 8001fb0:	0802b6d8 	.word	0x0802b6d8

08001fb4 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_UART_TxCpltCallback+0x14>)
 8001fba:	6802      	ldr	r2, [r0, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d000      	beq.n	8001fc2 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001fc0:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8001fc2:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_UART_TxCpltCallback+0x18>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40005000 	.word	0x40005000
 8001fd0:	2000214c 	.word	0x2000214c

08001fd4 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8001fd4:	b570      	push	{r4, r5, r6, lr}
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001fd6:	4c1a      	ldr	r4, [pc, #104]	; (8002040 <lcd_uart_init+0x6c>)
	lcdrxoutidx = 0;		// buffer consumer index
 8001fd8:	2500      	movs	r5, #0
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <lcd_uart_init+0x70>)
void lcd_uart_init(int baud) {
 8001fdc:	b082      	sub	sp, #8
 8001fde:	4606      	mov	r6, r0
	HAL_UART_Abort(&huart5);
 8001fe0:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001fe2:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001fe4:	f010 ffd0 	bl	8012f88 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f010 ff1b 	bl	8012e24 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <lcd_uart_init+0x74>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001ff2:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001ff4:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002008:	f011 ffb8 	bl	8013f7c <HAL_UART_Init>
 800200c:	b958      	cbnz	r0, 8002026 <lcd_uart_init+0x52>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <lcd_uart_init+0x78>)
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <lcd_uart_init+0x6c>)
 8002014:	f012 f9a2 	bl	801435c <HAL_UART_Receive_DMA>
 8002018:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800201c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002020:	b933      	cbnz	r3, 8002030 <lcd_uart_init+0x5c>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8002022:	b002      	add	sp, #8
 8002024:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8002026:	4631      	mov	r1, r6
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <lcd_uart_init+0x7c>)
 800202a:	f024 f993 	bl	8026354 <iprintf>
 800202e:	e7ee      	b.n	800200e <lcd_uart_init+0x3a>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002030:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002034:	4807      	ldr	r0, [pc, #28]	; (8002054 <lcd_uart_init+0x80>)
}
 8002036:	b002      	add	sp, #8
 8002038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800203c:	f024 b98a 	b.w	8026354 <iprintf>
 8002040:	20002b98 	.word	0x20002b98
 8002044:	20001b14 	.word	0x20001b14
 8002048:	40005000 	.word	0x40005000
 800204c:	20001950 	.word	0x20001950
 8002050:	0802b6ec 	.word	0x0802b6ec
 8002054:	0802b71c 	.word	0x0802b71c

08002058 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 8002058:	b570      	push	{r4, r5, r6, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800205a:	4a39      	ldr	r2, [pc, #228]	; (8002140 <lcd_init+0xe8>)
void lcd_init(int baud) {
 800205c:	b08c      	sub	sp, #48	; 0x30
 800205e:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <lcd_init+0xec>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8002062:	f10d 0e08 	add.w	lr, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002066:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002068:	4e37      	ldr	r6, [pc, #220]	; (8002148 <lcd_init+0xf0>)
 800206a:	f10d 0c10 	add.w	ip, sp, #16
	int siz, page;
	volatile char *cmd;

//	printf("lcd_init: baud=%d\n", baud);
	if (!((baud == 9600) || (baud == 230400))) {
 800206e:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8002072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002076:	e88e 0003 	stmia.w	lr, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	c407      	stmia	r4!, {r0, r1, r2}
 800207e:	f824 3b02 	strh.w	r3, [r4], #2
 8002082:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002086:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002088:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800208c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8002090:	f88c 3000 	strb.w	r3, [ip]
	if (!((baud == 9600) || (baud == 230400))) {
 8002094:	d008      	beq.n	80020a8 <lcd_init+0x50>
 8002096:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 800209a:	d005      	beq.n	80020a8 <lcd_init+0x50>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 800209c:	4629      	mov	r1, r5
 800209e:	482b      	ldr	r0, [pc, #172]	; (800214c <lcd_init+0xf4>)
 80020a0:	f024 f958 	bl	8026354 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 80020a4:	b00c      	add	sp, #48	; 0x30
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
	txdmadone = 0;	// TX is NOT free
 80020a8:	2300      	movs	r3, #0
 80020aa:	4c29      	ldr	r4, [pc, #164]	; (8002150 <lcd_init+0xf8>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020ac:	4671      	mov	r1, lr
 80020ae:	2207      	movs	r2, #7
 80020b0:	4828      	ldr	r0, [pc, #160]	; (8002154 <lcd_init+0xfc>)
	txdmadone = 0;	// TX is NOT free
 80020b2:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020b4:	f010 ff12 	bl	8012edc <HAL_UART_Transmit_DMA>
 80020b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80020bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020c0:	b14b      	cbz	r3, 80020d6 <lcd_init+0x7e>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020c6:	4824      	ldr	r0, [pc, #144]	; (8002158 <lcd_init+0x100>)
 80020c8:	f024 f944 	bl	8026354 <iprintf>
	while (!(txdmadone)) {
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	b92b      	cbnz	r3, 80020dc <lcd_init+0x84>
		osDelay(1);		// wait for comms to complete
 80020d0:	2001      	movs	r0, #1
 80020d2:	f014 f99f 	bl	8016414 <osDelay>
	while (!(txdmadone)) {
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f9      	beq.n	80020d0 <lcd_init+0x78>
	txdmadone = 0;	// TX is NOT free
 80020dc:	2300      	movs	r3, #0
	osDelay(800);
 80020de:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 80020e2:	6023      	str	r3, [r4, #0]
	osDelay(800);
 80020e4:	f014 f996 	bl	8016414 <osDelay>
	if (baud == 9600)
 80020e8:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80020ec:	d017      	beq.n	800211e <lcd_init+0xc6>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 80020ee:	220e      	movs	r2, #14
 80020f0:	a908      	add	r1, sp, #32
 80020f2:	4818      	ldr	r0, [pc, #96]	; (8002154 <lcd_init+0xfc>)
 80020f4:	f010 fef2 	bl	8012edc <HAL_UART_Transmit_DMA>
 80020f8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80020fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002100:	b11b      	cbz	r3, 800210a <lcd_init+0xb2>
 8002102:	e017      	b.n	8002134 <lcd_init+0xdc>
		osDelay(1);		// wait for comms to complete
 8002104:	2001      	movs	r0, #1
 8002106:	f014 f985 	bl	8016414 <osDelay>
	while (!(txdmadone)) {
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f9      	beq.n	8002104 <lcd_init+0xac>
	txdmadone = 0;	// TX is NOT free
 8002110:	2300      	movs	r3, #0
	osDelay(120);
 8002112:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 8002114:	6023      	str	r3, [r4, #0]
	osDelay(120);
 8002116:	f014 f97d 	bl	8016414 <osDelay>
}
 800211a:	b00c      	add	sp, #48	; 0x30
 800211c:	bd70      	pop	{r4, r5, r6, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 800211e:	220c      	movs	r2, #12
 8002120:	a904      	add	r1, sp, #16
 8002122:	480c      	ldr	r0, [pc, #48]	; (8002154 <lcd_init+0xfc>)
 8002124:	f010 feda 	bl	8012edc <HAL_UART_Transmit_DMA>
 8002128:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 800212c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ea      	beq.n	800210a <lcd_init+0xb2>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002134:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <lcd_init+0x100>)
 800213a:	f024 f90b 	bl	8026354 <iprintf>
 800213e:	e7e4      	b.n	800210a <lcd_init+0xb2>
 8002140:	0802b7b0 	.word	0x0802b7b0
 8002144:	0802b7b8 	.word	0x0802b7b8
 8002148:	0802b7c8 	.word	0x0802b7c8
 800214c:	0802b74c 	.word	0x0802b74c
 8002150:	2000214c 	.word	0x2000214c
 8002154:	20002b98 	.word	0x20002b98
 8002158:	0802b780 	.word	0x0802b780

0800215c <lcd_writeblock>:
	}
	return (stat);
}

// send a binary block to the LCD
int lcd_writeblock(uint8_t *buf, int len) {
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4605      	mov	r5, r0
 8002160:	460e      	mov	r6, r1
	HAL_StatusTypeDef stat;
	volatile int i;
	uint32_t reg;
	uint8_t by;

	if (wait_armtx() == -1)
 8002162:	f7ff feff 	bl	8001f64 <wait_armtx>
 8002166:	4604      	mov	r4, r0
 8002168:	3001      	adds	r0, #1
 800216a:	d009      	beq.n	8002180 <lcd_writeblock+0x24>
		return (-1);
//	printf("lcd_writeblock: %d\n", len);
	txdmadone = 0;	// TX in progress
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <lcd_writeblock+0x34>)
 800216e:	2400      	movs	r4, #0

//	myhexDump("NXT:", buf, len);

	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002170:	b2b2      	uxth	r2, r6
 8002172:	4629      	mov	r1, r5
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <lcd_writeblock+0x38>)
	txdmadone = 0;	// TX in progress
 8002176:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002178:	f010 feb0 	bl	8012edc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800217c:	4604      	mov	r4, r0
	if (stat != HAL_OK) {
 800217e:	b908      	cbnz	r0, 8002184 <lcd_writeblock+0x28>
	}
	return (stat);
}
 8002180:	4620      	mov	r0, r4
 8002182:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002184:	4621      	mov	r1, r4
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <lcd_writeblock+0x3c>)
 8002188:	f024 f8e4 	bl	8026354 <iprintf>
}
 800218c:	4620      	mov	r0, r4
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	2000214c 	.word	0x2000214c
 8002194:	20002b98 	.word	0x20002b98
 8002198:	0802b7d8 	.word	0x0802b7d8

0800219c <lcd_puts>:

// put a null terminated string
int lcd_puts(char *str) {
 800219c:	b530      	push	{r4, r5, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 80021a2:	f7ff fedf 	bl	8001f64 <wait_armtx>
 80021a6:	4605      	mov	r5, r0
 80021a8:	3001      	adds	r0, #1
 80021aa:	d01d      	beq.n	80021e8 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	4813      	ldr	r0, [pc, #76]	; (80021fc <lcd_puts+0x60>)
 80021b0:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021b2:	9b01      	ldr	r3, [sp, #4]
 80021b4:	5ce3      	ldrb	r3, [r4, r3]
 80021b6:	b153      	cbz	r3, 80021ce <lcd_puts+0x32>
		buffer[i] = str[i];
 80021b8:	9901      	ldr	r1, [sp, #4]
 80021ba:	9a01      	ldr	r2, [sp, #4]
		i++;
 80021bc:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 80021be:	5c61      	ldrb	r1, [r4, r1]
		i++;
 80021c0:	3301      	adds	r3, #1
		buffer[i] = str[i];
 80021c2:	5481      	strb	r1, [r0, r2]
		i++;
 80021c4:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	5ce3      	ldrb	r3, [r4, r3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f4      	bne.n	80021b8 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80021ce:	9901      	ldr	r1, [sp, #4]
 80021d0:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021d2:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80021d4:	4c0a      	ldr	r4, [pc, #40]	; (8002200 <lcd_puts+0x64>)
	buffer[i] = '\0';
 80021d6:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021d8:	b292      	uxth	r2, r2
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <lcd_puts+0x60>)
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80021de:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021e0:	f010 fe7c 	bl	8012edc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021e4:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80021e6:	b910      	cbnz	r0, 80021ee <lcd_puts+0x52>
	}
	return (stat);
}
 80021e8:	4628      	mov	r0, r5
 80021ea:	b003      	add	sp, #12
 80021ec:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021ee:	4629      	mov	r1, r5
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <lcd_puts+0x6c>)
 80021f2:	f024 f8af 	bl	8026354 <iprintf>
}
 80021f6:	4628      	mov	r0, r5
 80021f8:	b003      	add	sp, #12
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	200018f0 	.word	0x200018f0
 8002200:	2000214c 	.word	0x2000214c
 8002204:	20002b98 	.word	0x20002b98
 8002208:	0802b80c 	.word	0x0802b80c

0800220c <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 800220c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800220e:	2300      	movs	r3, #0
int lcd_rxdma() {
 8002210:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <lcd_rxdma+0x64>)
	volatile int count = 0;
 8002214:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8002216:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8002218:	6953      	ldr	r3, [r2, #20]
 800221a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800221e:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8002220:	9a01      	ldr	r2, [sp, #4]
 8002222:	2a80      	cmp	r2, #128	; 0x80
 8002224:	d016      	beq.n	8002254 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002226:	4d13      	ldr	r5, [pc, #76]	; (8002274 <lcd_rxdma+0x68>)
 8002228:	9a01      	ldr	r2, [sp, #4]
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <lcd_rxdma+0x42>
 8002230:	4c11      	ldr	r4, [pc, #68]	; (8002278 <lcd_rxdma+0x6c>)
 8002232:	4812      	ldr	r0, [pc, #72]	; (800227c <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002234:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8002236:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002238:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 800223a:	3301      	adds	r3, #1
		count++;
 800223c:	3201      	adds	r2, #1
		return (0);
 800223e:	2b80      	cmp	r3, #128	; 0x80
		count++;
 8002240:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002242:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8002244:	bfa8      	it	ge
 8002246:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002248:	429a      	cmp	r2, r3
 800224a:	d1f3      	bne.n	8002234 <lcd_rxdma+0x28>
 800224c:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800224e:	9800      	ldr	r0, [sp, #0]
}
 8002250:	b003      	add	sp, #12
 8002252:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8002254:	4909      	ldr	r1, [pc, #36]	; (800227c <lcd_rxdma+0x70>)
 8002256:	480a      	ldr	r0, [pc, #40]	; (8002280 <lcd_rxdma+0x74>)
 8002258:	f012 f880 	bl	801435c <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 800225c:	b910      	cbnz	r0, 8002264 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 800225e:	2300      	movs	r3, #0
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	e7e0      	b.n	8002226 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002264:	4601      	mov	r1, r0
 8002266:	4807      	ldr	r0, [pc, #28]	; (8002284 <lcd_rxdma+0x78>)
 8002268:	f024 f874 	bl	8026354 <iprintf>
 800226c:	e7f7      	b.n	800225e <lcd_rxdma+0x52>
 800226e:	bf00      	nop
 8002270:	40026000 	.word	0x40026000
 8002274:	20001b14 	.word	0x20001b14
 8002278:	20001a94 	.word	0x20001a94
 800227c:	20001950 	.word	0x20001950
 8002280:	20002b98 	.word	0x20002b98
 8002284:	0802b83c 	.word	0x0802b83c

08002288 <lcd_getc>:
int lcd_getc() {
	volatile static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <lcd_getc+0x34>)
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <lcd_getc+0x38>)
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4299      	cmp	r1, r3
 8002292:	d00f      	beq.n	80022b4 <lcd_getc+0x2c>
		ch = lcdrxbuffer[lastidx];
 8002294:	6810      	ldr	r0, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002296:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002298:	490a      	ldr	r1, [pc, #40]	; (80022c4 <lcd_getc+0x3c>)
	if (++index >= limit)
 800229a:	3301      	adds	r3, #1
		return (0);
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	bfa8      	it	ge
 80022a0:	2300      	movge	r3, #0
int lcd_getc() {
 80022a2:	b410      	push	{r4}
		ch = lcdrxbuffer[lastidx];
 80022a4:	4c08      	ldr	r4, [pc, #32]	; (80022c8 <lcd_getc+0x40>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80022a6:	6013      	str	r3, [r2, #0]
		rxtimeout = 100;
 80022a8:	2364      	movs	r3, #100	; 0x64
		ch = lcdrxbuffer[lastidx];
 80022aa:	5c20      	ldrb	r0, [r4, r0]
//  printf("lcd_getc() got %02x\n", ch);
	}

	return (ch);
}
 80022ac:	f85d 4b04 	ldr.w	r4, [sp], #4
		rxtimeout = 100;
 80022b0:	600b      	str	r3, [r1, #0]
}
 80022b2:	4770      	bx	lr
	ch = -1;
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20001a5c 	.word	0x20001a5c
 80022c0:	20001b14 	.word	0x20001b14
 80022c4:	20001f0c 	.word	0x20001f0c
 80022c8:	20001a94 	.word	0x20001a94

080022cc <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80022cc:	b510      	push	{r4, lr}
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	if (lcd_txblocked)
 80022ce:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <writelcdcmd+0x30>)
int writelcdcmd(char *str) {
 80022d0:	b098      	sub	sp, #96	; 0x60
	if (lcd_txblocked)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	b973      	cbnz	r3, 80022f4 <writelcdcmd+0x28>
		return (-1);

	strcpy(pkt, str);
 80022d6:	4601      	mov	r1, r0
 80022d8:	4668      	mov	r0, sp
 80022da:	f024 fab6 	bl	802684a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <writelcdcmd+0x34>)
	strcpy(pkt, str);
 80022e0:	4602      	mov	r2, r0
	if (!(lcd_txblocked))
 80022e2:	6823      	ldr	r3, [r4, #0]
	strcat(pkt, "\xff\xff\xff");
 80022e4:	6808      	ldr	r0, [r1, #0]
 80022e6:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022e8:	b923      	cbnz	r3, 80022f4 <writelcdcmd+0x28>
		return (lcd_puts(pkt));
 80022ea:	4668      	mov	r0, sp
 80022ec:	f7ff ff56 	bl	800219c <lcd_puts>
	else
		return (-1);
}
 80022f0:	b018      	add	sp, #96	; 0x60
 80022f2:	bd10      	pop	{r4, pc}
		return (-1);
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	e7fa      	b.n	80022f0 <writelcdcmd+0x24>
 80022fa:	bf00      	nop
 80022fc:	20001a6c 	.word	0x20001a6c
 8002300:	0802b7b4 	.word	0x0802b7b4

08002304 <lcd_clearrxbuf>:
	}
	lcd_txblocked = 0;		// allow others sending to the LCD
	return (result);
}

lcd_clearrxbuf() {
 8002304:	b510      	push	{r4, lr}
	int result;

	lcd_rxdma();			// clear the dma rx buffer
 8002306:	f7ff ff81 	bl	800220c <lcd_rxdma>
	if (lastidx != lcdrxoutidx) {		// something there
 800230a:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <lcd_clearrxbuf+0x40>)
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <lcd_clearrxbuf+0x44>)
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	6809      	ldr	r1, [r1, #0]
 8002312:	428b      	cmp	r3, r1
 8002314:	d014      	beq.n	8002340 <lcd_clearrxbuf+0x3c>
		ch = lcdrxbuffer[lastidx];
 8002316:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002318:	2464      	movs	r4, #100	; 0x64
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800231a:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <lcd_clearrxbuf+0x48>)
	if (++index >= limit)
 800231e:	3301      	adds	r3, #1
		rxtimeout = 100;
 8002320:	6004      	str	r4, [r0, #0]
		return (0);
 8002322:	2b80      	cmp	r3, #128	; 0x80
 8002324:	bfa8      	it	ge
 8002326:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002328:	6013      	str	r3, [r2, #0]
	result = lcd_getc();
	while (result != -1) {
 800232a:	e006      	b.n	800233a <lcd_clearrxbuf+0x36>
		ch = lcdrxbuffer[lastidx];
 800232c:	6813      	ldr	r3, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800232e:	6813      	ldr	r3, [r2, #0]
	if (++index >= limit)
 8002330:	3301      	adds	r3, #1
		return (0);
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	bfa8      	it	ge
 8002336:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002338:	6013      	str	r3, [r2, #0]
	if (lastidx != lcdrxoutidx) {		// something there
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	4299      	cmp	r1, r3
 800233e:	d1f5      	bne.n	800232c <lcd_clearrxbuf+0x28>
		result = lcd_getc();	// consume anything in the copied rx buffer
	}
}
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	20001a5c 	.word	0x20001a5c
 8002348:	20001b14 	.word	0x20001b14
 800234c:	20001f0c 	.word	0x20001f0c

08002350 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002350:	b530      	push	{r4, r5, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <isnexpkt+0xd0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002354:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 8002356:	4c33      	ldr	r4, [pc, #204]	; (8002424 <isnexpkt+0xd4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d05d      	beq.n	800241c <isnexpkt+0xcc>
		ch = lcdrxbuffer[lastidx];
 8002360:	6825      	ldr	r5, [r4, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002362:	6823      	ldr	r3, [r4, #0]
		rxtimeout = 100;
 8002364:	4a30      	ldr	r2, [pc, #192]	; (8002428 <isnexpkt+0xd8>)
	if (++index >= limit)
 8002366:	3301      	adds	r3, #1
		return (0);
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	bfa8      	it	ge
 800236c:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800236e:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 8002370:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 8002372:	4c2e      	ldr	r4, [pc, #184]	; (800242c <isnexpkt+0xdc>)
		rxtimeout = 100;
 8002374:	6013      	str	r3, [r2, #0]
		ch = lcdrxbuffer[lastidx];
 8002376:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <isnexpkt+0xe0>)
 8002378:	5d5b      	ldrb	r3, [r3, r5]
		ch = rawchar & 0xff;
 800237a:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800237e:	7823      	ldrb	r3, [r4, #0]
 8002380:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002384:	54c5      	strb	r5, [r0, r3]
 8002386:	3301      	adds	r3, #1

		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002388:	4d2a      	ldr	r5, [pc, #168]	; (8002434 <isnexpkt+0xe4>)
		buffer[i++] = ch;
 800238a:	b2db      	uxtb	r3, r3
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 800238c:	682d      	ldr	r5, [r5, #0]
		buffer[i++] = ch;
 800238e:	7023      	strb	r3, [r4, #0]
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002390:	2d03      	cmp	r5, #3
 8002392:	d02c      	beq.n	80023ee <isnexpkt+0x9e>
				index = i;
				return (index);
			}
		}

		if (ch == 0xff) {
 8002394:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002398:	2dff      	cmp	r5, #255	; 0xff
 800239a:	d02e      	beq.n	80023fa <isnexpkt+0xaa>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 800239c:	f89d c007 	ldrb.w	ip, [sp, #7]
 80023a0:	4d25      	ldr	r5, [pc, #148]	; (8002438 <isnexpkt+0xe8>)
 80023a2:	f885 c000 	strb.w	ip, [r5]
			termcnt = 0;
 80023a6:	f04f 0c00 	mov.w	ip, #0
 80023aa:	4d24      	ldr	r5, [pc, #144]	; (800243c <isnexpkt+0xec>)
 80023ac:	f885 c000 	strb.w	ip, [r5]
		}

		if (i == size) { // overrun
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d102      	bne.n	80023ba <isnexpkt+0x6a>
			i = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 80023b8:	702b      	strb	r3, [r5, #0]
		}
	}
	if (rxtimeout > 0)
 80023ba:	6813      	ldr	r3, [r2, #0]
 80023bc:	b97b      	cbnz	r3, 80023de <isnexpkt+0x8e>
		rxtimeout--;
	if (rxtimeout == 0) {
		termcnt = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <isnexpkt+0xec>)
		for (i = 0; i < size; buffer[i++] = 0)
 80023c2:	4c1a      	ldr	r4, [pc, #104]	; (800242c <isnexpkt+0xdc>)
		termcnt = 0;
 80023c4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 80023c6:	7023      	strb	r3, [r4, #0]
 80023c8:	b119      	cbz	r1, 80023d2 <isnexpkt+0x82>
 80023ca:	460a      	mov	r2, r1
 80023cc:	4619      	mov	r1, r3
 80023ce:	f023 f823 	bl	8025418 <memset>
			;
		i = 0;
 80023d2:	2300      	movs	r3, #0
		return (-1);
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 80023d8:	7023      	strb	r3, [r4, #0]
	}
	return (-2);  // no char available
}
 80023da:	b003      	add	sp, #12
 80023dc:	bd30      	pop	{r4, r5, pc}
		rxtimeout--;
 80023de:	3b01      	subs	r3, #1
 80023e0:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0eb      	beq.n	80023be <isnexpkt+0x6e>
	return (-2);  // no char available
 80023e6:	f06f 0001 	mvn.w	r0, #1
}
 80023ea:	b003      	add	sp, #12
 80023ec:	bd30      	pop	{r4, r5, pc}
			if (ch == 0x05) {
 80023ee:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80023f2:	2d05      	cmp	r5, #5
 80023f4:	d1ce      	bne.n	8002394 <isnexpkt+0x44>
				index = i;
 80023f6:	4618      	mov	r0, r3
				return (index);
 80023f8:	e7ef      	b.n	80023da <isnexpkt+0x8a>
			termcnt++;
 80023fa:	4d10      	ldr	r5, [pc, #64]	; (800243c <isnexpkt+0xec>)
 80023fc:	f895 c000 	ldrb.w	ip, [r5]
 8002400:	f10c 0c01 	add.w	ip, ip, #1
 8002404:	fa5f fc8c 	uxtb.w	ip, ip
			if (termcnt == 3) {
 8002408:	f1bc 0f03 	cmp.w	ip, #3
			termcnt++;
 800240c:	f885 c000 	strb.w	ip, [r5]
			if (termcnt == 3) {
 8002410:	d1ce      	bne.n	80023b0 <isnexpkt+0x60>
				i = 0;
 8002412:	2200      	movs	r2, #0
				index = i;
 8002414:	4618      	mov	r0, r3
				i = 0;
 8002416:	7022      	strb	r2, [r4, #0]
				termcnt = 0;
 8002418:	702a      	strb	r2, [r5, #0]
				return (index);
 800241a:	e7de      	b.n	80023da <isnexpkt+0x8a>
 800241c:	4a02      	ldr	r2, [pc, #8]	; (8002428 <isnexpkt+0xd8>)
 800241e:	e7cc      	b.n	80023ba <isnexpkt+0x6a>
 8002420:	20001b14 	.word	0x20001b14
 8002424:	20001a5c 	.word	0x20001a5c
 8002428:	20001f0c 	.word	0x20001f0c
 800242c:	20001a54 	.word	0x20001a54
 8002430:	20001a94 	.word	0x20001a94
 8002434:	200018bc 	.word	0x200018bc
 8002438:	20001f08 	.word	0x20001f08
 800243c:	20001f38 	.word	0x20001f38

08002440 <decode_lcdtype>:

// try to extract LCD type from what could be the connect string response
int decode_lcdtype(char *str) {
	int i, j, k;
	const char next[] = { "NX" };
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <decode_lcdtype+0x98>)
 8002442:	6813      	ldr	r3, [r2, #0]
int decode_lcdtype(char *str) {
 8002444:	b570      	push	{r4, r5, r6, lr}
	const char next[] = { "NX" };
 8002446:	0c1a      	lsrs	r2, r3, #16
int decode_lcdtype(char *str) {
 8002448:	b082      	sub	sp, #8

	i = 0;
	j = 0;
	k = 0;
	nex_model[i] = '\0';
 800244a:	4e24      	ldr	r6, [pc, #144]	; (80024dc <decode_lcdtype+0x9c>)
 800244c:	2400      	movs	r4, #0
	const char next[] = { "NX" };
 800244e:	f88d 2006 	strb.w	r2, [sp, #6]
	nex_model[i] = '\0';
 8002452:	7034      	strb	r4, [r6, #0]

	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002454:	7802      	ldrb	r2, [r0, #0]
	const char next[] = { "NX" };
 8002456:	f8ad 3004 	strh.w	r3, [sp, #4]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 800245a:	1e53      	subs	r3, r2, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2bfd      	cmp	r3, #253	; 0xfd
 8002460:	d81a      	bhi.n	8002498 <decode_lcdtype+0x58>
 8002462:	4605      	mov	r5, r0
 8002464:	4601      	mov	r1, r0
 8002466:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 800246a:	f1c0 0e01 	rsb	lr, r0, #1
 800246e:	e00b      	b.n	8002488 <decode_lcdtype+0x48>
		if (str[i++] == next[j]) {
 8002470:	f104 0308 	add.w	r3, r4, #8
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002474:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (str[i++] == next[j]) {
 8002478:	eb0d 0c03 	add.w	ip, sp, r3
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 800247c:	1e53      	subs	r3, r2, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2bfd      	cmp	r3, #253	; 0xfd
 8002482:	d809      	bhi.n	8002498 <decode_lcdtype+0x58>
		if (str[i++] == next[j]) {
 8002484:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8002488:	eb0e 0301 	add.w	r3, lr, r1
 800248c:	4594      	cmp	ip, r2
 800248e:	4618      	mov	r0, r3
 8002490:	d1ee      	bne.n	8002470 <decode_lcdtype+0x30>
			j++;
			if (j >= 2) {		// found N...X
 8002492:	b924      	cbnz	r4, 800249e <decode_lcdtype+0x5e>
 8002494:	2401      	movs	r4, #1
 8002496:	e7eb      	b.n	8002470 <decode_lcdtype+0x30>
				nex_model[i] = '\0';
				return (i);
			}
		}
	}
	return (0);
 8002498:	2000      	movs	r0, #0
}
 800249a:	b002      	add	sp, #8
 800249c:	bd70      	pop	{r4, r5, r6, pc}
				nex_model[k++] = 'M';
 800249e:	f645 024d 	movw	r2, #22605	; 0x584d
 80024a2:	8032      	strh	r2, [r6, #0]
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 80024a4:	5cea      	ldrb	r2, [r5, r3]
 80024a6:	442b      	add	r3, r5
 80024a8:	1e51      	subs	r1, r2, #1
 80024aa:	b2c9      	uxtb	r1, r1
 80024ac:	29fd      	cmp	r1, #253	; 0xfd
 80024ae:	d80f      	bhi.n	80024d0 <decode_lcdtype+0x90>
 80024b0:	2a2c      	cmp	r2, #44	; 0x2c
 80024b2:	d00d      	beq.n	80024d0 <decode_lcdtype+0x90>
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <decode_lcdtype+0xa0>)
 80024b6:	e001      	b.n	80024bc <decode_lcdtype+0x7c>
 80024b8:	2a2c      	cmp	r2, #44	; 0x2c
 80024ba:	d009      	beq.n	80024d0 <decode_lcdtype+0x90>
					nex_model[k++] = str[i++];
 80024bc:	eb03 000e 	add.w	r0, r3, lr
 80024c0:	f804 2f01 	strb.w	r2, [r4, #1]!
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 80024c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80024c8:	1e51      	subs	r1, r2, #1
 80024ca:	b2c9      	uxtb	r1, r1
 80024cc:	29fd      	cmp	r1, #253	; 0xfd
 80024ce:	d9f3      	bls.n	80024b8 <decode_lcdtype+0x78>
				nex_model[i] = '\0';
 80024d0:	2300      	movs	r3, #0
 80024d2:	5433      	strb	r3, [r6, r0]
}
 80024d4:	b002      	add	sp, #8
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	0802b898 	.word	0x0802b898
 80024dc:	20001b28 	.word	0x20001b28
 80024e0:	20001b29 	.word	0x20001b29
 80024e4:	ffffffff 	.word	0xffffffff

080024e8 <lcd_gps>:
//Application specific display stuff
//
//////////////////////////////////////////////////////////////

// send the GPS coords t2.txt Lat,Lon,Grid  t3.txt Sats
void lcd_gps(void) {
 80024e8:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[64], gridsquare[16];
	double lat, lon;
	int sats, col;
	static int vis = 0;

	lat = statuspkt.NavPvt.lat / 10000000.0;
 80024ea:	4d4f      	ldr	r5, [pc, #316]	; (8002628 <lcd_gps+0x140>)
 80024ec:	ed95 7a08 	vldr	s14, [r5, #32]
	lon = statuspkt.NavPvt.lon / 10000000.0;
 80024f0:	ed95 6a07 	vldr	s12, [r5, #28]
	lat = statuspkt.NavPvt.lat / 10000000.0;
 80024f4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	lon = statuspkt.NavPvt.lon / 10000000.0;
 80024f8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
	lat = statuspkt.NavPvt.lat / 10000000.0;
 80024fc:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8002620 <lcd_gps+0x138>
void lcd_gps(void) {
 8002500:	ed2d 8b04 	vpush	{d8-d9}
 8002504:	b0b4      	sub	sp, #208	; 0xd0
	lon = statuspkt.NavPvt.lon / 10000000.0;
 8002506:	ee86 8b05 	vdiv.f64	d8, d6, d5
	calcLocator(gridsquare, lat, lon);
 800250a:	a808      	add	r0, sp, #32
	lat = statuspkt.NavPvt.lat / 10000000.0;
 800250c:	ee87 9b05 	vdiv.f64	d9, d7, d5
	calcLocator(gridsquare, lat, lon);
 8002510:	eeb0 1b48 	vmov.f64	d1, d8
 8002514:	eeb0 0b49 	vmov.f64	d0, d9
 8002518:	f003 f9de 	bl	80058d8 <calcLocator>

	if (gpslocked) {
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <lcd_gps+0x144>)
 800251e:	7819      	ldrb	r1, [r3, #0]
 8002520:	2900      	cmp	r1, #0
 8002522:	d033      	beq.n	800258c <lcd_gps+0xa4>
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 8002524:	ae0c      	add	r6, sp, #48	; 0x30
 8002526:	a908      	add	r1, sp, #32
	sprintf(str, "%s=\"%s\"", id, string);
 8002528:	ac1c      	add	r4, sp, #112	; 0x70
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 800252a:	9102      	str	r1, [sp, #8]
 800252c:	4630      	mov	r0, r6
 800252e:	4940      	ldr	r1, [pc, #256]	; (8002630 <lcd_gps+0x148>)
 8002530:	ec53 2b19 	vmov	r2, r3, d9
 8002534:	ed8d 8b00 	vstr	d8, [sp]
 8002538:	f024 f8f6 	bl	8026728 <siprintf>
	volatile int result = 0;
 800253c:	2200      	movs	r2, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800253e:	4633      	mov	r3, r6
 8002540:	493c      	ldr	r1, [pc, #240]	; (8002634 <lcd_gps+0x14c>)
	volatile int result = 0;
 8002542:	9204      	str	r2, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002544:	4620      	mov	r0, r4
 8002546:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <lcd_gps+0x150>)
 8002548:	f024 f8ee 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff febd 	bl	80022cc <writelcdcmd>
 8002552:	9004      	str	r0, [sp, #16]
	return (result);
 8002554:	9b04      	ldr	r3, [sp, #16]
	} else {
		setlcdtext("t2.txt", "");
	}

	// number of satellites
	sats = statuspkt.NavPvt.numSV;
 8002556:	7eed      	ldrb	r5, [r5, #27]
	sprintf(str, "\\r\\rSats:%u", sats);
 8002558:	4630      	mov	r0, r6
 800255a:	4938      	ldr	r1, [pc, #224]	; (800263c <lcd_gps+0x154>)
	sats = statuspkt.NavPvt.numSV;
 800255c:	b2ed      	uxtb	r5, r5
	sprintf(str, "\\r\\rSats:%u", sats);
 800255e:	462a      	mov	r2, r5
 8002560:	f024 f8e2 	bl	8026728 <siprintf>
	volatile int result = 0;
 8002564:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002566:	4633      	mov	r3, r6
 8002568:	4a35      	ldr	r2, [pc, #212]	; (8002640 <lcd_gps+0x158>)
	volatile int result = 0;
 800256a:	9106      	str	r1, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 800256c:	4620      	mov	r0, r4
 800256e:	4931      	ldr	r1, [pc, #196]	; (8002634 <lcd_gps+0x14c>)
 8002570:	f024 f8da 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff fea9 	bl	80022cc <writelcdcmd>
	setlcdtext("t4.txt", str);
	if (sats < 4)
 800257a:	2d03      	cmp	r5, #3
	result = writelcdcmd(str);
 800257c:	9006      	str	r0, [sp, #24]
	return (result);
 800257e:	9b06      	ldr	r3, [sp, #24]
	if (sats < 4)
 8002580:	dd13      	ble.n	80025aa <lcd_gps+0xc2>
		col = 0xf800;		// red
	else if (sats < 6)
 8002582:	2d05      	cmp	r5, #5
 8002584:	dc36      	bgt.n	80025f4 <lcd_gps+0x10c>
 8002586:	f24f 63c0 	movw	r3, #63168	; 0xf6c0
 800258a:	e010      	b.n	80025ae <lcd_gps+0xc6>
	sprintf(str, "%s=\"%s\"", id, string);
 800258c:	ac1c      	add	r4, sp, #112	; 0x70
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <lcd_gps+0x15c>)
 8002590:	4a29      	ldr	r2, [pc, #164]	; (8002638 <lcd_gps+0x150>)
 8002592:	ae0c      	add	r6, sp, #48	; 0x30
	volatile int result = 0;
 8002594:	9105      	str	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002596:	4620      	mov	r0, r4
 8002598:	4926      	ldr	r1, [pc, #152]	; (8002634 <lcd_gps+0x14c>)
 800259a:	f024 f8c5 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff fe94 	bl	80022cc <writelcdcmd>
 80025a4:	9005      	str	r0, [sp, #20]
	return (result);
 80025a6:	9b05      	ldr	r3, [sp, #20]
 80025a8:	e7d5      	b.n	8002556 <lcd_gps+0x6e>
 80025aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	sprintf(buffer, "%s=%lu", id, value);
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <lcd_gps+0x160>)
 80025b0:	4620      	mov	r0, r4
 80025b2:	4926      	ldr	r1, [pc, #152]	; (800264c <lcd_gps+0x164>)
 80025b4:	f024 f8b8 	bl	8026728 <siprintf>
	result = writelcdcmd(buffer);
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fe87 	bl	80022cc <writelcdcmd>
 80025be:	9007      	str	r0, [sp, #28]
	if (result == -1) {		// wait for response
 80025c0:	9b07      	ldr	r3, [sp, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	d026      	beq.n	8002614 <lcd_gps+0x12c>
		col = 0xf6c0;		// dark yellow
	else
		col = 0xffff;		// white
	setlcdbin("t4.pco", col);

	if (sats < 5) {
 80025c6:	2d04      	cmp	r5, #4
	return (result);
 80025c8:	9b07      	ldr	r3, [sp, #28]
	if (sats < 5) {
 80025ca:	dc05      	bgt.n	80025d8 <lcd_gps+0xf0>
		if (vis++ & 1)
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <lcd_gps+0x168>)
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	07db      	lsls	r3, r3, #31
 80025d4:	6011      	str	r1, [r2, #0]
 80025d6:	d506      	bpl.n	80025e6 <lcd_gps+0xfe>
			writelcdcmd("vis t4,1");
 80025d8:	481e      	ldr	r0, [pc, #120]	; (8002654 <lcd_gps+0x16c>)
 80025da:	f7ff fe77 	bl	80022cc <writelcdcmd>
		else
			writelcdcmd("vis t4,0");
	} else
		writelcdcmd("vis t4,1");
}
 80025de:	b034      	add	sp, #208	; 0xd0
 80025e0:	ecbd 8b04 	vpop	{d8-d9}
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
			writelcdcmd("vis t4,0");
 80025e6:	481c      	ldr	r0, [pc, #112]	; (8002658 <lcd_gps+0x170>)
 80025e8:	f7ff fe70 	bl	80022cc <writelcdcmd>
}
 80025ec:	b034      	add	sp, #208	; 0xd0
 80025ee:	ecbd 8b04 	vpop	{d8-d9}
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
	sprintf(buffer, "%s=%lu", id, value);
 80025f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <lcd_gps+0x160>)
 80025fa:	4914      	ldr	r1, [pc, #80]	; (800264c <lcd_gps+0x164>)
 80025fc:	4620      	mov	r0, r4
 80025fe:	f024 f893 	bl	8026728 <siprintf>
	result = writelcdcmd(buffer);
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fe62 	bl	80022cc <writelcdcmd>
 8002608:	9007      	str	r0, [sp, #28]
	if (result == -1) {		// wait for response
 800260a:	9b07      	ldr	r3, [sp, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	d001      	beq.n	8002614 <lcd_gps+0x12c>
	return (result);
 8002610:	9b07      	ldr	r3, [sp, #28]
	if (sats < 5) {
 8002612:	e7e1      	b.n	80025d8 <lcd_gps+0xf0>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002614:	4811      	ldr	r0, [pc, #68]	; (800265c <lcd_gps+0x174>)
 8002616:	f023 fe9d 	bl	8026354 <iprintf>
 800261a:	e7d4      	b.n	80025c6 <lcd_gps+0xde>
 800261c:	f3af 8000 	nop.w
 8002620:	00000000 	.word	0x00000000
 8002624:	416312d0 	.word	0x416312d0
 8002628:	2000300c 	.word	0x2000300c
 800262c:	20003460 	.word	0x20003460
 8002630:	0802b89c 	.word	0x0802b89c
 8002634:	0802b86c 	.word	0x0802b86c
 8002638:	0802b8c0 	.word	0x0802b8c0
 800263c:	0802b8c8 	.word	0x0802b8c8
 8002640:	0802b8d4 	.word	0x0802b8d4
 8002644:	0802b2d8 	.word	0x0802b2d8
 8002648:	0802b8dc 	.word	0x0802b8dc
 800264c:	0802b874 	.word	0x0802b874
 8002650:	20002150 	.word	0x20002150
 8002654:	0802b8e4 	.word	0x0802b8e4
 8002658:	0802b8f0 	.word	0x0802b8f0
 800265c:	0802b87c 	.word	0x0802b87c

08002660 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8002660:	4a27      	ldr	r2, [pc, #156]	; (8002700 <lcd_time+0xa0>)
 8002662:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <lcd_time+0xa4>)
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	185b      	adds	r3, r3, r1
 800266e:	f142 0200 	adc.w	r2, r2, #0
void lcd_time() {
 8002672:	b530      	push	{r4, r5, lr}
 8002674:	b09f      	sub	sp, #124	; 0x7c
	timeinfo = *localtime(&localepochtime);
 8002676:	4c24      	ldr	r4, [pc, #144]	; (8002708 <lcd_time+0xa8>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8002678:	2500      	movs	r5, #0
 800267a:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 800267e:	f022 fd6b 	bl	8025158 <localtime>
 8002682:	4684      	mov	ip, r0
 8002684:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800268e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002690:	f8dc 1000 	ldr.w	r1, [ip]
 8002694:	4623      	mov	r3, r4
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 8002696:	4a1d      	ldr	r2, [pc, #116]	; (800270c <lcd_time+0xac>)
	timeinfo = *localtime(&localepochtime);
 8002698:	f843 1920 	str.w	r1, [r3], #-32
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 800269c:	2128      	movs	r1, #40	; 0x28
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <lcd_time+0xb0>)
 80026a0:	f024 fe2a 	bl	80272f8 <strftime>
	sprintf(str, "%s=\"%s\"", id, string);
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <lcd_time+0xb0>)
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <lcd_time+0xb4>)
 80026a8:	a806      	add	r0, sp, #24
 80026aa:	491b      	ldr	r1, [pc, #108]	; (8002718 <lcd_time+0xb8>)
	volatile int result = 0;
 80026ac:	9500      	str	r5, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 80026ae:	f024 f83b 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80026b2:	a806      	add	r0, sp, #24
 80026b4:	f7ff fe0a 	bl	80022cc <writelcdcmd>
	setlcdtext("t0.txt", sbuffer);

	if (gpslocked) {
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <lcd_time+0xbc>)
	result = writelcdcmd(str);
 80026ba:	9000      	str	r0, [sp, #0]
	if (gpslocked) {
 80026bc:	781c      	ldrb	r4, [r3, #0]
	return (result);
 80026be:	9b00      	ldr	r3, [sp, #0]
	if (gpslocked) {
 80026c0:	b12c      	cbz	r4, 80026ce <lcd_time+0x6e>
		writelcdcmd("vis t3,0");	// hide warning
 80026c2:	4817      	ldr	r0, [pc, #92]	; (8002720 <lcd_time+0xc0>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80026c4:	b01f      	add	sp, #124	; 0x7c
 80026c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writelcdcmd("vis t3,0");	// hide warning
 80026ca:	f7ff bdff 	b.w	80022cc <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <lcd_time+0xc4>)
 80026d0:	a802      	add	r0, sp, #8
 80026d2:	4915      	ldr	r1, [pc, #84]	; (8002728 <lcd_time+0xc8>)
 80026d4:	7eda      	ldrb	r2, [r3, #27]
 80026d6:	f024 f827 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80026da:	ab02      	add	r3, sp, #8
 80026dc:	4a13      	ldr	r2, [pc, #76]	; (800272c <lcd_time+0xcc>)
 80026de:	a806      	add	r0, sp, #24
 80026e0:	490d      	ldr	r1, [pc, #52]	; (8002718 <lcd_time+0xb8>)
	volatile int result = 0;
 80026e2:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80026e4:	f024 f820 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80026e8:	a806      	add	r0, sp, #24
 80026ea:	f7ff fdef 	bl	80022cc <writelcdcmd>
 80026ee:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 80026f0:	480f      	ldr	r0, [pc, #60]	; (8002730 <lcd_time+0xd0>)
	result = writelcdcmd(str);
 80026f2:	9301      	str	r3, [sp, #4]
	return (result);
 80026f4:	9b01      	ldr	r3, [sp, #4]
		writelcdcmd("vis t3,1");
 80026f6:	f7ff fde9 	bl	80022cc <writelcdcmd>
}
 80026fa:	b01f      	add	sp, #124	; 0x7c
 80026fc:	bd30      	pop	{r4, r5, pc}
 80026fe:	bf00      	nop
 8002700:	20002ec0 	.word	0x20002ec0
 8002704:	20001b20 	.word	0x20001b20
 8002708:	20001f3c 	.word	0x20001f3c
 800270c:	0802b8fc 	.word	0x0802b8fc
 8002710:	20001f10 	.word	0x20001f10
 8002714:	0802b908 	.word	0x0802b908
 8002718:	0802b86c 	.word	0x0802b86c
 800271c:	20003460 	.word	0x20003460
 8002720:	0802b910 	.word	0x0802b910
 8002724:	2000300c 	.word	0x2000300c
 8002728:	0802b91c 	.word	0x0802b91c
 800272c:	0802b92c 	.word	0x0802b92c
 8002730:	0802b934 	.word	0x0802b934

08002734 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <lcd_date+0x38>)
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <lcd_date+0x3c>)
 8002738:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <lcd_date+0x40>)
void lcd_date() {
 800273c:	b510      	push	{r4, lr}
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 800273e:	4c0e      	ldr	r4, [pc, #56]	; (8002778 <lcd_date+0x44>)
void lcd_date() {
 8002740:	b09a      	sub	sp, #104	; 0x68
	lastday = timeinfo.tm_yday;
 8002742:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8002744:	2128      	movs	r1, #40	; 0x28
 8002746:	4620      	mov	r0, r4
 8002748:	f024 fdd6 	bl	80272f8 <strftime>
	volatile int result = 0;
 800274c:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800274e:	4623      	mov	r3, r4
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <lcd_date+0x48>)
 8002752:	490b      	ldr	r1, [pc, #44]	; (8002780 <lcd_date+0x4c>)
	volatile int result = 0;
 8002754:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002756:	a802      	add	r0, sp, #8
 8002758:	f023 ffe6 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800275c:	a802      	add	r0, sp, #8
 800275e:	f7ff fdb5 	bl	80022cc <writelcdcmd>
 8002762:	9001      	str	r0, [sp, #4]
	return (result);
 8002764:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", sbuffer);
}
 8002766:	b01a      	add	sp, #104	; 0x68
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop
 800276c:	20001f3c 	.word	0x20001f3c
 8002770:	20001a58 	.word	0x20001a58
 8002774:	0802b940 	.word	0x0802b940
 8002778:	20001f10 	.word	0x20001f10
 800277c:	0802b950 	.word	0x0802b950
 8002780:	0802b86c 	.word	0x0802b86c

08002784 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8002784:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8002786:	4c9b      	ldr	r4, [pc, #620]	; (80029f4 <lcd_showvars+0x270>)
void lcd_showvars() {
 8002788:	b0c4      	sub	sp, #272	; 0x110
	switch (toggle) {
 800278a:	8823      	ldrh	r3, [r4, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d827      	bhi.n	80027e0 <lcd_showvars+0x5c>
 8002790:	e8df f003 	tbb	[pc, r3]
 8002794:	0228509a 	.word	0x0228509a
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002798:	4b97      	ldr	r3, [pc, #604]	; (80029f8 <lcd_showvars+0x274>)
 800279a:	4998      	ldr	r1, [pc, #608]	; (80029fc <lcd_showvars+0x278>)
 800279c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 80027a0:	6808      	ldr	r0, [r1, #0]
 80027a2:	9204      	str	r2, [sp, #16]
 80027a4:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	f242 7230 	movw	r2, #10032	; 0x2730
 80027ae:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80027b2:	2311      	movs	r3, #17
 80027b4:	e9cd 2000 	strd	r2, r0, [sp]
 80027b8:	2200      	movs	r2, #0
 80027ba:	9102      	str	r1, [sp, #8]
 80027bc:	a814      	add	r0, sp, #80	; 0x50
 80027be:	4990      	ldr	r1, [pc, #576]	; (8002a00 <lcd_showvars+0x27c>)
	volatile int result = 0;
 80027c0:	4615      	mov	r5, r2
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 80027c2:	f023 ffb1 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80027c6:	ab14      	add	r3, sp, #80	; 0x50
 80027c8:	4a8e      	ldr	r2, [pc, #568]	; (8002a04 <lcd_showvars+0x280>)
 80027ca:	498f      	ldr	r1, [pc, #572]	; (8002a08 <lcd_showvars+0x284>)
 80027cc:	a82c      	add	r0, sp, #176	; 0xb0
	volatile int result = 0;
 80027ce:	9513      	str	r5, [sp, #76]	; 0x4c
	sprintf(str, "%s=\"%s\"", id, string);
 80027d0:	f023 ffaa 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80027d4:	a82c      	add	r0, sp, #176	; 0xb0
 80027d6:	f7ff fd79 	bl	80022cc <writelcdcmd>
 80027da:	9013      	str	r0, [sp, #76]	; 0x4c
	return (result);
 80027dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
		toggle = 0;
 80027de:	8025      	strh	r5, [r4, #0]
		break;
	}
}
 80027e0:	b044      	add	sp, #272	; 0x110
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80027e4:	4e89      	ldr	r6, [pc, #548]	; (8002a0c <lcd_showvars+0x288>)
	volatile int result = 0;
 80027e6:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80027e8:	4989      	ldr	r1, [pc, #548]	; (8002a10 <lcd_showvars+0x28c>)
 80027ea:	a814      	add	r0, sp, #80	; 0x50
 80027ec:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 80027ee:	f023 ff9b 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80027f2:	ab14      	add	r3, sp, #80	; 0x50
 80027f4:	4a87      	ldr	r2, [pc, #540]	; (8002a14 <lcd_showvars+0x290>)
 80027f6:	a82c      	add	r0, sp, #176	; 0xb0
 80027f8:	4983      	ldr	r1, [pc, #524]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 80027fa:	9512      	str	r5, [sp, #72]	; 0x48
	sprintf(str, "%s=\"%s\"", id, string);
 80027fc:	f023 ff94 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002800:	a82c      	add	r0, sp, #176	; 0xb0
 8002802:	f7ff fd63 	bl	80022cc <writelcdcmd>
 8002806:	9012      	str	r0, [sp, #72]	; 0x48
	return (result);
 8002808:	9b12      	ldr	r3, [sp, #72]	; 0x48
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 800280a:	a814      	add	r0, sp, #80	; 0x50
 800280c:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800280e:	4980      	ldr	r1, [pc, #512]	; (8002a10 <lcd_showvars+0x28c>)
 8002810:	f023 ff8a 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002814:	ab14      	add	r3, sp, #80	; 0x50
 8002816:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <lcd_showvars+0x294>)
 8002818:	a82c      	add	r0, sp, #176	; 0xb0
 800281a:	497b      	ldr	r1, [pc, #492]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 800281c:	9511      	str	r5, [sp, #68]	; 0x44
	sprintf(str, "%s=\"%s\"", id, string);
 800281e:	f023 ff83 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002822:	a82c      	add	r0, sp, #176	; 0xb0
 8002824:	f7ff fd52 	bl	80022cc <writelcdcmd>
		toggle = 3;
 8002828:	2303      	movs	r3, #3
	result = writelcdcmd(str);
 800282a:	9011      	str	r0, [sp, #68]	; 0x44
		toggle = 3;
 800282c:	8023      	strh	r3, [r4, #0]
	return (result);
 800282e:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 8002830:	b044      	add	sp, #272	; 0x110
 8002832:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8002834:	4e75      	ldr	r6, [pc, #468]	; (8002a0c <lcd_showvars+0x288>)
	volatile int result = 0;
 8002836:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8002838:	4975      	ldr	r1, [pc, #468]	; (8002a10 <lcd_showvars+0x28c>)
 800283a:	a814      	add	r0, sp, #80	; 0x50
 800283c:	7ef2      	ldrb	r2, [r6, #27]
 800283e:	f023 ff73 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002842:	ab14      	add	r3, sp, #80	; 0x50
 8002844:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <lcd_showvars+0x298>)
 8002846:	a82c      	add	r0, sp, #176	; 0xb0
 8002848:	496f      	ldr	r1, [pc, #444]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 800284a:	9510      	str	r5, [sp, #64]	; 0x40
	sprintf(str, "%s=\"%s\"", id, string);
 800284c:	f023 ff6c 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002850:	a82c      	add	r0, sp, #176	; 0xb0
 8002852:	f7ff fd3b 	bl	80022cc <writelcdcmd>
 8002856:	9010      	str	r0, [sp, #64]	; 0x40
	return (result);
 8002858:	9b10      	ldr	r3, [sp, #64]	; 0x40
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 800285a:	a814      	add	r0, sp, #80	; 0x50
 800285c:	6a32      	ldr	r2, [r6, #32]
 800285e:	496c      	ldr	r1, [pc, #432]	; (8002a10 <lcd_showvars+0x28c>)
 8002860:	f023 ff62 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002864:	ab14      	add	r3, sp, #80	; 0x50
 8002866:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <lcd_showvars+0x29c>)
 8002868:	a82c      	add	r0, sp, #176	; 0xb0
 800286a:	4967      	ldr	r1, [pc, #412]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 800286c:	950f      	str	r5, [sp, #60]	; 0x3c
	sprintf(str, "%s=\"%s\"", id, string);
 800286e:	f023 ff5b 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002872:	a82c      	add	r0, sp, #176	; 0xb0
 8002874:	f7ff fd2a 	bl	80022cc <writelcdcmd>
 8002878:	900f      	str	r0, [sp, #60]	; 0x3c
	return (result);
 800287a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 800287c:	a814      	add	r0, sp, #80	; 0x50
 800287e:	69f2      	ldr	r2, [r6, #28]
 8002880:	4963      	ldr	r1, [pc, #396]	; (8002a10 <lcd_showvars+0x28c>)
 8002882:	f023 ff51 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002886:	ab14      	add	r3, sp, #80	; 0x50
 8002888:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <lcd_showvars+0x2a0>)
 800288a:	a82c      	add	r0, sp, #176	; 0xb0
 800288c:	495e      	ldr	r1, [pc, #376]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 800288e:	950e      	str	r5, [sp, #56]	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 8002890:	f023 ff4a 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002894:	a82c      	add	r0, sp, #176	; 0xb0
 8002896:	f7ff fd19 	bl	80022cc <writelcdcmd>
 800289a:	900e      	str	r0, [sp, #56]	; 0x38
	return (result);
 800289c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800289e:	a814      	add	r0, sp, #80	; 0x50
 80028a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80028a2:	495b      	ldr	r1, [pc, #364]	; (8002a10 <lcd_showvars+0x28c>)
 80028a4:	f023 ff40 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028a8:	ab14      	add	r3, sp, #80	; 0x50
 80028aa:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <lcd_showvars+0x2a4>)
 80028ac:	a82c      	add	r0, sp, #176	; 0xb0
 80028ae:	4956      	ldr	r1, [pc, #344]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028b0:	950d      	str	r5, [sp, #52]	; 0x34
	sprintf(str, "%s=\"%s\"", id, string);
 80028b2:	f023 ff39 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80028b6:	a82c      	add	r0, sp, #176	; 0xb0
 80028b8:	f7ff fd08 	bl	80022cc <writelcdcmd>
		toggle = 2;
 80028bc:	2302      	movs	r3, #2
	result = writelcdcmd(str);
 80028be:	900d      	str	r0, [sp, #52]	; 0x34
		toggle = 2;
 80028c0:	8023      	strh	r3, [r4, #0]
	return (result);
 80028c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 80028c4:	b044      	add	sp, #272	; 0x110
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028c8:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <lcd_showvars+0x2a8>)
	volatile int result = 0;
 80028ca:	2500      	movs	r5, #0
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028cc:	a814      	add	r0, sp, #80	; 0x50
		sprintf(str, "%d", statuspkt.uid);
 80028ce:	4e4f      	ldr	r6, [pc, #316]	; (8002a0c <lcd_showvars+0x288>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	0e11      	lsrs	r1, r2, #24
 80028d4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80028d8:	e9cd 3100 	strd	r3, r1, [sp]
 80028dc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80028e0:	4953      	ldr	r1, [pc, #332]	; (8002a30 <lcd_showvars+0x2ac>)
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f023 ff20 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028e8:	ab14      	add	r3, sp, #80	; 0x50
 80028ea:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <lcd_showvars+0x2b0>)
 80028ec:	a82c      	add	r0, sp, #176	; 0xb0
 80028ee:	4946      	ldr	r1, [pc, #280]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028f0:	950c      	str	r5, [sp, #48]	; 0x30
	sprintf(str, "%s=\"%s\"", id, string);
 80028f2:	f023 ff19 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80028f6:	a82c      	add	r0, sp, #176	; 0xb0
 80028f8:	f7ff fce8 	bl	80022cc <writelcdcmd>
 80028fc:	900c      	str	r0, [sp, #48]	; 0x30
	return (result);
 80028fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		sprintf(str, "%d", statuspkt.uid);
 8002900:	a814      	add	r0, sp, #80	; 0x50
 8002902:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
 8002906:	4942      	ldr	r1, [pc, #264]	; (8002a10 <lcd_showvars+0x28c>)
 8002908:	b292      	uxth	r2, r2
 800290a:	f023 ff0d 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800290e:	ab14      	add	r3, sp, #80	; 0x50
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <lcd_showvars+0x2b4>)
 8002912:	a82c      	add	r0, sp, #176	; 0xb0
 8002914:	493c      	ldr	r1, [pc, #240]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002916:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(str, "%s=\"%s\"", id, string);
 8002918:	f023 ff06 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800291c:	a82c      	add	r0, sp, #176	; 0xb0
 800291e:	f7ff fcd5 	bl	80022cc <writelcdcmd>
 8002922:	900b      	str	r0, [sp, #44]	; 0x2c
	return (result);
 8002924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sprintf(str, "%d", statuspkt.adcpktssent);
 8002926:	a814      	add	r0, sp, #80	; 0x50
 8002928:	f8b6 205e 	ldrh.w	r2, [r6, #94]	; 0x5e
 800292c:	4938      	ldr	r1, [pc, #224]	; (8002a10 <lcd_showvars+0x28c>)
 800292e:	b292      	uxth	r2, r2
 8002930:	f023 fefa 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002934:	ab14      	add	r3, sp, #80	; 0x50
 8002936:	4a41      	ldr	r2, [pc, #260]	; (8002a3c <lcd_showvars+0x2b8>)
 8002938:	a82c      	add	r0, sp, #176	; 0xb0
 800293a:	4933      	ldr	r1, [pc, #204]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 800293c:	950a      	str	r5, [sp, #40]	; 0x28
	sprintf(str, "%s=\"%s\"", id, string);
 800293e:	f023 fef3 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002942:	a82c      	add	r0, sp, #176	; 0xb0
 8002944:	f7ff fcc2 	bl	80022cc <writelcdcmd>
 8002948:	900a      	str	r0, [sp, #40]	; 0x28
	return (result);
 800294a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 800294c:	a814      	add	r0, sp, #80	; 0x50
 800294e:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <lcd_showvars+0x2bc>)
 8002950:	492f      	ldr	r1, [pc, #188]	; (8002a10 <lcd_showvars+0x28c>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002958:	f023 fee6 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800295c:	ab14      	add	r3, sp, #80	; 0x50
 800295e:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <lcd_showvars+0x2c0>)
 8002960:	a82c      	add	r0, sp, #176	; 0xb0
 8002962:	4929      	ldr	r1, [pc, #164]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002964:	9509      	str	r5, [sp, #36]	; 0x24
	sprintf(str, "%s=\"%s\"", id, string);
 8002966:	f023 fedf 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800296a:	a82c      	add	r0, sp, #176	; 0xb0
 800296c:	f7ff fcae 	bl	80022cc <writelcdcmd>
 8002970:	9009      	str	r0, [sp, #36]	; 0x24
	return (result);
 8002972:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002974:	a814      	add	r0, sp, #80	; 0x50
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <lcd_showvars+0x2c4>)
 8002978:	4925      	ldr	r1, [pc, #148]	; (8002a10 <lcd_showvars+0x28c>)
 800297a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800297e:	2a00      	cmp	r2, #0
 8002980:	bfb8      	it	lt
 8002982:	4252      	neglt	r2, r2
 8002984:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002988:	f023 fece 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800298c:	ab14      	add	r3, sp, #80	; 0x50
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <lcd_showvars+0x2c8>)
 8002990:	a82c      	add	r0, sp, #176	; 0xb0
 8002992:	491d      	ldr	r1, [pc, #116]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002994:	9508      	str	r5, [sp, #32]
	sprintf(str, "%s=\"%s\"", id, string);
 8002996:	f023 fec7 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800299a:	a82c      	add	r0, sp, #176	; 0xb0
 800299c:	f7ff fc96 	bl	80022cc <writelcdcmd>
 80029a0:	9008      	str	r0, [sp, #32]
	return (result);
 80029a2:	9b08      	ldr	r3, [sp, #32]
		sprintf(str, "%d", pgagain);	// gain
 80029a4:	a814      	add	r0, sp, #80	; 0x50
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <lcd_showvars+0x2cc>)
 80029a8:	4919      	ldr	r1, [pc, #100]	; (8002a10 <lcd_showvars+0x28c>)
 80029aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029ae:	f023 febb 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029b2:	ab14      	add	r3, sp, #80	; 0x50
 80029b4:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <lcd_showvars+0x2d0>)
 80029b6:	a82c      	add	r0, sp, #176	; 0xb0
 80029b8:	4913      	ldr	r1, [pc, #76]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029ba:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 80029bc:	f023 feb4 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80029c0:	a82c      	add	r0, sp, #176	; 0xb0
 80029c2:	f7ff fc83 	bl	80022cc <writelcdcmd>
 80029c6:	9007      	str	r0, [sp, #28]
	return (result);
 80029c8:	9b07      	ldr	r3, [sp, #28]
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 80029ca:	a814      	add	r0, sp, #80	; 0x50
 80029cc:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 80029ce:	4910      	ldr	r1, [pc, #64]	; (8002a10 <lcd_showvars+0x28c>)
 80029d0:	f023 feaa 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029d4:	ab14      	add	r3, sp, #80	; 0x50
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <lcd_showvars+0x2d4>)
 80029d8:	a82c      	add	r0, sp, #176	; 0xb0
 80029da:	490b      	ldr	r1, [pc, #44]	; (8002a08 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029dc:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 80029de:	f023 fea3 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 80029e2:	a82c      	add	r0, sp, #176	; 0xb0
 80029e4:	f7ff fc72 	bl	80022cc <writelcdcmd>
		toggle = 1;
 80029e8:	2301      	movs	r3, #1
	result = writelcdcmd(str);
 80029ea:	9006      	str	r0, [sp, #24]
		toggle = 1;
 80029ec:	8023      	strh	r3, [r4, #0]
	return (result);
 80029ee:	9b06      	ldr	r3, [sp, #24]
}
 80029f0:	b044      	add	sp, #272	; 0x110
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	20001f60 	.word	0x20001f60
 80029f8:	1ff0f000 	.word	0x1ff0f000
 80029fc:	20002158 	.word	0x20002158
 8002a00:	0802b9a8 	.word	0x0802b9a8
 8002a04:	0802b9d4 	.word	0x0802b9d4
 8002a08:	0802b86c 	.word	0x0802b86c
 8002a0c:	2000300c 	.word	0x2000300c
 8002a10:	0802ba0c 	.word	0x0802ba0c
 8002a14:	0802b8d4 	.word	0x0802b8d4
 8002a18:	0802b9a0 	.word	0x0802b9a0
 8002a1c:	0802b908 	.word	0x0802b908
 8002a20:	0802b950 	.word	0x0802b950
 8002a24:	0802b8c0 	.word	0x0802b8c0
 8002a28:	0802b92c 	.word	0x0802b92c
 8002a2c:	20002dcc 	.word	0x20002dcc
 8002a30:	0802b958 	.word	0x0802b958
 8002a34:	0802b968 	.word	0x0802b968
 8002a38:	0802b970 	.word	0x0802b970
 8002a3c:	0802b978 	.word	0x0802b978
 8002a40:	2000070c 	.word	0x2000070c
 8002a44:	0802b980 	.word	0x0802b980
 8002a48:	20000760 	.word	0x20000760
 8002a4c:	0802b988 	.word	0x0802b988
 8002a50:	200033e8 	.word	0x200033e8
 8002a54:	0802b990 	.word	0x0802b990
 8002a58:	0802b998 	.word	0x0802b998

08002a5c <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8002a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a60:	b0a7      	sub	sp, #156	; 0x9c
	volatile int result = 0;
 8002a62:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <lcd_trigcharts+0x130>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8002a66:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002a6a:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <lcd_trigcharts+0x134>)
 8002a6c:	a80e      	add	r0, sp, #56	; 0x38
 8002a6e:	4949      	ldr	r1, [pc, #292]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002a70:	9405      	str	r4, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a72:	f023 fe59 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002a76:	a80e      	add	r0, sp, #56	; 0x38
 8002a78:	4f47      	ldr	r7, [pc, #284]	; (8002b98 <lcd_trigcharts+0x13c>)
 8002a7a:	f7ff fc27 	bl	80022cc <writelcdcmd>
 8002a7e:	9005      	str	r0, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <lcd_trigcharts+0x130>)
 8002a82:	a80e      	add	r0, sp, #56	; 0x38
 8002a84:	4a45      	ldr	r2, [pc, #276]	; (8002b9c <lcd_trigcharts+0x140>)
	return (result);
 8002a86:	9905      	ldr	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a88:	4942      	ldr	r1, [pc, #264]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002a8a:	9404      	str	r4, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a8c:	f023 fe4c 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002a90:	a80e      	add	r0, sp, #56	; 0x38
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002a92:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002bd4 <lcd_trigcharts+0x178>
	result = writelcdcmd(str);
 8002a96:	f7ff fc19 	bl	80022cc <writelcdcmd>
 8002a9a:	9004      	str	r0, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a9c:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <lcd_trigcharts+0x144>)
 8002a9e:	a80e      	add	r0, sp, #56	; 0x38
 8002aa0:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <lcd_trigcharts+0x148>)
	return (result);
 8002aa2:	9904      	ldr	r1, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aa4:	493b      	ldr	r1, [pc, #236]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002aa6:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aa8:	f023 fe3e 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002aac:	a80e      	add	r0, sp, #56	; 0x38
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002aae:	4e3e      	ldr	r6, [pc, #248]	; (8002ba8 <lcd_trigcharts+0x14c>)
	result = writelcdcmd(str);
 8002ab0:	f7ff fc0c 	bl	80022cc <writelcdcmd>
 8002ab4:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <lcd_trigcharts+0x144>)
 8002ab8:	a80e      	add	r0, sp, #56	; 0x38
 8002aba:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <lcd_trigcharts+0x150>)
	return (result);
 8002abc:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002abe:	4935      	ldr	r1, [pc, #212]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002ac0:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ac2:	f023 fe31 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002ac6:	a80e      	add	r0, sp, #56	; 0x38
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002ac8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002bd8 <lcd_trigcharts+0x17c>
	result = writelcdcmd(str);
 8002acc:	f7ff fbfe 	bl	80022cc <writelcdcmd>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002ad0:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <lcd_trigcharts+0x154>)
	result = writelcdcmd(str);
 8002ad2:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002ad4:	a806      	add	r0, sp, #24
	return (result);
 8002ad6:	9a02      	ldr	r2, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002ad8:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <lcd_trigcharts+0x158>)
 8002ada:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002adc:	f023 fe24 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002ae0:	ab06      	add	r3, sp, #24
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <lcd_trigcharts+0x15c>)
 8002ae4:	a80e      	add	r0, sp, #56	; 0x38
 8002ae6:	492b      	ldr	r1, [pc, #172]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002ae8:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aea:	f023 fe1d 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002aee:	a80e      	add	r0, sp, #56	; 0x38
 8002af0:	f7ff fbec 	bl	80022cc <writelcdcmd>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <lcd_trigcharts+0x160>)
	result = writelcdcmd(str);
 8002af6:	9001      	str	r0, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002af8:	a806      	add	r0, sp, #24
 8002afa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002afe:	492d      	ldr	r1, [pc, #180]	; (8002bb4 <lcd_trigcharts+0x158>)
 8002b00:	2a00      	cmp	r2, #0
	return (result);
 8002b02:	9b01      	ldr	r3, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b04:	bfb8      	it	lt
 8002b06:	4252      	neglt	r2, r2
 8002b08:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002b0c:	f023 fe0c 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002b10:	ab06      	add	r3, sp, #24
 8002b12:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <lcd_trigcharts+0x164>)
 8002b14:	a80e      	add	r0, sp, #56	; 0x38
 8002b16:	491f      	ldr	r1, [pc, #124]	; (8002b94 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b18:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b1a:	f023 fe05 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002b1e:	a80e      	add	r0, sp, #56	; 0x38
 8002b20:	f7ff fbd4 	bl	80022cc <writelcdcmd>
 8002b24:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002b26:	4827      	ldr	r0, [pc, #156]	; (8002bc4 <lcd_trigcharts+0x168>)
	result = writelcdcmd(str);
 8002b28:	9300      	str	r3, [sp, #0]
	return (result);
 8002b2a:	9b00      	ldr	r3, [sp, #0]
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002b2c:	f7ff fbce 	bl	80022cc <writelcdcmd>
	buffi = trigindex;
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <lcd_trigcharts+0x16c>)
 8002b32:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002b34:	e01c      	b.n	8002b70 <lcd_trigcharts+0x114>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b36:	f819 2004 	ldrb.w	r2, [r9, r4]
 8002b3a:	f023 fdf5 	bl	8026728 <siprintf>
		writelcdcmd(str);
 8002b3e:	a806      	add	r0, sp, #24
 8002b40:	f7ff fbc4 	bl	80022cc <writelcdcmd>
		osDelay(15);
 8002b44:	200f      	movs	r0, #15
 8002b46:	f013 fc65 	bl	8016414 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002b4a:	f818 2004 	ldrb.w	r2, [r8, r4]
 8002b4e:	491f      	ldr	r1, [pc, #124]	; (8002bcc <lcd_trigcharts+0x170>)
 8002b50:	a806      	add	r0, sp, #24
 8002b52:	f023 fde9 	bl	8026728 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002b56:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002b58:	a806      	add	r0, sp, #24
 8002b5a:	f7ff fbb7 	bl	80022cc <writelcdcmd>
		osDelay(15);
 8002b5e:	200f      	movs	r0, #15
 8002b60:	f013 fc58 	bl	8016414 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002b64:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002b68:	bfc8      	it	gt
 8002b6a:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002b6c:	3d01      	subs	r5, #1
 8002b6e:	d007      	beq.n	8002b80 <lcd_trigcharts+0x124>
		if (our_currentpage != 2)		// impatient user
 8002b70:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b72:	4631      	mov	r1, r6
 8002b74:	a806      	add	r0, sp, #24
		if (our_currentpage != 2)		// impatient user
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d0dd      	beq.n	8002b36 <lcd_trigcharts+0xda>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002b7a:	b027      	add	sp, #156	; 0x9c
 8002b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002b80:	4813      	ldr	r0, [pc, #76]	; (8002bd0 <lcd_trigcharts+0x174>)
 8002b82:	f7ff fba3 	bl	80022cc <writelcdcmd>
}
 8002b86:	b027      	add	sp, #156	; 0x9c
 8002b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b8c:	0802b9dc 	.word	0x0802b9dc
 8002b90:	0802b92c 	.word	0x0802b92c
 8002b94:	0802b86c 	.word	0x0802b86c
 8002b98:	20001d20 	.word	0x20001d20
 8002b9c:	0802b9e8 	.word	0x0802b9e8
 8002ba0:	0802b9f0 	.word	0x0802b9f0
 8002ba4:	0802b8d4 	.word	0x0802b8d4
 8002ba8:	0802ba04 	.word	0x0802ba04
 8002bac:	0802b950 	.word	0x0802b950
 8002bb0:	2000300c 	.word	0x2000300c
 8002bb4:	0802ba0c 	.word	0x0802ba0c
 8002bb8:	0802b908 	.word	0x0802b908
 8002bbc:	20000760 	.word	0x20000760
 8002bc0:	0802b8c0 	.word	0x0802b8c0
 8002bc4:	0802b9f8 	.word	0x0802b9f8
 8002bc8:	20001f64 	.word	0x20001f64
 8002bcc:	0802ba10 	.word	0x0802ba10
 8002bd0:	0802ba1c 	.word	0x0802ba1c
 8002bd4:	20001f68 	.word	0x20001f68
 8002bd8:	20001b40 	.word	0x20001b40

08002bdc <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8002bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002be0:	4956      	ldr	r1, [pc, #344]	; (8002d3c <lcd_trigplot+0x160>)
void lcd_trigplot() {
 8002be2:	b0a7      	sub	sp, #156	; 0x9c
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002be4:	4d56      	ldr	r5, [pc, #344]	; (8002d40 <lcd_trigplot+0x164>)
 8002be6:	680b      	ldr	r3, [r1, #0]
 8002be8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8002bea:	4e56      	ldr	r6, [pc, #344]	; (8002d44 <lcd_trigplot+0x168>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002bec:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002bee:	4856      	ldr	r0, [pc, #344]	; (8002d48 <lcd_trigplot+0x16c>)
	val = abs(meanwindiff) & 0xfff;
 8002bf0:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8002bf4:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8002bf6:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8002bfa:	4c54      	ldr	r4, [pc, #336]	; (8002d4c <lcd_trigplot+0x170>)
 8002bfc:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002bfe:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8002c00:	4f53      	ldr	r7, [pc, #332]	; (8002d50 <lcd_trigplot+0x174>)
 8002c02:	bfa8      	it	ge
 8002c04:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002c06:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002c08:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002d8c <lcd_trigplot+0x1b0>
	val = abs(meanwindiff) & 0xfff;
 8002c0c:	bfb8      	it	lt
 8002c0e:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8002c10:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002c14:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002c1a:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002c1c:	2b77      	cmp	r3, #119	; 0x77
 8002c1e:	bfa8      	it	ge
 8002c20:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c22:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002c24:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c28:	d00c      	beq.n	8002c44 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002c2a:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002c2c:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8002c30:	da03      	bge.n	8002c3a <lcd_trigplot+0x5e>
	trigindex++;
 8002c32:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002c34:	b027      	add	sp, #156	; 0x9c
 8002c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		trigindex = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6023      	str	r3, [r4, #0]
}
 8002c3e:	b027      	add	sp, #156	; 0x9c
 8002c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	volatile int result = 0;
 8002c44:	f04f 0900 	mov.w	r9, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <lcd_trigplot+0x178>)
 8002c4a:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <lcd_trigplot+0x17c>)
 8002c4c:	a80e      	add	r0, sp, #56	; 0x38
 8002c4e:	4943      	ldr	r1, [pc, #268]	; (8002d5c <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c50:	f8cd 9014 	str.w	r9, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c54:	f023 fd68 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002c58:	a80e      	add	r0, sp, #56	; 0x38
 8002c5a:	f7ff fb37 	bl	80022cc <writelcdcmd>
 8002c5e:	9005      	str	r0, [sp, #20]
	return (result);
 8002c60:	9b05      	ldr	r3, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c62:	a80e      	add	r0, sp, #56	; 0x38
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <lcd_trigplot+0x178>)
 8002c66:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <lcd_trigplot+0x184>)
 8002c68:	493c      	ldr	r1, [pc, #240]	; (8002d5c <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c6a:	f8cd 9010 	str.w	r9, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c6e:	f023 fd5b 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002c72:	a80e      	add	r0, sp, #56	; 0x38
 8002c74:	f7ff fb2a 	bl	80022cc <writelcdcmd>
 8002c78:	9004      	str	r0, [sp, #16]
	return (result);
 8002c7a:	9b04      	ldr	r3, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c7c:	a80e      	add	r0, sp, #56	; 0x38
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <lcd_trigplot+0x188>)
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <lcd_trigplot+0x18c>)
 8002c82:	4936      	ldr	r1, [pc, #216]	; (8002d5c <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c84:	f8cd 900c 	str.w	r9, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c88:	f023 fd4e 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002c8c:	a80e      	add	r0, sp, #56	; 0x38
 8002c8e:	f7ff fb1d 	bl	80022cc <writelcdcmd>
 8002c92:	9003      	str	r0, [sp, #12]
	return (result);
 8002c94:	9b03      	ldr	r3, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c96:	a80e      	add	r0, sp, #56	; 0x38
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <lcd_trigplot+0x188>)
 8002c9a:	4a34      	ldr	r2, [pc, #208]	; (8002d6c <lcd_trigplot+0x190>)
 8002c9c:	492f      	ldr	r1, [pc, #188]	; (8002d5c <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c9e:	f8cd 9008 	str.w	r9, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ca2:	f023 fd41 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002ca6:	a80e      	add	r0, sp, #56	; 0x38
 8002ca8:	f7ff fb10 	bl	80022cc <writelcdcmd>
 8002cac:	9002      	str	r0, [sp, #8]
	return (result);
 8002cae:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002cb0:	a806      	add	r0, sp, #24
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	492e      	ldr	r1, [pc, #184]	; (8002d70 <lcd_trigplot+0x194>)
 8002cb6:	5cfa      	ldrb	r2, [r7, r3]
 8002cb8:	f023 fd36 	bl	8026728 <siprintf>
		writelcdcmd(str);
 8002cbc:	a806      	add	r0, sp, #24
 8002cbe:	f7ff fb05 	bl	80022cc <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	492b      	ldr	r1, [pc, #172]	; (8002d74 <lcd_trigplot+0x198>)
 8002cc6:	a806      	add	r0, sp, #24
 8002cc8:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002ccc:	f023 fd2c 	bl	8026728 <siprintf>
		writelcdcmd(str);
 8002cd0:	a806      	add	r0, sp, #24
 8002cd2:	f7ff fafb 	bl	80022cc <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002cd6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002cd8:	4927      	ldr	r1, [pc, #156]	; (8002d78 <lcd_trigplot+0x19c>)
 8002cda:	a806      	add	r0, sp, #24
 8002cdc:	f023 fd24 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002ce0:	ab06      	add	r3, sp, #24
 8002ce2:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <lcd_trigplot+0x1a0>)
 8002ce4:	a80e      	add	r0, sp, #56	; 0x38
 8002ce6:	491d      	ldr	r1, [pc, #116]	; (8002d5c <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002ce8:	f8cd 9004 	str.w	r9, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002cec:	f023 fd1c 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002cf0:	a80e      	add	r0, sp, #56	; 0x38
 8002cf2:	f7ff faeb 	bl	80022cc <writelcdcmd>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002cf6:	f9b6 2000 	ldrsh.w	r2, [r6]
	result = writelcdcmd(str);
 8002cfa:	9001      	str	r0, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002cfc:	a806      	add	r0, sp, #24
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	491d      	ldr	r1, [pc, #116]	; (8002d78 <lcd_trigplot+0x19c>)
	return (result);
 8002d02:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d04:	bfb8      	it	lt
 8002d06:	4252      	neglt	r2, r2
 8002d08:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002d0c:	f023 fd0c 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002d10:	4912      	ldr	r1, [pc, #72]	; (8002d5c <lcd_trigplot+0x180>)
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <lcd_trigplot+0x1a4>)
 8002d14:	ab06      	add	r3, sp, #24
 8002d16:	a80e      	add	r0, sp, #56	; 0x38
	volatile int result = 0;
 8002d18:	f8cd 9000 	str.w	r9, [sp]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d1c:	f023 fd04 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002d20:	a80e      	add	r0, sp, #56	; 0x38
 8002d22:	f7ff fad3 	bl	80022cc <writelcdcmd>
 8002d26:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002d28:	4816      	ldr	r0, [pc, #88]	; (8002d84 <lcd_trigplot+0x1a8>)
	result = writelcdcmd(str);
 8002d2a:	9300      	str	r3, [sp, #0]
	return (result);
 8002d2c:	9b00      	ldr	r3, [sp, #0]
		writelcdcmd("vis t3,1");
 8002d2e:	f7ff facd 	bl	80022cc <writelcdcmd>
		writelcdcmd("vis t4,1");
 8002d32:	4815      	ldr	r0, [pc, #84]	; (8002d88 <lcd_trigplot+0x1ac>)
 8002d34:	f7ff faca 	bl	80022cc <writelcdcmd>
	trigindex++;
 8002d38:	6821      	ldr	r1, [r4, #0]
 8002d3a:	e776      	b.n	8002c2a <lcd_trigplot+0x4e>
 8002d3c:	20001a60 	.word	0x20001a60
 8002d40:	2000300c 	.word	0x2000300c
 8002d44:	20000760 	.word	0x20000760
 8002d48:	20001d20 	.word	0x20001d20
 8002d4c:	20001f64 	.word	0x20001f64
 8002d50:	20001f68 	.word	0x20001f68
 8002d54:	0802b9dc 	.word	0x0802b9dc
 8002d58:	0802b92c 	.word	0x0802b92c
 8002d5c:	0802b86c 	.word	0x0802b86c
 8002d60:	0802b9e8 	.word	0x0802b9e8
 8002d64:	0802b9f0 	.word	0x0802b9f0
 8002d68:	0802b8d4 	.word	0x0802b8d4
 8002d6c:	0802b950 	.word	0x0802b950
 8002d70:	0802ba04 	.word	0x0802ba04
 8002d74:	0802ba10 	.word	0x0802ba10
 8002d78:	0802ba0c 	.word	0x0802ba0c
 8002d7c:	0802b908 	.word	0x0802b908
 8002d80:	0802b8c0 	.word	0x0802b8c0
 8002d84:	0802b934 	.word	0x0802b934
 8002d88:	0802b8e4 	.word	0x0802b8e4
 8002d8c:	20001b40 	.word	0x20001b40

08002d90 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d94:	b0a4      	sub	sp, #144	; 0x90
	volatile int result = 0;
 8002d96:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <lcd_presscharts+0xbc>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002d9a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002d9e:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <lcd_presscharts+0xc0>)
 8002da0:	a80c      	add	r0, sp, #48	; 0x30
 8002da2:	492c      	ldr	r1, [pc, #176]	; (8002e54 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002da4:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002da6:	f023 fcbf 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002daa:	a80c      	add	r0, sp, #48	; 0x30
 8002dac:	4f2a      	ldr	r7, [pc, #168]	; (8002e58 <lcd_presscharts+0xc8>)
 8002dae:	f7ff fa8d 	bl	80022cc <writelcdcmd>
 8002db2:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <lcd_presscharts+0xbc>)
 8002db6:	a80c      	add	r0, sp, #48	; 0x30
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <lcd_presscharts+0xcc>)
	return (result);
 8002dba:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dbc:	4925      	ldr	r1, [pc, #148]	; (8002e54 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002dbe:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dc0:	f023 fcb2 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002dc4:	a80c      	add	r0, sp, #48	; 0x30
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002dc6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002e80 <lcd_presscharts+0xf0>
	result = writelcdcmd(str);
 8002dca:	f7ff fa7f 	bl	80022cc <writelcdcmd>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <lcd_presscharts+0xd0>)
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <lcd_presscharts+0xd4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
	result = writelcdcmd(str);
 8002dd4:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dd6:	a804      	add	r0, sp, #16
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	089b      	lsrs	r3, r3, #2
	return (result);
 8002ddc:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dde:	4922      	ldr	r1, [pc, #136]	; (8002e68 <lcd_presscharts+0xd8>)
 8002de0:	f023 fca2 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002de4:	ab04      	add	r3, sp, #16
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <lcd_presscharts+0xdc>)
 8002de8:	a80c      	add	r0, sp, #48	; 0x30
 8002dea:	491a      	ldr	r1, [pc, #104]	; (8002e54 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002dec:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dee:	f023 fc9b 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002df2:	a80c      	add	r0, sp, #48	; 0x30
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002df4:	4e1e      	ldr	r6, [pc, #120]	; (8002e70 <lcd_presscharts+0xe0>)
	result = writelcdcmd(str);
 8002df6:	f7ff fa69 	bl	80022cc <writelcdcmd>
 8002dfa:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123");		// normal grey
 8002dfc:	481d      	ldr	r0, [pc, #116]	; (8002e74 <lcd_presscharts+0xe4>)
	result = writelcdcmd(str);
 8002dfe:	9301      	str	r3, [sp, #4]
	return (result);
 8002e00:	9b01      	ldr	r3, [sp, #4]
	writelcdcmd("b2.bco=123");		// normal grey
 8002e02:	f7ff fa63 	bl	80022cc <writelcdcmd>
	buffi = pressindex;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <lcd_presscharts+0xe8>)
 8002e08:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002e0a:	e010      	b.n	8002e2e <lcd_presscharts+0x9e>
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e0c:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002e10:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e12:	f023 fc89 	bl	8026728 <siprintf>
		writelcdcmd(str);
 8002e16:	a804      	add	r0, sp, #16
 8002e18:	f7ff fa58 	bl	80022cc <writelcdcmd>
		osDelay(15);
 8002e1c:	200f      	movs	r0, #15
 8002e1e:	f013 faf9 	bl	8016414 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002e22:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002e26:	bfc8      	it	gt
 8002e28:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002e2a:	3d01      	subs	r5, #1
 8002e2c:	d007      	beq.n	8002e3e <lcd_presscharts+0xae>
		if (our_currentpage != 3)		// impatient user
 8002e2e:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e30:	4631      	mov	r1, r6
 8002e32:	a804      	add	r0, sp, #16
		if (our_currentpage != 3)		// impatient user
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d0e9      	beq.n	8002e0c <lcd_presscharts+0x7c>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002e38:	b024      	add	sp, #144	; 0x90
 8002e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002e3e:	480f      	ldr	r0, [pc, #60]	; (8002e7c <lcd_presscharts+0xec>)
 8002e40:	f7ff fa44 	bl	80022cc <writelcdcmd>
}
 8002e44:	b024      	add	sp, #144	; 0x90
 8002e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e4a:	bf00      	nop
 8002e4c:	0802ba2c 	.word	0x0802ba2c
 8002e50:	0802b92c 	.word	0x0802b92c
 8002e54:	0802b86c 	.word	0x0802b86c
 8002e58:	20001d20 	.word	0x20001d20
 8002e5c:	0802b9e8 	.word	0x0802b9e8
 8002e60:	200033ec 	.word	0x200033ec
 8002e64:	200033f0 	.word	0x200033f0
 8002e68:	0802ba38 	.word	0x0802ba38
 8002e6c:	0802b908 	.word	0x0802b908
 8002e70:	0802ba04 	.word	0x0802ba04
 8002e74:	0802b9f8 	.word	0x0802b9f8
 8002e78:	20001d24 	.word	0x20001d24
 8002e7c:	0802ba1c 	.word	0x0802ba1c
 8002e80:	20001d28 	.word	0x20001d28

08002e84 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8002e84:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e86:	4d31      	ldr	r5, [pc, #196]	; (8002f4c <lcd_pressplot+0xc8>)
void lcd_pressplot() {
 8002e88:	b0a4      	sub	sp, #144	; 0x90
	p = pressure;
 8002e8a:	4c31      	ldr	r4, [pc, #196]	; (8002f50 <lcd_pressplot+0xcc>)

	p = pressure * 1000 + pf;
 8002e8c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e90:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8002e92:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e94:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8002e96:	482f      	ldr	r0, [pc, #188]	; (8002f54 <lcd_pressplot+0xd0>)
	p = pressure;
 8002e98:	9100      	str	r1, [sp, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e9a:	9201      	str	r2, [sp, #4]
	p = pressure * 1000 + pf;
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	fb06 3301 	mla	r3, r6, r1, r3
 8002ea2:	9300      	str	r3, [sp, #0]
	if (p < 93000)
 8002ea4:	9b00      	ldr	r3, [sp, #0]
 8002ea6:	4283      	cmp	r3, r0
 8002ea8:	dc01      	bgt.n	8002eae <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <lcd_pressplot+0xd4>)
 8002eac:	9300      	str	r3, [sp, #0]
	if (p > 103000)
 8002eae:	9a00      	ldr	r2, [sp, #0]
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <lcd_pressplot+0xd8>)
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dd00      	ble.n	8002eb8 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002eb6:	9b00      	ldr	r3, [sp, #0]

	p = p - 93000;
 8002eb8:	9900      	ldr	r1, [sp, #0]
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <lcd_pressplot+0xdc>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <lcd_pressplot+0xe0>)
	p = p - 93000;
 8002ebe:	440b      	add	r3, r1
 8002ec0:	9300      	str	r3, [sp, #0]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002ec2:	9b00      	ldr	r3, [sp, #0]
 8002ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec8:	17db      	asrs	r3, r3, #31
 8002eca:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002ece:	9302      	str	r3, [sp, #8]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002ed0:	9b02      	ldr	r3, [sp, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da01      	bge.n	8002eda <lcd_pressplot+0x56>
		val = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9302      	str	r3, [sp, #8]
	if (val >= 240)
 8002eda:	9b02      	ldr	r3, [sp, #8]
 8002edc:	2bef      	cmp	r3, #239	; 0xef
 8002ede:	dd01      	ble.n	8002ee4 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002ee0:	23ef      	movs	r3, #239	; 0xef
 8002ee2:	9302      	str	r3, [sp, #8]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ee4:	4920      	ldr	r1, [pc, #128]	; (8002f68 <lcd_pressplot+0xe4>)
	pressvec[pressindex] = val;
 8002ee6:	9a02      	ldr	r2, [sp, #8]
 8002ee8:	4e20      	ldr	r6, [pc, #128]	; (8002f6c <lcd_pressplot+0xe8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002eea:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002eec:	6833      	ldr	r3, [r6, #0]
 8002eee:	4820      	ldr	r0, [pc, #128]	; (8002f70 <lcd_pressplot+0xec>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ef0:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002ef2:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ef4:	d007      	beq.n	8002f06 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002ef6:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002ef8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002efc:	bfa8      	it	ge
 8002efe:	2300      	movge	r3, #0
 8002f00:	6033      	str	r3, [r6, #0]
}
 8002f02:	b024      	add	sp, #144	; 0x90
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	491a      	ldr	r1, [pc, #104]	; (8002f74 <lcd_pressplot+0xf0>)
 8002f0a:	a804      	add	r0, sp, #16
 8002f0c:	f023 fc0c 	bl	8026728 <siprintf>
		writelcdcmd(str);
 8002f10:	a804      	add	r0, sp, #16
 8002f12:	f7ff f9db 	bl	80022cc <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	a804      	add	r0, sp, #16
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	4916      	ldr	r1, [pc, #88]	; (8002f78 <lcd_pressplot+0xf4>)
 8002f20:	f023 fc02 	bl	8026728 <siprintf>
	volatile int result = 0;
 8002f24:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002f26:	ab04      	add	r3, sp, #16
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <lcd_pressplot+0xf8>)
	volatile int result = 0;
 8002f2a:	9103      	str	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002f2c:	a80c      	add	r0, sp, #48	; 0x30
 8002f2e:	4914      	ldr	r1, [pc, #80]	; (8002f80 <lcd_pressplot+0xfc>)
 8002f30:	f023 fbfa 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002f34:	a80c      	add	r0, sp, #48	; 0x30
 8002f36:	f7ff f9c9 	bl	80022cc <writelcdcmd>
 8002f3a:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002f3c:	4811      	ldr	r0, [pc, #68]	; (8002f84 <lcd_pressplot+0x100>)
	result = writelcdcmd(str);
 8002f3e:	9303      	str	r3, [sp, #12]
	return (result);
 8002f40:	9b03      	ldr	r3, [sp, #12]
		writelcdcmd("vis t3,1");
 8002f42:	f7ff f9c3 	bl	80022cc <writelcdcmd>
	pressindex++;
 8002f46:	6833      	ldr	r3, [r6, #0]
 8002f48:	e7d5      	b.n	8002ef6 <lcd_pressplot+0x72>
 8002f4a:	bf00      	nop
 8002f4c:	200033ec 	.word	0x200033ec
 8002f50:	200033f0 	.word	0x200033f0
 8002f54:	00016b47 	.word	0x00016b47
 8002f58:	00016b48 	.word	0x00016b48
 8002f5c:	00019258 	.word	0x00019258
 8002f60:	fffe94b8 	.word	0xfffe94b8
 8002f64:	63e7063f 	.word	0x63e7063f
 8002f68:	20001d20 	.word	0x20001d20
 8002f6c:	20001d24 	.word	0x20001d24
 8002f70:	20001d28 	.word	0x20001d28
 8002f74:	0802ba04 	.word	0x0802ba04
 8002f78:	0802ba38 	.word	0x0802ba38
 8002f7c:	0802b908 	.word	0x0802b908
 8002f80:	0802b86c 	.word	0x0802b86c
 8002f84:	0802b934 	.word	0x0802b934

08002f88 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8002f88:	b510      	push	{r4, lr}
	unsigned char str[48];

	osDelay(100);
 8002f8a:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002f8c:	b0a8      	sub	sp, #160	; 0xa0
	osDelay(100);
 8002f8e:	f013 fa41 	bl	8016414 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <lcd_controls+0x88>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d001      	beq.n	8002f9e <lcd_controls+0x16>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8002f9a:	b028      	add	sp, #160	; 0xa0
 8002f9c:	bd10      	pop	{r4, pc}
	volatile int result = 0;
 8002f9e:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <lcd_controls+0x8c>)
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <lcd_controls+0x90>)
 8002fa4:	a810      	add	r0, sp, #64	; 0x40
 8002fa6:	491d      	ldr	r1, [pc, #116]	; (800301c <lcd_controls+0x94>)
	volatile int result = 0;
 8002fa8:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002faa:	f023 fbbd 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002fae:	a810      	add	r0, sp, #64	; 0x40
 8002fb0:	f7ff f98c 	bl	80022cc <writelcdcmd>
 8002fb4:	9003      	str	r0, [sp, #12]
	return (result);
 8002fb6:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fb8:	a810      	add	r0, sp, #64	; 0x40
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <lcd_controls+0x98>)
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <lcd_controls+0x9c>)
 8002fbe:	4917      	ldr	r1, [pc, #92]	; (800301c <lcd_controls+0x94>)
	volatile int result = 0;
 8002fc0:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fc2:	f023 fbb1 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002fc6:	a810      	add	r0, sp, #64	; 0x40
 8002fc8:	f7ff f980 	bl	80022cc <writelcdcmd>
 8002fcc:	9002      	str	r0, [sp, #8]
	return (result);
 8002fce:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fd0:	a810      	add	r0, sp, #64	; 0x40
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <lcd_controls+0xa0>)
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <lcd_controls+0xa4>)
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <lcd_controls+0x94>)
	volatile int result = 0;
 8002fd8:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fda:	f023 fba5 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8002fde:	a810      	add	r0, sp, #64	; 0x40
 8002fe0:	f7ff f974 	bl	80022cc <writelcdcmd>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fe4:	4a12      	ldr	r2, [pc, #72]	; (8003030 <lcd_controls+0xa8>)
	result = writelcdcmd(str);
 8002fe6:	9001      	str	r0, [sp, #4]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fe8:	a804      	add	r0, sp, #16
 8002fea:	4912      	ldr	r1, [pc, #72]	; (8003034 <lcd_controls+0xac>)
	return (result);
 8002fec:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fee:	f023 fb9b 	bl	8026728 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002ff2:	ab04      	add	r3, sp, #16
 8002ff4:	4a10      	ldr	r2, [pc, #64]	; (8003038 <lcd_controls+0xb0>)
 8002ff6:	4909      	ldr	r1, [pc, #36]	; (800301c <lcd_controls+0x94>)
 8002ff8:	a810      	add	r0, sp, #64	; 0x40
	volatile int result = 0;
 8002ffa:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ffc:	f023 fb94 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 8003000:	a810      	add	r0, sp, #64	; 0x40
 8003002:	f7ff f963 	bl	80022cc <writelcdcmd>
 8003006:	9000      	str	r0, [sp, #0]
	return (result);
 8003008:	9b00      	ldr	r3, [sp, #0]
}
 800300a:	b028      	add	sp, #160	; 0xa0
 800300c:	bd10      	pop	{r4, pc}
 800300e:	bf00      	nop
 8003010:	20001d20 	.word	0x20001d20
 8003014:	0802ba44 	.word	0x0802ba44
 8003018:	0802b908 	.word	0x0802b908
 800301c:	0802b86c 	.word	0x0802b86c
 8003020:	0802ba4c 	.word	0x0802ba4c
 8003024:	0802b950 	.word	0x0802b950
 8003028:	0802ba54 	.word	0x0802ba54
 800302c:	0802b8c0 	.word	0x0802b8c0
 8003030:	200034c8 	.word	0x200034c8
 8003034:	0802ba64 	.word	0x0802ba64
 8003038:	0802b92c 	.word	0x0802b92c

0800303c <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 800303c:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 800303e:	4c22      	ldr	r4, [pc, #136]	; (80030c8 <lcd_pagechange+0x8c>)
lcd_pagechange(uint8_t newpage) {
 8003040:	b09a      	sub	sp, #104	; 0x68
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8003042:	7823      	ldrb	r3, [r4, #0]
 8003044:	4283      	cmp	r3, r0
 8003046:	d01f      	beq.n	8003088 <lcd_pagechange+0x4c>
	our_currentpage = newpage;
 8003048:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 800304a:	2805      	cmp	r0, #5
 800304c:	d838      	bhi.n	80030c0 <lcd_pagechange+0x84>
 800304e:	e8df f000 	tbb	[pc, r0]
 8003052:	2503      	.short	0x2503
 8003054:	1b1f312b 	.word	0x1b1f312b
		lcd_time();
 8003058:	f7ff fb02 	bl	8002660 <lcd_time>
	lastday = timeinfo.tm_yday;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <lcd_pagechange+0x90>)
 800305e:	491c      	ldr	r1, [pc, #112]	; (80030d0 <lcd_pagechange+0x94>)
 8003060:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <lcd_pagechange+0x98>)
	lastday = timeinfo.tm_yday;
 8003064:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8003066:	2128      	movs	r1, #40	; 0x28
 8003068:	481b      	ldr	r0, [pc, #108]	; (80030d8 <lcd_pagechange+0x9c>)
 800306a:	f024 f945 	bl	80272f8 <strftime>
	volatile int result = 0;
 800306e:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <lcd_pagechange+0x9c>)
 8003072:	a802      	add	r0, sp, #8
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <lcd_pagechange+0xa0>)
	volatile int result = 0;
 8003076:	9101      	str	r1, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8003078:	4919      	ldr	r1, [pc, #100]	; (80030e0 <lcd_pagechange+0xa4>)
 800307a:	f023 fb55 	bl	8026728 <siprintf>
	result = writelcdcmd(str);
 800307e:	a802      	add	r0, sp, #8
 8003080:	f7ff f924 	bl	80022cc <writelcdcmd>
 8003084:	9001      	str	r0, [sp, #4]
	return (result);
 8003086:	9b01      	ldr	r3, [sp, #4]
	return (our_currentpage);
 8003088:	7820      	ldrb	r0, [r4, #0]
 800308a:	b2c0      	uxtb	r0, r0
}
 800308c:	b01a      	add	sp, #104	; 0x68
 800308e:	bd10      	pop	{r4, pc}
		lcd_controls();
 8003090:	f7ff ff7a 	bl	8002f88 <lcd_controls>
	return (our_currentpage);
 8003094:	7820      	ldrb	r0, [r4, #0]
 8003096:	b2c0      	uxtb	r0, r0
}
 8003098:	b01a      	add	sp, #104	; 0x68
 800309a:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 800309c:	f7ff fb72 	bl	8002784 <lcd_showvars>
	return (our_currentpage);
 80030a0:	7820      	ldrb	r0, [r4, #0]
 80030a2:	b2c0      	uxtb	r0, r0
}
 80030a4:	b01a      	add	sp, #104	; 0x68
 80030a6:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 80030a8:	f7ff fcd8 	bl	8002a5c <lcd_trigcharts>
	return (our_currentpage);
 80030ac:	7820      	ldrb	r0, [r4, #0]
 80030ae:	b2c0      	uxtb	r0, r0
}
 80030b0:	b01a      	add	sp, #104	; 0x68
 80030b2:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 80030b4:	f7ff fe6c 	bl	8002d90 <lcd_presscharts>
	return (our_currentpage);
 80030b8:	7820      	ldrb	r0, [r4, #0]
 80030ba:	b2c0      	uxtb	r0, r0
}
 80030bc:	b01a      	add	sp, #104	; 0x68
 80030be:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 80030c0:	4808      	ldr	r0, [pc, #32]	; (80030e4 <lcd_pagechange+0xa8>)
 80030c2:	f023 f9e3 	bl	802648c <puts>
		break;
 80030c6:	e7df      	b.n	8003088 <lcd_pagechange+0x4c>
 80030c8:	20001d20 	.word	0x20001d20
 80030cc:	20001f3c 	.word	0x20001f3c
 80030d0:	20001a58 	.word	0x20001a58
 80030d4:	0802b940 	.word	0x0802b940
 80030d8:	20001f10 	.word	0x20001f10
 80030dc:	0802b950 	.word	0x0802b950
 80030e0:	0802b86c 	.word	0x0802b86c
 80030e4:	0802ba7c 	.word	0x0802ba7c

080030e8 <lcd_event_process>:
int lcd_event_process(void) {
 80030e8:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80030ea:	4c8d      	ldr	r4, [pc, #564]	; (8003320 <lcd_event_process+0x238>)
int lcd_event_process(void) {
 80030ec:	b08d      	sub	sp, #52	; 0x34
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 80030ee:	2160      	movs	r1, #96	; 0x60
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff f92d 	bl	8002350 <isnexpkt>
 80030f6:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	dd27      	ble.n	800314e <lcd_event_process+0x66>
		lcdstatus = eventbuffer[0];
 80030fe:	7821      	ldrb	r1, [r4, #0]
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <lcd_event_process+0x23c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003102:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8003104:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003106:	d91e      	bls.n	8003146 <lcd_event_process+0x5e>
			switch (eventbuffer[0]) {
 8003108:	2924      	cmp	r1, #36	; 0x24
 800310a:	f000 80d5 	beq.w	80032b8 <lcd_event_process+0x1d0>
 800310e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8003112:	b2da      	uxtb	r2, r3
 8003114:	2a25      	cmp	r2, #37	; 0x25
 8003116:	d81d      	bhi.n	8003154 <lcd_event_process+0x6c>
 8003118:	2b25      	cmp	r3, #37	; 0x25
 800311a:	d81b      	bhi.n	8003154 <lcd_event_process+0x6c>
 800311c:	e8df f003 	tbb	[pc, r3]
 8003120:	6c961aa2 	.word	0x6c961aa2
 8003124:	1a1a1a1a 	.word	0x1a1a1a1a
 8003128:	1a1a1a1a 	.word	0x1a1a1a1a
 800312c:	1aae1a1a 	.word	0x1aae1a1a
 8003130:	1a1a1a1a 	.word	0x1a1a1a1a
 8003134:	1a1a1a1a 	.word	0x1a1a1a1a
 8003138:	1a1a1a1a 	.word	0x1a1a1a1a
 800313c:	1a1a1a1a 	.word	0x1a1a1a1a
 8003140:	1a1a1a1a 	.word	0x1a1a1a1a
 8003144:	671a      	.short	0x671a
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8003146:	2901      	cmp	r1, #1
 8003148:	d123      	bne.n	8003192 <lcd_event_process+0xaa>
}
 800314a:	b00d      	add	sp, #52	; 0x34
 800314c:	bd30      	pop	{r4, r5, pc}
		return (result);		// 0 = nothing found, -1 = timeout, -2=no char
 800314e:	9801      	ldr	r0, [sp, #4]
}
 8003150:	b00d      	add	sp, #52	; 0x34
 8003152:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8003154:	4874      	ldr	r0, [pc, #464]	; (8003328 <lcd_event_process+0x240>)
 8003156:	f023 f8fd 	bl	8026354 <iprintf>
				i = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	9304      	str	r3, [sp, #16]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	5ce3      	ldrb	r3, [r4, r3]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d00f      	beq.n	8003186 <lcd_event_process+0x9e>
					printf(" 0x%02x", eventbuffer[i++]);
 8003166:	4d71      	ldr	r5, [pc, #452]	; (800332c <lcd_event_process+0x244>)
 8003168:	e009      	b.n	800317e <lcd_event_process+0x96>
 800316a:	9b04      	ldr	r3, [sp, #16]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	5ce1      	ldrb	r1, [r4, r3]
 8003170:	9204      	str	r2, [sp, #16]
 8003172:	f023 f8ef 	bl	8026354 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8003176:	9b04      	ldr	r3, [sp, #16]
 8003178:	5ce3      	ldrb	r3, [r4, r3]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d003      	beq.n	8003186 <lcd_event_process+0x9e>
 800317e:	9b04      	ldr	r3, [sp, #16]
					printf(" 0x%02x", eventbuffer[i++]);
 8003180:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8003182:	2b5f      	cmp	r3, #95	; 0x5f
 8003184:	d9f1      	bls.n	800316a <lcd_event_process+0x82>
				printf("\n");
 8003186:	200a      	movs	r0, #10
 8003188:	f023 f8fc 	bl	8026384 <putchar>
				return (-1);
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	e7db      	b.n	800314a <lcd_event_process+0x62>
				printf("Nextion reported: ");
 8003192:	4867      	ldr	r0, [pc, #412]	; (8003330 <lcd_event_process+0x248>)
 8003194:	f023 f8de 	bl	8026354 <iprintf>
				switch (eventbuffer[0]) {
 8003198:	7821      	ldrb	r1, [r4, #0]
 800319a:	2924      	cmp	r1, #36	; 0x24
 800319c:	f200 8091 	bhi.w	80032c2 <lcd_event_process+0x1da>
 80031a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80031a4:	011c0121 	.word	0x011c0121
 80031a8:	008f0117 	.word	0x008f0117
 80031ac:	010e008f 	.word	0x010e008f
 80031b0:	008f008f 	.word	0x008f008f
 80031b4:	008f008f 	.word	0x008f008f
 80031b8:	008f008f 	.word	0x008f008f
 80031bc:	008f008f 	.word	0x008f008f
 80031c0:	008f008f 	.word	0x008f008f
 80031c4:	008f008f 	.word	0x008f008f
 80031c8:	008f0106 	.word	0x008f0106
 80031cc:	008f008f 	.word	0x008f008f
 80031d0:	008f008f 	.word	0x008f008f
 80031d4:	008f008f 	.word	0x008f008f
 80031d8:	008f00fe 	.word	0x008f00fe
 80031dc:	008f00f8 	.word	0x008f00f8
 80031e0:	008f00f2 	.word	0x008f00f2
 80031e4:	008f00ec 	.word	0x008f00ec
 80031e8:	00b8008f 	.word	0x00b8008f
 80031ec:	00b2      	.short	0x00b2
				printf("Nextion returned 0x88 - Ready!\n");
 80031ee:	4851      	ldr	r0, [pc, #324]	; (8003334 <lcd_event_process+0x24c>)
 80031f0:	f023 f94c 	bl	802648c <puts>
			return (0);
 80031f4:	2000      	movs	r0, #0
				break;
 80031f6:	e7a8      	b.n	800314a <lcd_event_process+0x62>
				setlcddim(lcdbright);
 80031f8:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <lcd_event_process+0x250>)
	dimtimer = DIMTIME;
 80031fa:	f64e 2160 	movw	r1, #60000	; 0xea60
 80031fe:	4a4f      	ldr	r2, [pc, #316]	; (800333c <lcd_event_process+0x254>)
	sprintf(buffer, "%s=%lu", id, value);
 8003200:	a804      	add	r0, sp, #16
				setlcddim(lcdbright);
 8003202:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 8003204:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003206:	2b63      	cmp	r3, #99	; 0x63
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <lcd_event_process+0x258>)
 800320a:	494e      	ldr	r1, [pc, #312]	; (8003344 <lcd_event_process+0x25c>)
 800320c:	bf28      	it	cs
 800320e:	2363      	movcs	r3, #99	; 0x63
 8003210:	f023 fa8a 	bl	8026728 <siprintf>
	result = writelcdcmd(buffer);
 8003214:	a804      	add	r0, sp, #16
 8003216:	f7ff f859 	bl	80022cc <writelcdcmd>
 800321a:	9003      	str	r0, [sp, #12]
	if (result == -1) {		// wait for response
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	d06e      	beq.n	8003300 <lcd_event_process+0x218>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003222:	7860      	ldrb	r0, [r4, #1]
	return (result);
 8003224:	9b03      	ldr	r3, [sp, #12]
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003226:	f7ff ff09 	bl	800303c <lcd_pagechange>
 800322a:	2800      	cmp	r0, #0
 800322c:	db05      	blt.n	800323a <lcd_event_process+0x152>
 800322e:	7860      	ldrb	r0, [r4, #1]
 8003230:	f7ff ff04 	bl	800303c <lcd_pagechange>
 8003234:	2805      	cmp	r0, #5
 8003236:	f340 80df 	ble.w	80033f8 <lcd_event_process+0x310>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800323a:	7860      	ldrb	r0, [r4, #1]
 800323c:	f7ff fefe 	bl	800303c <lcd_pagechange>
 8003240:	4601      	mov	r1, r0
 8003242:	4841      	ldr	r0, [pc, #260]	; (8003348 <lcd_event_process+0x260>)
 8003244:	f023 f886 	bl	8026354 <iprintf>
			return (0);
 8003248:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800324a:	e77e      	b.n	800314a <lcd_event_process+0x62>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 800324c:	78e3      	ldrb	r3, [r4, #3]
 800324e:	78a2      	ldrb	r2, [r4, #2]
 8003250:	7861      	ldrb	r1, [r4, #1]
 8003252:	483e      	ldr	r0, [pc, #248]	; (800334c <lcd_event_process+0x264>)
 8003254:	f023 f87e 	bl	8026354 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8003258:	7863      	ldrb	r3, [r4, #1]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d037      	beq.n	80032ce <lcd_event_process+0x1e6>
			return (0);
 800325e:	2000      	movs	r0, #0
}
 8003260:	b00d      	add	sp, #52	; 0x34
 8003262:	bd30      	pop	{r4, r5, pc}
				decode_lcdtype(eventbuffer);
 8003264:	482e      	ldr	r0, [pc, #184]	; (8003320 <lcd_event_process+0x238>)
 8003266:	f7ff f8eb 	bl	8002440 <decode_lcdtype>
				if (nex_model[0] != '\0') {
 800326a:	4939      	ldr	r1, [pc, #228]	; (8003350 <lcd_event_process+0x268>)
 800326c:	780b      	ldrb	r3, [r1, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f5      	beq.n	800325e <lcd_event_process+0x176>
					printf("Nextion LCD Model: %s\n", nex_model);
 8003272:	4838      	ldr	r0, [pc, #224]	; (8003354 <lcd_event_process+0x26c>)
 8003274:	f023 f86e 	bl	8026354 <iprintf>
			return (0);
 8003278:	2000      	movs	r0, #0
 800327a:	e766      	b.n	800314a <lcd_event_process+0x62>
	if ((str[0] == 0x71) && (str[5] = 0xff) && (str[6] == 0xff) && (str[7] == 0xff)) {
 800327c:	79a3      	ldrb	r3, [r4, #6]
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	79e1      	ldrb	r1, [r4, #7]
 8003282:	7162      	strb	r2, [r4, #5]
 8003284:	400b      	ands	r3, r1
 8003286:	4293      	cmp	r3, r2
 8003288:	f040 80b3 	bne.w	80033f2 <lcd_event_process+0x30a>
 800328c:	4a24      	ldr	r2, [pc, #144]	; (8003320 <lcd_event_process+0x238>)
	number = 0;
 800328e:	2100      	movs	r1, #0
 8003290:	1d10      	adds	r0, r2, #4
			number = number | (str[i] << 24);
 8003292:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003296:	061b      	lsls	r3, r3, #24
		for (i = 1; i < 5; i++) {
 8003298:	4290      	cmp	r0, r2
			number = number | (str[i] << 24);
 800329a:	ea43 2121 	orr.w	r1, r3, r1, asr #8
		for (i = 1; i < 5; i++) {
 800329e:	d1f8      	bne.n	8003292 <lcd_event_process+0x1aa>
				if (nex_model[0] != '\0') {
 80032a0:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <lcd_event_process+0x268>)
				lcd_sys0 = decode_int(eventbuffer);
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <lcd_event_process+0x270>)
				if (nex_model[0] != '\0') {
 80032a4:	7812      	ldrb	r2, [r2, #0]
				lcd_sys0 = decode_int(eventbuffer);
 80032a6:	6019      	str	r1, [r3, #0]
				if (nex_model[0] != '\0') {
 80032a8:	2a00      	cmp	r2, #0
 80032aa:	d0d8      	beq.n	800325e <lcd_event_process+0x176>
					printf("Nextion LCD Integer: 0x%0x\n", lcd_sys0);
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	482b      	ldr	r0, [pc, #172]	; (800335c <lcd_event_process+0x274>)
 80032b0:	f023 f850 	bl	8026354 <iprintf>
			return (0);
 80032b4:	2000      	movs	r0, #0
 80032b6:	e748      	b.n	800314a <lcd_event_process+0x62>
				printf("Serial Buffer Overflow!\n");
 80032b8:	4829      	ldr	r0, [pc, #164]	; (8003360 <lcd_event_process+0x278>)
 80032ba:	f023 f8e7 	bl	802648c <puts>
				return (1);
 80032be:	2001      	movs	r0, #1
 80032c0:	e743      	b.n	800314a <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 80032c2:	4828      	ldr	r0, [pc, #160]	; (8003364 <lcd_event_process+0x27c>)
 80032c4:	f023 f846 	bl	8026354 <iprintf>
				return (-1);		// some kindof error
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80032cc:	e73d      	b.n	800314a <lcd_event_process+0x62>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 80032ce:	78a3      	ldrb	r3, [r4, #2]
 80032d0:	2b06      	cmp	r3, #6
 80032d2:	f000 80ab 	beq.w	800342c <lcd_event_process+0x344>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	f000 80d5 	beq.w	8003486 <lcd_event_process+0x39e>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f000 8094 	beq.w	800340a <lcd_event_process+0x322>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d1bb      	bne.n	800325e <lcd_event_process+0x176>
					if (eventbuffer[3] == 1) 		// sound on
 80032e6:	78e3      	ldrb	r3, [r4, #3]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <lcd_event_process+0x280>)
 80032ea:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 80032ee:	481f      	ldr	r0, [pc, #124]	; (800336c <lcd_event_process+0x284>)
					if (eventbuffer[3] == 1) 		// sound on
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 80032f8:	f023 f8c8 	bl	802648c <puts>
			return (0);
 80032fc:	2000      	movs	r0, #0
 80032fe:	e724      	b.n	800314a <lcd_event_process+0x62>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8003300:	481b      	ldr	r0, [pc, #108]	; (8003370 <lcd_event_process+0x288>)
 8003302:	f023 f827 	bl	8026354 <iprintf>
 8003306:	e78c      	b.n	8003222 <lcd_event_process+0x13a>
					printf("Ser Buffer overflow\n");
 8003308:	481a      	ldr	r0, [pc, #104]	; (8003374 <lcd_event_process+0x28c>)
 800330a:	f023 f8bf 	bl	802648c <puts>
				return (-1);		// some kindof error
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003312:	e71a      	b.n	800314a <lcd_event_process+0x62>
					printf("Variable name too long\n");
 8003314:	4818      	ldr	r0, [pc, #96]	; (8003378 <lcd_event_process+0x290>)
 8003316:	f023 f8b9 	bl	802648c <puts>
				return (-1);		// some kindof error
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800331e:	e714      	b.n	800314a <lcd_event_process+0x62>
 8003320:	200019d0 	.word	0x200019d0
 8003324:	20001b18 	.word	0x20001b18
 8003328:	0802bcc0 	.word	0x0802bcc0
 800332c:	0802bcf4 	.word	0x0802bcf4
 8003330:	0802ba90 	.word	0x0802ba90
 8003334:	0802bc18 	.word	0x0802bc18
 8003338:	20000018 	.word	0x20000018
 800333c:	2000000c 	.word	0x2000000c
 8003340:	0802b894 	.word	0x0802b894
 8003344:	0802b874 	.word	0x0802b874
 8003348:	0802bc90 	.word	0x0802bc90
 800334c:	0802bc38 	.word	0x0802bc38
 8003350:	20001b28 	.word	0x20001b28
 8003354:	0802bbe4 	.word	0x0802bbe4
 8003358:	20000014 	.word	0x20000014
 800335c:	0802bbfc 	.word	0x0802bbfc
 8003360:	0802bbcc 	.word	0x0802bbcc
 8003364:	0802bbb4 	.word	0x0802bbb4
 8003368:	2000028c 	.word	0x2000028c
 800336c:	0802bc84 	.word	0x0802bc84
 8003370:	0802b87c 	.word	0x0802b87c
 8003374:	0802bae0 	.word	0x0802bae0
 8003378:	0802bac8 	.word	0x0802bac8
					printf("Invalid escape char\n");
 800337c:	484b      	ldr	r0, [pc, #300]	; (80034ac <lcd_event_process+0x3c4>)
 800337e:	f023 f885 	bl	802648c <puts>
				return (-1);		// some kindof error
 8003382:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003386:	e6e0      	b.n	800314a <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 8003388:	4849      	ldr	r0, [pc, #292]	; (80034b0 <lcd_event_process+0x3c8>)
 800338a:	f023 f87f 	bl	802648c <puts>
				return (-1);		// some kindof error
 800338e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003392:	e6da      	b.n	800314a <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 8003394:	4847      	ldr	r0, [pc, #284]	; (80034b4 <lcd_event_process+0x3cc>)
 8003396:	f023 f879 	bl	802648c <puts>
				return (-1);		// some kindof error
 800339a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800339e:	e6d4      	b.n	800314a <lcd_event_process+0x62>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 80033a0:	4845      	ldr	r0, [pc, #276]	; (80034b8 <lcd_event_process+0x3d0>)
 80033a2:	f023 f873 	bl	802648c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80033a6:	f000 fa19 	bl	80037dc <getlcdpage>
				return (-1);		// some kindof error
 80033aa:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80033ae:	e6cc      	b.n	800314a <lcd_event_process+0x62>
					printf("Invalid waveform ID\n");
 80033b0:	4842      	ldr	r0, [pc, #264]	; (80034bc <lcd_event_process+0x3d4>)
 80033b2:	f023 f86b 	bl	802648c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 80033b6:	f000 fa11 	bl	80037dc <getlcdpage>
				return (-1);		// some kindof error
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80033be:	e6c4      	b.n	800314a <lcd_event_process+0x62>
					if (http_downloading == NXT_LOADING) {	// return code 0x05 is good - block rcv'd
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <lcd_event_process+0x3d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d054      	beq.n	8003472 <lcd_event_process+0x38a>
						printf("NXT Error 0x05\n");
 80033c8:	483e      	ldr	r0, [pc, #248]	; (80034c4 <lcd_event_process+0x3dc>)
 80033ca:	f023 f85f 	bl	802648c <puts>
					return (0);
 80033ce:	2000      	movs	r0, #0
 80033d0:	e6bb      	b.n	800314a <lcd_event_process+0x62>
					printf("Invalid Component ID\n");
 80033d2:	483d      	ldr	r0, [pc, #244]	; (80034c8 <lcd_event_process+0x3e0>)
 80033d4:	f023 f85a 	bl	802648c <puts>
					return (0);
 80033d8:	2000      	movs	r0, #0
 80033da:	e6b6      	b.n	800314a <lcd_event_process+0x62>
					printf("Successful execution\n");
 80033dc:	483b      	ldr	r0, [pc, #236]	; (80034cc <lcd_event_process+0x3e4>)
 80033de:	f023 f855 	bl	802648c <puts>
					return (0);
 80033e2:	2000      	movs	r0, #0
 80033e4:	e6b1      	b.n	800314a <lcd_event_process+0x62>
					printf("Invalid command\n");
 80033e6:	483a      	ldr	r0, [pc, #232]	; (80034d0 <lcd_event_process+0x3e8>)
 80033e8:	f023 f850 	bl	802648c <puts>
				return (-1);		// some kindof error
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80033f0:	e6ab      	b.n	800314a <lcd_event_process+0x62>
		return (0xffffffff);
 80033f2:	f04f 31ff 	mov.w	r1, #4294967295
 80033f6:	e753      	b.n	80032a0 <lcd_event_process+0x1b8>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 80033f8:	7860      	ldrb	r0, [r4, #1]
 80033fa:	f7ff fe1f 	bl	800303c <lcd_pagechange>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <lcd_event_process+0x3ec>)
			return (0);
 8003402:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8003404:	b2db      	uxtb	r3, r3
 8003406:	7013      	strb	r3, [r2, #0]
 8003408:	e69f      	b.n	800314a <lcd_event_process+0x62>
					if (eventbuffer[3] == 1) 		// sound on
 800340a:	78e3      	ldrb	r3, [r4, #3]
 800340c:	4a32      	ldr	r2, [pc, #200]	; (80034d8 <lcd_event_process+0x3f0>)
 800340e:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8003412:	4832      	ldr	r0, [pc, #200]	; (80034dc <lcd_event_process+0x3f4>)
					if (eventbuffer[3] == 1) 		// sound on
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 800341c:	f023 f836 	bl	802648c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8003420:	7863      	ldrb	r3, [r4, #1]
 8003422:	2b04      	cmp	r3, #4
 8003424:	f47f af1b 	bne.w	800325e <lcd_event_process+0x176>
 8003428:	78a3      	ldrb	r3, [r4, #2]
 800342a:	e75a      	b.n	80032e2 <lcd_event_process+0x1fa>
					lcdbright = eventbuffer[3];
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <lcd_event_process+0x3f8>)
 800342e:	78e2      	ldrb	r2, [r4, #3]
 8003430:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2a0d      	cmp	r2, #13
 8003436:	dc01      	bgt.n	800343c <lcd_event_process+0x354>
						lcdbright = 14;		// prevent black
 8003438:	220e      	movs	r2, #14
 800343a:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 800343c:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 800343e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8003442:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <lcd_event_process+0x3fc>)
	sprintf(buffer, "%s=%lu", id, value);
 8003444:	a804      	add	r0, sp, #16
 8003446:	2b63      	cmp	r3, #99	; 0x63
	dimtimer = DIMTIME;
 8003448:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 800344a:	bf28      	it	cs
 800344c:	2363      	movcs	r3, #99	; 0x63
 800344e:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <lcd_event_process+0x400>)
 8003450:	4926      	ldr	r1, [pc, #152]	; (80034ec <lcd_event_process+0x404>)
 8003452:	f023 f969 	bl	8026728 <siprintf>
	result = writelcdcmd(buffer);
 8003456:	a804      	add	r0, sp, #16
 8003458:	f7fe ff38 	bl	80022cc <writelcdcmd>
 800345c:	9002      	str	r0, [sp, #8]
	if (result == -1) {		// wait for response
 800345e:	9b02      	ldr	r3, [sp, #8]
 8003460:	3301      	adds	r3, #1
 8003462:	d01e      	beq.n	80034a2 <lcd_event_process+0x3ba>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8003464:	7863      	ldrb	r3, [r4, #1]
	return (result);
 8003466:	9a02      	ldr	r2, [sp, #8]
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8003468:	2b04      	cmp	r3, #4
 800346a:	f47f aef8 	bne.w	800325e <lcd_event_process+0x176>
 800346e:	78a3      	ldrb	r3, [r4, #2]
 8003470:	e731      	b.n	80032d6 <lcd_event_process+0x1ee>
						printf("Nextion DL acked block %d\n", nxt_blocksacked);
 8003472:	4c1f      	ldr	r4, [pc, #124]	; (80034f0 <lcd_event_process+0x408>)
 8003474:	481f      	ldr	r0, [pc, #124]	; (80034f4 <lcd_event_process+0x40c>)
 8003476:	6821      	ldr	r1, [r4, #0]
 8003478:	f022 ff6c 	bl	8026354 <iprintf>
						nxt_blocksacked++;
 800347c:	6823      	ldr	r3, [r4, #0]
					return (0);
 800347e:	2000      	movs	r0, #0
						nxt_blocksacked++;
 8003480:	3301      	adds	r3, #1
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	e661      	b.n	800314a <lcd_event_process+0x62>
					printf("Reboot touch\n");
 8003486:	481c      	ldr	r0, [pc, #112]	; (80034f8 <lcd_event_process+0x410>)
 8003488:	f023 f800 	bl	802648c <puts>
					osDelay(100);
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	f012 ffc1 	bl	8016414 <osDelay>
					rebootme();
 8003492:	f000 fc77 	bl	8003d84 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8003496:	7863      	ldrb	r3, [r4, #1]
 8003498:	2b04      	cmp	r3, #4
 800349a:	f47f aee0 	bne.w	800325e <lcd_event_process+0x176>
 800349e:	78a3      	ldrb	r3, [r4, #2]
 80034a0:	e71c      	b.n	80032dc <lcd_event_process+0x1f4>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80034a2:	4816      	ldr	r0, [pc, #88]	; (80034fc <lcd_event_process+0x414>)
 80034a4:	f022 ff56 	bl	8026354 <iprintf>
 80034a8:	e7dc      	b.n	8003464 <lcd_event_process+0x37c>
 80034aa:	bf00      	nop
 80034ac:	0802bb14 	.word	0x0802bb14
 80034b0:	0802baf4 	.word	0x0802baf4
 80034b4:	0802bb28 	.word	0x0802bb28
 80034b8:	0802bab4 	.word	0x0802bab4
 80034bc:	0802bb44 	.word	0x0802bb44
 80034c0:	200018bc 	.word	0x200018bc
 80034c4:	0802bba4 	.word	0x0802bba4
 80034c8:	0802bb70 	.word	0x0802bb70
 80034cc:	0802bb58 	.word	0x0802bb58
 80034d0:	0802baa4 	.word	0x0802baa4
 80034d4:	20001a64 	.word	0x20001a64
 80034d8:	20000292 	.word	0x20000292
 80034dc:	0802bc78 	.word	0x0802bc78
 80034e0:	20000018 	.word	0x20000018
 80034e4:	2000000c 	.word	0x2000000c
 80034e8:	0802b894 	.word	0x0802b894
 80034ec:	0802b874 	.word	0x0802b874
 80034f0:	200030e4 	.word	0x200030e4
 80034f4:	0802bb88 	.word	0x0802bb88
 80034f8:	0802bc68 	.word	0x0802bc68
 80034fc:	0802b87c 	.word	0x0802b87c

08003500 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8003500:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8003502:	4d49      	ldr	r5, [pc, #292]	; (8003628 <processnex+0x128>)
void processnex() {		// process Nextion - called at regular intervals
 8003504:	b08a      	sub	sp, #40	; 0x28
	switch (lcduart_error) {
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d061      	beq.n	80035d0 <processnex+0xd0>
 800350c:	2b08      	cmp	r3, #8
 800350e:	d05a      	beq.n	80035c6 <processnex+0xc6>
 8003510:	2b02      	cmp	r3, #2
 8003512:	d03f      	beq.n	8003594 <processnex+0x94>
 8003514:	4c45      	ldr	r4, [pc, #276]	; (800362c <processnex+0x12c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003516:	2600      	movs	r6, #0
 8003518:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d042      	beq.n	80035a6 <processnex+0xa6>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d073      	beq.n	800360e <processnex+0x10e>
	if (lcd_initflag == 3) {	// uart only
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d05d      	beq.n	80035e8 <processnex+0xe8>
	lcd_rxdma();		// get any new characters received
 800352c:	f7fe fe6e 	bl	800220c <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8003530:	f7ff fdda 	bl	80030e8 <lcd_event_process>
	if (dimtimer > 50000) {
 8003534:	4a3e      	ldr	r2, [pc, #248]	; (8003630 <processnex+0x130>)
 8003536:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 800353a:	9000      	str	r0, [sp, #0]
	if (dimtimer > 50000) {
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	428b      	cmp	r3, r1
 8003540:	d903      	bls.n	800354a <processnex+0x4a>
		dimtimer--;
 8003542:	3b01      	subs	r3, #1
 8003544:	6013      	str	r3, [r2, #0]
}
 8003546:	b00a      	add	sp, #40	; 0x28
 8003548:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800354a:	483a      	ldr	r0, [pc, #232]	; (8003634 <processnex+0x134>)
		dimtimer = 60000;
 800354c:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8003550:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8003552:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8003554:	6804      	ldr	r4, [r0, #0]
 8003556:	6803      	ldr	r3, [r0, #0]
 8003558:	6802      	ldr	r2, [r0, #0]
 800355a:	109b      	asrs	r3, r3, #2
 800355c:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8003560:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8003564:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8003566:	2a01      	cmp	r2, #1
 8003568:	dd39      	ble.n	80035de <processnex+0xde>
 800356a:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800356c:	4932      	ldr	r1, [pc, #200]	; (8003638 <processnex+0x138>)
 800356e:	4613      	mov	r3, r2
 8003570:	bf28      	it	cs
 8003572:	2363      	movcs	r3, #99	; 0x63
 8003574:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003576:	4a31      	ldr	r2, [pc, #196]	; (800363c <processnex+0x13c>)
 8003578:	a802      	add	r0, sp, #8
 800357a:	4931      	ldr	r1, [pc, #196]	; (8003640 <processnex+0x140>)
 800357c:	f023 f8d4 	bl	8026728 <siprintf>
	result = writelcdcmd(buffer);
 8003580:	a802      	add	r0, sp, #8
 8003582:	f7fe fea3 	bl	80022cc <writelcdcmd>
 8003586:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	d047      	beq.n	800361e <processnex+0x11e>
	return (result);
 800358e:	9b01      	ldr	r3, [sp, #4]
}
 8003590:	b00a      	add	sp, #40	; 0x28
 8003592:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8003594:	4c25      	ldr	r4, [pc, #148]	; (800362c <processnex+0x12c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003596:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8003598:	482a      	ldr	r0, [pc, #168]	; (8003644 <processnex+0x144>)
 800359a:	f022 ff77 	bl	802648c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 800359e:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d1bc      	bne.n	8003520 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 80035a6:	4828      	ldr	r0, [pc, #160]	; (8003648 <processnex+0x148>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80035a8:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 80035aa:	f022 ff6f 	bl	802648c <puts>
		lcd_uart_init(9600);	// switch us to 9600
 80035ae:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80035b2:	f7fe fd0f 	bl	8001fd4 <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 80035b6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80035ba:	f7fe fd4d 	bl	8002058 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 80035be:	2302      	movs	r3, #2
 80035c0:	6023      	str	r3, [r4, #0]
}
 80035c2:	b00a      	add	sp, #40	; 0x28
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 80035c6:	4821      	ldr	r0, [pc, #132]	; (800364c <processnex+0x14c>)
 80035c8:	4c18      	ldr	r4, [pc, #96]	; (800362c <processnex+0x12c>)
 80035ca:	f022 ff5f 	bl	802648c <puts>
 80035ce:	e7a2      	b.n	8003516 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 80035d0:	481f      	ldr	r0, [pc, #124]	; (8003650 <processnex+0x150>)
 80035d2:	f022 ff5b 	bl	802648c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 80035d6:	4c15      	ldr	r4, [pc, #84]	; (800362c <processnex+0x12c>)
 80035d8:	2301      	movs	r3, #1
 80035da:	6023      	str	r3, [r4, #0]
		break;
 80035dc:	e79b      	b.n	8003516 <processnex+0x16>
			i = 2;	// prevent black
 80035de:	2202      	movs	r2, #2
 80035e0:	4915      	ldr	r1, [pc, #84]	; (8003638 <processnex+0x138>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	600a      	str	r2, [r1, #0]
 80035e6:	e7c6      	b.n	8003576 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 80035e8:	481a      	ldr	r0, [pc, #104]	; (8003654 <processnex+0x154>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80035ea:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 80035ec:	f022 ff4e 	bl	802648c <puts>
		lcd_uart_init(230400);
 80035f0:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80035f4:	f7fe fcee 	bl	8001fd4 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 80035f8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80035fc:	f7fe fd2c 	bl	8002058 <lcd_init>
		osDelay(100);
 8003600:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8003602:	6026      	str	r6, [r4, #0]
}
 8003604:	b00a      	add	sp, #40	; 0x28
 8003606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 800360a:	f012 bf03 	b.w	8016414 <osDelay>
		osDelay(500);
 800360e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003612:	f012 feff 	bl	8016414 <osDelay>
		lcd_initflag = 3;
 8003616:	2303      	movs	r3, #3
 8003618:	6023      	str	r3, [r4, #0]
}
 800361a:	b00a      	add	sp, #40	; 0x28
 800361c:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800361e:	480e      	ldr	r0, [pc, #56]	; (8003658 <processnex+0x158>)
 8003620:	f022 fe98 	bl	8026354 <iprintf>
 8003624:	e7b3      	b.n	800358e <processnex+0x8e>
 8003626:	bf00      	nop
 8003628:	20001b1c 	.word	0x20001b1c
 800362c:	20001a68 	.word	0x20001a68
 8003630:	2000000c 	.word	0x2000000c
 8003634:	20000018 	.word	0x20000018
 8003638:	20001a50 	.word	0x20001a50
 800363c:	0802b894 	.word	0x0802b894
 8003640:	0802b874 	.word	0x0802b874
 8003644:	0802bcfc 	.word	0x0802bcfc
 8003648:	0802bd34 	.word	0x0802bd34
 800364c:	0802bd20 	.word	0x0802bd20
 8003650:	0802bd0c 	.word	0x0802bd0c
 8003654:	0802bd5c 	.word	0x0802bd5c
 8003658:	0802b87c 	.word	0x0802b87c

0800365c <lcd_getlack>:
uint8_t lcd_getlack() {
 800365c:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 800365e:	4d11      	ldr	r5, [pc, #68]	; (80036a4 <lcd_getlack+0x48>)
	processnex();
 8003660:	f7ff ff4e 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 8003664:	782b      	ldrb	r3, [r5, #0]
 8003666:	2bff      	cmp	r3, #255	; 0xff
 8003668:	d118      	bne.n	800369c <lcd_getlack+0x40>
 800366a:	b2de      	uxtb	r6, r3
 800366c:	4c0e      	ldr	r4, [pc, #56]	; (80036a8 <lcd_getlack+0x4c>)
 800366e:	e007      	b.n	8003680 <lcd_getlack+0x24>
		trys++;
 8003670:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003672:	f012 fecf 	bl	8016414 <osDelay>
		processnex();
 8003676:	f7ff ff43 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 800367a:	782b      	ldrb	r3, [r5, #0]
 800367c:	2bff      	cmp	r3, #255	; 0xff
 800367e:	d10d      	bne.n	800369c <lcd_getlack+0x40>
		if (trys > 1000) {
 8003680:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003682:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003688:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800368c:	d9f0      	bls.n	8003670 <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800368e:	4807      	ldr	r0, [pc, #28]	; (80036ac <lcd_getlack+0x50>)
 8003690:	f022 fe60 	bl	8026354 <iprintf>
			trys = 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4630      	mov	r0, r6
			trys = 0;
 8003698:	6023      	str	r3, [r4, #0]
}
 800369a:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 800369c:	782e      	ldrb	r6, [r5, #0]
 800369e:	b2f6      	uxtb	r6, r6
}
 80036a0:	4630      	mov	r0, r6
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	20001b18 	.word	0x20001b18
 80036a8:	20002148 	.word	0x20002148
 80036ac:	0802bd88 	.word	0x0802bd88

080036b0 <lcd_putsys0>:
void lcd_putsys0(uint32_t value) {
 80036b0:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 80036b2:	2301      	movs	r3, #1
void lcd_putsys0(uint32_t value) {
 80036b4:	b087      	sub	sp, #28
	lcd_txblocked = 1;
 80036b6:	4c0d      	ldr	r4, [pc, #52]	; (80036ec <lcd_putsys0+0x3c>)
	lcd_txblocked = 0;
 80036b8:	2500      	movs	r5, #0
void lcd_putsys0(uint32_t value) {
 80036ba:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 80036bc:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 80036be:	f7fe fe21 	bl	8002304 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <lcd_putsys0+0x40>)
 80036c4:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "sys0=0x%08x", value);
 80036c6:	9a01      	ldr	r2, [sp, #4]
 80036c8:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 80036ca:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "sys0=0x%08x", value);
 80036cc:	4909      	ldr	r1, [pc, #36]	; (80036f4 <lcd_putsys0+0x44>)
 80036ce:	f023 f82b 	bl	8026728 <siprintf>
	printf("lcd_putsys0: %s\n", cmd);
 80036d2:	a902      	add	r1, sp, #8
 80036d4:	4808      	ldr	r0, [pc, #32]	; (80036f8 <lcd_putsys0+0x48>)
 80036d6:	f022 fe3d 	bl	8026354 <iprintf>
	writelcdcmd(cmd);
 80036da:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 80036dc:	6025      	str	r5, [r4, #0]
	writelcdcmd(cmd);
 80036de:	f7fe fdf5 	bl	80022cc <writelcdcmd>
	result = lcd_getlack();		// wait for a response (none expected)
 80036e2:	f7ff ffbb 	bl	800365c <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80036e6:	6025      	str	r5, [r4, #0]
}
 80036e8:	b007      	add	sp, #28
 80036ea:	bd30      	pop	{r4, r5, pc}
 80036ec:	20001a6c 	.word	0x20001a6c
 80036f0:	20001b18 	.word	0x20001b18
 80036f4:	0802bdb8 	.word	0x0802bdb8
 80036f8:	0802bdc4 	.word	0x0802bdc4

080036fc <lcd_startdl>:
void lcd_startdl(int filesize) {
 80036fc:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 80036fe:	4c0c      	ldr	r4, [pc, #48]	; (8003730 <lcd_startdl+0x34>)
void lcd_startdl(int filesize) {
 8003700:	b08b      	sub	sp, #44	; 0x2c
	lcd_txblocked = 1;
 8003702:	2501      	movs	r5, #1
void lcd_startdl(int filesize) {
 8003704:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 8003706:	6025      	str	r5, [r4, #0]
	lcd_clearrxbuf();
 8003708:	f7fe fdfc 	bl	8002304 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <lcd_startdl+0x38>)
 800370e:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 8003710:	9a01      	ldr	r2, [sp, #4]
 8003712:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 8003714:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <lcd_startdl+0x3c>)
 8003718:	f023 f806 	bl	8026728 <siprintf>
	lcd_txblocked = 0;
 800371c:	2300      	movs	r3, #0
	writelcdcmd(cmd);
 800371e:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 8003720:	6023      	str	r3, [r4, #0]
	writelcdcmd(cmd);
 8003722:	f7fe fdd3 	bl	80022cc <writelcdcmd>
	result = lcd_getlack();		// wait for a response
 8003726:	f7ff ff99 	bl	800365c <lcd_getlack>
	lcd_txblocked = 1;		// keep LCD sending blocked
 800372a:	6025      	str	r5, [r4, #0]
}
 800372c:	b00b      	add	sp, #44	; 0x2c
 800372e:	bd30      	pop	{r4, r5, pc}
 8003730:	20001a6c 	.word	0x20001a6c
 8003734:	20001b18 	.word	0x20001b18
 8003738:	0802bdd8 	.word	0x0802bdd8

0800373c <lcd_getsys0>:
int lcd_getsys0(void) {
 800373c:	b570      	push	{r4, r5, r6, lr}
	printf("Getting SYS0\n");
 800373e:	481e      	ldr	r0, [pc, #120]	; (80037b8 <lcd_getsys0+0x7c>)
 8003740:	f022 fea4 	bl	802648c <puts>
	lcd_txblocked = 0;
 8003744:	4e1d      	ldr	r6, [pc, #116]	; (80037bc <lcd_getsys0+0x80>)
 8003746:	2300      	movs	r3, #0
	lcdstatus = 0xff;
 8003748:	4d1d      	ldr	r5, [pc, #116]	; (80037c0 <lcd_getsys0+0x84>)
	lcd_txblocked = 0;
 800374a:	6033      	str	r3, [r6, #0]
	lcd_clearrxbuf();
 800374c:	f7fe fdda 	bl	8002304 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003750:	23ff      	movs	r3, #255	; 0xff
	result = writelcdcmd("get sys0");
 8003752:	481c      	ldr	r0, [pc, #112]	; (80037c4 <lcd_getsys0+0x88>)
	lcdstatus = 0xff;
 8003754:	702b      	strb	r3, [r5, #0]
	result = writelcdcmd("get sys0");
 8003756:	f7fe fdb9 	bl	80022cc <writelcdcmd>
	if (result == -1) {		// send err
 800375a:	3001      	adds	r0, #1
 800375c:	d027      	beq.n	80037ae <lcd_getsys0+0x72>
	processnex();
 800375e:	f7ff fecf 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 8003762:	782b      	ldrb	r3, [r5, #0]
 8003764:	2bff      	cmp	r3, #255	; 0xff
 8003766:	d117      	bne.n	8003798 <lcd_getsys0+0x5c>
 8003768:	4c17      	ldr	r4, [pc, #92]	; (80037c8 <lcd_getsys0+0x8c>)
 800376a:	e007      	b.n	800377c <lcd_getsys0+0x40>
		trys++;
 800376c:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800376e:	f012 fe51 	bl	8016414 <osDelay>
		processnex();
 8003772:	f7ff fec5 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 8003776:	782b      	ldrb	r3, [r5, #0]
 8003778:	2bff      	cmp	r3, #255	; 0xff
 800377a:	d10d      	bne.n	8003798 <lcd_getsys0+0x5c>
		if (trys > 1000) {
 800377c:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800377e:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003784:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003788:	d9f0      	bls.n	800376c <lcd_getsys0+0x30>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800378a:	4810      	ldr	r0, [pc, #64]	; (80037cc <lcd_getsys0+0x90>)
			trys = 0;
 800378c:	25ff      	movs	r5, #255	; 0xff
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800378e:	f022 fde1 	bl	8026354 <iprintf>
			trys = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	6023      	str	r3, [r4, #0]
			return (-1);
 8003796:	e001      	b.n	800379c <lcd_getsys0+0x60>
	return (lcdstatus);
 8003798:	782d      	ldrb	r5, [r5, #0]
 800379a:	b2ed      	uxtb	r5, r5
	lcd_txblocked = 0;		// allow others sending to the LCD
 800379c:	2200      	movs	r2, #0
	printf("getsys0: returned value=0x%u\n", lcd_sys0);
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <lcd_getsys0+0x94>)
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <lcd_getsys0+0x98>)
	lcd_txblocked = 0;		// allow others sending to the LCD
 80037a2:	6032      	str	r2, [r6, #0]
	printf("getsys0: returned value=0x%u\n", lcd_sys0);
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	f022 fdd5 	bl	8026354 <iprintf>
}
 80037aa:	4628      	mov	r0, r5
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
		printf("getsys0: Cmd failed\n\r");
 80037ae:	480a      	ldr	r0, [pc, #40]	; (80037d8 <lcd_getsys0+0x9c>)
 80037b0:	f022 fdd0 	bl	8026354 <iprintf>
 80037b4:	e7d3      	b.n	800375e <lcd_getsys0+0x22>
 80037b6:	bf00      	nop
 80037b8:	0802bdf0 	.word	0x0802bdf0
 80037bc:	20001a6c 	.word	0x20001a6c
 80037c0:	20001b18 	.word	0x20001b18
 80037c4:	0802be00 	.word	0x0802be00
 80037c8:	20002148 	.word	0x20002148
 80037cc:	0802bd88 	.word	0x0802bd88
 80037d0:	20000014 	.word	0x20000014
 80037d4:	0802be24 	.word	0x0802be24
 80037d8:	0802be0c 	.word	0x0802be0c

080037dc <getlcdpage>:
int getlcdpage(void) {
 80037dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lcd_txblocked = 1;		// stop others sending to the LCD
 80037e0:	2301      	movs	r3, #1
 80037e2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80038fc <getlcdpage+0x120>
	strcpy(pkt, str);
 80037e6:	4e3f      	ldr	r6, [pc, #252]	; (80038e4 <getlcdpage+0x108>)
int getlcdpage(void) {
 80037e8:	b09b      	sub	sp, #108	; 0x6c
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80037ea:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 80037ec:	f8c8 3000 	str.w	r3, [r8]
	strcat(pkt, "\xff\xff\xff");
 80037f0:	4f3d      	ldr	r7, [pc, #244]	; (80038e8 <getlcdpage+0x10c>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80037f2:	f012 fe0f 	bl	8016414 <osDelay>
	lcdstatus = 0xff;
 80037f6:	4d3d      	ldr	r5, [pc, #244]	; (80038ec <getlcdpage+0x110>)
 80037f8:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 80037fa:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 80037fe:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8003800:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003802:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 8003804:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 8003808:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 800380c:	a802      	add	r0, sp, #8
 800380e:	f7fe fcc5 	bl	800219c <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003812:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	d060      	beq.n	80038dc <getlcdpage+0x100>
	processnex();
 800381a:	f7ff fe71 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 800381e:	782b      	ldrb	r3, [r5, #0]
 8003820:	2bff      	cmp	r3, #255	; 0xff
 8003822:	d121      	bne.n	8003868 <getlcdpage+0x8c>
 8003824:	4c32      	ldr	r4, [pc, #200]	; (80038f0 <getlcdpage+0x114>)
 8003826:	e007      	b.n	8003838 <getlcdpage+0x5c>
		trys++;
 8003828:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800382a:	f012 fdf3 	bl	8016414 <osDelay>
		processnex();
 800382e:	f7ff fe67 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 8003832:	782b      	ldrb	r3, [r5, #0]
 8003834:	2bff      	cmp	r3, #255	; 0xff
 8003836:	d117      	bne.n	8003868 <getlcdpage+0x8c>
		if (trys > 1000) {
 8003838:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800383a:	2001      	movs	r0, #1
		if (trys > 1000) {
 800383c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003840:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003844:	d9f0      	bls.n	8003828 <getlcdpage+0x4c>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003846:	482b      	ldr	r0, [pc, #172]	; (80038f4 <getlcdpage+0x118>)
 8003848:	f022 fd84 	bl	8026354 <iprintf>
			trys = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 8003852:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 8003854:	9b01      	ldr	r3, [sp, #4]
 8003856:	3301      	adds	r3, #1
 8003858:	d00c      	beq.n	8003874 <getlcdpage+0x98>
	lcd_txblocked = 0;		// allow others sending to the LCD
 800385a:	2300      	movs	r3, #0
 800385c:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 8003860:	9801      	ldr	r0, [sp, #4]
}
 8003862:	b01b      	add	sp, #108	; 0x6c
 8003864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 8003868:	782b      	ldrb	r3, [r5, #0]
 800386a:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 800386c:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	3301      	adds	r3, #1
 8003872:	d1f2      	bne.n	800385a <getlcdpage+0x7e>
	strcat(pkt, "\xff\xff\xff");
 8003874:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 8003876:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003900 <getlcdpage+0x124>
 800387a:	4c1d      	ldr	r4, [pc, #116]	; (80038f0 <getlcdpage+0x114>)
	strcat(pkt, "\xff\xff\xff");
 800387c:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 8003880:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003884:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 8003886:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 8003888:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 800388c:	f7fe fc86 	bl	800219c <lcd_puts>
		result = intwritelcdcmd("sendme");
 8003890:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	3301      	adds	r3, #1
 8003896:	d10a      	bne.n	80038ae <getlcdpage+0xd2>
 8003898:	e01c      	b.n	80038d4 <getlcdpage+0xf8>
		if (trys > 1000) {
 800389a:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800389c:	2001      	movs	r0, #1
		if (trys > 1000) {
 800389e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80038a2:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80038a6:	d80e      	bhi.n	80038c6 <getlcdpage+0xea>
		trys++;
 80038a8:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80038aa:	f012 fdb3 	bl	8016414 <osDelay>
		processnex();
 80038ae:	f7ff fe27 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 80038b2:	782b      	ldrb	r3, [r5, #0]
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	d0f0      	beq.n	800389a <getlcdpage+0xbe>
	return (lcdstatus);
 80038b8:	782b      	ldrb	r3, [r5, #0]
 80038ba:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80038bc:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	3301      	adds	r3, #1
 80038c2:	d0db      	beq.n	800387c <getlcdpage+0xa0>
 80038c4:	e7c9      	b.n	800385a <getlcdpage+0x7e>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80038c6:	480b      	ldr	r0, [pc, #44]	; (80038f4 <getlcdpage+0x118>)
 80038c8:	f022 fd44 	bl	8026354 <iprintf>
			trys = 0;
 80038cc:	2200      	movs	r2, #0
 80038ce:	23ff      	movs	r3, #255	; 0xff
 80038d0:	6022      	str	r2, [r4, #0]
			return (-1);
 80038d2:	e7f3      	b.n	80038bc <getlcdpage+0xe0>
			printf("getlcdpage2: Cmd failed\n\r");
 80038d4:	4648      	mov	r0, r9
 80038d6:	f022 fd3d 	bl	8026354 <iprintf>
 80038da:	e7e8      	b.n	80038ae <getlcdpage+0xd2>
		printf("getlcdpage: Cmd failed\n\r");
 80038dc:	4806      	ldr	r0, [pc, #24]	; (80038f8 <getlcdpage+0x11c>)
 80038de:	f022 fd39 	bl	8026354 <iprintf>
 80038e2:	e79a      	b.n	800381a <getlcdpage+0x3e>
 80038e4:	0802be60 	.word	0x0802be60
 80038e8:	0802b7b4 	.word	0x0802b7b4
 80038ec:	20001b18 	.word	0x20001b18
 80038f0:	20002148 	.word	0x20002148
 80038f4:	0802bd88 	.word	0x0802bd88
 80038f8:	0802be68 	.word	0x0802be68
 80038fc:	20001a6c 	.word	0x20001a6c
 8003900:	0802be84 	.word	0x0802be84

08003904 <nxt_baud>:

// try to set the baud to 230400
// only assumes it could be at 9600 to begin with
nxt_baud() {
 8003904:	b538      	push	{r3, r4, r5, lr}
	lcduart_error = HAL_UART_ERROR_NONE;
 8003906:	4c16      	ldr	r4, [pc, #88]	; (8003960 <nxt_baud+0x5c>)
 8003908:	2500      	movs	r5, #0

	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800390a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 800390e:	6025      	str	r5, [r4, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8003910:	f7fe fba2 	bl	8002058 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 8003914:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003918:	f7fe fb5c 	bl	8001fd4 <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 800391c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003920:	f7fe fb9a 	bl	8002058 <lcd_init>
	osDelay(600);
 8003924:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003928:	f012 fd74 	bl	8016414 <osDelay>

	lcd_init(230400);  //  LCD *should* return in 230400 baud
 800392c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003930:	f7fe fb92 	bl	8002058 <lcd_init>
	osDelay(600);
 8003934:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003938:	f012 fd6c 	bl	8016414 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 800393c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003940:	f7fe fb48 	bl	8001fd4 <lcd_uart_init>

	osDelay(600);
 8003944:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003948:	f012 fd64 	bl	8016414 <osDelay>
	lcduart_error = HAL_UART_ERROR_NONE;
	printf("nxt_baud:\n");
 800394c:	4805      	ldr	r0, [pc, #20]	; (8003964 <nxt_baud+0x60>)
	lcduart_error = HAL_UART_ERROR_NONE;
 800394e:	6025      	str	r5, [r4, #0]
	printf("nxt_baud:\n");
 8003950:	f022 fd9c 	bl	802648c <puts>
	writelcdcmd("page 0");
 8003954:	4804      	ldr	r0, [pc, #16]	; (8003968 <nxt_baud+0x64>)
}
 8003956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writelcdcmd("page 0");
 800395a:	f7fe bcb7 	b.w	80022cc <writelcdcmd>
 800395e:	bf00      	nop
 8003960:	20001b1c 	.word	0x20001b1c
 8003964:	0802bea0 	.word	0x0802bea0
 8003968:	0802beac 	.word	0x0802beac

0800396c <init_nextion>:

init_nextion() {
	int i;
	char str[82] = { "empty" };
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <init_nextion+0x1d0>)
 800396e:	224c      	movs	r2, #76	; 0x4c
init_nextion() {
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003974:	e893 0003 	ldmia.w	r3, {r0, r1}
init_nextion() {
 8003978:	b0b1      	sub	sp, #196	; 0xc4

	lcduart_error = HAL_UART_ERROR_NONE;
 800397a:	2400      	movs	r4, #0
 800397c:	4f70      	ldr	r7, [pc, #448]	; (8003b40 <init_nextion+0x1d4>)
	char str[82] = { "empty" };
 800397e:	9003      	str	r0, [sp, #12]
 8003980:	f10d 0012 	add.w	r0, sp, #18
 8003984:	f8ad 1010 	strh.w	r1, [sp, #16]
 8003988:	4621      	mov	r1, r4
 800398a:	f021 fd45 	bl	8025418 <memset>
	lcduart_error = HAL_UART_ERROR_NONE;
 800398e:	603c      	str	r4, [r7, #0]

	nxt_baud();
 8003990:	f7ff ffb8 	bl	8003904 <nxt_baud>

	osDelay(600);
 8003994:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003998:	f012 fd3c 	bl	8016414 <osDelay>
	writelcdcmd("cls BLACK");
 800399c:	4869      	ldr	r0, [pc, #420]	; (8003b44 <init_nextion+0x1d8>)
 800399e:	f7fe fc95 	bl	80022cc <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80039a2:	f242 7230 	movw	r2, #10032	; 0x2730
 80039a6:	2311      	movs	r3, #17
 80039a8:	4967      	ldr	r1, [pc, #412]	; (8003b48 <init_nextion+0x1dc>)
 80039aa:	9200      	str	r2, [sp, #0]
 80039ac:	a803      	add	r0, sp, #12
 80039ae:	4622      	mov	r2, r4
	lcd_txblocked = 0;
 80039b0:	4e66      	ldr	r6, [pc, #408]	; (8003b4c <init_nextion+0x1e0>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80039b2:	f022 feb9 	bl	8026728 <siprintf>
	BUILD);
	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd(str);
 80039b6:	a803      	add	r0, sp, #12
	lcduart_error = HAL_UART_ERROR_NONE;
 80039b8:	603c      	str	r4, [r7, #0]
	writelcdcmd(str);
 80039ba:	f7fe fc87 	bl	80022cc <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;

	osDelay(100);
 80039be:	2064      	movs	r0, #100	; 0x64
	lcdstatus = 0xff;
 80039c0:	4d63      	ldr	r5, [pc, #396]	; (8003b50 <init_nextion+0x1e4>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80039c2:	603c      	str	r4, [r7, #0]
	osDelay(100);
 80039c4:	f012 fd26 	bl	8016414 <osDelay>
	lcd_txblocked = 0;
 80039c8:	6034      	str	r4, [r6, #0]
	lcd_clearrxbuf();
 80039ca:	f7fe fc9b 	bl	8002304 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 80039ce:	23ff      	movs	r3, #255	; 0xff
	strcat(pkt, "\xff\xff\xff");
 80039d0:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <init_nextion+0x1e8>)
	lcdstatus = 0xff;
 80039d2:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 80039d4:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <init_nextion+0x1ec>)
 80039d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039da:	9018      	str	r0, [sp, #96]	; 0x60
	strcat(pkt, "\xff\xff\xff");
 80039dc:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 80039de:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 80039e2:	0c09      	lsrs	r1, r1, #16
	strcat(pkt, "\xff\xff\xff");
 80039e4:	f8cd 0067 	str.w	r0, [sp, #103]	; 0x67
	return (lcd_puts(pkt));
 80039e8:	a818      	add	r0, sp, #96	; 0x60
	strcpy(pkt, str);
 80039ea:	f88d 1066 	strb.w	r1, [sp, #102]	; 0x66
	return (lcd_puts(pkt));
 80039ee:	f7fe fbd5 	bl	800219c <lcd_puts>
	if (result == -1) {		// send err
 80039f2:	3001      	adds	r0, #1
 80039f4:	f000 809e 	beq.w	8003b34 <init_nextion+0x1c8>
	processnex();
 80039f8:	f7ff fd82 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 80039fc:	782b      	ldrb	r3, [r5, #0]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d116      	bne.n	8003a30 <init_nextion+0xc4>
 8003a02:	4c56      	ldr	r4, [pc, #344]	; (8003b5c <init_nextion+0x1f0>)
 8003a04:	e007      	b.n	8003a16 <init_nextion+0xaa>
		trys++;
 8003a06:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003a08:	f012 fd04 	bl	8016414 <osDelay>
		processnex();
 8003a0c:	f7ff fd78 	bl	8003500 <processnex>
	while (lcdstatus == 0xff) {
 8003a10:	782b      	ldrb	r3, [r5, #0]
 8003a12:	2bff      	cmp	r3, #255	; 0xff
 8003a14:	d10c      	bne.n	8003a30 <init_nextion+0xc4>
		if (trys > 1000) {
 8003a16:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003a18:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003a1e:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003a22:	d9f0      	bls.n	8003a06 <init_nextion+0x9a>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003a24:	484e      	ldr	r0, [pc, #312]	; (8003b60 <init_nextion+0x1f4>)
 8003a26:	f022 fc95 	bl	8026354 <iprintf>
			trys = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6023      	str	r3, [r4, #0]
			return (-1);
 8003a2e:	e000      	b.n	8003a32 <init_nextion+0xc6>
	return (lcdstatus);
 8003a30:	782b      	ldrb	r3, [r5, #0]
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a32:	2300      	movs	r3, #0
	osDelay(500);
	lcd_getsys0();
	processnex();

	i = 0;
	while (main_init_done == 0) { // wait from main to complete the init
 8003a34:	4d4b      	ldr	r5, [pc, #300]	; (8003b64 <init_nextion+0x1f8>)
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003a36:	6033      	str	r3, [r6, #0]
	processnex();
 8003a38:	f7ff fd62 	bl	8003500 <processnex>
	osDelay(500);
 8003a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a40:	f012 fce8 	bl	8016414 <osDelay>
	lcd_getsys0();
 8003a44:	f7ff fe7a 	bl	800373c <lcd_getsys0>
	processnex();
 8003a48:	f7ff fd5a 	bl	8003500 <processnex>
	while (main_init_done == 0) { // wait from main to complete the init
 8003a4c:	682c      	ldr	r4, [r5, #0]
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	d14e      	bne.n	8003af0 <init_nextion+0x184>
 8003a52:	4e45      	ldr	r6, [pc, #276]	; (8003b68 <init_nextion+0x1fc>)
			break;
		case 1:
			writelcdcmd(strcat(str, "..\""));
			break;
		case 2:
			writelcdcmd(strcat(str, "...\""));
 8003a54:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003b80 <init_nextion+0x214>
			break;
		case 3:
			writelcdcmd(strcat(str, "....\""));
 8003a58:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8003b84 <init_nextion+0x218>
			writelcdcmd(strcat(str, "..\""));
 8003a5c:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003b88 <init_nextion+0x21c>
 8003a60:	e014      	b.n	8003a8c <init_nextion+0x120>
		switch (i & 3) {
 8003a62:	f1be 0f01 	cmp.w	lr, #1
 8003a66:	d051      	beq.n	8003b0c <init_nextion+0x1a0>
			writelcdcmd(strcat(str, ".\""));
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8003a70:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8003a74:	f7fe fc2a 	bl	80022cc <writelcdcmd>
			break;
		}
		i++;
		osDelay(250);
 8003a78:	20fa      	movs	r0, #250	; 0xfa
		i++;
 8003a7a:	3401      	adds	r4, #1
		osDelay(250);
 8003a7c:	f012 fcca 	bl	8016414 <osDelay>

		if (!(netif_is_link_up(&gnetif))) {
 8003a80:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8003a84:	075b      	lsls	r3, r3, #29
 8003a86:	d52d      	bpl.n	8003ae4 <init_nextion+0x178>
	while (main_init_done == 0) { // wait from main to complete the init
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	bb8b      	cbnz	r3, 8003af0 <init_nextion+0x184>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003a8c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8003b8c <init_nextion+0x220>
 8003a90:	f10d 0c0c 	add.w	ip, sp, #12
 8003a94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003aa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003aa4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 8003aa8:	f004 0e03 	and.w	lr, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003aac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
		switch (i & 3) {
 8003ab0:	f1be 0f02 	cmp.w	lr, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003ab4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8003ab8:	f82c 3b02 	strh.w	r3, [ip], #2
 8003abc:	f88c b000 	strb.w	fp, [ip]
		switch (i & 3) {
 8003ac0:	d02c      	beq.n	8003b1c <init_nextion+0x1b0>
 8003ac2:	f1be 0f03 	cmp.w	lr, #3
			writelcdcmd(strcat(str, ".\""));
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <init_nextion+0x200>)
 8003ac8:	a803      	add	r0, sp, #12
		switch (i & 3) {
 8003aca:	d1ca      	bne.n	8003a62 <init_nextion+0xf6>
			writelcdcmd(strcat(str, "....\""));
 8003acc:	f8d8 0000 	ldr.w	r0, [r8]
 8003ad0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003ad4:	f8cd 003a 	str.w	r0, [sp, #58]	; 0x3a
 8003ad8:	a803      	add	r0, sp, #12
 8003ada:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8003ade:	f7fe fbf5 	bl	80022cc <writelcdcmd>
			break;
 8003ae2:	e7c9      	b.n	8003a78 <init_nextion+0x10c>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8003ae4:	4822      	ldr	r0, [pc, #136]	; (8003b70 <init_nextion+0x204>)
 8003ae6:	f7fe fbf1 	bl	80022cc <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0cd      	beq.n	8003a8c <init_nextion+0x120>
		}
	}

	nxt_update();		// check if LCD needs updating

	lcduart_error = HAL_UART_ERROR_NONE;
 8003af0:	2400      	movs	r4, #0
	nxt_update();		// check if LCD needs updating
 8003af2:	f002 fca5 	bl	8006440 <nxt_update>
	writelcdcmd("ref 0");		// refresh screen
 8003af6:	481f      	ldr	r0, [pc, #124]	; (8003b74 <init_nextion+0x208>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003af8:	603c      	str	r4, [r7, #0]
	writelcdcmd("ref 0");		// refresh screen
 8003afa:	f7fe fbe7 	bl	80022cc <writelcdcmd>

	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd("page 0");
 8003afe:	481e      	ldr	r0, [pc, #120]	; (8003b78 <init_nextion+0x20c>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003b00:	603c      	str	r4, [r7, #0]
	writelcdcmd("page 0");
 8003b02:	f7fe fbe3 	bl	80022cc <writelcdcmd>

}
 8003b06:	b031      	add	sp, #196	; 0xc4
 8003b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			writelcdcmd(strcat(str, "..\""));
 8003b0c:	f8da 0000 	ldr.w	r0, [sl]
 8003b10:	f8cd 003a 	str.w	r0, [sp, #58]	; 0x3a
 8003b14:	a803      	add	r0, sp, #12
 8003b16:	f7fe fbd9 	bl	80022cc <writelcdcmd>
			break;
 8003b1a:	e7ad      	b.n	8003a78 <init_nextion+0x10c>
			writelcdcmd(strcat(str, "...\""));
 8003b1c:	f8d9 0000 	ldr.w	r0, [r9]
 8003b20:	f899 3004 	ldrb.w	r3, [r9, #4]
 8003b24:	f8cd 003a 	str.w	r0, [sp, #58]	; 0x3a
 8003b28:	a803      	add	r0, sp, #12
 8003b2a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 8003b2e:	f7fe fbcd 	bl	80022cc <writelcdcmd>
			break;
 8003b32:	e7a1      	b.n	8003a78 <init_nextion+0x10c>
		printf("getid: Cmd failed\n\r");
 8003b34:	4811      	ldr	r0, [pc, #68]	; (8003b7c <init_nextion+0x210>)
 8003b36:	f022 fc0d 	bl	8026354 <iprintf>
 8003b3a:	e75d      	b.n	80039f8 <init_nextion+0x8c>
 8003b3c:	0802a3b0 	.word	0x0802a3b0
 8003b40:	20001b1c 	.word	0x20001b1c
 8003b44:	0802beb4 	.word	0x0802beb4
 8003b48:	0802bec0 	.word	0x0802bec0
 8003b4c:	20001a6c 	.word	0x20001a6c
 8003b50:	20001b18 	.word	0x20001b18
 8003b54:	0802b7b4 	.word	0x0802b7b4
 8003b58:	0802be44 	.word	0x0802be44
 8003b5c:	20002148 	.word	0x20002148
 8003b60:	0802bd88 	.word	0x0802bd88
 8003b64:	20002dbc 	.word	0x20002dbc
 8003b68:	20003534 	.word	0x20003534
 8003b6c:	0802bf2c 	.word	0x0802bf2c
 8003b70:	0802bf44 	.word	0x0802bf44
 8003b74:	0802bf80 	.word	0x0802bf80
 8003b78:	0802beac 	.word	0x0802beac
 8003b7c:	0802be4c 	.word	0x0802be4c
 8003b80:	0802bf34 	.word	0x0802bf34
 8003b84:	0802bf3c 	.word	0x0802bf3c
 8003b88:	0802bf30 	.word	0x0802bf30
 8003b8c:	0802befc 	.word	0x0802befc

08003b90 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003b90:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2107      	movs	r1, #7
 8003b96:	2026      	movs	r0, #38	; 0x26
 8003b98:	f005 ff2c 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b9c:	2026      	movs	r0, #38	; 0x26
 8003b9e:	f005 ff73 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2106      	movs	r1, #6
 8003ba6:	2047      	movs	r0, #71	; 0x47
 8003ba8:	f005 ff24 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003bac:	2047      	movs	r0, #71	; 0x47
 8003bae:	f005 ff6b 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2106      	movs	r1, #6
 8003bb6:	2012      	movs	r0, #18
 8003bb8:	f005 ff1c 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003bbc:	2012      	movs	r0, #18
 8003bbe:	f005 ff63 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2106      	movs	r1, #6
 8003bc6:	2028      	movs	r0, #40	; 0x28
 8003bc8:	f005 ff14 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bcc:	2028      	movs	r0, #40	; 0x28
 8003bce:	f005 ff5b 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003bd2:	202d      	movs	r0, #45	; 0x2d
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	f005 ff0c 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003bdc:	202d      	movs	r0, #45	; 0x2d
}
 8003bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003be2:	f005 bf51 	b.w	8009a88 <HAL_NVIC_EnableIRQ>
 8003be6:	bf00      	nop

08003be8 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <netif_status_callbk_fn+0x8>)
 8003bea:	f022 bc4f 	b.w	802648c <puts>
 8003bee:	bf00      	nop
 8003bf0:	0802bf9c 	.word	0x0802bf9c

08003bf4 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <Callback01+0x8>)
 8003bf6:	f022 bc49 	b.w	802648c <puts>
 8003bfa:	bf00      	nop
 8003bfc:	0802bfb4 	.word	0x0802bfb4

08003c00 <_write>:
	if (file == 1) {
 8003c00:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c04:	460c      	mov	r4, r1
 8003c06:	4617      	mov	r7, r2
	if (file == 1) {
 8003c08:	d00e      	beq.n	8003c28 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	dd0a      	ble.n	8003c24 <_write+0x24>
 8003c0e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8003c10:	4d0b      	ldr	r5, [pc, #44]	; (8003c40 <_write+0x40>)
 8003c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c16:	230a      	movs	r3, #10
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f010 f906 	bl	8013e2c <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d1f6      	bne.n	8003c12 <_write+0x12>
}
 8003c24:	4638      	mov	r0, r7
 8003c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	ddfb      	ble.n	8003c24 <_write+0x24>
 8003c2c:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8003c2e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003c32:	f001 fe1f 	bl	8005874 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c36:	42ac      	cmp	r4, r5
 8003c38:	d1f9      	bne.n	8003c2e <_write+0x2e>
}
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20002b98 	.word	0x20002b98

08003c44 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c46:	4811      	ldr	r0, [pc, #68]	; (8003c8c <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c48:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <crc_rom+0x4c>)
 8003c4e:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <crc_rom+0x50>)
 8003c50:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c52:	bf2c      	ite	cs
 8003c54:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8003c58:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c5c:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 8003c5e:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 8003c62:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c64:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 8003c66:	460c      	mov	r4, r1
crc_rom() {
 8003c68:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	f7fc ffba 	bl	8000be8 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003c74:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003c76:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4807      	ldr	r0, [pc, #28]	; (8003c98 <crc_rom+0x54>)
}
 8003c7c:	b002      	add	sp, #8
 8003c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003c82:	f022 bb67 	b.w	8026354 <iprintf>
 8003c86:	bf00      	nop
 8003c88:	08003b91 	.word	0x08003b91
 8003c8c:	200006d4 	.word	0x200006d4
 8003c90:	080479a4 	.word	0x080479a4
 8003c94:	20000000 	.word	0x20000000
 8003c98:	0802bfc0 	.word	0x0802bfc0

08003c9c <err_leds>:
err_leds(int why) {
 8003c9c:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003c9e:	4e37      	ldr	r6, [pc, #220]	; (8003d7c <err_leds+0xe0>)
err_leds(int why) {
 8003ca0:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003ca2:	4d37      	ldr	r5, [pc, #220]	; (8003d80 <err_leds+0xe4>)
 8003ca4:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003ca6:	2c07      	cmp	r4, #7
 8003ca8:	d80f      	bhi.n	8003cca <err_leds+0x2e>
 8003caa:	e8df f004 	tbb	[pc, r4]
 8003cae:	5c51      	.short	0x5c51
 8003cb0:	25303b46 	.word	0x25303b46
 8003cb4:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f008 ffde 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f008 ffd9 	bl	800cc7c <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	9b01      	ldr	r3, [sp, #4]
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	dae8      	bge.n	8003ca6 <err_leds+0xa>
 8003cd4:	9b01      	ldr	r3, [sp, #4]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	9b01      	ldr	r3, [sp, #4]
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	dbf9      	blt.n	8003cd4 <err_leds+0x38>
 8003ce0:	e7e1      	b.n	8003ca6 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ce8:	f008 ffc8 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f008 ffc3 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003cf6:	e7e8      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cfe:	f008 ffbd 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d06:	4630      	mov	r0, r6
 8003d08:	f008 ffb8 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d0c:	e7dd      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d14:	f008 ffb2 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f008 ffad 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d22:	e7d2      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d24:	4630      	mov	r0, r6
 8003d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d2a:	f008 ffa7 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d32:	4630      	mov	r0, r6
 8003d34:	f008 ffa2 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d38:	e7c7      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d40:	f008 ff9c 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f008 ff97 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d4e:	e7bc      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d50:	4630      	mov	r0, r6
 8003d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d56:	f008 ff91 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f008 ff8c 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d64:	e7b1      	b.n	8003cca <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d66:	4630      	mov	r0, r6
 8003d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d6c:	f008 ff86 	bl	800cc7c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d74:	4630      	mov	r0, r6
 8003d76:	f008 ff81 	bl	800cc7c <HAL_GPIO_TogglePin>
			break;
 8003d7a:	e7a6      	b.n	8003cca <err_leds+0x2e>
 8003d7c:	40020c00 	.word	0x40020c00
 8003d80:	003567e0 	.word	0x003567e0

08003d84 <rebootme>:
void rebootme(int why) {
 8003d84:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d86:	b672      	cpsid	i
		err_leds(why);
 8003d88:	f7ff ff88 	bl	8003c9c <err_leds>

08003d8c <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003d8c:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003d90:	074a      	lsls	r2, r1, #29
 8003d92:	d502      	bpl.n	8003d9a <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <netif_link_callbk_fn+0x30>)
 8003d96:	f022 badd 	b.w	8026354 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8003d9e:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <netif_link_callbk_fn+0x34>)
 8003da0:	f022 fad8 	bl	8026354 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003da4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003da8:	075b      	lsls	r3, r3, #29
 8003daa:	d500      	bpl.n	8003dae <netif_link_callbk_fn+0x22>
}
 8003dac:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <netif_link_callbk_fn+0x38>)
 8003db0:	f022 fb6c 	bl	802648c <puts>
			rebootme(1);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff ffe5 	bl	8003d84 <rebootme>
 8003dba:	bf00      	nop
 8003dbc:	0802bfe4 	.word	0x0802bfe4
 8003dc0:	0802c004 	.word	0x0802c004
 8003dc4:	0802c024 	.word	0x0802c024

08003dc8 <StarLPTask>:
	char str[82] = { "empty" };
 8003dc8:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <StarLPTask+0x15c>)
 8003dca:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003dd4:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003dd6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8003f78 <StarLPTask+0x1b0>
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003dda:	4f53      	ldr	r7, [pc, #332]	; (8003f28 <StarLPTask+0x160>)
	char str[82] = { "empty" };
 8003ddc:	9009      	str	r0, [sp, #36]	; 0x24
 8003dde:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8003de2:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8003de6:	2100      	movs	r1, #0
 8003de8:	f021 fb16 	bl	8025418 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003dec:	2200      	movs	r2, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003dee:	2101      	movs	r1, #1
 8003df0:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003df2:	f8c9 2078 	str.w	r2, [r9, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003df6:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003dfa:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003dfe:	f012 fe01 	bl	8016a04 <xQueueGenericCreate>
 8003e02:	6038      	str	r0, [r7, #0]
	if (consolerxq == NULL) {
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f000 83cd 	beq.w	80045a4 <StarLPTask+0x7dc>
	strcpy(udp_target, SERVER_DESTINATION);
 8003e0a:	4c48      	ldr	r4, [pc, #288]	; (8003f2c <StarLPTask+0x164>)
 8003e0c:	4d48      	ldr	r5, [pc, #288]	; (8003f30 <StarLPTask+0x168>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8003e0e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8003f7c <StarLPTask+0x1b4>
	if (http_downloading) {		// don't go further
 8003e12:	4e48      	ldr	r6, [pc, #288]	; (8003f34 <StarLPTask+0x16c>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e16:	6028      	str	r0, [r5, #0]
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	60eb      	str	r3, [r5, #12]
 8003e1c:	6069      	str	r1, [r5, #4]
 8003e1e:	60aa      	str	r2, [r5, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e20:	2201      	movs	r2, #1
 8003e22:	4945      	ldr	r1, [pc, #276]	; (8003f38 <StarLPTask+0x170>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003e24:	6128      	str	r0, [r5, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e26:	4845      	ldr	r0, [pc, #276]	; (8003f3c <StarLPTask+0x174>)
 8003e28:	f010 fa1e 	bl	8014268 <HAL_UART_Receive_IT>
	init_nextion();
 8003e2c:	f7ff fd9e 	bl	800396c <init_nextion>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8003e30:	f8b9 405c 	ldrh.w	r4, [r9, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8003e34:	4842      	ldr	r0, [pc, #264]	; (8003f40 <StarLPTask+0x178>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8003e36:	f899 c070 	ldrb.w	ip, [r9, #112]	; 0x70
 8003e3a:	b2a4      	uxth	r4, r4
 8003e3c:	f899 e071 	ldrb.w	lr, [r9, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8003e40:	f8d0 3424 	ldr.w	r3, [r0, #1060]	; 0x424
 8003e44:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8003e48:	9401      	str	r4, [sp, #4]
 8003e4a:	493e      	ldr	r1, [pc, #248]	; (8003f44 <StarLPTask+0x17c>)
 8003e4c:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8003e50:	e9cd 5804 	strd	r5, r8, [sp, #16]
 8003e54:	f8d0 0428 	ldr.w	r0, [r0, #1064]	; 0x428
 8003e58:	9000      	str	r0, [sp, #0]
 8003e5a:	483b      	ldr	r0, [pc, #236]	; (8003f48 <StarLPTask+0x180>)
 8003e5c:	f022 fc64 	bl	8026728 <siprintf>
	osDelay(500);
 8003e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e64:	f012 fad6 	bl	8016414 <osDelay>
	if (http_downloading) {		// don't go further
 8003e68:	6833      	ldr	r3, [r6, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 838e 	bne.w	800458c <StarLPTask+0x7c4>
	int last3min = 0;
 8003e70:	2300      	movs	r3, #0
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003e72:	4836      	ldr	r0, [pc, #216]	; (8003f4c <StarLPTask+0x184>)
 8003e74:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003f80 <StarLPTask+0x1b8>
	int last3min = 0;
 8003e78:	461e      	mov	r6, r3
 8003e7a:	9307      	str	r3, [sp, #28]
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003e7c:	f00c fb62 	bl	8010544 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <StarLPTask+0x188>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	46b2      	mov	sl, r6
	gainchanged = 0;
 8003e86:	9606      	str	r6, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003e88:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003e8a:	4832      	ldr	r0, [pc, #200]	; (8003f54 <StarLPTask+0x18c>)
		tenmstimer++;
 8003e8c:	3601      	adds	r6, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003e8e:	f009 fd5f 	bl	800d950 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003e92:	200a      	movs	r0, #10
 8003e94:	f012 fabe 	bl	8016414 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <StarLPTask+0x190>)
 8003e9a:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <StarLPTask+0x194>)
		tenmstimer++;
 8003e9c:	b2b6      	uxth	r6, r6
		globaladcnoise = abs(meanwindiff);
 8003e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfb8      	it	lt
 8003ea6:	425b      	neglt	r3, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <StarLPTask+0x198>)
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	8013      	strh	r3, [r2, #0]
		if (sigsuppress) {
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <StarLPTask+0x19c>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	b10b      	cbz	r3, 8003ebe <StarLPTask+0xf6>
			sigsuppress--;		// decrement trigger suppression counter
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]
				agc = (agc) ? 0 : 1;
 8003ebe:	4d2a      	ldr	r5, [pc, #168]	; (8003f68 <StarLPTask+0x1a0>)
				printf("AGC is ");
 8003ec0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003f84 <StarLPTask+0x1bc>
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003eca:	6838      	ldr	r0, [r7, #0]
 8003ecc:	f012 ff9e 	bl	8016e0c <xQueueReceive>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d059      	beq.n	8003f88 <StarLPTask+0x1c0>
			if (inch == 0x03) {		// control C
 8003ed4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003ed8:	2803      	cmp	r0, #3
 8003eda:	d011      	beq.n	8003f00 <StarLPTask+0x138>
			if ((isdigit(inch)) && (agc == 0)) {
 8003edc:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <StarLPTask+0x1a4>)
 8003ede:	5cc3      	ldrb	r3, [r0, r3]
 8003ee0:	075b      	lsls	r3, r3, #29
 8003ee2:	d501      	bpl.n	8003ee8 <StarLPTask+0x120>
 8003ee4:	882b      	ldrh	r3, [r5, #0]
 8003ee6:	b113      	cbz	r3, 8003eee <StarLPTask+0x126>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 8003ee8:	f001 fcc4 	bl	8005874 <__io_putchar>
 8003eec:	e7ea      	b.n	8003ec4 <StarLPTask+0xfc>
				setpgagain(inch - '0');
 8003eee:	3830      	subs	r0, #48	; 0x30
 8003ef0:	f002 fc5e 	bl	80067b0 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8003ef4:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003ef8:	481d      	ldr	r0, [pc, #116]	; (8003f70 <StarLPTask+0x1a8>)
 8003efa:	f022 fa2b 	bl	8026354 <iprintf>
 8003efe:	e7e1      	b.n	8003ec4 <StarLPTask+0xfc>
				agc = (agc) ? 0 : 1;
 8003f00:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8003f02:	4640      	mov	r0, r8
				agc = (agc) ? 0 : 1;
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 8003f0c:	f022 fa22 	bl	8026354 <iprintf>
				if (agc)
 8003f10:	882b      	ldrh	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8130 	beq.w	8004178 <StarLPTask+0x3b0>
					printf("ON\n");
 8003f18:	4816      	ldr	r0, [pc, #88]	; (8003f74 <StarLPTask+0x1ac>)
 8003f1a:	f022 fab7 	bl	802648c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003f1e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003f22:	e7db      	b.n	8003edc <StarLPTask+0x114>
 8003f24:	0802a404 	.word	0x0802a404
 8003f28:	20002160 	.word	0x20002160
 8003f2c:	0802b32c 	.word	0x0802b32c
 8003f30:	200034c8 	.word	0x200034c8
 8003f34:	200018bc 	.word	0x200018bc
 8003f38:	2000215c 	.word	0x2000215c
 8003f3c:	20002a0c 	.word	0x20002a0c
 8003f40:	1ff0f000 	.word	0x1ff0f000
 8003f44:	0802c088 	.word	0x0802c088
 8003f48:	200000a0 	.word	0x200000a0
 8003f4c:	200029c0 	.word	0x200029c0
 8003f50:	20002db8 	.word	0x20002db8
 8003f54:	20002660 	.word	0x20002660
 8003f58:	20000760 	.word	0x20000760
 8003f5c:	20000710 	.word	0x20000710
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000780 	.word	0x20000780
 8003f68:	2000002e 	.word	0x2000002e
 8003f6c:	080470ad 	.word	0x080470ad
 8003f70:	0802c0e0 	.word	0x0802c0e0
 8003f74:	0802c0d8 	.word	0x0802c0d8
 8003f78:	2000300c 	.word	0x2000300c
 8003f7c:	2000346c 	.word	0x2000346c
 8003f80:	20002de8 	.word	0x20002de8
 8003f84:	0802c0d0 	.word	0x0802c0d0
		if (!(ledsenabled)) {
 8003f88:	4baa      	ldr	r3, [pc, #680]	; (8004234 <StarLPTask+0x46c>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80f8 	beq.w	8004184 <StarLPTask+0x3bc>
		} else if (ledhang) {	// trigger led
 8003f94:	4aa8      	ldr	r2, [pc, #672]	; (8004238 <StarLPTask+0x470>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80f3 	beq.w	8004184 <StarLPTask+0x3bc>
			ledhang--;
 8003f9e:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa4:	48a5      	ldr	r0, [pc, #660]	; (800423c <StarLPTask+0x474>)
			ledhang--;
 8003fa6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f008 fe4d 	bl	800cc48 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8003fae:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8003fb2:	f8db 3000 	ldr.w	r3, [fp]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	f040 80f1 	bne.w	800419e <StarLPTask+0x3d6>
		processnex();		// process Nextion
 8003fbc:	f7ff faa0 	bl	8003500 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8003fc0:	4a9f      	ldr	r2, [pc, #636]	; (8004240 <StarLPTask+0x478>)
 8003fc2:	1cf3      	adds	r3, r6, #3
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	4a9e      	ldr	r2, [pc, #632]	; (8004244 <StarLPTask+0x47c>)
 8003fca:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8003fce:	d31e      	bcc.n	800400e <StarLPTask+0x246>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8003fd0:	4c9d      	ldr	r4, [pc, #628]	; (8004248 <StarLPTask+0x480>)
 8003fd2:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	f103 0219 	add.w	r2, r3, #25
 8003fdc:	4291      	cmp	r1, r2
 8003fde:	f200 8229 	bhi.w	8004434 <StarLPTask+0x66c>
				if (jabbertimeout) {
 8003fe2:	4a9a      	ldr	r2, [pc, #616]	; (800424c <StarLPTask+0x484>)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	b10b      	cbz	r3, 8003fec <StarLPTask+0x224>
					jabbertimeout--;		// de-arm count
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003fec:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8003ff0:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8003ff2:	9b06      	ldr	r3, [sp, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 823f 	beq.w	8004478 <StarLPTask+0x6b0>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003ffa:	4b95      	ldr	r3, [pc, #596]	; (8004250 <StarLPTask+0x488>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 81ef 	beq.w	80043e2 <StarLPTask+0x61a>
 8004004:	4b93      	ldr	r3, [pc, #588]	; (8004254 <StarLPTask+0x48c>)
			} else if (lcd_currentpage == 1) {
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	f000 827f 	beq.w	800450c <StarLPTask+0x744>
				lcd_showvars();
 800400e:	4a92      	ldr	r2, [pc, #584]	; (8004258 <StarLPTask+0x490>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8004010:	f106 030b 	add.w	r3, r6, #11
				lcd_showvars();
 8004014:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8004018:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800401c:	3a01      	subs	r2, #1
 800401e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8004022:	f080 80f9 	bcs.w	8004218 <StarLPTask+0x450>
			lcd_trigplot();		// update lcd trigger and noise plots
 8004026:	4a8c      	ldr	r2, [pc, #560]	; (8004258 <StarLPTask+0x490>)
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8004028:	f106 0332 	add.w	r3, r6, #50	; 0x32
			lcd_trigplot();		// update lcd trigger and noise plots
 800402c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8004030:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004034:	3a01      	subs	r2, #1
 8004036:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800403a:	d307      	bcc.n	800404c <StarLPTask+0x284>
			if ((lcd_sys0 >> 8) > 10029)
 800403c:	4b87      	ldr	r3, [pc, #540]	; (800425c <StarLPTask+0x494>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	f242 732d 	movw	r3, #10029	; 0x272d
 8004044:	ebb3 2f22 	cmp.w	r3, r2, asr #8
 8004048:	f2c0 822f 	blt.w	80044aa <StarLPTask+0x6e2>
				lcd_gps();		// display the GPS on the LCD page 0
 800404c:	4a84      	ldr	r2, [pc, #528]	; (8004260 <StarLPTask+0x498>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 800404e:	f106 031b 	add.w	r3, r6, #27
				lcd_gps();		// display the GPS on the LCD page 0
 8004052:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8004056:	4a83      	ldr	r2, [pc, #524]	; (8004264 <StarLPTask+0x49c>)
 8004058:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800405c:	d31a      	bcc.n	8004094 <StarLPTask+0x2cc>
			if (agc) {
 800405e:	4b82      	ldr	r3, [pc, #520]	; (8004268 <StarLPTask+0x4a0>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 821b 	beq.w	800449e <StarLPTask+0x6d6>
				trigsin10sec = trigs - prevtrigs;
 8004068:	4c80      	ldr	r4, [pc, #512]	; (800426c <StarLPTask+0x4a4>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800406a:	4d81      	ldr	r5, [pc, #516]	; (8004270 <StarLPTask+0x4a8>)
				trigsin10sec = trigs - prevtrigs;
 800406c:	f8db 2000 	ldr.w	r2, [fp]
 8004070:	6823      	ldr	r3, [r4, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8004072:	8829      	ldrh	r1, [r5, #0]
				trigsin10sec = trigs - prevtrigs;
 8004074:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80042d8 <StarLPTask+0x510>
 8004078:	1ad3      	subs	r3, r2, r3
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800407a:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 800407c:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8004080:	d802      	bhi.n	8004088 <StarLPTask+0x2c0>
					if (trigsin10sec < MINTRIGS10S)
 8004082:	2b01      	cmp	r3, #1
 8004084:	f240 826e 	bls.w	8004564 <StarLPTask+0x79c>
				if (trigsin10sec > MAXTRIGS10S)
 8004088:	2b0a      	cmp	r3, #10
 800408a:	f200 8242 	bhi.w	8004512 <StarLPTask+0x74a>
			gainchanged = 0;
 800408e:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8004090:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8004092:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8004094:	f640 338c 	movw	r3, #2956	; 0xb8c
 8004098:	429e      	cmp	r6, r3
 800409a:	d94d      	bls.n	8004138 <StarLPTask+0x370>
			if (gpsgood == 0) {	// gps is not talking to us
 800409c:	4b75      	ldr	r3, [pc, #468]	; (8004274 <StarLPTask+0x4ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 81fe 	bne.w	80044a2 <StarLPTask+0x6da>
				printf("GPS serial comms problem?\n");
 80040a6:	4874      	ldr	r0, [pc, #464]	; (8004278 <StarLPTask+0x4b0>)
 80040a8:	f022 f9f0 	bl	802648c <puts>
				if (gpsbadcount++ > 9) {
 80040ac:	4973      	ldr	r1, [pc, #460]	; (800427c <StarLPTask+0x4b4>)
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	600a      	str	r2, [r1, #0]
 80040b6:	f300 825f 	bgt.w	8004578 <StarLPTask+0x7b0>
			if (psensor == MPL115A2) {
 80040ba:	4b71      	ldr	r3, [pc, #452]	; (8004280 <StarLPTask+0x4b8>)
			gpsgood = 0;			// reset the good flag
 80040bc:	2200      	movs	r2, #0
 80040be:	496d      	ldr	r1, [pc, #436]	; (8004274 <StarLPTask+0x4ac>)
			if (psensor == MPL115A2) {
 80040c0:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80040c2:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f000 8218 	beq.w	80044fa <StarLPTask+0x732>
			} else if (psensor == MPL3115A2) {
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f000 8237 	beq.w	800453e <StarLPTask+0x776>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <StarLPTask+0x4bc>)
			tenmstimer = 0;
 80040d2:	2600      	movs	r6, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80040d4:	f8b9 105c 	ldrh.w	r1, [r9, #92]	; 0x5c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b289      	uxth	r1, r1
 80040dc:	486a      	ldr	r0, [pc, #424]	; (8004288 <StarLPTask+0x4c0>)
 80040de:	0e1a      	lsrs	r2, r3, #24
 80040e0:	9202      	str	r2, [sp, #8]
 80040e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80040e6:	9201      	str	r2, [sp, #4]
 80040e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	9200      	str	r2, [sp, #0]
 80040f0:	f242 7230 	movw	r2, #10032	; 0x2730
 80040f4:	f022 f92e 	bl	8026354 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <StarLPTask+0x4c4>)
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <StarLPTask+0x4c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8db 1000 	ldr.w	r1, [fp]
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	4863      	ldr	r0, [pc, #396]	; (8004294 <StarLPTask+0x4cc>)
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <StarLPTask+0x4d0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <StarLPTask+0x4d4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <StarLPTask+0x4d8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	4b53      	ldr	r3, [pc, #332]	; (8004270 <StarLPTask+0x4a8>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <StarLPTask+0x4dc>)
 8004128:	f9b3 2000 	ldrsh.w	r2, [r3]
 800412c:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <StarLPTask+0x4e0>)
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <StarLPTask+0x4e4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 f90e 	bl	8026354 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8004138:	f10a 0315 	add.w	r3, sl, #21
 800413c:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <StarLPTask+0x4e8>)
 800413e:	b29b      	uxth	r3, r3
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	4a5b      	ldr	r2, [pc, #364]	; (80042b4 <StarLPTask+0x4ec>)
 8004146:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800414a:	d30b      	bcc.n	8004164 <StarLPTask+0x39c>
 800414c:	9b07      	ldr	r3, [sp, #28]
 800414e:	459a      	cmp	sl, r3
 8004150:	d008      	beq.n	8004164 <StarLPTask+0x39c>
			if (boosttrys > 0)	// timer for boost gain oscillating
 8004152:	4a59      	ldr	r2, [pc, #356]	; (80042b8 <StarLPTask+0x4f0>)
 8004154:	8813      	ldrh	r3, [r2, #0]
 8004156:	b10b      	cbz	r3, 800415c <StarLPTask+0x394>
				boosttrys--;
 8004158:	3b01      	subs	r3, #1
 800415a:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();	// add a point to the pressure plot
 800415c:	f7fe fe92 	bl	8002e84 <lcd_pressplot>
 8004160:	f8cd a01c 	str.w	sl, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8004164:	f240 3385 	movw	r3, #901	; 0x385
 8004168:	459a      	cmp	sl, r3
 800416a:	f47f ae8e 	bne.w	8003e8a <StarLPTask+0xc2>
			onesectimer = 0;
 800416e:	f04f 0a00 	mov.w	sl, #0
			requestapisn();			//update s/n and udp target (reboot on fail)
 8004172:	f004 ff81 	bl	8009078 <requestapisn>
 8004176:	e688      	b.n	8003e8a <StarLPTask+0xc2>
					printf("OFF\n");
 8004178:	4850      	ldr	r0, [pc, #320]	; (80042bc <StarLPTask+0x4f4>)
 800417a:	f022 f987 	bl	802648c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 800417e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8004182:	e6ab      	b.n	8003edc <StarLPTask+0x114>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800418a:	482c      	ldr	r0, [pc, #176]	; (800423c <StarLPTask+0x474>)
 800418c:	f008 fd5c 	bl	800cc48 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8004190:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8004194:	f8db 3000 	ldr.w	r3, [fp]
 8004198:	429a      	cmp	r2, r3
 800419a:	f43f af0f 	beq.w	8003fbc <StarLPTask+0x1f4>
			if (soundenabled) {
 800419e:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <StarLPTask+0x4f8>)
			trigs = statuspkt.trigcount;
 80041a0:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
			if (soundenabled) {
 80041a4:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80041a6:	f8cb 2000 	str.w	r2, [fp]
			if (soundenabled) {
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 8180 	bne.w	80044b0 <StarLPTask+0x6e8>
 80041b0:	4d44      	ldr	r5, [pc, #272]	; (80042c4 <StarLPTask+0x4fc>)
				printf("sem wait 1a\n");
 80041b2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80042dc <StarLPTask+0x514>
 80041b6:	e002      	b.n	80041be <StarLPTask+0x3f6>
 80041b8:	4640      	mov	r0, r8
 80041ba:	f022 f967 	bl	802648c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80041be:	2101      	movs	r1, #1
 80041c0:	6828      	ldr	r0, [r5, #0]
 80041c2:	f012 feeb 	bl	8016f9c <xQueueSemaphoreTake>
 80041c6:	2801      	cmp	r0, #1
 80041c8:	d1f6      	bne.n	80041b8 <StarLPTask+0x3f0>
			strcpy(str, ctime(&epochtime));		// ctime
 80041ca:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80041ce:	483e      	ldr	r0, [pc, #248]	; (80042c8 <StarLPTask+0x500>)
 80041d0:	f020 fea0 	bl	8024f14 <ctime>
 80041d4:	4601      	mov	r1, r0
 80041d6:	4640      	mov	r0, r8
 80041d8:	f022 fb37 	bl	802684a <stpcpy>
			i = 0;
 80041dc:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 80041de:	eba0 0008 	sub.w	r0, r0, r8
 80041e2:	493a      	ldr	r1, [pc, #232]	; (80042cc <StarLPTask+0x504>)
 80041e4:	e008      	b.n	80041f8 <StarLPTask+0x430>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80041e6:	f818 2003 	ldrb.w	r2, [r8, r3]
 80041ea:	2a0a      	cmp	r2, #10
 80041ec:	d003      	beq.n	80041f6 <StarLPTask+0x42e>
 80041ee:	2a0d      	cmp	r2, #13
 80041f0:	d001      	beq.n	80041f6 <StarLPTask+0x42e>
					trigtimestr[n++] = str[i];
 80041f2:	550a      	strb	r2, [r1, r4]
 80041f4:	3401      	adds	r4, #1
				i++;
 80041f6:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 80041f8:	4283      	cmp	r3, r0
 80041fa:	d3f4      	bcc.n	80041e6 <StarLPTask+0x41e>
			trigtimestr[n] = '\0';
 80041fc:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80041fe:	6828      	ldr	r0, [r5, #0]
			trigtimestr[n] = '\0';
 8004200:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004202:	461a      	mov	r2, r3
 8004204:	4619      	mov	r1, r3
 8004206:	f012 fc2f 	bl	8016a68 <xQueueGenericSend>
 800420a:	2801      	cmp	r0, #1
 800420c:	f43f aed6 	beq.w	8003fbc <StarLPTask+0x1f4>
				printf("semaphore 1a release failed\n");
 8004210:	482f      	ldr	r0, [pc, #188]	; (80042d0 <StarLPTask+0x508>)
 8004212:	f022 f93b 	bl	802648c <puts>
 8004216:	e6d1      	b.n	8003fbc <StarLPTask+0x1f4>
			if (ledsenabled)
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <StarLPTask+0x46c>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800421a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800421e:	4807      	ldr	r0, [pc, #28]	; (800423c <StarLPTask+0x474>)
			if (ledsenabled)
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	2a00      	cmp	r2, #0
 8004224:	f000 814e 	beq.w	80044c4 <StarLPTask+0x6fc>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8004228:	f008 fd28 	bl	800cc7c <HAL_GPIO_TogglePin>
 800422c:	4d25      	ldr	r5, [pc, #148]	; (80042c4 <StarLPTask+0x4fc>)
				printf("sem wait 1b\n");
 800422e:	4c29      	ldr	r4, [pc, #164]	; (80042d4 <StarLPTask+0x50c>)
 8004230:	e059      	b.n	80042e6 <StarLPTask+0x51e>
 8004232:	bf00      	nop
 8004234:	2000028c 	.word	0x2000028c
 8004238:	2000075c 	.word	0x2000075c
 800423c:	40020c00 	.word	0x40020c00
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	19999999 	.word	0x19999999
 8004248:	20002da8 	.word	0x20002da8
 800424c:	20000714 	.word	0x20000714
 8004250:	20001a68 	.word	0x20001a68
 8004254:	20001a64 	.word	0x20001a64
 8004258:	c28f5c29 	.word	0xc28f5c29
 800425c:	20000014 	.word	0x20000014
 8004260:	26e978d5 	.word	0x26e978d5
 8004264:	00418937 	.word	0x00418937
 8004268:	2000002e 	.word	0x2000002e
 800426c:	20002dd8 	.word	0x20002dd8
 8004270:	20000002 	.word	0x20000002
 8004274:	20002ecc 	.word	0x20002ecc
 8004278:	0802c294 	.word	0x0802c294
 800427c:	20002168 	.word	0x20002168
 8004280:	200033f4 	.word	0x200033f4
 8004284:	20002dcc 	.word	0x20002dcc
 8004288:	0802c2f0 	.word	0x0802c2f0
 800428c:	200033fc 	.word	0x200033fc
 8004290:	10624dd3 	.word	0x10624dd3
 8004294:	0802c30c 	.word	0x0802c30c
 8004298:	200033ec 	.word	0x200033ec
 800429c:	200033f8 	.word	0x200033f8
 80042a0:	200033f0 	.word	0x200033f0
 80042a4:	200033e8 	.word	0x200033e8
 80042a8:	20000070 	.word	0x20000070
 80042ac:	20000710 	.word	0x20000710
 80042b0:	a4fa4fa5 	.word	0xa4fa4fa5
 80042b4:	016c16c1 	.word	0x016c16c1
 80042b8:	20003368 	.word	0x20003368
 80042bc:	0802c0dc 	.word	0x0802c0dc
 80042c0:	20000292 	.word	0x20000292
 80042c4:	20002de0 	.word	0x20002de0
 80042c8:	20002ec0 	.word	0x20002ec0
 80042cc:	20000258 	.word	0x20000258
 80042d0:	0802c110 	.word	0x0802c110
 80042d4:	0802c13c 	.word	0x0802c13c
 80042d8:	20002dec 	.word	0x20002dec
 80042dc:	0802c104 	.word	0x0802c104
 80042e0:	4620      	mov	r0, r4
 80042e2:	f022 f8d3 	bl	802648c <puts>
			while (!(xSemaphoreTake(
 80042e6:	2101      	movs	r1, #1
 80042e8:	6828      	ldr	r0, [r5, #0]
 80042ea:	f012 fe57 	bl	8016f9c <xQueueSemaphoreTake>
 80042ee:	2801      	cmp	r0, #1
 80042f0:	d1f6      	bne.n	80042e0 <StarLPTask+0x518>
			strcpy(str, ctime(&epochtime));
 80042f2:	48b0      	ldr	r0, [pc, #704]	; (80045b4 <StarLPTask+0x7ec>)
 80042f4:	f020 fe0e 	bl	8024f14 <ctime>
 80042f8:	aa09      	add	r2, sp, #36	; 0x24
 80042fa:	4601      	mov	r1, r0
 80042fc:	4610      	mov	r0, r2
 80042fe:	f022 faa4 	bl	802684a <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8004302:	aa09      	add	r2, sp, #36	; 0x24
			sprintf(nowtimestr, "\"%s\"", str);
 8004304:	49ac      	ldr	r1, [pc, #688]	; (80045b8 <StarLPTask+0x7f0>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8004306:	1a80      	subs	r0, r0, r2
 8004308:	f100 0378 	add.w	r3, r0, #120	; 0x78
 800430c:	eb0d 0003 	add.w	r0, sp, r3
 8004310:	2300      	movs	r3, #0
 8004312:	f800 3c55 	strb.w	r3, [r0, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8004316:	48a9      	ldr	r0, [pc, #676]	; (80045bc <StarLPTask+0x7f4>)
 8004318:	f022 fa06 	bl	8026728 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 800431c:	4ba8      	ldr	r3, [pc, #672]	; (80045c0 <StarLPTask+0x7f8>)
 800431e:	4aa9      	ldr	r2, [pc, #676]	; (80045c4 <StarLPTask+0x7fc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	49a8      	ldr	r1, [pc, #672]	; (80045c8 <StarLPTask+0x800>)
 8004326:	48a9      	ldr	r0, [pc, #676]	; (80045cc <StarLPTask+0x804>)
 8004328:	f022 f9fe 	bl	8026728 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 800432c:	4ba8      	ldr	r3, [pc, #672]	; (80045d0 <StarLPTask+0x808>)
 800432e:	4aa9      	ldr	r2, [pc, #676]	; (80045d4 <StarLPTask+0x80c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	49a4      	ldr	r1, [pc, #656]	; (80045c8 <StarLPTask+0x800>)
 8004336:	48a8      	ldr	r0, [pc, #672]	; (80045d8 <StarLPTask+0x810>)
 8004338:	f022 f9f6 	bl	8026728 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800433c:	4ba7      	ldr	r3, [pc, #668]	; (80045dc <StarLPTask+0x814>)
			sprintf(statstr,
 800433e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004342:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8004346:	49a6      	ldr	r1, [pc, #664]	; (80045e0 <StarLPTask+0x818>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004348:	2b00      	cmp	r3, #0
			sprintf(statstr,
 800434a:	48a6      	ldr	r0, [pc, #664]	; (80045e4 <StarLPTask+0x81c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800434c:	bfb8      	it	lt
 800434e:	425b      	neglt	r3, r3
			sprintf(statstr,
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	4ba4      	ldr	r3, [pc, #656]	; (80045e8 <StarLPTask+0x820>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	9302      	str	r3, [sp, #8]
 8004360:	4ba2      	ldr	r3, [pc, #648]	; (80045ec <StarLPTask+0x824>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <StarLPTask+0x828>)
 800436e:	f022 f9db 	bl	8026728 <siprintf>
			if (gpslocked) {
 8004372:	4ba0      	ldr	r3, [pc, #640]	; (80045f4 <StarLPTask+0x82c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a7 	beq.w	80044ca <StarLPTask+0x702>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 800437c:	f899 201b 	ldrb.w	r2, [r9, #27]
 8004380:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004384:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8004388:	489b      	ldr	r0, [pc, #620]	; (80045f8 <StarLPTask+0x830>)
 800438a:	9100      	str	r1, [sp, #0]
 800438c:	499b      	ldr	r1, [pc, #620]	; (80045fc <StarLPTask+0x834>)
 800438e:	f022 f9cb 	bl	8026728 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004392:	2300      	movs	r3, #0
 8004394:	6828      	ldr	r0, [r5, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	4619      	mov	r1, r3
 800439a:	f012 fb65 	bl	8016a68 <xQueueGenericSend>
 800439e:	2801      	cmp	r0, #1
 80043a0:	d002      	beq.n	80043a8 <StarLPTask+0x5e0>
				printf("semaphore 1b release failed\n");
 80043a2:	4897      	ldr	r0, [pc, #604]	; (8004600 <StarLPTask+0x838>)
 80043a4:	f022 f872 	bl	802648c <puts>
			onesectimer++;
 80043a8:	f10a 0301 	add.w	r3, sl, #1
				printf("sem wait 1c\n");
 80043ac:	4c95      	ldr	r4, [pc, #596]	; (8004604 <StarLPTask+0x83c>)
			onesectimer++;
 80043ae:	fa1f fa83 	uxth.w	sl, r3
			while (!(xSemaphoreTake(ssicontentHandle,
 80043b2:	e002      	b.n	80043ba <StarLPTask+0x5f2>
				printf("sem wait 1c\n");
 80043b4:	4620      	mov	r0, r4
 80043b6:	f022 f869 	bl	802648c <puts>
			while (!(xSemaphoreTake(ssicontentHandle,
 80043ba:	2119      	movs	r1, #25
 80043bc:	6828      	ldr	r0, [r5, #0]
 80043be:	f012 fded 	bl	8016f9c <xQueueSemaphoreTake>
 80043c2:	2801      	cmp	r0, #1
 80043c4:	d1f6      	bne.n	80043b4 <StarLPTask+0x5ec>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80043c6:	2300      	movs	r3, #0
 80043c8:	6828      	ldr	r0, [r5, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	f012 fb4b 	bl	8016a68 <xQueueGenericSend>
 80043d2:	2801      	cmp	r0, #1
 80043d4:	d002      	beq.n	80043dc <StarLPTask+0x614>
				printf("semaphore 1c release failed\n");
 80043d6:	488c      	ldr	r0, [pc, #560]	; (8004608 <StarLPTask+0x840>)
 80043d8:	f022 f858 	bl	802648c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 80043dc:	f7fe fbfe 	bl	8002bdc <lcd_trigplot>
 80043e0:	e621      	b.n	8004026 <StarLPTask+0x25e>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80043e2:	4c8a      	ldr	r4, [pc, #552]	; (800460c <StarLPTask+0x844>)
 80043e4:	8823      	ldrh	r3, [r4, #0]
 80043e6:	4553      	cmp	r3, sl
 80043e8:	4b89      	ldr	r3, [pc, #548]	; (8004610 <StarLPTask+0x848>)
 80043ea:	f43f ae0c 	beq.w	8004006 <StarLPTask+0x23e>
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	f47f ae08 	bne.w	8004006 <StarLPTask+0x23e>
				timeinfo = *localtime(&localepochtime);
 80043f6:	4887      	ldr	r0, [pc, #540]	; (8004614 <StarLPTask+0x84c>)
 80043f8:	f020 feae 	bl	8025158 <localtime>
 80043fc:	4d86      	ldr	r5, [pc, #536]	; (8004618 <StarLPTask+0x850>)
 80043fe:	4684      	mov	ip, r0
 8004400:	46ae      	mov	lr, r5
 8004402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800440a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800440e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004412:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8004416:	f8a4 a000 	strh.w	sl, [r4]
				timeinfo = *localtime(&localepochtime);
 800441a:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();		// display the clock on the LCD page 0
 800441e:	f7fe f91f 	bl	8002660 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8004422:	4b7e      	ldr	r3, [pc, #504]	; (800461c <StarLPTask+0x854>)
 8004424:	69ea      	ldr	r2, [r5, #28]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	f43f adf0 	beq.w	800400e <StarLPTask+0x246>
					lcd_date();
 800442e:	f7fe f981 	bl	8002734 <lcd_date>
 8004432:	e5ec      	b.n	800400e <StarLPTask+0x246>
				statuspkt.jabcnt++;
 8004434:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004438:	4879      	ldr	r0, [pc, #484]	; (8004620 <StarLPTask+0x858>)
				statuspkt.jabcnt++;
 800443a:	3201      	adds	r2, #1
 800443c:	b292      	uxth	r2, r2
 800443e:	f8a9 2086 	strh.w	r2, [r9, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8004442:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004444:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8004448:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <StarLPTask+0x85c>)
 800444c:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800444e:	f021 ff81 	bl	8026354 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8004452:	4b75      	ldr	r3, [pc, #468]	; (8004628 <StarLPTask+0x860>)
 8004454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004458:	b93b      	cbnz	r3, 800446a <StarLPTask+0x6a2>
					if (trigthresh < 4095)
 800445a:	4a64      	ldr	r2, [pc, #400]	; (80045ec <StarLPTask+0x824>)
 800445c:	f640 71fe 	movw	r1, #4094	; 0xffe
 8004460:	8813      	ldrh	r3, [r2, #0]
 8004462:	428b      	cmp	r3, r1
 8004464:	d801      	bhi.n	800446a <StarLPTask+0x6a2>
						trigthresh++;
 8004466:	3301      	adds	r3, #1
 8004468:	8013      	strh	r3, [r2, #0]
				if (agc) {
 800446a:	4b70      	ldr	r3, [pc, #448]	; (800462c <StarLPTask+0x864>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d16e      	bne.n	8004550 <StarLPTask+0x788>
				jabtrigcnt = statuspkt.trigcount;
 8004472:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004476:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8004478:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <StarLPTask+0x868>)
 800447a:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <StarLPTask+0x86c>)
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8004482:	2b05      	cmp	r3, #5
 8004484:	dd30      	ble.n	80044e8 <StarLPTask+0x720>
					if (trigthresh < 4095)
 8004486:	4859      	ldr	r0, [pc, #356]	; (80045ec <StarLPTask+0x824>)
 8004488:	f640 74fe 	movw	r4, #4094	; 0xffe
 800448c:	8803      	ldrh	r3, [r0, #0]
 800448e:	42a3      	cmp	r3, r4
 8004490:	d801      	bhi.n	8004496 <StarLPTask+0x6ce>
						trigthresh++;
 8004492:	3301      	adds	r3, #1
 8004494:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8004496:	2300      	movs	r3, #0
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	9306      	str	r3, [sp, #24]
 800449c:	e5ad      	b.n	8003ffa <StarLPTask+0x232>
			gainchanged = 0;
 800449e:	9306      	str	r3, [sp, #24]
 80044a0:	e5f8      	b.n	8004094 <StarLPTask+0x2cc>
				gpsbadcount = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	4a64      	ldr	r2, [pc, #400]	; (8004638 <StarLPTask+0x870>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e607      	b.n	80040ba <StarLPTask+0x2f2>
				lcd_gps();		// display the GPS on the LCD page 0
 80044aa:	f7fe f81d 	bl	80024e8 <lcd_gps>
 80044ae:	e5cd      	b.n	800404c <StarLPTask+0x284>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80044b0:	2308      	movs	r3, #8
 80044b2:	4a62      	ldr	r2, [pc, #392]	; (800463c <StarLPTask+0x874>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	4862      	ldr	r0, [pc, #392]	; (8004640 <StarLPTask+0x878>)
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80044be:	f005 fbf1 	bl	8009ca4 <HAL_DAC_Start_DMA>
 80044c2:	e675      	b.n	80041b0 <StarLPTask+0x3e8>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80044c4:	f008 fbc0 	bl	800cc48 <HAL_GPIO_WritePin>
 80044c8:	e6b0      	b.n	800422c <StarLPTask+0x464>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 80044ca:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8004658 <StarLPTask+0x890>
 80044ce:	4c4a      	ldr	r4, [pc, #296]	; (80045f8 <StarLPTask+0x830>)
 80044d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80044d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80044da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044dc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80044e0:	f844 0b04 	str.w	r0, [r4], #4
 80044e4:	8021      	strh	r1, [r4, #0]
 80044e6:	e754      	b.n	8004392 <StarLPTask+0x5ca>
				if (n == 0) {		// no triggers in last 100mS
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1d4      	bne.n	8004496 <StarLPTask+0x6ce>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80044ec:	483f      	ldr	r0, [pc, #252]	; (80045ec <StarLPTask+0x824>)
 80044ee:	8803      	ldrh	r3, [r0, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d9d0      	bls.n	8004496 <StarLPTask+0x6ce>
						trigthresh--;
 80044f4:	3b01      	subs	r3, #1
 80044f6:	8003      	strh	r3, [r0, #0]
 80044f8:	e7cd      	b.n	8004496 <StarLPTask+0x6ce>
				if (getpressure115() != HAL_OK) {
 80044fa:	f002 fa6b 	bl	80069d4 <getpressure115>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f43f ade6 	beq.w	80040d0 <StarLPTask+0x308>
					printf("MPL115A2 error\n\r");
 8004504:	484f      	ldr	r0, [pc, #316]	; (8004644 <StarLPTask+0x87c>)
 8004506:	f021 ff25 	bl	8026354 <iprintf>
 800450a:	e5e1      	b.n	80040d0 <StarLPTask+0x308>
				lcd_showvars();
 800450c:	f7fe f93a 	bl	8002784 <lcd_showvars>
 8004510:	e57d      	b.n	800400e <StarLPTask+0x246>
					gainchanged = bumppga(-1);
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	f002 fa17 	bl	8006948 <bumppga>
 800451a:	b203      	sxth	r3, r0
 800451c:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 800451e:	f8db 3000 	ldr.w	r3, [fp]
 8004522:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f77f adb4 	ble.w	8004094 <StarLPTask+0x2cc>
					if (trigthresh < (4095 - 10))
 800452c:	882b      	ldrh	r3, [r5, #0]
 800452e:	f640 72f4 	movw	r2, #4084	; 0xff4
 8004532:	4293      	cmp	r3, r2
 8004534:	f63f adae 	bhi.w	8004094 <StarLPTask+0x2cc>
						trigthresh += 5;
 8004538:	3305      	adds	r3, #5
 800453a:	802b      	strh	r3, [r5, #0]
 800453c:	e5aa      	b.n	8004094 <StarLPTask+0x2cc>
				if (getpressure3115() != HAL_OK) {
 800453e:	f002 faf7 	bl	8006b30 <getpressure3115>
 8004542:	2800      	cmp	r0, #0
 8004544:	f43f adc4 	beq.w	80040d0 <StarLPTask+0x308>
					printf("MPL3115A2 error\n\r");
 8004548:	483f      	ldr	r0, [pc, #252]	; (8004648 <StarLPTask+0x880>)
 800454a:	f021 ff03 	bl	8026354 <iprintf>
 800454e:	e5bf      	b.n	80040d0 <StarLPTask+0x308>
					gainchanged = bumppga(-1);	// decrease gain
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	f002 f9f8 	bl	8006948 <bumppga>
 8004558:	b203      	sxth	r3, r0
 800455a:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 800455c:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	e546      	b.n	8003ff2 <StarLPTask+0x22a>
						gainchanged = bumppga(1);
 8004564:	2001      	movs	r0, #1
 8004566:	f002 f9ef 	bl	8006948 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 800456a:	f8d8 3000 	ldr.w	r3, [r8]
 800456e:	2b0a      	cmp	r3, #10
 8004570:	d8cf      	bhi.n	8004512 <StarLPTask+0x74a>
						gainchanged = bumppga(1);
 8004572:	b203      	sxth	r3, r0
 8004574:	9306      	str	r3, [sp, #24]
 8004576:	e7d2      	b.n	800451e <StarLPTask+0x756>
					printf("GPS bad - rebooting...\n");
 8004578:	4834      	ldr	r0, [pc, #208]	; (800464c <StarLPTask+0x884>)
 800457a:	f021 ff87 	bl	802648c <puts>
					osDelay(3000);
 800457e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004582:	f011 ff47 	bl	8016414 <osDelay>
					rebootme(5);
 8004586:	2005      	movs	r0, #5
 8004588:	f7ff fbfc 	bl	8003d84 <rebootme>
			HAL_IWDG_Refresh(&hiwdg);
 800458c:	4c30      	ldr	r4, [pc, #192]	; (8004650 <StarLPTask+0x888>)
			osDelay(5000);
 800458e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004592:	f011 ff3f 	bl	8016414 <osDelay>
			HAL_IWDG_Refresh(&hiwdg);
 8004596:	4620      	mov	r0, r4
 8004598:	f009 f9da 	bl	800d950 <HAL_IWDG_Refresh>
		while (http_downloading) {
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f5      	bne.n	800458e <StarLPTask+0x7c6>
 80045a2:	e465      	b.n	8003e70 <StarLPTask+0xa8>
 80045a4:	4604      	mov	r4, r0
		printf("Console Rx Queue not created... rebooting...\n");
 80045a6:	482b      	ldr	r0, [pc, #172]	; (8004654 <StarLPTask+0x88c>)
 80045a8:	f021 ff70 	bl	802648c <puts>
		rebootme(0);
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7ff fbe9 	bl	8003d84 <rebootme>
 80045b2:	bf00      	nop
 80045b4:	20002ec0 	.word	0x20002ec0
 80045b8:	0802c148 	.word	0x0802c148
 80045bc:	20000070 	.word	0x20000070
 80045c0:	200033fc 	.word	0x200033fc
 80045c4:	200033f8 	.word	0x200033f8
 80045c8:	0802c150 	.word	0x0802c150
 80045cc:	2000024c 	.word	0x2000024c
 80045d0:	200033ec 	.word	0x200033ec
 80045d4:	200033f0 	.word	0x200033f0
 80045d8:	20000090 	.word	0x20000090
 80045dc:	20000760 	.word	0x20000760
 80045e0:	0802c158 	.word	0x0802c158
 80045e4:	20000144 	.word	0x20000144
 80045e8:	2000070c 	.word	0x2000070c
 80045ec:	20000002 	.word	0x20000002
 80045f0:	20000258 	.word	0x20000258
 80045f4:	20003460 	.word	0x20003460
 80045f8:	20000030 	.word	0x20000030
 80045fc:	0802c200 	.word	0x0802c200
 8004600:	0802c250 	.word	0x0802c250
 8004604:	0802c26c 	.word	0x0802c26c
 8004608:	0802c278 	.word	0x0802c278
 800460c:	20000010 	.word	0x20000010
 8004610:	20001a64 	.word	0x20001a64
 8004614:	20001b20 	.word	0x20001b20
 8004618:	20001f3c 	.word	0x20001f3c
 800461c:	20001a58 	.word	0x20001a58
 8004620:	0802c12c 	.word	0x0802c12c
 8004624:	20000714 	.word	0x20000714
 8004628:	200033e8 	.word	0x200033e8
 800462c:	2000002e 	.word	0x2000002e
 8004630:	20000768 	.word	0x20000768
 8004634:	20002db0 	.word	0x20002db0
 8004638:	20002168 	.word	0x20002168
 800463c:	0802c61c 	.word	0x0802c61c
 8004640:	20002268 	.word	0x20002268
 8004644:	0802c2c8 	.word	0x0802c2c8
 8004648:	0802c2dc 	.word	0x0802c2dc
 800464c:	0802c2b0 	.word	0x0802c2b0
 8004650:	20002660 	.word	0x20002660
 8004654:	0802c058 	.word	0x0802c058
 8004658:	0802c228 	.word	0x0802c228

0800465c <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 800465c:	2100      	movs	r1, #0
 800465e:	f005 bbbd 	b.w	8009ddc <HAL_DAC_Stop_DMA>
 8004662:	bf00      	nop

08004664 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8004664:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8004666:	6803      	ldr	r3, [r0, #0]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d021      	beq.n	80046b8 <HAL_TIM_IC_CaptureCallback+0x54>
}
 8004674:	bd38      	pop	{r3, r4, r5, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004676:	4c14      	ldr	r4, [pc, #80]	; (80046c8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_TIM_IC_CaptureCallback+0x68>)
 800467a:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <HAL_TIM_IC_CaptureCallback+0x6c>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800467e:	3101      	adds	r1, #1
 8004680:	4814      	ldr	r0, [pc, #80]	; (80046d4 <HAL_TIM_IC_CaptureCallback+0x70>)
		if (!(ledsenabled)) {
 8004682:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004684:	fba3 5301 	umull	r5, r3, r3, r1
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800468e:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8004692:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004696:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8004698:	480f      	ldr	r0, [pc, #60]	; (80046d8 <HAL_TIM_IC_CaptureCallback+0x74>)
		if (!(ledsenabled)) {
 800469a:	b152      	cbz	r2, 80046b2 <HAL_TIM_IC_CaptureCallback+0x4e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800469c:	f008 faee 	bl	800cc7c <HAL_GPIO_TogglePin>
		diff = lastcap;
 80046a0:	4d0e      	ldr	r5, [pc, #56]	; (80046dc <HAL_TIM_IC_CaptureCallback+0x78>)
		statuspkt.clktrim = movavg(diff);
 80046a2:	6828      	ldr	r0, [r5, #0]
 80046a4:	f001 f904 	bl	80058b0 <movavg>
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_TIM_IC_CaptureCallback+0x7c>)
		statuspkt.clktrim = movavg(diff);
 80046aa:	65a0      	str	r0, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	602b      	str	r3, [r5, #0]
}
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80046b2:	f008 fac9 	bl	800cc48 <HAL_GPIO_WritePin>
 80046b6:	e7f3      	b.n	80046a0 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 80046b8:	480a      	ldr	r0, [pc, #40]	; (80046e4 <HAL_TIM_IC_CaptureCallback+0x80>)
}
 80046ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Timer4 callback\n");
 80046be:	f021 bee5 	b.w	802648c <puts>
 80046c2:	bf00      	nop
 80046c4:	40000800 	.word	0x40000800
 80046c8:	2000300c 	.word	0x2000300c
 80046cc:	88888889 	.word	0x88888889
 80046d0:	2000028c 	.word	0x2000028c
 80046d4:	2000076c 	.word	0x2000076c
 80046d8:	40020c00 	.word	0x40020c00
 80046dc:	20002dac 	.word	0x20002dac
 80046e0:	20000784 	.word	0x20000784
 80046e4:	0802c36c 	.word	0x0802c36c

080046e8 <getboardpcb>:
void getboardpcb() {
 80046e8:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 80046ea:	2101      	movs	r1, #1
 80046ec:	4804      	ldr	r0, [pc, #16]	; (8004700 <getboardpcb+0x18>)
 80046ee:	f008 fa99 	bl	800cc24 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 80046f2:	2800      	cmp	r0, #0
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <getboardpcb+0x1c>)
 80046f6:	bf0c      	ite	eq
 80046f8:	2216      	moveq	r2, #22
 80046fa:	220b      	movne	r2, #11
 80046fc:	601a      	str	r2, [r3, #0]
}
 80046fe:	bd08      	pop	{r3, pc}
 8004700:	40020800 	.word	0x40020800
 8004704:	20002158 	.word	0x20002158

08004708 <uart2_rxdone>:
void uart2_rxdone() {
 8004708:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 800470a:	4807      	ldr	r0, [pc, #28]	; (8004728 <uart2_rxdone+0x20>)
 800470c:	2300      	movs	r3, #0
 800470e:	4907      	ldr	r1, [pc, #28]	; (800472c <uart2_rxdone+0x24>)
 8004710:	461a      	mov	r2, r3
 8004712:	6800      	ldr	r0, [r0, #0]
 8004714:	f012 faa8 	bl	8016c68 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8004718:	2201      	movs	r2, #1
 800471a:	4904      	ldr	r1, [pc, #16]	; (800472c <uart2_rxdone+0x24>)
 800471c:	4804      	ldr	r0, [pc, #16]	; (8004730 <uart2_rxdone+0x28>)
}
 800471e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8004722:	f00f bda1 	b.w	8014268 <HAL_UART_Receive_IT>
 8004726:	bf00      	nop
 8004728:	20002160 	.word	0x20002160
 800472c:	2000215c 	.word	0x2000215c
 8004730:	20002a0c 	.word	0x20002a0c

08004734 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004736:	6803      	ldr	r3, [r0, #0]
 8004738:	4293      	cmp	r3, r2
 800473a:	d029      	beq.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d02d      	beq.n	800479e <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d02c      	beq.n	80047a2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d030      	beq.n	80047b0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800474e:	4a22      	ldr	r2, [pc, #136]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d005      	beq.n	8004760 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01f      	beq.n	800479a <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 800475a:	4821      	ldr	r0, [pc, #132]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800475c:	f021 be96 	b.w	802648c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004760:	b510      	push	{r4, lr}
		t1sec++;
 8004762:	4920      	ldr	r1, [pc, #128]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8004764:	4c20      	ldr	r4, [pc, #128]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8004766:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004768:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 800476a:	4820      	ldr	r0, [pc, #128]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 800476c:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800476e:	3301      	adds	r3, #1
		if (netup)
 8004770:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8004772:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004774:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8004776:	b110      	cbz	r0, 800477e <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8004778:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800477a:	3301      	adds	r3, #1
 800477c:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b9c3      	cbnz	r3, 80047b6 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8004786:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8004788:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 800478a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 800478e:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	6013      	str	r3, [r2, #0]
		return;
 8004798:	4770      	bx	lr
		HAL_IncTick();
 800479a:	f004 bcc7 	b.w	800912c <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 800479e:	f7fc b875 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80047a2:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80047a6:	4816      	ldr	r0, [pc, #88]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80047a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	f021 bdd2 	b.w	8026354 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80047b0:	4814      	ldr	r0, [pc, #80]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80047b2:	f021 be6b 	b.w	802648c <puts>
			statuspkt.gpsuptime++;
 80047b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80047b8:	3301      	adds	r3, #1
 80047ba:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 80047bc:	f001 f8f0 	bl	80059a0 <calcepoch32>
				epochvalid = 1;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80047c2:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 80047c4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 80047c8:	701a      	strb	r2, [r3, #0]
}
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	40002000 	.word	0x40002000
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40001000 	.word	0x40001000
 80047dc:	40001800 	.word	0x40001800
 80047e0:	0802c40c 	.word	0x0802c40c
 80047e4:	20002de4 	.word	0x20002de4
 80047e8:	2000300c 	.word	0x2000300c
 80047ec:	20000762 	.word	0x20000762
 80047f0:	20003460 	.word	0x20003460
 80047f4:	20003458 	.word	0x20003458
 80047f8:	20002ddc 	.word	0x20002ddc
 80047fc:	20000784 	.word	0x20000784
 8004800:	0802c3cc 	.word	0x0802c3cc
 8004804:	0802c3f0 	.word	0x0802c3f0

08004808 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8004808:	4c02      	ldr	r4, [pc, #8]	; (8004814 <Error_Handler+0xc>)
void Error_Handler(void) {
 800480a:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 800480c:	4620      	mov	r0, r4
 800480e:	f021 fe3d 	bl	802648c <puts>
	while (1) {
 8004812:	e7fb      	b.n	800480c <Error_Handler+0x4>
 8004814:	0802c434 	.word	0x0802c434

08004818 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004818:	b530      	push	{r4, r5, lr}
 800481a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800481c:	2234      	movs	r2, #52	; 0x34
 800481e:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004820:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004822:	a807      	add	r0, sp, #28
 8004824:	f020 fdf8 	bl	8025418 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004828:	2300      	movs	r3, #0
 800482a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800482e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004832:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8004834:	f009 fe1c 	bl	800e470 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800483a:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800483c:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800483e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004840:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004844:	6411      	str	r1, [r2, #64]	; 0x40
 8004846:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004848:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800484c:	9200      	str	r2, [sp, #0]
 800484e:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004856:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8004858:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800485a:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800485c:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800485e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004862:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004864:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004866:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800486c:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800486e:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004872:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004878:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 800487a:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800487c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 800487e:	23d8      	movs	r3, #216	; 0xd8
 8004880:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8004884:	2306      	movs	r3, #6
 8004886:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004888:	f009 fe34 	bl	800e4f4 <HAL_RCC_OscConfig>
 800488c:	b9a0      	cbnz	r0, 80048b8 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800488e:	f009 fdf7 	bl	800e480 <HAL_PWREx_EnableOverDrive>
 8004892:	4603      	mov	r3, r0
 8004894:	b980      	cbnz	r0, 80048b8 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004896:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004898:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800489c:	a802      	add	r0, sp, #8
 800489e:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048a0:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048a8:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048ac:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80048ae:	f00a f8f7 	bl	800eaa0 <HAL_RCC_ClockConfig>
 80048b2:	b908      	cbnz	r0, 80048b8 <SystemClock_Config+0xa0>
}
 80048b4:	b015      	add	sp, #84	; 0x54
 80048b6:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80048b8:	f7ff ffa6 	bl	8004808 <Error_Handler>
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40007000 	.word	0x40007000

080048c4 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 80048c4:	b510      	push	{r4, lr}
 80048c6:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80048c8:	228c      	movs	r2, #140	; 0x8c
 80048ca:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80048cc:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80048ce:	a801      	add	r0, sp, #4
 80048d0:	f020 fda2 	bl	8025418 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80048d4:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80048d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80048da:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80048dc:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80048de:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80048e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80048e4:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048e6:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80048e8:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80048ea:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80048ec:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80048ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048f2:	f00a fa3b 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 80048f6:	b908      	cbnz	r0, 80048fc <PeriphCommonClock_Config+0x38>
}
 80048f8:	b024      	add	sp, #144	; 0x90
 80048fa:	bd10      	pop	{r4, pc}
		Error_Handler();
 80048fc:	f7ff ff84 	bl	8004808 <Error_Handler>

08004900 <main>:
int main(void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 8004904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004908:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800490c:	4bc2      	ldr	r3, [pc, #776]	; (8004c18 <main+0x318>)
 800490e:	2400      	movs	r4, #0
 8004910:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8004914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004918:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004922:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8004924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004928:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800492c:	4dbb      	ldr	r5, [pc, #748]	; (8004c1c <main+0x31c>)
	HAL_Init();
 800492e:	f004 fbeb 	bl	8009108 <HAL_Init>
	SystemClock_Config();
 8004932:	f7ff ff71 	bl	8004818 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004936:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 8004938:	f7ff ffc4 	bl	80048c4 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800493c:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800493e:	4622      	mov	r2, r4
 8004940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004944:	48b6      	ldr	r0, [pc, #728]	; (8004c20 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004946:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494a:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800494c:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 8004950:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004954:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8004958:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800495c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800495e:	f043 0310 	orr.w	r3, r3, #16
 8004962:	632b      	str	r3, [r5, #48]	; 0x30
 8004964:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800496e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	632b      	str	r3, [r5, #48]	; 0x30
 8004976:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004980:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004982:	f043 0320 	orr.w	r3, r3, #32
 8004986:	632b      	str	r3, [r5, #48]	; 0x30
 8004988:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	9305      	str	r3, [sp, #20]
 8004990:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004992:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004998:	632b      	str	r3, [r5, #48]	; 0x30
 800499a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	9306      	str	r3, [sp, #24]
 80049a2:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80049a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	632b      	str	r3, [r5, #48]	; 0x30
 80049ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	9307      	str	r3, [sp, #28]
 80049b4:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	632b      	str	r3, [r5, #48]	; 0x30
 80049be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	9308      	str	r3, [sp, #32]
 80049c6:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80049c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ce:	632b      	str	r3, [r5, #48]	; 0x30
 80049d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80049da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	632b      	str	r3, [r5, #48]	; 0x30
 80049e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	930a      	str	r3, [sp, #40]	; 0x28
 80049ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80049ec:	f008 f92c 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80049f0:	4622      	mov	r2, r4
 80049f2:	f644 0181 	movw	r1, #18561	; 0x4881
 80049f6:	488b      	ldr	r0, [pc, #556]	; (8004c24 <main+0x324>)
 80049f8:	f008 f926 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 80049fc:	4622      	mov	r2, r4
 80049fe:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8004a02:	4889      	ldr	r0, [pc, #548]	; (8004c28 <main+0x328>)
 8004a04:	f008 f920 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8004a08:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8004a0c:	4887      	ldr	r0, [pc, #540]	; (8004c2c <main+0x32c>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f008 f91a 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004a14:	4622      	mov	r2, r4
 8004a16:	2144      	movs	r1, #68	; 0x44
 8004a18:	4885      	ldr	r0, [pc, #532]	; (8004c30 <main+0x330>)
 8004a1a:	f008 f915 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8004a1e:	4622      	mov	r2, r4
 8004a20:	2102      	movs	r1, #2
 8004a22:	4882      	ldr	r0, [pc, #520]	; (8004c2c <main+0x32c>)
 8004a24:	f008 f910 	bl	800cc48 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004a28:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a2c:	a955      	add	r1, sp, #340	; 0x154
 8004a2e:	487e      	ldr	r0, [pc, #504]	; (8004c28 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004a30:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a32:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a36:	f007 fe5b 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a3e:	a955      	add	r1, sp, #340	; 0x154
 8004a40:	487c      	ldr	r0, [pc, #496]	; (8004c34 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004a42:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a44:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a48:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a4a:	f007 fe51 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a4e:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a52:	a955      	add	r1, sp, #340	; 0x154
 8004a54:	4872      	ldr	r0, [pc, #456]	; (8004c20 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a56:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a5c:	f007 fe48 	bl	800c6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a60:	a955      	add	r1, sp, #340	; 0x154
 8004a62:	486f      	ldr	r0, [pc, #444]	; (8004c20 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8004a64:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a68:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a6c:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a70:	f007 fe3e 	bl	800c6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a74:	a955      	add	r1, sp, #340	; 0x154
 8004a76:	486f      	ldr	r0, [pc, #444]	; (8004c34 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a78:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7a:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7e:	f007 fe37 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a82:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a84:	a955      	add	r1, sp, #340	; 0x154
 8004a86:	486c      	ldr	r0, [pc, #432]	; (8004c38 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a88:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	f007 fe2f 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a92:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a96:	a955      	add	r1, sp, #340	; 0x154
 8004a98:	4862      	ldr	r0, [pc, #392]	; (8004c24 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a9a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9c:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa2:	f007 fe25 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004aa6:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa8:	a955      	add	r1, sp, #340	; 0x154
 8004aaa:	485e      	ldr	r0, [pc, #376]	; (8004c24 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004aac:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab2:	f007 fe1d 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004ab6:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004aba:	a955      	add	r1, sp, #340	; 0x154
 8004abc:	485c      	ldr	r0, [pc, #368]	; (8004c30 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004abe:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ac4:	f007 fe14 	bl	800c6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac8:	a955      	add	r1, sp, #340	; 0x154
 8004aca:	4857      	ldr	r0, [pc, #348]	; (8004c28 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ace:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ad2:	f007 fe0d 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004ad6:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ada:	a955      	add	r1, sp, #340	; 0x154
 8004adc:	4852      	ldr	r0, [pc, #328]	; (8004c28 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004ade:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004ae0:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae4:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004ae6:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aee:	f007 fdff 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004af2:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004af6:	a955      	add	r1, sp, #340	; 0x154
 8004af8:	484c      	ldr	r0, [pc, #304]	; (8004c2c <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004afa:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b00:	f007 fdf6 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004b04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b08:	a955      	add	r1, sp, #340	; 0x154
 8004b0a:	4848      	ldr	r0, [pc, #288]	; (8004c2c <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004b0c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b14:	f007 fdec 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004b18:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b1a:	a955      	add	r1, sp, #340	; 0x154
 8004b1c:	4844      	ldr	r0, [pc, #272]	; (8004c30 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004b1e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b20:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b26:	f007 fde3 	bl	800c6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004b2a:	a955      	add	r1, sp, #340	; 0x154
 8004b2c:	4840      	ldr	r0, [pc, #256]	; (8004c30 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004b2e:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004b36:	f007 fddb 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3e:	a955      	add	r1, sp, #340	; 0x154
 8004b40:	483c      	ldr	r0, [pc, #240]	; (8004c34 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004b42:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b48:	f007 fdd2 	bl	800c6f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b50:	a955      	add	r1, sp, #340	; 0x154
 8004b52:	4839      	ldr	r0, [pc, #228]	; (8004c38 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b54:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b56:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004b58:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b60:	f007 fdc6 	bl	800c6f0 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b64:	a955      	add	r1, sp, #340	; 0x154
 8004b66:	4831      	ldr	r0, [pc, #196]	; (8004c2c <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b68:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b6c:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b70:	f007 fdbe 	bl	800c6f0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b76:	4639      	mov	r1, r7
 8004b78:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b7e:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b80:	632b      	str	r3, [r5, #48]	; 0x30
 8004b82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b92:	632b      	str	r3, [r5, #48]	; 0x30
 8004b94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8004b96:	4d29      	ldr	r5, [pc, #164]	; (8004c3c <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9c:	9302      	str	r3, [sp, #8]
 8004b9e:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004ba0:	f004 ff28 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ba4:	200b      	movs	r0, #11
 8004ba6:	f004 ff6f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8004baa:	4622      	mov	r2, r4
 8004bac:	2106      	movs	r1, #6
 8004bae:	4650      	mov	r0, sl
 8004bb0:	f004 ff20 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	f004 ff67 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8004bba:	4622      	mov	r2, r4
 8004bbc:	2106      	movs	r1, #6
 8004bbe:	2010      	movs	r0, #16
 8004bc0:	f004 ff18 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004bc4:	2010      	movs	r0, #16
 8004bc6:	f004 ff5f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8004bca:	4622      	mov	r2, r4
 8004bcc:	4639      	mov	r1, r7
 8004bce:	2011      	movs	r0, #17
 8004bd0:	f004 ff10 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004bd4:	2011      	movs	r0, #17
 8004bd6:	f004 ff57 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8004bda:	4622      	mov	r2, r4
 8004bdc:	4639      	mov	r1, r7
 8004bde:	202f      	movs	r0, #47	; 0x2f
 8004be0:	f004 ff08 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004be4:	202f      	movs	r0, #47	; 0x2f
 8004be6:	f004 ff4f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8004bea:	4622      	mov	r2, r4
 8004bec:	2106      	movs	r1, #6
 8004bee:	2039      	movs	r0, #57	; 0x39
 8004bf0:	f004 ff00 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004bf4:	2039      	movs	r0, #57	; 0x39
 8004bf6:	f004 ff47 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	203c      	movs	r0, #60	; 0x3c
 8004c00:	f004 fef8 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004c04:	203c      	movs	r0, #60	; 0x3c
 8004c06:	f004 ff3f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	2045      	movs	r0, #69	; 0x45
 8004c10:	f004 fef0 	bl	80099f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004c14:	2045      	movs	r0, #69	; 0x45
 8004c16:	e013      	b.n	8004c40 <main+0x340>
 8004c18:	e000ed00 	.word	0xe000ed00
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	40021400 	.word	0x40021400
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021800 	.word	0x40021800
 8004c34:	40020800 	.word	0x40020800
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40004400 	.word	0x40004400
 8004c40:	f004 ff22 	bl	8009a88 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004c44:	48bd      	ldr	r0, [pc, #756]	; (8004f3c <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8004c46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004c4e:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004c52:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004c54:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c58:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004c5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c5e:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c62:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c66:	f00f fba1 	bl	80143ac <HAL_RS485Ex_Init>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	f040 8446 	bne.w	80054fc <main+0xbfc>
	hadc1.Instance = ADC1;
 8004c70:	4cb3      	ldr	r4, [pc, #716]	; (8004f40 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c72:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004c76:	4bb3      	ldr	r3, [pc, #716]	; (8004f44 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c78:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c7a:	9045      	str	r0, [sp, #276]	; 0x114
 8004c7c:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c7e:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c80:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c82:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c86:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c88:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c8a:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004c8c:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8004c8e:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c90:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c94:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c98:	4bab      	ldr	r3, [pc, #684]	; (8004f48 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c9a:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c9e:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004ca2:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ca4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004ca6:	f004 fa65 	bl	8009174 <HAL_ADC_Init>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	f040 8426 	bne.w	80054fc <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8004cb4:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cb6:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004cb8:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cba:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f004 fe18 	bl	80098f4 <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f040 8419 	bne.w	80054fc <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004cca:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004ccc:	a945      	add	r1, sp, #276	; 0x114
 8004cce:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd0:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004cd4:	f004 fd1a 	bl	800970c <HAL_ADC_ConfigChannel>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f040 840f 	bne.w	80054fc <main+0xbfc>
	hadc2.Instance = ADC2;
 8004cde:	4c9b      	ldr	r4, [pc, #620]	; (8004f4c <main+0x64c>)
 8004ce0:	4b9b      	ldr	r3, [pc, #620]	; (8004f50 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ce2:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ce4:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ce8:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004cea:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004cee:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004cf0:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004cf2:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004cf4:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004cf6:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8004cfa:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004cfe:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004d02:	4620      	mov	r0, r4
 8004d04:	f004 fa36 	bl	8009174 <HAL_ADC_Init>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f040 83f7 	bne.w	80054fc <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d0e:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004d10:	a941      	add	r1, sp, #260	; 0x104
 8004d12:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d14:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004d18:	f004 fcf8 	bl	800970c <HAL_ADC_ConfigChannel>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 83ed 	bne.w	80054fc <main+0xbfc>
	hadc3.Instance = ADC3;
 8004d22:	4c8c      	ldr	r4, [pc, #560]	; (8004f54 <main+0x654>)
 8004d24:	4b8c      	ldr	r3, [pc, #560]	; (8004f58 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004d26:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004d28:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d2c:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004d2e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004d32:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004d34:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8004d36:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8004d38:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004d3a:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004d3e:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004d42:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8004d46:	4620      	mov	r0, r4
 8004d48:	f004 fa14 	bl	8009174 <HAL_ADC_Init>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f040 83d5 	bne.w	80054fc <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d52:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d54:	a93d      	add	r1, sp, #244	; 0xf4
 8004d56:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d58:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d5c:	f004 fcd6 	bl	800970c <HAL_ADC_ConfigChannel>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	f040 83cb 	bne.w	80054fc <main+0xbfc>
	hrng.Instance = RNG;
 8004d66:	487d      	ldr	r0, [pc, #500]	; (8004f5c <main+0x65c>)
 8004d68:	4b7d      	ldr	r3, [pc, #500]	; (8004f60 <main+0x660>)
 8004d6a:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004d6c:	f00a fcde 	bl	800f72c <HAL_RNG_Init>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f040 83c3 	bne.w	80054fc <main+0xbfc>
	htim6.Instance = TIM6;
 8004d76:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8004d78:	f642 2230 	movw	r2, #10800	; 0x2a30
 8004d7c:	497a      	ldr	r1, [pc, #488]	; (8004f68 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d7e:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d80:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d82:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8004d86:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8004d8a:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d8e:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d92:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8004d94:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d96:	f00c fab9 	bl	801130c <HAL_TIM_Base_Init>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f040 83ae 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004da0:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004da2:	a91f      	add	r1, sp, #124	; 0x7c
 8004da4:	486f      	ldr	r0, [pc, #444]	; (8004f64 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004da6:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004dac:	f00d ff18 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f040 83a3 	bne.w	80054fc <main+0xbfc>
	htim3.Instance = TIM3;
 8004db6:	4c6d      	ldr	r4, [pc, #436]	; (8004f6c <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8004db8:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004dbc:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8004f90 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dc0:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dc2:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004dc4:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dc6:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc8:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dca:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004dcc:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dce:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8004dd0:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8004dd4:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004dd8:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004ddc:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004de0:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004de4:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004de8:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004dec:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004dee:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004df0:	f00c fa8c 	bl	801130c <HAL_TIM_Base_Init>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	f040 8381 	bne.w	80054fc <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004dfe:	a939      	add	r1, sp, #228	; 0xe4
 8004e00:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e02:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004e04:	f00b fd18 	bl	8010838 <HAL_TIM_ConfigClockSource>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	f040 8377 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f00c fc18 	bl	8011644 <HAL_TIM_PWM_Init>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f040 8371 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e1a:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004e1c:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1e:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004e20:	4620      	mov	r0, r4
 8004e22:	f00d fedd 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f040 8368 	bne.w	80054fc <main+0xbfc>
	sConfigOC.Pulse = 10;
 8004e2c:	230a      	movs	r3, #10
 8004e2e:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e32:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e34:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e36:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e38:	a955      	add	r1, sp, #340	; 0x154
 8004e3a:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004e3c:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e40:	f00c ff7e 	bl	8011d40 <HAL_TIM_PWM_ConfigChannel>
 8004e44:	4605      	mov	r5, r0
 8004e46:	2800      	cmp	r0, #0
 8004e48:	f040 8358 	bne.w	80054fc <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8004e4c:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004e4e:	4c48      	ldr	r4, [pc, #288]	; (8004f70 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004e50:	f002 fd64 	bl	800791c <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004e54:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e56:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e58:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8004e5a:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004e5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e60:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004e62:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e68:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e6c:	f00c fa4e 	bl	801130c <HAL_TIM_Base_Init>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f040 8343 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e76:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e78:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e7a:	a919      	add	r1, sp, #100	; 0x64
 8004e7c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e7e:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e80:	f00d feae 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f040 8339 	bne.w	80054fc <main+0xbfc>
	htim1.Instance = TIM1;
 8004e8a:	4c3b      	ldr	r4, [pc, #236]	; (8004f78 <main+0x678>)
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8e:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8004e90:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8004e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e96:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8004e98:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e9a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8004e9e:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea2:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8004ea6:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004eaa:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f00c fa2c 	bl	801130c <HAL_TIM_Base_Init>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f040 8321 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004eba:	a935      	add	r1, sp, #212	; 0xd4
 8004ebc:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ebe:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004ec0:	f00b fcba 	bl	8010838 <HAL_TIM_ConfigClockSource>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f040 8319 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eca:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004ecc:	a916      	add	r1, sp, #88	; 0x58
 8004ece:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ed0:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ed2:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004ed6:	f00d fe83 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f040 830d 	bne.w	80054fc <main+0xbfc>
	hcrc.Instance = CRC;
 8004ee2:	4827      	ldr	r0, [pc, #156]	; (8004f80 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ee4:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004ee6:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ee8:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004eea:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <main+0x684>)
 8004ef0:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004ef2:	f004 fdf7 	bl	8009ae4 <HAL_CRC_Init>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 8300 	bne.w	80054fc <main+0xbfc>
	htim2.Instance = TIM2;
 8004efc:	4c22      	ldr	r4, [pc, #136]	; (8004f88 <main+0x688>)
 8004efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f02:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f04:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8004f06:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f0a:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f0c:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f0e:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f10:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f12:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f14:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004f16:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8004f18:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f1a:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f1e:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004f22:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f26:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2a:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004f2e:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004f32:	4620      	mov	r0, r4
 8004f34:	f00c f9ea 	bl	801130c <HAL_TIM_Base_Init>
 8004f38:	e02c      	b.n	8004f94 <main+0x694>
 8004f3a:	bf00      	nop
 8004f3c:	20002a0c 	.word	0x20002a0c
 8004f40:	2000216c 	.word	0x2000216c
 8004f44:	40012000 	.word	0x40012000
 8004f48:	0f000001 	.word	0x0f000001
 8004f4c:	200021b4 	.word	0x200021b4
 8004f50:	40012100 	.word	0x40012100
 8004f54:	200021fc 	.word	0x200021fc
 8004f58:	40012200 	.word	0x40012200
 8004f5c:	20002670 	.word	0x20002670
 8004f60:	50060800 	.word	0x50060800
 8004f64:	20002974 	.word	0x20002974
 8004f68:	40001000 	.word	0x40001000
 8004f6c:	20002890 	.word	0x20002890
 8004f70:	200029c0 	.word	0x200029c0
 8004f74:	40001400 	.word	0x40001400
 8004f78:	200027ac 	.word	0x200027ac
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	20002244 	.word	0x20002244
 8004f84:	40023000 	.word	0x40023000
 8004f88:	20002844 	.word	0x20002844
 8004f8c:	ee6b2800 	.word	0xee6b2800
 8004f90:	40000400 	.word	0x40000400
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f040 82b1 	bne.w	80054fc <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004f9e:	a92d      	add	r1, sp, #180	; 0xb4
 8004fa0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fa2:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004fa4:	f00b fc48 	bl	8010838 <HAL_TIM_ConfigClockSource>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 82a7 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f00c fc16 	bl	80117e0 <HAL_TIM_IC_Init>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f040 82a1 	bne.w	80054fc <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004fba:	2704      	movs	r7, #4
 8004fbc:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004fbe:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fc0:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8004fc2:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fc4:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004fc6:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fca:	f00b ff0f 	bl	8010dec <HAL_TIM_SlaveConfigSynchro>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f040 8294 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd4:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004fd6:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd8:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f00d fe00 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f040 828a 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004fe8:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004fea:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004fee:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f00d f8c4 	bl	8012180 <HAL_TIM_IC_ConfigChannel>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	f040 827f 	bne.w	80054fc <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004ffe:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8005000:	463a      	mov	r2, r7
 8005002:	a931      	add	r1, sp, #196	; 0xc4
 8005004:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005006:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8005008:	f00d f8ba 	bl	8012180 <HAL_TIM_IC_ConfigChannel>
 800500c:	2800      	cmp	r0, #0
 800500e:	f040 8275 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8005012:	a931      	add	r1, sp, #196	; 0xc4
 8005014:	4620      	mov	r0, r4
 8005016:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005018:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800501a:	f00d f8b1 	bl	8012180 <HAL_TIM_IC_ConfigChannel>
 800501e:	2800      	cmp	r0, #0
 8005020:	f040 826c 	bne.w	80054fc <main+0xbfc>
	huart6.Instance = USART6;
 8005024:	48c1      	ldr	r0, [pc, #772]	; (800532c <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005026:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8005028:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 800502c:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 800502e:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005030:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8005032:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8005034:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005038:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 800503c:	4bbc      	ldr	r3, [pc, #752]	; (8005330 <main+0xa30>)
 800503e:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005042:	2310      	movs	r3, #16
 8005044:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800504a:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800504c:	f00e ff96 	bl	8013f7c <HAL_UART_Init>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 8253 	bne.w	80054fc <main+0xbfc>
	hdac.Instance = DAC;
 8005056:	4cb7      	ldr	r4, [pc, #732]	; (8005334 <main+0xa34>)
 8005058:	4bb7      	ldr	r3, [pc, #732]	; (8005338 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 800505a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800505e:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8005060:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8005062:	f004 fdfb 	bl	8009c5c <HAL_DAC_Init>
 8005066:	4602      	mov	r2, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	f040 8247 	bne.w	80054fc <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800506e:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8005070:	4620      	mov	r0, r4
 8005072:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005074:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8005076:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8005078:	f004 ff4c 	bl	8009f14 <HAL_DAC_ConfigChannel>
 800507c:	4607      	mov	r7, r0
 800507e:	2800      	cmp	r0, #0
 8005080:	f040 823c 	bne.w	80054fc <main+0xbfc>
	MX_FATFS_Init();
 8005084:	f00f ffee 	bl	8015064 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8005088:	4cac      	ldr	r4, [pc, #688]	; (800533c <main+0xa3c>)
 800508a:	4bad      	ldr	r3, [pc, #692]	; (8005340 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800508c:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 800508e:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 8005090:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 8005092:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005096:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8005098:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 800509c:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800509e:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 80050a0:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050a4:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050a8:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80050aa:	f008 f801 	bl	800d0b0 <HAL_I2C_Init>
 80050ae:	4601      	mov	r1, r0
 80050b0:	2800      	cmp	r0, #0
 80050b2:	f040 8223 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80050b6:	4620      	mov	r0, r4
 80050b8:	f008 fb52 	bl	800d760 <HAL_I2CEx_ConfigAnalogFilter>
 80050bc:	4601      	mov	r1, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	f040 821c 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80050c4:	4620      	mov	r0, r4
 80050c6:	f008 fb9d 	bl	800d804 <HAL_I2CEx_ConfigDigitalFilter>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f040 8215 	bne.w	80054fc <main+0xbfc>
	huart4.Instance = UART4;
 80050d2:	489c      	ldr	r0, [pc, #624]	; (8005344 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 80050d4:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80050d8:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050dc:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80050de:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80050e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80050e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050e8:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 80050ec:	4b96      	ldr	r3, [pc, #600]	; (8005348 <main+0xa48>)
 80050ee:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80050f2:	f00e ff43 	bl	8013f7c <HAL_UART_Init>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f040 81ff 	bne.w	80054fc <main+0xbfc>
	huart5.Instance = UART5;
 80050fe:	4893      	ldr	r0, [pc, #588]	; (800534c <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005100:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8005104:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005108:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800510c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005110:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8005112:	4b8f      	ldr	r3, [pc, #572]	; (8005350 <main+0xa50>)
 8005114:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8005116:	f00e ff31 	bl	8013f7c <HAL_UART_Init>
 800511a:	4602      	mov	r2, r0
 800511c:	2800      	cmp	r0, #0
 800511e:	f040 81ed 	bne.w	80054fc <main+0xbfc>
	huart3.Instance = USART3;
 8005122:	488c      	ldr	r0, [pc, #560]	; (8005354 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8005124:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8005126:	4b8c      	ldr	r3, [pc, #560]	; (8005358 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8005128:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 800512a:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800512c:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800512e:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005130:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005134:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005138:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800513c:	f00e ffcc 	bl	80140d8 <HAL_MultiProcessor_Init>
 8005140:	4603      	mov	r3, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	f040 81da 	bne.w	80054fc <main+0xbfc>
	hspi4.Instance = SPI4;
 8005148:	4884      	ldr	r0, [pc, #528]	; (800535c <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800514a:	4a85      	ldr	r2, [pc, #532]	; (8005360 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800514c:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800514e:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005152:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005156:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800515e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005162:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005166:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800516a:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 800516c:	2307      	movs	r3, #7
 800516e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005170:	2308      	movs	r3, #8
 8005172:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8005174:	f00a fc10 	bl	800f998 <HAL_SPI_Init>
 8005178:	2800      	cmp	r0, #0
 800517a:	f040 81bf 	bne.w	80054fc <main+0xbfc>
	hspi3.Instance = SPI3;
 800517e:	4879      	ldr	r0, [pc, #484]	; (8005364 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8005180:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8005182:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005186:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005188:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 800518a:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800518c:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 800518e:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005190:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005194:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005198:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800519c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 80051a0:	4b71      	ldr	r3, [pc, #452]	; (8005368 <main+0xa68>)
 80051a2:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80051a4:	f00a fbf8 	bl	800f998 <HAL_SPI_Init>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f040 81a6 	bne.w	80054fc <main+0xbfc>
	hspi2.Instance = SPI2;
 80051b0:	486e      	ldr	r0, [pc, #440]	; (800536c <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80051b2:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800539c <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80051b6:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b8:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051ba:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80051bc:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 80051be:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80051c4:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80051c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80051cc:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80051d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80051d4:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80051d6:	2338      	movs	r3, #56	; 0x38
 80051d8:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051da:	2308      	movs	r3, #8
 80051dc:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80051de:	f00a fbdb 	bl	800f998 <HAL_SPI_Init>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f040 818a 	bne.w	80054fc <main+0xbfc>
	hi2c4.Instance = I2C4;
 80051e8:	4c61      	ldr	r4, [pc, #388]	; (8005370 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051ea:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 80051ec:	4b61      	ldr	r3, [pc, #388]	; (8005374 <main+0xa74>)
 80051ee:	4f62      	ldr	r7, [pc, #392]	; (8005378 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 80051f0:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051f2:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051f4:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 80051f6:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051fa:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80051fe:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8005200:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8005204:	f007 ff54 	bl	800d0b0 <HAL_I2C_Init>
 8005208:	4601      	mov	r1, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	f040 8176 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8005210:	4620      	mov	r0, r4
 8005212:	f008 faa5 	bl	800d760 <HAL_I2CEx_ConfigAnalogFilter>
 8005216:	4601      	mov	r1, r0
 8005218:	2800      	cmp	r0, #0
 800521a:	f040 816f 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 800521e:	4620      	mov	r0, r4
 8005220:	f008 faf0 	bl	800d804 <HAL_I2CEx_ConfigDigitalFilter>
 8005224:	2800      	cmp	r0, #0
 8005226:	f040 8169 	bne.w	80054fc <main+0xbfc>
	hi2c2.Instance = I2C2;
 800522a:	4c54      	ldr	r4, [pc, #336]	; (800537c <main+0xa7c>)
 800522c:	4b54      	ldr	r3, [pc, #336]	; (8005380 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800522e:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8005230:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8005232:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8005234:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8005238:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800523c:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8005240:	4620      	mov	r0, r4
 8005242:	f007 ff35 	bl	800d0b0 <HAL_I2C_Init>
 8005246:	4601      	mov	r1, r0
 8005248:	2800      	cmp	r0, #0
 800524a:	f040 8157 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800524e:	4620      	mov	r0, r4
 8005250:	f008 fa86 	bl	800d760 <HAL_I2CEx_ConfigAnalogFilter>
 8005254:	4601      	mov	r1, r0
 8005256:	2800      	cmp	r0, #0
 8005258:	f040 8150 	bne.w	80054fc <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800525c:	4620      	mov	r0, r4
 800525e:	f008 fad1 	bl	800d804 <HAL_I2CEx_ConfigDigitalFilter>
 8005262:	2800      	cmp	r0, #0
 8005264:	f040 814a 	bne.w	80054fc <main+0xbfc>
	htim4.Instance = TIM4;
 8005268:	4c46      	ldr	r4, [pc, #280]	; (8005384 <main+0xa84>)
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800526c:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 800526e:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8005270:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005274:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8005276:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005278:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800527a:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800527c:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800527e:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005280:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005282:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005286:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 800528a:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 800528e:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005292:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005296:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800529a:	4620      	mov	r0, r4
 800529c:	f00c f836 	bl	801130c <HAL_TIM_Base_Init>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f040 812b 	bne.w	80054fc <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80052aa:	a929      	add	r1, sp, #164	; 0xa4
 80052ac:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ae:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80052b0:	f00b fac2 	bl	8010838 <HAL_TIM_ConfigClockSource>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f040 8121 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80052ba:	4620      	mov	r0, r4
 80052bc:	f00c f8f4 	bl	80114a8 <HAL_TIM_OC_Init>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f040 811b 	bne.w	80054fc <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80052c6:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c8:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80052ca:	a910      	add	r1, sp, #64	; 0x40
 80052cc:	482d      	ldr	r0, [pc, #180]	; (8005384 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80052ce:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80052d0:	f00d fc86 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f040 8111 	bne.w	80054fc <main+0xbfc>
	sConfigOC.Pulse = 550;
 80052da:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052de:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052e0:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80052e2:	2208      	movs	r2, #8
 80052e4:	a94e      	add	r1, sp, #312	; 0x138
 80052e6:	4827      	ldr	r0, [pc, #156]	; (8005384 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80052e8:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 80052ea:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80052ec:	f00c fbaa 	bl	8011a44 <HAL_TIM_OC_ConfigChannel>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	f040 8103 	bne.w	80054fc <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 80052f6:	4823      	ldr	r0, [pc, #140]	; (8005384 <main+0xa84>)
 80052f8:	f002 fb10 	bl	800791c <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 80052fc:	4823      	ldr	r0, [pc, #140]	; (800538c <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 80052fe:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005302:	4f23      	ldr	r7, [pc, #140]	; (8005390 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8005304:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005308:	2306      	movs	r3, #6
 800530a:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 800530e:	f008 fac9 	bl	800d8a4 <HAL_IWDG_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2800      	cmp	r0, #0
 8005316:	f040 80f1 	bne.w	80054fc <main+0xbfc>
	htim14.Instance = TIM14;
 800531a:	481e      	ldr	r0, [pc, #120]	; (8005394 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800531c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005320:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <main+0xa98>)
 8005324:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8005326:	f642 2330 	movw	r3, #10800	; 0x2a30
 800532a:	e039      	b.n	80053a0 <main+0xaa0>
 800532c:	20002c1c 	.word	0x20002c1c
 8005330:	40011400 	.word	0x40011400
 8005334:	20002268 	.word	0x20002268
 8005338:	40007400 	.word	0x40007400
 800533c:	2000257c 	.word	0x2000257c
 8005340:	40005400 	.word	0x40005400
 8005344:	20002b14 	.word	0x20002b14
 8005348:	40004c00 	.word	0x40004c00
 800534c:	20002b98 	.word	0x20002b98
 8005350:	40005000 	.word	0x40005000
 8005354:	20002a90 	.word	0x20002a90
 8005358:	40004800 	.word	0x40004800
 800535c:	20002748 	.word	0x20002748
 8005360:	40013400 	.word	0x40013400
 8005364:	200026e4 	.word	0x200026e4
 8005368:	40003c00 	.word	0x40003c00
 800536c:	20002680 	.word	0x20002680
 8005370:	20002614 	.word	0x20002614
 8005374:	40006000 	.word	0x40006000
 8005378:	20404768 	.word	0x20404768
 800537c:	200025c8 	.word	0x200025c8
 8005380:	40005800 	.word	0x40005800
 8005384:	200028dc 	.word	0x200028dc
 8005388:	40000800 	.word	0x40000800
 800538c:	20002660 	.word	0x20002660
 8005390:	40003000 	.word	0x40003000
 8005394:	200027f8 	.word	0x200027f8
 8005398:	40002000 	.word	0x40002000
 800539c:	40003800 	.word	0x40003800
 80053a0:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80053a6:	f00b ffb1 	bl	801130c <HAL_TIM_Base_Init>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f040 80a6 	bne.w	80054fc <main+0xbfc>
	htim5.Instance = TIM5;
 80053b0:	4f53      	ldr	r7, [pc, #332]	; (8005500 <main+0xc00>)
	htim5.Init.Period = 4;
 80053b2:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 80053b4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005534 <main+0xc34>
	htim5.Init.Period = 4;
 80053b8:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 80053bc:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053be:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c0:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80053c2:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 80053c4:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80053c8:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 80053cc:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80053d0:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80053d4:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 80053d6:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80053da:	f00b ff97 	bl	801130c <HAL_TIM_Base_Init>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f040 808c 	bne.w	80054fc <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053e8:	a925      	add	r1, sp, #148	; 0x94
 80053ea:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ec:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053ee:	f00b fa23 	bl	8010838 <HAL_TIM_ConfigClockSource>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 8081 	bne.w	80054fc <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80053fa:	4638      	mov	r0, r7
 80053fc:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fe:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005400:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8005402:	f00d fbed 	bl	8012be0 <HAL_TIMEx_MasterConfigSynchronization>
 8005406:	4603      	mov	r3, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d177      	bne.n	80054fc <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 800540c:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8005410:	483c      	ldr	r0, [pc, #240]	; (8005504 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005412:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8005416:	493c      	ldr	r1, [pc, #240]	; (8005508 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005418:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 800541c:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 800541e:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005422:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8005424:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8005428:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800542c:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8005430:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005434:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8005438:	f00e fda0 	bl	8013f7c <HAL_UART_Init>
 800543c:	4603      	mov	r3, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d15c      	bne.n	80054fc <main+0xbfc>
	huart7.Instance = UART7;
 8005442:	4832      	ldr	r0, [pc, #200]	; (800550c <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8005444:	4a32      	ldr	r2, [pc, #200]	; (8005510 <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8005446:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005448:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800544a:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800544c:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 800544e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005452:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8005456:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800545a:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800545e:	230c      	movs	r3, #12
 8005460:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8005462:	f00e fd8b 	bl	8013f7c <HAL_UART_Init>
 8005466:	2800      	cmp	r0, #0
 8005468:	d148      	bne.n	80054fc <main+0xbfc>
	osMutexDef(myMutex01);
 800546a:	2600      	movs	r6, #0
	MX_NVIC_Init();
 800546c:	f7fe fb90 	bl	8003b90 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005470:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8005472:	4c28      	ldr	r4, [pc, #160]	; (8005514 <main+0xc14>)
	osMutexDef(myMutex01);
 8005474:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005478:	f010 fff6 	bl	8016468 <osMutexCreate>
 800547c:	4b26      	ldr	r3, [pc, #152]	; (8005518 <main+0xc18>)
 800547e:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8005480:	2101      	movs	r1, #1
 8005482:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8005484:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005488:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 800548a:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800548e:	f011 f847 	bl	8016520 <osSemaphoreCreate>
 8005492:	4b22      	ldr	r3, [pc, #136]	; (800551c <main+0xc1c>)
 8005494:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8005496:	2101      	movs	r1, #1
 8005498:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 800549a:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800549c:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800549e:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <main+0xc20>)
 80054a2:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80054a4:	f010 ffbe 	bl	8016424 <osTimerCreate>
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <main+0xc24>)
 80054aa:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 80054ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80054b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80054b4:	4628      	mov	r0, r5
 80054b6:	4631      	mov	r1, r6
 80054b8:	f011 f8ac 	bl	8016614 <osMessageCreate>
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80054be:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054c0:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80054c2:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80054c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80054c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80054cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80054d0:	4631      	mov	r1, r6
 80054d2:	a84e      	add	r0, sp, #312	; 0x138
 80054d4:	f010 ff6c 	bl	80163b0 <osThreadCreate>
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054da:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80054dc:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80054e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 80054ea:	4631      	mov	r1, r6
 80054ec:	a855      	add	r0, sp, #340	; 0x154
 80054ee:	f010 ff5f 	bl	80163b0 <osThreadCreate>
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <main+0xc30>)
 80054f4:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80054f6:	f010 ff4d 	bl	8016394 <osKernelStart>
	while (1) {
 80054fa:	e7fe      	b.n	80054fa <main+0xbfa>
		Error_Handler();
 80054fc:	f7ff f984 	bl	8004808 <Error_Handler>
 8005500:	20002928 	.word	0x20002928
 8005504:	20002d24 	.word	0x20002d24
 8005508:	40007c00 	.word	0x40007c00
 800550c:	20002ca0 	.word	0x20002ca0
 8005510:	40007800 	.word	0x40007800
 8005514:	0802a458 	.word	0x0802a458
 8005518:	20002dc0 	.word	0x20002dc0
 800551c:	20002de0 	.word	0x20002de0
 8005520:	08003bf5 	.word	0x08003bf5
 8005524:	20002dc8 	.word	0x20002dc8
 8005528:	20002dc4 	.word	0x20002dc4
 800552c:	20002164 	.word	0x20002164
 8005530:	20002154 	.word	0x20002154
 8005534:	40000c00 	.word	0x40000c00

08005538 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 800553e:	f01f fa51 	bl	80249e4 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8005542:	f00f fdb3 	bl	80150ac <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8005546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800554a:	489e      	ldr	r0, [pc, #632]	; (80057c4 <StartDefaultTask+0x28c>)
 800554c:	f007 fb6a 	bl	800cc24 <HAL_GPIO_ReadPin>
 8005550:	2801      	cmp	r0, #1
 8005552:	f000 811a 	beq.w	800578a <StartDefaultTask+0x252>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8005556:	f7fb fb5b 	bl	8000c10 <stampboot>
	getboardpcb();		// find our daughterboard
 800555a:	f7ff f8c5 	bl	80046e8 <getboardpcb>
	printf("%s----------------------------------------------------------------------------\n", str);
 800555e:	499a      	ldr	r1, [pc, #616]	; (80057c8 <StartDefaultTask+0x290>)
 8005560:	489a      	ldr	r0, [pc, #616]	; (80057cc <StartDefaultTask+0x294>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005562:	f242 7530 	movw	r5, #10032	; 0x2730
	printf("%s----------------------------------------------------------------------------\n", str);
 8005566:	f020 fef5 	bl	8026354 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800556a:	4f99      	ldr	r7, [pc, #612]	; (80057d0 <StartDefaultTask+0x298>)
 800556c:	4999      	ldr	r1, [pc, #612]	; (80057d4 <StartDefaultTask+0x29c>)
 800556e:	2400      	movs	r4, #0
 8005570:	6838      	ldr	r0, [r7, #0]
 8005572:	2611      	movs	r6, #17
 8005574:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8005578:	c90e      	ldmia	r1, {r1, r2, r3}
 800557a:	e9cd 5002 	strd	r5, r0, [sp, #8]
 800557e:	e9cd 4600 	strd	r4, r6, [sp]
 8005582:	4895      	ldr	r0, [pc, #596]	; (80057d8 <StartDefaultTask+0x2a0>)
 8005584:	f020 fee6 	bl	8026354 <iprintf>
	crc_rom();
 8005588:	f7fe fb5c 	bl	8003c44 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 800558c:	4b93      	ldr	r3, [pc, #588]	; (80057dc <StartDefaultTask+0x2a4>)
 800558e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005592:	075b      	lsls	r3, r3, #29
 8005594:	d41e      	bmi.n	80055d4 <StartDefaultTask+0x9c>
		printf("LAN interface appears disconnected\n\r");
 8005596:	4892      	ldr	r0, [pc, #584]	; (80057e0 <StartDefaultTask+0x2a8>)
 8005598:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800559a:	4d92      	ldr	r5, [pc, #584]	; (80057e4 <StartDefaultTask+0x2ac>)
		printf("LAN interface appears disconnected\n\r");
 800559c:	f020 feda 	bl	8026354 <iprintf>
			osDelay(50);
 80055a0:	2032      	movs	r0, #50	; 0x32
 80055a2:	f010 ff37 	bl	8016414 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80055a6:	2201      	movs	r2, #1
 80055a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ac:	4628      	mov	r0, r5
 80055ae:	f007 fb4b 	bl	800cc48 <HAL_GPIO_WritePin>
			osDelay(50);
 80055b2:	2032      	movs	r0, #50	; 0x32
 80055b4:	f010 ff2e 	bl	8016414 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055be:	4628      	mov	r0, r5
 80055c0:	f007 fb42 	bl	800cc48 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 80055c4:	3c01      	subs	r4, #1
 80055c6:	d1eb      	bne.n	80055a0 <StartDefaultTask+0x68>
		printf("************* REBOOTING **************\n");
 80055c8:	4887      	ldr	r0, [pc, #540]	; (80057e8 <StartDefaultTask+0x2b0>)
 80055ca:	f020 ff5f 	bl	802648c <puts>
		rebootme(0);
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fe fbd8 	bl	8003d84 <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 80055d4:	4b85      	ldr	r3, [pc, #532]	; (80057ec <StartDefaultTask+0x2b4>)
	netif = netif_default;
 80055d6:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800586c <StartDefaultTask+0x334>
	globalfreeze = 0;		// Allow UDP streaming
 80055da:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 80055dc:	4b84      	ldr	r3, [pc, #528]	; (80057f0 <StartDefaultTask+0x2b8>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055de:	4985      	ldr	r1, [pc, #532]	; (80057f4 <StartDefaultTask+0x2bc>)
	netif = netif_default;
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055e6:	f016 fac1 	bl	801bb6c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 80055ea:	4983      	ldr	r1, [pc, #524]	; (80057f8 <StartDefaultTask+0x2c0>)
 80055ec:	f8d8 0000 	ldr.w	r0, [r8]
 80055f0:	f016 fa78 	bl	801bae4 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80055f4:	4b81      	ldr	r3, [pc, #516]	; (80057fc <StartDefaultTask+0x2c4>)
 80055f6:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 80055fa:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80055fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 8005600:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 8005602:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8005606:	f883 6071 	strb.w	r6, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 800560a:	f8a3 5084 	strh.w	r5, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 800560e:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8005610:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8005612:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8005614:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8005616:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 800561a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 800561e:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8005620:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8005622:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8005626:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 800562a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800562e:	f041 0101 	orr.w	r1, r1, #1
 8005632:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005636:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 800563a:	4971      	ldr	r1, [pc, #452]	; (8005800 <StartDefaultTask+0x2c8>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 800563c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8005644:	4a6f      	ldr	r2, [pc, #444]	; (8005804 <StartDefaultTask+0x2cc>)
	newbuild = BUILDNO;				// init to the same
 8005646:	4b70      	ldr	r3, [pc, #448]	; (8005808 <StartDefaultTask+0x2d0>)
	t2cap[0] = 44444444;
 8005648:	6011      	str	r1, [r2, #0]
	newbuild = BUILDNO;				// init to the same
 800564a:	601d      	str	r5, [r3, #0]
	initsplat();
 800564c:	f001 fcf0 	bl	8007030 <initsplat>
	stat = setupneo();
 8005650:	f000 fada 	bl	8005c08 <setupneo>
	if (stat != HAL_OK) {
 8005654:	2800      	cmp	r0, #0
 8005656:	f040 809b 	bne.w	8005790 <StartDefaultTask+0x258>
	printf("Setting up timers\n");
 800565a:	486c      	ldr	r0, [pc, #432]	; (800580c <StartDefaultTask+0x2d4>)
 800565c:	f020 ff16 	bl	802648c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8005660:	2300      	movs	r3, #0
 8005662:	486b      	ldr	r0, [pc, #428]	; (8005810 <StartDefaultTask+0x2d8>)
 8005664:	461a      	mov	r2, r3
 8005666:	4619      	mov	r1, r3
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	f011 f9fd 	bl	8016a68 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800566e:	4869      	ldr	r0, [pc, #420]	; (8005814 <StartDefaultTask+0x2dc>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8005670:	4c69      	ldr	r4, [pc, #420]	; (8005818 <StartDefaultTask+0x2e0>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8005672:	f00b f81f 	bl	80106b4 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8005676:	2200      	movs	r2, #0
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	4611      	mov	r1, r2
 800567c:	f00c ff44 	bl	8012508 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8005680:	2200      	movs	r2, #0
 8005682:	2104      	movs	r1, #4
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	f00c ff3f 	bl	8012508 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 800568a:	2200      	movs	r2, #0
 800568c:	210c      	movs	r1, #12
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	f00c ff3a 	bl	8012508 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8005694:	2100      	movs	r1, #0
 8005696:	4620      	mov	r0, r4
 8005698:	f00d f984 	bl	80129a4 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 800569c:	2104      	movs	r1, #4
 800569e:	4620      	mov	r0, r4
 80056a0:	f00d f980 	bl	80129a4 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80056a4:	210c      	movs	r1, #12
 80056a6:	4620      	mov	r0, r4
 80056a8:	f00d f97c 	bl	80129a4 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80056ac:	2301      	movs	r3, #1
 80056ae:	4a55      	ldr	r2, [pc, #340]	; (8005804 <StartDefaultTask+0x2cc>)
 80056b0:	2108      	movs	r1, #8
 80056b2:	4620      	mov	r0, r4
 80056b4:	f00c ff86 	bl	80125c4 <HAL_TIM_IC_Start_DMA>
 80056b8:	b128      	cbz	r0, 80056c6 <StartDefaultTask+0x18e>
		printf("TIM_Base_Start_DMA err %i", err);
 80056ba:	4601      	mov	r1, r0
 80056bc:	4857      	ldr	r0, [pc, #348]	; (800581c <StartDefaultTask+0x2e4>)
 80056be:	f020 fe49 	bl	8026354 <iprintf>
		Error_Handler();
 80056c2:	f7ff f8a1 	bl	8004808 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	2108      	movs	r1, #8
	myip = ip.addr;
 80056cc:	4c54      	ldr	r4, [pc, #336]	; (8005820 <StartDefaultTask+0x2e8>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80056ce:	f00c ff1b 	bl	8012508 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80056d2:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 80056da:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d05b      	beq.n	8005798 <StartDefaultTask+0x260>
	printf("*****************************************\n");
 80056e0:	4850      	ldr	r0, [pc, #320]	; (8005824 <StartDefaultTask+0x2ec>)
 80056e2:	f020 fed3 	bl	802648c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80056e6:	6821      	ldr	r1, [r4, #0]
 80056e8:	484f      	ldr	r0, [pc, #316]	; (8005828 <StartDefaultTask+0x2f0>)
 80056ea:	0e0a      	lsrs	r2, r1, #24
 80056ec:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 80056f0:	4c4e      	ldr	r4, [pc, #312]	; (800582c <StartDefaultTask+0x2f4>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80056f2:	9200      	str	r2, [sp, #0]
 80056f4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80056f8:	b2c9      	uxtb	r1, r1
 80056fa:	f020 fe2b 	bl	8026354 <iprintf>
	printf("*****************************************\n");
 80056fe:	4849      	ldr	r0, [pc, #292]	; (8005824 <StartDefaultTask+0x2ec>)
 8005700:	f020 fec4 	bl	802648c <puts>
	if (http_downloading) {
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d14f      	bne.n	80057aa <StartDefaultTask+0x272>
	HAL_IWDG_Refresh(&hiwdg);						// refresh the hardware watchdog reset system timer
 800570a:	4849      	ldr	r0, [pc, #292]	; (8005830 <StartDefaultTask+0x2f8>)
 800570c:	f008 f920 	bl	800d950 <HAL_IWDG_Refresh>
	uip = locateudp();
 8005710:	4d48      	ldr	r5, [pc, #288]	; (8005834 <StartDefaultTask+0x2fc>)
	initialapisn();									// get initial s/n and UDP target from http server; reboots if fails
 8005712:	f003 fc4d 	bl	8008fb0 <initialapisn>
	HAL_IWDG_Refresh(&hiwdg);						// refresh the hardware watchdog reset system timer
 8005716:	4846      	ldr	r0, [pc, #280]	; (8005830 <StartDefaultTask+0x2f8>)
 8005718:	f008 f91a 	bl	800d950 <HAL_IWDG_Refresh>
	printf("Starting httpd web server\n");
 800571c:	4846      	ldr	r0, [pc, #280]	; (8005838 <StartDefaultTask+0x300>)
 800571e:	f020 feb5 	bl	802648c <puts>
	while (lptask_init_done == 0)
 8005722:	4c46      	ldr	r4, [pc, #280]	; (800583c <StartDefaultTask+0x304>)
	httpd_init();		// start the www server
 8005724:	f014 fc90 	bl	801a048 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8005728:	f003 fa58 	bl	8008bdc <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 800572c:	4844      	ldr	r0, [pc, #272]	; (8005840 <StartDefaultTask+0x308>)
 800572e:	f020 fead 	bl	802648c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8005732:	2008      	movs	r0, #8
 8005734:	4a43      	ldr	r2, [pc, #268]	; (8005844 <StartDefaultTask+0x30c>)
 8005736:	2100      	movs	r1, #0
 8005738:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800573c:	9000      	str	r0, [sp, #0]
 800573e:	4842      	ldr	r0, [pc, #264]	; (8005848 <StartDefaultTask+0x310>)
 8005740:	f004 fab0 	bl	8009ca4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8005744:	4841      	ldr	r0, [pc, #260]	; (800584c <StartDefaultTask+0x314>)
 8005746:	f00a fefd 	bl	8010544 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800574a:	f012 fad9 	bl	8017d00 <xTaskGetCurrentTaskHandle>
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <StartDefaultTask+0x318>)
 8005750:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8005752:	f002 fef7 	bl	8008544 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8005756:	4b3f      	ldr	r3, [pc, #252]	; (8005854 <StartDefaultTask+0x31c>)
 8005758:	2201      	movs	r2, #1
	uip = locateudp();
 800575a:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 800575c:	483e      	ldr	r0, [pc, #248]	; (8005858 <StartDefaultTask+0x320>)
	main_init_done = 1; // let lptask now main has initialised
 800575e:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8005760:	f020 fe94 	bl	802648c <puts>
	while (lptask_init_done == 0)
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	b92b      	cbnz	r3, 8005774 <StartDefaultTask+0x23c>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8005768:	2064      	movs	r0, #100	; 0x64
 800576a:	f010 fe53 	bl	8016414 <osDelay>
	while (lptask_init_done == 0)
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f9      	beq.n	8005768 <StartDefaultTask+0x230>
	startadc();		// start the ADC DMA loop
 8005774:	f7fb f9c2 	bl	8000afc <startadc>
		startudp(uip);	// should never return
 8005778:	6828      	ldr	r0, [r5, #0]
 800577a:	f002 ff19 	bl	80085b0 <startudp>
		printf("UDP stream exited!!!\n\r");
 800577e:	4837      	ldr	r0, [pc, #220]	; (800585c <StartDefaultTask+0x324>)
 8005780:	f020 fde8 	bl	8026354 <iprintf>
		rebootme(4);
 8005784:	2004      	movs	r0, #4
 8005786:	f7fe fafd 	bl	8003d84 <rebootme>
		swapboot();	//  swap the boot vector
 800578a:	f7fb fb9b 	bl	8000ec4 <swapboot>
 800578e:	e6e4      	b.n	800555a <StartDefaultTask+0x22>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8005790:	4833      	ldr	r0, [pc, #204]	; (8005860 <StartDefaultTask+0x328>)
 8005792:	f020 fddf 	bl	8026354 <iprintf>
 8005796:	e760      	b.n	800565a <StartDefaultTask+0x122>
		printf("***** DHCP Failed ******\n");
 8005798:	4832      	ldr	r0, [pc, #200]	; (8005864 <StartDefaultTask+0x32c>)
 800579a:	f020 fe77 	bl	802648c <puts>
		osDelay(200);
 800579e:	20c8      	movs	r0, #200	; 0xc8
 80057a0:	f010 fe38 	bl	8016414 <osDelay>
		rebootme(1);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fe faed 	bl	8003d84 <rebootme>
		printf("Downloading...\n");
 80057aa:	482f      	ldr	r0, [pc, #188]	; (8005868 <StartDefaultTask+0x330>)
 80057ac:	f020 fe6e 	bl	802648c <puts>
		while (http_downloading) {
 80057b0:	e003      	b.n	80057ba <StartDefaultTask+0x282>
			osDelay(1000);
 80057b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057b6:	f010 fe2d 	bl	8016414 <osDelay>
		while (http_downloading) {
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f8      	bne.n	80057b2 <StartDefaultTask+0x27a>
 80057c0:	e7a3      	b.n	800570a <StartDefaultTask+0x1d2>
 80057c2:	bf00      	nop
 80057c4:	40020800 	.word	0x40020800
 80057c8:	0802c44c 	.word	0x0802c44c
 80057cc:	0802c37c 	.word	0x0802c37c
 80057d0:	20002158 	.word	0x20002158
 80057d4:	1ff0f000 	.word	0x1ff0f000
 80057d8:	0802c450 	.word	0x0802c450
 80057dc:	20003534 	.word	0x20003534
 80057e0:	0802c490 	.word	0x0802c490
 80057e4:	40020c00 	.word	0x40020c00
 80057e8:	0802c4b8 	.word	0x0802c4b8
 80057ec:	2000345c 	.word	0x2000345c
 80057f0:	2002e424 	.word	0x2002e424
 80057f4:	08003d8d 	.word	0x08003d8d
 80057f8:	08003be9 	.word	0x08003be9
 80057fc:	2000300c 	.word	0x2000300c
 8005800:	02a62b1c 	.word	0x02a62b1c
 8005804:	20000784 	.word	0x20000784
 8005808:	20002dd4 	.word	0x20002dd4
 800580c:	0802c500 	.word	0x0802c500
 8005810:	20002de0 	.word	0x20002de0
 8005814:	20002974 	.word	0x20002974
 8005818:	20002844 	.word	0x20002844
 800581c:	0802c514 	.word	0x0802c514
 8005820:	20002dcc 	.word	0x20002dcc
 8005824:	0802c54c 	.word	0x0802c54c
 8005828:	0802c578 	.word	0x0802c578
 800582c:	200018bc 	.word	0x200018bc
 8005830:	20002660 	.word	0x20002660
 8005834:	20002df0 	.word	0x20002df0
 8005838:	0802c5a0 	.word	0x0802c5a0
 800583c:	20002db8 	.word	0x20002db8
 8005840:	0802c5bc 	.word	0x0802c5bc
 8005844:	0802c61c 	.word	0x0802c61c
 8005848:	20002268 	.word	0x20002268
 800584c:	200029c0 	.word	0x200029c0
 8005850:	20000818 	.word	0x20000818
 8005854:	20002dbc 	.word	0x20002dbc
 8005858:	0802c5d8 	.word	0x0802c5d8
 800585c:	0802c604 	.word	0x0802c604
 8005860:	0802c4e0 	.word	0x0802c4e0
 8005864:	0802c530 	.word	0x0802c530
 8005868:	0802c5f4 	.word	0x0802c5f4
 800586c:	20002dd0 	.word	0x20002dd0

08005870 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8005874:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8005876:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8005878:	b083      	sub	sp, #12
 800587a:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 800587c:	d009      	beq.n	8005892 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800587e:	230a      	movs	r3, #10
 8005880:	2201      	movs	r2, #1
 8005882:	a901      	add	r1, sp, #4
 8005884:	4808      	ldr	r0, [pc, #32]	; (80058a8 <__io_putchar+0x34>)
 8005886:	f00e fad1 	bl	8013e2c <HAL_UART_Transmit>

	return ch;
	}
}
 800588a:	9801      	ldr	r0, [sp, #4]
 800588c:	b003      	add	sp, #12
 800588e:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8005892:	4603      	mov	r3, r0
 8005894:	2202      	movs	r2, #2
 8005896:	4905      	ldr	r1, [pc, #20]	; (80058ac <__io_putchar+0x38>)
 8005898:	4803      	ldr	r0, [pc, #12]	; (80058a8 <__io_putchar+0x34>)
 800589a:	f00e fac7 	bl	8013e2c <HAL_UART_Transmit>
}
 800589e:	9801      	ldr	r0, [sp, #4]
 80058a0:	b003      	add	sp, #12
 80058a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80058a6:	bf00      	nop
 80058a8:	20002a0c 	.word	0x20002a0c
 80058ac:	0802b158 	.word	0x0802b158

080058b0 <movavg>:
}


// moving avg, used by:-
// clktrim
uint32_t movavg(uint32_t new) {
 80058b0:	b410      	push	{r4}
 80058b2:	4c08      	ldr	r4, [pc, #32]	; (80058d4 <movavg+0x24>)
	static uint32_t data[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int i;
	uint32_t sum = 0;
 80058b4:	2100      	movs	r1, #0
 80058b6:	4623      	mov	r3, r4
 80058b8:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c

	for (i = 0; i < 15; i++) {
		data[i] = data[i + 1];		// old data is low index
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 80058c2:	4563      	cmp	r3, ip
		sum += data[i];
 80058c4:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 80058c6:	d1f9      	bne.n	80058bc <movavg+0xc>
	}
	data[15] = new;		// new data at the end
	sum += new;
 80058c8:	4401      	add	r1, r0
	data[15] = new;		// new data at the end
 80058ca:	63e0      	str	r0, [r4, #60]	; 0x3c

	return (sum >> 4);
}
 80058cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d0:	0908      	lsrs	r0, r1, #4
 80058d2:	4770      	bx	lr
 80058d4:	20002df4 	.word	0x20002df4

080058d8 <calcLocator>:
void calcLocator(char *dst, double lat, double lon) {
  int o1, o2, o3;
  int a1, a2, a3;
  double remainder;
  // longitude
  remainder = lon + 180.0;
 80058d8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005990 <calcLocator+0xb8>
  o1 = (int)(remainder / 20.0);
 80058dc:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
  dst[1] = (char)a1 + 'A';
  dst[2] = (char)o2 + '0';
  dst[3] = (char)a2 + '0';
  dst[4] = (char)o3 + 'A';
  dst[5] = (char)a3 + 'A';
  dst[6] = (char)0;
 80058e0:	2300      	movs	r3, #0
  a1 = (int)(remainder / 10.0);
 80058e2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  remainder = lon + 180.0;
 80058e6:	ee31 1b07 	vadd.f64	d1, d1, d7
  dst[6] = (char)0;
 80058ea:	7183      	strb	r3, [r0, #6]
  o2 = (int)(remainder / 2.0);
 80058ec:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  remainder = remainder - 2.0 * (double)o2;
 80058f0:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
  o3 = (int)(12.0 * remainder);
 80058f4:	eeb2 4b08 	vmov.f64	d4, #40	; 0x41400000  12.0
  remainder = lat + 90.0;
 80058f8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8005998 <calcLocator+0xc0>
void calcLocator(char *dst, double lat, double lon) {
 80058fc:	ed2d 8b02 	vpush	{d8}
  remainder = lat + 90.0;
 8005900:	ee30 0b06 	vadd.f64	d0, d0, d6
  o1 = (int)(remainder / 20.0);
 8005904:	ee81 6b02 	vdiv.f64	d6, d1, d2
 8005908:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  remainder = remainder - (double)o1 * 20.0;
 800590c:	eeb8 8bc6 	vcvt.f64.s32	d8, s12
  dst[0] = (char)o1 + 'A';
 8005910:	ee16 3a10 	vmov	r3, s12
  a1 = (int)(remainder / 10.0);
 8005914:	ee80 6b05 	vdiv.f64	d6, d0, d5
  dst[0] = (char)o1 + 'A';
 8005918:	3341      	adds	r3, #65	; 0x41
 800591a:	7003      	strb	r3, [r0, #0]
  remainder = remainder - (double)o1 * 20.0;
 800591c:	eea8 1b42 	vfms.f64	d1, d8, d2
}
 8005920:	ecbd 8b02 	vpop	{d8}
  o2 = (int)(remainder / 2.0);
 8005924:	ee21 7b07 	vmul.f64	d7, d1, d7
 8005928:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  remainder = remainder - 2.0 * (double)o2;
 800592c:	eeb8 2bc7 	vcvt.f64.s32	d2, s14
  dst[2] = (char)o2 + '0';
 8005930:	ee17 3a10 	vmov	r3, s14
  a3 = (int)(24.0 * remainder);
 8005934:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  dst[2] = (char)o2 + '0';
 8005938:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - 2.0 * (double)o2;
 800593a:	eea2 1b43 	vfms.f64	d1, d2, d3
  dst[2] = (char)o2 + '0';
 800593e:	7083      	strb	r3, [r0, #2]
  a1 = (int)(remainder / 10.0);
 8005940:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  dst[1] = (char)a1 + 'A';
 8005944:	ee16 3a10 	vmov	r3, s12
  o3 = (int)(12.0 * remainder);
 8005948:	ee21 1b04 	vmul.f64	d1, d1, d4
  dst[1] = (char)a1 + 'A';
 800594c:	3341      	adds	r3, #65	; 0x41
 800594e:	7043      	strb	r3, [r0, #1]
  remainder = remainder - (double)a1 * 10.0;
 8005950:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 8005954:	eea4 0b45 	vfms.f64	d0, d4, d5
  o3 = (int)(12.0 * remainder);
 8005958:	eebd 1bc1 	vcvt.s32.f64	s2, d1
  dst[4] = (char)o3 + 'A';
 800595c:	ee11 3a10 	vmov	r3, s2
 8005960:	3341      	adds	r3, #65	; 0x41
  a2 = (int)(remainder);
 8005962:	eefd 6bc0 	vcvt.s32.f64	s13, d0
  dst[4] = (char)o3 + 'A';
 8005966:	7103      	strb	r3, [r0, #4]
  remainder = remainder - (double)a2;
 8005968:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  dst[3] = (char)a2 + '0';
 800596c:	ee16 3a90 	vmov	r3, s13
 8005970:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - (double)a2;
 8005972:	ee30 0b45 	vsub.f64	d0, d0, d5
  dst[3] = (char)a2 + '0';
 8005976:	70c3      	strb	r3, [r0, #3]
  a3 = (int)(24.0 * remainder);
 8005978:	ee20 0b07 	vmul.f64	d0, d0, d7
 800597c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  dst[5] = (char)a3 + 'A';
 8005980:	ee10 3a10 	vmov	r3, s0
 8005984:	3341      	adds	r3, #65	; 0x41
 8005986:	7143      	strb	r3, [r0, #5]
}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	00000000 	.word	0x00000000
 8005994:	40668000 	.word	0x40668000
 8005998:	00000000 	.word	0x00000000
 800599c:	40568000 	.word	0x40568000

080059a0 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059a0:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <calcepoch32+0x40>)
 80059a2:	4810      	ldr	r0, [pc, #64]	; (80059e4 <calcepoch32+0x44>)
 80059a4:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 80059a6:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80059a8:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059ac:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059ae:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059b0:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80059b2:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059b4:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80059b8:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80059ba:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80059bc:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80059be:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 80059c0:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80059c2:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80059c4:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 80059c6:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 80059ca:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 80059cc:	f01f fe04 	bl	80255d8 <mktime>
 80059d0:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <calcepoch32+0x48>)
 80059d2:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80059d4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80059d8:	e9c2 3100 	strd	r3, r1, [r2]
}
 80059dc:	4418      	add	r0, r3
 80059de:	bd10      	pop	{r4, pc}
 80059e0:	2000300c 	.word	0x2000300c
 80059e4:	20002fe0 	.word	0x20002fe0
 80059e8:	20002ec0 	.word	0x20002ec0

080059ec <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 80059f2:	b33a      	cbz	r2, 8005a44 <printPacket+0x58>
 80059f4:	4607      	mov	r7, r0
 80059f6:	4616      	mov	r6, r2
 80059f8:	1e4d      	subs	r5, r1, #1
 80059fa:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 80059fc:	f8df a054 	ldr.w	sl, [pc, #84]	; 8005a54 <printPacket+0x68>
 8005a00:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005a58 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8005a04:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005a5c <printPacket+0x70>
 8005a08:	e013      	b.n	8005a32 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8005a0a:	f8da 1000 	ldr.w	r1, [sl]
 8005a0e:	1c4b      	adds	r3, r1, #1
 8005a10:	f8ca 3000 	str.w	r3, [sl]
 8005a14:	f020 fc9e 	bl	8026354 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005a18:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8005a1a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005a1e:	4641      	mov	r1, r8
 8005a20:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005a22:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005a24:	f020 fe80 	bl	8026728 <siprintf>
		printf(temp);
 8005a28:	a801      	add	r0, sp, #4
 8005a2a:	f020 fc93 	bl	8026354 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005a2e:	42a6      	cmp	r6, r4
 8005a30:	d008      	beq.n	8005a44 <printPacket+0x58>
		if (i % 16 == 0) {
 8005a32:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8005a36:	463a      	mov	r2, r7
 8005a38:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8005a3a:	d0e6      	beq.n	8005a0a <printPacket+0x1e>
			printf(" ");
 8005a3c:	2020      	movs	r0, #32
 8005a3e:	f020 fca1 	bl	8026384 <putchar>
 8005a42:	e7e9      	b.n	8005a18 <printPacket+0x2c>
	}
	printf("\n\r");
 8005a44:	4802      	ldr	r0, [pc, #8]	; (8005a50 <printPacket+0x64>)
 8005a46:	f020 fc85 	bl	8026354 <iprintf>
}
 8005a4a:	b002      	add	sp, #8
 8005a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a50:	0802c618 	.word	0x0802c618
 8005a54:	20002eb8 	.word	0x20002eb8
 8005a58:	0802cd1c 	.word	0x0802cd1c
 8005a5c:	0802cd28 	.word	0x0802cd28

08005a60 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8005a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a64:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005b04 <disableNmea+0xa4>
void disableNmea() {
 8005a68:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8005a6a:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005a6c:	4f24      	ldr	r7, [pc, #144]	; (8005b00 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a6e:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8005a72:	f10d 0904 	add.w	r9, sp, #4
 8005a76:	ad04      	add	r5, sp, #16
 8005a78:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005a7c:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005a84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005a88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005a8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005a90:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005a94:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005a98:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005aa0:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8005aa4:	f829 2b02 	strh.w	r2, [r9], #2
 8005aa8:	0c12      	lsrs	r2, r2, #16
 8005aaa:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005aae:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005ab2:	7829      	ldrb	r1, [r5, #0]
 8005ab4:	786a      	ldrb	r2, [r5, #1]
 8005ab6:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 8005aba:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005abc:	f88d 100a 	strb.w	r1, [sp, #10]
 8005ac0:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005ac4:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8005ac8:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad0:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005ad2:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005ad4:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 8005ad8:	44e6      	add	lr, ip
 8005ada:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005ade:	d1f5      	bne.n	8005acc <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005ae0:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005ae2:	2364      	movs	r3, #100	; 0x64
 8005ae4:	220b      	movs	r2, #11
 8005ae6:	a901      	add	r1, sp, #4
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f88d c00d 	strb.w	ip, [sp, #13]
 8005aee:	f88d e00e 	strb.w	lr, [sp, #14]
 8005af2:	f00e f99b 	bl	8013e2c <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005af6:	4545      	cmp	r5, r8
 8005af8:	d1d9      	bne.n	8005aae <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 8005afa:	b00f      	add	sp, #60	; 0x3c
 8005afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b00:	20002f54 	.word	0x20002f54
 8005b04:	0802a4c0 	.word	0x0802a4c0

08005b08 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b08:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 8005b0a:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b0c:	db1c      	blt.n	8005b48 <isGoodChecksum+0x40>
 8005b0e:	4910      	ldr	r1, [pc, #64]	; (8005b50 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005b10:	2200      	movs	r2, #0
 8005b12:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8005b16:	4613      	mov	r3, r2
 8005b18:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8005b1a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005b1e:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b20:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005b22:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005b24:	441a      	add	r2, r3
 8005b26:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005b28:	d1f7      	bne.n	8005b1a <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005b2a:	490a      	ldr	r1, [pc, #40]	; (8005b54 <isGoodChecksum+0x4c>)
 8005b2c:	4408      	add	r0, r1
 8005b2e:	7981      	ldrb	r1, [r0, #6]
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <isGoodChecksum+0x32>
 8005b34:	2000      	movs	r0, #0
}
 8005b36:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005b3a:	79c0      	ldrb	r0, [r0, #7]
 8005b3c:	1a80      	subs	r0, r0, r2
 8005b3e:	fab0 f080 	clz	r0, r0
 8005b42:	0940      	lsrs	r0, r0, #5
}
 8005b44:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8005b48:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	e7ed      	b.n	8005b2a <isGoodChecksum+0x22>
 8005b4e:	bf00      	nop
 8005b50:	20002e39 	.word	0x20002e39
 8005b54:	20002e38 	.word	0x20002e38

08005b58 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8005b58:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8005b5a:	4c25      	ldr	r4, [pc, #148]	; (8005bf0 <IsPacketReady+0x98>)
 8005b5c:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d814      	bhi.n	8005b8c <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8005b62:	4a24      	ldr	r2, [pc, #144]	; (8005bf4 <IsPacketReady+0x9c>)
 8005b64:	4619      	mov	r1, r3
 8005b66:	5cd2      	ldrb	r2, [r2, r3]
 8005b68:	4282      	cmp	r2, r0
 8005b6a:	d00a      	beq.n	8005b82 <IsPacketReady+0x2a>
 8005b6c:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <IsPacketReady+0xa0>)
 8005b6e:	5cd2      	ldrb	r2, [r2, r3]
 8005b70:	4282      	cmp	r2, r0
 8005b72:	d006      	beq.n	8005b82 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8005b74:	2200      	movs	r2, #0
 8005b76:	4921      	ldr	r1, [pc, #132]	; (8005bfc <IsPacketReady+0xa4>)
			p = 0;
 8005b78:	4613      	mov	r3, r2
			len = 0;
 8005b7a:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8005b7c:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8005b7e:	70e3      	strb	r3, [r4, #3]
}
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <IsPacketReady+0xa8>)
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	5450      	strb	r0, [r2, r1]
 8005b8a:	e7f7      	b.n	8005b7c <IsPacketReady+0x24>
		if (p < 6) {
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d917      	bls.n	8005bc0 <IsPacketReady+0x68>
		if (p == 6) {
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d01b      	beq.n	8005bcc <IsPacketReady+0x74>
 8005b94:	4d19      	ldr	r5, [pc, #100]	; (8005bfc <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8005b96:	682a      	ldr	r2, [r5, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	3207      	adds	r2, #7
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	dbed      	blt.n	8005b7c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005ba0:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8005ba2:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8005ba4:	4e16      	ldr	r6, [pc, #88]	; (8005c00 <IsPacketReady+0xa8>)
 8005ba6:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8005ba8:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8005baa:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d1e5      	bne.n	8005b7c <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005bb0:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005bb2:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005bb4:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 8005bb6:	f7ff ffa7 	bl	8005b08 <isGoodChecksum>
 8005bba:	b998      	cbnz	r0, 8005be4 <IsPacketReady+0x8c>
				p = 0;
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	e7dd      	b.n	8005b7c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005bc0:	490f      	ldr	r1, [pc, #60]	; (8005c00 <IsPacketReady+0xa8>)
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	54c8      	strb	r0, [r1, r3]
			return (0);
 8005bc6:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 8005bc8:	70e2      	strb	r2, [r4, #3]
}
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005bcc:	490c      	ldr	r1, [pc, #48]	; (8005c00 <IsPacketReady+0xa8>)
 8005bce:	794d      	ldrb	r5, [r1, #5]
 8005bd0:	790a      	ldrb	r2, [r1, #4]
 8005bd2:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8005bd6:	4d09      	ldr	r5, [pc, #36]	; (8005bfc <IsPacketReady+0xa4>)
 8005bd8:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8005bda:	682a      	ldr	r2, [r5, #0]
 8005bdc:	2a7f      	cmp	r2, #127	; 0x7f
 8005bde:	d9da      	bls.n	8005b96 <IsPacketReady+0x3e>
				return 0;
 8005be0:	2000      	movs	r0, #0
}
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <IsPacketReady+0xac>)
 8005be6:	2201      	movs	r2, #1
					return len;
 8005be8:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bd70      	pop	{r4, r5, r6, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000278 	.word	0x20000278
 8005bf4:	0802cf18 	.word	0x0802cf18
 8005bf8:	0802cf1c 	.word	0x0802cf1c
 8005bfc:	20002fd8 	.word	0x20002fd8
 8005c00:	20002e38 	.word	0x20002e38
 8005c04:	20002ecc 	.word	0x20002ecc

08005c08 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c08:	4b74      	ldr	r3, [pc, #464]	; (8005ddc <setupneo+0x1d4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c10:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c12:	f000 80ba 	beq.w	8005d8a <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8005c16:	2284      	movs	r2, #132	; 0x84
 8005c18:	4971      	ldr	r1, [pc, #452]	; (8005de0 <setupneo+0x1d8>)
 8005c1a:	4872      	ldr	r0, [pc, #456]	; (8005de4 <setupneo+0x1dc>)
 8005c1c:	f01f fbd4 	bl	80253c8 <memcpy>
		gpsuarttx = huart6;
 8005c20:	2284      	movs	r2, #132	; 0x84
 8005c22:	496f      	ldr	r1, [pc, #444]	; (8005de0 <setupneo+0x1d8>)
 8005c24:	4870      	ldr	r0, [pc, #448]	; (8005de8 <setupneo+0x1e0>)
 8005c26:	f01f fbcf 	bl	80253c8 <memcpy>
		GPSUARTRX = USART6;
 8005c2a:	4b70      	ldr	r3, [pc, #448]	; (8005dec <setupneo+0x1e4>)
 8005c2c:	4a70      	ldr	r2, [pc, #448]	; (8005df0 <setupneo+0x1e8>)
 8005c2e:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005c30:	2201      	movs	r2, #1
 8005c32:	4970      	ldr	r1, [pc, #448]	; (8005df4 <setupneo+0x1ec>)
 8005c34:	486b      	ldr	r0, [pc, #428]	; (8005de4 <setupneo+0x1dc>)
 8005c36:	f00e fb91 	bl	801435c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 809d 	bne.w	8005d7c <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005c42:	f7ff ff0d 	bl	8005a60 <disableNmea>
	osDelay(500);
 8005c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c4a:	f010 fbe3 	bl	8016414 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <setupneo+0x1f0>)
 8005c50:	ae01      	add	r6, sp, #4
 8005c52:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005c56:	4d69      	ldr	r5, [pc, #420]	; (8005dfc <setupneo+0x1f4>)
 8005c58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c5c:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8005c60:	4867      	ldr	r0, [pc, #412]	; (8005e00 <setupneo+0x1f8>)
 8005c62:	f020 fc13 	bl	802648c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c66:	2364      	movs	r3, #100	; 0x64
 8005c68:	2208      	movs	r2, #8
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	485e      	ldr	r0, [pc, #376]	; (8005de8 <setupneo+0x1e0>)
 8005c6e:	f00e f8dd 	bl	8013e2c <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c72:	e004      	b.n	8005c7e <setupneo+0x76>
		i++;
		osDelay(1);
 8005c74:	f010 fbce 	bl	8016414 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c78:	3c01      	subs	r4, #1
 8005c7a:	f000 80a5 	beq.w	8005dc8 <setupneo+0x1c0>
 8005c7e:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8005c80:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f6      	beq.n	8005c74 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c86:	4c5f      	ldr	r4, [pc, #380]	; (8005e04 <setupneo+0x1fc>)
 8005c88:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8005c8a:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c92:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c96:	2364      	movs	r3, #100	; 0x64
 8005c98:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005c9a:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005c9e:	4852      	ldr	r0, [pc, #328]	; (8005de8 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005ca0:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	f00e f8c1 	bl	8013e2c <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8005caa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005cae:	f010 fbb1 	bl	8016414 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005cb2:	4855      	ldr	r0, [pc, #340]	; (8005e08 <setupneo+0x200>)
 8005cb4:	f020 fb4e 	bl	8026354 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005cb8:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005cbc:	46b4      	mov	ip, r6
 8005cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cc0:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cc4:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 8005cc6:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cca:	220e      	movs	r2, #14
 8005ccc:	2364      	movs	r3, #100	; 0x64
 8005cce:	4846      	ldr	r0, [pc, #280]	; (8005de8 <setupneo+0x1e0>)
 8005cd0:	f00e f8ac 	bl	8013e2c <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cd8:	f010 fb9c 	bl	8016414 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005cdc:	484b      	ldr	r0, [pc, #300]	; (8005e0c <setupneo+0x204>)
 8005cde:	f020 fbd5 	bl	802648c <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005ce2:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8005ce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cf6:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8005cf8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	222c      	movs	r2, #44	; 0x2c
 8005d00:	4839      	ldr	r0, [pc, #228]	; (8005de8 <setupneo+0x1e0>)
 8005d02:	f00e f893 	bl	8013e2c <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8005d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d0a:	f010 fb83 	bl	8016414 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005d0e:	4840      	ldr	r0, [pc, #256]	; (8005e10 <setupneo+0x208>)
 8005d10:	f020 fb20 	bl	8026354 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005d14:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8005d18:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d1a:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d1c:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d20:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005d24:	f82c 2b02 	strh.w	r2, [ip], #2
 8005d28:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	482e      	ldr	r0, [pc, #184]	; (8005de8 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005d2e:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d32:	220b      	movs	r2, #11
 8005d34:	f00e f87a 	bl	8013e2c <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8005d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d3c:	f010 fb6a 	bl	8016414 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d40:	46b4      	mov	ip, r6
 8005d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d52:	2364      	movs	r3, #100	; 0x64
 8005d54:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005d56:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4822      	ldr	r0, [pc, #136]	; (8005de8 <setupneo+0x1e0>)
 8005d5e:	f00e f865 	bl	8013e2c <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8005d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d66:	f010 fb55 	bl	8016414 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <setupneo+0x20c>)
 8005d6c:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8005d6e:	482a      	ldr	r0, [pc, #168]	; (8005e18 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005d70:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8005d72:	f020 faef 	bl	8026354 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8005d76:	4638      	mov	r0, r7
 8005d78:	b00d      	add	sp, #52	; 0x34
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	4827      	ldr	r0, [pc, #156]	; (8005e1c <setupneo+0x214>)
 8005d80:	f020 fae8 	bl	8026354 <iprintf>
}
 8005d84:	4638      	mov	r0, r7
 8005d86:	b00d      	add	sp, #52	; 0x34
 8005d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8005d8a:	4c25      	ldr	r4, [pc, #148]	; (8005e20 <setupneo+0x218>)
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f00d f9e1 	bl	8013154 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8005d92:	4620      	mov	r0, r4
 8005d94:	f00d f846 	bl	8012e24 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8005d98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005d9c:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8005d9e:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005da0:	f00e f8ec 	bl	8013f7c <HAL_UART_Init>
 8005da4:	b968      	cbnz	r0, 8005dc2 <setupneo+0x1ba>
		gpsuartrx = huart8;
 8005da6:	2284      	movs	r2, #132	; 0x84
 8005da8:	491e      	ldr	r1, [pc, #120]	; (8005e24 <setupneo+0x21c>)
 8005daa:	480e      	ldr	r0, [pc, #56]	; (8005de4 <setupneo+0x1dc>)
 8005dac:	f01f fb0c 	bl	80253c8 <memcpy>
		gpsuarttx = huart7;
 8005db0:	2284      	movs	r2, #132	; 0x84
 8005db2:	491b      	ldr	r1, [pc, #108]	; (8005e20 <setupneo+0x218>)
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <setupneo+0x1e0>)
 8005db6:	f01f fb07 	bl	80253c8 <memcpy>
		GPSUARTRX = UART8;
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <setupneo+0x1e4>)
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	; (8005e28 <setupneo+0x220>)
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e736      	b.n	8005c30 <setupneo+0x28>
			Error_Handler();
 8005dc2:	f7fe fd21 	bl	8004808 <Error_Handler>
 8005dc6:	e7ee      	b.n	8005da6 <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8005dc8:	4818      	ldr	r0, [pc, #96]	; (8005e2c <setupneo+0x224>)
 8005dca:	f020 fb5f 	bl	802648c <puts>
		osDelay(200);
 8005dce:	20c8      	movs	r0, #200	; 0xc8
 8005dd0:	f010 fb20 	bl	8016414 <osDelay>
		rebootme(2);
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fd ffd5 	bl	8003d84 <rebootme>
 8005dda:	e754      	b.n	8005c86 <setupneo+0x7e>
 8005ddc:	20002158 	.word	0x20002158
 8005de0:	20002c1c 	.word	0x20002c1c
 8005de4:	20002ed0 	.word	0x20002ed0
 8005de8:	20002f54 	.word	0x20002f54
 8005dec:	20002e34 	.word	0x20002e34
 8005df0:	40011400 	.word	0x40011400
 8005df4:	20003004 	.word	0x20003004
 8005df8:	0802a4b8 	.word	0x0802a4b8
 8005dfc:	20002fdc 	.word	0x20002fdc
 8005e00:	0802cd30 	.word	0x0802cd30
 8005e04:	0802a4a0 	.word	0x0802a4a0
 8005e08:	0802cd70 	.word	0x0802cd70
 8005e0c:	0802cda0 	.word	0x0802cda0
 8005e10:	0802cdc8 	.word	0x0802cdc8
 8005e14:	2000300c 	.word	0x2000300c
 8005e18:	0802cdec 	.word	0x0802cdec
 8005e1c:	0802cd48 	.word	0x0802cd48
 8005e20:	20002ca0 	.word	0x20002ca0
 8005e24:	20002d24 	.word	0x20002d24
 8005e28:	40007c00 	.word	0x40007c00
 8005e2c:	0802ce14 	.word	0x0802ce14

08005e30 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005e30:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005e32:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	6803      	ldr	r3, [r0, #0]
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d011      	beq.n	8005e60 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <HAL_UART_RxCpltCallback+0xb0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d024      	beq.n	8005e8c <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005e42:	4a28      	ldr	r2, [pc, #160]	; (8005ee4 <HAL_UART_RxCpltCallback+0xb4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d025      	beq.n	8005e94 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8005e48:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <HAL_UART_RxCpltCallback+0xb8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8005e4e:	4827      	ldr	r0, [pc, #156]	; (8005eec <HAL_UART_RxCpltCallback+0xbc>)
}
 8005e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8005e54:	f020 bb1a 	b.w	802648c <puts>
}
 8005e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8005e5c:	f7fe bc54 	b.w	8004708 <uart2_rxdone>
		data = rxdatabuf[0];
 8005e60:	4923      	ldr	r1, [pc, #140]	; (8005ef0 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8005e62:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8005e64:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8005e66:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8005e68:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8005e6a:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8005e6c:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8005e6e:	f7ff fe73 	bl	8005b58 <IsPacketReady>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	dd1c      	ble.n	8005eb0 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8005e76:	2854      	cmp	r0, #84	; 0x54
 8005e78:	d01b      	beq.n	8005eb2 <HAL_UART_RxCpltCallback+0x82>
 8005e7a:	2864      	cmp	r0, #100	; 0x64
 8005e7c:	d00e      	beq.n	8005e9c <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005e7e:	b2c2      	uxtb	r2, r0
 8005e80:	491e      	ldr	r1, [pc, #120]	; (8005efc <HAL_UART_RxCpltCallback+0xcc>)
 8005e82:	481f      	ldr	r0, [pc, #124]	; (8005f00 <HAL_UART_RxCpltCallback+0xd0>)
}
 8005e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005e88:	f7ff bdb0 	b.w	80059ec <printPacket>
}
 8005e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 8005e90:	f7fc b890 	b.w	8001fb4 <uart5_rxdone>
}
 8005e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8005e98:	f000 bfc0 	b.w	8006e1c <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <HAL_UART_RxCpltCallback+0xd4>)
 8005e9e:	481a      	ldr	r0, [pc, #104]	; (8005f08 <HAL_UART_RxCpltCallback+0xd8>)
 8005ea0:	f1a3 020a 	sub.w	r2, r3, #10
 8005ea4:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8005ea8:	f020 fa54 	bl	8026354 <iprintf>
				neoispresent = 1;
 8005eac:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_UART_RxCpltCallback+0xdc>)
 8005eae:	601c      	str	r4, [r3, #0]
}
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005eb2:	4d17      	ldr	r5, [pc, #92]	; (8005f10 <HAL_UART_RxCpltCallback+0xe0>)
 8005eb4:	224e      	movs	r2, #78	; 0x4e
 8005eb6:	4917      	ldr	r1, [pc, #92]	; (8005f14 <HAL_UART_RxCpltCallback+0xe4>)
 8005eb8:	1d28      	adds	r0, r5, #4
 8005eba:	f01f fa85 	bl	80253c8 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005ebe:	f7ff fd6f 	bl	80059a0 <calcepoch32>
 8005ec2:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8005ec6:	7e6b      	ldrb	r3, [r5, #25]
 8005ec8:	f013 0301 	ands.w	r3, r3, #1
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_UART_RxCpltCallback+0xe8>)
 8005ed0:	701c      	strb	r4, [r3, #0]
}
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8005ed4:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <HAL_UART_RxCpltCallback+0xe8>)
 8005ed6:	7013      	strb	r3, [r2, #0]
}
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	bf00      	nop
 8005edc:	20002e34 	.word	0x20002e34
 8005ee0:	40005000 	.word	0x40005000
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	40004400 	.word	0x40004400
 8005eec:	0802ce88 	.word	0x0802ce88
 8005ef0:	20003004 	.word	0x20003004
 8005ef4:	20002ebc 	.word	0x20002ebc
 8005ef8:	20002ec8 	.word	0x20002ec8
 8005efc:	20002e38 	.word	0x20002e38
 8005f00:	0802ce6c 	.word	0x0802ce6c
 8005f04:	20002e66 	.word	0x20002e66
 8005f08:	0802ce40 	.word	0x0802ce40
 8005f0c:	20002fdc 	.word	0x20002fdc
 8005f10:	2000300c 	.word	0x2000300c
 8005f14:	20002e3e 	.word	0x20002e3e
 8005f18:	20003460 	.word	0x20003460

08005f1c <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f1c:	4926      	ldr	r1, [pc, #152]	; (8005fb8 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f1e:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f22:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005f24:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f26:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005f28:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005f2a:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005f2c:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f2e:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005f30:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005f32:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005f34:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005f36:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005f38:	d02b      	beq.n	8005f92 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8005f3a:	4920      	ldr	r1, [pc, #128]	; (8005fbc <HAL_UART_ErrorCallback+0xa0>)
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	d00f      	beq.n	8005f60 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005f40:	491f      	ldr	r1, [pc, #124]	; (8005fc0 <HAL_UART_ErrorCallback+0xa4>)
 8005f42:	428b      	cmp	r3, r1
 8005f44:	d000      	beq.n	8005f48 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8005f48:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8005f4c:	481d      	ldr	r0, [pc, #116]	; (8005fc4 <HAL_UART_ErrorCallback+0xa8>)
 8005f4e:	f020 fa01 	bl	8026354 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	2202      	movs	r2, #2
 8005f56:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8005f58:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005f5a:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8005f5c:	621d      	str	r5, [r3, #32]
}
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8005f60:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_UART_ErrorCallback+0xac>)
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d1ee      	bne.n	8005f46 <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8005f68:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_UART_ErrorCallback+0xb0>)
 8005f6e:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8005f70:	69da      	ldr	r2, [r3, #28]
 8005f72:	0710      	lsls	r0, r2, #28
 8005f74:	d500      	bpl.n	8005f78 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8005f76:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8005f78:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <HAL_UART_ErrorCallback+0xa0>)
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	0751      	lsls	r1, r2, #29
 8005f7e:	d501      	bpl.n	8005f84 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8005f80:	2204      	movs	r2, #4
 8005f82:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8005f84:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <HAL_UART_ErrorCallback+0xa0>)
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	0792      	lsls	r2, r2, #30
 8005f8a:	d5dc      	bpl.n	8005f46 <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8005f92:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005f96:	480e      	ldr	r0, [pc, #56]	; (8005fd0 <HAL_UART_ErrorCallback+0xb4>)
 8005f98:	f020 f9dc 	bl	8026354 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <HAL_UART_ErrorCallback+0xb8>)
 8005fa0:	480d      	ldr	r0, [pc, #52]	; (8005fd8 <HAL_UART_ErrorCallback+0xbc>)
 8005fa2:	f00e f9db 	bl	801435c <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 8005fa6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8005faa:	d0cc      	beq.n	8005f46 <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005fac:	4601      	mov	r1, r0
 8005fae:	480b      	ldr	r0, [pc, #44]	; (8005fdc <HAL_UART_ErrorCallback+0xc0>)
}
 8005fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005fb4:	f020 b9ce 	b.w	8026354 <iprintf>
 8005fb8:	20002e34 	.word	0x20002e34
 8005fbc:	40005000 	.word	0x40005000
 8005fc0:	40011400 	.word	0x40011400
 8005fc4:	0802ceec 	.word	0x0802ceec
 8005fc8:	20001a68 	.word	0x20001a68
 8005fcc:	20001b1c 	.word	0x20001b1c
 8005fd0:	0802cea0 	.word	0x0802cea0
 8005fd4:	20003004 	.word	0x20003004
 8005fd8:	20002ed0 	.word	0x20002ed0
 8005fdc:	0802cec0 	.word	0x0802cec0

08005fe0 <nxt_loader>:

int nxt_abort = 0;			// 1 == abort
int nxt_blocksacked = 0;	// number of acks recieved by the LCD (every 4k bytes)

// attempt to load new LCD user firmware
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 8005fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4690      	mov	r8, r2
 8005fe6:	b083      	sub	sp, #12
	static char newfilename[48];
	int i;
	char lcdmod;

	printf("nextionloader: fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);
 8005fe8:	460a      	mov	r2, r1
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 8005fea:	4604      	mov	r4, r0
	printf("nextionloader: fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);
 8005fec:	4643      	mov	r3, r8
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 8005fee:	460f      	mov	r7, r1
	printf("nextionloader: fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4845      	ldr	r0, [pc, #276]	; (8006108 <nxt_loader+0x128>)
 8005ff4:	f020 f9ae 	bl	8026354 <iprintf>

	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 8005ff8:	f108 33ff 	add.w	r3, r8, #4294967295
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	d87c      	bhi.n	80060fa <nxt_loader+0x11a>

		printf("nxt_loader: nxt file length was bad\n");
		return (-1);
	}

	if (filename[0] == 0) {
 8006000:	7823      	ldrb	r3, [r4, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d073      	beq.n	80060ee <nxt_loader+0x10e>

		printf("nxt_loader: nxt file name was bad\n");
		return (-1);
	}

	if (host[0] == 0) {
 8006006:	783b      	ldrb	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d06a      	beq.n	80060e2 <nxt_loader+0x102>
		printf("nxt_loader: nxt host name was bad\n");
		return (-1);
	}

	lcdmod = 'Z';
	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 800600c:	220a      	movs	r2, #10
 800600e:	493f      	ldr	r1, [pc, #252]	; (800610c <nxt_loader+0x12c>)
 8006010:	483f      	ldr	r0, [pc, #252]	; (8006110 <nxt_loader+0x130>)
 8006012:	f021 f973 	bl	80272fc <strncmp>
 8006016:	2800      	cmp	r0, #0
 8006018:	d051      	beq.n	80060be <nxt_loader+0xde>
		lcdmod = 'A';
	} else {
		if (!(strncmp(nex_model, "MX4832F035", 10)))
 800601a:	220a      	movs	r2, #10
 800601c:	493d      	ldr	r1, [pc, #244]	; (8006114 <nxt_loader+0x134>)
 800601e:	483c      	ldr	r0, [pc, #240]	; (8006110 <nxt_loader+0x130>)
 8006020:	f021 f96c 	bl	80272fc <strncmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	bf14      	ite	ne
 8006028:	225a      	movne	r2, #90	; 0x5a
 800602a:	2242      	moveq	r2, #66	; 0x42
			lcdmod = 'B';
	}

	sprintf(newfilename, "/firmware/%s-%04u-%c%u.tft", lcdfile, newbuild, lcdmod, lcdbuildno);
 800602c:	493a      	ldr	r1, [pc, #232]	; (8006118 <nxt_loader+0x138>)
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
	osDelay(100);
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
	nxt_abort = 0;
	nxt_blocksacked = 0;
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 800602e:	f640 34b8 	movw	r4, #3000	; 0xbb8
	sprintf(newfilename, "/firmware/%s-%04u-%c%u.tft", lcdfile, newbuild, lcdmod, lcdbuildno);
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	4b39      	ldr	r3, [pc, #228]	; (800611c <nxt_loader+0x13c>)
 8006036:	6809      	ldr	r1, [r1, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a39      	ldr	r2, [pc, #228]	; (8006120 <nxt_loader+0x140>)
 800603c:	9101      	str	r1, [sp, #4]
 800603e:	4839      	ldr	r0, [pc, #228]	; (8006124 <nxt_loader+0x144>)
 8006040:	4939      	ldr	r1, [pc, #228]	; (8006128 <nxt_loader+0x148>)
 8006042:	f020 fb71 	bl	8026728 <siprintf>
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
 8006046:	463a      	mov	r2, r7
 8006048:	4936      	ldr	r1, [pc, #216]	; (8006124 <nxt_loader+0x144>)
 800604a:	4838      	ldr	r0, [pc, #224]	; (800612c <nxt_loader+0x14c>)
 800604c:	f020 f982 	bl	8026354 <iprintf>
	osDelay(100);
 8006050:	2064      	movs	r0, #100	; 0x64
 8006052:	f010 f9df 	bl	8016414 <osDelay>
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006056:	4d36      	ldr	r5, [pc, #216]	; (8006130 <nxt_loader+0x150>)
	nxt_abort = 0;
 8006058:	2200      	movs	r2, #0
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 800605a:	2302      	movs	r3, #2
	nxt_abort = 0;
 800605c:	4e35      	ldr	r6, [pc, #212]	; (8006134 <nxt_loader+0x154>)
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 800605e:	4639      	mov	r1, r7
	nxt_blocksacked = 0;
 8006060:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800614c <nxt_loader+0x16c>
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006064:	482f      	ldr	r0, [pc, #188]	; (8006124 <nxt_loader+0x144>)
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006066:	602b      	str	r3, [r5, #0]
	nxt_abort = 0;
 8006068:	6032      	str	r2, [r6, #0]
	nxt_blocksacked = 0;
 800606a:	f8c9 2000 	str.w	r2, [r9]
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 800606e:	f7fb fdf5 	bl	8001c5c <http_dlclient>

	for (i = 0; i < 3000; i++) {
 8006072:	e003      	b.n	800607c <nxt_loader+0x9c>
		osDelay(1);
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	bb63      	cbnz	r3, 80060d2 <nxt_loader+0xf2>
	for (i = 0; i < 3000; i++) {
 8006078:	3c01      	subs	r4, #1
 800607a:	d008      	beq.n	800608e <nxt_loader+0xae>
		osDelay(1);
 800607c:	2001      	movs	r0, #1
 800607e:	f010 f9c9 	bl	8016414 <osDelay>
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d0f5      	beq.n	8006074 <nxt_loader+0x94>
			break;
		}		// see if file downloader returned an error before starting LCD upload
	}
	if ((nxt_abort) || (http_downloading == NOT_LOADING)) {
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	bb12      	cbnz	r2, 80060d2 <nxt_loader+0xf2>
 800608c:	b30b      	cbz	r3, 80060d2 <nxt_loader+0xf2>
		printf("nxt_loader: Server aborted before sending nxt file\n");
		http_downloading = NOT_LOADING;
		return (-1);
	}
	http_downloading = NXT_LOADING;
 800608e:	2303      	movs	r3, #3
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 8006090:	4640      	mov	r0, r8
	http_downloading = NXT_LOADING;
 8006092:	602b      	str	r3, [r5, #0]
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 8006094:	f7fd fb32 	bl	80036fc <lcd_startdl>
	osDelay(600);				// wait > half a second for LCD to Ack
 8006098:	f44f 7016 	mov.w	r0, #600	; 0x258
 800609c:	f010 f9ba 	bl	8016414 <osDelay>
	if (nxt_blocksacked) {		// LCD acks the start, its now in DL mode
 80060a0:	f8d9 4000 	ldr.w	r4, [r9]
 80060a4:	b16c      	cbz	r4, 80060c2 <nxt_loader+0xe2>
		nxt_blocksacked = 0;		// reset counter
 80060a6:	2200      	movs	r2, #0
		http_dlclient(newfilename, host, (void*) 0);
 80060a8:	4639      	mov	r1, r7
 80060aa:	481e      	ldr	r0, [pc, #120]	; (8006124 <nxt_loader+0x144>)
	}

	// wait for transfer to complete
	// unblock http client

	return (0);
 80060ac:	4614      	mov	r4, r2
		nxt_blocksacked = 0;		// reset counter
 80060ae:	f8c9 2000 	str.w	r2, [r9]
		http_dlclient(newfilename, host, (void*) 0);
 80060b2:	f7fb fdd3 	bl	8001c5c <http_dlclient>
}
 80060b6:	4620      	mov	r0, r4
 80060b8:	b003      	add	sp, #12
 80060ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060be:	2241      	movs	r2, #65	; 0x41
 80060c0:	e7b4      	b.n	800602c <nxt_loader+0x4c>
		printf("nextionloader: Nextion download not acked start\n");
 80060c2:	481d      	ldr	r0, [pc, #116]	; (8006138 <nxt_loader+0x158>)
		http_downloading = NOT_LOADING;
 80060c4:	602c      	str	r4, [r5, #0]
		printf("nextionloader: Nextion download not acked start\n");
 80060c6:	f020 f9e1 	bl	802648c <puts>
}
 80060ca:	4620      	mov	r0, r4
 80060cc:	b003      	add	sp, #12
 80060ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("nxt_loader: Server aborted before sending nxt file\n");
 80060d2:	481a      	ldr	r0, [pc, #104]	; (800613c <nxt_loader+0x15c>)
		return (-1);
 80060d4:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: Server aborted before sending nxt file\n");
 80060d8:	f020 f9d8 	bl	802648c <puts>
		http_downloading = NOT_LOADING;
 80060dc:	2300      	movs	r3, #0
 80060de:	602b      	str	r3, [r5, #0]
		return (-1);
 80060e0:	e7e9      	b.n	80060b6 <nxt_loader+0xd6>
		printf("nxt_loader: nxt host name was bad\n");
 80060e2:	4817      	ldr	r0, [pc, #92]	; (8006140 <nxt_loader+0x160>)
		return (-1);
 80060e4:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt host name was bad\n");
 80060e8:	f020 f9d0 	bl	802648c <puts>
		return (-1);
 80060ec:	e7e3      	b.n	80060b6 <nxt_loader+0xd6>
		printf("nxt_loader: nxt file name was bad\n");
 80060ee:	4815      	ldr	r0, [pc, #84]	; (8006144 <nxt_loader+0x164>)
		return (-1);
 80060f0:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file name was bad\n");
 80060f4:	f020 f9ca 	bl	802648c <puts>
		return (-1);
 80060f8:	e7dd      	b.n	80060b6 <nxt_loader+0xd6>
		printf("nxt_loader: nxt file length was bad\n");
 80060fa:	4813      	ldr	r0, [pc, #76]	; (8006148 <nxt_loader+0x168>)
		return (-1);
 80060fc:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file length was bad\n");
 8006100:	f020 f9c4 	bl	802648c <puts>
		return (-1);
 8006104:	e7d7      	b.n	80060b6 <nxt_loader+0xd6>
 8006106:	bf00      	nop
 8006108:	0802cf20 	.word	0x0802cf20
 800610c:	0802cfbc 	.word	0x0802cfbc
 8006110:	20001b28 	.word	0x20001b28
 8006114:	0802cfc8 	.word	0x0802cfc8
 8006118:	20002db4 	.word	0x20002db4
 800611c:	20002dd4 	.word	0x20002dd4
 8006120:	20001a70 	.word	0x20001a70
 8006124:	200030b0 	.word	0x200030b0
 8006128:	0802cfd4 	.word	0x0802cfd4
 800612c:	0802cff0 	.word	0x0802cff0
 8006130:	200018bc 	.word	0x200018bc
 8006134:	200030e0 	.word	0x200030e0
 8006138:	0802d07c 	.word	0x0802d07c
 800613c:	0802d048 	.word	0x0802d048
 8006140:	0802cf98 	.word	0x0802cf98
 8006144:	0802cf74 	.word	0x0802cf74
 8006148:	0802cf50 	.word	0x0802cf50
 800614c:	200030e4 	.word	0x200030e4

08006150 <nxt_rx_callback>:
//#define lcd_writeblock(nxtbuffer, residual) printf("%d ",residual)

// http callback for Nextion firmware download
// this gets called for each downloaded chunk received
//
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *buf;
	struct pbuf *q;
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 8006154:	2000      	movs	r0, #0
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8006156:	b08b      	sub	sp, #44	; 0x2c
 8006158:	4689      	mov	r9, r1
 800615a:	461c      	mov	r4, r3
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 800615c:	9007      	str	r0, [sp, #28]
	static int bytesinblocksent = 0, qlentot = 0, tot_sent = 0;
	static char nxtbuffer[NXDL_BUFF_SIZE];

//	printf("nxt_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800615e:	4617      	mov	r7, r2
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 8006160:	9008      	str	r0, [sp, #32]
	LWIP_ASSERT("p != NULL", p != NULL);
 8006162:	2a00      	cmp	r2, #0
 8006164:	f000 812a 	beq.w	80063bc <nxt_rx_callback+0x26c>
	if (err != ERR_OK) {
 8006168:	2c00      	cmp	r4, #0
 800616a:	f040 811e 	bne.w	80063aa <nxt_rx_callback+0x25a>
		return;
	}

//	printf("nxt_rx_callback1: nxt_abort=%d, blockssent=%d, nxt_blocksacked=%d, q->len=%d\n", nxt_abort, blockssent,	nxt_blocksacked, p->len);

	if (http_downloading == NXT_PRELOADING) {
 800616e:	4ba0      	ldr	r3, [pc, #640]	; (80063f0 <nxt_rx_callback+0x2a0>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	2a02      	cmp	r2, #2
 8006174:	d101      	bne.n	800617a <nxt_rx_callback+0x2a>
		http_downloading = NXT_LOADING;
 8006176:	2203      	movs	r2, #3
 8006178:	601a      	str	r2, [r3, #0]
	}

	if (nxt_abort) {
 800617a:	4a9e      	ldr	r2, [pc, #632]	; (80063f4 <nxt_rx_callback+0x2a4>)
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	2a00      	cmp	r2, #0
 8006182:	f040 812f 	bne.w	80063e4 <nxt_rx_callback+0x294>
		http_downloading = NOT_LOADING;
		return (-1);
	}

	i = 0;
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	9304      	str	r3, [sp, #16]
			nxt_abort = 1;
			return (-1);
		}
	}
#endif
	for (q = p; q != NULL; q = q->next) {
 800618a:	2f00      	cmp	r7, #0
 800618c:	f000 8107 	beq.w	800639e <nxt_rx_callback+0x24e>
 8006190:	469b      	mov	fp, r3
 8006192:	4d99      	ldr	r5, [pc, #612]	; (80063f8 <nxt_rx_callback+0x2a8>)
 8006194:	463c      	mov	r4, r7
 8006196:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8006430 <nxt_rx_callback+0x2e0>
 800619a:	f1c5 0302 	rsb	r3, r5, #2
 800619e:	465a      	mov	r2, fp
 80061a0:	9302      	str	r3, [sp, #8]
		qlentot += q->len;
 80061a2:	8963      	ldrh	r3, [r4, #10]
 80061a4:	f8d8 1000 	ldr.w	r1, [r8]
		tlen = q->tot_len;
 80061a8:	8920      	ldrh	r0, [r4, #8]
		qlentot += q->len;
 80061aa:	4419      	add	r1, r3
		tlen = q->tot_len;
 80061ac:	9007      	str	r0, [sp, #28]
		qlentot += q->len;
 80061ae:	f8c8 1000 	str.w	r1, [r8]
		len = q->len;
 80061b2:	9308      	str	r3, [sp, #32]

		if (nxt_abort == 0) { // we need to upload this data to the NXT
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d148      	bne.n	800624a <nxt_rx_callback+0xfa>

			if (residual) {				// residual data from last call to send first
 80061b8:	4990      	ldr	r1, [pc, #576]	; (80063fc <nxt_rx_callback+0x2ac>)
 80061ba:	6809      	ldr	r1, [r1, #0]
 80061bc:	2900      	cmp	r1, #0
 80061be:	d156      	bne.n	800626e <nxt_rx_callback+0x11e>
			pktlen = q->len;

			for (i = 0; i < sizeof(nxtbuffer); i++)
				nxtbuffer[i] = 0xAA;

			if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 80061c0:	4e8f      	ldr	r6, [pc, #572]	; (8006400 <nxt_rx_callback+0x2b0>)
 80061c2:	f8df b270 	ldr.w	fp, [pc, #624]	; 8006434 <nxt_rx_callback+0x2e4>
 80061c6:	6831      	ldr	r1, [r6, #0]
			pktlen = q->len;
 80061c8:	9305      	str	r3, [sp, #20]
			for (i = 0; i < sizeof(nxtbuffer); i++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	9b04      	ldr	r3, [sp, #16]
 80061d0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80061d4:	d209      	bcs.n	80061ea <nxt_rx_callback+0x9a>
				nxtbuffer[i] = 0xAA;
 80061d6:	22aa      	movs	r2, #170	; 0xaa
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	54ea      	strb	r2, [r5, r3]
			for (i = 0; i < sizeof(nxtbuffer); i++)
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	3301      	adds	r3, #1
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	9b04      	ldr	r3, [sp, #16]
 80061e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80061e8:	d3f6      	bcc.n	80061d8 <nxt_rx_callback+0x88>
			if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 80061ea:	9b05      	ldr	r3, [sp, #20]
 80061ec:	440b      	add	r3, r1
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	f300 809b 	bgt.w	800632c <nxt_rx_callback+0x1dc>
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
					nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
				}

			} else {
				len = pktlen;		// just try to send what we have got
 80061f6:	9b05      	ldr	r3, [sp, #20]
			}

			tot_sent += len;
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 80061f8:	6860      	ldr	r0, [r4, #4]
				len = pktlen;		// just try to send what we have got
 80061fa:	9308      	str	r3, [sp, #32]
			tot_sent += len;
 80061fc:	9a08      	ldr	r2, [sp, #32]
 80061fe:	f8db 3000 	ldr.w	r3, [fp]
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8006202:	9908      	ldr	r1, [sp, #32]
			tot_sent += len;
 8006204:	4413      	add	r3, r2
 8006206:	f8cb 3000 	str.w	r3, [fp]
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 800620a:	f7fb ffa7 	bl	800215c <lcd_writeblock>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	9306      	str	r3, [sp, #24]
 8006218:	f000 80b9 	beq.w	800638e <nxt_rx_callback+0x23e>
				printf("NXT Write1 failed from http client\n");
				nxt_abort = 1;
				return (-1);
			}
			while (txdmadone == 0)		// tx in progress
 800621c:	f8df a218 	ldr.w	sl, [pc, #536]	; 8006438 <nxt_rx_callback+0x2e8>
 8006220:	f8da 3000 	ldr.w	r3, [sl]
 8006224:	b933      	cbnz	r3, 8006234 <nxt_rx_callback+0xe4>
				osDelay(1);
 8006226:	2001      	movs	r0, #1
 8006228:	f010 f8f4 	bl	8016414 <osDelay>
			while (txdmadone == 0)		// tx in progress
 800622c:	f8da 3000 	ldr.w	r3, [sl]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f8      	beq.n	8006226 <nxt_rx_callback+0xd6>

			bytesinblocksent += len;
 8006234:	6832      	ldr	r2, [r6, #0]
 8006236:	9b08      	ldr	r3, [sp, #32]
 8006238:	4413      	add	r3, r2

			if (bytesinblocksent > 4096) {
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
			bytesinblocksent += len;
 800623e:	6033      	str	r3, [r6, #0]
			if (bytesinblocksent > 4096) {
 8006240:	dc3c      	bgt.n	80062bc <nxt_rx_callback+0x16c>
				printf("BLOCK OVERRUN\n");
			}

			if (bytesinblocksent == 4096) {
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d040      	beq.n	80062ca <nxt_rx_callback+0x17a>
				bytesinblocksent = 0;		// start new block
				blockssent++;
			}
		}
//		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
		down_total += q->len;			// downloaded but not necessarily all sent to lcd
 8006248:	8963      	ldrh	r3, [r4, #10]
 800624a:	4e6e      	ldr	r6, [pc, #440]	; (8006404 <nxt_rx_callback+0x2b4>)
		altcp_recved(pcb, p->tot_len);
 800624c:	4648      	mov	r0, r9
 800624e:	8939      	ldrh	r1, [r7, #8]
		down_total += q->len;			// downloaded but not necessarily all sent to lcd
 8006250:	6832      	ldr	r2, [r6, #0]
 8006252:	4413      	add	r3, r2
 8006254:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8006256:	f016 fc33 	bl	801cac0 <tcp_recved>
		pbuf_free(p);
 800625a:	4638      	mov	r0, r7
 800625c:	f015 ffb0 	bl	801c1c0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8006260:	6824      	ldr	r4, [r4, #0]
 8006262:	2c00      	cmp	r4, #0
 8006264:	f000 809b 	beq.w	800639e <nxt_rx_callback+0x24e>
		if (nxt_abort == 0) { // we need to upload this data to the NXT
 8006268:	4b62      	ldr	r3, [pc, #392]	; (80063f4 <nxt_rx_callback+0x2a4>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	e799      	b.n	80061a2 <nxt_rx_callback+0x52>
				tot_sent += residual;
 800626e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8006434 <nxt_rx_callback+0x2e4>
				if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 8006272:	4628      	mov	r0, r5
 8006274:	9201      	str	r2, [sp, #4]
				tot_sent += residual;
 8006276:	f8db 3000 	ldr.w	r3, [fp]
 800627a:	440b      	add	r3, r1
 800627c:	f8cb 3000 	str.w	r3, [fp]
				if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 8006280:	f7fb ff6c 	bl	800215c <lcd_writeblock>
 8006284:	1c42      	adds	r2, r0, #1
 8006286:	9006      	str	r0, [sp, #24]
 8006288:	9a01      	ldr	r2, [sp, #4]
 800628a:	f000 809e 	beq.w	80063ca <nxt_rx_callback+0x27a>
				bytesinblocksent += residual;
 800628e:	495b      	ldr	r1, [pc, #364]	; (80063fc <nxt_rx_callback+0x2ac>)
 8006290:	4e5b      	ldr	r6, [pc, #364]	; (8006400 <nxt_rx_callback+0x2b0>)
 8006292:	680b      	ldr	r3, [r1, #0]
				while (txdmadone == 0)		// tx in progress
 8006294:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8006438 <nxt_rx_callback+0x2e8>
				residual = 0;
 8006298:	600a      	str	r2, [r1, #0]
				bytesinblocksent += residual;
 800629a:	6831      	ldr	r1, [r6, #0]
 800629c:	4419      	add	r1, r3
				while (txdmadone == 0)		// tx in progress
 800629e:	f8da 3000 	ldr.w	r3, [sl]
				bytesinblocksent += residual;
 80062a2:	6031      	str	r1, [r6, #0]
				while (txdmadone == 0)		// tx in progress
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d17e      	bne.n	80063a6 <nxt_rx_callback+0x256>
					osDelay(1);
 80062a8:	2001      	movs	r0, #1
 80062aa:	f010 f8b3 	bl	8016414 <osDelay>
				while (txdmadone == 0)		// tx in progress
 80062ae:	f8da 3000 	ldr.w	r3, [sl]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f8      	beq.n	80062a8 <nxt_rx_callback+0x158>
			pktlen = q->len;
 80062b6:	8963      	ldrh	r3, [r4, #10]
			if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 80062b8:	6831      	ldr	r1, [r6, #0]
 80062ba:	e785      	b.n	80061c8 <nxt_rx_callback+0x78>
				printf("BLOCK OVERRUN\n");
 80062bc:	4852      	ldr	r0, [pc, #328]	; (8006408 <nxt_rx_callback+0x2b8>)
 80062be:	f020 f8e5 	bl	802648c <puts>
			if (bytesinblocksent == 4096) {
 80062c2:	6833      	ldr	r3, [r6, #0]
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c8:	d1be      	bne.n	8006248 <nxt_rx_callback+0xf8>
				lcd_rxdma();		// get any new characters received
 80062ca:	f7fb ff9f 	bl	800220c <lcd_rxdma>
				for (i = 0; i < 2000; i++) {
 80062ce:	2300      	movs	r3, #0
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062d8:	da4b      	bge.n	8006372 <nxt_rx_callback+0x222>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80062da:	f8df b160 	ldr.w	fp, [pc, #352]	; 800643c <nxt_rx_callback+0x2ec>
 80062de:	e006      	b.n	80062ee <nxt_rx_callback+0x19e>
				for (i = 0; i < 2000; i++) {
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	3301      	adds	r3, #1
 80062e4:	9304      	str	r3, [sp, #16]
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062ec:	da41      	bge.n	8006372 <nxt_rx_callback+0x222>
					ch = lcd_getc();
 80062ee:	f7fb ffcb 	bl	8002288 <lcd_getc>
 80062f2:	4603      	mov	r3, r0
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80062f4:	4658      	mov	r0, fp
					ch = lcd_getc();
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
					if (ch >= 0) {
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db05      	blt.n	800630a <nxt_rx_callback+0x1ba>
						if (ch == 0x05) {
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	2b05      	cmp	r3, #5
 8006302:	d036      	beq.n	8006372 <nxt_rx_callback+0x222>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 8006304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006306:	f020 f825 	bl	8026354 <iprintf>
					osDelay(1);
 800630a:	2001      	movs	r0, #1
 800630c:	f010 f882 	bl	8016414 <osDelay>
					lcd_rxdma();		// get any new characters received
 8006310:	f7fb ff7c 	bl	800220c <lcd_rxdma>
					if (i == 1999) {
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800631a:	429a      	cmp	r2, r3
 800631c:	d1e0      	bne.n	80062e0 <nxt_rx_callback+0x190>
						printf("MISSED ACK\n");
 800631e:	483b      	ldr	r0, [pc, #236]	; (800640c <nxt_rx_callback+0x2bc>)
 8006320:	f020 f8b4 	bl	802648c <puts>
						ch = -1;
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	9309      	str	r3, [sp, #36]	; 0x24
 800632a:	e7d9      	b.n	80062e0 <nxt_rx_callback+0x190>
				len = 4096 - bytesinblocksent;		// we only have to send len this time
 800632c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
				buf = q->payload;
 8006330:	6860      	ldr	r0, [r4, #4]
				len = 4096 - bytesinblocksent;		// we only have to send len this time
 8006332:	9108      	str	r1, [sp, #32]
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006334:	9b08      	ldr	r3, [sp, #32]
 8006336:	9304      	str	r3, [sp, #16]
 8006338:	9a04      	ldr	r2, [sp, #16]
 800633a:	9b05      	ldr	r3, [sp, #20]
 800633c:	429a      	cmp	r2, r3
 800633e:	f6bf af5d 	bge.w	80061fc <nxt_rx_callback+0xac>
 8006342:	4b2e      	ldr	r3, [pc, #184]	; (80063fc <nxt_rx_callback+0x2ac>)
 8006344:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	3a01      	subs	r2, #1
 800634c:	442a      	add	r2, r5
					nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	eb0e 0c02 	add.w	ip, lr, r2
 8006354:	5cc1      	ldrb	r1, [r0, r3]
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006356:	9b04      	ldr	r3, [sp, #16]
					nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8006358:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 800635c:	3301      	adds	r3, #1
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	9904      	ldr	r1, [sp, #16]
 8006362:	9b05      	ldr	r3, [sp, #20]
 8006364:	4299      	cmp	r1, r3
 8006366:	dbf2      	blt.n	800634e <nxt_rx_callback+0x1fe>
 8006368:	4b24      	ldr	r3, [pc, #144]	; (80063fc <nxt_rx_callback+0x2ac>)
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 800636a:	6860      	ldr	r0, [r4, #4]
 800636c:	f8c3 c000 	str.w	ip, [r3]
 8006370:	e744      	b.n	80061fc <nxt_rx_callback+0xac>
				if (ch < 0) {		// error
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	db2b      	blt.n	80063d0 <nxt_rx_callback+0x280>
					nxt_blocksacked++;
 8006378:	4925      	ldr	r1, [pc, #148]	; (8006410 <nxt_rx_callback+0x2c0>)
				bytesinblocksent = 0;		// start new block
 800637a:	2300      	movs	r3, #0
				blockssent++;
 800637c:	4a25      	ldr	r2, [pc, #148]	; (8006414 <nxt_rx_callback+0x2c4>)
				bytesinblocksent = 0;		// start new block
 800637e:	6033      	str	r3, [r6, #0]
					nxt_blocksacked++;
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	600b      	str	r3, [r1, #0]
				blockssent++;
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e75c      	b.n	8006248 <nxt_rx_callback+0xf8>
				printf("NXT Write1 failed from http client\n");
 800638e:	4603      	mov	r3, r0
 8006390:	4821      	ldr	r0, [pc, #132]	; (8006418 <nxt_rx_callback+0x2c8>)
				return (-1);
 8006392:	9303      	str	r3, [sp, #12]
				printf("NXT Write1 failed from http client\n");
 8006394:	f020 f87a 	bl	802648c <puts>
				nxt_abort = 1;
 8006398:	2301      	movs	r3, #1
 800639a:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <nxt_rx_callback+0x2a4>)
 800639c:	6013      	str	r3, [r2, #0]

//		p = p->next;
//		printf("nxt_rx_4: len=%d, tot=%d qlentot=%d\n",  len, down_total, qlentot);
	}
	return (0);
}
 800639e:	9803      	ldr	r0, [sp, #12]
 80063a0:	b00b      	add	sp, #44	; 0x2c
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pktlen = q->len;
 80063a6:	8963      	ldrh	r3, [r4, #10]
 80063a8:	e70e      	b.n	80061c8 <nxt_rx_callback+0x78>
		putchar('@');
 80063aa:	2040      	movs	r0, #64	; 0x40
 80063ac:	f01f ffea 	bl	8026384 <putchar>
		printlwiperr(err);
 80063b0:	4620      	mov	r0, r4
}
 80063b2:	b00b      	add	sp, #44	; 0x2c
 80063b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 80063b8:	f7fb bc34 	b.w	8001c24 <printlwiperr>
	LWIP_ASSERT("p != NULL", p != NULL);
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <nxt_rx_callback+0x2cc>)
 80063be:	227f      	movs	r2, #127	; 0x7f
 80063c0:	4917      	ldr	r1, [pc, #92]	; (8006420 <nxt_rx_callback+0x2d0>)
 80063c2:	4818      	ldr	r0, [pc, #96]	; (8006424 <nxt_rx_callback+0x2d4>)
 80063c4:	f01f ffc6 	bl	8026354 <iprintf>
 80063c8:	e6ce      	b.n	8006168 <nxt_rx_callback+0x18>
					printf("NXT Write2 failed from http client\n");
 80063ca:	4603      	mov	r3, r0
 80063cc:	4816      	ldr	r0, [pc, #88]	; (8006428 <nxt_rx_callback+0x2d8>)
 80063ce:	e7e0      	b.n	8006392 <nxt_rx_callback+0x242>
					return (-1);
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295
					nxt_abort = 1;
 80063d4:	2301      	movs	r3, #1
					printf("ABORT ERR ON ACK\n");
 80063d6:	4815      	ldr	r0, [pc, #84]	; (800642c <nxt_rx_callback+0x2dc>)
					return (-1);
 80063d8:	9203      	str	r2, [sp, #12]
					nxt_abort = 1;
 80063da:	4a06      	ldr	r2, [pc, #24]	; (80063f4 <nxt_rx_callback+0x2a4>)
 80063dc:	6013      	str	r3, [r2, #0]
					printf("ABORT ERR ON ACK\n");
 80063de:	f020 f855 	bl	802648c <puts>
					return (-1);
 80063e2:	e7dc      	b.n	800639e <nxt_rx_callback+0x24e>
		http_downloading = NOT_LOADING;
 80063e4:	2200      	movs	r2, #0
		return (-1);
 80063e6:	f04f 31ff 	mov.w	r1, #4294967295
		http_downloading = NOT_LOADING;
 80063ea:	601a      	str	r2, [r3, #0]
		return (-1);
 80063ec:	9103      	str	r1, [sp, #12]
 80063ee:	e7d6      	b.n	800639e <nxt_rx_callback+0x24e>
 80063f0:	200018bc 	.word	0x200018bc
 80063f4:	200030e0 	.word	0x200030e0
 80063f8:	200030e8 	.word	0x200030e8
 80063fc:	20003344 	.word	0x20003344
 8006400:	200030ac 	.word	0x200030ac
 8006404:	20001670 	.word	0x20001670
 8006408:	0802d110 	.word	0x0802d110
 800640c:	0802d134 	.word	0x0802d134
 8006410:	200030e4 	.word	0x200030e4
 8006414:	200030a8 	.word	0x200030a8
 8006418:	0802d0ec 	.word	0x0802d0ec
 800641c:	0802d0ac 	.word	0x0802d0ac
 8006420:	080468c4 	.word	0x080468c4
 8006424:	0802b034 	.word	0x0802b034
 8006428:	0802d0c8 	.word	0x0802d0c8
 800642c:	0802d140 	.word	0x0802d140
 8006430:	20003340 	.word	0x20003340
 8006434:	20003348 	.word	0x20003348
 8006438:	2000214c 	.word	0x2000214c
 800643c:	0802d120 	.word	0x0802d120

08006440 <nxt_update>:
	}
	return (lcd_sys0);
}

///  Check if LCD needs updating and update it if so
nxt_update() {
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (nex_model[0] == '\0') {
 8006442:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <nxt_update+0xb8>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d04d      	beq.n	80064e6 <nxt_update+0xa6>
	if (lcd_sys0 == -1) {
 800644a:	4c2c      	ldr	r4, [pc, #176]	; (80064fc <nxt_update+0xbc>)
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	d002      	beq.n	8006458 <nxt_update+0x18>
	return (lcd_sys0);
 8006452:	6823      	ldr	r3, [r4, #0]
	if (nxt_check() == -1) {		// we could not identify LCD
 8006454:	3301      	adds	r3, #1
 8006456:	d046      	beq.n	80064e6 <nxt_update+0xa6>
		printf("nxt_update: LCD not identified\n");
	} else {
		if (lcdbuildno == -2) {		// LCD user firmware might be corrupted
 8006458:	4f29      	ldr	r7, [pc, #164]	; (8006500 <nxt_update+0xc0>)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	3302      	adds	r3, #2
 800645e:	d047      	beq.n	80064f0 <nxt_update+0xb0>
			printf("LCD firmware corrupted?\n");
		}
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	f242 7230 	movw	r2, #10032	; 0x2730
 8006466:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 800646a:	ea4f 2123 	mov.w	r1, r3, asr #8
 800646e:	d10d      	bne.n	800648c <nxt_update+0x4c>
				(((lcd_sys0 & 0xff) != lcdbuildno)		// OR lcdbuildno != latest lcdbuildno  AND
 8006470:	6823      	ldr	r3, [r4, #0]
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 8006472:	683a      	ldr	r2, [r7, #0]
				(((lcd_sys0 & 0xff) != lcdbuildno)		// OR lcdbuildno != latest lcdbuildno  AND
 8006474:	b2db      	uxtb	r3, r3
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <nxt_update+0x42>
				&& ((lcd_sys0 >> 8) == BUILDNO)))			// its the same buildno as the STM
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	ebb1 2f23 	cmp.w	r1, r3, asr #8
 8006480:	d004      	beq.n	800648c <nxt_update+0x4c>
				osDelay(200);
				lcd_putsys0((BUILDNO << 8) | (lcdbuildno & 0xff));//  write back this new lcd build ver (NON VOLATILE IN LCD)
			}
			lcd_txblocked = 0;		// unblock LCD sending blocked
		} else {
			printf("LCD firmware matched stm firmware\n");
 8006482:	4820      	ldr	r0, [pc, #128]	; (8006504 <nxt_update+0xc4>)
		}
	}
}
 8006484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("LCD firmware matched stm firmware\n");
 8006488:	f020 b800 	b.w	802648c <puts>
			if (nxt_loader(fwfilename, loaderhost, lcdlen) == 0) {		// valid source file
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <nxt_update+0xc8>)
 800648e:	491f      	ldr	r1, [pc, #124]	; (800650c <nxt_update+0xcc>)
 8006490:	481f      	ldr	r0, [pc, #124]	; (8006510 <nxt_update+0xd0>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f7ff fda4 	bl	8005fe0 <nxt_loader>
 8006498:	bb08      	cbnz	r0, 80064de <nxt_update+0x9e>
				while ((http_downloading) && (nxt_abort == 0)) {
 800649a:	4c1e      	ldr	r4, [pc, #120]	; (8006514 <nxt_update+0xd4>)
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	b16b      	cbz	r3, 80064bc <nxt_update+0x7c>
 80064a0:	4e1d      	ldr	r6, [pc, #116]	; (8006518 <nxt_update+0xd8>)
					HAL_IWDG_Refresh(&hiwdg);
 80064a2:	4d1e      	ldr	r5, [pc, #120]	; (800651c <nxt_update+0xdc>)
 80064a4:	e006      	b.n	80064b4 <nxt_update+0x74>
 80064a6:	f007 fa53 	bl	800d950 <HAL_IWDG_Refresh>
					osDelay(5);
 80064aa:	2005      	movs	r0, #5
 80064ac:	f00f ffb2 	bl	8016414 <osDelay>
				while ((http_downloading) && (nxt_abort == 0)) {
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	b11b      	cbz	r3, 80064bc <nxt_update+0x7c>
 80064b4:	6833      	ldr	r3, [r6, #0]
					HAL_IWDG_Refresh(&hiwdg);
 80064b6:	4628      	mov	r0, r5
				while ((http_downloading) && (nxt_abort == 0)) {
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f4      	beq.n	80064a6 <nxt_update+0x66>
				osDelay(5000);
 80064bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80064c0:	f00f ffa8 	bl	8016414 <osDelay>
				printf("Attempting LCD re-sync\n");
 80064c4:	4816      	ldr	r0, [pc, #88]	; (8006520 <nxt_update+0xe0>)
 80064c6:	f01f ffe1 	bl	802648c <puts>
				nxt_baud();		// resync hardware
 80064ca:	f7fd fa1b 	bl	8003904 <nxt_baud>
				osDelay(200);
 80064ce:	20c8      	movs	r0, #200	; 0xc8
 80064d0:	f00f ffa0 	bl	8016414 <osDelay>
				lcd_putsys0((BUILDNO << 8) | (lcdbuildno & 0xff));//  write back this new lcd build ver (NON VOLATILE IN LCD)
 80064d4:	783b      	ldrb	r3, [r7, #0]
 80064d6:	4813      	ldr	r0, [pc, #76]	; (8006524 <nxt_update+0xe4>)
 80064d8:	4318      	orrs	r0, r3
 80064da:	f7fd f8e9 	bl	80036b0 <lcd_putsys0>
			lcd_txblocked = 0;		// unblock LCD sending blocked
 80064de:	4b12      	ldr	r3, [pc, #72]	; (8006528 <nxt_update+0xe8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("nxt_update: LCD not identified\n");
 80064e6:	4811      	ldr	r0, [pc, #68]	; (800652c <nxt_update+0xec>)
}
 80064e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("nxt_update: LCD not identified\n");
 80064ec:	f01f bfce 	b.w	802648c <puts>
			printf("LCD firmware corrupted?\n");
 80064f0:	480f      	ldr	r0, [pc, #60]	; (8006530 <nxt_update+0xf0>)
 80064f2:	f01f ffcb 	bl	802648c <puts>
 80064f6:	e7b3      	b.n	8006460 <nxt_update+0x20>
 80064f8:	20001b28 	.word	0x20001b28
 80064fc:	20000014 	.word	0x20000014
 8006500:	20002db4 	.word	0x20002db4
 8006504:	0802d1a4 	.word	0x0802d1a4
 8006508:	20001a90 	.word	0x20001a90
 800650c:	2000001c 	.word	0x2000001c
 8006510:	20001a30 	.word	0x20001a30
 8006514:	200018bc 	.word	0x200018bc
 8006518:	200030e0 	.word	0x200030e0
 800651c:	20002660 	.word	0x20002660
 8006520:	0802d18c 	.word	0x0802d18c
 8006524:	00273000 	.word	0x00273000
 8006528:	20001a6c 	.word	0x20001a6c
 800652c:	0802d154 	.word	0x0802d154
 8006530:	0802d174 	.word	0x0802d174
 8006534:	ffffffff 	.word	0xffffffff

08006538 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8006538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800653c:	ed2d 8b02 	vpush	{d8}
 8006540:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 8006542:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 8006544:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8006546:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800654a:	ae0c      	add	r6, sp, #48	; 0x30
 800654c:	4f6e      	ldr	r7, [pc, #440]	; (8006708 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800654e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8006730 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 8006552:	f00f ff5f 	bl	8016414 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8006556:	2301      	movs	r3, #1
 8006558:	9600      	str	r6, [sp, #0]
 800655a:	b2aa      	uxth	r2, r5
 800655c:	21c1      	movs	r1, #193	; 0xc1
 800655e:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8006560:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8006562:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8006566:	f007 f809 	bl	800d57c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800656a:	4604      	mov	r4, r0
 800656c:	2800      	cmp	r0, #0
 800656e:	f040 80a6 	bne.w	80066be <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8006572:	3501      	adds	r5, #1
 8006574:	2d04      	cmp	r5, #4
 8006576:	d1ee      	bne.n	8006556 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8006578:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800657c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8006580:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8006584:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8006588:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800658c:	485f      	ldr	r0, [pc, #380]	; (800670c <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800658e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006592:	495f      	ldr	r1, [pc, #380]	; (8006710 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8006594:	0992      	lsrs	r2, r2, #6
	t = tr;
 8006596:	099c      	lsrs	r4, r3, #6
	p = pr;
 8006598:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800659c:	4a5d      	ldr	r2, [pc, #372]	; (8006714 <getpressure115.part.0+0x1dc>)
	t = tr;
 800659e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80065a2:	119d      	asrs	r5, r3, #6
	p = pr;
 80065a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 80065a8:	2400      	movs	r4, #0
	t = tr;
 80065aa:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80065ae:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 80065b2:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 80065b6:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80065ba:	ed9d 7b08 	vldr	d7, [sp, #32]
 80065be:	ed91 4b00 	vldr	d4, [r1]
 80065c2:	4955      	ldr	r1, [pc, #340]	; (8006718 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 80065c4:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80065c6:	eea1 4b07 	vfma.f64	d4, d1, d7
 80065ca:	ed91 6b00 	vldr	d6, [r1]
 80065ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80065d2:	ed92 0b00 	vldr	d0, [r2]
 80065d6:	eeb0 7b46 	vmov.f64	d7, d6
 80065da:	ed9d 2b08 	vldr	d2, [sp, #32]
 80065de:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80065e2:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 80066d8 <getpressure115.part.0+0x1a0>
 80065e6:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80066e0 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80065ea:	eea0 7b02 	vfma.f64	d7, d0, d2
 80065ee:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80065f2:	ed9d 6b06 	vldr	d6, [sp, #24]
 80065f6:	eea6 5b03 	vfma.f64	d5, d6, d3
 80065fa:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80065fe:	ed9d 0b06 	vldr	d0, [sp, #24]
 8006602:	f01f fff3 	bl	80265ec <modf>
	t = tr * -0.1706 + 112.27; //C
 8006606:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800660a:	4944      	ldr	r1, [pc, #272]	; (800671c <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800660c:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8006610:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 8006614:	4b42      	ldr	r3, [pc, #264]	; (8006720 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 8006616:	2264      	movs	r2, #100	; 0x64
 8006618:	4842      	ldr	r0, [pc, #264]	; (8006724 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 800661a:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80066e8 <getpressure115.part.0+0x1b0>
 800661e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80066f0 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 8006622:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 8006626:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800662a:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80066f8 <getpressure115.part.0+0x1c0>
 800662e:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 8006632:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006636:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 800663a:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800663e:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8006700 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006642:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 8006646:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 800664a:	4b37      	ldr	r3, [pc, #220]	; (8006728 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 800664c:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8006650:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006654:	4935      	ldr	r1, [pc, #212]	; (800672c <getpressure115.part.0+0x1f4>)
	temperature = t;
 8006656:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 800665a:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800665e:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8006662:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006666:	ed9d 7b06 	vldr	d7, [sp, #24]
 800666a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 800666e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006672:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8006676:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800667a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 800667e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006682:	feb8 7b47 	vrinta.f64	d7, d7
 8006686:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 800668a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800668e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006692:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8006696:	ee16 3a10 	vmov	r3, s12
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80066a0:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 80066a4:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80066a6:	ee17 2a10 	vmov	r2, s14
}
 80066aa:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80066ac:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80066b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066b4:	b00f      	add	sp, #60	; 0x3c
 80066b6:	ecbd 8b02 	vpop	{d8}
 80066ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80066be:	4648      	mov	r0, r9
 80066c0:	4621      	mov	r1, r4
 80066c2:	f01f fe47 	bl	8026354 <iprintf>
			if (i == 3)
 80066c6:	2d03      	cmp	r5, #3
 80066c8:	f47f af53 	bne.w	8006572 <getpressure115.part.0+0x3a>
}
 80066cc:	4620      	mov	r0, r4
 80066ce:	b00f      	add	sp, #60	; 0x3c
 80066d0:	ecbd 8b02 	vpop	{d8}
 80066d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066d8:	04411044 	.word	0x04411044
 80066dc:	3fb04411 	.word	0x3fb04411
 80066e0:	00000000 	.word	0x00000000
 80066e4:	40490000 	.word	0x40490000
 80066e8:	86594af5 	.word	0x86594af5
 80066ec:	bfc5d638 	.word	0xbfc5d638
 80066f0:	ae147ae1 	.word	0xae147ae1
 80066f4:	405c1147 	.word	0x405c1147
 80066f8:	00000000 	.word	0x00000000
 80066fc:	40590000 	.word	0x40590000
 8006700:	00000000 	.word	0x00000000
 8006704:	40af4000 	.word	0x40af4000
 8006708:	2000257c 	.word	0x2000257c
 800670c:	20003370 	.word	0x20003370
 8006710:	20003358 	.word	0x20003358
 8006714:	20003360 	.word	0x20003360
 8006718:	20003350 	.word	0x20003350
 800671c:	200033ec 	.word	0x200033ec
 8006720:	200033f0 	.word	0x200033f0
 8006724:	200033fc 	.word	0x200033fc
 8006728:	200033f8 	.word	0x200033f8
 800672c:	2000300c 	.word	0x2000300c
 8006730:	0802d1c8 	.word	0x0802d1c8

08006734 <cycleleds>:
void cycleleds(void) {
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8006738:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800673a:	4f1c      	ldr	r7, [pc, #112]	; (80067ac <cycleleds+0x78>)
 800673c:	ac01      	add	r4, sp, #4
 800673e:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8006742:	ca07      	ldmia	r2, {r0, r1, r2}
 8006744:	4623      	mov	r3, r4
 8006746:	4626      	mov	r6, r4
 8006748:	c303      	stmia	r3!, {r0, r1}
 800674a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800674c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8006750:	4638      	mov	r0, r7
 8006752:	2200      	movs	r2, #0
 8006754:	f006 fa78 	bl	800cc48 <HAL_GPIO_WritePin>
		osDelay(140);
 8006758:	208c      	movs	r0, #140	; 0x8c
 800675a:	f00f fe5b 	bl	8016414 <osDelay>
	for (i = 0; i < 5; i++) {
 800675e:	42ae      	cmp	r6, r5
 8006760:	d1f4      	bne.n	800674c <cycleleds+0x18>
	osDelay(600);
 8006762:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006766:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8006768:	4f10      	ldr	r7, [pc, #64]	; (80067ac <cycleleds+0x78>)
	osDelay(600);
 800676a:	f00f fe53 	bl	8016414 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800676e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8006772:	4638      	mov	r0, r7
 8006774:	2201      	movs	r2, #1
 8006776:	f006 fa67 	bl	800cc48 <HAL_GPIO_WritePin>
		osDelay(140);
 800677a:	208c      	movs	r0, #140	; 0x8c
 800677c:	f00f fe4a 	bl	8016414 <osDelay>
	for (i = 0; i < 5; i++) {
 8006780:	42ae      	cmp	r6, r5
 8006782:	d1f4      	bne.n	800676e <cycleleds+0x3a>
	osDelay(500);
 8006784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8006788:	4e08      	ldr	r6, [pc, #32]	; (80067ac <cycleleds+0x78>)
	osDelay(500);
 800678a:	f00f fe43 	bl	8016414 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800678e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8006792:	4630      	mov	r0, r6
 8006794:	2200      	movs	r2, #0
 8006796:	f006 fa57 	bl	800cc48 <HAL_GPIO_WritePin>
		osDelay(140);
 800679a:	208c      	movs	r0, #140	; 0x8c
 800679c:	f00f fe3a 	bl	8016414 <osDelay>
	for (i = 0; i < 5; i++) {
 80067a0:	42ac      	cmp	r4, r5
 80067a2:	d1f4      	bne.n	800678e <cycleleds+0x5a>
}
 80067a4:	b005      	add	sp, #20
 80067a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a8:	0802a580 	.word	0x0802a580
 80067ac:	40020c00 	.word	0x40020c00

080067b0 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4604      	mov	r4, r0
 80067b4:	b082      	sub	sp, #8
	osDelay(5);
 80067b6:	2005      	movs	r0, #5
 80067b8:	f00f fe2c 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80067bc:	2201      	movs	r2, #1
 80067be:	2104      	movs	r1, #4
 80067c0:	482e      	ldr	r0, [pc, #184]	; (800687c <setpgagain+0xcc>)
 80067c2:	f006 fa41 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 80067c6:	2005      	movs	r0, #5
 80067c8:	f00f fe24 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80067cc:	2200      	movs	r2, #0
 80067ce:	2104      	movs	r1, #4
 80067d0:	482a      	ldr	r0, [pc, #168]	; (800687c <setpgagain+0xcc>)
 80067d2:	f006 fa39 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 80067d6:	2005      	movs	r0, #5
 80067d8:	f00f fe1c 	bl	8016414 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80067dc:	4928      	ldr	r1, [pc, #160]	; (8006880 <setpgagain+0xd0>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80067de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067e2:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80067e4:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80067e6:	4827      	ldr	r0, [pc, #156]	; (8006884 <setpgagain+0xd4>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80067e8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80067ec:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80067f0:	a901      	add	r1, sp, #4
 80067f2:	f009 fa2f 	bl	800fc54 <HAL_SPI_Transmit>
 80067f6:	bba0      	cbnz	r0, 8006862 <setpgagain+0xb2>
	osDelay(5);
 80067f8:	2005      	movs	r0, #5
 80067fa:	f00f fe0b 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80067fe:	2201      	movs	r2, #1
 8006800:	2104      	movs	r1, #4
 8006802:	481e      	ldr	r0, [pc, #120]	; (800687c <setpgagain+0xcc>)
 8006804:	f006 fa20 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 8006808:	2005      	movs	r0, #5
 800680a:	f00f fe03 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800680e:	481b      	ldr	r0, [pc, #108]	; (800687c <setpgagain+0xcc>)
 8006810:	2200      	movs	r2, #0
 8006812:	2104      	movs	r1, #4
 8006814:	f006 fa18 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 8006818:	2005      	movs	r0, #5
 800681a:	f00f fdfb 	bl	8016414 <osDelay>
	if (gain > 6) {		// might be a DC jump
 800681e:	2c06      	cmp	r4, #6
 8006820:	dd1c      	ble.n	800685c <setpgagain+0xac>
		sigsuppress = 8;		// prevent trigger for a while
 8006822:	4b19      	ldr	r3, [pc, #100]	; (8006888 <setpgagain+0xd8>)
 8006824:	2208      	movs	r2, #8
	if (gain > 7) {
 8006826:	2c07      	cmp	r4, #7
		sigsuppress = 8;		// prevent trigger for a while
 8006828:	601a      	str	r2, [r3, #0]
	if (gain > 7) {
 800682a:	d017      	beq.n	800685c <setpgagain+0xac>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 800682c:	f244 1001 	movw	r0, #16641	; 0x4101
 8006830:	f8ad 0004 	strh.w	r0, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8006834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006838:	2201      	movs	r2, #1
 800683a:	a901      	add	r1, sp, #4
 800683c:	4811      	ldr	r0, [pc, #68]	; (8006884 <setpgagain+0xd4>)
 800683e:	f009 fa09 	bl	800fc54 <HAL_SPI_Transmit>
 8006842:	b9a8      	cbnz	r0, 8006870 <setpgagain+0xc0>
	osDelay(5);
 8006844:	2005      	movs	r0, #5
 8006846:	f00f fde5 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 800684a:	2201      	movs	r2, #1
 800684c:	2104      	movs	r1, #4
 800684e:	480b      	ldr	r0, [pc, #44]	; (800687c <setpgagain+0xcc>)
 8006850:	f006 f9fa 	bl	800cc48 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <setpgagain+0xdc>)
 8006856:	801c      	strh	r4, [r3, #0]
}
 8006858:	b002      	add	sp, #8
 800685a:	bd10      	pop	{r4, pc}
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
 800685c:	f44f 4082 	mov.w	r0, #16640	; 0x4100
 8006860:	e7e6      	b.n	8006830 <setpgagain+0x80>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8006862:	4601      	mov	r1, r0
 8006864:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006868:	4809      	ldr	r0, [pc, #36]	; (8006890 <setpgagain+0xe0>)
 800686a:	f01f fd73 	bl	8026354 <iprintf>
 800686e:	e7c3      	b.n	80067f8 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8006870:	4601      	mov	r1, r0
 8006872:	4808      	ldr	r0, [pc, #32]	; (8006894 <setpgagain+0xe4>)
 8006874:	f01f fd6e 	bl	8026354 <iprintf>
 8006878:	e7e4      	b.n	8006844 <setpgagain+0x94>
 800687a:	bf00      	nop
 800687c:	40021800 	.word	0x40021800
 8006880:	0802d624 	.word	0x0802d624
 8006884:	20002680 	.word	0x20002680
 8006888:	20000780 	.word	0x20000780
 800688c:	200033e8 	.word	0x200033e8
 8006890:	0802d1ec 	.word	0x0802d1ec
 8006894:	0802d218 	.word	0x0802d218

08006898 <initpga>:
int initpga() {
 8006898:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800689a:	2201      	movs	r2, #1
int initpga() {
 800689c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800689e:	2104      	movs	r1, #4
 80068a0:	4826      	ldr	r0, [pc, #152]	; (800693c <initpga+0xa4>)
 80068a2:	f006 f9d1 	bl	800cc48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 80068a6:	2200      	movs	r2, #0
 80068a8:	2104      	movs	r1, #4
 80068aa:	4824      	ldr	r0, [pc, #144]	; (800693c <initpga+0xa4>)
 80068ac:	f006 f9cc 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(50);
 80068b0:	2032      	movs	r0, #50	; 0x32
 80068b2:	f00f fdaf 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80068b6:	2201      	movs	r2, #1
 80068b8:	2104      	movs	r1, #4
 80068ba:	4820      	ldr	r0, [pc, #128]	; (800693c <initpga+0xa4>)
 80068bc:	f006 f9c4 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 80068c0:	2005      	movs	r0, #5
 80068c2:	f00f fda7 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80068c6:	2200      	movs	r2, #0
 80068c8:	2104      	movs	r1, #4
 80068ca:	481c      	ldr	r0, [pc, #112]	; (800693c <initpga+0xa4>)
 80068cc:	f006 f9bc 	bl	800cc48 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 80068d0:	2000      	movs	r0, #0
 80068d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80068dc:	a901      	add	r1, sp, #4
 80068de:	4818      	ldr	r0, [pc, #96]	; (8006940 <initpga+0xa8>)
 80068e0:	f009 f9b8 	bl	800fc54 <HAL_SPI_Transmit>
 80068e4:	4604      	mov	r4, r0
 80068e6:	bb08      	cbnz	r0, 800692c <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80068e8:	2104      	movs	r1, #4
 80068ea:	2201      	movs	r2, #1
 80068ec:	4813      	ldr	r0, [pc, #76]	; (800693c <initpga+0xa4>)
 80068ee:	f006 f9ab 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(5);
 80068f2:	2005      	movs	r0, #5
 80068f4:	f00f fd8e 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80068f8:	4622      	mov	r2, r4
 80068fa:	2104      	movs	r1, #4
 80068fc:	480f      	ldr	r0, [pc, #60]	; (800693c <initpga+0xa4>)
 80068fe:	f006 f9a3 	bl	800cc48 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006902:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8006906:	2005      	movs	r0, #5
 8006908:	f00f fd84 	bl	8016414 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 800690c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006910:	2201      	movs	r2, #1
 8006912:	a901      	add	r1, sp, #4
 8006914:	480a      	ldr	r0, [pc, #40]	; (8006940 <initpga+0xa8>)
 8006916:	f8ad 4004 	strh.w	r4, [sp, #4]
 800691a:	f009 f99b 	bl	800fc54 <HAL_SPI_Transmit>
 800691e:	4604      	mov	r4, r0
 8006920:	b920      	cbnz	r0, 800692c <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8006922:	f7ff ff45 	bl	80067b0 <setpgagain>
	return (0);
 8006926:	4620      	mov	r0, r4
}
 8006928:	b002      	add	sp, #8
 800692a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 800692c:	4621      	mov	r1, r4
 800692e:	4805      	ldr	r0, [pc, #20]	; (8006944 <initpga+0xac>)
 8006930:	f01f fd10 	bl	8026354 <iprintf>
		return (1);
 8006934:	2001      	movs	r0, #1
}
 8006936:	b002      	add	sp, #8
 8006938:	bd10      	pop	{r4, pc}
 800693a:	bf00      	nop
 800693c:	40021800 	.word	0x40021800
 8006940:	20002680 	.word	0x20002680
 8006944:	0802d234 	.word	0x0802d234

08006948 <bumppga>:
int bumppga(int i) {
 8006948:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 800694a:	4d1f      	ldr	r5, [pc, #124]	; (80069c8 <bumppga+0x80>)
int bumppga(int i) {
 800694c:	b083      	sub	sp, #12
 800694e:	4604      	mov	r4, r0
	gain = pgagain;
 8006950:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006954:	b28b      	uxth	r3, r1
	gain = pgagain;
 8006956:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006958:	2b09      	cmp	r3, #9
 800695a:	d827      	bhi.n	80069ac <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <bumppga+0x84>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b0b      	cmp	r3, #11
 8006962:	d00c      	beq.n	800697e <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006964:	2c00      	cmp	r4, #0
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	da01      	bge.n	800696e <bumppga+0x26>
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd04      	ble.n	8006978 <bumppga+0x30>
 800696e:	2c00      	cmp	r4, #0
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	dd12      	ble.n	800699a <bumppga+0x52>
 8006974:	2b08      	cmp	r3, #8
 8006976:	dd10      	ble.n	800699a <bumppga+0x52>
	return (0);
 8006978:	2000      	movs	r0, #0
}
 800697a:	b003      	add	sp, #12
 800697c:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 800697e:	2907      	cmp	r1, #7
 8006980:	dd01      	ble.n	8006986 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8006982:	2307      	movs	r3, #7
 8006984:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8006986:	2c00      	cmp	r4, #0
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	da01      	bge.n	8006990 <bumppga+0x48>
 800698c:	2b00      	cmp	r3, #0
 800698e:	ddf3      	ble.n	8006978 <bumppga+0x30>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	2b06      	cmp	r3, #6
 8006994:	dd01      	ble.n	800699a <bumppga+0x52>
 8006996:	2c00      	cmp	r4, #0
 8006998:	dcee      	bgt.n	8006978 <bumppga+0x30>
			gain = gain + i;
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	4423      	add	r3, r4
 800699e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 80069a0:	9801      	ldr	r0, [sp, #4]
 80069a2:	f7ff ff05 	bl	80067b0 <setpgagain>
			return (i);
 80069a6:	4620      	mov	r0, r4
}
 80069a8:	b003      	add	sp, #12
 80069aa:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 80069ac:	4808      	ldr	r0, [pc, #32]	; (80069d0 <bumppga+0x88>)
 80069ae:	f01f fcd1 	bl	8026354 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <bumppga+0x84>)
		pgagain = 0;
 80069b4:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80069b6:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 80069b8:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80069ba:	2b0b      	cmp	r3, #11
 80069bc:	d0e3      	beq.n	8006986 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 80069be:	2c00      	cmp	r4, #0
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	dbd2      	blt.n	800696a <bumppga+0x22>
 80069c4:	e7d3      	b.n	800696e <bumppga+0x26>
 80069c6:	bf00      	nop
 80069c8:	200033e8 	.word	0x200033e8
 80069cc:	20002158 	.word	0x20002158
 80069d0:	0802d250 	.word	0x0802d250

080069d4 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 80069d4:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 80069d6:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 80069d8:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 80069da:	2100      	movs	r1, #0
 80069dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80069e0:	f88d 000c 	strb.w	r0, [sp, #12]
 80069e4:	2302      	movs	r3, #2
 80069e6:	f88d 100d 	strb.w	r1, [sp, #13]
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	21c0      	movs	r1, #192	; 0xc0
 80069ee:	4809      	ldr	r0, [pc, #36]	; (8006a14 <getpressure115+0x40>)
 80069f0:	9400      	str	r4, [sp, #0]
 80069f2:	f006 fc2f 	bl	800d254 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80069f6:	b928      	cbnz	r0, 8006a04 <getpressure115+0x30>
 80069f8:	f7ff fd9e 	bl	8006538 <getpressure115.part.0>
 80069fc:	4604      	mov	r4, r0
}
 80069fe:	4620      	mov	r0, r4
 8006a00:	b004      	add	sp, #16
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006a06:	4804      	ldr	r0, [pc, #16]	; (8006a18 <getpressure115+0x44>)
 8006a08:	f01f fca4 	bl	8026354 <iprintf>
}
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	b004      	add	sp, #16
 8006a10:	bd10      	pop	{r4, pc}
 8006a12:	bf00      	nop
 8006a14:	2000257c 	.word	0x2000257c
 8006a18:	0802d288 	.word	0x0802d288

08006a1c <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8006a22:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006a26:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006a2a:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8006a2e:	ac06      	add	r4, sp, #24
 8006a30:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006a34:	4f36      	ldr	r7, [pc, #216]	; (8006b10 <initpressure115+0xf4>)
 8006a36:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8006a3a:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006a3e:	eb09 0204 	add.w	r2, r9, r4
 8006a42:	2301      	movs	r3, #1
 8006a44:	9400      	str	r4, [sp, #0]
 8006a46:	21c0      	movs	r1, #192	; 0xc0
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	441c      	add	r4, r3
 8006a4e:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8006a52:	f006 fd93 	bl	800d57c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006a56:	4605      	mov	r5, r0
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d141      	bne.n	8006ae0 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8006a5c:	45a2      	cmp	sl, r4
 8006a5e:	d1ee      	bne.n	8006a3e <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8006a60:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006a64:	2b5a      	cmp	r3, #90	; 0x5a
 8006a66:	d04a      	beq.n	8006afe <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8006a68:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006a6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006a70:	badb      	revsh	r3, r3
 8006a72:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8006a76:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006a7a:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8006a7c:	109b      	asrs	r3, r3, #2
 8006a7e:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8006a80:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8006a82:	ee06 2a10 	vmov	s12, r2
 8006a86:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8006a8a:	ee07 3a10 	vmov	s14, r3
 8006a8e:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8006a94:	ee05 1a10 	vmov	s10, r1
 8006a98:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006a9c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8006a9e:	ee04 0a10 	vmov	s8, r0
 8006aa2:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8006aa8:	481c      	ldr	r0, [pc, #112]	; (8006b1c <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8006aaa:	491d      	ldr	r1, [pc, #116]	; (8006b20 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006aac:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8006ab0:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006ab4:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8006ab6:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8006aba:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8006abe:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006ac2:	f88d 2014 	strb.w	r2, [sp, #20]
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	aa05      	add	r2, sp, #20
 8006aca:	21c0      	movs	r1, #192	; 0xc0
 8006acc:	4810      	ldr	r0, [pc, #64]	; (8006b10 <initpressure115+0xf4>)
 8006ace:	f006 fbc1 	bl	800d254 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006ad2:	b968      	cbnz	r0, 8006af0 <initpressure115+0xd4>
 8006ad4:	f7ff fd30 	bl	8006538 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8006ad8:	4628      	mov	r0, r5
 8006ada:	b008      	add	sp, #32
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8006ae0:	4601      	mov	r1, r0
 8006ae2:	4810      	ldr	r0, [pc, #64]	; (8006b24 <initpressure115+0x108>)
 8006ae4:	f01f fc36 	bl	8026354 <iprintf>
}
 8006ae8:	4628      	mov	r0, r5
 8006aea:	b008      	add	sp, #32
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006af0:	480d      	ldr	r0, [pc, #52]	; (8006b28 <initpressure115+0x10c>)
 8006af2:	f01f fc2f 	bl	8026354 <iprintf>
}
 8006af6:	4628      	mov	r0, r5
 8006af8:	b008      	add	sp, #32
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8006afe:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8006b00:	480a      	ldr	r0, [pc, #40]	; (8006b2c <initpressure115+0x110>)
 8006b02:	f01f fc27 	bl	8026354 <iprintf>
}
 8006b06:	4628      	mov	r0, r5
 8006b08:	b008      	add	sp, #32
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000257c 	.word	0x2000257c
 8006b14:	20003370 	.word	0x20003370
 8006b18:	20003350 	.word	0x20003350
 8006b1c:	20003358 	.word	0x20003358
 8006b20:	20003360 	.word	0x20003360
 8006b24:	0802d2ac 	.word	0x0802d2ac
 8006b28:	0802d288 	.word	0x0802d288
 8006b2c:	0802d2dc 	.word	0x0802d2dc

08006b30 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8006b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8006b36:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8006b38:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006b3a:	4f46      	ldr	r7, [pc, #280]	; (8006c54 <getpressure3115+0x124>)
 8006b3c:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006b3e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8006c74 <getpressure3115+0x144>
	data[0] = 0x55;
 8006b42:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8006b46:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006b48:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8006b4c:	f00f fc62 	bl	8016414 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006b50:	2301      	movs	r3, #1
 8006b52:	2200      	movs	r2, #0
 8006b54:	21c0      	movs	r1, #192	; 0xc0
 8006b56:	4638      	mov	r0, r7
 8006b58:	9600      	str	r6, [sp, #0]
 8006b5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b5e:	f006 fd0d 	bl	800d57c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006b62:	4604      	mov	r4, r0
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d163      	bne.n	8006c30 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8006b68:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8006b6c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8006b6e:	071b      	lsls	r3, r3, #28
 8006b70:	d401      	bmi.n	8006b76 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8006b72:	2d04      	cmp	r5, #4
 8006b74:	d1e7      	bne.n	8006b46 <getpressure3115+0x16>
 8006b76:	2501      	movs	r5, #1
 8006b78:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006b7a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8006b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8006c54 <getpressure3115+0x124>
 8006b82:	46a9      	mov	r9, r5
 8006b84:	b2aa      	uxth	r2, r5
 8006b86:	2301      	movs	r3, #1
 8006b88:	21c0      	movs	r1, #192	; 0xc0
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8006b8e:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006b90:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8006b94:	f006 fcf2 	bl	800d57c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006b98:	4604      	mov	r4, r0
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d152      	bne.n	8006c44 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8006b9e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8006ba2:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8006ba4:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8006ba8:	d1ec      	bne.n	8006b84 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006baa:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8006bae:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006bb2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006bb6:	0209      	lsls	r1, r1, #8
 8006bb8:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8006bbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006bc8:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8006bca:	4923      	ldr	r1, [pc, #140]	; (8006c58 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006bcc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006bd0:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006bd2:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006bd4:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006bd6:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006bd8:	9805      	ldr	r0, [sp, #20]
 8006bda:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006bde:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006be2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006be6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	fba3 0202 	umull	r0, r2, r3, r2
 8006bf0:	0a12      	lsrs	r2, r2, #8
 8006bf2:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006bf4:	9a04      	ldr	r2, [sp, #16]
 8006bf6:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006bfa:	4819      	ldr	r0, [pc, #100]	; (8006c60 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8006c02:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8006c04:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006c08:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006c0e:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8006c10:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006c12:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8006c14:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8006c16:	0912      	lsrs	r2, r2, #4
 8006c18:	4813      	ldr	r0, [pc, #76]	; (8006c68 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8006c1a:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8006c1e:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8006c20:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <getpressure3115+0x13c>)
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	6013      	str	r3, [r2, #0]
}
 8006c2a:	b00c      	add	sp, #48	; 0x30
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006c30:	4601      	mov	r1, r0
 8006c32:	4640      	mov	r0, r8
 8006c34:	f01f fb8e 	bl	8026354 <iprintf>
			if (trys == 3)
 8006c38:	2d03      	cmp	r5, #3
 8006c3a:	d195      	bne.n	8006b68 <getpressure3115+0x38>
}
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	b00c      	add	sp, #48	; 0x30
 8006c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8006c44:	4601      	mov	r1, r0
 8006c46:	480a      	ldr	r0, [pc, #40]	; (8006c70 <getpressure3115+0x140>)
 8006c48:	f01f fb84 	bl	8026354 <iprintf>
}
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	b00c      	add	sp, #48	; 0x30
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	2000257c 	.word	0x2000257c
 8006c58:	2000300c 	.word	0x2000300c
 8006c5c:	10624dd3 	.word	0x10624dd3
 8006c60:	200033ec 	.word	0x200033ec
 8006c64:	200033f0 	.word	0x200033f0
 8006c68:	200033f8 	.word	0x200033f8
 8006c6c:	200033fc 	.word	0x200033fc
 8006c70:	0802d32c 	.word	0x0802d32c
 8006c74:	0802d304 	.word	0x0802d304

08006c78 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8006c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8006c7c:	2501      	movs	r5, #1
 8006c7e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006c82:	220c      	movs	r2, #12
 8006c84:	a908      	add	r1, sp, #32
 8006c86:	462b      	mov	r3, r5
 8006c88:	4832      	ldr	r0, [pc, #200]	; (8006d54 <initpressure3115+0xdc>)
 8006c8a:	9100      	str	r1, [sp, #0]
 8006c8c:	21c0      	movs	r1, #192	; 0xc0
 8006c8e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006c92:	f006 fc73 	bl	800d57c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d145      	bne.n	8006d26 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8006c9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006c9e:	2bc4      	cmp	r3, #196	; 0xc4
 8006ca0:	d003      	beq.n	8006caa <initpressure3115+0x32>
		return (HAL_ERROR);
 8006ca2:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	b00b      	add	sp, #44	; 0x2c
 8006ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8006caa:	4f2b      	ldr	r7, [pc, #172]	; (8006d58 <initpressure3115+0xe0>)
 8006cac:	aa05      	add	r2, sp, #20
 8006cae:	21c0      	movs	r1, #192	; 0xc0
 8006cb0:	4828      	ldr	r0, [pc, #160]	; (8006d54 <initpressure3115+0xdc>)
 8006cb2:	89bb      	ldrh	r3, [r7, #12]
 8006cb4:	9600      	str	r6, [sp, #0]
 8006cb6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f006 faca 	bl	800d254 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d136      	bne.n	8006d34 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8006cc6:	8a3b      	ldrh	r3, [r7, #16]
 8006cc8:	aa06      	add	r2, sp, #24
 8006cca:	21c0      	movs	r1, #192	; 0xc0
 8006ccc:	4821      	ldr	r0, [pc, #132]	; (8006d54 <initpressure3115+0xdc>)
 8006cce:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	9600      	str	r6, [sp, #0]
 8006cd6:	f006 fabd 	bl	800d254 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006cda:	4604      	mov	r4, r0
 8006cdc:	bb70      	cbnz	r0, 8006d3c <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8006cde:	8aba      	ldrh	r2, [r7, #20]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	21c0      	movs	r1, #192	; 0xc0
 8006ce4:	481b      	ldr	r0, [pc, #108]	; (8006d54 <initpressure3115+0xdc>)
 8006ce6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006cea:	aa07      	add	r2, sp, #28
 8006cec:	9600      	str	r6, [sp, #0]
 8006cee:	f006 fab1 	bl	800d254 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	bb50      	cbnz	r0, 8006d4c <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006cf6:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8006cf8:	2064      	movs	r0, #100	; 0x64
 8006cfa:	f00f fb8b 	bl	8016414 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006cfe:	462b      	mov	r3, r5
 8006d00:	9400      	str	r4, [sp, #0]
 8006d02:	462a      	mov	r2, r5
 8006d04:	21c0      	movs	r1, #192	; 0xc0
 8006d06:	4813      	ldr	r0, [pc, #76]	; (8006d54 <initpressure3115+0xdc>)
 8006d08:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006d0c:	f006 fc36 	bl	800d57c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006d10:	4604      	mov	r4, r0
 8006d12:	b9b8      	cbnz	r0, 8006d44 <initpressure3115+0xcc>
	result = getpressure3115();
 8006d14:	f7ff ff0c 	bl	8006b30 <getpressure3115>
	if (result != HAL_OK) {
 8006d18:	4604      	mov	r4, r0
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0c2      	beq.n	8006ca4 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8006d1e:	480f      	ldr	r0, [pc, #60]	; (8006d5c <initpressure3115+0xe4>)
 8006d20:	f01f fb18 	bl	8026354 <iprintf>
 8006d24:	e7be      	b.n	8006ca4 <initpressure3115+0x2c>
 8006d26:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8006d28:	480d      	ldr	r0, [pc, #52]	; (8006d60 <initpressure3115+0xe8>)
 8006d2a:	f01f fb13 	bl	8026354 <iprintf>
}
 8006d2e:	4620      	mov	r0, r4
 8006d30:	b00b      	add	sp, #44	; 0x2c
 8006d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8006d34:	480b      	ldr	r0, [pc, #44]	; (8006d64 <initpressure3115+0xec>)
 8006d36:	f01f fb0d 	bl	8026354 <iprintf>
		return (result);
 8006d3a:	e7b3      	b.n	8006ca4 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8006d3c:	480a      	ldr	r0, [pc, #40]	; (8006d68 <initpressure3115+0xf0>)
 8006d3e:	f01f fb09 	bl	8026354 <iprintf>
		return (result);
 8006d42:	e7af      	b.n	8006ca4 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8006d44:	4809      	ldr	r0, [pc, #36]	; (8006d6c <initpressure3115+0xf4>)
 8006d46:	f01f fb05 	bl	8026354 <iprintf>
		return (result);
 8006d4a:	e7ab      	b.n	8006ca4 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8006d4c:	4808      	ldr	r0, [pc, #32]	; (8006d70 <initpressure3115+0xf8>)
 8006d4e:	f01f fb01 	bl	8026354 <iprintf>
		return (result);
 8006d52:	e7a7      	b.n	8006ca4 <initpressure3115+0x2c>
 8006d54:	2000257c 	.word	0x2000257c
 8006d58:	0802a580 	.word	0x0802a580
 8006d5c:	0802d3c4 	.word	0x0802d3c4
 8006d60:	0802d26c 	.word	0x0802d26c
 8006d64:	0802d354 	.word	0x0802d354
 8006d68:	0802d370 	.word	0x0802d370
 8006d6c:	0802d3a8 	.word	0x0802d3a8
 8006d70:	0802d38c 	.word	0x0802d38c

08006d74 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8006d78:	4820      	ldr	r0, [pc, #128]	; (8006dfc <init_esp+0x88>)
 8006d7a:	f01f fb87 	bl	802648c <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8006d7e:	2201      	movs	r2, #1
 8006d80:	491f      	ldr	r1, [pc, #124]	; (8006e00 <init_esp+0x8c>)
 8006d82:	4820      	ldr	r0, [pc, #128]	; (8006e04 <init_esp+0x90>)
 8006d84:	f00d faea 	bl	801435c <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8006d88:	bb98      	cbnz	r0, 8006df2 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d90:	481d      	ldr	r0, [pc, #116]	; (8006e08 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006d92:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006d96:	f005 ff57 	bl	800cc48 <HAL_GPIO_WritePin>
	osDelay(20);
 8006d9a:	4c1c      	ldr	r4, [pc, #112]	; (8006e0c <init_esp+0x98>)
 8006d9c:	2014      	movs	r0, #20
 8006d9e:	4d1c      	ldr	r5, [pc, #112]	; (8006e10 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8006da0:	4e1c      	ldr	r6, [pc, #112]	; (8006e14 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8006da2:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8006da6:	f00f fb35 	bl	8016414 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006daa:	2201      	movs	r2, #1
 8006dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db0:	4815      	ldr	r0, [pc, #84]	; (8006e08 <init_esp+0x94>)
 8006db2:	f005 ff49 	bl	800cc48 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	e006      	b.n	8006dc8 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8006dba:	5cf0      	ldrb	r0, [r6, r3]
 8006dbc:	6021      	str	r1, [r4, #0]
 8006dbe:	f01f fae1 	bl	8026384 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	2b60      	cmp	r3, #96	; 0x60
 8006dc6:	d810      	bhi.n	8006dea <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8006dc8:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8006dca:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d1f4      	bne.n	8006dba <init_esp+0x46>
		osDelay(1);
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f00f fb1f 	bl	8016414 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8006dd6:	3f01      	subs	r7, #1
 8006dd8:	d1ed      	bne.n	8006db6 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8006dda:	20c8      	movs	r0, #200	; 0xc8
 8006ddc:	f00f fb1a 	bl	8016414 <osDelay>
	printf("\n");
 8006de0:	200a      	movs	r0, #10
}
 8006de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8006de6:	f01f bacd 	b.w	8026384 <putchar>
			espoutindex = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c4 8000 	str.w	r8, [r4]
 8006df0:	e7ea      	b.n	8006dc8 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8006df2:	4809      	ldr	r0, [pc, #36]	; (8006e18 <init_esp+0xa4>)
 8006df4:	f01f fb4a 	bl	802648c <puts>
 8006df8:	e7c7      	b.n	8006d8a <init_esp+0x16>
 8006dfa:	bf00      	nop
 8006dfc:	0802d3e4 	.word	0x0802d3e4
 8006e00:	20003378 	.word	0x20003378
 8006e04:	20002c1c 	.word	0x20002c1c
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	2000337c 	.word	0x2000337c
 8006e10:	200033e0 	.word	0x200033e0
 8006e14:	20003380 	.word	0x20003380
 8006e18:	0802d3f8 	.word	0x0802d3f8

08006e1c <uart6_rxdone>:
uart6_rxdone() {
 8006e1c:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8006e1e:	4c0b      	ldr	r4, [pc, #44]	; (8006e4c <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <uart6_rxdone+0x34>)
	i = esprxindex;
 8006e22:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8006e24:	7819      	ldrb	r1, [r3, #0]
 8006e26:	1c6b      	adds	r3, r5, #1
 8006e28:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8006e2a:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8006e2c:	5551      	strb	r1, [r2, r5]
 8006e2e:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8006e30:	d902      	bls.n	8006e38 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8006e32:	2200      	movs	r2, #0
 8006e34:	4613      	mov	r3, r2
 8006e36:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8006e38:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <uart6_rxdone+0x3c>)
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d000      	beq.n	8006e42 <uart6_rxdone+0x26>
}
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8006e42:	4806      	ldr	r0, [pc, #24]	; (8006e5c <uart6_rxdone+0x40>)
 8006e44:	f01f fb22 	bl	802648c <puts>
		esprxindex = i;
 8006e48:	6025      	str	r5, [r4, #0]
}
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	200033e0 	.word	0x200033e0
 8006e50:	20003378 	.word	0x20003378
 8006e54:	20003380 	.word	0x20003380
 8006e58:	2000337c 	.word	0x2000337c
 8006e5c:	0802d410 	.word	0x0802d410

08006e60 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8006e60:	b510      	push	{r4, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8006e66:	ac02      	add	r4, sp, #8
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f01f fcee 	bl	802684a <stpcpy>
	strcat(txbuf, "\r\n");
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <esp_cmd+0x44>)
 8006e70:	8819      	ldrh	r1, [r3, #0]
 8006e72:	789a      	ldrb	r2, [r3, #2]
 8006e74:	1b03      	subs	r3, r0, r4
 8006e76:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8006e78:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8006e7a:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8006e7c:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8006e7e:	480a      	ldr	r0, [pc, #40]	; (8006ea8 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8006e80:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8006e82:	f01f fa67 	bl	8026354 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8006e86:	9a01      	ldr	r2, [sp, #4]
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4808      	ldr	r0, [pc, #32]	; (8006eac <esp_cmd+0x4c>)
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	f00c f825 	bl	8012edc <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8006e92:	b908      	cbnz	r0, 8006e98 <esp_cmd+0x38>
}
 8006e94:	b006      	add	sp, #24
 8006e96:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8006e98:	4601      	mov	r1, r0
 8006e9a:	4805      	ldr	r0, [pc, #20]	; (8006eb0 <esp_cmd+0x50>)
 8006e9c:	f01f fa5a 	bl	8026354 <iprintf>
}
 8006ea0:	b006      	add	sp, #24
 8006ea2:	bd10      	pop	{r4, pc}
 8006ea4:	0802b158 	.word	0x0802b158
 8006ea8:	0802d42c 	.word	0x0802d42c
 8006eac:	20002c1c 	.word	0x20002c1c
 8006eb0:	0802d440 	.word	0x0802d440

08006eb4 <test_esp>:
void test_esp() {
 8006eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8006eb8:	4813      	ldr	r0, [pc, #76]	; (8006f08 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8006eba:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8006ebe:	f01f fae5 	bl	802648c <puts>
	osDelay(200);
 8006ec2:	4c12      	ldr	r4, [pc, #72]	; (8006f0c <test_esp+0x58>)
 8006ec4:	20c8      	movs	r0, #200	; 0xc8
 8006ec6:	4d12      	ldr	r5, [pc, #72]	; (8006f10 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8006ec8:	4e12      	ldr	r6, [pc, #72]	; (8006f14 <test_esp+0x60>)
			espoutindex = 0;
 8006eca:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8006ece:	f00f faa1 	bl	8016414 <osDelay>
	esp_cmd(getstatus);	// send the command
 8006ed2:	4811      	ldr	r0, [pc, #68]	; (8006f18 <test_esp+0x64>)
 8006ed4:	f7ff ffc4 	bl	8006e60 <esp_cmd>
	while (espoutindex != esprxindex) {
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	e006      	b.n	8006eea <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8006edc:	5cf0      	ldrb	r0, [r6, r3]
 8006ede:	6021      	str	r1, [r4, #0]
 8006ee0:	f01f fa50 	bl	8026384 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	2b60      	cmp	r3, #96	; 0x60
 8006ee8:	d80a      	bhi.n	8006f00 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 8006eea:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8006eec:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d1f4      	bne.n	8006edc <test_esp+0x28>
		osDelay(1);
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	f00f fa8e 	bl	8016414 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8006ef8:	3f01      	subs	r7, #1
 8006efa:	d1ed      	bne.n	8006ed8 <test_esp+0x24>
}
 8006efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c4 8000 	str.w	r8, [r4]
 8006f06:	e7f0      	b.n	8006eea <test_esp+0x36>
 8006f08:	0802d460 	.word	0x0802d460
 8006f0c:	2000337c 	.word	0x2000337c
 8006f10:	200033e0 	.word	0x200033e0
 8006f14:	20003380 	.word	0x20003380
 8006f18:	20000284 	.word	0x20000284

08006f1c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 8006f1c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 8006f1e:	4818      	ldr	r0, [pc, #96]	; (8006f80 <init_ds2485+0x64>)
void init_ds2485(void) {
 8006f20:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8006f22:	f01f fab3 	bl	802648c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8006f26:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8006f2c:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 8006f2e:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006f32:	2303      	movs	r3, #3
 8006f34:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8006f36:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006f3a:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 8006f3c:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006f40:	aa02      	add	r2, sp, #8
 8006f42:	4810      	ldr	r0, [pc, #64]	; (8006f84 <init_ds2485+0x68>)
 8006f44:	f006 f986 	bl	800d254 <HAL_I2C_Master_Transmit>
 8006f48:	b9a8      	cbnz	r0, 8006f76 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8006f4a:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8006f4c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8006f50:	f00f fa60 	bl	8016414 <osDelay>
		data[i] = 0xA5 + i;
 8006f54:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8006f56:	2181      	movs	r1, #129	; 0x81
 8006f58:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 8006f5a:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8006f5e:	aa02      	add	r2, sp, #8
 8006f60:	4808      	ldr	r0, [pc, #32]	; (8006f84 <init_ds2485+0x68>)
 8006f62:	9400      	str	r4, [sp, #0]
 8006f64:	f006 fa3e 	bl	800d3e4 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8006f68:	4601      	mov	r1, r0
 8006f6a:	b110      	cbz	r0, 8006f72 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8006f6c:	4806      	ldr	r0, [pc, #24]	; (8006f88 <init_ds2485+0x6c>)
 8006f6e:	f01f f9f1 	bl	8026354 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8006f72:	b006      	add	sp, #24
 8006f74:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8006f76:	4601      	mov	r1, r0
 8006f78:	4803      	ldr	r0, [pc, #12]	; (8006f88 <init_ds2485+0x6c>)
 8006f7a:	f01f f9eb 	bl	8026354 <iprintf>
 8006f7e:	e7e4      	b.n	8006f4a <init_ds2485+0x2e>
 8006f80:	0802d488 	.word	0x0802d488
 8006f84:	2000257c 	.word	0x2000257c
 8006f88:	0802d494 	.word	0x0802d494

08006f8c <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8006f92:	4821      	ldr	r0, [pc, #132]	; (8007018 <readp_ds2485+0x8c>)
 8006f94:	f01f fa7a 	bl	802648c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8006f98:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8006f9e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8006fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8006fa4:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 8006faa:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006fae:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8006fb0:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006fb4:	aa03      	add	r2, sp, #12
 8006fb6:	4819      	ldr	r0, [pc, #100]	; (800701c <readp_ds2485+0x90>)
 8006fb8:	f006 f94c 	bl	800d254 <HAL_I2C_Master_Transmit>
 8006fbc:	bb18      	cbnz	r0, 8007006 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 8006fbe:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8006fc0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8006fc4:	f00f fa26 	bl	8016414 <osDelay>
		data[i] = 0x5A + i;
 8006fc8:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8006fca:	b2a3      	uxth	r3, r4
 8006fcc:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 8006fce:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8006fd2:	2181      	movs	r1, #129	; 0x81
 8006fd4:	4811      	ldr	r0, [pc, #68]	; (800701c <readp_ds2485+0x90>)
 8006fd6:	9500      	str	r5, [sp, #0]
 8006fd8:	f006 fa04 	bl	800d3e4 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 8006fdc:	b9b8      	cbnz	r0, 800700e <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 8006fde:	4810      	ldr	r0, [pc, #64]	; (8007020 <readp_ds2485+0x94>)
 8006fe0:	f10d 040b 	add.w	r4, sp, #11
 8006fe4:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8006fe8:	4d0e      	ldr	r5, [pc, #56]	; (8007024 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 8006fea:	f01f f9b3 	bl	8026354 <iprintf>
		printf("0x%02x ", data[i]);
 8006fee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f01f f9ae 	bl	8026354 <iprintf>
	for (i = 0; i < 8; i++) {
 8006ff8:	42b4      	cmp	r4, r6
 8006ffa:	d1f8      	bne.n	8006fee <readp_ds2485+0x62>
	}
	printf("\n");
 8006ffc:	200a      	movs	r0, #10
 8006ffe:	f01f f9c1 	bl	8026384 <putchar>
}
 8007002:	b006      	add	sp, #24
 8007004:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <readp_ds2485+0x9c>)
 8007008:	f01f f9a4 	bl	8026354 <iprintf>
 800700c:	e7d7      	b.n	8006fbe <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 800700e:	4601      	mov	r1, r0
 8007010:	4806      	ldr	r0, [pc, #24]	; (800702c <readp_ds2485+0xa0>)
 8007012:	f01f f99f 	bl	8026354 <iprintf>
 8007016:	e7e2      	b.n	8006fde <readp_ds2485+0x52>
 8007018:	0802d4b8 	.word	0x0802d4b8
 800701c:	2000257c 	.word	0x2000257c
 8007020:	0802d518 	.word	0x0802d518
 8007024:	0802d540 	.word	0x0802d540
 8007028:	0802d4d0 	.word	0x0802d4d0
 800702c:	0802d4f4 	.word	0x0802d4f4

08007030 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8007030:	b530      	push	{r4, r5, lr}
 8007032:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8007034:	4c44      	ldr	r4, [pc, #272]	; (8007148 <initsplat+0x118>)
	cycleleds();
 8007036:	f7ff fb7d 	bl	8006734 <cycleleds>
	osDelay(500);
 800703a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800703e:	f00f f9e9 	bl	8016414 <osDelay>
	printf("Initsplat: LED cycle\n");
 8007042:	4842      	ldr	r0, [pc, #264]	; (800714c <initsplat+0x11c>)
 8007044:	f01f fa22 	bl	802648c <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	2b0b      	cmp	r3, #11
 800704c:	d062      	beq.n	8007114 <initsplat+0xe4>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 800704e:	4840      	ldr	r0, [pc, #256]	; (8007150 <initsplat+0x120>)
 8007050:	f01f fa1c 	bl	802648c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8007054:	4d3f      	ldr	r5, [pc, #252]	; (8007154 <initsplat+0x124>)
	initpga();
 8007056:	f7ff fc1f 	bl	8006898 <initpga>
	osDelay(500);
 800705a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800705e:	f00f f9d9 	bl	8016414 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8007062:	483d      	ldr	r0, [pc, #244]	; (8007158 <initsplat+0x128>)
 8007064:	f01f f976 	bl	8026354 <iprintf>
	psensor = PNONE;
 8007068:	2300      	movs	r3, #0
 800706a:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800706c:	f7ff fe04 	bl	8006c78 <initpressure3115>
 8007070:	b9d8      	cbnz	r0, 80070aa <initsplat+0x7a>
		printf("MPL3115A2 pressure sensor present\n\r");
 8007072:	483a      	ldr	r0, [pc, #232]	; (800715c <initsplat+0x12c>)
 8007074:	f01f f96e 	bl	8026354 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007078:	4a39      	ldr	r2, [pc, #228]	; (8007160 <initsplat+0x130>)
		psensor = MPL3115A2;
 800707a:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 800707c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8007080:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007082:	f043 0310 	orr.w	r3, r3, #16
 8007086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 800708a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800708e:	f00f f9c1 	bl	8016414 <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	2b16      	cmp	r3, #22
 8007096:	d01e      	beq.n	80070d6 <initsplat+0xa6>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8007098:	2200      	movs	r2, #0
 800709a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800709e:	4831      	ldr	r0, [pc, #196]	; (8007164 <initsplat+0x134>)
}
 80070a0:	b003      	add	sp, #12
 80070a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 80070a6:	f005 bdcf 	b.w	800cc48 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 80070aa:	f7ff fcb7 	bl	8006a1c <initpressure115>
 80070ae:	bb68      	cbnz	r0, 800710c <initsplat+0xdc>
			printf("MPL115A2 pressure sensor present\n\r");
 80070b0:	482d      	ldr	r0, [pc, #180]	; (8007168 <initsplat+0x138>)
 80070b2:	f01f f94f 	bl	8026354 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 80070b6:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <initsplat+0x130>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80070b8:	2101      	movs	r1, #1
	osDelay(500);
 80070ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 80070be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80070c2:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 80070c4:	f043 0308 	orr.w	r3, r3, #8
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 80070cc:	f00f f9a2 	bl	8016414 <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	2b16      	cmp	r3, #22
 80070d4:	d1e0      	bne.n	8007098 <initsplat+0x68>
		huart6.Init.BaudRate = 115200;
 80070d6:	4825      	ldr	r0, [pc, #148]	; (800716c <initsplat+0x13c>)
 80070d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80070dc:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 80070de:	f00c ff4d 	bl	8013f7c <HAL_UART_Init>
 80070e2:	bb68      	cbnz	r0, 8007140 <initsplat+0x110>
	init_ds2485();
 80070e4:	f7ff ff1a 	bl	8006f1c <init_ds2485>
	osDelay(80);
 80070e8:	2050      	movs	r0, #80	; 0x50
 80070ea:	f00f f993 	bl	8016414 <osDelay>
	readp_ds2485(8);
 80070ee:	2008      	movs	r0, #8
 80070f0:	f7ff ff4c 	bl	8006f8c <readp_ds2485>
		init_esp();
 80070f4:	f7ff fe3e 	bl	8006d74 <init_esp>
		osDelay(500);
 80070f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070fc:	f00f f98a 	bl	8016414 <osDelay>
		test_esp();
 8007100:	f7ff fed8 	bl	8006eb4 <test_esp>
		osDelay(200);
 8007104:	20c8      	movs	r0, #200	; 0xc8
 8007106:	f00f f985 	bl	8016414 <osDelay>
 800710a:	e7c5      	b.n	8007098 <initsplat+0x68>
			printf("NO pressure sensor present\n\r");
 800710c:	4818      	ldr	r0, [pc, #96]	; (8007170 <initsplat+0x140>)
 800710e:	f01f f921 	bl	8026354 <iprintf>
 8007112:	e7ba      	b.n	800708a <initsplat+0x5a>
		printf("Initsplat: Dual Mux\n\r");
 8007114:	4817      	ldr	r0, [pc, #92]	; (8007174 <initsplat+0x144>)
 8007116:	f01f f91d 	bl	8026354 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800711a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800711e:	2301      	movs	r3, #1
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <initsplat+0x148>)
 8007122:	9000      	str	r0, [sp, #0]
 8007124:	2188      	movs	r1, #136	; 0x88
 8007126:	4815      	ldr	r0, [pc, #84]	; (800717c <initsplat+0x14c>)
 8007128:	f006 f894 	bl	800d254 <HAL_I2C_Master_Transmit>
 800712c:	b920      	cbnz	r0, 8007138 <initsplat+0x108>
		osDelay(500);
 800712e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007132:	f00f f96f 	bl	8016414 <osDelay>
 8007136:	e78a      	b.n	800704e <initsplat+0x1e>
		printf("I2C HAL returned error 1\n\r");
 8007138:	4811      	ldr	r0, [pc, #68]	; (8007180 <initsplat+0x150>)
 800713a:	f01f f90b 	bl	8026354 <iprintf>
 800713e:	e7f6      	b.n	800712e <initsplat+0xfe>
			Error_Handler();
 8007140:	f7fd fb62 	bl	8004808 <Error_Handler>
 8007144:	e7ce      	b.n	80070e4 <initsplat+0xb4>
 8007146:	bf00      	nop
 8007148:	20002158 	.word	0x20002158
 800714c:	0802d548 	.word	0x0802d548
 8007150:	0802d578 	.word	0x0802d578
 8007154:	200033f4 	.word	0x200033f4
 8007158:	0802d59c 	.word	0x0802d59c
 800715c:	0802d5bc 	.word	0x0802d5bc
 8007160:	2000300c 	.word	0x2000300c
 8007164:	40021000 	.word	0x40021000
 8007168:	0802d5e0 	.word	0x0802d5e0
 800716c:	20002c1c 	.word	0x20002c1c
 8007170:	0802d604 	.word	0x0802d604
 8007174:	0802d560 	.word	0x0802d560
 8007178:	20000290 	.word	0x20000290
 800717c:	2000257c 	.word	0x2000257c
 8007180:	0802d26c 	.word	0x0802d26c

08007184 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007184:	4b1a      	ldr	r3, [pc, #104]	; (80071f0 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007186:	2200      	movs	r2, #0
 8007188:	210f      	movs	r1, #15
 800718a:	f06f 0001 	mvn.w	r0, #1
{
 800718e:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007190:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8007192:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007198:	641c      	str	r4, [r3, #64]	; 0x40
 800719a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800719c:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 80071a0:	9400      	str	r4, [sp, #0]
 80071a2:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80071a6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80071aa:	645c      	str	r4, [r3, #68]	; 0x44
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071b6:	f002 fc1d 	bl	80099f4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80071ba:	2200      	movs	r2, #0
 80071bc:	2106      	movs	r1, #6
 80071be:	2005      	movs	r0, #5
 80071c0:	f002 fc18 	bl	80099f4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80071c4:	2005      	movs	r0, #5
 80071c6:	f002 fc5f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	2106      	movs	r1, #6
 80071ce:	2005      	movs	r0, #5
 80071d0:	f002 fc10 	bl	80099f4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80071d4:	2005      	movs	r0, #5
 80071d6:	f002 fc57 	bl	8009a88 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80071da:	2051      	movs	r0, #81	; 0x51
 80071dc:	2200      	movs	r2, #0
 80071de:	2106      	movs	r1, #6
 80071e0:	f002 fc08 	bl	80099f4 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80071e4:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071e6:	b002      	add	sp, #8
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80071ec:	f002 bc4c 	b.w	8009a88 <HAL_NVIC_EnableIRQ>
 80071f0:	40023800 	.word	0x40023800

080071f4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80071f4:	4a49      	ldr	r2, [pc, #292]	; (800731c <HAL_ADC_MspInit+0x128>)
 80071f6:	6803      	ldr	r3, [r0, #0]
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80071fa:	4293      	cmp	r3, r2
{
 80071fc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071fe:	f04f 0400 	mov.w	r4, #0
 8007202:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8007206:	9409      	str	r4, [sp, #36]	; 0x24
 8007208:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800720c:	d007      	beq.n	800721e <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800720e:	4a44      	ldr	r2, [pc, #272]	; (8007320 <HAL_ADC_MspInit+0x12c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d045      	beq.n	80072a0 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8007214:	4a43      	ldr	r2, [pc, #268]	; (8007324 <HAL_ADC_MspInit+0x130>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d05f      	beq.n	80072da <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800721a:	b00d      	add	sp, #52	; 0x34
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800721e:	4b42      	ldr	r3, [pc, #264]	; (8007328 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007220:	2703      	movs	r7, #3
 8007222:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007224:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007228:	4840      	ldr	r0, [pc, #256]	; (800732c <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800722a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 800722e:	4e40      	ldr	r6, [pc, #256]	; (8007330 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007230:	645a      	str	r2, [r3, #68]	; 0x44
 8007232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007234:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007238:	9201      	str	r2, [sp, #4]
 800723a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800723c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	631a      	str	r2, [r3, #48]	; 0x30
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800724c:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800724e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007250:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007254:	f005 fa4c 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800725a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800725e:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8007260:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007262:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8007266:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800726c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800726e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007272:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007274:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007276:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800727a:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800727c:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800727e:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007286:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007288:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800728c:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007290:	f002 fec2 	bl	800a018 <HAL_DMA_Init>
 8007294:	2800      	cmp	r0, #0
 8007296:	d13d      	bne.n	8007314 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007298:	63ae      	str	r6, [r5, #56]	; 0x38
 800729a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800729c:	b00d      	add	sp, #52	; 0x34
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072a2:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072a4:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a6:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 80072a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
 80072b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80072b6:	9203      	str	r2, [sp, #12]
 80072b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072c4:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072cc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072d2:	f005 fa0d 	bl	800c6f0 <HAL_GPIO_Init>
}
 80072d6:	b00d      	add	sp, #52	; 0x34
 80072d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072dc:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072de:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 80072e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44
 80072ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ec:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80072f0:	9205      	str	r2, [sp, #20]
 80072f2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072fe:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007300:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007304:	4809      	ldr	r0, [pc, #36]	; (800732c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007306:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007308:	9306      	str	r3, [sp, #24]
 800730a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800730c:	f005 f9f0 	bl	800c6f0 <HAL_GPIO_Init>
}
 8007310:	b00d      	add	sp, #52	; 0x34
 8007312:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007314:	f7fd fa78 	bl	8004808 <Error_Handler>
 8007318:	e7be      	b.n	8007298 <HAL_ADC_MspInit+0xa4>
 800731a:	bf00      	nop
 800731c:	40012000 	.word	0x40012000
 8007320:	40012100 	.word	0x40012100
 8007324:	40012200 	.word	0x40012200
 8007328:	40023800 	.word	0x40023800
 800732c:	40020000 	.word	0x40020000
 8007330:	2000227c 	.word	0x2000227c
 8007334:	40026470 	.word	0x40026470

08007338 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8007338:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_CRC_MspInit+0x28>)
 800733a:	6802      	ldr	r2, [r0, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d000      	beq.n	8007342 <HAL_CRC_MspInit+0xa>
 8007340:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007342:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800734a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800734c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800735c:	b002      	add	sp, #8
 800735e:	4770      	bx	lr
 8007360:	40023000 	.word	0x40023000

08007364 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8007364:	4b2b      	ldr	r3, [pc, #172]	; (8007414 <HAL_DAC_MspInit+0xb0>)
 8007366:	6802      	ldr	r2, [r0, #0]
{
 8007368:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800736a:	429a      	cmp	r2, r3
{
 800736c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736e:	f04f 0400 	mov.w	r4, #0
 8007372:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007376:	9405      	str	r4, [sp, #20]
 8007378:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 800737c:	d001      	beq.n	8007382 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800737e:	b008      	add	sp, #32
 8007380:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8007382:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007386:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007388:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800738a:	4e23      	ldr	r6, [pc, #140]	; (8007418 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800738c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800738e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
 8007394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007396:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800739a:	9201      	str	r2, [sp, #4]
 800739c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80073a6:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073b0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b2:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b4:	4819      	ldr	r0, [pc, #100]	; (800741c <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073ba:	f005 f999 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80073be:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80073c4:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80073c6:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80073c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 80073cc:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073ce:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80073d0:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80073d2:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073d4:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073d6:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80073d8:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80073da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80073de:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073e0:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073e2:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80073e4:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80073e6:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80073e8:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073ea:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80073ee:	f002 fe13 	bl	800a018 <HAL_DMA_Init>
 80073f2:	b958      	cbnz	r0, 800740c <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80073f4:	2200      	movs	r2, #0
 80073f6:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80073f8:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80073fa:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80073fc:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80073fe:	f002 faf9 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007402:	2036      	movs	r0, #54	; 0x36
 8007404:	f002 fb40 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 8007408:	b008      	add	sp, #32
 800740a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800740c:	f7fd f9fc 	bl	8004808 <Error_Handler>
 8007410:	e7f0      	b.n	80073f4 <HAL_DAC_MspInit+0x90>
 8007412:	bf00      	nop
 8007414:	40007400 	.word	0x40007400
 8007418:	200022dc 	.word	0x200022dc
 800741c:	40020000 	.word	0x40020000
 8007420:	40026088 	.word	0x40026088

08007424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007424:	b530      	push	{r4, r5, lr}
 8007426:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	2100      	movs	r1, #0
{
 800742a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800742c:	2290      	movs	r2, #144	; 0x90
 800742e:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007430:	910b      	str	r1, [sp, #44]	; 0x2c
 8007432:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8007436:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800743a:	f01d ffed 	bl	8025418 <memset>
  if(hi2c->Instance==I2C1)
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4a4a      	ldr	r2, [pc, #296]	; (800756c <HAL_I2C_MspInit+0x148>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8007446:	4a4a      	ldr	r2, [pc, #296]	; (8007570 <HAL_I2C_MspInit+0x14c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d030      	beq.n	80074ae <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 800744c:	4a49      	ldr	r2, [pc, #292]	; (8007574 <HAL_I2C_MspInit+0x150>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d057      	beq.n	8007502 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007452:	b031      	add	sp, #196	; 0xc4
 8007454:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800745a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800745c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800745e:	f007 fc85 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007462:	2800      	cmp	r0, #0
 8007464:	d178      	bne.n	8007558 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007466:	4c44      	ldr	r4, [pc, #272]	; (8007578 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007468:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800746c:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800746e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007470:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007472:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007474:	f043 0302 	orr.w	r3, r3, #2
 8007478:	6323      	str	r3, [r4, #48]	; 0x30
 800747a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800747c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007480:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007484:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007486:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007488:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800748a:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800748c:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007490:	483a      	ldr	r0, [pc, #232]	; (800757c <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007492:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007494:	f005 f92c 	bl	800c6f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800749a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800749e:	6423      	str	r3, [r4, #64]	; 0x40
 80074a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	9b02      	ldr	r3, [sp, #8]
}
 80074aa:	b031      	add	sp, #196	; 0xc4
 80074ac:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80074ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074b2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80074b4:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074b6:	f007 fc59 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d14f      	bne.n	800755e <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074be:	4c2e      	ldr	r4, [pc, #184]	; (8007578 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074c0:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80074c2:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074c4:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074c8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074ca:	f043 0320 	orr.w	r3, r3, #32
 80074ce:	6323      	str	r3, [r4, #48]	; 0x30
 80074d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074d2:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074d4:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074d8:	4829      	ldr	r0, [pc, #164]	; (8007580 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80074dc:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80074de:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80074e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074e6:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074e8:	f005 f902 	bl	800c6f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80074ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074f2:	6423      	str	r3, [r4, #64]	; 0x40
 80074f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	9b04      	ldr	r3, [sp, #16]
}
 80074fe:	b031      	add	sp, #196	; 0xc4
 8007500:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007506:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007508:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800750a:	f007 fc2f 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 800750e:	bb48      	cbnz	r0, 8007564 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007510:	4c19      	ldr	r4, [pc, #100]	; (8007578 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007512:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007516:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007518:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800751a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800751c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800751e:	f043 0320 	orr.w	r3, r3, #32
 8007522:	6323      	str	r3, [r4, #48]	; 0x30
 8007524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007526:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800752a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007530:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007532:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007534:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007536:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800753a:	4811      	ldr	r0, [pc, #68]	; (8007580 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800753c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800753e:	f005 f8d7 	bl	800c6f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007548:	6423      	str	r3, [r4, #64]	; 0x40
 800754a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800754c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007550:	9306      	str	r3, [sp, #24]
 8007552:	9b06      	ldr	r3, [sp, #24]
}
 8007554:	b031      	add	sp, #196	; 0xc4
 8007556:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8007558:	f7fd f956 	bl	8004808 <Error_Handler>
 800755c:	e783      	b.n	8007466 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800755e:	f7fd f953 	bl	8004808 <Error_Handler>
 8007562:	e7ac      	b.n	80074be <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8007564:	f7fd f950 	bl	8004808 <Error_Handler>
 8007568:	e7d2      	b.n	8007510 <HAL_I2C_MspInit+0xec>
 800756a:	bf00      	nop
 800756c:	40005400 	.word	0x40005400
 8007570:	40005800 	.word	0x40005800
 8007574:	40006000 	.word	0x40006000
 8007578:	40023800 	.word	0x40023800
 800757c:	40020400 	.word	0x40020400
 8007580:	40021400 	.word	0x40021400

08007584 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <HAL_RNG_MspInit+0x24>)
 8007586:	6802      	ldr	r2, [r0, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d000      	beq.n	800758e <HAL_RNG_MspInit+0xa>
 800758c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <HAL_RNG_MspInit+0x28>)
{
 8007590:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8007592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007598:	635a      	str	r2, [r3, #52]	; 0x34
 800759a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80075a4:	b002      	add	sp, #8
 80075a6:	4770      	bx	lr
 80075a8:	50060800 	.word	0x50060800
 80075ac:	40023800 	.word	0x40023800

080075b0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 80075b0:	4a52      	ldr	r2, [pc, #328]	; (80076fc <HAL_SPI_MspInit+0x14c>)
 80075b2:	6803      	ldr	r3, [r0, #0]
{
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 80075b6:	4293      	cmp	r3, r2
{
 80075b8:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ba:	f04f 0400 	mov.w	r4, #0
 80075be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80075c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80075c6:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80075c8:	d007      	beq.n	80075da <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80075ca:	4a4d      	ldr	r2, [pc, #308]	; (8007700 <HAL_SPI_MspInit+0x150>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d038      	beq.n	8007642 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80075d0:	4a4c      	ldr	r2, [pc, #304]	; (8007704 <HAL_SPI_MspInit+0x154>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d071      	beq.n	80076ba <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80075d6:	b00f      	add	sp, #60	; 0x3c
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80075da:	4b4b      	ldr	r3, [pc, #300]	; (8007708 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80075de:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80075e0:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80075e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80075e4:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075e6:	4849      	ldr	r0, [pc, #292]	; (800770c <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80075e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
 80075ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80075f4:	9201      	str	r2, [sp, #4]
 80075f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075fa:	f042 0204 	orr.w	r2, r2, #4
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007602:	f002 0204 	and.w	r2, r2, #4
 8007606:	9202      	str	r2, [sp, #8]
 8007608:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800760a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760c:	f042 0208 	orr.w	r2, r2, #8
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007614:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007616:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800761a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007620:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007622:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007624:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007626:	f005 f863 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800762a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800762c:	a909      	add	r1, sp, #36	; 0x24
 800762e:	4838      	ldr	r0, [pc, #224]	; (8007710 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007630:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007632:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007634:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007636:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800763a:	f005 f859 	bl	800c6f0 <HAL_GPIO_Init>
}
 800763e:	b00f      	add	sp, #60	; 0x3c
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007644:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007646:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007648:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 800764a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800764c:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800764e:	4831      	ldr	r0, [pc, #196]	; (8007714 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
 8007656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007658:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800765c:	9204      	str	r2, [sp, #16]
 800765e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007662:	4332      	orrs	r2, r6
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
 8007666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007668:	4032      	ands	r2, r6
 800766a:	9205      	str	r2, [sp, #20]
 800766c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800766e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007670:	430a      	orrs	r2, r1
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007676:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007678:	400b      	ands	r3, r1
 800767a:	9306      	str	r3, [sp, #24]
 800767c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800767e:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007680:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007684:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007686:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007688:	f005 f832 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800768c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007690:	a909      	add	r1, sp, #36	; 0x24
 8007692:	481e      	ldr	r0, [pc, #120]	; (800770c <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007694:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007696:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800769a:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800769e:	f005 f827 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80076a2:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076a4:	a909      	add	r1, sp, #36	; 0x24
 80076a6:	481b      	ldr	r0, [pc, #108]	; (8007714 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80076aa:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076ae:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b2:	f005 f81d 	bl	800c6f0 <HAL_GPIO_Init>
}
 80076b6:	b00f      	add	sp, #60	; 0x3c
 80076b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076bc:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80076be:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076c0:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80076c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076c4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 80076c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ca:	645a      	str	r2, [r3, #68]	; 0x44
 80076cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80076d2:	9207      	str	r2, [sp, #28]
 80076d4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d8:	f042 0210 	orr.w	r2, r2, #16
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80076de:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e2:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076e4:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076e8:	480b      	ldr	r0, [pc, #44]	; (8007718 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80076ea:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80076f0:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076f4:	f004 fffc 	bl	800c6f0 <HAL_GPIO_Init>
}
 80076f8:	b00f      	add	sp, #60	; 0x3c
 80076fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fc:	40003800 	.word	0x40003800
 8007700:	40003c00 	.word	0x40003c00
 8007704:	40013400 	.word	0x40013400
 8007708:	40023800 	.word	0x40023800
 800770c:	40020800 	.word	0x40020800
 8007710:	40020c00 	.word	0x40020c00
 8007714:	40020400 	.word	0x40020400
 8007718:	40021000 	.word	0x40021000

0800771c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800771c:	4a73      	ldr	r2, [pc, #460]	; (80078ec <HAL_TIM_Base_MspInit+0x1d0>)
 800771e:	6803      	ldr	r3, [r0, #0]
{
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8007722:	4293      	cmp	r3, r2
{
 8007724:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007726:	f04f 0400 	mov.w	r4, #0
 800772a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800772e:	940d      	str	r4, [sp, #52]	; 0x34
 8007730:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8007734:	d021      	beq.n	800777a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773a:	d055      	beq.n	80077e8 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800773c:	4a6c      	ldr	r2, [pc, #432]	; (80078f0 <HAL_TIM_Base_MspInit+0x1d4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d027      	beq.n	8007792 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007742:	4a6c      	ldr	r2, [pc, #432]	; (80078f4 <HAL_TIM_Base_MspInit+0x1d8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d043      	beq.n	80077d0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8007748:	4a6b      	ldr	r2, [pc, #428]	; (80078f8 <HAL_TIM_Base_MspInit+0x1dc>)
 800774a:	4293      	cmp	r3, r2
 800774c:	f000 80a5 	beq.w	800789a <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8007750:	4a6a      	ldr	r2, [pc, #424]	; (80078fc <HAL_TIM_Base_MspInit+0x1e0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	f000 80b4 	beq.w	80078c0 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8007758:	4a69      	ldr	r2, [pc, #420]	; (8007900 <HAL_TIM_Base_MspInit+0x1e4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02d      	beq.n	80077ba <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800775e:	4a69      	ldr	r2, [pc, #420]	; (8007904 <HAL_TIM_Base_MspInit+0x1e8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d114      	bne.n	800778e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007764:	4b68      	ldr	r3, [pc, #416]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
 8007766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800776c:	641a      	str	r2, [r3, #64]	; 0x40
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	930a      	str	r3, [sp, #40]	; 0x28
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007778:	e009      	b.n	800778e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800777a:	4b63      	ldr	r3, [pc, #396]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
 800777c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	645a      	str	r2, [r3, #68]	; 0x44
 8007784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	9b01      	ldr	r3, [sp, #4]
}
 800778e:	b011      	add	sp, #68	; 0x44
 8007790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007792:	4b5d      	ldr	r3, [pc, #372]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8007794:	4622      	mov	r2, r4
 8007796:	2106      	movs	r1, #6
 8007798:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800779a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800779c:	f044 0402 	orr.w	r4, r4, #2
 80077a0:	641c      	str	r4, [r3, #64]	; 0x40
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80077ac:	f002 f922 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80077b0:	201d      	movs	r0, #29
 80077b2:	f002 f969 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 80077b6:	b011      	add	sp, #68	; 0x44
 80077b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80077ba:	4b53      	ldr	r3, [pc, #332]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
 80077bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077be:	f042 0220 	orr.w	r2, r2, #32
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	e7de      	b.n	800778e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80077d0:	4b4d      	ldr	r3, [pc, #308]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
 80077d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077d4:	f042 0204 	orr.w	r2, r2, #4
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	9306      	str	r3, [sp, #24]
 80077e2:	9b06      	ldr	r3, [sp, #24]
}
 80077e4:	b011      	add	sp, #68	; 0x44
 80077e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077e8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ec:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80077ee:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f0:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f6:	4845      	ldr	r0, [pc, #276]	; (800790c <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
 80077fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007800:	f002 0201 	and.w	r2, r2, #1
 8007804:	9202      	str	r2, [sp, #8]
 8007806:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	631a      	str	r2, [r3, #48]	; 0x30
 8007810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007812:	f002 0201 	and.w	r2, r2, #1
 8007816:	9203      	str	r2, [sp, #12]
 8007818:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800781a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800781c:	f042 0202 	orr.w	r2, r2, #2
 8007820:	631a      	str	r2, [r3, #48]	; 0x30
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007826:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800782a:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800782c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800782e:	2320      	movs	r3, #32
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007832:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007834:	f004 ff5c 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007838:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800783a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800783e:	4834      	ldr	r0, [pc, #208]	; (8007910 <HAL_TIM_Base_MspInit+0x1f4>)
 8007840:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007842:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007844:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007846:	4e33      	ldr	r6, [pc, #204]	; (8007914 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007848:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800784c:	f004 ff50 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007854:	4a30      	ldr	r2, [pc, #192]	; (8007918 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007856:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007858:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800785a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800785e:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8007860:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007864:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007866:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800786a:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800786c:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800786e:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007870:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007872:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007874:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007878:	f002 fbce 	bl	800a018 <HAL_DMA_Init>
 800787c:	2800      	cmp	r0, #0
 800787e:	d132      	bne.n	80078e6 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007880:	2200      	movs	r2, #0
 8007882:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8007884:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007886:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8007888:	62ee      	str	r6, [r5, #44]	; 0x2c
 800788a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800788c:	f002 f8b2 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007890:	201c      	movs	r0, #28
 8007892:	f002 f8f9 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 8007896:	b011      	add	sp, #68	; 0x44
 8007898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 800789a:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800789c:	4622      	mov	r2, r4
 800789e:	2105      	movs	r1, #5
 80078a0:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 80078a2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80078a4:	f044 0408 	orr.w	r4, r4, #8
 80078a8:	641c      	str	r4, [r3, #64]	; 0x40
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80078b4:	f002 f89e 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80078b8:	2032      	movs	r0, #50	; 0x32
 80078ba:	f002 f8e5 	bl	8009a88 <HAL_NVIC_EnableIRQ>
 80078be:	e766      	b.n	800778e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80078c2:	4622      	mov	r2, r4
 80078c4:	2106      	movs	r1, #6
 80078c6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80078c8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80078ca:	f044 0410 	orr.w	r4, r4, #16
 80078ce:	641c      	str	r4, [r3, #64]	; 0x40
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	9308      	str	r3, [sp, #32]
 80078d8:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80078da:	f002 f88b 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80078de:	2036      	movs	r0, #54	; 0x36
 80078e0:	f002 f8d2 	bl	8009a88 <HAL_NVIC_EnableIRQ>
 80078e4:	e753      	b.n	800778e <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 80078e6:	f7fc ff8f 	bl	8004808 <Error_Handler>
 80078ea:	e7c9      	b.n	8007880 <HAL_TIM_Base_MspInit+0x164>
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40000400 	.word	0x40000400
 80078f4:	40000800 	.word	0x40000800
 80078f8:	40000c00 	.word	0x40000c00
 80078fc:	40001000 	.word	0x40001000
 8007900:	40001400 	.word	0x40001400
 8007904:	40002000 	.word	0x40002000
 8007908:	40023800 	.word	0x40023800
 800790c:	40020000 	.word	0x40020000
 8007910:	40020400 	.word	0x40020400
 8007914:	2000233c 	.word	0x2000233c
 8007918:	40026028 	.word	0x40026028

0800791c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 800791c:	491d      	ldr	r1, [pc, #116]	; (8007994 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8007920:	6802      	ldr	r2, [r0, #0]
{
 8007922:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8007924:	428a      	cmp	r2, r1
{
 8007926:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007928:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800792c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007930:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8007932:	d004      	beq.n	800793e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8007934:	4b18      	ldr	r3, [pc, #96]	; (8007998 <HAL_TIM_MspPostInit+0x7c>)
 8007936:	429a      	cmp	r2, r3
 8007938:	d016      	beq.n	8007968 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800793a:	b008      	add	sp, #32
 800793c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800793e:	4b17      	ldr	r3, [pc, #92]	; (800799c <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007940:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007942:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007944:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007948:	f042 0204 	orr.w	r2, r2, #4
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007950:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007952:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007956:	4812      	ldr	r0, [pc, #72]	; (80079a0 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007958:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800795e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007960:	f004 fec6 	bl	800c6f0 <HAL_GPIO_Init>
}
 8007964:	b008      	add	sp, #32
 8007966:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007968:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800796e:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007972:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007976:	4322      	orrs	r2, r4
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800797c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800797e:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007980:	4808      	ldr	r0, [pc, #32]	; (80079a4 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007982:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007988:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800798a:	f004 feb1 	bl	800c6f0 <HAL_GPIO_Init>
}
 800798e:	b008      	add	sp, #32
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020800 	.word	0x40020800
 80079a4:	40020400 	.word	0x40020400

080079a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ae:	2100      	movs	r1, #0
{
 80079b0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079b2:	2290      	movs	r2, #144	; 0x90
 80079b4:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b6:	9117      	str	r1, [sp, #92]	; 0x5c
 80079b8:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 80079bc:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079c0:	f01d fd2a 	bl	8025418 <memset>
  if(huart->Instance==UART4)
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	4aa2      	ldr	r2, [pc, #648]	; (8007c50 <HAL_UART_MspInit+0x2a8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d070      	beq.n	8007aae <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 80079cc:	4aa1      	ldr	r2, [pc, #644]	; (8007c54 <HAL_UART_MspInit+0x2ac>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	f000 80c1 	beq.w	8007b56 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 80079d4:	4aa0      	ldr	r2, [pc, #640]	; (8007c58 <HAL_UART_MspInit+0x2b0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	f000 815e 	beq.w	8007c98 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 80079dc:	4a9f      	ldr	r2, [pc, #636]	; (8007c5c <HAL_UART_MspInit+0x2b4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80079e2:	4a9f      	ldr	r2, [pc, #636]	; (8007c60 <HAL_UART_MspInit+0x2b8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	f000 818e 	beq.w	8007d06 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80079ea:	4a9e      	ldr	r2, [pc, #632]	; (8007c64 <HAL_UART_MspInit+0x2bc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	f000 81b4 	beq.w	8007d5a <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80079f2:	4a9d      	ldr	r2, [pc, #628]	; (8007c68 <HAL_UART_MspInit+0x2c0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	f000 81df 	beq.w	8007db8 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80079fa:	b03c      	add	sp, #240	; 0xf0
 80079fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a04:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007a06:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a08:	f007 f9b0 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f040 8261 	bne.w	8007ed4 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8007a12:	4b96      	ldr	r3, [pc, #600]	; (8007c6c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007a14:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a16:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007a18:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8007a1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a1e:	4894      	ldr	r0, [pc, #592]	; (8007c70 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8007a20:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007a24:	6419      	str	r1, [r3, #64]	; 0x40
 8007a26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007a2c:	910a      	str	r1, [sp, #40]	; 0x28
 8007a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a32:	f041 0110 	orr.w	r1, r1, #16
 8007a36:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a38:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007a3c:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a46:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007a4a:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a4e:	f004 fe4f 	bl	800c6f0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a52:	4887      	ldr	r0, [pc, #540]	; (8007c70 <HAL_UART_MspInit+0x2c8>)
 8007a54:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007a56:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a58:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a5c:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a60:	f004 fe46 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8007a64:	4d83      	ldr	r5, [pc, #524]	; (8007c74 <HAL_UART_MspInit+0x2cc>)
 8007a66:	4a84      	ldr	r2, [pc, #528]	; (8007c78 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007a68:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007a6c:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007a6e:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007a72:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007a7a:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a80:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a82:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a86:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007a8a:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007a8e:	f002 fac3 	bl	800a018 <HAL_DMA_Init>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f040 8221 	bne.w	8007eda <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2103      	movs	r1, #3
 8007a9c:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8007a9e:	6725      	str	r5, [r4, #112]	; 0x70
 8007aa0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007aa2:	f001 ffa7 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8007aa6:	2053      	movs	r0, #83	; 0x53
 8007aa8:	f001 ffee 	bl	8009a88 <HAL_NVIC_EnableIRQ>
 8007aac:	e7a5      	b.n	80079fa <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007aae:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ab2:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007ab4:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ab6:	f007 f959 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f040 8179 	bne.w	8007db2 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8007ac0:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac4:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac6:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8007ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007aca:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007acc:	a913      	add	r1, sp, #76	; 0x4c
 8007ace:	486b      	ldr	r0, [pc, #428]	; (8007c7c <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8007ad0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ad8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aea:	f002 0201 	and.w	r2, r2, #1
 8007aee:	9202      	str	r2, [sp, #8]
 8007af0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007af4:	433a      	orrs	r2, r7
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
 8007af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afa:	403a      	ands	r2, r7
 8007afc:	9203      	str	r2, [sp, #12]
 8007afe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b02:	f042 0204 	orr.w	r2, r2, #4
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b0a:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b0c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007b10:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007b14:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b18:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007b1a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1c:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b20:	f004 fde6 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b28:	a913      	add	r1, sp, #76	; 0x4c
 8007b2a:	4855      	ldr	r0, [pc, #340]	; (8007c80 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007b2c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2e:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007b32:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b36:	f004 fddb 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b3e:	a913      	add	r1, sp, #76	; 0x4c
 8007b40:	4850      	ldr	r0, [pc, #320]	; (8007c84 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b42:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007b44:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007b46:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b48:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b4c:	f004 fdd0 	bl	800c6f0 <HAL_GPIO_Init>
}
 8007b50:	b03c      	add	sp, #240	; 0xf0
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b5a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007b5c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b5e:	f007 f905 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f040 81b0 	bne.w	8007ec8 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007b68:	4b40      	ldr	r3, [pc, #256]	; (8007c6c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b6a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b6e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8007b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b74:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b78:	a913      	add	r1, sp, #76	; 0x4c
 8007b7a:	4841      	ldr	r0, [pc, #260]	; (8007c80 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8007b7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40
 8007b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007b88:	9205      	str	r2, [sp, #20]
 8007b8a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8e:	4332      	orrs	r2, r6
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30
 8007b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b94:	4032      	ands	r2, r6
 8007b96:	9206      	str	r2, [sp, #24]
 8007b98:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9c:	f042 0204 	orr.w	r2, r2, #4
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bae:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb0:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb4:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bb8:	f004 fd9a 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bbc:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bbe:	4831      	ldr	r0, [pc, #196]	; (8007c84 <HAL_UART_MspInit+0x2dc>)
 8007bc0:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc2:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bc4:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007bc6:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007bc8:	4e2f      	ldr	r6, [pc, #188]	; (8007c88 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007bca:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007bcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bd0:	f004 fd8e 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007bd4:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007bda:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bdc:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007bde:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007be4:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007be6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bea:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bec:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007bf0:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bf4:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007bf8:	f002 fa0e 	bl	800a018 <HAL_DMA_Init>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 8160 	bne.w	8007ec2 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007c02:	4d23      	ldr	r5, [pc, #140]	; (8007c90 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007c08:	4922      	ldr	r1, [pc, #136]	; (8007c94 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c0a:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007c0c:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007c12:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c14:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007c16:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007c18:	6726      	str	r6, [r4, #112]	; 0x70
 8007c1a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c1c:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c1e:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c20:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c22:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c24:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c26:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c28:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007c2c:	f002 f9f4 	bl	800a018 <HAL_DMA_Init>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f040 8143 	bne.w	8007ebc <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007c36:	2200      	movs	r2, #0
 8007c38:	2107      	movs	r1, #7
 8007c3a:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8007c3c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007c3e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007c40:	f001 fed8 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007c44:	2035      	movs	r0, #53	; 0x35
 8007c46:	f001 ff1f 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 8007c4a:	b03c      	add	sp, #240	; 0xf0
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	40004c00 	.word	0x40004c00
 8007c54:	40005000 	.word	0x40005000
 8007c58:	40007800 	.word	0x40007800
 8007c5c:	40007c00 	.word	0x40007c00
 8007c60:	40004400 	.word	0x40004400
 8007c64:	40004800 	.word	0x40004800
 8007c68:	40011400 	.word	0x40011400
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40021000 	.word	0x40021000
 8007c74:	2000245c 	.word	0x2000245c
 8007c78:	400260a0 	.word	0x400260a0
 8007c7c:	40020000 	.word	0x40020000
 8007c80:	40020400 	.word	0x40020400
 8007c84:	40020800 	.word	0x40020800
 8007c88:	2000239c 	.word	0x2000239c
 8007c8c:	40026010 	.word	0x40026010
 8007c90:	200023fc 	.word	0x200023fc
 8007c94:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c9c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007c9e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ca0:	f007 f864 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 8112 	bne.w	8007ece <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8007caa:	4b8f      	ldr	r3, [pc, #572]	; (8007ee8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007cac:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007cae:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb0:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8007cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007cb4:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cb6:	488d      	ldr	r0, [pc, #564]	; (8007eec <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8007cb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8007cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007cc4:	9208      	str	r2, [sp, #32]
 8007cc6:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cca:	f042 0220 	orr.w	r2, r2, #32
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd0:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007cd4:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cd6:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007cd8:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cde:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ce4:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ce8:	f004 fd02 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007cec:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cee:	a913      	add	r1, sp, #76	; 0x4c
 8007cf0:	487e      	ldr	r0, [pc, #504]	; (8007eec <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf2:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007cf4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007cf6:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007cf8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cfc:	f004 fcf8 	bl	800c6f0 <HAL_GPIO_Init>
}
 8007d00:	b03c      	add	sp, #240	; 0xf0
 8007d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007d06:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d08:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007d0a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d0c:	f007 f82e 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f040 80e5 	bne.w	8007ee0 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d16:	4b74      	ldr	r3, [pc, #464]	; (8007ee8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d18:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007d1a:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d20:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
 8007d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d2a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007d2e:	920c      	str	r2, [sp, #48]	; 0x30
 8007d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d34:	f042 0208 	orr.w	r2, r2, #8
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d3a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d3e:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d40:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d44:	486a      	ldr	r0, [pc, #424]	; (8007ef0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007d46:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d48:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d4a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d4c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d4e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d50:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d54:	f004 fccc 	bl	800c6f0 <HAL_GPIO_Init>
 8007d58:	e64f      	b.n	80079fa <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d5e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007d60:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d62:	f007 f803 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f040 809c 	bne.w	8007ea4 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d6c:	4b5e      	ldr	r3, [pc, #376]	; (8007ee8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d6e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007d70:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d74:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d78:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8007d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d82:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007d86:	920e      	str	r2, [sp, #56]	; 0x38
 8007d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8c:	f042 0208 	orr.w	r2, r2, #8
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d92:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d96:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d98:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d9c:	4854      	ldr	r0, [pc, #336]	; (8007ef0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007d9e:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007da0:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007da2:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007da6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007da8:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007dac:	f004 fca0 	bl	800c6f0 <HAL_GPIO_Init>
 8007db0:	e623      	b.n	80079fa <HAL_UART_MspInit+0x52>
      Error_Handler();
 8007db2:	f7fc fd29 	bl	8004808 <Error_Handler>
 8007db6:	e683      	b.n	8007ac0 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dbc:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007dbe:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dc0:	f006 ffd4 	bl	800ed6c <HAL_RCCEx_PeriphCLKConfig>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d176      	bne.n	8007eb6 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007dc8:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007dca:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dcc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dce:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007dd2:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dd4:	4847      	ldr	r0, [pc, #284]	; (8007ef4 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8007dd6:	f042 0220 	orr.w	r2, r2, #32
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44
 8007ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dde:	f002 0220 	and.w	r2, r2, #32
 8007de2:	9210      	str	r2, [sp, #64]	; 0x40
 8007de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de8:	f042 0204 	orr.w	r2, r2, #4
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
 8007dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df0:	f002 0204 	and.w	r2, r2, #4
 8007df4:	9211      	str	r2, [sp, #68]	; 0x44
 8007df6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e00:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007e02:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e04:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e06:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007e08:	9312      	str	r3, [sp, #72]	; 0x48
 8007e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0c:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e10:	a913      	add	r1, sp, #76	; 0x4c
 8007e12:	f004 fc6d 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e16:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e18:	4837      	ldr	r0, [pc, #220]	; (8007ef8 <HAL_UART_MspInit+0x550>)
 8007e1a:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e1c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e22:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e24:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007e26:	4e35      	ldr	r6, [pc, #212]	; (8007efc <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e28:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e2c:	f004 fc60 	bl	800c6f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007e30:	4a33      	ldr	r2, [pc, #204]	; (8007f00 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007e32:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007e36:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007e38:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007e44:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e4a:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e4e:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e52:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007e56:	f002 f8df 	bl	800a018 <HAL_DMA_Init>
 8007e5a:	bb48      	cbnz	r0, 8007eb0 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007e5c:	4d29      	ldr	r5, [pc, #164]	; (8007f04 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007e5e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007e62:	4929      	ldr	r1, [pc, #164]	; (8007f08 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e64:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007e66:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007e6c:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e6e:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e70:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e72:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e74:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e7a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007e7c:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e7e:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e80:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007e82:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e84:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007e86:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007e88:	6726      	str	r6, [r4, #112]	; 0x70
 8007e8a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e8c:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007e90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e94:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007e98:	f002 f8be 	bl	800a018 <HAL_DMA_Init>
 8007e9c:	b928      	cbnz	r0, 8007eaa <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007e9e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007ea0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8007ea2:	e5aa      	b.n	80079fa <HAL_UART_MspInit+0x52>
      Error_Handler();
 8007ea4:	f7fc fcb0 	bl	8004808 <Error_Handler>
 8007ea8:	e760      	b.n	8007d6c <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8007eaa:	f7fc fcad 	bl	8004808 <Error_Handler>
 8007eae:	e7f6      	b.n	8007e9e <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8007eb0:	f7fc fcaa 	bl	8004808 <Error_Handler>
 8007eb4:	e7d2      	b.n	8007e5c <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8007eb6:	f7fc fca7 	bl	8004808 <Error_Handler>
 8007eba:	e785      	b.n	8007dc8 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8007ebc:	f7fc fca4 	bl	8004808 <Error_Handler>
 8007ec0:	e6b9      	b.n	8007c36 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8007ec2:	f7fc fca1 	bl	8004808 <Error_Handler>
 8007ec6:	e69c      	b.n	8007c02 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8007ec8:	f7fc fc9e 	bl	8004808 <Error_Handler>
 8007ecc:	e64c      	b.n	8007b68 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8007ece:	f7fc fc9b 	bl	8004808 <Error_Handler>
 8007ed2:	e6ea      	b.n	8007caa <HAL_UART_MspInit+0x302>
      Error_Handler();
 8007ed4:	f7fc fc98 	bl	8004808 <Error_Handler>
 8007ed8:	e59b      	b.n	8007a12 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8007eda:	f7fc fc95 	bl	8004808 <Error_Handler>
 8007ede:	e5db      	b.n	8007a98 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8007ee0:	f7fc fc92 	bl	8004808 <Error_Handler>
 8007ee4:	e717      	b.n	8007d16 <HAL_UART_MspInit+0x36e>
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	40021400 	.word	0x40021400
 8007ef0:	40020c00 	.word	0x40020c00
 8007ef4:	40020800 	.word	0x40020800
 8007ef8:	40021800 	.word	0x40021800
 8007efc:	200024bc 	.word	0x200024bc
 8007f00:	40026428 	.word	0x40026428
 8007f04:	2000251c 	.word	0x2000251c
 8007f08:	400264a0 	.word	0x400264a0

08007f0c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8007f0c:	4a4f      	ldr	r2, [pc, #316]	; (800804c <HAL_UART_MspDeInit+0x140>)
 8007f0e:	6803      	ldr	r3, [r0, #0]
 8007f10:	4293      	cmp	r3, r2
{
 8007f12:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8007f14:	d025      	beq.n	8007f62 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8007f16:	4a4e      	ldr	r2, [pc, #312]	; (8008050 <HAL_UART_MspDeInit+0x144>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d038      	beq.n	8007f90 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8007f1e:	4a4d      	ldr	r2, [pc, #308]	; (8008054 <HAL_UART_MspDeInit+0x148>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d050      	beq.n	8007fc6 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8007f24:	4a4c      	ldr	r2, [pc, #304]	; (8008058 <HAL_UART_MspDeInit+0x14c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8007f2a:	4a4c      	ldr	r2, [pc, #304]	; (800805c <HAL_UART_MspDeInit+0x150>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d056      	beq.n	8007fde <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8007f30:	4a4b      	ldr	r2, [pc, #300]	; (8008060 <HAL_UART_MspDeInit+0x154>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d062      	beq.n	8007ffc <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8007f36:	4a4b      	ldr	r2, [pc, #300]	; (8008064 <HAL_UART_MspDeInit+0x158>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d06c      	beq.n	8008016 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8007f3c:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 8007f3e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8007f42:	2103      	movs	r1, #3
 8007f44:	4848      	ldr	r0, [pc, #288]	; (8008068 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8007f46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f4c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8007f4e:	f004 fd75 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007f52:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007f54:	f002 fa0c 	bl	800a370 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8007f58:	2053      	movs	r0, #83	; 0x53
}
 8007f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8007f5e:	f001 bda7 	b.w	8009ab0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8007f62:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8007f66:	f248 0101 	movw	r1, #32769	; 0x8001
 8007f6a:	4840      	ldr	r0, [pc, #256]	; (800806c <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8007f6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f6e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007f72:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8007f74:	f004 fd62 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8007f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f7c:	483c      	ldr	r0, [pc, #240]	; (8008070 <HAL_UART_MspDeInit+0x164>)
 8007f7e:	f004 fd5d 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8007f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f86:	483b      	ldr	r0, [pc, #236]	; (8008074 <HAL_UART_MspDeInit+0x168>)
}
 8007f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8007f8c:	f004 bd56 	b.w	800ca3c <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8007f90:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f98:	4835      	ldr	r0, [pc, #212]	; (8008070 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8007f9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fa0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007fa2:	f004 fd4b 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8007fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007faa:	4832      	ldr	r0, [pc, #200]	; (8008074 <HAL_UART_MspDeInit+0x168>)
 8007fac:	f004 fd46 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007fb0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007fb2:	f002 f9dd 	bl	800a370 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8007fb6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007fb8:	f002 f9da 	bl	800a370 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8007fbc:	2035      	movs	r0, #53	; 0x35
}
 8007fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8007fc2:	f001 bd75 	b.w	8009ab0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8007fc6:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8007fca:	21c0      	movs	r1, #192	; 0xc0
 8007fcc:	482a      	ldr	r0, [pc, #168]	; (8008078 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8007fce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8007fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8007fd8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8007fda:	f004 bd2f 	b.w	800ca3c <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007fde:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8007fe2:	4826      	ldr	r0, [pc, #152]	; (800807c <HAL_UART_MspDeInit+0x170>)
 8007fe4:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8007fe6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8007fee:	f004 fd25 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007ff2:	2026      	movs	r0, #38	; 0x26
}
 8007ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007ff8:	f001 bd5a 	b.w	8009ab0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 8007ffc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8008000:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008004:	481d      	ldr	r0, [pc, #116]	; (800807c <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8008006:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8008010:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8008012:	f004 bd13 	b.w	800ca3c <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8008016:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800801a:	2140      	movs	r1, #64	; 0x40
 800801c:	4815      	ldr	r0, [pc, #84]	; (8008074 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800801e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008020:	f023 0320 	bic.w	r3, r3, #32
 8008024:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8008026:	f004 fd09 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800802a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800802e:	4814      	ldr	r0, [pc, #80]	; (8008080 <HAL_UART_MspDeInit+0x174>)
 8008030:	f004 fd04 	bl	800ca3c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008034:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008036:	f002 f99b 	bl	800a370 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800803a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800803c:	f002 f998 	bl	800a370 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008040:	2047      	movs	r0, #71	; 0x47
}
 8008042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008046:	f001 bd33 	b.w	8009ab0 <HAL_NVIC_DisableIRQ>
 800804a:	bf00      	nop
 800804c:	40004c00 	.word	0x40004c00
 8008050:	40005000 	.word	0x40005000
 8008054:	40007800 	.word	0x40007800
 8008058:	40007c00 	.word	0x40007c00
 800805c:	40004400 	.word	0x40004400
 8008060:	40004800 	.word	0x40004800
 8008064:	40011400 	.word	0x40011400
 8008068:	40021000 	.word	0x40021000
 800806c:	40020000 	.word	0x40020000
 8008070:	40020400 	.word	0x40020400
 8008074:	40020800 	.word	0x40020800
 8008078:	40021400 	.word	0x40021400
 800807c:	40020c00 	.word	0x40020c00
 8008080:	40021800 	.word	0x40021800

08008084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008084:	b530      	push	{r4, r5, lr}
 8008086:	4601      	mov	r1, r0
 8008088:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800808a:	2200      	movs	r2, #0
 800808c:	202b      	movs	r0, #43	; 0x2b
 800808e:	f001 fcb1 	bl	80099f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008092:	202b      	movs	r0, #43	; 0x2b
 8008094:	f001 fcf8 	bl	8009a88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008098:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800809a:	a901      	add	r1, sp, #4
 800809c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800809e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 80080a0:	4c14      	ldr	r4, [pc, #80]	; (80080f4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80080a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80080a6:	4d14      	ldr	r5, [pc, #80]	; (80080f8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80080a8:	641a      	str	r2, [r3, #64]	; 0x40
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80080b4:	f006 fe38 	bl	800ed28 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80080b8:	f006 fe16 	bl	800ece8 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80080bc:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80080be:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 80080c0:	490e      	ldr	r1, [pc, #56]	; (80080fc <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 80080c2:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80080c4:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080c6:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80080c8:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80080cc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 80080d0:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80080d2:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80080d4:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80080d6:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 80080d8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80080da:	f009 f917 	bl	801130c <HAL_TIM_Base_Init>
 80080de:	b110      	cbz	r0, 80080e6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80080e0:	2001      	movs	r0, #1
}
 80080e2:	b009      	add	sp, #36	; 0x24
 80080e4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80080e6:	4620      	mov	r0, r4
 80080e8:	f008 fae4 	bl	80106b4 <HAL_TIM_Base_Start_IT>
}
 80080ec:	b009      	add	sp, #36	; 0x24
 80080ee:	bd30      	pop	{r4, r5, pc}
 80080f0:	40023800 	.word	0x40023800
 80080f4:	20003400 	.word	0x20003400
 80080f8:	431bde83 	.word	0x431bde83
 80080fc:	40001800 	.word	0x40001800

08008100 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop

08008104 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008104:	e7fe      	b.n	8008104 <HardFault_Handler>
 8008106:	bf00      	nop

08008108 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008108:	e7fe      	b.n	8008108 <MemManage_Handler>
 800810a:	bf00      	nop

0800810c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800810c:	e7fe      	b.n	800810c <BusFault_Handler>
 800810e:	bf00      	nop

08008110 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008110:	e7fe      	b.n	8008110 <UsageFault_Handler>
 8008112:	bf00      	nop

08008114 <RCC_IRQHandler>:
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop

08008118 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <DMA1_Stream0_IRQHandler+0x8>)
 800811a:	f002 ba95 	b.w	800a648 <HAL_DMA_IRQHandler>
 800811e:	bf00      	nop
 8008120:	2000239c 	.word	0x2000239c

08008124 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <DMA1_Stream1_IRQHandler+0x8>)
 8008126:	f002 ba8f 	b.w	800a648 <HAL_DMA_IRQHandler>
 800812a:	bf00      	nop
 800812c:	2000233c 	.word	0x2000233c

08008130 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <DMA1_Stream5_IRQHandler+0x8>)
 8008132:	f002 ba89 	b.w	800a648 <HAL_DMA_IRQHandler>
 8008136:	bf00      	nop
 8008138:	200022dc 	.word	0x200022dc

0800813c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <DMA1_Stream6_IRQHandler+0x8>)
 800813e:	f002 ba83 	b.w	800a648 <HAL_DMA_IRQHandler>
 8008142:	bf00      	nop
 8008144:	2000245c 	.word	0x2000245c

08008148 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <ADC_IRQHandler+0x18>)
 800814c:	f001 fa2e 	bl	80095ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008150:	4804      	ldr	r0, [pc, #16]	; (8008164 <ADC_IRQHandler+0x1c>)
 8008152:	f001 fa2b 	bl	80095ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008156:	4804      	ldr	r0, [pc, #16]	; (8008168 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800815c:	f001 ba26 	b.w	80095ac <HAL_ADC_IRQHandler>
 8008160:	2000216c 	.word	0x2000216c
 8008164:	200021b4 	.word	0x200021b4
 8008168:	200021fc 	.word	0x200021fc

0800816c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800816c:	4801      	ldr	r0, [pc, #4]	; (8008174 <TIM2_IRQHandler+0x8>)
 800816e:	f008 bf45 	b.w	8010ffc <HAL_TIM_IRQHandler>
 8008172:	bf00      	nop
 8008174:	20002844 	.word	0x20002844

08008178 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <TIM3_IRQHandler+0x8>)
 800817a:	f008 bf3f 	b.w	8010ffc <HAL_TIM_IRQHandler>
 800817e:	bf00      	nop
 8008180:	20002890 	.word	0x20002890

08008184 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008184:	4801      	ldr	r0, [pc, #4]	; (800818c <USART2_IRQHandler+0x8>)
 8008186:	f00b b9bd 	b.w	8013504 <HAL_UART_IRQHandler>
 800818a:	bf00      	nop
 800818c:	20002a0c 	.word	0x20002a0c

08008190 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8008190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008194:	f004 bd8a 	b.w	800ccac <HAL_GPIO_EXTI_IRQHandler>

08008198 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800819a:	f008 bf2f 	b.w	8010ffc <HAL_TIM_IRQHandler>
 800819e:	bf00      	nop
 80081a0:	20003400 	.word	0x20003400

080081a4 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 80081a6:	f008 bf29 	b.w	8010ffc <HAL_TIM_IRQHandler>
 80081aa:	bf00      	nop
 80081ac:	200027f8 	.word	0x200027f8

080081b0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <DMA1_Stream7_IRQHandler+0x8>)
 80081b2:	f002 ba49 	b.w	800a648 <HAL_DMA_IRQHandler>
 80081b6:	bf00      	nop
 80081b8:	200023fc 	.word	0x200023fc

080081bc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <TIM5_IRQHandler+0x8>)
 80081be:	f008 bf1d 	b.w	8010ffc <HAL_TIM_IRQHandler>
 80081c2:	bf00      	nop
 80081c4:	20002928 	.word	0x20002928

080081c8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <UART5_IRQHandler+0x8>)
 80081ca:	f00b b99b 	b.w	8013504 <HAL_UART_IRQHandler>
 80081ce:	bf00      	nop
 80081d0:	20002b98 	.word	0x20002b98

080081d4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80081d4:	4804      	ldr	r0, [pc, #16]	; (80081e8 <TIM6_DAC_IRQHandler+0x14>)
{
 80081d6:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 80081d8:	f001 fe68 	bl	8009eac <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80081de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80081e2:	f008 bf0b 	b.w	8010ffc <HAL_TIM_IRQHandler>
 80081e6:	bf00      	nop
 80081e8:	20002268 	.word	0x20002268
 80081ec:	20002974 	.word	0x20002974

080081f0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <DMA2_Stream1_IRQHandler+0x8>)
 80081f2:	f002 ba29 	b.w	800a648 <HAL_DMA_IRQHandler>
 80081f6:	bf00      	nop
 80081f8:	200024bc 	.word	0x200024bc

080081fc <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <DMA2_Stream4_IRQHandler+0x8>)
 80081fe:	f002 ba23 	b.w	800a648 <HAL_DMA_IRQHandler>
 8008202:	bf00      	nop
 8008204:	2000227c 	.word	0x2000227c

08008208 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <ETH_IRQHandler+0x8>)
 800820a:	f003 b9a1 	b.w	800b550 <HAL_ETH_IRQHandler>
 800820e:	bf00      	nop
 8008210:	20006624 	.word	0x20006624

08008214 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <OTG_FS_IRQHandler+0x8>)
 8008216:	f005 bc67 	b.w	800dae8 <HAL_PCD_IRQHandler>
 800821a:	bf00      	nop
 800821c:	2002fcc0 	.word	0x2002fcc0

08008220 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <DMA2_Stream6_IRQHandler+0x8>)
 8008222:	f002 ba11 	b.w	800a648 <HAL_DMA_IRQHandler>
 8008226:	bf00      	nop
 8008228:	2000251c 	.word	0x2000251c

0800822c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <USART6_IRQHandler+0x8>)
 800822e:	f00b b969 	b.w	8013504 <HAL_UART_IRQHandler>
 8008232:	bf00      	nop
 8008234:	20002c1c 	.word	0x20002c1c

08008238 <FPU_IRQHandler>:
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop

0800823c <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <UART8_IRQHandler+0x8>)
 800823e:	f00b b961 	b.w	8013504 <HAL_UART_IRQHandler>
 8008242:	bf00      	nop
 8008244:	20002d24 	.word	0x20002d24

08008248 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8008248:	2001      	movs	r0, #1
 800824a:	4770      	bx	lr

0800824c <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <_kill+0xc>)
 800824e:	2216      	movs	r2, #22
	return -1;
}
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8008254:	601a      	str	r2, [r3, #0]
}
 8008256:	4770      	bx	lr
 8008258:	200300d4 	.word	0x200300d4

0800825c <_exit>:
	errno = EINVAL;
 800825c:	4b01      	ldr	r3, [pc, #4]	; (8008264 <_exit+0x8>)
 800825e:	2216      	movs	r2, #22
 8008260:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8008262:	e7fe      	b.n	8008262 <_exit+0x6>
 8008264:	200300d4 	.word	0x200300d4

08008268 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8008268:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800826a:	1e16      	subs	r6, r2, #0
 800826c:	dd07      	ble.n	800827e <_read+0x16>
 800826e:	460c      	mov	r4, r1
 8008270:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8008272:	f3af 8000 	nop.w
 8008276:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800827a:	42a5      	cmp	r5, r4
 800827c:	d1f9      	bne.n	8008272 <_read+0xa>
	}

	return len;
}
 800827e:	4630      	mov	r0, r6
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	bf00      	nop

08008284 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 800828c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8008290:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8008292:	604b      	str	r3, [r1, #4]
}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop

08008298 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8008298:	2001      	movs	r0, #1
 800829a:	4770      	bx	lr

0800829c <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800829c:	2000      	movs	r0, #0
 800829e:	4770      	bx	lr

080082a0 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80082a0:	490d      	ldr	r1, [pc, #52]	; (80082d8 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 80082a2:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80082a4:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 80082a6:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 80082a8:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80082aa:	4c0d      	ldr	r4, [pc, #52]	; (80082e0 <_sbrk+0x40>)
 80082ac:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 80082ae:	b170      	cbz	r0, 80082ce <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80082b0:	4403      	add	r3, r0
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d803      	bhi.n	80082be <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80082b6:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 80082ba:	600b      	str	r3, [r1, #0]
}
 80082bc:	4770      	bx	lr
		errno = ENOMEM;
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <_sbrk+0x44>)
 80082c0:	220c      	movs	r2, #12
		return (void*) -1;
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80082c6:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 80082ca:	601a      	str	r2, [r3, #0]
}
 80082cc:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80082ce:	4c06      	ldr	r4, [pc, #24]	; (80082e8 <_sbrk+0x48>)
 80082d0:	4620      	mov	r0, r4
 80082d2:	600c      	str	r4, [r1, #0]
 80082d4:	e7ec      	b.n	80082b0 <_sbrk+0x10>
 80082d6:	bf00      	nop
 80082d8:	20003450 	.word	0x20003450
 80082dc:	20080000 	.word	0x20080000
 80082e0:	00007800 	.word	0x00007800
 80082e4:	200300d4 	.word	0x200300d4
 80082e8:	20030100 	.word	0x20030100

080082ec <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082ec:	4a0f      	ldr	r2, [pc, #60]	; (800832c <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082f0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80082f4:	490f      	ldr	r1, [pc, #60]	; (8008334 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082f6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80082fa:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082fc:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8008300:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	f040 0001 	orr.w	r0, r0, #1
 8008308:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 800830a:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8008310:	4809      	ldr	r0, [pc, #36]	; (8008338 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8008312:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8008314:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8008316:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008318:	4808      	ldr	r0, [pc, #32]	; (800833c <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800831a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800831e:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8008320:	60dc      	str	r4, [r3, #12]

#endif
}
 8008322:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008326:	6090      	str	r0, [r2, #8]
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	e000ed00 	.word	0xe000ed00
 8008330:	40023800 	.word	0x40023800
 8008334:	fef6ffff 	.word	0xfef6ffff
 8008338:	24003010 	.word	0x24003010
 800833c:	08000000 	.word	0x08000000

08008340 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8008340:	680b      	ldr	r3, [r1, #0]
 8008342:	4a03      	ldr	r2, [pc, #12]	; (8008350 <dnsfound+0x10>)
		ip_ready = -1;
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf08      	it	eq
 8008348:	f04f 33ff 	moveq.w	r3, #4294967295
 800834c:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 800834e:	4770      	bx	lr
 8008350:	20003464 	.word	0x20003464

08008354 <myreboot>:
void myreboot(char *msg) {
 8008354:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8008356:	480a      	ldr	r0, [pc, #40]	; (8008380 <myreboot+0x2c>)
void myreboot(char *msg) {
 8008358:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800835a:	f01d fffb 	bl	8026354 <iprintf>
	osDelay(2000);
 800835e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008362:	f00e f857 	bl	8016414 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 8008366:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800836a:	4906      	ldr	r1, [pc, #24]	; (8008384 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800836e:	68ca      	ldr	r2, [r1, #12]
 8008370:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008374:	4313      	orrs	r3, r2
 8008376:	60cb      	str	r3, [r1, #12]
 8008378:	f3bf 8f4f 	dsb	sy
    __NOP();
 800837c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800837e:	e7fd      	b.n	800837c <myreboot+0x28>
 8008380:	0802d648 	.word	0x0802d648
 8008384:	e000ed00 	.word	0xe000ed00
 8008388:	05fa0004 	.word	0x05fa0004

0800838c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 800838c:	b500      	push	{lr}
 800838e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008390:	f241 3388 	movw	r3, #5000	; 0x1388
 8008394:	4a16      	ldr	r2, [pc, #88]	; (80083f0 <sendudp+0x64>)
 8008396:	f018 ff47 	bl	8021228 <udp_sendto>
 800839a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 800839e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083a2:	b943      	cbnz	r3, 80083b6 <sendudp+0x2a>
 80083a4:	b25a      	sxtb	r2, r3
		busycount = 0;
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <sendudp+0x68>)
 80083a8:	601a      	str	r2, [r3, #0]
	return (err);
 80083aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80083ae:	b240      	sxtb	r0, r0
 80083b0:	b003      	add	sp, #12
 80083b2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 80083b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80083ba:	480f      	ldr	r0, [pc, #60]	; (80083f8 <sendudp+0x6c>)
 80083bc:	b249      	sxtb	r1, r1
 80083be:	f01d ffc9 	bl	8026354 <iprintf>
		vTaskDelay(100); //some delay!
 80083c2:	2064      	movs	r0, #100	; 0x64
 80083c4:	f00f fb74 	bl	8017ab0 <vTaskDelay>
		if (err == ERR_MEM) {
 80083c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083cc:	2bff      	cmp	r3, #255	; 0xff
 80083ce:	d00c      	beq.n	80083ea <sendudp+0x5e>
		if (err == ERR_USE) {
 80083d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083d4:	2bf8      	cmp	r3, #248	; 0xf8
 80083d6:	d1e8      	bne.n	80083aa <sendudp+0x1e>
			if (busycount++ > 10)
 80083d8:	4a06      	ldr	r2, [pc, #24]	; (80083f4 <sendudp+0x68>)
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	1c59      	adds	r1, r3, #1
 80083de:	2b0a      	cmp	r3, #10
 80083e0:	6011      	str	r1, [r2, #0]
 80083e2:	dde2      	ble.n	80083aa <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <sendudp+0x70>)
 80083e6:	f7ff ffb5 	bl	8008354 <myreboot>
			myreboot("sendudp: out of mem");
 80083ea:	4805      	ldr	r0, [pc, #20]	; (8008400 <sendudp+0x74>)
 80083ec:	f7ff ffb2 	bl	8008354 <myreboot>
 80083f0:	2000347c 	.word	0x2000347c
 80083f4:	20003454 	.word	0x20003454
 80083f8:	0802d65c 	.word	0x0802d65c
 80083fc:	0802d684 	.word	0x0802d684
 8008400:	0802d670 	.word	0x0802d670

08008404 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008404:	4b25      	ldr	r3, [pc, #148]	; (800849c <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8008406:	4684      	mov	ip, r0
 8008408:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800840a:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800840e:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008410:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008414:	4c22      	ldr	r4, [pc, #136]	; (80084a0 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8008416:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008418:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800841a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800841e:	4c21      	ldr	r4, [pc, #132]	; (80084a4 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008420:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008424:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008428:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800842c:	4c1e      	ldr	r4, [pc, #120]	; (80084a8 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800842e:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008432:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008436:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800843a:	4a1c      	ldr	r2, [pc, #112]	; (80084ac <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800843c:	bfc8      	it	gt
 800843e:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008442:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8008446:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008448:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	4d18      	ldr	r5, [pc, #96]	; (80084b0 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008450:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008452:	2b00      	cmp	r3, #0
 8008454:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008456:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008458:	bfb8      	it	lt
 800845a:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800845c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800845e:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008460:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008462:	4d15      	ldr	r5, [pc, #84]	; (80084b8 <sendstatus+0xb4>)
 8008464:	b292      	uxth	r2, r2
 8008466:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008468:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800846c:	432a      	orrs	r2, r5
 800846e:	4d13      	ldr	r5, [pc, #76]	; (80084bc <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008470:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008472:	4035      	ands	r5, r6
 8008474:	432a      	orrs	r2, r5
 8008476:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008478:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800847c:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8008480:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008484:	f241 3388 	movw	r3, #5000	; 0x1388
 8008488:	f7ff ff80 	bl	800838c <sendudp>
 800848c:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	6023      	str	r3, [r4, #0]
}
 8008496:	b002      	add	sp, #8
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	bf00      	nop
 800849c:	20000760 	.word	0x20000760
 80084a0:	2000070c 	.word	0x2000070c
 80084a4:	200033e8 	.word	0x200033e8
 80084a8:	2000300c 	.word	0x2000300c
 80084ac:	20000718 	.word	0x20000718
 80084b0:	20000002 	.word	0x20000002
 80084b4:	20000714 	.word	0x20000714
 80084b8:	200006f4 	.word	0x200006f4
 80084bc:	ffff0000 	.word	0xffff0000
 80084c0:	2000347c 	.word	0x2000347c

080084c4 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	4604      	mov	r4, r0
 80084c8:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 80084ca:	4818      	ldr	r0, [pc, #96]	; (800852c <dnslookup+0x68>)
 80084cc:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 80084ce:	4e18      	ldr	r6, [pc, #96]	; (8008530 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 80084d0:	f01d ff40 	bl	8026354 <iprintf>
	ip_ready = 0;
 80084d4:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80084d6:	4620      	mov	r0, r4
 80084d8:	4a16      	ldr	r2, [pc, #88]	; (8008534 <dnslookup+0x70>)
 80084da:	4639      	mov	r1, r7
	ip_ready = 0;
 80084dc:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80084de:	f012 fb47 	bl	801ab70 <dns_gethostbyname>
 80084e2:	4604      	mov	r4, r0

	switch (err) {
 80084e4:	3005      	adds	r0, #5
 80084e6:	d005      	beq.n	80084f4 <dnslookup+0x30>
 80084e8:	b114      	cbz	r4, 80084f0 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80084ea:	4813      	ldr	r0, [pc, #76]	; (8008538 <dnslookup+0x74>)
 80084ec:	f01d ff32 	bl	8026354 <iprintf>
		break;
	}
	return (err);
}
 80084f0:	4620      	mov	r0, r4
 80084f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80084f4:	4811      	ldr	r0, [pc, #68]	; (800853c <dnslookup+0x78>)
 80084f6:	2514      	movs	r5, #20
 80084f8:	f01d ff2c 	bl	8026354 <iprintf>
		for (i = 0; i < 20; i++) {
 80084fc:	e001      	b.n	8008502 <dnslookup+0x3e>
 80084fe:	3d01      	subs	r5, #1
 8008500:	d0f3      	beq.n	80084ea <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 8008502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008506:	f00d ff85 	bl	8016414 <osDelay>
			printf(".");
 800850a:	202e      	movs	r0, #46	; 0x2e
 800850c:	f01d ff3a 	bl	8026384 <putchar>
			if (ip_ready) {
 8008510:	6833      	ldr	r3, [r6, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f3      	beq.n	80084fe <dnslookup+0x3a>
				if (ip_ready == -1) {
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	d002      	beq.n	8008520 <dnslookup+0x5c>
				return (ERR_OK);
 800851a:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 800851c:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 800851e:	e7e7      	b.n	80084f0 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008522:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8008526:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008528:	e7e2      	b.n	80084f0 <dnslookup+0x2c>
 800852a:	bf00      	nop
 800852c:	0802d6a0 	.word	0x0802d6a0
 8008530:	20003464 	.word	0x20003464
 8008534:	08008341 	.word	0x08008341
 8008538:	0802d6dc 	.word	0x0802d6dc
 800853c:	0802d6b4 	.word	0x0802d6b4
 8008540:	0802d6d0 	.word	0x0802d6d0

08008544 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8008544:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8008546:	4914      	ldr	r1, [pc, #80]	; (8008598 <locateudp+0x54>)
{
 8008548:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 800854a:	4814      	ldr	r0, [pc, #80]	; (800859c <locateudp+0x58>)
 800854c:	f01d ff02 	bl	8026354 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8008550:	4913      	ldr	r1, [pc, #76]	; (80085a0 <locateudp+0x5c>)
 8008552:	4811      	ldr	r0, [pc, #68]	; (8008598 <locateudp+0x54>)
 8008554:	f7ff ffb6 	bl	80084c4 <dnslookup>
 8008558:	b240      	sxtb	r0, r0
 800855a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800855e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008562:	b9a3      	cbnz	r3, 800858e <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8008564:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8008566:	490f      	ldr	r1, [pc, #60]	; (80085a4 <locateudp+0x60>)
	ip = udpdestip.addr;
 8008568:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800856a:	480f      	ldr	r0, [pc, #60]	; (80085a8 <locateudp+0x64>)
 800856c:	0e22      	lsrs	r2, r4, #24
 800856e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8008572:	e9cd 3200 	strd	r3, r2, [sp]
 8008576:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800857a:	b2e2      	uxtb	r2, r4
 800857c:	f01e f8d4 	bl	8026728 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8008580:	4909      	ldr	r1, [pc, #36]	; (80085a8 <locateudp+0x64>)
 8008582:	480a      	ldr	r0, [pc, #40]	; (80085ac <locateudp+0x68>)
 8008584:	f01d fee6 	bl	8026354 <iprintf>
	return (ip);
}
 8008588:	4620      	mov	r0, r4
 800858a:	b004      	add	sp, #16
 800858c:	bd10      	pop	{r4, pc}
		rebootme(3);
 800858e:	2003      	movs	r0, #3
 8008590:	f7fb fbf8 	bl	8003d84 <rebootme>
 8008594:	e7e6      	b.n	8008564 <locateudp+0x20>
 8008596:	bf00      	nop
 8008598:	200034c8 	.word	0x200034c8
 800859c:	0802d700 	.word	0x0802d700
 80085a0:	2000347c 	.word	0x2000347c
 80085a4:	0802d720 	.word	0x0802d720
 80085a8:	2000346c 	.word	0x2000346c
 80085ac:	0802d730 	.word	0x0802d730

080085b0 <startudp>:

void startudp(uint32_t ip) {
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ed2d 8b02 	vpush	{d8}
 80085b8:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80085ba:	f00f fba1 	bl	8017d00 <xTaskGetCurrentTaskHandle>
 80085be:	4b75      	ldr	r3, [pc, #468]	; (8008794 <startudp+0x1e4>)
 80085c0:	4602      	mov	r2, r0
	osDelay(1000);
 80085c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80085c6:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 80085c8:	f00d ff24 	bl	8016414 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 80085cc:	f018 fef8 	bl	80213c0 <udp_new>
	if (pcb == NULL) {
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f000 80ce 	beq.w	8008772 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80085d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085da:	496f      	ldr	r1, [pc, #444]	; (8008798 <startudp+0x1e8>)
 80085dc:	ee08 0a10 	vmov	s16, r0
 80085e0:	f018 fc9e 	bl	8020f20 <udp_bind>
 80085e4:	4605      	mov	r5, r0
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 80bf 	bne.w	800876a <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80085ec:	2241      	movs	r2, #65	; 0x41
 80085ee:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80085f2:	2036      	movs	r0, #54	; 0x36
 80085f4:	f013 fc12 	bl	801be1c <pbuf_alloc>

	if (p1 == NULL) {
 80085f8:	9000      	str	r0, [sp, #0]
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f000 80bd 	beq.w	800877a <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8008600:	4c66      	ldr	r4, [pc, #408]	; (800879c <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8008602:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8008606:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8008608:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800860e:	2241      	movs	r2, #65	; 0x41
 8008610:	f013 fc04 	bl	801be1c <pbuf_alloc>
	if (p2 == NULL) {
 8008614:	9001      	str	r0, [sp, #4]
 8008616:	2800      	cmp	r0, #0
 8008618:	f000 80b7 	beq.w	800878a <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800861c:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800861e:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008620:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8008622:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008624:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8008628:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800862a:	2201      	movs	r2, #1
 800862c:	f013 fbf6 	bl	801be1c <pbuf_alloc>
	if (ps == NULL) {
 8008630:	ee08 0a90 	vmov	s17, r0
 8008634:	2800      	cmp	r0, #0
 8008636:	f000 80aa 	beq.w	800878e <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800863a:	4c59      	ldr	r4, [pc, #356]	; (80087a0 <startudp+0x1f0>)
 800863c:	4f59      	ldr	r7, [pc, #356]	; (80087a4 <startudp+0x1f4>)
 800863e:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8008640:	f241 3088 	movw	r0, #5000	; 0x1388
 8008644:	f00d fee6 	bl	8016414 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008648:	4b57      	ldr	r3, [pc, #348]	; (80087a8 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 800864a:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 800864c:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 800864e:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8008650:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8008652:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008656:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800865a:	4b54      	ldr	r3, [pc, #336]	; (80087ac <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800865c:	4854      	ldr	r0, [pc, #336]	; (80087b0 <startudp+0x200>)
 800865e:	4e55      	ldr	r6, [pc, #340]	; (80087b4 <startudp+0x204>)
 8008660:	f8df b188 	ldr.w	fp, [pc, #392]	; 80087ec <startudp+0x23c>
 8008664:	f8df a188 	ldr.w	sl, [pc, #392]	; 80087f0 <startudp+0x240>
 8008668:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80087f4 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 800866c:	4d52      	ldr	r5, [pc, #328]	; (80087b8 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800866e:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8008670:	f01d ff0c 	bl	802648c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008678:	2001      	movs	r0, #1
 800867a:	f00f fc89 	bl	8017f90 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800867e:	2800      	cmp	r0, #0
 8008680:	d05a      	beq.n	8008738 <startudp+0x188>
			sigsend = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8008686:	7833      	ldrb	r3, [r6, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f3      	beq.n	8008674 <startudp+0xc4>
 800868c:	f8db 3000 	ldr.w	r3, [fp]
 8008690:	f8da 2000 	ldr.w	r2, [sl]
 8008694:	4313      	orrs	r3, r2
 8008696:	d1ed      	bne.n	8008674 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008698:	4a48      	ldr	r2, [pc, #288]	; (80087bc <startudp+0x20c>)
 800869a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	bf08      	it	eq
 80086a4:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 80086a6:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 80086a8:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 80086aa:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	684b      	ldr	r3, [r1, #4]
 80086b0:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	684a      	ldr	r2, [r1, #4]
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	684a      	ldr	r2, [r1, #4]
 80086be:	0c1b      	lsrs	r3, r3, #16
 80086c0:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 80086c2:	7b89      	ldrb	r1, [r1, #14]
 80086c4:	2901      	cmp	r1, #1
 80086c6:	d006      	beq.n	80086d6 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80086c8:	4628      	mov	r0, r5
 80086ca:	f01d fe43 	bl	8026354 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 80086ce:	f899 100e 	ldrb.w	r1, [r9, #14]
 80086d2:	2901      	cmp	r1, #1
 80086d4:	d1f8      	bne.n	80086c8 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 80086d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80086da:	4649      	mov	r1, r9
 80086dc:	4a38      	ldr	r2, [pc, #224]	; (80087c0 <startudp+0x210>)
 80086de:	ee18 0a10 	vmov	r0, s16
 80086e2:	f7ff fe53 	bl	800838c <sendudp>
 80086e6:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80086ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80086ee:	3301      	adds	r3, #1
 80086f0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80086f4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80086f8:	3301      	adds	r3, #1
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8008706:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <startudp+0x214>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0b2      	beq.n	8008674 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 800870e:	492e      	ldr	r1, [pc, #184]	; (80087c8 <startudp+0x218>)
 8008710:	ee18 2a10 	vmov	r2, s16
 8008714:	2001      	movs	r0, #1
 8008716:	780b      	ldrb	r3, [r1, #0]
 8008718:	ee18 1a90 	vmov	r1, s17
 800871c:	f7ff fe72 	bl	8008404 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8008720:	2300      	movs	r3, #0
 8008722:	4a28      	ldr	r2, [pc, #160]	; (80087c4 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008724:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008728:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800872a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 800872e:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008730:	f00f fc2e 	bl	8017f90 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8008734:	2800      	cmp	r0, #0
 8008736:	d1a4      	bne.n	8008682 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8008738:	4b24      	ldr	r3, [pc, #144]	; (80087cc <startudp+0x21c>)
 800873a:	f8d8 2000 	ldr.w	r2, [r8]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4293      	cmp	r3, r2
 8008742:	d097      	beq.n	8008674 <startudp+0xc4>
 8008744:	4a22      	ldr	r2, [pc, #136]	; (80087d0 <startudp+0x220>)
 8008746:	4923      	ldr	r1, [pc, #140]	; (80087d4 <startudp+0x224>)
 8008748:	fb02 f203 	mul.w	r2, r2, r3
 800874c:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8008750:	d390      	bcc.n	8008674 <startudp+0xc4>
		talive = t1sec;
 8008752:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8008756:	ee18 2a10 	vmov	r2, s16
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <startudp+0x218>)
 800875c:	ee18 1a90 	vmov	r1, s17
 8008760:	2002      	movs	r0, #2
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f7ff fe4e 	bl	8008404 <sendstatus>
 8008768:	e784      	b.n	8008674 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 800876a:	481b      	ldr	r0, [pc, #108]	; (80087d8 <startudp+0x228>)
 800876c:	f01d fe8e 	bl	802648c <puts>
		for (;;)
 8008770:	e7fe      	b.n	8008770 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8008772:	481a      	ldr	r0, [pc, #104]	; (80087dc <startudp+0x22c>)
 8008774:	f01d fe8a 	bl	802648c <puts>
		for (;;)
 8008778:	e7fe      	b.n	8008778 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 800877a:	4819      	ldr	r0, [pc, #100]	; (80087e0 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 800877c:	b005      	add	sp, #20
 800877e:	ecbd 8b02 	vpop	{d8}
 8008782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8008786:	f01d be81 	b.w	802648c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 800878a:	4816      	ldr	r0, [pc, #88]	; (80087e4 <startudp+0x234>)
 800878c:	e7f6      	b.n	800877c <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 800878e:	4816      	ldr	r0, [pc, #88]	; (80087e8 <startudp+0x238>)
 8008790:	e7f4      	b.n	800877c <startudp+0x1cc>
 8008792:	bf00      	nop
 8008794:	20000818 	.word	0x20000818
 8008798:	08046e50 	.word	0x08046e50
 800879c:	20000764 	.word	0x20000764
 80087a0:	2000300c 	.word	0x2000300c
 80087a4:	2000077c 	.word	0x2000077c
 80087a8:	dec0edfe 	.word	0xdec0edfe
 80087ac:	20000762 	.word	0x20000762
 80087b0:	0802d7dc 	.word	0x0802d7dc
 80087b4:	20003460 	.word	0x20003460
 80087b8:	0802d810 	.word	0x0802d810
 80087bc:	20000708 	.word	0x20000708
 80087c0:	2000347c 	.word	0x2000347c
 80087c4:	20000774 	.word	0x20000774
 80087c8:	200006f4 	.word	0x200006f4
 80087cc:	20002de4 	.word	0x20002de4
 80087d0:	eeeeeeef 	.word	0xeeeeeeef
 80087d4:	02222222 	.word	0x02222222
 80087d8:	0802d760 	.word	0x0802d760
 80087dc:	0802d744 	.word	0x0802d744
 80087e0:	0802d77c 	.word	0x0802d77c
 80087e4:	0802d79c 	.word	0x0802d79c
 80087e8:	0802d7bc 	.word	0x0802d7bc
 80087ec:	2000345c 	.word	0x2000345c
 80087f0:	20000714 	.word	0x20000714
 80087f4:	20003468 	.word	0x20003468

080087f8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80087fa:	4b52      	ldr	r3, [pc, #328]	; (8008944 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8008800:	4851      	ldr	r0, [pc, #324]	; (8008948 <tag_callback+0x150>)
	if (ledsenabled) {
 8008802:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8008804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8008808:	b35a      	cbz	r2, 8008862 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800880a:	f004 fa37 	bl	800cc7c <HAL_GPIO_TogglePin>
 800880e:	4c4f      	ldr	r4, [pc, #316]	; (800894c <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8008810:	4d4f      	ldr	r5, [pc, #316]	; (8008950 <tag_callback+0x158>)
 8008812:	e001      	b.n	8008818 <tag_callback+0x20>
 8008814:	f01d fe3a 	bl	802648c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008818:	2101      	movs	r1, #1
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	f00e fbbe 	bl	8016f9c <xQueueSemaphoreTake>
 8008820:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8008822:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008824:	2b01      	cmp	r3, #1
 8008826:	d1f5      	bne.n	8008814 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8008828:	1f32      	subs	r2, r6, #4
 800882a:	2a07      	cmp	r2, #7
 800882c:	d81c      	bhi.n	8008868 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 800882e:	4949      	ldr	r1, [pc, #292]	; (8008954 <tag_callback+0x15c>)
 8008830:	4093      	lsls	r3, r2
 8008832:	780a      	ldrb	r2, [r1, #0]
 8008834:	4013      	ands	r3, r2
 8008836:	4a48      	ldr	r2, [pc, #288]	; (8008958 <tag_callback+0x160>)
 8008838:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 800883a:	bb5b      	cbnz	r3, 8008894 <tag_callback+0x9c>
			strcpy(newstring, "0");
 800883c:	4b47      	ldr	r3, [pc, #284]	; (800895c <tag_callback+0x164>)
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8008842:	2300      	movs	r3, #0
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	4619      	mov	r1, r3
 800884a:	f00e f90d 	bl	8016a68 <xQueueGenericSend>
 800884e:	2801      	cmp	r0, #1
 8008850:	d002      	beq.n	8008858 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8008852:	4843      	ldr	r0, [pc, #268]	; (8008960 <tag_callback+0x168>)
 8008854:	f01d fe1a 	bl	802648c <puts>
	}
	return (strlen(newstring));
 8008858:	4638      	mov	r0, r7
}
 800885a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 800885e:	f7f7 bcf9 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8008862:	f004 f9f1 	bl	800cc48 <HAL_GPIO_WritePin>
 8008866:	e7d2      	b.n	800880e <tag_callback+0x16>
		switch (index) {
 8008868:	2e14      	cmp	r6, #20
 800886a:	d817      	bhi.n	800889c <tag_callback+0xa4>
 800886c:	e8df f006 	tbb	[pc, r6]
 8008870:	0b655055 	.word	0x0b655055
 8008874:	16161616 	.word	0x16161616
 8008878:	16161616 	.word	0x16161616
 800887c:	343d5a61 	.word	0x343d5a61
 8008880:	464b2429 	.word	0x464b2429
 8008884:	1c          	.byte	0x1c
 8008885:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8008886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800888a:	482f      	ldr	r0, [pc, #188]	; (8008948 <tag_callback+0x150>)
 800888c:	f004 f9ca 	bl	800cc24 <HAL_GPIO_ReadPin>
 8008890:	2801      	cmp	r0, #1
 8008892:	d1d3      	bne.n	800883c <tag_callback+0x44>
			strcpy(newstring, "1");
 8008894:	4b33      	ldr	r3, [pc, #204]	; (8008964 <tag_callback+0x16c>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	803b      	strh	r3, [r7, #0]
 800889a:	e7d2      	b.n	8008842 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 800889c:	4632      	mov	r2, r6
 800889e:	4932      	ldr	r1, [pc, #200]	; (8008968 <tag_callback+0x170>)
 80088a0:	4638      	mov	r0, r7
 80088a2:	f01d ff41 	bl	8026728 <siprintf>
			break;
 80088a6:	e7cc      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 80088a8:	4b30      	ldr	r3, [pc, #192]	; (800896c <tag_callback+0x174>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf14      	ite	ne
 80088b0:	2331      	movne	r3, #49	; 0x31
 80088b2:	2330      	moveq	r3, #48	; 0x30
 80088b4:	803b      	strh	r3, [r7, #0]
			break;
 80088b6:	e7c4      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 80088b8:	492d      	ldr	r1, [pc, #180]	; (8008970 <tag_callback+0x178>)
 80088ba:	4638      	mov	r0, r7
 80088bc:	f01d ffdb 	bl	8026876 <strcpy>
			break;
 80088c0:	e7bf      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 80088c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088c6:	482b      	ldr	r0, [pc, #172]	; (8008974 <tag_callback+0x17c>)
 80088c8:	f004 f9ac 	bl	800cc24 <HAL_GPIO_ReadPin>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	bf14      	ite	ne
 80088d0:	2330      	movne	r3, #48	; 0x30
 80088d2:	2331      	moveq	r3, #49	; 0x31
 80088d4:	803b      	strh	r3, [r7, #0]
			break;
 80088d6:	e7b4      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 80088d8:	4b27      	ldr	r3, [pc, #156]	; (8008978 <tag_callback+0x180>)
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	f013 0f04 	tst.w	r3, #4
 80088e0:	bf14      	ite	ne
 80088e2:	2331      	movne	r3, #49	; 0x31
 80088e4:	2330      	moveq	r3, #48	; 0x30
 80088e6:	803b      	strh	r3, [r7, #0]
			break;
 80088e8:	e7ab      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 80088ea:	4b23      	ldr	r3, [pc, #140]	; (8008978 <tag_callback+0x180>)
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	f013 0f02 	tst.w	r3, #2
 80088f2:	bf14      	ite	ne
 80088f4:	2331      	movne	r3, #49	; 0x31
 80088f6:	2330      	moveq	r3, #48	; 0x30
 80088f8:	803b      	strh	r3, [r7, #0]
			break;
 80088fa:	e7a2      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 80088fc:	491f      	ldr	r1, [pc, #124]	; (800897c <tag_callback+0x184>)
 80088fe:	4638      	mov	r0, r7
 8008900:	f01d ffb9 	bl	8026876 <strcpy>
			break;
 8008904:	e79d      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8008906:	491e      	ldr	r1, [pc, #120]	; (8008980 <tag_callback+0x188>)
 8008908:	4638      	mov	r0, r7
 800890a:	f01d ffb4 	bl	8026876 <strcpy>
			break;
 800890e:	e798      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8008910:	491c      	ldr	r1, [pc, #112]	; (8008984 <tag_callback+0x18c>)
 8008912:	4638      	mov	r0, r7
 8008914:	f01d ffaf 	bl	8026876 <strcpy>
			break;
 8008918:	e793      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 800891a:	491b      	ldr	r1, [pc, #108]	; (8008988 <tag_callback+0x190>)
 800891c:	4638      	mov	r0, r7
 800891e:	f01d ffaa 	bl	8026876 <strcpy>
			break;
 8008922:	e78e      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8008924:	4b14      	ldr	r3, [pc, #80]	; (8008978 <tag_callback+0x180>)
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	3330      	adds	r3, #48	; 0x30
 800892e:	803b      	strh	r3, [r7, #0]
			break;
 8008930:	e787      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <tag_callback+0x194>)
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	803b      	strh	r3, [r7, #0]
			break;
 8008938:	e783      	b.n	8008842 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 800893a:	4915      	ldr	r1, [pc, #84]	; (8008990 <tag_callback+0x198>)
 800893c:	4638      	mov	r0, r7
 800893e:	f01d ff9a 	bl	8026876 <strcpy>
			break;
 8008942:	e77e      	b.n	8008842 <tag_callback+0x4a>
 8008944:	2000028c 	.word	0x2000028c
 8008948:	40020c00 	.word	0x40020c00
 800894c:	20002de0 	.word	0x20002de0
 8008950:	0802d8f8 	.word	0x0802d8f8
 8008954:	20000290 	.word	0x20000290
 8008958:	20003484 	.word	0x20003484
 800895c:	08046a2c 	.word	0x08046a2c
 8008960:	0802d924 	.word	0x0802d924
 8008964:	0802d6d8 	.word	0x0802d6d8
 8008968:	0802d904 	.word	0x0802d904
 800896c:	2000002e 	.word	0x2000002e
 8008970:	200000a0 	.word	0x200000a0
 8008974:	40021000 	.word	0x40021000
 8008978:	200033e8 	.word	0x200033e8
 800897c:	20000030 	.word	0x20000030
 8008980:	20000144 	.word	0x20000144
 8008984:	20000090 	.word	0x20000090
 8008988:	2000024c 	.word	0x2000024c
 800898c:	08044e10 	.word	0x08044e10
 8008990:	20000070 	.word	0x20000070

08008994 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	b085      	sub	sp, #20
 800899a:	4615      	mov	r5, r2
 800899c:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800899e:	220a      	movs	r2, #10
 80089a0:	a903      	add	r1, sp, #12
 80089a2:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 80089a4:	4699      	mov	r9, r3
 80089a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80089a8:	f01e fd40 	bl	802742c <strtol>
 80089ac:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80089ae:	4621      	mov	r1, r4
 80089b0:	462a      	mov	r2, r5
 80089b2:	4871      	ldr	r0, [pc, #452]	; (8008b78 <httpd_cgi_handler+0x1e4>)
 80089b4:	4633      	mov	r3, r6
 80089b6:	f01d fccd 	bl	8026354 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	dd37      	ble.n	8008a2e <httpd_cgi_handler+0x9a>
 80089be:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80089c0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8008ba8 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80089c4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8008bac <httpd_cgi_handler+0x218>
		switch (j) {
 80089c8:	f1a6 030a 	sub.w	r3, r6, #10
 80089cc:	2b0e      	cmp	r3, #14
 80089ce:	f200 80cc 	bhi.w	8008b6a <httpd_cgi_handler+0x1d6>
 80089d2:	e8df f003 	tbb	[pc, r3]
 80089d6:	9eb6      	.short	0x9eb6
 80089d8:	08080808 	.word	0x08080808
 80089dc:	08080808 	.word	0x08080808
 80089e0:	864d6073 	.word	0x864d6073
 80089e4:	3a          	.byte	0x3a
 80089e5:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80089e6:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80089e8:	2101      	movs	r1, #1
 80089ea:	f1a6 000c 	sub.w	r0, r6, #12
 80089ee:	4b63      	ldr	r3, [pc, #396]	; (8008b7c <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 80089f0:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 80089f2:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80089f6:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 80089f8:	2a30      	cmp	r2, #48	; 0x30
 80089fa:	d01b      	beq.n	8008a34 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	4311      	orrs	r1, r2
 8008a00:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008a02:	f001 0202 	and.w	r2, r1, #2
 8008a06:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008a08:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8008a0a:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008a0c:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008a10:	f01d fca0 	bl	8026354 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8008a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4a58      	ldr	r2, [pc, #352]	; (8008b7c <httpd_cgi_handler+0x1e8>)
 8008a1c:	9100      	str	r1, [sp, #0]
 8008a1e:	2188      	movs	r1, #136	; 0x88
 8008a20:	4857      	ldr	r0, [pc, #348]	; (8008b80 <httpd_cgi_handler+0x1ec>)
 8008a22:	f004 fc17 	bl	800d254 <HAL_I2C_Master_Transmit>
 8008a26:	b960      	cbnz	r0, 8008a42 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a28:	3401      	adds	r4, #1
 8008a2a:	42a5      	cmp	r5, r4
 8008a2c:	d1cc      	bne.n	80089c8 <httpd_cgi_handler+0x34>
}
 8008a2e:	b005      	add	sp, #20
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8008a34:	2101      	movs	r1, #1
 8008a36:	fa01 f600 	lsl.w	r6, r1, r0
 8008a3a:	7819      	ldrb	r1, [r3, #0]
 8008a3c:	ea21 0106 	bic.w	r1, r1, r6
 8008a40:	e7df      	b.n	8008a02 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8008a42:	4850      	ldr	r0, [pc, #320]	; (8008b84 <httpd_cgi_handler+0x1f0>)
 8008a44:	f01d fc86 	bl	8026354 <iprintf>
 8008a48:	e7ee      	b.n	8008a28 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	3c01      	subs	r4, #1
 8008a4e:	484e      	ldr	r0, [pc, #312]	; (8008b88 <httpd_cgi_handler+0x1f4>)
 8008a50:	440c      	add	r4, r1
 8008a52:	4623      	mov	r3, r4
 8008a54:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a58:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008a5a:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a5c:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008a60:	bf18      	it	ne
 8008a62:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a64:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008a66:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a68:	dcf3      	bgt.n	8008a52 <httpd_cgi_handler+0xbe>
}
 8008a6a:	b005      	add	sp, #20
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a70:	4e46      	ldr	r6, [pc, #280]	; (8008b8c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008a78:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a7a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008a7c:	2b30      	cmp	r3, #48	; 0x30
 8008a7e:	bf0c      	ite	eq
 8008a80:	f020 0001 	biceq.w	r0, r0, #1
 8008a84:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8008a88:	f7fd fe92 	bl	80067b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008a8c:	42a5      	cmp	r5, r4
 8008a8e:	dcf0      	bgt.n	8008a72 <httpd_cgi_handler+0xde>
}
 8008a90:	b005      	add	sp, #20
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a96:	4e3d      	ldr	r6, [pc, #244]	; (8008b8c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008a9e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008aa0:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	bf0c      	ite	eq
 8008aa6:	f020 0002 	biceq.w	r0, r0, #2
 8008aaa:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8008aae:	f7fd fe7f 	bl	80067b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008ab2:	42a5      	cmp	r5, r4
 8008ab4:	dcf0      	bgt.n	8008a98 <httpd_cgi_handler+0x104>
}
 8008ab6:	b005      	add	sp, #20
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	4e33      	ldr	r6, [pc, #204]	; (8008b8c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008ac4:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008ac6:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008ac8:	2b30      	cmp	r3, #48	; 0x30
 8008aca:	bf0c      	ite	eq
 8008acc:	f020 0004 	biceq.w	r0, r0, #4
 8008ad0:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8008ad4:	f7fd fe6c 	bl	80067b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008ad8:	42a5      	cmp	r5, r4
 8008ada:	dcf0      	bgt.n	8008abe <httpd_cgi_handler+0x12a>
}
 8008adc:	b005      	add	sp, #20
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008ae4:	4e2a      	ldr	r6, [pc, #168]	; (8008b90 <httpd_cgi_handler+0x1fc>)
 8008ae6:	e004      	b.n	8008af2 <httpd_cgi_handler+0x15e>
 8008ae8:	f004 f8ae 	bl	800cc48 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008aec:	42a5      	cmp	r5, r4
 8008aee:	dd9e      	ble.n	8008a2e <httpd_cgi_handler+0x9a>
 8008af0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8008af2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008af4:	2201      	movs	r2, #1
 8008af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008afa:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8008afc:	4423      	add	r3, r4
 8008afe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b02:	2b31      	cmp	r3, #49	; 0x31
 8008b04:	d1f0      	bne.n	8008ae8 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8008b06:	2200      	movs	r2, #0
 8008b08:	f004 f89e 	bl	800cc48 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b0c:	42a5      	cmp	r5, r4
 8008b0e:	dcef      	bgt.n	8008af0 <httpd_cgi_handler+0x15c>
 8008b10:	e78d      	b.n	8008a2e <httpd_cgi_handler+0x9a>
 8008b12:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008b14:	4e1f      	ldr	r6, [pc, #124]	; (8008b94 <httpd_cgi_handler+0x200>)
 8008b16:	e004      	b.n	8008b22 <httpd_cgi_handler+0x18e>
 8008b18:	f004 f896 	bl	800cc48 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b1c:	42ac      	cmp	r4, r5
 8008b1e:	da86      	bge.n	8008a2e <httpd_cgi_handler+0x9a>
 8008b20:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8008b22:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008b24:	2201      	movs	r2, #1
 8008b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b2a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8008b2c:	4423      	add	r3, r4
 8008b2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b32:	2b30      	cmp	r3, #48	; 0x30
 8008b34:	d1f0      	bne.n	8008b18 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8008b36:	2200      	movs	r2, #0
 8008b38:	f004 f886 	bl	800cc48 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008b3c:	42a5      	cmp	r5, r4
 8008b3e:	dcef      	bgt.n	8008b20 <httpd_cgi_handler+0x18c>
 8008b40:	e775      	b.n	8008a2e <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8008b42:	4815      	ldr	r0, [pc, #84]	; (8008b98 <httpd_cgi_handler+0x204>)
 8008b44:	f01d fca2 	bl	802648c <puts>
			osDelay(500);
 8008b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b4c:	f00d fc62 	bl	8016414 <osDelay>
 8008b50:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b54:	4911      	ldr	r1, [pc, #68]	; (8008b9c <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b58:	68ca      	ldr	r2, [r1, #12]
 8008b5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60cb      	str	r3, [r1, #12]
 8008b62:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008b66:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008b68:	e7fd      	b.n	8008b66 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8008b6a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b6e:	480d      	ldr	r0, [pc, #52]	; (8008ba4 <httpd_cgi_handler+0x210>)
 8008b70:	f01d fbf0 	bl	8026354 <iprintf>
			break;
 8008b74:	e758      	b.n	8008a28 <httpd_cgi_handler+0x94>
 8008b76:	bf00      	nop
 8008b78:	0802d93c 	.word	0x0802d93c
 8008b7c:	20000290 	.word	0x20000290
 8008b80:	2000257c 	.word	0x2000257c
 8008b84:	0802d26c 	.word	0x0802d26c
 8008b88:	2000002e 	.word	0x2000002e
 8008b8c:	200033e8 	.word	0x200033e8
 8008b90:	40021000 	.word	0x40021000
 8008b94:	40020c00 	.word	0x40020c00
 8008b98:	0802d968 	.word	0x0802d968
 8008b9c:	e000ed00 	.word	0xe000ed00
 8008ba0:	05fa0004 	.word	0x05fa0004
 8008ba4:	0802d9a0 	.word	0x0802d9a0
 8008ba8:	200033e4 	.word	0x200033e4
 8008bac:	0802d984 	.word	0x0802d984

08008bb0 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8008bb0:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8008bb2:	4802      	ldr	r0, [pc, #8]	; (8008bbc <httpd_post_receive_data+0xc>)
 8008bb4:	f01d fc6a 	bl	802648c <puts>
}
 8008bb8:	2000      	movs	r0, #0
 8008bba:	bd08      	pop	{r3, pc}
 8008bbc:	0802d9c0 	.word	0x0802d9c0

08008bc0 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8008bc0:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8008bc2:	4802      	ldr	r0, [pc, #8]	; (8008bcc <httpd_post_begin+0xc>)
 8008bc4:	f01d fc62 	bl	802648c <puts>
}
 8008bc8:	2000      	movs	r0, #0
 8008bca:	bd08      	pop	{r3, pc}
 8008bcc:	0802d9dc 	.word	0x0802d9dc

08008bd0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <httpd_post_finished+0x8>)
 8008bd2:	f01d bc5b 	b.w	802648c <puts>
 8008bd6:	bf00      	nop
 8008bd8:	0802d9f0 	.word	0x0802d9f0

08008bdc <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008bdc:	4803      	ldr	r0, [pc, #12]	; (8008bec <init_httpd_ssi+0x10>)
 8008bde:	2215      	movs	r2, #21
 8008be0:	4903      	ldr	r1, [pc, #12]	; (8008bf0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8008be2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008be4:	f011 fa78 	bl	801a0d8 <http_set_ssi_handler>
}
 8008be8:	bd08      	pop	{r3, pc}
 8008bea:	bf00      	nop
 8008bec:	080087f9 	.word	0x080087f9
 8008bf0:	2000029c 	.word	0x2000029c

08008bf4 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8008bf4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8008bf6:	7804      	ldrb	r4, [r0, #0]
 8008bf8:	b194      	cbz	r4, 8008c20 <parsep2+0x2c>
 8008bfa:	2c7d      	cmp	r4, #125	; 0x7d
 8008bfc:	d010      	beq.n	8008c20 <parsep2+0x2c>
	j = 0;
 8008bfe:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8008c02:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8008c04:	f811 600e 	ldrb.w	r6, [r1, lr]
 8008c08:	f105 0c01 	add.w	ip, r5, #1
 8008c0c:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8008c0e:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8008c12:	d008      	beq.n	8008c26 <parsep2+0x32>
 8008c14:	4665      	mov	r5, ip
			j = 0;
 8008c16:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8008c1a:	b10c      	cbz	r4, 8008c20 <parsep2+0x2c>
 8008c1c:	2c7d      	cmp	r4, #125	; 0x7d
 8008c1e:	d1f1      	bne.n	8008c04 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008c24:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8008c26:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8008c28:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8008c2c:	d001      	beq.n	8008c32 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8008c2e:	4665      	mov	r5, ip
 8008c30:	e7f3      	b.n	8008c1a <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8008c32:	2a01      	cmp	r2, #1
				i++;
 8008c34:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8008c38:	d005      	beq.n	8008c46 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8008c3a:	2a02      	cmp	r2, #2
 8008c3c:	d01a      	beq.n	8008c74 <parsep2+0x80>
				} else if (type == 3) { // uint32_t hex string
 8008c3e:	2a03      	cmp	r2, #3
 8008c40:	d022      	beq.n	8008c88 <parsep2+0x94>
	while ((buf[i]) && (buf[i] != '}')) {
 8008c42:	5d44      	ldrb	r4, [r0, r5]
 8008c44:	e7e9      	b.n	8008c1a <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008c46:	5d44      	ldrb	r4, [r0, r5]
 8008c48:	1941      	adds	r1, r0, r5
 8008c4a:	b36c      	cbz	r4, 8008ca8 <parsep2+0xb4>
 8008c4c:	1e5d      	subs	r5, r3, #1
					j = 0;
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4e17      	ldr	r6, [pc, #92]	; (8008cb0 <parsep2+0xbc>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008c52:	5d30      	ldrb	r0, [r6, r4]
 8008c54:	0740      	lsls	r0, r0, #29
 8008c56:	d101      	bne.n	8008c5c <parsep2+0x68>
 8008c58:	2c2e      	cmp	r4, #46	; 0x2e
 8008c5a:	d11f      	bne.n	8008c9c <parsep2+0xa8>
						pch[j++] = buf[i++];
 8008c5c:	f805 4f01 	strb.w	r4, [r5, #1]!
 8008c60:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008c62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d1f3      	bne.n	8008c52 <parsep2+0x5e>
					pch[j] = 0;
 8008c6a:	4413      	add	r3, r2
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
}
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8008c74:	461a      	mov	r2, r3
 8008c76:	490f      	ldr	r1, [pc, #60]	; (8008cb4 <parsep2+0xc0>)
 8008c78:	4428      	add	r0, r5
 8008c7a:	f01d fd75 	bl	8026768 <siscanf>
 8008c7e:	3801      	subs	r0, #1
 8008c80:	bf18      	it	ne
 8008c82:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8008c88:	461a      	mov	r2, r3
 8008c8a:	490b      	ldr	r1, [pc, #44]	; (8008cb8 <parsep2+0xc4>)
 8008c8c:	4428      	add	r0, r5
 8008c8e:	f01d fd6b 	bl	8026768 <siscanf>
 8008c92:	3801      	subs	r0, #1
 8008c94:	bf18      	it	ne
 8008c96:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8008c9c:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8008ca0:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8008ca2:	0940      	lsrs	r0, r0, #5
 8008ca4:	4240      	negs	r0, r0
 8008ca6:	e7e2      	b.n	8008c6e <parsep2+0x7a>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e7df      	b.n	8008c6e <parsep2+0x7a>
 8008cae:	bf00      	nop
 8008cb0:	080470ad 	.word	0x080470ad
 8008cb4:	0802da08 	.word	0x0802da08
 8008cb8:	0802da0c 	.word	0x0802da0c

08008cbc <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile char p2[256];
	volatile char s1[16];
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8008cc0:	4e9a      	ldr	r6, [pc, #616]	; (8008f2c <returnpage+0x270>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008cc2:	b0d2      	sub	sp, #328	; 0x148
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;
 8008cc4:	2500      	movs	r5, #0
	if (expectedapage) {
 8008cc6:	6833      	ldr	r3, [r6, #0]
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008cc8:	f8ad 100e 	strh.w	r1, [sp, #14]
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;
 8008ccc:	950c      	str	r5, [sp, #48]	; 0x30
 8008cce:	950d      	str	r5, [sp, #52]	; 0x34
		if (errorm == 0) {
 8008cd0:	b103      	cbz	r3, 8008cd4 <returnpage+0x18>
 8008cd2:	b122      	cbz	r2, 8008cde <returnpage+0x22>
					rebootme(0);
				}
			}
		}
	}
	expectedapage = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6033      	str	r3, [r6, #0]
}
 8008cd8:	b052      	add	sp, #328	; 0x148
 8008cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("server returned page: %.*s\n", charcount, content);
 8008cde:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8008ce2:	4604      	mov	r4, r0
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ce4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8008ce8:	af09      	add	r7, sp, #36	; 0x24
			printf("server returned page: %.*s\n", charcount, content);
 8008cea:	4602      	mov	r2, r0
 8008cec:	b289      	uxth	r1, r1
 8008cee:	4890      	ldr	r0, [pc, #576]	; (8008f30 <returnpage+0x274>)
 8008cf0:	f01d fb30 	bl	8026354 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008cf4:	4b8f      	ldr	r3, [pc, #572]	; (8008f34 <returnpage+0x278>)
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	aa04      	add	r2, sp, #16
 8008cfa:	498f      	ldr	r1, [pc, #572]	; (8008f38 <returnpage+0x27c>)
			s1[0] = '\0';
 8008cfc:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008d00:	e9cd 7800 	strd	r7, r8, [sp]
 8008d04:	f01d fd30 	bl	8026768 <siscanf>
 8008d08:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f000 80de 	beq.w	8008ece <returnpage+0x212>
				switch (nconv) {
 8008d12:	9b05      	ldr	r3, [sp, #20]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	f200 8100 	bhi.w	8008f1c <returnpage+0x260>
 8008d1c:	e8df f003 	tbb	[pc, r3]
 8008d20:	56025053 	.word	0x56025053
 8008d24:	f10d 0818 	add.w	r8, sp, #24
					if (p1 == 1) {		// reboot
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f000 80eb 	beq.w	8008f06 <returnpage+0x24a>
					if (p1 == 2) {		// freeze the UDP streaming
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 8008d34:	4b81      	ldr	r3, [pc, #516]	; (8008f3c <returnpage+0x280>)
					if (p1 == 2) {		// freeze the UDP streaming
 8008d36:	f000 80e0 	beq.w	8008efa <returnpage+0x23e>
						globalfreeze = 0;
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8008d3e:	487d      	ldr	r0, [pc, #500]	; (8008f34 <returnpage+0x278>)
 8008d40:	f7f7 fa88 	bl	8000254 <strlen>
 8008d44:	2806      	cmp	r0, #6
 8008d46:	f240 80ca 	bls.w	8008ede <returnpage+0x222>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8008d4a:	497a      	ldr	r1, [pc, #488]	; (8008f34 <returnpage+0x278>)
 8008d4c:	487c      	ldr	r0, [pc, #496]	; (8008f40 <returnpage+0x284>)
 8008d4e:	f01d fb01 	bl	8026354 <iprintf>
					if (statuspkt.uid != sn) {
 8008d52:	4c7c      	ldr	r4, [pc, #496]	; (8008f44 <returnpage+0x288>)
 8008d54:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008d58:	9a04      	ldr	r2, [sp, #16]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <returnpage+0xb8>
						statuspkt.uid = sn;
 8008d60:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008d62:	4879      	ldr	r0, [pc, #484]	; (8008f48 <returnpage+0x28c>)
						statuspkt.uid = sn;
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008d6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008d6e:	b289      	uxth	r1, r1
 8008d70:	f01d faf0 	bl	8026354 <iprintf>
			if (!res) {		// build changed?
 8008d74:	f8d8 3000 	ldr.w	r3, [r8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80a0 	beq.w	8008ebe <returnpage+0x202>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO) && (http_downloading == NOT_LOADING)) {// the version advertised is different to this one running now
 8008d7e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008d82:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d0a3      	beq.n	8008cd4 <returnpage+0x18>
 8008d8c:	4a6f      	ldr	r2, [pc, #444]	; (8008f4c <returnpage+0x290>)
 8008d8e:	f242 7330 	movw	r3, #10032	; 0x2730
 8008d92:	6812      	ldr	r2, [r2, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d09d      	beq.n	8008cd4 <returnpage+0x18>
 8008d98:	4b6d      	ldr	r3, [pc, #436]	; (8008f50 <returnpage+0x294>)
 8008d9a:	681c      	ldr	r4, [r3, #0]
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d199      	bne.n	8008cd4 <returnpage+0x18>
				if (lptask_init_done == 0) {		// if running, reboot before trying to load
 8008da0:	4b6c      	ldr	r3, [pc, #432]	; (8008f54 <returnpage+0x298>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 80a1 	bne.w	8008eec <returnpage+0x230>
					osDelay(1000);
 8008daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008dae:	f00d fb31 	bl	8016414 <osDelay>
					httploader(fwfilename, loaderhost, crc1, crc2);
 8008db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db4:	4968      	ldr	r1, [pc, #416]	; (8008f58 <returnpage+0x29c>)
 8008db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db8:	4868      	ldr	r0, [pc, #416]	; (8008f5c <returnpage+0x2a0>)
 8008dba:	f7f9 f813 	bl	8001de4 <httploader>
 8008dbe:	e789      	b.n	8008cd4 <returnpage+0x18>
 8008dc0:	f10d 0818 	add.w	r8, sp, #24
 8008dc4:	e7bb      	b.n	8008d3e <returnpage+0x82>
 8008dc6:	f10d 0818 	add.w	r8, sp, #24
 8008dca:	e7c2      	b.n	8008d52 <returnpage+0x96>
					if (p2[0] == '{') {		// its the start of enclosed params
 8008dcc:	f898 3000 	ldrb.w	r3, [r8]
						res = 0;
 8008dd0:	f10d 0818 	add.w	r8, sp, #24
					if (p2[0] == '{') {		// its the start of enclosed params
 8008dd4:	2b7b      	cmp	r3, #123	; 0x7b
 8008dd6:	d1a7      	bne.n	8008d28 <returnpage+0x6c>
						res = 0;
 8008dd8:	2300      	movs	r3, #0
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4960      	ldr	r1, [pc, #384]	; (8008f60 <returnpage+0x2a4>)
 8008dde:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res = 0;
 8008de2:	f8c8 3000 	str.w	r3, [r8]
						res2 = 0;
 8008de6:	9307      	str	r3, [sp, #28]
						res3 = 0;
 8008de8:	9308      	str	r3, [sp, #32]
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008dea:	4b5c      	ldr	r3, [pc, #368]	; (8008f5c <returnpage+0x2a0>)
 8008dec:	f7ff ff02 	bl	8008bf4 <parsep2>
 8008df0:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008df4:	2202      	movs	r2, #2
 8008df6:	495b      	ldr	r1, [pc, #364]	; (8008f64 <returnpage+0x2a8>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008df8:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008dfa:	4b54      	ldr	r3, [pc, #336]	; (8008f4c <returnpage+0x290>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008dfc:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008e00:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e04:	f7ff fef6 	bl	8008bf4 <parsep2>
 8008e08:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	4956      	ldr	r1, [pc, #344]	; (8008f68 <returnpage+0x2ac>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008e10:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008e12:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008e14:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008e18:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e1c:	f7ff feea 	bl	8008bf4 <parsep2>
 8008e20:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008e24:	2203      	movs	r2, #3
 8008e26:	4951      	ldr	r1, [pc, #324]	; (8008f6c <returnpage+0x2b0>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008e28:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008e2a:	ab0b      	add	r3, sp, #44	; 0x2c
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008e2c:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008e30:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e34:	f7ff fede 	bl	8008bf4 <parsep2>
 8008e38:	f8d8 3000 	ldr.w	r3, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	494c      	ldr	r1, [pc, #304]	; (8008f70 <returnpage+0x2b4>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008e40:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008e42:	4b45      	ldr	r3, [pc, #276]	; (8008f58 <returnpage+0x29c>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8008e44:	f8c8 0000 	str.w	r0, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008e48:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e4c:	f7ff fed2 	bl	8008bf4 <parsep2>
 8008e50:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008e52:	ab0d      	add	r3, sp, #52	; 0x34
 8008e54:	4947      	ldr	r1, [pc, #284]	; (8008f74 <returnpage+0x2b8>)
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008e56:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008e58:	2203      	movs	r2, #3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8008e5a:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008e5c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e60:	f7ff fec8 	bl	8008bf4 <parsep2>
 8008e64:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008e66:	ab0e      	add	r3, sp, #56	; 0x38
 8008e68:	4943      	ldr	r1, [pc, #268]	; (8008f78 <returnpage+0x2bc>)
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008e6a:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008e6c:	2201      	movs	r2, #1
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8008e6e:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008e70:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e74:	f7ff febe 	bl	8008bf4 <parsep2>
 8008e78:	9b07      	ldr	r3, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	493f      	ldr	r1, [pc, #252]	; (8008f7c <returnpage+0x2c0>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008e7e:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008e80:	4b3f      	ldr	r3, [pc, #252]	; (8008f80 <returnpage+0x2c4>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8008e82:	9007      	str	r0, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008e84:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e88:	f7ff feb4 	bl	8008bf4 <parsep2>
 8008e8c:	9b08      	ldr	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8008e8e:	2202      	movs	r2, #2
 8008e90:	493c      	ldr	r1, [pc, #240]	; (8008f84 <returnpage+0x2c8>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008e92:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8008e94:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <returnpage+0x2cc>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8008e96:	9008      	str	r0, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8008e98:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008e9c:	f7ff feaa 	bl	8008bf4 <parsep2>
 8008ea0:	9a08      	ldr	r2, [sp, #32]
 8008ea2:	4603      	mov	r3, r0
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8008ea4:	4939      	ldr	r1, [pc, #228]	; (8008f8c <returnpage+0x2d0>)
 8008ea6:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8008eaa:	4313      	orrs	r3, r2
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8008eac:	2202      	movs	r2, #2
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8008eae:	9308      	str	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8008eb0:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <returnpage+0x2d4>)
 8008eb2:	f7ff fe9f 	bl	8008bf4 <parsep2>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	4318      	orrs	r0, r3
 8008eba:	9008      	str	r0, [sp, #32]
 8008ebc:	e734      	b.n	8008d28 <returnpage+0x6c>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8008ebe:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <returnpage+0x290>)
 8008ec0:	f242 7130 	movw	r1, #10032	; 0x2730
 8008ec4:	4833      	ldr	r0, [pc, #204]	; (8008f94 <returnpage+0x2d8>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	f01d fa44 	bl	8026354 <iprintf>
 8008ecc:	e757      	b.n	8008d7e <returnpage+0xc2>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4831      	ldr	r0, [pc, #196]	; (8008f98 <returnpage+0x2dc>)
 8008ed2:	f10d 0818 	add.w	r8, sp, #24
 8008ed6:	4c1b      	ldr	r4, [pc, #108]	; (8008f44 <returnpage+0x288>)
 8008ed8:	f01d fa3c 	bl	8026354 <iprintf>
 8008edc:	e74a      	b.n	8008d74 <returnpage+0xb8>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 8008ede:	4d2f      	ldr	r5, [pc, #188]	; (8008f9c <returnpage+0x2e0>)
 8008ee0:	4c14      	ldr	r4, [pc, #80]	; (8008f34 <returnpage+0x278>)
 8008ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	e72e      	b.n	8008d4a <returnpage+0x8e>
					printf("Rebooting before loading new firmware, wait...\n");
 8008eec:	482c      	ldr	r0, [pc, #176]	; (8008fa0 <returnpage+0x2e4>)
 8008eee:	f01d facd 	bl	802648c <puts>
					rebootme(0);
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7fa ff46 	bl	8003d84 <rebootme>
 8008ef8:	e6ec      	b.n	8008cd4 <returnpage+0x18>
						globalfreeze = 1;
 8008efa:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 8008efc:	4829      	ldr	r0, [pc, #164]	; (8008fa4 <returnpage+0x2e8>)
						globalfreeze = 1;
 8008efe:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 8008f00:	f01d fac4 	bl	802648c <puts>
 8008f04:	e71b      	b.n	8008d3e <returnpage+0x82>
						printf("Server -> commands a reboot...\n");
 8008f06:	4828      	ldr	r0, [pc, #160]	; (8008fa8 <returnpage+0x2ec>)
 8008f08:	f01d fac0 	bl	802648c <puts>
						osDelay(500);
 8008f0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f10:	f00d fa80 	bl	8016414 <osDelay>
						rebootme(6);
 8008f14:	2006      	movs	r0, #6
 8008f16:	f7fa ff35 	bl	8003d84 <rebootme>
 8008f1a:	e709      	b.n	8008d30 <returnpage+0x74>
					printf("Wrong number of params from Server -> %d\n", nconv);
 8008f1c:	9905      	ldr	r1, [sp, #20]
 8008f1e:	f10d 0818 	add.w	r8, sp, #24
 8008f22:	4822      	ldr	r0, [pc, #136]	; (8008fac <returnpage+0x2f0>)
 8008f24:	4c07      	ldr	r4, [pc, #28]	; (8008f44 <returnpage+0x288>)
 8008f26:	f01d fa15 	bl	8026354 <iprintf>
					break;
 8008f2a:	e723      	b.n	8008d74 <returnpage+0xb8>
 8008f2c:	20003480 	.word	0x20003480
 8008f30:	0802da10 	.word	0x0802da10
 8008f34:	200034c8 	.word	0x200034c8
 8008f38:	0802da2c 	.word	0x0802da2c
 8008f3c:	2000345c 	.word	0x2000345c
 8008f40:	0802dab4 	.word	0x0802dab4
 8008f44:	2000300c 	.word	0x2000300c
 8008f48:	0802dad4 	.word	0x0802dad4
 8008f4c:	20002dd4 	.word	0x20002dd4
 8008f50:	200018bc 	.word	0x200018bc
 8008f54:	20002db8 	.word	0x20002db8
 8008f58:	2000001c 	.word	0x2000001c
 8008f5c:	20001a30 	.word	0x20001a30
 8008f60:	0802da3c 	.word	0x0802da3c
 8008f64:	0802da40 	.word	0x0802da40
 8008f68:	0802da44 	.word	0x0802da44
 8008f6c:	0802da4c 	.word	0x0802da4c
 8008f70:	0802da54 	.word	0x0802da54
 8008f74:	0802da58 	.word	0x0802da58
 8008f78:	0802da5c 	.word	0x0802da5c
 8008f7c:	0802da60 	.word	0x0802da60
 8008f80:	20001a70 	.word	0x20001a70
 8008f84:	0802da64 	.word	0x0802da64
 8008f88:	20002db4 	.word	0x20002db4
 8008f8c:	0802da68 	.word	0x0802da68
 8008f90:	20001a90 	.word	0x20001a90
 8008f94:	0802db48 	.word	0x0802db48
 8008f98:	0802db20 	.word	0x0802db20
 8008f9c:	0802b32c 	.word	0x0802b32c
 8008fa0:	0802db7c 	.word	0x0802db7c
 8008fa4:	0802da8c 	.word	0x0802da8c
 8008fa8:	0802da6c 	.word	0x0802da6c
 8008fac:	0802daf4 	.word	0x0802daf4

08008fb0 <initialapisn>:

}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, j;

	j = 1;
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8008fb4:	4c27      	ldr	r4, [pc, #156]	; (8009054 <initialapisn+0xa4>)
void initialapisn() {
 8008fb6:	b084      	sub	sp, #16

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8008fb8:	4d27      	ldr	r5, [pc, #156]	; (8009058 <initialapisn+0xa8>)
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8008fba:	f504 6284 	add.w	r2, r4, #1056	; 0x420
 8008fbe:	4927      	ldr	r1, [pc, #156]	; (800905c <initialapisn+0xac>)
 8008fc0:	4827      	ldr	r0, [pc, #156]	; (8009060 <initialapisn+0xb0>)
 8008fc2:	ca1c      	ldmia	r2, {r2, r3, r4}
 8008fc4:	9400      	str	r4, [sp, #0]
 8008fc6:	f01d fbaf 	bl	8026728 <siprintf>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8008fca:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8008fce:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d132      	bne.n	800903e <initialapisn+0x8e>
	j = 1;
 8008fd8:	2701      	movs	r7, #1
	{
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8008fda:	f8df a094 	ldr.w	sl, [pc, #148]	; 8009070 <initialapisn+0xc0>
	printf("getpage: %s\n", page);
 8008fde:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8009060 <initialapisn+0xb0>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8008fe2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009074 <initialapisn+0xc4>
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4650      	mov	r0, sl
 8008fea:	f01d f9b3 	bl	8026354 <iprintf>
	printf("getpage: %s\n", page);
 8008fee:	4649      	mov	r1, r9
 8008ff0:	481c      	ldr	r0, [pc, #112]	; (8009064 <initialapisn+0xb4>)
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8008ff2:	f241 3488 	movw	r4, #5000	; 0x1388
	printf("getpage: %s\n", page);
 8008ff6:	f01d f9ad 	bl	8026354 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	481a      	ldr	r0, [pc, #104]	; (8009068 <initialapisn+0xb8>)
		getpage(stmuid);		// get sn and targ
		for (i = 0; i < 5000; i++) {
			if (statuspkt.uid != 0xfeed)
 8008ffe:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009002:	f01d f9a7 	bl	8026354 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8009006:	2300      	movs	r3, #0
 8009008:	4649      	mov	r1, r9
 800900a:	4640      	mov	r0, r8
 800900c:	461a      	mov	r2, r3
 800900e:	f7f8 fe7b 	bl	8001d08 <hc_open>
 8009012:	9003      	str	r0, [sp, #12]
		for (i = 0; i < 5000; i++) {
 8009014:	e003      	b.n	800901e <initialapisn+0x6e>
				break;
			osDelay(1);
 8009016:	f00d f9fd 	bl	8016414 <osDelay>
		for (i = 0; i < 5000; i++) {
 800901a:	3c01      	subs	r4, #1
 800901c:	d005      	beq.n	800902a <initialapisn+0x7a>
			if (statuspkt.uid != 0xfeed)
 800901e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 8009022:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8009024:	b29b      	uxth	r3, r3
 8009026:	42b3      	cmp	r3, r6
 8009028:	d0f5      	beq.n	8009016 <initialapisn+0x66>
		}
		j++;
 800902a:	3701      	adds	r7, #1
		if (j > 5) {
 800902c:	2f05      	cmp	r7, #5
 800902e:	dc09      	bgt.n	8009044 <initialapisn+0x94>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8009030:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009034:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8009038:	b29b      	uxth	r3, r3
 800903a:	4293      	cmp	r3, r2
 800903c:	d0d3      	beq.n	8008fe6 <initialapisn+0x36>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 800903e:	b004      	add	sp, #16
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8009044:	4809      	ldr	r0, [pc, #36]	; (800906c <initialapisn+0xbc>)
 8009046:	f01d fa21 	bl	802648c <puts>
			rebootme(8);
 800904a:	2008      	movs	r0, #8
 800904c:	f7fa fe9a 	bl	8003d84 <rebootme>
 8009050:	e7ee      	b.n	8009030 <initialapisn+0x80>
 8009052:	bf00      	nop
 8009054:	1ff0f000 	.word	0x1ff0f000
 8009058:	2000300c 	.word	0x2000300c
 800905c:	0802dbd4 	.word	0x0802dbd4
 8009060:	20003488 	.word	0x20003488
 8009064:	0802dbac 	.word	0x0802dbac
 8009068:	0802dbbc 	.word	0x0802dbbc
 800906c:	0802dc1c 	.word	0x0802dc1c
 8009070:	0802dbec 	.word	0x0802dbec
 8009074:	0802b32c 	.word	0x0802b32c

08009078 <requestapisn>:

void requestapisn() {
 8009078:	b530      	push	{r4, r5, lr}
	printf("getpage: %s\n", page);
 800907a:	4d0b      	ldr	r5, [pc, #44]	; (80090a8 <requestapisn+0x30>)
void requestapisn() {
 800907c:	b083      	sub	sp, #12
	printf("Control Server is %s\n", SERVER_DESTINATION);
 800907e:	4c0b      	ldr	r4, [pc, #44]	; (80090ac <requestapisn+0x34>)
	printf("updating S/N and UDP target using http\n");
 8009080:	480b      	ldr	r0, [pc, #44]	; (80090b0 <requestapisn+0x38>)
 8009082:	f01d fa03 	bl	802648c <puts>
	printf("getpage: %s\n", page);
 8009086:	4629      	mov	r1, r5
 8009088:	480a      	ldr	r0, [pc, #40]	; (80090b4 <requestapisn+0x3c>)
 800908a:	f01d f963 	bl	8026354 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 800908e:	4621      	mov	r1, r4
 8009090:	4809      	ldr	r0, [pc, #36]	; (80090b8 <requestapisn+0x40>)
 8009092:	f01d f95f 	bl	8026354 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8009096:	2300      	movs	r3, #0
 8009098:	4629      	mov	r1, r5
 800909a:	4620      	mov	r0, r4
 800909c:	461a      	mov	r2, r3
 800909e:	f7f8 fe33 	bl	8001d08 <hc_open>
 80090a2:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 80090a4:	b003      	add	sp, #12
 80090a6:	bd30      	pop	{r4, r5, pc}
 80090a8:	20003488 	.word	0x20003488
 80090ac:	0802b32c 	.word	0x0802b32c
 80090b0:	0802dc44 	.word	0x0802dc44
 80090b4:	0802dbac 	.word	0x0802dbac
 80090b8:	0802dbbc 	.word	0x0802dbbc

080090bc <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80090bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80090be:	e003      	b.n	80090c8 <LoopCopyDataInit>

080090c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80090c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80090c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80090c6:	3104      	adds	r1, #4

080090c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80090c8:	480a      	ldr	r0, [pc, #40]	; (80090f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80090cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80090ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80090d0:	d3f6      	bcc.n	80090c0 <CopyDataInit>
  ldr  r2, =_sbss
 80090d2:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80090d4:	e002      	b.n	80090dc <LoopFillZerobss>

080090d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80090d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80090d8:	f842 3b04 	str.w	r3, [r2], #4

080090dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80090dc:	4b08      	ldr	r3, [pc, #32]	; (8009100 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80090de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80090e0:	d3f9      	bcc.n	80090d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80090e2:	f7ff f903 	bl	80082ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090e6:	f01c f813 	bl	8025110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090ea:	f7fb fc09 	bl	8004900 <main>
  bx  lr    
 80090ee:	4770      	bx	lr
  ldr  r3, =_sidata
 80090f0:	080479a4 	.word	0x080479a4
  ldr  r0, =_sdata
 80090f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80090f8:	200006d4 	.word	0x200006d4
  ldr  r2, =_sbss
 80090fc:	200006d8 	.word	0x200006d8
  ldr  r3, = _ebss
 8009100:	200300fc 	.word	0x200300fc

08009104 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009104:	e7fe      	b.n	8009104 <CAN1_RX0_IRQHandler>
 8009106:	Address 0x0000000008009106 is out of bounds.


08009108 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009108:	4a07      	ldr	r2, [pc, #28]	; (8009128 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800910a:	2003      	movs	r0, #3
{
 800910c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800910e:	6813      	ldr	r3, [r2, #0]
 8009110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009114:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009116:	f000 fc4f 	bl	80099b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800911a:	2000      	movs	r0, #0
 800911c:	f7fe ffb2 	bl	8008084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009120:	f7fe f830 	bl	8007184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009124:	2000      	movs	r0, #0
 8009126:	bd08      	pop	{r3, pc}
 8009128:	40023c00 	.word	0x40023c00

0800912c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800912c:	4a03      	ldr	r2, [pc, #12]	; (800913c <HAL_IncTick+0x10>)
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <HAL_IncTick+0x14>)
 8009130:	6811      	ldr	r1, [r2, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	440b      	add	r3, r1
 8009136:	6013      	str	r3, [r2, #0]
}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20003508 	.word	0x20003508
 8009140:	200002f4 	.word	0x200002f4

08009144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009144:	4b01      	ldr	r3, [pc, #4]	; (800914c <HAL_GetTick+0x8>)
 8009146:	6818      	ldr	r0, [r3, #0]
}
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20003508 	.word	0x20003508

08009150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009154:	f7ff fff6 	bl	8009144 <HAL_GetTick>
 8009158:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800915a:	1c63      	adds	r3, r4, #1
 800915c:	d002      	beq.n	8009164 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800915e:	4b04      	ldr	r3, [pc, #16]	; (8009170 <HAL_Delay+0x20>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009164:	f7ff ffee 	bl	8009144 <HAL_GetTick>
 8009168:	1b43      	subs	r3, r0, r5
 800916a:	42a3      	cmp	r3, r4
 800916c:	d3fa      	bcc.n	8009164 <HAL_Delay+0x14>
  {
  }
}
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	200002f4 	.word	0x200002f4

08009174 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009174:	2800      	cmp	r0, #0
 8009176:	f000 8144 	beq.w	8009402 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800917a:	6803      	ldr	r3, [r0, #0]
 800917c:	49a7      	ldr	r1, [pc, #668]	; (800941c <HAL_ADC_Init+0x2a8>)
 800917e:	4aa8      	ldr	r2, [pc, #672]	; (8009420 <HAL_ADC_Init+0x2ac>)
 8009180:	428b      	cmp	r3, r1
 8009182:	bf18      	it	ne
 8009184:	4293      	cmpne	r3, r2
{
 8009186:	b570      	push	{r4, r5, r6, lr}
 8009188:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800918a:	d003      	beq.n	8009194 <HAL_ADC_Init+0x20>
 800918c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009190:	4293      	cmp	r3, r2
 8009192:	d177      	bne.n	8009284 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8009194:	6863      	ldr	r3, [r4, #4]
 8009196:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800919a:	d17c      	bne.n	8009296 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80091a2:	f040 8082 	bne.w	80092aa <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d84e      	bhi.n	800924a <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80091ac:	69a3      	ldr	r3, [r4, #24]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d845      	bhi.n	800923e <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80091b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80091b4:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80091b8:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 80091bc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80091c0:	bf18      	it	ne
 80091c2:	2900      	cmpne	r1, #0
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80091ce:	bf0c      	ite	eq
 80091d0:	2300      	moveq	r3, #0
 80091d2:	f003 0301 	andne.w	r3, r3, #1
 80091d6:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 80091da:	bf0c      	ite	eq
 80091dc:	2300      	moveq	r3, #0
 80091de:	f003 0301 	andne.w	r3, r3, #1
 80091e2:	b123      	cbz	r3, 80091ee <HAL_ADC_Init+0x7a>
 80091e4:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 80091e8:	2a01      	cmp	r2, #1
 80091ea:	f200 8111 	bhi.w	8009410 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80091f4:	d165      	bne.n	80092c2 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80091f6:	69e3      	ldr	r3, [r4, #28]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	2b0f      	cmp	r3, #15
 80091fc:	d85b      	bhi.n	80092b6 <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80091fe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009202:	2b01      	cmp	r3, #1
 8009204:	d830      	bhi.n	8009268 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009206:	6963      	ldr	r3, [r4, #20]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d835      	bhi.n	8009278 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800920c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d823      	bhi.n	800925c <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009214:	4b83      	ldr	r3, [pc, #524]	; (8009424 <HAL_ADC_Init+0x2b0>)
 8009216:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009218:	429a      	cmp	r2, r3
 800921a:	d004      	beq.n	8009226 <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800921c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800921e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8009222:	f040 80e8 	bne.w	80093f6 <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8009226:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009228:	2d00      	cmp	r5, #0
 800922a:	f000 80d4 	beq.w	80093d6 <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800922e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009230:	06db      	lsls	r3, r3, #27
 8009232:	d54c      	bpl.n	80092ce <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009234:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8009236:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8009238:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800923c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800923e:	f240 1151 	movw	r1, #337	; 0x151
 8009242:	4879      	ldr	r0, [pc, #484]	; (8009428 <HAL_ADC_Init+0x2b4>)
 8009244:	f7fc fb14 	bl	8005870 <assert_failed>
 8009248:	e7b3      	b.n	80091b2 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800924a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800924e:	4876      	ldr	r0, [pc, #472]	; (8009428 <HAL_ADC_Init+0x2b4>)
 8009250:	f7fc fb0e 	bl	8005870 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009254:	69a3      	ldr	r3, [r4, #24]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d9ab      	bls.n	80091b2 <HAL_ADC_Init+0x3e>
 800925a:	e7f0      	b.n	800923e <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800925c:	f240 1157 	movw	r1, #343	; 0x157
 8009260:	4871      	ldr	r0, [pc, #452]	; (8009428 <HAL_ADC_Init+0x2b4>)
 8009262:	f7fc fb05 	bl	8005870 <assert_failed>
 8009266:	e7d5      	b.n	8009214 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009268:	f240 1155 	movw	r1, #341	; 0x155
 800926c:	486e      	ldr	r0, [pc, #440]	; (8009428 <HAL_ADC_Init+0x2b4>)
 800926e:	f7fc faff 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009272:	6963      	ldr	r3, [r4, #20]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d9c9      	bls.n	800920c <HAL_ADC_Init+0x98>
 8009278:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800927c:	486a      	ldr	r0, [pc, #424]	; (8009428 <HAL_ADC_Init+0x2b4>)
 800927e:	f7fc faf7 	bl	8005870 <assert_failed>
 8009282:	e7c3      	b.n	800920c <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009284:	f240 114d 	movw	r1, #333	; 0x14d
 8009288:	4867      	ldr	r0, [pc, #412]	; (8009428 <HAL_ADC_Init+0x2b4>)
 800928a:	f7fc faf1 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8009294:	d082      	beq.n	800919c <HAL_ADC_Init+0x28>
 8009296:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800929a:	4863      	ldr	r0, [pc, #396]	; (8009428 <HAL_ADC_Init+0x2b4>)
 800929c:	f7fc fae8 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80092a0:	68a3      	ldr	r3, [r4, #8]
 80092a2:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80092a6:	f43f af7e 	beq.w	80091a6 <HAL_ADC_Init+0x32>
 80092aa:	f240 114f 	movw	r1, #335	; 0x14f
 80092ae:	485e      	ldr	r0, [pc, #376]	; (8009428 <HAL_ADC_Init+0x2b4>)
 80092b0:	f7fc fade 	bl	8005870 <assert_failed>
 80092b4:	e777      	b.n	80091a6 <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80092b6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80092ba:	485b      	ldr	r0, [pc, #364]	; (8009428 <HAL_ADC_Init+0x2b4>)
 80092bc:	f7fc fad8 	bl	8005870 <assert_failed>
 80092c0:	e79d      	b.n	80091fe <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80092c2:	f240 1153 	movw	r1, #339	; 0x153
 80092c6:	4858      	ldr	r0, [pc, #352]	; (8009428 <HAL_ADC_Init+0x2b4>)
 80092c8:	f7fc fad2 	bl	8005870 <assert_failed>
 80092cc:	e793      	b.n	80091f6 <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 80092ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80092d0:	4b56      	ldr	r3, [pc, #344]	; (800942c <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80092d2:	4a57      	ldr	r2, [pc, #348]	; (8009430 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 80092d4:	400b      	ands	r3, r1
 80092d6:	f043 0302 	orr.w	r3, r3, #2
 80092da:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80092dc:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092de:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80092e0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80092e4:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80092e6:	6851      	ldr	r1, [r2, #4]
 80092e8:	6860      	ldr	r0, [r4, #4]
 80092ea:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80092ec:	484d      	ldr	r0, [pc, #308]	; (8009424 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80092ee:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092f0:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80092f2:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092f4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80092f8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009300:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009302:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800930a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009310:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009312:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009314:	6899      	ldr	r1, [r3, #8]
 8009316:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800931a:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800931c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800931e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009320:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009322:	ea42 0205 	orr.w	r2, r2, r5
 8009326:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009328:	d05c      	beq.n	80093e4 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800932a:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800932c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800932e:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8009332:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	4311      	orrs	r1, r2
 8009338:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8009340:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	432a      	orrs	r2, r5
 8009346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009348:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800934a:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800934c:	f021 0102 	bic.w	r1, r1, #2
 8009350:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8009358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800935a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800935e:	2a00      	cmp	r2, #0
 8009360:	d051      	beq.n	8009406 <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8009362:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009364:	3a01      	subs	r2, #1
 8009366:	2a07      	cmp	r2, #7
 8009368:	d864      	bhi.n	8009434 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800936a:	6859      	ldr	r1, [r3, #4]
 800936c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009370:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009372:	6859      	ldr	r1, [r3, #4]
 8009374:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8009378:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800937a:	6859      	ldr	r1, [r3, #4]
 800937c:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8009380:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8009384:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009386:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009388:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800938c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800938e:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009392:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009394:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009398:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800939a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800939c:	6899      	ldr	r1, [r3, #8]
 800939e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80093a2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80093a4:	6899      	ldr	r1, [r3, #8]
 80093a6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80093aa:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80093ae:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80093b0:	6899      	ldr	r1, [r3, #8]
 80093b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80093b6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80093be:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80093c0:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80093c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	f043 0301 	orr.w	r3, r3, #1
 80093cc:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80093ce:	2300      	movs	r3, #0
 80093d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7fd ff0c 	bl	80071f4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80093dc:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80093de:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 80093e2:	e724      	b.n	800922e <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093f2:	609a      	str	r2, [r3, #8]
 80093f4:	e7a8      	b.n	8009348 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80093f6:	f240 115b 	movw	r1, #347	; 0x15b
 80093fa:	480b      	ldr	r0, [pc, #44]	; (8009428 <HAL_ADC_Init+0x2b4>)
 80093fc:	f7fc fa38 	bl	8005870 <assert_failed>
 8009400:	e711      	b.n	8009226 <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8009402:	2001      	movs	r0, #1
}
 8009404:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800940c:	605a      	str	r2, [r3, #4]
 800940e:	e7b8      	b.n	8009382 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8009410:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8009414:	4804      	ldr	r0, [pc, #16]	; (8009428 <HAL_ADC_Init+0x2b4>)
 8009416:	f7fc fa2b 	bl	8005870 <assert_failed>
 800941a:	e6e8      	b.n	80091ee <HAL_ADC_Init+0x7a>
 800941c:	40012000 	.word	0x40012000
 8009420:	40012100 	.word	0x40012100
 8009424:	0f000001 	.word	0x0f000001
 8009428:	0802dc6c 	.word	0x0802dc6c
 800942c:	ffffeefd 	.word	0xffffeefd
 8009430:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8009434:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8009438:	4803      	ldr	r0, [pc, #12]	; (8009448 <HAL_ADC_Init+0x2d4>)
 800943a:	f7fc fa19 	bl	8005870 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800943e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009440:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009442:	3a01      	subs	r2, #1
 8009444:	e791      	b.n	800936a <HAL_ADC_Init+0x1f6>
 8009446:	bf00      	nop
 8009448:	0802dc6c 	.word	0x0802dc6c

0800944c <HAL_ADC_Start>:
{
 800944c:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 800944e:	2300      	movs	r3, #0
{
 8009450:	b082      	sub	sp, #8
 8009452:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8009454:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009456:	6983      	ldr	r3, [r0, #24]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d904      	bls.n	8009466 <HAL_ADC_Start+0x1a>
 800945c:	f240 21df 	movw	r1, #735	; 0x2df
 8009460:	4848      	ldr	r0, [pc, #288]	; (8009584 <HAL_ADC_Start+0x138>)
 8009462:	f7fc fa05 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8009466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009468:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800946c:	d174      	bne.n	8009558 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 800946e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009472:	2b01      	cmp	r3, #1
 8009474:	d079      	beq.n	800956a <HAL_ADC_Start+0x11e>
 8009476:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009478:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 800947a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800947e:	6893      	ldr	r3, [r2, #8]
 8009480:	07d8      	lsls	r0, r3, #31
 8009482:	d414      	bmi.n	80094ae <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009484:	4b40      	ldr	r3, [pc, #256]	; (8009588 <HAL_ADC_Start+0x13c>)
 8009486:	4841      	ldr	r0, [pc, #260]	; (800958c <HAL_ADC_Start+0x140>)
 8009488:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800948a:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800948c:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8009490:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009494:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8009496:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800949c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	b12b      	cbz	r3, 80094ae <HAL_ADC_Start+0x62>
      counter--;
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1f9      	bne.n	80094a2 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80094ae:	6890      	ldr	r0, [r2, #8]
 80094b0:	f010 0001 	ands.w	r0, r0, #1
 80094b4:	d02c      	beq.n	8009510 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80094b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094b8:	4b35      	ldr	r3, [pc, #212]	; (8009590 <HAL_ADC_Start+0x144>)
 80094ba:	400b      	ands	r3, r1
 80094bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094c0:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80094c2:	6853      	ldr	r3, [r2, #4]
 80094c4:	0559      	lsls	r1, r3, #21
 80094c6:	d505      	bpl.n	80094d4 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80094c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80094ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094d2:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80094d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80094da:	d02f      	beq.n	800953c <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80094dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094de:	f023 0306 	bic.w	r3, r3, #6
 80094e2:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80094e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80094e8:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80094ea:	4b2a      	ldr	r3, [pc, #168]	; (8009594 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 80094ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80094f0:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80094f2:	6858      	ldr	r0, [r3, #4]
 80094f4:	f010 001f 	ands.w	r0, r0, #31
 80094f8:	d114      	bne.n	8009524 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80094fa:	6893      	ldr	r3, [r2, #8]
 80094fc:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009500:	d10e      	bne.n	8009520 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009502:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8009504:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009506:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800950a:	6091      	str	r1, [r2, #8]
}
 800950c:	b002      	add	sp, #8
 800950e:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009512:	f043 0310 	orr.w	r3, r3, #16
 8009516:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009518:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8009520:	b002      	add	sp, #8
 8009522:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009524:	481c      	ldr	r0, [pc, #112]	; (8009598 <HAL_ADC_Start+0x14c>)
 8009526:	4282      	cmp	r2, r0
 8009528:	d00a      	beq.n	8009540 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800952a:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800952c:	06db      	lsls	r3, r3, #27
 800952e:	d402      	bmi.n	8009536 <HAL_ADC_Start+0xea>
 8009530:	4c1a      	ldr	r4, [pc, #104]	; (800959c <HAL_ADC_Start+0x150>)
 8009532:	42a2      	cmp	r2, r4
 8009534:	d01c      	beq.n	8009570 <HAL_ADC_Start+0x124>
  return HAL_OK;
 8009536:	2000      	movs	r0, #0
}
 8009538:	b002      	add	sp, #8
 800953a:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 800953c:	6463      	str	r3, [r4, #68]	; 0x44
 800953e:	e7d1      	b.n	80094e4 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009540:	6893      	ldr	r3, [r2, #8]
 8009542:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8009546:	d103      	bne.n	8009550 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009548:	6893      	ldr	r3, [r2, #8]
 800954a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800954e:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009550:	4b10      	ldr	r3, [pc, #64]	; (8009594 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8009552:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009554:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009556:	e7e3      	b.n	8009520 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8009558:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <HAL_ADC_Start+0x138>)
 800955e:	f7fc f987 	bl	8005870 <assert_failed>
  __HAL_LOCK(hadc);
 8009562:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d185      	bne.n	8009476 <HAL_ADC_Start+0x2a>
 800956a:	2002      	movs	r0, #2
}
 800956c:	b002      	add	sp, #8
 800956e:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009570:	68a0      	ldr	r0, [r4, #8]
 8009572:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8009576:	d1de      	bne.n	8009536 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800957e:	60a3      	str	r3, [r4, #8]
 8009580:	e7ce      	b.n	8009520 <HAL_ADC_Start+0xd4>
 8009582:	bf00      	nop
 8009584:	0802dc6c 	.word	0x0802dc6c
 8009588:	20000298 	.word	0x20000298
 800958c:	431bde83 	.word	0x431bde83
 8009590:	fffff8fe 	.word	0xfffff8fe
 8009594:	40012300 	.word	0x40012300
 8009598:	40012000 	.word	0x40012000
 800959c:	40012200 	.word	0x40012200

080095a0 <HAL_ADC_ConvCpltCallback>:
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop

080095a4 <HAL_ADC_LevelOutOfWindowCallback>:
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <HAL_ADC_ErrorCallback>:
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80095ac:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80095ae:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80095b0:	2a01      	cmp	r2, #1
{
 80095b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80095b4:	681d      	ldr	r5, [r3, #0]
{
 80095b6:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80095b8:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80095ba:	d904      	bls.n	80095c6 <HAL_ADC_IRQHandler+0x1a>
 80095bc:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80095c0:	4851      	ldr	r0, [pc, #324]	; (8009708 <HAL_ADC_IRQHandler+0x15c>)
 80095c2:	f7fc f955 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80095c6:	69e3      	ldr	r3, [r4, #28]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	2b0f      	cmp	r3, #15
 80095cc:	f200 8086 	bhi.w	80096dc <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80095d0:	6963      	ldr	r3, [r4, #20]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d87c      	bhi.n	80096d0 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80095d6:	07ab      	lsls	r3, r5, #30
 80095d8:	d52c      	bpl.n	8009634 <HAL_ADC_IRQHandler+0x88>
 80095da:	06b0      	lsls	r0, r6, #26
 80095dc:	d52a      	bpl.n	8009634 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80095de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e0:	06d9      	lsls	r1, r3, #27
 80095e2:	d403      	bmi.n	80095ec <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80095e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095ea:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80095f4:	d117      	bne.n	8009626 <HAL_ADC_IRQHandler+0x7a>
 80095f6:	69a2      	ldr	r2, [r4, #24]
 80095f8:	b9aa      	cbnz	r2, 8009626 <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095fc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8009600:	d002      	beq.n	8009608 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009602:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009604:	0552      	lsls	r2, r2, #21
 8009606:	d40e      	bmi.n	8009626 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	f022 0220 	bic.w	r2, r2, #32
 800960e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009616:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800961a:	04d8      	lsls	r0, r3, #19
 800961c:	d403      	bmi.n	8009626 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800961e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009620:	f043 0301 	orr.w	r3, r3, #1
 8009624:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff ffba 	bl	80095a0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	f06f 0212 	mvn.w	r2, #18
 8009632:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8009634:	0769      	lsls	r1, r5, #29
 8009636:	d530      	bpl.n	800969a <HAL_ADC_IRQHandler+0xee>
 8009638:	0632      	lsls	r2, r6, #24
 800963a:	d52e      	bpl.n	800969a <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800963c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800963e:	06db      	lsls	r3, r3, #27
 8009640:	d403      	bmi.n	800964a <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009648:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8009652:	d11b      	bne.n	800968c <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009656:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800965a:	d151      	bne.n	8009700 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800965c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800965e:	0551      	lsls	r1, r2, #21
 8009660:	d414      	bmi.n	800968c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009662:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009664:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8009668:	d110      	bne.n	800968c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800966a:	69a2      	ldr	r2, [r4, #24]
 800966c:	b972      	cbnz	r2, 800968c <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009674:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800967c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800967e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009680:	05da      	lsls	r2, r3, #23
 8009682:	d403      	bmi.n	800968c <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800968c:	4620      	mov	r0, r4
 800968e:	f000 f92f 	bl	80098f0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f06f 020c 	mvn.w	r2, #12
 8009698:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800969a:	0673      	lsls	r3, r6, #25
 800969c:	d505      	bpl.n	80096aa <HAL_ADC_IRQHandler+0xfe>
 800969e:	07e8      	lsls	r0, r5, #31
 80096a0:	d503      	bpl.n	80096aa <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	d41e      	bmi.n	80096e8 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80096aa:	06aa      	lsls	r2, r5, #26
 80096ac:	d501      	bpl.n	80096b2 <HAL_ADC_IRQHandler+0x106>
 80096ae:	0173      	lsls	r3, r6, #5
 80096b0:	d400      	bmi.n	80096b4 <HAL_ADC_IRQHandler+0x108>
}
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80096b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80096b6:	f06f 0520 	mvn.w	r5, #32
 80096ba:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 80096bc:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80096be:	f043 0302 	orr.w	r3, r3, #2
 80096c2:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80096c4:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80096c6:	f7ff ff6f 	bl	80095a8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	601d      	str	r5, [r3, #0]
}
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80096d0:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80096d4:	480c      	ldr	r0, [pc, #48]	; (8009708 <HAL_ADC_IRQHandler+0x15c>)
 80096d6:	f7fc f8cb 	bl	8005870 <assert_failed>
 80096da:	e77c      	b.n	80095d6 <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80096dc:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80096e0:	4809      	ldr	r0, [pc, #36]	; (8009708 <HAL_ADC_IRQHandler+0x15c>)
 80096e2:	f7fc f8c5 	bl	8005870 <assert_failed>
 80096e6:	e773      	b.n	80095d0 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80096e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80096ea:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80096ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80096f2:	f7ff ff57 	bl	80095a4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	f06f 0201 	mvn.w	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e7d4      	b.n	80096aa <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009700:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009702:	0550      	lsls	r0, r2, #21
 8009704:	d4c2      	bmi.n	800968c <HAL_ADC_IRQHandler+0xe0>
 8009706:	e7a9      	b.n	800965c <HAL_ADC_IRQHandler+0xb0>
 8009708:	0802dc6c 	.word	0x0802dc6c

0800970c <HAL_ADC_ConfigChannel>:
{
 800970c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800970e:	2300      	movs	r3, #0
{
 8009710:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8009712:	4a71      	ldr	r2, [pc, #452]	; (80098d8 <HAL_ADC_ConfigChannel+0x1cc>)
{
 8009714:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 8009716:	9301      	str	r3, [sp, #4]
{
 8009718:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800971a:	680b      	ldr	r3, [r1, #0]
 800971c:	4293      	cmp	r3, r2
 800971e:	bf18      	it	ne
 8009720:	2b12      	cmpne	r3, #18
 8009722:	d902      	bls.n	800972a <HAL_ADC_ConfigChannel+0x1e>
 8009724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009728:	d142      	bne.n	80097b0 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	3b01      	subs	r3, #1
 800972e:	2b0f      	cmp	r3, #15
 8009730:	d847      	bhi.n	80097c2 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	2b07      	cmp	r3, #7
 8009736:	d84c      	bhi.n	80097d2 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8009738:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d051      	beq.n	80097e4 <HAL_ADC_ConfigChannel+0xd8>
 8009740:	2301      	movs	r3, #1
 8009742:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009746:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009748:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800974a:	2809      	cmp	r0, #9
 800974c:	d94d      	bls.n	80097ea <HAL_ADC_ConfigChannel+0xde>
 800974e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009752:	d04a      	beq.n	80097ea <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009754:	b281      	uxth	r1, r0
 8009756:	f04f 0c07 	mov.w	ip, #7
 800975a:	68de      	ldr	r6, [r3, #12]
 800975c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009760:	4f5d      	ldr	r7, [pc, #372]	; (80098d8 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009762:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009764:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009766:	fa0c fc02 	lsl.w	ip, ip, r2
 800976a:	ea26 060c 	bic.w	r6, r6, ip
 800976e:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009770:	f000 8083 	beq.w	800987a <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009774:	68a6      	ldr	r6, [r4, #8]
 8009776:	4096      	lsls	r6, r2
 8009778:	68da      	ldr	r2, [r3, #12]
 800977a:	4316      	orrs	r6, r2
 800977c:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 800977e:	6862      	ldr	r2, [r4, #4]
 8009780:	2a06      	cmp	r2, #6
 8009782:	d846      	bhi.n	8009812 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009784:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009788:	241f      	movs	r4, #31
 800978a:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800978c:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800978e:	4094      	lsls	r4, r2
 8009790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009792:	ea22 0204 	bic.w	r2, r2, r4
 8009796:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800979a:	4311      	orrs	r1, r2
 800979c:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800979e:	4a4f      	ldr	r2, [pc, #316]	; (80098dc <HAL_ADC_ConfigChannel+0x1d0>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d048      	beq.n	8009836 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 80097a4:	2300      	movs	r3, #0
  return HAL_OK;
 80097a6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80097a8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80097ac:	b003      	add	sp, #12
 80097ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80097b0:	f240 618b 	movw	r1, #1675	; 0x68b
 80097b4:	484a      	ldr	r0, [pc, #296]	; (80098e0 <HAL_ADC_ConfigChannel+0x1d4>)
 80097b6:	f7fc f85b 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	3b01      	subs	r3, #1
 80097be:	2b0f      	cmp	r3, #15
 80097c0:	d9b7      	bls.n	8009732 <HAL_ADC_ConfigChannel+0x26>
 80097c2:	f240 618c 	movw	r1, #1676	; 0x68c
 80097c6:	4846      	ldr	r0, [pc, #280]	; (80098e0 <HAL_ADC_ConfigChannel+0x1d4>)
 80097c8:	f7fc f852 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	d9b2      	bls.n	8009738 <HAL_ADC_ConfigChannel+0x2c>
 80097d2:	f240 618d 	movw	r1, #1677	; 0x68d
 80097d6:	4842      	ldr	r0, [pc, #264]	; (80098e0 <HAL_ADC_ConfigChannel+0x1d4>)
 80097d8:	f7fc f84a 	bl	8005870 <assert_failed>
  __HAL_LOCK(hadc);
 80097dc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d1ad      	bne.n	8009740 <HAL_ADC_ConfigChannel+0x34>
 80097e4:	2002      	movs	r0, #2
}
 80097e6:	b003      	add	sp, #12
 80097e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80097ea:	b281      	uxth	r1, r0
 80097ec:	f04f 0c07 	mov.w	ip, #7
 80097f0:	691e      	ldr	r6, [r3, #16]
 80097f2:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80097f6:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80097f8:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80097fc:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009800:	ea26 060c 	bic.w	r6, r6, ip
 8009804:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009806:	691e      	ldr	r6, [r3, #16]
 8009808:	4332      	orrs	r2, r6
 800980a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 800980c:	6862      	ldr	r2, [r4, #4]
 800980e:	2a06      	cmp	r2, #6
 8009810:	d9b8      	bls.n	8009784 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8009812:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009814:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8009818:	d81c      	bhi.n	8009854 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800981a:	3a23      	subs	r2, #35	; 0x23
 800981c:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800981e:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009820:	4094      	lsls	r4, r2
 8009822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009824:	ea22 0204 	bic.w	r2, r2, r4
 8009828:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800982a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800982c:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800982e:	4a2b      	ldr	r2, [pc, #172]	; (80098dc <HAL_ADC_ConfigChannel+0x1d0>)
 8009830:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009832:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009834:	d1b6      	bne.n	80097a4 <HAL_ADC_ConfigChannel+0x98>
 8009836:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800983a:	d017      	beq.n	800986c <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800983c:	2812      	cmp	r0, #18
 800983e:	d123      	bne.n	8009888 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <HAL_ADC_ConfigChannel+0x1d8>)
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009848:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009850:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009852:	e7a7      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009854:	3a41      	subs	r2, #65	; 0x41
 8009856:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009858:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800985a:	4094      	lsls	r4, r2
 800985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985e:	ea22 0204 	bic.w	r2, r2, r4
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	4311      	orrs	r1, r2
 8009868:	62d9      	str	r1, [r3, #44]	; 0x2c
 800986a:	e798      	b.n	800979e <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800986c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8009870:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009874:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009878:	e794      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800987a:	68a1      	ldr	r1, [r4, #8]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009882:	2112      	movs	r1, #18
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	e77a      	b.n	800977e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <HAL_ADC_ConfigChannel+0x1cc>)
 800988a:	4298      	cmp	r0, r3
 800988c:	d001      	beq.n	8009892 <HAL_ADC_ConfigChannel+0x186>
 800988e:	2811      	cmp	r0, #17
 8009890:	d188      	bne.n	80097a4 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009892:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009894:	4910      	ldr	r1, [pc, #64]	; (80098d8 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009896:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009898:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 800989a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800989e:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098a6:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098a8:	f47f af7c 	bne.w	80097a4 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <HAL_ADC_ConfigChannel+0x1dc>)
 80098ae:	4a0f      	ldr	r2, [pc, #60]	; (80098ec <HAL_ADC_ConfigChannel+0x1e0>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	0c9b      	lsrs	r3, r3, #18
 80098b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f43f af6e 	beq.w	80097a4 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f9      	bne.n	80098c8 <HAL_ADC_ConfigChannel+0x1bc>
 80098d4:	e766      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x98>
 80098d6:	bf00      	nop
 80098d8:	10000012 	.word	0x10000012
 80098dc:	40012000 	.word	0x40012000
 80098e0:	0802dc6c 	.word	0x0802dc6c
 80098e4:	40012300 	.word	0x40012300
 80098e8:	20000298 	.word	0x20000298
 80098ec:	431bde83 	.word	0x431bde83

080098f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop

080098f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80098f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 80098f6:	680b      	ldr	r3, [r1, #0]
{
 80098f8:	460c      	mov	r4, r1
 80098fa:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 80098fc:	2b19      	cmp	r3, #25
 80098fe:	d93e      	bls.n	800997e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8009900:	f240 31af 	movw	r1, #943	; 0x3af
 8009904:	4829      	ldr	r0, [pc, #164]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009906:	f7fb ffb3 	bl	8005870 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800990a:	6863      	ldr	r3, [r4, #4]
 800990c:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009910:	d13e      	bne.n	8009990 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800991c:	bf18      	it	ne
 800991e:	2b00      	cmpne	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2201      	movne	r2, #1
 8009924:	2200      	moveq	r2, #0
 8009926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800992a:	bf0c      	ite	eq
 800992c:	2200      	moveq	r2, #0
 800992e:	f002 0201 	andne.w	r2, r2, #1
 8009932:	b112      	cbz	r2, 800993a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009938:	d132      	bne.n	80099a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800993a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d02c      	beq.n	800999c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	f022 021f 	bic.w	r2, r2, #31
 800994a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	6821      	ldr	r1, [r4, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800995a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	6861      	ldr	r1, [r4, #4]
 8009960:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009962:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8009964:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800996c:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 800996e:	68a0      	ldr	r0, [r4, #8]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8009974:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009976:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8009978:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 800997c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 800997e:	4a0d      	ldr	r2, [pc, #52]	; (80099b4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
 8009984:	07db      	lsls	r3, r3, #31
 8009986:	d5bb      	bpl.n	8009900 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800998e:	d0c0      	beq.n	8009912 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009990:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8009994:	4805      	ldr	r0, [pc, #20]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009996:	f7fb ff6b 	bl	8005870 <assert_failed>
 800999a:	e7ba      	b.n	8009912 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 800999c:	2002      	movs	r0, #2
}
 800999e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80099a0:	f240 31b1 	movw	r1, #945	; 0x3b1
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80099a6:	f7fb ff63 	bl	8005870 <assert_failed>
 80099aa:	e7c6      	b.n	800993a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80099ac:	0802dca4 	.word	0x0802dca4
 80099b0:	40012300 	.word	0x40012300
 80099b4:	02e602e7 	.word	0x02e602e7

080099b8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80099b8:	1ec3      	subs	r3, r0, #3
 80099ba:	2b04      	cmp	r3, #4
{
 80099bc:	b510      	push	{r4, lr}
 80099be:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80099c0:	d80c      	bhi.n	80099dc <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099c2:	4909      	ldr	r1, [pc, #36]	; (80099e8 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099c4:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099c6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80099ca:	4b08      	ldr	r3, [pc, #32]	; (80099ec <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099ce:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099d2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099d4:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 80099d6:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80099d8:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80099da:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80099dc:	2191      	movs	r1, #145	; 0x91
 80099de:	4804      	ldr	r0, [pc, #16]	; (80099f0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80099e0:	f7fb ff46 	bl	8005870 <assert_failed>
 80099e4:	e7ed      	b.n	80099c2 <HAL_NVIC_SetPriorityGrouping+0xa>
 80099e6:	bf00      	nop
 80099e8:	e000ed00 	.word	0xe000ed00
 80099ec:	05fa0000 	.word	0x05fa0000
 80099f0:	0802dce0 	.word	0x0802dce0

080099f4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80099f4:	2a0f      	cmp	r2, #15
{ 
 80099f6:	b570      	push	{r4, r5, r6, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4605      	mov	r5, r0
 80099fc:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80099fe:	d836      	bhi.n	8009a6e <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009a00:	2c0f      	cmp	r4, #15
 8009a02:	d82f      	bhi.n	8009a64 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a04:	4b1c      	ldr	r3, [pc, #112]	; (8009a78 <HAL_NVIC_SetPriority+0x84>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a0c:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a10:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a12:	2804      	cmp	r0, #4
 8009a14:	bf28      	it	cs
 8009a16:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a18:	2a06      	cmp	r2, #6
 8009a1a:	d918      	bls.n	8009a4e <HAL_NVIC_SetPriority+0x5a>
 8009a1c:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	409a      	lsls	r2, r3
 8009a24:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a28:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8009a2c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a2e:	fa01 f100 	lsl.w	r1, r1, r0
 8009a32:	ea24 0401 	bic.w	r4, r4, r1
 8009a36:	fa04 f403 	lsl.w	r4, r4, r3
 8009a3a:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8009a3e:	db09      	blt.n	8009a54 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a40:	0124      	lsls	r4, r4, #4
 8009a42:	4b0e      	ldr	r3, [pc, #56]	; (8009a7c <HAL_NVIC_SetPriority+0x88>)
 8009a44:	b2e4      	uxtb	r4, r4
 8009a46:	442b      	add	r3, r5
 8009a48:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a50:	4633      	mov	r3, r6
 8009a52:	e7e9      	b.n	8009a28 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a54:	f005 050f 	and.w	r5, r5, #15
 8009a58:	0124      	lsls	r4, r4, #4
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <HAL_NVIC_SetPriority+0x8c>)
 8009a5c:	b2e4      	uxtb	r4, r4
 8009a5e:	442b      	add	r3, r5
 8009a60:	761c      	strb	r4, [r3, #24]
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009a64:	21aa      	movs	r1, #170	; 0xaa
 8009a66:	4807      	ldr	r0, [pc, #28]	; (8009a84 <HAL_NVIC_SetPriority+0x90>)
 8009a68:	f7fb ff02 	bl	8005870 <assert_failed>
 8009a6c:	e7ca      	b.n	8009a04 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009a6e:	21a9      	movs	r1, #169	; 0xa9
 8009a70:	4804      	ldr	r0, [pc, #16]	; (8009a84 <HAL_NVIC_SetPriority+0x90>)
 8009a72:	f7fb fefd 	bl	8005870 <assert_failed>
 8009a76:	e7c3      	b.n	8009a00 <HAL_NVIC_SetPriority+0xc>
 8009a78:	e000ed00 	.word	0xe000ed00
 8009a7c:	e000e100 	.word	0xe000e100
 8009a80:	e000ecfc 	.word	0xe000ecfc
 8009a84:	0802dce0 	.word	0x0802dce0

08009a88 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	db08      	blt.n	8009a9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a8c:	f000 011f 	and.w	r1, r0, #31
 8009a90:	2301      	movs	r3, #1
 8009a92:	0940      	lsrs	r0, r0, #5
 8009a94:	4a04      	ldr	r2, [pc, #16]	; (8009aa8 <HAL_NVIC_EnableIRQ+0x20>)
 8009a96:	408b      	lsls	r3, r1
 8009a98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009a9c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009a9e:	21bd      	movs	r1, #189	; 0xbd
 8009aa0:	4802      	ldr	r0, [pc, #8]	; (8009aac <HAL_NVIC_EnableIRQ+0x24>)
 8009aa2:	f7fb bee5 	b.w	8005870 <assert_failed>
 8009aa6:	bf00      	nop
 8009aa8:	e000e100 	.word	0xe000e100
 8009aac:	0802dce0 	.word	0x0802dce0

08009ab0 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	db0e      	blt.n	8009ad2 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ab4:	0943      	lsrs	r3, r0, #5
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f000 001f 	and.w	r0, r0, #31
 8009abc:	4907      	ldr	r1, [pc, #28]	; (8009adc <HAL_NVIC_DisableIRQ+0x2c>)
 8009abe:	3320      	adds	r3, #32
 8009ac0:	fa02 f000 	lsl.w	r0, r2, r0
 8009ac4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009acc:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009ad0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009ad2:	21cd      	movs	r1, #205	; 0xcd
 8009ad4:	4802      	ldr	r0, [pc, #8]	; (8009ae0 <HAL_NVIC_DisableIRQ+0x30>)
 8009ad6:	f7fb becb 	b.w	8005870 <assert_failed>
 8009ada:	bf00      	nop
 8009adc:	e000e100 	.word	0xe000e100
 8009ae0:	0802dce0 	.word	0x0802dce0

08009ae4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d075      	beq.n	8009bd4 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009ae8:	4b3b      	ldr	r3, [pc, #236]	; (8009bd8 <HAL_CRC_Init+0xf4>)
 8009aea:	6802      	ldr	r2, [r0, #0]
 8009aec:	429a      	cmp	r2, r3
{
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009af2:	d003      	beq.n	8009afc <HAL_CRC_Init+0x18>
 8009af4:	2170      	movs	r1, #112	; 0x70
 8009af6:	4839      	ldr	r0, [pc, #228]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009af8:	f7fb feba 	bl	8005870 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009afc:	7f63      	ldrb	r3, [r4, #29]
 8009afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d055      	beq.n	8009bb2 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009b06:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009b08:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009b0a:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009b0c:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009b0e:	d838      	bhi.n	8009b82 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d13d      	bne.n	8009b90 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	4a32      	ldr	r2, [pc, #200]	; (8009be0 <HAL_CRC_Init+0xfc>)
 8009b18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	f022 0218 	bic.w	r2, r2, #24
 8009b20:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009b22:	7963      	ldrb	r3, [r4, #5]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d83c      	bhi.n	8009ba2 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009b28:	b1e3      	cbz	r3, 8009b64 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009b30:	6962      	ldr	r2, [r4, #20]
 8009b32:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009b36:	d11d      	bne.n	8009b74 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009b38:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009b3a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009b3c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8009b40:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009b42:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009b46:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009b48:	d13d      	bne.n	8009bc6 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b4a:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009b4c:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009b52:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b54:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009b56:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b58:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009b5a:	d82f      	bhi.n	8009bbc <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b5c:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009b5e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8009b60:	7763      	strb	r3, [r4, #29]
}
 8009b62:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009b64:	f04f 32ff 	mov.w	r2, #4294967295
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009b6c:	6962      	ldr	r2, [r4, #20]
 8009b6e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009b72:	d0e1      	beq.n	8009b38 <HAL_CRC_Init+0x54>
 8009b74:	219c      	movs	r1, #156	; 0x9c
 8009b76:	4819      	ldr	r0, [pc, #100]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009b78:	f7fb fe7a 	bl	8005870 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009b7c:	6962      	ldr	r2, [r4, #20]
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	e7da      	b.n	8009b38 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009b82:	217e      	movs	r1, #126	; 0x7e
 8009b84:	4815      	ldr	r0, [pc, #84]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009b86:	f7fb fe73 	bl	8005870 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009b8a:	7923      	ldrb	r3, [r4, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0c1      	beq.n	8009b14 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009b90:	4620      	mov	r0, r4
 8009b92:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009b96:	f000 f825 	bl	8009be4 <HAL_CRCEx_Polynomial_Set>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d0c1      	beq.n	8009b22 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8009b9e:	2001      	movs	r0, #1
}
 8009ba0:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009ba2:	2190      	movs	r1, #144	; 0x90
 8009ba4:	480d      	ldr	r0, [pc, #52]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009ba6:	f7fb fe63 	bl	8005870 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009baa:	7963      	ldrb	r3, [r4, #5]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1bc      	bne.n	8009b2a <HAL_CRC_Init+0x46>
 8009bb0:	e7d8      	b.n	8009b64 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8009bb2:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8009bb4:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8009bb6:	f7fd fbbf 	bl	8007338 <HAL_CRC_MspInit>
 8009bba:	e7a4      	b.n	8009b06 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009bbc:	21a5      	movs	r1, #165	; 0xa5
 8009bbe:	4807      	ldr	r0, [pc, #28]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009bc0:	f7fb fe56 	bl	8005870 <assert_failed>
 8009bc4:	e7ca      	b.n	8009b5c <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <HAL_CRC_Init+0xf8>)
 8009bc8:	21a0      	movs	r1, #160	; 0xa0
 8009bca:	f7fb fe51 	bl	8005870 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	69a0      	ldr	r0, [r4, #24]
 8009bd2:	e7ba      	b.n	8009b4a <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8009bd4:	2001      	movs	r0, #1
}
 8009bd6:	4770      	bx	lr
 8009bd8:	40023000 	.word	0x40023000
 8009bdc:	0802dd1c 	.word	0x0802dd1c
 8009be0:	04c11db7 	.word	0x04c11db7

08009be4 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009be4:	f032 0318 	bics.w	r3, r2, #24
{
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	4616      	mov	r6, r2
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009bf0:	d003      	beq.n	8009bfa <HAL_CRCEx_Polynomial_Set+0x16>
 8009bf2:	215f      	movs	r1, #95	; 0x5f
 8009bf4:	4818      	ldr	r0, [pc, #96]	; (8009c58 <HAL_CRCEx_Polynomial_Set+0x74>)
 8009bf6:	f7fb fe3b 	bl	8005870 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009bfa:	231e      	movs	r3, #30
 8009bfc:	e001      	b.n	8009c02 <HAL_CRCEx_Polynomial_Set+0x1e>
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	d315      	bcc.n	8009c2e <HAL_CRCEx_Polynomial_Set+0x4a>
 8009c02:	fa24 fc03 	lsr.w	ip, r4, r3
 8009c06:	f01c 0f01 	tst.w	ip, #1
 8009c0a:	d0f8      	beq.n	8009bfe <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8009c0c:	2e18      	cmp	r6, #24
 8009c0e:	d80f      	bhi.n	8009c30 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009c10:	e8df f006 	tbb	[pc, r6]
 8009c14:	0e0e0e12 	.word	0x0e0e0e12
 8009c18:	0e0e0e0e 	.word	0x0e0e0e0e
 8009c1c:	0e0e0e1b 	.word	0x0e0e0e1b
 8009c20:	0e0e0e0e 	.word	0x0e0e0e0e
 8009c24:	0e0e0e1e 	.word	0x0e0e0e1e
 8009c28:	0e0e0e0e 	.word	0x0e0e0e0e
 8009c2c:	10          	.byte	0x10
 8009c2d:	00          	.byte	0x00
 8009c2e:	b11e      	cbz	r6, 8009c38 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8009c30:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8009c34:	2b06      	cmp	r3, #6
 8009c36:	d8fb      	bhi.n	8009c30 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009c38:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009c3a:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009c3c:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009c3e:	688b      	ldr	r3, [r1, #8]
 8009c40:	f023 0318 	bic.w	r3, r3, #24
 8009c44:	4333      	orrs	r3, r6
 8009c46:	608b      	str	r3, [r1, #8]
}
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	d9f4      	bls.n	8009c38 <HAL_CRCEx_Polynomial_Set+0x54>
 8009c4e:	e7ef      	b.n	8009c30 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	d9f1      	bls.n	8009c38 <HAL_CRCEx_Polynomial_Set+0x54>
 8009c54:	e7ec      	b.n	8009c30 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009c56:	bf00      	nop
 8009c58:	0802dd54 	.word	0x0802dd54

08009c5c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8009c5c:	b1d8      	cbz	r0, 8009c96 <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <HAL_DAC_Init+0x40>)
 8009c60:	6802      	ldr	r2, [r0, #0]
 8009c62:	429a      	cmp	r2, r3
{
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009c68:	d004      	beq.n	8009c74 <HAL_DAC_Init+0x18>
 8009c6a:	f240 1115 	movw	r1, #277	; 0x115
 8009c6e:	480c      	ldr	r0, [pc, #48]	; (8009ca0 <HAL_DAC_Init+0x44>)
 8009c70:	f7fb fdfe 	bl	8005870 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009c74:	7923      	ldrb	r3, [r4, #4]
 8009c76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c7a:	b13b      	cbz	r3, 8009c8c <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009c7c:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8009c7e:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009c80:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8009c82:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8009c84:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009c86:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8009c88:	7122      	strb	r2, [r4, #4]
}
 8009c8a:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8009c8c:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8009c8e:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8009c90:	f7fd fb68 	bl	8007364 <HAL_DAC_MspInit>
 8009c94:	e7f2      	b.n	8009c7c <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8009c96:	2001      	movs	r0, #1
}
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40007400 	.word	0x40007400
 8009ca0:	0802dd90 	.word	0x0802dd90

08009ca4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009caa:	f031 0310 	bics.w	r3, r1, #16
{
 8009cae:	460d      	mov	r5, r1
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	4617      	mov	r7, r2
 8009cb4:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8009cb6:	d16b      	bne.n	8009d90 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8009cb8:	f036 0304 	bics.w	r3, r6, #4
 8009cbc:	d001      	beq.n	8009cc2 <HAL_DAC_Start_DMA+0x1e>
 8009cbe:	2e08      	cmp	r6, #8
 8009cc0:	d15b      	bne.n	8009d7a <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8009cc2:	7962      	ldrb	r2, [r4, #5]
 8009cc4:	2a01      	cmp	r2, #1
 8009cc6:	d060      	beq.n	8009d8a <HAL_DAC_Start_DMA+0xe6>
 8009cc8:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009cca:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8009cce:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8009cd4:	bb35      	cbnz	r5, 8009d24 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009cd6:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009cd8:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009cda:	4b39      	ldr	r3, [pc, #228]	; (8009dc0 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009cdc:	4a39      	ldr	r2, [pc, #228]	; (8009dc4 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009cde:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ce0:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009ce4:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009cea:	4a37      	ldr	r2, [pc, #220]	; (8009dc8 <HAL_DAC_Start_DMA+0x124>)
 8009cec:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009cee:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009cf2:	d059      	beq.n	8009da8 <HAL_DAC_Start_DMA+0x104>
 8009cf4:	2e08      	cmp	r6, #8
 8009cf6:	d054      	beq.n	8009da2 <HAL_DAC_Start_DMA+0xfe>
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	d04f      	beq.n	8009d9c <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009cfc:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009cfe:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009d02:	4643      	mov	r3, r8
 8009d04:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009d06:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8009d0a:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009d0e:	f000 fbe3 	bl	800a4d8 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009d12:	2300      	movs	r3, #0
 8009d14:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8009d16:	b330      	cbz	r0, 8009d66 <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	f043 0304 	orr.w	r3, r3, #4
 8009d1e:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009d24:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8009d26:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009d28:	4b28      	ldr	r3, [pc, #160]	; (8009dcc <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009d2a:	4a29      	ldr	r2, [pc, #164]	; (8009dd0 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009d2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009d2e:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009d32:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009d38:	4a26      	ldr	r2, [pc, #152]	; (8009dd4 <HAL_DAC_Start_DMA+0x130>)
 8009d3a:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009d3c:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009d40:	d03b      	beq.n	8009dba <HAL_DAC_Start_DMA+0x116>
 8009d42:	2e08      	cmp	r6, #8
 8009d44:	d036      	beq.n	8009db4 <HAL_DAC_Start_DMA+0x110>
 8009d46:	b396      	cbz	r6, 8009dae <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009d48:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009d4a:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009d4e:	4643      	mov	r3, r8
 8009d50:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009d52:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8009d56:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009d5a:	f000 fbbd 	bl	800a4d8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8009d5e:	2300      	movs	r3, #0
 8009d60:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d1d8      	bne.n	8009d18 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	f005 0110 	and.w	r1, r5, #16
 8009d6c:	2501      	movs	r5, #1
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	408d      	lsls	r5, r1
 8009d72:	4315      	orrs	r5, r2
 8009d74:	601d      	str	r5, [r3, #0]
}
 8009d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8009d7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009d7e:	4816      	ldr	r0, [pc, #88]	; (8009dd8 <HAL_DAC_Start_DMA+0x134>)
 8009d80:	f7fb fd76 	bl	8005870 <assert_failed>
  __HAL_LOCK(hdac);
 8009d84:	7962      	ldrb	r2, [r4, #5]
 8009d86:	2a01      	cmp	r2, #1
 8009d88:	d19e      	bne.n	8009cc8 <HAL_DAC_Start_DMA+0x24>
 8009d8a:	2002      	movs	r0, #2
}
 8009d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009d90:	f240 210f 	movw	r1, #527	; 0x20f
 8009d94:	4810      	ldr	r0, [pc, #64]	; (8009dd8 <HAL_DAC_Start_DMA+0x134>)
 8009d96:	f7fb fd6b 	bl	8005870 <assert_failed>
 8009d9a:	e78d      	b.n	8009cb8 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009d9c:	f10c 0208 	add.w	r2, ip, #8
        break;
 8009da0:	e7ad      	b.n	8009cfe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009da2:	f10c 0210 	add.w	r2, ip, #16
        break;
 8009da6:	e7aa      	b.n	8009cfe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009da8:	f10c 020c 	add.w	r2, ip, #12
        break;
 8009dac:	e7a7      	b.n	8009cfe <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009dae:	f10c 0214 	add.w	r2, ip, #20
        break;
 8009db2:	e7ca      	b.n	8009d4a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009db4:	f10c 021c 	add.w	r2, ip, #28
        break;
 8009db8:	e7c7      	b.n	8009d4a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009dba:	f10c 0218 	add.w	r2, ip, #24
        break;
 8009dbe:	e7c4      	b.n	8009d4a <HAL_DAC_Start_DMA+0xa6>
 8009dc0:	08009e6d 	.word	0x08009e6d
 8009dc4:	08009e81 	.word	0x08009e81
 8009dc8:	08009e91 	.word	0x08009e91
 8009dcc:	08009fe5 	.word	0x08009fe5
 8009dd0:	08009ff5 	.word	0x08009ff5
 8009dd4:	0800a001 	.word	0x0800a001
 8009dd8:	0802dd90 	.word	0x0802dd90

08009ddc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009ddc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009dde:	f031 0310 	bics.w	r3, r1, #16
{
 8009de2:	460d      	mov	r5, r1
 8009de4:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8009de6:	d11e      	bne.n	8009e26 <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	f001 0e10 	and.w	lr, r1, #16
 8009dee:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009df2:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8009dfa:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009dfe:	ea20 000c 	bic.w	r0, r0, ip
 8009e02:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	ea22 0201 	bic.w	r2, r2, r1
 8009e0a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009e0c:	bb05      	cbnz	r5, 8009e50 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8009e0e:	68a0      	ldr	r0, [r4, #8]
 8009e10:	f000 fbbe 	bl	800a590 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009e14:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8009e16:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009e18:	6813      	ldr	r3, [r2, #0]
 8009e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e1e:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	7123      	strb	r3, [r4, #4]
}
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009e26:	f240 218f 	movw	r1, #655	; 0x28f
 8009e2a:	480f      	ldr	r0, [pc, #60]	; (8009e68 <HAL_DAC_Stop_DMA+0x8c>)
 8009e2c:	f7fb fd20 	bl	8005870 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009e30:	f005 0510 	and.w	r5, r5, #16
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8009e3a:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8009e40:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009e42:	ea22 0200 	bic.w	r2, r2, r0
 8009e46:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8009e48:	681d      	ldr	r5, [r3, #0]
 8009e4a:	ea25 0501 	bic.w	r5, r5, r1
 8009e4e:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8009e50:	68e0      	ldr	r0, [r4, #12]
 8009e52:	f000 fb9d 	bl	800a590 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009e56:	6822      	ldr	r2, [r4, #0]
}
 8009e58:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e60:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8009e62:	2301      	movs	r3, #1
 8009e64:	7123      	strb	r3, [r4, #4]
}
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	0802dd90 	.word	0x0802dd90

08009e6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009e6c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e6e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7fa fbf3 	bl	800465c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009e76:	2301      	movs	r3, #1
 8009e78:	7123      	strb	r3, [r4, #4]
}
 8009e7a:	bd10      	pop	{r4, pc}

08009e7c <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop

08009e80 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009e80:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009e82:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009e84:	f7ff fffa 	bl	8009e7c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009e88:	bd08      	pop	{r3, pc}
 8009e8a:	bf00      	nop

08009e8c <HAL_DAC_ErrorCallbackCh1>:
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009e90:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e92:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009e94:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009e96:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009e98:	f043 0304 	orr.w	r3, r3, #4
 8009e9c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009e9e:	f7ff fff5 	bl	8009e8c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	7123      	strb	r3, [r4, #4]
}
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop

08009eac <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009eac:	6803      	ldr	r3, [r0, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	0491      	lsls	r1, r2, #18
{
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009eb6:	d502      	bpl.n	8009ebe <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eba:	0492      	lsls	r2, r2, #18
 8009ebc:	d418      	bmi.n	8009ef0 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	0091      	lsls	r1, r2, #2
 8009ec2:	d502      	bpl.n	8009eca <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8009ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec6:	0092      	lsls	r2, r2, #2
 8009ec8:	d400      	bmi.n	8009ecc <HAL_DAC_IRQHandler+0x20>
}
 8009eca:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8009ecc:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8009ece:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8009ed2:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8009ed4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8009ed6:	6922      	ldr	r2, [r4, #16]
 8009ed8:	f042 0202 	orr.w	r2, r2, #2
 8009edc:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8009ede:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8009ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009eea:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8009eec:	f000 b878 	b.w	8009fe0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8009ef0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8009ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8009ef6:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8009ef8:	6902      	ldr	r2, [r0, #16]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8009f00:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f08:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8009f0a:	f7ff ffcd 	bl	8009ea8 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	e7d5      	b.n	8009ebe <HAL_DAC_IRQHandler+0x12>
 8009f12:	bf00      	nop

08009f14 <HAL_DAC_ConfigChannel>:
{
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8009f18:	6808      	ldr	r0, [r1, #0]
{
 8009f1a:	4616      	mov	r6, r2
 8009f1c:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8009f1e:	f020 0308 	bic.w	r3, r0, #8
 8009f22:	f020 0204 	bic.w	r2, r0, #4
 8009f26:	2b24      	cmp	r3, #36	; 0x24
 8009f28:	bf18      	it	ne
 8009f2a:	2a00      	cmpne	r2, #0
 8009f2c:	f020 0210 	bic.w	r2, r0, #16
 8009f30:	bf14      	ite	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	2300      	moveq	r3, #0
 8009f36:	283c      	cmp	r0, #60	; 0x3c
 8009f38:	bf0c      	ite	eq
 8009f3a:	2300      	moveq	r3, #0
 8009f3c:	f003 0301 	andne.w	r3, r3, #1
 8009f40:	2a0c      	cmp	r2, #12
 8009f42:	bf0c      	ite	eq
 8009f44:	2300      	moveq	r3, #0
 8009f46:	f003 0301 	andne.w	r3, r3, #1
 8009f4a:	b11b      	cbz	r3, 8009f54 <HAL_DAC_ConfigChannel+0x40>
 8009f4c:	f020 0020 	bic.w	r0, r0, #32
 8009f50:	2814      	cmp	r0, #20
 8009f52:	d137      	bne.n	8009fc4 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8009f54:	686b      	ldr	r3, [r5, #4]
 8009f56:	f033 0302 	bics.w	r3, r3, #2
 8009f5a:	d12d      	bne.n	8009fb8 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8009f5c:	f036 0310 	bics.w	r3, r6, #16
 8009f60:	d120      	bne.n	8009fa4 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8009f62:	7963      	ldrb	r3, [r4, #5]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d025      	beq.n	8009fb4 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009f68:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f6c:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009f6e:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8009f72:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f74:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009f76:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009f7a:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8009f7e:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009f80:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8009f82:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009f84:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009f86:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8009f8a:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009f8c:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009f8e:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8009f90:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009f92:	4082      	lsls	r2, r0
 8009f94:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8009f96:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009f98:	ea23 0302 	bic.w	r3, r3, r2
 8009f9c:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8009f9e:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8009fa0:	7165      	strb	r5, [r4, #5]
}
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009fa4:	f240 31a6 	movw	r1, #934	; 0x3a6
 8009fa8:	4809      	ldr	r0, [pc, #36]	; (8009fd0 <HAL_DAC_ConfigChannel+0xbc>)
 8009faa:	f7fb fc61 	bl	8005870 <assert_failed>
  __HAL_LOCK(hdac);
 8009fae:	7963      	ldrb	r3, [r4, #5]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d1d9      	bne.n	8009f68 <HAL_DAC_ConfigChannel+0x54>
 8009fb4:	2002      	movs	r0, #2
}
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8009fb8:	f240 31a5 	movw	r1, #933	; 0x3a5
 8009fbc:	4804      	ldr	r0, [pc, #16]	; (8009fd0 <HAL_DAC_ConfigChannel+0xbc>)
 8009fbe:	f7fb fc57 	bl	8005870 <assert_failed>
 8009fc2:	e7cb      	b.n	8009f5c <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8009fc4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <HAL_DAC_ConfigChannel+0xbc>)
 8009fca:	f7fb fc51 	bl	8005870 <assert_failed>
 8009fce:	e7c1      	b.n	8009f54 <HAL_DAC_ConfigChannel+0x40>
 8009fd0:	0802dd90 	.word	0x0802dd90

08009fd4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop

08009fd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <HAL_DACEx_ErrorCallbackCh2>:
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop

08009fe0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop

08009fe4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009fe4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff fff3 	bl	8009fd4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	7123      	strb	r3, [r4, #4]
}
 8009ff2:	bd10      	pop	{r4, pc}

08009ff4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009ff4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009ff6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009ff8:	f7ff ffee 	bl	8009fd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ffc:	bd08      	pop	{r3, pc}
 8009ffe:	bf00      	nop

0800a000 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a000:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a002:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a004:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a006:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a008:	f043 0304 	orr.w	r3, r3, #4
 800a00c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a00e:	f7ff ffe5 	bl	8009fdc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a012:	2301      	movs	r3, #1
 800a014:	7123      	strb	r3, [r4, #4]
}
 800a016:	bd10      	pop	{r4, pc}

0800a018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800a01c:	f7ff f892 	bl	8009144 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a020:	2c00      	cmp	r4, #0
 800a022:	f000 8156 	beq.w	800a2d2 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	4605      	mov	r5, r0
 800a02a:	4bad      	ldr	r3, [pc, #692]	; (800a2e0 <HAL_DMA_Init+0x2c8>)
 800a02c:	49ad      	ldr	r1, [pc, #692]	; (800a2e4 <HAL_DMA_Init+0x2cc>)
 800a02e:	429a      	cmp	r2, r3
 800a030:	bf18      	it	ne
 800a032:	428a      	cmpne	r2, r1
 800a034:	f101 0118 	add.w	r1, r1, #24
 800a038:	bf14      	ite	ne
 800a03a:	2301      	movne	r3, #1
 800a03c:	2300      	moveq	r3, #0
 800a03e:	428a      	cmp	r2, r1
 800a040:	bf0c      	ite	eq
 800a042:	2300      	moveq	r3, #0
 800a044:	f003 0301 	andne.w	r3, r3, #1
 800a048:	3118      	adds	r1, #24
 800a04a:	428a      	cmp	r2, r1
 800a04c:	bf0c      	ite	eq
 800a04e:	2300      	moveq	r3, #0
 800a050:	f003 0301 	andne.w	r3, r3, #1
 800a054:	3118      	adds	r1, #24
 800a056:	428a      	cmp	r2, r1
 800a058:	bf0c      	ite	eq
 800a05a:	2300      	moveq	r3, #0
 800a05c:	f003 0301 	andne.w	r3, r3, #1
 800a060:	3118      	adds	r1, #24
 800a062:	428a      	cmp	r2, r1
 800a064:	bf0c      	ite	eq
 800a066:	2300      	moveq	r3, #0
 800a068:	f003 0301 	andne.w	r3, r3, #1
 800a06c:	3118      	adds	r1, #24
 800a06e:	428a      	cmp	r2, r1
 800a070:	bf0c      	ite	eq
 800a072:	2300      	moveq	r3, #0
 800a074:	f003 0301 	andne.w	r3, r3, #1
 800a078:	3118      	adds	r1, #24
 800a07a:	428a      	cmp	r2, r1
 800a07c:	bf0c      	ite	eq
 800a07e:	2300      	moveq	r3, #0
 800a080:	f003 0301 	andne.w	r3, r3, #1
 800a084:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a088:	428a      	cmp	r2, r1
 800a08a:	bf0c      	ite	eq
 800a08c:	2300      	moveq	r3, #0
 800a08e:	f003 0301 	andne.w	r3, r3, #1
 800a092:	3118      	adds	r1, #24
 800a094:	428a      	cmp	r2, r1
 800a096:	bf0c      	ite	eq
 800a098:	2300      	moveq	r3, #0
 800a09a:	f003 0301 	andne.w	r3, r3, #1
 800a09e:	3118      	adds	r1, #24
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2300      	moveq	r3, #0
 800a0a6:	f003 0301 	andne.w	r3, r3, #1
 800a0aa:	3118      	adds	r1, #24
 800a0ac:	428a      	cmp	r2, r1
 800a0ae:	bf0c      	ite	eq
 800a0b0:	2300      	moveq	r3, #0
 800a0b2:	f003 0301 	andne.w	r3, r3, #1
 800a0b6:	3118      	adds	r1, #24
 800a0b8:	428a      	cmp	r2, r1
 800a0ba:	bf0c      	ite	eq
 800a0bc:	2300      	moveq	r3, #0
 800a0be:	f003 0301 	andne.w	r3, r3, #1
 800a0c2:	3118      	adds	r1, #24
 800a0c4:	428a      	cmp	r2, r1
 800a0c6:	bf0c      	ite	eq
 800a0c8:	2300      	moveq	r3, #0
 800a0ca:	f003 0301 	andne.w	r3, r3, #1
 800a0ce:	3118      	adds	r1, #24
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2300      	moveq	r3, #0
 800a0d6:	f003 0301 	andne.w	r3, r3, #1
 800a0da:	b11b      	cbz	r3, 800a0e4 <HAL_DMA_Init+0xcc>
 800a0dc:	4b82      	ldr	r3, [pc, #520]	; (800a2e8 <HAL_DMA_Init+0x2d0>)
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	f040 8139 	bne.w	800a356 <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a0ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ee:	bf18      	it	ne
 800a0f0:	2b00      	cmpne	r3, #0
 800a0f2:	bf14      	ite	ne
 800a0f4:	2201      	movne	r2, #1
 800a0f6:	2200      	moveq	r2, #0
 800a0f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0fc:	bf0c      	ite	eq
 800a0fe:	2200      	moveq	r2, #0
 800a100:	f002 0201 	andne.w	r2, r2, #1
 800a104:	b11a      	cbz	r2, 800a10e <HAL_DMA_Init+0xf6>
 800a106:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a10a:	f040 8129 	bne.w	800a360 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a114:	d002      	beq.n	800a11c <HAL_DMA_Init+0x104>
 800a116:	2b80      	cmp	r3, #128	; 0x80
 800a118:	f040 80a8 	bne.w	800a26c <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a11c:	68e3      	ldr	r3, [r4, #12]
 800a11e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a122:	f040 80ac 	bne.w	800a27e <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a12c:	f040 80b0 	bne.w	800a290 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a130:	6963      	ldr	r3, [r4, #20]
 800a132:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a136:	d003      	beq.n	800a140 <HAL_DMA_Init+0x128>
 800a138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13c:	f040 8091 	bne.w	800a262 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a140:	69a3      	ldr	r3, [r4, #24]
 800a142:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800a146:	d003      	beq.n	800a150 <HAL_DMA_Init+0x138>
 800a148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a14c:	f040 8084 	bne.w	800a258 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a150:	69e3      	ldr	r3, [r4, #28]
 800a152:	f033 0220 	bics.w	r2, r3, #32
 800a156:	d002      	beq.n	800a15e <HAL_DMA_Init+0x146>
 800a158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15c:	d16f      	bne.n	800a23e <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a15e:	6a23      	ldr	r3, [r4, #32]
 800a160:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a164:	d173      	bne.n	800a24e <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a168:	f033 0204 	bics.w	r2, r3, #4
 800a16c:	d15f      	bne.n	800a22e <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d14d      	bne.n	800a20e <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a172:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800a174:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800a176:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 800a178:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800a17c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	f022 0201 	bic.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a188:	e006      	b.n	800a198 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a18a:	f7fe ffdb 	bl	8009144 <HAL_GetTick>
 800a18e:	1b40      	subs	r0, r0, r5
 800a190:	2805      	cmp	r0, #5
 800a192:	f200 8082 	bhi.w	800a29a <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	07d1      	lsls	r1, r2, #31
 800a19c:	d4f5      	bmi.n	800a18a <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a19e:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 800a1a2:	68e1      	ldr	r1, [r4, #12]
 800a1a4:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1a6:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 800a1a8:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1aa:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1ac:	6921      	ldr	r1, [r4, #16]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	6961      	ldr	r1, [r4, #20]
 800a1b2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1b4:	69e1      	ldr	r1, [r4, #28]
 800a1b6:	4302      	orrs	r2, r0
 800a1b8:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1ba:	494c      	ldr	r1, [pc, #304]	; (800a2ec <HAL_DMA_Init+0x2d4>)
 800a1bc:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1be:	6a25      	ldr	r5, [r4, #32]
 800a1c0:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1c2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1c6:	2904      	cmp	r1, #4
 800a1c8:	d06e      	beq.n	800a2a8 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a1cc:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1ce:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1d2:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a1d4:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 800a1d6:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a1d8:	4945      	ldr	r1, [pc, #276]	; (800a2f0 <HAL_DMA_Init+0x2d8>)
 800a1da:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a1dc:	4845      	ldr	r0, [pc, #276]	; (800a2f4 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a1de:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800a1e2:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a1e4:	4a44      	ldr	r2, [pc, #272]	; (800a2f8 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a1e6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a1ea:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1ee:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a1f2:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1f4:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a1f8:	bf88      	it	hi
 800a1fa:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1fc:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a1fe:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a200:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a202:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800a204:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a206:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a208:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a20c:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a20e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a210:	2b03      	cmp	r3, #3
 800a212:	d860      	bhi.n	800a2d6 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a214:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a216:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800a21a:	d171      	bne.n	800a300 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800a21c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a21e:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800a222:	d0a6      	beq.n	800a172 <HAL_DMA_Init+0x15a>
 800a224:	21c8      	movs	r1, #200	; 0xc8
 800a226:	4835      	ldr	r0, [pc, #212]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a228:	f7fb fb22 	bl	8005870 <assert_failed>
 800a22c:	e7a1      	b.n	800a172 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a22e:	21c1      	movs	r1, #193	; 0xc1
 800a230:	4832      	ldr	r0, [pc, #200]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a232:	f7fb fb1d 	bl	8005870 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d09a      	beq.n	800a172 <HAL_DMA_Init+0x15a>
 800a23c:	e7e7      	b.n	800a20e <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a23e:	21bf      	movs	r1, #191	; 0xbf
 800a240:	482e      	ldr	r0, [pc, #184]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a242:	f7fb fb15 	bl	8005870 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a246:	6a23      	ldr	r3, [r4, #32]
 800a248:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a24c:	d08b      	beq.n	800a166 <HAL_DMA_Init+0x14e>
 800a24e:	21c0      	movs	r1, #192	; 0xc0
 800a250:	482a      	ldr	r0, [pc, #168]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a252:	f7fb fb0d 	bl	8005870 <assert_failed>
 800a256:	e786      	b.n	800a166 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a258:	21be      	movs	r1, #190	; 0xbe
 800a25a:	4828      	ldr	r0, [pc, #160]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a25c:	f7fb fb08 	bl	8005870 <assert_failed>
 800a260:	e776      	b.n	800a150 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a262:	21bd      	movs	r1, #189	; 0xbd
 800a264:	4825      	ldr	r0, [pc, #148]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a266:	f7fb fb03 	bl	8005870 <assert_failed>
 800a26a:	e769      	b.n	800a140 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a26c:	21ba      	movs	r1, #186	; 0xba
 800a26e:	4823      	ldr	r0, [pc, #140]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a270:	f7fb fafe 	bl	8005870 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a274:	68e3      	ldr	r3, [r4, #12]
 800a276:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a27a:	f43f af54 	beq.w	800a126 <HAL_DMA_Init+0x10e>
 800a27e:	21bb      	movs	r1, #187	; 0xbb
 800a280:	481e      	ldr	r0, [pc, #120]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a282:	f7fb faf5 	bl	8005870 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a28c:	f43f af50 	beq.w	800a130 <HAL_DMA_Init+0x118>
 800a290:	21bc      	movs	r1, #188	; 0xbc
 800a292:	481a      	ldr	r0, [pc, #104]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a294:	f7fb faec 	bl	8005870 <assert_failed>
 800a298:	e74a      	b.n	800a130 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a29c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800a29e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2a0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a2a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a2a8:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800a2ac:	4329      	orrs	r1, r5
 800a2ae:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800a2b0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800a2b2:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800a2b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a2b6:	f021 0107 	bic.w	r1, r1, #7
 800a2ba:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800a2bc:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2c0:	2d00      	cmp	r5, #0
 800a2c2:	d087      	beq.n	800a1d4 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a2c4:	bb08      	cbnz	r0, 800a30a <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 800a2c6:	2a01      	cmp	r2, #1
 800a2c8:	d040      	beq.n	800a34c <HAL_DMA_Init+0x334>
 800a2ca:	f032 0202 	bics.w	r2, r2, #2
 800a2ce:	d181      	bne.n	800a1d4 <HAL_DMA_Init+0x1bc>
 800a2d0:	e023      	b.n	800a31a <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 800a2d2:	2001      	movs	r0, #1
}
 800a2d4:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a2d6:	21c6      	movs	r1, #198	; 0xc6
 800a2d8:	4808      	ldr	r0, [pc, #32]	; (800a2fc <HAL_DMA_Init+0x2e4>)
 800a2da:	f7fb fac9 	bl	8005870 <assert_failed>
 800a2de:	e799      	b.n	800a214 <HAL_DMA_Init+0x1fc>
 800a2e0:	40026010 	.word	0x40026010
 800a2e4:	40026028 	.word	0x40026028
 800a2e8:	400264b8 	.word	0x400264b8
 800a2ec:	e010803f 	.word	0xe010803f
 800a2f0:	aaaaaaab 	.word	0xaaaaaaab
 800a2f4:	0802de00 	.word	0x0802de00
 800a2f8:	fffffc00 	.word	0xfffffc00
 800a2fc:	0802ddc8 	.word	0x0802ddc8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a300:	21c7      	movs	r1, #199	; 0xc7
 800a302:	481a      	ldr	r0, [pc, #104]	; (800a36c <HAL_DMA_Init+0x354>)
 800a304:	f7fb fab4 	bl	8005870 <assert_failed>
 800a308:	e788      	b.n	800a21c <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a30a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a30e:	d00e      	beq.n	800a32e <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a310:	2a02      	cmp	r2, #2
 800a312:	d905      	bls.n	800a320 <HAL_DMA_Init+0x308>
 800a314:	2a03      	cmp	r2, #3
 800a316:	f47f af5d 	bne.w	800a1d4 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a31a:	01ea      	lsls	r2, r5, #7
 800a31c:	f57f af5a 	bpl.w	800a1d4 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 800a320:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a322:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800a324:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a326:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a328:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800a32e:	2a03      	cmp	r2, #3
 800a330:	f63f af50 	bhi.w	800a1d4 <HAL_DMA_Init+0x1bc>
 800a334:	a001      	add	r0, pc, #4	; (adr r0, 800a33c <HAL_DMA_Init+0x324>)
 800a336:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800a33a:	bf00      	nop
 800a33c:	0800a321 	.word	0x0800a321
 800a340:	0800a31b 	.word	0x0800a31b
 800a344:	0800a321 	.word	0x0800a321
 800a348:	0800a34d 	.word	0x0800a34d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a34c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800a350:	f47f af40 	bne.w	800a1d4 <HAL_DMA_Init+0x1bc>
 800a354:	e7e4      	b.n	800a320 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a356:	21b8      	movs	r1, #184	; 0xb8
 800a358:	4804      	ldr	r0, [pc, #16]	; (800a36c <HAL_DMA_Init+0x354>)
 800a35a:	f7fb fa89 	bl	8005870 <assert_failed>
 800a35e:	e6c1      	b.n	800a0e4 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a360:	21b9      	movs	r1, #185	; 0xb9
 800a362:	4802      	ldr	r0, [pc, #8]	; (800a36c <HAL_DMA_Init+0x354>)
 800a364:	f7fb fa84 	bl	8005870 <assert_failed>
 800a368:	e6d1      	b.n	800a10e <HAL_DMA_Init+0xf6>
 800a36a:	bf00      	nop
 800a36c:	0802ddc8 	.word	0x0802ddc8

0800a370 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800a370:	2800      	cmp	r0, #0
 800a372:	f000 8097 	beq.w	800a4a4 <HAL_DMA_DeInit+0x134>
{
 800a376:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a378:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a37c:	4604      	mov	r4, r0
 800a37e:	2b02      	cmp	r3, #2
 800a380:	b2d8      	uxtb	r0, r3
 800a382:	f000 808e 	beq.w	800a4a2 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a386:	6822      	ldr	r2, [r4, #0]
 800a388:	4b4b      	ldr	r3, [pc, #300]	; (800a4b8 <HAL_DMA_DeInit+0x148>)
 800a38a:	484c      	ldr	r0, [pc, #304]	; (800a4bc <HAL_DMA_DeInit+0x14c>)
 800a38c:	494c      	ldr	r1, [pc, #304]	; (800a4c0 <HAL_DMA_DeInit+0x150>)
 800a38e:	429a      	cmp	r2, r3
 800a390:	bf18      	it	ne
 800a392:	4282      	cmpne	r2, r0
 800a394:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a398:	bf14      	ite	ne
 800a39a:	2301      	movne	r3, #1
 800a39c:	2300      	moveq	r3, #0
 800a39e:	428a      	cmp	r2, r1
 800a3a0:	bf0c      	ite	eq
 800a3a2:	2300      	moveq	r3, #0
 800a3a4:	f003 0301 	andne.w	r3, r3, #1
 800a3a8:	3130      	adds	r1, #48	; 0x30
 800a3aa:	4282      	cmp	r2, r0
 800a3ac:	bf0c      	ite	eq
 800a3ae:	2300      	moveq	r3, #0
 800a3b0:	f003 0301 	andne.w	r3, r3, #1
 800a3b4:	3030      	adds	r0, #48	; 0x30
 800a3b6:	428a      	cmp	r2, r1
 800a3b8:	bf0c      	ite	eq
 800a3ba:	2300      	moveq	r3, #0
 800a3bc:	f003 0301 	andne.w	r3, r3, #1
 800a3c0:	3130      	adds	r1, #48	; 0x30
 800a3c2:	4282      	cmp	r2, r0
 800a3c4:	bf0c      	ite	eq
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	f003 0301 	andne.w	r3, r3, #1
 800a3cc:	3030      	adds	r0, #48	; 0x30
 800a3ce:	428a      	cmp	r2, r1
 800a3d0:	bf0c      	ite	eq
 800a3d2:	2300      	moveq	r3, #0
 800a3d4:	f003 0301 	andne.w	r3, r3, #1
 800a3d8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a3dc:	4282      	cmp	r2, r0
 800a3de:	bf0c      	ite	eq
 800a3e0:	2300      	moveq	r3, #0
 800a3e2:	f003 0301 	andne.w	r3, r3, #1
 800a3e6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a3ea:	428a      	cmp	r2, r1
 800a3ec:	bf0c      	ite	eq
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	f003 0301 	andne.w	r3, r3, #1
 800a3f4:	3130      	adds	r1, #48	; 0x30
 800a3f6:	4282      	cmp	r2, r0
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2300      	moveq	r3, #0
 800a3fc:	f003 0301 	andne.w	r3, r3, #1
 800a400:	3030      	adds	r0, #48	; 0x30
 800a402:	428a      	cmp	r2, r1
 800a404:	bf0c      	ite	eq
 800a406:	2300      	moveq	r3, #0
 800a408:	f003 0301 	andne.w	r3, r3, #1
 800a40c:	3130      	adds	r1, #48	; 0x30
 800a40e:	4282      	cmp	r2, r0
 800a410:	bf0c      	ite	eq
 800a412:	2300      	moveq	r3, #0
 800a414:	f003 0301 	andne.w	r3, r3, #1
 800a418:	3030      	adds	r0, #48	; 0x30
 800a41a:	428a      	cmp	r2, r1
 800a41c:	bf0c      	ite	eq
 800a41e:	2300      	moveq	r3, #0
 800a420:	f003 0301 	andne.w	r3, r3, #1
 800a424:	3130      	adds	r1, #48	; 0x30
 800a426:	4282      	cmp	r2, r0
 800a428:	bf0c      	ite	eq
 800a42a:	2300      	moveq	r3, #0
 800a42c:	f003 0301 	andne.w	r3, r3, #1
 800a430:	428a      	cmp	r2, r1
 800a432:	bf0c      	ite	eq
 800a434:	2300      	moveq	r3, #0
 800a436:	f003 0301 	andne.w	r3, r3, #1
 800a43a:	b113      	cbz	r3, 800a442 <HAL_DMA_DeInit+0xd2>
 800a43c:	4b21      	ldr	r3, [pc, #132]	; (800a4c4 <HAL_DMA_DeInit+0x154>)
 800a43e:	429a      	cmp	r2, r3
 800a440:	d132      	bne.n	800a4a8 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 800a442:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a444:	b2d3      	uxtb	r3, r2
 800a446:	4920      	ldr	r1, [pc, #128]	; (800a4c8 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 800a448:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a44c:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 800a44e:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 800a450:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a452:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800a456:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 800a458:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800a45a:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 800a45e:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a460:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 800a464:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 800a466:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800a468:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800a46a:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a46e:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a470:	4816      	ldr	r0, [pc, #88]	; (800a4cc <HAL_DMA_DeInit+0x15c>)
 800a472:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a474:	4916      	ldr	r1, [pc, #88]	; (800a4d0 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a476:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a478:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a47c:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a480:	bf88      	it	hi
 800a482:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a484:	4082      	lsls	r2, r0
  return HAL_OK;
 800a486:	4618      	mov	r0, r3
 800a488:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a48a:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a48c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800a48e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800a492:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800a496:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800a49a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800a49e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800a4a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a4a4:	2001      	movs	r0, #1
}
 800a4a6:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a4a8:	f240 1149 	movw	r1, #329	; 0x149
 800a4ac:	4809      	ldr	r0, [pc, #36]	; (800a4d4 <HAL_DMA_DeInit+0x164>)
 800a4ae:	f7fb f9df 	bl	8005870 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	e7c5      	b.n	800a442 <HAL_DMA_DeInit+0xd2>
 800a4b6:	bf00      	nop
 800a4b8:	40026010 	.word	0x40026010
 800a4bc:	40026028 	.word	0x40026028
 800a4c0:	40026040 	.word	0x40026040
 800a4c4:	400264b8 	.word	0x400264b8
 800a4c8:	aaaaaaab 	.word	0xaaaaaaab
 800a4cc:	0802de00 	.word	0x0802de00
 800a4d0:	fffffc00 	.word	0xfffffc00
 800a4d4:	0802ddc8 	.word	0x0802ddc8

0800a4d8 <HAL_DMA_Start_IT>:
{
 800a4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	461e      	mov	r6, r3
 800a4de:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4e0:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a4e4:	1e58      	subs	r0, r3, #1
 800a4e6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 800a4ea:	4688      	mov	r8, r1
 800a4ec:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	d83b      	bhi.n	800a56a <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800a4f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d040      	beq.n	800a57c <HAL_DMA_Start_IT+0xa4>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a500:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a504:	2b01      	cmp	r3, #1
 800a506:	d005      	beq.n	800a514 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a508:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800a50a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800a50c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a514:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a516:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800a518:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a51c:	2300      	movs	r3, #0
 800a51e:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a526:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a528:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800a52a:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a52c:	2b40      	cmp	r3, #64	; 0x40
 800a52e:	d028      	beq.n	800a582 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 800a530:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 800a534:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a536:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a538:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800a53a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a53c:	408b      	lsls	r3, r1
 800a53e:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	f043 0316 	orr.w	r3, r3, #22
 800a548:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a54a:	696b      	ldr	r3, [r5, #20]
 800a54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a550:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a552:	b11a      	cbz	r2, 800a55c <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	f043 0308 	orr.w	r3, r3, #8
 800a55a:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800a55c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a55e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a560:	f043 0301 	orr.w	r3, r3, #1
 800a564:	602b      	str	r3, [r5, #0]
}
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a56a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800a56e:	4807      	ldr	r0, [pc, #28]	; (800a58c <HAL_DMA_Start_IT+0xb4>)
 800a570:	f7fb f97e 	bl	8005870 <assert_failed>
  __HAL_LOCK(hdma);
 800a574:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d1be      	bne.n	800a4fa <HAL_DMA_Start_IT+0x22>
 800a57c:	2002      	movs	r0, #2
}
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800a582:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a584:	f8c5 800c 	str.w	r8, [r5, #12]
 800a588:	e7d5      	b.n	800a536 <HAL_DMA_Start_IT+0x5e>
 800a58a:	bf00      	nop
 800a58c:	0802ddc8 	.word	0x0802ddc8

0800a590 <HAL_DMA_Abort>:
{
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a594:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800a596:	f7fe fdd5 	bl	8009144 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a59a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d006      	beq.n	800a5b0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5a2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800a5a4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a5a6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5a8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a5aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f022 0216 	bic.w	r2, r2, #22
 800a5ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5bc:	695a      	ldr	r2, [r3, #20]
 800a5be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5c2:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5c6:	b33a      	cbz	r2, 800a618 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	f022 0208 	bic.w	r2, r2, #8
 800a5ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f022 0201 	bic.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5d8:	e005      	b.n	800a5e6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a5da:	f7fe fdb3 	bl	8009144 <HAL_GetTick>
 800a5de:	1b43      	subs	r3, r0, r5
 800a5e0:	2b05      	cmp	r3, #5
 800a5e2:	d80f      	bhi.n	800a604 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f013 0301 	ands.w	r3, r3, #1
 800a5ec:	d1f5      	bne.n	800a5da <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a5f0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800a5f2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5f4:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800a5f6:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5f8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800a5fa:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800a5fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a602:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a604:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a606:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800a608:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a60a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800a60c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a60e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a612:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800a616:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a618:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a61a:	2a00      	cmp	r2, #0
 800a61c:	d1d4      	bne.n	800a5c8 <HAL_DMA_Abort+0x38>
 800a61e:	e7d7      	b.n	800a5d0 <HAL_DMA_Abort+0x40>

0800a620 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a620:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800a624:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a626:	2a02      	cmp	r2, #2
 800a628:	d003      	beq.n	800a632 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a62a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800a62c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a62e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a630:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a632:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a634:	2105      	movs	r1, #5
  return HAL_OK;
 800a636:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800a638:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800a63c:	6813      	ldr	r3, [r2, #0]
 800a63e:	f023 0301 	bic.w	r3, r3, #1
 800a642:	6013      	str	r3, [r2, #0]
}
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop

0800a648 <HAL_DMA_IRQHandler>:
{
 800a648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 800a64c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 800a64e:	4b74      	ldr	r3, [pc, #464]	; (800a820 <HAL_DMA_IRQHandler+0x1d8>)
{
 800a650:	b082      	sub	sp, #8
 800a652:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800a654:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800a656:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a658:	2208      	movs	r2, #8
 800a65a:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800a65e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a660:	409a      	lsls	r2, r3
 800a662:	4222      	tst	r2, r4
 800a664:	d004      	beq.n	800a670 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a666:	6801      	ldr	r1, [r0, #0]
 800a668:	680f      	ldr	r7, [r1, #0]
 800a66a:	0778      	lsls	r0, r7, #29
 800a66c:	f100 80ab 	bmi.w	800a7c6 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a670:	2201      	movs	r2, #1
 800a672:	409a      	lsls	r2, r3
 800a674:	4222      	tst	r2, r4
 800a676:	d005      	beq.n	800a684 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a678:	f8d8 1000 	ldr.w	r1, [r8]
 800a67c:	6949      	ldr	r1, [r1, #20]
 800a67e:	0609      	lsls	r1, r1, #24
 800a680:	f100 8099 	bmi.w	800a7b6 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a684:	2204      	movs	r2, #4
 800a686:	409a      	lsls	r2, r3
 800a688:	4222      	tst	r2, r4
 800a68a:	d005      	beq.n	800a698 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a68c:	f8d8 1000 	ldr.w	r1, [r8]
 800a690:	6809      	ldr	r1, [r1, #0]
 800a692:	078f      	lsls	r7, r1, #30
 800a694:	f100 8087 	bmi.w	800a7a6 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a698:	2210      	movs	r2, #16
 800a69a:	409a      	lsls	r2, r3
 800a69c:	4222      	tst	r2, r4
 800a69e:	d004      	beq.n	800a6aa <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6a0:	f8d8 1000 	ldr.w	r1, [r8]
 800a6a4:	680f      	ldr	r7, [r1, #0]
 800a6a6:	0738      	lsls	r0, r7, #28
 800a6a8:	d468      	bmi.n	800a77c <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	409a      	lsls	r2, r3
 800a6ae:	4222      	tst	r2, r4
 800a6b0:	d017      	beq.n	800a6e2 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a6b2:	f8d8 1000 	ldr.w	r1, [r8]
 800a6b6:	680c      	ldr	r4, [r1, #0]
 800a6b8:	06e0      	lsls	r0, r4, #27
 800a6ba:	d512      	bpl.n	800a6e2 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a6bc:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a6be:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800a6c2:	2a05      	cmp	r2, #5
 800a6c4:	d039      	beq.n	800a73a <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6cc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6ce:	f000 808d 	beq.w	800a7ec <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6d2:	0319      	lsls	r1, r3, #12
 800a6d4:	f140 8098 	bpl.w	800a808 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 800a6d8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a6dc:	b10b      	cbz	r3, 800a6e2 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6e2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d045      	beq.n	800a776 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6ea:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a6ee:	07da      	lsls	r2, r3, #31
 800a6f0:	d51b      	bpl.n	800a72a <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800a6f2:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6f6:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800a6f8:	494a      	ldr	r1, [pc, #296]	; (800a824 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6fa:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a6fe:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a700:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800a704:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800a708:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e002      	b.n	800a714 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a70e:	6813      	ldr	r3, [r2, #0]
 800a710:	07db      	lsls	r3, r3, #31
 800a712:	d504      	bpl.n	800a71e <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	3301      	adds	r3, #1
 800a718:	42ab      	cmp	r3, r5
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	d9f7      	bls.n	800a70e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 800a71e:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800a720:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800a722:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a726:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800a72a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a72e:	b313      	cbz	r3, 800a776 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 800a730:	4640      	mov	r0, r8
}
 800a732:	b002      	add	sp, #8
 800a734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800a738:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a73a:	680a      	ldr	r2, [r1, #0]
 800a73c:	f022 0216 	bic.w	r2, r2, #22
 800a740:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a742:	694a      	ldr	r2, [r1, #20]
 800a744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a748:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a74a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a74e:	2a00      	cmp	r2, #0
 800a750:	d060      	beq.n	800a814 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a752:	680a      	ldr	r2, [r1, #0]
 800a754:	f022 0208 	bic.w	r2, r2, #8
 800a758:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a75a:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 800a75c:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800a762:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a764:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800a766:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 800a76a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a76e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1dc      	bne.n	800a730 <HAL_DMA_IRQHandler+0xe8>
}
 800a776:	b002      	add	sp, #8
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a77c:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a77e:	680a      	ldr	r2, [r1, #0]
 800a780:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a784:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a786:	d12a      	bne.n	800a7de <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a788:	05d7      	lsls	r7, r2, #23
 800a78a:	d403      	bmi.n	800a794 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a78c:	680a      	ldr	r2, [r1, #0]
 800a78e:	f022 0208 	bic.w	r2, r2, #8
 800a792:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800a794:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a798:	2a00      	cmp	r2, #0
 800a79a:	d086      	beq.n	800a6aa <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 800a79c:	4640      	mov	r0, r8
 800a79e:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7a0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a7a4:	e781      	b.n	800a6aa <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a7a6:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7a8:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a7ac:	f042 0204 	orr.w	r2, r2, #4
 800a7b0:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a7b4:	e770      	b.n	800a698 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a7b6:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a7b8:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a7bc:	f042 0202 	orr.w	r2, r2, #2
 800a7c0:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a7c4:	e75e      	b.n	800a684 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a7c6:	680f      	ldr	r7, [r1, #0]
 800a7c8:	f027 0704 	bic.w	r7, r7, #4
 800a7cc:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a7ce:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a7d0:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a7d4:	f042 0201 	orr.w	r2, r2, #1
 800a7d8:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a7dc:	e748      	b.n	800a670 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7de:	0312      	lsls	r2, r2, #12
 800a7e0:	d5d8      	bpl.n	800a794 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a7e2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d1d8      	bne.n	800a79c <HAL_DMA_IRQHandler+0x154>
 800a7ea:	e75e      	b.n	800a6aa <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7ec:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800a7f0:	f47f af72 	bne.w	800a6d8 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a7f4:	680a      	ldr	r2, [r1, #0]
 800a7f6:	f022 0210 	bic.w	r2, r2, #16
 800a7fa:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a7fc:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800a7fe:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800a802:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a806:	e767      	b.n	800a6d8 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800a808:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f47f af66 	bne.w	800a6de <HAL_DMA_IRQHandler+0x96>
 800a812:	e766      	b.n	800a6e2 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a814:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800a818:	2a00      	cmp	r2, #0
 800a81a:	d19a      	bne.n	800a752 <HAL_DMA_IRQHandler+0x10a>
 800a81c:	e79d      	b.n	800a75a <HAL_DMA_IRQHandler+0x112>
 800a81e:	bf00      	nop
 800a820:	20000298 	.word	0x20000298
 800a824:	1b4e81b5 	.word	0x1b4e81b5

0800a828 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800a828:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800a82a:	4770      	bx	lr

0800a82c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a830:	9f08      	ldr	r7, [sp, #32]
 800a832:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a834:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800a838:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a83a:	1e7d      	subs	r5, r7, #1
{
 800a83c:	4691      	mov	r9, r2
 800a83e:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a840:	4285      	cmp	r5, r0
 800a842:	d85f      	bhi.n	800a904 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a844:	68a0      	ldr	r0, [r4, #8]
 800a846:	2880      	cmp	r0, #128	; 0x80
 800a848:	d063      	beq.n	800a912 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800a84a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a84e:	2b01      	cmp	r3, #1
 800a850:	f000 8090 	beq.w	800a974 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800a854:	2301      	movs	r3, #1
 800a856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a85a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d005      	beq.n	800a86e <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a862:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 800a864:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800a866:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800a86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a86e:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800a870:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a872:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800a874:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a884:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800a886:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 800a888:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a88a:	d06a      	beq.n	800a962 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800a88c:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800a890:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a894:	4b93      	ldr	r3, [pc, #588]	; (800aae4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800a896:	429d      	cmp	r5, r3
 800a898:	d941      	bls.n	800a91e <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 800a89a:	3b48      	subs	r3, #72	; 0x48
 800a89c:	4992      	ldr	r1, [pc, #584]	; (800aae8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800a89e:	4a93      	ldr	r2, [pc, #588]	; (800aaec <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800a8a0:	429d      	cmp	r5, r3
 800a8a2:	bf18      	it	ne
 800a8a4:	428d      	cmpne	r5, r1
 800a8a6:	bf14      	ite	ne
 800a8a8:	2301      	movne	r3, #1
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	4295      	cmp	r5, r2
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2300      	moveq	r3, #0
 800a8b2:	f003 0301 	andne.w	r3, r3, #1
 800a8b6:	b11b      	cbz	r3, 800a8c0 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 800a8b8:	4b8d      	ldr	r3, [pc, #564]	; (800aaf0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800a8ba:	429d      	cmp	r5, r3
 800a8bc:	f040 812e 	bne.w	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800a8c0:	4b8c      	ldr	r3, [pc, #560]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800a8c2:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a8c4:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a8c6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a8c8:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a8ca:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a8cc:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a8ce:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a8d0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4b87      	ldr	r3, [pc, #540]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800a8d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8d8:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8da:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8dc:	f043 0316 	orr.w	r3, r3, #22
 800a8e0:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a8e2:	696b      	ldr	r3, [r5, #20]
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8ea:	2a00      	cmp	r2, #0
 800a8ec:	d03e      	beq.n	800a96c <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	f043 0308 	orr.w	r3, r3, #8
 800a8f4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800a8f6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	602b      	str	r3, [r5, #0]
}
 800a900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a904:	487c      	ldr	r0, [pc, #496]	; (800aaf8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800a906:	21a1      	movs	r1, #161	; 0xa1
 800a908:	f7fa ffb2 	bl	8005870 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a90c:	68a0      	ldr	r0, [r4, #8]
 800a90e:	2880      	cmp	r0, #128	; 0x80
 800a910:	d19b      	bne.n	800a84a <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a912:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800a916:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a918:	6563      	str	r3, [r4, #84]	; 0x54
}
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a91e:	4b77      	ldr	r3, [pc, #476]	; (800aafc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800a920:	429d      	cmp	r5, r3
 800a922:	d929      	bls.n	800a978 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800a924:	3ba8      	subs	r3, #168	; 0xa8
 800a926:	4976      	ldr	r1, [pc, #472]	; (800ab00 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800a928:	4a70      	ldr	r2, [pc, #448]	; (800aaec <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800a92a:	429d      	cmp	r5, r3
 800a92c:	bf18      	it	ne
 800a92e:	428d      	cmpne	r5, r1
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	4295      	cmp	r5, r2
 800a938:	bf0c      	ite	eq
 800a93a:	2300      	moveq	r3, #0
 800a93c:	f003 0301 	andne.w	r3, r3, #1
 800a940:	b113      	cbz	r3, 800a948 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800a942:	4b6b      	ldr	r3, [pc, #428]	; (800aaf0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800a944:	429d      	cmp	r5, r3
 800a946:	d15a      	bne.n	800a9fe <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800a948:	4b6a      	ldr	r3, [pc, #424]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800a94a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a94c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a94e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a950:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a952:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a954:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a956:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a958:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a95a:	2301      	movs	r3, #1
 800a95c:	4a65      	ldr	r2, [pc, #404]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800a95e:	6093      	str	r3, [r2, #8]
 800a960:	e7ba      	b.n	800a8d8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 800a962:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a966:	f8c5 800c 	str.w	r8, [r5, #12]
 800a96a:	e793      	b.n	800a894 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a96c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1bd      	bne.n	800a8ee <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 800a972:	e7c0      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 800a974:	2002      	movs	r0, #2
 800a976:	e778      	b.n	800a86a <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a978:	4b62      	ldr	r3, [pc, #392]	; (800ab04 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800a97a:	429d      	cmp	r5, r3
 800a97c:	d91f      	bls.n	800a9be <HAL_DMAEx_MultiBufferStart_IT+0x192>
 800a97e:	3b48      	subs	r3, #72	; 0x48
 800a980:	495f      	ldr	r1, [pc, #380]	; (800ab00 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800a982:	4a5a      	ldr	r2, [pc, #360]	; (800aaec <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800a984:	429d      	cmp	r5, r3
 800a986:	bf18      	it	ne
 800a988:	428d      	cmpne	r5, r1
 800a98a:	bf14      	ite	ne
 800a98c:	2301      	movne	r3, #1
 800a98e:	2300      	moveq	r3, #0
 800a990:	4295      	cmp	r5, r2
 800a992:	bf0c      	ite	eq
 800a994:	2300      	moveq	r3, #0
 800a996:	f003 0301 	andne.w	r3, r3, #1
 800a99a:	b11b      	cbz	r3, 800a9a4 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800a99c:	4b54      	ldr	r3, [pc, #336]	; (800aaf0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800a99e:	429d      	cmp	r5, r3
 800a9a0:	f040 8152 	bne.w	800ac48 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800a9a4:	4b58      	ldr	r3, [pc, #352]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800a9a6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a9a8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a9aa:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9ac:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a9ae:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9b0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9b2:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9b4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4a53      	ldr	r2, [pc, #332]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800a9ba:	60d3      	str	r3, [r2, #12]
 800a9bc:	e78c      	b.n	800a8d8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a9be:	4b50      	ldr	r3, [pc, #320]	; (800ab00 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800a9c0:	4949      	ldr	r1, [pc, #292]	; (800aae8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800a9c2:	4a4a      	ldr	r2, [pc, #296]	; (800aaec <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800a9c4:	429d      	cmp	r5, r3
 800a9c6:	bf18      	it	ne
 800a9c8:	428d      	cmpne	r5, r1
 800a9ca:	bf14      	ite	ne
 800a9cc:	2301      	movne	r3, #1
 800a9ce:	2300      	moveq	r3, #0
 800a9d0:	4295      	cmp	r5, r2
 800a9d2:	bf0c      	ite	eq
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	f003 0301 	andne.w	r3, r3, #1
 800a9da:	b11b      	cbz	r3, 800a9e4 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 800a9dc:	4b44      	ldr	r3, [pc, #272]	; (800aaf0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	f040 80be 	bne.w	800ab60 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 800a9e4:	4b48      	ldr	r3, [pc, #288]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800a9e6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a9e8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a9ea:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9ec:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a9ee:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9f0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9f2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9f4:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4a43      	ldr	r2, [pc, #268]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800a9fa:	6093      	str	r3, [r2, #8]
 800a9fc:	e76c      	b.n	800a8d8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a9fe:	3b48      	subs	r3, #72	; 0x48
 800aa00:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800aa04:	3218      	adds	r2, #24
 800aa06:	429d      	cmp	r5, r3
 800aa08:	bf18      	it	ne
 800aa0a:	428d      	cmpne	r5, r1
 800aa0c:	bf14      	ite	ne
 800aa0e:	2301      	movne	r3, #1
 800aa10:	2300      	moveq	r3, #0
 800aa12:	4295      	cmp	r5, r2
 800aa14:	bf0c      	ite	eq
 800aa16:	2300      	moveq	r3, #0
 800aa18:	f003 0301 	andne.w	r3, r3, #1
 800aa1c:	b11b      	cbz	r3, 800aa26 <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 800aa1e:	4b3b      	ldr	r3, [pc, #236]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aa20:	429d      	cmp	r5, r3
 800aa22:	f040 8210 	bne.w	800ae46 <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 800aa26:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa2a:	4b39      	ldr	r3, [pc, #228]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800aa2c:	4839      	ldr	r0, [pc, #228]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aa2e:	4a31      	ldr	r2, [pc, #196]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa30:	429d      	cmp	r5, r3
 800aa32:	bf18      	it	ne
 800aa34:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aa36:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa38:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 800aa3c:	bf14      	ite	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	2300      	moveq	r3, #0
 800aa42:	4295      	cmp	r5, r2
 800aa44:	bf0c      	ite	eq
 800aa46:	2300      	moveq	r3, #0
 800aa48:	f003 0301 	andne.w	r3, r3, #1
 800aa4c:	b11b      	cbz	r3, 800aa56 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 800aa4e:	4b2f      	ldr	r3, [pc, #188]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aa50:	429d      	cmp	r5, r3
 800aa52:	f040 8212 	bne.w	800ae7a <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800aa56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa5a:	4b2d      	ldr	r3, [pc, #180]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800aa5c:	482d      	ldr	r0, [pc, #180]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa5e:	4925      	ldr	r1, [pc, #148]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa60:	429d      	cmp	r5, r3
 800aa62:	bf18      	it	ne
 800aa64:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aa66:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa68:	bf14      	ite	ne
 800aa6a:	2301      	movne	r3, #1
 800aa6c:	2300      	moveq	r3, #0
 800aa6e:	4a2a      	ldr	r2, [pc, #168]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800aa70:	4295      	cmp	r5, r2
 800aa72:	bf0c      	ite	eq
 800aa74:	2300      	moveq	r3, #0
 800aa76:	f003 0301 	andne.w	r3, r3, #1
 800aa7a:	b11b      	cbz	r3, 800aa84 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 800aa7c:	4b23      	ldr	r3, [pc, #140]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aa7e:	429d      	cmp	r5, r3
 800aa80:	f040 822b 	bne.w	800aeda <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800aa84:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa88:	4b22      	ldr	r3, [pc, #136]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800aa8a:	4821      	ldr	r0, [pc, #132]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa8c:	4919      	ldr	r1, [pc, #100]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa8e:	429d      	cmp	r5, r3
 800aa90:	bf18      	it	ne
 800aa92:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aa94:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa96:	bf14      	ite	ne
 800aa98:	2301      	movne	r3, #1
 800aa9a:	2300      	moveq	r3, #0
 800aa9c:	4a1e      	ldr	r2, [pc, #120]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800aa9e:	4295      	cmp	r5, r2
 800aaa0:	bf0c      	ite	eq
 800aaa2:	2300      	moveq	r3, #0
 800aaa4:	f003 0301 	andne.w	r3, r3, #1
 800aaa8:	b11b      	cbz	r3, 800aab2 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800aaaa:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aaac:	429d      	cmp	r5, r3
 800aaae:	f040 81fc 	bne.w	800aeaa <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800aab2:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aab6:	4b17      	ldr	r3, [pc, #92]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800aab8:	4815      	ldr	r0, [pc, #84]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aaba:	490e      	ldr	r1, [pc, #56]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aabc:	429d      	cmp	r5, r3
 800aabe:	bf18      	it	ne
 800aac0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aac2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aac4:	bf14      	ite	ne
 800aac6:	2301      	movne	r3, #1
 800aac8:	2300      	moveq	r3, #0
 800aaca:	4a13      	ldr	r2, [pc, #76]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800aacc:	4295      	cmp	r5, r2
 800aace:	bf0c      	ite	eq
 800aad0:	2300      	moveq	r3, #0
 800aad2:	f003 0301 	andne.w	r3, r3, #1
 800aad6:	b11b      	cbz	r3, 800aae0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800aada:	429d      	cmp	r5, r3
 800aadc:	f040 8215 	bne.w	800af0a <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 800aae0:	2340      	movs	r3, #64	; 0x40
 800aae2:	e73b      	b.n	800a95c <HAL_DMAEx_MultiBufferStart_IT+0x130>
 800aae4:	40026458 	.word	0x40026458
 800aae8:	40026010 	.word	0x40026010
 800aaec:	40026070 	.word	0x40026070
 800aaf0:	40026470 	.word	0x40026470
 800aaf4:	40026400 	.word	0x40026400
 800aaf8:	0802de08 	.word	0x0802de08
 800aafc:	400260b8 	.word	0x400260b8
 800ab00:	40026410 	.word	0x40026410
 800ab04:	40026058 	.word	0x40026058
 800ab08:	40026000 	.word	0x40026000
 800ab0c:	40026488 	.word	0x40026488
 800ab10:	40026028 	.word	0x40026028
 800ab14:	40026428 	.word	0x40026428
 800ab18:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab1c:	3b48      	subs	r3, #72	; 0x48
 800ab1e:	3118      	adds	r1, #24
 800ab20:	3218      	adds	r2, #24
 800ab22:	429d      	cmp	r5, r3
 800ab24:	bf18      	it	ne
 800ab26:	428d      	cmpne	r5, r1
 800ab28:	bf14      	ite	ne
 800ab2a:	2301      	movne	r3, #1
 800ab2c:	2300      	moveq	r3, #0
 800ab2e:	4295      	cmp	r5, r2
 800ab30:	bf0c      	ite	eq
 800ab32:	2300      	moveq	r3, #0
 800ab34:	f003 0301 	andne.w	r3, r3, #1
 800ab38:	b11b      	cbz	r3, 800ab42 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800ab3a:	4b7d      	ldr	r3, [pc, #500]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ab3c:	429d      	cmp	r5, r3
 800ab3e:	f040 8103 	bne.w	800ad48 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 800ab42:	4b7c      	ldr	r3, [pc, #496]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800ab44:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab48:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab4c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab4e:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab52:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab54:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab58:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab5a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab5c:	2240      	movs	r2, #64	; 0x40
 800ab5e:	e6b9      	b.n	800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab60:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ab64:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800ab68:	3218      	adds	r2, #24
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	bf18      	it	ne
 800ab6e:	428d      	cmpne	r5, r1
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	4295      	cmp	r5, r2
 800ab78:	bf0c      	ite	eq
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	f003 0301 	andne.w	r3, r3, #1
 800ab80:	b11b      	cbz	r3, 800ab8a <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800ab82:	4b6b      	ldr	r3, [pc, #428]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ab84:	429d      	cmp	r5, r3
 800ab86:	f040 81d8 	bne.w	800af3a <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 800ab8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab8e:	4b6a      	ldr	r3, [pc, #424]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ab90:	486a      	ldr	r0, [pc, #424]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab92:	4a6b      	ldr	r2, [pc, #428]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab94:	429d      	cmp	r5, r3
 800ab96:	bf18      	it	ne
 800ab98:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab9a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab9c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800aba0:	bf14      	ite	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	2300      	moveq	r3, #0
 800aba6:	4295      	cmp	r5, r2
 800aba8:	bf0c      	ite	eq
 800abaa:	2300      	moveq	r3, #0
 800abac:	f003 0301 	andne.w	r3, r3, #1
 800abb0:	b11b      	cbz	r3, 800abba <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800abb2:	4b5f      	ldr	r3, [pc, #380]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800abb4:	429d      	cmp	r5, r3
 800abb6:	f040 81d9 	bne.w	800af6c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800abba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abbe:	4b5e      	ldr	r3, [pc, #376]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800abc0:	485e      	ldr	r0, [pc, #376]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abc2:	495f      	ldr	r1, [pc, #380]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abc4:	429d      	cmp	r5, r3
 800abc6:	bf18      	it	ne
 800abc8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abca:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abcc:	bf14      	ite	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	2300      	moveq	r3, #0
 800abd2:	4a5c      	ldr	r2, [pc, #368]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800abd4:	4295      	cmp	r5, r2
 800abd6:	bf0c      	ite	eq
 800abd8:	2300      	moveq	r3, #0
 800abda:	f003 0301 	andne.w	r3, r3, #1
 800abde:	b11b      	cbz	r3, 800abe8 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 800abe0:	4b53      	ldr	r3, [pc, #332]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800abe2:	429d      	cmp	r5, r3
 800abe4:	f040 822c 	bne.w	800b040 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800abe8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abec:	4b53      	ldr	r3, [pc, #332]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800abee:	4852      	ldr	r0, [pc, #328]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abf0:	4953      	ldr	r1, [pc, #332]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abf2:	429d      	cmp	r5, r3
 800abf4:	bf18      	it	ne
 800abf6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abf8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	4a50      	ldr	r2, [pc, #320]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ac02:	4295      	cmp	r5, r2
 800ac04:	bf0c      	ite	eq
 800ac06:	2300      	moveq	r3, #0
 800ac08:	f003 0301 	andne.w	r3, r3, #1
 800ac0c:	b11b      	cbz	r3, 800ac16 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800ac0e:	4b48      	ldr	r3, [pc, #288]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ac10:	429d      	cmp	r5, r3
 800ac12:	f040 81db 	bne.w	800afcc <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800ac16:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac1a:	4b47      	ldr	r3, [pc, #284]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ac1c:	4847      	ldr	r0, [pc, #284]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac1e:	4948      	ldr	r1, [pc, #288]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac20:	429d      	cmp	r5, r3
 800ac22:	bf18      	it	ne
 800ac24:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac26:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	4a45      	ldr	r2, [pc, #276]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ac30:	4295      	cmp	r5, r2
 800ac32:	bf0c      	ite	eq
 800ac34:	2300      	moveq	r3, #0
 800ac36:	f003 0301 	andne.w	r3, r3, #1
 800ac3a:	b11b      	cbz	r3, 800ac44 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800ac3c:	4b3c      	ldr	r3, [pc, #240]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	f040 822d 	bne.w	800b09e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800ac44:	2340      	movs	r3, #64	; 0x40
 800ac46:	e6d7      	b.n	800a9f8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac48:	3b48      	subs	r3, #72	; 0x48
 800ac4a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ac4e:	3218      	adds	r2, #24
 800ac50:	429d      	cmp	r5, r3
 800ac52:	bf18      	it	ne
 800ac54:	428d      	cmpne	r5, r1
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	4295      	cmp	r5, r2
 800ac5e:	bf0c      	ite	eq
 800ac60:	2300      	moveq	r3, #0
 800ac62:	f003 0301 	andne.w	r3, r3, #1
 800ac66:	b11b      	cbz	r3, 800ac70 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800ac68:	4b31      	ldr	r3, [pc, #196]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ac6a:	429d      	cmp	r5, r3
 800ac6c:	f040 81d0 	bne.w	800b010 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 800ac70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac74:	4b31      	ldr	r3, [pc, #196]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ac76:	4830      	ldr	r0, [pc, #192]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac78:	4a31      	ldr	r2, [pc, #196]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac7a:	429d      	cmp	r5, r3
 800ac7c:	bf18      	it	ne
 800ac7e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac80:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac82:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800ac86:	bf14      	ite	ne
 800ac88:	2301      	movne	r3, #1
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	4295      	cmp	r5, r2
 800ac8e:	bf0c      	ite	eq
 800ac90:	2300      	moveq	r3, #0
 800ac92:	f003 0301 	andne.w	r3, r3, #1
 800ac96:	b11b      	cbz	r3, 800aca0 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 800ac98:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ac9a:	429d      	cmp	r5, r3
 800ac9c:	f040 817e 	bne.w	800af9c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800aca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aca4:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800aca6:	4825      	ldr	r0, [pc, #148]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aca8:	4925      	ldr	r1, [pc, #148]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acaa:	429d      	cmp	r5, r3
 800acac:	bf18      	it	ne
 800acae:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800acb0:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acb2:	bf14      	ite	ne
 800acb4:	2301      	movne	r3, #1
 800acb6:	2300      	moveq	r3, #0
 800acb8:	4a22      	ldr	r2, [pc, #136]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800acba:	4295      	cmp	r5, r2
 800acbc:	bf0c      	ite	eq
 800acbe:	2300      	moveq	r3, #0
 800acc0:	f003 0301 	andne.w	r3, r3, #1
 800acc4:	b11b      	cbz	r3, 800acce <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800acc8:	429d      	cmp	r5, r3
 800acca:	f040 81fe 	bne.w	800b0ca <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800acce:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acd2:	4b1a      	ldr	r3, [pc, #104]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800acd4:	4818      	ldr	r0, [pc, #96]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acd6:	491a      	ldr	r1, [pc, #104]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acd8:	429d      	cmp	r5, r3
 800acda:	bf18      	it	ne
 800acdc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acde:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ace0:	bf14      	ite	ne
 800ace2:	2301      	movne	r3, #1
 800ace4:	2300      	moveq	r3, #0
 800ace6:	4a17      	ldr	r2, [pc, #92]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ace8:	4295      	cmp	r5, r2
 800acea:	bf0c      	ite	eq
 800acec:	2300      	moveq	r3, #0
 800acee:	f003 0301 	andne.w	r3, r3, #1
 800acf2:	b11b      	cbz	r3, 800acfc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800acf4:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800acf6:	429d      	cmp	r5, r3
 800acf8:	f040 81ba 	bne.w	800b070 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800acfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad00:	4b0e      	ldr	r3, [pc, #56]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ad02:	480d      	ldr	r0, [pc, #52]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad04:	490e      	ldr	r1, [pc, #56]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad06:	429d      	cmp	r5, r3
 800ad08:	bf18      	it	ne
 800ad0a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad0c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad0e:	bf14      	ite	ne
 800ad10:	2301      	movne	r3, #1
 800ad12:	2300      	moveq	r3, #0
 800ad14:	4a0b      	ldr	r2, [pc, #44]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ad16:	4295      	cmp	r5, r2
 800ad18:	bf0c      	ite	eq
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	f003 0301 	andne.w	r3, r3, #1
 800ad20:	b11b      	cbz	r3, 800ad2a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ad24:	429d      	cmp	r5, r3
 800ad26:	f040 81e6 	bne.w	800b0f6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	e644      	b.n	800a9b8 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800ad2e:	bf00      	nop
 800ad30:	40026488 	.word	0x40026488
 800ad34:	40026400 	.word	0x40026400
 800ad38:	40026428 	.word	0x40026428
 800ad3c:	40026028 	.word	0x40026028
 800ad40:	40026000 	.word	0x40026000
 800ad44:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad48:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ad4c:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800ad50:	3218      	adds	r2, #24
 800ad52:	429d      	cmp	r5, r3
 800ad54:	bf18      	it	ne
 800ad56:	428d      	cmpne	r5, r1
 800ad58:	bf14      	ite	ne
 800ad5a:	2301      	movne	r3, #1
 800ad5c:	2300      	moveq	r3, #0
 800ad5e:	4295      	cmp	r5, r2
 800ad60:	bf0c      	ite	eq
 800ad62:	2300      	moveq	r3, #0
 800ad64:	f003 0301 	andne.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f000 81e6 	beq.w	800b13a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800ad6e:	4ba3      	ldr	r3, [pc, #652]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ad70:	429d      	cmp	r5, r3
 800ad72:	f000 81e2 	beq.w	800b13a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800ad76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad7a:	4ba1      	ldr	r3, [pc, #644]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800ad7c:	48a1      	ldr	r0, [pc, #644]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad7e:	4aa2      	ldr	r2, [pc, #648]	; (800b008 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad80:	429d      	cmp	r5, r3
 800ad82:	bf18      	it	ne
 800ad84:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad86:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad88:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800ad8c:	bf14      	ite	ne
 800ad8e:	2301      	movne	r3, #1
 800ad90:	2300      	moveq	r3, #0
 800ad92:	4295      	cmp	r5, r2
 800ad94:	bf0c      	ite	eq
 800ad96:	2300      	moveq	r3, #0
 800ad98:	f003 0301 	andne.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 81c9 	beq.w	800b134 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800ada2:	4b96      	ldr	r3, [pc, #600]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ada4:	429d      	cmp	r5, r3
 800ada6:	f000 81c5 	beq.w	800b134 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800adaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adae:	4b94      	ldr	r3, [pc, #592]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800adb0:	4894      	ldr	r0, [pc, #592]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adb2:	4995      	ldr	r1, [pc, #596]	; (800b008 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adb4:	429d      	cmp	r5, r3
 800adb6:	bf18      	it	ne
 800adb8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800adba:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adbc:	bf14      	ite	ne
 800adbe:	2301      	movne	r3, #1
 800adc0:	2300      	moveq	r3, #0
 800adc2:	4a92      	ldr	r2, [pc, #584]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800adc4:	4295      	cmp	r5, r2
 800adc6:	bf0c      	ite	eq
 800adc8:	2300      	moveq	r3, #0
 800adca:	f003 0301 	andne.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 81ad 	beq.w	800b12e <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800add4:	4b89      	ldr	r3, [pc, #548]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800add6:	429d      	cmp	r5, r3
 800add8:	f000 81a9 	beq.w	800b12e <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800addc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ade0:	4b87      	ldr	r3, [pc, #540]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800ade2:	4888      	ldr	r0, [pc, #544]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ade4:	4988      	ldr	r1, [pc, #544]	; (800b008 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ade6:	429d      	cmp	r5, r3
 800ade8:	bf18      	it	ne
 800adea:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800adec:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800adee:	bf14      	ite	ne
 800adf0:	2301      	movne	r3, #1
 800adf2:	2300      	moveq	r3, #0
 800adf4:	4a85      	ldr	r2, [pc, #532]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800adf6:	4295      	cmp	r5, r2
 800adf8:	bf0c      	ite	eq
 800adfa:	2300      	moveq	r3, #0
 800adfc:	f003 0301 	andne.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 8191 	beq.w	800b128 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800ae06:	4b7d      	ldr	r3, [pc, #500]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ae08:	429d      	cmp	r5, r3
 800ae0a:	f000 818d 	beq.w	800b128 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800ae0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae12:	4b7b      	ldr	r3, [pc, #492]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800ae14:	487b      	ldr	r0, [pc, #492]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae16:	497c      	ldr	r1, [pc, #496]	; (800b008 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae18:	429d      	cmp	r5, r3
 800ae1a:	bf18      	it	ne
 800ae1c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae1e:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae20:	bf14      	ite	ne
 800ae22:	2301      	movne	r3, #1
 800ae24:	2300      	moveq	r3, #0
 800ae26:	4a79      	ldr	r2, [pc, #484]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800ae28:	4295      	cmp	r5, r2
 800ae2a:	bf0c      	ite	eq
 800ae2c:	2300      	moveq	r3, #0
 800ae2e:	f003 0301 	andne.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 8174 	beq.w	800b120 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800ae38:	4b70      	ldr	r3, [pc, #448]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ae3a:	429d      	cmp	r5, r3
 800ae3c:	f000 8170 	beq.w	800b120 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800ae40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ae44:	e546      	b.n	800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae46:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ae4a:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800ae4e:	3218      	adds	r2, #24
 800ae50:	429d      	cmp	r5, r3
 800ae52:	bf18      	it	ne
 800ae54:	428d      	cmpne	r5, r1
 800ae56:	bf14      	ite	ne
 800ae58:	2301      	movne	r3, #1
 800ae5a:	2300      	moveq	r3, #0
 800ae5c:	4295      	cmp	r5, r2
 800ae5e:	bf0c      	ite	eq
 800ae60:	2300      	moveq	r3, #0
 800ae62:	f003 0301 	andne.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 816d 	beq.w	800b146 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800ae6c:	4b63      	ldr	r3, [pc, #396]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	f000 8169 	beq.w	800b146 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800ae74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800ae78:	e5d7      	b.n	800aa2a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae7a:	4b62      	ldr	r3, [pc, #392]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800ae7c:	4960      	ldr	r1, [pc, #384]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800ae7e:	4a63      	ldr	r2, [pc, #396]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800ae80:	429d      	cmp	r5, r3
 800ae82:	bf18      	it	ne
 800ae84:	428d      	cmpne	r5, r1
 800ae86:	bf14      	ite	ne
 800ae88:	2301      	movne	r3, #1
 800ae8a:	2300      	moveq	r3, #0
 800ae8c:	4295      	cmp	r5, r2
 800ae8e:	bf0c      	ite	eq
 800ae90:	2300      	moveq	r3, #0
 800ae92:	f003 0301 	andne.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 815b 	beq.w	800b152 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800ae9c:	4b57      	ldr	r3, [pc, #348]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800ae9e:	429d      	cmp	r5, r3
 800aea0:	f000 8157 	beq.w	800b152 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800aea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800aea8:	e5d7      	b.n	800aa5a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aeaa:	4b55      	ldr	r3, [pc, #340]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800aeac:	4955      	ldr	r1, [pc, #340]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800aeae:	4a57      	ldr	r2, [pc, #348]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800aeb0:	429d      	cmp	r5, r3
 800aeb2:	bf18      	it	ne
 800aeb4:	428d      	cmpne	r5, r1
 800aeb6:	bf14      	ite	ne
 800aeb8:	2301      	movne	r3, #1
 800aeba:	2300      	moveq	r3, #0
 800aebc:	4295      	cmp	r5, r2
 800aebe:	bf0c      	ite	eq
 800aec0:	2300      	moveq	r3, #0
 800aec2:	f003 0301 	andne.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8140 	beq.w	800b14c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800aecc:	4b4b      	ldr	r3, [pc, #300]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800aece:	429d      	cmp	r5, r3
 800aed0:	f000 813c 	beq.w	800b14c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800aed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aed8:	e5ed      	b.n	800aab6 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aeda:	4b49      	ldr	r3, [pc, #292]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800aedc:	4949      	ldr	r1, [pc, #292]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800aede:	4a4b      	ldr	r2, [pc, #300]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800aee0:	429d      	cmp	r5, r3
 800aee2:	bf18      	it	ne
 800aee4:	428d      	cmpne	r5, r1
 800aee6:	bf14      	ite	ne
 800aee8:	2301      	movne	r3, #1
 800aeea:	2300      	moveq	r3, #0
 800aeec:	4295      	cmp	r5, r2
 800aeee:	bf0c      	ite	eq
 800aef0:	2300      	moveq	r3, #0
 800aef2:	f003 0301 	andne.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 812e 	beq.w	800b158 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800aefc:	4b3f      	ldr	r3, [pc, #252]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800aefe:	429d      	cmp	r5, r3
 800af00:	f000 812a 	beq.w	800b158 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800af04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800af08:	e5be      	b.n	800aa88 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af0a:	4b3d      	ldr	r3, [pc, #244]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800af0c:	493d      	ldr	r1, [pc, #244]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800af0e:	4a3f      	ldr	r2, [pc, #252]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800af10:	429d      	cmp	r5, r3
 800af12:	bf18      	it	ne
 800af14:	428d      	cmpne	r5, r1
 800af16:	bf14      	ite	ne
 800af18:	2301      	movne	r3, #1
 800af1a:	2300      	moveq	r3, #0
 800af1c:	4295      	cmp	r5, r2
 800af1e:	bf0c      	ite	eq
 800af20:	2300      	moveq	r3, #0
 800af22:	f003 0301 	andne.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 810a 	beq.w	800b140 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800af2c:	4b33      	ldr	r3, [pc, #204]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af2e:	429d      	cmp	r5, r3
 800af30:	f000 8106 	beq.w	800b140 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800af34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af38:	e510      	b.n	800a95c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af3a:	3b48      	subs	r3, #72	; 0x48
 800af3c:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800af40:	3218      	adds	r2, #24
 800af42:	429d      	cmp	r5, r3
 800af44:	bf18      	it	ne
 800af46:	428d      	cmpne	r5, r1
 800af48:	bf14      	ite	ne
 800af4a:	2301      	movne	r3, #1
 800af4c:	2300      	moveq	r3, #0
 800af4e:	4295      	cmp	r5, r2
 800af50:	bf0c      	ite	eq
 800af52:	2300      	moveq	r3, #0
 800af54:	f003 0301 	andne.w	r3, r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 8112 	beq.w	800b182 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800af5e:	4b27      	ldr	r3, [pc, #156]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af60:	429d      	cmp	r5, r3
 800af62:	f000 810e 	beq.w	800b182 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800af66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800af6a:	e610      	b.n	800ab8e <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800af6e:	4925      	ldr	r1, [pc, #148]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800af70:	4a26      	ldr	r2, [pc, #152]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800af72:	429d      	cmp	r5, r3
 800af74:	bf18      	it	ne
 800af76:	428d      	cmpne	r5, r1
 800af78:	bf14      	ite	ne
 800af7a:	2301      	movne	r3, #1
 800af7c:	2300      	moveq	r3, #0
 800af7e:	4295      	cmp	r5, r2
 800af80:	bf0c      	ite	eq
 800af82:	2300      	moveq	r3, #0
 800af84:	f003 0301 	andne.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 80ee 	beq.w	800b16a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800af8e:	4b1b      	ldr	r3, [pc, #108]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800af90:	429d      	cmp	r5, r3
 800af92:	f000 80ea 	beq.w	800b16a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800af96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800af9a:	e610      	b.n	800abbe <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800af9c:	4b19      	ldr	r3, [pc, #100]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800af9e:	4918      	ldr	r1, [pc, #96]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afa0:	4a1a      	ldr	r2, [pc, #104]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800afa2:	429d      	cmp	r5, r3
 800afa4:	bf18      	it	ne
 800afa6:	428d      	cmpne	r5, r1
 800afa8:	bf14      	ite	ne
 800afaa:	2301      	movne	r3, #1
 800afac:	2300      	moveq	r3, #0
 800afae:	4295      	cmp	r5, r2
 800afb0:	bf0c      	ite	eq
 800afb2:	2300      	moveq	r3, #0
 800afb4:	f003 0301 	andne.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 80e8 	beq.w	800b18e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800afc0:	429d      	cmp	r5, r3
 800afc2:	f000 80e4 	beq.w	800b18e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800afc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800afca:	e66b      	b.n	800aca4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800afcc:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800afce:	490c      	ldr	r1, [pc, #48]	; (800b000 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afd0:	4a0e      	ldr	r2, [pc, #56]	; (800b00c <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800afd2:	429d      	cmp	r5, r3
 800afd4:	bf18      	it	ne
 800afd6:	428d      	cmpne	r5, r1
 800afd8:	bf14      	ite	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	2300      	moveq	r3, #0
 800afde:	4295      	cmp	r5, r2
 800afe0:	bf0c      	ite	eq
 800afe2:	2300      	moveq	r3, #0
 800afe4:	f003 0301 	andne.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80bb 	beq.w	800b164 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800afee:	4b03      	ldr	r3, [pc, #12]	; (800affc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800aff0:	429d      	cmp	r5, r3
 800aff2:	f000 80b7 	beq.w	800b164 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800aff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800affa:	e60e      	b.n	800ac1a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800affc:	400264a0 	.word	0x400264a0
 800b000:	40026040 	.word	0x40026040
 800b004:	40026440 	.word	0x40026440
 800b008:	40026400 	.word	0x40026400
 800b00c:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b010:	3b48      	subs	r3, #72	; 0x48
 800b012:	3118      	adds	r1, #24
 800b014:	3218      	adds	r2, #24
 800b016:	429d      	cmp	r5, r3
 800b018:	bf18      	it	ne
 800b01a:	428d      	cmpne	r5, r1
 800b01c:	bf14      	ite	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	2300      	moveq	r3, #0
 800b022:	4295      	cmp	r5, r2
 800b024:	bf0c      	ite	eq
 800b026:	2300      	moveq	r3, #0
 800b028:	f003 0301 	andne.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80ab 	beq.w	800b188 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b032:	4b5a      	ldr	r3, [pc, #360]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b034:	429d      	cmp	r5, r3
 800b036:	f000 80a7 	beq.w	800b188 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b03a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b03e:	e619      	b.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b040:	4b57      	ldr	r3, [pc, #348]	; (800b1a0 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b042:	4958      	ldr	r1, [pc, #352]	; (800b1a4 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b044:	4a58      	ldr	r2, [pc, #352]	; (800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b046:	429d      	cmp	r5, r3
 800b048:	bf18      	it	ne
 800b04a:	428d      	cmpne	r5, r1
 800b04c:	bf14      	ite	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	2300      	moveq	r3, #0
 800b052:	4295      	cmp	r5, r2
 800b054:	bf0c      	ite	eq
 800b056:	2300      	moveq	r3, #0
 800b058:	f003 0301 	andne.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 808a 	beq.w	800b176 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b062:	4b4e      	ldr	r3, [pc, #312]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b064:	429d      	cmp	r5, r3
 800b066:	f000 8086 	beq.w	800b176 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b06a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b06e:	e5bd      	b.n	800abec <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b070:	4b4c      	ldr	r3, [pc, #304]	; (800b1a4 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b072:	494b      	ldr	r1, [pc, #300]	; (800b1a0 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b074:	4a4c      	ldr	r2, [pc, #304]	; (800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b076:	429d      	cmp	r5, r3
 800b078:	bf18      	it	ne
 800b07a:	428d      	cmpne	r5, r1
 800b07c:	bf14      	ite	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	2300      	moveq	r3, #0
 800b082:	4295      	cmp	r5, r2
 800b084:	bf0c      	ite	eq
 800b086:	2300      	moveq	r3, #0
 800b088:	f003 0301 	andne.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 8081 	beq.w	800b194 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b092:	4b42      	ldr	r3, [pc, #264]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b094:	429d      	cmp	r5, r3
 800b096:	d07d      	beq.n	800b194 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b09c:	e630      	b.n	800ad00 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b09e:	4b40      	ldr	r3, [pc, #256]	; (800b1a0 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b0a0:	4940      	ldr	r1, [pc, #256]	; (800b1a4 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b0a2:	4a41      	ldr	r2, [pc, #260]	; (800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b0a4:	429d      	cmp	r5, r3
 800b0a6:	bf18      	it	ne
 800b0a8:	428d      	cmpne	r5, r1
 800b0aa:	bf14      	ite	ne
 800b0ac:	2301      	movne	r3, #1
 800b0ae:	2300      	moveq	r3, #0
 800b0b0:	4295      	cmp	r5, r2
 800b0b2:	bf0c      	ite	eq
 800b0b4:	2300      	moveq	r3, #0
 800b0b6:	f003 0301 	andne.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d058      	beq.n	800b170 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b0c0:	429d      	cmp	r5, r3
 800b0c2:	d055      	beq.n	800b170 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b0c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0c8:	e496      	b.n	800a9f8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b0ca:	4b35      	ldr	r3, [pc, #212]	; (800b1a0 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b0cc:	4935      	ldr	r1, [pc, #212]	; (800b1a4 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b0ce:	4a36      	ldr	r2, [pc, #216]	; (800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b0d0:	429d      	cmp	r5, r3
 800b0d2:	bf18      	it	ne
 800b0d4:	428d      	cmpne	r5, r1
 800b0d6:	bf14      	ite	ne
 800b0d8:	2301      	movne	r3, #1
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	4295      	cmp	r5, r2
 800b0de:	bf0c      	ite	eq
 800b0e0:	2300      	moveq	r3, #0
 800b0e2:	f003 0301 	andne.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d048      	beq.n	800b17c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b0ea:	4b2c      	ldr	r3, [pc, #176]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b0ec:	429d      	cmp	r5, r3
 800b0ee:	d045      	beq.n	800b17c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b0f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b0f4:	e5ed      	b.n	800acd2 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b0f6:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b0f8:	492a      	ldr	r1, [pc, #168]	; (800b1a4 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b0fa:	4a2b      	ldr	r2, [pc, #172]	; (800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b0fc:	429d      	cmp	r5, r3
 800b0fe:	bf18      	it	ne
 800b100:	428d      	cmpne	r5, r1
 800b102:	bf14      	ite	ne
 800b104:	2301      	movne	r3, #1
 800b106:	2300      	moveq	r3, #0
 800b108:	4295      	cmp	r5, r2
 800b10a:	bf0c      	ite	eq
 800b10c:	2300      	moveq	r3, #0
 800b10e:	f003 0301 	andne.w	r3, r3, #1
 800b112:	b323      	cbz	r3, 800b15e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b114:	4b21      	ldr	r3, [pc, #132]	; (800b19c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b116:	429d      	cmp	r5, r3
 800b118:	d021      	beq.n	800b15e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b11a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b11e:	e44b      	b.n	800a9b8 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800b120:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b124:	f7ff bbd6 	b.w	800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b128:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b12c:	e671      	b.n	800ae12 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b12e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b132:	e655      	b.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b138:	e639      	b.n	800adae <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b13a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b13e:	e61c      	b.n	800ad7a <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b144:	e40a      	b.n	800a95c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b14a:	e46e      	b.n	800aa2a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b14c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b150:	e4b1      	b.n	800aab6 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b156:	e480      	b.n	800aa5a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b158:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b15c:	e494      	b.n	800aa88 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b15e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b162:	e429      	b.n	800a9b8 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b164:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b168:	e557      	b.n	800ac1a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b16a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b16e:	e526      	b.n	800abbe <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b174:	e440      	b.n	800a9f8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b17a:	e537      	b.n	800abec <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800b17c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b180:	e5a7      	b.n	800acd2 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b186:	e502      	b.n	800ab8e <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800b188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b18c:	e572      	b.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b18e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b192:	e587      	b.n	800aca4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b194:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b198:	e5b2      	b.n	800ad00 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800b19a:	bf00      	nop
 800b19c:	400264a0 	.word	0x400264a0
 800b1a0:	40026040 	.word	0x40026040
 800b1a4:	40026440 	.word	0x40026440
 800b1a8:	400260a0 	.word	0x400260a0

0800b1ac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	d15b      	bne.n	800b26c <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800b1b4:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800b1b8:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b1ba:	69e3      	ldr	r3, [r4, #28]
 800b1bc:	b90b      	cbnz	r3, 800b1c2 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800b1be:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800b1c2:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1c4:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b1c6:	4b2e      	ldr	r3, [pc, #184]	; (800b280 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800b1c8:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b1ca:	402b      	ands	r3, r5
 800b1cc:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b1ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b1d2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b1d4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1d6:	f7fd ffbb 	bl	8009150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b1da:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b1dc:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1de:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800b1e0:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b1e2:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b1e4:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800b1e6:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1e8:	f7fd ffb2 	bl	8009150 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b1ec:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b1ee:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b1f2:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800b1f4:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b1f6:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b1f8:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800b1fa:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b1fc:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b1fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b202:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800b204:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b206:	f7fd ffa3 	bl	8009150 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b20a:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b20c:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800b20e:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b210:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800b212:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b214:	f7fd ff9c 	bl	8009150 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b218:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b21a:	491a      	ldr	r1, [pc, #104]	; (800b284 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b21c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800b220:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b222:	4a19      	ldr	r2, [pc, #100]	; (800b288 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b224:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b226:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b228:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b22a:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b22c:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800b22e:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b230:	f7fd ff8e 	bl	8009150 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b234:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b236:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b238:	4a14      	ldr	r2, [pc, #80]	; (800b28c <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800b23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23e:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b240:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800b242:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b244:	f7fd ff84 	bl	8009150 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b248:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b24a:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800b24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b250:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800b252:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b254:	d103      	bne.n	800b25e <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b256:	69d9      	ldr	r1, [r3, #28]
 800b258:	4a0d      	ldr	r2, [pc, #52]	; (800b290 <ETH_MACDMAConfig+0xe4>)
 800b25a:	430a      	orrs	r2, r1
 800b25c:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b25e:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b260:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b262:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b264:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b266:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b268:	645a      	str	r2, [r3, #68]	; 0x44
}
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800b270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b274:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800b278:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800b27c:	e79d      	b.n	800b1ba <ETH_MACDMAConfig+0xe>
 800b27e:	bf00      	nop
 800b280:	ff20810f 	.word	0xff20810f
 800b284:	f8de3f23 	.word	0xf8de3f23
 800b288:	02200004 	.word	0x02200004
 800b28c:	02c12080 	.word	0x02c12080
 800b290:	00010040 	.word	0x00010040
 800b294:	40028000 	.word	0x40028000

0800b298 <HAL_ETH_DMATxDescListInit>:
{
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800b29e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b2a2:	2801      	cmp	r0, #1
 800b2a4:	d03b      	beq.n	800b31e <HAL_ETH_DMATxDescListInit+0x86>
 800b2a6:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b2aa:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800b2ac:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800b2b0:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b2b4:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800b2b8:	b31b      	cbz	r3, 800b302 <HAL_ETH_DMATxDescListInit+0x6a>
 800b2ba:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b2bc:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800b2c0:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b2c4:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b2c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800b2ca:	f10c 36ff 	add.w	r6, ip, #4294967295
 800b2ce:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b2d2:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b2d4:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b2d6:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	d103      	bne.n	800b2e6 <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b2de:	6817      	ldr	r7, [r2, #0]
 800b2e0:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800b2e4:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800b2e6:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800b2e8:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800b2ec:	bf34      	ite	cc
 800b2ee:	4675      	movcc	r5, lr
 800b2f0:	f102 0e20 	addcs.w	lr, r2, #32
 800b2f4:	4563      	cmp	r3, ip
 800b2f6:	60d5      	str	r5, [r2, #12]
 800b2f8:	f10c 0501 	add.w	r5, ip, #1
 800b2fc:	4672      	mov	r2, lr
 800b2fe:	46ac      	mov	ip, r5
 800b300:	d8e3      	bhi.n	800b2ca <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b302:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800b306:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b308:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b30e:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800b310:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800b314:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b316:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800b31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800b31e:	2002      	movs	r0, #2
}
 800b320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b324 <HAL_ETH_DMARxDescListInit>:
{
 800b324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800b32a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b32e:	2801      	cmp	r0, #1
 800b330:	d033      	beq.n	800b39a <HAL_ETH_DMARxDescListInit+0x76>
 800b332:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b336:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800b338:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800b33a:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b33e:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800b342:	b1eb      	cbz	r3, 800b380 <HAL_ETH_DMARxDescListInit+0x5c>
 800b344:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800b346:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b34a:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b34c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b350:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800b354:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b358:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b35a:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800b35c:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800b360:	45c6      	cmp	lr, r8
 800b362:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b366:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b368:	bf34      	ite	cc
 800b36a:	4675      	movcc	r5, lr
 800b36c:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800b370:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b372:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800b374:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800b376:	f10c 0501 	add.w	r5, ip, #1
 800b37a:	4672      	mov	r2, lr
 800b37c:	46ac      	mov	ip, r5
 800b37e:	d8e9      	bhi.n	800b354 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b380:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800b382:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b384:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b38a:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800b38c:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800b390:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b392:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800b396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800b39a:	2002      	movs	r0, #2
}
 800b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3a0 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800b3a0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d078      	beq.n	800b49a <HAL_ETH_TransmitFrame+0xfa>
 800b3a8:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800b3b0:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b3b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	d03c      	beq.n	800b436 <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b3bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	db60      	blt.n	800b486 <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b3c4:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800b3c8:	4281      	cmp	r1, r0
{
 800b3ca:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b3cc:	d93c      	bls.n	800b448 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b3ce:	4c34      	ldr	r4, [pc, #208]	; (800b4a0 <HAL_ETH_TransmitFrame+0x100>)
 800b3d0:	fba4 4c01 	umull	r4, ip, r4, r1
 800b3d4:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b3d8:	fb00 101c 	mls	r0, r0, ip, r1
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d030      	beq.n	800b442 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800b3e0:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b3e4:	482f      	ldr	r0, [pc, #188]	; (800b4a4 <HAL_ETH_TransmitFrame+0x104>)
 800b3e6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800b3ea:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b3ec:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b3f0:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800b3f4:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b3f8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800b3fc:	e00f      	b.n	800b41e <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800b3fe:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b400:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800b402:	d104      	bne.n	800b40e <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b404:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b406:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b408:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b40c:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b40e:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800b410:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b412:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800b416:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b418:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b41a:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800b41c:	d03b      	beq.n	800b496 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b41e:	6818      	ldr	r0, [r3, #0]
 800b420:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800b424:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800b426:	2c00      	cmp	r4, #0
 800b428:	d1e9      	bne.n	800b3fe <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b42a:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b42c:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b42e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800b432:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800b434:	e7eb      	b.n	800b40e <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800b436:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800b438:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b43c:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800b440:	4770      	bx	lr
  if (bufcount == 1)
 800b442:	f1bc 0f01 	cmp.w	ip, #1
 800b446:	d1cd      	bne.n	800b3e4 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b448:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b44a:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b44e:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b450:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b454:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b456:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b458:	6819      	ldr	r1, [r3, #0]
 800b45a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b45e:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b460:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b468:	6959      	ldr	r1, [r3, #20]
 800b46a:	0749      	lsls	r1, r1, #29
 800b46c:	d503      	bpl.n	800b476 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b46e:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800b470:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b472:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800b474:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800b476:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800b478:	2101      	movs	r1, #1
  return HAL_OK;
 800b47a:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b47c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b480:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800b484:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b486:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800b488:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b48a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b48c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b490:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800b494:	4770      	bx	lr
 800b496:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b498:	e7e3      	b.n	800b462 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800b49a:	2002      	movs	r0, #2
}
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	ac02b00b 	.word	0xac02b00b
 800b4a4:	fffffa0c 	.word	0xfffffa0c

0800b4a8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800b4a8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d02f      	beq.n	800b510 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800b4b0:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b4b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b4b4:	4602      	mov	r2, r0
{
 800b4b6:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800b4b8:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b4ba:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800b4be:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	db15      	blt.n	800b4f4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800b4c8:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b4ca:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800b4cc:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b4ce:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b4d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b4d6:	d016      	beq.n	800b506 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b4d8:	6819      	ldr	r1, [r3, #0]
 800b4da:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800b4de:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b4e0:	d118      	bne.n	800b514 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b4e2:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800b4e4:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b4e6:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800b4e8:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b4ea:	6819      	ldr	r1, [r3, #0]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	db01      	blt.n	800b4f4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800b4f0:	2804      	cmp	r0, #4
 800b4f2:	d1ea      	bne.n	800b4ca <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800b4f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800b4f6:	2100      	movs	r1, #0
  return HAL_ERROR;
 800b4f8:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b4fa:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b4fe:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800b502:	bc30      	pop	{r4, r5}
 800b504:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b506:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b508:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800b50a:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b50c:	6293      	str	r3, [r2, #40]	; 0x28
 800b50e:	e7ec      	b.n	800b4ea <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800b510:	2002      	movs	r0, #2
}
 800b512:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800b514:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800b516:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b518:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800b51a:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b51c:	d011      	beq.n	800b542 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b51e:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b520:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800b522:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b524:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b526:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b528:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800b52c:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b52e:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b530:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b532:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800b534:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800b538:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b53a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800b53c:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800b540:	e7df      	b.n	800b502 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b542:	4618      	mov	r0, r3
 800b544:	6313      	str	r3, [r2, #48]	; 0x30
 800b546:	e7eb      	b.n	800b520 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800b548 <HAL_ETH_TxCpltCallback>:
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <HAL_ETH_ErrorCallback>:
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop

0800b550 <HAL_ETH_IRQHandler>:
{
 800b550:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b552:	6803      	ldr	r3, [r0, #0]
{
 800b554:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b55a:	695d      	ldr	r5, [r3, #20]
 800b55c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800b560:	d125      	bne.n	800b5ae <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800b562:	695a      	ldr	r2, [r3, #20]
 800b564:	07d2      	lsls	r2, r2, #31
 800b566:	d416      	bmi.n	800b596 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800b568:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b56c:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	041b      	lsls	r3, r3, #16
 800b572:	d400      	bmi.n	800b576 <HAL_ETH_IRQHandler+0x26>
}
 800b574:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff ffe8 	bl	800b54c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800b582:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b588:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b58a:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b58c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b590:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800b594:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800b596:	f7ff ffd7 	bl	800b548 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a2:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b5a4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b5a8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b5ac:	e7dc      	b.n	800b568 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800b5ae:	f009 ff4f 	bl	8015450 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800b5b6:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b5b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b5bc:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b5be:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b5c0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b5c4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b5c8:	e7ce      	b.n	800b568 <HAL_ETH_IRQHandler+0x18>
 800b5ca:	bf00      	nop

0800b5cc <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b5cc:	8a03      	ldrh	r3, [r0, #16]
 800b5ce:	2b20      	cmp	r3, #32
{
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	460e      	mov	r6, r1
 800b5d6:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b5d8:	d834      	bhi.n	800b644 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b5da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b5de:	2b82      	cmp	r3, #130	; 0x82
 800b5e0:	d039      	beq.n	800b656 <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b5e2:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800b5e4:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b5e6:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b5e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b5ec:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b5ee:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b5f2:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b5f4:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b5f6:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b5fa:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b600:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800b604:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b606:	f7fd fd9d 	bl	8009144 <HAL_GetTick>
 800b60a:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b60c:	e004      	b.n	800b618 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800b60e:	6821      	ldr	r1, [r4, #0]
 800b610:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b612:	f013 0301 	ands.w	r3, r3, #1
 800b616:	d00d      	beq.n	800b634 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b618:	f7fd fd94 	bl	8009144 <HAL_GetTick>
 800b61c:	1b83      	subs	r3, r0, r6
 800b61e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b622:	d3f4      	bcc.n	800b60e <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800b624:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b626:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b628:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b62a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b632:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b634:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b636:	2101      	movs	r1, #1
  return HAL_OK;
 800b638:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b63a:	b292      	uxth	r2, r2
 800b63c:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800b63e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800b642:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b644:	f240 5116 	movw	r1, #1302	; 0x516
 800b648:	4804      	ldr	r0, [pc, #16]	; (800b65c <HAL_ETH_ReadPHYRegister+0x90>)
 800b64a:	f7fa f911 	bl	8005870 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b64e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b652:	2b82      	cmp	r3, #130	; 0x82
 800b654:	d1c5      	bne.n	800b5e2 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800b656:	2002      	movs	r0, #2
}
 800b658:	bd70      	pop	{r4, r5, r6, pc}
 800b65a:	bf00      	nop
 800b65c:	0802de44 	.word	0x0802de44

0800b660 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b660:	8a03      	ldrh	r3, [r0, #16]
 800b662:	2b20      	cmp	r3, #32
{
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b66c:	d833      	bhi.n	800b6d6 <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b66e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b672:	2b42      	cmp	r3, #66	; 0x42
 800b674:	d038      	beq.n	800b6e8 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b676:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800b678:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b67a:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b67c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b680:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b682:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b684:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b688:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b68a:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b68c:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b68e:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b692:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b694:	430b      	orrs	r3, r1
 800b696:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b698:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800b69c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b69e:	f7fd fd51 	bl	8009144 <HAL_GetTick>
 800b6a2:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b6a4:	e004      	b.n	800b6b0 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b6aa:	f013 0301 	ands.w	r3, r3, #1
 800b6ae:	d00d      	beq.n	800b6cc <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b6b0:	f7fd fd48 	bl	8009144 <HAL_GetTick>
 800b6b4:	1b43      	subs	r3, r0, r5
 800b6b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ba:	d3f4      	bcc.n	800b6a6 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800b6bc:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b6be:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b6c0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b6c2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b6c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800b6cc:	2201      	movs	r2, #1
  return HAL_OK; 
 800b6ce:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b6d0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b6d6:	f240 515e 	movw	r1, #1374	; 0x55e
 800b6da:	4804      	ldr	r0, [pc, #16]	; (800b6ec <HAL_ETH_WritePHYRegister+0x8c>)
 800b6dc:	f7fa f8c8 	bl	8005870 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b6e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b6e4:	2b42      	cmp	r3, #66	; 0x42
 800b6e6:	d1c6      	bne.n	800b676 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800b6e8:	2002      	movs	r0, #2
}
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	0802de44 	.word	0x0802de44

0800b6f0 <HAL_ETH_Init>:
{
 800b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800b6f2:	2300      	movs	r3, #0
{
 800b6f4:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800b6f6:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	f000 80f5 	beq.w	800b8e8 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800b6fe:	6843      	ldr	r3, [r0, #4]
 800b700:	4604      	mov	r4, r0
 800b702:	2b01      	cmp	r3, #1
 800b704:	f200 809c 	bhi.w	800b840 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b708:	69a3      	ldr	r3, [r4, #24]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	f200 808f 	bhi.w	800b82e <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b710:	69e3      	ldr	r3, [r4, #28]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d873      	bhi.n	800b7fe <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b716:	6a23      	ldr	r3, [r4, #32]
 800b718:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b71c:	d177      	bne.n	800b80e <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b71e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b722:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b726:	2b00      	cmp	r3, #0
 800b728:	d07b      	beq.n	800b822 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b72a:	4b91      	ldr	r3, [pc, #580]	; (800b970 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b72c:	4a91      	ldr	r2, [pc, #580]	; (800b974 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b72e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b730:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b734:	6459      	str	r1, [r3, #68]	; 0x44
 800b736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b740:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b742:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b744:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b74c:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b74e:	6851      	ldr	r1, [r2, #4]
 800b750:	6a20      	ldr	r0, [r4, #32]
 800b752:	4301      	orrs	r1, r0
 800b754:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	f042 0201 	orr.w	r2, r2, #1
 800b75c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b75e:	f7fd fcf1 	bl	8009144 <HAL_GetTick>
 800b762:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b764:	e005      	b.n	800b772 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b766:	f7fd fced 	bl	8009144 <HAL_GetTick>
 800b76a:	1b43      	subs	r3, r0, r5
 800b76c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b770:	d86f      	bhi.n	800b852 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800b778:	6812      	ldr	r2, [r2, #0]
 800b77a:	07d0      	lsls	r0, r2, #31
 800b77c:	d4f3      	bmi.n	800b766 <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800b77e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800b780:	f003 faac 	bl	800ecdc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b784:	4b7c      	ldr	r3, [pc, #496]	; (800b978 <HAL_ETH_Init+0x288>)
 800b786:	4a7d      	ldr	r2, [pc, #500]	; (800b97c <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800b788:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b78c:	4403      	add	r3, r0
 800b78e:	4293      	cmp	r3, r2
 800b790:	d274      	bcs.n	800b87c <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b792:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b796:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b798:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b79c:	2100      	movs	r1, #0
 800b79e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b7a0:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b7a2:	f7ff ff5d 	bl	800b660 <HAL_ETH_WritePHYRegister>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d15c      	bne.n	800b866 <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800b7ac:	20ff      	movs	r0, #255	; 0xff
 800b7ae:	f7fd fccf 	bl	8009150 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b7b2:	6863      	ldr	r3, [r4, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d178      	bne.n	800b8aa <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800b7b8:	68a3      	ldr	r3, [r4, #8]
 800b7ba:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b7be:	f040 809e 	bne.w	800b8fe <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800b7c2:	68e3      	ldr	r3, [r4, #12]
 800b7c4:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800b7c8:	f040 8092 	bne.w	800b8f0 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800b7cc:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800b7d8:	b292      	uxth	r2, r2
 800b7da:	f7ff ff41 	bl	800b660 <HAL_ETH_WritePHYRegister>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d141      	bne.n	800b866 <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800b7e2:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b7e6:	f7fd fcb3 	bl	8009150 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f7ff fcdd 	bl	800b1ac <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800b7f2:	2301      	movs	r3, #1
}
 800b7f4:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800b7f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b7fa:	b003      	add	sp, #12
 800b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b7fe:	21e0      	movs	r1, #224	; 0xe0
 800b800:	485f      	ldr	r0, [pc, #380]	; (800b980 <HAL_ETH_Init+0x290>)
 800b802:	f7fa f835 	bl	8005870 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b806:	6a23      	ldr	r3, [r4, #32]
 800b808:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b80c:	d087      	beq.n	800b71e <HAL_ETH_Init+0x2e>
 800b80e:	21e1      	movs	r1, #225	; 0xe1
 800b810:	485b      	ldr	r0, [pc, #364]	; (800b980 <HAL_ETH_Init+0x290>)
 800b812:	f7fa f82d 	bl	8005870 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b816:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b81a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d183      	bne.n	800b72a <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800b822:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800b824:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800b828:	f009 fd84 	bl	8015334 <HAL_ETH_MspInit>
 800b82c:	e77d      	b.n	800b72a <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b82e:	21df      	movs	r1, #223	; 0xdf
 800b830:	4853      	ldr	r0, [pc, #332]	; (800b980 <HAL_ETH_Init+0x290>)
 800b832:	f7fa f81d 	bl	8005870 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b836:	69e3      	ldr	r3, [r4, #28]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	f67f af6c 	bls.w	800b716 <HAL_ETH_Init+0x26>
 800b83e:	e7de      	b.n	800b7fe <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800b840:	21de      	movs	r1, #222	; 0xde
 800b842:	484f      	ldr	r0, [pc, #316]	; (800b980 <HAL_ETH_Init+0x290>)
 800b844:	f7fa f814 	bl	8005870 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b848:	69a3      	ldr	r3, [r4, #24]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	f67f af60 	bls.w	800b710 <HAL_ETH_Init+0x20>
 800b850:	e7ed      	b.n	800b82e <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b852:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800b854:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800b856:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b858:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b85c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800b860:	4628      	mov	r0, r5
 800b862:	b003      	add	sp, #12
 800b864:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800b866:	4620      	mov	r0, r4
 800b868:	2101      	movs	r1, #1
 800b86a:	f7ff fc9f 	bl	800b1ac <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800b86e:	2301      	movs	r3, #1
      return HAL_ERROR;
 800b870:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800b872:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b876:	4628      	mov	r0, r5
 800b878:	b003      	add	sp, #12
 800b87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800b87c:	4b41      	ldr	r3, [pc, #260]	; (800b984 <HAL_ETH_Init+0x294>)
 800b87e:	4a42      	ldr	r2, [pc, #264]	; (800b988 <HAL_ETH_Init+0x298>)
 800b880:	4403      	add	r3, r0
 800b882:	4293      	cmp	r3, r2
 800b884:	d90e      	bls.n	800b8a4 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800b886:	4b41      	ldr	r3, [pc, #260]	; (800b98c <HAL_ETH_Init+0x29c>)
 800b888:	4a41      	ldr	r2, [pc, #260]	; (800b990 <HAL_ETH_Init+0x2a0>)
 800b88a:	4403      	add	r3, r0
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d382      	bcc.n	800b796 <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800b890:	4b40      	ldr	r3, [pc, #256]	; (800b994 <HAL_ETH_Init+0x2a4>)
 800b892:	4a41      	ldr	r2, [pc, #260]	; (800b998 <HAL_ETH_Init+0x2a8>)
 800b894:	4403      	add	r3, r0
 800b896:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b898:	bf94      	ite	ls
 800b89a:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800b89e:	f045 0510 	orrhi.w	r5, r5, #16
 800b8a2:	e778      	b.n	800b796 <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b8a4:	f045 050c 	orr.w	r5, r5, #12
 800b8a8:	e775      	b.n	800b796 <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800b8aa:	f7fd fc4b 	bl	8009144 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b8ae:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	e002      	b.n	800b8bc <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	0759      	lsls	r1, r3, #29
 800b8ba:	d426      	bmi.n	800b90a <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b8bc:	466a      	mov	r2, sp
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7ff fe83 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b8c6:	f7fd fc3d 	bl	8009144 <HAL_GetTick>
 800b8ca:	1b80      	subs	r0, r0, r6
 800b8cc:	42b8      	cmp	r0, r7
 800b8ce:	d9f2      	bls.n	800b8b6 <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff fc6a 	bl	800b1ac <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800b8d8:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800b8da:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800b8dc:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800b8de:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800b8e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800b8e6:	e7bb      	b.n	800b860 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800b8e8:	2501      	movs	r5, #1
}
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800b8f0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800b8f4:	4822      	ldr	r0, [pc, #136]	; (800b980 <HAL_ETH_Init+0x290>)
 800b8f6:	f7f9 ffbb 	bl	8005870 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	e766      	b.n	800b7cc <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800b8fe:	f240 11c5 	movw	r1, #453	; 0x1c5
 800b902:	481f      	ldr	r0, [pc, #124]	; (800b980 <HAL_ETH_Init+0x290>)
 800b904:	f7f9 ffb4 	bl	8005870 <assert_failed>
 800b908:	e75b      	b.n	800b7c2 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800b90a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b90e:	2100      	movs	r1, #0
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff fea5 	bl	800b660 <HAL_ETH_WritePHYRegister>
 800b916:	2800      	cmp	r0, #0
 800b918:	d1a5      	bne.n	800b866 <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800b91a:	f7fd fc13 	bl	8009144 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b91e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800b922:	4606      	mov	r6, r0
 800b924:	e002      	b.n	800b92c <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	069a      	lsls	r2, r3, #26
 800b92a:	d40a      	bmi.n	800b942 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b92c:	466a      	mov	r2, sp
 800b92e:	2101      	movs	r1, #1
 800b930:	4620      	mov	r0, r4
 800b932:	f7ff fe4b 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800b936:	f7fd fc05 	bl	8009144 <HAL_GetTick>
 800b93a:	1b80      	subs	r0, r0, r6
 800b93c:	42b8      	cmp	r0, r7
 800b93e:	d9f2      	bls.n	800b926 <HAL_ETH_Init+0x236>
 800b940:	e7c6      	b.n	800b8d0 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800b942:	466a      	mov	r2, sp
 800b944:	2110      	movs	r1, #16
 800b946:	4620      	mov	r0, r4
 800b948:	f7ff fe40 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d18a      	bne.n	800b866 <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b950:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800b952:	f013 0204 	ands.w	r2, r3, #4
 800b956:	bf18      	it	ne
 800b958:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800b95c:	079b      	lsls	r3, r3, #30
 800b95e:	60e2      	str	r2, [r4, #12]
 800b960:	d501      	bpl.n	800b966 <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800b962:	60a0      	str	r0, [r4, #8]
 800b964:	e741      	b.n	800b7ea <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800b966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b96a:	60a3      	str	r3, [r4, #8]
 800b96c:	e73d      	b.n	800b7ea <HAL_ETH_Init+0xfa>
 800b96e:	bf00      	nop
 800b970:	40023800 	.word	0x40023800
 800b974:	40013800 	.word	0x40013800
 800b978:	feced300 	.word	0xfeced300
 800b97c:	00e4e1c0 	.word	0x00e4e1c0
 800b980:	0802de44 	.word	0x0802de44
 800b984:	fde9f140 	.word	0xfde9f140
 800b988:	017d783f 	.word	0x017d783f
 800b98c:	fc6c7900 	.word	0xfc6c7900
 800b990:	02625a00 	.word	0x02625a00
 800b994:	fa0a1f00 	.word	0xfa0a1f00
 800b998:	02faf07f 	.word	0x02faf07f

0800b99c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800b99c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d044      	beq.n	800ba2e <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b9a4:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800b9a6:	2202      	movs	r2, #2
{  
 800b9a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800b9aa:	2601      	movs	r6, #1
{  
 800b9ac:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800b9ae:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800b9b0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800b9b4:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800b9b8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800b9ba:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9bc:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	f042 0208 	orr.w	r2, r2, #8
 800b9c4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9ca:	f7fd fbc1 	bl	8009150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b9ce:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9d0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800b9d6:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	f042 0204 	orr.w	r2, r2, #4
 800b9de:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9e4:	f7fd fbb4 	bl	8009150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800b9e8:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b9ea:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800b9f4:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b9f6:	699a      	ldr	r2, [r3, #24]
 800b9f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9fc:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba02:	f7fd fba5 	bl	8009150 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800ba06:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800ba08:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800ba0a:	9a01      	ldr	r2, [sp, #4]
 800ba0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba10:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800ba12:	699a      	ldr	r2, [r3, #24]
 800ba14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba18:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800ba1a:	699a      	ldr	r2, [r3, #24]
 800ba1c:	f042 0202 	orr.w	r2, r2, #2
 800ba20:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800ba22:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800ba26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800ba2a:	b004      	add	sp, #16
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800ba2e:	2002      	movs	r0, #2
}
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop

0800ba34 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800ba34:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d046      	beq.n	800baca <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800ba3c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800ba3e:	2102      	movs	r1, #2
{  
 800ba40:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800ba42:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800ba46:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800ba48:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800ba4c:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800ba4e:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800ba52:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800ba54:	6991      	ldr	r1, [r2, #24]
 800ba56:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba58:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800ba5a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800ba5e:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800ba60:	6991      	ldr	r1, [r2, #24]
 800ba62:	f021 0102 	bic.w	r1, r1, #2
 800ba66:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800ba68:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	f022 0204 	bic.w	r2, r2, #4
 800ba70:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba76:	f7fd fb6b 	bl	8009150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800ba7a:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba7c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800ba82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800ba86:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ba8e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba94:	f7fd fb5c 	bl	8009150 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800ba98:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba9a:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800ba9c:	9902      	ldr	r1, [sp, #8]
 800ba9e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800baa2:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800baa4:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	f022 0208 	bic.w	r2, r2, #8
 800baac:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bab2:	f7fd fb4d 	bl	8009150 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bab6:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800bab8:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800babe:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bac2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bac6:	b004      	add	sp, #16
 800bac8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800baca:	2002      	movs	r0, #2
}
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop

0800bad0 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800bad0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	f000 8249 	beq.w	800bf6c <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bada:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800badc:	2202      	movs	r2, #2
{
 800bade:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bae0:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bae4:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800bae6:	f04f 0101 	mov.w	r1, #1
 800baea:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800baec:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800baf0:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800baf4:	f040 8207 	bne.w	800bf06 <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800baf8:	68eb      	ldr	r3, [r5, #12]
 800bafa:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bafe:	f040 8114 	bne.w	800bd2a <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800bb02:	2c00      	cmp	r4, #0
 800bb04:	f000 8119 	beq.w	800bd3a <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800bb0e:	f040 8139 	bne.w	800bd84 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bb18:	f040 816b 	bne.w	800bdf2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bb1c:	68a3      	ldr	r3, [r4, #8]
 800bb1e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800bb22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb26:	d002      	beq.n	800bb2e <HAL_ETH_ConfigMAC+0x5e>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f040 8221 	bne.w	800bf70 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bb2e:	68e3      	ldr	r3, [r4, #12]
 800bb30:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bb34:	f040 8152 	bne.w	800bddc <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bb3e:	f040 8142 	bne.w	800bdc6 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bb42:	6963      	ldr	r3, [r4, #20]
 800bb44:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bb48:	f040 8132 	bne.w	800bdb0 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bb4c:	69a3      	ldr	r3, [r4, #24]
 800bb4e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bb52:	f040 8122 	bne.w	800bd9a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bb56:	69e3      	ldr	r3, [r4, #28]
 800bb58:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bb5c:	f040 81a3 	bne.w	800bea6 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800bb60:	6a23      	ldr	r3, [r4, #32]
 800bb62:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bb66:	f040 818e 	bne.w	800be86 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800bb6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb6c:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800bb70:	f040 8193 	bne.w	800be9a <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800bb74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb76:	f033 0310 	bics.w	r3, r3, #16
 800bb7a:	f040 8179 	bne.w	800be70 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800bb7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb80:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	f040 819a 	bne.w	800bebc <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bb88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb8a:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800bb8e:	d003      	beq.n	800bb98 <HAL_ETH_ConfigMAC+0xc8>
 800bb90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb94:	f040 81d8 	bne.w	800bf48 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bb98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb9e:	2a40      	cmp	r2, #64	; 0x40
 800bba0:	d002      	beq.n	800bba8 <HAL_ETH_ConfigMAC+0xd8>
 800bba2:	2b80      	cmp	r3, #128	; 0x80
 800bba4:	f040 81ba 	bne.w	800bf1c <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbaa:	f033 0320 	bics.w	r3, r3, #32
 800bbae:	f040 80de 	bne.w	800bd6e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bbb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbb4:	f033 0308 	bics.w	r3, r3, #8
 800bbb8:	f040 80cf 	bne.w	800bd5a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bbbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	f200 80a5 	bhi.w	800bd0e <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bbc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bbc6:	f240 4204 	movw	r2, #1028	; 0x404
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	bf18      	it	ne
 800bbce:	2b10      	cmpne	r3, #16
 800bbd0:	d003      	beq.n	800bbda <HAL_ETH_ConfigMAC+0x10a>
 800bbd2:	f033 0304 	bics.w	r3, r3, #4
 800bbd6:	f040 81c3 	bne.w	800bf60 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800bbda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bbdc:	f033 0202 	bics.w	r2, r3, #2
 800bbe0:	d004      	beq.n	800bbec <HAL_ETH_ConfigMAC+0x11c>
 800bbe2:	f240 4202 	movw	r2, #1026	; 0x402
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	f040 81a3 	bne.w	800bf32 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800bbec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bbee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf2:	f080 816e 	bcs.w	800bed2 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800bbf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbf8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bbfc:	f040 8173 	bne.w	800bee6 <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800bc00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc02:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bc06:	f040 8178 	bne.w	800befa <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800bc0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bc0c:	f033 0308 	bics.w	r3, r3, #8
 800bc10:	f040 8123 	bne.w	800be5a <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800bc14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc16:	f033 0304 	bics.w	r3, r3, #4
 800bc1a:	f040 8113 	bne.w	800be44 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800bc1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bc20:	f033 0302 	bics.w	r3, r3, #2
 800bc24:	f040 8103 	bne.w	800be2e <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800bc28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc2a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bc2e:	f040 80f3 	bne.w	800be18 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800bc32:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc38:	f080 80e8 	bcs.w	800be0c <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800bc3c:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800bc3e:	49b5      	ldr	r1, [pc, #724]	; (800bf14 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800bc40:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800bc42:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800bc44:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800bc46:	6860      	ldr	r0, [r4, #4]
 800bc48:	4303      	orrs	r3, r0
 800bc4a:	68a0      	ldr	r0, [r4, #8]
 800bc4c:	4303      	orrs	r3, r0
 800bc4e:	68e0      	ldr	r0, [r4, #12]
 800bc50:	4303      	orrs	r3, r0
 800bc52:	6920      	ldr	r0, [r4, #16]
 800bc54:	4303      	orrs	r3, r0
 800bc56:	6960      	ldr	r0, [r4, #20]
 800bc58:	4303      	orrs	r3, r0
 800bc5a:	69a0      	ldr	r0, [r4, #24]
 800bc5c:	4303      	orrs	r3, r0
 800bc5e:	69e0      	ldr	r0, [r4, #28]
 800bc60:	4303      	orrs	r3, r0
 800bc62:	6a20      	ldr	r0, [r4, #32]
 800bc64:	4303      	orrs	r3, r0
 800bc66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc68:	4303      	orrs	r3, r0
 800bc6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800bc6c:	4303      	orrs	r3, r0
 800bc6e:	68a8      	ldr	r0, [r5, #8]
 800bc70:	4303      	orrs	r3, r0
 800bc72:	68e8      	ldr	r0, [r5, #12]
 800bc74:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc76:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800bc78:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bc7a:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bc7c:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc7e:	f7fd fa67 	bl	8009150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800bc82:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc84:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800bc86:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800bc8a:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800bc8c:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800bc8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc90:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800bc92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc94:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800bc96:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc98:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800bc9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc9c:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800bc9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bca0:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800bca2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bca4:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800bca6:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800bca8:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcaa:	f7fd fa51 	bl	8009150 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800bcae:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800bcb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800bcb2:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800bcb4:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800bcb6:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800bcb8:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800bcbc:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800bcbe:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800bcc0:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800bcc2:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800bcc6:	4303      	orrs	r3, r0
 800bcc8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bcca:	4303      	orrs	r3, r0
 800bccc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bcce:	4303      	orrs	r3, r0
 800bcd0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800bcd2:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800bcd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800bcd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcda:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800bcdc:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800bcde:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800bce0:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bce2:	f7fd fa35 	bl	8009150 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800bce6:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bce8:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bcea:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800bcee:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800bcf4:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcf6:	f7fd fa2b 	bl	8009150 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800bcfe:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800bd00:	2201      	movs	r2, #1
  return HAL_OK;  
 800bd02:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800bd04:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bd08:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800bd0c:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bd0e:	f240 6123 	movw	r1, #1571	; 0x623
 800bd12:	4881      	ldr	r0, [pc, #516]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bd14:	f7f9 fdac 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bd18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd1a:	f240 4204 	movw	r2, #1028	; 0x404
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	bf18      	it	ne
 800bd22:	2b10      	cmpne	r3, #16
 800bd24:	f47f af55 	bne.w	800bbd2 <HAL_ETH_ConfigMAC+0x102>
 800bd28:	e757      	b.n	800bbda <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bd2a:	f240 610e 	movw	r1, #1550	; 0x60e
 800bd2e:	487a      	ldr	r0, [pc, #488]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bd30:	f7f9 fd9e 	bl	8005870 <assert_failed>
  if (macconf != NULL)
 800bd34:	2c00      	cmp	r4, #0
 800bd36:	f47f aee7 	bne.w	800bb08 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800bd3a:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd3c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bd3e:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800bd42:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bd44:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800bd46:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bd4a:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bd4c:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bd4e:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd50:	f7fd f9fe 	bl	8009150 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	601c      	str	r4, [r3, #0]
 800bd58:	e7d1      	b.n	800bcfe <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bd5a:	f240 6122 	movw	r1, #1570	; 0x622
 800bd5e:	486e      	ldr	r0, [pc, #440]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bd60:	f7f9 fd86 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bd64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	f67f af2c 	bls.w	800bbc4 <HAL_ETH_ConfigMAC+0xf4>
 800bd6c:	e7cf      	b.n	800bd0e <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bd6e:	f240 6121 	movw	r1, #1569	; 0x621
 800bd72:	4869      	ldr	r0, [pc, #420]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bd74:	f7f9 fd7c 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bd78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd7a:	f033 0308 	bics.w	r3, r3, #8
 800bd7e:	f43f af1d 	beq.w	800bbbc <HAL_ETH_ConfigMAC+0xec>
 800bd82:	e7ea      	b.n	800bd5a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bd84:	f240 6113 	movw	r1, #1555	; 0x613
 800bd88:	4863      	ldr	r0, [pc, #396]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bd8a:	f7f9 fd71 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bd8e:	6863      	ldr	r3, [r4, #4]
 800bd90:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bd94:	f43f aec2 	beq.w	800bb1c <HAL_ETH_ConfigMAC+0x4c>
 800bd98:	e02b      	b.n	800bdf2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bd9a:	f240 6119 	movw	r1, #1561	; 0x619
 800bd9e:	485e      	ldr	r0, [pc, #376]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bda0:	f7f9 fd66 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bda4:	69e3      	ldr	r3, [r4, #28]
 800bda6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bdaa:	f43f aed9 	beq.w	800bb60 <HAL_ETH_ConfigMAC+0x90>
 800bdae:	e07a      	b.n	800bea6 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bdb0:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800bdb4:	4858      	ldr	r0, [pc, #352]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bdb6:	f7f9 fd5b 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bdba:	69a3      	ldr	r3, [r4, #24]
 800bdbc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bdc0:	f43f aec9 	beq.w	800bb56 <HAL_ETH_ConfigMAC+0x86>
 800bdc4:	e7e9      	b.n	800bd9a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bdc6:	f240 6117 	movw	r1, #1559	; 0x617
 800bdca:	4853      	ldr	r0, [pc, #332]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bdcc:	f7f9 fd50 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bdd0:	6963      	ldr	r3, [r4, #20]
 800bdd2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bdd6:	f43f aeb9 	beq.w	800bb4c <HAL_ETH_ConfigMAC+0x7c>
 800bdda:	e7e9      	b.n	800bdb0 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bddc:	f240 6116 	movw	r1, #1558	; 0x616
 800bde0:	484d      	ldr	r0, [pc, #308]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bde2:	f7f9 fd45 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bde6:	6923      	ldr	r3, [r4, #16]
 800bde8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bdec:	f43f aea9 	beq.w	800bb42 <HAL_ETH_ConfigMAC+0x72>
 800bdf0:	e7e9      	b.n	800bdc6 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bdf2:	f240 6114 	movw	r1, #1556	; 0x614
 800bdf6:	4848      	ldr	r0, [pc, #288]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bdf8:	f7f9 fd3a 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bdfc:	68a3      	ldr	r3, [r4, #8]
 800bdfe:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800be02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be06:	f47f ae8f 	bne.w	800bb28 <HAL_ETH_ConfigMAC+0x58>
 800be0a:	e690      	b.n	800bb2e <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800be0c:	f240 612d 	movw	r1, #1581	; 0x62d
 800be10:	4841      	ldr	r0, [pc, #260]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be12:	f7f9 fd2d 	bl	8005870 <assert_failed>
 800be16:	e711      	b.n	800bc3c <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800be18:	f240 612c 	movw	r1, #1580	; 0x62c
 800be1c:	483e      	ldr	r0, [pc, #248]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be1e:	f7f9 fd27 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800be22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be28:	f4ff af08 	bcc.w	800bc3c <HAL_ETH_ConfigMAC+0x16c>
 800be2c:	e7ee      	b.n	800be0c <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800be2e:	f240 612b 	movw	r1, #1579	; 0x62b
 800be32:	4839      	ldr	r0, [pc, #228]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be34:	f7f9 fd1c 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800be38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be3a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800be3e:	f43f aef8 	beq.w	800bc32 <HAL_ETH_ConfigMAC+0x162>
 800be42:	e7e9      	b.n	800be18 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800be44:	f240 612a 	movw	r1, #1578	; 0x62a
 800be48:	4833      	ldr	r0, [pc, #204]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be4a:	f7f9 fd11 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800be4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be50:	f033 0302 	bics.w	r3, r3, #2
 800be54:	f43f aee8 	beq.w	800bc28 <HAL_ETH_ConfigMAC+0x158>
 800be58:	e7e9      	b.n	800be2e <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800be5a:	f240 6129 	movw	r1, #1577	; 0x629
 800be5e:	482e      	ldr	r0, [pc, #184]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be60:	f7f9 fd06 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800be64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be66:	f033 0304 	bics.w	r3, r3, #4
 800be6a:	f43f aed8 	beq.w	800bc1e <HAL_ETH_ConfigMAC+0x14e>
 800be6e:	e7e9      	b.n	800be44 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800be70:	f240 611d 	movw	r1, #1565	; 0x61d
 800be74:	4828      	ldr	r0, [pc, #160]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be76:	f7f9 fcfb 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800be7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be7c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800be80:	f43f ae82 	beq.w	800bb88 <HAL_ETH_ConfigMAC+0xb8>
 800be84:	e01a      	b.n	800bebc <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800be86:	f240 611b 	movw	r1, #1563	; 0x61b
 800be8a:	4823      	ldr	r0, [pc, #140]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800be8c:	f7f9 fcf0 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800be90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be92:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800be96:	f43f ae6d 	beq.w	800bb74 <HAL_ETH_ConfigMAC+0xa4>
 800be9a:	f240 611c 	movw	r1, #1564	; 0x61c
 800be9e:	481e      	ldr	r0, [pc, #120]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bea0:	f7f9 fce6 	bl	8005870 <assert_failed>
 800bea4:	e666      	b.n	800bb74 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bea6:	f240 611a 	movw	r1, #1562	; 0x61a
 800beaa:	481b      	ldr	r0, [pc, #108]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800beac:	f7f9 fce0 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800beb0:	6a23      	ldr	r3, [r4, #32]
 800beb2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800beb6:	f43f ae58 	beq.w	800bb6a <HAL_ETH_ConfigMAC+0x9a>
 800beba:	e7e4      	b.n	800be86 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800bebc:	f240 611e 	movw	r1, #1566	; 0x61e
 800bec0:	4815      	ldr	r0, [pc, #84]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bec2:	f7f9 fcd5 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bec6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bec8:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800becc:	f47f ae60 	bne.w	800bb90 <HAL_ETH_ConfigMAC+0xc0>
 800bed0:	e662      	b.n	800bb98 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800bed2:	f240 6126 	movw	r1, #1574	; 0x626
 800bed6:	4810      	ldr	r0, [pc, #64]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bed8:	f7f9 fcca 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800bedc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bede:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bee2:	f43f ae8d 	beq.w	800bc00 <HAL_ETH_ConfigMAC+0x130>
 800bee6:	f240 6127 	movw	r1, #1575	; 0x627
 800beea:	480b      	ldr	r0, [pc, #44]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800beec:	f7f9 fcc0 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800bef0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bef2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bef6:	f43f ae88 	beq.w	800bc0a <HAL_ETH_ConfigMAC+0x13a>
 800befa:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800befe:	4806      	ldr	r0, [pc, #24]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bf00:	f7f9 fcb6 	bl	8005870 <assert_failed>
 800bf04:	e681      	b.n	800bc0a <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bf06:	f240 610d 	movw	r1, #1549	; 0x60d
 800bf0a:	4803      	ldr	r0, [pc, #12]	; (800bf18 <HAL_ETH_ConfigMAC+0x448>)
 800bf0c:	f7f9 fcb0 	bl	8005870 <assert_failed>
 800bf10:	e5f2      	b.n	800baf8 <HAL_ETH_ConfigMAC+0x28>
 800bf12:	bf00      	nop
 800bf14:	ff20810f 	.word	0xff20810f
 800bf18:	0802de44 	.word	0x0802de44
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bf1c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800bf20:	4816      	ldr	r0, [pc, #88]	; (800bf7c <HAL_ETH_ConfigMAC+0x4ac>)
 800bf22:	f7f9 fca5 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bf26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf28:	f033 0320 	bics.w	r3, r3, #32
 800bf2c:	f43f ae41 	beq.w	800bbb2 <HAL_ETH_ConfigMAC+0xe2>
 800bf30:	e71d      	b.n	800bd6e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800bf32:	f240 6125 	movw	r1, #1573	; 0x625
 800bf36:	4811      	ldr	r0, [pc, #68]	; (800bf7c <HAL_ETH_ConfigMAC+0x4ac>)
 800bf38:	f7f9 fc9a 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800bf3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bf3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf42:	f4ff ae58 	bcc.w	800bbf6 <HAL_ETH_ConfigMAC+0x126>
 800bf46:	e7c4      	b.n	800bed2 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bf48:	f240 611f 	movw	r1, #1567	; 0x61f
 800bf4c:	480b      	ldr	r0, [pc, #44]	; (800bf7c <HAL_ETH_ConfigMAC+0x4ac>)
 800bf4e:	f7f9 fc8f 	bl	8005870 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bf52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf58:	2a40      	cmp	r2, #64	; 0x40
 800bf5a:	f47f ae22 	bne.w	800bba2 <HAL_ETH_ConfigMAC+0xd2>
 800bf5e:	e623      	b.n	800bba8 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bf60:	f240 6124 	movw	r1, #1572	; 0x624
 800bf64:	4805      	ldr	r0, [pc, #20]	; (800bf7c <HAL_ETH_ConfigMAC+0x4ac>)
 800bf66:	f7f9 fc83 	bl	8005870 <assert_failed>
 800bf6a:	e636      	b.n	800bbda <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800bf6c:	2002      	movs	r0, #2
}
 800bf6e:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bf70:	f240 6115 	movw	r1, #1557	; 0x615
 800bf74:	4801      	ldr	r0, [pc, #4]	; (800bf7c <HAL_ETH_ConfigMAC+0x4ac>)
 800bf76:	f7f9 fc7b 	bl	8005870 <assert_failed>
 800bf7a:	e5d8      	b.n	800bb2e <HAL_ETH_ConfigMAC+0x5e>
 800bf7c:	0802de44 	.word	0x0802de44

0800bf80 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800bf80:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	079b      	lsls	r3, r3, #30
 800bf86:	d504      	bpl.n	800bf92 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800bf88:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <FLASH_SetErrorCode+0x68>)
 800bf8a:	6993      	ldr	r3, [r2, #24]
 800bf8c:	f043 0320 	orr.w	r3, r3, #32
 800bf90:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800bf92:	4b14      	ldr	r3, [pc, #80]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	06d8      	lsls	r0, r3, #27
 800bf98:	d504      	bpl.n	800bfa4 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800bf9a:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <FLASH_SetErrorCode+0x68>)
 800bf9c:	6993      	ldr	r3, [r2, #24]
 800bf9e:	f043 0310 	orr.w	r3, r3, #16
 800bfa2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	0699      	lsls	r1, r3, #26
 800bfaa:	d504      	bpl.n	800bfb6 <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800bfac:	4a0e      	ldr	r2, [pc, #56]	; (800bfe8 <FLASH_SetErrorCode+0x68>)
 800bfae:	6993      	ldr	r3, [r2, #24]
 800bfb0:	f043 0308 	orr.w	r3, r3, #8
 800bfb4:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800bfb6:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	065a      	lsls	r2, r3, #25
 800bfbc:	d504      	bpl.n	800bfc8 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800bfbe:	4a0a      	ldr	r2, [pc, #40]	; (800bfe8 <FLASH_SetErrorCode+0x68>)
 800bfc0:	6993      	ldr	r3, [r2, #24]
 800bfc2:	f043 0304 	orr.w	r3, r3, #4
 800bfc6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	061b      	lsls	r3, r3, #24
 800bfce:	d504      	bpl.n	800bfda <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800bfd0:	4a05      	ldr	r2, [pc, #20]	; (800bfe8 <FLASH_SetErrorCode+0x68>)
 800bfd2:	6993      	ldr	r3, [r2, #24]
 800bfd4:	f043 0302 	orr.w	r3, r3, #2
 800bfd8:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800bfda:	4b02      	ldr	r3, [pc, #8]	; (800bfe4 <FLASH_SetErrorCode+0x64>)
 800bfdc:	22f2      	movs	r2, #242	; 0xf2
 800bfde:	60da      	str	r2, [r3, #12]
}
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	40023c00 	.word	0x40023c00
 800bfe8:	2000350c 	.word	0x2000350c

0800bfec <FLASH_Program_Byte>:
{
 800bfec:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800bfee:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800bff2:	4604      	mov	r4, r0
 800bff4:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800bff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bffa:	d304      	bcc.n	800c006 <FLASH_Program_Byte+0x1a>
 800bffc:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <FLASH_Program_Byte+0x44>)
 800bffe:	4403      	add	r3, r0
 800c000:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c004:	d20e      	bcs.n	800c024 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <FLASH_Program_Byte+0x48>)
 800c008:	691a      	ldr	r2, [r3, #16]
 800c00a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c00e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c010:	691a      	ldr	r2, [r3, #16]
 800c012:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c014:	691a      	ldr	r2, [r3, #16]
 800c016:	f042 0201 	orr.w	r2, r2, #1
 800c01a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800c01c:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800c01e:	f3bf 8f4f 	dsb	sy
}
 800c022:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c024:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c028:	4803      	ldr	r0, [pc, #12]	; (800c038 <FLASH_Program_Byte+0x4c>)
 800c02a:	f7f9 fc21 	bl	8005870 <assert_failed>
 800c02e:	e7ea      	b.n	800c006 <FLASH_Program_Byte+0x1a>
 800c030:	e00f1000 	.word	0xe00f1000
 800c034:	40023c00 	.word	0x40023c00
 800c038:	0802de7c 	.word	0x0802de7c

0800c03c <FLASH_Program_HalfWord>:
{
 800c03c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c03e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c042:	4604      	mov	r4, r0
 800c044:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c04a:	d304      	bcc.n	800c056 <FLASH_Program_HalfWord+0x1a>
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <FLASH_Program_HalfWord+0x48>)
 800c04e:	4403      	add	r3, r0
 800c050:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c054:	d210      	bcs.n	800c078 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c056:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <FLASH_Program_HalfWord+0x4c>)
 800c058:	691a      	ldr	r2, [r3, #16]
 800c05a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c05e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c066:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c068:	691a      	ldr	r2, [r3, #16]
 800c06a:	f042 0201 	orr.w	r2, r2, #1
 800c06e:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800c070:	8025      	strh	r5, [r4, #0]
 800c072:	f3bf 8f4f 	dsb	sy
}
 800c076:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c078:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c07c:	4803      	ldr	r0, [pc, #12]	; (800c08c <FLASH_Program_HalfWord+0x50>)
 800c07e:	f7f9 fbf7 	bl	8005870 <assert_failed>
 800c082:	e7e8      	b.n	800c056 <FLASH_Program_HalfWord+0x1a>
 800c084:	e00f1000 	.word	0xe00f1000
 800c088:	40023c00 	.word	0x40023c00
 800c08c:	0802de7c 	.word	0x0802de7c

0800c090 <FLASH_Program_Word>:
{
 800c090:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c092:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c09a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c09e:	d304      	bcc.n	800c0aa <FLASH_Program_Word+0x1a>
 800c0a0:	4b0d      	ldr	r3, [pc, #52]	; (800c0d8 <FLASH_Program_Word+0x48>)
 800c0a2:	4403      	add	r3, r0
 800c0a4:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c0a8:	d210      	bcs.n	800c0cc <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <FLASH_Program_Word+0x4c>)
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c0b2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c0b4:	691a      	ldr	r2, [r3, #16]
 800c0b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0ba:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c0bc:	691a      	ldr	r2, [r3, #16]
 800c0be:	f042 0201 	orr.w	r2, r2, #1
 800c0c2:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800c0c4:	6025      	str	r5, [r4, #0]
 800c0c6:	f3bf 8f4f 	dsb	sy
}
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c0cc:	f240 21b3 	movw	r1, #691	; 0x2b3
 800c0d0:	4803      	ldr	r0, [pc, #12]	; (800c0e0 <FLASH_Program_Word+0x50>)
 800c0d2:	f7f9 fbcd 	bl	8005870 <assert_failed>
 800c0d6:	e7e8      	b.n	800c0aa <FLASH_Program_Word+0x1a>
 800c0d8:	e00f1000 	.word	0xe00f1000
 800c0dc:	40023c00 	.word	0x40023c00
 800c0e0:	0802de7c 	.word	0x0802de7c

0800c0e4 <FLASH_Program_DoubleWord>:
{
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800c0e8:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800c0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0f4:	d304      	bcc.n	800c100 <FLASH_Program_DoubleWord+0x1c>
 800c0f6:	4b0f      	ldr	r3, [pc, #60]	; (800c134 <FLASH_Program_DoubleWord+0x50>)
 800c0f8:	4403      	add	r3, r0
 800c0fa:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c0fe:	d213      	bcs.n	800c128 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800c100:	490d      	ldr	r1, [pc, #52]	; (800c138 <FLASH_Program_DoubleWord+0x54>)
 800c102:	690b      	ldr	r3, [r1, #16]
 800c104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c108:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c10a:	690b      	ldr	r3, [r1, #16]
 800c10c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c110:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c112:	690b      	ldr	r3, [r1, #16]
 800c114:	f043 0301 	orr.w	r3, r3, #1
 800c118:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c11a:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c11c:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c120:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800c122:	f3bf 8f4f 	dsb	sy
}
 800c126:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c128:	f240 218e 	movw	r1, #654	; 0x28e
 800c12c:	4803      	ldr	r0, [pc, #12]	; (800c13c <FLASH_Program_DoubleWord+0x58>)
 800c12e:	f7f9 fb9f 	bl	8005870 <assert_failed>
 800c132:	e7e5      	b.n	800c100 <FLASH_Program_DoubleWord+0x1c>
 800c134:	e00f1000 	.word	0xe00f1000
 800c138:	40023c00 	.word	0x40023c00
 800c13c:	0802de7c 	.word	0x0802de7c

0800c140 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <HAL_FLASH_Unlock+0x1c>)
 800c142:	691a      	ldr	r2, [r3, #16]
 800c144:	2a00      	cmp	r2, #0
 800c146:	db01      	blt.n	800c14c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800c148:	2000      	movs	r0, #0
}
 800c14a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c14c:	4904      	ldr	r1, [pc, #16]	; (800c160 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c14e:	4a05      	ldr	r2, [pc, #20]	; (800c164 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c150:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c152:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c154:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800c156:	0fc0      	lsrs	r0, r0, #31
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	40023c00 	.word	0x40023c00
 800c160:	45670123 	.word	0x45670123
 800c164:	cdef89ab 	.word	0xcdef89ab

0800c168 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800c168:	4a03      	ldr	r2, [pc, #12]	; (800c178 <HAL_FLASH_Lock+0x10>)
}
 800c16a:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800c16c:	6913      	ldr	r3, [r2, #16]
 800c16e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c172:	6113      	str	r3, [r2, #16]
}
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	40023c00 	.word	0x40023c00

0800c17c <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <HAL_FLASH_OB_Unlock+0x18>)
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	07d2      	lsls	r2, r2, #31
 800c182:	d505      	bpl.n	800c190 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c184:	4904      	ldr	r1, [pc, #16]	; (800c198 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800c186:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c188:	4a04      	ldr	r2, [pc, #16]	; (800c19c <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c18a:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c18c:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800c18e:	4770      	bx	lr
    return HAL_ERROR;
 800c190:	2001      	movs	r0, #1
}
 800c192:	4770      	bx	lr
 800c194:	40023c00 	.word	0x40023c00
 800c198:	08192a3b 	.word	0x08192a3b
 800c19c:	4c5d6e7f 	.word	0x4c5d6e7f

0800c1a0 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c1a0:	4a03      	ldr	r2, [pc, #12]	; (800c1b0 <HAL_FLASH_OB_Lock+0x10>)
}
 800c1a2:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c1a4:	6953      	ldr	r3, [r2, #20]
 800c1a6:	f043 0301 	orr.w	r3, r3, #1
 800c1aa:	6153      	str	r3, [r2, #20]
}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	40023c00 	.word	0x40023c00

0800c1b4 <HAL_FLASH_OB_Launch>:
{
 800c1b4:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c1b6:	4c14      	ldr	r4, [pc, #80]	; (800c208 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4a14      	ldr	r2, [pc, #80]	; (800c20c <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c1bc:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c1c0:	6963      	ldr	r3, [r4, #20]
 800c1c2:	f043 0302 	orr.w	r3, r3, #2
 800c1c6:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c1c8:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800c1ca:	f7fc ffbb 	bl	8009144 <HAL_GetTick>
 800c1ce:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c1d0:	e004      	b.n	800c1dc <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c1d2:	f7fc ffb7 	bl	8009144 <HAL_GetTick>
 800c1d6:	1b40      	subs	r0, r0, r5
 800c1d8:	42b0      	cmp	r0, r6
 800c1da:	d80e      	bhi.n	800c1fa <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c1dc:	68e3      	ldr	r3, [r4, #12]
 800c1de:	03db      	lsls	r3, r3, #15
 800c1e0:	d4f7      	bmi.n	800c1d2 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c1e2:	68e2      	ldr	r2, [r4, #12]
 800c1e4:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c1e8:	d109      	bne.n	800c1fe <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c1ea:	68e0      	ldr	r0, [r4, #12]
 800c1ec:	f010 0001 	ands.w	r0, r0, #1
 800c1f0:	d002      	beq.n	800c1f8 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c1f2:	2301      	movs	r3, #1
  return HAL_OK;
 800c1f4:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c1f6:	60e3      	str	r3, [r4, #12]
}
 800c1f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800c1fa:	2003      	movs	r0, #3
}
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c1fe:	f7ff febf 	bl	800bf80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c202:	2001      	movs	r0, #1
}
 800c204:	bd70      	pop	{r4, r5, r6, pc}
 800c206:	bf00      	nop
 800c208:	40023c00 	.word	0x40023c00
 800c20c:	2000350c 	.word	0x2000350c

0800c210 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800c210:	4b01      	ldr	r3, [pc, #4]	; (800c218 <HAL_FLASH_GetError+0x8>)
 800c212:	6998      	ldr	r0, [r3, #24]
}  
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	2000350c 	.word	0x2000350c

0800c21c <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c21c:	4b13      	ldr	r3, [pc, #76]	; (800c26c <FLASH_WaitForLastOperation+0x50>)
 800c21e:	2200      	movs	r2, #0
{ 
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c224:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c226:	4d12      	ldr	r5, [pc, #72]	; (800c270 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800c228:	f7fc ff8c 	bl	8009144 <HAL_GetTick>
 800c22c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c22e:	e001      	b.n	800c234 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800c230:	1c62      	adds	r2, r4, #1
 800c232:	d10e      	bne.n	800c252 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c234:	68eb      	ldr	r3, [r5, #12]
 800c236:	03db      	lsls	r3, r3, #15
 800c238:	d4fa      	bmi.n	800c230 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c23a:	68ea      	ldr	r2, [r5, #12]
 800c23c:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c240:	d10f      	bne.n	800c262 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c242:	68e8      	ldr	r0, [r5, #12]
 800c244:	f010 0001 	ands.w	r0, r0, #1
 800c248:	d002      	beq.n	800c250 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c24a:	2301      	movs	r3, #1
  return HAL_OK;
 800c24c:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c24e:	60eb      	str	r3, [r5, #12]
}  
 800c250:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c252:	b124      	cbz	r4, 800c25e <FLASH_WaitForLastOperation+0x42>
 800c254:	f7fc ff76 	bl	8009144 <HAL_GetTick>
 800c258:	1b80      	subs	r0, r0, r6
 800c25a:	42a0      	cmp	r0, r4
 800c25c:	d9ea      	bls.n	800c234 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800c25e:	2003      	movs	r0, #3
}  
 800c260:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c262:	f7ff fe8d 	bl	800bf80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c266:	2001      	movs	r0, #1
}  
 800c268:	bd70      	pop	{r4, r5, r6, pc}
 800c26a:	bf00      	nop
 800c26c:	2000350c 	.word	0x2000350c
 800c270:	40023c00 	.word	0x40023c00

0800c274 <HAL_FLASH_Program>:
{
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800c278:	4d23      	ldr	r5, [pc, #140]	; (800c308 <HAL_FLASH_Program+0x94>)
{
 800c27a:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800c27c:	7d2a      	ldrb	r2, [r5, #20]
 800c27e:	2a01      	cmp	r2, #1
 800c280:	d03a      	beq.n	800c2f8 <HAL_FLASH_Program+0x84>
 800c282:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c284:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800c286:	f04f 0301 	mov.w	r3, #1
 800c28a:	4604      	mov	r4, r0
 800c28c:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c28e:	d81d      	bhi.n	800c2cc <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c290:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c294:	460e      	mov	r6, r1
 800c296:	f7ff ffc1 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c29a:	b998      	cbnz	r0, 800c2c4 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800c29c:	3c01      	subs	r4, #1
 800c29e:	2c02      	cmp	r4, #2
 800c2a0:	d82d      	bhi.n	800c2fe <HAL_FLASH_Program+0x8a>
 800c2a2:	e8df f004 	tbb	[pc, r4]
 800c2a6:	1e02      	.short	0x1e02
 800c2a8:	23          	.byte	0x23
 800c2a9:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c2aa:	b2b9      	uxth	r1, r7
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7ff fec5 	bl	800c03c <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c2b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c2b6:	f7ff ffb1 	bl	800c21c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800c2ba:	4a14      	ldr	r2, [pc, #80]	; (800c30c <HAL_FLASH_Program+0x98>)
 800c2bc:	6913      	ldr	r3, [r2, #16]
 800c2be:	f023 0301 	bic.w	r3, r3, #1
 800c2c2:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	752b      	strb	r3, [r5, #20]
}
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c2cc:	4810      	ldr	r0, [pc, #64]	; (800c310 <HAL_FLASH_Program+0x9c>)
 800c2ce:	21aa      	movs	r1, #170	; 0xaa
 800c2d0:	f7f9 face 	bl	8005870 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c2d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c2d8:	f7ff ffa0 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d1f1      	bne.n	800c2c4 <HAL_FLASH_Program+0x50>
 800c2e0:	e7e7      	b.n	800c2b2 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff fed3 	bl	800c090 <FLASH_Program_Word>
        break;
 800c2ea:	e7e2      	b.n	800c2b2 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800c2ec:	463a      	mov	r2, r7
 800c2ee:	4643      	mov	r3, r8
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff fef7 	bl	800c0e4 <FLASH_Program_DoubleWord>
        break;
 800c2f6:	e7dc      	b.n	800c2b2 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800c2f8:	2002      	movs	r0, #2
}
 800c2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800c2fe:	b2f9      	uxtb	r1, r7
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff fe73 	bl	800bfec <FLASH_Program_Byte>
        break;
 800c306:	e7d4      	b.n	800c2b2 <HAL_FLASH_Program+0x3e>
 800c308:	2000350c 	.word	0x2000350c
 800c30c:	40023c00 	.word	0x40023c00
 800c310:	0802de7c 	.word	0x0802de7c

0800c314 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c314:	2803      	cmp	r0, #3
{
 800c316:	b538      	push	{r3, r4, r5, lr}
 800c318:	4604      	mov	r4, r0
 800c31a:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c31c:	d82f      	bhi.n	800c37e <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800c31e:	1e6b      	subs	r3, r5, #1
 800c320:	2b02      	cmp	r3, #2
 800c322:	d81c      	bhi.n	800c35e <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800c324:	4b19      	ldr	r3, [pc, #100]	; (800c38c <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800c326:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c32e:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800c330:	d10e      	bne.n	800c350 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800c332:	6919      	ldr	r1, [r3, #16]
 800c334:	f248 0204 	movw	r2, #32772	; 0x8004
 800c338:	430a      	orrs	r2, r1
 800c33a:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <FLASH_MassErase+0x78>)
 800c33e:	6910      	ldr	r0, [r2, #16]
 800c340:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800c344:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c348:	6110      	str	r0, [r2, #16]
 800c34a:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800c350:	2d02      	cmp	r5, #2
 800c352:	d10e      	bne.n	800c372 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800c354:	691a      	ldr	r2, [r3, #16]
 800c356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c35a:	611a      	str	r2, [r3, #16]
 800c35c:	e7ee      	b.n	800c33c <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800c35e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c362:	480b      	ldr	r0, [pc, #44]	; (800c390 <FLASH_MassErase+0x7c>)
 800c364:	f7f9 fa84 	bl	8005870 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800c368:	4a08      	ldr	r2, [pc, #32]	; (800c38c <FLASH_MassErase+0x78>)
 800c36a:	6913      	ldr	r3, [r2, #16]
 800c36c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c370:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800c372:	4a06      	ldr	r2, [pc, #24]	; (800c38c <FLASH_MassErase+0x78>)
 800c374:	6913      	ldr	r3, [r2, #16]
 800c376:	f043 0304 	orr.w	r3, r3, #4
 800c37a:	6113      	str	r3, [r2, #16]
 800c37c:	e7de      	b.n	800c33c <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c37e:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c382:	4803      	ldr	r0, [pc, #12]	; (800c390 <FLASH_MassErase+0x7c>)
 800c384:	f7f9 fa74 	bl	8005870 <assert_failed>
 800c388:	e7c9      	b.n	800c31e <FLASH_MassErase+0xa>
 800c38a:	bf00      	nop
 800c38c:	40023c00 	.word	0x40023c00
 800c390:	0802deb8 	.word	0x0802deb8

0800c394 <HAL_FLASHEx_OBProgram>:
{
 800c394:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800c396:	4d64      	ldr	r5, [pc, #400]	; (800c528 <HAL_FLASHEx_OBProgram+0x194>)
 800c398:	7d2b      	ldrb	r3, [r5, #20]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	f000 80bb 	beq.w	800c516 <HAL_FLASHEx_OBProgram+0x182>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c3a6:	6803      	ldr	r3, [r0, #0]
 800c3a8:	2b3f      	cmp	r3, #63	; 0x3f
 800c3aa:	f200 808c 	bhi.w	800c4c6 <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c3ae:	07d9      	lsls	r1, r3, #31
 800c3b0:	d40d      	bmi.n	800c3ce <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c3b2:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c3b4:	079a      	lsls	r2, r3, #30
 800c3b6:	d42c      	bmi.n	800c412 <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c3b8:	075e      	lsls	r6, r3, #29
 800c3ba:	d440      	bmi.n	800c43e <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c3bc:	0719      	lsls	r1, r3, #28
 800c3be:	d44f      	bmi.n	800c460 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c3c0:	06da      	lsls	r2, r3, #27
 800c3c2:	d45b      	bmi.n	800c47c <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c3c4:	069b      	lsls	r3, r3, #26
 800c3c6:	d46c      	bmi.n	800c4a2 <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	752b      	strb	r3, [r5, #20]
}
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800c3ce:	6863      	ldr	r3, [r4, #4]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d905      	bls.n	800c3e0 <HAL_FLASHEx_OBProgram+0x4c>
 800c3d4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800c3d8:	4854      	ldr	r0, [pc, #336]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c3da:	f7f9 fa49 	bl	8005870 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c3de:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800c3e0:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c3e2:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c3e4:	4b52      	ldr	r3, [pc, #328]	; (800c530 <HAL_FLASHEx_OBProgram+0x19c>)
 800c3e6:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c3ea:	d07f      	beq.n	800c4ec <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c3ec:	b903      	cbnz	r3, 800c3f0 <HAL_FLASHEx_OBProgram+0x5c>
 800c3ee:	b926      	cbnz	r6, 800c3fa <HAL_FLASHEx_OBProgram+0x66>
 800c3f0:	f240 314f 	movw	r1, #847	; 0x34f
 800c3f4:	484d      	ldr	r0, [pc, #308]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c3f6:	f7f9 fa3b 	bl	8005870 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c3fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c3fe:	f7ff ff0d 	bl	800c21c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c402:	b918      	cbnz	r0, 800c40c <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800c404:	4b4b      	ldr	r3, [pc, #300]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	4316      	orrs	r6, r2
 800c40a:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	079a      	lsls	r2, r3, #30
 800c410:	d5d2      	bpl.n	800c3b8 <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800c412:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800c414:	2eaa      	cmp	r6, #170	; 0xaa
 800c416:	bf18      	it	ne
 800c418:	2e55      	cmpne	r6, #85	; 0x55
 800c41a:	d006      	beq.n	800c42a <HAL_FLASHEx_OBProgram+0x96>
 800c41c:	2ecc      	cmp	r6, #204	; 0xcc
 800c41e:	d004      	beq.n	800c42a <HAL_FLASHEx_OBProgram+0x96>
 800c420:	f240 316e 	movw	r1, #878	; 0x36e
 800c424:	4841      	ldr	r0, [pc, #260]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c426:	f7f9 fa23 	bl	8005870 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c42a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c42e:	f7ff fef5 	bl	800c21c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c432:	b908      	cbnz	r0, 800c438 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800c434:	4b3f      	ldr	r3, [pc, #252]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c436:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	075e      	lsls	r6, r3, #29
 800c43c:	d5be      	bpl.n	800c3bc <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c43e:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800c442:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c444:	f7ff feea 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c448:	b938      	cbnz	r0, 800c45a <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c44a:	493a      	ldr	r1, [pc, #232]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c44c:	4b3a      	ldr	r3, [pc, #232]	; (800c538 <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c44e:	4a3b      	ldr	r2, [pc, #236]	; (800c53c <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c450:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c452:	694e      	ldr	r6, [r1, #20]
 800c454:	4032      	ands	r2, r6
 800c456:	4313      	orrs	r3, r2
 800c458:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	0719      	lsls	r1, r3, #28
 800c45e:	d5af      	bpl.n	800c3c0 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c460:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c462:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800c466:	d158      	bne.n	800c51a <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c468:	4932      	ldr	r1, [pc, #200]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c46a:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c46c:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c46e:	694a      	ldr	r2, [r1, #20]
 800c470:	f022 020c 	bic.w	r2, r2, #12
 800c474:	4332      	orrs	r2, r6
 800c476:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c478:	06da      	lsls	r2, r3, #27
 800c47a:	d5a3      	bpl.n	800c3c4 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800c47c:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c47e:	f248 0313 	movw	r3, #32787	; 0x8013
 800c482:	429e      	cmp	r6, r3
 800c484:	d826      	bhi.n	800c4d4 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c486:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c48a:	f7ff fec7 	bl	800c21c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800c48e:	b928      	cbnz	r0, 800c49c <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800c490:	4a28      	ldr	r2, [pc, #160]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c492:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <HAL_FLASHEx_OBProgram+0x1ac>)
 800c494:	6991      	ldr	r1, [r2, #24]
 800c496:	400b      	ands	r3, r1
 800c498:	4333      	orrs	r3, r6
 800c49a:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	069b      	lsls	r3, r3, #26
 800c4a0:	d592      	bpl.n	800c3c8 <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800c4a2:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c4a4:	f248 0313 	movw	r3, #32787	; 0x8013
 800c4a8:	429c      	cmp	r4, r3
 800c4aa:	d819      	bhi.n	800c4e0 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4b0:	f7ff feb4 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d187      	bne.n	800c3c8 <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800c4b8:	4a1e      	ldr	r2, [pc, #120]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c4ba:	6993      	ldr	r3, [r2, #24]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4c2:	6193      	str	r3, [r2, #24]
 800c4c4:	e780      	b.n	800c3c8 <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c4c6:	f240 1125 	movw	r1, #293	; 0x125
 800c4ca:	4818      	ldr	r0, [pc, #96]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c4cc:	f7f9 f9d0 	bl	8005870 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	e76c      	b.n	800c3ae <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c4d4:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c4d8:	4814      	ldr	r0, [pc, #80]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c4da:	f7f9 f9c9 	bl	8005870 <assert_failed>
 800c4de:	e7d2      	b.n	800c486 <HAL_FLASHEx_OBProgram+0xf2>
 800c4e0:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c4e4:	4811      	ldr	r0, [pc, #68]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c4e6:	f7f9 f9c3 	bl	8005870 <assert_failed>
 800c4ea:	e7df      	b.n	800c4ac <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c4ec:	b96b      	cbnz	r3, 800c50a <HAL_FLASHEx_OBProgram+0x176>
 800c4ee:	b166      	cbz	r6, 800c50a <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4f4:	f7ff fe92 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d187      	bne.n	800c40c <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800c4fc:	4a0d      	ldr	r2, [pc, #52]	; (800c534 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c4fe:	6953      	ldr	r3, [r2, #20]
 800c500:	ea23 0606 	bic.w	r6, r3, r6
 800c504:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	e754      	b.n	800c3b4 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c50a:	f240 312b 	movw	r1, #811	; 0x32b
 800c50e:	4807      	ldr	r0, [pc, #28]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c510:	f7f9 f9ae 	bl	8005870 <assert_failed>
 800c514:	e7ec      	b.n	800c4f0 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800c516:	2002      	movs	r0, #2
}
 800c518:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c51a:	f44f 7162 	mov.w	r1, #904	; 0x388
 800c51e:	4803      	ldr	r0, [pc, #12]	; (800c52c <HAL_FLASHEx_OBProgram+0x198>)
 800c520:	f7f9 f9a6 	bl	8005870 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	e79f      	b.n	800c468 <HAL_FLASHEx_OBProgram+0xd4>
 800c528:	2000350c 	.word	0x2000350c
 800c52c:	0802deb8 	.word	0x0802deb8
 800c530:	f000ffff 	.word	0xf000ffff
 800c534:	40023c00 	.word	0x40023c00
 800c538:	f00000f0 	.word	0xf00000f0
 800c53c:	0fffff0f 	.word	0x0fffff0f
 800c540:	ffff0000 	.word	0xffff0000

0800c544 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c544:	4a11      	ldr	r2, [pc, #68]	; (800c58c <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c546:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c548:	4b11      	ldr	r3, [pc, #68]	; (800c590 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c54a:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c54c:	6951      	ldr	r1, [r2, #20]
 800c54e:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800c550:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800c552:	7d51      	ldrb	r1, [r2, #21]
 800c554:	29aa      	cmp	r1, #170	; 0xaa
 800c556:	b2cb      	uxtb	r3, r1
 800c558:	d015      	beq.n	800c586 <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800c55a:	7d53      	ldrb	r3, [r2, #21]
 800c55c:	2bcc      	cmp	r3, #204	; 0xcc
 800c55e:	bf0c      	ite	eq
 800c560:	22cc      	moveq	r2, #204	; 0xcc
 800c562:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c564:	4b09      	ldr	r3, [pc, #36]	; (800c58c <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800c566:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c568:	4a0a      	ldr	r2, [pc, #40]	; (800c594 <HAL_FLASHEx_OBGetConfig+0x50>)
 800c56a:	6959      	ldr	r1, [r3, #20]
 800c56c:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800c56e:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800c570:	695a      	ldr	r2, [r3, #20]
 800c572:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800c576:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800c578:	699a      	ldr	r2, [r3, #24]
 800c57a:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800c57c:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800c582:	61c3      	str	r3, [r0, #28]
}
 800c584:	4770      	bx	lr
 800c586:	461a      	mov	r2, r3
 800c588:	e7ec      	b.n	800c564 <HAL_FLASHEx_OBGetConfig+0x20>
 800c58a:	bf00      	nop
 800c58c:	40023c00 	.word	0x40023c00
 800c590:	0fff0000 	.word	0x0fff0000
 800c594:	f00000f0 	.word	0xf00000f0

0800c598 <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800c598:	2817      	cmp	r0, #23
{
 800c59a:	b538      	push	{r3, r4, r5, lr}
 800c59c:	4605      	mov	r5, r0
 800c59e:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800c5a0:	d82b      	bhi.n	800c5fa <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c5a2:	2c03      	cmp	r4, #3
 800c5a4:	d821      	bhi.n	800c5ea <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c5a6:	b9dc      	cbnz	r4, 800c5e0 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	; (800c614 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800c5aa:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800c5ac:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800c5ae:	bf88      	it	hi
 800c5b0:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800c5b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c5b6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800c5b8:	6919      	ldr	r1, [r3, #16]
 800c5ba:	430c      	orrs	r4, r1
 800c5bc:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800c5c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c5c6:	6918      	ldr	r0, [r3, #16]
 800c5c8:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800c5cc:	f045 0502 	orr.w	r5, r5, #2
 800c5d0:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c5d2:	691a      	ldr	r2, [r3, #16]
 800c5d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c5d8:	611a      	str	r2, [r3, #16]
 800c5da:	f3bf 8f4f 	dsb	sy
}
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c5e0:	2c01      	cmp	r4, #1
 800c5e2:	d110      	bne.n	800c606 <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c5e4:	f44f 7480 	mov.w	r4, #256	; 0x100
 800c5e8:	e7de      	b.n	800c5a8 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c5ea:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800c5ee:	480a      	ldr	r0, [pc, #40]	; (800c618 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c5f0:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c5f4:	f7f9 f93c 	bl	8005870 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c5f8:	e7d6      	b.n	800c5a8 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800c5fa:	f240 11eb 	movw	r1, #491	; 0x1eb
 800c5fe:	4806      	ldr	r0, [pc, #24]	; (800c618 <FLASH_Erase_Sector+0x80>)
 800c600:	f7f9 f936 	bl	8005870 <assert_failed>
 800c604:	e7cd      	b.n	800c5a2 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c606:	2c02      	cmp	r4, #2
 800c608:	bf0c      	ite	eq
 800c60a:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800c60e:	f44f 7440 	movne.w	r4, #768	; 0x300
 800c612:	e7c9      	b.n	800c5a8 <FLASH_Erase_Sector+0x10>
 800c614:	40023c00 	.word	0x40023c00
 800c618:	0802deb8 	.word	0x0802deb8

0800c61c <HAL_FLASHEx_Erase>:
{
 800c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800c620:	4f2f      	ldr	r7, [pc, #188]	; (800c6e0 <HAL_FLASHEx_Erase+0xc4>)
 800c622:	7d3b      	ldrb	r3, [r7, #20]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d040      	beq.n	800c6aa <HAL_FLASHEx_Erase+0x8e>
 800c628:	2301      	movs	r3, #1
 800c62a:	4604      	mov	r4, r0
 800c62c:	4688      	mov	r8, r1
 800c62e:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800c630:	6803      	ldr	r3, [r0, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d903      	bls.n	800c63e <HAL_FLASHEx_Erase+0x22>
 800c636:	21a5      	movs	r1, #165	; 0xa5
 800c638:	482a      	ldr	r0, [pc, #168]	; (800c6e4 <HAL_FLASHEx_Erase+0xc8>)
 800c63a:	f7f9 f919 	bl	8005870 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c63e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c642:	f7ff fdeb 	bl	800c21c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c646:	4606      	mov	r6, r0
 800c648:	bb50      	cbnz	r0, 800c6a0 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d034      	beq.n	800c6c2 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c658:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c65c:	442b      	add	r3, r5
 800c65e:	1e5a      	subs	r2, r3, #1
 800c660:	2a17      	cmp	r2, #23
 800c662:	d826      	bhi.n	800c6b2 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c664:	429d      	cmp	r5, r3
 800c666:	d21b      	bcs.n	800c6a0 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c668:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800c6e8 <HAL_FLASHEx_Erase+0xcc>
 800c66c:	e005      	b.n	800c67a <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c66e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800c672:	3501      	adds	r5, #1
 800c674:	4413      	add	r3, r2
 800c676:	42ab      	cmp	r3, r5
 800c678:	d912      	bls.n	800c6a0 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c67a:	4628      	mov	r0, r5
 800c67c:	7c21      	ldrb	r1, [r4, #16]
 800c67e:	f7ff ff8b 	bl	800c598 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c682:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c686:	f7ff fdc9 	bl	800c21c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c68a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c68e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c692:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800c696:	2800      	cmp	r0, #0
 800c698:	d0e9      	beq.n	800c66e <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c69a:	4606      	mov	r6, r0
          *SectorError = index;
 800c69c:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800c6a4:	753b      	strb	r3, [r7, #20]
}
 800c6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800c6aa:	2602      	movs	r6, #2
}
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c6b2:	21c1      	movs	r1, #193	; 0xc1
 800c6b4:	480b      	ldr	r0, [pc, #44]	; (800c6e4 <HAL_FLASHEx_Erase+0xc8>)
 800c6b6:	f7f9 f8db 	bl	8005870 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c6ba:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c6be:	442b      	add	r3, r5
 800c6c0:	e7d0      	b.n	800c664 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c6c2:	6861      	ldr	r1, [r4, #4]
 800c6c4:	7c20      	ldrb	r0, [r4, #16]
 800c6c6:	f7ff fe25 	bl	800c314 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6ce:	f7ff fda5 	bl	800c21c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800c6d2:	4a05      	ldr	r2, [pc, #20]	; (800c6e8 <HAL_FLASHEx_Erase+0xcc>)
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6d6:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800c6d8:	6911      	ldr	r1, [r2, #16]
 800c6da:	400b      	ands	r3, r1
 800c6dc:	6113      	str	r3, [r2, #16]
 800c6de:	e7df      	b.n	800c6a0 <HAL_FLASHEx_Erase+0x84>
 800c6e0:	2000350c 	.word	0x2000350c
 800c6e4:	0802deb8 	.word	0x0802deb8
 800c6e8:	40023c00 	.word	0x40023c00
 800c6ec:	ffff7ffb 	.word	0xffff7ffb

0800c6f0 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c6f0:	4bb9      	ldr	r3, [pc, #740]	; (800c9d8 <HAL_GPIO_Init+0x2e8>)
 800c6f2:	4aba      	ldr	r2, [pc, #744]	; (800c9dc <HAL_GPIO_Init+0x2ec>)
 800c6f4:	4290      	cmp	r0, r2
 800c6f6:	bf18      	it	ne
 800c6f8:	4298      	cmpne	r0, r3
{
 800c6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c6fe:	bf18      	it	ne
 800c700:	2301      	movne	r3, #1
{
 800c702:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c704:	bf08      	it	eq
 800c706:	2300      	moveq	r3, #0
{
 800c708:	4606      	mov	r6, r0
 800c70a:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	d026      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c710:	4bb3      	ldr	r3, [pc, #716]	; (800c9e0 <HAL_GPIO_Init+0x2f0>)
 800c712:	4298      	cmp	r0, r3
 800c714:	d023      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c71a:	4298      	cmp	r0, r3
 800c71c:	d01f      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c71e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c722:	4298      	cmp	r0, r3
 800c724:	d01b      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c72a:	4298      	cmp	r0, r3
 800c72c:	d017      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c72e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c732:	4298      	cmp	r0, r3
 800c734:	d013      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c73a:	4298      	cmp	r0, r3
 800c73c:	d00f      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c73e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c746:	4290      	cmp	r0, r2
 800c748:	bf18      	it	ne
 800c74a:	4298      	cmpne	r0, r3
 800c74c:	d007      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c752:	4298      	cmp	r0, r3
 800c754:	d003      	beq.n	800c75e <HAL_GPIO_Init+0x6e>
 800c756:	21aa      	movs	r1, #170	; 0xaa
 800c758:	48a2      	ldr	r0, [pc, #648]	; (800c9e4 <HAL_GPIO_Init+0x2f4>)
 800c75a:	f7f9 f889 	bl	8005870 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800c75e:	883b      	ldrh	r3, [r7, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 811a 	beq.w	800c99a <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800c76c:	bf18      	it	ne
 800c76e:	2a03      	cmpne	r2, #3
 800c770:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800c774:	bf8c      	ite	hi
 800c776:	2301      	movhi	r3, #1
 800c778:	2300      	movls	r3, #0
 800c77a:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800c77e:	bf0c      	ite	eq
 800c780:	2300      	moveq	r3, #0
 800c782:	f003 0301 	andne.w	r3, r3, #1
 800c786:	3a11      	subs	r2, #17
 800c788:	2a01      	cmp	r2, #1
 800c78a:	bf94      	ite	ls
 800c78c:	2300      	movls	r3, #0
 800c78e:	f003 0301 	andhi.w	r3, r3, #1
 800c792:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800c796:	bf0c      	ite	eq
 800c798:	2300      	moveq	r3, #0
 800c79a:	f003 0301 	andne.w	r3, r3, #1
 800c79e:	b11b      	cbz	r3, 800c7a8 <HAL_GPIO_Init+0xb8>
 800c7a0:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800c7a4:	f040 813e 	bne.w	800ca24 <HAL_GPIO_Init+0x334>
{
 800c7a8:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7aa:	f8df a260 	ldr.w	sl, [pc, #608]	; 800ca0c <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c7ae:	46b8      	mov	r8, r7
 800c7b0:	e003      	b.n	800c7ba <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800c7b2:	3501      	adds	r5, #1
 800c7b4:	2d10      	cmp	r5, #16
 800c7b6:	f000 80b3 	beq.w	800c920 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800c7ba:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c7bc:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800c7c0:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c7c2:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800c7c6:	ea34 0303 	bics.w	r3, r4, r3
 800c7ca:	d1f2      	bne.n	800c7b2 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c7cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7d0:	f001 0303 	and.w	r3, r1, #3
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	2a01      	cmp	r2, #1
 800c7d8:	f240 80a5 	bls.w	800c926 <HAL_GPIO_Init+0x236>
 800c7dc:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c7de:	f04f 0b03 	mov.w	fp, #3
 800c7e2:	fa0b fb07 	lsl.w	fp, fp, r7
 800c7e6:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d025      	beq.n	800c83a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800c7ee:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c7f2:	2802      	cmp	r0, #2
 800c7f4:	f200 80b3 	bhi.w	800c95e <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800c7f8:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c7fa:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c7fc:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c7fe:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c802:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800c806:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c808:	d117      	bne.n	800c83a <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800c80a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800c80e:	280f      	cmp	r0, #15
 800c810:	f200 80c8 	bhi.w	800c9a4 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800c814:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c816:	f005 0e07 	and.w	lr, r5, #7
 800c81a:	f04f 0c0f 	mov.w	ip, #15
 800c81e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c822:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800c826:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c828:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c82c:	fa0c fe0e 	lsl.w	lr, ip, lr
 800c830:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c834:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800c838:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800c83a:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c83c:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c83e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c842:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c846:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800c84a:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c84c:	d0b1      	beq.n	800c7b2 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c84e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800c852:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c856:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c85a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c85e:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c860:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800c864:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800c868:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c86c:	9203      	str	r2, [sp, #12]
 800c86e:	4a5e      	ldr	r2, [pc, #376]	; (800c9e8 <HAL_GPIO_Init+0x2f8>)
 800c870:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800c872:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c874:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800c876:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c878:	40a3      	lsls	r3, r4
 800c87a:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c87e:	4857      	ldr	r0, [pc, #348]	; (800c9dc <HAL_GPIO_Init+0x2ec>)
 800c880:	4286      	cmp	r6, r0
 800c882:	d025      	beq.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800c884:	9801      	ldr	r0, [sp, #4]
 800c886:	2800      	cmp	r0, #0
 800c888:	d07d      	beq.n	800c986 <HAL_GPIO_Init+0x296>
 800c88a:	4855      	ldr	r0, [pc, #340]	; (800c9e0 <HAL_GPIO_Init+0x2f0>)
 800c88c:	4286      	cmp	r6, r0
 800c88e:	d07f      	beq.n	800c990 <HAL_GPIO_Init+0x2a0>
 800c890:	4856      	ldr	r0, [pc, #344]	; (800c9ec <HAL_GPIO_Init+0x2fc>)
 800c892:	4286      	cmp	r6, r0
 800c894:	f000 8091 	beq.w	800c9ba <HAL_GPIO_Init+0x2ca>
 800c898:	4855      	ldr	r0, [pc, #340]	; (800c9f0 <HAL_GPIO_Init+0x300>)
 800c89a:	4286      	cmp	r6, r0
 800c89c:	f000 8092 	beq.w	800c9c4 <HAL_GPIO_Init+0x2d4>
 800c8a0:	4854      	ldr	r0, [pc, #336]	; (800c9f4 <HAL_GPIO_Init+0x304>)
 800c8a2:	4286      	cmp	r6, r0
 800c8a4:	f000 80b4 	beq.w	800ca10 <HAL_GPIO_Init+0x320>
 800c8a8:	4853      	ldr	r0, [pc, #332]	; (800c9f8 <HAL_GPIO_Init+0x308>)
 800c8aa:	4286      	cmp	r6, r0
 800c8ac:	f000 80b5 	beq.w	800ca1a <HAL_GPIO_Init+0x32a>
 800c8b0:	4852      	ldr	r0, [pc, #328]	; (800c9fc <HAL_GPIO_Init+0x30c>)
 800c8b2:	4286      	cmp	r6, r0
 800c8b4:	f000 808b 	beq.w	800c9ce <HAL_GPIO_Init+0x2de>
 800c8b8:	4851      	ldr	r0, [pc, #324]	; (800ca00 <HAL_GPIO_Init+0x310>)
 800c8ba:	4286      	cmp	r6, r0
 800c8bc:	f000 80b7 	beq.w	800ca2e <HAL_GPIO_Init+0x33e>
 800c8c0:	4850      	ldr	r0, [pc, #320]	; (800ca04 <HAL_GPIO_Init+0x314>)
 800c8c2:	4286      	cmp	r6, r0
 800c8c4:	bf0c      	ite	eq
 800c8c6:	2009      	moveq	r0, #9
 800c8c8:	200a      	movne	r0, #10
 800c8ca:	fa00 f404 	lsl.w	r4, r0, r4
 800c8ce:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800c8d0:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800c8d2:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800c8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ca08 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800c8d8:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800c8da:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c8dc:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800c8de:	4b4a      	ldr	r3, [pc, #296]	; (800ca08 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800c8e0:	bf54      	ite	pl
 800c8e2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800c8e4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c8e8:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800c8ea:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800c8ec:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800c8ee:	4b46      	ldr	r3, [pc, #280]	; (800ca08 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800c8f0:	bf54      	ite	pl
 800c8f2:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800c8f4:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c8f8:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800c8fa:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800c8fc:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800c8fe:	4b42      	ldr	r3, [pc, #264]	; (800ca08 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800c900:	bf54      	ite	pl
 800c902:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800c904:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800c908:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c90a:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800c90c:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800c90e:	4a3e      	ldr	r2, [pc, #248]	; (800ca08 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800c910:	bf54      	ite	pl
 800c912:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800c914:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800c918:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800c91a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c91c:	f47f af4d 	bne.w	800c7ba <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800c920:	b005      	add	sp, #20
 800c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c926:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800c92a:	2803      	cmp	r0, #3
 800c92c:	d820      	bhi.n	800c970 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800c92e:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c930:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800c934:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c938:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800c93c:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c93e:	ea20 000b 	bic.w	r0, r0, fp
 800c942:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800c946:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800c94a:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800c94c:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c94e:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c952:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800c956:	40ac      	lsls	r4, r5
 800c958:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800c95a:	6074      	str	r4, [r6, #4]
 800c95c:	e745      	b.n	800c7ea <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800c95e:	21ce      	movs	r1, #206	; 0xce
 800c960:	4820      	ldr	r0, [pc, #128]	; (800c9e4 <HAL_GPIO_Init+0x2f4>)
 800c962:	f7f8 ff85 	bl	8005870 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c966:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c96a:	f001 0303 	and.w	r3, r1, #3
 800c96e:	e743      	b.n	800c7f8 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800c970:	21bd      	movs	r1, #189	; 0xbd
 800c972:	481c      	ldr	r0, [pc, #112]	; (800c9e4 <HAL_GPIO_Init+0x2f4>)
 800c974:	f7f8 ff7c 	bl	8005870 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c978:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c97c:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c980:	f001 0303 	and.w	r3, r1, #3
 800c984:	e7d3      	b.n	800c92e <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c986:	2001      	movs	r0, #1
 800c988:	fa00 f404 	lsl.w	r4, r0, r4
 800c98c:	4323      	orrs	r3, r4
 800c98e:	e79f      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800c990:	2002      	movs	r0, #2
 800c992:	fa00 f404 	lsl.w	r4, r0, r4
 800c996:	4323      	orrs	r3, r4
 800c998:	e79a      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800c99a:	21ab      	movs	r1, #171	; 0xab
 800c99c:	4811      	ldr	r0, [pc, #68]	; (800c9e4 <HAL_GPIO_Init+0x2f4>)
 800c99e:	f7f8 ff67 	bl	8005870 <assert_failed>
 800c9a2:	e6e0      	b.n	800c766 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800c9a4:	21db      	movs	r1, #219	; 0xdb
 800c9a6:	480f      	ldr	r0, [pc, #60]	; (800c9e4 <HAL_GPIO_Init+0x2f4>)
 800c9a8:	f7f8 ff62 	bl	8005870 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c9ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c9b0:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c9b4:	f001 0303 	and.w	r3, r1, #3
 800c9b8:	e72c      	b.n	800c814 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c9ba:	2003      	movs	r0, #3
 800c9bc:	fa00 f404 	lsl.w	r4, r0, r4
 800c9c0:	4323      	orrs	r3, r4
 800c9c2:	e785      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800c9c4:	2004      	movs	r0, #4
 800c9c6:	fa00 f404 	lsl.w	r4, r0, r4
 800c9ca:	4323      	orrs	r3, r4
 800c9cc:	e780      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800c9ce:	2007      	movs	r0, #7
 800c9d0:	fa00 f404 	lsl.w	r4, r0, r4
 800c9d4:	4323      	orrs	r3, r4
 800c9d6:	e77b      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800c9d8:	40020400 	.word	0x40020400
 800c9dc:	40020000 	.word	0x40020000
 800c9e0:	40020800 	.word	0x40020800
 800c9e4:	0802def8 	.word	0x0802def8
 800c9e8:	40013800 	.word	0x40013800
 800c9ec:	40020c00 	.word	0x40020c00
 800c9f0:	40021000 	.word	0x40021000
 800c9f4:	40021400 	.word	0x40021400
 800c9f8:	40021800 	.word	0x40021800
 800c9fc:	40021c00 	.word	0x40021c00
 800ca00:	40022000 	.word	0x40022000
 800ca04:	40022400 	.word	0x40022400
 800ca08:	40013c00 	.word	0x40013c00
 800ca0c:	40023800 	.word	0x40023800
 800ca10:	2005      	movs	r0, #5
 800ca12:	fa00 f404 	lsl.w	r4, r0, r4
 800ca16:	4323      	orrs	r3, r4
 800ca18:	e75a      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800ca1a:	2006      	movs	r0, #6
 800ca1c:	fa00 f404 	lsl.w	r4, r0, r4
 800ca20:	4323      	orrs	r3, r4
 800ca22:	e755      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800ca24:	21ac      	movs	r1, #172	; 0xac
 800ca26:	4804      	ldr	r0, [pc, #16]	; (800ca38 <HAL_GPIO_Init+0x348>)
 800ca28:	f7f8 ff22 	bl	8005870 <assert_failed>
 800ca2c:	e6bc      	b.n	800c7a8 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ca2e:	2008      	movs	r0, #8
 800ca30:	fa00 f404 	lsl.w	r4, r0, r4
 800ca34:	4323      	orrs	r3, r4
 800ca36:	e74b      	b.n	800c8d0 <HAL_GPIO_Init+0x1e0>
 800ca38:	0802def8 	.word	0x0802def8

0800ca3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ca3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ca40:	4f6b      	ldr	r7, [pc, #428]	; (800cbf0 <HAL_GPIO_DeInit+0x1b4>)
{
 800ca42:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ca44:	4b6b      	ldr	r3, [pc, #428]	; (800cbf4 <HAL_GPIO_DeInit+0x1b8>)
{
 800ca46:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ca48:	42b8      	cmp	r0, r7
 800ca4a:	bf18      	it	ne
 800ca4c:	4298      	cmpne	r0, r3
 800ca4e:	bf14      	ite	ne
 800ca50:	2701      	movne	r7, #1
 800ca52:	2700      	moveq	r7, #0
 800ca54:	d027      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	d023      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca62:	4298      	cmp	r0, r3
 800ca64:	d01f      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca6a:	4298      	cmp	r0, r3
 800ca6c:	d01b      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca72:	4298      	cmp	r0, r3
 800ca74:	d017      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca7a:	4298      	cmp	r0, r3
 800ca7c:	d013      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca82:	4298      	cmp	r0, r3
 800ca84:	d00f      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca86:	4a5c      	ldr	r2, [pc, #368]	; (800cbf8 <HAL_GPIO_DeInit+0x1bc>)
 800ca88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8c:	4290      	cmp	r0, r2
 800ca8e:	bf18      	it	ne
 800ca90:	4298      	cmpne	r0, r3
 800ca92:	d008      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca98:	4298      	cmp	r0, r3
 800ca9a:	d004      	beq.n	800caa6 <HAL_GPIO_DeInit+0x6a>
 800ca9c:	f240 112b 	movw	r1, #299	; 0x12b
 800caa0:	4856      	ldr	r0, [pc, #344]	; (800cbfc <HAL_GPIO_DeInit+0x1c0>)
 800caa2:	f7f8 fee5 	bl	8005870 <assert_failed>
{
 800caa6:	2300      	movs	r3, #0
 800caa8:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cc1c <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800caac:	f8df a140 	ldr.w	sl, [pc, #320]	; 800cbf0 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cab0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800cc20 <HAL_GPIO_DeInit+0x1e4>
 800cab4:	e002      	b.n	800cabc <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800cab6:	3301      	adds	r3, #1
 800cab8:	2b10      	cmp	r3, #16
 800caba:	d07b      	beq.n	800cbb4 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800cabc:	2001      	movs	r0, #1
 800cabe:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800cac2:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800cac6:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800caca:	d1f4      	bne.n	800cab6 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800cacc:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cad0:	f003 0103 	and.w	r1, r3, #3
 800cad4:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cad8:	4554      	cmp	r4, sl
 800cada:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cadc:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800cae0:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cae4:	fa0c fc01 	lsl.w	ip, ip, r1
 800cae8:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800caec:	d01e      	beq.n	800cb2c <HAL_GPIO_DeInit+0xf0>
 800caee:	2f00      	cmp	r7, #0
 800caf0:	d063      	beq.n	800cbba <HAL_GPIO_DeInit+0x17e>
 800caf2:	4843      	ldr	r0, [pc, #268]	; (800cc00 <HAL_GPIO_DeInit+0x1c4>)
 800caf4:	4284      	cmp	r4, r0
 800caf6:	d063      	beq.n	800cbc0 <HAL_GPIO_DeInit+0x184>
 800caf8:	4842      	ldr	r0, [pc, #264]	; (800cc04 <HAL_GPIO_DeInit+0x1c8>)
 800cafa:	4284      	cmp	r4, r0
 800cafc:	d064      	beq.n	800cbc8 <HAL_GPIO_DeInit+0x18c>
 800cafe:	4842      	ldr	r0, [pc, #264]	; (800cc08 <HAL_GPIO_DeInit+0x1cc>)
 800cb00:	4284      	cmp	r4, r0
 800cb02:	d065      	beq.n	800cbd0 <HAL_GPIO_DeInit+0x194>
 800cb04:	4841      	ldr	r0, [pc, #260]	; (800cc0c <HAL_GPIO_DeInit+0x1d0>)
 800cb06:	4284      	cmp	r4, r0
 800cb08:	d066      	beq.n	800cbd8 <HAL_GPIO_DeInit+0x19c>
 800cb0a:	4841      	ldr	r0, [pc, #260]	; (800cc10 <HAL_GPIO_DeInit+0x1d4>)
 800cb0c:	4284      	cmp	r4, r0
 800cb0e:	d053      	beq.n	800cbb8 <HAL_GPIO_DeInit+0x17c>
 800cb10:	4840      	ldr	r0, [pc, #256]	; (800cc14 <HAL_GPIO_DeInit+0x1d8>)
 800cb12:	4284      	cmp	r4, r0
 800cb14:	d064      	beq.n	800cbe0 <HAL_GPIO_DeInit+0x1a4>
 800cb16:	4838      	ldr	r0, [pc, #224]	; (800cbf8 <HAL_GPIO_DeInit+0x1bc>)
 800cb18:	4284      	cmp	r4, r0
 800cb1a:	d065      	beq.n	800cbe8 <HAL_GPIO_DeInit+0x1ac>
 800cb1c:	483e      	ldr	r0, [pc, #248]	; (800cc18 <HAL_GPIO_DeInit+0x1dc>)
 800cb1e:	4284      	cmp	r4, r0
 800cb20:	bf14      	ite	ne
 800cb22:	200a      	movne	r0, #10
 800cb24:	2009      	moveq	r0, #9
 800cb26:	fa00 f101 	lsl.w	r1, r0, r1
 800cb2a:	e000      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4588      	cmp	r8, r1
 800cb30:	d11b      	bne.n	800cb6a <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cb32:	f8d9 1000 	ldr.w	r1, [r9]
 800cb36:	ea21 010e 	bic.w	r1, r1, lr
 800cb3a:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cb3e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb42:	ea21 010e 	bic.w	r1, r1, lr
 800cb46:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cb4a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800cb4e:	ea21 010e 	bic.w	r1, r1, lr
 800cb52:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cb56:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cb5a:	ea21 010e 	bic.w	r1, r1, lr
 800cb5e:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cb62:	68b1      	ldr	r1, [r6, #8]
 800cb64:	ea21 010c 	bic.w	r1, r1, ip
 800cb68:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cb6a:	0059      	lsls	r1, r3, #1
 800cb6c:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cb6e:	f003 0c07 	and.w	ip, r3, #7
 800cb72:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cb74:	fa00 f101 	lsl.w	r1, r0, r1
 800cb78:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cb7a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cb7e:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cb82:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cb86:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cb88:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800cb90:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cb92:	6a06      	ldr	r6, [r0, #32]
 800cb94:	ea26 060c 	bic.w	r6, r6, ip
 800cb98:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cb9a:	68e0      	ldr	r0, [r4, #12]
 800cb9c:	ea20 0001 	bic.w	r0, r0, r1
 800cba0:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cba2:	6860      	ldr	r0, [r4, #4]
 800cba4:	ea20 0202 	bic.w	r2, r0, r2
 800cba8:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cbaa:	68a2      	ldr	r2, [r4, #8]
 800cbac:	ea22 0101 	bic.w	r1, r2, r1
 800cbb0:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cbb2:	d183      	bne.n	800cabc <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800cbb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cbb8:	2006      	movs	r0, #6
 800cbba:	fa00 f101 	lsl.w	r1, r0, r1
 800cbbe:	e7b6      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbc0:	2002      	movs	r0, #2
 800cbc2:	fa00 f101 	lsl.w	r1, r0, r1
 800cbc6:	e7b2      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbc8:	2003      	movs	r0, #3
 800cbca:	fa00 f101 	lsl.w	r1, r0, r1
 800cbce:	e7ae      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbd0:	2004      	movs	r0, #4
 800cbd2:	fa00 f101 	lsl.w	r1, r0, r1
 800cbd6:	e7aa      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbd8:	2005      	movs	r0, #5
 800cbda:	fa00 f101 	lsl.w	r1, r0, r1
 800cbde:	e7a6      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbe0:	2007      	movs	r0, #7
 800cbe2:	fa00 f101 	lsl.w	r1, r0, r1
 800cbe6:	e7a2      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbe8:	2008      	movs	r0, #8
 800cbea:	fa00 f101 	lsl.w	r1, r0, r1
 800cbee:	e79e      	b.n	800cb2e <HAL_GPIO_DeInit+0xf2>
 800cbf0:	40020000 	.word	0x40020000
 800cbf4:	40020400 	.word	0x40020400
 800cbf8:	40022000 	.word	0x40022000
 800cbfc:	0802def8 	.word	0x0802def8
 800cc00:	40020800 	.word	0x40020800
 800cc04:	40020c00 	.word	0x40020c00
 800cc08:	40021000 	.word	0x40021000
 800cc0c:	40021400 	.word	0x40021400
 800cc10:	40021800 	.word	0x40021800
 800cc14:	40021c00 	.word	0x40021c00
 800cc18:	40022400 	.word	0x40022400
 800cc1c:	40013800 	.word	0x40013800
 800cc20:	40013c00 	.word	0x40013c00

0800cc24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc28:	460c      	mov	r4, r1
 800cc2a:	b129      	cbz	r1, 800cc38 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cc2c:	692b      	ldr	r3, [r5, #16]
 800cc2e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800cc30:	bf14      	ite	ne
 800cc32:	2001      	movne	r0, #1
 800cc34:	2000      	moveq	r0, #0
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc38:	f240 1177 	movw	r1, #375	; 0x177
 800cc3c:	4801      	ldr	r0, [pc, #4]	; (800cc44 <HAL_GPIO_ReadPin+0x20>)
 800cc3e:	f7f8 fe17 	bl	8005870 <assert_failed>
 800cc42:	e7f3      	b.n	800cc2c <HAL_GPIO_ReadPin+0x8>
 800cc44:	0802def8 	.word	0x0802def8

0800cc48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc4c:	460c      	mov	r4, r1
{
 800cc4e:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc50:	b161      	cbz	r1, 800cc6c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800cc52:	2d01      	cmp	r5, #1
 800cc54:	d803      	bhi.n	800cc5e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800cc56:	b905      	cbnz	r5, 800cc5a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cc58:	0424      	lsls	r4, r4, #16
 800cc5a:	61b4      	str	r4, [r6, #24]
  }
}
 800cc5c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800cc5e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800cc62:	4805      	ldr	r0, [pc, #20]	; (800cc78 <HAL_GPIO_WritePin+0x30>)
 800cc64:	f7f8 fe04 	bl	8005870 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cc68:	61b4      	str	r4, [r6, #24]
}
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc6c:	f240 1197 	movw	r1, #407	; 0x197
 800cc70:	4801      	ldr	r0, [pc, #4]	; (800cc78 <HAL_GPIO_WritePin+0x30>)
 800cc72:	f7f8 fdfd 	bl	8005870 <assert_failed>
 800cc76:	e7ec      	b.n	800cc52 <HAL_GPIO_WritePin+0xa>
 800cc78:	0802def8 	.word	0x0802def8

0800cc7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc80:	460c      	mov	r4, r1
 800cc82:	b141      	cbz	r1, 800cc96 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cc84:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cc86:	ea04 0301 	and.w	r3, r4, r1
 800cc8a:	ea24 0401 	bic.w	r4, r4, r1
 800cc8e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800cc92:	61ac      	str	r4, [r5, #24]
}
 800cc94:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cc96:	f240 11af 	movw	r1, #431	; 0x1af
 800cc9a:	4802      	ldr	r0, [pc, #8]	; (800cca4 <HAL_GPIO_TogglePin+0x28>)
 800cc9c:	f7f8 fde8 	bl	8005870 <assert_failed>
 800cca0:	e7f0      	b.n	800cc84 <HAL_GPIO_TogglePin+0x8>
 800cca2:	bf00      	nop
 800cca4:	0802def8 	.word	0x0802def8

0800cca8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop

0800ccac <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ccac:	4a04      	ldr	r2, [pc, #16]	; (800ccc0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800ccae:	6951      	ldr	r1, [r2, #20]
 800ccb0:	4201      	tst	r1, r0
 800ccb2:	d100      	bne.n	800ccb6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800ccb4:	4770      	bx	lr
{
 800ccb6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ccb8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ccba:	f7ff fff5 	bl	800cca8 <HAL_GPIO_EXTI_Callback>
}
 800ccbe:	bd08      	pop	{r3, pc}
 800ccc0:	40013c00 	.word	0x40013c00

0800ccc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	460d      	mov	r5, r1
 800ccca:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cccc:	4926      	ldr	r1, [pc, #152]	; (800cd68 <I2C_TransferConfig+0xa4>)
{
 800ccce:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ccd0:	4a26      	ldr	r2, [pc, #152]	; (800cd6c <I2C_TransferConfig+0xa8>)
{
 800ccd2:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ccd4:	6803      	ldr	r3, [r0, #0]
{
 800ccd6:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	bf18      	it	ne
 800ccdc:	428b      	cmpne	r3, r1
 800ccde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cce2:	bf14      	ite	ne
 800cce4:	2201      	movne	r2, #1
 800cce6:	2200      	moveq	r2, #0
 800cce8:	428b      	cmp	r3, r1
 800ccea:	bf0c      	ite	eq
 800ccec:	2200      	moveq	r2, #0
 800ccee:	f002 0201 	andne.w	r2, r2, #1
 800ccf2:	b112      	cbz	r2, 800ccfa <I2C_TransferConfig+0x36>
 800ccf4:	4a1e      	ldr	r2, [pc, #120]	; (800cd70 <I2C_TransferConfig+0xac>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d123      	bne.n	800cd42 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ccfa:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800ccfe:	d002      	beq.n	800cd06 <I2C_TransferConfig+0x42>
 800cd00:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800cd04:	d129      	bne.n	800cd5a <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cd06:	4b1b      	ldr	r3, [pc, #108]	; (800cd74 <I2C_TransferConfig+0xb0>)
 800cd08:	429f      	cmp	r7, r3
 800cd0a:	d005      	beq.n	800cd18 <I2C_TransferConfig+0x54>
 800cd0c:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800cd10:	4a19      	ldr	r2, [pc, #100]	; (800cd78 <I2C_TransferConfig+0xb4>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d000      	beq.n	800cd18 <I2C_TransferConfig+0x54>
 800cd16:	b9d7      	cbnz	r7, 800cd4e <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd18:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd1c:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd20:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800cd24:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd28:	4a14      	ldr	r2, [pc, #80]	; (800cd7c <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd2a:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd2c:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800cd30:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd36:	ea27 0702 	bic.w	r7, r7, r2
 800cd3a:	433b      	orrs	r3, r7
 800cd3c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cd42:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800cd46:	480e      	ldr	r0, [pc, #56]	; (800cd80 <I2C_TransferConfig+0xbc>)
 800cd48:	f7f8 fd92 	bl	8005870 <assert_failed>
 800cd4c:	e7d5      	b.n	800ccfa <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cd4e:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800cd52:	480b      	ldr	r0, [pc, #44]	; (800cd80 <I2C_TransferConfig+0xbc>)
 800cd54:	f7f8 fd8c 	bl	8005870 <assert_failed>
 800cd58:	e7de      	b.n	800cd18 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cd5a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800cd5e:	4808      	ldr	r0, [pc, #32]	; (800cd80 <I2C_TransferConfig+0xbc>)
 800cd60:	f7f8 fd86 	bl	8005870 <assert_failed>
 800cd64:	e7cf      	b.n	800cd06 <I2C_TransferConfig+0x42>
 800cd66:	bf00      	nop
 800cd68:	40005800 	.word	0x40005800
 800cd6c:	40005400 	.word	0x40005400
 800cd70:	40006000 	.word	0x40006000
 800cd74:	80004000 	.word	0x80004000
 800cd78:	80002000 	.word	0x80002000
 800cd7c:	03ff63ff 	.word	0x03ff63ff
 800cd80:	0802df34 	.word	0x0802df34

0800cd84 <I2C_IsErrorOccurred>:
{
 800cd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800cd88:	6803      	ldr	r3, [r0, #0]
{
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800cd8e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cd90:	f011 0110 	ands.w	r1, r1, #16
 800cd94:	d045      	beq.n	800ce22 <I2C_IsErrorOccurred+0x9e>
 800cd96:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800cd98:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd9c:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800cd9e:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cda2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	0696      	lsls	r6, r2, #26
 800cda8:	f100 808d 	bmi.w	800cec6 <I2C_IsErrorOccurred+0x142>
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	f040 808d 	bne.w	800cece <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800cdb4:	1c6a      	adds	r2, r5, #1
 800cdb6:	d152      	bne.n	800ce5e <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cdb8:	699a      	ldr	r2, [r3, #24]
 800cdba:	0697      	lsls	r7, r2, #26
 800cdbc:	d5fc      	bpl.n	800cdb8 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdbe:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800cdc0:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800cdc2:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdc6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800cdc8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cdca:	05d5      	lsls	r5, r2, #23
 800cdcc:	d42d      	bmi.n	800ce2a <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cdce:	0557      	lsls	r7, r2, #21
 800cdd0:	d53d      	bpl.n	800ce4e <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cdd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800cdd6:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cdda:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cddc:	0596      	lsls	r6, r2, #22
 800cdde:	d504      	bpl.n	800cdea <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cde0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800cde4:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cde8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cdea:	699a      	ldr	r2, [r3, #24]
 800cdec:	0790      	lsls	r0, r2, #30
 800cdee:	d501      	bpl.n	800cdf4 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cdf4:	699a      	ldr	r2, [r3, #24]
 800cdf6:	07d2      	lsls	r2, r2, #31
 800cdf8:	d524      	bpl.n	800ce44 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800cdfa:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cdfc:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800cdfe:	4835      	ldr	r0, [pc, #212]	; (800ced4 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800ce00:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800ce04:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce06:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800ce08:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800ce0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800ce0c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800ce10:	4319      	orrs	r1, r3
 800ce12:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ce14:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800ce1c:	4648      	mov	r0, r9
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ce22:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800ce24:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ce26:	05d5      	lsls	r5, r2, #23
 800ce28:	d5d1      	bpl.n	800cdce <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ce2a:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800ce2e:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ce32:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ce34:	0550      	lsls	r0, r2, #21
 800ce36:	d5d1      	bpl.n	800cddc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ce38:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800ce3c:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ce40:	61d8      	str	r0, [r3, #28]
 800ce42:	e7cb      	b.n	800cddc <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ce44:	699a      	ldr	r2, [r3, #24]
 800ce46:	f042 0201 	orr.w	r2, r2, #1
 800ce4a:	619a      	str	r2, [r3, #24]
 800ce4c:	e7d5      	b.n	800cdfa <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ce4e:	0595      	lsls	r5, r2, #22
 800ce50:	d4c6      	bmi.n	800cde0 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	d1c8      	bne.n	800cdea <I2C_IsErrorOccurred+0x66>
}
 800ce58:	4648      	mov	r0, r9
 800ce5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ce5e:	f7fc f971 	bl	8009144 <HAL_GetTick>
 800ce62:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ce64:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ce66:	42a8      	cmp	r0, r5
 800ce68:	d801      	bhi.n	800ce6e <I2C_IsErrorOccurred+0xea>
 800ce6a:	2d00      	cmp	r5, #0
 800ce6c:	d19a      	bne.n	800cda4 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ce6e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ce70:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ce74:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800ce76:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ce78:	040e      	lsls	r6, r1, #16
 800ce7a:	d50d      	bpl.n	800ce98 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800ce7c:	0441      	lsls	r1, r0, #17
 800ce7e:	d40b      	bmi.n	800ce98 <I2C_IsErrorOccurred+0x114>
 800ce80:	2a20      	cmp	r2, #32
 800ce82:	d009      	beq.n	800ce98 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce8a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ce8c:	f7fc f95a 	bl	8009144 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce90:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800ce92:	4607      	mov	r7, r0
 800ce94:	e000      	b.n	800ce98 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	699e      	ldr	r6, [r3, #24]
 800ce9a:	f016 0620 	ands.w	r6, r6, #32
 800ce9e:	d181      	bne.n	800cda4 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cea0:	f7fc f950 	bl	8009144 <HAL_GetTick>
 800cea4:	1bc0      	subs	r0, r0, r7
 800cea6:	2819      	cmp	r0, #25
 800cea8:	d9f5      	bls.n	800ce96 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ceaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800ceac:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800ceb0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ceb4:	f043 0320 	orr.w	r3, r3, #32
 800ceb8:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ceba:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cebe:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800cec0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800cec4:	e7e8      	b.n	800ce98 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800cec6:	f1b9 0f00 	cmp.w	r9, #0
 800ceca:	f43f af78 	beq.w	800cdbe <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800cece:	2104      	movs	r1, #4
 800ced0:	e7a8      	b.n	800ce24 <I2C_IsErrorOccurred+0xa0>
 800ced2:	bf00      	nop
 800ced4:	fe00e800 	.word	0xfe00e800

0800ced8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800ced8:	b570      	push	{r4, r5, r6, lr}
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cee0:	e004      	b.n	800ceec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cee2:	f7ff ff4f 	bl	800cd84 <I2C_IsErrorOccurred>
 800cee6:	b950      	cbnz	r0, 800cefe <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800cee8:	1c6a      	adds	r2, r5, #1
 800ceea:	d10a      	bne.n	800cf02 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ceec:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ceee:	4632      	mov	r2, r6
 800cef0:	4629      	mov	r1, r5
 800cef2:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	079b      	lsls	r3, r3, #30
 800cef8:	d5f3      	bpl.n	800cee2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800cefa:	2000      	movs	r0, #0
}
 800cefc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800cefe:	2001      	movs	r0, #1
}
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf02:	f7fc f91f 	bl	8009144 <HAL_GetTick>
 800cf06:	1b80      	subs	r0, r0, r6
 800cf08:	42a8      	cmp	r0, r5
 800cf0a:	d801      	bhi.n	800cf10 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	d1ed      	bne.n	800ceec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf10:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf12:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf14:	2200      	movs	r2, #0
        return HAL_ERROR;
 800cf16:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf18:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800cf1a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf1e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf20:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf24:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	bf00      	nop

0800cf2c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	4605      	mov	r5, r0
 800cf30:	460c      	mov	r4, r1
 800cf32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf34:	e008      	b.n	800cf48 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf36:	f7ff ff25 	bl	800cd84 <I2C_IsErrorOccurred>
 800cf3a:	b9d8      	cbnz	r0, 800cf74 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf3c:	f7fc f902 	bl	8009144 <HAL_GetTick>
 800cf40:	1b80      	subs	r0, r0, r6
 800cf42:	42a0      	cmp	r0, r4
 800cf44:	d809      	bhi.n	800cf5a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800cf46:	b144      	cbz	r4, 800cf5a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf48:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf4a:	4632      	mov	r2, r6
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	069b      	lsls	r3, r3, #26
 800cf54:	d5ef      	bpl.n	800cf36 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800cf56:	2000      	movs	r0, #0
}
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf5a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf5c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf5e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800cf60:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf62:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800cf64:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf68:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf6a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf6e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800cf72:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800cf74:	2001      	movs	r0, #1
}
 800cf76:	bd70      	pop	{r4, r5, r6, pc}

0800cf78 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	460d      	mov	r5, r1
 800cf7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cf80:	e00c      	b.n	800cf9c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf82:	f7ff feff 	bl	800cd84 <I2C_IsErrorOccurred>
 800cf86:	b9e8      	cbnz	r0, 800cfc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	699a      	ldr	r2, [r3, #24]
 800cf8c:	0691      	lsls	r1, r2, #26
 800cf8e:	d41b      	bmi.n	800cfc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf90:	f7fc f8d8 	bl	8009144 <HAL_GetTick>
 800cf94:	1b80      	subs	r0, r0, r6
 800cf96:	42a8      	cmp	r0, r5
 800cf98:	d809      	bhi.n	800cfae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800cf9a:	b145      	cbz	r5, 800cfae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cf9c:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	075b      	lsls	r3, r3, #29
 800cfa8:	d5eb      	bpl.n	800cf82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800cfaa:	2000      	movs	r0, #0
}
 800cfac:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cfb0:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800cfb2:	2100      	movs	r1, #0
      return HAL_ERROR;
 800cfb4:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfb6:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800cfb8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfbc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cfbe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800cfc4:	2001      	movs	r0, #1
}
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800cfc8:	699a      	ldr	r2, [r3, #24]
 800cfca:	0752      	lsls	r2, r2, #29
 800cfcc:	d502      	bpl.n	800cfd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800cfce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	d1ea      	bne.n	800cfaa <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	f012 0210 	ands.w	r2, r2, #16
 800cfda:	d012      	beq.n	800d002 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfdc:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800cfde:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe0:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800cfe2:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfe4:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800cfe6:	4808      	ldr	r0, [pc, #32]	; (800d008 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfe8:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfea:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	4002      	ands	r2, r0
        return HAL_ERROR;
 800cff0:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800cff2:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800cff4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800cff8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cffc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d000:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d002:	6462      	str	r2, [r4, #68]	; 0x44
 800d004:	e7ee      	b.n	800cfe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800d006:	bf00      	nop
 800d008:	fe00e800 	.word	0xfe00e800

0800d00c <I2C_RequestMemoryRead>:
{
 800d00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d010:	4c26      	ldr	r4, [pc, #152]	; (800d0ac <I2C_RequestMemoryRead+0xa0>)
{
 800d012:	b083      	sub	sp, #12
 800d014:	4698      	mov	r8, r3
 800d016:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d018:	9400      	str	r4, [sp, #0]
{
 800d01a:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d01c:	2300      	movs	r3, #0
 800d01e:	fa5f f288 	uxtb.w	r2, r8
{
 800d022:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d026:	f7ff fe4d 	bl	800ccc4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d02a:	4628      	mov	r0, r5
 800d02c:	463a      	mov	r2, r7
 800d02e:	4621      	mov	r1, r4
 800d030:	f7ff ff52 	bl	800ced8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d034:	b9e0      	cbnz	r0, 800d070 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d036:	f1b8 0f01 	cmp.w	r8, #1
 800d03a:	4606      	mov	r6, r0
 800d03c:	d10d      	bne.n	800d05a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d03e:	fa5f f389 	uxtb.w	r3, r9
 800d042:	682a      	ldr	r2, [r5, #0]
 800d044:	6293      	str	r3, [r2, #40]	; 0x28
 800d046:	e001      	b.n	800d04c <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800d048:	1c61      	adds	r1, r4, #1
 800d04a:	d116      	bne.n	800d07a <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d04c:	6993      	ldr	r3, [r2, #24]
 800d04e:	065b      	lsls	r3, r3, #25
 800d050:	d5fa      	bpl.n	800d048 <I2C_RequestMemoryRead+0x3c>
}
 800d052:	4630      	mov	r0, r6
 800d054:	b003      	add	sp, #12
 800d056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d05a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800d05e:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d060:	4621      	mov	r1, r4
 800d062:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d064:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d066:	463a      	mov	r2, r7
 800d068:	f7ff ff36 	bl	800ced8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d0e6      	beq.n	800d03e <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800d070:	2601      	movs	r6, #1
}
 800d072:	4630      	mov	r0, r6
 800d074:	b003      	add	sp, #12
 800d076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d07a:	f7fc f863 	bl	8009144 <HAL_GetTick>
 800d07e:	1bc0      	subs	r0, r0, r7
 800d080:	4284      	cmp	r4, r0
 800d082:	d302      	bcc.n	800d08a <I2C_RequestMemoryRead+0x7e>
 800d084:	b10c      	cbz	r4, 800d08a <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d086:	682a      	ldr	r2, [r5, #0]
 800d088:	e7e0      	b.n	800d04c <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d08a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d08c:	2120      	movs	r1, #32
    return HAL_ERROR;
 800d08e:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d090:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d092:	430b      	orrs	r3, r1
}
 800d094:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800d096:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d09a:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d09c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0a0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d0a4:	b003      	add	sp, #12
 800d0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0aa:	bf00      	nop
 800d0ac:	80002000 	.word	0x80002000

0800d0b0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f000 80c1 	beq.w	800d238 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d0b6:	4b61      	ldr	r3, [pc, #388]	; (800d23c <HAL_I2C_Init+0x18c>)
 800d0b8:	6802      	ldr	r2, [r0, #0]
 800d0ba:	4961      	ldr	r1, [pc, #388]	; (800d240 <HAL_I2C_Init+0x190>)
{
 800d0bc:	b510      	push	{r4, lr}
 800d0be:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d0c0:	4860      	ldr	r0, [pc, #384]	; (800d244 <HAL_I2C_Init+0x194>)
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	bf18      	it	ne
 800d0c6:	4282      	cmpne	r2, r0
 800d0c8:	bf14      	ite	ne
 800d0ca:	2301      	movne	r3, #1
 800d0cc:	2300      	moveq	r3, #0
 800d0ce:	428a      	cmp	r2, r1
 800d0d0:	bf0c      	ite	eq
 800d0d2:	2300      	moveq	r3, #0
 800d0d4:	f003 0301 	andne.w	r3, r3, #1
 800d0d8:	b11b      	cbz	r3, 800d0e2 <HAL_I2C_Init+0x32>
 800d0da:	4b5b      	ldr	r3, [pc, #364]	; (800d248 <HAL_I2C_Init+0x198>)
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	f040 80a5 	bne.w	800d22c <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d0e2:	68a3      	ldr	r3, [r4, #8]
 800d0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0e8:	f080 809a 	bcs.w	800d220 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d0ec:	68e3      	ldr	r3, [r4, #12]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d855      	bhi.n	800d1a0 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d0f4:	6923      	ldr	r3, [r4, #16]
 800d0f6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d0fa:	d15a      	bne.n	800d1b2 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d0fc:	6963      	ldr	r3, [r4, #20]
 800d0fe:	2bff      	cmp	r3, #255	; 0xff
 800d100:	d85f      	bhi.n	800d1c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d102:	69a3      	ldr	r3, [r4, #24]
 800d104:	2b07      	cmp	r3, #7
 800d106:	d864      	bhi.n	800d1d2 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d108:	69e3      	ldr	r3, [r4, #28]
 800d10a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d10e:	d169      	bne.n	800d1e4 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d110:	6a23      	ldr	r3, [r4, #32]
 800d112:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d116:	d16e      	bne.n	800d1f6 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d118:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d11c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d120:	2b00      	cmp	r3, #0
 800d122:	d073      	beq.n	800d20c <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800d124:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d126:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d128:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d12a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d12e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d134:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800d136:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d13a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800d13c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d13e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d140:	689a      	ldr	r2, [r3, #8]
 800d142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d146:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d148:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d14a:	d065      	beq.n	800d218 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d14c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d150:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d152:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d154:	d102      	bne.n	800d15c <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d15a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d15c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800d15e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d162:	493a      	ldr	r1, [pc, #232]	; (800d24c <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d164:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d166:	4301      	orrs	r1, r0
 800d168:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d16a:	68d9      	ldr	r1, [r3, #12]
 800d16c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800d170:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d172:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d176:	4302      	orrs	r2, r0
 800d178:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d17c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d180:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d182:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d184:	4301      	orrs	r1, r0
  return HAL_OK;
 800d186:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d188:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d18a:	6819      	ldr	r1, [r3, #0]
 800d18c:	f041 0101 	orr.w	r1, r1, #1
 800d190:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d192:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d194:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d198:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d19a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d19e:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d1a0:	f240 2117 	movw	r1, #535	; 0x217
 800d1a4:	482a      	ldr	r0, [pc, #168]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1a6:	f7f8 fb63 	bl	8005870 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d1b0:	d0a4      	beq.n	800d0fc <HAL_I2C_Init+0x4c>
 800d1b2:	f44f 7106 	mov.w	r1, #536	; 0x218
 800d1b6:	4826      	ldr	r0, [pc, #152]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1b8:	f7f8 fb5a 	bl	8005870 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d1bc:	6963      	ldr	r3, [r4, #20]
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	d99f      	bls.n	800d102 <HAL_I2C_Init+0x52>
 800d1c2:	f240 2119 	movw	r1, #537	; 0x219
 800d1c6:	4822      	ldr	r0, [pc, #136]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1c8:	f7f8 fb52 	bl	8005870 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d1cc:	69a3      	ldr	r3, [r4, #24]
 800d1ce:	2b07      	cmp	r3, #7
 800d1d0:	d99a      	bls.n	800d108 <HAL_I2C_Init+0x58>
 800d1d2:	f240 211a 	movw	r1, #538	; 0x21a
 800d1d6:	481e      	ldr	r0, [pc, #120]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1d8:	f7f8 fb4a 	bl	8005870 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d1dc:	69e3      	ldr	r3, [r4, #28]
 800d1de:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d1e2:	d095      	beq.n	800d110 <HAL_I2C_Init+0x60>
 800d1e4:	f240 211b 	movw	r1, #539	; 0x21b
 800d1e8:	4819      	ldr	r0, [pc, #100]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1ea:	f7f8 fb41 	bl	8005870 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d1ee:	6a23      	ldr	r3, [r4, #32]
 800d1f0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d1f4:	d090      	beq.n	800d118 <HAL_I2C_Init+0x68>
 800d1f6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800d1fa:	4815      	ldr	r0, [pc, #84]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d1fc:	f7f8 fb38 	bl	8005870 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d200:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d204:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d18b      	bne.n	800d124 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800d20c:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d20e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d212:	f7fa f907 	bl	8007424 <HAL_I2C_MspInit>
 800d216:	e785      	b.n	800d124 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d21c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d21e:	e79d      	b.n	800d15c <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d220:	f240 2116 	movw	r1, #534	; 0x216
 800d224:	480a      	ldr	r0, [pc, #40]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d226:	f7f8 fb23 	bl	8005870 <assert_failed>
 800d22a:	e75f      	b.n	800d0ec <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d22c:	f240 2115 	movw	r1, #533	; 0x215
 800d230:	4807      	ldr	r0, [pc, #28]	; (800d250 <HAL_I2C_Init+0x1a0>)
 800d232:	f7f8 fb1d 	bl	8005870 <assert_failed>
 800d236:	e754      	b.n	800d0e2 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800d238:	2001      	movs	r0, #1
}
 800d23a:	4770      	bx	lr
 800d23c:	40005400 	.word	0x40005400
 800d240:	40005c00 	.word	0x40005c00
 800d244:	40005800 	.word	0x40005800
 800d248:	40006000 	.word	0x40006000
 800d24c:	02008000 	.word	0x02008000
 800d250:	0802df34 	.word	0x0802df34

0800d254 <HAL_I2C_Master_Transmit>:
{
 800d254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d258:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d25a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d25e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d260:	2b20      	cmp	r3, #32
{
 800d262:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d264:	d16d      	bne.n	800d342 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800d266:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d26a:	4604      	mov	r4, r0
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d068      	beq.n	800d342 <HAL_I2C_Master_Transmit+0xee>
 800d270:	2301      	movs	r3, #1
 800d272:	460f      	mov	r7, r1
 800d274:	4691      	mov	r9, r2
 800d276:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d27a:	f7fb ff63 	bl	8009144 <HAL_GetTick>
 800d27e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d280:	e004      	b.n	800d28c <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d282:	f7fb ff5f 	bl	8009144 <HAL_GetTick>
 800d286:	1b80      	subs	r0, r0, r6
 800d288:	2819      	cmp	r0, #25
 800d28a:	d85e      	bhi.n	800d34a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	6999      	ldr	r1, [r3, #24]
 800d290:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d294:	d1f5      	bne.n	800d282 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d296:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800d298:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d29c:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d29e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2a8:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d2aa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	2bff      	cmp	r3, #255	; 0xff
 800d2b4:	d86d      	bhi.n	800d392 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800d2b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4b48      	ldr	r3, [pc, #288]	; (800d3dc <HAL_I2C_Master_Transmit+0x188>)
 800d2bc:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d2be:	b292      	uxth	r2, r2
 800d2c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d2ca:	f7ff fcfb 	bl	800ccc4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2ce:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2d2:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d2d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2d8:	4632      	mov	r2, r6
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	b1eb      	cbz	r3, 800d31e <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2e2:	f7ff fdf9 	bl	800ced8 <I2C_WaitOnTXISFlagUntilTimeout>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d174      	bne.n	800d3d4 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d2ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d2ec:	6821      	ldr	r1, [r4, #0]
 800d2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d2f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d2f4:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d2f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d2f8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d2fa:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d2fc:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d2fe:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d300:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d302:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d304:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d306:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d308:	b292      	uxth	r2, r2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d1e3      	bne.n	800d2d6 <HAL_I2C_Master_Transmit+0x82>
 800d30e:	bb6a      	cbnz	r2, 800d36c <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800d310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d312:	4632      	mov	r2, r6
 800d314:	4629      	mov	r1, r5
 800d316:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d318:	b29b      	uxth	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e1      	bne.n	800d2e2 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d31e:	f7ff fe05 	bl	800cf2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d322:	2800      	cmp	r0, #0
 800d324:	d156      	bne.n	800d3d4 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d32a:	4d2d      	ldr	r5, [pc, #180]	; (800d3e0 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d32c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	402a      	ands	r2, r5
 800d332:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d334:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d338:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d33c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d340:	e000      	b.n	800d344 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800d342:	2002      	movs	r0, #2
}
 800d344:	b003      	add	sp, #12
 800d346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d34a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d34c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d34e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d350:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d352:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d354:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d358:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d35a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d35e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d362:	b003      	add	sp, #12
 800d364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800d368:	1c6a      	adds	r2, r5, #1
 800d36a:	d11d      	bne.n	800d3a8 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d36c:	698b      	ldr	r3, [r1, #24]
 800d36e:	061b      	lsls	r3, r3, #24
 800d370:	d5fa      	bpl.n	800d368 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d374:	b29b      	uxth	r3, r3
 800d376:	2bff      	cmp	r3, #255	; 0xff
 800d378:	d91f      	bls.n	800d3ba <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d37a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d37e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d382:	22ff      	movs	r2, #255	; 0xff
 800d384:	4639      	mov	r1, r7
 800d386:	4620      	mov	r0, r4
 800d388:	f8cd 8000 	str.w	r8, [sp]
 800d38c:	f7ff fc9a 	bl	800ccc4 <I2C_TransferConfig>
 800d390:	e7a1      	b.n	800d2d6 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d392:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d394:	4b11      	ldr	r3, [pc, #68]	; (800d3dc <HAL_I2C_Master_Transmit+0x188>)
 800d396:	4639      	mov	r1, r7
 800d398:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d39a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d3a2:	f7ff fc8f 	bl	800ccc4 <I2C_TransferConfig>
 800d3a6:	e792      	b.n	800d2ce <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a8:	f7fb fecc 	bl	8009144 <HAL_GetTick>
 800d3ac:	1b80      	subs	r0, r0, r6
 800d3ae:	4285      	cmp	r5, r0
 800d3b0:	d3cb      	bcc.n	800d34a <HAL_I2C_Master_Transmit+0xf6>
 800d3b2:	2d00      	cmp	r5, #0
 800d3b4:	d0c9      	beq.n	800d34a <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d3b6:	6821      	ldr	r1, [r4, #0]
 800d3b8:	e7d8      	b.n	800d36c <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3ba:	f8cd 8000 	str.w	r8, [sp]
 800d3be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d3c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d3c8:	b292      	uxth	r2, r2
 800d3ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3cc:	b2d2      	uxtb	r2, r2
 800d3ce:	f7ff fc79 	bl	800ccc4 <I2C_TransferConfig>
 800d3d2:	e780      	b.n	800d2d6 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800d3d4:	2001      	movs	r0, #1
}
 800d3d6:	b003      	add	sp, #12
 800d3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3dc:	80002000 	.word	0x80002000
 800d3e0:	fe00e800 	.word	0xfe00e800

0800d3e4 <HAL_I2C_Master_Receive>:
{
 800d3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3e8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d3ee:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3f0:	2b20      	cmp	r3, #32
{
 800d3f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3f4:	f040 8088 	bne.w	800d508 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800d3f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	f000 8082 	beq.w	800d508 <HAL_I2C_Master_Receive+0x124>
 800d404:	2301      	movs	r3, #1
 800d406:	460f      	mov	r7, r1
 800d408:	4691      	mov	r9, r2
 800d40a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d40e:	f7fb fe99 	bl	8009144 <HAL_GetTick>
 800d412:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d414:	e004      	b.n	800d420 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d416:	f7fb fe95 	bl	8009144 <HAL_GetTick>
 800d41a:	1b80      	subs	r0, r0, r6
 800d41c:	2819      	cmp	r0, #25
 800d41e:	d87e      	bhi.n	800d51e <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	6999      	ldr	r1, [r3, #24]
 800d424:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d428:	d1f5      	bne.n	800d416 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d42a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800d42c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d430:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d432:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d436:	2310      	movs	r3, #16
 800d438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d43c:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d43e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d442:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d444:	b29b      	uxth	r3, r3
 800d446:	2bff      	cmp	r3, #255	; 0xff
 800d448:	d878      	bhi.n	800d53c <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800d44a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d44c:	4639      	mov	r1, r7
 800d44e:	4b49      	ldr	r3, [pc, #292]	; (800d574 <HAL_I2C_Master_Receive+0x190>)
 800d450:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d452:	b292      	uxth	r2, r2
 800d454:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d45e:	f7ff fc31 	bl	800ccc4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d462:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d466:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d46a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d46c:	4632      	mov	r2, r6
 800d46e:	4629      	mov	r1, r5
 800d470:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d472:	b29b      	uxth	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	d035      	beq.n	800d4e4 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d478:	f7ff fd7e 	bl	800cf78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d175      	bne.n	800d56c <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d486:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d488:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d48a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d48c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d48e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d490:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d492:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d494:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d496:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d498:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d49a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d49c:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d49e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d4a0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1e1      	bne.n	800d46a <HAL_I2C_Master_Receive+0x86>
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	d0df      	beq.n	800d46a <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4aa:	6822      	ldr	r2, [r4, #0]
 800d4ac:	e001      	b.n	800d4b2 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800d4ae:	1c69      	adds	r1, r5, #1
 800d4b0:	d12e      	bne.n	800d510 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4b2:	6993      	ldr	r3, [r2, #24]
 800d4b4:	061b      	lsls	r3, r3, #24
 800d4b6:	d5fa      	bpl.n	800d4ae <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	2bff      	cmp	r3, #255	; 0xff
 800d4be:	d948      	bls.n	800d552 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d4c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4c4:	22ff      	movs	r2, #255	; 0xff
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4ca:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d4ce:	f8cd 8000 	str.w	r8, [sp]
 800d4d2:	f7ff fbf7 	bl	800ccc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d4d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4d8:	4632      	mov	r2, r6
 800d4da:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800d4dc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4de:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1c9      	bne.n	800d478 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4e4:	f7ff fd22 	bl	800cf2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d13f      	bne.n	800d56c <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d4f0:	4d21      	ldr	r5, [pc, #132]	; (800d578 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4f2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	402a      	ands	r2, r5
 800d4f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d4fa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d4fe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d502:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d506:	e000      	b.n	800d50a <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800d508:	2002      	movs	r0, #2
}
 800d50a:	b003      	add	sp, #12
 800d50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d510:	f7fb fe18 	bl	8009144 <HAL_GetTick>
 800d514:	1b80      	subs	r0, r0, r6
 800d516:	4285      	cmp	r5, r0
 800d518:	d301      	bcc.n	800d51e <HAL_I2C_Master_Receive+0x13a>
 800d51a:	2d00      	cmp	r5, #0
 800d51c:	d1c5      	bne.n	800d4aa <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d51e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d520:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d522:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d524:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d526:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d528:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d52c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d52e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d532:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d536:	b003      	add	sp, #12
 800d538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d53c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d53e:	4b0d      	ldr	r3, [pc, #52]	; (800d574 <HAL_I2C_Master_Receive+0x190>)
 800d540:	4639      	mov	r1, r7
 800d542:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d544:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d54c:	f7ff fbba 	bl	800ccc4 <I2C_TransferConfig>
 800d550:	e787      	b.n	800d462 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d552:	f8cd 8000 	str.w	r8, [sp]
 800d556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d55a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d55c:	4639      	mov	r1, r7
 800d55e:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d560:	b292      	uxth	r2, r2
 800d562:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d564:	b2d2      	uxtb	r2, r2
 800d566:	f7ff fbad 	bl	800ccc4 <I2C_TransferConfig>
 800d56a:	e77e      	b.n	800d46a <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800d56c:	2001      	movs	r0, #1
}
 800d56e:	b003      	add	sp, #12
 800d570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d574:	80002400 	.word	0x80002400
 800d578:	fe00e800 	.word	0xfe00e800

0800d57c <HAL_I2C_Mem_Read>:
{
 800d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d580:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d582:	3b01      	subs	r3, #1
{
 800d584:	b083      	sub	sp, #12
 800d586:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d588:	2b01      	cmp	r3, #1
{
 800d58a:	4688      	mov	r8, r1
 800d58c:	4691      	mov	r9, r2
 800d58e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d592:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d594:	d904      	bls.n	800d5a0 <HAL_I2C_Mem_Read+0x24>
 800d596:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800d59a:	486e      	ldr	r0, [pc, #440]	; (800d754 <HAL_I2C_Mem_Read+0x1d8>)
 800d59c:	f7f8 f968 	bl	8005870 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5a0:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d5a4:	2b20      	cmp	r3, #32
 800d5a6:	d17f      	bne.n	800d6a8 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800d5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d075      	beq.n	800d69a <HAL_I2C_Mem_Read+0x11e>
 800d5ae:	f1ba 0f00 	cmp.w	sl, #0
 800d5b2:	d072      	beq.n	800d69a <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800d5b4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d075      	beq.n	800d6a8 <HAL_I2C_Mem_Read+0x12c>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d5c2:	f7fb fdbf 	bl	8009144 <HAL_GetTick>
 800d5c6:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5c8:	e004      	b.n	800d5d4 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ca:	f7fb fdbb 	bl	8009144 <HAL_GetTick>
 800d5ce:	1b80      	subs	r0, r0, r6
 800d5d0:	2819      	cmp	r0, #25
 800d5d2:	d874      	bhi.n	800d6be <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800d5dc:	d1f5      	bne.n	800d5ca <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800d5de:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d5e0:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800d5e2:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d5e6:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800d5e8:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5ea:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5f2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5f6:	2140      	movs	r1, #64	; 0x40
 800d5f8:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d5fc:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5fe:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800d602:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d606:	f7ff fd01 	bl	800d00c <I2C_RequestMemoryRead>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	f040 8083 	bne.w	800d716 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d610:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d612:	b29b      	uxth	r3, r3
 800d614:	2bff      	cmp	r3, #255	; 0xff
 800d616:	f240 808e 	bls.w	800d736 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d61a:	4b4f      	ldr	r3, [pc, #316]	; (800d758 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d61c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d61e:	4641      	mov	r1, r8
 800d620:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d622:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d62a:	f7ff fb4b 	bl	800ccc4 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d62e:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d630:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d634:	682a      	ldr	r2, [r5, #0]
 800d636:	e001      	b.n	800d63c <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800d638:	1c63      	adds	r3, r4, #1
 800d63a:	d139      	bne.n	800d6b0 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d63c:	6993      	ldr	r3, [r2, #24]
 800d63e:	0758      	lsls	r0, r3, #29
 800d640:	d5fa      	bpl.n	800d638 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d644:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d646:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d648:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800d64a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800d64c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d64e:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800d650:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d652:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d654:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d656:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d658:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d65a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d65c:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d65e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d660:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d662:	b90b      	cbnz	r3, 800d668 <HAL_I2C_Mem_Read+0xec>
 800d664:	2a00      	cmp	r2, #0
 800d666:	d140      	bne.n	800d6ea <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800d668:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e1      	bne.n	800d634 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d670:	4632      	mov	r2, r6
 800d672:	4621      	mov	r1, r4
 800d674:	4628      	mov	r0, r5
 800d676:	f7ff fc59 	bl	800cf2c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d168      	bne.n	800d750 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d67e:	682b      	ldr	r3, [r5, #0]
 800d680:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d682:	4c36      	ldr	r4, [pc, #216]	; (800d75c <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d684:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	4022      	ands	r2, r4
 800d68a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d68c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d690:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d694:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800d698:	e003      	b.n	800d6a2 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d69a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d69e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d6a0:	646b      	str	r3, [r5, #68]	; 0x44
}
 800d6a2:	b003      	add	sp, #12
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800d6a8:	2002      	movs	r0, #2
}
 800d6aa:	b003      	add	sp, #12
 800d6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6b0:	f7fb fd48 	bl	8009144 <HAL_GetTick>
 800d6b4:	1b80      	subs	r0, r0, r6
 800d6b6:	4284      	cmp	r4, r0
 800d6b8:	d301      	bcc.n	800d6be <HAL_I2C_Mem_Read+0x142>
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	d1ba      	bne.n	800d634 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6c0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6c2:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d6c4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6c6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d6c8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6cc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6ce:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6d2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d6d6:	b003      	add	sp, #12
 800d6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6dc:	f7fb fd32 	bl	8009144 <HAL_GetTick>
 800d6e0:	1b80      	subs	r0, r0, r6
 800d6e2:	4284      	cmp	r4, r0
 800d6e4:	d3eb      	bcc.n	800d6be <HAL_I2C_Mem_Read+0x142>
 800d6e6:	2c00      	cmp	r4, #0
 800d6e8:	d0e9      	beq.n	800d6be <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6ea:	682a      	ldr	r2, [r5, #0]
 800d6ec:	e001      	b.n	800d6f2 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800d6ee:	1c61      	adds	r1, r4, #1
 800d6f0:	d1f4      	bne.n	800d6dc <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6f2:	6993      	ldr	r3, [r2, #24]
 800d6f4:	061b      	lsls	r3, r3, #24
 800d6f6:	d5fa      	bpl.n	800d6ee <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6f8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	2bff      	cmp	r3, #255	; 0xff
 800d6fe:	d90e      	bls.n	800d71e <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d700:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d708:	22ff      	movs	r2, #255	; 0xff
 800d70a:	4641      	mov	r1, r8
 800d70c:	4628      	mov	r0, r5
 800d70e:	9700      	str	r7, [sp, #0]
 800d710:	f7ff fad8 	bl	800ccc4 <I2C_TransferConfig>
 800d714:	e7a8      	b.n	800d668 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800d716:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d718:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800d71c:	e7c1      	b.n	800d6a2 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d71e:	9700      	str	r7, [sp, #0]
 800d720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d724:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d726:	4641      	mov	r1, r8
 800d728:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800d72a:	b292      	uxth	r2, r2
 800d72c:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d72e:	b2d2      	uxtb	r2, r2
 800d730:	f7ff fac8 	bl	800ccc4 <I2C_TransferConfig>
 800d734:	e798      	b.n	800d668 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800d736:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d738:	4641      	mov	r1, r8
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <HAL_I2C_Mem_Read+0x1dc>)
 800d73c:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800d73e:	b292      	uxth	r2, r2
 800d740:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d742:	b2d2      	uxtb	r2, r2
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d74a:	f7ff fabb 	bl	800ccc4 <I2C_TransferConfig>
 800d74e:	e76e      	b.n	800d62e <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800d750:	2001      	movs	r0, #1
 800d752:	e7a6      	b.n	800d6a2 <HAL_I2C_Mem_Read+0x126>
 800d754:	0802df34 	.word	0x0802df34
 800d758:	80002400 	.word	0x80002400
 800d75c:	fe00e800 	.word	0xfe00e800

0800d760 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d760:	4b23      	ldr	r3, [pc, #140]	; (800d7f0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800d762:	6802      	ldr	r2, [r0, #0]
{
 800d764:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d766:	4d23      	ldr	r5, [pc, #140]	; (800d7f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800d768:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d76a:	4e23      	ldr	r6, [pc, #140]	; (800d7f8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800d76c:	429a      	cmp	r2, r3
 800d76e:	bf18      	it	ne
 800d770:	42aa      	cmpne	r2, r5
{
 800d772:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d774:	bf14      	ite	ne
 800d776:	2301      	movne	r3, #1
 800d778:	2300      	moveq	r3, #0
 800d77a:	42b2      	cmp	r2, r6
 800d77c:	bf0c      	ite	eq
 800d77e:	2300      	moveq	r3, #0
 800d780:	f003 0301 	andne.w	r3, r3, #1
 800d784:	b113      	cbz	r3, 800d78c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d786:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800d788:	429a      	cmp	r2, r3
 800d78a:	d12c      	bne.n	800d7e6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d78c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800d790:	d124      	bne.n	800d7dc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d792:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d796:	2b20      	cmp	r3, #32
 800d798:	b2de      	uxtb	r6, r3
 800d79a:	d11d      	bne.n	800d7d8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d79c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d019      	beq.n	800d7d8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7a4:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7a6:	2224      	movs	r2, #36	; 0x24
 800d7a8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	f022 0201 	bic.w	r2, r2, #1
 800d7b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d7bc:	6819      	ldr	r1, [r3, #0]
 800d7be:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7c0:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800d7c2:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800d7c4:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	f042 0201 	orr.w	r2, r2, #1
 800d7cc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d7ce:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d7d2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800d7d8:	2002      	movs	r0, #2
}
 800d7da:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d7dc:	215f      	movs	r1, #95	; 0x5f
 800d7de:	4808      	ldr	r0, [pc, #32]	; (800d800 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800d7e0:	f7f8 f846 	bl	8005870 <assert_failed>
 800d7e4:	e7d5      	b.n	800d792 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d7e6:	215e      	movs	r1, #94	; 0x5e
 800d7e8:	4805      	ldr	r0, [pc, #20]	; (800d800 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800d7ea:	f7f8 f841 	bl	8005870 <assert_failed>
 800d7ee:	e7cd      	b.n	800d78c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d7f0:	40005400 	.word	0x40005400
 800d7f4:	40005800 	.word	0x40005800
 800d7f8:	40005c00 	.word	0x40005c00
 800d7fc:	40006000 	.word	0x40006000
 800d800:	0802df6c 	.word	0x0802df6c

0800d804 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d804:	4b22      	ldr	r3, [pc, #136]	; (800d890 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800d806:	6802      	ldr	r2, [r0, #0]
{
 800d808:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d80a:	4d22      	ldr	r5, [pc, #136]	; (800d894 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800d80c:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d80e:	4e22      	ldr	r6, [pc, #136]	; (800d898 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d810:	429a      	cmp	r2, r3
 800d812:	bf18      	it	ne
 800d814:	42aa      	cmpne	r2, r5
{
 800d816:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d818:	bf14      	ite	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	2300      	moveq	r3, #0
 800d81e:	42b2      	cmp	r2, r6
 800d820:	bf0c      	ite	eq
 800d822:	2300      	moveq	r3, #0
 800d824:	f003 0301 	andne.w	r3, r3, #1
 800d828:	b113      	cbz	r3, 800d830 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800d82a:	4b1c      	ldr	r3, [pc, #112]	; (800d89c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d12a      	bne.n	800d886 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800d830:	2d0f      	cmp	r5, #15
 800d832:	d823      	bhi.n	800d87c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d834:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d838:	2b20      	cmp	r3, #32
 800d83a:	b2de      	uxtb	r6, r3
 800d83c:	d11c      	bne.n	800d878 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d83e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d842:	2b01      	cmp	r3, #1
 800d844:	d018      	beq.n	800d878 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d846:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d848:	2224      	movs	r2, #36	; 0x24
 800d84a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	f022 0201 	bic.w	r2, r2, #1
 800d854:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d856:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d858:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d85c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d860:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800d862:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800d864:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	f042 0201 	orr.w	r2, r2, #1
 800d86c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d86e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d872:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d876:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800d878:	2002      	movs	r0, #2
}
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800d87c:	218d      	movs	r1, #141	; 0x8d
 800d87e:	4808      	ldr	r0, [pc, #32]	; (800d8a0 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800d880:	f7f7 fff6 	bl	8005870 <assert_failed>
 800d884:	e7d6      	b.n	800d834 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d886:	218c      	movs	r1, #140	; 0x8c
 800d888:	4805      	ldr	r0, [pc, #20]	; (800d8a0 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800d88a:	f7f7 fff1 	bl	8005870 <assert_failed>
 800d88e:	e7cf      	b.n	800d830 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800d890:	40005400 	.word	0x40005400
 800d894:	40005800 	.word	0x40005800
 800d898:	40005c00 	.word	0x40005c00
 800d89c:	40006000 	.word	0x40006000
 800d8a0:	0802df6c 	.word	0x0802df6c

0800d8a4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d04c      	beq.n	800d942 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800d8a8:	6802      	ldr	r2, [r0, #0]
{
 800d8aa:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800d8ac:	4b26      	ldr	r3, [pc, #152]	; (800d948 <HAL_IWDG_Init+0xa4>)
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d003      	beq.n	800d8bc <HAL_IWDG_Init+0x18>
 800d8b4:	21b5      	movs	r1, #181	; 0xb5
 800d8b6:	4825      	ldr	r0, [pc, #148]	; (800d94c <HAL_IWDG_Init+0xa8>)
 800d8b8:	f7f7 ffda 	bl	8005870 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	2b06      	cmp	r3, #6
 800d8c0:	d835      	bhi.n	800d92e <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800d8c2:	68a3      	ldr	r3, [r4, #8]
 800d8c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8c8:	d22c      	bcs.n	800d924 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800d8ca:	68e3      	ldr	r3, [r4, #12]
 800d8cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d0:	d223      	bcs.n	800d91a <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d8d2:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d8d6:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d8d8:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800d8dc:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d8de:	f245 5055 	movw	r0, #21845	; 0x5555
 800d8e2:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d8e4:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d8e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d8e8:	f7fb fc2c 	bl	8009144 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d8ec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d8ee:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d8f0:	68da      	ldr	r2, [r3, #12]
 800d8f2:	0751      	lsls	r1, r2, #29
 800d8f4:	d00a      	beq.n	800d90c <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d8f6:	f7fb fc25 	bl	8009144 <HAL_GetTick>
 800d8fa:	1b43      	subs	r3, r0, r5
 800d8fc:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d8fe:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d900:	d9f6      	bls.n	800d8f0 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d902:	68da      	ldr	r2, [r3, #12]
 800d904:	0752      	lsls	r2, r2, #29
 800d906:	d0f3      	beq.n	800d8f0 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800d908:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d90c:	6919      	ldr	r1, [r3, #16]
 800d90e:	68e2      	ldr	r2, [r4, #12]
 800d910:	4291      	cmp	r1, r2
 800d912:	d011      	beq.n	800d938 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800d914:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d916:	611a      	str	r2, [r3, #16]
}
 800d918:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800d91a:	21b8      	movs	r1, #184	; 0xb8
 800d91c:	480b      	ldr	r0, [pc, #44]	; (800d94c <HAL_IWDG_Init+0xa8>)
 800d91e:	f7f7 ffa7 	bl	8005870 <assert_failed>
 800d922:	e7d6      	b.n	800d8d2 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800d924:	21b7      	movs	r1, #183	; 0xb7
 800d926:	4809      	ldr	r0, [pc, #36]	; (800d94c <HAL_IWDG_Init+0xa8>)
 800d928:	f7f7 ffa2 	bl	8005870 <assert_failed>
 800d92c:	e7cd      	b.n	800d8ca <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800d92e:	21b6      	movs	r1, #182	; 0xb6
 800d930:	4806      	ldr	r0, [pc, #24]	; (800d94c <HAL_IWDG_Init+0xa8>)
 800d932:	f7f7 ff9d 	bl	8005870 <assert_failed>
 800d936:	e7c4      	b.n	800d8c2 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d938:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800d93c:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d93e:	601a      	str	r2, [r3, #0]
}
 800d940:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d942:	2001      	movs	r0, #1
}
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	40003000 	.word	0x40003000
 800d94c:	0802dfa8 	.word	0x0802dfa8

0800d950 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d950:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d952:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800d956:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	601a      	str	r2, [r3, #0]
}
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop

0800d960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d962:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d964:	2800      	cmp	r0, #0
 800d966:	f000 809d 	beq.w	800daa4 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800d96a:	6804      	ldr	r4, [r0, #0]
 800d96c:	4605      	mov	r5, r0
 800d96e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800d972:	d003      	beq.n	800d97c <HAL_PCD_Init+0x1c>
 800d974:	4b4f      	ldr	r3, [pc, #316]	; (800dab4 <HAL_PCD_Init+0x154>)
 800d976:	429c      	cmp	r4, r3
 800d978:	f040 8081 	bne.w	800da7e <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d97c:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800d980:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 8086 	beq.w	800da96 <HAL_PCD_Init+0x136>
 800d98a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d98c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d98e:	462e      	mov	r6, r5
 800d990:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800d992:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d998:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d99a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800d99e:	bf08      	it	eq
 800d9a0:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800d9a2:	f006 fe87 	bl	80146b4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d9a6:	f856 eb10 	ldr.w	lr, [r6], #16
 800d9aa:	46b4      	mov	ip, r6
 800d9ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9b8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800d9bc:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9c0:	4670      	mov	r0, lr
 800d9c2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d9c6:	f006 fdb5 	bl	8014534 <USB_CoreInit>
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b130      	cbz	r0, 800d9dc <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800d9ce:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d9d0:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800d9d2:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d9d4:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800d9d8:	b00b      	add	sp, #44	; 0x2c
 800d9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d9dc:	4601      	mov	r1, r0
 800d9de:	6828      	ldr	r0, [r5, #0]
 800d9e0:	f006 fe70 	bl	80146c4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d9e4:	6868      	ldr	r0, [r5, #4]
 800d9e6:	b358      	cbz	r0, 800da40 <HAL_PCD_Init+0xe0>
 800d9e8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800d9ea:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d9ee:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800d9f0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d9f4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800d9f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800d9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800da00:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da04:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800da08:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da0c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800da0e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800da12:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800da14:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da18:	d3ea      	bcc.n	800d9f0 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800da1a:	2200      	movs	r2, #0
 800da1c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da20:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800da22:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800da26:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da2a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800da2c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da30:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800da32:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800da36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800da3a:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800da3e:	d3ed      	bcc.n	800da1c <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800da40:	466c      	mov	r4, sp
 800da42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800da4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800da52:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800da56:	6828      	ldr	r0, [r5, #0]
 800da58:	f006 feb8 	bl	80147cc <USB_DevInit>
 800da5c:	4604      	mov	r4, r0
 800da5e:	2800      	cmp	r0, #0
 800da60:	d1b5      	bne.n	800d9ce <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800da62:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800da64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800da66:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800da6a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800da6c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800da70:	d01c      	beq.n	800daac <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800da72:	6828      	ldr	r0, [r5, #0]
 800da74:	f007 fa72 	bl	8014f5c <USB_DevDisconnect>
}
 800da78:	4620      	mov	r0, r4
 800da7a:	b00b      	add	sp, #44	; 0x2c
 800da7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800da7e:	2187      	movs	r1, #135	; 0x87
 800da80:	480d      	ldr	r0, [pc, #52]	; (800dab8 <HAL_PCD_Init+0x158>)
 800da82:	f7f7 fef5 	bl	8005870 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800da86:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800da8a:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800da8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800da90:	2b00      	cmp	r3, #0
 800da92:	f47f af7a 	bne.w	800d98a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800da96:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800da98:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800da9c:	f017 f896 	bl	8024bcc <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800daa0:	6828      	ldr	r0, [r5, #0]
 800daa2:	e773      	b.n	800d98c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800daa4:	2401      	movs	r4, #1
}
 800daa6:	4620      	mov	r0, r4
 800daa8:	b00b      	add	sp, #44	; 0x2c
 800daaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800daac:	4628      	mov	r0, r5
 800daae:	f000 fcc7 	bl	800e440 <HAL_PCDEx_ActivateLPM>
 800dab2:	e7de      	b.n	800da72 <HAL_PCD_Init+0x112>
 800dab4:	40040000 	.word	0x40040000
 800dab8:	0802dfe4 	.word	0x0802dfe4

0800dabc <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800dabc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d00f      	beq.n	800dae4 <HAL_PCD_Start+0x28>
 800dac4:	2301      	movs	r3, #1
{
 800dac6:	b510      	push	{r4, lr}
 800dac8:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800daca:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800dacc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800dad0:	f006 fde8 	bl	80146a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dad4:	6820      	ldr	r0, [r4, #0]
 800dad6:	f007 fa31 	bl	8014f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dada:	2300      	movs	r3, #0

  return HAL_OK;
 800dadc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800dade:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800dae2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800dae4:	2002      	movs	r0, #2
}
 800dae6:	4770      	bx	lr

0800dae8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800daec:	6807      	ldr	r7, [r0, #0]
{
 800daee:	b089      	sub	sp, #36	; 0x24
 800daf0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800daf2:	4638      	mov	r0, r7
 800daf4:	f007 fa70 	bl	8014fd8 <USB_GetMode>
 800daf8:	b110      	cbz	r0, 800db00 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800dafa:	b009      	add	sp, #36	; 0x24
 800dafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800db00:	4683      	mov	fp, r0
 800db02:	6820      	ldr	r0, [r4, #0]
 800db04:	f007 fa3a 	bl	8014f7c <USB_ReadInterrupts>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d0f6      	beq.n	800dafa <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800db0c:	6820      	ldr	r0, [r4, #0]
 800db0e:	f007 fa35 	bl	8014f7c <USB_ReadInterrupts>
 800db12:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800db16:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800db18:	d003      	beq.n	800db22 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800db1a:	6943      	ldr	r3, [r0, #20]
 800db1c:	f003 0302 	and.w	r3, r3, #2
 800db20:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800db22:	f007 fa2b 	bl	8014f7c <USB_ReadInterrupts>
 800db26:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800db2a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800db2c:	d012      	beq.n	800db54 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800db2e:	6983      	ldr	r3, [r0, #24]
 800db30:	f023 0310 	bic.w	r3, r3, #16
 800db34:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800db36:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800db38:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800db3c:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800db40:	2b02      	cmp	r3, #2
 800db42:	f000 8253 	beq.w	800dfec <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800db46:	2b06      	cmp	r3, #6
 800db48:	f000 81b1 	beq.w	800deae <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800db4c:	6983      	ldr	r3, [r0, #24]
 800db4e:	f043 0310 	orr.w	r3, r3, #16
 800db52:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800db54:	f007 fa12 	bl	8014f7c <USB_ReadInterrupts>
 800db58:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800db5c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800db5e:	f040 80cf 	bne.w	800dd00 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800db62:	f007 fa0b 	bl	8014f7c <USB_ReadInterrupts>
 800db66:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800db6a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800db6c:	d175      	bne.n	800dc5a <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800db6e:	f007 fa05 	bl	8014f7c <USB_ReadInterrupts>
 800db72:	2800      	cmp	r0, #0
 800db74:	db5d      	blt.n	800dc32 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800db76:	6820      	ldr	r0, [r4, #0]
 800db78:	f007 fa00 	bl	8014f7c <USB_ReadInterrupts>
 800db7c:	0500      	lsls	r0, r0, #20
 800db7e:	d44d      	bmi.n	800dc1c <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800db80:	6820      	ldr	r0, [r4, #0]
 800db82:	f007 f9fb 	bl	8014f7c <USB_ReadInterrupts>
 800db86:	0102      	lsls	r2, r0, #4
 800db88:	d514      	bpl.n	800dbb4 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	6953      	ldr	r3, [r2, #20]
 800db8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db92:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800db94:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f040 8172 	bne.w	800de82 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800db9e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dba0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800dba2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800dba6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dba8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800dbac:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dbb0:	f017 f97a 	bl	8024ea8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800dbb4:	6820      	ldr	r0, [r4, #0]
 800dbb6:	f007 f9e1 	bl	8014f7c <USB_ReadInterrupts>
 800dbba:	04c3      	lsls	r3, r0, #19
 800dbbc:	f100 8116 	bmi.w	800ddec <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	f007 f9db 	bl	8014f7c <USB_ReadInterrupts>
 800dbc6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800dbca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dbcc:	f040 80f7 	bne.w	800ddbe <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800dbd0:	f007 f9d4 	bl	8014f7c <USB_ReadInterrupts>
 800dbd4:	0707      	lsls	r7, r0, #28
 800dbd6:	f100 80e9 	bmi.w	800ddac <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800dbda:	6820      	ldr	r0, [r4, #0]
 800dbdc:	f007 f9ce 	bl	8014f7c <USB_ReadInterrupts>
 800dbe0:	02c6      	lsls	r6, r0, #11
 800dbe2:	f100 80d9 	bmi.w	800dd98 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800dbe6:	6820      	ldr	r0, [r4, #0]
 800dbe8:	f007 f9c8 	bl	8014f7c <USB_ReadInterrupts>
 800dbec:	0285      	lsls	r5, r0, #10
 800dbee:	f100 80c9 	bmi.w	800dd84 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800dbf2:	6820      	ldr	r0, [r4, #0]
 800dbf4:	f007 f9c2 	bl	8014f7c <USB_ReadInterrupts>
 800dbf8:	0040      	lsls	r0, r0, #1
 800dbfa:	f100 80ba 	bmi.w	800dd72 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800dbfe:	6820      	ldr	r0, [r4, #0]
 800dc00:	f007 f9bc 	bl	8014f7c <USB_ReadInterrupts>
 800dc04:	0741      	lsls	r1, r0, #29
 800dc06:	f57f af78 	bpl.w	800dafa <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800dc0e:	076a      	lsls	r2, r5, #29
 800dc10:	f100 820d 	bmi.w	800e02e <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	432a      	orrs	r2, r5
 800dc18:	605a      	str	r2, [r3, #4]
 800dc1a:	e76e      	b.n	800dafa <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800dc1c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800dc20:	07d9      	lsls	r1, r3, #31
 800dc22:	f100 8200 	bmi.w	800e026 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800dc26:	6820      	ldr	r0, [r4, #0]
 800dc28:	6943      	ldr	r3, [r0, #20]
 800dc2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc2e:	6143      	str	r3, [r0, #20]
 800dc30:	e7a7      	b.n	800db82 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800dc32:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800dc36:	f022 0201 	bic.w	r2, r2, #1
 800dc3a:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800dc3e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	f000 812c 	beq.w	800dea0 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f017 f85b 	bl	8024d04 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800dc4e:	6820      	ldr	r0, [r4, #0]
 800dc50:	6943      	ldr	r3, [r0, #20]
 800dc52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc56:	6143      	str	r3, [r0, #20]
 800dc58:	e78e      	b.n	800db78 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dc5a:	f007 f99b 	bl	8014f94 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800dc5e:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dc60:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800dc62:	f1b8 0f00 	cmp.w	r8, #0
 800dc66:	d082      	beq.n	800db6e <HAL_PCD_IRQHandler+0x86>
 800dc68:	4626      	mov	r6, r4
 800dc6a:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800dc6e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800dc72:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800dc76:	e009      	b.n	800dc8c <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800dc78:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800dc7c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800dc80:	f106 061c 	add.w	r6, r6, #28
 800dc84:	f109 0920 	add.w	r9, r9, #32
 800dc88:	f000 8126 	beq.w	800ded8 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800dc8c:	f018 0f01 	tst.w	r8, #1
 800dc90:	d0f2      	beq.n	800dc78 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dc92:	fa5f f78a 	uxtb.w	r7, sl
 800dc96:	4639      	mov	r1, r7
 800dc98:	f007 f98e 	bl	8014fb8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dc9c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dc9e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dca0:	d515      	bpl.n	800dcce <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dca2:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dca4:	f00a 030f 	and.w	r3, sl, #15
 800dca8:	2201      	movs	r2, #1
 800dcaa:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dcac:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800dcb0:	ea23 0302 	bic.w	r3, r3, r2
 800dcb4:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dcb8:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800dcba:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dcbc:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800dcc0:	4299      	cmp	r1, r3
 800dcc2:	f000 81b9 	beq.w	800e038 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f016 ffdf 	bl	8024c8c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800dcce:	0728      	lsls	r0, r5, #28
 800dcd0:	d502      	bpl.n	800dcd8 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800dcd2:	2308      	movs	r3, #8
 800dcd4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800dcd8:	06e9      	lsls	r1, r5, #27
 800dcda:	d502      	bpl.n	800dce2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800dcdc:	2310      	movs	r3, #16
 800dcde:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800dce2:	066a      	lsls	r2, r5, #25
 800dce4:	d502      	bpl.n	800dcec <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800dcec:	07ab      	lsls	r3, r5, #30
 800dcee:	d502      	bpl.n	800dcf6 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800dcf6:	062d      	lsls	r5, r5, #24
 800dcf8:	f100 80f1 	bmi.w	800dede <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800dcfc:	6820      	ldr	r0, [r4, #0]
 800dcfe:	e7bb      	b.n	800dc78 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dd00:	f007 f940 	bl	8014f84 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800dd04:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dd06:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	f43f af2a 	beq.w	800db62 <HAL_PCD_IRQHandler+0x7a>
 800dd0e:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800dd12:	46a2      	mov	sl, r4
      epnum = 0U;
 800dd14:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800dd18:	9703      	str	r7, [sp, #12]
 800dd1a:	e008      	b.n	800dd2e <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800dd1c:	086d      	lsrs	r5, r5, #1
        epnum++;
 800dd1e:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800dd22:	f106 0620 	add.w	r6, r6, #32
 800dd26:	f10a 0a1c 	add.w	sl, sl, #28
 800dd2a:	f000 80d3 	beq.w	800ded4 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800dd2e:	07ef      	lsls	r7, r5, #31
 800dd30:	d5f4      	bpl.n	800dd1c <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dd32:	fa5f f788 	uxtb.w	r7, r8
 800dd36:	4639      	mov	r1, r7
 800dd38:	f007 f934 	bl	8014fa4 <USB_ReadDevOutEPInterrupt>
 800dd3c:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd3e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dd40:	f019 0f01 	tst.w	r9, #1
 800dd44:	f040 8135 	bne.w	800dfb2 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800dd48:	f019 0f08 	tst.w	r9, #8
 800dd4c:	f040 8119 	bne.w	800df82 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800dd50:	f019 0f10 	tst.w	r9, #16
 800dd54:	d001      	beq.n	800dd5a <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800dd56:	2310      	movs	r3, #16
 800dd58:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dd5a:	f019 0f20 	tst.w	r9, #32
 800dd5e:	d001      	beq.n	800dd64 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dd60:	2320      	movs	r3, #32
 800dd62:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800dd64:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800dd68:	d0d8      	beq.n	800dd1c <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800dd6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd6e:	60b3      	str	r3, [r6, #8]
 800dd70:	e7d4      	b.n	800dd1c <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800dd72:	4620      	mov	r0, r4
 800dd74:	f016 ffd2 	bl	8024d1c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dd78:	6820      	ldr	r0, [r4, #0]
 800dd7a:	6943      	ldr	r3, [r0, #20]
 800dd7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd80:	6143      	str	r3, [r0, #20]
 800dd82:	e73d      	b.n	800dc00 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800dd84:	4620      	mov	r0, r4
 800dd86:	2100      	movs	r1, #0
 800dd88:	f016 ffc0 	bl	8024d0c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dd8c:	6820      	ldr	r0, [r4, #0]
 800dd8e:	6943      	ldr	r3, [r0, #20]
 800dd90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd94:	6143      	str	r3, [r0, #20]
 800dd96:	e72d      	b.n	800dbf4 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800dd98:	4620      	mov	r0, r4
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	f016 ffba 	bl	8024d14 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800dda0:	6820      	ldr	r0, [r4, #0]
 800dda2:	6943      	ldr	r3, [r0, #20]
 800dda4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dda8:	6143      	str	r3, [r0, #20]
 800ddaa:	e71d      	b.n	800dbe8 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800ddac:	4620      	mov	r0, r4
 800ddae:	f016 ff77 	bl	8024ca0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	6943      	ldr	r3, [r0, #20]
 800ddb6:	f003 0308 	and.w	r3, r3, #8
 800ddba:	6143      	str	r3, [r0, #20]
 800ddbc:	e70e      	b.n	800dbdc <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800ddbe:	f007 f90f 	bl	8014fe0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ddc2:	6820      	ldr	r0, [r4, #0]
 800ddc4:	f006 fdc0 	bl	8014948 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ddc8:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ddca:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ddcc:	f000 ff86 	bl	800ecdc <HAL_RCC_GetHCLKFreq>
 800ddd0:	7b22      	ldrb	r2, [r4, #12]
 800ddd2:	4601      	mov	r1, r0
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f006 fbeb 	bl	80145b0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800ddda:	4620      	mov	r0, r4
 800dddc:	f016 ff64 	bl	8024ca8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800dde0:	6820      	ldr	r0, [r4, #0]
 800dde2:	6943      	ldr	r3, [r0, #20]
 800dde4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dde8:	6143      	str	r3, [r0, #20]
 800ddea:	e6f1      	b.n	800dbd0 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ddec:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800ddf0:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ddf4:	2110      	movs	r1, #16
 800ddf6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ddf8:	f023 0301 	bic.w	r3, r3, #1
 800ddfc:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ddfe:	f006 fc97 	bl	8014730 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de02:	6860      	ldr	r0, [r4, #4]
 800de04:	b1e0      	cbz	r0, 800de40 <HAL_PCD_IRQHandler+0x358>
 800de06:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800de0a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800de0e:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de10:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de14:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de16:	3320      	adds	r3, #32
 800de18:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de1a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800de1e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800de22:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800de26:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800de2a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800de2e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de32:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800de36:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800de3a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de3e:	d1e6      	bne.n	800de0e <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800de40:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800de42:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800de44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800de48:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800de4a:	b9f2      	cbnz	r2, 800de8a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800de4c:	696a      	ldr	r2, [r5, #20]
 800de4e:	f242 032b 	movw	r3, #8235	; 0x202b
 800de52:	4313      	orrs	r3, r2
 800de54:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800de56:	692b      	ldr	r3, [r5, #16]
 800de58:	f043 030b 	orr.w	r3, r3, #11
 800de5c:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800de5e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800de62:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800de66:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800de68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800de6c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800de6e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800de72:	f007 f8cb 	bl	801500c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800de76:	6820      	ldr	r0, [r4, #0]
 800de78:	6943      	ldr	r3, [r0, #20]
 800de7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de7e:	6143      	str	r3, [r0, #20]
 800de80:	e69f      	b.n	800dbc2 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800de82:	4620      	mov	r0, r4
 800de84:	f016 ff26 	bl	8024cd4 <HAL_PCD_SuspendCallback>
 800de88:	e694      	b.n	800dbb4 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800de8a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800de8e:	f043 030b 	orr.w	r3, r3, #11
 800de92:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800de96:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800de98:	f043 030b 	orr.w	r3, r3, #11
 800de9c:	646b      	str	r3, [r5, #68]	; 0x44
 800de9e:	e7de      	b.n	800de5e <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800dea0:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dea2:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800dea4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dea8:	f016 fffe 	bl	8024ea8 <HAL_PCDEx_LPM_Callback>
 800deac:	e6cf      	b.n	800dc4e <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800deae:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800deb2:	2208      	movs	r2, #8
 800deb4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800deb8:	4638      	mov	r0, r7
 800deba:	f006 ffa9 	bl	8014e10 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800debe:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800dec2:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dec6:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800dec8:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800decc:	440b      	add	r3, r1
 800dece:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800ded2:	e63b      	b.n	800db4c <HAL_PCD_IRQHandler+0x64>
 800ded4:	9f03      	ldr	r7, [sp, #12]
 800ded6:	e644      	b.n	800db62 <HAL_PCD_IRQHandler+0x7a>
 800ded8:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800dedc:	e647      	b.n	800db6e <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800dede:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dee2:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800dee6:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dee8:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800deea:	f63f aec5 	bhi.w	800dc78 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800deee:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800def2:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def4:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800def8:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800defc:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800defe:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800df00:	428a      	cmp	r2, r1
 800df02:	bf28      	it	cs
 800df04:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800df0a:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df0c:	b289      	uxth	r1, r1
 800df0e:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800df12:	f0c0 80bc 	bcc.w	800e08e <HAL_PCD_IRQHandler+0x5a6>
 800df16:	f8cd 8018 	str.w	r8, [sp, #24]
 800df1a:	46a0      	mov	r8, r4
 800df1c:	9c05      	ldr	r4, [sp, #20]
 800df1e:	e01a      	b.n	800df56 <HAL_PCD_IRQHandler+0x46e>
 800df20:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800df22:	463a      	mov	r2, r7
 800df24:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800df26:	4658      	mov	r0, fp
 800df28:	429d      	cmp	r5, r3
 800df2a:	bf28      	it	cs
 800df2c:	461d      	movcs	r5, r3
 800df2e:	f898 3010 	ldrb.w	r3, [r8, #16]
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	b2ab      	uxth	r3, r5
 800df36:	f006 ff55 	bl	8014de4 <USB_WritePacket>
    ep->xfer_buff  += len;
 800df3a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df3c:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800df3e:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df40:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800df42:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800df44:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800df46:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800df48:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df4a:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800df4e:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800df50:	f0c0 8096 	bcc.w	800e080 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800df54:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800df56:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800df58:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800df5c:	d3e0      	bcc.n	800df20 <HAL_PCD_IRQHandler+0x438>
 800df5e:	4644      	mov	r4, r8
 800df60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800df64:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800df68:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800df6a:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800df6c:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800df6e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800df72:	f00a 030f 	and.w	r3, sl, #15
 800df76:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800df78:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800df7a:	ea23 0302 	bic.w	r3, r3, r2
 800df7e:	634b      	str	r3, [r1, #52]	; 0x34
 800df80:	e67a      	b.n	800dc78 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800df82:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df84:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800df88:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800df8e:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df90:	485f      	ldr	r0, [pc, #380]	; (800e110 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df92:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df94:	4282      	cmp	r2, r0
 800df96:	d961      	bls.n	800e05c <HAL_PCD_IRQHandler+0x574>
 800df98:	040a      	lsls	r2, r1, #16
 800df9a:	d502      	bpl.n	800dfa2 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800df9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dfa0:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f016 fe62 	bl	8024c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800dfa8:	6921      	ldr	r1, [r4, #16]
 800dfaa:	2901      	cmp	r1, #1
 800dfac:	d07f      	beq.n	800e0ae <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dfae:	6820      	ldr	r0, [r4, #0]
 800dfb0:	e6ce      	b.n	800dd50 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dfb2:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800dfb4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dfb6:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dfb8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800dfbc:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dfbe:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800dfc2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800dfc6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800dfc8:	d04d      	beq.n	800e066 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800dfca:	4952      	ldr	r1, [pc, #328]	; (800e114 <HAL_PCD_IRQHandler+0x62c>)
 800dfcc:	458c      	cmp	ip, r1
 800dfce:	d062      	beq.n	800e096 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dfd0:	f1b8 0f00 	cmp.w	r8, #0
 800dfd4:	d104      	bne.n	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
 800dfd6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	f000 8092 	beq.w	800e104 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	4639      	mov	r1, r7
 800dfe4:	f016 fe48 	bl	8024c78 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dfe8:	6820      	ldr	r0, [r4, #0]
 800dfea:	e6ad      	b.n	800dd48 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800dfec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800dff0:	421d      	tst	r5, r3
 800dff2:	f43f adab 	beq.w	800db4c <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800dff6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800dffa:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800dffe:	4638      	mov	r0, r7
 800e000:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e004:	4615      	mov	r5, r2
 800e006:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800e00a:	f006 ff01 	bl	8014e10 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e00e:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e012:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e014:	442b      	add	r3, r5
 800e016:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e01a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800e01e:	442b      	add	r3, r5
 800e020:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800e024:	e592      	b.n	800db4c <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800e026:	4620      	mov	r0, r4
 800e028:	f016 fe54 	bl	8024cd4 <HAL_PCD_SuspendCallback>
 800e02c:	e5fb      	b.n	800dc26 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800e02e:	4620      	mov	r0, r4
 800e030:	f016 fe78 	bl	8024d24 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	e5ed      	b.n	800dc14 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e038:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800e03c:	4413      	add	r3, r2
 800e03e:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e040:	f1ba 0f00 	cmp.w	sl, #0
 800e044:	f47f ae3f 	bne.w	800dcc6 <HAL_PCD_IRQHandler+0x1de>
 800e048:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f47f ae3b 	bne.w	800dcc6 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e050:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e054:	6820      	ldr	r0, [r4, #0]
 800e056:	f006 ffd9 	bl	801500c <USB_EP0_OutStart>
 800e05a:	e634      	b.n	800dcc6 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800e05c:	4620      	mov	r0, r4
 800e05e:	f016 fe05 	bl	8024c6c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e062:	6820      	ldr	r0, [r4, #0]
 800e064:	e674      	b.n	800dd50 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e066:	0719      	lsls	r1, r3, #28
 800e068:	d51c      	bpl.n	800e0a4 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e06a:	4929      	ldr	r1, [pc, #164]	; (800e110 <HAL_PCD_IRQHandler+0x628>)
 800e06c:	458c      	cmp	ip, r1
 800e06e:	f67f ae6b 	bls.w	800dd48 <HAL_PCD_IRQHandler+0x260>
 800e072:	041f      	lsls	r7, r3, #16
 800e074:	f57f ae68 	bpl.w	800dd48 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e07c:	6093      	str	r3, [r2, #8]
 800e07e:	e663      	b.n	800dd48 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e080:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800e082:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e084:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e088:	f8d4 b000 	ldr.w	fp, [r4]
 800e08c:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800e08e:	42ab      	cmp	r3, r5
 800e090:	f4ff adf2 	bcc.w	800dc78 <HAL_PCD_IRQHandler+0x190>
 800e094:	e768      	b.n	800df68 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e096:	0419      	lsls	r1, r3, #16
 800e098:	d4ee      	bmi.n	800e078 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e09a:	0699      	lsls	r1, r3, #26
 800e09c:	d5a0      	bpl.n	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e09e:	2120      	movs	r1, #32
 800e0a0:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e0a2:	e79d      	b.n	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e0a4:	0699      	lsls	r1, r3, #26
 800e0a6:	d508      	bpl.n	800e0ba <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e0a8:	2320      	movs	r3, #32
 800e0aa:	6093      	str	r3, [r2, #8]
 800e0ac:	e64c      	b.n	800dd48 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e0ae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e0b2:	6820      	ldr	r0, [r4, #0]
 800e0b4:	f006 ffaa 	bl	801500c <USB_EP0_OutStart>
 800e0b8:	e779      	b.n	800dfae <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e0ba:	f013 0f28 	tst.w	r3, #40	; 0x28
 800e0be:	f47f ae43 	bne.w	800dd48 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e0c2:	4913      	ldr	r1, [pc, #76]	; (800e110 <HAL_PCD_IRQHandler+0x628>)
 800e0c4:	458c      	cmp	ip, r1
 800e0c6:	d901      	bls.n	800e0cc <HAL_PCD_IRQHandler+0x5e4>
 800e0c8:	041b      	lsls	r3, r3, #16
 800e0ca:	d4d5      	bmi.n	800e078 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e0cc:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800e0ce:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e0d2:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800e0d6:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800e0d8:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800e0dc:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800e0e0:	440a      	add	r2, r1
 800e0e2:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e0e6:	f1b8 0f00 	cmp.w	r8, #0
 800e0ea:	f47f af79 	bne.w	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
 800e0ee:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	f47f af74 	bne.w	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e0f8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	f006 ff85 	bl	801500c <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e102:	e76d      	b.n	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e104:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e108:	4641      	mov	r1, r8
 800e10a:	f006 ff7f 	bl	801500c <USB_EP0_OutStart>
 800e10e:	e767      	b.n	800dfe0 <HAL_PCD_IRQHandler+0x4f8>
 800e110:	4f54300a 	.word	0x4f54300a
 800e114:	4f54310a 	.word	0x4f54310a

0800e118 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800e118:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800e11c:	2a01      	cmp	r2, #1
 800e11e:	d00e      	beq.n	800e13e <HAL_PCD_SetAddress+0x26>
 800e120:	2201      	movs	r2, #1
{
 800e122:	b510      	push	{r4, lr}
 800e124:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e126:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800e128:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800e12c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e130:	f006 fef2 	bl	8014f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e134:	2300      	movs	r3, #0
  return HAL_OK;
 800e136:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e138:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e13c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800e13e:	2002      	movs	r0, #2
}
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop

0800e144 <HAL_PCD_EP_Open>:
{
 800e144:	b510      	push	{r4, lr}
 800e146:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800e14a:	0609      	lsls	r1, r1, #24
{
 800e14c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e14e:	d427      	bmi.n	800e1a0 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e150:	f04f 0c1c 	mov.w	ip, #28
 800e154:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800e158:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800e15c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800e160:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e164:	2000      	movs	r0, #0
 800e166:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800e16a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800e16c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e16e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800e172:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800e174:	b10a      	cbz	r2, 800e17a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800e176:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d101      	bne.n	800e182 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800e17e:	2300      	movs	r3, #0
 800e180:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800e182:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e186:	2b01      	cmp	r3, #1
 800e188:	d018      	beq.n	800e1bc <HAL_PCD_EP_Open+0x78>
 800e18a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e18c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e18e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e192:	f006 fbe5 	bl	8014960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e196:	2300      	movs	r3, #0
  return ret;
 800e198:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e19a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e19e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e1a0:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800e1a2:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e1a6:	fb00 400e 	mla	r0, r0, lr, r4
 800e1aa:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800e1ae:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800e1b2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e1b6:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800e1ba:	e7d6      	b.n	800e16a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800e1bc:	2002      	movs	r0, #2
}
 800e1be:	bd10      	pop	{r4, pc}

0800e1c0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800e1c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e1c4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e1c8:	f04f 011c 	mov.w	r1, #28
{
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e1d0:	d11a      	bne.n	800e208 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e1d2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e1d6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e1da:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e1dc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e1e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e1e4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e1e8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e1ea:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d019      	beq.n	800e226 <HAL_PCD_EP_Close+0x66>
 800e1f2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e1f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e1f6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e1fa:	f006 fbf9 	bl	80149f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e1fe:	2300      	movs	r3, #0
  return HAL_OK;
 800e200:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e202:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e206:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e208:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e20c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e210:	2001      	movs	r0, #1
 800e212:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e216:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e218:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e21c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e21e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e222:	2b01      	cmp	r3, #1
 800e224:	d1e5      	bne.n	800e1f2 <HAL_PCD_EP_Close+0x32>
 800e226:	2002      	movs	r0, #2
}
 800e228:	bd10      	pop	{r4, pc}
 800e22a:	bf00      	nop

0800e22c <HAL_PCD_EP_Receive>:
{
 800e22c:	b510      	push	{r4, lr}
 800e22e:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e232:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e234:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e238:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e23c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e240:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800e244:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800e248:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e24a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800e24e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800e252:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800e256:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800e25a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e25c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e25e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e260:	bf08      	it	eq
 800e262:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e266:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e268:	b91c      	cbnz	r4, 800e272 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e26a:	f006 fd37 	bl	8014cdc <USB_EP0StartXfer>
}
 800e26e:	2000      	movs	r0, #0
 800e270:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e272:	f006 fc1b 	bl	8014aac <USB_EPStartXfer>
}
 800e276:	2000      	movs	r0, #0
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	bf00      	nop

0800e27c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e27c:	f001 010f 	and.w	r1, r1, #15
 800e280:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e284:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800e288:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop

0800e290 <HAL_PCD_EP_Transmit>:
{
 800e290:	b510      	push	{r4, lr}
 800e292:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e296:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e298:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e29c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e2a0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2a4:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800e2a6:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800e2aa:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e2ac:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800e2b0:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800e2b4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e2b6:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800e2ba:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800e2be:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e2c0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e2c2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e2c4:	bf08      	it	eq
 800e2c6:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e2ca:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e2cc:	b91c      	cbnz	r4, 800e2d6 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e2ce:	f006 fd05 	bl	8014cdc <USB_EP0StartXfer>
}
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e2d6:	f006 fbe9 	bl	8014aac <USB_EPStartXfer>
}
 800e2da:	2000      	movs	r0, #0
 800e2dc:	bd10      	pop	{r4, pc}
 800e2de:	bf00      	nop

0800e2e0 <HAL_PCD_EP_SetStall>:
{
 800e2e0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e2e2:	6843      	ldr	r3, [r0, #4]
 800e2e4:	f001 050f 	and.w	r5, r1, #15
 800e2e8:	429d      	cmp	r5, r3
 800e2ea:	d834      	bhi.n	800e356 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800e2ec:	060b      	lsls	r3, r1, #24
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	d41d      	bmi.n	800e32e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800e2f2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800e2f4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800e2f8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800e2fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e300:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800e302:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e306:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800e30a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e30c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e30e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e310:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e314:	429a      	cmp	r2, r3
 800e316:	d01c      	beq.n	800e352 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e318:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e31a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e31e:	f006 fd9b 	bl	8014e58 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e322:	b1d5      	cbz	r5, 800e35a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800e324:	2300      	movs	r3, #0
  return HAL_OK;
 800e326:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e328:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e32c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e32e:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800e330:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800e334:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e336:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800e33a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e33e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800e344:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e346:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e348:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e34a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e34e:	429a      	cmp	r2, r3
 800e350:	d1e2      	bne.n	800e318 <HAL_PCD_EP_SetStall+0x38>
 800e352:	2002      	movs	r0, #2
}
 800e354:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e356:	2001      	movs	r0, #1
}
 800e358:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e35a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e35e:	7c21      	ldrb	r1, [r4, #16]
 800e360:	6820      	ldr	r0, [r4, #0]
 800e362:	f006 fe53 	bl	801500c <USB_EP0_OutStart>
 800e366:	e7dd      	b.n	800e324 <HAL_PCD_EP_SetStall+0x44>

0800e368 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e368:	6842      	ldr	r2, [r0, #4]
{
 800e36a:	b538      	push	{r3, r4, r5, lr}
 800e36c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e370:	4293      	cmp	r3, r2
 800e372:	d832      	bhi.n	800e3da <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800e374:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e378:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e37a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800e37e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800e382:	d119      	bne.n	800e3b8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e384:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e388:	2000      	movs	r0, #0
 800e38a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e38e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e390:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e394:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800e398:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e39a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e39c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d018      	beq.n	800e3d6 <HAL_PCD_EP_ClrStall+0x6e>
 800e3a4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e3a6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e3a8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e3ac:	f006 fd88 	bl	8014ec0 <USB_EPClearStall>
  return HAL_OK;
 800e3b0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800e3b2:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3b8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e3bc:	2001      	movs	r0, #1
 800e3be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e3c2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3c4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e3c6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3ca:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e3cc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e3ce:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d1e6      	bne.n	800e3a4 <HAL_PCD_EP_ClrStall+0x3c>
 800e3d6:	2002      	movs	r0, #2
}
 800e3d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e3da:	2001      	movs	r0, #1
}
 800e3dc:	bd38      	pop	{r3, r4, r5, pc}
 800e3de:	bf00      	nop

0800e3e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e3e0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e3e2:	6804      	ldr	r4, [r0, #0]
 800e3e4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800e3e6:	b931      	cbnz	r1, 800e3f6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e3e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e3ec:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3f4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e3f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800e3f8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e3fc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e400:	d00b      	beq.n	800e41a <HAL_PCDEx_SetTxFiFo+0x3a>
 800e402:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e404:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800e408:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e40a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800e40e:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e410:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800e412:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e414:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e418:	d3f4      	bcc.n	800e404 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e41a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e41e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e422:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800e426:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e42a:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e42e:	2000      	movs	r0, #0
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop

0800e434 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e434:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800e436:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop

0800e440 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e440:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800e442:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e446:	4909      	ldr	r1, [pc, #36]	; (800e46c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e448:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800e44a:	4660      	mov	r0, ip
{
 800e44c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800e44e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800e450:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800e454:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e458:	6993      	ldr	r3, [r2, #24]
}
 800e45a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e45e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e462:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e464:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e466:	4319      	orrs	r1, r3
 800e468:	6551      	str	r1, [r2, #84]	; 0x54
}
 800e46a:	4770      	bx	lr
 800e46c:	10000003 	.word	0x10000003

0800e470 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e470:	4a02      	ldr	r2, [pc, #8]	; (800e47c <HAL_PWR_EnableBkUpAccess+0xc>)
 800e472:	6813      	ldr	r3, [r2, #0]
 800e474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e478:	6013      	str	r3, [r2, #0]
}
 800e47a:	4770      	bx	lr
 800e47c:	40007000 	.word	0x40007000

0800e480 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800e480:	4b1a      	ldr	r3, [pc, #104]	; (800e4ec <HAL_PWREx_EnableOverDrive+0x6c>)
 800e482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800e488:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e48a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800e48c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800e48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e490:	4c17      	ldr	r4, [pc, #92]	; (800e4f0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800e492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4a0:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e4a2:	f7fa fe4f 	bl	8009144 <HAL_GetTick>
 800e4a6:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e4a8:	e005      	b.n	800e4b6 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e4aa:	f7fa fe4b 	bl	8009144 <HAL_GetTick>
 800e4ae:	1b40      	subs	r0, r0, r5
 800e4b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e4b4:	d817      	bhi.n	800e4e6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e4b6:	6863      	ldr	r3, [r4, #4]
 800e4b8:	03da      	lsls	r2, r3, #15
 800e4ba:	d5f6      	bpl.n	800e4aa <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e4bc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e4be:	4d0c      	ldr	r5, [pc, #48]	; (800e4f0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4c4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e4c6:	f7fa fe3d 	bl	8009144 <HAL_GetTick>
 800e4ca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e4cc:	e005      	b.n	800e4da <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e4ce:	f7fa fe39 	bl	8009144 <HAL_GetTick>
 800e4d2:	1b00      	subs	r0, r0, r4
 800e4d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e4d8:	d805      	bhi.n	800e4e6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e4da:	686b      	ldr	r3, [r5, #4]
 800e4dc:	039b      	lsls	r3, r3, #14
 800e4de:	d5f6      	bpl.n	800e4ce <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800e4e0:	2000      	movs	r0, #0
}
 800e4e2:	b003      	add	sp, #12
 800e4e4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800e4e6:	2003      	movs	r0, #3
}
 800e4e8:	b003      	add	sp, #12
 800e4ea:	bd30      	pop	{r4, r5, pc}
 800e4ec:	40023800 	.word	0x40023800
 800e4f0:	40007000 	.word	0x40007000

0800e4f4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	f000 828c 	beq.w	800ea12 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e4fa:	6803      	ldr	r3, [r0, #0]
 800e4fc:	2b0f      	cmp	r3, #15
{
 800e4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e502:	4604      	mov	r4, r0
 800e504:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e506:	f200 8123 	bhi.w	800e750 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e50a:	07dd      	lsls	r5, r3, #31
 800e50c:	d534      	bpl.n	800e578 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e50e:	6863      	ldr	r3, [r4, #4]
 800e510:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800e514:	d003      	beq.n	800e51e <HAL_RCC_OscConfig+0x2a>
 800e516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e51a:	f040 8175 	bne.w	800e808 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e51e:	4aa3      	ldr	r2, [pc, #652]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e520:	6893      	ldr	r3, [r2, #8]
 800e522:	f003 030c 	and.w	r3, r3, #12
 800e526:	2b04      	cmp	r3, #4
 800e528:	d01d      	beq.n	800e566 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e52a:	6893      	ldr	r3, [r2, #8]
 800e52c:	f003 030c 	and.w	r3, r3, #12
 800e530:	2b08      	cmp	r3, #8
 800e532:	d015      	beq.n	800e560 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e53a:	f000 816b 	beq.w	800e814 <HAL_RCC_OscConfig+0x320>
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f000 819c 	beq.w	800e87c <HAL_RCC_OscConfig+0x388>
 800e544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e548:	4b98      	ldr	r3, [pc, #608]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	f000 822d 	beq.w	800e9aa <HAL_RCC_OscConfig+0x4b6>
 800e550:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	e15e      	b.n	800e81e <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e560:	6853      	ldr	r3, [r2, #4]
 800e562:	0258      	lsls	r0, r3, #9
 800e564:	d5e6      	bpl.n	800e534 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e566:	4b91      	ldr	r3, [pc, #580]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	0399      	lsls	r1, r3, #14
 800e56c:	d503      	bpl.n	800e576 <HAL_RCC_OscConfig+0x82>
 800e56e:	6863      	ldr	r3, [r4, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 80ff 	beq.w	800e774 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	079f      	lsls	r7, r3, #30
 800e57a:	d531      	bpl.n	800e5e0 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e57c:	68e3      	ldr	r3, [r4, #12]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	f200 80fc 	bhi.w	800e77c <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e584:	6923      	ldr	r3, [r4, #16]
 800e586:	2b1f      	cmp	r3, #31
 800e588:	f200 8101 	bhi.w	800e78e <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e58c:	4b87      	ldr	r3, [pc, #540]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e58e:	689a      	ldr	r2, [r3, #8]
 800e590:	f012 0f0c 	tst.w	r2, #12
 800e594:	f000 80e7 	beq.w	800e766 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e598:	689a      	ldr	r2, [r3, #8]
 800e59a:	f002 020c 	and.w	r2, r2, #12
 800e59e:	2a08      	cmp	r2, #8
 800e5a0:	f000 80dd 	beq.w	800e75e <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e5a4:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e5a6:	4d81      	ldr	r5, [pc, #516]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 819d 	beq.w	800e8e8 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800e5ae:	682b      	ldr	r3, [r5, #0]
 800e5b0:	f043 0301 	orr.w	r3, r3, #1
 800e5b4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5b6:	f7fa fdc5 	bl	8009144 <HAL_GetTick>
 800e5ba:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5bc:	e005      	b.n	800e5ca <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e5be:	f7fa fdc1 	bl	8009144 <HAL_GetTick>
 800e5c2:	1b80      	subs	r0, r0, r6
 800e5c4:	2802      	cmp	r0, #2
 800e5c6:	f200 8155 	bhi.w	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5ca:	682b      	ldr	r3, [r5, #0]
 800e5cc:	0798      	lsls	r0, r3, #30
 800e5ce:	d5f6      	bpl.n	800e5be <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5d0:	682b      	ldr	r3, [r5, #0]
 800e5d2:	6922      	ldr	r2, [r4, #16]
 800e5d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e5d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e5dc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	071a      	lsls	r2, r3, #28
 800e5e2:	d42a      	bmi.n	800e63a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e5e4:	075e      	lsls	r6, r3, #29
 800e5e6:	d544      	bpl.n	800e672 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e5e8:	68a3      	ldr	r3, [r4, #8]
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d906      	bls.n	800e5fc <HAL_RCC_OscConfig+0x108>
 800e5ee:	2b05      	cmp	r3, #5
 800e5f0:	d004      	beq.n	800e5fc <HAL_RCC_OscConfig+0x108>
 800e5f2:	f240 2106 	movw	r1, #518	; 0x206
 800e5f6:	486e      	ldr	r0, [pc, #440]	; (800e7b0 <HAL_RCC_OscConfig+0x2bc>)
 800e5f8:	f7f7 f93a 	bl	8005870 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e5fc:	4b6b      	ldr	r3, [pc, #428]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e5fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e600:	00d5      	lsls	r5, r2, #3
 800e602:	f140 80ec 	bpl.w	800e7de <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800e606:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e608:	4e6a      	ldr	r6, [pc, #424]	; (800e7b4 <HAL_RCC_OscConfig+0x2c0>)
 800e60a:	6833      	ldr	r3, [r6, #0]
 800e60c:	05d8      	lsls	r0, r3, #23
 800e60e:	f140 8121 	bpl.w	800e854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	2b01      	cmp	r3, #1
 800e616:	f000 8179 	beq.w	800e90c <HAL_RCC_OscConfig+0x418>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f000 8144 	beq.w	800e8a8 <HAL_RCC_OscConfig+0x3b4>
 800e620:	2b05      	cmp	r3, #5
 800e622:	4b62      	ldr	r3, [pc, #392]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e626:	f000 81c8 	beq.w	800e9ba <HAL_RCC_OscConfig+0x4c6>
 800e62a:	f022 0201 	bic.w	r2, r2, #1
 800e62e:	671a      	str	r2, [r3, #112]	; 0x70
 800e630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e632:	f022 0204 	bic.w	r2, r2, #4
 800e636:	671a      	str	r2, [r3, #112]	; 0x70
 800e638:	e16d      	b.n	800e916 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e63a:	6963      	ldr	r3, [r4, #20]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	f200 80c4 	bhi.w	800e7ca <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800e642:	4d5a      	ldr	r5, [pc, #360]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 80a8 	beq.w	800e79a <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800e64a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e64c:	f043 0301 	orr.w	r3, r3, #1
 800e650:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e652:	f7fa fd77 	bl	8009144 <HAL_GetTick>
 800e656:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e658:	e005      	b.n	800e666 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e65a:	f7fa fd73 	bl	8009144 <HAL_GetTick>
 800e65e:	1b80      	subs	r0, r0, r6
 800e660:	2802      	cmp	r0, #2
 800e662:	f200 8107 	bhi.w	800e874 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e666:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e668:	079b      	lsls	r3, r3, #30
 800e66a:	d5f6      	bpl.n	800e65a <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	075e      	lsls	r6, r3, #29
 800e670:	d4ba      	bmi.n	800e5e8 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e672:	69a0      	ldr	r0, [r4, #24]
 800e674:	2802      	cmp	r0, #2
 800e676:	f200 80bd 	bhi.w	800e7f4 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d064      	beq.n	800e748 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e67e:	4d4b      	ldr	r5, [pc, #300]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e680:	68ab      	ldr	r3, [r5, #8]
 800e682:	f003 030c 	and.w	r3, r3, #12
 800e686:	2b08      	cmp	r3, #8
 800e688:	f000 8158 	beq.w	800e93c <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e68c:	2802      	cmp	r0, #2
 800e68e:	f040 81ae 	bne.w	800e9ee <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e692:	69e3      	ldr	r3, [r4, #28]
 800e694:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800e698:	f040 81a3 	bne.w	800e9e2 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e69c:	6a23      	ldr	r3, [r4, #32]
 800e69e:	3b02      	subs	r3, #2
 800e6a0:	2b3d      	cmp	r3, #61	; 0x3d
 800e6a2:	f200 8198 	bhi.w	800e9d6 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a8:	3b32      	subs	r3, #50	; 0x32
 800e6aa:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e6ae:	f200 818c 	bhi.w	800e9ca <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e6b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	f200 8172 	bhi.w	800e99e <HAL_RCC_OscConfig+0x4aa>
 800e6ba:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e6be:	fa22 f303 	lsr.w	r3, r2, r3
 800e6c2:	07d8      	lsls	r0, r3, #31
 800e6c4:	f140 816b 	bpl.w	800e99e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e6c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e6ca:	3b02      	subs	r3, #2
 800e6cc:	2b0d      	cmp	r3, #13
 800e6ce:	f200 81a8 	bhi.w	800ea22 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e6d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e6d4:	3b02      	subs	r3, #2
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	f200 819d 	bhi.w	800ea16 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e6dc:	4d33      	ldr	r5, [pc, #204]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e6de:	682b      	ldr	r3, [r5, #0]
 800e6e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e6e4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6e6:	f7fa fd2d 	bl	8009144 <HAL_GetTick>
 800e6ea:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e6ec:	e005      	b.n	800e6fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e6ee:	f7fa fd29 	bl	8009144 <HAL_GetTick>
 800e6f2:	1b80      	subs	r0, r0, r6
 800e6f4:	2802      	cmp	r0, #2
 800e6f6:	f200 80bd 	bhi.w	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e6fa:	682b      	ldr	r3, [r5, #0]
 800e6fc:	0199      	lsls	r1, r3, #6
 800e6fe:	d4f6      	bmi.n	800e6ee <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e700:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800e704:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e706:	430b      	orrs	r3, r1
 800e708:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e70a:	4e28      	ldr	r6, [pc, #160]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e70c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e710:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800e714:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e718:	0852      	lsrs	r2, r2, #1
 800e71a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e71e:	3a01      	subs	r2, #1
 800e720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e724:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800e726:	682b      	ldr	r3, [r5, #0]
 800e728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e72c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e72e:	f7fa fd09 	bl	8009144 <HAL_GetTick>
 800e732:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e734:	e005      	b.n	800e742 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e736:	f7fa fd05 	bl	8009144 <HAL_GetTick>
 800e73a:	1b00      	subs	r0, r0, r4
 800e73c:	2802      	cmp	r0, #2
 800e73e:	f200 8099 	bhi.w	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e742:	6833      	ldr	r3, [r6, #0]
 800e744:	019a      	lsls	r2, r3, #6
 800e746:	d5f6      	bpl.n	800e736 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800e748:	2000      	movs	r0, #0
}
 800e74a:	b002      	add	sp, #8
 800e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e750:	f240 1163 	movw	r1, #355	; 0x163
 800e754:	4816      	ldr	r0, [pc, #88]	; (800e7b0 <HAL_RCC_OscConfig+0x2bc>)
 800e756:	f7f7 f88b 	bl	8005870 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	e6d5      	b.n	800e50a <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	025e      	lsls	r6, r3, #9
 800e762:	f53f af1f 	bmi.w	800e5a4 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e766:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <HAL_RCC_OscConfig+0x2b8>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	079d      	lsls	r5, r3, #30
 800e76c:	d565      	bpl.n	800e83a <HAL_RCC_OscConfig+0x346>
 800e76e:	68e3      	ldr	r3, [r4, #12]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d062      	beq.n	800e83a <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800e774:	2001      	movs	r0, #1
}
 800e776:	b002      	add	sp, #8
 800e778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e77c:	f240 119b 	movw	r1, #411	; 0x19b
 800e780:	480b      	ldr	r0, [pc, #44]	; (800e7b0 <HAL_RCC_OscConfig+0x2bc>)
 800e782:	f7f7 f875 	bl	8005870 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e786:	6923      	ldr	r3, [r4, #16]
 800e788:	2b1f      	cmp	r3, #31
 800e78a:	f67f aeff 	bls.w	800e58c <HAL_RCC_OscConfig+0x98>
 800e78e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800e792:	4807      	ldr	r0, [pc, #28]	; (800e7b0 <HAL_RCC_OscConfig+0x2bc>)
 800e794:	f7f7 f86c 	bl	8005870 <assert_failed>
 800e798:	e6f8      	b.n	800e58c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800e79a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e79c:	f023 0301 	bic.w	r3, r3, #1
 800e7a0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e7a2:	f7fa fccf 	bl	8009144 <HAL_GetTick>
 800e7a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e7a8:	e00b      	b.n	800e7c2 <HAL_RCC_OscConfig+0x2ce>
 800e7aa:	bf00      	nop
 800e7ac:	40023800 	.word	0x40023800
 800e7b0:	0802e01c 	.word	0x0802e01c
 800e7b4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e7b8:	f7fa fcc4 	bl	8009144 <HAL_GetTick>
 800e7bc:	1b80      	subs	r0, r0, r6
 800e7be:	2802      	cmp	r0, #2
 800e7c0:	d858      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e7c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e7c4:	079f      	lsls	r7, r3, #30
 800e7c6:	d4f7      	bmi.n	800e7b8 <HAL_RCC_OscConfig+0x2c4>
 800e7c8:	e750      	b.n	800e66c <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e7ca:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800e7ce:	4898      	ldr	r0, [pc, #608]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e7d0:	f7f7 f84e 	bl	8005870 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e7d4:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800e7d6:	4d97      	ldr	r5, [pc, #604]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0de      	beq.n	800e79a <HAL_RCC_OscConfig+0x2a6>
 800e7dc:	e735      	b.n	800e64a <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e7de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800e7e0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800e7e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e7e6:	641a      	str	r2, [r3, #64]	; 0x40
 800e7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e7f2:	e709      	b.n	800e608 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e7f4:	488e      	ldr	r0, [pc, #568]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e7f6:	f240 214a 	movw	r1, #586	; 0x24a
 800e7fa:	f7f7 f839 	bl	8005870 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e7fe:	69a0      	ldr	r0, [r4, #24]
 800e800:	2800      	cmp	r0, #0
 800e802:	f47f af3c 	bne.w	800e67e <HAL_RCC_OscConfig+0x18a>
 800e806:	e79f      	b.n	800e748 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e808:	f240 1169 	movw	r1, #361	; 0x169
 800e80c:	4888      	ldr	r0, [pc, #544]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e80e:	f7f7 f82f 	bl	8005870 <assert_failed>
 800e812:	e684      	b.n	800e51e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e814:	4a87      	ldr	r2, [pc, #540]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
 800e816:	6813      	ldr	r3, [r2, #0]
 800e818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e81c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e81e:	f7fa fc91 	bl	8009144 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e822:	4e84      	ldr	r6, [pc, #528]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800e824:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e826:	e004      	b.n	800e832 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e828:	f7fa fc8c 	bl	8009144 <HAL_GetTick>
 800e82c:	1b40      	subs	r0, r0, r5
 800e82e:	2864      	cmp	r0, #100	; 0x64
 800e830:	d820      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e832:	6833      	ldr	r3, [r6, #0]
 800e834:	039a      	lsls	r2, r3, #14
 800e836:	d5f7      	bpl.n	800e828 <HAL_RCC_OscConfig+0x334>
 800e838:	e69d      	b.n	800e576 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e83a:	4a7e      	ldr	r2, [pc, #504]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
 800e83c:	6921      	ldr	r1, [r4, #16]
 800e83e:	6813      	ldr	r3, [r2, #0]
 800e840:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e844:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e848:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e84a:	6823      	ldr	r3, [r4, #0]
 800e84c:	071a      	lsls	r2, r3, #28
 800e84e:	f57f aec9 	bpl.w	800e5e4 <HAL_RCC_OscConfig+0xf0>
 800e852:	e6f2      	b.n	800e63a <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800e854:	6833      	ldr	r3, [r6, #0]
 800e856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e85a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800e85c:	f7fa fc72 	bl	8009144 <HAL_GetTick>
 800e860:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e862:	6833      	ldr	r3, [r6, #0]
 800e864:	05d9      	lsls	r1, r3, #23
 800e866:	f53f aed4 	bmi.w	800e612 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e86a:	f7fa fc6b 	bl	8009144 <HAL_GetTick>
 800e86e:	1bc0      	subs	r0, r0, r7
 800e870:	2864      	cmp	r0, #100	; 0x64
 800e872:	d9f6      	bls.n	800e862 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800e874:	2003      	movs	r0, #3
}
 800e876:	b002      	add	sp, #8
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e87c:	4d6d      	ldr	r5, [pc, #436]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
 800e87e:	682b      	ldr	r3, [r5, #0]
 800e880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	682b      	ldr	r3, [r5, #0]
 800e888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e88c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e88e:	f7fa fc59 	bl	8009144 <HAL_GetTick>
 800e892:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e894:	e004      	b.n	800e8a0 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e896:	f7fa fc55 	bl	8009144 <HAL_GetTick>
 800e89a:	1b80      	subs	r0, r0, r6
 800e89c:	2864      	cmp	r0, #100	; 0x64
 800e89e:	d8e9      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	039b      	lsls	r3, r3, #14
 800e8a4:	d4f7      	bmi.n	800e896 <HAL_RCC_OscConfig+0x3a2>
 800e8a6:	e666      	b.n	800e576 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8a8:	4e62      	ldr	r6, [pc, #392]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e8aa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8ae:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e8b0:	f023 0301 	bic.w	r3, r3, #1
 800e8b4:	6733      	str	r3, [r6, #112]	; 0x70
 800e8b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e8b8:	f023 0304 	bic.w	r3, r3, #4
 800e8bc:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800e8be:	f7fa fc41 	bl	8009144 <HAL_GetTick>
 800e8c2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e8c4:	e004      	b.n	800e8d0 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e8c6:	f7fa fc3d 	bl	8009144 <HAL_GetTick>
 800e8ca:	1bc0      	subs	r0, r0, r7
 800e8cc:	4540      	cmp	r0, r8
 800e8ce:	d8d1      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e8d0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e8d2:	079b      	lsls	r3, r3, #30
 800e8d4:	d4f7      	bmi.n	800e8c6 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800e8d6:	2d00      	cmp	r5, #0
 800e8d8:	f43f aecb 	beq.w	800e672 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e8dc:	4a55      	ldr	r2, [pc, #340]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
 800e8de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e8e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e8e6:	e6c4      	b.n	800e672 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	f023 0301 	bic.w	r3, r3, #1
 800e8ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e8f0:	f7fa fc28 	bl	8009144 <HAL_GetTick>
 800e8f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e8f6:	e004      	b.n	800e902 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8f8:	f7fa fc24 	bl	8009144 <HAL_GetTick>
 800e8fc:	1b80      	subs	r0, r0, r6
 800e8fe:	2802      	cmp	r0, #2
 800e900:	d8b8      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e902:	682b      	ldr	r3, [r5, #0]
 800e904:	0799      	lsls	r1, r3, #30
 800e906:	d4f7      	bmi.n	800e8f8 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	e669      	b.n	800e5e0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e90c:	4a49      	ldr	r2, [pc, #292]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
 800e90e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e910:	f043 0301 	orr.w	r3, r3, #1
 800e914:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800e916:	f7fa fc15 	bl	8009144 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e91a:	4f46      	ldr	r7, [pc, #280]	; (800ea34 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e91c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800e920:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e922:	e004      	b.n	800e92e <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e924:	f7fa fc0e 	bl	8009144 <HAL_GetTick>
 800e928:	1b80      	subs	r0, r0, r6
 800e92a:	4540      	cmp	r0, r8
 800e92c:	d8a2      	bhi.n	800e874 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e92e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e930:	079a      	lsls	r2, r3, #30
 800e932:	d5f7      	bpl.n	800e924 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800e934:	2d00      	cmp	r5, #0
 800e936:	f43f ae9c 	beq.w	800e672 <HAL_RCC_OscConfig+0x17e>
 800e93a:	e7cf      	b.n	800e8dc <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e93c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800e93e:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e940:	f43f af03 	beq.w	800e74a <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e944:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e948:	69e1      	ldr	r1, [r4, #28]
 800e94a:	428b      	cmp	r3, r1
 800e94c:	f47f af12 	bne.w	800e774 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e950:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e954:	6a21      	ldr	r1, [r4, #32]
 800e956:	428b      	cmp	r3, r1
 800e958:	f47f af0c 	bne.w	800e774 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e95c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e962:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e964:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800e968:	f47f af04 	bne.w	800e774 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e96c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e96e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800e972:	085b      	lsrs	r3, r3, #1
 800e974:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e976:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800e97a:	f47f aefb 	bne.w	800e774 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e97e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800e982:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e984:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800e988:	f47f aef4 	bne.w	800e774 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e98e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e992:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800e996:	bf14      	ite	ne
 800e998:	2001      	movne	r0, #1
 800e99a:	2000      	moveq	r0, #0
 800e99c:	e6d5      	b.n	800e74a <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e99e:	f240 2156 	movw	r1, #598	; 0x256
 800e9a2:	4823      	ldr	r0, [pc, #140]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e9a4:	f7f6 ff64 	bl	8005870 <assert_failed>
 800e9a8:	e68e      	b.n	800e6c8 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	e731      	b.n	800e81e <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e9ba:	f042 0204 	orr.w	r2, r2, #4
 800e9be:	671a      	str	r2, [r3, #112]	; 0x70
 800e9c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e9c2:	f042 0201 	orr.w	r2, r2, #1
 800e9c6:	671a      	str	r2, [r3, #112]	; 0x70
 800e9c8:	e7a5      	b.n	800e916 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e9ca:	f240 2155 	movw	r1, #597	; 0x255
 800e9ce:	4818      	ldr	r0, [pc, #96]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e9d0:	f7f6 ff4e 	bl	8005870 <assert_failed>
 800e9d4:	e66d      	b.n	800e6b2 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e9d6:	f44f 7115 	mov.w	r1, #596	; 0x254
 800e9da:	4815      	ldr	r0, [pc, #84]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e9dc:	f7f6 ff48 	bl	8005870 <assert_failed>
 800e9e0:	e661      	b.n	800e6a6 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e9e2:	f240 2153 	movw	r1, #595	; 0x253
 800e9e6:	4812      	ldr	r0, [pc, #72]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800e9e8:	f7f6 ff42 	bl	8005870 <assert_failed>
 800e9ec:	e656      	b.n	800e69c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800e9ee:	682b      	ldr	r3, [r5, #0]
 800e9f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e9f6:	f7fa fba5 	bl	8009144 <HAL_GetTick>
 800e9fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9fc:	e005      	b.n	800ea0a <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e9fe:	f7fa fba1 	bl	8009144 <HAL_GetTick>
 800ea02:	1b00      	subs	r0, r0, r4
 800ea04:	2802      	cmp	r0, #2
 800ea06:	f63f af35 	bhi.w	800e874 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea0a:	682b      	ldr	r3, [r5, #0]
 800ea0c:	019b      	lsls	r3, r3, #6
 800ea0e:	d4f6      	bmi.n	800e9fe <HAL_RCC_OscConfig+0x50a>
 800ea10:	e69a      	b.n	800e748 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800ea12:	2001      	movs	r0, #1
}
 800ea14:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ea16:	f240 2159 	movw	r1, #601	; 0x259
 800ea1a:	4805      	ldr	r0, [pc, #20]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800ea1c:	f7f6 ff28 	bl	8005870 <assert_failed>
 800ea20:	e65c      	b.n	800e6dc <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ea22:	f240 2157 	movw	r1, #599	; 0x257
 800ea26:	4802      	ldr	r0, [pc, #8]	; (800ea30 <HAL_RCC_OscConfig+0x53c>)
 800ea28:	f7f6 ff22 	bl	8005870 <assert_failed>
 800ea2c:	e651      	b.n	800e6d2 <HAL_RCC_OscConfig+0x1de>
 800ea2e:	bf00      	nop
 800ea30:	0802e01c 	.word	0x0802e01c
 800ea34:	40023800 	.word	0x40023800

0800ea38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ea38:	4916      	ldr	r1, [pc, #88]	; (800ea94 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ea3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ea3c:	688b      	ldr	r3, [r1, #8]
 800ea3e:	f003 030c 	and.w	r3, r3, #12
 800ea42:	2b04      	cmp	r3, #4
 800ea44:	d01b      	beq.n	800ea7e <HAL_RCC_GetSysClockFreq+0x46>
 800ea46:	2b08      	cmp	r3, #8
 800ea48:	d117      	bne.n	800ea7a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ea4a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ea4c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ea4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ea52:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ea54:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ea58:	d113      	bne.n	800ea82 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ea5a:	480f      	ldr	r0, [pc, #60]	; (800ea98 <HAL_RCC_GetSysClockFreq+0x60>)
 800ea5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ea60:	fba1 0100 	umull	r0, r1, r1, r0
 800ea64:	f7f1 fca4 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ea68:	4b0a      	ldr	r3, [pc, #40]	; (800ea94 <HAL_RCC_GetSysClockFreq+0x5c>)
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ea70:	3301      	adds	r3, #1
 800ea72:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ea74:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ea78:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ea7a:	4807      	ldr	r0, [pc, #28]	; (800ea98 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800ea7c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ea7e:	4807      	ldr	r0, [pc, #28]	; (800ea9c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ea80:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ea82:	4806      	ldr	r0, [pc, #24]	; (800ea9c <HAL_RCC_GetSysClockFreq+0x64>)
 800ea84:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ea88:	2300      	movs	r3, #0
 800ea8a:	fba1 0100 	umull	r0, r1, r1, r0
 800ea8e:	f7f1 fc8f 	bl	80003b0 <__aeabi_uldivmod>
 800ea92:	e7e9      	b.n	800ea68 <HAL_RCC_GetSysClockFreq+0x30>
 800ea94:	40023800 	.word	0x40023800
 800ea98:	00f42400 	.word	0x00f42400
 800ea9c:	007a1200 	.word	0x007a1200

0800eaa0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	f000 80f6 	beq.w	800ec92 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800eaa6:	6803      	ldr	r3, [r0, #0]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	2b0e      	cmp	r3, #14
{
 800eaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab0:	4604      	mov	r4, r0
 800eab2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800eab4:	f200 80d6 	bhi.w	800ec64 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800eab8:	2d0f      	cmp	r5, #15
 800eaba:	f200 80c3 	bhi.w	800ec44 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800eabe:	4a81      	ldr	r2, [pc, #516]	; (800ecc4 <HAL_RCC_ClockConfig+0x224>)
 800eac0:	6813      	ldr	r3, [r2, #0]
 800eac2:	f003 030f 	and.w	r3, r3, #15
 800eac6:	42ab      	cmp	r3, r5
 800eac8:	d36f      	bcc.n	800ebaa <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	0798      	lsls	r0, r3, #30
 800eace:	d530      	bpl.n	800eb32 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ead0:	0759      	lsls	r1, r3, #29
 800ead2:	d504      	bpl.n	800eade <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ead4:	497c      	ldr	r1, [pc, #496]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800ead6:	688a      	ldr	r2, [r1, #8]
 800ead8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800eadc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eade:	071a      	lsls	r2, r3, #28
 800eae0:	d504      	bpl.n	800eaec <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eae2:	4979      	ldr	r1, [pc, #484]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800eae4:	688a      	ldr	r2, [r1, #8]
 800eae6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800eaea:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800eaec:	68a1      	ldr	r1, [r4, #8]
 800eaee:	f021 0220 	bic.w	r2, r1, #32
 800eaf2:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800eaf6:	2a90      	cmp	r2, #144	; 0x90
 800eaf8:	bf18      	it	ne
 800eafa:	2800      	cmpne	r0, #0
 800eafc:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800eb00:	bf14      	ite	ne
 800eb02:	2201      	movne	r2, #1
 800eb04:	2200      	moveq	r2, #0
 800eb06:	29f0      	cmp	r1, #240	; 0xf0
 800eb08:	bf0c      	ite	eq
 800eb0a:	2200      	moveq	r2, #0
 800eb0c:	f002 0201 	andne.w	r2, r2, #1
 800eb10:	28a0      	cmp	r0, #160	; 0xa0
 800eb12:	bf0c      	ite	eq
 800eb14:	2200      	moveq	r2, #0
 800eb16:	f002 0201 	andne.w	r2, r2, #1
 800eb1a:	b122      	cbz	r2, 800eb26 <HAL_RCC_ClockConfig+0x86>
 800eb1c:	f021 0210 	bic.w	r2, r1, #16
 800eb20:	2ac0      	cmp	r2, #192	; 0xc0
 800eb22:	f040 80b8 	bne.w	800ec96 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb26:	4868      	ldr	r0, [pc, #416]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800eb28:	6882      	ldr	r2, [r0, #8]
 800eb2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800eb2e:	4311      	orrs	r1, r2
 800eb30:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb32:	07df      	lsls	r7, r3, #31
 800eb34:	d526      	bpl.n	800eb84 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	f200 80a1 	bhi.w	800ec80 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb3e:	4a62      	ldr	r2, [pc, #392]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb40:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb42:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb44:	f000 8098 	beq.w	800ec78 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	f000 8091 	beq.w	800ec70 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb4e:	0791      	lsls	r1, r2, #30
 800eb50:	d528      	bpl.n	800eba4 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eb52:	4e5d      	ldr	r6, [pc, #372]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eb58:	68b2      	ldr	r2, [r6, #8]
 800eb5a:	f022 0203 	bic.w	r2, r2, #3
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800eb62:	f7fa faef 	bl	8009144 <HAL_GetTick>
 800eb66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb68:	e005      	b.n	800eb76 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb6a:	f7fa faeb 	bl	8009144 <HAL_GetTick>
 800eb6e:	1bc0      	subs	r0, r0, r7
 800eb70:	4540      	cmp	r0, r8
 800eb72:	f200 808c 	bhi.w	800ec8e <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eb76:	68b3      	ldr	r3, [r6, #8]
 800eb78:	6862      	ldr	r2, [r4, #4]
 800eb7a:	f003 030c 	and.w	r3, r3, #12
 800eb7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800eb82:	d1f2      	bne.n	800eb6a <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eb84:	4a4f      	ldr	r2, [pc, #316]	; (800ecc4 <HAL_RCC_ClockConfig+0x224>)
 800eb86:	6813      	ldr	r3, [r2, #0]
 800eb88:	f003 030f 	and.w	r3, r3, #15
 800eb8c:	42ab      	cmp	r3, r5
 800eb8e:	d91a      	bls.n	800ebc6 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb90:	6813      	ldr	r3, [r2, #0]
 800eb92:	f023 030f 	bic.w	r3, r3, #15
 800eb96:	432b      	orrs	r3, r5
 800eb98:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb9a:	6813      	ldr	r3, [r2, #0]
 800eb9c:	f003 030f 	and.w	r3, r3, #15
 800eba0:	42ab      	cmp	r3, r5
 800eba2:	d010      	beq.n	800ebc6 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800eba4:	2001      	movs	r0, #1
}
 800eba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebaa:	6813      	ldr	r3, [r2, #0]
 800ebac:	f023 030f 	bic.w	r3, r3, #15
 800ebb0:	432b      	orrs	r3, r5
 800ebb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebb4:	6813      	ldr	r3, [r2, #0]
 800ebb6:	f003 030f 	and.w	r3, r3, #15
 800ebba:	42ab      	cmp	r3, r5
 800ebbc:	d1f2      	bne.n	800eba4 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	0798      	lsls	r0, r3, #30
 800ebc2:	d485      	bmi.n	800ead0 <HAL_RCC_ClockConfig+0x30>
 800ebc4:	e7b5      	b.n	800eb32 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	075a      	lsls	r2, r3, #29
 800ebca:	d512      	bpl.n	800ebf2 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ebcc:	68e1      	ldr	r1, [r4, #12]
 800ebce:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800ebd2:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800ebd6:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800ebda:	bf18      	it	ne
 800ebdc:	2a00      	cmpne	r2, #0
 800ebde:	d002      	beq.n	800ebe6 <HAL_RCC_ClockConfig+0x146>
 800ebe0:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800ebe4:	d15f      	bne.n	800eca6 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ebe6:	4838      	ldr	r0, [pc, #224]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800ebe8:	6882      	ldr	r2, [r0, #8]
 800ebea:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ebf2:	071b      	lsls	r3, r3, #28
 800ebf4:	d513      	bpl.n	800ec1e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ebf6:	6922      	ldr	r2, [r4, #16]
 800ebf8:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800ebfc:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800ec00:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800ec04:	bf18      	it	ne
 800ec06:	2b00      	cmpne	r3, #0
 800ec08:	d002      	beq.n	800ec10 <HAL_RCC_ClockConfig+0x170>
 800ec0a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800ec0e:	d152      	bne.n	800ecb6 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ec10:	492d      	ldr	r1, [pc, #180]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800ec12:	688b      	ldr	r3, [r1, #8]
 800ec14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ec18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ec1c:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ec1e:	f7ff ff0b 	bl	800ea38 <HAL_RCC_GetSysClockFreq>
 800ec22:	4a29      	ldr	r2, [pc, #164]	; (800ecc8 <HAL_RCC_ClockConfig+0x228>)
 800ec24:	4c29      	ldr	r4, [pc, #164]	; (800eccc <HAL_RCC_ClockConfig+0x22c>)
 800ec26:	4603      	mov	r3, r0
 800ec28:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800ec2a:	4829      	ldr	r0, [pc, #164]	; (800ecd0 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ec2c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ec30:	4928      	ldr	r1, [pc, #160]	; (800ecd4 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800ec32:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ec34:	5ca2      	ldrb	r2, [r4, r2]
 800ec36:	40d3      	lsrs	r3, r2
 800ec38:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800ec3a:	f7f9 fa23 	bl	8008084 <HAL_InitTick>
  return HAL_OK;
 800ec3e:	2000      	movs	r0, #0
}
 800ec40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ec44:	f240 21de 	movw	r1, #734	; 0x2de
 800ec48:	4823      	ldr	r0, [pc, #140]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ec4a:	f7f6 fe11 	bl	8005870 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec4e:	4b1d      	ldr	r3, [pc, #116]	; (800ecc4 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800ec50:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec52:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec54:	6819      	ldr	r1, [r3, #0]
 800ec56:	f021 010f 	bic.w	r1, r1, #15
 800ec5a:	430d      	orrs	r5, r1
 800ec5c:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec5e:	681b      	ldr	r3, [r3, #0]
}
 800ec60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ec64:	f240 21dd 	movw	r1, #733	; 0x2dd
 800ec68:	481b      	ldr	r0, [pc, #108]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ec6a:	f7f6 fe01 	bl	8005870 <assert_failed>
 800ec6e:	e723      	b.n	800eab8 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec70:	0190      	lsls	r0, r2, #6
 800ec72:	f53f af6e 	bmi.w	800eb52 <HAL_RCC_ClockConfig+0xb2>
 800ec76:	e795      	b.n	800eba4 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec78:	0396      	lsls	r6, r2, #14
 800ec7a:	f53f af6a 	bmi.w	800eb52 <HAL_RCC_ClockConfig+0xb2>
 800ec7e:	e791      	b.n	800eba4 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ec80:	f240 3109 	movw	r1, #777	; 0x309
 800ec84:	4814      	ldr	r0, [pc, #80]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ec86:	f7f6 fdf3 	bl	8005870 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ec8a:	6863      	ldr	r3, [r4, #4]
 800ec8c:	e757      	b.n	800eb3e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800ec8e:	2003      	movs	r0, #3
 800ec90:	e789      	b.n	800eba6 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800ec92:	2001      	movs	r0, #1
}
 800ec94:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ec96:	f240 3102 	movw	r1, #770	; 0x302
 800ec9a:	480f      	ldr	r0, [pc, #60]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ec9c:	f7f6 fde8 	bl	8005870 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eca0:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	e73f      	b.n	800eb26 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800eca6:	f240 3146 	movw	r1, #838	; 0x346
 800ecaa:	480b      	ldr	r0, [pc, #44]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ecac:	f7f6 fde0 	bl	8005870 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ecb0:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	e797      	b.n	800ebe6 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ecb6:	f240 314d 	movw	r1, #845	; 0x34d
 800ecba:	4807      	ldr	r0, [pc, #28]	; (800ecd8 <HAL_RCC_ClockConfig+0x238>)
 800ecbc:	f7f6 fdd8 	bl	8005870 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ecc0:	6922      	ldr	r2, [r4, #16]
 800ecc2:	e7a5      	b.n	800ec10 <HAL_RCC_ClockConfig+0x170>
 800ecc4:	40023c00 	.word	0x40023c00
 800ecc8:	40023800 	.word	0x40023800
 800eccc:	0802d630 	.word	0x0802d630
 800ecd0:	200002f8 	.word	0x200002f8
 800ecd4:	20000298 	.word	0x20000298
 800ecd8:	0802e01c 	.word	0x0802e01c

0800ecdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800ecdc:	4b01      	ldr	r3, [pc, #4]	; (800ece4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800ecde:	6818      	ldr	r0, [r3, #0]
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000298 	.word	0x20000298

0800ece8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ece8:	4b04      	ldr	r3, [pc, #16]	; (800ecfc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800ecea:	4905      	ldr	r1, [pc, #20]	; (800ed00 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	4a05      	ldr	r2, [pc, #20]	; (800ed04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ecf0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800ecf4:	6808      	ldr	r0, [r1, #0]
 800ecf6:	5cd3      	ldrb	r3, [r2, r3]
}
 800ecf8:	40d8      	lsrs	r0, r3
 800ecfa:	4770      	bx	lr
 800ecfc:	40023800 	.word	0x40023800
 800ed00:	20000298 	.word	0x20000298
 800ed04:	0802d640 	.word	0x0802d640

0800ed08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ed08:	4b04      	ldr	r3, [pc, #16]	; (800ed1c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ed0a:	4905      	ldr	r1, [pc, #20]	; (800ed20 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	4a05      	ldr	r2, [pc, #20]	; (800ed24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ed10:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800ed14:	6808      	ldr	r0, [r1, #0]
 800ed16:	5cd3      	ldrb	r3, [r2, r3]
}
 800ed18:	40d8      	lsrs	r0, r3
 800ed1a:	4770      	bx	lr
 800ed1c:	40023800 	.word	0x40023800
 800ed20:	20000298 	.word	0x20000298
 800ed24:	0802d640 	.word	0x0802d640

0800ed28 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed28:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ed2a:	220f      	movs	r2, #15
 800ed2c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	f002 0203 	and.w	r2, r2, #3
 800ed34:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ed36:	689a      	ldr	r2, [r3, #8]
 800ed38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ed3c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ed3e:	689a      	ldr	r2, [r3, #8]
 800ed40:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ed44:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	08db      	lsrs	r3, r3, #3
{
 800ed4a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ed4c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed50:	4c05      	ldr	r4, [pc, #20]	; (800ed68 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ed52:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed54:	6823      	ldr	r3, [r4, #0]
}
 800ed56:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed5a:	f003 030f 	and.w	r3, r3, #15
 800ed5e:	600b      	str	r3, [r1, #0]
}
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	40023800 	.word	0x40023800
 800ed68:	40023c00 	.word	0x40023c00

0800ed6c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ed6c:	4a56      	ldr	r2, [pc, #344]	; (800eec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ed6e:	6803      	ldr	r3, [r0, #0]
 800ed70:	401a      	ands	r2, r3
{
 800ed72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed76:	4604      	mov	r4, r0
 800ed78:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ed7a:	2a00      	cmp	r2, #0
 800ed7c:	f000 833f 	beq.w	800f3fe <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ed80:	f013 0601 	ands.w	r6, r3, #1
 800ed84:	d00f      	beq.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800ed86:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ed88:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800ed8c:	f040 8342 	bne.w	800f414 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ed90:	4a4e      	ldr	r2, [pc, #312]	; (800eecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ed92:	6891      	ldr	r1, [r2, #8]
 800ed94:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800ed98:	6091      	str	r1, [r2, #8]
 800ed9a:	6891      	ldr	r1, [r2, #8]
 800ed9c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ed9e:	fab6 f686 	clz	r6, r6
 800eda2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800eda4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800eda6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800edaa:	d014      	beq.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800edac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800edae:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800edb2:	f040 838d 	bne.w	800f4d0 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800edb6:	4945      	ldr	r1, [pc, #276]	; (800eecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800edb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800edbc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800edc0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800edc4:	ea42 0205 	orr.w	r2, r2, r5
 800edc8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800edcc:	f000 831f 	beq.w	800f40e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800edd0:	fab5 f585 	clz	r5, r5
 800edd4:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800edd6:	02d9      	lsls	r1, r3, #11
 800edd8:	d514      	bpl.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800edda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eddc:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800ede0:	f040 837d 	bne.w	800f4de <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ede4:	4839      	ldr	r0, [pc, #228]	; (800eecc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ede6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800edea:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800edee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800edf2:	ea42 0201 	orr.w	r2, r2, r1
 800edf6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800edfa:	f000 8306 	beq.w	800f40a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800edfe:	2900      	cmp	r1, #0
 800ee00:	bf08      	it	eq
 800ee02:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800ee04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800ee08:	bf18      	it	ne
 800ee0a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ee0c:	069a      	lsls	r2, r3, #26
 800ee0e:	f140 8099 	bpl.w	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800ee12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ee14:	482e      	ldr	r0, [pc, #184]	; (800eed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ee16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ee1a:	bf18      	it	ne
 800ee1c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800ee20:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800ee24:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800ee28:	bf14      	ite	ne
 800ee2a:	2301      	movne	r3, #1
 800ee2c:	2300      	moveq	r3, #0
 800ee2e:	4287      	cmp	r7, r0
 800ee30:	bf0c      	ite	eq
 800ee32:	2300      	moveq	r3, #0
 800ee34:	f003 0301 	andne.w	r3, r3, #1
 800ee38:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800ee3c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800ee40:	4287      	cmp	r7, r0
 800ee42:	bf0c      	ite	eq
 800ee44:	2300      	moveq	r3, #0
 800ee46:	f003 0301 	andne.w	r3, r3, #1
 800ee4a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ee4e:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800ee52:	4281      	cmp	r1, r0
 800ee54:	bf0c      	ite	eq
 800ee56:	2300      	moveq	r3, #0
 800ee58:	f003 0301 	andne.w	r3, r3, #1
 800ee5c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800ee60:	4287      	cmp	r7, r0
 800ee62:	bf0c      	ite	eq
 800ee64:	2300      	moveq	r3, #0
 800ee66:	f003 0301 	andne.w	r3, r3, #1
 800ee6a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800ee6e:	4281      	cmp	r1, r0
 800ee70:	bf0c      	ite	eq
 800ee72:	2300      	moveq	r3, #0
 800ee74:	f003 0301 	andne.w	r3, r3, #1
 800ee78:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ee7c:	4281      	cmp	r1, r0
 800ee7e:	bf0c      	ite	eq
 800ee80:	2300      	moveq	r3, #0
 800ee82:	f003 0301 	andne.w	r3, r3, #1
 800ee86:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ee8a:	4281      	cmp	r1, r0
 800ee8c:	bf0c      	ite	eq
 800ee8e:	2300      	moveq	r3, #0
 800ee90:	f003 0301 	andne.w	r3, r3, #1
 800ee94:	b12b      	cbz	r3, 800eea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ee96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ee9a:	4b0e      	ldr	r3, [pc, #56]	; (800eed4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	f040 8438 	bne.w	800f712 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800eea2:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eea4:	4f0c      	ldr	r7, [pc, #48]	; (800eed8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800eea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eea8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800eeac:	641a      	str	r2, [r3, #64]	; 0x40
 800eeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eebe:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eec0:	f7fa f940 	bl	8009144 <HAL_GetTick>
 800eec4:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800eec6:	e010      	b.n	800eeea <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800eec8:	1dfffff9 	.word	0x1dfffff9
 800eecc:	40023800 	.word	0x40023800
 800eed0:	00020300 	.word	0x00020300
 800eed4:	001c0300 	.word	0x001c0300
 800eed8:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eedc:	f7fa f932 	bl	8009144 <HAL_GetTick>
 800eee0:	eba0 0008 	sub.w	r0, r0, r8
 800eee4:	2864      	cmp	r0, #100	; 0x64
 800eee6:	f200 8286 	bhi.w	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	05db      	lsls	r3, r3, #23
 800eeee:	d5f5      	bpl.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800eef0:	4fb0      	ldr	r7, [pc, #704]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800eef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800eef4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800eef6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800eefa:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800eefe:	d011      	beq.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ef00:	4291      	cmp	r1, r2
 800ef02:	d00f      	beq.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ef04:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ef06:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ef08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800ef0c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800ef10:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ef12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ef14:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800ef18:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ef1a:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ef1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ef1e:	07d0      	lsls	r0, r2, #31
 800ef20:	f100 836c 	bmi.w	800f5fc <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef24:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800ef28:	f000 82c9 	beq.w	800f4be <HAL_RCCEx_PeriphCLKConfig+0x752>
 800ef2c:	49a1      	ldr	r1, [pc, #644]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ef2e:	688a      	ldr	r2, [r1, #8]
 800ef30:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ef34:	608a      	str	r2, [r1, #8]
 800ef36:	4a9f      	ldr	r2, [pc, #636]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ef38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef3c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ef3e:	430b      	orrs	r3, r1
 800ef40:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	06da      	lsls	r2, r3, #27
 800ef46:	d510      	bpl.n	800ef6a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800ef48:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800ef4a:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800ef4e:	f040 82db 	bne.w	800f508 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ef52:	4a98      	ldr	r2, [pc, #608]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ef54:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800ef58:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800ef5c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800ef60:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ef64:	4339      	orrs	r1, r7
 800ef66:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ef6a:	045f      	lsls	r7, r3, #17
 800ef6c:	d50f      	bpl.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800ef6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ef70:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800ef74:	d003      	beq.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ef76:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800ef7a:	f040 8299 	bne.w	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ef7e:	488d      	ldr	r0, [pc, #564]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ef80:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ef84:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ef88:	430a      	orrs	r2, r1
 800ef8a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ef8e:	0418      	lsls	r0, r3, #16
 800ef90:	d50f      	bpl.n	800efb2 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800ef92:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800ef94:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800ef98:	d003      	beq.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800ef9a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800ef9e:	f040 826a 	bne.w	800f476 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800efa2:	4884      	ldr	r0, [pc, #528]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800efa4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800efa8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800efac:	430a      	orrs	r2, r1
 800efae:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800efb2:	03d9      	lsls	r1, r3, #15
 800efb4:	d50f      	bpl.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800efb6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800efb8:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800efbc:	d003      	beq.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800efbe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800efc2:	f040 8260 	bne.w	800f486 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800efc6:	487b      	ldr	r0, [pc, #492]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800efc8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800efcc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800efd0:	430a      	orrs	r2, r1
 800efd2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800efd6:	039a      	lsls	r2, r3, #14
 800efd8:	d50f      	bpl.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800efda:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800efdc:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800efe0:	d003      	beq.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800efe2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800efe6:	f040 825b 	bne.w	800f4a0 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800efea:	4872      	ldr	r0, [pc, #456]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800efec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800eff0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800eff4:	430a      	orrs	r2, r1
 800eff6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800effa:	065f      	lsls	r7, r3, #25
 800effc:	d50b      	bpl.n	800f016 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800effe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f000:	2903      	cmp	r1, #3
 800f002:	f200 82b3 	bhi.w	800f56c <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f006:	486b      	ldr	r0, [pc, #428]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f008:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f00c:	f022 0203 	bic.w	r2, r2, #3
 800f010:	430a      	orrs	r2, r1
 800f012:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f016:	0618      	lsls	r0, r3, #24
 800f018:	d50c      	bpl.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f01a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f01c:	f031 020c 	bics.w	r2, r1, #12
 800f020:	f040 82b4 	bne.w	800f58c <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f024:	4863      	ldr	r0, [pc, #396]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f026:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f02a:	f022 020c 	bic.w	r2, r2, #12
 800f02e:	430a      	orrs	r2, r1
 800f030:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f034:	05d9      	lsls	r1, r3, #23
 800f036:	d50c      	bpl.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f038:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f03a:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800f03e:	f040 82ad 	bne.w	800f59c <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f042:	485c      	ldr	r0, [pc, #368]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f044:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f048:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f04c:	430a      	orrs	r2, r1
 800f04e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f052:	059a      	lsls	r2, r3, #22
 800f054:	d50c      	bpl.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f056:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800f058:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800f05c:	f040 82a6 	bne.w	800f5ac <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f060:	4854      	ldr	r0, [pc, #336]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f062:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f066:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f06a:	430a      	orrs	r2, r1
 800f06c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f070:	055f      	lsls	r7, r3, #21
 800f072:	d50c      	bpl.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f074:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f076:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800f07a:	f040 829f 	bne.w	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f07e:	484d      	ldr	r0, [pc, #308]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f080:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f088:	430a      	orrs	r2, r1
 800f08a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f08e:	0518      	lsls	r0, r3, #20
 800f090:	d50c      	bpl.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f094:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800f098:	f040 8298 	bne.w	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f09c:	4845      	ldr	r0, [pc, #276]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f09e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f0a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f0ac:	04d9      	lsls	r1, r3, #19
 800f0ae:	d50c      	bpl.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f0b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f0b2:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800f0b6:	f040 8291 	bne.w	800f5dc <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f0ba:	483e      	ldr	r0, [pc, #248]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f0bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f0c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f0c4:	430a      	orrs	r2, r1
 800f0c6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f0ca:	049a      	lsls	r2, r3, #18
 800f0cc:	d50c      	bpl.n	800f0e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f0ce:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f0d0:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800f0d4:	f040 828a 	bne.w	800f5ec <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f0d8:	4836      	ldr	r0, [pc, #216]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f0da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f0de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f0e8:	025f      	lsls	r7, r3, #9
 800f0ea:	d50c      	bpl.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f0ec:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f0ee:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800f0f2:	f040 8222 	bne.w	800f53a <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f0f6:	482f      	ldr	r0, [pc, #188]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f0f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f0fc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f100:	430a      	orrs	r2, r1
 800f102:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f106:	0298      	lsls	r0, r3, #10
 800f108:	d510      	bpl.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f10a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800f10c:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800f110:	f040 821b 	bne.w	800f54a <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f114:	4827      	ldr	r0, [pc, #156]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800f116:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f11a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800f11e:	bf08      	it	eq
 800f120:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f122:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800f126:	430a      	orrs	r2, r1
 800f128:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800f12c:	f013 0f08 	tst.w	r3, #8
 800f130:	bf18      	it	ne
 800f132:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f134:	0359      	lsls	r1, r3, #13
 800f136:	d50c      	bpl.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f138:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800f13a:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800f13e:	f040 821d 	bne.w	800f57c <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f142:	481c      	ldr	r0, [pc, #112]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f144:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f14c:	430a      	orrs	r2, r1
 800f14e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f152:	021a      	lsls	r2, r3, #8
 800f154:	d50d      	bpl.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f156:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f15a:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800f15e:	f040 81fc 	bne.w	800f55a <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f162:	4814      	ldr	r0, [pc, #80]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f164:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f168:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f16c:	430a      	orrs	r2, r1
 800f16e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f172:	015f      	lsls	r7, r3, #5
 800f174:	d50d      	bpl.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f176:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f17a:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800f17e:	f040 81ca 	bne.w	800f516 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f182:	480c      	ldr	r0, [pc, #48]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f184:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f188:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800f18c:	430a      	orrs	r2, r1
 800f18e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f192:	0118      	lsls	r0, r3, #4
 800f194:	d510      	bpl.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f196:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800f19a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800f19e:	f040 81c3 	bne.w	800f528 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1a2:	4804      	ldr	r0, [pc, #16]	; (800f1b4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1a4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f1a8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800f1ac:	430a      	orrs	r2, r1
 800f1ae:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800f1b2:	e001      	b.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800f1b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f1b8:	00d9      	lsls	r1, r3, #3
 800f1ba:	d50d      	bpl.n	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f1bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f1c0:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800f1c4:	f040 8198 	bne.w	800f4f8 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f1c8:	49b3      	ldr	r1, [pc, #716]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f1ca:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800f1ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f1d8:	2e01      	cmp	r6, #1
 800f1da:	d003      	beq.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	019a      	lsls	r2, r3, #6
 800f1e0:	f140 8083 	bpl.w	800f2ea <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f1e4:	4eac      	ldr	r6, [pc, #688]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f1e6:	6833      	ldr	r3, [r6, #0]
 800f1e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f1ec:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1ee:	f7f9 ffa9 	bl	8009144 <HAL_GetTick>
 800f1f2:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f1f4:	e005      	b.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f1f6:	f7f9 ffa5 	bl	8009144 <HAL_GetTick>
 800f1fa:	1bc0      	subs	r0, r0, r7
 800f1fc:	2864      	cmp	r0, #100	; 0x64
 800f1fe:	f200 80fa 	bhi.w	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f202:	6833      	ldr	r3, [r6, #0]
 800f204:	011b      	lsls	r3, r3, #4
 800f206:	d4f6      	bmi.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f208:	6863      	ldr	r3, [r4, #4]
 800f20a:	3b32      	subs	r3, #50	; 0x32
 800f20c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f210:	f200 816c 	bhi.w	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	07df      	lsls	r7, r3, #31
 800f218:	d517      	bpl.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f21a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f21c:	b9aa      	cbnz	r2, 800f24a <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f21e:	68a7      	ldr	r7, [r4, #8]
 800f220:	1eba      	subs	r2, r7, #2
 800f222:	2a05      	cmp	r2, #5
 800f224:	f200 820c 	bhi.w	800f640 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f228:	499b      	ldr	r1, [pc, #620]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f22a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f22c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f230:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f234:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800f238:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800f23c:	4332      	orrs	r2, r6
 800f23e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f242:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800f246:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f24a:	031e      	lsls	r6, r3, #12
 800f24c:	f100 80e9 	bmi.w	800f422 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800f250:	02d8      	lsls	r0, r3, #11
 800f252:	d504      	bpl.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f254:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f256:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f25a:	f000 80e7 	beq.w	800f42c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f25e:	01d9      	lsls	r1, r3, #7
 800f260:	d514      	bpl.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f262:	6927      	ldr	r7, [r4, #16]
 800f264:	2f03      	cmp	r7, #3
 800f266:	f200 81f9 	bhi.w	800f65c <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f26a:	498b      	ldr	r1, [pc, #556]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f26c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f26e:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f272:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f276:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f27a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800f27e:	4332      	orrs	r2, r6
 800f280:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f288:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f28c:	019a      	lsls	r2, r3, #6
 800f28e:	d51a      	bpl.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	2b03      	cmp	r3, #3
 800f294:	f200 81dc 	bhi.w	800f650 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f298:	68a3      	ldr	r3, [r4, #8]
 800f29a:	3b02      	subs	r3, #2
 800f29c:	2b05      	cmp	r3, #5
 800f29e:	f200 81ec 	bhi.w	800f67a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f2a2:	68e2      	ldr	r2, [r4, #12]
 800f2a4:	1e93      	subs	r3, r2, #2
 800f2a6:	2b0d      	cmp	r3, #13
 800f2a8:	f200 81e0 	bhi.w	800f66c <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f2ac:	6923      	ldr	r3, [r4, #16]
 800f2ae:	6861      	ldr	r1, [r4, #4]
 800f2b0:	041b      	lsls	r3, r3, #16
 800f2b2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f2b6:	68a1      	ldr	r1, [r4, #8]
 800f2b8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f2bc:	4976      	ldr	r1, [pc, #472]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f2be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f2c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f2c6:	4e74      	ldr	r6, [pc, #464]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f2c8:	6833      	ldr	r3, [r6, #0]
 800f2ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f2ce:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2d0:	f7f9 ff38 	bl	8009144 <HAL_GetTick>
 800f2d4:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f2d6:	e005      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f2d8:	f7f9 ff34 	bl	8009144 <HAL_GetTick>
 800f2dc:	1bc0      	subs	r0, r0, r7
 800f2de:	2864      	cmp	r0, #100	; 0x64
 800f2e0:	f200 8089 	bhi.w	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f2e4:	6833      	ldr	r3, [r6, #0]
 800f2e6:	011b      	lsls	r3, r3, #4
 800f2e8:	d5f6      	bpl.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f2ea:	2d01      	cmp	r5, #1
 800f2ec:	d003      	beq.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800f2ee:	2000      	movs	r0, #0
}
 800f2f0:	b003      	add	sp, #12
 800f2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800f2f6:	4d68      	ldr	r5, [pc, #416]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2fe:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f300:	f7f9 ff20 	bl	8009144 <HAL_GetTick>
 800f304:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f306:	e004      	b.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f308:	f7f9 ff1c 	bl	8009144 <HAL_GetTick>
 800f30c:	1b80      	subs	r0, r0, r6
 800f30e:	2864      	cmp	r0, #100	; 0x64
 800f310:	d871      	bhi.n	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	009f      	lsls	r7, r3, #2
 800f316:	d4f7      	bmi.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f318:	6963      	ldr	r3, [r4, #20]
 800f31a:	3b32      	subs	r3, #50	; 0x32
 800f31c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f320:	f200 81b9 	bhi.w	800f696 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	031d      	lsls	r5, r3, #12
 800f328:	f140 81ad 	bpl.w	800f686 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800f32c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f32e:	2a00      	cmp	r2, #0
 800f330:	f040 81a9 	bne.w	800f686 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f334:	69a3      	ldr	r3, [r4, #24]
 800f336:	3b02      	subs	r3, #2
 800f338:	2b0d      	cmp	r3, #13
 800f33a:	f200 81d5 	bhi.w	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f33e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f340:	1e59      	subs	r1, r3, #1
 800f342:	291f      	cmp	r1, #31
 800f344:	f200 81c8 	bhi.w	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f348:	4a53      	ldr	r2, [pc, #332]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f34a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f34e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f356:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f35a:	4303      	orrs	r3, r0
 800f35c:	6960      	ldr	r0, [r4, #20]
 800f35e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f362:	69a0      	ldr	r0, [r4, #24]
 800f364:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f36c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f370:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800f374:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f378:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	0299      	lsls	r1, r3, #10
 800f380:	d504      	bpl.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800f382:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f384:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800f388:	f000 818b 	beq.w	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f38c:	071a      	lsls	r2, r3, #28
 800f38e:	d522      	bpl.n	800f3d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f390:	69e3      	ldr	r3, [r4, #28]
 800f392:	3b02      	subs	r3, #2
 800f394:	2b05      	cmp	r3, #5
 800f396:	f200 8199 	bhi.w	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f39a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f39c:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800f3a0:	f040 81a8 	bne.w	800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f3a4:	4a3c      	ldr	r2, [pc, #240]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f3a6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f3a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f3ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f3b0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800f3b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	69e1      	ldr	r1, [r4, #28]
 800f3bc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800f3c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f3c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f3c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f3cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800f3d0:	4303      	orrs	r3, r0
 800f3d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800f3d6:	4c30      	ldr	r4, [pc, #192]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3de:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800f3e0:	f7f9 feb0 	bl	8009144 <HAL_GetTick>
 800f3e4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	d480      	bmi.n	800f2ee <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f3ec:	f7f9 feaa 	bl	8009144 <HAL_GetTick>
 800f3f0:	1b40      	subs	r0, r0, r5
 800f3f2:	2864      	cmp	r0, #100	; 0x64
 800f3f4:	d9f7      	bls.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800f3f6:	2003      	movs	r0, #3
}
 800f3f8:	b003      	add	sp, #12
 800f3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f3fe:	2172      	movs	r1, #114	; 0x72
 800f400:	4826      	ldr	r0, [pc, #152]	; (800f49c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f402:	f7f6 fa35 	bl	8005870 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	e4ba      	b.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800f40a:	2601      	movs	r6, #1
 800f40c:	e4fa      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800f40e:	2500      	movs	r5, #0
      plli2sused = 1;
 800f410:	2601      	movs	r6, #1
 800f412:	e4e0      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800f414:	2178      	movs	r1, #120	; 0x78
 800f416:	4821      	ldr	r0, [pc, #132]	; (800f49c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f418:	f7f6 fa2a 	bl	8005870 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f41c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	e4b6      	b.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f422:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f424:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f428:	f47f af12 	bne.w	800f250 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f42c:	68e3      	ldr	r3, [r4, #12]
 800f42e:	3b02      	subs	r3, #2
 800f430:	2b0d      	cmp	r3, #13
 800f432:	f200 80f7 	bhi.w	800f624 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f438:	1e59      	subs	r1, r3, #1
 800f43a:	291f      	cmp	r1, #31
 800f43c:	f200 80f8 	bhi.w	800f630 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f440:	4a15      	ldr	r2, [pc, #84]	; (800f498 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f442:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f446:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f44a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f44e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f452:	4303      	orrs	r3, r0
 800f454:	6860      	ldr	r0, [r4, #4]
 800f456:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f45a:	68e0      	ldr	r0, [r4, #12]
 800f45c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f464:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f468:	f023 031f 	bic.w	r3, r3, #31
 800f46c:	430b      	orrs	r3, r1
 800f46e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	e6f3      	b.n	800f25e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f476:	f240 1105 	movw	r1, #261	; 0x105
 800f47a:	4808      	ldr	r0, [pc, #32]	; (800f49c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f47c:	f7f6 f9f8 	bl	8005870 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f480:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	e58d      	b.n	800efa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f486:	f240 110f 	movw	r1, #271	; 0x10f
 800f48a:	4804      	ldr	r0, [pc, #16]	; (800f49c <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f48c:	f7f6 f9f0 	bl	8005870 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f490:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f492:	6823      	ldr	r3, [r4, #0]
 800f494:	e597      	b.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f496:	bf00      	nop
 800f498:	40023800 	.word	0x40023800
 800f49c:	0802e054 	.word	0x0802e054
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f4a0:	f240 1119 	movw	r1, #281	; 0x119
 800f4a4:	489e      	ldr	r0, [pc, #632]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4a6:	f7f6 f9e3 	bl	8005870 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f4aa:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	e59c      	b.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f4b0:	21fb      	movs	r1, #251	; 0xfb
 800f4b2:	489b      	ldr	r0, [pc, #620]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4b4:	f7f6 f9dc 	bl	8005870 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f4b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	e55f      	b.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f4be:	4899      	ldr	r0, [pc, #612]	; (800f724 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f4c0:	4999      	ldr	r1, [pc, #612]	; (800f728 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800f4c2:	6882      	ldr	r2, [r0, #8]
 800f4c4:	4019      	ands	r1, r3
 800f4c6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	6082      	str	r2, [r0, #8]
 800f4ce:	e532      	b.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800f4d0:	2188      	movs	r1, #136	; 0x88
 800f4d2:	4893      	ldr	r0, [pc, #588]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4d4:	f7f6 f9cc 	bl	8005870 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4d8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	e46b      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f4de:	219c      	movs	r1, #156	; 0x9c
 800f4e0:	488f      	ldr	r0, [pc, #572]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4e2:	f7f6 f9c5 	bl	8005870 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f4e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	e47b      	b.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f4ec:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800f4f0:	488b      	ldr	r0, [pc, #556]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4f2:	f7f6 f9bd 	bl	8005870 <assert_failed>
 800f4f6:	e68d      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f4f8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800f4fc:	4888      	ldr	r0, [pc, #544]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f4fe:	f7f6 f9b7 	bl	8005870 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f502:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f506:	e65f      	b.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f508:	21f1      	movs	r1, #241	; 0xf1
 800f50a:	4885      	ldr	r0, [pc, #532]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f50c:	f7f6 f9b0 	bl	8005870 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f510:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f512:	6823      	ldr	r3, [r4, #0]
 800f514:	e51d      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f516:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f51a:	4881      	ldr	r0, [pc, #516]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f51c:	f7f6 f9a8 	bl	8005870 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f520:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f524:	6823      	ldr	r3, [r4, #0]
 800f526:	e62c      	b.n	800f182 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f528:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800f52c:	487c      	ldr	r0, [pc, #496]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f52e:	f7f6 f99f 	bl	8005870 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f532:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	e633      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f53a:	f240 1173 	movw	r1, #371	; 0x173
 800f53e:	4878      	ldr	r0, [pc, #480]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f540:	f7f6 f996 	bl	8005870 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f544:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	e5d5      	b.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f54a:	f240 117d 	movw	r1, #381	; 0x17d
 800f54e:	4874      	ldr	r0, [pc, #464]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f550:	f7f6 f98e 	bl	8005870 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f554:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	e5dc      	b.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f55a:	f240 119f 	movw	r1, #415	; 0x19f
 800f55e:	4870      	ldr	r0, [pc, #448]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f560:	f7f6 f986 	bl	8005870 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f564:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	e5fa      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f56c:	f240 1123 	movw	r1, #291	; 0x123
 800f570:	486b      	ldr	r0, [pc, #428]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f572:	f7f6 f97d 	bl	8005870 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f576:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	e544      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f57c:	f240 1195 	movw	r1, #405	; 0x195
 800f580:	4867      	ldr	r0, [pc, #412]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f582:	f7f6 f975 	bl	8005870 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f586:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	e5da      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f58c:	f240 112d 	movw	r1, #301	; 0x12d
 800f590:	4863      	ldr	r0, [pc, #396]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f592:	f7f6 f96d 	bl	8005870 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f596:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	e543      	b.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f59c:	f240 1137 	movw	r1, #311	; 0x137
 800f5a0:	485f      	ldr	r0, [pc, #380]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5a2:	f7f6 f965 	bl	8005870 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f5a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f5a8:	6823      	ldr	r3, [r4, #0]
 800f5aa:	e54a      	b.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f5ac:	f240 1141 	movw	r1, #321	; 0x141
 800f5b0:	485b      	ldr	r0, [pc, #364]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5b2:	f7f6 f95d 	bl	8005870 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f5b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	e551      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f5bc:	f240 114b 	movw	r1, #331	; 0x14b
 800f5c0:	4857      	ldr	r0, [pc, #348]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5c2:	f7f6 f955 	bl	8005870 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f5c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	e558      	b.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f5cc:	f240 1155 	movw	r1, #341	; 0x155
 800f5d0:	4853      	ldr	r0, [pc, #332]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5d2:	f7f6 f94d 	bl	8005870 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f5d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	e55f      	b.n	800f09c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f5dc:	f240 115f 	movw	r1, #351	; 0x15f
 800f5e0:	484f      	ldr	r0, [pc, #316]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5e2:	f7f6 f945 	bl	8005870 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f5e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	e566      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f5ec:	f240 1169 	movw	r1, #361	; 0x169
 800f5f0:	484b      	ldr	r0, [pc, #300]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f5f2:	f7f6 f93d 	bl	8005870 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f5f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	e56d      	b.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800f5fc:	f7f9 fda2 	bl	8009144 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f600:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f604:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f606:	e006      	b.n	800f616 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f608:	f7f9 fd9c 	bl	8009144 <HAL_GetTick>
 800f60c:	eba0 0008 	sub.w	r0, r0, r8
 800f610:	4548      	cmp	r0, r9
 800f612:	f63f aef0 	bhi.w	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f618:	0799      	lsls	r1, r3, #30
 800f61a:	d5f5      	bpl.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f61c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f61e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f622:	e47f      	b.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f624:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800f628:	483d      	ldr	r0, [pc, #244]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f62a:	f7f6 f921 	bl	8005870 <assert_failed>
 800f62e:	e702      	b.n	800f436 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f630:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800f634:	483a      	ldr	r0, [pc, #232]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f636:	f7f6 f91b 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f63c:	1e59      	subs	r1, r3, #1
 800f63e:	e6ff      	b.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f640:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f644:	4836      	ldr	r0, [pc, #216]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f646:	f7f6 f913 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f64a:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f64c:	6823      	ldr	r3, [r4, #0]
 800f64e:	e5eb      	b.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f650:	f44f 7105 	mov.w	r1, #532	; 0x214
 800f654:	4832      	ldr	r0, [pc, #200]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f656:	f7f6 f90b 	bl	8005870 <assert_failed>
 800f65a:	e61d      	b.n	800f298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f65c:	f240 2105 	movw	r1, #517	; 0x205
 800f660:	482f      	ldr	r0, [pc, #188]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f662:	f7f6 f905 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f666:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	e5fe      	b.n	800f26a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f66c:	f240 2116 	movw	r1, #534	; 0x216
 800f670:	482b      	ldr	r0, [pc, #172]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f672:	f7f6 f8fd 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f676:	68e2      	ldr	r2, [r4, #12]
 800f678:	e618      	b.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f67a:	f240 2115 	movw	r1, #533	; 0x215
 800f67e:	4828      	ldr	r0, [pc, #160]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f680:	f7f6 f8f6 	bl	8005870 <assert_failed>
 800f684:	e60d      	b.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f686:	02d8      	lsls	r0, r3, #11
 800f688:	f57f ae79 	bpl.w	800f37e <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f68c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f68e:	2a00      	cmp	r2, #0
 800f690:	f47f ae75 	bne.w	800f37e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800f694:	e64e      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f696:	f44f 7111 	mov.w	r1, #580	; 0x244
 800f69a:	4821      	ldr	r0, [pc, #132]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f69c:	f7f6 f8e8 	bl	8005870 <assert_failed>
 800f6a0:	e640      	b.n	800f324 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f6a2:	6a20      	ldr	r0, [r4, #32]
 800f6a4:	2803      	cmp	r0, #3
 800f6a6:	d82c      	bhi.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f6a8:	491e      	ldr	r1, [pc, #120]	; (800f724 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f6aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f6ae:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f6b2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f6b6:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800f6ba:	432a      	orrs	r2, r5
 800f6bc:	6965      	ldr	r5, [r4, #20]
 800f6be:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800f6c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f6c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800f6ca:	e65f      	b.n	800f38c <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f6cc:	f240 216f 	movw	r1, #623	; 0x26f
 800f6d0:	4813      	ldr	r0, [pc, #76]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6d2:	f7f6 f8cd 	bl	8005870 <assert_failed>
 800f6d6:	e660      	b.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f6d8:	f240 214d 	movw	r1, #589	; 0x24d
 800f6dc:	4810      	ldr	r0, [pc, #64]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6de:	f7f6 f8c7 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f6e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6e4:	1e59      	subs	r1, r3, #1
 800f6e6:	e62f      	b.n	800f348 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f6e8:	f240 214b 	movw	r1, #587	; 0x24b
 800f6ec:	480c      	ldr	r0, [pc, #48]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6ee:	f7f6 f8bf 	bl	8005870 <assert_failed>
 800f6f2:	e624      	b.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f6f4:	480a      	ldr	r0, [pc, #40]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6f6:	f44f 711c 	mov.w	r1, #624	; 0x270
 800f6fa:	f7f6 f8b9 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f6fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f700:	e650      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f702:	4807      	ldr	r0, [pc, #28]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f704:	f44f 7118 	mov.w	r1, #608	; 0x260
 800f708:	f7f6 f8b2 	bl	8005870 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f70c:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	e7ca      	b.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f712:	21b7      	movs	r1, #183	; 0xb7
 800f714:	4802      	ldr	r0, [pc, #8]	; (800f720 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f716:	f7f6 f8ab 	bl	8005870 <assert_failed>
 800f71a:	f7ff bbc2 	b.w	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f71e:	bf00      	nop
 800f720:	0802e054 	.word	0x0802e054
 800f724:	40023800 	.word	0x40023800
 800f728:	0ffffcff 	.word	0x0ffffcff

0800f72c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f72c:	b308      	cbz	r0, 800f772 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f72e:	4b12      	ldr	r3, [pc, #72]	; (800f778 <HAL_RNG_Init+0x4c>)
 800f730:	6802      	ldr	r2, [r0, #0]
 800f732:	429a      	cmp	r2, r3
{
 800f734:	b510      	push	{r4, lr}
 800f736:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f738:	d003      	beq.n	800f742 <HAL_RNG_Init+0x16>
 800f73a:	21a3      	movs	r1, #163	; 0xa3
 800f73c:	480f      	ldr	r0, [pc, #60]	; (800f77c <HAL_RNG_Init+0x50>)
 800f73e:	f7f6 f897 	bl	8005870 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f742:	7963      	ldrb	r3, [r4, #5]
 800f744:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f748:	b173      	cbz	r3, 800f768 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f74a:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f74c:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f74e:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800f750:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800f754:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800f756:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800f758:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800f75a:	f043 0304 	orr.w	r3, r3, #4
 800f75e:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800f760:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f764:	60a2      	str	r2, [r4, #8]
}
 800f766:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800f768:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800f76a:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800f76c:	f7f7 ff0a 	bl	8007584 <HAL_RNG_MspInit>
 800f770:	e7eb      	b.n	800f74a <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800f772:	2001      	movs	r0, #1
}
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	50060800 	.word	0x50060800
 800f77c:	0802e090 	.word	0x0802e090

0800f780 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f782:	460c      	mov	r4, r1
 800f784:	4615      	mov	r5, r2
 800f786:	b083      	sub	sp, #12
 800f788:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f78a:	4425      	add	r5, r4
 800f78c:	f7f9 fcda 	bl	8009144 <HAL_GetTick>
 800f790:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800f792:	f7f9 fcd7 	bl	8009144 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f796:	4b25      	ldr	r3, [pc, #148]	; (800f82c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800f798:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800f7a0:	fb05 f303 	mul.w	r3, r5, r3
 800f7a4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7a6:	6832      	ldr	r2, [r6, #0]
 800f7a8:	e001      	b.n	800f7ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f7aa:	1c63      	adds	r3, r4, #1
 800f7ac:	d106      	bne.n	800f7bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7ae:	6893      	ldr	r3, [r2, #8]
 800f7b0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800f7b4:	d1f9      	bne.n	800f7aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800f7b6:	4618      	mov	r0, r3
}
 800f7b8:	b003      	add	sp, #12
 800f7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f7bc:	f7f9 fcc2 	bl	8009144 <HAL_GetTick>
 800f7c0:	1bc0      	subs	r0, r0, r7
 800f7c2:	42a8      	cmp	r0, r5
 800f7c4:	d208      	bcs.n	800f7d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800f7c6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800f7c8:	2b00      	cmp	r3, #0
      count--;
 800f7ca:	9b01      	ldr	r3, [sp, #4]
 800f7cc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800f7d0:	bf08      	it	eq
 800f7d2:	2500      	moveq	r5, #0
      count--;
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	e7e6      	b.n	800f7a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7d8:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7dc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7de:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7e6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7e8:	d014      	beq.n	800f814 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7ea:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800f7ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f7f0:	d007      	beq.n	800f802 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800f7f2:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800f7f4:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800f7f6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800f7f8:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800f7fc:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800f800:	e7da      	b.n	800f7b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	e7ee      	b.n	800f7f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f814:	68b2      	ldr	r2, [r6, #8]
 800f816:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f81a:	d002      	beq.n	800f822 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800f81c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f820:	d1e3      	bne.n	800f7ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	e7de      	b.n	800f7ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800f82c:	20000298 	.word	0x20000298

0800f830 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800f830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f834:	4615      	mov	r5, r2
 800f836:	4698      	mov	r8, r3
 800f838:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f83a:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f83c:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800f83e:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800f840:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800f844:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f846:	f7f9 fc7d 	bl	8009144 <HAL_GetTick>
 800f84a:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800f84e:	f7f9 fc79 	bl	8009144 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f852:	4b2e      	ldr	r3, [pc, #184]	; (800f90c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f854:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800f858:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f85a:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800f85c:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f85e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f862:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f866:	0d1b      	lsrs	r3, r3, #20
 800f868:	fb07 f303 	mul.w	r3, r7, r3
 800f86c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800f86e:	e00b      	b.n	800f888 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f870:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800f874:	d106      	bne.n	800f884 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f876:	f899 300c 	ldrb.w	r3, [r9, #12]
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f880:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f884:	1c6b      	adds	r3, r5, #1
 800f886:	d106      	bne.n	800f896 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800f888:	6893      	ldr	r3, [r2, #8]
 800f88a:	4023      	ands	r3, r4
 800f88c:	d1f0      	bne.n	800f870 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800f88e:	4618      	mov	r0, r3
}
 800f890:	b003      	add	sp, #12
 800f892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f896:	f7f9 fc55 	bl	8009144 <HAL_GetTick>
 800f89a:	eba0 0008 	sub.w	r0, r0, r8
 800f89e:	42b8      	cmp	r0, r7
 800f8a0:	d209      	bcs.n	800f8b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800f8a2:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800f8a4:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800f8a6:	2b00      	cmp	r3, #0
      count--;
 800f8a8:	9b01      	ldr	r3, [sp, #4]
 800f8aa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800f8ae:	bf08      	it	eq
 800f8b0:	2700      	moveq	r7, #0
      count--;
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	e7e8      	b.n	800f888 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8b6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f8ba:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8bc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f8c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f8c4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8c6:	d014      	beq.n	800f8f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800f8ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f8ce:	d007      	beq.n	800f8e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800f8d0:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800f8d2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800f8d4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800f8d6:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800f8da:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800f8de:	e7d7      	b.n	800f890 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	e7ee      	b.n	800f8d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8f2:	68b2      	ldr	r2, [r6, #8]
 800f8f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f8f8:	d002      	beq.n	800f900 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800f8fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f8fe:	d1e3      	bne.n	800f8c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f906:	601a      	str	r2, [r3, #0]
 800f908:	e7de      	b.n	800f8c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800f90a:	bf00      	nop
 800f90c:	20000298 	.word	0x20000298

0800f910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	4613      	mov	r3, r2
 800f916:	460e      	mov	r6, r1
 800f918:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f91a:	9201      	str	r2, [sp, #4]
 800f91c:	460a      	mov	r2, r1
 800f91e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f922:	f7ff ff85 	bl	800f830 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800f926:	9b01      	ldr	r3, [sp, #4]
 800f928:	bb58      	cbnz	r0, 800f982 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f92a:	4919      	ldr	r1, [pc, #100]	; (800f990 <SPI_EndRxTxTransaction+0x80>)
 800f92c:	4a19      	ldr	r2, [pc, #100]	; (800f994 <SPI_EndRxTxTransaction+0x84>)
 800f92e:	6808      	ldr	r0, [r1, #0]
 800f930:	fba2 2000 	umull	r2, r0, r2, r0
 800f934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f938:	0d40      	lsrs	r0, r0, #21
 800f93a:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f93e:	686a      	ldr	r2, [r5, #4]
 800f940:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f944:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f946:	d107      	bne.n	800f958 <SPI_EndRxTxTransaction+0x48>
 800f948:	e012      	b.n	800f970 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800f94a:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f94c:	682a      	ldr	r2, [r5, #0]
      count--;
 800f94e:	3c01      	subs	r4, #1
 800f950:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f952:	6894      	ldr	r4, [r2, #8]
 800f954:	0622      	lsls	r2, r4, #24
 800f956:	d502      	bpl.n	800f95e <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800f958:	9c03      	ldr	r4, [sp, #12]
 800f95a:	2c00      	cmp	r4, #0
 800f95c:	d1f5      	bne.n	800f94a <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f95e:	4632      	mov	r2, r6
 800f960:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f964:	4628      	mov	r0, r5
 800f966:	f7ff ff63 	bl	800f830 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800f96a:	b950      	cbnz	r0, 800f982 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800f96c:	b004      	add	sp, #16
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f970:	461a      	mov	r2, r3
 800f972:	4631      	mov	r1, r6
 800f974:	4628      	mov	r0, r5
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	f7ff ff02 	bl	800f780 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800f97c:	9b01      	ldr	r3, [sp, #4]
 800f97e:	2800      	cmp	r0, #0
 800f980:	d0ed      	beq.n	800f95e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f982:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800f984:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f986:	f043 0320 	orr.w	r3, r3, #32
 800f98a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800f98c:	b004      	add	sp, #16
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	20000298 	.word	0x20000298
 800f994:	165e9f81 	.word	0x165e9f81

0800f998 <HAL_SPI_Init>:
  if (hspi == NULL)
 800f998:	2800      	cmp	r0, #0
 800f99a:	f000 8128 	beq.w	800fbee <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f99e:	6802      	ldr	r2, [r0, #0]
 800f9a0:	4ba7      	ldr	r3, [pc, #668]	; (800fc40 <HAL_SPI_Init+0x2a8>)
 800f9a2:	49a8      	ldr	r1, [pc, #672]	; (800fc44 <HAL_SPI_Init+0x2ac>)
{
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f9a8:	48a7      	ldr	r0, [pc, #668]	; (800fc48 <HAL_SPI_Init+0x2b0>)
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	bf18      	it	ne
 800f9ae:	4282      	cmpne	r2, r0
 800f9b0:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800f9b4:	bf14      	ite	ne
 800f9b6:	2301      	movne	r3, #1
 800f9b8:	2300      	moveq	r3, #0
 800f9ba:	428a      	cmp	r2, r1
 800f9bc:	bf0c      	ite	eq
 800f9be:	2300      	moveq	r3, #0
 800f9c0:	f003 0301 	andne.w	r3, r3, #1
 800f9c4:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800f9c8:	4282      	cmp	r2, r0
 800f9ca:	bf0c      	ite	eq
 800f9cc:	2300      	moveq	r3, #0
 800f9ce:	f003 0301 	andne.w	r3, r3, #1
 800f9d2:	428a      	cmp	r2, r1
 800f9d4:	bf0c      	ite	eq
 800f9d6:	2300      	moveq	r3, #0
 800f9d8:	f003 0301 	andne.w	r3, r3, #1
 800f9dc:	b11b      	cbz	r3, 800f9e6 <HAL_SPI_Init+0x4e>
 800f9de:	4b9b      	ldr	r3, [pc, #620]	; (800fc4c <HAL_SPI_Init+0x2b4>)
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	f040 80fe 	bne.w	800fbe2 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f9e6:	6863      	ldr	r3, [r4, #4]
 800f9e8:	b11b      	cbz	r3, 800f9f2 <HAL_SPI_Init+0x5a>
 800f9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f9ee:	f040 80cd 	bne.w	800fb8c <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f9f2:	68a3      	ldr	r3, [r4, #8]
 800f9f4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800f9f8:	d003      	beq.n	800fa02 <HAL_SPI_Init+0x6a>
 800f9fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9fe:	f040 80db 	bne.w	800fbb8 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fa02:	68e2      	ldr	r2, [r4, #12]
 800fa04:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800fa08:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800fa0c:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800fa10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fa14:	bf18      	it	ne
 800fa16:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800fa1a:	bf14      	ite	ne
 800fa1c:	2301      	movne	r3, #1
 800fa1e:	2300      	moveq	r3, #0
 800fa20:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800fa24:	bf0c      	ite	eq
 800fa26:	2300      	moveq	r3, #0
 800fa28:	f003 0301 	andne.w	r3, r3, #1
 800fa2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fa30:	bf0c      	ite	eq
 800fa32:	2300      	moveq	r3, #0
 800fa34:	f003 0301 	andne.w	r3, r3, #1
 800fa38:	b12b      	cbz	r3, 800fa46 <HAL_SPI_Init+0xae>
 800fa3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa3e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fa42:	f040 80f7 	bne.w	800fc34 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fa46:	69a3      	ldr	r3, [r4, #24]
 800fa48:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800fa4c:	d003      	beq.n	800fa56 <HAL_SPI_Init+0xbe>
 800fa4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fa52:	f040 80a1 	bne.w	800fb98 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa58:	f033 0308 	bics.w	r3, r3, #8
 800fa5c:	f040 80a6 	bne.w	800fbac <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fa60:	69e3      	ldr	r3, [r4, #28]
 800fa62:	f023 0318 	bic.w	r3, r3, #24
 800fa66:	2b20      	cmp	r3, #32
 800fa68:	d002      	beq.n	800fa70 <HAL_SPI_Init+0xd8>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f040 80d6 	bne.w	800fc1c <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fa70:	6a23      	ldr	r3, [r4, #32]
 800fa72:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fa76:	f040 80a8 	bne.w	800fbca <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fa7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa7c:	f033 0210 	bics.w	r2, r3, #16
 800fa80:	d17b      	bne.n	800fb7a <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d16e      	bne.n	800fb64 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fa86:	6923      	ldr	r3, [r4, #16]
 800fa88:	f033 0302 	bics.w	r3, r3, #2
 800fa8c:	f040 80c0 	bne.w	800fc10 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800fa90:	6963      	ldr	r3, [r4, #20]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d904      	bls.n	800faa0 <HAL_SPI_Init+0x108>
 800fa96:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800fa9a:	486d      	ldr	r0, [pc, #436]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fa9c:	f7f5 fee8 	bl	8005870 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800faa0:	6863      	ldr	r3, [r4, #4]
 800faa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800faa6:	f000 80a4 	beq.w	800fbf2 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800faaa:	2300      	movs	r3, #0
 800faac:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800faae:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fab0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fab4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fab6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f000 808b 	beq.w	800fbd6 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800fac0:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fac2:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fac4:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fac6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800faca:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800facc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800fad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fad4:	bf8c      	ite	hi
 800fad6:	f04f 0c00 	movhi.w	ip, #0
 800fada:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800fade:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fae4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800fae8:	d16c      	bne.n	800fbc4 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800faea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800faec:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800faf0:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800faf2:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800faf6:	6923      	ldr	r3, [r4, #16]
 800faf8:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800fafc:	68a1      	ldr	r1, [r4, #8]
 800fafe:	f003 0302 	and.w	r3, r3, #2
 800fb02:	69a6      	ldr	r6, [r4, #24]
 800fb04:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800fb08:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb0c:	431a      	orrs	r2, r3
 800fb0e:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb10:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb14:	f003 0301 	and.w	r3, r3, #1
 800fb18:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb1c:	f003 0310 	and.w	r3, r3, #16
 800fb20:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb22:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb24:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb28:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800fb2c:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb30:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb32:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb36:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb3e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb40:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb44:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fb4c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fb4e:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800fb50:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fb52:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fb54:	69eb      	ldr	r3, [r5, #28]
 800fb56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb5a:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fb5c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fb5e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800fb62:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fb64:	69e3      	ldr	r3, [r4, #28]
 800fb66:	f023 0318 	bic.w	r3, r3, #24
 800fb6a:	2b20      	cmp	r3, #32
 800fb6c:	d001      	beq.n	800fb72 <HAL_SPI_Init+0x1da>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d15a      	bne.n	800fc28 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fb72:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fb74:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800fb78:	e799      	b.n	800faae <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fb7a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800fb7e:	4834      	ldr	r0, [pc, #208]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fb80:	f7f5 fe76 	bl	8005870 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1ec      	bne.n	800fb64 <HAL_SPI_Init+0x1cc>
 800fb8a:	e77c      	b.n	800fa86 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fb8c:	f240 1147 	movw	r1, #327	; 0x147
 800fb90:	482f      	ldr	r0, [pc, #188]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fb92:	f7f5 fe6d 	bl	8005870 <assert_failed>
 800fb96:	e72c      	b.n	800f9f2 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fb98:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fb9c:	482c      	ldr	r0, [pc, #176]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fb9e:	f7f5 fe67 	bl	8005870 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fba4:	f033 0308 	bics.w	r3, r3, #8
 800fba8:	f43f af5a 	beq.w	800fa60 <HAL_SPI_Init+0xc8>
 800fbac:	f240 114b 	movw	r1, #331	; 0x14b
 800fbb0:	4827      	ldr	r0, [pc, #156]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fbb2:	f7f5 fe5d 	bl	8005870 <assert_failed>
 800fbb6:	e753      	b.n	800fa60 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fbb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fbbc:	4824      	ldr	r0, [pc, #144]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fbbe:	f7f5 fe57 	bl	8005870 <assert_failed>
 800fbc2:	e71e      	b.n	800fa02 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	62a0      	str	r0, [r4, #40]	; 0x28
 800fbc8:	e792      	b.n	800faf0 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fbca:	f240 114d 	movw	r1, #333	; 0x14d
 800fbce:	4820      	ldr	r0, [pc, #128]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fbd0:	f7f5 fe4e 	bl	8005870 <assert_failed>
 800fbd4:	e751      	b.n	800fa7a <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800fbd6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800fbd8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800fbdc:	f7f7 fce8 	bl	80075b0 <HAL_SPI_MspInit>
 800fbe0:	e76e      	b.n	800fac0 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fbe2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800fbe6:	481a      	ldr	r0, [pc, #104]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fbe8:	f7f5 fe42 	bl	8005870 <assert_failed>
 800fbec:	e6fb      	b.n	800f9e6 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800fbee:	2001      	movs	r0, #1
}
 800fbf0:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fbf2:	69e3      	ldr	r3, [r4, #28]
 800fbf4:	f023 0318 	bic.w	r3, r3, #24
 800fbf8:	2b20      	cmp	r3, #32
 800fbfa:	f43f af58 	beq.w	800faae <HAL_SPI_Init+0x116>
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f43f af55 	beq.w	800faae <HAL_SPI_Init+0x116>
 800fc04:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800fc08:	4811      	ldr	r0, [pc, #68]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fc0a:	f7f5 fe31 	bl	8005870 <assert_failed>
 800fc0e:	e74e      	b.n	800faae <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fc10:	f240 1151 	movw	r1, #337	; 0x151
 800fc14:	480e      	ldr	r0, [pc, #56]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fc16:	f7f5 fe2b 	bl	8005870 <assert_failed>
 800fc1a:	e739      	b.n	800fa90 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fc1c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800fc20:	480b      	ldr	r0, [pc, #44]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fc22:	f7f5 fe25 	bl	8005870 <assert_failed>
 800fc26:	e723      	b.n	800fa70 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fc28:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fc2c:	4808      	ldr	r0, [pc, #32]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fc2e:	f7f5 fe1f 	bl	8005870 <assert_failed>
 800fc32:	e79e      	b.n	800fb72 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fc34:	f240 1149 	movw	r1, #329	; 0x149
 800fc38:	4805      	ldr	r0, [pc, #20]	; (800fc50 <HAL_SPI_Init+0x2b8>)
 800fc3a:	f7f5 fe19 	bl	8005870 <assert_failed>
 800fc3e:	e702      	b.n	800fa46 <HAL_SPI_Init+0xae>
 800fc40:	40013000 	.word	0x40013000
 800fc44:	40003c00 	.word	0x40003c00
 800fc48:	40003800 	.word	0x40003800
 800fc4c:	40015400 	.word	0x40015400
 800fc50:	0802e0c8 	.word	0x0802e0c8

0800fc54 <HAL_SPI_Transmit>:
{
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fc5a:	6883      	ldr	r3, [r0, #8]
{
 800fc5c:	b082      	sub	sp, #8
 800fc5e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fc60:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800fc64:	460f      	mov	r7, r1
 800fc66:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fc68:	d171      	bne.n	800fd4e <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800fc6a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d076      	beq.n	800fd60 <HAL_SPI_Transmit+0x10c>
 800fc72:	2301      	movs	r3, #1
 800fc74:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800fc78:	f7f9 fa64 	bl	8009144 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800fc7c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800fc80:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	b2d8      	uxtb	r0, r3
 800fc86:	d009      	beq.n	800fc9c <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800fc88:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fc8a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fc8c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fc8e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800fc92:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800fc96:	b002      	add	sp, #8
 800fc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fc9c:	2f00      	cmp	r7, #0
 800fc9e:	d0f4      	beq.n	800fc8a <HAL_SPI_Transmit+0x36>
 800fca0:	fab8 f388 	clz	r3, r8
 800fca4:	095b      	lsrs	r3, r3, #5
 800fca6:	f1b8 0f00 	cmp.w	r8, #0
 800fcaa:	d0ee      	beq.n	800fc8a <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fcac:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fcae:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fcb0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fcb4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcb8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fcba:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800fcbe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fcc2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fcc4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800fcc8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fccc:	68a3      	ldr	r3, [r4, #8]
 800fcce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800fcd2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fcd4:	d07a      	beq.n	800fdcc <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	0652      	lsls	r2, r2, #25
 800fcda:	d403      	bmi.n	800fce4 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fce2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fce4:	68e2      	ldr	r2, [r4, #12]
 800fce6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fcea:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fcec:	d93c      	bls.n	800fd68 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fcee:	b112      	cbz	r2, 800fcf6 <HAL_SPI_Transmit+0xa2>
 800fcf0:	f1b8 0f01 	cmp.w	r8, #1
 800fcf4:	d107      	bne.n	800fd06 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fcf6:	f837 2b02 	ldrh.w	r2, [r7], #2
 800fcfa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800fcfc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fcfe:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800fd00:	3a01      	subs	r2, #1
 800fd02:	b292      	uxth	r2, r2
 800fd04:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fd06:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	b992      	cbnz	r2, 800fd32 <HAL_SPI_Transmit+0xde>
 800fd0c:	e072      	b.n	800fdf4 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fd10:	f832 1b02 	ldrh.w	r1, [r2], #2
 800fd14:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800fd16:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd1a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800fd1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fd20:	fa1f fc8c 	uxth.w	ip, ip
 800fd24:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fd28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d061      	beq.n	800fdf4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	0797      	lsls	r7, r2, #30
 800fd36:	d4ea      	bmi.n	800fd0e <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd38:	f7f9 fa04 	bl	8009144 <HAL_GetTick>
 800fd3c:	1b80      	subs	r0, r0, r6
 800fd3e:	42a8      	cmp	r0, r5
 800fd40:	d301      	bcc.n	800fd46 <HAL_SPI_Transmit+0xf2>
 800fd42:	1c68      	adds	r0, r5, #1
 800fd44:	d101      	bne.n	800fd4a <HAL_SPI_Transmit+0xf6>
 800fd46:	2d00      	cmp	r5, #0
 800fd48:	d1ee      	bne.n	800fd28 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800fd4a:	2003      	movs	r0, #3
 800fd4c:	e79d      	b.n	800fc8a <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fd4e:	f240 313d 	movw	r1, #829	; 0x33d
 800fd52:	4838      	ldr	r0, [pc, #224]	; (800fe34 <HAL_SPI_Transmit+0x1e0>)
 800fd54:	f7f5 fd8c 	bl	8005870 <assert_failed>
  __HAL_LOCK(hspi);
 800fd58:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d188      	bne.n	800fc72 <HAL_SPI_Transmit+0x1e>
 800fd60:	2002      	movs	r0, #2
}
 800fd62:	b002      	add	sp, #8
 800fd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd68:	b112      	cbz	r2, 800fd70 <HAL_SPI_Transmit+0x11c>
 800fd6a:	f1b8 0f01 	cmp.w	r8, #1
 800fd6e:	d10b      	bne.n	800fd88 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800fd70:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fd72:	b292      	uxth	r2, r2
 800fd74:	2a01      	cmp	r2, #1
 800fd76:	d953      	bls.n	800fe20 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd78:	f837 2b02 	ldrh.w	r2, [r7], #2
 800fd7c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800fd7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd80:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fd82:	3b02      	subs	r3, #2
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fd88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	b983      	cbnz	r3, 800fdb0 <HAL_SPI_Transmit+0x15c>
 800fd8e:	e031      	b.n	800fdf4 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800fd90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d922      	bls.n	800fdde <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd9a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800fd9e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800fda0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fda2:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fda4:	3b02      	subs	r3, #2
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800fdaa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800fdac:	b289      	uxth	r1, r1
 800fdae:	b309      	cbz	r1, 800fdf4 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fdb0:	6822      	ldr	r2, [r4, #0]
 800fdb2:	6893      	ldr	r3, [r2, #8]
 800fdb4:	0799      	lsls	r1, r3, #30
 800fdb6:	d4eb      	bmi.n	800fd90 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdb8:	f7f9 f9c4 	bl	8009144 <HAL_GetTick>
 800fdbc:	1b80      	subs	r0, r0, r6
 800fdbe:	42a8      	cmp	r0, r5
 800fdc0:	d301      	bcc.n	800fdc6 <HAL_SPI_Transmit+0x172>
 800fdc2:	1c6b      	adds	r3, r5, #1
 800fdc4:	d1c1      	bne.n	800fd4a <HAL_SPI_Transmit+0xf6>
 800fdc6:	2d00      	cmp	r5, #0
 800fdc8:	d1ef      	bne.n	800fdaa <HAL_SPI_Transmit+0x156>
 800fdca:	e7be      	b.n	800fd4a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fdd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	e77b      	b.n	800fcd6 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fdde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800fde4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800fde6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800fde8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800fdea:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800fdec:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800fdee:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800fdf0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fdf2:	e7da      	b.n	800fdaa <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f7ff fd89 	bl	800f910 <SPI_EndRxTxTransaction>
 800fdfe:	b108      	cbz	r0, 800fe04 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fe00:	2320      	movs	r3, #32
 800fe02:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fe04:	68a3      	ldr	r3, [r4, #8]
 800fe06:	b933      	cbnz	r3, 800fe16 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fe08:	6822      	ldr	r2, [r4, #0]
 800fe0a:	9301      	str	r3, [sp, #4]
 800fe0c:	68d3      	ldr	r3, [r2, #12]
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	6893      	ldr	r3, [r2, #8]
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe16:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800fe18:	3800      	subs	r0, #0
 800fe1a:	bf18      	it	ne
 800fe1c:	2001      	movne	r0, #1
error:
 800fe1e:	e734      	b.n	800fc8a <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe20:	783a      	ldrb	r2, [r7, #0]
 800fe22:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800fe24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800fe26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800fe28:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800fe2a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800fe2c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800fe2e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800fe30:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fe32:	e7a9      	b.n	800fd88 <HAL_SPI_Transmit+0x134>
 800fe34:	0802e0c8 	.word	0x0802e0c8

0800fe38 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe38:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe3a:	4a12      	ldr	r2, [pc, #72]	; (800fe84 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800fe40:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe42:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800fe44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800fe46:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800fe48:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe4e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800fe50:	680d      	ldr	r5, [r1, #0]
 800fe52:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe54:	688d      	ldr	r5, [r1, #8]
 800fe56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe5a:	4d0b      	ldr	r5, [pc, #44]	; (800fe88 <TIM_OC5_SetConfig+0x50>)
 800fe5c:	42a8      	cmp	r0, r5
 800fe5e:	d00a      	beq.n	800fe76 <TIM_OC5_SetConfig+0x3e>
 800fe60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fe64:	42a8      	cmp	r0, r5
 800fe66:	d006      	beq.n	800fe76 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe68:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fe6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800fe6c:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800fe6e:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe70:	6203      	str	r3, [r0, #32]
}
 800fe72:	bc30      	pop	{r4, r5}
 800fe74:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe76:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe7a:	694d      	ldr	r5, [r1, #20]
 800fe7c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800fe80:	e7f2      	b.n	800fe68 <TIM_OC5_SetConfig+0x30>
 800fe82:	bf00      	nop
 800fe84:	fffeff8f 	.word	0xfffeff8f
 800fe88:	40010000 	.word	0x40010000

0800fe8c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe8c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe8e:	4a12      	ldr	r2, [pc, #72]	; (800fed8 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800fe94:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe96:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800fe98:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800fe9a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800fe9c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fea2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fea4:	680d      	ldr	r5, [r1, #0]
 800fea6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800feaa:	688d      	ldr	r5, [r1, #8]
 800feac:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feb0:	4d0a      	ldr	r5, [pc, #40]	; (800fedc <TIM_OC6_SetConfig+0x50>)
 800feb2:	42a8      	cmp	r0, r5
 800feb4:	d00a      	beq.n	800fecc <TIM_OC6_SetConfig+0x40>
 800feb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800feba:	42a8      	cmp	r0, r5
 800febc:	d006      	beq.n	800fecc <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800febe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fec0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800fec2:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800fec4:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fec6:	6203      	str	r3, [r0, #32]
}
 800fec8:	bc30      	pop	{r4, r5}
 800feca:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fecc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fed0:	694d      	ldr	r5, [r1, #20]
 800fed2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800fed6:	e7f2      	b.n	800febe <TIM_OC6_SetConfig+0x32>
 800fed8:	feff8fff 	.word	0xfeff8fff
 800fedc:	40010000 	.word	0x40010000

0800fee0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fee0:	6a03      	ldr	r3, [r0, #32]
 800fee2:	f023 0301 	bic.w	r3, r3, #1
{
 800fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800feea:	6203      	str	r3, [r0, #32]
{
 800feec:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800feee:	6a05      	ldr	r5, [r0, #32]
{
 800fef0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800fef2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fef6:	4b27      	ldr	r3, [pc, #156]	; (800ff94 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800fef8:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800fefc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800fefe:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ff00:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ff02:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800ff04:	688b      	ldr	r3, [r1, #8]
 800ff06:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ff08:	4b23      	ldr	r3, [pc, #140]	; (800ff98 <TIM_OC1_SetConfig+0xb8>)
 800ff0a:	4298      	cmp	r0, r3
 800ff0c:	d00b      	beq.n	800ff26 <TIM_OC1_SetConfig+0x46>
 800ff0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ff12:	4298      	cmp	r0, r3
 800ff14:	d007      	beq.n	800ff26 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ff16:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ff18:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ff1c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ff1e:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ff20:	6225      	str	r5, [r4, #32]
}
 800ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ff26:	68f3      	ldr	r3, [r6, #12]
 800ff28:	f033 0208 	bics.w	r2, r3, #8
 800ff2c:	d120      	bne.n	800ff70 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800ff2e:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ff32:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ff34:	69b3      	ldr	r3, [r6, #24]
 800ff36:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff3a:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ff3e:	d11e      	bne.n	800ff7e <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ff40:	6973      	ldr	r3, [r6, #20]
 800ff42:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ff46:	d106      	bne.n	800ff56 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff48:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ff4c:	69b1      	ldr	r1, [r6, #24]
 800ff4e:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff50:	ea42 0803 	orr.w	r8, r2, r3
 800ff54:	e7df      	b.n	800ff16 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ff56:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800ff5a:	4810      	ldr	r0, [pc, #64]	; (800ff9c <TIM_OC1_SetConfig+0xbc>)
 800ff5c:	f7f5 fc88 	bl	8005870 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff60:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ff64:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800ff66:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	ea42 0803 	orr.w	r8, r2, r3
 800ff6e:	e7d2      	b.n	800ff16 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ff70:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800ff74:	4809      	ldr	r0, [pc, #36]	; (800ff9c <TIM_OC1_SetConfig+0xbc>)
 800ff76:	f7f5 fc7b 	bl	8005870 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800ff7a:	68f3      	ldr	r3, [r6, #12]
 800ff7c:	e7d7      	b.n	800ff2e <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ff7e:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800ff82:	4806      	ldr	r0, [pc, #24]	; (800ff9c <TIM_OC1_SetConfig+0xbc>)
 800ff84:	f7f5 fc74 	bl	8005870 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ff88:	6973      	ldr	r3, [r6, #20]
 800ff8a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ff8e:	d0db      	beq.n	800ff48 <TIM_OC1_SetConfig+0x68>
 800ff90:	e7e1      	b.n	800ff56 <TIM_OC1_SetConfig+0x76>
 800ff92:	bf00      	nop
 800ff94:	fffeff8c 	.word	0xfffeff8c
 800ff98:	40010000 	.word	0x40010000
 800ff9c:	0802e100 	.word	0x0802e100

0800ffa0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ffa0:	6a03      	ldr	r3, [r0, #32]
 800ffa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800ffa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ffaa:	6203      	str	r3, [r0, #32]
{
 800ffac:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ffae:	6a05      	ldr	r5, [r0, #32]
{
 800ffb0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ffb2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ffb6:	4b29      	ldr	r3, [pc, #164]	; (801005c <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800ffb8:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800ffbc:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800ffbe:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ffc0:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ffc2:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ffc4:	688b      	ldr	r3, [r1, #8]
 800ffc6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ffca:	4b25      	ldr	r3, [pc, #148]	; (8010060 <TIM_OC3_SetConfig+0xc0>)
 800ffcc:	4298      	cmp	r0, r3
 800ffce:	d00b      	beq.n	800ffe8 <TIM_OC3_SetConfig+0x48>
 800ffd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ffd4:	4298      	cmp	r0, r3
 800ffd6:	d007      	beq.n	800ffe8 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800ffd8:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ffda:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800ffde:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800ffe0:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800ffe2:	6225      	str	r5, [r4, #32]
}
 800ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ffe8:	68f3      	ldr	r3, [r6, #12]
 800ffea:	f033 0208 	bics.w	r2, r3, #8
 800ffee:	d123      	bne.n	8010038 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800fff0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fff4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800fff8:	69b3      	ldr	r3, [r6, #24]
 800fffa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800fffe:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010002:	d120      	bne.n	8010046 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010004:	6973      	ldr	r3, [r6, #20]
 8010006:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801000a:	d107      	bne.n	801001c <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801000c:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010010:	69b1      	ldr	r1, [r6, #24]
 8010012:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8010016:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 801001a:	e7dd      	b.n	800ffd8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801001c:	f641 4103 	movw	r1, #7171	; 0x1c03
 8010020:	4810      	ldr	r0, [pc, #64]	; (8010064 <TIM_OC3_SetConfig+0xc4>)
 8010022:	f7f5 fc25 	bl	8005870 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010026:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801002a:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801002c:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801002e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8010032:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 8010036:	e7cf      	b.n	800ffd8 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010038:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 801003c:	4809      	ldr	r0, [pc, #36]	; (8010064 <TIM_OC3_SetConfig+0xc4>)
 801003e:	f7f5 fc17 	bl	8005870 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010042:	68f3      	ldr	r3, [r6, #12]
 8010044:	e7d4      	b.n	800fff0 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010046:	f641 4102 	movw	r1, #7170	; 0x1c02
 801004a:	4806      	ldr	r0, [pc, #24]	; (8010064 <TIM_OC3_SetConfig+0xc4>)
 801004c:	f7f5 fc10 	bl	8005870 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010050:	6973      	ldr	r3, [r6, #20]
 8010052:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010056:	d0d9      	beq.n	801000c <TIM_OC3_SetConfig+0x6c>
 8010058:	e7e0      	b.n	801001c <TIM_OC3_SetConfig+0x7c>
 801005a:	bf00      	nop
 801005c:	fffeff8c 	.word	0xfffeff8c
 8010060:	40010000 	.word	0x40010000
 8010064:	0802e100 	.word	0x0802e100

08010068 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010068:	6a03      	ldr	r3, [r0, #32]
 801006a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 801006e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010070:	6203      	str	r3, [r0, #32]
{
 8010072:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 8010074:	6a06      	ldr	r6, [r0, #32]
{
 8010076:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 8010078:	6842      	ldr	r2, [r0, #4]
{
 801007a:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 801007c:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 801007e:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010082:	4b16      	ldr	r3, [pc, #88]	; (80100dc <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010084:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010086:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010088:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801008c:	68ab      	ldr	r3, [r5, #8]
 801008e:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010092:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <TIM_OC4_SetConfig+0x78>)
 8010094:	4298      	cmp	r0, r3
 8010096:	d00a      	beq.n	80100ae <TIM_OC4_SetConfig+0x46>
 8010098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801009c:	4298      	cmp	r0, r3
 801009e:	d006      	beq.n	80100ae <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 80100a0:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80100a2:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80100a4:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80100a6:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80100a8:	6226      	str	r6, [r4, #32]
}
 80100aa:	b003      	add	sp, #12
 80100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80100ae:	696b      	ldr	r3, [r5, #20]
 80100b0:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 80100b4:	d104      	bne.n	80100c0 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100ba:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 80100be:	e7ef      	b.n	80100a0 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80100c0:	f641 4141 	movw	r1, #7233	; 0x1c41
 80100c4:	4807      	ldr	r0, [pc, #28]	; (80100e4 <TIM_OC4_SetConfig+0x7c>)
 80100c6:	9201      	str	r2, [sp, #4]
 80100c8:	f7f5 fbd2 	bl	8005870 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100cc:	9a01      	ldr	r2, [sp, #4]
 80100ce:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100d4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 80100d8:	e7e2      	b.n	80100a0 <TIM_OC4_SetConfig+0x38>
 80100da:	bf00      	nop
 80100dc:	feff8cff 	.word	0xfeff8cff
 80100e0:	40010000 	.word	0x40010000
 80100e4:	0802e100 	.word	0x0802e100

080100e8 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100e8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80100ea:	684a      	ldr	r2, [r1, #4]
{
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 80100f0:	6899      	ldr	r1, [r3, #8]
{
 80100f2:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80100f4:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 80100f6:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 80100fa:	4980      	ldr	r1, [pc, #512]	; (80102fc <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80100fc:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80100fe:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010102:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010106:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 801010a:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 801010c:	f000 8104 	beq.w	8010318 <TIM_SlaveTimer_SetConfig+0x230>
 8010110:	d953      	bls.n	80101ba <TIM_SlaveTimer_SetConfig+0xd2>
 8010112:	2a60      	cmp	r2, #96	; 0x60
 8010114:	f000 816b 	beq.w	80103ee <TIM_SlaveTimer_SetConfig+0x306>
 8010118:	2a70      	cmp	r2, #112	; 0x70
 801011a:	d151      	bne.n	80101c0 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 801011c:	4a78      	ldr	r2, [pc, #480]	; (8010300 <TIM_SlaveTimer_SetConfig+0x218>)
 801011e:	4979      	ldr	r1, [pc, #484]	; (8010304 <TIM_SlaveTimer_SetConfig+0x21c>)
 8010120:	4293      	cmp	r3, r2
 8010122:	bf18      	it	ne
 8010124:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010128:	bf14      	ite	ne
 801012a:	2201      	movne	r2, #1
 801012c:	2200      	moveq	r2, #0
 801012e:	428b      	cmp	r3, r1
 8010130:	bf0c      	ite	eq
 8010132:	2200      	moveq	r2, #0
 8010134:	f002 0201 	andne.w	r2, r2, #1
 8010138:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801013c:	428b      	cmp	r3, r1
 801013e:	bf0c      	ite	eq
 8010140:	2200      	moveq	r2, #0
 8010142:	f002 0201 	andne.w	r2, r2, #1
 8010146:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801014a:	428b      	cmp	r3, r1
 801014c:	bf0c      	ite	eq
 801014e:	2200      	moveq	r2, #0
 8010150:	f002 0201 	andne.w	r2, r2, #1
 8010154:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010158:	428b      	cmp	r3, r1
 801015a:	bf0c      	ite	eq
 801015c:	2200      	moveq	r2, #0
 801015e:	f002 0201 	andne.w	r2, r2, #1
 8010162:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010166:	428b      	cmp	r3, r1
 8010168:	bf0c      	ite	eq
 801016a:	2200      	moveq	r2, #0
 801016c:	f002 0201 	andne.w	r2, r2, #1
 8010170:	b11a      	cbz	r2, 801017a <TIM_SlaveTimer_SetConfig+0x92>
 8010172:	4a65      	ldr	r2, [pc, #404]	; (8010308 <TIM_SlaveTimer_SetConfig+0x220>)
 8010174:	4293      	cmp	r3, r2
 8010176:	f040 81bb 	bne.w	80104f0 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 801017a:	68e3      	ldr	r3, [r4, #12]
 801017c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010180:	f040 819e 	bne.w	80104c0 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010184:	68a3      	ldr	r3, [r4, #8]
 8010186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801018a:	bf18      	it	ne
 801018c:	2b0a      	cmpne	r3, #10
 801018e:	d003      	beq.n	8010198 <TIM_SlaveTimer_SetConfig+0xb0>
 8010190:	f033 0302 	bics.w	r3, r3, #2
 8010194:	f040 81a6 	bne.w	80104e4 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010198:	6921      	ldr	r1, [r4, #16]
 801019a:	290f      	cmp	r1, #15
 801019c:	f200 8175 	bhi.w	801048a <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80101a0:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80101a2:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 80101a6:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80101a8:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80101aa:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80101ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80101b0:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80101b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101b6:	60ab      	str	r3, [r5, #8]
}
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80101ba:	2a40      	cmp	r2, #64	; 0x40
 80101bc:	d03a      	beq.n	8010234 <TIM_SlaveTimer_SetConfig+0x14c>
 80101be:	d901      	bls.n	80101c4 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 80101c0:	2001      	movs	r0, #1
}
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80101c4:	2a20      	cmp	r2, #32
 80101c6:	d002      	beq.n	80101ce <TIM_SlaveTimer_SetConfig+0xe6>
 80101c8:	d930      	bls.n	801022c <TIM_SlaveTimer_SetConfig+0x144>
 80101ca:	2a30      	cmp	r2, #48	; 0x30
 80101cc:	d1f8      	bne.n	80101c0 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80101ce:	4a4c      	ldr	r2, [pc, #304]	; (8010300 <TIM_SlaveTimer_SetConfig+0x218>)
 80101d0:	484c      	ldr	r0, [pc, #304]	; (8010304 <TIM_SlaveTimer_SetConfig+0x21c>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	bf18      	it	ne
 80101d6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80101da:	494c      	ldr	r1, [pc, #304]	; (801030c <TIM_SlaveTimer_SetConfig+0x224>)
 80101dc:	4c4c      	ldr	r4, [pc, #304]	; (8010310 <TIM_SlaveTimer_SetConfig+0x228>)
 80101de:	bf14      	ite	ne
 80101e0:	2201      	movne	r2, #1
 80101e2:	2200      	moveq	r2, #0
 80101e4:	4283      	cmp	r3, r0
 80101e6:	bf0c      	ite	eq
 80101e8:	2200      	moveq	r2, #0
 80101ea:	f002 0201 	andne.w	r2, r2, #1
 80101ee:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80101f2:	428b      	cmp	r3, r1
 80101f4:	bf0c      	ite	eq
 80101f6:	2200      	moveq	r2, #0
 80101f8:	f002 0201 	andne.w	r2, r2, #1
 80101fc:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8010200:	42a3      	cmp	r3, r4
 8010202:	bf0c      	ite	eq
 8010204:	2200      	moveq	r2, #0
 8010206:	f002 0201 	andne.w	r2, r2, #1
 801020a:	4283      	cmp	r3, r0
 801020c:	bf0c      	ite	eq
 801020e:	2200      	moveq	r2, #0
 8010210:	f002 0201 	andne.w	r2, r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	bf0c      	ite	eq
 8010218:	2200      	moveq	r2, #0
 801021a:	f002 0201 	andne.w	r2, r2, #1
 801021e:	b11a      	cbz	r2, 8010228 <TIM_SlaveTimer_SetConfig+0x140>
 8010220:	4a39      	ldr	r2, [pc, #228]	; (8010308 <TIM_SlaveTimer_SetConfig+0x220>)
 8010222:	4293      	cmp	r3, r2
 8010224:	f040 816a 	bne.w	80104fc <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 8010228:	2000      	movs	r0, #0
}
 801022a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 801022c:	f032 0210 	bics.w	r2, r2, #16
 8010230:	d1c6      	bne.n	80101c0 <TIM_SlaveTimer_SetConfig+0xd8>
 8010232:	e7cc      	b.n	80101ce <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010234:	4a32      	ldr	r2, [pc, #200]	; (8010300 <TIM_SlaveTimer_SetConfig+0x218>)
 8010236:	4933      	ldr	r1, [pc, #204]	; (8010304 <TIM_SlaveTimer_SetConfig+0x21c>)
 8010238:	4293      	cmp	r3, r2
 801023a:	bf18      	it	ne
 801023c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010240:	bf14      	ite	ne
 8010242:	2201      	movne	r2, #1
 8010244:	2200      	moveq	r2, #0
 8010246:	428b      	cmp	r3, r1
 8010248:	bf0c      	ite	eq
 801024a:	2200      	moveq	r2, #0
 801024c:	f002 0201 	andne.w	r2, r2, #1
 8010250:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010254:	428b      	cmp	r3, r1
 8010256:	bf0c      	ite	eq
 8010258:	2200      	moveq	r2, #0
 801025a:	f002 0201 	andne.w	r2, r2, #1
 801025e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010262:	428b      	cmp	r3, r1
 8010264:	bf0c      	ite	eq
 8010266:	2200      	moveq	r2, #0
 8010268:	f002 0201 	andne.w	r2, r2, #1
 801026c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010270:	428b      	cmp	r3, r1
 8010272:	bf0c      	ite	eq
 8010274:	2200      	moveq	r2, #0
 8010276:	f002 0201 	andne.w	r2, r2, #1
 801027a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801027e:	428b      	cmp	r3, r1
 8010280:	bf0c      	ite	eq
 8010282:	2200      	moveq	r2, #0
 8010284:	f002 0201 	andne.w	r2, r2, #1
 8010288:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801028c:	428b      	cmp	r3, r1
 801028e:	bf0c      	ite	eq
 8010290:	2200      	moveq	r2, #0
 8010292:	f002 0201 	andne.w	r2, r2, #1
 8010296:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801029a:	428b      	cmp	r3, r1
 801029c:	bf0c      	ite	eq
 801029e:	2200      	moveq	r2, #0
 80102a0:	f002 0201 	andne.w	r2, r2, #1
 80102a4:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80102a8:	428b      	cmp	r3, r1
 80102aa:	bf0c      	ite	eq
 80102ac:	2200      	moveq	r2, #0
 80102ae:	f002 0201 	andne.w	r2, r2, #1
 80102b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80102b6:	428b      	cmp	r3, r1
 80102b8:	bf0c      	ite	eq
 80102ba:	2200      	moveq	r2, #0
 80102bc:	f002 0201 	andne.w	r2, r2, #1
 80102c0:	b11a      	cbz	r2, 80102ca <TIM_SlaveTimer_SetConfig+0x1e2>
 80102c2:	4a14      	ldr	r2, [pc, #80]	; (8010314 <TIM_SlaveTimer_SetConfig+0x22c>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	f040 8126 	bne.w	8010516 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80102ca:	6923      	ldr	r3, [r4, #16]
 80102cc:	2b0f      	cmp	r3, #15
 80102ce:	f200 80ea 	bhi.w	80104a6 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	2b05      	cmp	r3, #5
 80102d6:	f43f af73 	beq.w	80101c0 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 80102da:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102dc:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80102de:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 80102e0:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80102e2:	6a19      	ldr	r1, [r3, #32]
 80102e4:	f021 0101 	bic.w	r1, r1, #1
 80102e8:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80102ea:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80102f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80102f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80102f6:	621c      	str	r4, [r3, #32]
}
 80102f8:	bd70      	pop	{r4, r5, r6, pc}
 80102fa:	bf00      	nop
 80102fc:	fffefff8 	.word	0xfffefff8
 8010300:	40010000 	.word	0x40010000
 8010304:	40000400 	.word	0x40000400
 8010308:	40001800 	.word	0x40001800
 801030c:	40000800 	.word	0x40000800
 8010310:	40000c00 	.word	0x40000c00
 8010314:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010318:	4a85      	ldr	r2, [pc, #532]	; (8010530 <TIM_SlaveTimer_SetConfig+0x448>)
 801031a:	4986      	ldr	r1, [pc, #536]	; (8010534 <TIM_SlaveTimer_SetConfig+0x44c>)
 801031c:	4293      	cmp	r3, r2
 801031e:	bf18      	it	ne
 8010320:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010324:	bf14      	ite	ne
 8010326:	2201      	movne	r2, #1
 8010328:	2200      	moveq	r2, #0
 801032a:	428b      	cmp	r3, r1
 801032c:	bf0c      	ite	eq
 801032e:	2200      	moveq	r2, #0
 8010330:	f002 0201 	andne.w	r2, r2, #1
 8010334:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010338:	428b      	cmp	r3, r1
 801033a:	bf0c      	ite	eq
 801033c:	2200      	moveq	r2, #0
 801033e:	f002 0201 	andne.w	r2, r2, #1
 8010342:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010346:	428b      	cmp	r3, r1
 8010348:	bf0c      	ite	eq
 801034a:	2200      	moveq	r2, #0
 801034c:	f002 0201 	andne.w	r2, r2, #1
 8010350:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010354:	428b      	cmp	r3, r1
 8010356:	bf0c      	ite	eq
 8010358:	2200      	moveq	r2, #0
 801035a:	f002 0201 	andne.w	r2, r2, #1
 801035e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010362:	428b      	cmp	r3, r1
 8010364:	bf0c      	ite	eq
 8010366:	2200      	moveq	r2, #0
 8010368:	f002 0201 	andne.w	r2, r2, #1
 801036c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010370:	428b      	cmp	r3, r1
 8010372:	bf0c      	ite	eq
 8010374:	2200      	moveq	r2, #0
 8010376:	f002 0201 	andne.w	r2, r2, #1
 801037a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801037e:	428b      	cmp	r3, r1
 8010380:	bf0c      	ite	eq
 8010382:	2200      	moveq	r2, #0
 8010384:	f002 0201 	andne.w	r2, r2, #1
 8010388:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 801038c:	428b      	cmp	r3, r1
 801038e:	bf0c      	ite	eq
 8010390:	2200      	moveq	r2, #0
 8010392:	f002 0201 	andne.w	r2, r2, #1
 8010396:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801039a:	428b      	cmp	r3, r1
 801039c:	bf0c      	ite	eq
 801039e:	2200      	moveq	r2, #0
 80103a0:	f002 0201 	andne.w	r2, r2, #1
 80103a4:	b11a      	cbz	r2, 80103ae <TIM_SlaveTimer_SetConfig+0x2c6>
 80103a6:	4a64      	ldr	r2, [pc, #400]	; (8010538 <TIM_SlaveTimer_SetConfig+0x450>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	f040 80ba 	bne.w	8010522 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103b4:	bf18      	it	ne
 80103b6:	2b0a      	cmpne	r3, #10
 80103b8:	d003      	beq.n	80103c2 <TIM_SlaveTimer_SetConfig+0x2da>
 80103ba:	f033 0302 	bics.w	r3, r3, #2
 80103be:	f040 808b 	bne.w	80104d8 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80103c2:	6926      	ldr	r6, [r4, #16]
 80103c4:	2e0f      	cmp	r6, #15
 80103c6:	d874      	bhi.n	80104b2 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 80103cc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103ce:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103d0:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103d4:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 80103d8:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80103da:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103dc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103de:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80103e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80103e4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80103e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80103ea:	6219      	str	r1, [r3, #32]
}
 80103ec:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80103ee:	4a50      	ldr	r2, [pc, #320]	; (8010530 <TIM_SlaveTimer_SetConfig+0x448>)
 80103f0:	4950      	ldr	r1, [pc, #320]	; (8010534 <TIM_SlaveTimer_SetConfig+0x44c>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	bf18      	it	ne
 80103f6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80103fa:	bf14      	ite	ne
 80103fc:	2201      	movne	r2, #1
 80103fe:	2200      	moveq	r2, #0
 8010400:	428b      	cmp	r3, r1
 8010402:	bf0c      	ite	eq
 8010404:	2200      	moveq	r2, #0
 8010406:	f002 0201 	andne.w	r2, r2, #1
 801040a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801040e:	428b      	cmp	r3, r1
 8010410:	bf0c      	ite	eq
 8010412:	2200      	moveq	r2, #0
 8010414:	f002 0201 	andne.w	r2, r2, #1
 8010418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801041c:	428b      	cmp	r3, r1
 801041e:	bf0c      	ite	eq
 8010420:	2200      	moveq	r2, #0
 8010422:	f002 0201 	andne.w	r2, r2, #1
 8010426:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801042a:	428b      	cmp	r3, r1
 801042c:	bf0c      	ite	eq
 801042e:	2200      	moveq	r2, #0
 8010430:	f002 0201 	andne.w	r2, r2, #1
 8010434:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010438:	428b      	cmp	r3, r1
 801043a:	bf0c      	ite	eq
 801043c:	2200      	moveq	r2, #0
 801043e:	f002 0201 	andne.w	r2, r2, #1
 8010442:	b112      	cbz	r2, 801044a <TIM_SlaveTimer_SetConfig+0x362>
 8010444:	4a3d      	ldr	r2, [pc, #244]	; (801053c <TIM_SlaveTimer_SetConfig+0x454>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d15f      	bne.n	801050a <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010450:	bf18      	it	ne
 8010452:	2b0a      	cmpne	r3, #10
 8010454:	d002      	beq.n	801045c <TIM_SlaveTimer_SetConfig+0x374>
 8010456:	f033 0302 	bics.w	r3, r3, #2
 801045a:	d137      	bne.n	80104cc <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801045c:	6926      	ldr	r6, [r4, #16]
 801045e:	2e0f      	cmp	r6, #15
 8010460:	d81a      	bhi.n	8010498 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010462:	682b      	ldr	r3, [r5, #0]
 8010464:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010466:	6a18      	ldr	r0, [r3, #32]
 8010468:	f020 0010 	bic.w	r0, r0, #16
 801046c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 801046e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010470:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010472:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010474:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801047c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010480:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010484:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010486:	621a      	str	r2, [r3, #32]
}
 8010488:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801048a:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 801048e:	482c      	ldr	r0, [pc, #176]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 8010490:	f7f5 f9ee 	bl	8005870 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010494:	6921      	ldr	r1, [r4, #16]
 8010496:	e683      	b.n	80101a0 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010498:	f641 511f 	movw	r1, #7455	; 0x1d1f
 801049c:	4828      	ldr	r0, [pc, #160]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 801049e:	f7f5 f9e7 	bl	8005870 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80104a2:	6926      	ldr	r6, [r4, #16]
 80104a4:	e7dd      	b.n	8010462 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80104a6:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 80104aa:	4825      	ldr	r0, [pc, #148]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104ac:	f7f5 f9e0 	bl	8005870 <assert_failed>
 80104b0:	e70f      	b.n	80102d2 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80104b2:	f641 5111 	movw	r1, #7441	; 0x1d11
 80104b6:	4822      	ldr	r0, [pc, #136]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104b8:	f7f5 f9da 	bl	8005870 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80104bc:	6926      	ldr	r6, [r4, #16]
 80104be:	e783      	b.n	80103c8 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80104c0:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 80104c4:	481e      	ldr	r0, [pc, #120]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104c6:	f7f5 f9d3 	bl	8005870 <assert_failed>
 80104ca:	e65b      	b.n	8010184 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80104cc:	f641 511e 	movw	r1, #7454	; 0x1d1e
 80104d0:	481b      	ldr	r0, [pc, #108]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104d2:	f7f5 f9cd 	bl	8005870 <assert_failed>
 80104d6:	e7c1      	b.n	801045c <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80104d8:	f641 5110 	movw	r1, #7440	; 0x1d10
 80104dc:	4818      	ldr	r0, [pc, #96]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104de:	f7f5 f9c7 	bl	8005870 <assert_failed>
 80104e2:	e76e      	b.n	80103c2 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80104e4:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 80104e8:	4815      	ldr	r0, [pc, #84]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104ea:	f7f5 f9c1 	bl	8005870 <assert_failed>
 80104ee:	e653      	b.n	8010198 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80104f0:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 80104f4:	4812      	ldr	r0, [pc, #72]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 80104f6:	f7f5 f9bb 	bl	8005870 <assert_failed>
 80104fa:	e63e      	b.n	801017a <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80104fc:	f641 512e 	movw	r1, #7470	; 0x1d2e
 8010500:	480f      	ldr	r0, [pc, #60]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 8010502:	f7f5 f9b5 	bl	8005870 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 8010506:	2000      	movs	r0, #0
}
 8010508:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801050a:	f641 511d 	movw	r1, #7453	; 0x1d1d
 801050e:	480c      	ldr	r0, [pc, #48]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 8010510:	f7f5 f9ae 	bl	8005870 <assert_failed>
 8010514:	e799      	b.n	801044a <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010516:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 801051a:	4809      	ldr	r0, [pc, #36]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 801051c:	f7f5 f9a8 	bl	8005870 <assert_failed>
 8010520:	e6d3      	b.n	80102ca <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010522:	f641 510f 	movw	r1, #7439	; 0x1d0f
 8010526:	4806      	ldr	r0, [pc, #24]	; (8010540 <TIM_SlaveTimer_SetConfig+0x458>)
 8010528:	f7f5 f9a2 	bl	8005870 <assert_failed>
 801052c:	e73f      	b.n	80103ae <TIM_SlaveTimer_SetConfig+0x2c6>
 801052e:	bf00      	nop
 8010530:	40010000 	.word	0x40010000
 8010534:	40000400 	.word	0x40000400
 8010538:	40002000 	.word	0x40002000
 801053c:	40001800 	.word	0x40001800
 8010540:	0802e100 	.word	0x0802e100

08010544 <HAL_TIM_Base_Start>:
{
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010548:	4b52      	ldr	r3, [pc, #328]	; (8010694 <HAL_TIM_Base_Start+0x150>)
 801054a:	4d53      	ldr	r5, [pc, #332]	; (8010698 <HAL_TIM_Base_Start+0x154>)
 801054c:	6822      	ldr	r2, [r4, #0]
 801054e:	4953      	ldr	r1, [pc, #332]	; (801069c <HAL_TIM_Base_Start+0x158>)
 8010550:	429a      	cmp	r2, r3
 8010552:	bf18      	it	ne
 8010554:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010558:	4851      	ldr	r0, [pc, #324]	; (80106a0 <HAL_TIM_Base_Start+0x15c>)
 801055a:	bf14      	ite	ne
 801055c:	2301      	movne	r3, #1
 801055e:	2300      	moveq	r3, #0
 8010560:	42aa      	cmp	r2, r5
 8010562:	bf0c      	ite	eq
 8010564:	2300      	moveq	r3, #0
 8010566:	f003 0301 	andne.w	r3, r3, #1
 801056a:	428a      	cmp	r2, r1
 801056c:	bf0c      	ite	eq
 801056e:	2300      	moveq	r3, #0
 8010570:	f003 0301 	andne.w	r3, r3, #1
 8010574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010578:	4282      	cmp	r2, r0
 801057a:	bf0c      	ite	eq
 801057c:	2300      	moveq	r3, #0
 801057e:	f003 0301 	andne.w	r3, r3, #1
 8010582:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010586:	428a      	cmp	r2, r1
 8010588:	bf0c      	ite	eq
 801058a:	2300      	moveq	r3, #0
 801058c:	f003 0301 	andne.w	r3, r3, #1
 8010590:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010594:	4282      	cmp	r2, r0
 8010596:	bf0c      	ite	eq
 8010598:	2300      	moveq	r3, #0
 801059a:	f003 0301 	andne.w	r3, r3, #1
 801059e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80105a2:	428a      	cmp	r2, r1
 80105a4:	bf0c      	ite	eq
 80105a6:	2300      	moveq	r3, #0
 80105a8:	f003 0301 	andne.w	r3, r3, #1
 80105ac:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80105b0:	4282      	cmp	r2, r0
 80105b2:	bf0c      	ite	eq
 80105b4:	2300      	moveq	r3, #0
 80105b6:	f003 0301 	andne.w	r3, r3, #1
 80105ba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80105be:	428a      	cmp	r2, r1
 80105c0:	bf0c      	ite	eq
 80105c2:	2300      	moveq	r3, #0
 80105c4:	f003 0301 	andne.w	r3, r3, #1
 80105c8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80105cc:	4282      	cmp	r2, r0
 80105ce:	bf0c      	ite	eq
 80105d0:	2300      	moveq	r3, #0
 80105d2:	f003 0301 	andne.w	r3, r3, #1
 80105d6:	428a      	cmp	r2, r1
 80105d8:	bf0c      	ite	eq
 80105da:	2300      	moveq	r3, #0
 80105dc:	f003 0301 	andne.w	r3, r3, #1
 80105e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105e4:	428a      	cmp	r2, r1
 80105e6:	bf0c      	ite	eq
 80105e8:	2300      	moveq	r3, #0
 80105ea:	f003 0301 	andne.w	r3, r3, #1
 80105ee:	b113      	cbz	r3, 80105f6 <HAL_TIM_Base_Start+0xb2>
 80105f0:	4b2c      	ldr	r3, [pc, #176]	; (80106a4 <HAL_TIM_Base_Start+0x160>)
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d143      	bne.n	801067e <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 80105f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d13b      	bne.n	8010676 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105fe:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010600:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010602:	4b24      	ldr	r3, [pc, #144]	; (8010694 <HAL_TIM_Base_Start+0x150>)
 8010604:	4d24      	ldr	r5, [pc, #144]	; (8010698 <HAL_TIM_Base_Start+0x154>)
 8010606:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801060a:	bf18      	it	ne
 801060c:	429a      	cmpne	r2, r3
 801060e:	4923      	ldr	r1, [pc, #140]	; (801069c <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010610:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010614:	bf0c      	ite	eq
 8010616:	2301      	moveq	r3, #1
 8010618:	2300      	movne	r3, #0
 801061a:	4c21      	ldr	r4, [pc, #132]	; (80106a0 <HAL_TIM_Base_Start+0x15c>)
 801061c:	42aa      	cmp	r2, r5
 801061e:	bf08      	it	eq
 8010620:	f043 0301 	orreq.w	r3, r3, #1
 8010624:	4820      	ldr	r0, [pc, #128]	; (80106a8 <HAL_TIM_Base_Start+0x164>)
 8010626:	428a      	cmp	r2, r1
 8010628:	bf08      	it	eq
 801062a:	f043 0301 	orreq.w	r3, r3, #1
 801062e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8010632:	42a2      	cmp	r2, r4
 8010634:	bf08      	it	eq
 8010636:	f043 0301 	orreq.w	r3, r3, #1
 801063a:	4282      	cmp	r2, r0
 801063c:	bf08      	it	eq
 801063e:	f043 0301 	orreq.w	r3, r3, #1
 8010642:	428a      	cmp	r2, r1
 8010644:	bf08      	it	eq
 8010646:	f043 0301 	orreq.w	r3, r3, #1
 801064a:	b933      	cbnz	r3, 801065a <HAL_TIM_Base_Start+0x116>
 801064c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010650:	1a10      	subs	r0, r2, r0
 8010652:	fab0 f080 	clz	r0, r0
 8010656:	0940      	lsrs	r0, r0, #5
 8010658:	b1b8      	cbz	r0, 801068a <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801065a:	6891      	ldr	r1, [r2, #8]
 801065c:	4b13      	ldr	r3, [pc, #76]	; (80106ac <HAL_TIM_Base_Start+0x168>)
 801065e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010660:	2b06      	cmp	r3, #6
 8010662:	d00a      	beq.n	801067a <HAL_TIM_Base_Start+0x136>
 8010664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010668:	d007      	beq.n	801067a <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 801066a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 801066c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 801066e:	f043 0301 	orr.w	r3, r3, #1
 8010672:	6013      	str	r3, [r2, #0]
}
 8010674:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010676:	2001      	movs	r0, #1
}
 8010678:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 801067a:	2000      	movs	r0, #0
}
 801067c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801067e:	f240 1197 	movw	r1, #407	; 0x197
 8010682:	480b      	ldr	r0, [pc, #44]	; (80106b0 <HAL_TIM_Base_Start+0x16c>)
 8010684:	f7f5 f8f4 	bl	8005870 <assert_failed>
 8010688:	e7b5      	b.n	80105f6 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 801068a:	6813      	ldr	r3, [r2, #0]
 801068c:	f043 0301 	orr.w	r3, r3, #1
 8010690:	6013      	str	r3, [r2, #0]
}
 8010692:	bd38      	pop	{r3, r4, r5, pc}
 8010694:	40010000 	.word	0x40010000
 8010698:	40000400 	.word	0x40000400
 801069c:	40000800 	.word	0x40000800
 80106a0:	40000c00 	.word	0x40000c00
 80106a4:	40002000 	.word	0x40002000
 80106a8:	40010400 	.word	0x40010400
 80106ac:	00010007 	.word	0x00010007
 80106b0:	0802e100 	.word	0x0802e100

080106b4 <HAL_TIM_Base_Start_IT>:
{
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80106b8:	4b54      	ldr	r3, [pc, #336]	; (801080c <HAL_TIM_Base_Start_IT+0x158>)
 80106ba:	4d55      	ldr	r5, [pc, #340]	; (8010810 <HAL_TIM_Base_Start_IT+0x15c>)
 80106bc:	6822      	ldr	r2, [r4, #0]
 80106be:	4955      	ldr	r1, [pc, #340]	; (8010814 <HAL_TIM_Base_Start_IT+0x160>)
 80106c0:	429a      	cmp	r2, r3
 80106c2:	bf18      	it	ne
 80106c4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80106c8:	4853      	ldr	r0, [pc, #332]	; (8010818 <HAL_TIM_Base_Start_IT+0x164>)
 80106ca:	bf14      	ite	ne
 80106cc:	2301      	movne	r3, #1
 80106ce:	2300      	moveq	r3, #0
 80106d0:	42aa      	cmp	r2, r5
 80106d2:	bf0c      	ite	eq
 80106d4:	2300      	moveq	r3, #0
 80106d6:	f003 0301 	andne.w	r3, r3, #1
 80106da:	428a      	cmp	r2, r1
 80106dc:	bf0c      	ite	eq
 80106de:	2300      	moveq	r3, #0
 80106e0:	f003 0301 	andne.w	r3, r3, #1
 80106e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106e8:	4282      	cmp	r2, r0
 80106ea:	bf0c      	ite	eq
 80106ec:	2300      	moveq	r3, #0
 80106ee:	f003 0301 	andne.w	r3, r3, #1
 80106f2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80106f6:	428a      	cmp	r2, r1
 80106f8:	bf0c      	ite	eq
 80106fa:	2300      	moveq	r3, #0
 80106fc:	f003 0301 	andne.w	r3, r3, #1
 8010700:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010704:	4282      	cmp	r2, r0
 8010706:	bf0c      	ite	eq
 8010708:	2300      	moveq	r3, #0
 801070a:	f003 0301 	andne.w	r3, r3, #1
 801070e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010712:	428a      	cmp	r2, r1
 8010714:	bf0c      	ite	eq
 8010716:	2300      	moveq	r3, #0
 8010718:	f003 0301 	andne.w	r3, r3, #1
 801071c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010720:	4282      	cmp	r2, r0
 8010722:	bf0c      	ite	eq
 8010724:	2300      	moveq	r3, #0
 8010726:	f003 0301 	andne.w	r3, r3, #1
 801072a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801072e:	428a      	cmp	r2, r1
 8010730:	bf0c      	ite	eq
 8010732:	2300      	moveq	r3, #0
 8010734:	f003 0301 	andne.w	r3, r3, #1
 8010738:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801073c:	4282      	cmp	r2, r0
 801073e:	bf0c      	ite	eq
 8010740:	2300      	moveq	r3, #0
 8010742:	f003 0301 	andne.w	r3, r3, #1
 8010746:	428a      	cmp	r2, r1
 8010748:	bf0c      	ite	eq
 801074a:	2300      	moveq	r3, #0
 801074c:	f003 0301 	andne.w	r3, r3, #1
 8010750:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010754:	428a      	cmp	r2, r1
 8010756:	bf0c      	ite	eq
 8010758:	2300      	moveq	r3, #0
 801075a:	f003 0301 	andne.w	r3, r3, #1
 801075e:	b113      	cbz	r3, 8010766 <HAL_TIM_Base_Start_IT+0xb2>
 8010760:	4b2e      	ldr	r3, [pc, #184]	; (801081c <HAL_TIM_Base_Start_IT+0x168>)
 8010762:	429a      	cmp	r2, r3
 8010764:	d147      	bne.n	80107f6 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 8010766:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801076a:	2b01      	cmp	r3, #1
 801076c:	d13f      	bne.n	80107ee <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801076e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010770:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010772:	4b26      	ldr	r3, [pc, #152]	; (801080c <HAL_TIM_Base_Start_IT+0x158>)
 8010774:	4d26      	ldr	r5, [pc, #152]	; (8010810 <HAL_TIM_Base_Start_IT+0x15c>)
 8010776:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801077a:	bf18      	it	ne
 801077c:	429a      	cmpne	r2, r3
 801077e:	4825      	ldr	r0, [pc, #148]	; (8010814 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010780:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010784:	bf0c      	ite	eq
 8010786:	2301      	moveq	r3, #1
 8010788:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801078a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801078c:	42aa      	cmp	r2, r5
 801078e:	bf08      	it	eq
 8010790:	f043 0301 	orreq.w	r3, r3, #1
 8010794:	4c20      	ldr	r4, [pc, #128]	; (8010818 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010796:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801079a:	4282      	cmp	r2, r0
 801079c:	bf08      	it	eq
 801079e:	f043 0301 	orreq.w	r3, r3, #1
 80107a2:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80107a6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107a8:	42a2      	cmp	r2, r4
 80107aa:	bf08      	it	eq
 80107ac:	f043 0301 	orreq.w	r3, r3, #1
 80107b0:	491b      	ldr	r1, [pc, #108]	; (8010820 <HAL_TIM_Base_Start_IT+0x16c>)
 80107b2:	4282      	cmp	r2, r0
 80107b4:	bf08      	it	eq
 80107b6:	f043 0301 	orreq.w	r3, r3, #1
 80107ba:	428a      	cmp	r2, r1
 80107bc:	bf08      	it	eq
 80107be:	f043 0301 	orreq.w	r3, r3, #1
 80107c2:	b933      	cbnz	r3, 80107d2 <HAL_TIM_Base_Start_IT+0x11e>
 80107c4:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 80107c8:	1a10      	subs	r0, r2, r0
 80107ca:	fab0 f080 	clz	r0, r0
 80107ce:	0940      	lsrs	r0, r0, #5
 80107d0:	b1b8      	cbz	r0, 8010802 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107d2:	6891      	ldr	r1, [r2, #8]
 80107d4:	4b13      	ldr	r3, [pc, #76]	; (8010824 <HAL_TIM_Base_Start_IT+0x170>)
 80107d6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107d8:	2b06      	cmp	r3, #6
 80107da:	d00a      	beq.n	80107f2 <HAL_TIM_Base_Start_IT+0x13e>
 80107dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107e0:	d007      	beq.n	80107f2 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 80107e2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80107e4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80107e6:	f043 0301 	orr.w	r3, r3, #1
 80107ea:	6013      	str	r3, [r2, #0]
}
 80107ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80107ee:	2001      	movs	r0, #1
}
 80107f0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80107f2:	2000      	movs	r0, #0
}
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80107f6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80107fa:	480b      	ldr	r0, [pc, #44]	; (8010828 <HAL_TIM_Base_Start_IT+0x174>)
 80107fc:	f7f5 f838 	bl	8005870 <assert_failed>
 8010800:	e7b1      	b.n	8010766 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 8010802:	6813      	ldr	r3, [r2, #0]
 8010804:	f043 0301 	orr.w	r3, r3, #1
 8010808:	6013      	str	r3, [r2, #0]
}
 801080a:	bd38      	pop	{r3, r4, r5, pc}
 801080c:	40010000 	.word	0x40010000
 8010810:	40000400 	.word	0x40000400
 8010814:	40000800 	.word	0x40000800
 8010818:	40000c00 	.word	0x40000c00
 801081c:	40002000 	.word	0x40002000
 8010820:	40014000 	.word	0x40014000
 8010824:	00010007 	.word	0x00010007
 8010828:	0802e100 	.word	0x0802e100

0801082c <HAL_TIM_OC_MspInit>:
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop

08010830 <HAL_TIM_PWM_MspInit>:
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop

08010834 <HAL_TIM_IC_MspInit>:
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop

08010838 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010838:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801083c:	2b01      	cmp	r3, #1
 801083e:	f000 8151 	beq.w	8010ae4 <HAL_TIM_ConfigClockSource+0x2ac>
 8010842:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8010844:	2302      	movs	r3, #2
{
 8010846:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8010848:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 801084c:	460d      	mov	r5, r1
 801084e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010852:	4604      	mov	r4, r0
 8010854:	680b      	ldr	r3, [r1, #0]
 8010856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801085a:	bf18      	it	ne
 801085c:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8010860:	bf14      	ite	ne
 8010862:	2201      	movne	r2, #1
 8010864:	2200      	moveq	r2, #0
 8010866:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 801086a:	f002 0201 	and.w	r2, r2, #1
 801086e:	bf08      	it	eq
 8010870:	2200      	moveq	r2, #0
 8010872:	b112      	cbz	r2, 801087a <HAL_TIM_ConfigClockSource+0x42>
 8010874:	2940      	cmp	r1, #64	; 0x40
 8010876:	f040 8267 	bne.w	8010d48 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 801087a:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 801087c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801087e:	499a      	ldr	r1, [pc, #616]	; (8010ae8 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8010880:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010882:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8010886:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010888:	f000 8138 	beq.w	8010afc <HAL_TIM_ConfigClockSource+0x2c4>
 801088c:	d84f      	bhi.n	801092e <HAL_TIM_ConfigClockSource+0xf6>
 801088e:	2b40      	cmp	r3, #64	; 0x40
 8010890:	f000 81d7 	beq.w	8010c42 <HAL_TIM_ConfigClockSource+0x40a>
 8010894:	f240 80a2 	bls.w	80109dc <HAL_TIM_ConfigClockSource+0x1a4>
 8010898:	2b50      	cmp	r3, #80	; 0x50
 801089a:	f040 8097 	bne.w	80109cc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801089e:	4b93      	ldr	r3, [pc, #588]	; (8010aec <HAL_TIM_ConfigClockSource+0x2b4>)
 80108a0:	4993      	ldr	r1, [pc, #588]	; (8010af0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80108a2:	429a      	cmp	r2, r3
 80108a4:	bf18      	it	ne
 80108a6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80108aa:	bf14      	ite	ne
 80108ac:	2301      	movne	r3, #1
 80108ae:	2300      	moveq	r3, #0
 80108b0:	428a      	cmp	r2, r1
 80108b2:	bf0c      	ite	eq
 80108b4:	2300      	moveq	r3, #0
 80108b6:	f003 0301 	andne.w	r3, r3, #1
 80108ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80108be:	428a      	cmp	r2, r1
 80108c0:	bf0c      	ite	eq
 80108c2:	2300      	moveq	r3, #0
 80108c4:	f003 0301 	andne.w	r3, r3, #1
 80108c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80108cc:	428a      	cmp	r2, r1
 80108ce:	bf0c      	ite	eq
 80108d0:	2300      	moveq	r3, #0
 80108d2:	f003 0301 	andne.w	r3, r3, #1
 80108d6:	b11b      	cbz	r3, 80108e0 <HAL_TIM_ConfigClockSource+0xa8>
 80108d8:	4b86      	ldr	r3, [pc, #536]	; (8010af4 <HAL_TIM_ConfigClockSource+0x2bc>)
 80108da:	429a      	cmp	r2, r3
 80108dc:	f040 8222 	bne.w	8010d24 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80108e0:	686b      	ldr	r3, [r5, #4]
 80108e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108e6:	bf18      	it	ne
 80108e8:	2b0a      	cmpne	r3, #10
 80108ea:	d003      	beq.n	80108f4 <HAL_TIM_ConfigClockSource+0xbc>
 80108ec:	f033 0302 	bics.w	r3, r3, #2
 80108f0:	f040 81fe 	bne.w	8010cf0 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80108f4:	68ee      	ldr	r6, [r5, #12]
 80108f6:	2e0f      	cmp	r6, #15
 80108f8:	f200 8242 	bhi.w	8010d80 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010900:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010902:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010904:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010908:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 801090c:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 801090e:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010910:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010912:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010914:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010918:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 801091c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801091e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010920:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010922:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010926:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 801092a:	609a      	str	r2, [r3, #8]
}
 801092c:	e04f      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 801092e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010932:	f000 812c 	beq.w	8010b8e <HAL_TIM_ConfigClockSource+0x356>
 8010936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801093a:	d17e      	bne.n	8010a3a <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 801093c:	4b6b      	ldr	r3, [pc, #428]	; (8010aec <HAL_TIM_ConfigClockSource+0x2b4>)
 801093e:	496c      	ldr	r1, [pc, #432]	; (8010af0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010940:	429a      	cmp	r2, r3
 8010942:	bf18      	it	ne
 8010944:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010948:	bf14      	ite	ne
 801094a:	2301      	movne	r3, #1
 801094c:	2300      	moveq	r3, #0
 801094e:	428a      	cmp	r2, r1
 8010950:	bf0c      	ite	eq
 8010952:	2300      	moveq	r3, #0
 8010954:	f003 0301 	andne.w	r3, r3, #1
 8010958:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801095c:	428a      	cmp	r2, r1
 801095e:	bf0c      	ite	eq
 8010960:	2300      	moveq	r3, #0
 8010962:	f003 0301 	andne.w	r3, r3, #1
 8010966:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801096a:	428a      	cmp	r2, r1
 801096c:	bf0c      	ite	eq
 801096e:	2300      	moveq	r3, #0
 8010970:	f003 0301 	andne.w	r3, r3, #1
 8010974:	b11b      	cbz	r3, 801097e <HAL_TIM_ConfigClockSource+0x146>
 8010976:	4b5f      	ldr	r3, [pc, #380]	; (8010af4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010978:	429a      	cmp	r2, r3
 801097a:	f040 81c5 	bne.w	8010d08 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 801097e:	68ab      	ldr	r3, [r5, #8]
 8010980:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010984:	f040 8210 	bne.w	8010da8 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010988:	686b      	ldr	r3, [r5, #4]
 801098a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801098e:	bf18      	it	ne
 8010990:	2b0a      	cmpne	r3, #10
 8010992:	d003      	beq.n	801099c <HAL_TIM_ConfigClockSource+0x164>
 8010994:	f033 0302 	bics.w	r3, r3, #2
 8010998:	f040 81a4 	bne.w	8010ce4 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801099c:	68ee      	ldr	r6, [r5, #12]
 801099e:	2e0f      	cmp	r6, #15
 80109a0:	f200 81d9 	bhi.w	8010d56 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 80109a4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80109a6:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 80109aa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80109ac:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80109ae:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80109b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80109b4:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80109b6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 80109ba:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80109bc:	6893      	ldr	r3, [r2, #8]
 80109be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109c2:	6093      	str	r3, [r2, #8]
      break;
 80109c4:	e003      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 80109c6:	f033 0110 	bics.w	r1, r3, #16
 80109ca:	d00c      	beq.n	80109e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80109cc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80109ce:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80109d0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80109d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80109d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80109da:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80109dc:	2b20      	cmp	r3, #32
 80109de:	d002      	beq.n	80109e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80109e0:	d9f1      	bls.n	80109c6 <HAL_TIM_ConfigClockSource+0x18e>
 80109e2:	2b30      	cmp	r3, #48	; 0x30
 80109e4:	d1f2      	bne.n	80109cc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80109e6:	4941      	ldr	r1, [pc, #260]	; (8010aec <HAL_TIM_ConfigClockSource+0x2b4>)
 80109e8:	4841      	ldr	r0, [pc, #260]	; (8010af0 <HAL_TIM_ConfigClockSource+0x2b8>)
 80109ea:	428a      	cmp	r2, r1
 80109ec:	bf18      	it	ne
 80109ee:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80109f2:	bf14      	ite	ne
 80109f4:	2101      	movne	r1, #1
 80109f6:	2100      	moveq	r1, #0
 80109f8:	4282      	cmp	r2, r0
 80109fa:	bf0c      	ite	eq
 80109fc:	2100      	moveq	r1, #0
 80109fe:	f001 0101 	andne.w	r1, r1, #1
 8010a02:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010a06:	4282      	cmp	r2, r0
 8010a08:	bf0c      	ite	eq
 8010a0a:	2100      	moveq	r1, #0
 8010a0c:	f001 0101 	andne.w	r1, r1, #1
 8010a10:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010a14:	4282      	cmp	r2, r0
 8010a16:	bf0c      	ite	eq
 8010a18:	2100      	moveq	r1, #0
 8010a1a:	f001 0101 	andne.w	r1, r1, #1
 8010a1e:	b119      	cbz	r1, 8010a28 <HAL_TIM_ConfigClockSource+0x1f0>
 8010a20:	4934      	ldr	r1, [pc, #208]	; (8010af4 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010a22:	428a      	cmp	r2, r1
 8010a24:	f040 8176 	bne.w	8010d14 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 8010a28:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010a2a:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a2c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a30:	430b      	orrs	r3, r1
 8010a32:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8010a36:	6093      	str	r3, [r2, #8]
}
 8010a38:	e7c9      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010a3a:	2b70      	cmp	r3, #112	; 0x70
 8010a3c:	d1c6      	bne.n	80109cc <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010a3e:	4b2b      	ldr	r3, [pc, #172]	; (8010aec <HAL_TIM_ConfigClockSource+0x2b4>)
 8010a40:	492b      	ldr	r1, [pc, #172]	; (8010af0 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010a42:	429a      	cmp	r2, r3
 8010a44:	bf18      	it	ne
 8010a46:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010a4a:	bf14      	ite	ne
 8010a4c:	2301      	movne	r3, #1
 8010a4e:	2300      	moveq	r3, #0
 8010a50:	428a      	cmp	r2, r1
 8010a52:	bf0c      	ite	eq
 8010a54:	2300      	moveq	r3, #0
 8010a56:	f003 0301 	andne.w	r3, r3, #1
 8010a5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a5e:	428a      	cmp	r2, r1
 8010a60:	bf0c      	ite	eq
 8010a62:	2300      	moveq	r3, #0
 8010a64:	f003 0301 	andne.w	r3, r3, #1
 8010a68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010a6c:	428a      	cmp	r2, r1
 8010a6e:	bf0c      	ite	eq
 8010a70:	2300      	moveq	r3, #0
 8010a72:	f003 0301 	andne.w	r3, r3, #1
 8010a76:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010a7a:	428a      	cmp	r2, r1
 8010a7c:	bf0c      	ite	eq
 8010a7e:	2300      	moveq	r3, #0
 8010a80:	f003 0301 	andne.w	r3, r3, #1
 8010a84:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010a88:	428a      	cmp	r2, r1
 8010a8a:	bf0c      	ite	eq
 8010a8c:	2300      	moveq	r3, #0
 8010a8e:	f003 0301 	andne.w	r3, r3, #1
 8010a92:	b11b      	cbz	r3, 8010a9c <HAL_TIM_ConfigClockSource+0x264>
 8010a94:	4b18      	ldr	r3, [pc, #96]	; (8010af8 <HAL_TIM_ConfigClockSource+0x2c0>)
 8010a96:	429a      	cmp	r2, r3
 8010a98:	f040 818c 	bne.w	8010db4 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010a9c:	68ab      	ldr	r3, [r5, #8]
 8010a9e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010aa2:	f040 817b 	bne.w	8010d9c <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010aa6:	686b      	ldr	r3, [r5, #4]
 8010aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aac:	bf18      	it	ne
 8010aae:	2b0a      	cmpne	r3, #10
 8010ab0:	d003      	beq.n	8010aba <HAL_TIM_ConfigClockSource+0x282>
 8010ab2:	f033 0302 	bics.w	r3, r3, #2
 8010ab6:	f040 8121 	bne.w	8010cfc <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010aba:	68ee      	ldr	r6, [r5, #12]
 8010abc:	2e0f      	cmp	r6, #15
 8010abe:	f200 8166 	bhi.w	8010d8e <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 8010ac2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010ac4:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010ac8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010aca:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010acc:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010ace:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010ad2:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ad4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010ad8:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010ada:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010ae0:	6093      	str	r3, [r2, #8]
      break;
 8010ae2:	e774      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 8010ae4:	2002      	movs	r0, #2
}
 8010ae6:	4770      	bx	lr
 8010ae8:	fffe0088 	.word	0xfffe0088
 8010aec:	40010000 	.word	0x40010000
 8010af0:	40000400 	.word	0x40000400
 8010af4:	40010400 	.word	0x40010400
 8010af8:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010afc:	4bb0      	ldr	r3, [pc, #704]	; (8010dc0 <HAL_TIM_ConfigClockSource+0x588>)
 8010afe:	49b1      	ldr	r1, [pc, #708]	; (8010dc4 <HAL_TIM_ConfigClockSource+0x58c>)
 8010b00:	429a      	cmp	r2, r3
 8010b02:	bf18      	it	ne
 8010b04:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010b08:	bf14      	ite	ne
 8010b0a:	2301      	movne	r3, #1
 8010b0c:	2300      	moveq	r3, #0
 8010b0e:	428a      	cmp	r2, r1
 8010b10:	bf0c      	ite	eq
 8010b12:	2300      	moveq	r3, #0
 8010b14:	f003 0301 	andne.w	r3, r3, #1
 8010b18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b1c:	428a      	cmp	r2, r1
 8010b1e:	bf0c      	ite	eq
 8010b20:	2300      	moveq	r3, #0
 8010b22:	f003 0301 	andne.w	r3, r3, #1
 8010b26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b2a:	428a      	cmp	r2, r1
 8010b2c:	bf0c      	ite	eq
 8010b2e:	2300      	moveq	r3, #0
 8010b30:	f003 0301 	andne.w	r3, r3, #1
 8010b34:	b11b      	cbz	r3, 8010b3e <HAL_TIM_ConfigClockSource+0x306>
 8010b36:	4ba4      	ldr	r3, [pc, #656]	; (8010dc8 <HAL_TIM_ConfigClockSource+0x590>)
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	f040 80ff 	bne.w	8010d3c <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010b3e:	686b      	ldr	r3, [r5, #4]
 8010b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b44:	bf18      	it	ne
 8010b46:	2b0a      	cmpne	r3, #10
 8010b48:	d003      	beq.n	8010b52 <HAL_TIM_ConfigClockSource+0x31a>
 8010b4a:	f033 0302 	bics.w	r3, r3, #2
 8010b4e:	f040 80c3 	bne.w	8010cd8 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010b52:	68ee      	ldr	r6, [r5, #12]
 8010b54:	2e0f      	cmp	r6, #15
 8010b56:	f200 810c 	bhi.w	8010d72 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b5a:	6823      	ldr	r3, [r4, #0]
 8010b5c:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b5e:	6a18      	ldr	r0, [r3, #32]
 8010b60:	f020 0010 	bic.w	r0, r0, #16
 8010b64:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8010b66:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010b68:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010b6a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b6c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b74:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010b78:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010b7c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b7e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010b80:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b86:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010b8a:	609a      	str	r2, [r3, #8]
}
 8010b8c:	e71f      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010b8e:	4b8c      	ldr	r3, [pc, #560]	; (8010dc0 <HAL_TIM_ConfigClockSource+0x588>)
 8010b90:	488c      	ldr	r0, [pc, #560]	; (8010dc4 <HAL_TIM_ConfigClockSource+0x58c>)
 8010b92:	429a      	cmp	r2, r3
 8010b94:	bf18      	it	ne
 8010b96:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010b9a:	498c      	ldr	r1, [pc, #560]	; (8010dcc <HAL_TIM_ConfigClockSource+0x594>)
 8010b9c:	bf14      	ite	ne
 8010b9e:	2301      	movne	r3, #1
 8010ba0:	2300      	moveq	r3, #0
 8010ba2:	4282      	cmp	r2, r0
 8010ba4:	bf0c      	ite	eq
 8010ba6:	2300      	moveq	r3, #0
 8010ba8:	f003 0301 	andne.w	r3, r3, #1
 8010bac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010bb0:	428a      	cmp	r2, r1
 8010bb2:	bf0c      	ite	eq
 8010bb4:	2300      	moveq	r3, #0
 8010bb6:	f003 0301 	andne.w	r3, r3, #1
 8010bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bbe:	4282      	cmp	r2, r0
 8010bc0:	bf0c      	ite	eq
 8010bc2:	2300      	moveq	r3, #0
 8010bc4:	f003 0301 	andne.w	r3, r3, #1
 8010bc8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010bcc:	428a      	cmp	r2, r1
 8010bce:	bf0c      	ite	eq
 8010bd0:	2300      	moveq	r3, #0
 8010bd2:	f003 0301 	andne.w	r3, r3, #1
 8010bd6:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010bda:	4282      	cmp	r2, r0
 8010bdc:	bf0c      	ite	eq
 8010bde:	2300      	moveq	r3, #0
 8010be0:	f003 0301 	andne.w	r3, r3, #1
 8010be4:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010be8:	428a      	cmp	r2, r1
 8010bea:	bf0c      	ite	eq
 8010bec:	2300      	moveq	r3, #0
 8010bee:	f003 0301 	andne.w	r3, r3, #1
 8010bf2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010bf6:	4282      	cmp	r2, r0
 8010bf8:	bf0c      	ite	eq
 8010bfa:	2300      	moveq	r3, #0
 8010bfc:	f003 0301 	andne.w	r3, r3, #1
 8010c00:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010c04:	428a      	cmp	r2, r1
 8010c06:	bf0c      	ite	eq
 8010c08:	2300      	moveq	r3, #0
 8010c0a:	f003 0301 	andne.w	r3, r3, #1
 8010c0e:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010c12:	4282      	cmp	r2, r0
 8010c14:	bf0c      	ite	eq
 8010c16:	2300      	moveq	r3, #0
 8010c18:	f003 0301 	andne.w	r3, r3, #1
 8010c1c:	428a      	cmp	r2, r1
 8010c1e:	bf0c      	ite	eq
 8010c20:	2300      	moveq	r3, #0
 8010c22:	f003 0301 	andne.w	r3, r3, #1
 8010c26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c2a:	428a      	cmp	r2, r1
 8010c2c:	bf0c      	ite	eq
 8010c2e:	2300      	moveq	r3, #0
 8010c30:	f003 0301 	andne.w	r3, r3, #1
 8010c34:	b11b      	cbz	r3, 8010c3e <HAL_TIM_ConfigClockSource+0x406>
 8010c36:	4b66      	ldr	r3, [pc, #408]	; (8010dd0 <HAL_TIM_ConfigClockSource+0x598>)
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	f040 80cd 	bne.w	8010dd8 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 8010c3e:	2000      	movs	r0, #0
 8010c40:	e6c5      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010c42:	4b5f      	ldr	r3, [pc, #380]	; (8010dc0 <HAL_TIM_ConfigClockSource+0x588>)
 8010c44:	495f      	ldr	r1, [pc, #380]	; (8010dc4 <HAL_TIM_ConfigClockSource+0x58c>)
 8010c46:	429a      	cmp	r2, r3
 8010c48:	bf18      	it	ne
 8010c4a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c4e:	bf14      	ite	ne
 8010c50:	2301      	movne	r3, #1
 8010c52:	2300      	moveq	r3, #0
 8010c54:	428a      	cmp	r2, r1
 8010c56:	bf0c      	ite	eq
 8010c58:	2300      	moveq	r3, #0
 8010c5a:	f003 0301 	andne.w	r3, r3, #1
 8010c5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c62:	428a      	cmp	r2, r1
 8010c64:	bf0c      	ite	eq
 8010c66:	2300      	moveq	r3, #0
 8010c68:	f003 0301 	andne.w	r3, r3, #1
 8010c6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c70:	428a      	cmp	r2, r1
 8010c72:	bf0c      	ite	eq
 8010c74:	2300      	moveq	r3, #0
 8010c76:	f003 0301 	andne.w	r3, r3, #1
 8010c7a:	b113      	cbz	r3, 8010c82 <HAL_TIM_ConfigClockSource+0x44a>
 8010c7c:	4b52      	ldr	r3, [pc, #328]	; (8010dc8 <HAL_TIM_ConfigClockSource+0x590>)
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d156      	bne.n	8010d30 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010c82:	686b      	ldr	r3, [r5, #4]
 8010c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c88:	bf18      	it	ne
 8010c8a:	2b0a      	cmpne	r3, #10
 8010c8c:	d002      	beq.n	8010c94 <HAL_TIM_ConfigClockSource+0x45c>
 8010c8e:	f033 0302 	bics.w	r3, r3, #2
 8010c92:	d11b      	bne.n	8010ccc <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010c94:	68ee      	ldr	r6, [r5, #12]
 8010c96:	2e0f      	cmp	r6, #15
 8010c98:	d864      	bhi.n	8010d64 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010c9e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ca0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ca2:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ca6:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010caa:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010cac:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010cae:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010cb0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010cb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010cb6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010cbc:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010cbe:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010cc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cc4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010cc8:	609a      	str	r2, [r3, #8]
}
 8010cca:	e680      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ccc:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8010cd0:	4840      	ldr	r0, [pc, #256]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010cd2:	f7f4 fdcd 	bl	8005870 <assert_failed>
 8010cd6:	e7dd      	b.n	8010c94 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cd8:	f241 5196 	movw	r1, #5526	; 0x1596
 8010cdc:	483d      	ldr	r0, [pc, #244]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010cde:	f7f4 fdc7 	bl	8005870 <assert_failed>
 8010ce2:	e736      	b.n	8010b52 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ce4:	f241 5173 	movw	r1, #5491	; 0x1573
 8010ce8:	483a      	ldr	r0, [pc, #232]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010cea:	f7f4 fdc1 	bl	8005870 <assert_failed>
 8010cee:	e655      	b.n	801099c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cf0:	f241 5186 	movw	r1, #5510	; 0x1586
 8010cf4:	4837      	ldr	r0, [pc, #220]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010cf6:	f7f4 fdbb 	bl	8005870 <assert_failed>
 8010cfa:	e5fb      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cfc:	f241 515b 	movw	r1, #5467	; 0x155b
 8010d00:	4834      	ldr	r0, [pc, #208]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d02:	f7f4 fdb5 	bl	8005870 <assert_failed>
 8010d06:	e6d8      	b.n	8010aba <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010d08:	f241 516f 	movw	r1, #5487	; 0x156f
 8010d0c:	4831      	ldr	r0, [pc, #196]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d0e:	f7f4 fdaf 	bl	8005870 <assert_failed>
 8010d12:	e634      	b.n	801097e <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010d14:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8010d18:	482e      	ldr	r0, [pc, #184]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d1a:	f7f4 fda9 	bl	8005870 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010d1e:	6822      	ldr	r2, [r4, #0]
 8010d20:	682b      	ldr	r3, [r5, #0]
 8010d22:	e681      	b.n	8010a28 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010d24:	f241 5183 	movw	r1, #5507	; 0x1583
 8010d28:	482a      	ldr	r0, [pc, #168]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d2a:	f7f4 fda1 	bl	8005870 <assert_failed>
 8010d2e:	e5d7      	b.n	80108e0 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010d30:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8010d34:	4827      	ldr	r0, [pc, #156]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d36:	f7f4 fd9b 	bl	8005870 <assert_failed>
 8010d3a:	e7a2      	b.n	8010c82 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010d3c:	f241 5193 	movw	r1, #5523	; 0x1593
 8010d40:	4824      	ldr	r0, [pc, #144]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d42:	f7f4 fd95 	bl	8005870 <assert_failed>
 8010d46:	e6fa      	b.n	8010b3e <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010d48:	f241 5144 	movw	r1, #5444	; 0x1544
 8010d4c:	4821      	ldr	r0, [pc, #132]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d4e:	f7f4 fd8f 	bl	8005870 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 8010d52:	682b      	ldr	r3, [r5, #0]
 8010d54:	e591      	b.n	801087a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d56:	f241 5174 	movw	r1, #5492	; 0x1574
 8010d5a:	481e      	ldr	r0, [pc, #120]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d5c:	f7f4 fd88 	bl	8005870 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010d60:	68ee      	ldr	r6, [r5, #12]
 8010d62:	e61f      	b.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d64:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8010d68:	481a      	ldr	r0, [pc, #104]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d6a:	f7f4 fd81 	bl	8005870 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d6e:	68ee      	ldr	r6, [r5, #12]
 8010d70:	e793      	b.n	8010c9a <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d72:	f241 5197 	movw	r1, #5527	; 0x1597
 8010d76:	4817      	ldr	r0, [pc, #92]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d78:	f7f4 fd7a 	bl	8005870 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d7c:	68ee      	ldr	r6, [r5, #12]
 8010d7e:	e6ec      	b.n	8010b5a <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d80:	f241 5187 	movw	r1, #5511	; 0x1587
 8010d84:	4813      	ldr	r0, [pc, #76]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d86:	f7f4 fd73 	bl	8005870 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d8a:	68ee      	ldr	r6, [r5, #12]
 8010d8c:	e5b6      	b.n	80108fc <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d8e:	f241 515c 	movw	r1, #5468	; 0x155c
 8010d92:	4810      	ldr	r0, [pc, #64]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010d94:	f7f4 fd6c 	bl	8005870 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010d98:	68ee      	ldr	r6, [r5, #12]
 8010d9a:	e692      	b.n	8010ac2 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010d9c:	f241 515a 	movw	r1, #5466	; 0x155a
 8010da0:	480c      	ldr	r0, [pc, #48]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010da2:	f7f4 fd65 	bl	8005870 <assert_failed>
 8010da6:	e67e      	b.n	8010aa6 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010da8:	f241 5172 	movw	r1, #5490	; 0x1572
 8010dac:	4809      	ldr	r0, [pc, #36]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010dae:	f7f4 fd5f 	bl	8005870 <assert_failed>
 8010db2:	e5e9      	b.n	8010988 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010db4:	f241 5157 	movw	r1, #5463	; 0x1557
 8010db8:	4806      	ldr	r0, [pc, #24]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x59c>)
 8010dba:	f7f4 fd59 	bl	8005870 <assert_failed>
 8010dbe:	e66d      	b.n	8010a9c <HAL_TIM_ConfigClockSource+0x264>
 8010dc0:	40010000 	.word	0x40010000
 8010dc4:	40000400 	.word	0x40000400
 8010dc8:	40010400 	.word	0x40010400
 8010dcc:	40000800 	.word	0x40000800
 8010dd0:	40002000 	.word	0x40002000
 8010dd4:	0802e100 	.word	0x0802e100
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010dd8:	4803      	ldr	r0, [pc, #12]	; (8010de8 <HAL_TIM_ConfigClockSource+0x5b0>)
 8010dda:	f241 5150 	movw	r1, #5456	; 0x1550
 8010dde:	f7f4 fd47 	bl	8005870 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 8010de2:	2000      	movs	r0, #0
 8010de4:	e5f3      	b.n	80109ce <HAL_TIM_ConfigClockSource+0x196>
 8010de6:	bf00      	nop
 8010de8:	0802e100 	.word	0x0802e100

08010dec <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010dec:	6802      	ldr	r2, [r0, #0]
{
 8010dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010df0:	4b39      	ldr	r3, [pc, #228]	; (8010ed8 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 8010df2:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010df4:	4f39      	ldr	r7, [pc, #228]	; (8010edc <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 8010df6:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	bf18      	it	ne
 8010dfc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010e00:	4e37      	ldr	r6, [pc, #220]	; (8010ee0 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 8010e02:	4938      	ldr	r1, [pc, #224]	; (8010ee4 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 8010e04:	bf14      	ite	ne
 8010e06:	2301      	movne	r3, #1
 8010e08:	2300      	moveq	r3, #0
 8010e0a:	42ba      	cmp	r2, r7
 8010e0c:	bf0c      	ite	eq
 8010e0e:	2300      	moveq	r3, #0
 8010e10:	f003 0301 	andne.w	r3, r3, #1
 8010e14:	42b2      	cmp	r2, r6
 8010e16:	bf0c      	ite	eq
 8010e18:	2300      	moveq	r3, #0
 8010e1a:	f003 0301 	andne.w	r3, r3, #1
 8010e1e:	428a      	cmp	r2, r1
 8010e20:	bf0c      	ite	eq
 8010e22:	2300      	moveq	r3, #0
 8010e24:	f003 0301 	andne.w	r3, r3, #1
 8010e28:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	bf0c      	ite	eq
 8010e30:	2300      	moveq	r3, #0
 8010e32:	f003 0301 	andne.w	r3, r3, #1
 8010e36:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010e3a:	428a      	cmp	r2, r1
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	f003 0301 	andne.w	r3, r3, #1
 8010e44:	b113      	cbz	r3, 8010e4c <HAL_TIM_SlaveConfigSynchro+0x60>
 8010e46:	4b28      	ldr	r3, [pc, #160]	; (8010ee8 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d138      	bne.n	8010ebe <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8010e4c:	682b      	ldr	r3, [r5, #0]
 8010e4e:	1f1a      	subs	r2, r3, #4
 8010e50:	2a03      	cmp	r2, #3
 8010e52:	d902      	bls.n	8010e5a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8010e54:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8010e58:	d12b      	bne.n	8010eb2 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8010e5a:	686b      	ldr	r3, [r5, #4]
 8010e5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010e60:	2b40      	cmp	r3, #64	; 0x40
 8010e62:	d000      	beq.n	8010e66 <HAL_TIM_SlaveConfigSynchro+0x7a>
 8010e64:	bb8b      	cbnz	r3, 8010eca <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 8010e66:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d01f      	beq.n	8010eae <HAL_TIM_SlaveConfigSynchro+0xc2>
 8010e6e:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8010e70:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010e72:	4629      	mov	r1, r5
 8010e74:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 8010e76:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010e7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010e7e:	f7ff f933 	bl	80100e8 <TIM_SlaveTimer_SetConfig>
 8010e82:	b968      	cbnz	r0, 8010ea0 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	68da      	ldr	r2, [r3, #12]
 8010e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e8c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010e8e:	68da      	ldr	r2, [r3, #12]
 8010e90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010e94:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8010e96:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010e9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8010e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 8010ea0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8010ea2:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 8010ea4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8010ea8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8010eae:	2002      	movs	r0, #2
}
 8010eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8010eb2:	f241 51f7 	movw	r1, #5623	; 0x15f7
 8010eb6:	480d      	ldr	r0, [pc, #52]	; (8010eec <HAL_TIM_SlaveConfigSynchro+0x100>)
 8010eb8:	f7f4 fcda 	bl	8005870 <assert_failed>
 8010ebc:	e7cd      	b.n	8010e5a <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8010ebe:	f241 51f6 	movw	r1, #5622	; 0x15f6
 8010ec2:	480a      	ldr	r0, [pc, #40]	; (8010eec <HAL_TIM_SlaveConfigSynchro+0x100>)
 8010ec4:	f7f4 fcd4 	bl	8005870 <assert_failed>
 8010ec8:	e7c0      	b.n	8010e4c <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8010eca:	f241 51f8 	movw	r1, #5624	; 0x15f8
 8010ece:	4807      	ldr	r0, [pc, #28]	; (8010eec <HAL_TIM_SlaveConfigSynchro+0x100>)
 8010ed0:	f7f4 fcce 	bl	8005870 <assert_failed>
 8010ed4:	e7c7      	b.n	8010e66 <HAL_TIM_SlaveConfigSynchro+0x7a>
 8010ed6:	bf00      	nop
 8010ed8:	40010000 	.word	0x40010000
 8010edc:	40000400 	.word	0x40000400
 8010ee0:	40000800 	.word	0x40000800
 8010ee4:	40000c00 	.word	0x40000c00
 8010ee8:	40001800 	.word	0x40001800
 8010eec:	0802e100 	.word	0x0802e100

08010ef0 <HAL_TIM_OC_DelayElapsedCallback>:
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop

08010ef4 <TIM_DMACaptureCplt>:
{
 8010ef4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ef6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010efa:	4283      	cmp	r3, r0
 8010efc:	d01e      	beq.n	8010f3c <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f00:	4283      	cmp	r3, r0
 8010f02:	d00b      	beq.n	8010f1c <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010f06:	4283      	cmp	r3, r0
 8010f08:	d027      	beq.n	8010f5a <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010f0c:	4283      	cmp	r3, r0
 8010f0e:	d02f      	beq.n	8010f70 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7f3 fba7 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f16:	2300      	movs	r3, #0
 8010f18:	7723      	strb	r3, [r4, #28]
}
 8010f1a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f1c:	2202      	movs	r2, #2
 8010f1e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8010f20:	69db      	ldr	r3, [r3, #28]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1f4      	bne.n	8010f10 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f26:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 8010f28:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f2a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 8010f32:	f7f3 fb97 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f36:	2300      	movs	r3, #0
 8010f38:	7723      	strb	r3, [r4, #28]
}
 8010f3a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8010f40:	69db      	ldr	r3, [r3, #28]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d1e4      	bne.n	8010f10 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f46:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8010f4a:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f4c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8010f50:	f7f3 fb88 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f54:	2300      	movs	r3, #0
 8010f56:	7723      	strb	r3, [r4, #28]
}
 8010f58:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f5a:	2204      	movs	r2, #4
 8010f5c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8010f5e:	69db      	ldr	r3, [r3, #28]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1d5      	bne.n	8010f10 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f64:	2301      	movs	r3, #1
 8010f66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010f6e:	e7cf      	b.n	8010f10 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f70:	2208      	movs	r2, #8
 8010f72:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1ca      	bne.n	8010f10 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010f80:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8010f84:	e7c4      	b.n	8010f10 <TIM_DMACaptureCplt+0x1c>
 8010f86:	bf00      	nop

08010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop

08010f8c <TIM_DMACaptureHalfCplt>:
{
 8010f8c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f92:	4283      	cmp	r3, r0
 8010f94:	d016      	beq.n	8010fc4 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d00b      	beq.n	8010fb4 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010f9e:	4283      	cmp	r3, r0
 8010fa0:	d018      	beq.n	8010fd4 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010fa4:	4283      	cmp	r3, r0
 8010fa6:	d01d      	beq.n	8010fe4 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fa8:	4620      	mov	r0, r4
 8010faa:	f7ff ffed 	bl	8010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	7723      	strb	r3, [r4, #28]
}
 8010fb2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fb4:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fb6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fb8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fba:	f7ff ffe5 	bl	8010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	7723      	strb	r3, [r4, #28]
}
 8010fc2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fc4:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fc6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fc8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fca:	f7ff ffdd 	bl	8010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	7723      	strb	r3, [r4, #28]
}
 8010fd2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fd4:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fd6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fd8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fda:	f7ff ffd5 	bl	8010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	7723      	strb	r3, [r4, #28]
}
 8010fe2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fe4:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fe6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fe8:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8010fea:	f7ff ffcd 	bl	8010f88 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	7723      	strb	r3, [r4, #28]
}
 8010ff2:	bd10      	pop	{r4, pc}

08010ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop

08010ff8 <HAL_TIM_TriggerCallback>:
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop

08010ffc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ffc:	6803      	ldr	r3, [r0, #0]
 8010ffe:	691a      	ldr	r2, [r3, #16]
 8011000:	0791      	lsls	r1, r2, #30
{
 8011002:	b510      	push	{r4, lr}
 8011004:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011006:	d502      	bpl.n	801100e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011008:	68da      	ldr	r2, [r3, #12]
 801100a:	0792      	lsls	r2, r2, #30
 801100c:	d468      	bmi.n	80110e0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801100e:	691a      	ldr	r2, [r3, #16]
 8011010:	0752      	lsls	r2, r2, #29
 8011012:	d502      	bpl.n	801101a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	0750      	lsls	r0, r2, #29
 8011018:	d44f      	bmi.n	80110ba <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801101a:	691a      	ldr	r2, [r3, #16]
 801101c:	0711      	lsls	r1, r2, #28
 801101e:	d502      	bpl.n	8011026 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011020:	68da      	ldr	r2, [r3, #12]
 8011022:	0712      	lsls	r2, r2, #28
 8011024:	d437      	bmi.n	8011096 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011026:	691a      	ldr	r2, [r3, #16]
 8011028:	06d0      	lsls	r0, r2, #27
 801102a:	d502      	bpl.n	8011032 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801102c:	68da      	ldr	r2, [r3, #12]
 801102e:	06d1      	lsls	r1, r2, #27
 8011030:	d41e      	bmi.n	8011070 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011032:	691a      	ldr	r2, [r3, #16]
 8011034:	07d2      	lsls	r2, r2, #31
 8011036:	d502      	bpl.n	801103e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011038:	68da      	ldr	r2, [r3, #12]
 801103a:	07d0      	lsls	r0, r2, #31
 801103c:	d469      	bmi.n	8011112 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801103e:	691a      	ldr	r2, [r3, #16]
 8011040:	0611      	lsls	r1, r2, #24
 8011042:	d502      	bpl.n	801104a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011044:	68da      	ldr	r2, [r3, #12]
 8011046:	0612      	lsls	r2, r2, #24
 8011048:	d46b      	bmi.n	8011122 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801104a:	691a      	ldr	r2, [r3, #16]
 801104c:	05d0      	lsls	r0, r2, #23
 801104e:	d502      	bpl.n	8011056 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011050:	68da      	ldr	r2, [r3, #12]
 8011052:	0611      	lsls	r1, r2, #24
 8011054:	d46d      	bmi.n	8011132 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011056:	691a      	ldr	r2, [r3, #16]
 8011058:	0652      	lsls	r2, r2, #25
 801105a:	d502      	bpl.n	8011062 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801105c:	68da      	ldr	r2, [r3, #12]
 801105e:	0650      	lsls	r0, r2, #25
 8011060:	d46f      	bmi.n	8011142 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011062:	691a      	ldr	r2, [r3, #16]
 8011064:	0691      	lsls	r1, r2, #26
 8011066:	d502      	bpl.n	801106e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011068:	68da      	ldr	r2, [r3, #12]
 801106a:	0692      	lsls	r2, r2, #26
 801106c:	d449      	bmi.n	8011102 <HAL_TIM_IRQHandler+0x106>
}
 801106e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011070:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011074:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8011076:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011078:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801107a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801107c:	69db      	ldr	r3, [r3, #28]
 801107e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011082:	d16f      	bne.n	8011164 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011084:	f7ff ff34 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011088:	4620      	mov	r0, r4
 801108a:	f7ff ffb3 	bl	8010ff4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801108e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011090:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011092:	7722      	strb	r2, [r4, #28]
 8011094:	e7cd      	b.n	8011032 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011096:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801109a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 801109c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801109e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80110a2:	69db      	ldr	r3, [r3, #28]
 80110a4:	079b      	lsls	r3, r3, #30
 80110a6:	d15a      	bne.n	801115e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110a8:	f7ff ff22 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110ac:	4620      	mov	r0, r4
 80110ae:	f7ff ffa1 	bl	8010ff4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80110b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110b6:	7722      	strb	r2, [r4, #28]
 80110b8:	e7b5      	b.n	8011026 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80110ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110be:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80110c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80110c2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80110c6:	699b      	ldr	r3, [r3, #24]
 80110c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80110cc:	d144      	bne.n	8011158 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110ce:	f7ff ff0f 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110d2:	4620      	mov	r0, r4
 80110d4:	f7ff ff8e 	bl	8010ff4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80110da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110dc:	7722      	strb	r2, [r4, #28]
 80110de:	e79c      	b.n	801101a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80110e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80110e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80110ea:	699b      	ldr	r3, [r3, #24]
 80110ec:	0799      	lsls	r1, r3, #30
 80110ee:	d130      	bne.n	8011152 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80110f0:	f7ff fefe 	bl	8010ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110f4:	4620      	mov	r0, r4
 80110f6:	f7ff ff7d 	bl	8010ff4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80110fc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fe:	7722      	strb	r2, [r4, #28]
 8011100:	e785      	b.n	801100e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011102:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8011106:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011108:	611a      	str	r2, [r3, #16]
}
 801110a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801110e:	f001 be53 	b.w	8012db8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011112:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8011116:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011118:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801111a:	f7f3 fb0b 	bl	8004734 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	e78d      	b.n	801103e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011122:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8011126:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011128:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801112a:	f001 fe47 	bl	8012dbc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	e78b      	b.n	801104a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011132:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8011136:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011138:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801113a:	f001 fe41 	bl	8012dc0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	e789      	b.n	8011056 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011142:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8011146:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011148:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801114a:	f7ff ff55 	bl	8010ff8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801114e:	6823      	ldr	r3, [r4, #0]
 8011150:	e787      	b.n	8011062 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8011152:	f7f3 fa87 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
 8011156:	e7d0      	b.n	80110fa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8011158:	f7f3 fa84 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
 801115c:	e7bc      	b.n	80110d8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 801115e:	f7f3 fa81 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
 8011162:	e7a6      	b.n	80110b2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011164:	f7f3 fa7e 	bl	8004664 <HAL_TIM_IC_CaptureCallback>
 8011168:	e791      	b.n	801108e <HAL_TIM_IRQHandler+0x92>
 801116a:	bf00      	nop

0801116c <HAL_TIM_ErrorCallback>:
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop

08011170 <TIM_DMAError>:
{
 8011170:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011172:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011176:	4283      	cmp	r3, r0
 8011178:	d01c      	beq.n	80111b4 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801117a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801117c:	4283      	cmp	r3, r0
 801117e:	d00e      	beq.n	801119e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011182:	4283      	cmp	r3, r0
 8011184:	d020      	beq.n	80111c8 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011188:	4283      	cmp	r3, r0
 801118a:	d028      	beq.n	80111de <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 801118c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 801118e:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 8011190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8011194:	f7ff ffea 	bl	801116c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011198:	2300      	movs	r3, #0
 801119a:	7723      	strb	r3, [r4, #28]
}
 801119c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801119e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111a0:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 80111a2:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80111a4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111a8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80111aa:	f7ff ffdf 	bl	801116c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111ae:	2300      	movs	r3, #0
 80111b0:	7723      	strb	r3, [r4, #28]
}
 80111b2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111b4:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80111b6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111b8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80111ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 80111be:	f7ff ffd5 	bl	801116c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111c2:	2300      	movs	r3, #0
 80111c4:	7723      	strb	r3, [r4, #28]
}
 80111c6:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111c8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111ca:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 80111cc:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111d2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80111d4:	f7ff ffca 	bl	801116c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111d8:	2300      	movs	r3, #0
 80111da:	7723      	strb	r3, [r4, #28]
}
 80111dc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111de:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111e0:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 80111e2:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111e8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80111ea:	f7ff ffbf 	bl	801116c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111ee:	2300      	movs	r3, #0
 80111f0:	7723      	strb	r3, [r4, #28]
}
 80111f2:	bd10      	pop	{r4, pc}

080111f4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80111f4:	4a3c      	ldr	r2, [pc, #240]	; (80112e8 <TIM_Base_SetConfig+0xf4>)
 80111f6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80111fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80111fc:	eba0 0202 	sub.w	r2, r0, r2
 8011200:	fab2 f282 	clz	r2, r2
{
 8011204:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011206:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801120a:	d010      	beq.n	801122e <TIM_Base_SetConfig+0x3a>
 801120c:	b97a      	cbnz	r2, 801122e <TIM_Base_SetConfig+0x3a>
 801120e:	4d37      	ldr	r5, [pc, #220]	; (80112ec <TIM_Base_SetConfig+0xf8>)
 8011210:	4c37      	ldr	r4, [pc, #220]	; (80112f0 <TIM_Base_SetConfig+0xfc>)
 8011212:	42a0      	cmp	r0, r4
 8011214:	bf18      	it	ne
 8011216:	42a8      	cmpne	r0, r5
 8011218:	d12b      	bne.n	8011272 <TIM_Base_SetConfig+0x7e>
 801121a:	4c36      	ldr	r4, [pc, #216]	; (80112f4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801121c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011220:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011222:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8011224:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011226:	fab4 f484 	clz	r4, r4
 801122a:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801122c:	e008      	b.n	8011240 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 801122e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011234:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011236:	4c2f      	ldr	r4, [pc, #188]	; (80112f4 <TIM_Base_SetConfig+0x100>)
 8011238:	1b04      	subs	r4, r0, r4
 801123a:	fab4 f484 	clz	r4, r4
 801123e:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011240:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011246:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011248:	694d      	ldr	r5, [r1, #20]
 801124a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801124e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011250:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011252:	688b      	ldr	r3, [r1, #8]
 8011254:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011256:	680b      	ldr	r3, [r1, #0]
 8011258:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801125a:	b922      	cbnz	r2, 8011266 <TIM_Base_SetConfig+0x72>
 801125c:	b91c      	cbnz	r4, 8011266 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 801125e:	2301      	movs	r3, #1
}
 8011260:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8011262:	6143      	str	r3, [r0, #20]
}
 8011264:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8011266:	690b      	ldr	r3, [r1, #16]
 8011268:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801126a:	2301      	movs	r3, #1
}
 801126c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 801126e:	6143      	str	r3, [r0, #20]
}
 8011270:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011272:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011276:	42a0      	cmp	r0, r4
 8011278:	d024      	beq.n	80112c4 <TIM_Base_SetConfig+0xd0>
 801127a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 801127e:	42a0      	cmp	r0, r4
 8011280:	d020      	beq.n	80112c4 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011282:	4c1d      	ldr	r4, [pc, #116]	; (80112f8 <TIM_Base_SetConfig+0x104>)
 8011284:	4d1d      	ldr	r5, [pc, #116]	; (80112fc <TIM_Base_SetConfig+0x108>)
 8011286:	42a0      	cmp	r0, r4
 8011288:	bf18      	it	ne
 801128a:	42a8      	cmpne	r0, r5
 801128c:	bf0c      	ite	eq
 801128e:	2401      	moveq	r4, #1
 8011290:	2400      	movne	r4, #0
 8011292:	d027      	beq.n	80112e4 <TIM_Base_SetConfig+0xf0>
 8011294:	4e1a      	ldr	r6, [pc, #104]	; (8011300 <TIM_Base_SetConfig+0x10c>)
 8011296:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 801129a:	42a8      	cmp	r0, r5
 801129c:	bf18      	it	ne
 801129e:	42b0      	cmpne	r0, r6
 80112a0:	d0ce      	beq.n	8011240 <TIM_Base_SetConfig+0x4c>
 80112a2:	4c18      	ldr	r4, [pc, #96]	; (8011304 <TIM_Base_SetConfig+0x110>)
 80112a4:	42a0      	cmp	r0, r4
 80112a6:	d01d      	beq.n	80112e4 <TIM_Base_SetConfig+0xf0>
 80112a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80112ac:	42a0      	cmp	r0, r4
 80112ae:	d019      	beq.n	80112e4 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112b0:	694d      	ldr	r5, [r1, #20]
 80112b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112b6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80112b8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80112ba:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80112bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112be:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80112c0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80112c2:	e7cc      	b.n	801125e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80112c4:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80112c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112ca:	4c0a      	ldr	r4, [pc, #40]	; (80112f4 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 80112cc:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112ce:	4d0e      	ldr	r5, [pc, #56]	; (8011308 <TIM_Base_SetConfig+0x114>)
 80112d0:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112d2:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112d4:	fab4 f484 	clz	r4, r4
 80112d8:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112dc:	d0b0      	beq.n	8011240 <TIM_Base_SetConfig+0x4c>
 80112de:	2c00      	cmp	r4, #0
 80112e0:	d1ae      	bne.n	8011240 <TIM_Base_SetConfig+0x4c>
 80112e2:	e7ce      	b.n	8011282 <TIM_Base_SetConfig+0x8e>
 80112e4:	2400      	movs	r4, #0
 80112e6:	e7ab      	b.n	8011240 <TIM_Base_SetConfig+0x4c>
 80112e8:	40010000 	.word	0x40010000
 80112ec:	40000400 	.word	0x40000400
 80112f0:	40000800 	.word	0x40000800
 80112f4:	40010400 	.word	0x40010400
 80112f8:	40014400 	.word	0x40014400
 80112fc:	40014000 	.word	0x40014000
 8011300:	40014800 	.word	0x40014800
 8011304:	40001c00 	.word	0x40001c00
 8011308:	40000c00 	.word	0x40000c00

0801130c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 801130c:	2800      	cmp	r0, #0
 801130e:	f000 80b8 	beq.w	8011482 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011312:	6802      	ldr	r2, [r0, #0]
 8011314:	4b5f      	ldr	r3, [pc, #380]	; (8011494 <HAL_TIM_Base_Init+0x188>)
 8011316:	4960      	ldr	r1, [pc, #384]	; (8011498 <HAL_TIM_Base_Init+0x18c>)
 8011318:	429a      	cmp	r2, r3
 801131a:	bf18      	it	ne
 801131c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011320:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011322:	bf14      	ite	ne
 8011324:	2301      	movne	r3, #1
 8011326:	2300      	moveq	r3, #0
 8011328:	4604      	mov	r4, r0
 801132a:	485c      	ldr	r0, [pc, #368]	; (801149c <HAL_TIM_Base_Init+0x190>)
 801132c:	4282      	cmp	r2, r0
 801132e:	bf0c      	ite	eq
 8011330:	2300      	moveq	r3, #0
 8011332:	f003 0301 	andne.w	r3, r3, #1
 8011336:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801133a:	428a      	cmp	r2, r1
 801133c:	bf0c      	ite	eq
 801133e:	2300      	moveq	r3, #0
 8011340:	f003 0301 	andne.w	r3, r3, #1
 8011344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011348:	4282      	cmp	r2, r0
 801134a:	bf0c      	ite	eq
 801134c:	2300      	moveq	r3, #0
 801134e:	f003 0301 	andne.w	r3, r3, #1
 8011352:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011356:	428a      	cmp	r2, r1
 8011358:	bf0c      	ite	eq
 801135a:	2300      	moveq	r3, #0
 801135c:	f003 0301 	andne.w	r3, r3, #1
 8011360:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011364:	4282      	cmp	r2, r0
 8011366:	bf0c      	ite	eq
 8011368:	2300      	moveq	r3, #0
 801136a:	f003 0301 	andne.w	r3, r3, #1
 801136e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011372:	428a      	cmp	r2, r1
 8011374:	bf0c      	ite	eq
 8011376:	2300      	moveq	r3, #0
 8011378:	f003 0301 	andne.w	r3, r3, #1
 801137c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011380:	4282      	cmp	r2, r0
 8011382:	bf0c      	ite	eq
 8011384:	2300      	moveq	r3, #0
 8011386:	f003 0301 	andne.w	r3, r3, #1
 801138a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801138e:	428a      	cmp	r2, r1
 8011390:	bf0c      	ite	eq
 8011392:	2300      	moveq	r3, #0
 8011394:	f003 0301 	andne.w	r3, r3, #1
 8011398:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801139c:	4282      	cmp	r2, r0
 801139e:	bf0c      	ite	eq
 80113a0:	2300      	moveq	r3, #0
 80113a2:	f003 0301 	andne.w	r3, r3, #1
 80113a6:	428a      	cmp	r2, r1
 80113a8:	bf0c      	ite	eq
 80113aa:	2300      	moveq	r3, #0
 80113ac:	f003 0301 	andne.w	r3, r3, #1
 80113b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80113b4:	428a      	cmp	r2, r1
 80113b6:	bf0c      	ite	eq
 80113b8:	2300      	moveq	r3, #0
 80113ba:	f003 0301 	andne.w	r3, r3, #1
 80113be:	b113      	cbz	r3, 80113c6 <HAL_TIM_Base_Init+0xba>
 80113c0:	4b37      	ldr	r3, [pc, #220]	; (80114a0 <HAL_TIM_Base_Init+0x194>)
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d15f      	bne.n	8011486 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80113c6:	68a3      	ldr	r3, [r4, #8]
 80113c8:	f023 0210 	bic.w	r2, r3, #16
 80113cc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80113d0:	2920      	cmp	r1, #32
 80113d2:	bf18      	it	ne
 80113d4:	2a00      	cmpne	r2, #0
 80113d6:	d001      	beq.n	80113dc <HAL_TIM_Base_Init+0xd0>
 80113d8:	2b40      	cmp	r3, #64	; 0x40
 80113da:	d14c      	bne.n	8011476 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80113dc:	6923      	ldr	r3, [r4, #16]
 80113de:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80113e2:	d002      	beq.n	80113ea <HAL_TIM_Base_Init+0xde>
 80113e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113e8:	d12b      	bne.n	8011442 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80113ea:	69a3      	ldr	r3, [r4, #24]
 80113ec:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80113f0:	d130      	bne.n	8011454 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80113f2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80113f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80113fa:	b3b3      	cbz	r3, 801146a <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80113fc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80113fe:	2302      	movs	r3, #2
 8011400:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011404:	f851 0b04 	ldr.w	r0, [r1], #4
 8011408:	f7ff fef4 	bl	80111f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801140c:	2301      	movs	r3, #1
  return HAL_OK;
 801140e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011410:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011414:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011418:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801141c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011420:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801142c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011434:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011438:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801143c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011440:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011442:	f44f 718c 	mov.w	r1, #280	; 0x118
 8011446:	4817      	ldr	r0, [pc, #92]	; (80114a4 <HAL_TIM_Base_Init+0x198>)
 8011448:	f7f4 fa12 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801144c:	69a3      	ldr	r3, [r4, #24]
 801144e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011452:	d0ce      	beq.n	80113f2 <HAL_TIM_Base_Init+0xe6>
 8011454:	f240 1119 	movw	r1, #281	; 0x119
 8011458:	4812      	ldr	r0, [pc, #72]	; (80114a4 <HAL_TIM_Base_Init+0x198>)
 801145a:	f7f4 fa09 	bl	8005870 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801145e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011466:	2b00      	cmp	r3, #0
 8011468:	d1c8      	bne.n	80113fc <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 801146a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801146c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8011470:	f7f6 f954 	bl	800771c <HAL_TIM_Base_MspInit>
 8011474:	e7c2      	b.n	80113fc <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011476:	f240 1117 	movw	r1, #279	; 0x117
 801147a:	480a      	ldr	r0, [pc, #40]	; (80114a4 <HAL_TIM_Base_Init+0x198>)
 801147c:	f7f4 f9f8 	bl	8005870 <assert_failed>
 8011480:	e7ac      	b.n	80113dc <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 8011482:	2001      	movs	r0, #1
}
 8011484:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011486:	f44f 718b 	mov.w	r1, #278	; 0x116
 801148a:	4806      	ldr	r0, [pc, #24]	; (80114a4 <HAL_TIM_Base_Init+0x198>)
 801148c:	f7f4 f9f0 	bl	8005870 <assert_failed>
 8011490:	e799      	b.n	80113c6 <HAL_TIM_Base_Init+0xba>
 8011492:	bf00      	nop
 8011494:	40010000 	.word	0x40010000
 8011498:	40000800 	.word	0x40000800
 801149c:	40000400 	.word	0x40000400
 80114a0:	40002000 	.word	0x40002000
 80114a4:	0802e100 	.word	0x0802e100

080114a8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80114a8:	2800      	cmp	r0, #0
 80114aa:	f000 80b8 	beq.w	801161e <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80114ae:	6802      	ldr	r2, [r0, #0]
 80114b0:	4b5f      	ldr	r3, [pc, #380]	; (8011630 <HAL_TIM_OC_Init+0x188>)
 80114b2:	4960      	ldr	r1, [pc, #384]	; (8011634 <HAL_TIM_OC_Init+0x18c>)
 80114b4:	429a      	cmp	r2, r3
 80114b6:	bf18      	it	ne
 80114b8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80114bc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80114be:	bf14      	ite	ne
 80114c0:	2301      	movne	r3, #1
 80114c2:	2300      	moveq	r3, #0
 80114c4:	4604      	mov	r4, r0
 80114c6:	485c      	ldr	r0, [pc, #368]	; (8011638 <HAL_TIM_OC_Init+0x190>)
 80114c8:	4282      	cmp	r2, r0
 80114ca:	bf0c      	ite	eq
 80114cc:	2300      	moveq	r3, #0
 80114ce:	f003 0301 	andne.w	r3, r3, #1
 80114d2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80114d6:	428a      	cmp	r2, r1
 80114d8:	bf0c      	ite	eq
 80114da:	2300      	moveq	r3, #0
 80114dc:	f003 0301 	andne.w	r3, r3, #1
 80114e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80114e4:	4282      	cmp	r2, r0
 80114e6:	bf0c      	ite	eq
 80114e8:	2300      	moveq	r3, #0
 80114ea:	f003 0301 	andne.w	r3, r3, #1
 80114ee:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80114f2:	428a      	cmp	r2, r1
 80114f4:	bf0c      	ite	eq
 80114f6:	2300      	moveq	r3, #0
 80114f8:	f003 0301 	andne.w	r3, r3, #1
 80114fc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011500:	4282      	cmp	r2, r0
 8011502:	bf0c      	ite	eq
 8011504:	2300      	moveq	r3, #0
 8011506:	f003 0301 	andne.w	r3, r3, #1
 801150a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801150e:	428a      	cmp	r2, r1
 8011510:	bf0c      	ite	eq
 8011512:	2300      	moveq	r3, #0
 8011514:	f003 0301 	andne.w	r3, r3, #1
 8011518:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 801151c:	4282      	cmp	r2, r0
 801151e:	bf0c      	ite	eq
 8011520:	2300      	moveq	r3, #0
 8011522:	f003 0301 	andne.w	r3, r3, #1
 8011526:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801152a:	428a      	cmp	r2, r1
 801152c:	bf0c      	ite	eq
 801152e:	2300      	moveq	r3, #0
 8011530:	f003 0301 	andne.w	r3, r3, #1
 8011534:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011538:	4282      	cmp	r2, r0
 801153a:	bf0c      	ite	eq
 801153c:	2300      	moveq	r3, #0
 801153e:	f003 0301 	andne.w	r3, r3, #1
 8011542:	428a      	cmp	r2, r1
 8011544:	bf0c      	ite	eq
 8011546:	2300      	moveq	r3, #0
 8011548:	f003 0301 	andne.w	r3, r3, #1
 801154c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011550:	428a      	cmp	r2, r1
 8011552:	bf0c      	ite	eq
 8011554:	2300      	moveq	r3, #0
 8011556:	f003 0301 	andne.w	r3, r3, #1
 801155a:	b113      	cbz	r3, 8011562 <HAL_TIM_OC_Init+0xba>
 801155c:	4b37      	ldr	r3, [pc, #220]	; (801163c <HAL_TIM_OC_Init+0x194>)
 801155e:	429a      	cmp	r2, r3
 8011560:	d15f      	bne.n	8011622 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011562:	68a3      	ldr	r3, [r4, #8]
 8011564:	f023 0210 	bic.w	r2, r3, #16
 8011568:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801156c:	2920      	cmp	r1, #32
 801156e:	bf18      	it	ne
 8011570:	2a00      	cmpne	r2, #0
 8011572:	d001      	beq.n	8011578 <HAL_TIM_OC_Init+0xd0>
 8011574:	2b40      	cmp	r3, #64	; 0x40
 8011576:	d14c      	bne.n	8011612 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011578:	6923      	ldr	r3, [r4, #16]
 801157a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801157e:	d002      	beq.n	8011586 <HAL_TIM_OC_Init+0xde>
 8011580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011584:	d12b      	bne.n	80115de <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011586:	69a3      	ldr	r3, [r4, #24]
 8011588:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801158c:	d130      	bne.n	80115f0 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801158e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011592:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011596:	b3b3      	cbz	r3, 8011606 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011598:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801159a:	2302      	movs	r3, #2
 801159c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80115a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80115a4:	f7ff fe26 	bl	80111f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115a8:	2301      	movs	r3, #1
  return HAL_OK;
 80115aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115ac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80115b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80115b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80115bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80115c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80115cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115d0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80115d4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80115d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80115dc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80115de:	f240 2197 	movw	r1, #663	; 0x297
 80115e2:	4817      	ldr	r0, [pc, #92]	; (8011640 <HAL_TIM_OC_Init+0x198>)
 80115e4:	f7f4 f944 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80115e8:	69a3      	ldr	r3, [r4, #24]
 80115ea:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80115ee:	d0ce      	beq.n	801158e <HAL_TIM_OC_Init+0xe6>
 80115f0:	f44f 7126 	mov.w	r1, #664	; 0x298
 80115f4:	4812      	ldr	r0, [pc, #72]	; (8011640 <HAL_TIM_OC_Init+0x198>)
 80115f6:	f7f4 f93b 	bl	8005870 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80115fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80115fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1c8      	bne.n	8011598 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 8011606:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011608:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 801160c:	f7ff f90e 	bl	801082c <HAL_TIM_OC_MspInit>
 8011610:	e7c2      	b.n	8011598 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011612:	f240 2196 	movw	r1, #662	; 0x296
 8011616:	480a      	ldr	r0, [pc, #40]	; (8011640 <HAL_TIM_OC_Init+0x198>)
 8011618:	f7f4 f92a 	bl	8005870 <assert_failed>
 801161c:	e7ac      	b.n	8011578 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 801161e:	2001      	movs	r0, #1
}
 8011620:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011622:	f240 2195 	movw	r1, #661	; 0x295
 8011626:	4806      	ldr	r0, [pc, #24]	; (8011640 <HAL_TIM_OC_Init+0x198>)
 8011628:	f7f4 f922 	bl	8005870 <assert_failed>
 801162c:	e799      	b.n	8011562 <HAL_TIM_OC_Init+0xba>
 801162e:	bf00      	nop
 8011630:	40010000 	.word	0x40010000
 8011634:	40000800 	.word	0x40000800
 8011638:	40000400 	.word	0x40000400
 801163c:	40002000 	.word	0x40002000
 8011640:	0802e100 	.word	0x0802e100

08011644 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8011644:	2800      	cmp	r0, #0
 8011646:	f000 80b8 	beq.w	80117ba <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801164a:	6802      	ldr	r2, [r0, #0]
 801164c:	4b5f      	ldr	r3, [pc, #380]	; (80117cc <HAL_TIM_PWM_Init+0x188>)
 801164e:	4960      	ldr	r1, [pc, #384]	; (80117d0 <HAL_TIM_PWM_Init+0x18c>)
 8011650:	429a      	cmp	r2, r3
 8011652:	bf18      	it	ne
 8011654:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011658:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801165a:	bf14      	ite	ne
 801165c:	2301      	movne	r3, #1
 801165e:	2300      	moveq	r3, #0
 8011660:	4604      	mov	r4, r0
 8011662:	485c      	ldr	r0, [pc, #368]	; (80117d4 <HAL_TIM_PWM_Init+0x190>)
 8011664:	4282      	cmp	r2, r0
 8011666:	bf0c      	ite	eq
 8011668:	2300      	moveq	r3, #0
 801166a:	f003 0301 	andne.w	r3, r3, #1
 801166e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011672:	428a      	cmp	r2, r1
 8011674:	bf0c      	ite	eq
 8011676:	2300      	moveq	r3, #0
 8011678:	f003 0301 	andne.w	r3, r3, #1
 801167c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011680:	4282      	cmp	r2, r0
 8011682:	bf0c      	ite	eq
 8011684:	2300      	moveq	r3, #0
 8011686:	f003 0301 	andne.w	r3, r3, #1
 801168a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801168e:	428a      	cmp	r2, r1
 8011690:	bf0c      	ite	eq
 8011692:	2300      	moveq	r3, #0
 8011694:	f003 0301 	andne.w	r3, r3, #1
 8011698:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801169c:	4282      	cmp	r2, r0
 801169e:	bf0c      	ite	eq
 80116a0:	2300      	moveq	r3, #0
 80116a2:	f003 0301 	andne.w	r3, r3, #1
 80116a6:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80116aa:	428a      	cmp	r2, r1
 80116ac:	bf0c      	ite	eq
 80116ae:	2300      	moveq	r3, #0
 80116b0:	f003 0301 	andne.w	r3, r3, #1
 80116b4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80116b8:	4282      	cmp	r2, r0
 80116ba:	bf0c      	ite	eq
 80116bc:	2300      	moveq	r3, #0
 80116be:	f003 0301 	andne.w	r3, r3, #1
 80116c2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80116c6:	428a      	cmp	r2, r1
 80116c8:	bf0c      	ite	eq
 80116ca:	2300      	moveq	r3, #0
 80116cc:	f003 0301 	andne.w	r3, r3, #1
 80116d0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80116d4:	4282      	cmp	r2, r0
 80116d6:	bf0c      	ite	eq
 80116d8:	2300      	moveq	r3, #0
 80116da:	f003 0301 	andne.w	r3, r3, #1
 80116de:	428a      	cmp	r2, r1
 80116e0:	bf0c      	ite	eq
 80116e2:	2300      	moveq	r3, #0
 80116e4:	f003 0301 	andne.w	r3, r3, #1
 80116e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80116ec:	428a      	cmp	r2, r1
 80116ee:	bf0c      	ite	eq
 80116f0:	2300      	moveq	r3, #0
 80116f2:	f003 0301 	andne.w	r3, r3, #1
 80116f6:	b113      	cbz	r3, 80116fe <HAL_TIM_PWM_Init+0xba>
 80116f8:	4b37      	ldr	r3, [pc, #220]	; (80117d8 <HAL_TIM_PWM_Init+0x194>)
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d15f      	bne.n	80117be <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80116fe:	68a3      	ldr	r3, [r4, #8]
 8011700:	f023 0210 	bic.w	r2, r3, #16
 8011704:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011708:	2920      	cmp	r1, #32
 801170a:	bf18      	it	ne
 801170c:	2a00      	cmpne	r2, #0
 801170e:	d001      	beq.n	8011714 <HAL_TIM_PWM_Init+0xd0>
 8011710:	2b40      	cmp	r3, #64	; 0x40
 8011712:	d14c      	bne.n	80117ae <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011714:	6923      	ldr	r3, [r4, #16]
 8011716:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801171a:	d002      	beq.n	8011722 <HAL_TIM_PWM_Init+0xde>
 801171c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011720:	d12b      	bne.n	801177a <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011722:	69a3      	ldr	r3, [r4, #24]
 8011724:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011728:	d130      	bne.n	801178c <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801172a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801172e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011732:	b3b3      	cbz	r3, 80117a2 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011734:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011736:	2302      	movs	r3, #2
 8011738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801173c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011740:	f7ff fd58 	bl	80111f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011744:	2301      	movs	r3, #1
  return HAL_OK;
 8011746:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011748:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801174c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011750:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011754:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011758:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801175c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011764:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011768:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801176c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011770:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011774:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011778:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801177a:	f240 5132 	movw	r1, #1330	; 0x532
 801177e:	4817      	ldr	r0, [pc, #92]	; (80117dc <HAL_TIM_PWM_Init+0x198>)
 8011780:	f7f4 f876 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011784:	69a3      	ldr	r3, [r4, #24]
 8011786:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801178a:	d0ce      	beq.n	801172a <HAL_TIM_PWM_Init+0xe6>
 801178c:	f240 5133 	movw	r1, #1331	; 0x533
 8011790:	4812      	ldr	r0, [pc, #72]	; (80117dc <HAL_TIM_PWM_Init+0x198>)
 8011792:	f7f4 f86d 	bl	8005870 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011796:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801179a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1c8      	bne.n	8011734 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 80117a2:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80117a4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80117a8:	f7ff f842 	bl	8010830 <HAL_TIM_PWM_MspInit>
 80117ac:	e7c2      	b.n	8011734 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80117ae:	f240 5131 	movw	r1, #1329	; 0x531
 80117b2:	480a      	ldr	r0, [pc, #40]	; (80117dc <HAL_TIM_PWM_Init+0x198>)
 80117b4:	f7f4 f85c 	bl	8005870 <assert_failed>
 80117b8:	e7ac      	b.n	8011714 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 80117ba:	2001      	movs	r0, #1
}
 80117bc:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80117be:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 80117c2:	4806      	ldr	r0, [pc, #24]	; (80117dc <HAL_TIM_PWM_Init+0x198>)
 80117c4:	f7f4 f854 	bl	8005870 <assert_failed>
 80117c8:	e799      	b.n	80116fe <HAL_TIM_PWM_Init+0xba>
 80117ca:	bf00      	nop
 80117cc:	40010000 	.word	0x40010000
 80117d0:	40000800 	.word	0x40000800
 80117d4:	40000400 	.word	0x40000400
 80117d8:	40002000 	.word	0x40002000
 80117dc:	0802e100 	.word	0x0802e100

080117e0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80117e0:	2800      	cmp	r0, #0
 80117e2:	f000 80b8 	beq.w	8011956 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80117e6:	6802      	ldr	r2, [r0, #0]
 80117e8:	4b5f      	ldr	r3, [pc, #380]	; (8011968 <HAL_TIM_IC_Init+0x188>)
 80117ea:	4960      	ldr	r1, [pc, #384]	; (801196c <HAL_TIM_IC_Init+0x18c>)
 80117ec:	429a      	cmp	r2, r3
 80117ee:	bf18      	it	ne
 80117f0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80117f4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80117f6:	bf14      	ite	ne
 80117f8:	2301      	movne	r3, #1
 80117fa:	2300      	moveq	r3, #0
 80117fc:	4604      	mov	r4, r0
 80117fe:	485c      	ldr	r0, [pc, #368]	; (8011970 <HAL_TIM_IC_Init+0x190>)
 8011800:	4282      	cmp	r2, r0
 8011802:	bf0c      	ite	eq
 8011804:	2300      	moveq	r3, #0
 8011806:	f003 0301 	andne.w	r3, r3, #1
 801180a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801180e:	428a      	cmp	r2, r1
 8011810:	bf0c      	ite	eq
 8011812:	2300      	moveq	r3, #0
 8011814:	f003 0301 	andne.w	r3, r3, #1
 8011818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801181c:	4282      	cmp	r2, r0
 801181e:	bf0c      	ite	eq
 8011820:	2300      	moveq	r3, #0
 8011822:	f003 0301 	andne.w	r3, r3, #1
 8011826:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801182a:	428a      	cmp	r2, r1
 801182c:	bf0c      	ite	eq
 801182e:	2300      	moveq	r3, #0
 8011830:	f003 0301 	andne.w	r3, r3, #1
 8011834:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011838:	4282      	cmp	r2, r0
 801183a:	bf0c      	ite	eq
 801183c:	2300      	moveq	r3, #0
 801183e:	f003 0301 	andne.w	r3, r3, #1
 8011842:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011846:	428a      	cmp	r2, r1
 8011848:	bf0c      	ite	eq
 801184a:	2300      	moveq	r3, #0
 801184c:	f003 0301 	andne.w	r3, r3, #1
 8011850:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011854:	4282      	cmp	r2, r0
 8011856:	bf0c      	ite	eq
 8011858:	2300      	moveq	r3, #0
 801185a:	f003 0301 	andne.w	r3, r3, #1
 801185e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011862:	428a      	cmp	r2, r1
 8011864:	bf0c      	ite	eq
 8011866:	2300      	moveq	r3, #0
 8011868:	f003 0301 	andne.w	r3, r3, #1
 801186c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011870:	4282      	cmp	r2, r0
 8011872:	bf0c      	ite	eq
 8011874:	2300      	moveq	r3, #0
 8011876:	f003 0301 	andne.w	r3, r3, #1
 801187a:	428a      	cmp	r2, r1
 801187c:	bf0c      	ite	eq
 801187e:	2300      	moveq	r3, #0
 8011880:	f003 0301 	andne.w	r3, r3, #1
 8011884:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011888:	428a      	cmp	r2, r1
 801188a:	bf0c      	ite	eq
 801188c:	2300      	moveq	r3, #0
 801188e:	f003 0301 	andne.w	r3, r3, #1
 8011892:	b113      	cbz	r3, 801189a <HAL_TIM_IC_Init+0xba>
 8011894:	4b37      	ldr	r3, [pc, #220]	; (8011974 <HAL_TIM_IC_Init+0x194>)
 8011896:	429a      	cmp	r2, r3
 8011898:	d15f      	bne.n	801195a <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801189a:	68a3      	ldr	r3, [r4, #8]
 801189c:	f023 0210 	bic.w	r2, r3, #16
 80118a0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80118a4:	2920      	cmp	r1, #32
 80118a6:	bf18      	it	ne
 80118a8:	2a00      	cmpne	r2, #0
 80118aa:	d001      	beq.n	80118b0 <HAL_TIM_IC_Init+0xd0>
 80118ac:	2b40      	cmp	r3, #64	; 0x40
 80118ae:	d14c      	bne.n	801194a <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80118b0:	6923      	ldr	r3, [r4, #16]
 80118b2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80118b6:	d002      	beq.n	80118be <HAL_TIM_IC_Init+0xde>
 80118b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118bc:	d12b      	bne.n	8011916 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80118be:	69a3      	ldr	r3, [r4, #24]
 80118c0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80118c4:	d130      	bne.n	8011928 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80118c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80118ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80118ce:	b3b3      	cbz	r3, 801193e <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118d0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80118d2:	2302      	movs	r3, #2
 80118d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80118dc:	f7ff fc8a 	bl	80111f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80118e0:	2301      	movs	r3, #1
  return HAL_OK;
 80118e2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80118e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80118ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80118f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80118f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80118f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80118fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011900:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011908:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801190c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011910:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011914:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011916:	f240 71cc 	movw	r1, #1996	; 0x7cc
 801191a:	4817      	ldr	r0, [pc, #92]	; (8011978 <HAL_TIM_IC_Init+0x198>)
 801191c:	f7f3 ffa8 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011920:	69a3      	ldr	r3, [r4, #24]
 8011922:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011926:	d0ce      	beq.n	80118c6 <HAL_TIM_IC_Init+0xe6>
 8011928:	f240 71cd 	movw	r1, #1997	; 0x7cd
 801192c:	4812      	ldr	r0, [pc, #72]	; (8011978 <HAL_TIM_IC_Init+0x198>)
 801192e:	f7f3 ff9f 	bl	8005870 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011932:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1c8      	bne.n	80118d0 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 801193e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011940:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8011944:	f7fe ff76 	bl	8010834 <HAL_TIM_IC_MspInit>
 8011948:	e7c2      	b.n	80118d0 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801194a:	f240 71cb 	movw	r1, #1995	; 0x7cb
 801194e:	480a      	ldr	r0, [pc, #40]	; (8011978 <HAL_TIM_IC_Init+0x198>)
 8011950:	f7f3 ff8e 	bl	8005870 <assert_failed>
 8011954:	e7ac      	b.n	80118b0 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 8011956:	2001      	movs	r0, #1
}
 8011958:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801195a:	f240 71ca 	movw	r1, #1994	; 0x7ca
 801195e:	4806      	ldr	r0, [pc, #24]	; (8011978 <HAL_TIM_IC_Init+0x198>)
 8011960:	f7f3 ff86 	bl	8005870 <assert_failed>
 8011964:	e799      	b.n	801189a <HAL_TIM_IC_Init+0xba>
 8011966:	bf00      	nop
 8011968:	40010000 	.word	0x40010000
 801196c:	40000800 	.word	0x40000800
 8011970:	40000400 	.word	0x40000400
 8011974:	40002000 	.word	0x40002000
 8011978:	0802e100 	.word	0x0802e100

0801197c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801197c:	6a03      	ldr	r3, [r0, #32]
 801197e:	f023 0310 	bic.w	r3, r3, #16
{
 8011982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011986:	6203      	str	r3, [r0, #32]
{
 8011988:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 801198a:	6a05      	ldr	r5, [r0, #32]
{
 801198c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 801198e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011992:	4b29      	ldr	r3, [pc, #164]	; (8011a38 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8011994:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8011998:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801199a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801199c:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801199e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80119a2:	688b      	ldr	r3, [r1, #8]
 80119a4:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80119a8:	4b24      	ldr	r3, [pc, #144]	; (8011a3c <TIM_OC2_SetConfig+0xc0>)
 80119aa:	4298      	cmp	r0, r3
 80119ac:	d00b      	beq.n	80119c6 <TIM_OC2_SetConfig+0x4a>
 80119ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80119b2:	4298      	cmp	r0, r3
 80119b4:	d007      	beq.n	80119c6 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 80119b6:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80119b8:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80119bc:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80119be:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80119c0:	6225      	str	r5, [r4, #32]
}
 80119c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80119c6:	68f3      	ldr	r3, [r6, #12]
 80119c8:	f033 0208 	bics.w	r2, r3, #8
 80119cc:	d123      	bne.n	8011a16 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80119ce:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80119d2:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80119d6:	69b3      	ldr	r3, [r6, #24]
 80119d8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 80119dc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80119e0:	d120      	bne.n	8011a24 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80119e2:	6973      	ldr	r3, [r6, #20]
 80119e4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80119e8:	d107      	bne.n	80119fa <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80119ea:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80119ee:	69b1      	ldr	r1, [r6, #24]
 80119f0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80119f4:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 80119f8:	e7dd      	b.n	80119b6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80119fa:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 80119fe:	4810      	ldr	r0, [pc, #64]	; (8011a40 <TIM_OC2_SetConfig+0xc4>)
 8011a00:	f7f3 ff36 	bl	8005870 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a04:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a08:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a0a:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a0c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011a10:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011a14:	e7cf      	b.n	80119b6 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011a16:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8011a1a:	4809      	ldr	r0, [pc, #36]	; (8011a40 <TIM_OC2_SetConfig+0xc4>)
 8011a1c:	f7f3 ff28 	bl	8005870 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a20:	68f3      	ldr	r3, [r6, #12]
 8011a22:	e7d4      	b.n	80119ce <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011a24:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8011a28:	4805      	ldr	r0, [pc, #20]	; (8011a40 <TIM_OC2_SetConfig+0xc4>)
 8011a2a:	f7f3 ff21 	bl	8005870 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011a2e:	6973      	ldr	r3, [r6, #20]
 8011a30:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011a34:	d0d9      	beq.n	80119ea <TIM_OC2_SetConfig+0x6e>
 8011a36:	e7e0      	b.n	80119fa <TIM_OC2_SetConfig+0x7e>
 8011a38:	feff8cff 	.word	0xfeff8cff
 8011a3c:	40010000 	.word	0x40010000
 8011a40:	0802e100 	.word	0x0802e100

08011a44 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011a44:	2a14      	cmp	r2, #20
{
 8011a46:	b570      	push	{r4, r5, r6, lr}
 8011a48:	4614      	mov	r4, r2
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011a4e:	d937      	bls.n	8011ac0 <HAL_TIM_OC_ConfigChannel+0x7c>
 8011a50:	2a3c      	cmp	r2, #60	; 0x3c
 8011a52:	d139      	bne.n	8011ac8 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011a54:	6833      	ldr	r3, [r6, #0]
 8011a56:	f023 0210 	bic.w	r2, r3, #16
 8011a5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011a5e:	2a40      	cmp	r2, #64	; 0x40
 8011a60:	bf18      	it	ne
 8011a62:	2b00      	cmpne	r3, #0
 8011a64:	d003      	beq.n	8011a6e <HAL_TIM_OC_ConfigChannel+0x2a>
 8011a66:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011a6a:	f040 8138 	bne.w	8011cde <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011a6e:	68b3      	ldr	r3, [r6, #8]
 8011a70:	f033 0302 	bics.w	r3, r3, #2
 8011a74:	d12e      	bne.n	8011ad4 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8011a76:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d033      	beq.n	8011ae6 <HAL_TIM_OC_ConfigChannel+0xa2>
 8011a7e:	2301      	movs	r3, #1
 8011a80:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011a84:	2c14      	cmp	r4, #20
 8011a86:	d816      	bhi.n	8011ab6 <HAL_TIM_OC_ConfigChannel+0x72>
 8011a88:	e8df f014 	tbh	[pc, r4, lsl #1]
 8011a8c:	0015002f 	.word	0x0015002f
 8011a90:	00150015 	.word	0x00150015
 8011a94:	00150080 	.word	0x00150080
 8011a98:	00150015 	.word	0x00150015
 8011a9c:	001500b5 	.word	0x001500b5
 8011aa0:	00150015 	.word	0x00150015
 8011aa4:	001500db 	.word	0x001500db
 8011aa8:	00150015 	.word	0x00150015
 8011aac:	00150101 	.word	0x00150101
 8011ab0:	00150015 	.word	0x00150015
 8011ab4:	010e      	.short	0x010e
 8011ab6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011ab8:	2300      	movs	r3, #0
 8011aba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011abe:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8011ac0:	4b98      	ldr	r3, [pc, #608]	; (8011d24 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8011ac2:	40d3      	lsrs	r3, r2
 8011ac4:	07db      	lsls	r3, r3, #31
 8011ac6:	d4c5      	bmi.n	8011a54 <HAL_TIM_OC_ConfigChannel+0x10>
 8011ac8:	f640 71df 	movw	r1, #4063	; 0xfdf
 8011acc:	4896      	ldr	r0, [pc, #600]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ace:	f7f3 fecf 	bl	8005870 <assert_failed>
 8011ad2:	e7bf      	b.n	8011a54 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011ad4:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8011ad8:	4893      	ldr	r0, [pc, #588]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ada:	f7f3 fec9 	bl	8005870 <assert_failed>
  __HAL_LOCK(htim);
 8011ade:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d1cb      	bne.n	8011a7e <HAL_TIM_OC_ConfigChannel+0x3a>
 8011ae6:	2002      	movs	r0, #2
}
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011aea:	6828      	ldr	r0, [r5, #0]
 8011aec:	4b8f      	ldr	r3, [pc, #572]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011aee:	4a90      	ldr	r2, [pc, #576]	; (8011d30 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011af0:	4298      	cmp	r0, r3
 8011af2:	bf18      	it	ne
 8011af4:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011af8:	bf14      	ite	ne
 8011afa:	2301      	movne	r3, #1
 8011afc:	2300      	moveq	r3, #0
 8011afe:	4290      	cmp	r0, r2
 8011b00:	bf0c      	ite	eq
 8011b02:	2300      	moveq	r3, #0
 8011b04:	f003 0301 	andne.w	r3, r3, #1
 8011b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b0c:	4290      	cmp	r0, r2
 8011b0e:	bf0c      	ite	eq
 8011b10:	2300      	moveq	r3, #0
 8011b12:	f003 0301 	andne.w	r3, r3, #1
 8011b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b1a:	4290      	cmp	r0, r2
 8011b1c:	bf0c      	ite	eq
 8011b1e:	2300      	moveq	r3, #0
 8011b20:	f003 0301 	andne.w	r3, r3, #1
 8011b24:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011b28:	4290      	cmp	r0, r2
 8011b2a:	bf0c      	ite	eq
 8011b2c:	2300      	moveq	r3, #0
 8011b2e:	f003 0301 	andne.w	r3, r3, #1
 8011b32:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011b36:	4290      	cmp	r0, r2
 8011b38:	bf0c      	ite	eq
 8011b3a:	2300      	moveq	r3, #0
 8011b3c:	f003 0301 	andne.w	r3, r3, #1
 8011b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b44:	4290      	cmp	r0, r2
 8011b46:	bf0c      	ite	eq
 8011b48:	2300      	moveq	r3, #0
 8011b4a:	f003 0301 	andne.w	r3, r3, #1
 8011b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b52:	4290      	cmp	r0, r2
 8011b54:	bf0c      	ite	eq
 8011b56:	2300      	moveq	r3, #0
 8011b58:	f003 0301 	andne.w	r3, r3, #1
 8011b5c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011b60:	4290      	cmp	r0, r2
 8011b62:	bf0c      	ite	eq
 8011b64:	2300      	moveq	r3, #0
 8011b66:	f003 0301 	andne.w	r3, r3, #1
 8011b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b6e:	4290      	cmp	r0, r2
 8011b70:	bf0c      	ite	eq
 8011b72:	2300      	moveq	r3, #0
 8011b74:	f003 0301 	andne.w	r3, r3, #1
 8011b78:	b11b      	cbz	r3, 8011b82 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011b7a:	4b6e      	ldr	r3, [pc, #440]	; (8011d34 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8011b7c:	4298      	cmp	r0, r3
 8011b7e:	f040 80c9 	bne.w	8011d14 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011b82:	4631      	mov	r1, r6
 8011b84:	f7fe f9ac 	bl	800fee0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011b88:	2000      	movs	r0, #0
      break;
 8011b8a:	e795      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011b8c:	6828      	ldr	r0, [r5, #0]
 8011b8e:	4b67      	ldr	r3, [pc, #412]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011b90:	4a67      	ldr	r2, [pc, #412]	; (8011d30 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011b92:	4298      	cmp	r0, r3
 8011b94:	bf18      	it	ne
 8011b96:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011b9a:	bf14      	ite	ne
 8011b9c:	2301      	movne	r3, #1
 8011b9e:	2300      	moveq	r3, #0
 8011ba0:	4290      	cmp	r0, r2
 8011ba2:	bf0c      	ite	eq
 8011ba4:	2300      	moveq	r3, #0
 8011ba6:	f003 0301 	andne.w	r3, r3, #1
 8011baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011bae:	4290      	cmp	r0, r2
 8011bb0:	bf0c      	ite	eq
 8011bb2:	2300      	moveq	r3, #0
 8011bb4:	f003 0301 	andne.w	r3, r3, #1
 8011bb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011bbc:	4290      	cmp	r0, r2
 8011bbe:	bf0c      	ite	eq
 8011bc0:	2300      	moveq	r3, #0
 8011bc2:	f003 0301 	andne.w	r3, r3, #1
 8011bc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011bca:	4290      	cmp	r0, r2
 8011bcc:	bf0c      	ite	eq
 8011bce:	2300      	moveq	r3, #0
 8011bd0:	f003 0301 	andne.w	r3, r3, #1
 8011bd4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011bd8:	4290      	cmp	r0, r2
 8011bda:	bf0c      	ite	eq
 8011bdc:	2300      	moveq	r3, #0
 8011bde:	f003 0301 	andne.w	r3, r3, #1
 8011be2:	b11b      	cbz	r3, 8011bec <HAL_TIM_OC_ConfigChannel+0x1a8>
 8011be4:	4b54      	ldr	r3, [pc, #336]	; (8011d38 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8011be6:	4298      	cmp	r0, r3
 8011be8:	f040 808d 	bne.w	8011d06 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011bec:	4631      	mov	r1, r6
 8011bee:	f7ff fec5 	bl	801197c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011bf2:	2000      	movs	r0, #0
      break;
 8011bf4:	e760      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011bf6:	6828      	ldr	r0, [r5, #0]
 8011bf8:	4b4c      	ldr	r3, [pc, #304]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011bfa:	4a4d      	ldr	r2, [pc, #308]	; (8011d30 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011bfc:	4298      	cmp	r0, r3
 8011bfe:	bf18      	it	ne
 8011c00:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011c04:	bf14      	ite	ne
 8011c06:	2301      	movne	r3, #1
 8011c08:	2300      	moveq	r3, #0
 8011c0a:	4290      	cmp	r0, r2
 8011c0c:	bf0c      	ite	eq
 8011c0e:	2300      	moveq	r3, #0
 8011c10:	f003 0301 	andne.w	r3, r3, #1
 8011c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011c18:	4290      	cmp	r0, r2
 8011c1a:	bf0c      	ite	eq
 8011c1c:	2300      	moveq	r3, #0
 8011c1e:	f003 0301 	andne.w	r3, r3, #1
 8011c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011c26:	4290      	cmp	r0, r2
 8011c28:	bf0c      	ite	eq
 8011c2a:	2300      	moveq	r3, #0
 8011c2c:	f003 0301 	andne.w	r3, r3, #1
 8011c30:	b113      	cbz	r3, 8011c38 <HAL_TIM_OC_ConfigChannel+0x1f4>
 8011c32:	4b42      	ldr	r3, [pc, #264]	; (8011d3c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011c34:	4298      	cmp	r0, r3
 8011c36:	d15f      	bne.n	8011cf8 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011c38:	4631      	mov	r1, r6
 8011c3a:	f7fe f9b1 	bl	800ffa0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011c3e:	2000      	movs	r0, #0
      break;
 8011c40:	e73a      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011c42:	6828      	ldr	r0, [r5, #0]
 8011c44:	4b39      	ldr	r3, [pc, #228]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011c46:	4a3a      	ldr	r2, [pc, #232]	; (8011d30 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011c48:	4298      	cmp	r0, r3
 8011c4a:	bf18      	it	ne
 8011c4c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011c50:	bf14      	ite	ne
 8011c52:	2301      	movne	r3, #1
 8011c54:	2300      	moveq	r3, #0
 8011c56:	4290      	cmp	r0, r2
 8011c58:	bf0c      	ite	eq
 8011c5a:	2300      	moveq	r3, #0
 8011c5c:	f003 0301 	andne.w	r3, r3, #1
 8011c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011c64:	4290      	cmp	r0, r2
 8011c66:	bf0c      	ite	eq
 8011c68:	2300      	moveq	r3, #0
 8011c6a:	f003 0301 	andne.w	r3, r3, #1
 8011c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011c72:	4290      	cmp	r0, r2
 8011c74:	bf0c      	ite	eq
 8011c76:	2300      	moveq	r3, #0
 8011c78:	f003 0301 	andne.w	r3, r3, #1
 8011c7c:	b113      	cbz	r3, 8011c84 <HAL_TIM_OC_ConfigChannel+0x240>
 8011c7e:	4b2f      	ldr	r3, [pc, #188]	; (8011d3c <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011c80:	4298      	cmp	r0, r3
 8011c82:	d132      	bne.n	8011cea <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011c84:	4631      	mov	r1, r6
 8011c86:	f7fe f9ef 	bl	8010068 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011c8a:	2000      	movs	r0, #0
      break;
 8011c8c:	e714      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011c8e:	6828      	ldr	r0, [r5, #0]
 8011c90:	4b26      	ldr	r3, [pc, #152]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011c92:	4298      	cmp	r0, r3
 8011c94:	d003      	beq.n	8011c9e <HAL_TIM_OC_ConfigChannel+0x25a>
 8011c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c9a:	4298      	cmp	r0, r3
 8011c9c:	d118      	bne.n	8011cd0 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011c9e:	4631      	mov	r1, r6
 8011ca0:	f7fe f8ca 	bl	800fe38 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011ca4:	2000      	movs	r0, #0
      break;
 8011ca6:	e707      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011ca8:	6828      	ldr	r0, [r5, #0]
 8011caa:	4b20      	ldr	r3, [pc, #128]	; (8011d2c <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011cac:	4298      	cmp	r0, r3
 8011cae:	d003      	beq.n	8011cb8 <HAL_TIM_OC_ConfigChannel+0x274>
 8011cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cb4:	4298      	cmp	r0, r3
 8011cb6:	d104      	bne.n	8011cc2 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011cb8:	4631      	mov	r1, r6
 8011cba:	f7fe f8e7 	bl	800fe8c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011cbe:	2000      	movs	r0, #0
      break;
 8011cc0:	e6fa      	b.n	8011ab8 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011cc2:	4819      	ldr	r0, [pc, #100]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011cc4:	f241 011d 	movw	r1, #4125	; 0x101d
 8011cc8:	f7f3 fdd2 	bl	8005870 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ccc:	6828      	ldr	r0, [r5, #0]
 8011cce:	e7f3      	b.n	8011cb8 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011cd0:	4815      	ldr	r0, [pc, #84]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011cd2:	f241 0113 	movw	r1, #4115	; 0x1013
 8011cd6:	f7f3 fdcb 	bl	8005870 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011cda:	6828      	ldr	r0, [r5, #0]
 8011cdc:	e7df      	b.n	8011c9e <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011cde:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8011ce2:	4811      	ldr	r0, [pc, #68]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011ce4:	f7f3 fdc4 	bl	8005870 <assert_failed>
 8011ce8:	e6c1      	b.n	8011a6e <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011cea:	480f      	ldr	r0, [pc, #60]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011cec:	f241 0109 	movw	r1, #4105	; 0x1009
 8011cf0:	f7f3 fdbe 	bl	8005870 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011cf4:	6828      	ldr	r0, [r5, #0]
 8011cf6:	e7c5      	b.n	8011c84 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011cf8:	480b      	ldr	r0, [pc, #44]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011cfa:	f640 71ff 	movw	r1, #4095	; 0xfff
 8011cfe:	f7f3 fdb7 	bl	8005870 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011d02:	6828      	ldr	r0, [r5, #0]
 8011d04:	e798      	b.n	8011c38 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011d06:	4808      	ldr	r0, [pc, #32]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011d08:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011d0c:	f7f3 fdb0 	bl	8005870 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011d10:	6828      	ldr	r0, [r5, #0]
 8011d12:	e76b      	b.n	8011bec <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011d14:	4804      	ldr	r0, [pc, #16]	; (8011d28 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011d16:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8011d1a:	f7f3 fda9 	bl	8005870 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d1e:	6828      	ldr	r0, [r5, #0]
 8011d20:	e72f      	b.n	8011b82 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011d22:	bf00      	nop
 8011d24:	00111111 	.word	0x00111111
 8011d28:	0802e100 	.word	0x0802e100
 8011d2c:	40010000 	.word	0x40010000
 8011d30:	40000400 	.word	0x40000400
 8011d34:	40002000 	.word	0x40002000
 8011d38:	40001800 	.word	0x40001800
 8011d3c:	40010400 	.word	0x40010400

08011d40 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011d40:	2a14      	cmp	r2, #20
{
 8011d42:	b570      	push	{r4, r5, r6, lr}
 8011d44:	4616      	mov	r6, r2
 8011d46:	4605      	mov	r5, r0
 8011d48:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011d4a:	d933      	bls.n	8011db4 <HAL_TIM_PWM_ConfigChannel+0x74>
 8011d4c:	2a3c      	cmp	r2, #60	; 0x3c
 8011d4e:	d135      	bne.n	8011dbc <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011d50:	6822      	ldr	r2, [r4, #0]
 8011d52:	4b90      	ldr	r3, [pc, #576]	; (8011f94 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8011d54:	4013      	ands	r3, r2
 8011d56:	2b60      	cmp	r3, #96	; 0x60
 8011d58:	d004      	beq.n	8011d64 <HAL_TIM_PWM_ConfigChannel+0x24>
 8011d5a:	f022 0210 	bic.w	r2, r2, #16
 8011d5e:	4b8e      	ldr	r3, [pc, #568]	; (8011f98 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d147      	bne.n	8011df4 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011d64:	68a3      	ldr	r3, [r4, #8]
 8011d66:	f033 0302 	bics.w	r3, r3, #2
 8011d6a:	d13d      	bne.n	8011de8 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011d6c:	6923      	ldr	r3, [r4, #16]
 8011d6e:	f033 0304 	bics.w	r3, r3, #4
 8011d72:	d12e      	bne.n	8011dd2 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8011d74:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d033      	beq.n	8011de4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011d82:	2e14      	cmp	r6, #20
 8011d84:	d820      	bhi.n	8011dc8 <HAL_TIM_PWM_ConfigChannel+0x88>
 8011d86:	e8df f016 	tbh	[pc, r6, lsl #1]
 8011d8a:	00a7      	.short	0x00a7
 8011d8c:	001f001f 	.word	0x001f001f
 8011d90:	0115001f 	.word	0x0115001f
 8011d94:	001f001f 	.word	0x001f001f
 8011d98:	0157001f 	.word	0x0157001f
 8011d9c:	001f001f 	.word	0x001f001f
 8011da0:	0057001f 	.word	0x0057001f
 8011da4:	001f001f 	.word	0x001f001f
 8011da8:	008c001f 	.word	0x008c001f
 8011dac:	001f001f 	.word	0x001f001f
 8011db0:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8011db4:	4b79      	ldr	r3, [pc, #484]	; (8011f9c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8011db6:	40d3      	lsrs	r3, r2
 8011db8:	07db      	lsls	r3, r3, #31
 8011dba:	d4c9      	bmi.n	8011d50 <HAL_TIM_PWM_ConfigChannel+0x10>
 8011dbc:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8011dc0:	4877      	ldr	r0, [pc, #476]	; (8011fa0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011dc2:	f7f3 fd55 	bl	8005870 <assert_failed>
 8011dc6:	e7c3      	b.n	8011d50 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8011dc8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011dd0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011dd2:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8011dd6:	4872      	ldr	r0, [pc, #456]	; (8011fa0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011dd8:	f7f3 fd4a 	bl	8005870 <assert_failed>
  __HAL_LOCK(htim);
 8011ddc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d1cb      	bne.n	8011d7c <HAL_TIM_PWM_ConfigChannel+0x3c>
 8011de4:	2002      	movs	r0, #2
}
 8011de6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011de8:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8011dec:	486c      	ldr	r0, [pc, #432]	; (8011fa0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011dee:	f7f3 fd3f 	bl	8005870 <assert_failed>
 8011df2:	e7bb      	b.n	8011d6c <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011df4:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8011df8:	4869      	ldr	r0, [pc, #420]	; (8011fa0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8011dfa:	f7f3 fd39 	bl	8005870 <assert_failed>
 8011dfe:	e7b1      	b.n	8011d64 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011e00:	6828      	ldr	r0, [r5, #0]
 8011e02:	4b68      	ldr	r3, [pc, #416]	; (8011fa4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011e04:	4298      	cmp	r0, r3
 8011e06:	d004      	beq.n	8011e12 <HAL_TIM_PWM_ConfigChannel+0xd2>
 8011e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e0c:	4298      	cmp	r0, r3
 8011e0e:	f040 814d 	bne.w	80120ac <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011e12:	4621      	mov	r1, r4
 8011e14:	f7fe f83a 	bl	800fe8c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011e18:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011e1a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011e1e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011e22:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011e24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011e26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011e2a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8011e32:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011e34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011e36:	e7c8      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011e38:	6828      	ldr	r0, [r5, #0]
 8011e3a:	4b5a      	ldr	r3, [pc, #360]	; (8011fa4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011e3c:	4a5a      	ldr	r2, [pc, #360]	; (8011fa8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8011e3e:	4298      	cmp	r0, r3
 8011e40:	bf18      	it	ne
 8011e42:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e46:	bf14      	ite	ne
 8011e48:	2301      	movne	r3, #1
 8011e4a:	2300      	moveq	r3, #0
 8011e4c:	4290      	cmp	r0, r2
 8011e4e:	bf0c      	ite	eq
 8011e50:	2300      	moveq	r3, #0
 8011e52:	f003 0301 	andne.w	r3, r3, #1
 8011e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e5a:	4290      	cmp	r0, r2
 8011e5c:	bf0c      	ite	eq
 8011e5e:	2300      	moveq	r3, #0
 8011e60:	f003 0301 	andne.w	r3, r3, #1
 8011e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e68:	4290      	cmp	r0, r2
 8011e6a:	bf0c      	ite	eq
 8011e6c:	2300      	moveq	r3, #0
 8011e6e:	f003 0301 	andne.w	r3, r3, #1
 8011e72:	b11b      	cbz	r3, 8011e7c <HAL_TIM_PWM_ConfigChannel+0x13c>
 8011e74:	4b4d      	ldr	r3, [pc, #308]	; (8011fac <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8011e76:	4298      	cmp	r0, r3
 8011e78:	f040 811f 	bne.w	80120ba <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	f7fe f8f3 	bl	8010068 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e82:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e84:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e86:	69d9      	ldr	r1, [r3, #28]
 8011e88:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011e8c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e8e:	69d9      	ldr	r1, [r3, #28]
 8011e90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011e94:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e96:	69da      	ldr	r2, [r3, #28]
 8011e98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8011e9c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e9e:	61da      	str	r2, [r3, #28]
      break;
 8011ea0:	e793      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011ea2:	6828      	ldr	r0, [r5, #0]
 8011ea4:	4b3f      	ldr	r3, [pc, #252]	; (8011fa4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011ea6:	4298      	cmp	r0, r3
 8011ea8:	d004      	beq.n	8011eb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8011eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011eae:	4298      	cmp	r0, r3
 8011eb0:	f040 80f5 	bne.w	801209e <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011eb4:	4621      	mov	r1, r4
 8011eb6:	f7fd ffbf 	bl	800fe38 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011eba:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ebc:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011ebe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ec0:	f041 0108 	orr.w	r1, r1, #8
 8011ec4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011ec6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ec8:	f021 0104 	bic.w	r1, r1, #4
 8011ecc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ed0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011ed2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ed4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011ed6:	e778      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011ed8:	6828      	ldr	r0, [r5, #0]
 8011eda:	4b32      	ldr	r3, [pc, #200]	; (8011fa4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8011edc:	4a32      	ldr	r2, [pc, #200]	; (8011fa8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8011ede:	4298      	cmp	r0, r3
 8011ee0:	bf18      	it	ne
 8011ee2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011ee6:	bf14      	ite	ne
 8011ee8:	2301      	movne	r3, #1
 8011eea:	2300      	moveq	r3, #0
 8011eec:	4290      	cmp	r0, r2
 8011eee:	bf0c      	ite	eq
 8011ef0:	2300      	moveq	r3, #0
 8011ef2:	f003 0301 	andne.w	r3, r3, #1
 8011ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011efa:	4290      	cmp	r0, r2
 8011efc:	bf0c      	ite	eq
 8011efe:	2300      	moveq	r3, #0
 8011f00:	f003 0301 	andne.w	r3, r3, #1
 8011f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f08:	4290      	cmp	r0, r2
 8011f0a:	bf0c      	ite	eq
 8011f0c:	2300      	moveq	r3, #0
 8011f0e:	f003 0301 	andne.w	r3, r3, #1
 8011f12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011f16:	4290      	cmp	r0, r2
 8011f18:	bf0c      	ite	eq
 8011f1a:	2300      	moveq	r3, #0
 8011f1c:	f003 0301 	andne.w	r3, r3, #1
 8011f20:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011f24:	4290      	cmp	r0, r2
 8011f26:	bf0c      	ite	eq
 8011f28:	2300      	moveq	r3, #0
 8011f2a:	f003 0301 	andne.w	r3, r3, #1
 8011f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f32:	4290      	cmp	r0, r2
 8011f34:	bf0c      	ite	eq
 8011f36:	2300      	moveq	r3, #0
 8011f38:	f003 0301 	andne.w	r3, r3, #1
 8011f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f40:	4290      	cmp	r0, r2
 8011f42:	bf0c      	ite	eq
 8011f44:	2300      	moveq	r3, #0
 8011f46:	f003 0301 	andne.w	r3, r3, #1
 8011f4a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011f4e:	4290      	cmp	r0, r2
 8011f50:	bf0c      	ite	eq
 8011f52:	2300      	moveq	r3, #0
 8011f54:	f003 0301 	andne.w	r3, r3, #1
 8011f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f5c:	4290      	cmp	r0, r2
 8011f5e:	bf0c      	ite	eq
 8011f60:	2300      	moveq	r3, #0
 8011f62:	f003 0301 	andne.w	r3, r3, #1
 8011f66:	b11b      	cbz	r3, 8011f70 <HAL_TIM_PWM_ConfigChannel+0x230>
 8011f68:	4b11      	ldr	r3, [pc, #68]	; (8011fb0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8011f6a:	4298      	cmp	r0, r3
 8011f6c:	f040 80ba 	bne.w	80120e4 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f70:	4621      	mov	r1, r4
 8011f72:	f7fd ffb5 	bl	800fee0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f76:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f78:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f7a:	6999      	ldr	r1, [r3, #24]
 8011f7c:	f041 0108 	orr.w	r1, r1, #8
 8011f80:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011f82:	6999      	ldr	r1, [r3, #24]
 8011f84:	f021 0104 	bic.w	r1, r1, #4
 8011f88:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f8a:	699a      	ldr	r2, [r3, #24]
 8011f8c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011f8e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f90:	619a      	str	r2, [r3, #24]
      break;
 8011f92:	e71a      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
 8011f94:	fffeffef 	.word	0xfffeffef
 8011f98:	00010040 	.word	0x00010040
 8011f9c:	00111111 	.word	0x00111111
 8011fa0:	0802e100 	.word	0x0802e100
 8011fa4:	40010000 	.word	0x40010000
 8011fa8:	40000400 	.word	0x40000400
 8011fac:	40010400 	.word	0x40010400
 8011fb0:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011fb4:	6828      	ldr	r0, [r5, #0]
 8011fb6:	4b4f      	ldr	r3, [pc, #316]	; (80120f4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8011fb8:	4a4f      	ldr	r2, [pc, #316]	; (80120f8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8011fba:	4298      	cmp	r0, r3
 8011fbc:	bf18      	it	ne
 8011fbe:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011fc2:	bf14      	ite	ne
 8011fc4:	2301      	movne	r3, #1
 8011fc6:	2300      	moveq	r3, #0
 8011fc8:	4290      	cmp	r0, r2
 8011fca:	bf0c      	ite	eq
 8011fcc:	2300      	moveq	r3, #0
 8011fce:	f003 0301 	andne.w	r3, r3, #1
 8011fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011fd6:	4290      	cmp	r0, r2
 8011fd8:	bf0c      	ite	eq
 8011fda:	2300      	moveq	r3, #0
 8011fdc:	f003 0301 	andne.w	r3, r3, #1
 8011fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011fe4:	4290      	cmp	r0, r2
 8011fe6:	bf0c      	ite	eq
 8011fe8:	2300      	moveq	r3, #0
 8011fea:	f003 0301 	andne.w	r3, r3, #1
 8011fee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011ff2:	4290      	cmp	r0, r2
 8011ff4:	bf0c      	ite	eq
 8011ff6:	2300      	moveq	r3, #0
 8011ff8:	f003 0301 	andne.w	r3, r3, #1
 8011ffc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012000:	4290      	cmp	r0, r2
 8012002:	bf0c      	ite	eq
 8012004:	2300      	moveq	r3, #0
 8012006:	f003 0301 	andne.w	r3, r3, #1
 801200a:	b113      	cbz	r3, 8012012 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 801200c:	4b3b      	ldr	r3, [pc, #236]	; (80120fc <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 801200e:	4298      	cmp	r0, r3
 8012010:	d161      	bne.n	80120d6 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012012:	4621      	mov	r1, r4
 8012014:	f7ff fcb2 	bl	801197c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012018:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801201a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801201c:	6999      	ldr	r1, [r3, #24]
 801201e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8012022:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012024:	6999      	ldr	r1, [r3, #24]
 8012026:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801202a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801202c:	699a      	ldr	r2, [r3, #24]
 801202e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8012032:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012034:	619a      	str	r2, [r3, #24]
      break;
 8012036:	e6c8      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012038:	6828      	ldr	r0, [r5, #0]
 801203a:	4b2e      	ldr	r3, [pc, #184]	; (80120f4 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 801203c:	4a2e      	ldr	r2, [pc, #184]	; (80120f8 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 801203e:	4298      	cmp	r0, r3
 8012040:	bf18      	it	ne
 8012042:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012046:	bf14      	ite	ne
 8012048:	2301      	movne	r3, #1
 801204a:	2300      	moveq	r3, #0
 801204c:	4290      	cmp	r0, r2
 801204e:	bf0c      	ite	eq
 8012050:	2300      	moveq	r3, #0
 8012052:	f003 0301 	andne.w	r3, r3, #1
 8012056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801205a:	4290      	cmp	r0, r2
 801205c:	bf0c      	ite	eq
 801205e:	2300      	moveq	r3, #0
 8012060:	f003 0301 	andne.w	r3, r3, #1
 8012064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012068:	4290      	cmp	r0, r2
 801206a:	bf0c      	ite	eq
 801206c:	2300      	moveq	r3, #0
 801206e:	f003 0301 	andne.w	r3, r3, #1
 8012072:	b113      	cbz	r3, 801207a <HAL_TIM_PWM_ConfigChannel+0x33a>
 8012074:	4b22      	ldr	r3, [pc, #136]	; (8012100 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8012076:	4298      	cmp	r0, r3
 8012078:	d126      	bne.n	80120c8 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801207a:	4621      	mov	r1, r4
 801207c:	f7fd ff90 	bl	800ffa0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012080:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012082:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012084:	69d9      	ldr	r1, [r3, #28]
 8012086:	f041 0108 	orr.w	r1, r1, #8
 801208a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801208c:	69d9      	ldr	r1, [r3, #28]
 801208e:	f021 0104 	bic.w	r1, r1, #4
 8012092:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012094:	69da      	ldr	r2, [r3, #28]
 8012096:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012098:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801209a:	61da      	str	r2, [r3, #28]
      break;
 801209c:	e695      	b.n	8011dca <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801209e:	4819      	ldr	r0, [pc, #100]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120a0:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80120a4:	f7f3 fbe4 	bl	8005870 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80120a8:	6828      	ldr	r0, [r5, #0]
 80120aa:	e703      	b.n	8011eb4 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80120ac:	4815      	ldr	r0, [pc, #84]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120ae:	f241 1109 	movw	r1, #4361	; 0x1109
 80120b2:	f7f3 fbdd 	bl	8005870 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80120b6:	6828      	ldr	r0, [r5, #0]
 80120b8:	e6ab      	b.n	8011e12 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80120ba:	4812      	ldr	r0, [pc, #72]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120bc:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80120c0:	f7f3 fbd6 	bl	8005870 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120c4:	6828      	ldr	r0, [r5, #0]
 80120c6:	e6d9      	b.n	8011e7c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80120c8:	480e      	ldr	r0, [pc, #56]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120ca:	f241 01d6 	movw	r1, #4310	; 0x10d6
 80120ce:	f7f3 fbcf 	bl	8005870 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80120d2:	6828      	ldr	r0, [r5, #0]
 80120d4:	e7d1      	b.n	801207a <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80120d6:	480b      	ldr	r0, [pc, #44]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120d8:	f241 01c5 	movw	r1, #4293	; 0x10c5
 80120dc:	f7f3 fbc8 	bl	8005870 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80120e0:	6828      	ldr	r0, [r5, #0]
 80120e2:	e796      	b.n	8012012 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80120e4:	4807      	ldr	r0, [pc, #28]	; (8012104 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80120e6:	f241 01b4 	movw	r1, #4276	; 0x10b4
 80120ea:	f7f3 fbc1 	bl	8005870 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80120ee:	6828      	ldr	r0, [r5, #0]
 80120f0:	e73e      	b.n	8011f70 <HAL_TIM_PWM_ConfigChannel+0x230>
 80120f2:	bf00      	nop
 80120f4:	40010000 	.word	0x40010000
 80120f8:	40000400 	.word	0x40000400
 80120fc:	40001800 	.word	0x40001800
 8012100:	40010400 	.word	0x40010400
 8012104:	0802e100 	.word	0x0802e100

08012108 <TIM_TI1_SetConfig>:
{
 8012108:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801210a:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801210c:	4e1b      	ldr	r6, [pc, #108]	; (801217c <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801210e:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012112:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012114:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012116:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8012118:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801211a:	d01d      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 801211c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012120:	d01a      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 8012122:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8012126:	42b0      	cmp	r0, r6
 8012128:	d016      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 801212a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801212e:	42b0      	cmp	r0, r6
 8012130:	d012      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 8012132:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012136:	42b0      	cmp	r0, r6
 8012138:	d00e      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 801213a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 801213e:	42b0      	cmp	r0, r6
 8012140:	d00a      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 8012142:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8012146:	42b0      	cmp	r0, r6
 8012148:	d006      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
 801214a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 801214e:	42b0      	cmp	r0, r6
 8012150:	d002      	beq.n	8012158 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012152:	f044 0201 	orr.w	r2, r4, #1
 8012156:	e002      	b.n	801215e <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012158:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 801215c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801215e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012160:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012164:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012168:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801216c:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801216e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012170:	4313      	orrs	r3, r2
}
 8012172:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8012174:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8012176:	6201      	str	r1, [r0, #32]
}
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop
 801217c:	40010000 	.word	0x40010000

08012180 <HAL_TIM_IC_ConfigChannel>:
{
 8012180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012182:	4ba8      	ldr	r3, [pc, #672]	; (8012424 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8012184:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012186:	6801      	ldr	r1, [r0, #0]
{
 8012188:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801218a:	4fa7      	ldr	r7, [pc, #668]	; (8012428 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 801218c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801218e:	4299      	cmp	r1, r3
 8012190:	bf18      	it	ne
 8012192:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8012196:	4aa5      	ldr	r2, [pc, #660]	; (801242c <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8012198:	bf14      	ite	ne
 801219a:	2301      	movne	r3, #1
 801219c:	2300      	moveq	r3, #0
 801219e:	42b9      	cmp	r1, r7
 80121a0:	bf0c      	ite	eq
 80121a2:	2300      	moveq	r3, #0
 80121a4:	f003 0301 	andne.w	r3, r3, #1
 80121a8:	4291      	cmp	r1, r2
 80121aa:	bf0c      	ite	eq
 80121ac:	2300      	moveq	r3, #0
 80121ae:	f003 0301 	andne.w	r3, r3, #1
 80121b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121b6:	4291      	cmp	r1, r2
 80121b8:	bf0c      	ite	eq
 80121ba:	2300      	moveq	r3, #0
 80121bc:	f003 0301 	andne.w	r3, r3, #1
 80121c0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80121c4:	4291      	cmp	r1, r2
 80121c6:	bf0c      	ite	eq
 80121c8:	2300      	moveq	r3, #0
 80121ca:	f003 0301 	andne.w	r3, r3, #1
 80121ce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80121d2:	4291      	cmp	r1, r2
 80121d4:	bf0c      	ite	eq
 80121d6:	2300      	moveq	r3, #0
 80121d8:	f003 0301 	andne.w	r3, r3, #1
 80121dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121e0:	4291      	cmp	r1, r2
 80121e2:	bf0c      	ite	eq
 80121e4:	2300      	moveq	r3, #0
 80121e6:	f003 0301 	andne.w	r3, r3, #1
 80121ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121ee:	4291      	cmp	r1, r2
 80121f0:	bf0c      	ite	eq
 80121f2:	2300      	moveq	r3, #0
 80121f4:	f003 0301 	andne.w	r3, r3, #1
 80121f8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80121fc:	4291      	cmp	r1, r2
 80121fe:	bf0c      	ite	eq
 8012200:	2300      	moveq	r3, #0
 8012202:	f003 0301 	andne.w	r3, r3, #1
 8012206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801220a:	4291      	cmp	r1, r2
 801220c:	bf0c      	ite	eq
 801220e:	2300      	moveq	r3, #0
 8012210:	f003 0301 	andne.w	r3, r3, #1
 8012214:	b11b      	cbz	r3, 801221e <HAL_TIM_IC_ConfigChannel+0x9e>
 8012216:	4b86      	ldr	r3, [pc, #536]	; (8012430 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8012218:	4299      	cmp	r1, r3
 801221a:	f040 8158 	bne.w	80124ce <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	f033 0202 	bics.w	r2, r3, #2
 8012224:	d001      	beq.n	801222a <HAL_TIM_IC_ConfigChannel+0xaa>
 8012226:	2b0a      	cmp	r3, #10
 8012228:	d11e      	bne.n	8012268 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801222a:	6863      	ldr	r3, [r4, #4]
 801222c:	3b01      	subs	r3, #1
 801222e:	2b02      	cmp	r3, #2
 8012230:	d823      	bhi.n	801227a <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	f033 030c 	bics.w	r3, r3, #12
 8012238:	d128      	bne.n	801228c <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 801223a:	68e3      	ldr	r3, [r4, #12]
 801223c:	2b0f      	cmp	r3, #15
 801223e:	d82d      	bhi.n	801229c <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8012240:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8012244:	2b01      	cmp	r3, #1
 8012246:	d032      	beq.n	80122ae <HAL_TIM_IC_ConfigChannel+0x12e>
 8012248:	2001      	movs	r0, #1
 801224a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 801224e:	b386      	cbz	r6, 80122b2 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8012250:	2e04      	cmp	r6, #4
 8012252:	d042      	beq.n	80122da <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8012254:	2e08      	cmp	r6, #8
 8012256:	f000 80f3 	beq.w	8012440 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 801225a:	2e0c      	cmp	r6, #12
 801225c:	f000 8095 	beq.w	801238a <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8012260:	2300      	movs	r3, #0
 8012262:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8012266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8012268:	f241 0141 	movw	r1, #4161	; 0x1041
 801226c:	4871      	ldr	r0, [pc, #452]	; (8012434 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801226e:	f7f3 faff 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8012272:	6863      	ldr	r3, [r4, #4]
 8012274:	3b01      	subs	r3, #1
 8012276:	2b02      	cmp	r3, #2
 8012278:	d9db      	bls.n	8012232 <HAL_TIM_IC_ConfigChannel+0xb2>
 801227a:	f241 0142 	movw	r1, #4162	; 0x1042
 801227e:	486d      	ldr	r0, [pc, #436]	; (8012434 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012280:	f7f3 faf6 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8012284:	68a3      	ldr	r3, [r4, #8]
 8012286:	f033 030c 	bics.w	r3, r3, #12
 801228a:	d0d6      	beq.n	801223a <HAL_TIM_IC_ConfigChannel+0xba>
 801228c:	f241 0143 	movw	r1, #4163	; 0x1043
 8012290:	4868      	ldr	r0, [pc, #416]	; (8012434 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012292:	f7f3 faed 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8012296:	68e3      	ldr	r3, [r4, #12]
 8012298:	2b0f      	cmp	r3, #15
 801229a:	d9d1      	bls.n	8012240 <HAL_TIM_IC_ConfigChannel+0xc0>
 801229c:	f241 0144 	movw	r1, #4164	; 0x1044
 80122a0:	4864      	ldr	r0, [pc, #400]	; (8012434 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80122a2:	f7f3 fae5 	bl	8005870 <assert_failed>
  __HAL_LOCK(htim);
 80122a6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d1cc      	bne.n	8012248 <HAL_TIM_IC_ConfigChannel+0xc8>
 80122ae:	2002      	movs	r0, #2
}
 80122b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80122b2:	e9d4 1200 	ldrd	r1, r2, [r4]
 80122b6:	68e3      	ldr	r3, [r4, #12]
 80122b8:	6828      	ldr	r0, [r5, #0]
 80122ba:	f7ff ff25 	bl	8012108 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80122be:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80122c0:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80122c2:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80122c4:	6999      	ldr	r1, [r3, #24]
 80122c6:	f021 010c 	bic.w	r1, r1, #12
 80122ca:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80122cc:	699a      	ldr	r2, [r3, #24]
 80122ce:	4322      	orrs	r2, r4
 80122d0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80122d2:	2300      	movs	r3, #0
 80122d4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80122d8:	e7c5      	b.n	8012266 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80122da:	682a      	ldr	r2, [r5, #0]
 80122dc:	4b51      	ldr	r3, [pc, #324]	; (8012424 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80122de:	4952      	ldr	r1, [pc, #328]	; (8012428 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80122e0:	429a      	cmp	r2, r3
 80122e2:	bf18      	it	ne
 80122e4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80122e8:	bf14      	ite	ne
 80122ea:	2301      	movne	r3, #1
 80122ec:	2300      	moveq	r3, #0
 80122ee:	428a      	cmp	r2, r1
 80122f0:	bf0c      	ite	eq
 80122f2:	2300      	moveq	r3, #0
 80122f4:	f003 0301 	andne.w	r3, r3, #1
 80122f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80122fc:	428a      	cmp	r2, r1
 80122fe:	bf0c      	ite	eq
 8012300:	2300      	moveq	r3, #0
 8012302:	f003 0301 	andne.w	r3, r3, #1
 8012306:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801230a:	428a      	cmp	r2, r1
 801230c:	bf0c      	ite	eq
 801230e:	2300      	moveq	r3, #0
 8012310:	f003 0301 	andne.w	r3, r3, #1
 8012314:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8012318:	428a      	cmp	r2, r1
 801231a:	bf0c      	ite	eq
 801231c:	2300      	moveq	r3, #0
 801231e:	f003 0301 	andne.w	r3, r3, #1
 8012322:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8012326:	428a      	cmp	r2, r1
 8012328:	bf0c      	ite	eq
 801232a:	2300      	moveq	r3, #0
 801232c:	f003 0301 	andne.w	r3, r3, #1
 8012330:	b11b      	cbz	r3, 801233a <HAL_TIM_IC_ConfigChannel+0x1ba>
 8012332:	4b41      	ldr	r3, [pc, #260]	; (8012438 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8012334:	429a      	cmp	r2, r3
 8012336:	f040 80d7 	bne.w	80124e8 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801233a:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 801233c:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801233e:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012342:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8012344:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012348:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801234a:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 801234c:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801234e:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012350:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012352:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012356:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801235a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801235e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012362:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8012364:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8012366:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012368:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801236c:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 801236e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8012370:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012372:	6991      	ldr	r1, [r2, #24]
 8012374:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8012378:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801237a:	6993      	ldr	r3, [r2, #24]
 801237c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8012380:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8012382:	2300      	movs	r3, #0
 8012384:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8012388:	e76d      	b.n	8012266 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801238a:	682b      	ldr	r3, [r5, #0]
 801238c:	4a25      	ldr	r2, [pc, #148]	; (8012424 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801238e:	4926      	ldr	r1, [pc, #152]	; (8012428 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8012390:	4293      	cmp	r3, r2
 8012392:	bf18      	it	ne
 8012394:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012398:	bf14      	ite	ne
 801239a:	2201      	movne	r2, #1
 801239c:	2200      	moveq	r2, #0
 801239e:	428b      	cmp	r3, r1
 80123a0:	bf0c      	ite	eq
 80123a2:	2200      	moveq	r2, #0
 80123a4:	f002 0201 	andne.w	r2, r2, #1
 80123a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80123ac:	428b      	cmp	r3, r1
 80123ae:	bf0c      	ite	eq
 80123b0:	2200      	moveq	r2, #0
 80123b2:	f002 0201 	andne.w	r2, r2, #1
 80123b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80123ba:	428b      	cmp	r3, r1
 80123bc:	bf0c      	ite	eq
 80123be:	2200      	moveq	r2, #0
 80123c0:	f002 0201 	andne.w	r2, r2, #1
 80123c4:	b142      	cbz	r2, 80123d8 <HAL_TIM_IC_ConfigChannel+0x258>
 80123c6:	4a1d      	ldr	r2, [pc, #116]	; (801243c <HAL_TIM_IC_ConfigChannel+0x2bc>)
 80123c8:	4293      	cmp	r3, r2
 80123ca:	d005      	beq.n	80123d8 <HAL_TIM_IC_ConfigChannel+0x258>
 80123cc:	f241 017a 	movw	r1, #4218	; 0x107a
 80123d0:	4818      	ldr	r0, [pc, #96]	; (8012434 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80123d2:	f7f3 fa4d 	bl	8005870 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 80123d6:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123d8:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 80123da:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123dc:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80123e0:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 80123e2:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80123e6:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80123e8:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80123ea:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80123ec:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80123ee:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80123f0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80123f4:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80123f8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80123fc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012400:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8012402:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8012404:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012406:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801240a:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 801240c:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 801240e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012410:	69d9      	ldr	r1, [r3, #28]
 8012412:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8012416:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012418:	69da      	ldr	r2, [r3, #28]
 801241a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801241e:	61da      	str	r2, [r3, #28]
 8012420:	e71e      	b.n	8012260 <HAL_TIM_IC_ConfigChannel+0xe0>
 8012422:	bf00      	nop
 8012424:	40010000 	.word	0x40010000
 8012428:	40000400 	.word	0x40000400
 801242c:	40000800 	.word	0x40000800
 8012430:	40002000 	.word	0x40002000
 8012434:	0802e100 	.word	0x0802e100
 8012438:	40001800 	.word	0x40001800
 801243c:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012440:	682b      	ldr	r3, [r5, #0]
 8012442:	4a2d      	ldr	r2, [pc, #180]	; (80124f8 <HAL_TIM_IC_ConfigChannel+0x378>)
 8012444:	492d      	ldr	r1, [pc, #180]	; (80124fc <HAL_TIM_IC_ConfigChannel+0x37c>)
 8012446:	4293      	cmp	r3, r2
 8012448:	bf18      	it	ne
 801244a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801244e:	bf14      	ite	ne
 8012450:	2201      	movne	r2, #1
 8012452:	2200      	moveq	r2, #0
 8012454:	428b      	cmp	r3, r1
 8012456:	bf0c      	ite	eq
 8012458:	2200      	moveq	r2, #0
 801245a:	f002 0201 	andne.w	r2, r2, #1
 801245e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012462:	428b      	cmp	r3, r1
 8012464:	bf0c      	ite	eq
 8012466:	2200      	moveq	r2, #0
 8012468:	f002 0201 	andne.w	r2, r2, #1
 801246c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012470:	428b      	cmp	r3, r1
 8012472:	bf0c      	ite	eq
 8012474:	2200      	moveq	r2, #0
 8012476:	f002 0201 	andne.w	r2, r2, #1
 801247a:	b112      	cbz	r2, 8012482 <HAL_TIM_IC_ConfigChannel+0x302>
 801247c:	4a20      	ldr	r2, [pc, #128]	; (8012500 <HAL_TIM_IC_ConfigChannel+0x380>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d12b      	bne.n	80124da <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012482:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8012484:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012486:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801248a:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 801248c:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012490:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012492:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8012494:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012496:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012498:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801249a:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801249e:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 80124a2:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80124a4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80124a8:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80124aa:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80124ac:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 80124b0:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80124b2:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80124b4:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80124b6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80124b8:	69d9      	ldr	r1, [r3, #28]
 80124ba:	f021 010c 	bic.w	r1, r1, #12
 80124be:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80124c0:	69da      	ldr	r2, [r3, #28]
 80124c2:	4322      	orrs	r2, r4
 80124c4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80124c6:	2300      	movs	r3, #0
 80124c8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80124cc:	e6cb      	b.n	8012266 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80124ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80124d2:	480c      	ldr	r0, [pc, #48]	; (8012504 <HAL_TIM_IC_ConfigChannel+0x384>)
 80124d4:	f7f3 f9cc 	bl	8005870 <assert_failed>
 80124d8:	e6a1      	b.n	801221e <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80124da:	f241 016a 	movw	r1, #4202	; 0x106a
 80124de:	4809      	ldr	r0, [pc, #36]	; (8012504 <HAL_TIM_IC_ConfigChannel+0x384>)
 80124e0:	f7f3 f9c6 	bl	8005870 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	e7cc      	b.n	8012482 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80124e8:	f241 015a 	movw	r1, #4186	; 0x105a
 80124ec:	4805      	ldr	r0, [pc, #20]	; (8012504 <HAL_TIM_IC_ConfigChannel+0x384>)
 80124ee:	f7f3 f9bf 	bl	8005870 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80124f2:	682a      	ldr	r2, [r5, #0]
 80124f4:	e721      	b.n	801233a <HAL_TIM_IC_ConfigChannel+0x1ba>
 80124f6:	bf00      	nop
 80124f8:	40010000 	.word	0x40010000
 80124fc:	40000400 	.word	0x40000400
 8012500:	40010400 	.word	0x40010400
 8012504:	0802e100 	.word	0x0802e100

08012508 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8012508:	4b2b      	ldr	r3, [pc, #172]	; (80125b8 <TIM_CCxChannelCmd+0xb0>)
 801250a:	4298      	cmp	r0, r3
{
 801250c:	b530      	push	{r4, r5, lr}
 801250e:	4604      	mov	r4, r0
 8012510:	b083      	sub	sp, #12
 8012512:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8012514:	d031      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012516:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801251a:	d02e      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801251c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8012520:	4298      	cmp	r0, r3
 8012522:	d02a      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012528:	4298      	cmp	r0, r3
 801252a:	d026      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801252c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012530:	4298      	cmp	r0, r3
 8012532:	d022      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012534:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8012538:	4298      	cmp	r0, r3
 801253a:	d01e      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801253c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8012540:	4298      	cmp	r0, r3
 8012542:	d01a      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012548:	4298      	cmp	r0, r3
 801254a:	d016      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801254c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012550:	4298      	cmp	r0, r3
 8012552:	d012      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012554:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012558:	4298      	cmp	r0, r3
 801255a:	d00e      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801255c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012560:	4298      	cmp	r0, r3
 8012562:	d00a      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 8012564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012568:	4298      	cmp	r0, r3
 801256a:	d006      	beq.n	801257a <TIM_CCxChannelCmd+0x72>
 801256c:	f641 6199 	movw	r1, #7833	; 0x1e99
 8012570:	4812      	ldr	r0, [pc, #72]	; (80125bc <TIM_CCxChannelCmd+0xb4>)
 8012572:	9201      	str	r2, [sp, #4]
 8012574:	f7f3 f97c 	bl	8005870 <assert_failed>
 8012578:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 801257a:	2d14      	cmp	r5, #20
 801257c:	d90f      	bls.n	801259e <TIM_CCxChannelCmd+0x96>
 801257e:	2d3c      	cmp	r5, #60	; 0x3c
 8012580:	d111      	bne.n	80125a6 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012582:	f005 051f 	and.w	r5, r5, #31
 8012586:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012588:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801258a:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801258c:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 801258e:	ea23 0301 	bic.w	r3, r3, r1
 8012592:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012594:	6a25      	ldr	r5, [r4, #32]
 8012596:	4315      	orrs	r5, r2
 8012598:	6225      	str	r5, [r4, #32]
}
 801259a:	b003      	add	sp, #12
 801259c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 801259e:	4b08      	ldr	r3, [pc, #32]	; (80125c0 <TIM_CCxChannelCmd+0xb8>)
 80125a0:	40eb      	lsrs	r3, r5
 80125a2:	07db      	lsls	r3, r3, #31
 80125a4:	d4ed      	bmi.n	8012582 <TIM_CCxChannelCmd+0x7a>
 80125a6:	f641 619a 	movw	r1, #7834	; 0x1e9a
 80125aa:	4804      	ldr	r0, [pc, #16]	; (80125bc <TIM_CCxChannelCmd+0xb4>)
 80125ac:	9201      	str	r2, [sp, #4]
 80125ae:	f7f3 f95f 	bl	8005870 <assert_failed>
 80125b2:	9a01      	ldr	r2, [sp, #4]
 80125b4:	e7e5      	b.n	8012582 <TIM_CCxChannelCmd+0x7a>
 80125b6:	bf00      	nop
 80125b8:	40010000 	.word	0x40010000
 80125bc:	0802e100 	.word	0x0802e100
 80125c0:	00111111 	.word	0x00111111

080125c4 <HAL_TIM_IC_Start_DMA>:
{
 80125c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c8:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80125ca:	460d      	mov	r5, r1
{
 80125cc:	4617      	mov	r7, r2
 80125ce:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80125d0:	2900      	cmp	r1, #0
 80125d2:	f040 8087 	bne.w	80126e4 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80125d6:	6803      	ldr	r3, [r0, #0]
 80125d8:	4aa4      	ldr	r2, [pc, #656]	; (801286c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80125da:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80125de:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80125e0:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80125e4:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80125e6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80125ea:	d037      	beq.n	801265c <HAL_TIM_IC_Start_DMA+0x98>
 80125ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125f0:	d034      	beq.n	801265c <HAL_TIM_IC_Start_DMA+0x98>
 80125f2:	4a9f      	ldr	r2, [pc, #636]	; (8012870 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80125f4:	4293      	cmp	r3, r2
 80125f6:	d031      	beq.n	801265c <HAL_TIM_IC_Start_DMA+0x98>
 80125f8:	4a9e      	ldr	r2, [pc, #632]	; (8012874 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d066      	beq.n	80126cc <HAL_TIM_IC_Start_DMA+0x108>
 80125fe:	4a9e      	ldr	r2, [pc, #632]	; (8012878 <HAL_TIM_IC_Start_DMA+0x2b4>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d063      	beq.n	80126cc <HAL_TIM_IC_Start_DMA+0x108>
 8012604:	4a9d      	ldr	r2, [pc, #628]	; (801287c <HAL_TIM_IC_Start_DMA+0x2b8>)
 8012606:	4293      	cmp	r3, r2
 8012608:	f040 80f7 	bne.w	80127fa <HAL_TIM_IC_Start_DMA+0x236>
 801260c:	2d14      	cmp	r5, #20
 801260e:	d862      	bhi.n	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
 8012610:	4a9b      	ldr	r2, [pc, #620]	; (8012880 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8012612:	40ea      	lsrs	r2, r5
 8012614:	07d2      	lsls	r2, r2, #31
 8012616:	d55e      	bpl.n	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012618:	4994      	ldr	r1, [pc, #592]	; (801286c <HAL_TIM_IC_Start_DMA+0x2a8>)
 801261a:	4a95      	ldr	r2, [pc, #596]	; (8012870 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801261c:	428b      	cmp	r3, r1
 801261e:	bf18      	it	ne
 8012620:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012624:	bf14      	ite	ne
 8012626:	2101      	movne	r1, #1
 8012628:	2100      	moveq	r1, #0
 801262a:	4293      	cmp	r3, r2
 801262c:	bf0c      	ite	eq
 801262e:	2100      	moveq	r1, #0
 8012630:	f001 0101 	andne.w	r1, r1, #1
 8012634:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012638:	4293      	cmp	r3, r2
 801263a:	bf0c      	ite	eq
 801263c:	2100      	moveq	r1, #0
 801263e:	f001 0101 	andne.w	r1, r1, #1
 8012642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012646:	4293      	cmp	r3, r2
 8012648:	bf0c      	ite	eq
 801264a:	2100      	moveq	r1, #0
 801264c:	f001 0101 	andne.w	r1, r1, #1
 8012650:	b121      	cbz	r1, 801265c <HAL_TIM_IC_Start_DMA+0x98>
 8012652:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012656:	4293      	cmp	r3, r2
 8012658:	f040 80c5 	bne.w	80127e6 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 801265c:	2e02      	cmp	r6, #2
 801265e:	d06a      	beq.n	8012736 <HAL_TIM_IC_Start_DMA+0x172>
 8012660:	f1b9 0f02 	cmp.w	r9, #2
 8012664:	d067      	beq.n	8012736 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8012666:	2e01      	cmp	r6, #1
 8012668:	d106      	bne.n	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
 801266a:	f1b9 0f01 	cmp.w	r9, #1
 801266e:	d103      	bne.n	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8012670:	b92f      	cbnz	r7, 801267e <HAL_TIM_IC_Start_DMA+0xba>
 8012672:	f1b8 0f00 	cmp.w	r8, #0
 8012676:	d002      	beq.n	801267e <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8012678:	2001      	movs	r0, #1
}
 801267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801267e:	2302      	movs	r3, #2
 8012680:	2d00      	cmp	r5, #0
 8012682:	d05b      	beq.n	801273c <HAL_TIM_IC_Start_DMA+0x178>
 8012684:	2d04      	cmp	r5, #4
 8012686:	f000 8119 	beq.w	80128bc <HAL_TIM_IC_Start_DMA+0x2f8>
 801268a:	2d08      	cmp	r5, #8
 801268c:	f000 8141 	beq.w	8012912 <HAL_TIM_IC_Start_DMA+0x34e>
 8012690:	2d0c      	cmp	r5, #12
 8012692:	f000 815d 	beq.w	8012950 <HAL_TIM_IC_Start_DMA+0x38c>
 8012696:	2d10      	cmp	r5, #16
 8012698:	f000 812f 	beq.w	80128fa <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801269c:	4629      	mov	r1, r5
  switch (Channel)
 801269e:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80126a4:	2201      	movs	r2, #1
 80126a6:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126a8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80126ac:	f7ff ff2c 	bl	8012508 <TIM_CCxChannelCmd>
  switch (Channel)
 80126b0:	2d08      	cmp	r5, #8
 80126b2:	f200 812b 	bhi.w	801290c <HAL_TIM_IC_Start_DMA+0x348>
 80126b6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80126ba:	010a      	.short	0x010a
 80126bc:	01290129 	.word	0x01290129
 80126c0:	01350129 	.word	0x01350129
 80126c4:	01290129 	.word	0x01290129
 80126c8:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80126cc:	f035 0204 	bics.w	r2, r5, #4
 80126d0:	d0a2      	beq.n	8012618 <HAL_TIM_IC_Start_DMA+0x54>
 80126d2:	2a08      	cmp	r2, #8
 80126d4:	d0a0      	beq.n	8012618 <HAL_TIM_IC_Start_DMA+0x54>
 80126d6:	f640 114a 	movw	r1, #2378	; 0x94a
 80126da:	486a      	ldr	r0, [pc, #424]	; (8012884 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80126dc:	f7f3 f8c8 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	e799      	b.n	8012618 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80126e4:	2904      	cmp	r1, #4
 80126e6:	f000 8090 	beq.w	801280a <HAL_TIM_IC_Start_DMA+0x246>
 80126ea:	2908      	cmp	r1, #8
 80126ec:	f000 80e0 	beq.w	80128b0 <HAL_TIM_IC_Start_DMA+0x2ec>
 80126f0:	290c      	cmp	r1, #12
 80126f2:	d07e      	beq.n	80127f2 <HAL_TIM_IC_Start_DMA+0x22e>
 80126f4:	2910      	cmp	r1, #16
 80126f6:	f000 814a 	beq.w	801298e <HAL_TIM_IC_Start_DMA+0x3ca>
 80126fa:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80126fe:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	4a5a      	ldr	r2, [pc, #360]	; (801286c <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012704:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012708:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801270a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801270e:	f000 8098 	beq.w	8012842 <HAL_TIM_IC_Start_DMA+0x27e>
 8012712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012716:	f000 8088 	beq.w	801282a <HAL_TIM_IC_Start_DMA+0x266>
 801271a:	4a55      	ldr	r2, [pc, #340]	; (8012870 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801271c:	4293      	cmp	r3, r2
 801271e:	f47f af6b 	bne.w	80125f8 <HAL_TIM_IC_Start_DMA+0x34>
 8012722:	f035 020c 	bics.w	r2, r5, #12
 8012726:	d099      	beq.n	801265c <HAL_TIM_IC_Start_DMA+0x98>
 8012728:	4a57      	ldr	r2, [pc, #348]	; (8012888 <HAL_TIM_IC_Start_DMA+0x2c4>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d1d3      	bne.n	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
 801272e:	2d00      	cmp	r5, #0
 8012730:	f43f af72 	beq.w	8012618 <HAL_TIM_IC_Start_DMA+0x54>
 8012734:	e7cf      	b.n	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 8012736:	2002      	movs	r0, #2
}
 8012738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801273c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012740:	4629      	mov	r1, r5
 8012742:	2201      	movs	r2, #1
 8012744:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012746:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801274a:	f7ff fedd 	bl	8012508 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801274e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012750:	494e      	ldr	r1, [pc, #312]	; (801288c <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012752:	4643      	mov	r3, r8
 8012754:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8012756:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012758:	494d      	ldr	r1, [pc, #308]	; (8012890 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801275a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801275c:	494d      	ldr	r1, [pc, #308]	; (8012894 <HAL_TIM_IC_Start_DMA+0x2d0>)
 801275e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012760:	6821      	ldr	r1, [r4, #0]
 8012762:	3134      	adds	r1, #52	; 0x34
 8012764:	f7f7 feb8 	bl	800a4d8 <HAL_DMA_Start_IT>
 8012768:	2800      	cmp	r0, #0
 801276a:	d185      	bne.n	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801276c:	6822      	ldr	r2, [r4, #0]
 801276e:	68d3      	ldr	r3, [r2, #12]
 8012770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012774:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012776:	4b3d      	ldr	r3, [pc, #244]	; (801286c <HAL_TIM_IC_Start_DMA+0x2a8>)
 8012778:	4c3d      	ldr	r4, [pc, #244]	; (8012870 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801277a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801277e:	bf18      	it	ne
 8012780:	429a      	cmpne	r2, r3
 8012782:	493c      	ldr	r1, [pc, #240]	; (8012874 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8012784:	bf0c      	ite	eq
 8012786:	2301      	moveq	r3, #1
 8012788:	2300      	movne	r3, #0
 801278a:	42a2      	cmp	r2, r4
 801278c:	bf08      	it	eq
 801278e:	f043 0301 	orreq.w	r3, r3, #1
 8012792:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8012796:	428a      	cmp	r2, r1
 8012798:	bf08      	it	eq
 801279a:	f043 0301 	orreq.w	r3, r3, #1
 801279e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80127a2:	42a2      	cmp	r2, r4
 80127a4:	bf08      	it	eq
 80127a6:	f043 0301 	orreq.w	r3, r3, #1
 80127aa:	428a      	cmp	r2, r1
 80127ac:	bf08      	it	eq
 80127ae:	f043 0301 	orreq.w	r3, r3, #1
 80127b2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80127b6:	428a      	cmp	r2, r1
 80127b8:	bf08      	it	eq
 80127ba:	f043 0301 	orreq.w	r3, r3, #1
 80127be:	b913      	cbnz	r3, 80127c6 <HAL_TIM_IC_Start_DMA+0x202>
 80127c0:	4b35      	ldr	r3, [pc, #212]	; (8012898 <HAL_TIM_IC_Start_DMA+0x2d4>)
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d109      	bne.n	80127da <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127c6:	6891      	ldr	r1, [r2, #8]
 80127c8:	4b34      	ldr	r3, [pc, #208]	; (801289c <HAL_TIM_IC_Start_DMA+0x2d8>)
 80127ca:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127cc:	2b06      	cmp	r3, #6
 80127ce:	f43f af54 	beq.w	801267a <HAL_TIM_IC_Start_DMA+0xb6>
 80127d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127d6:	f43f af50 	beq.w	801267a <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 80127da:	6813      	ldr	r3, [r2, #0]
 80127dc:	f043 0301 	orr.w	r3, r3, #1
 80127e0:	6013      	str	r3, [r2, #0]
}
 80127e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80127e6:	f640 114b 	movw	r1, #2379	; 0x94b
 80127ea:	4826      	ldr	r0, [pc, #152]	; (8012884 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80127ec:	f7f3 f840 	bl	8005870 <assert_failed>
 80127f0:	e734      	b.n	801265c <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80127f2:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 80127f6:	b2f6      	uxtb	r6, r6
 80127f8:	e782      	b.n	8012700 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80127fa:	4a29      	ldr	r2, [pc, #164]	; (80128a0 <HAL_TIM_IC_Start_DMA+0x2dc>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d128      	bne.n	8012852 <HAL_TIM_IC_Start_DMA+0x28e>
 8012800:	f035 0204 	bics.w	r2, r5, #4
 8012804:	f47f af67 	bne.w	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
 8012808:	e706      	b.n	8012618 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801280a:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801280e:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012812:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012814:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012816:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801281a:	4a14      	ldr	r2, [pc, #80]	; (801286c <HAL_TIM_IC_Start_DMA+0x2a8>)
 801281c:	4293      	cmp	r3, r2
 801281e:	f43f af1d 	beq.w	801265c <HAL_TIM_IC_Start_DMA+0x98>
 8012822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012826:	f47f af78 	bne.w	801271a <HAL_TIM_IC_Start_DMA+0x156>
 801282a:	f035 020c 	bics.w	r2, r5, #12
 801282e:	f43f af15 	beq.w	801265c <HAL_TIM_IC_Start_DMA+0x98>
 8012832:	4a1c      	ldr	r2, [pc, #112]	; (80128a4 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8012834:	4293      	cmp	r3, r2
 8012836:	f47f af77 	bne.w	8012728 <HAL_TIM_IC_Start_DMA+0x164>
 801283a:	2d00      	cmp	r5, #0
 801283c:	f43f aeec 	beq.w	8012618 <HAL_TIM_IC_Start_DMA+0x54>
 8012840:	e749      	b.n	80126d6 <HAL_TIM_IC_Start_DMA+0x112>
 8012842:	f025 0204 	bic.w	r2, r5, #4
 8012846:	2a08      	cmp	r2, #8
 8012848:	f43f af08 	beq.w	801265c <HAL_TIM_IC_Start_DMA+0x98>
 801284c:	2a10      	cmp	r2, #16
 801284e:	f43f af05 	beq.w	801265c <HAL_TIM_IC_Start_DMA+0x98>
 8012852:	4a15      	ldr	r2, [pc, #84]	; (80128a8 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8012854:	4293      	cmp	r3, r2
 8012856:	f43f af6a 	beq.w	801272e <HAL_TIM_IC_Start_DMA+0x16a>
 801285a:	4a14      	ldr	r2, [pc, #80]	; (80128ac <HAL_TIM_IC_Start_DMA+0x2e8>)
 801285c:	4293      	cmp	r3, r2
 801285e:	f43f af66 	beq.w	801272e <HAL_TIM_IC_Start_DMA+0x16a>
 8012862:	4a0d      	ldr	r2, [pc, #52]	; (8012898 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d0cb      	beq.n	8012800 <HAL_TIM_IC_Start_DMA+0x23c>
 8012868:	e7e3      	b.n	8012832 <HAL_TIM_IC_Start_DMA+0x26e>
 801286a:	bf00      	nop
 801286c:	40010000 	.word	0x40010000
 8012870:	40000400 	.word	0x40000400
 8012874:	40000800 	.word	0x40000800
 8012878:	40000c00 	.word	0x40000c00
 801287c:	40010400 	.word	0x40010400
 8012880:	00111111 	.word	0x00111111
 8012884:	0802e100 	.word	0x0802e100
 8012888:	40002000 	.word	0x40002000
 801288c:	08010ef5 	.word	0x08010ef5
 8012890:	08010f8d 	.word	0x08010f8d
 8012894:	08011171 	.word	0x08011171
 8012898:	40001800 	.word	0x40001800
 801289c:	00010007 	.word	0x00010007
 80128a0:	40014000 	.word	0x40014000
 80128a4:	40001c00 	.word	0x40001c00
 80128a8:	40014400 	.word	0x40014400
 80128ac:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80128b0:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80128b4:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80128b8:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80128ba:	e7ab      	b.n	8012814 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128c0:	4629      	mov	r1, r5
 80128c2:	2201      	movs	r2, #1
 80128c4:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128ca:	f7ff fe1d 	bl	8012508 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80128ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80128d0:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80128d2:	4931      	ldr	r1, [pc, #196]	; (8012998 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80128d4:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80128d6:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80128d8:	4930      	ldr	r1, [pc, #192]	; (801299c <HAL_TIM_IC_Start_DMA+0x3d8>)
 80128da:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80128dc:	4930      	ldr	r1, [pc, #192]	; (80129a0 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80128de:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80128e0:	6821      	ldr	r1, [r4, #0]
 80128e2:	3138      	adds	r1, #56	; 0x38
 80128e4:	f7f7 fdf8 	bl	800a4d8 <HAL_DMA_Start_IT>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	f47f aec5 	bne.w	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80128ee:	6822      	ldr	r2, [r4, #0]
 80128f0:	68d3      	ldr	r3, [r2, #12]
 80128f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80128f6:	60d3      	str	r3, [r2, #12]
      break;
 80128f8:	e73d      	b.n	8012776 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128fe:	2201      	movs	r2, #1
 8012900:	4629      	mov	r1, r5
 8012902:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012904:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012908:	f7ff fdfe 	bl	8012508 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801290c:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 801290e:	2001      	movs	r0, #1
 8012910:	e731      	b.n	8012776 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012912:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012916:	4629      	mov	r1, r5
 8012918:	2201      	movs	r2, #1
 801291a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801291c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012920:	f7ff fdf2 	bl	8012508 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012924:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012926:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012928:	491b      	ldr	r1, [pc, #108]	; (8012998 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801292a:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 801292c:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801292e:	491b      	ldr	r1, [pc, #108]	; (801299c <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012930:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012932:	491b      	ldr	r1, [pc, #108]	; (80129a0 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012934:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012936:	6821      	ldr	r1, [r4, #0]
 8012938:	313c      	adds	r1, #60	; 0x3c
 801293a:	f7f7 fdcd 	bl	800a4d8 <HAL_DMA_Start_IT>
 801293e:	2800      	cmp	r0, #0
 8012940:	f47f ae9a 	bne.w	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012944:	6822      	ldr	r2, [r4, #0]
 8012946:	68d3      	ldr	r3, [r2, #12]
 8012948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801294c:	60d3      	str	r3, [r2, #12]
      break;
 801294e:	e712      	b.n	8012776 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012950:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012954:	4629      	mov	r1, r5
 8012956:	2201      	movs	r2, #1
 8012958:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801295a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801295e:	f7ff fdd3 	bl	8012508 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012962:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012964:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012966:	490c      	ldr	r1, [pc, #48]	; (8012998 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012968:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801296a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801296c:	490b      	ldr	r1, [pc, #44]	; (801299c <HAL_TIM_IC_Start_DMA+0x3d8>)
 801296e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012970:	490b      	ldr	r1, [pc, #44]	; (80129a0 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012972:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012974:	6821      	ldr	r1, [r4, #0]
 8012976:	3140      	adds	r1, #64	; 0x40
 8012978:	f7f7 fdae 	bl	800a4d8 <HAL_DMA_Start_IT>
 801297c:	2800      	cmp	r0, #0
 801297e:	f47f ae7b 	bne.w	8012678 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012982:	6822      	ldr	r2, [r4, #0]
 8012984:	68d3      	ldr	r3, [r2, #12]
 8012986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801298a:	60d3      	str	r3, [r2, #12]
      break;
 801298c:	e6f3      	b.n	8012776 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801298e:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8012992:	b2f6      	uxtb	r6, r6
 8012994:	e6b4      	b.n	8012700 <HAL_TIM_IC_Start_DMA+0x13c>
 8012996:	bf00      	nop
 8012998:	08010ef5 	.word	0x08010ef5
 801299c:	08010f8d 	.word	0x08010f8d
 80129a0:	08011171 	.word	0x08011171

080129a4 <HAL_TIM_IC_Stop_DMA>:
{
 80129a4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129a6:	4b82      	ldr	r3, [pc, #520]	; (8012bb0 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 80129a8:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129aa:	6800      	ldr	r0, [r0, #0]
{
 80129ac:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80129ae:	4298      	cmp	r0, r3
 80129b0:	f000 80cc 	beq.w	8012b4c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80129b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80129b8:	d056      	beq.n	8012a68 <HAL_TIM_IC_Stop_DMA+0xc4>
 80129ba:	4b7e      	ldr	r3, [pc, #504]	; (8012bb4 <HAL_TIM_IC_Stop_DMA+0x210>)
 80129bc:	4298      	cmp	r0, r3
 80129be:	d053      	beq.n	8012a68 <HAL_TIM_IC_Stop_DMA+0xc4>
 80129c0:	4b7d      	ldr	r3, [pc, #500]	; (8012bb8 <HAL_TIM_IC_Stop_DMA+0x214>)
 80129c2:	4298      	cmp	r0, r3
 80129c4:	d050      	beq.n	8012a68 <HAL_TIM_IC_Stop_DMA+0xc4>
 80129c6:	4b7d      	ldr	r3, [pc, #500]	; (8012bbc <HAL_TIM_IC_Stop_DMA+0x218>)
 80129c8:	4298      	cmp	r0, r3
 80129ca:	d04d      	beq.n	8012a68 <HAL_TIM_IC_Stop_DMA+0xc4>
 80129cc:	4b7c      	ldr	r3, [pc, #496]	; (8012bc0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 80129ce:	4298      	cmp	r0, r3
 80129d0:	f000 80bc 	beq.w	8012b4c <HAL_TIM_IC_Stop_DMA+0x1a8>
 80129d4:	4b7b      	ldr	r3, [pc, #492]	; (8012bc4 <HAL_TIM_IC_Stop_DMA+0x220>)
 80129d6:	4298      	cmp	r0, r3
 80129d8:	d00c      	beq.n	80129f4 <HAL_TIM_IC_Stop_DMA+0x50>
 80129da:	4b7b      	ldr	r3, [pc, #492]	; (8012bc8 <HAL_TIM_IC_Stop_DMA+0x224>)
 80129dc:	4298      	cmp	r0, r3
 80129de:	f000 80d9 	beq.w	8012b94 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80129e2:	4b7a      	ldr	r3, [pc, #488]	; (8012bcc <HAL_TIM_IC_Stop_DMA+0x228>)
 80129e4:	4298      	cmp	r0, r3
 80129e6:	f000 80d5 	beq.w	8012b94 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80129ea:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80129ee:	4298      	cmp	r0, r3
 80129f0:	f040 80c9 	bne.w	8012b86 <HAL_TIM_IC_Stop_DMA+0x1e2>
 80129f4:	f035 0304 	bics.w	r3, r5, #4
 80129f8:	f000 80cf 	beq.w	8012b9a <HAL_TIM_IC_Stop_DMA+0x1f6>
 80129fc:	4874      	ldr	r0, [pc, #464]	; (8012bd0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 80129fe:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8012a02:	f7f2 ff35 	bl	8005870 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012a06:	6820      	ldr	r0, [r4, #0]
 8012a08:	4b69      	ldr	r3, [pc, #420]	; (8012bb0 <HAL_TIM_IC_Stop_DMA+0x20c>)
 8012a0a:	4a6a      	ldr	r2, [pc, #424]	; (8012bb4 <HAL_TIM_IC_Stop_DMA+0x210>)
 8012a0c:	4298      	cmp	r0, r3
 8012a0e:	bf18      	it	ne
 8012a10:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012a14:	bf14      	ite	ne
 8012a16:	2301      	movne	r3, #1
 8012a18:	2300      	moveq	r3, #0
 8012a1a:	4290      	cmp	r0, r2
 8012a1c:	bf0c      	ite	eq
 8012a1e:	2300      	moveq	r3, #0
 8012a20:	f003 0301 	andne.w	r3, r3, #1
 8012a24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a28:	4290      	cmp	r0, r2
 8012a2a:	bf0c      	ite	eq
 8012a2c:	2300      	moveq	r3, #0
 8012a2e:	f003 0301 	andne.w	r3, r3, #1
 8012a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a36:	4290      	cmp	r0, r2
 8012a38:	bf0c      	ite	eq
 8012a3a:	2300      	moveq	r3, #0
 8012a3c:	f003 0301 	andne.w	r3, r3, #1
 8012a40:	b11b      	cbz	r3, 8012a4a <HAL_TIM_IC_Stop_DMA+0xa6>
 8012a42:	4b5f      	ldr	r3, [pc, #380]	; (8012bc0 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012a44:	4298      	cmp	r0, r3
 8012a46:	f040 80a8 	bne.w	8012b9a <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	4629      	mov	r1, r5
 8012a4e:	f7ff fd5b 	bl	8012508 <TIM_CCxChannelCmd>
  switch (Channel)
 8012a52:	2d0c      	cmp	r5, #12
 8012a54:	d80c      	bhi.n	8012a70 <HAL_TIM_IC_Stop_DMA+0xcc>
 8012a56:	e8df f005 	tbb	[pc, r5]
 8012a5a:	0b0d      	.short	0x0b0d
 8012a5c:	0b640b0b 	.word	0x0b640b0b
 8012a60:	0b4a0b0b 	.word	0x0b4a0b0b
 8012a64:	0b0b      	.short	0x0b0b
 8012a66:	22          	.byte	0x22
 8012a67:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a68:	f035 030c 	bics.w	r3, r5, #12
 8012a6c:	d1c6      	bne.n	80129fc <HAL_TIM_IC_Stop_DMA+0x58>
 8012a6e:	e7ec      	b.n	8012a4a <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8012a70:	2001      	movs	r0, #1
}
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012a74:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012a78:	68d3      	ldr	r3, [r2, #12]
 8012a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a7e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012a80:	f7f7 fdce 	bl	800a620 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012a84:	6823      	ldr	r3, [r4, #0]
 8012a86:	f241 1211 	movw	r2, #4369	; 0x1111
 8012a8a:	6a19      	ldr	r1, [r3, #32]
 8012a8c:	4211      	tst	r1, r2
 8012a8e:	d06c      	beq.n	8012b6a <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012a90:	2301      	movs	r3, #1
 8012a92:	2000      	movs	r0, #0
 8012a94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012a98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012a9c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012a9e:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012aa0:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012aa2:	68d3      	ldr	r3, [r2, #12]
 8012aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012aa8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012aaa:	f7f7 fdb9 	bl	800a620 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012aae:	6823      	ldr	r3, [r4, #0]
 8012ab0:	f241 1211 	movw	r2, #4369	; 0x1111
 8012ab4:	6a19      	ldr	r1, [r3, #32]
 8012ab6:	4211      	tst	r1, r2
 8012ab8:	d161      	bne.n	8012b7e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012aba:	6a19      	ldr	r1, [r3, #32]
 8012abc:	f240 4244 	movw	r2, #1092	; 0x444
 8012ac0:	4211      	tst	r1, r2
 8012ac2:	d15c      	bne.n	8012b7e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012ac4:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ac6:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8012ac8:	f022 0201 	bic.w	r2, r2, #1
 8012acc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ace:	d036      	beq.n	8012b3e <HAL_TIM_IC_Stop_DMA+0x19a>
 8012ad0:	2d08      	cmp	r5, #8
 8012ad2:	d01f      	beq.n	8012b14 <HAL_TIM_IC_Stop_DMA+0x170>
 8012ad4:	2d0c      	cmp	r5, #12
 8012ad6:	d052      	beq.n	8012b7e <HAL_TIM_IC_Stop_DMA+0x1da>
 8012ad8:	2d10      	cmp	r5, #16
 8012ada:	f04f 0301 	mov.w	r3, #1
 8012ade:	d063      	beq.n	8012ba8 <HAL_TIM_IC_Stop_DMA+0x204>
 8012ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8012aec:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012aee:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012af0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012af2:	68d3      	ldr	r3, [r2, #12]
 8012af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012af8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012afa:	f7f7 fd91 	bl	800a620 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	f241 1211 	movw	r2, #4369	; 0x1111
 8012b04:	6a19      	ldr	r1, [r3, #32]
 8012b06:	4211      	tst	r1, r2
 8012b08:	d104      	bne.n	8012b14 <HAL_TIM_IC_Stop_DMA+0x170>
 8012b0a:	6a19      	ldr	r1, [r3, #32]
 8012b0c:	f240 4244 	movw	r2, #1092	; 0x444
 8012b10:	4211      	tst	r1, r2
 8012b12:	d0d7      	beq.n	8012ac4 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b14:	2301      	movs	r3, #1
 8012b16:	2000      	movs	r0, #0
 8012b18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b1c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8012b20:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012b22:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012b24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012b26:	68d3      	ldr	r3, [r2, #12]
 8012b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b2c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012b2e:	f7f7 fd77 	bl	800a620 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	f241 1211 	movw	r2, #4369	; 0x1111
 8012b38:	6a19      	ldr	r1, [r3, #32]
 8012b3a:	4211      	tst	r1, r2
 8012b3c:	d00f      	beq.n	8012b5e <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b3e:	2301      	movs	r3, #1
 8012b40:	2000      	movs	r0, #0
 8012b42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012b4c:	2d14      	cmp	r5, #20
 8012b4e:	f63f af55 	bhi.w	80129fc <HAL_TIM_IC_Stop_DMA+0x58>
 8012b52:	4b20      	ldr	r3, [pc, #128]	; (8012bd4 <HAL_TIM_IC_Stop_DMA+0x230>)
 8012b54:	40eb      	lsrs	r3, r5
 8012b56:	07db      	lsls	r3, r3, #31
 8012b58:	f53f af77 	bmi.w	8012a4a <HAL_TIM_IC_Stop_DMA+0xa6>
 8012b5c:	e74e      	b.n	80129fc <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8012b5e:	6a19      	ldr	r1, [r3, #32]
 8012b60:	f240 4244 	movw	r2, #1092	; 0x444
 8012b64:	4211      	tst	r1, r2
 8012b66:	d0ad      	beq.n	8012ac4 <HAL_TIM_IC_Stop_DMA+0x120>
 8012b68:	e7e9      	b.n	8012b3e <HAL_TIM_IC_Stop_DMA+0x19a>
 8012b6a:	6a19      	ldr	r1, [r3, #32]
 8012b6c:	f240 4244 	movw	r2, #1092	; 0x444
 8012b70:	4211      	tst	r1, r2
 8012b72:	d18d      	bne.n	8012a90 <HAL_TIM_IC_Stop_DMA+0xec>
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	f022 0201 	bic.w	r2, r2, #1
 8012b7a:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012b7c:	e788      	b.n	8012a90 <HAL_TIM_IC_Stop_DMA+0xec>
 8012b7e:	2301      	movs	r3, #1
 8012b80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012b84:	e7ae      	b.n	8012ae4 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012b86:	4b14      	ldr	r3, [pc, #80]	; (8012bd8 <HAL_TIM_IC_Stop_DMA+0x234>)
 8012b88:	4298      	cmp	r0, r3
 8012b8a:	d003      	beq.n	8012b94 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012b8c:	4b13      	ldr	r3, [pc, #76]	; (8012bdc <HAL_TIM_IC_Stop_DMA+0x238>)
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	f47f af34 	bne.w	80129fc <HAL_TIM_IC_Stop_DMA+0x58>
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	f47f af31 	bne.w	80129fc <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012b9a:	480d      	ldr	r0, [pc, #52]	; (8012bd0 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012b9c:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8012ba0:	f7f2 fe66 	bl	8005870 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012ba4:	6820      	ldr	r0, [r4, #0]
 8012ba6:	e750      	b.n	8012a4a <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bac:	e79a      	b.n	8012ae4 <HAL_TIM_IC_Stop_DMA+0x140>
 8012bae:	bf00      	nop
 8012bb0:	40010000 	.word	0x40010000
 8012bb4:	40000400 	.word	0x40000400
 8012bb8:	40000800 	.word	0x40000800
 8012bbc:	40000c00 	.word	0x40000c00
 8012bc0:	40010400 	.word	0x40010400
 8012bc4:	40014000 	.word	0x40014000
 8012bc8:	40014400 	.word	0x40014400
 8012bcc:	40014800 	.word	0x40014800
 8012bd0:	0802e100 	.word	0x0802e100
 8012bd4:	00111111 	.word	0x00111111
 8012bd8:	40001c00 	.word	0x40001c00
 8012bdc:	40002000 	.word	0x40002000

08012be0 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012be0:	6802      	ldr	r2, [r0, #0]
{
 8012be2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012be6:	4b6d      	ldr	r3, [pc, #436]	; (8012d9c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8012be8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012bea:	4f6d      	ldr	r7, [pc, #436]	; (8012da0 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8012bec:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	bf18      	it	ne
 8012bf2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8012bf6:	4e6b      	ldr	r6, [pc, #428]	; (8012da4 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8012bf8:	496b      	ldr	r1, [pc, #428]	; (8012da8 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8012bfa:	bf14      	ite	ne
 8012bfc:	2301      	movne	r3, #1
 8012bfe:	2300      	moveq	r3, #0
 8012c00:	42ba      	cmp	r2, r7
 8012c02:	bf0c      	ite	eq
 8012c04:	2300      	moveq	r3, #0
 8012c06:	f003 0301 	andne.w	r3, r3, #1
 8012c0a:	42b2      	cmp	r2, r6
 8012c0c:	bf0c      	ite	eq
 8012c0e:	2300      	moveq	r3, #0
 8012c10:	f003 0301 	andne.w	r3, r3, #1
 8012c14:	428a      	cmp	r2, r1
 8012c16:	bf0c      	ite	eq
 8012c18:	2300      	moveq	r3, #0
 8012c1a:	f003 0301 	andne.w	r3, r3, #1
 8012c1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012c22:	428a      	cmp	r2, r1
 8012c24:	bf0c      	ite	eq
 8012c26:	2300      	moveq	r3, #0
 8012c28:	f003 0301 	andne.w	r3, r3, #1
 8012c2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012c30:	428a      	cmp	r2, r1
 8012c32:	bf0c      	ite	eq
 8012c34:	2300      	moveq	r3, #0
 8012c36:	f003 0301 	andne.w	r3, r3, #1
 8012c3a:	b11b      	cbz	r3, 8012c44 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8012c3c:	4b5b      	ldr	r3, [pc, #364]	; (8012dac <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	f040 808c 	bne.w	8012d5c <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012c44:	682b      	ldr	r3, [r5, #0]
 8012c46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8012c4a:	2b40      	cmp	r3, #64	; 0x40
 8012c4c:	d002      	beq.n	8012c54 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f040 808a 	bne.w	8012d68 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012c54:	68ab      	ldr	r3, [r5, #8]
 8012c56:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8012c5a:	d173      	bne.n	8012d44 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8012c5c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d078      	beq.n	8012d56 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c64:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8012c66:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c68:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8012d9c <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8012c6c:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c6e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8012dac <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8012c72:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c76:	eba2 0009 	sub.w	r0, r2, r9
 8012c7a:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8012c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c82:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8012c86:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c88:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8012c8c:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c8e:	0940      	lsrs	r0, r0, #5
 8012c90:	0949      	lsrs	r1, r1, #5
 8012c92:	ea50 0301 	orrs.w	r3, r0, r1
 8012c96:	d135      	bne.n	8012d04 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8012c98:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c9a:	430b      	orrs	r3, r1
 8012c9c:	4940      	ldr	r1, [pc, #256]	; (8012da0 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c9e:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ca2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012ca6:	bf08      	it	eq
 8012ca8:	f043 0301 	orreq.w	r3, r3, #1
 8012cac:	428a      	cmp	r2, r1
 8012cae:	bf08      	it	eq
 8012cb0:	f043 0301 	orreq.w	r3, r3, #1
 8012cb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012cb8:	428a      	cmp	r2, r1
 8012cba:	bf08      	it	eq
 8012cbc:	f043 0301 	orreq.w	r3, r3, #1
 8012cc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012cc4:	428a      	cmp	r2, r1
 8012cc6:	bf08      	it	eq
 8012cc8:	f043 0301 	orreq.w	r3, r3, #1
 8012ccc:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8012cd0:	428a      	cmp	r2, r1
 8012cd2:	bf08      	it	eq
 8012cd4:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012cd8:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012cda:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012cdc:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8012cde:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ce0:	b913      	cbnz	r3, 8012ce8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012ce2:	4b33      	ldr	r3, [pc, #204]	; (8012db0 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d104      	bne.n	8012cf2 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012ce8:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012cea:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012cee:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012cf0:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8012cf2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8012cf4:	2201      	movs	r2, #1

  return HAL_OK;
 8012cf6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8012cf8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8012cfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8012d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012d04:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8012d08:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8012d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012d10:	bf18      	it	ne
 8012d12:	2b00      	cmpne	r3, #0
 8012d14:	bf14      	ite	ne
 8012d16:	f04f 0c01 	movne.w	ip, #1
 8012d1a:	f04f 0c00 	moveq.w	ip, #0
 8012d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012d22:	bf0c      	ite	eq
 8012d24:	f04f 0c00 	moveq.w	ip, #0
 8012d28:	f00c 0c01 	andne.w	ip, ip, #1
 8012d2c:	f1bc 0f00 	cmp.w	ip, #0
 8012d30:	d002      	beq.n	8012d38 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012d32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012d36:	d11d      	bne.n	8012d74 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012d38:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	ea47 070e 	orr.w	r7, r7, lr
 8012d42:	e7aa      	b.n	8012c9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012d44:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8012d48:	481a      	ldr	r0, [pc, #104]	; (8012db4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012d4a:	f7f2 fd91 	bl	8005870 <assert_failed>
  __HAL_LOCK(htim);
 8012d4e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d186      	bne.n	8012c64 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8012d56:	2002      	movs	r0, #2
}
 8012d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012d5c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8012d60:	4814      	ldr	r0, [pc, #80]	; (8012db4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012d62:	f7f2 fd85 	bl	8005870 <assert_failed>
 8012d66:	e76d      	b.n	8012c44 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012d68:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8012d6c:	4811      	ldr	r0, [pc, #68]	; (8012db4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012d6e:	f7f2 fd7f 	bl	8005870 <assert_failed>
 8012d72:	e76f      	b.n	8012c54 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012d74:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8012d78:	480e      	ldr	r0, [pc, #56]	; (8012db4 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012d7a:	f7f2 fd79 	bl	8005870 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8012d7e:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012d80:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d84:	eba2 0309 	sub.w	r3, r2, r9
 8012d88:	eba2 0c08 	sub.w	ip, r2, r8
 8012d8c:	4258      	negs	r0, r3
 8012d8e:	4158      	adcs	r0, r3
 8012d90:	f1dc 0100 	rsbs	r1, ip, #0
 8012d94:	eb41 010c 	adc.w	r1, r1, ip
 8012d98:	e7ce      	b.n	8012d38 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012d9a:	bf00      	nop
 8012d9c:	40010000 	.word	0x40010000
 8012da0:	40000400 	.word	0x40000400
 8012da4:	40000800 	.word	0x40000800
 8012da8:	40000c00 	.word	0x40000c00
 8012dac:	40010400 	.word	0x40010400
 8012db0:	40001800 	.word	0x40001800
 8012db4:	0802e138 	.word	0x0802e138

08012db8 <HAL_TIMEx_CommutCallback>:
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop

08012dbc <HAL_TIMEx_BreakCallback>:
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop

08012dc0 <HAL_TIMEx_Break2Callback>:
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop

08012dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012dc4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dc6:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dce:	e842 3100 	strex	r1, r3, [r2]
 8012dd2:	2900      	cmp	r1, #0
 8012dd4:	d1f7      	bne.n	8012dc6 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd6:	f102 0308 	add.w	r3, r2, #8
 8012dda:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012dde:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012de2:	f102 0c08 	add.w	ip, r2, #8
 8012de6:	e84c 3100 	strex	r1, r3, [ip]
 8012dea:	2900      	cmp	r1, #0
 8012dec:	d1f3      	bne.n	8012dd6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012dee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d005      	beq.n	8012e00 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012df4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8012df6:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012df8:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8012dfa:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dfc:	6603      	str	r3, [r0, #96]	; 0x60
}
 8012dfe:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e00:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e08:	e842 3100 	strex	r1, r3, [r2]
 8012e0c:	2900      	cmp	r1, #0
 8012e0e:	d0f1      	beq.n	8012df4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e10:	e852 3f00 	ldrex	r3, [r2]
 8012e14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e18:	e842 3100 	strex	r1, r3, [r2]
 8012e1c:	2900      	cmp	r1, #0
 8012e1e:	d1ef      	bne.n	8012e00 <UART_EndRxTransfer+0x3c>
 8012e20:	e7e8      	b.n	8012df4 <UART_EndRxTransfer+0x30>
 8012e22:	bf00      	nop

08012e24 <HAL_UART_DeInit>:
  if (huart == NULL)
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d046      	beq.n	8012eb6 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8012e28:	6802      	ldr	r2, [r0, #0]
 8012e2a:	4927      	ldr	r1, [pc, #156]	; (8012ec8 <HAL_UART_DeInit+0xa4>)
{
 8012e2c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8012e2e:	4b27      	ldr	r3, [pc, #156]	; (8012ecc <HAL_UART_DeInit+0xa8>)
 8012e30:	4604      	mov	r4, r0
 8012e32:	4827      	ldr	r0, [pc, #156]	; (8012ed0 <HAL_UART_DeInit+0xac>)
 8012e34:	429a      	cmp	r2, r3
 8012e36:	bf18      	it	ne
 8012e38:	4282      	cmpne	r2, r0
 8012e3a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012e3e:	bf14      	ite	ne
 8012e40:	2301      	movne	r3, #1
 8012e42:	2300      	moveq	r3, #0
 8012e44:	428a      	cmp	r2, r1
 8012e46:	bf0c      	ite	eq
 8012e48:	2300      	moveq	r3, #0
 8012e4a:	f003 0301 	andne.w	r3, r3, #1
 8012e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e52:	4282      	cmp	r2, r0
 8012e54:	bf0c      	ite	eq
 8012e56:	2300      	moveq	r3, #0
 8012e58:	f003 0301 	andne.w	r3, r3, #1
 8012e5c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012e60:	428a      	cmp	r2, r1
 8012e62:	bf0c      	ite	eq
 8012e64:	2300      	moveq	r3, #0
 8012e66:	f003 0301 	andne.w	r3, r3, #1
 8012e6a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012e6e:	4282      	cmp	r2, r0
 8012e70:	bf0c      	ite	eq
 8012e72:	2300      	moveq	r3, #0
 8012e74:	f003 0301 	andne.w	r3, r3, #1
 8012e78:	428a      	cmp	r2, r1
 8012e7a:	bf0c      	ite	eq
 8012e7c:	2300      	moveq	r3, #0
 8012e7e:	f003 0301 	andne.w	r3, r3, #1
 8012e82:	b113      	cbz	r3, 8012e8a <HAL_UART_DeInit+0x66>
 8012e84:	4b13      	ldr	r3, [pc, #76]	; (8012ed4 <HAL_UART_DeInit+0xb0>)
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d117      	bne.n	8012eba <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8012e8a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8012e8c:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8012e8e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8012e90:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012e92:	6813      	ldr	r3, [r2, #0]
 8012e94:	f023 0301 	bic.w	r3, r3, #1
 8012e98:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8012e9a:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8012e9c:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8012e9e:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8012ea0:	f7f5 f834 	bl	8007f0c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ea4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8012ea8:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8012eaa:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012eac:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8012eb0:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eb2:	6625      	str	r5, [r4, #96]	; 0x60
}
 8012eb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8012eb6:	2001      	movs	r0, #1
}
 8012eb8:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8012eba:	f240 2167 	movw	r1, #615	; 0x267
 8012ebe:	4806      	ldr	r0, [pc, #24]	; (8012ed8 <HAL_UART_DeInit+0xb4>)
 8012ec0:	f7f2 fcd6 	bl	8005870 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8012ec4:	6822      	ldr	r2, [r4, #0]
 8012ec6:	e7e0      	b.n	8012e8a <HAL_UART_DeInit+0x66>
 8012ec8:	40004800 	.word	0x40004800
 8012ecc:	40011000 	.word	0x40011000
 8012ed0:	40004400 	.word	0x40004400
 8012ed4:	40007c00 	.word	0x40007c00
 8012ed8:	0802e174 	.word	0x0802e174

08012edc <HAL_UART_Transmit_DMA>:
{
 8012edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8012ede:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8012ee0:	2f20      	cmp	r7, #32
 8012ee2:	d141      	bne.n	8012f68 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8012ee4:	2900      	cmp	r1, #0
 8012ee6:	d03d      	beq.n	8012f64 <HAL_UART_Transmit_DMA+0x88>
 8012ee8:	fab2 f682 	clz	r6, r2
 8012eec:	0976      	lsrs	r6, r6, #5
 8012eee:	2a00      	cmp	r2, #0
 8012ef0:	d038      	beq.n	8012f64 <HAL_UART_Transmit_DMA+0x88>
 8012ef2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8012ef4:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8012ef8:	2801      	cmp	r0, #1
 8012efa:	d035      	beq.n	8012f68 <HAL_UART_Transmit_DMA+0x8c>
 8012efc:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012efe:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8012f00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8012f02:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8012f06:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f08:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8012f0c:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8012f10:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012f14:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8012f16:	b190      	cbz	r0, 8012f3e <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012f18:	f8df c060 	ldr.w	ip, [pc, #96]	; 8012f7c <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012f20:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012f24:	f8df c058 	ldr.w	ip, [pc, #88]	; 8012f80 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012f28:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8012f2a:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012f2c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012f30:	f8df c050 	ldr.w	ip, [pc, #80]	; 8012f84 <HAL_UART_Transmit_DMA+0xa8>
 8012f34:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012f38:	f7f7 face 	bl	800a4d8 <HAL_DMA_Start_IT>
 8012f3c:	b9b0      	cbnz	r0, 8012f6c <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012f3e:	6822      	ldr	r2, [r4, #0]
 8012f40:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8012f42:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012f44:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8012f46:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f4a:	f102 0308 	add.w	r3, r2, #8
 8012f4e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f56:	f102 0108 	add.w	r1, r2, #8
 8012f5a:	e841 3000 	strex	r0, r3, [r1]
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d1f3      	bne.n	8012f4a <HAL_UART_Transmit_DMA+0x6e>
}
 8012f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8012f64:	2001      	movs	r0, #1
}
 8012f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012f68:	2002      	movs	r0, #2
}
 8012f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012f6c:	2310      	movs	r3, #16
        return HAL_ERROR;
 8012f6e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8012f70:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012f74:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8012f78:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8012f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f7c:	0801308d 	.word	0x0801308d
 8012f80:	080130d5 	.word	0x080130d5
 8012f84:	080130e5 	.word	0x080130e5

08012f88 <HAL_UART_Abort>:
{
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f8e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8012f92:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f96:	e843 2100 	strex	r1, r2, [r3]
 8012f9a:	2900      	cmp	r1, #0
 8012f9c:	d1f7      	bne.n	8012f8e <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f9e:	f103 0208 	add.w	r2, r3, #8
 8012fa2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fa6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012faa:	f103 0008 	add.w	r0, r3, #8
 8012fae:	e840 2100 	strex	r1, r2, [r0]
 8012fb2:	2900      	cmp	r1, #0
 8012fb4:	d1f3      	bne.n	8012f9e <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fb6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012fb8:	2a01      	cmp	r2, #1
 8012fba:	d043      	beq.n	8013044 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012fbc:	6899      	ldr	r1, [r3, #8]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	0608      	lsls	r0, r1, #24
 8012fc2:	d42a      	bmi.n	801301a <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012fc4:	6899      	ldr	r1, [r3, #8]
 8012fc6:	0649      	lsls	r1, r1, #25
 8012fc8:	d514      	bpl.n	8012ff4 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fca:	f103 0208 	add.w	r2, r3, #8
 8012fce:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd6:	f103 0008 	add.w	r0, r3, #8
 8012fda:	e840 2100 	strex	r1, r2, [r0]
 8012fde:	2900      	cmp	r1, #0
 8012fe0:	d1f3      	bne.n	8012fca <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8012fe2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d03e      	beq.n	8013066 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8012fe8:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8012fea:	f7f7 fad1 	bl	800a590 <HAL_DMA_Abort>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d145      	bne.n	801307e <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012ff2:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8012ff4:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012ff6:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8012ff8:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8012ffa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8012ffe:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8013000:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013004:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013006:	6991      	ldr	r1, [r2, #24]
 8013008:	f041 0108 	orr.w	r1, r1, #8
 801300c:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801300e:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013010:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013012:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013014:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8013018:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301a:	f103 0208 	add.w	r2, r3, #8
 801301e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013026:	f103 0008 	add.w	r0, r3, #8
 801302a:	e840 2100 	strex	r1, r2, [r0]
 801302e:	2900      	cmp	r1, #0
 8013030:	d1f3      	bne.n	801301a <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8013032:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013034:	b120      	cbz	r0, 8013040 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8013036:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8013038:	f7f7 faaa 	bl	800a590 <HAL_DMA_Abort>
 801303c:	b9a8      	cbnz	r0, 801306a <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801303e:	6823      	ldr	r3, [r4, #0]
 8013040:	461a      	mov	r2, r3
 8013042:	e7bf      	b.n	8012fc4 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013044:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013048:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801304c:	e843 2100 	strex	r1, r2, [r3]
 8013050:	2900      	cmp	r1, #0
 8013052:	d0b3      	beq.n	8012fbc <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013054:	e853 2f00 	ldrex	r2, [r3]
 8013058:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801305c:	e843 2100 	strex	r1, r2, [r3]
 8013060:	2900      	cmp	r1, #0
 8013062:	d1ef      	bne.n	8013044 <HAL_UART_Abort+0xbc>
 8013064:	e7aa      	b.n	8012fbc <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013066:	461a      	mov	r2, r3
 8013068:	e7c4      	b.n	8012ff4 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801306a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801306c:	f7f7 fbdc 	bl	800a828 <HAL_DMA_GetError>
 8013070:	2820      	cmp	r0, #32
 8013072:	d1e4      	bne.n	801303e <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013074:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8013076:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013078:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 801307c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801307e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8013080:	f7f7 fbd2 	bl	800a828 <HAL_DMA_GetError>
 8013084:	2820      	cmp	r0, #32
 8013086:	d1b4      	bne.n	8012ff2 <HAL_UART_Abort+0x6a>
 8013088:	e7f4      	b.n	8013074 <HAL_UART_Abort+0xec>
 801308a:	bf00      	nop

0801308c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801308c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801308e:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013090:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013096:	d018      	beq.n	80130ca <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8013098:	2300      	movs	r3, #0
 801309a:	6802      	ldr	r2, [r0, #0]
 801309c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130a0:	f102 0308 	add.w	r3, r2, #8
 80130a4:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80130a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130ac:	f102 0008 	add.w	r0, r2, #8
 80130b0:	e840 3100 	strex	r1, r3, [r0]
 80130b4:	2900      	cmp	r1, #0
 80130b6:	d1f3      	bne.n	80130a0 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130b8:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80130bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130c0:	e842 3100 	strex	r1, r3, [r2]
 80130c4:	2900      	cmp	r1, #0
 80130c6:	d1f7      	bne.n	80130b8 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80130c8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80130ca:	f7ee ff75 	bl	8001fb8 <HAL_UART_TxCpltCallback>
}
 80130ce:	bd08      	pop	{r3, pc}

080130d0 <HAL_UART_TxHalfCpltCallback>:
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop

080130d4 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80130d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80130d6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80130d8:	f7ff fffa 	bl	80130d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130dc:	bd08      	pop	{r3, pc}
 80130de:	bf00      	nop

080130e0 <HAL_UART_RxHalfCpltCallback>:
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop

080130e4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80130e4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80130e6:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80130e8:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80130ea:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80130ec:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80130ee:	6893      	ldr	r3, [r2, #8]
 80130f0:	061b      	lsls	r3, r3, #24
 80130f2:	d501      	bpl.n	80130f8 <UART_DMAError+0x14>
 80130f4:	2921      	cmp	r1, #33	; 0x21
 80130f6:	d00d      	beq.n	8013114 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80130f8:	6893      	ldr	r3, [r2, #8]
 80130fa:	065b      	lsls	r3, r3, #25
 80130fc:	d501      	bpl.n	8013102 <UART_DMAError+0x1e>
 80130fe:	2c22      	cmp	r4, #34	; 0x22
 8013100:	d016      	beq.n	8013130 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013102:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8013106:	f043 0310 	orr.w	r3, r3, #16
 801310a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801310e:	f7f2 ff05 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013112:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8013114:	2300      	movs	r3, #0
 8013116:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801311a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801311e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013122:	e842 3100 	strex	r1, r3, [r2]
 8013126:	2900      	cmp	r1, #0
 8013128:	d1f7      	bne.n	801311a <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 801312a:	2320      	movs	r3, #32
 801312c:	6783      	str	r3, [r0, #120]	; 0x78
}
 801312e:	e7e3      	b.n	80130f8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8013130:	2300      	movs	r3, #0
 8013132:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8013136:	f7ff fe45 	bl	8012dc4 <UART_EndRxTransfer>
 801313a:	e7e2      	b.n	8013102 <UART_DMAError+0x1e>

0801313c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801313c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801313e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8013140:	2300      	movs	r3, #0
 8013142:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8013146:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801314a:	f7f2 fee7 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801314e:	bd08      	pop	{r3, pc}

08013150 <HAL_UART_AbortCpltCallback>:
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop

08013154 <HAL_UART_Abort_IT>:
{
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	6803      	ldr	r3, [r0, #0]
 8013158:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801315a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801315e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013162:	e843 2100 	strex	r1, r2, [r3]
 8013166:	2900      	cmp	r1, #0
 8013168:	d1f7      	bne.n	801315a <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801316a:	f103 0208 	add.w	r2, r3, #8
 801316e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013172:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013176:	f103 0008 	add.w	r0, r3, #8
 801317a:	e840 2100 	strex	r1, r2, [r0]
 801317e:	2900      	cmp	r1, #0
 8013180:	d1f3      	bne.n	801316a <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013182:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8013184:	2a01      	cmp	r2, #1
 8013186:	d05e      	beq.n	8013246 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8013188:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801318a:	2800      	cmp	r0, #0
 801318c:	d071      	beq.n	8013272 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801318e:	689a      	ldr	r2, [r3, #8]
 8013190:	461c      	mov	r4, r3
 8013192:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8013196:	bf18      	it	ne
 8013198:	4a3b      	ldrne	r2, [pc, #236]	; (8013288 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 801319a:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801319c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801319e:	b129      	cbz	r1, 80131ac <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131a0:	689a      	ldr	r2, [r3, #8]
 80131a2:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80131a6:	bf18      	it	ne
 80131a8:	4a38      	ldrne	r2, [pc, #224]	; (801328c <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 80131aa:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80131ac:	689a      	ldr	r2, [r3, #8]
 80131ae:	0612      	lsls	r2, r2, #24
 80131b0:	d430      	bmi.n	8013214 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131b2:	689a      	ldr	r2, [r3, #8]
 80131b4:	0656      	lsls	r6, r2, #25
 80131b6:	d515      	bpl.n	80131e4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80131b8:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131ba:	f103 0208 	add.w	r2, r3, #8
 80131be:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80131c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131c6:	f103 0008 	add.w	r0, r3, #8
 80131ca:	e840 2600 	strex	r6, r2, [r0]
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	d1f3      	bne.n	80131ba <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 80131d2:	2900      	cmp	r1, #0
 80131d4:	d04f      	beq.n	8013276 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80131d6:	4608      	mov	r0, r1
 80131d8:	f7f7 fa22 	bl	800a620 <HAL_DMA_Abort_IT>
 80131dc:	b1c0      	cbz	r0, 8013210 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 80131de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131e0:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 80131e2:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 80131e4:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131e6:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 80131e8:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 80131ea:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 80131ec:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 80131f0:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 80131f2:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 80131f6:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131f8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80131fc:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80131fe:	69a2      	ldr	r2, [r4, #24]
 8013200:	f042 0208 	orr.w	r2, r2, #8
 8013204:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8013206:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8013208:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801320a:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 801320c:	f7ff ffa0 	bl	8013150 <HAL_UART_AbortCpltCallback>
}
 8013210:	2000      	movs	r0, #0
 8013212:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013214:	f103 0208 	add.w	r2, r3, #8
 8013218:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801321c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013220:	f103 0608 	add.w	r6, r3, #8
 8013224:	e846 2400 	strex	r4, r2, [r6]
 8013228:	2c00      	cmp	r4, #0
 801322a:	d1f3      	bne.n	8013214 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 801322c:	b1e0      	cbz	r0, 8013268 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801322e:	f7f7 f9f7 	bl	800a620 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013232:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8013234:	b318      	cbz	r0, 801327e <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 8013236:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013238:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 801323a:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801323c:	461c      	mov	r4, r3
 801323e:	0651      	lsls	r1, r2, #25
 8013240:	d5d0      	bpl.n	80131e4 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8013242:	2401      	movs	r4, #1
 8013244:	e01e      	b.n	8013284 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013246:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801324a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801324e:	e843 2100 	strex	r1, r2, [r3]
 8013252:	2900      	cmp	r1, #0
 8013254:	d098      	beq.n	8013188 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013256:	e853 2f00 	ldrex	r2, [r3]
 801325a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801325e:	e843 2100 	strex	r1, r2, [r3]
 8013262:	2900      	cmp	r1, #0
 8013264:	d1ef      	bne.n	8013246 <HAL_UART_Abort_IT+0xf2>
 8013266:	e78f      	b.n	8013188 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013268:	689a      	ldr	r2, [r3, #8]
 801326a:	461c      	mov	r4, r3
 801326c:	0652      	lsls	r2, r2, #25
 801326e:	d5b9      	bpl.n	80131e4 <HAL_UART_Abort_IT+0x90>
 8013270:	e7a2      	b.n	80131b8 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013272:	461c      	mov	r4, r3
 8013274:	e792      	b.n	801319c <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8013276:	2c01      	cmp	r4, #1
 8013278:	d1ca      	bne.n	8013210 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801327a:	461c      	mov	r4, r3
 801327c:	e7b2      	b.n	80131e4 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801327e:	689a      	ldr	r2, [r3, #8]
 8013280:	0650      	lsls	r0, r2, #25
 8013282:	d5c5      	bpl.n	8013210 <HAL_UART_Abort_IT+0xbc>
 8013284:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013286:	e798      	b.n	80131ba <HAL_UART_Abort_IT+0x66>
 8013288:	080132d1 	.word	0x080132d1
 801328c:	08013291 	.word	0x08013291

08013290 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013290:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8013292:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8013294:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8013298:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 801329a:	b113      	cbz	r3, 80132a2 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801329e:	b103      	cbz	r3, 80132a2 <UART_DMARxAbortCallback+0x12>
 80132a0:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80132a2:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80132a4:	6802      	ldr	r2, [r0, #0]
 80132a6:	210f      	movs	r1, #15
{
 80132a8:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80132aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80132ae:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 80132b0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132b4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80132b8:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80132ba:	6991      	ldr	r1, [r2, #24]
 80132bc:	f041 0108 	orr.w	r1, r1, #8
 80132c0:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80132c2:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80132c4:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132c6:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80132c8:	f7ff ff42 	bl	8013150 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80132cc:	bd10      	pop	{r4, pc}
 80132ce:	bf00      	nop

080132d0 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 80132d2:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 80132d4:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 80132d8:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80132da:	b113      	cbz	r3, 80132e2 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80132dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132de:	b103      	cbz	r3, 80132e2 <UART_DMATxAbortCallback+0x12>
 80132e0:	4770      	bx	lr
{
 80132e2:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80132e4:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 80132e6:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80132e8:	6801      	ldr	r1, [r0, #0]
 80132ea:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 80132ec:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 80132f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132f4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80132f8:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 80132fa:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80132fc:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132fe:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8013300:	f7ff ff26 	bl	8013150 <HAL_UART_AbortCpltCallback>
}
 8013304:	bd10      	pop	{r4, pc}
 8013306:	bf00      	nop

08013308 <HAL_UARTEx_RxEventCallback>:
}
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop

0801330c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801330c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801330e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8013310:	2b22      	cmp	r3, #34	; 0x22
 8013312:	d005      	beq.n	8013320 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013314:	6802      	ldr	r2, [r0, #0]
 8013316:	6993      	ldr	r3, [r2, #24]
 8013318:	f043 0308 	orr.w	r3, r3, #8
 801331c:	6193      	str	r3, [r2, #24]
  }
}
 801331e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013320:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013322:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013328:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801332a:	400b      	ands	r3, r1
 801332c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 801332e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8013332:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013334:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8013336:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8013338:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 801333a:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801333c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013340:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8013344:	b29b      	uxth	r3, r3
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1e9      	bne.n	801331e <UART_RxISR_8BIT+0x12>
 801334a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801334c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013350:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013354:	e843 2100 	strex	r1, r2, [r3]
 8013358:	2900      	cmp	r1, #0
 801335a:	d1f7      	bne.n	801334c <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335c:	f103 0208 	add.w	r2, r3, #8
 8013360:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013364:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013368:	f103 0c08 	add.w	ip, r3, #8
 801336c:	e84c 2100 	strex	r1, r2, [ip]
 8013370:	2900      	cmp	r1, #0
 8013372:	d1f3      	bne.n	801335c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8013374:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8013376:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8013378:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801337a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801337c:	2a01      	cmp	r2, #1
 801337e:	d112      	bne.n	80133a6 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013380:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013382:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013386:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801338a:	e843 2100 	strex	r1, r2, [r3]
 801338e:	2900      	cmp	r1, #0
 8013390:	d1f7      	bne.n	8013382 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013392:	69da      	ldr	r2, [r3, #28]
 8013394:	06d2      	lsls	r2, r2, #27
 8013396:	d501      	bpl.n	801339c <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013398:	2210      	movs	r2, #16
 801339a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801339c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80133a0:	f7ff ffb2 	bl	8013308 <HAL_UARTEx_RxEventCallback>
}
 80133a4:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80133a6:	f7f2 fd43 	bl	8005e30 <HAL_UART_RxCpltCallback>
}
 80133aa:	bd08      	pop	{r3, pc}

080133ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80133ac:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80133ae:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80133b0:	2b22      	cmp	r3, #34	; 0x22
 80133b2:	d005      	beq.n	80133c0 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80133b4:	6802      	ldr	r2, [r0, #0]
 80133b6:	6993      	ldr	r3, [r2, #24]
 80133b8:	f043 0308 	orr.w	r3, r3, #8
 80133bc:	6193      	str	r3, [r2, #24]
  }
}
 80133be:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80133c0:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80133c2:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80133c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80133c8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80133ca:	ea02 020c 	and.w	r2, r2, ip
 80133ce:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80133d2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80133d6:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80133d8:	3a01      	subs	r2, #1
 80133da:	b292      	uxth	r2, r2
 80133dc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80133e0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80133e4:	b292      	uxth	r2, r2
 80133e6:	2a00      	cmp	r2, #0
 80133e8:	d1e9      	bne.n	80133be <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ea:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80133ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133f2:	e843 2100 	strex	r1, r2, [r3]
 80133f6:	2900      	cmp	r1, #0
 80133f8:	d1f7      	bne.n	80133ea <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133fa:	f103 0208 	add.w	r2, r3, #8
 80133fe:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013402:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013406:	f103 0c08 	add.w	ip, r3, #8
 801340a:	e84c 2100 	strex	r1, r2, [ip]
 801340e:	2900      	cmp	r1, #0
 8013410:	d1f3      	bne.n	80133fa <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8013412:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8013414:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8013416:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013418:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801341a:	2a01      	cmp	r2, #1
 801341c:	d112      	bne.n	8013444 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801341e:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013420:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013424:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013428:	e843 2100 	strex	r1, r2, [r3]
 801342c:	2900      	cmp	r1, #0
 801342e:	d1f7      	bne.n	8013420 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013430:	69da      	ldr	r2, [r3, #28]
 8013432:	06d2      	lsls	r2, r2, #27
 8013434:	d501      	bpl.n	801343a <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013436:	2210      	movs	r2, #16
 8013438:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801343a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801343e:	f7ff ff63 	bl	8013308 <HAL_UARTEx_RxEventCallback>
}
 8013442:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8013444:	f7f2 fcf4 	bl	8005e30 <HAL_UART_RxCpltCallback>
}
 8013448:	bd08      	pop	{r3, pc}
 801344a:	bf00      	nop

0801344c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801344c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801344e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013450:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013452:	2b01      	cmp	r3, #1
 8013454:	d002      	beq.n	801345c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8013456:	f7ff fe43 	bl	80130e0 <HAL_UART_RxHalfCpltCallback>
}
 801345a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801345c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013460:	0849      	lsrs	r1, r1, #1
 8013462:	f7ff ff51 	bl	8013308 <HAL_UARTEx_RxEventCallback>
}
 8013466:	bd08      	pop	{r3, pc}

08013468 <UART_DMAReceiveCplt>:
{
 8013468:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801346a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801346c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013472:	d028      	beq.n	80134c6 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8013474:	2200      	movs	r2, #0
 8013476:	6803      	ldr	r3, [r0, #0]
 8013478:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801347c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013484:	e843 2100 	strex	r1, r2, [r3]
 8013488:	2900      	cmp	r1, #0
 801348a:	d1f7      	bne.n	801347c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801348c:	f103 0208 	add.w	r2, r3, #8
 8013490:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013494:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013498:	f103 0c08 	add.w	ip, r3, #8
 801349c:	e84c 2100 	strex	r1, r2, [ip]
 80134a0:	2900      	cmp	r1, #0
 80134a2:	d1f3      	bne.n	801348c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134a4:	f103 0208 	add.w	r2, r3, #8
 80134a8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80134ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134b0:	f103 0c08 	add.w	ip, r3, #8
 80134b4:	e84c 2100 	strex	r1, r2, [ip]
 80134b8:	2900      	cmp	r1, #0
 80134ba:	d1f3      	bne.n	80134a4 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80134bc:	2220      	movs	r2, #32
 80134be:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134c0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80134c2:	2a01      	cmp	r2, #1
 80134c4:	d005      	beq.n	80134d2 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134c6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d013      	beq.n	80134f4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80134cc:	f7f2 fcb0 	bl	8005e30 <HAL_UART_RxCpltCallback>
}
 80134d0:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134d2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134da:	e843 2100 	strex	r1, r2, [r3]
 80134de:	2900      	cmp	r1, #0
 80134e0:	d0f1      	beq.n	80134c6 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134e2:	e853 2f00 	ldrex	r2, [r3]
 80134e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ea:	e843 2100 	strex	r1, r2, [r3]
 80134ee:	2900      	cmp	r1, #0
 80134f0:	d1ef      	bne.n	80134d2 <UART_DMAReceiveCplt+0x6a>
 80134f2:	e7e8      	b.n	80134c6 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80134f4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80134f8:	f7ff ff06 	bl	8013308 <HAL_UARTEx_RxEventCallback>
}
 80134fc:	bd08      	pop	{r3, pc}
 80134fe:	bf00      	nop

08013500 <HAL_UARTEx_WakeupCallback>:
}
 8013500:	4770      	bx	lr
 8013502:	bf00      	nop

08013504 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013504:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013506:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801350a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801350c:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 801350e:	ea12 0f0c 	tst.w	r2, ip
{
 8013512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013516:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013518:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 801351a:	d17d      	bne.n	8013618 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801351c:	0697      	lsls	r7, r2, #26
 801351e:	d502      	bpl.n	8013526 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013520:	068e      	lsls	r6, r1, #26
 8013522:	f100 80f4 	bmi.w	801370e <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013526:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013528:	2801      	cmp	r0, #1
 801352a:	d024      	beq.n	8013576 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801352c:	02d0      	lsls	r0, r2, #11
 801352e:	d502      	bpl.n	8013536 <HAL_UART_IRQHandler+0x32>
 8013530:	026f      	lsls	r7, r5, #9
 8013532:	f100 80f1 	bmi.w	8013718 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013536:	0616      	lsls	r6, r2, #24
 8013538:	d414      	bmi.n	8013564 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801353a:	0650      	lsls	r0, r2, #25
 801353c:	d501      	bpl.n	8013542 <HAL_UART_IRQHandler+0x3e>
 801353e:	064a      	lsls	r2, r1, #25
 8013540:	d401      	bmi.n	8013546 <HAL_UART_IRQHandler+0x42>
}
 8013542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013546:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801354a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801354e:	e843 2100 	strex	r1, r2, [r3]
 8013552:	2900      	cmp	r1, #0
 8013554:	d1f7      	bne.n	8013546 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 8013556:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8013558:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801355a:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 801355c:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 801355e:	f7ee fd2b 	bl	8001fb8 <HAL_UART_TxCpltCallback>
}
 8013562:	e7ee      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013564:	060d      	lsls	r5, r1, #24
 8013566:	d5e8      	bpl.n	801353a <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8013568:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801356a:	2b00      	cmp	r3, #0
 801356c:	d0e9      	beq.n	8013542 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 801356e:	4620      	mov	r0, r4
}
 8013570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8013574:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013576:	06d7      	lsls	r7, r2, #27
 8013578:	d5d8      	bpl.n	801352c <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801357a:	06ce      	lsls	r6, r1, #27
 801357c:	d5d6      	bpl.n	801352c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801357e:	2210      	movs	r2, #16
 8013580:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013582:	689a      	ldr	r2, [r3, #8]
 8013584:	0655      	lsls	r5, r2, #25
 8013586:	f140 80d9 	bpl.w	801373c <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801358a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801358c:	6802      	ldr	r2, [r0, #0]
 801358e:	6852      	ldr	r2, [r2, #4]
 8013590:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8013592:	2a00      	cmp	r2, #0
 8013594:	d0d5      	beq.n	8013542 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013596:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801359a:	4291      	cmp	r1, r2
 801359c:	d9d1      	bls.n	8013542 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 801359e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80135a2:	69c2      	ldr	r2, [r0, #28]
 80135a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80135a8:	d02e      	beq.n	8013608 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135aa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80135ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135b2:	e843 2100 	strex	r1, r2, [r3]
 80135b6:	2900      	cmp	r1, #0
 80135b8:	d1f7      	bne.n	80135aa <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ba:	f103 0208 	add.w	r2, r3, #8
 80135be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c6:	f103 0508 	add.w	r5, r3, #8
 80135ca:	e845 2100 	strex	r1, r2, [r5]
 80135ce:	2900      	cmp	r1, #0
 80135d0:	d1f3      	bne.n	80135ba <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135d2:	f103 0208 	add.w	r2, r3, #8
 80135d6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135de:	f103 0508 	add.w	r5, r3, #8
 80135e2:	e845 2100 	strex	r1, r2, [r5]
 80135e6:	2900      	cmp	r1, #0
 80135e8:	d1f3      	bne.n	80135d2 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80135ea:	2220      	movs	r2, #32
 80135ec:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135ee:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135f0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135f4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135f8:	e843 2100 	strex	r1, r2, [r3]
 80135fc:	2900      	cmp	r1, #0
 80135fe:	d1f7      	bne.n	80135f0 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013600:	f7f6 ffc6 	bl	800a590 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013604:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8013608:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801360c:	4620      	mov	r0, r4
 801360e:	1ac9      	subs	r1, r1, r3
 8013610:	b289      	uxth	r1, r1
 8013612:	f7ff fe79 	bl	8013308 <HAL_UARTEx_RxEventCallback>
 8013616:	e794      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013618:	4864      	ldr	r0, [pc, #400]	; (80137ac <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 801361a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801361e:	4008      	ands	r0, r1
 8013620:	4330      	orrs	r0, r6
 8013622:	d080      	beq.n	8013526 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013624:	07d5      	lsls	r5, r2, #31
 8013626:	461f      	mov	r7, r3
 8013628:	d509      	bpl.n	801363e <HAL_UART_IRQHandler+0x13a>
 801362a:	05c8      	lsls	r0, r1, #23
 801362c:	d507      	bpl.n	801363e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801362e:	2001      	movs	r0, #1
 8013630:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013632:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013636:	f040 0001 	orr.w	r0, r0, #1
 801363a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801363e:	0795      	lsls	r5, r2, #30
 8013640:	d560      	bpl.n	8013704 <HAL_UART_IRQHandler+0x200>
 8013642:	b18e      	cbz	r6, 8013668 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013644:	2002      	movs	r0, #2
 8013646:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013648:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801364c:	f040 0004 	orr.w	r0, r0, #4
 8013650:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013654:	0750      	lsls	r0, r2, #29
 8013656:	d507      	bpl.n	8013668 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013658:	2004      	movs	r0, #4
 801365a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801365c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013660:	f040 0002 	orr.w	r0, r0, #2
 8013664:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013668:	0710      	lsls	r0, r2, #28
 801366a:	d50b      	bpl.n	8013684 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801366c:	f001 0020 	and.w	r0, r1, #32
 8013670:	4330      	orrs	r0, r6
 8013672:	d007      	beq.n	8013684 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013674:	2008      	movs	r0, #8
 8013676:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013678:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801367c:	f040 0008 	orr.w	r0, r0, #8
 8013680:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013684:	0516      	lsls	r6, r2, #20
 8013686:	d50a      	bpl.n	801369e <HAL_UART_IRQHandler+0x19a>
 8013688:	014d      	lsls	r5, r1, #5
 801368a:	d508      	bpl.n	801369e <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801368c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013690:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013692:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8013696:	f043 0320 	orr.w	r3, r3, #32
 801369a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801369e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f43f af4d 	beq.w	8013542 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80136a8:	0690      	lsls	r0, r2, #26
 80136aa:	d501      	bpl.n	80136b0 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80136ac:	0689      	lsls	r1, r1, #26
 80136ae:	d43e      	bmi.n	801372e <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80136b0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80136b4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80136b6:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80136b8:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80136bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136c0:	431d      	orrs	r5, r3
 80136c2:	d06e      	beq.n	80137a2 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 80136c4:	f7ff fb7e 	bl	8012dc4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	689a      	ldr	r2, [r3, #8]
 80136cc:	0652      	lsls	r2, r2, #25
 80136ce:	d52a      	bpl.n	8013726 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d0:	f103 0208 	add.w	r2, r3, #8
 80136d4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136dc:	f103 0008 	add.w	r0, r3, #8
 80136e0:	e840 2100 	strex	r1, r2, [r0]
 80136e4:	2900      	cmp	r1, #0
 80136e6:	d1f3      	bne.n	80136d0 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80136e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80136ea:	b1e0      	cbz	r0, 8013726 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80136ec:	4b30      	ldr	r3, [pc, #192]	; (80137b0 <HAL_UART_IRQHandler+0x2ac>)
 80136ee:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80136f0:	f7f6 ff96 	bl	800a620 <HAL_DMA_Abort_IT>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	f43f af24 	beq.w	8013542 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80136fa:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80136fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013700:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013702:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013704:	0755      	lsls	r5, r2, #29
 8013706:	d5af      	bpl.n	8013668 <HAL_UART_IRQHandler+0x164>
 8013708:	2e00      	cmp	r6, #0
 801370a:	d1a5      	bne.n	8013658 <HAL_UART_IRQHandler+0x154>
 801370c:	e7ac      	b.n	8013668 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 801370e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8013710:	2b00      	cmp	r3, #0
 8013712:	f47f af2d 	bne.w	8013570 <HAL_UART_IRQHandler+0x6c>
 8013716:	e714      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 801371c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801371e:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8013720:	f7ff feee 	bl	8013500 <HAL_UARTEx_WakeupCallback>
    return;
 8013724:	e70d      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8013726:	4620      	mov	r0, r4
 8013728:	f7f2 fbf8 	bl	8005f1c <HAL_UART_ErrorCallback>
 801372c:	e709      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 801372e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013730:	2b00      	cmp	r3, #0
 8013732:	d0bd      	beq.n	80136b0 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8013734:	4620      	mov	r0, r4
 8013736:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013738:	6827      	ldr	r7, [r4, #0]
 801373a:	e7b9      	b.n	80136b0 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801373c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8013740:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8013744:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013748:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801374a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801374c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 801374e:	2900      	cmp	r1, #0
 8013750:	f43f aef7 	beq.w	8013542 <HAL_UART_IRQHandler+0x3e>
 8013754:	2a00      	cmp	r2, #0
 8013756:	f43f aef4 	beq.w	8013542 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801375a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801375e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013762:	e843 2000 	strex	r0, r2, [r3]
 8013766:	2800      	cmp	r0, #0
 8013768:	d1f7      	bne.n	801375a <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801376a:	f103 0208 	add.w	r2, r3, #8
 801376e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013772:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013776:	f103 0508 	add.w	r5, r3, #8
 801377a:	e845 2000 	strex	r0, r2, [r5]
 801377e:	2800      	cmp	r0, #0
 8013780:	d1f3      	bne.n	801376a <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8013782:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8013784:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8013786:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013788:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801378e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013792:	e843 2000 	strex	r0, r2, [r3]
 8013796:	2800      	cmp	r0, #0
 8013798:	d1f7      	bne.n	801378a <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801379a:	4620      	mov	r0, r4
 801379c:	f7ff fdb4 	bl	8013308 <HAL_UARTEx_RxEventCallback>
 80137a0:	e6cf      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 80137a2:	f7f2 fbbb 	bl	8005f1c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80137a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80137aa:	e6ca      	b.n	8013542 <HAL_UART_IRQHandler+0x3e>
 80137ac:	04000120 	.word	0x04000120
 80137b0:	0801313d 	.word	0x0801313d

080137b4 <UART_SetConfig>:
{
 80137b4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80137b6:	6842      	ldr	r2, [r0, #4]
{
 80137b8:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80137ba:	4bac      	ldr	r3, [pc, #688]	; (8013a6c <UART_SetConfig+0x2b8>)
 80137bc:	429a      	cmp	r2, r3
 80137be:	f200 80bb 	bhi.w	8013938 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80137c2:	68a3      	ldr	r3, [r4, #8]
 80137c4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80137c8:	d002      	beq.n	80137d0 <UART_SetConfig+0x1c>
 80137ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80137ce:	d179      	bne.n	80138c4 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80137d0:	68e3      	ldr	r3, [r4, #12]
 80137d2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80137d6:	d17e      	bne.n	80138d6 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80137d8:	6a23      	ldr	r3, [r4, #32]
 80137da:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80137de:	f040 8084 	bne.w	80138ea <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80137e2:	6923      	ldr	r3, [r4, #16]
 80137e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80137e8:	d002      	beq.n	80137f0 <UART_SetConfig+0x3c>
 80137ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80137ee:	d163      	bne.n	80138b8 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80137f0:	6963      	ldr	r3, [r4, #20]
 80137f2:	f033 020c 	bics.w	r2, r3, #12
 80137f6:	d146      	bne.n	8013886 <UART_SetConfig+0xd2>
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d044      	beq.n	8013886 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80137fc:	69a3      	ldr	r3, [r4, #24]
 80137fe:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013802:	d149      	bne.n	8013898 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013804:	69e0      	ldr	r0, [r4, #28]
 8013806:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 801380a:	d14e      	bne.n	80138aa <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801380c:	6921      	ldr	r1, [r4, #16]
 801380e:	68a2      	ldr	r2, [r4, #8]
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	430a      	orrs	r2, r1
 8013814:	6961      	ldr	r1, [r4, #20]
 8013816:	681d      	ldr	r5, [r3, #0]
 8013818:	430a      	orrs	r2, r1
 801381a:	4995      	ldr	r1, [pc, #596]	; (8013a70 <UART_SetConfig+0x2bc>)
 801381c:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801381e:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013820:	430a      	orrs	r2, r1
 8013822:	4302      	orrs	r2, r0
 8013824:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013826:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013828:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801382a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 801382e:	4329      	orrs	r1, r5
 8013830:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8013832:	6a21      	ldr	r1, [r4, #32]
 8013834:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013836:	6899      	ldr	r1, [r3, #8]
 8013838:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801383c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 801383e:	498d      	ldr	r1, [pc, #564]	; (8013a74 <UART_SetConfig+0x2c0>)
 8013840:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013842:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013844:	d07e      	beq.n	8013944 <UART_SetConfig+0x190>
 8013846:	4a8c      	ldr	r2, [pc, #560]	; (8013a78 <UART_SetConfig+0x2c4>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d054      	beq.n	80138f6 <UART_SetConfig+0x142>
 801384c:	4a8b      	ldr	r2, [pc, #556]	; (8013a7c <UART_SetConfig+0x2c8>)
 801384e:	4293      	cmp	r3, r2
 8013850:	f000 812a 	beq.w	8013aa8 <UART_SetConfig+0x2f4>
 8013854:	4a8a      	ldr	r2, [pc, #552]	; (8013a80 <UART_SetConfig+0x2cc>)
 8013856:	4293      	cmp	r3, r2
 8013858:	f000 8137 	beq.w	8013aca <UART_SetConfig+0x316>
 801385c:	4a89      	ldr	r2, [pc, #548]	; (8013a84 <UART_SetConfig+0x2d0>)
 801385e:	4293      	cmp	r3, r2
 8013860:	f000 809e 	beq.w	80139a0 <UART_SetConfig+0x1ec>
 8013864:	4a88      	ldr	r2, [pc, #544]	; (8013a88 <UART_SetConfig+0x2d4>)
 8013866:	4293      	cmp	r3, r2
 8013868:	f000 80d1 	beq.w	8013a0e <UART_SetConfig+0x25a>
 801386c:	4a87      	ldr	r2, [pc, #540]	; (8013a8c <UART_SetConfig+0x2d8>)
 801386e:	4293      	cmp	r3, r2
 8013870:	f000 8151 	beq.w	8013b16 <UART_SetConfig+0x362>
 8013874:	4a86      	ldr	r2, [pc, #536]	; (8013a90 <UART_SetConfig+0x2dc>)
 8013876:	4293      	cmp	r3, r2
 8013878:	f000 8164 	beq.w	8013b44 <UART_SetConfig+0x390>
    switch (clocksource)
 801387c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 801387e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013880:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013884:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013886:	f640 3176 	movw	r1, #2934	; 0xb76
 801388a:	4882      	ldr	r0, [pc, #520]	; (8013a94 <UART_SetConfig+0x2e0>)
 801388c:	f7f1 fff0 	bl	8005870 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013890:	69a3      	ldr	r3, [r4, #24]
 8013892:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013896:	d0b5      	beq.n	8013804 <UART_SetConfig+0x50>
 8013898:	487e      	ldr	r0, [pc, #504]	; (8013a94 <UART_SetConfig+0x2e0>)
 801389a:	f640 3177 	movw	r1, #2935	; 0xb77
 801389e:	f7f1 ffe7 	bl	8005870 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80138a2:	69e0      	ldr	r0, [r4, #28]
 80138a4:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80138a8:	d0b0      	beq.n	801380c <UART_SetConfig+0x58>
 80138aa:	487a      	ldr	r0, [pc, #488]	; (8013a94 <UART_SetConfig+0x2e0>)
 80138ac:	f640 3178 	movw	r1, #2936	; 0xb78
 80138b0:	f7f1 ffde 	bl	8005870 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80138b4:	69e0      	ldr	r0, [r4, #28]
 80138b6:	e7a9      	b.n	801380c <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80138b8:	f640 3175 	movw	r1, #2933	; 0xb75
 80138bc:	4875      	ldr	r0, [pc, #468]	; (8013a94 <UART_SetConfig+0x2e0>)
 80138be:	f7f1 ffd7 	bl	8005870 <assert_failed>
 80138c2:	e795      	b.n	80137f0 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80138c4:	f640 3171 	movw	r1, #2929	; 0xb71
 80138c8:	4872      	ldr	r0, [pc, #456]	; (8013a94 <UART_SetConfig+0x2e0>)
 80138ca:	f7f1 ffd1 	bl	8005870 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80138ce:	68e3      	ldr	r3, [r4, #12]
 80138d0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80138d4:	d080      	beq.n	80137d8 <UART_SetConfig+0x24>
 80138d6:	f640 3172 	movw	r1, #2930	; 0xb72
 80138da:	486e      	ldr	r0, [pc, #440]	; (8013a94 <UART_SetConfig+0x2e0>)
 80138dc:	f7f1 ffc8 	bl	8005870 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80138e0:	6a23      	ldr	r3, [r4, #32]
 80138e2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80138e6:	f43f af7c 	beq.w	80137e2 <UART_SetConfig+0x2e>
 80138ea:	f640 3173 	movw	r1, #2931	; 0xb73
 80138ee:	4869      	ldr	r0, [pc, #420]	; (8013a94 <UART_SetConfig+0x2e0>)
 80138f0:	f7f1 ffbe 	bl	8005870 <assert_failed>
 80138f4:	e775      	b.n	80137e2 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80138f6:	4b68      	ldr	r3, [pc, #416]	; (8013a98 <UART_SetConfig+0x2e4>)
 80138f8:	4a68      	ldr	r2, [pc, #416]	; (8013a9c <UART_SetConfig+0x2e8>)
 80138fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138fe:	f003 030c 	and.w	r3, r3, #12
 8013902:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013904:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013908:	d033      	beq.n	8013972 <UART_SetConfig+0x1be>
    switch (clocksource)
 801390a:	2b08      	cmp	r3, #8
 801390c:	d8b6      	bhi.n	801387c <UART_SetConfig+0xc8>
 801390e:	a201      	add	r2, pc, #4	; (adr r2, 8013914 <UART_SetConfig+0x160>)
 8013910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013914:	080139cf 	.word	0x080139cf
 8013918:	0801395b 	.word	0x0801395b
 801391c:	08013a25 	.word	0x08013a25
 8013920:	0801387d 	.word	0x0801387d
 8013924:	080139c3 	.word	0x080139c3
 8013928:	0801387d 	.word	0x0801387d
 801392c:	0801387d 	.word	0x0801387d
 8013930:	0801387d 	.word	0x0801387d
 8013934:	080139e5 	.word	0x080139e5
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8013938:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 801393c:	4855      	ldr	r0, [pc, #340]	; (8013a94 <UART_SetConfig+0x2e0>)
 801393e:	f7f1 ff97 	bl	8005870 <assert_failed>
 8013942:	e73e      	b.n	80137c2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013944:	4b54      	ldr	r3, [pc, #336]	; (8013a98 <UART_SetConfig+0x2e4>)
 8013946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801394a:	f003 0303 	and.w	r3, r3, #3
 801394e:	3b01      	subs	r3, #1
 8013950:	2b02      	cmp	r3, #2
 8013952:	d90b      	bls.n	801396c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013954:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013958:	d066      	beq.n	8013a28 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 801395a:	f7fb f9d5 	bl	800ed08 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801395e:	2800      	cmp	r0, #0
 8013960:	d142      	bne.n	80139e8 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8013962:	2300      	movs	r3, #0
 8013964:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8013966:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801396a:	bd38      	pop	{r3, r4, r5, pc}
 801396c:	4a4c      	ldr	r2, [pc, #304]	; (8013aa0 <UART_SetConfig+0x2ec>)
 801396e:	5cd3      	ldrb	r3, [r2, r3]
 8013970:	e7c8      	b.n	8013904 <UART_SetConfig+0x150>
    switch (clocksource)
 8013972:	2b08      	cmp	r3, #8
 8013974:	d882      	bhi.n	801387c <UART_SetConfig+0xc8>
 8013976:	a201      	add	r2, pc, #4	; (adr r2, 801397c <UART_SetConfig+0x1c8>)
 8013978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801397c:	08013a65 	.word	0x08013a65
 8013980:	08013a29 	.word	0x08013a29
 8013984:	08013b0d 	.word	0x08013b0d
 8013988:	0801387d 	.word	0x0801387d
 801398c:	08013a5f 	.word	0x08013a5f
 8013990:	0801387d 	.word	0x0801387d
 8013994:	0801387d 	.word	0x0801387d
 8013998:	0801387d 	.word	0x0801387d
 801399c:	08013b11 	.word	0x08013b11
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139a0:	4b3d      	ldr	r3, [pc, #244]	; (8013a98 <UART_SetConfig+0x2e4>)
 80139a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80139aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139ae:	d036      	beq.n	8013a1e <UART_SetConfig+0x26a>
 80139b0:	d810      	bhi.n	80139d4 <UART_SetConfig+0x220>
 80139b2:	b14b      	cbz	r3, 80139c8 <UART_SetConfig+0x214>
 80139b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139b8:	f47f af60 	bne.w	801387c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80139c0:	d04d      	beq.n	8013a5e <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 80139c2:	f7fb f839 	bl	800ea38 <HAL_RCC_GetSysClockFreq>
        break;
 80139c6:	e7ca      	b.n	801395e <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80139cc:	d04a      	beq.n	8013a64 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80139ce:	f7fb f98b 	bl	800ece8 <HAL_RCC_GetPCLK1Freq>
        break;
 80139d2:	e7c4      	b.n	801395e <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139d8:	f47f af50 	bne.w	801387c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80139e0:	f000 8096 	beq.w	8013b10 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80139e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80139e8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80139ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80139ee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80139f2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80139f6:	f1a3 0110 	sub.w	r1, r3, #16
 80139fa:	4291      	cmp	r1, r2
 80139fc:	f63f af3e 	bhi.w	801387c <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013a00:	6822      	ldr	r2, [r4, #0]
 8013a02:	2000      	movs	r0, #0
 8013a04:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8013a06:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013a08:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013a0c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a0e:	4b22      	ldr	r3, [pc, #136]	; (8013a98 <UART_SetConfig+0x2e4>)
 8013a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a1c:	d168      	bne.n	8013af0 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013a22:	d073      	beq.n	8013b0c <UART_SetConfig+0x358>
    switch (clocksource)
 8013a24:	481f      	ldr	r0, [pc, #124]	; (8013aa4 <UART_SetConfig+0x2f0>)
 8013a26:	e7df      	b.n	80139e8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013a28:	f7fb f96e 	bl	800ed08 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d098      	beq.n	8013962 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013a30:	0043      	lsls	r3, r0, #1
 8013a32:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a34:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013a38:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013a3c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a40:	f1a3 0210 	sub.w	r2, r3, #16
 8013a44:	428a      	cmp	r2, r1
 8013a46:	f63f af19 	bhi.w	801387c <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013a4a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013a4e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8013a52:	6821      	ldr	r1, [r4, #0]
 8013a54:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013a56:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	60cb      	str	r3, [r1, #12]
 8013a5c:	e70f      	b.n	801387e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8013a5e:	f7fa ffeb 	bl	800ea38 <HAL_RCC_GetSysClockFreq>
        break;
 8013a62:	e7e3      	b.n	8013a2c <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013a64:	f7fb f940 	bl	800ece8 <HAL_RCC_GetPCLK1Freq>
        break;
 8013a68:	e7e0      	b.n	8013a2c <UART_SetConfig+0x278>
 8013a6a:	bf00      	nop
 8013a6c:	019bfcc0 	.word	0x019bfcc0
 8013a70:	efff69f3 	.word	0xefff69f3
 8013a74:	40011000 	.word	0x40011000
 8013a78:	40004400 	.word	0x40004400
 8013a7c:	40004800 	.word	0x40004800
 8013a80:	40004c00 	.word	0x40004c00
 8013a84:	40005000 	.word	0x40005000
 8013a88:	40011400 	.word	0x40011400
 8013a8c:	40007800 	.word	0x40007800
 8013a90:	40007c00 	.word	0x40007c00
 8013a94:	0802e174 	.word	0x0802e174
 8013a98:	40023800 	.word	0x40023800
 8013a9c:	0802e1b4 	.word	0x0802e1b4
 8013aa0:	0802e1b0 	.word	0x0802e1b0
 8013aa4:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013aa8:	4b32      	ldr	r3, [pc, #200]	; (8013b74 <UART_SetConfig+0x3c0>)
 8013aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013aae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013ab2:	2b20      	cmp	r3, #32
 8013ab4:	d0b3      	beq.n	8013a1e <UART_SetConfig+0x26a>
 8013ab6:	d805      	bhi.n	8013ac4 <UART_SetConfig+0x310>
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d085      	beq.n	80139c8 <UART_SetConfig+0x214>
 8013abc:	2b10      	cmp	r3, #16
 8013abe:	f43f af7d 	beq.w	80139bc <UART_SetConfig+0x208>
 8013ac2:	e6db      	b.n	801387c <UART_SetConfig+0xc8>
 8013ac4:	2b30      	cmp	r3, #48	; 0x30
 8013ac6:	d089      	beq.n	80139dc <UART_SetConfig+0x228>
 8013ac8:	e6d8      	b.n	801387c <UART_SetConfig+0xc8>
 8013aca:	4b2a      	ldr	r3, [pc, #168]	; (8013b74 <UART_SetConfig+0x3c0>)
 8013acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013ad4:	2b80      	cmp	r3, #128	; 0x80
 8013ad6:	d0a2      	beq.n	8013a1e <UART_SetConfig+0x26a>
 8013ad8:	d806      	bhi.n	8013ae8 <UART_SetConfig+0x334>
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f43f af74 	beq.w	80139c8 <UART_SetConfig+0x214>
 8013ae0:	2b40      	cmp	r3, #64	; 0x40
 8013ae2:	f43f af6b 	beq.w	80139bc <UART_SetConfig+0x208>
 8013ae6:	e6c9      	b.n	801387c <UART_SetConfig+0xc8>
 8013ae8:	2bc0      	cmp	r3, #192	; 0xc0
 8013aea:	f43f af77 	beq.w	80139dc <UART_SetConfig+0x228>
 8013aee:	e6c5      	b.n	801387c <UART_SetConfig+0xc8>
 8013af0:	d807      	bhi.n	8013b02 <UART_SetConfig+0x34e>
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	f43f af2e 	beq.w	8013954 <UART_SetConfig+0x1a0>
 8013af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013afc:	f43f af5e 	beq.w	80139bc <UART_SetConfig+0x208>
 8013b00:	e6bc      	b.n	801387c <UART_SetConfig+0xc8>
 8013b02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013b06:	f43f af69 	beq.w	80139dc <UART_SetConfig+0x228>
 8013b0a:	e6b7      	b.n	801387c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b0c:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <UART_SetConfig+0x3c4>)
 8013b0e:	e790      	b.n	8013a32 <UART_SetConfig+0x27e>
    switch (clocksource)
 8013b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013b14:	e78d      	b.n	8013a32 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b16:	4b17      	ldr	r3, [pc, #92]	; (8013b74 <UART_SetConfig+0x3c0>)
 8013b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013b24:	f43f af7b 	beq.w	8013a1e <UART_SetConfig+0x26a>
 8013b28:	d807      	bhi.n	8013b3a <UART_SetConfig+0x386>
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	f43f af4c 	beq.w	80139c8 <UART_SetConfig+0x214>
 8013b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b34:	f43f af42 	beq.w	80139bc <UART_SetConfig+0x208>
 8013b38:	e6a0      	b.n	801387c <UART_SetConfig+0xc8>
 8013b3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013b3e:	f43f af4d 	beq.w	80139dc <UART_SetConfig+0x228>
 8013b42:	e69b      	b.n	801387c <UART_SetConfig+0xc8>
 8013b44:	4b0b      	ldr	r3, [pc, #44]	; (8013b74 <UART_SetConfig+0x3c0>)
 8013b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b52:	f43f af64 	beq.w	8013a1e <UART_SetConfig+0x26a>
 8013b56:	d807      	bhi.n	8013b68 <UART_SetConfig+0x3b4>
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f43f af35 	beq.w	80139c8 <UART_SetConfig+0x214>
 8013b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b62:	f43f af2b 	beq.w	80139bc <UART_SetConfig+0x208>
 8013b66:	e689      	b.n	801387c <UART_SetConfig+0xc8>
 8013b68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013b6c:	f43f af36 	beq.w	80139dc <UART_SetConfig+0x228>
 8013b70:	e684      	b.n	801387c <UART_SetConfig+0xc8>
 8013b72:	bf00      	nop
 8013b74:	40023800 	.word	0x40023800
 8013b78:	01e84800 	.word	0x01e84800

08013b7c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b7e:	2bff      	cmp	r3, #255	; 0xff
{
 8013b80:	b510      	push	{r4, lr}
 8013b82:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013b84:	d87b      	bhi.n	8013c7e <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b86:	07da      	lsls	r2, r3, #31
 8013b88:	d50a      	bpl.n	8013ba0 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013b8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013b8c:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8013b90:	f040 808e 	bne.w	8013cb0 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b94:	6820      	ldr	r0, [r4, #0]
 8013b96:	6842      	ldr	r2, [r0, #4]
 8013b98:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013b9c:	430a      	orrs	r2, r1
 8013b9e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ba0:	0798      	lsls	r0, r3, #30
 8013ba2:	d50a      	bpl.n	8013bba <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013ba4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013ba6:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8013baa:	f040 8089 	bne.w	8013cc0 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013bae:	6820      	ldr	r0, [r4, #0]
 8013bb0:	6842      	ldr	r2, [r0, #4]
 8013bb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013bb6:	430a      	orrs	r2, r1
 8013bb8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013bba:	0759      	lsls	r1, r3, #29
 8013bbc:	d50a      	bpl.n	8013bd4 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013bbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013bc0:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8013bc4:	f040 8084 	bne.w	8013cd0 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013bc8:	6820      	ldr	r0, [r4, #0]
 8013bca:	6842      	ldr	r2, [r0, #4]
 8013bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013bd0:	430a      	orrs	r2, r1
 8013bd2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013bd4:	071a      	lsls	r2, r3, #28
 8013bd6:	d509      	bpl.n	8013bec <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bda:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8013bde:	d17f      	bne.n	8013ce0 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013be0:	6820      	ldr	r0, [r4, #0]
 8013be2:	6842      	ldr	r2, [r0, #4]
 8013be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013be8:	430a      	orrs	r2, r1
 8013bea:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013bec:	06d8      	lsls	r0, r3, #27
 8013bee:	d509      	bpl.n	8013c04 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013bf0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013bf2:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8013bf6:	d17b      	bne.n	8013cf0 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013bf8:	6820      	ldr	r0, [r4, #0]
 8013bfa:	6882      	ldr	r2, [r0, #8]
 8013bfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013c00:	430a      	orrs	r2, r1
 8013c02:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c04:	0699      	lsls	r1, r3, #26
 8013c06:	d509      	bpl.n	8013c1c <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013c08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013c0a:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8013c0e:	d177      	bne.n	8013d00 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c10:	6820      	ldr	r0, [r4, #0]
 8013c12:	6882      	ldr	r2, [r0, #8]
 8013c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013c1c:	065a      	lsls	r2, r3, #25
 8013c1e:	d521      	bpl.n	8013c64 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013c20:	4b46      	ldr	r3, [pc, #280]	; (8013d3c <UART_AdvFeatureConfig+0x1c0>)
 8013c22:	6822      	ldr	r2, [r4, #0]
 8013c24:	4846      	ldr	r0, [pc, #280]	; (8013d40 <UART_AdvFeatureConfig+0x1c4>)
 8013c26:	4947      	ldr	r1, [pc, #284]	; (8013d44 <UART_AdvFeatureConfig+0x1c8>)
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	bf18      	it	ne
 8013c2c:	4282      	cmpne	r2, r0
 8013c2e:	bf14      	ite	ne
 8013c30:	2301      	movne	r3, #1
 8013c32:	2300      	moveq	r3, #0
 8013c34:	428a      	cmp	r2, r1
 8013c36:	bf0c      	ite	eq
 8013c38:	2300      	moveq	r3, #0
 8013c3a:	f003 0301 	andne.w	r3, r3, #1
 8013c3e:	b113      	cbz	r3, 8013c46 <UART_AdvFeatureConfig+0xca>
 8013c40:	4b41      	ldr	r3, [pc, #260]	; (8013d48 <UART_AdvFeatureConfig+0x1cc>)
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d16b      	bne.n	8013d1e <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013c46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013c48:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8013c4c:	d160      	bne.n	8013d10 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c4e:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c50:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c54:	684b      	ldr	r3, [r1, #4]
 8013c56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013c5a:	ea43 0302 	orr.w	r3, r3, r2
 8013c5e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c60:	d014      	beq.n	8013c8c <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c64:	061b      	lsls	r3, r3, #24
 8013c66:	d509      	bpl.n	8013c7c <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013c68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013c6a:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8013c6e:	d118      	bne.n	8013ca2 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c70:	6821      	ldr	r1, [r4, #0]
 8013c72:	684b      	ldr	r3, [r1, #4]
 8013c74:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	604b      	str	r3, [r1, #4]
}
 8013c7c:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013c7e:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8013c82:	4832      	ldr	r0, [pc, #200]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013c84:	f7f1 fdf4 	bl	8005870 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c8a:	e77c      	b.n	8013b86 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013c8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013c8e:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8013c92:	d14a      	bne.n	8013d2a <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c94:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c98:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8013c9c:	4302      	orrs	r2, r0
 8013c9e:	604a      	str	r2, [r1, #4]
 8013ca0:	e7e0      	b.n	8013c64 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013ca2:	f640 4136 	movw	r1, #3126	; 0xc36
 8013ca6:	4829      	ldr	r0, [pc, #164]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013ca8:	f7f1 fde2 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013cac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013cae:	e7df      	b.n	8013c70 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013cb0:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8013cb4:	4825      	ldr	r0, [pc, #148]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013cb6:	f7f1 fddb 	bl	8005870 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013cba:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8013cbe:	e769      	b.n	8013b94 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013cc0:	f640 4105 	movw	r1, #3077	; 0xc05
 8013cc4:	4821      	ldr	r0, [pc, #132]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013cc6:	f7f1 fdd3 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013cca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cce:	e76e      	b.n	8013bae <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013cd0:	f640 410c 	movw	r1, #3084	; 0xc0c
 8013cd4:	481d      	ldr	r0, [pc, #116]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013cd6:	f7f1 fdcb 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013cda:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cde:	e773      	b.n	8013bc8 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013ce0:	f640 4113 	movw	r1, #3091	; 0xc13
 8013ce4:	4819      	ldr	r0, [pc, #100]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013ce6:	f7f1 fdc3 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cee:	e777      	b.n	8013be0 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013cf0:	f640 411a 	movw	r1, #3098	; 0xc1a
 8013cf4:	4815      	ldr	r0, [pc, #84]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013cf6:	f7f1 fdbb 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013cfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cfe:	e77b      	b.n	8013bf8 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013d00:	f640 4121 	movw	r1, #3105	; 0xc21
 8013d04:	4811      	ldr	r0, [pc, #68]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013d06:	f7f1 fdb3 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013d0a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d0e:	e77f      	b.n	8013c10 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013d10:	f640 4129 	movw	r1, #3113	; 0xc29
 8013d14:	480d      	ldr	r0, [pc, #52]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013d16:	f7f1 fdab 	bl	8005870 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013d1c:	e797      	b.n	8013c4e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013d1e:	f640 4128 	movw	r1, #3112	; 0xc28
 8013d22:	480a      	ldr	r0, [pc, #40]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013d24:	f7f1 fda4 	bl	8005870 <assert_failed>
 8013d28:	e78d      	b.n	8013c46 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013d2a:	f640 412e 	movw	r1, #3118	; 0xc2e
 8013d2e:	4807      	ldr	r0, [pc, #28]	; (8013d4c <UART_AdvFeatureConfig+0x1d0>)
 8013d30:	f7f1 fd9e 	bl	8005870 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013d34:	6821      	ldr	r1, [r4, #0]
 8013d36:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013d38:	e7ac      	b.n	8013c94 <UART_AdvFeatureConfig+0x118>
 8013d3a:	bf00      	nop
 8013d3c:	40011000 	.word	0x40011000
 8013d40:	40004400 	.word	0x40004400
 8013d44:	40004800 	.word	0x40004800
 8013d48:	40011400 	.word	0x40011400
 8013d4c:	0802e174 	.word	0x0802e174

08013d50 <UART_WaitOnFlagUntilTimeout>:
{
 8013d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d58:	4681      	mov	r9, r0
 8013d5a:	460f      	mov	r7, r1
 8013d5c:	4616      	mov	r6, r2
 8013d5e:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d60:	6805      	ldr	r5, [r0, #0]
 8013d62:	e002      	b.n	8013d6a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8013d64:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013d68:	d10c      	bne.n	8013d84 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d6a:	69ec      	ldr	r4, [r5, #28]
 8013d6c:	ea37 0304 	bics.w	r3, r7, r4
 8013d70:	bf0c      	ite	eq
 8013d72:	f04f 0c01 	moveq.w	ip, #1
 8013d76:	f04f 0c00 	movne.w	ip, #0
 8013d7a:	45b4      	cmp	ip, r6
 8013d7c:	d0f2      	beq.n	8013d64 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8013d7e:	2000      	movs	r0, #0
}
 8013d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d84:	f7f5 f9de 	bl	8009144 <HAL_GetTick>
 8013d88:	eba0 000a 	sub.w	r0, r0, sl
 8013d8c:	4540      	cmp	r0, r8
 8013d8e:	d82d      	bhi.n	8013dec <UART_WaitOnFlagUntilTimeout+0x9c>
 8013d90:	f1b8 0f00 	cmp.w	r8, #0
 8013d94:	d02a      	beq.n	8013dec <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013d96:	f8d9 5000 	ldr.w	r5, [r9]
 8013d9a:	682b      	ldr	r3, [r5, #0]
 8013d9c:	462a      	mov	r2, r5
 8013d9e:	0759      	lsls	r1, r3, #29
 8013da0:	d5e3      	bpl.n	8013d6a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013da2:	69eb      	ldr	r3, [r5, #28]
 8013da4:	051b      	lsls	r3, r3, #20
 8013da6:	d5e0      	bpl.n	8013d6a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013dac:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dae:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013db6:	e842 3100 	strex	r1, r3, [r2]
 8013dba:	2900      	cmp	r1, #0
 8013dbc:	d1f7      	bne.n	8013dae <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dbe:	f102 0308 	add.w	r3, r2, #8
 8013dc2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013dc6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dca:	f102 0008 	add.w	r0, r2, #8
 8013dce:	e840 3100 	strex	r1, r3, [r0]
 8013dd2:	2900      	cmp	r1, #0
 8013dd4:	d1f3      	bne.n	8013dbe <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8013dd6:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8013dd8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8013dda:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8013dde:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013de2:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013de6:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8013dea:	e7c9      	b.n	8013d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8013dec:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013df0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013df8:	e842 3100 	strex	r1, r3, [r2]
 8013dfc:	2900      	cmp	r1, #0
 8013dfe:	d1f7      	bne.n	8013df0 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e00:	f102 0308 	add.w	r3, r2, #8
 8013e04:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e08:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e0c:	f102 0008 	add.w	r0, r2, #8
 8013e10:	e840 3100 	strex	r1, r3, [r0]
 8013e14:	2900      	cmp	r1, #0
 8013e16:	d1f3      	bne.n	8013e00 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8013e18:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8013e1a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8013e1c:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8013e20:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013e24:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8013e28:	e7aa      	b.n	8013d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8013e2a:	bf00      	nop

08013e2c <HAL_UART_Transmit>:
{
 8013e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e30:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8013e32:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8013e34:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8013e36:	2b20      	cmp	r3, #32
 8013e38:	d14b      	bne.n	8013ed2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8013e3a:	460d      	mov	r5, r1
 8013e3c:	2900      	cmp	r1, #0
 8013e3e:	d044      	beq.n	8013eca <HAL_UART_Transmit+0x9e>
 8013e40:	fab2 f982 	clz	r9, r2
 8013e44:	4617      	mov	r7, r2
 8013e46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8013e4a:	2a00      	cmp	r2, #0
 8013e4c:	d03d      	beq.n	8013eca <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8013e4e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8013e52:	4604      	mov	r4, r0
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d03c      	beq.n	8013ed2 <HAL_UART_Transmit+0xa6>
 8013e58:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e5a:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8013e5e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013e62:	2321      	movs	r3, #33	; 0x21
 8013e64:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8013e66:	f7f5 f96d 	bl	8009144 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e6a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8013e6c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8013e6e:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8013e76:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e7a:	d040      	beq.n	8013efe <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8013e7c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8013e80:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8013e82:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8013e84:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8013e88:	b973      	cbnz	r3, 8013ea8 <HAL_UART_Transmit+0x7c>
 8013e8a:	e02a      	b.n	8013ee2 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e8c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013e90:	6823      	ldr	r3, [r4, #0]
 8013e92:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8013e94:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8013e98:	3a01      	subs	r2, #1
 8013e9a:	b292      	uxth	r2, r2
 8013e9c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8013ea0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8013ea4:	b292      	uxth	r2, r2
 8013ea6:	b1e2      	cbz	r2, 8013ee2 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013ea8:	4643      	mov	r3, r8
 8013eaa:	2200      	movs	r2, #0
 8013eac:	2180      	movs	r1, #128	; 0x80
 8013eae:	4620      	mov	r0, r4
 8013eb0:	9600      	str	r6, [sp, #0]
 8013eb2:	f7ff ff4d 	bl	8013d50 <UART_WaitOnFlagUntilTimeout>
 8013eb6:	b980      	cbnz	r0, 8013eda <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8013eb8:	2d00      	cmp	r5, #0
 8013eba:	d1e7      	bne.n	8013e8c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013ebc:	f839 3b02 	ldrh.w	r3, [r9], #2
 8013ec0:	6822      	ldr	r2, [r4, #0]
 8013ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ec6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8013ec8:	e7e4      	b.n	8013e94 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8013eca:	2001      	movs	r0, #1
}
 8013ecc:	b003      	add	sp, #12
 8013ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8013ed2:	2002      	movs	r0, #2
}
 8013ed4:	b003      	add	sp, #12
 8013ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8013eda:	2003      	movs	r0, #3
}
 8013edc:	b003      	add	sp, #12
 8013ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013ee2:	4643      	mov	r3, r8
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	2140      	movs	r1, #64	; 0x40
 8013ee8:	4620      	mov	r0, r4
 8013eea:	9600      	str	r6, [sp, #0]
 8013eec:	f7ff ff30 	bl	8013d50 <UART_WaitOnFlagUntilTimeout>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d1f2      	bne.n	8013eda <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8013ef4:	2320      	movs	r3, #32
 8013ef6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8013ef8:	b003      	add	sp, #12
 8013efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013efe:	6923      	ldr	r3, [r4, #16]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1bb      	bne.n	8013e7c <HAL_UART_Transmit+0x50>
 8013f04:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8013f06:	461d      	mov	r5, r3
 8013f08:	e7b8      	b.n	8013e7c <HAL_UART_Transmit+0x50>
 8013f0a:	bf00      	nop

08013f0c <UART_CheckIdleState>:
{
 8013f0c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f0e:	2600      	movs	r6, #0
{
 8013f10:	4604      	mov	r4, r0
 8013f12:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f14:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8013f18:	f7f5 f914 	bl	8009144 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013f1c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8013f1e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	0712      	lsls	r2, r2, #28
 8013f24:	d40c      	bmi.n	8013f40 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	075b      	lsls	r3, r3, #29
 8013f2a:	d418      	bmi.n	8013f5e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f2c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8013f2e:	2220      	movs	r2, #32
  return HAL_OK;
 8013f30:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8013f32:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8013f34:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8013f38:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f3a:	6623      	str	r3, [r4, #96]	; 0x60
}
 8013f3c:	b002      	add	sp, #8
 8013f3e:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013f40:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8013f44:	4603      	mov	r3, r0
 8013f46:	4632      	mov	r2, r6
 8013f48:	4620      	mov	r0, r4
 8013f4a:	9100      	str	r1, [sp, #0]
 8013f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013f50:	f7ff fefe 	bl	8013d50 <UART_WaitOnFlagUntilTimeout>
 8013f54:	b978      	cbnz	r0, 8013f76 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013f56:	6823      	ldr	r3, [r4, #0]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	075b      	lsls	r3, r3, #29
 8013f5c:	d5e6      	bpl.n	8013f2c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013f5e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8013f62:	462b      	mov	r3, r5
 8013f64:	2200      	movs	r2, #0
 8013f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013f6a:	9000      	str	r0, [sp, #0]
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f7ff feef 	bl	8013d50 <UART_WaitOnFlagUntilTimeout>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d0da      	beq.n	8013f2c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8013f76:	2003      	movs	r0, #3
}
 8013f78:	b002      	add	sp, #8
 8013f7a:	bd70      	pop	{r4, r5, r6, pc}

08013f7c <HAL_UART_Init>:
  if (huart == NULL)
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	f000 8099 	beq.w	80140b4 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8013f82:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8013f84:	6802      	ldr	r2, [r0, #0]
{
 8013f86:	b510      	push	{r4, lr}
 8013f88:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d051      	beq.n	8014032 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8013f8e:	4b4d      	ldr	r3, [pc, #308]	; (80140c4 <HAL_UART_Init+0x148>)
 8013f90:	484d      	ldr	r0, [pc, #308]	; (80140c8 <HAL_UART_Init+0x14c>)
 8013f92:	494e      	ldr	r1, [pc, #312]	; (80140cc <HAL_UART_Init+0x150>)
 8013f94:	429a      	cmp	r2, r3
 8013f96:	bf18      	it	ne
 8013f98:	4282      	cmpne	r2, r0
 8013f9a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8013f9e:	bf14      	ite	ne
 8013fa0:	2301      	movne	r3, #1
 8013fa2:	2300      	moveq	r3, #0
 8013fa4:	428a      	cmp	r2, r1
 8013fa6:	bf0c      	ite	eq
 8013fa8:	2300      	moveq	r3, #0
 8013faa:	f003 0301 	andne.w	r3, r3, #1
 8013fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fb2:	4282      	cmp	r2, r0
 8013fb4:	bf0c      	ite	eq
 8013fb6:	2300      	moveq	r3, #0
 8013fb8:	f003 0301 	andne.w	r3, r3, #1
 8013fbc:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8013fc0:	428a      	cmp	r2, r1
 8013fc2:	bf0c      	ite	eq
 8013fc4:	2300      	moveq	r3, #0
 8013fc6:	f003 0301 	andne.w	r3, r3, #1
 8013fca:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8013fce:	4282      	cmp	r2, r0
 8013fd0:	bf0c      	ite	eq
 8013fd2:	2300      	moveq	r3, #0
 8013fd4:	f003 0301 	andne.w	r3, r3, #1
 8013fd8:	428a      	cmp	r2, r1
 8013fda:	bf0c      	ite	eq
 8013fdc:	2300      	moveq	r3, #0
 8013fde:	f003 0301 	andne.w	r3, r3, #1
 8013fe2:	b113      	cbz	r3, 8013fea <HAL_UART_Init+0x6e>
 8013fe4:	4b3a      	ldr	r3, [pc, #232]	; (80140d0 <HAL_UART_Init+0x154>)
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d166      	bne.n	80140b8 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8013fea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d057      	beq.n	80140a0 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8013ff0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013ff2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013ff4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8013ff6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013ff8:	6813      	ldr	r3, [r2, #0]
 8013ffa:	f023 0301 	bic.w	r3, r3, #1
 8013ffe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014000:	f7ff fbd8 	bl	80137b4 <UART_SetConfig>
 8014004:	2801      	cmp	r0, #1
 8014006:	d049      	beq.n	801409c <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801400a:	2b00      	cmp	r3, #0
 801400c:	d14e      	bne.n	80140ac <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801400e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8014010:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014012:	685a      	ldr	r2, [r3, #4]
 8014014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014018:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801401a:	689a      	ldr	r2, [r3, #8]
 801401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014020:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	f042 0201 	orr.w	r2, r2, #1
}
 8014028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 801402c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801402e:	f7ff bf6d 	b.w	8013f0c <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8014032:	4b24      	ldr	r3, [pc, #144]	; (80140c4 <HAL_UART_Init+0x148>)
 8014034:	4824      	ldr	r0, [pc, #144]	; (80140c8 <HAL_UART_Init+0x14c>)
 8014036:	4925      	ldr	r1, [pc, #148]	; (80140cc <HAL_UART_Init+0x150>)
 8014038:	429a      	cmp	r2, r3
 801403a:	bf18      	it	ne
 801403c:	4282      	cmpne	r2, r0
 801403e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8014042:	bf14      	ite	ne
 8014044:	2301      	movne	r3, #1
 8014046:	2300      	moveq	r3, #0
 8014048:	428a      	cmp	r2, r1
 801404a:	bf0c      	ite	eq
 801404c:	2300      	moveq	r3, #0
 801404e:	f003 0301 	andne.w	r3, r3, #1
 8014052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014056:	4282      	cmp	r2, r0
 8014058:	bf0c      	ite	eq
 801405a:	2300      	moveq	r3, #0
 801405c:	f003 0301 	andne.w	r3, r3, #1
 8014060:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8014064:	428a      	cmp	r2, r1
 8014066:	bf0c      	ite	eq
 8014068:	2300      	moveq	r3, #0
 801406a:	f003 0301 	andne.w	r3, r3, #1
 801406e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8014072:	4282      	cmp	r2, r0
 8014074:	bf0c      	ite	eq
 8014076:	2300      	moveq	r3, #0
 8014078:	f003 0301 	andne.w	r3, r3, #1
 801407c:	428a      	cmp	r2, r1
 801407e:	bf0c      	ite	eq
 8014080:	2300      	moveq	r3, #0
 8014082:	f003 0301 	andne.w	r3, r3, #1
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0af      	beq.n	8013fea <HAL_UART_Init+0x6e>
 801408a:	4b11      	ldr	r3, [pc, #68]	; (80140d0 <HAL_UART_Init+0x154>)
 801408c:	429a      	cmp	r2, r3
 801408e:	d0ac      	beq.n	8013fea <HAL_UART_Init+0x6e>
 8014090:	f240 1131 	movw	r1, #305	; 0x131
 8014094:	480f      	ldr	r0, [pc, #60]	; (80140d4 <HAL_UART_Init+0x158>)
 8014096:	f7f1 fbeb 	bl	8005870 <assert_failed>
 801409a:	e7a6      	b.n	8013fea <HAL_UART_Init+0x6e>
}
 801409c:	2001      	movs	r0, #1
 801409e:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 80140a0:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80140a2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80140a6:	f7f3 fc7f 	bl	80079a8 <HAL_UART_MspInit>
 80140aa:	e7a1      	b.n	8013ff0 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 80140ac:	4620      	mov	r0, r4
 80140ae:	f7ff fd65 	bl	8013b7c <UART_AdvFeatureConfig>
 80140b2:	e7ac      	b.n	801400e <HAL_UART_Init+0x92>
}
 80140b4:	2001      	movs	r0, #1
 80140b6:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80140b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80140bc:	4805      	ldr	r0, [pc, #20]	; (80140d4 <HAL_UART_Init+0x158>)
 80140be:	f7f1 fbd7 	bl	8005870 <assert_failed>
 80140c2:	e792      	b.n	8013fea <HAL_UART_Init+0x6e>
 80140c4:	40011000 	.word	0x40011000
 80140c8:	40004400 	.word	0x40004400
 80140cc:	40004800 	.word	0x40004800
 80140d0:	40007c00 	.word	0x40007c00
 80140d4:	0802e174 	.word	0x0802e174

080140d8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 80140d8:	2800      	cmp	r0, #0
 80140da:	d04a      	beq.n	8014172 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80140dc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	460e      	mov	r6, r1
 80140e4:	4604      	mov	r4, r0
 80140e6:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80140e8:	d13d      	bne.n	8014166 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80140ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d034      	beq.n	801415a <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 80140f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80140f2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80140f4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80140f6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80140f8:	6813      	ldr	r3, [r2, #0]
 80140fa:	f023 0301 	bic.w	r3, r3, #1
 80140fe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014100:	f7ff fb58 	bl	80137b4 <UART_SetConfig>
 8014104:	2801      	cmp	r0, #1
 8014106:	d026      	beq.n	8014156 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801410a:	bb03      	cbnz	r3, 801414e <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801410c:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801410e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014112:	685a      	ldr	r2, [r3, #4]
 8014114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014118:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801411a:	689a      	ldr	r2, [r3, #8]
 801411c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014120:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8014122:	d00d      	beq.n	8014140 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8014124:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8014126:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8014128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801412c:	4315      	orrs	r5, r2
 801412e:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8014130:	681a      	ldr	r2, [r3, #0]
 8014132:	f042 0201 	orr.w	r2, r2, #1
}
 8014136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 801413a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801413c:	f7ff bee6 	b.w	8013f0c <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8014140:	6859      	ldr	r1, [r3, #4]
 8014142:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8014146:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801414a:	605e      	str	r6, [r3, #4]
 801414c:	e7ea      	b.n	8014124 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801414e:	4620      	mov	r0, r4
 8014150:	f7ff fd14 	bl	8013b7c <UART_AdvFeatureConfig>
 8014154:	e7da      	b.n	801410c <HAL_MultiProcessor_Init+0x34>
}
 8014156:	2001      	movs	r0, #1
 8014158:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801415a:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801415c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8014160:	f7f3 fc22 	bl	80079a8 <HAL_UART_MspInit>
 8014164:	e7c4      	b.n	80140f0 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8014166:	f240 211d 	movw	r1, #541	; 0x21d
 801416a:	4803      	ldr	r0, [pc, #12]	; (8014178 <HAL_MultiProcessor_Init+0xa0>)
 801416c:	f7f1 fb80 	bl	8005870 <assert_failed>
 8014170:	e7bb      	b.n	80140ea <HAL_MultiProcessor_Init+0x12>
}
 8014172:	2001      	movs	r0, #1
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	0802e174 	.word	0x0802e174

0801417c <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 801417c:	6883      	ldr	r3, [r0, #8]
{
 801417e:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8014180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8014184:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8014188:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 801418a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 801418e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8014192:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8014194:	d04f      	beq.n	8014236 <UART_Start_Receive_IT+0xba>
 8014196:	2b00      	cmp	r3, #0
 8014198:	d043      	beq.n	8014222 <UART_Start_Receive_IT+0xa6>
 801419a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801419e:	d057      	beq.n	8014250 <UART_Start_Receive_IT+0xd4>
 80141a0:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141a4:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80141a6:	2322      	movs	r3, #34	; 0x22
 80141a8:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80141ae:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141b0:	f102 0308 	add.w	r3, r2, #8
 80141b4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141b8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141bc:	f102 0408 	add.w	r4, r2, #8
 80141c0:	e844 3100 	strex	r1, r3, [r4]
 80141c4:	2900      	cmp	r1, #0
 80141c6:	d1f3      	bne.n	80141b0 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141c8:	6883      	ldr	r3, [r0, #8]
 80141ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141ce:	d011      	beq.n	80141f4 <UART_Start_Receive_IT+0x78>
 80141d0:	4c23      	ldr	r4, [pc, #140]	; (8014260 <UART_Start_Receive_IT+0xe4>)
 80141d2:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 80141d4:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 80141d8:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 80141da:	b18b      	cbz	r3, 8014200 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141dc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80141e0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141e4:	e842 3100 	strex	r1, r3, [r2]
 80141e8:	2900      	cmp	r1, #0
 80141ea:	d1f7      	bne.n	80141dc <UART_Start_Receive_IT+0x60>
}
 80141ec:	2000      	movs	r0, #0
 80141ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141f2:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141f4:	6903      	ldr	r3, [r0, #16]
 80141f6:	bb33      	cbnz	r3, 8014246 <UART_Start_Receive_IT+0xca>
 80141f8:	491a      	ldr	r1, [pc, #104]	; (8014264 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 80141fa:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 80141fe:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014200:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014204:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014208:	e842 3100 	strex	r1, r3, [r2]
 801420c:	2900      	cmp	r1, #0
 801420e:	d0ed      	beq.n	80141ec <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014210:	e852 3f00 	ldrex	r3, [r2]
 8014214:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014218:	e842 3100 	strex	r1, r3, [r2]
 801421c:	2900      	cmp	r1, #0
 801421e:	d1ef      	bne.n	8014200 <UART_Start_Receive_IT+0x84>
 8014220:	e7e4      	b.n	80141ec <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8014222:	6903      	ldr	r3, [r0, #16]
 8014224:	b91b      	cbnz	r3, 801422e <UART_Start_Receive_IT+0xb2>
 8014226:	23ff      	movs	r3, #255	; 0xff
 8014228:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801422c:	e7ba      	b.n	80141a4 <UART_Start_Receive_IT+0x28>
 801422e:	237f      	movs	r3, #127	; 0x7f
 8014230:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014234:	e7b6      	b.n	80141a4 <UART_Start_Receive_IT+0x28>
 8014236:	6903      	ldr	r3, [r0, #16]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d1f4      	bne.n	8014226 <UART_Start_Receive_IT+0xaa>
 801423c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8014240:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014244:	e7ae      	b.n	80141a4 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8014246:	4b06      	ldr	r3, [pc, #24]	; (8014260 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8014248:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 801424c:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801424e:	e7c5      	b.n	80141dc <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8014250:	6903      	ldr	r3, [r0, #16]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d0eb      	beq.n	801422e <UART_Start_Receive_IT+0xb2>
 8014256:	233f      	movs	r3, #63	; 0x3f
 8014258:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801425c:	e7a2      	b.n	80141a4 <UART_Start_Receive_IT+0x28>
 801425e:	bf00      	nop
 8014260:	0801330d 	.word	0x0801330d
 8014264:	080133ad 	.word	0x080133ad

08014268 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8014268:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801426a:	2b20      	cmp	r3, #32
 801426c:	d11e      	bne.n	80142ac <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 801426e:	b1d9      	cbz	r1, 80142a8 <HAL_UART_Receive_IT+0x40>
 8014270:	fab2 f382 	clz	r3, r2
 8014274:	095b      	lsrs	r3, r3, #5
 8014276:	b1ba      	cbz	r2, 80142a8 <HAL_UART_Receive_IT+0x40>
{
 8014278:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801427a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801427e:	2c01      	cmp	r4, #1
 8014280:	d016      	beq.n	80142b0 <HAL_UART_Receive_IT+0x48>
 8014282:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014284:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014286:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8014288:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801428c:	6863      	ldr	r3, [r4, #4]
 801428e:	021b      	lsls	r3, r3, #8
 8014290:	d507      	bpl.n	80142a2 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014292:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801429a:	e844 3500 	strex	r5, r3, [r4]
 801429e:	2d00      	cmp	r5, #0
 80142a0:	d1f7      	bne.n	8014292 <HAL_UART_Receive_IT+0x2a>
}
 80142a2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80142a4:	f7ff bf6a 	b.w	801417c <UART_Start_Receive_IT>
      return HAL_ERROR;
 80142a8:	2001      	movs	r0, #1
}
 80142aa:	4770      	bx	lr
    return HAL_BUSY;
 80142ac:	2002      	movs	r0, #2
 80142ae:	4770      	bx	lr
 80142b0:	2002      	movs	r0, #2
}
 80142b2:	bc30      	pop	{r4, r5}
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop

080142b8 <UART_Start_Receive_DMA>:
{
 80142b8:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80142ba:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142bc:	2500      	movs	r5, #0
{
 80142be:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80142c0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142c2:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 80142c6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80142ca:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80142cc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80142ce:	b168      	cbz	r0, 80142ec <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80142d0:	4e1f      	ldr	r6, [pc, #124]	; (8014350 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80142d2:	4613      	mov	r3, r2
 80142d4:	460a      	mov	r2, r1
 80142d6:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80142d8:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80142da:	4e1e      	ldr	r6, [pc, #120]	; (8014354 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80142dc:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 80142de:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80142e0:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80142e2:	4e1d      	ldr	r6, [pc, #116]	; (8014358 <UART_Start_Receive_DMA+0xa0>)
 80142e4:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80142e6:	f7f6 f8f7 	bl	800a4d8 <HAL_DMA_Start_IT>
 80142ea:	bb40      	cbnz	r0, 801433e <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80142ec:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80142ee:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80142f0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80142f4:	b14b      	cbz	r3, 801430a <UART_Start_Receive_DMA+0x52>
 80142f6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142f8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014300:	e843 2100 	strex	r1, r2, [r3]
 8014304:	2900      	cmp	r1, #0
 8014306:	d1f7      	bne.n	80142f8 <UART_Start_Receive_DMA+0x40>
 8014308:	e000      	b.n	801430c <UART_Start_Receive_DMA+0x54>
 801430a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801430c:	f103 0208 	add.w	r2, r3, #8
 8014310:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014314:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014318:	f103 0008 	add.w	r0, r3, #8
 801431c:	e840 2100 	strex	r1, r2, [r0]
 8014320:	2900      	cmp	r1, #0
 8014322:	d1f3      	bne.n	801430c <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014324:	f103 0208 	add.w	r2, r3, #8
 8014328:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801432c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014330:	f103 0108 	add.w	r1, r3, #8
 8014334:	e841 2000 	strex	r0, r2, [r1]
 8014338:	2800      	cmp	r0, #0
 801433a:	d1f3      	bne.n	8014324 <UART_Start_Receive_DMA+0x6c>
}
 801433c:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801433e:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8014340:	2320      	movs	r3, #32
      return HAL_ERROR;
 8014342:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8014344:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014348:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 801434c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	08013469 	.word	0x08013469
 8014354:	0801344d 	.word	0x0801344d
 8014358:	080130e5 	.word	0x080130e5

0801435c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 801435c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801435e:	2b20      	cmp	r3, #32
 8014360:	d11e      	bne.n	80143a0 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8014362:	b1d9      	cbz	r1, 801439c <HAL_UART_Receive_DMA+0x40>
 8014364:	fab2 f382 	clz	r3, r2
 8014368:	095b      	lsrs	r3, r3, #5
 801436a:	b1ba      	cbz	r2, 801439c <HAL_UART_Receive_DMA+0x40>
{
 801436c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801436e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8014372:	2c01      	cmp	r4, #1
 8014374:	d016      	beq.n	80143a4 <HAL_UART_Receive_DMA+0x48>
 8014376:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014378:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801437a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 801437c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014380:	6863      	ldr	r3, [r4, #4]
 8014382:	021b      	lsls	r3, r3, #8
 8014384:	d507      	bpl.n	8014396 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014386:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801438a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801438e:	e844 3500 	strex	r5, r3, [r4]
 8014392:	2d00      	cmp	r5, #0
 8014394:	d1f7      	bne.n	8014386 <HAL_UART_Receive_DMA+0x2a>
}
 8014396:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8014398:	f7ff bf8e 	b.w	80142b8 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 801439c:	2001      	movs	r0, #1
}
 801439e:	4770      	bx	lr
    return HAL_BUSY;
 80143a0:	2002      	movs	r0, #2
 80143a2:	4770      	bx	lr
 80143a4:	2002      	movs	r0, #2
}
 80143a6:	bc30      	pop	{r4, r5}
 80143a8:	4770      	bx	lr
 80143aa:	bf00      	nop

080143ac <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80143ac:	2800      	cmp	r0, #0
 80143ae:	f000 808a 	beq.w	80144c6 <HAL_RS485Ex_Init+0x11a>
{
 80143b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80143b6:	4c47      	ldr	r4, [pc, #284]	; (80144d4 <HAL_RS485Ex_Init+0x128>)
 80143b8:	4617      	mov	r7, r2
 80143ba:	461d      	mov	r5, r3
 80143bc:	4a46      	ldr	r2, [pc, #280]	; (80144d8 <HAL_RS485Ex_Init+0x12c>)
 80143be:	6803      	ldr	r3, [r0, #0]
 80143c0:	460e      	mov	r6, r1
 80143c2:	4680      	mov	r8, r0
 80143c4:	42a3      	cmp	r3, r4
 80143c6:	bf18      	it	ne
 80143c8:	4293      	cmpne	r3, r2
 80143ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80143ce:	bf14      	ite	ne
 80143d0:	2401      	movne	r4, #1
 80143d2:	2400      	moveq	r4, #0
 80143d4:	4293      	cmp	r3, r2
 80143d6:	bf0c      	ite	eq
 80143d8:	2400      	moveq	r4, #0
 80143da:	f004 0401 	andne.w	r4, r4, #1
 80143de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80143e2:	4293      	cmp	r3, r2
 80143e4:	bf0c      	ite	eq
 80143e6:	2400      	moveq	r4, #0
 80143e8:	f004 0401 	andne.w	r4, r4, #1
 80143ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80143f0:	4293      	cmp	r3, r2
 80143f2:	bf0c      	ite	eq
 80143f4:	2400      	moveq	r4, #0
 80143f6:	f004 0401 	andne.w	r4, r4, #1
 80143fa:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80143fe:	4293      	cmp	r3, r2
 8014400:	bf0c      	ite	eq
 8014402:	2400      	moveq	r4, #0
 8014404:	f004 0401 	andne.w	r4, r4, #1
 8014408:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 801440c:	4293      	cmp	r3, r2
 801440e:	bf0c      	ite	eq
 8014410:	2400      	moveq	r4, #0
 8014412:	f004 0401 	andne.w	r4, r4, #1
 8014416:	b11c      	cbz	r4, 8014420 <HAL_RS485Ex_Init+0x74>
 8014418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801441c:	4293      	cmp	r3, r2
 801441e:	d154      	bne.n	80144ca <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8014420:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8014424:	d14a      	bne.n	80144bc <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8014426:	2f1f      	cmp	r7, #31
 8014428:	d843      	bhi.n	80144b2 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 801442a:	2d1f      	cmp	r5, #31
 801442c:	d83c      	bhi.n	80144a8 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 801442e:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8014432:	b39b      	cbz	r3, 801449c <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8014434:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8014438:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801443a:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 801443c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014440:	6813      	ldr	r3, [r2, #0]
 8014442:	f023 0301 	bic.w	r3, r3, #1
 8014446:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014448:	f7ff f9b4 	bl	80137b4 <UART_SetConfig>
 801444c:	2801      	cmp	r0, #1
 801444e:	d022      	beq.n	8014496 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014450:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014454:	b9db      	cbnz	r3, 801448e <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8014456:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801445a:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801445c:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801445e:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8014460:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8014464:	4d1d      	ldr	r5, [pc, #116]	; (80144dc <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8014466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801446a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801446c:	6899      	ldr	r1, [r3, #8]
 801446e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8014472:	430e      	orrs	r6, r1
 8014474:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	4015      	ands	r5, r2
 801447a:	432f      	orrs	r7, r5
 801447c:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	f042 0201 	orr.w	r2, r2, #1
}
 8014484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8014488:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801448a:	f7ff bd3f 	b.w	8013f0c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 801448e:	4640      	mov	r0, r8
 8014490:	f7ff fb74 	bl	8013b7c <UART_AdvFeatureConfig>
 8014494:	e7df      	b.n	8014456 <HAL_RS485Ex_Init+0xaa>
}
 8014496:	2001      	movs	r0, #1
 8014498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 801449c:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801449e:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80144a2:	f7f3 fa81 	bl	80079a8 <HAL_UART_MspInit>
 80144a6:	e7c5      	b.n	8014434 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80144a8:	21aa      	movs	r1, #170	; 0xaa
 80144aa:	480d      	ldr	r0, [pc, #52]	; (80144e0 <HAL_RS485Ex_Init+0x134>)
 80144ac:	f7f1 f9e0 	bl	8005870 <assert_failed>
 80144b0:	e7bd      	b.n	801442e <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80144b2:	21a7      	movs	r1, #167	; 0xa7
 80144b4:	480a      	ldr	r0, [pc, #40]	; (80144e0 <HAL_RS485Ex_Init+0x134>)
 80144b6:	f7f1 f9db 	bl	8005870 <assert_failed>
 80144ba:	e7b6      	b.n	801442a <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80144bc:	21a4      	movs	r1, #164	; 0xa4
 80144be:	4808      	ldr	r0, [pc, #32]	; (80144e0 <HAL_RS485Ex_Init+0x134>)
 80144c0:	f7f1 f9d6 	bl	8005870 <assert_failed>
 80144c4:	e7af      	b.n	8014426 <HAL_RS485Ex_Init+0x7a>
}
 80144c6:	2001      	movs	r0, #1
 80144c8:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80144ca:	21a1      	movs	r1, #161	; 0xa1
 80144cc:	4804      	ldr	r0, [pc, #16]	; (80144e0 <HAL_RS485Ex_Init+0x134>)
 80144ce:	f7f1 f9cf 	bl	8005870 <assert_failed>
 80144d2:	e7a5      	b.n	8014420 <HAL_RS485Ex_Init+0x74>
 80144d4:	40011000 	.word	0x40011000
 80144d8:	40004400 	.word	0x40004400
 80144dc:	fc00ffff 	.word	0xfc00ffff
 80144e0:	0802e1c4 	.word	0x0802e1c4

080144e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80144e4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80144e6:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80144e8:	4a11      	ldr	r2, [pc, #68]	; (8014530 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80144ea:	9301      	str	r3, [sp, #4]
 80144ec:	e002      	b.n	80144f4 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80144ee:	6903      	ldr	r3, [r0, #16]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	db07      	blt.n	8014504 <USB_CoreReset+0x20>
    if (++count > 200000U)
 80144f4:	9b01      	ldr	r3, [sp, #4]
 80144f6:	3301      	adds	r3, #1
 80144f8:	4293      	cmp	r3, r2
 80144fa:	9301      	str	r3, [sp, #4]
 80144fc:	d9f7      	bls.n	80144ee <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 80144fe:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8014500:	b002      	add	sp, #8
 8014502:	4770      	bx	lr
  count = 0U;
 8014504:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014506:	4a0a      	ldr	r2, [pc, #40]	; (8014530 <USB_CoreReset+0x4c>)
  count = 0U;
 8014508:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801450a:	6903      	ldr	r3, [r0, #16]
 801450c:	f043 0301 	orr.w	r3, r3, #1
 8014510:	6103      	str	r3, [r0, #16]
 8014512:	e003      	b.n	801451c <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014514:	6903      	ldr	r3, [r0, #16]
 8014516:	f013 0301 	ands.w	r3, r3, #1
 801451a:	d005      	beq.n	8014528 <USB_CoreReset+0x44>
    if (++count > 200000U)
 801451c:	9b01      	ldr	r3, [sp, #4]
 801451e:	3301      	adds	r3, #1
 8014520:	4293      	cmp	r3, r2
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	d9f6      	bls.n	8014514 <USB_CoreReset+0x30>
 8014526:	e7ea      	b.n	80144fe <USB_CoreReset+0x1a>
  return HAL_OK;
 8014528:	4618      	mov	r0, r3
}
 801452a:	b002      	add	sp, #8
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	00030d40 	.word	0x00030d40

08014534 <USB_CoreInit>:
{
 8014534:	b084      	sub	sp, #16
 8014536:	b510      	push	{r4, lr}
 8014538:	f10d 0c0c 	add.w	ip, sp, #12
 801453c:	4604      	mov	r4, r0
 801453e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014542:	9b08      	ldr	r3, [sp, #32]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d122      	bne.n	801458e <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014548:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801454a:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 801454e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014550:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8014554:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014556:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014558:	68c2      	ldr	r2, [r0, #12]
 801455a:	ea03 0302 	and.w	r3, r3, r2
 801455e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014560:	68c3      	ldr	r3, [r0, #12]
 8014562:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8014566:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8014568:	d01c      	beq.n	80145a4 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 801456a:	4620      	mov	r0, r4
 801456c:	f7ff ffba 	bl	80144e4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8014570:	9b06      	ldr	r3, [sp, #24]
 8014572:	2b01      	cmp	r3, #1
 8014574:	d107      	bne.n	8014586 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014576:	68a3      	ldr	r3, [r4, #8]
 8014578:	f043 0306 	orr.w	r3, r3, #6
 801457c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801457e:	68a3      	ldr	r3, [r4, #8]
 8014580:	f043 0320 	orr.w	r3, r3, #32
 8014584:	60a3      	str	r3, [r4, #8]
}
 8014586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801458a:	b004      	add	sp, #16
 801458c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801458e:	68c3      	ldr	r3, [r0, #12]
 8014590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014594:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8014596:	f7ff ffa5 	bl	80144e4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801459a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80145a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80145a2:	e7e5      	b.n	8014570 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80145a4:	68c3      	ldr	r3, [r0, #12]
 80145a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80145aa:	60c3      	str	r3, [r0, #12]
 80145ac:	e7dd      	b.n	801456a <USB_CoreInit+0x36>
 80145ae:	bf00      	nop

080145b0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80145b0:	2a02      	cmp	r2, #2
{
 80145b2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80145b4:	d00b      	beq.n	80145ce <USB_SetTurnaroundTime+0x1e>
 80145b6:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80145ba:	68d9      	ldr	r1, [r3, #12]
}
 80145bc:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80145be:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80145c2:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80145c4:	68da      	ldr	r2, [r3, #12]
 80145c6:	ea42 020c 	orr.w	r2, r2, ip
 80145ca:	60da      	str	r2, [r3, #12]
}
 80145cc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80145ce:	4a23      	ldr	r2, [pc, #140]	; (801465c <USB_SetTurnaroundTime+0xac>)
 80145d0:	4823      	ldr	r0, [pc, #140]	; (8014660 <USB_SetTurnaroundTime+0xb0>)
 80145d2:	440a      	add	r2, r1
 80145d4:	4282      	cmp	r2, r0
 80145d6:	d92c      	bls.n	8014632 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80145d8:	4a22      	ldr	r2, [pc, #136]	; (8014664 <USB_SetTurnaroundTime+0xb4>)
 80145da:	4823      	ldr	r0, [pc, #140]	; (8014668 <USB_SetTurnaroundTime+0xb8>)
 80145dc:	440a      	add	r2, r1
 80145de:	4282      	cmp	r2, r0
 80145e0:	d92a      	bls.n	8014638 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80145e2:	4a22      	ldr	r2, [pc, #136]	; (801466c <USB_SetTurnaroundTime+0xbc>)
 80145e4:	4822      	ldr	r0, [pc, #136]	; (8014670 <USB_SetTurnaroundTime+0xc0>)
 80145e6:	440a      	add	r2, r1
 80145e8:	4282      	cmp	r2, r0
 80145ea:	d928      	bls.n	801463e <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80145ec:	4a21      	ldr	r2, [pc, #132]	; (8014674 <USB_SetTurnaroundTime+0xc4>)
 80145ee:	4822      	ldr	r0, [pc, #136]	; (8014678 <USB_SetTurnaroundTime+0xc8>)
 80145f0:	440a      	add	r2, r1
 80145f2:	4282      	cmp	r2, r0
 80145f4:	d326      	bcc.n	8014644 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80145f6:	4a21      	ldr	r2, [pc, #132]	; (801467c <USB_SetTurnaroundTime+0xcc>)
 80145f8:	4821      	ldr	r0, [pc, #132]	; (8014680 <USB_SetTurnaroundTime+0xd0>)
 80145fa:	440a      	add	r2, r1
 80145fc:	4282      	cmp	r2, r0
 80145fe:	d924      	bls.n	801464a <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014600:	4a20      	ldr	r2, [pc, #128]	; (8014684 <USB_SetTurnaroundTime+0xd4>)
 8014602:	4821      	ldr	r0, [pc, #132]	; (8014688 <USB_SetTurnaroundTime+0xd8>)
 8014604:	440a      	add	r2, r1
 8014606:	4282      	cmp	r2, r0
 8014608:	d322      	bcc.n	8014650 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801460a:	4a20      	ldr	r2, [pc, #128]	; (801468c <USB_SetTurnaroundTime+0xdc>)
 801460c:	4820      	ldr	r0, [pc, #128]	; (8014690 <USB_SetTurnaroundTime+0xe0>)
 801460e:	440a      	add	r2, r1
 8014610:	4282      	cmp	r2, r0
 8014612:	d3d0      	bcc.n	80145b6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014614:	4a1f      	ldr	r2, [pc, #124]	; (8014694 <USB_SetTurnaroundTime+0xe4>)
 8014616:	4820      	ldr	r0, [pc, #128]	; (8014698 <USB_SetTurnaroundTime+0xe8>)
 8014618:	440a      	add	r2, r1
 801461a:	4282      	cmp	r2, r0
 801461c:	d31b      	bcc.n	8014656 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801461e:	4a1f      	ldr	r2, [pc, #124]	; (801469c <USB_SetTurnaroundTime+0xec>)
 8014620:	481f      	ldr	r0, [pc, #124]	; (80146a0 <USB_SetTurnaroundTime+0xf0>)
 8014622:	440a      	add	r2, r1
 8014624:	4282      	cmp	r2, r0
 8014626:	bf34      	ite	cc
 8014628:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 801462c:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8014630:	e7c3      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 8014632:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 8014636:	e7c0      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 8014638:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 801463c:	e7bd      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 801463e:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8014642:	e7ba      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 8014644:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8014648:	e7b7      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 801464a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 801464e:	e7b4      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 8014650:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8014654:	e7b1      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 8014656:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801465a:	e7ae      	b.n	80145ba <USB_SetTurnaroundTime+0xa>
 801465c:	ff275340 	.word	0xff275340
 8014660:	000c34ff 	.word	0x000c34ff
 8014664:	ff1b1e40 	.word	0xff1b1e40
 8014668:	000f423f 	.word	0x000f423f
 801466c:	ff0bdc00 	.word	0xff0bdc00
 8014670:	00124f7f 	.word	0x00124f7f
 8014674:	fef98c80 	.word	0xfef98c80
 8014678:	0013d620 	.word	0x0013d620
 801467c:	fee5b660 	.word	0xfee5b660
 8014680:	0016e35f 	.word	0x0016e35f
 8014684:	feced300 	.word	0xfeced300
 8014688:	001b7740 	.word	0x001b7740
 801468c:	feb35bc0 	.word	0xfeb35bc0
 8014690:	002191c0 	.word	0x002191c0
 8014694:	fe91ca00 	.word	0xfe91ca00
 8014698:	00387520 	.word	0x00387520
 801469c:	fe5954e0 	.word	0xfe5954e0
 80146a0:	00419ce0 	.word	0x00419ce0

080146a4 <USB_EnableGlobalInt>:
{
 80146a4:	4603      	mov	r3, r0
}
 80146a6:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80146a8:	689a      	ldr	r2, [r3, #8]
 80146aa:	f042 0201 	orr.w	r2, r2, #1
 80146ae:	609a      	str	r2, [r3, #8]
}
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop

080146b4 <USB_DisableGlobalInt>:
{
 80146b4:	4603      	mov	r3, r0
}
 80146b6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80146b8:	689a      	ldr	r2, [r3, #8]
 80146ba:	f022 0201 	bic.w	r2, r2, #1
 80146be:	609a      	str	r2, [r3, #8]
}
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop

080146c4 <USB_SetCurrentMode>:
{
 80146c4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80146c6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80146c8:	2901      	cmp	r1, #1
{
 80146ca:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80146cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80146d0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80146d2:	d017      	beq.n	8014704 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80146d4:	b9a1      	cbnz	r1, 8014700 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80146d6:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80146d8:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80146da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80146de:	60c3      	str	r3, [r0, #12]
 80146e0:	e001      	b.n	80146e6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80146e2:	2c32      	cmp	r4, #50	; 0x32
 80146e4:	d00c      	beq.n	8014700 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80146e6:	2001      	movs	r0, #1
      ms++;
 80146e8:	4404      	add	r4, r0
      HAL_Delay(1U);
 80146ea:	f7f4 fd31 	bl	8009150 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80146ee:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80146f0:	07db      	lsls	r3, r3, #31
 80146f2:	d4f6      	bmi.n	80146e2 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80146f4:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80146f8:	fab0 f080 	clz	r0, r0
 80146fc:	0940      	lsrs	r0, r0, #5
}
 80146fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8014700:	2001      	movs	r0, #1
}
 8014702:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014704:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8014706:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801470c:	60c3      	str	r3, [r0, #12]
 801470e:	e001      	b.n	8014714 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014710:	2c32      	cmp	r4, #50	; 0x32
 8014712:	d0f5      	beq.n	8014700 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8014714:	2001      	movs	r0, #1
      ms++;
 8014716:	4404      	add	r4, r0
      HAL_Delay(1U);
 8014718:	f7f4 fd1a 	bl	8009150 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801471c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801471e:	07da      	lsls	r2, r3, #31
 8014720:	d5f6      	bpl.n	8014710 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8014722:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8014726:	fab0 f080 	clz	r0, r0
 801472a:	0940      	lsrs	r0, r0, #5
 801472c:	e7e7      	b.n	80146fe <USB_SetCurrentMode+0x3a>
 801472e:	bf00      	nop

08014730 <USB_FlushTxFifo>:
{
 8014730:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8014732:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014734:	4a11      	ldr	r2, [pc, #68]	; (801477c <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 8014736:	9301      	str	r3, [sp, #4]
 8014738:	e002      	b.n	8014740 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801473a:	6903      	ldr	r3, [r0, #16]
 801473c:	2b00      	cmp	r3, #0
 801473e:	db07      	blt.n	8014750 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8014740:	9b01      	ldr	r3, [sp, #4]
 8014742:	3301      	adds	r3, #1
 8014744:	4293      	cmp	r3, r2
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	d9f7      	bls.n	801473a <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801474a:	2003      	movs	r0, #3
}
 801474c:	b002      	add	sp, #8
 801474e:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014750:	0189      	lsls	r1, r1, #6
  count = 0U;
 8014752:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014754:	4a09      	ldr	r2, [pc, #36]	; (801477c <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014756:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801475a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801475c:	6101      	str	r1, [r0, #16]
 801475e:	e003      	b.n	8014768 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014760:	6903      	ldr	r3, [r0, #16]
 8014762:	f013 0320 	ands.w	r3, r3, #32
 8014766:	d005      	beq.n	8014774 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8014768:	9b01      	ldr	r3, [sp, #4]
 801476a:	3301      	adds	r3, #1
 801476c:	4293      	cmp	r3, r2
 801476e:	9301      	str	r3, [sp, #4]
 8014770:	d9f6      	bls.n	8014760 <USB_FlushTxFifo+0x30>
 8014772:	e7ea      	b.n	801474a <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8014774:	4618      	mov	r0, r3
}
 8014776:	b002      	add	sp, #8
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	00030d40 	.word	0x00030d40

08014780 <USB_FlushRxFifo>:
{
 8014780:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8014782:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014784:	4a10      	ldr	r2, [pc, #64]	; (80147c8 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8014786:	9301      	str	r3, [sp, #4]
 8014788:	e002      	b.n	8014790 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801478a:	6903      	ldr	r3, [r0, #16]
 801478c:	2b00      	cmp	r3, #0
 801478e:	db07      	blt.n	80147a0 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8014790:	9b01      	ldr	r3, [sp, #4]
 8014792:	3301      	adds	r3, #1
 8014794:	4293      	cmp	r3, r2
 8014796:	9301      	str	r3, [sp, #4]
 8014798:	d9f7      	bls.n	801478a <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 801479a:	2003      	movs	r0, #3
}
 801479c:	b002      	add	sp, #8
 801479e:	4770      	bx	lr
  count = 0U;
 80147a0:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80147a2:	2310      	movs	r3, #16
    if (++count > 200000U)
 80147a4:	4a08      	ldr	r2, [pc, #32]	; (80147c8 <USB_FlushRxFifo+0x48>)
  count = 0U;
 80147a6:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80147a8:	6103      	str	r3, [r0, #16]
 80147aa:	e003      	b.n	80147b4 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80147ac:	6903      	ldr	r3, [r0, #16]
 80147ae:	f013 0310 	ands.w	r3, r3, #16
 80147b2:	d005      	beq.n	80147c0 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80147b4:	9b01      	ldr	r3, [sp, #4]
 80147b6:	3301      	adds	r3, #1
 80147b8:	4293      	cmp	r3, r2
 80147ba:	9301      	str	r3, [sp, #4]
 80147bc:	d9f6      	bls.n	80147ac <USB_FlushRxFifo+0x2c>
 80147be:	e7ec      	b.n	801479a <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 80147c0:	4618      	mov	r0, r3
}
 80147c2:	b002      	add	sp, #8
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	00030d40 	.word	0x00030d40

080147cc <USB_DevInit>:
{
 80147cc:	b084      	sub	sp, #16
 80147ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147d2:	ad09      	add	r5, sp, #36	; 0x24
 80147d4:	4604      	mov	r4, r0
 80147d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80147d8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80147dc:	2300      	movs	r3, #0
 80147de:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 80147e0:	4619      	mov	r1, r3
 80147e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80147e6:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80147e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80147ec:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80147ee:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80147f0:	d1f7      	bne.n	80147e2 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80147f2:	2e00      	cmp	r6, #0
 80147f4:	f040 8092 	bne.w	801491c <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80147f8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80147fc:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8014800:	f043 0302 	orr.w	r3, r3, #2
 8014804:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801480c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014814:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014816:	6823      	ldr	r3, [r4, #0]
 8014818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801481c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801481e:	2300      	movs	r3, #0
 8014820:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801482a:	2b01      	cmp	r3, #1
 801482c:	d07d      	beq.n	801492a <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	f043 0303 	orr.w	r3, r3, #3
 8014834:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014836:	2110      	movs	r1, #16
 8014838:	4620      	mov	r0, r4
 801483a:	f7ff ff79 	bl	8014730 <USB_FlushTxFifo>
 801483e:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014840:	4620      	mov	r0, r4
 8014842:	f7ff ff9d 	bl	8014780 <USB_FlushRxFifo>
 8014846:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801484a:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801484c:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801484e:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8014850:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8014852:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014854:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8014856:	bf18      	it	ne
 8014858:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801485a:	b1ed      	cbz	r5, 8014898 <USB_DevInit+0xcc>
 801485c:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014860:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014864:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8014868:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801486a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 801486e:	e009      	b.n	8014884 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8014870:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014874:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014876:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801487a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801487e:	3320      	adds	r3, #32
 8014880:	4295      	cmp	r5, r2
 8014882:	d02c      	beq.n	80148de <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014884:	6819      	ldr	r1, [r3, #0]
 8014886:	2900      	cmp	r1, #0
 8014888:	daf2      	bge.n	8014870 <USB_DevInit+0xa4>
      if (i == 0U)
 801488a:	b112      	cbz	r2, 8014892 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801488c:	f8c3 8000 	str.w	r8, [r3]
 8014890:	e7f0      	b.n	8014874 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014892:	f8c3 9000 	str.w	r9, [r3]
 8014896:	e7ed      	b.n	8014874 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014898:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 801489a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80148a0:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80148a2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80148a6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80148a8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80148aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148ac:	b91b      	cbnz	r3, 80148b6 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80148ae:	69a3      	ldr	r3, [r4, #24]
 80148b0:	f043 0310 	orr.w	r3, r3, #16
 80148b4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80148b6:	69a2      	ldr	r2, [r4, #24]
 80148b8:	4b21      	ldr	r3, [pc, #132]	; (8014940 <USB_DevInit+0x174>)
 80148ba:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80148bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80148be:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80148c0:	b11a      	cbz	r2, 80148ca <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80148c2:	69a3      	ldr	r3, [r4, #24]
 80148c4:	f043 0308 	orr.w	r3, r3, #8
 80148c8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80148ca:	2e01      	cmp	r6, #1
 80148cc:	d103      	bne.n	80148d6 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80148ce:	69a2      	ldr	r2, [r4, #24]
 80148d0:	4b1c      	ldr	r3, [pc, #112]	; (8014944 <USB_DevInit+0x178>)
 80148d2:	4313      	orrs	r3, r2
 80148d4:	61a3      	str	r3, [r4, #24]
}
 80148d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148da:	b004      	add	sp, #16
 80148dc:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80148de:	2200      	movs	r2, #0
 80148e0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80148e4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80148e8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80148ec:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80148ee:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80148f2:	e009      	b.n	8014908 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80148f4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80148f8:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80148fa:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80148fe:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014902:	3320      	adds	r3, #32
 8014904:	4295      	cmp	r5, r2
 8014906:	d0c7      	beq.n	8014898 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014908:	6819      	ldr	r1, [r3, #0]
 801490a:	2900      	cmp	r1, #0
 801490c:	daf2      	bge.n	80148f4 <USB_DevInit+0x128>
      if (i == 0U)
 801490e:	b112      	cbz	r2, 8014916 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014910:	f8c3 8000 	str.w	r8, [r3]
 8014914:	e7f0      	b.n	80148f8 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014916:	f8c3 9000 	str.w	r9, [r3]
 801491a:	e7ed      	b.n	80148f8 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801491c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801491e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014926:	63a3      	str	r3, [r4, #56]	; 0x38
 8014928:	e779      	b.n	801481e <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 801492a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801492c:	b913      	cbnz	r3, 8014934 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014932:	e780      	b.n	8014836 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	f043 0301 	orr.w	r3, r3, #1
 801493a:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 801493c:	e77b      	b.n	8014836 <USB_DevInit+0x6a>
 801493e:	bf00      	nop
 8014940:	803c3800 	.word	0x803c3800
 8014944:	40000004 	.word	0x40000004

08014948 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014948:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801494c:	f013 0006 	ands.w	r0, r3, #6
 8014950:	d004      	beq.n	801495c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8014952:	f013 0f02 	tst.w	r3, #2
 8014956:	bf14      	ite	ne
 8014958:	2002      	movne	r0, #2
 801495a:	200f      	moveq	r0, #15
}
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop

08014960 <USB_ActivateEndpoint>:
{
 8014960:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8014962:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014964:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8014966:	2b01      	cmp	r3, #1
 8014968:	d020      	beq.n	80149ac <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801496a:	f002 0c0f 	and.w	ip, r2, #15
 801496e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014972:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014976:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801497a:	fa03 f30c 	lsl.w	r3, r3, ip
 801497e:	4323      	orrs	r3, r4
 8014980:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014984:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8014988:	041b      	lsls	r3, r3, #16
 801498a:	d40c      	bmi.n	80149a6 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801498c:	688b      	ldr	r3, [r1, #8]
 801498e:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8014992:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014996:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014998:	4914      	ldr	r1, [pc, #80]	; (80149ec <USB_ActivateEndpoint+0x8c>)
 801499a:	4323      	orrs	r3, r4
 801499c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80149a0:	4319      	orrs	r1, r3
 80149a2:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80149a6:	2000      	movs	r0, #0
 80149a8:	bc30      	pop	{r4, r5}
 80149aa:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80149ac:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80149b0:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80149b4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80149b8:	40ab      	lsls	r3, r5
 80149ba:	69e5      	ldr	r5, [r4, #28]
 80149bc:	432b      	orrs	r3, r5
 80149be:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80149c0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80149c4:	041c      	lsls	r4, r3, #16
 80149c6:	d4ee      	bmi.n	80149a6 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80149c8:	688b      	ldr	r3, [r1, #8]
 80149ca:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80149ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80149d2:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80149d4:	4905      	ldr	r1, [pc, #20]	; (80149ec <USB_ActivateEndpoint+0x8c>)
 80149d6:	432b      	orrs	r3, r5
 80149d8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80149dc:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 80149e0:	4311      	orrs	r1, r2
}
 80149e2:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80149e4:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80149e8:	2000      	movs	r0, #0
 80149ea:	4770      	bx	lr
 80149ec:	10008000 	.word	0x10008000

080149f0 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 80149f0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80149f2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80149f4:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80149f6:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80149fa:	d02a      	beq.n	8014a52 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80149fc:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014a00:	2a00      	cmp	r2, #0
 8014a02:	db19      	blt.n	8014a38 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014a08:	f003 030f 	and.w	r3, r3, #15
 8014a0c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014a10:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014a14:	4a23      	ldr	r2, [pc, #140]	; (8014aa4 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a16:	ea21 0103 	bic.w	r1, r1, r3
 8014a1a:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a1e:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014a22:	ea21 0303 	bic.w	r3, r1, r3
 8014a26:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014a2a:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014a2c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014a30:	401a      	ands	r2, r3
 8014a32:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8014a36:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014a38:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014a3c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014a40:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014a44:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014a48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014a4c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8014a50:	e7d8      	b.n	8014a04 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014a52:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014a56:	2a00      	cmp	r2, #0
 8014a58:	da0b      	bge.n	8014a72 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014a5a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014a5e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014a62:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014a66:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014a6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014a6e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014a72:	f003 020f 	and.w	r2, r3, #15
 8014a76:	2301      	movs	r3, #1
 8014a78:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014a7c:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014a7e:	4a0a      	ldr	r2, [pc, #40]	; (8014aa8 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014a80:	ea21 0103 	bic.w	r1, r1, r3
 8014a84:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014a88:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014a8c:	ea21 0303 	bic.w	r3, r1, r3
 8014a90:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014a94:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014a96:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8014a9a:	401a      	ands	r2, r3
 8014a9c:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8014aa0:	4770      	bx	lr
 8014aa2:	bf00      	nop
 8014aa4:	eff37800 	.word	0xeff37800
 8014aa8:	ec337800 	.word	0xec337800

08014aac <USB_EPStartXfer>:
{
 8014aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8014ab0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014ab2:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d051      	beq.n	8014b5e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014aba:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8014abe:	4c84      	ldr	r4, [pc, #528]	; (8014cd0 <USB_EPStartXfer+0x224>)
 8014ac0:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8014ac4:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8014ac8:	402c      	ands	r4, r5
 8014aca:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014acc:	4c81      	ldr	r4, [pc, #516]	; (8014cd4 <USB_EPStartXfer+0x228>)
 8014ace:	691d      	ldr	r5, [r3, #16]
 8014ad0:	402c      	ands	r4, r5
 8014ad2:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8014ad4:	694c      	ldr	r4, [r1, #20]
 8014ad6:	b384      	cbz	r4, 8014b3a <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014ad8:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8014ada:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014adc:	4e7e      	ldr	r6, [pc, #504]	; (8014cd8 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014ade:	442c      	add	r4, r5
 8014ae0:	f104 34ff 	add.w	r4, r4, #4294967295
 8014ae4:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014ae8:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8014aec:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014aee:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014af2:	691d      	ldr	r5, [r3, #16]
 8014af4:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014af8:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014afc:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014afe:	691d      	ldr	r5, [r3, #16]
 8014b00:	ea44 0405 	orr.w	r4, r4, r5
 8014b04:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014b06:	d025      	beq.n	8014b54 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8014b08:	78cb      	ldrb	r3, [r1, #3]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d10c      	bne.n	8014b28 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014b0e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014b12:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014b16:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014b1a:	bf0c      	ite	eq
 8014b1c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014b20:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014b24:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014b28:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014b2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014b30:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8014b34:	2000      	movs	r0, #0
 8014b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014b3a:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8014b3c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014b3e:	691d      	ldr	r5, [r3, #16]
 8014b40:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8014b44:	ea44 0405 	orr.w	r4, r4, r5
 8014b48:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014b4a:	691c      	ldr	r4, [r3, #16]
 8014b4c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8014b50:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014b52:	d1d9      	bne.n	8014b08 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8014b54:	68ca      	ldr	r2, [r1, #12]
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	d0d6      	beq.n	8014b08 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014b5a:	615a      	str	r2, [r3, #20]
 8014b5c:	e7d4      	b.n	8014b08 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8014b5e:	694d      	ldr	r5, [r1, #20]
 8014b60:	2d00      	cmp	r5, #0
 8014b62:	d03d      	beq.n	8014be0 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b64:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8014b68:	4e59      	ldr	r6, [pc, #356]	; (8014cd0 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014b6a:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b6e:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b72:	4f58      	ldr	r7, [pc, #352]	; (8014cd4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b74:	ea08 0606 	and.w	r6, r8, r6
 8014b78:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014b7c:	eb05 060e 	add.w	r6, r5, lr
 8014b80:	3e01      	subs	r6, #1
 8014b82:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b86:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8014b8a:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014b8c:	4e52      	ldr	r6, [pc, #328]	; (8014cd8 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b8e:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014b92:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8014b96:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014b9a:	433e      	orrs	r6, r7
 8014b9c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014ba0:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8014ba4:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014ba8:	433e      	orrs	r6, r7
 8014baa:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014bae:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8014bb2:	f891 e003 	ldrb.w	lr, [r1, #3]
 8014bb6:	f1be 0f01 	cmp.w	lr, #1
 8014bba:	d057      	beq.n	8014c6c <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8014bbc:	2a01      	cmp	r2, #1
 8014bbe:	d072      	beq.n	8014ca6 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014bc0:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bc4:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014bc8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bcc:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014bd0:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bd4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8014bd8:	4313      	orrs	r3, r2
 8014bda:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8014bde:	e7a9      	b.n	8014b34 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014be0:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8014be4:	4e3b      	ldr	r6, [pc, #236]	; (8014cd4 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014be6:	4c3a      	ldr	r4, [pc, #232]	; (8014cd0 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8014be8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014bea:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8014bee:	ea06 0607 	and.w	r6, r6, r7
 8014bf2:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014bf6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014bfa:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014bfe:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c02:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014c06:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014c0a:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c0e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8014c12:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8014c16:	d03a      	beq.n	8014c8e <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c18:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014c1c:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c20:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8014c24:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014c28:	d184      	bne.n	8014b34 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c2a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014c2e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c32:	6833      	ldr	r3, [r6, #0]
 8014c34:	bf0c      	ite	eq
 8014c36:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c3a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014c3e:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8014c40:	2a00      	cmp	r2, #0
 8014c42:	f47f af77 	bne.w	8014b34 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014c46:	b2ad      	uxth	r5, r5
 8014c48:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8014c4a:	08ad      	lsrs	r5, r5, #2
 8014c4c:	f43f af72 	beq.w	8014b34 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014c50:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014c52:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8014c56:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8014c5a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8014c5e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8014c62:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014c64:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8014c68:	d1f9      	bne.n	8014c5e <USB_EPStartXfer+0x1b2>
 8014c6a:	e763      	b.n	8014b34 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014c6c:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8014c6e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014c70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014c74:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014c76:	6933      	ldr	r3, [r6, #16]
 8014c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014c7c:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8014c7e:	d017      	beq.n	8014cb0 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c80:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8014c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014c88:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014c8c:	e7cd      	b.n	8014c2a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8014c8e:	690b      	ldr	r3, [r1, #16]
 8014c90:	b963      	cbnz	r3, 8014cac <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8014c92:	f1be 0f01 	cmp.w	lr, #1
 8014c96:	d00e      	beq.n	8014cb6 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c98:	6833      	ldr	r3, [r6, #0]
}
 8014c9a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ca0:	6033      	str	r3, [r6, #0]
}
 8014ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8014ca6:	690b      	ldr	r3, [r1, #16]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d0f5      	beq.n	8014c98 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014cac:	6173      	str	r3, [r6, #20]
 8014cae:	e7f0      	b.n	8014c92 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8014cb0:	690b      	ldr	r3, [r1, #16]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1fa      	bne.n	8014cac <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cb6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014cba:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014cbe:	6833      	ldr	r3, [r6, #0]
 8014cc0:	bf0c      	ite	eq
 8014cc2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014cc6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014cca:	6033      	str	r3, [r6, #0]
 8014ccc:	e7e4      	b.n	8014c98 <USB_EPStartXfer+0x1ec>
 8014cce:	bf00      	nop
 8014cd0:	fff80000 	.word	0xfff80000
 8014cd4:	e007ffff 	.word	0xe007ffff
 8014cd8:	1ff80000 	.word	0x1ff80000

08014cdc <USB_EP0StartXfer>:
{
 8014cdc:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8014cde:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014ce0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d027      	beq.n	8014d36 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014ce6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8014cea:	4c3c      	ldr	r4, [pc, #240]	; (8014ddc <USB_EP0StartXfer+0x100>)
 8014cec:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8014cf0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8014cf4:	402c      	ands	r4, r5
 8014cf6:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014cf8:	4c39      	ldr	r4, [pc, #228]	; (8014de0 <USB_EP0StartXfer+0x104>)
 8014cfa:	691d      	ldr	r5, [r3, #16]
 8014cfc:	402c      	ands	r4, r5
 8014cfe:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8014d00:	694c      	ldr	r4, [r1, #20]
 8014d02:	b9ac      	cbnz	r4, 8014d30 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8014d04:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d06:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014d08:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8014d0c:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d0e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014d12:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014d14:	691d      	ldr	r5, [r3, #16]
 8014d16:	ea44 0405 	orr.w	r4, r4, r5
 8014d1a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d1c:	d03e      	beq.n	8014d9c <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014d1e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014d22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014d26:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8014d2e:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8014d30:	688c      	ldr	r4, [r1, #8]
 8014d32:	614c      	str	r4, [r1, #20]
 8014d34:	e7e7      	b.n	8014d06 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d36:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8014d3a:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8014d40:	2d00      	cmp	r5, #0
 8014d42:	d030      	beq.n	8014da6 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014d44:	691f      	ldr	r7, [r3, #16]
 8014d46:	4e25      	ldr	r6, [pc, #148]	; (8014ddc <USB_EP0StartXfer+0x100>)
 8014d48:	403e      	ands	r6, r7
 8014d4a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014d4c:	4e24      	ldr	r6, [pc, #144]	; (8014de0 <USB_EP0StartXfer+0x104>)
 8014d4e:	691f      	ldr	r7, [r3, #16]
 8014d50:	403e      	ands	r6, r7
 8014d52:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8014d54:	688e      	ldr	r6, [r1, #8]
 8014d56:	42b5      	cmp	r5, r6
 8014d58:	d901      	bls.n	8014d5e <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8014d5a:	4635      	mov	r5, r6
 8014d5c:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014d5e:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014d60:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8014d64:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014d66:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014d6a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014d6c:	691e      	ldr	r6, [r3, #16]
 8014d6e:	ea45 0506 	orr.w	r5, r5, r6
 8014d72:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014d74:	d027      	beq.n	8014dc6 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d76:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014d78:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d7a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8014d7e:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014d80:	2900      	cmp	r1, #0
 8014d82:	d0d2      	beq.n	8014d2a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d84:	f004 020f 	and.w	r2, r4, #15
 8014d88:	2401      	movs	r4, #1
 8014d8a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8014d8e:	4094      	lsls	r4, r2
 8014d90:	431c      	orrs	r4, r3
 8014d92:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8014d96:	2000      	movs	r0, #0
 8014d98:	bcf0      	pop	{r4, r5, r6, r7}
 8014d9a:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d9c:	68ca      	ldr	r2, [r1, #12]
 8014d9e:	2a00      	cmp	r2, #0
 8014da0:	d0bd      	beq.n	8014d1e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014da2:	615a      	str	r2, [r3, #20]
 8014da4:	e7bb      	b.n	8014d1e <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014da6:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8014da8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014daa:	4d0d      	ldr	r5, [pc, #52]	; (8014de0 <USB_EP0StartXfer+0x104>)
 8014dac:	ea05 0506 	and.w	r5, r5, r6
 8014db0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014db2:	691d      	ldr	r5, [r3, #16]
 8014db4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014db8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014dba:	4d08      	ldr	r5, [pc, #32]	; (8014ddc <USB_EP0StartXfer+0x100>)
 8014dbc:	691e      	ldr	r6, [r3, #16]
 8014dbe:	ea05 0506 	and.w	r5, r5, r6
 8014dc2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014dc4:	d1d7      	bne.n	8014d76 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8014dc6:	690a      	ldr	r2, [r1, #16]
 8014dc8:	b102      	cbz	r2, 8014dcc <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014dca:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014dcc:	681a      	ldr	r2, [r3, #0]
}
 8014dce:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014dd0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8014dd4:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014dd6:	601a      	str	r2, [r3, #0]
}
 8014dd8:	4770      	bx	lr
 8014dda:	bf00      	nop
 8014ddc:	fff80000 	.word	0xfff80000
 8014de0:	e007ffff 	.word	0xe007ffff

08014de4 <USB_WritePacket>:
{
 8014de4:	b410      	push	{r4}
 8014de6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8014dea:	b964      	cbnz	r4, 8014e06 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014dec:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8014dee:	089b      	lsrs	r3, r3, #2
 8014df0:	d009      	beq.n	8014e06 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014df2:	3201      	adds	r2, #1
 8014df4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014df8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8014dfc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8014e00:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e02:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8014e04:	d1fa      	bne.n	8014dfc <USB_WritePacket+0x18>
}
 8014e06:	2000      	movs	r0, #0
 8014e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e0c:	4770      	bx	lr
 8014e0e:	bf00      	nop

08014e10 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8014e10:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8014e14:	b570      	push	{r4, r5, r6, lr}
 8014e16:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8014e18:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8014e1c:	d01a      	beq.n	8014e54 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014e1e:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8014e22:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8014e24:	2300      	movs	r3, #0
 8014e26:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014e28:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8014e2c:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014e2e:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8014e32:	d1f8      	bne.n	8014e26 <USB_ReadPacket+0x16>
    pDest++;
 8014e34:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8014e38:	b15e      	cbz	r6, 8014e52 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014e3a:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8014e3e:	4406      	add	r6, r0
 8014e40:	2200      	movs	r2, #0
 8014e42:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014e44:	fa21 f302 	lsr.w	r3, r1, r2
 8014e48:	3208      	adds	r2, #8
 8014e4a:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8014e4e:	42b0      	cmp	r0, r6
 8014e50:	d1f8      	bne.n	8014e44 <USB_ReadPacket+0x34>
}
 8014e52:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8014e54:	4608      	mov	r0, r1
 8014e56:	e7ef      	b.n	8014e38 <USB_ReadPacket+0x28>

08014e58 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8014e58:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014e5a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8014e5c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014e5e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8014e62:	d00c      	beq.n	8014e7e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014e64:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8014e68:	b10b      	cbz	r3, 8014e6e <USB_EPSetStall+0x16>
 8014e6a:	2a00      	cmp	r2, #0
 8014e6c:	da14      	bge.n	8014e98 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014e6e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014e76:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014e7e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8014e82:	2a00      	cmp	r2, #0
 8014e84:	db00      	blt.n	8014e88 <USB_EPSetStall+0x30>
 8014e86:	b973      	cbnz	r3, 8014ea6 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014e88:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014e90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8014e94:	2000      	movs	r0, #0
 8014e96:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014e98:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ea0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8014ea4:	e7e3      	b.n	8014e6e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014ea6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014eae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014eb2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014eba:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8014ebe:	e7e9      	b.n	8014e94 <USB_EPSetStall+0x3c>

08014ec0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8014ec0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014ec2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8014ec4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014ec6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8014eca:	d013      	beq.n	8014ef4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014ecc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014ed4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014ed8:	78cb      	ldrb	r3, [r1, #3]
 8014eda:	3b02      	subs	r3, #2
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	d901      	bls.n	8014ee4 <USB_EPClearStall+0x24>
}
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014ee4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014eec:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014ef4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014ef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014efc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014f00:	78cb      	ldrb	r3, [r1, #3]
 8014f02:	3b02      	subs	r3, #2
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d8eb      	bhi.n	8014ee0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014f08:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f10:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8014f14:	2000      	movs	r0, #0
 8014f16:	4770      	bx	lr

08014f18 <USB_SetDevAddress>:
{
 8014f18:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014f1a:	0109      	lsls	r1, r1, #4
}
 8014f1c:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014f1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014f22:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014f26:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8014f2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014f2e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8014f32:	4311      	orrs	r1, r2
 8014f34:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop

08014f3c <USB_DevConnect>:
{
 8014f3c:	4603      	mov	r3, r0
}
 8014f3e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014f40:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014f44:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014f48:	f022 0203 	bic.w	r2, r2, #3
 8014f4c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014f50:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8014f54:	f023 0302 	bic.w	r3, r3, #2
 8014f58:	604b      	str	r3, [r1, #4]
}
 8014f5a:	4770      	bx	lr

08014f5c <USB_DevDisconnect>:
{
 8014f5c:	4603      	mov	r3, r0
}
 8014f5e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014f60:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014f64:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014f68:	f022 0203 	bic.w	r2, r2, #3
 8014f6c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014f70:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8014f74:	f043 0302 	orr.w	r3, r3, #2
 8014f78:	604b      	str	r3, [r1, #4]
}
 8014f7a:	4770      	bx	lr

08014f7c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8014f7c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8014f7e:	6980      	ldr	r0, [r0, #24]
}
 8014f80:	4010      	ands	r0, r2
 8014f82:	4770      	bx	lr

08014f84 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8014f84:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014f88:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8014f8c:	4018      	ands	r0, r3
}
 8014f8e:	0c00      	lsrs	r0, r0, #16
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop

08014f94 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8014f94:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014f98:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8014f9c:	4018      	ands	r0, r3
}
 8014f9e:	b280      	uxth	r0, r0
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop

08014fa4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014fa4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014fa8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014fac:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014fb0:	6940      	ldr	r0, [r0, #20]
}
 8014fb2:	4010      	ands	r0, r2
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop

08014fb8 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8014fb8:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014fbc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014fc0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014fc4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014fc8:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014fcc:	40cb      	lsrs	r3, r1
 8014fce:	01db      	lsls	r3, r3, #7
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	4313      	orrs	r3, r2
}
 8014fd4:	4018      	ands	r0, r3
 8014fd6:	4770      	bx	lr

08014fd8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8014fd8:	6940      	ldr	r0, [r0, #20]
}
 8014fda:	f000 0001 	and.w	r0, r0, #1
 8014fde:	4770      	bx	lr

08014fe0 <USB_ActivateSetup>:
{
 8014fe0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014fe2:	4a09      	ldr	r2, [pc, #36]	; (8015008 <USB_ActivateSetup+0x28>)
}
 8014fe4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014fe6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8014fea:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014fec:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8014ff0:	4022      	ands	r2, r4
}
 8014ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014ff6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014ffa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8014ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015002:	604b      	str	r3, [r1, #4]
}
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	fffff800 	.word	0xfffff800

0801500c <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801500c:	4b14      	ldr	r3, [pc, #80]	; (8015060 <USB_EP0_OutStart+0x54>)
{
 801500e:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015010:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015012:	429c      	cmp	r4, r3
 8015014:	d81a      	bhi.n	801504c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015016:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801501a:	2300      	movs	r3, #0
  if (dma == 1U)
 801501c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801501e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015020:	6903      	ldr	r3, [r0, #16]
 8015022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015026:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015028:	6903      	ldr	r3, [r0, #16]
 801502a:	f043 0318 	orr.w	r3, r3, #24
 801502e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015030:	6903      	ldr	r3, [r0, #16]
 8015032:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015036:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8015038:	d104      	bne.n	8015044 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801503a:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801503c:	6803      	ldr	r3, [r0, #0]
 801503e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015042:	6003      	str	r3, [r0, #0]
}
 8015044:	2000      	movs	r0, #0
 8015046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801504a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801504c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015050:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8015054:	2b00      	cmp	r3, #0
 8015056:	dae0      	bge.n	801501a <USB_EP0_OutStart+0xe>
}
 8015058:	2000      	movs	r0, #0
 801505a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801505e:	4770      	bx	lr
 8015060:	4f54300a 	.word	0x4f54300a

08015064 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015064:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8015066:	4903      	ldr	r1, [pc, #12]	; (8015074 <MX_FATFS_Init+0x10>)
 8015068:	4803      	ldr	r0, [pc, #12]	; (8015078 <MX_FATFS_Init+0x14>)
 801506a:	f001 f96f 	bl	801634c <FATFS_LinkDriver>
 801506e:	4b03      	ldr	r3, [pc, #12]	; (801507c <MX_FATFS_Init+0x18>)
 8015070:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015072:	bd08      	pop	{r3, pc}
 8015074:	20003528 	.word	0x20003528
 8015078:	20000300 	.word	0x20000300
 801507c:	2000352c 	.word	0x2000352c

08015080 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8015080:	4b02      	ldr	r3, [pc, #8]	; (801508c <USER_initialize+0xc>)
 8015082:	2201      	movs	r2, #1
 8015084:	701a      	strb	r2, [r3, #0]
    return Stat;
 8015086:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	200002fc 	.word	0x200002fc

08015090 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8015090:	2000      	movs	r0, #0
 8015092:	4770      	bx	lr

08015094 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8015094:	2001      	movs	r0, #1
 8015096:	4770      	bx	lr

08015098 <USER_write>:
 8015098:	2000      	movs	r0, #0
 801509a:	4770      	bx	lr

0801509c <USER_status>:
 801509c:	4b02      	ldr	r3, [pc, #8]	; (80150a8 <USER_status+0xc>)
 801509e:	2201      	movs	r2, #1
 80150a0:	701a      	strb	r2, [r3, #0]
 80150a2:	7818      	ldrb	r0, [r3, #0]
 80150a4:	4770      	bx	lr
 80150a6:	bf00      	nop
 80150a8:	200002fc 	.word	0x200002fc

080150ac <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80150ac:	2100      	movs	r1, #0
{
 80150ae:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 80150b0:	4608      	mov	r0, r1
{
 80150b2:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 80150b4:	f003 fe6e 	bl	8018d94 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80150b8:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 80150ba:	4b1f      	ldr	r3, [pc, #124]	; (8015138 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80150bc:	491f      	ldr	r1, [pc, #124]	; (801513c <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80150be:	4a20      	ldr	r2, [pc, #128]	; (8015140 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80150c0:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 80150c2:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 80150c4:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 80150c6:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80150c8:	481e      	ldr	r0, [pc, #120]	; (8015144 <MX_LWIP_Init+0x98>)
 80150ca:	4d1f      	ldr	r5, [pc, #124]	; (8015148 <MX_LWIP_Init+0x9c>)
 80150cc:	9002      	str	r0, [sp, #8]
 80150ce:	481f      	ldr	r0, [pc, #124]	; (801514c <MX_LWIP_Init+0xa0>)
 80150d0:	9001      	str	r0, [sp, #4]
 80150d2:	4628      	mov	r0, r5
 80150d4:	f006 fc0c 	bl	801b8f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80150d8:	4628      	mov	r0, r5
 80150da:	f006 fcb7 	bl	801ba4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80150de:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80150e2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80150e4:	075b      	lsls	r3, r3, #29
 80150e6:	d524      	bpl.n	8015132 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 80150e8:	f006 fcb6 	bl	801ba58 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80150ec:	4918      	ldr	r1, [pc, #96]	; (8015150 <MX_LWIP_Init+0xa4>)
 80150ee:	4816      	ldr	r0, [pc, #88]	; (8015148 <MX_LWIP_Init+0x9c>)
 80150f0:	f006 fd3c 	bl	801bb6c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80150f4:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80150f6:	2101      	movs	r1, #1
 80150f8:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 80150fa:	4e16      	ldr	r6, [pc, #88]	; (8015154 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80150fc:	4c16      	ldr	r4, [pc, #88]	; (8015158 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 80150fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8015102:	f001 fa0d 	bl	8016520 <osSemaphoreCreate>
 8015106:	4b15      	ldr	r3, [pc, #84]	; (801515c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8015108:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801510a:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801510e:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8015110:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015118:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801511c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8015120:	4631      	mov	r1, r6
 8015122:	a807      	add	r0, sp, #28
 8015124:	f001 f944 	bl	80163b0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8015128:	4807      	ldr	r0, [pc, #28]	; (8015148 <MX_LWIP_Init+0x9c>)
 801512a:	f00d fca9 	bl	8022a80 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801512e:	b00e      	add	sp, #56	; 0x38
 8015130:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8015132:	f006 fcb3 	bl	801ba9c <netif_set_down>
 8015136:	e7d9      	b.n	80150ec <MX_LWIP_Init+0x40>
 8015138:	20003570 	.word	0x20003570
 801513c:	20003574 	.word	0x20003574
 8015140:	20003580 	.word	0x20003580
 8015144:	08018d0d 	.word	0x08018d0d
 8015148:	20003534 	.word	0x20003534
 801514c:	0801545d 	.word	0x0801545d
 8015150:	0801563d 	.word	0x0801563d
 8015154:	20003578 	.word	0x20003578
 8015158:	0802a598 	.word	0x0802a598
 801515c:	20003530 	.word	0x20003530

08015160 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015160:	4b2c      	ldr	r3, [pc, #176]	; (8015214 <low_level_output+0xb4>)
{
 8015162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8015166:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8015168:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801516a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801516c:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 801516e:	2900      	cmp	r1, #0
 8015170:	d04d      	beq.n	801520e <low_level_output+0xae>
  bufferoffset = 0;
 8015172:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015174:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8015178:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801517a:	6822      	ldr	r2, [r4, #0]
 801517c:	2a00      	cmp	r2, #0
 801517e:	db1b      	blt.n	80151b8 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8015180:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015184:	1995      	adds	r5, r2, r6
 8015186:	454d      	cmp	r5, r9
 8015188:	d93c      	bls.n	8015204 <low_level_output+0xa4>
      payloadoffset = 0;
 801518a:	2700      	movs	r7, #0
 801518c:	e002      	b.n	8015194 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801518e:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8015190:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015192:	d921      	bls.n	80151d8 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8015194:	eba9 0a06 	sub.w	sl, r9, r6
 8015198:	f8db 1004 	ldr.w	r1, [fp, #4]
 801519c:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 801519e:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80151a0:	4439      	add	r1, r7
 80151a2:	4652      	mov	r2, sl
 80151a4:	f010 f910 	bl	80253c8 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80151a8:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80151aa:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80151ae:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80151b0:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80151b2:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80151b4:	42b3      	cmp	r3, r6
 80151b6:	daea      	bge.n	801518e <low_level_output+0x2e>
        errval = ERR_USE;
 80151b8:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80151bc:	4b15      	ldr	r3, [pc, #84]	; (8015214 <low_level_output+0xb4>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151c4:	695a      	ldr	r2, [r3, #20]
 80151c6:	0692      	lsls	r2, r2, #26
 80151c8:	d503      	bpl.n	80151d2 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80151ca:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80151cc:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80151ce:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 80151d0:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 80151d2:	b003      	add	sp, #12
 80151d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d8:	4618      	mov	r0, r3
 80151da:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80151dc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80151e0:	462a      	mov	r2, r5
 80151e2:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80151e4:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80151e6:	4439      	add	r1, r7
 80151e8:	f010 f8ee 	bl	80253c8 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80151ec:	f8db b000 	ldr.w	fp, [fp]
 80151f0:	9b01      	ldr	r3, [sp, #4]
 80151f2:	f1bb 0f00 	cmp.w	fp, #0
 80151f6:	d1c0      	bne.n	801517a <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 80151f8:	4641      	mov	r1, r8
 80151fa:	4806      	ldr	r0, [pc, #24]	; (8015214 <low_level_output+0xb4>)
 80151fc:	f7f6 f8d0 	bl	800b3a0 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8015200:	2000      	movs	r0, #0
 8015202:	e7db      	b.n	80151bc <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015204:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 8015206:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015208:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 801520a:	4615      	mov	r5, r2
 801520c:	e7e6      	b.n	80151dc <low_level_output+0x7c>
  uint32_t framelength = 0;
 801520e:	4688      	mov	r8, r1
 8015210:	e7f2      	b.n	80151f8 <low_level_output+0x98>
 8015212:	bf00      	nop
 8015214:	20006624 	.word	0x20006624

08015218 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8015218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8015330 <ethernetif_input+0x118>
 8015220:	b083      	sub	sp, #12
 8015222:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015224:	4b40      	ldr	r3, [pc, #256]	; (8015328 <ethernetif_input+0x110>)
 8015226:	f04f 31ff 	mov.w	r1, #4294967295
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	f001 f99e 	bl	801656c <osSemaphoreWait>
 8015230:	2800      	cmp	r0, #0
 8015232:	d1f7      	bne.n	8015224 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8015234:	483d      	ldr	r0, [pc, #244]	; (801532c <ethernetif_input+0x114>)
 8015236:	f00f fbb7 	bl	80249a8 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801523a:	483d      	ldr	r0, [pc, #244]	; (8015330 <ethernetif_input+0x118>)
 801523c:	f7f6 f934 	bl	800b4a8 <HAL_ETH_GetReceivedFrame_IT>
 8015240:	4604      	mov	r4, r0
 8015242:	2800      	cmp	r0, #0
 8015244:	d168      	bne.n	8015318 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8015246:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801524a:	bb51      	cbnz	r1, 80152a2 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 801524c:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015250:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015254:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015258:	b140      	cbz	r0, 801526c <ethernetif_input+0x54>
 801525a:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801525c:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801525e:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015260:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015264:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015266:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8015268:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801526a:	d1f7      	bne.n	801525c <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801526c:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8015270:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8015272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8015276:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801527a:	695a      	ldr	r2, [r3, #20]
 801527c:	0612      	lsls	r2, r2, #24
 801527e:	d503      	bpl.n	8015288 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8015280:	2280      	movs	r2, #128	; 0x80
 8015282:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8015284:	2200      	movs	r2, #0
 8015286:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8015288:	f1ba 0f00 	cmp.w	sl, #0
 801528c:	d044      	beq.n	8015318 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 801528e:	9901      	ldr	r1, [sp, #4]
 8015290:	4650      	mov	r0, sl
 8015292:	690b      	ldr	r3, [r1, #16]
 8015294:	4798      	blx	r3
 8015296:	2800      	cmp	r0, #0
 8015298:	d142      	bne.n	8015320 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 801529a:	4824      	ldr	r0, [pc, #144]	; (801532c <ethernetif_input+0x114>)
 801529c:	f00f fb8a 	bl	80249b4 <sys_mutex_unlock>
      } while(p!=NULL);
 80152a0:	e7c8      	b.n	8015234 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80152a2:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80152a6:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80152aa:	f006 fdb7 	bl	801be1c <pbuf_alloc>
  if (p != NULL)
 80152ae:	4682      	mov	sl, r0
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d0cb      	beq.n	801524c <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80152b4:	4683      	mov	fp, r0
    bufferoffset = 0;
 80152b6:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152b8:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80152bc:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 80152c0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152c4:	1854      	adds	r4, r2, r1
 80152c6:	4544      	cmp	r4, r8
 80152c8:	d923      	bls.n	8015312 <ethernetif_input+0xfa>
      payloadoffset = 0;
 80152ca:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80152cc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80152d0:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80152d4:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80152d8:	4439      	add	r1, r7
 80152da:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80152dc:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80152de:	f010 f873 	bl	80253c8 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80152e2:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152e4:	4544      	cmp	r4, r8
        bufferoffset = 0;
 80152e6:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80152ea:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152ec:	d8ee      	bhi.n	80152cc <ethernetif_input+0xb4>
 80152ee:	4639      	mov	r1, r7
 80152f0:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80152f2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80152f6:	4428      	add	r0, r5
 80152f8:	f010 f866 	bl	80253c8 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80152fc:	f8db b000 	ldr.w	fp, [fp]
 8015300:	f1bb 0f00 	cmp.w	fp, #0
 8015304:	d0a4      	beq.n	8015250 <ethernetif_input+0x38>
 8015306:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8015308:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801530c:	1854      	adds	r4, r2, r1
 801530e:	4544      	cmp	r4, r8
 8015310:	d8db      	bhi.n	80152ca <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8015312:	4439      	add	r1, r7
      payloadoffset = 0;
 8015314:	2500      	movs	r5, #0
 8015316:	e7ec      	b.n	80152f2 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8015318:	4804      	ldr	r0, [pc, #16]	; (801532c <ethernetif_input+0x114>)
 801531a:	f00f fb4b 	bl	80249b4 <sys_mutex_unlock>
      } while(p!=NULL);
 801531e:	e781      	b.n	8015224 <ethernetif_input+0xc>
            pbuf_free(p);
 8015320:	4650      	mov	r0, sl
 8015322:	f006 ff4d 	bl	801c1c0 <pbuf_free>
 8015326:	e7b8      	b.n	801529a <ethernetif_input+0x82>
 8015328:	2000666c 	.word	0x2000666c
 801532c:	2001e92c 	.word	0x2001e92c
 8015330:	20006624 	.word	0x20006624

08015334 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8015334:	4b41      	ldr	r3, [pc, #260]	; (801543c <HAL_ETH_MspInit+0x108>)
 8015336:	6802      	ldr	r2, [r0, #0]
{
 8015338:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801533a:	429a      	cmp	r2, r3
{
 801533c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801533e:	f04f 0400 	mov.w	r4, #0
 8015342:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8015346:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801534a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 801534c:	d001      	beq.n	8015352 <HAL_ETH_MspInit+0x1e>
}
 801534e:	b00d      	add	sp, #52	; 0x34
 8015350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8015352:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015356:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8015358:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801535a:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 801535c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801535e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015360:	4837      	ldr	r0, [pc, #220]	; (8015440 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8015362:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8015366:	631a      	str	r2, [r3, #48]	; 0x30
 8015368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801536a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801536e:	9200      	str	r2, [sp, #0]
 8015370:	9a00      	ldr	r2, [sp, #0]
 8015372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015374:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8015378:	631a      	str	r2, [r3, #48]	; 0x30
 801537a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801537c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8015380:	9201      	str	r2, [sp, #4]
 8015382:	9a01      	ldr	r2, [sp, #4]
 8015384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015386:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801538a:	631a      	str	r2, [r3, #48]	; 0x30
 801538c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801538e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8015392:	9202      	str	r2, [sp, #8]
 8015394:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015398:	f042 0204 	orr.w	r2, r2, #4
 801539c:	631a      	str	r2, [r3, #48]	; 0x30
 801539e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153a0:	f002 0204 	and.w	r2, r2, #4
 80153a4:	9203      	str	r2, [sp, #12]
 80153a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80153a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153aa:	f042 0201 	orr.w	r2, r2, #1
 80153ae:	631a      	str	r2, [r3, #48]	; 0x30
 80153b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153b2:	f002 0201 	and.w	r2, r2, #1
 80153b6:	9204      	str	r2, [sp, #16]
 80153b8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80153ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153bc:	433a      	orrs	r2, r7
 80153be:	631a      	str	r2, [r3, #48]	; 0x30
 80153c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153c2:	403a      	ands	r2, r7
 80153c4:	9205      	str	r2, [sp, #20]
 80153c6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80153c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153ce:	631a      	str	r2, [r3, #48]	; 0x30
 80153d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80153d2:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80153d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80153d8:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153da:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80153de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80153e0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80153e2:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80153e4:	f7f7 f984 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80153e8:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80153ea:	a907      	add	r1, sp, #28
 80153ec:	4815      	ldr	r0, [pc, #84]	; (8015444 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80153ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153f0:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80153f4:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80153f8:	f7f7 f97a 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80153fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015400:	a907      	add	r1, sp, #28
 8015402:	4811      	ldr	r0, [pc, #68]	; (8015448 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015404:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015406:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801540a:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801540e:	f7f7 f96f 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8015412:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015416:	a907      	add	r1, sp, #28
 8015418:	480c      	ldr	r0, [pc, #48]	; (801544c <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801541a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801541c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801541e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015420:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015424:	f7f7 f964 	bl	800c6f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8015428:	4622      	mov	r2, r4
 801542a:	2106      	movs	r1, #6
 801542c:	203d      	movs	r0, #61	; 0x3d
 801542e:	f7f4 fae1 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8015432:	203d      	movs	r0, #61	; 0x3d
 8015434:	f7f4 fb28 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 8015438:	b00d      	add	sp, #52	; 0x34
 801543a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801543c:	40028000 	.word	0x40028000
 8015440:	40020800 	.word	0x40020800
 8015444:	40020000 	.word	0x40020000
 8015448:	40020400 	.word	0x40020400
 801544c:	40021800 	.word	0x40021800

08015450 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8015450:	4b01      	ldr	r3, [pc, #4]	; (8015458 <HAL_ETH_RxCpltCallback+0x8>)
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	f001 b8b6 	b.w	80165c4 <osSemaphoreRelease>
 8015458:	2000666c 	.word	0x2000666c

0801545c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801545c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801545e:	4604      	mov	r4, r0
{
 8015460:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015462:	2800      	cmp	r0, #0
 8015464:	f000 809e 	beq.w	80155a4 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8015468:	4d52      	ldr	r5, [pc, #328]	; (80155b4 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 801546a:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801546c:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8015470:	4b51      	ldr	r3, [pc, #324]	; (80155b8 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8015472:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8015474:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8015476:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 801547a:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801547e:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8015480:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 8015482:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8015484:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015488:	494c      	ldr	r1, [pc, #304]	; (80155bc <ethernetif_init+0x160>)
  heth.Instance = ETH;
 801548a:	4a4d      	ldr	r2, [pc, #308]	; (80155c0 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 801548c:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 801548e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015490:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8015492:	494c      	ldr	r1, [pc, #304]	; (80155c4 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8015494:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015498:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 801549a:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801549c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 80154a0:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80154a4:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80154a8:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80154ac:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80154ae:	4042      	eors	r2, r0
 80154b0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80154b4:	404a      	eors	r2, r1
 80154b6:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80154ba:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80154be:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80154c2:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80154c6:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80154ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80154ce:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80154d0:	404b      	eors	r3, r1
 80154d2:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80154d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80154da:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 80154de:	ab01      	add	r3, sp, #4
 80154e0:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80154e2:	f7f6 f905 	bl	800b6f0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80154e6:	b928      	cbnz	r0, 80154f4 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80154e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80154ec:	f043 0304 	orr.w	r3, r3, #4
 80154f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80154f4:	2304      	movs	r3, #4
 80154f6:	4a34      	ldr	r2, [pc, #208]	; (80155c8 <ethernetif_init+0x16c>)
 80154f8:	4934      	ldr	r1, [pc, #208]	; (80155cc <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 80154fa:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80154fc:	482d      	ldr	r0, [pc, #180]	; (80155b4 <ethernetif_init+0x158>)
 80154fe:	f7f5 fecb 	bl	800b298 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8015502:	2304      	movs	r3, #4
 8015504:	4a32      	ldr	r2, [pc, #200]	; (80155d0 <ethernetif_init+0x174>)
 8015506:	4933      	ldr	r1, [pc, #204]	; (80155d4 <ethernetif_init+0x178>)
 8015508:	482a      	ldr	r0, [pc, #168]	; (80155b4 <ethernetif_init+0x158>)
 801550a:	f7f5 ff0b 	bl	800b324 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801550e:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015510:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015512:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8015516:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801551a:	4e2f      	ldr	r6, [pc, #188]	; (80155d8 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801551c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015520:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015524:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015526:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015528:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801552c:	7858      	ldrb	r0, [r3, #1]
 801552e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8015532:	7898      	ldrb	r0, [r3, #2]
 8015534:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8015538:	78d8      	ldrb	r0, [r3, #3]
 801553a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801553e:	7918      	ldrb	r0, [r3, #4]
 8015540:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015544:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015546:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8015548:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801554a:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801554c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015550:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8015554:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015558:	f000 ffe2 	bl	8016520 <osSemaphoreCreate>
 801555c:	4b1f      	ldr	r3, [pc, #124]	; (80155dc <ethernetif_init+0x180>)
 801555e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8015560:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015564:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015568:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801556c:	4621      	mov	r1, r4
 801556e:	a805      	add	r0, sp, #20
 8015570:	f000 ff1e 	bl	80163b0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8015574:	480f      	ldr	r0, [pc, #60]	; (80155b4 <ethernetif_init+0x158>)
 8015576:	f7f6 fa11 	bl	800b99c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801557a:	466a      	mov	r2, sp
 801557c:	211d      	movs	r1, #29
 801557e:	480d      	ldr	r0, [pc, #52]	; (80155b4 <ethernetif_init+0x158>)
 8015580:	f7f6 f824 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8015584:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015586:	211d      	movs	r1, #29
 8015588:	480a      	ldr	r0, [pc, #40]	; (80155b4 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 801558a:	f042 020b 	orr.w	r2, r2, #11
 801558e:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8015590:	f7f6 f866 	bl	800b660 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8015594:	466a      	mov	r2, sp
 8015596:	211d      	movs	r1, #29
 8015598:	4806      	ldr	r0, [pc, #24]	; (80155b4 <ethernetif_init+0x158>)
 801559a:	f7f6 f817 	bl	800b5cc <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801559e:	4638      	mov	r0, r7
 80155a0:	b00d      	add	sp, #52	; 0x34
 80155a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80155a4:	4b0e      	ldr	r3, [pc, #56]	; (80155e0 <ethernetif_init+0x184>)
 80155a6:	f240 223a 	movw	r2, #570	; 0x23a
 80155aa:	490e      	ldr	r1, [pc, #56]	; (80155e4 <ethernetif_init+0x188>)
 80155ac:	480e      	ldr	r0, [pc, #56]	; (80155e8 <ethernetif_init+0x18c>)
 80155ae:	f010 fed1 	bl	8026354 <iprintf>
 80155b2:	e759      	b.n	8015468 <ethernetif_init+0xc>
 80155b4:	20006624 	.word	0x20006624
 80155b8:	1ff0f000 	.word	0x1ff0f000
 80155bc:	08023601 	.word	0x08023601
 80155c0:	40028000 	.word	0x40028000
 80155c4:	08015161 	.word	0x08015161
 80155c8:	20004e54 	.word	0x20004e54
 80155cc:	20003604 	.word	0x20003604
 80155d0:	20003684 	.word	0x20003684
 80155d4:	20003584 	.word	0x20003584
 80155d8:	0802a5b4 	.word	0x0802a5b4
 80155dc:	2000666c 	.word	0x2000666c
 80155e0:	0802e210 	.word	0x0802e210
 80155e4:	0802e22c 	.word	0x0802e22c
 80155e8:	0802b034 	.word	0x0802b034

080155ec <sys_now>:
 80155ec:	f7f3 bdaa 	b.w	8009144 <HAL_GetTick>

080155f0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80155f0:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 80155f2:	2300      	movs	r3, #0
{
 80155f4:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80155f6:	4d0f      	ldr	r5, [pc, #60]	; (8015634 <ethernetif_set_link+0x44>)
{
 80155f8:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80155fa:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 80155fc:	e003      	b.n	8015606 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80155fe:	b1b3      	cbz	r3, 801562e <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8015600:	20c8      	movs	r0, #200	; 0xc8
 8015602:	f000 ff07 	bl	8016414 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8015606:	aa01      	add	r2, sp, #4
 8015608:	2101      	movs	r1, #1
 801560a:	4628      	mov	r0, r5
 801560c:	f7f5 ffde 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015610:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8015612:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015614:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8015618:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801561c:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 801561e:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015620:	d4ed      	bmi.n	80155fe <ethernetif_set_link+0xe>
 8015622:	b113      	cbz	r3, 801562a <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8015624:	f006 fa62 	bl	801baec <netif_set_link_up>
 8015628:	e7ea      	b.n	8015600 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801562a:	0753      	lsls	r3, r2, #29
 801562c:	d5e8      	bpl.n	8015600 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 801562e:	f006 fa83 	bl	801bb38 <netif_set_link_down>
 8015632:	e7e5      	b.n	8015600 <ethernetif_set_link+0x10>
 8015634:	20006624 	.word	0x20006624

08015638 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8015638:	4770      	bx	lr
 801563a:	bf00      	nop

0801563c <ethernetif_update_config>:
{
 801563c:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 801563e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8015642:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8015644:	2100      	movs	r1, #0
{
 8015646:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8015648:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801564a:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 801564c:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 801564e:	d538      	bpl.n	80156c2 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015650:	4c32      	ldr	r4, [pc, #200]	; (801571c <ethernetif_update_config+0xe0>)
 8015652:	6863      	ldr	r3, [r4, #4]
 8015654:	b9e3      	cbnz	r3, 8015690 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8015656:	68a3      	ldr	r3, [r4, #8]
 8015658:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 801565c:	d140      	bne.n	80156e0 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801565e:	68e2      	ldr	r2, [r4, #12]
 8015660:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8015664:	d135      	bne.n	80156d2 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8015666:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015668:	08d2      	lsrs	r2, r2, #3
 801566a:	2100      	movs	r1, #0
 801566c:	482b      	ldr	r0, [pc, #172]	; (801571c <ethernetif_update_config+0xe0>)
 801566e:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8015672:	b292      	uxth	r2, r2
 8015674:	f7f5 fff4 	bl	800b660 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8015678:	2100      	movs	r1, #0
 801567a:	4828      	ldr	r0, [pc, #160]	; (801571c <ethernetif_update_config+0xe0>)
 801567c:	f7f6 fa28 	bl	800bad0 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8015680:	4826      	ldr	r0, [pc, #152]	; (801571c <ethernetif_update_config+0xe0>)
 8015682:	f7f6 f98b 	bl	800b99c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8015686:	4628      	mov	r0, r5
 8015688:	f7ff ffd6 	bl	8015638 <ethernetif_notify_conn_changed>
}
 801568c:	b003      	add	sp, #12
 801568e:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8015690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015694:	4620      	mov	r0, r4
 8015696:	f7f5 ffe3 	bl	800b660 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 801569a:	f7f3 fd53 	bl	8009144 <HAL_GetTick>
 801569e:	9000      	str	r0, [sp, #0]
 80156a0:	e002      	b.n	80156a8 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80156a2:	9b01      	ldr	r3, [sp, #4]
 80156a4:	069a      	lsls	r2, r3, #26
 80156a6:	d425      	bmi.n	80156f4 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80156a8:	aa01      	add	r2, sp, #4
 80156aa:	2101      	movs	r1, #1
 80156ac:	4620      	mov	r0, r4
 80156ae:	f7f5 ff8d 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80156b2:	f7f3 fd47 	bl	8009144 <HAL_GetTick>
 80156b6:	9b00      	ldr	r3, [sp, #0]
 80156b8:	1ac3      	subs	r3, r0, r3
 80156ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80156be:	d9f0      	bls.n	80156a2 <ethernetif_update_config+0x66>
 80156c0:	e7c9      	b.n	8015656 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 80156c2:	4816      	ldr	r0, [pc, #88]	; (801571c <ethernetif_update_config+0xe0>)
 80156c4:	f7f6 f9b6 	bl	800ba34 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7ff ffb5 	bl	8015638 <ethernetif_notify_conn_changed>
}
 80156ce:	b003      	add	sp, #12
 80156d0:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80156d2:	f240 21e3 	movw	r1, #739	; 0x2e3
 80156d6:	4812      	ldr	r0, [pc, #72]	; (8015720 <ethernetif_update_config+0xe4>)
 80156d8:	f7f0 f8ca 	bl	8005870 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80156dc:	68e2      	ldr	r2, [r4, #12]
 80156de:	e7c2      	b.n	8015666 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80156e0:	f240 21e2 	movw	r1, #738	; 0x2e2
 80156e4:	480e      	ldr	r0, [pc, #56]	; (8015720 <ethernetif_update_config+0xe4>)
 80156e6:	f7f0 f8c3 	bl	8005870 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80156ea:	68e2      	ldr	r2, [r4, #12]
 80156ec:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80156f0:	d0b9      	beq.n	8015666 <ethernetif_update_config+0x2a>
 80156f2:	e7ee      	b.n	80156d2 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80156f4:	aa01      	add	r2, sp, #4
 80156f6:	2110      	movs	r1, #16
 80156f8:	4808      	ldr	r0, [pc, #32]	; (801571c <ethernetif_update_config+0xe0>)
 80156fa:	f7f5 ff67 	bl	800b5cc <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80156fe:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8015700:	f013 0204 	ands.w	r2, r3, #4
 8015704:	bf18      	it	ne
 8015706:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 801570a:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 801570c:	bf4c      	ite	mi
 801570e:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8015710:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8015714:	60e2      	str	r2, [r4, #12]
 8015716:	60a3      	str	r3, [r4, #8]
 8015718:	e7ae      	b.n	8015678 <ethernetif_update_config+0x3c>
 801571a:	bf00      	nop
 801571c:	20006624 	.word	0x20006624
 8015720:	0802e210 	.word	0x0802e210

08015724 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015724:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015728:	b183      	cbz	r3, 801574c <USBD_CDC_EP0_RxReady+0x28>
{
 801572a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801572c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015730:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8015734:	28ff      	cmp	r0, #255	; 0xff
 8015736:	d007      	beq.n	8015748 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	4621      	mov	r1, r4
 801573c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8015740:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8015742:	23ff      	movs	r3, #255	; 0xff
 8015744:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8015748:	2000      	movs	r0, #0
 801574a:	bd10      	pop	{r4, pc}
 801574c:	2000      	movs	r0, #0
 801574e:	4770      	bx	lr

08015750 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015750:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015752:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8015754:	4801      	ldr	r0, [pc, #4]	; (801575c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015756:	801a      	strh	r2, [r3, #0]
}
 8015758:	4770      	bx	lr
 801575a:	bf00      	nop
 801575c:	2000034c 	.word	0x2000034c

08015760 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015760:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8015762:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8015764:	4801      	ldr	r0, [pc, #4]	; (801576c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8015766:	801a      	strh	r2, [r3, #0]
}
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	20000390 	.word	0x20000390

08015770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015770:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015772:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8015774:	4801      	ldr	r0, [pc, #4]	; (801577c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015776:	801a      	strh	r2, [r3, #0]
}
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	200003e0 	.word	0x200003e0

08015780 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015780:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015782:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8015784:	4801      	ldr	r0, [pc, #4]	; (801578c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015786:	801a      	strh	r2, [r3, #0]
}
 8015788:	4770      	bx	lr
 801578a:	bf00      	nop
 801578c:	200003d4 	.word	0x200003d4

08015790 <USBD_CDC_DataOut>:
{
 8015790:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015792:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8015796:	b17d      	cbz	r5, 80157b8 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015798:	4604      	mov	r4, r0
 801579a:	f00f fb81 	bl	8024ea0 <USBD_LL_GetRxDataSize>
 801579e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80157a0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80157a4:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80157a8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80157ac:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80157ae:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80157b2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80157b4:	2000      	movs	r0, #0
}
 80157b6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80157b8:	2003      	movs	r0, #3
}
 80157ba:	bd38      	pop	{r3, r4, r5, pc}

080157bc <USBD_CDC_DataIn>:
{
 80157bc:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 80157be:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 80157c2:	b34d      	cbz	r5, 8015818 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80157c4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80157c8:	4686      	mov	lr, r0
 80157ca:	460a      	mov	r2, r1
 80157cc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80157d0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80157d4:	b15b      	cbz	r3, 80157ee <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80157d6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80157da:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80157de:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80157e2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80157e4:	fbb3 f6f4 	udiv	r6, r3, r4
 80157e8:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80157ec:	b164      	cbz	r4, 8015808 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80157ee:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80157f2:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80157f4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80157f8:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80157fc:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80157fe:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015802:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8015804:	4620      	mov	r0, r4
}
 8015806:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015808:	4623      	mov	r3, r4
 801580a:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 801580c:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015810:	f00f fb2a 	bl	8024e68 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8015814:	4620      	mov	r0, r4
}
 8015816:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8015818:	2003      	movs	r0, #3
}
 801581a:	bd70      	pop	{r4, r5, r6, pc}

0801581c <USBD_CDC_Setup>:
{
 801581c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801581e:	f891 c000 	ldrb.w	ip, [r1]
{
 8015822:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8015824:	2300      	movs	r3, #0
{
 8015826:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015828:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 801582c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801582e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8015832:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8015836:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801583a:	d01c      	beq.n	8015876 <USBD_CDC_Setup+0x5a>
 801583c:	2e20      	cmp	r6, #32
 801583e:	d112      	bne.n	8015866 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8015840:	88ca      	ldrh	r2, [r1, #6]
 8015842:	2a00      	cmp	r2, #0
 8015844:	d036      	beq.n	80158b4 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8015846:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801584a:	d055      	beq.n	80158f8 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 801584c:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801584e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015852:	4639      	mov	r1, r7
 8015854:	7860      	ldrb	r0, [r4, #1]
 8015856:	689b      	ldr	r3, [r3, #8]
 8015858:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801585a:	88e2      	ldrh	r2, [r4, #6]
 801585c:	4639      	mov	r1, r7
 801585e:	4628      	mov	r0, r5
 8015860:	f000 fd2c 	bl	80162bc <USBD_CtlSendData>
 8015864:	e004      	b.n	8015870 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8015866:	4621      	mov	r1, r4
 8015868:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 801586a:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 801586c:	f000 fcf0 	bl	8016250 <USBD_CtlError>
}
 8015870:	4630      	mov	r0, r6
 8015872:	b003      	add	sp, #12
 8015874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8015876:	784b      	ldrb	r3, [r1, #1]
 8015878:	2b0b      	cmp	r3, #11
 801587a:	d8f4      	bhi.n	8015866 <USBD_CDC_Setup+0x4a>
 801587c:	a201      	add	r2, pc, #4	; (adr r2, 8015884 <USBD_CDC_Setup+0x68>)
 801587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015882:	bf00      	nop
 8015884:	080158c7 	.word	0x080158c7
 8015888:	08015871 	.word	0x08015871
 801588c:	08015867 	.word	0x08015867
 8015890:	08015867 	.word	0x08015867
 8015894:	08015867 	.word	0x08015867
 8015898:	08015867 	.word	0x08015867
 801589c:	08015867 	.word	0x08015867
 80158a0:	08015867 	.word	0x08015867
 80158a4:	08015867 	.word	0x08015867
 80158a8:	08015867 	.word	0x08015867
 80158ac:	080158e5 	.word	0x080158e5
 80158b0:	080158db 	.word	0x080158db
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80158b4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80158b8:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80158ba:	7848      	ldrb	r0, [r1, #1]
 80158bc:	689b      	ldr	r3, [r3, #8]
 80158be:	4798      	blx	r3
}
 80158c0:	4630      	mov	r0, r6
 80158c2:	b003      	add	sp, #12
 80158c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158c6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80158ca:	2a03      	cmp	r2, #3
 80158cc:	d01e      	beq.n	801590c <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 80158ce:	4621      	mov	r1, r4
 80158d0:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80158d2:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80158d4:	f000 fcbc 	bl	8016250 <USBD_CtlError>
        ret = USBD_FAIL;
 80158d8:	e7ca      	b.n	8015870 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80158da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80158de:	2b03      	cmp	r3, #3
 80158e0:	d0c6      	beq.n	8015870 <USBD_CDC_Setup+0x54>
 80158e2:	e7f4      	b.n	80158ce <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80158e8:	2b03      	cmp	r3, #3
 80158ea:	d1f0      	bne.n	80158ce <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80158ec:	2201      	movs	r2, #1
 80158ee:	f10d 0105 	add.w	r1, sp, #5
 80158f2:	f000 fce3 	bl	80162bc <USBD_CtlSendData>
 80158f6:	e7bb      	b.n	8015870 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80158f8:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 80158fa:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 80158fc:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8015900:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015904:	4639      	mov	r1, r7
 8015906:	f000 fcf1 	bl	80162ec <USBD_CtlPrepareRx>
 801590a:	e7b1      	b.n	8015870 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801590c:	2202      	movs	r2, #2
 801590e:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8015912:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015914:	f000 fcd2 	bl	80162bc <USBD_CtlSendData>
 8015918:	e7aa      	b.n	8015870 <USBD_CDC_Setup+0x54>
 801591a:	bf00      	nop

0801591c <USBD_CDC_DeInit>:
{
 801591c:	b538      	push	{r3, r4, r5, lr}
 801591e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015920:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015922:	2181      	movs	r1, #129	; 0x81
 8015924:	f00f fa54 	bl	8024dd0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015928:	2101      	movs	r1, #1
 801592a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801592c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801592e:	f00f fa4f 	bl	8024dd0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015932:	2182      	movs	r1, #130	; 0x82
 8015934:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015936:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801593a:	f00f fa49 	bl	8024dd0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 801593e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015942:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8015944:	b14b      	cbz	r3, 801595a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015946:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801594e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8015952:	f00f fd21 	bl	8025398 <free>
    pdev->pClassData = NULL;
 8015956:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801595a:	2000      	movs	r0, #0
 801595c:	bd38      	pop	{r3, r4, r5, pc}
 801595e:	bf00      	nop

08015960 <USBD_CDC_Init>:
{
 8015960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015964:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015966:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801596a:	f00f fd0d 	bl	8025388 <malloc>
  if (hcdc == NULL)
 801596e:	4605      	mov	r5, r0
 8015970:	2800      	cmp	r0, #0
 8015972:	d04c      	beq.n	8015a0e <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015974:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8015976:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801597a:	b393      	cbz	r3, 80159e2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801597c:	2340      	movs	r3, #64	; 0x40
 801597e:	2202      	movs	r2, #2
 8015980:	2181      	movs	r1, #129	; 0x81
 8015982:	4620      	mov	r0, r4
 8015984:	f00f fa12 	bl	8024dac <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015988:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801598a:	2340      	movs	r3, #64	; 0x40
 801598c:	4631      	mov	r1, r6
 801598e:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015990:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015992:	4620      	mov	r0, r4
 8015994:	f00f fa0a 	bl	8024dac <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015998:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801599a:	2203      	movs	r2, #3
 801599c:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801599e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80159a2:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80159a4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80159a8:	2308      	movs	r3, #8
 80159aa:	f00f f9ff 	bl	8024dac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80159ae:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80159b2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80159b6:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80159b8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159c0:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80159c2:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80159c6:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159ca:	b9ae      	cbnz	r6, 80159f8 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80159cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159d0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80159d4:	4641      	mov	r1, r8
 80159d6:	4620      	mov	r0, r4
 80159d8:	f00f fa54 	bl	8024e84 <USBD_LL_PrepareReceive>
}
 80159dc:	4630      	mov	r0, r6
 80159de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80159e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159e6:	2202      	movs	r2, #2
 80159e8:	2181      	movs	r1, #129	; 0x81
 80159ea:	4620      	mov	r0, r4
 80159ec:	f00f f9de 	bl	8024dac <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80159f0:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80159f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159f6:	e7c9      	b.n	801598c <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 80159f8:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80159fa:	2340      	movs	r3, #64	; 0x40
 80159fc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015a00:	4641      	mov	r1, r8
 8015a02:	4620      	mov	r0, r4
 8015a04:	f00f fa3e 	bl	8024e84 <USBD_LL_PrepareReceive>
}
 8015a08:	4630      	mov	r0, r6
 8015a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8015a0e:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8015a10:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015a14:	e7e2      	b.n	80159dc <USBD_CDC_Init+0x7c>
 8015a16:	bf00      	nop

08015a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015a18:	4603      	mov	r3, r0
  if (fops == NULL)
 8015a1a:	b119      	cbz	r1, 8015a24 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8015a1c:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8015a1e:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8015a22:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8015a24:	2003      	movs	r0, #3
}
 8015a26:	4770      	bx	lr

08015a28 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015a28:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8015a2a:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8015a30:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015a34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop

08015a3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015a3c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8015a3e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8015a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015a44:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop

08015a4c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015a4c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8015a50:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8015a52:	b19a      	cbz	r2, 8015a7c <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a54:	7c04      	ldrb	r4, [r0, #16]
 8015a56:	b144      	cbz	r4, 8015a6a <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015a58:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015a5a:	2340      	movs	r3, #64	; 0x40
 8015a5c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015a60:	2101      	movs	r1, #1
 8015a62:	f00f fa0f 	bl	8024e84 <USBD_LL_PrepareReceive>
}
 8015a66:	4620      	mov	r0, r4
 8015a68:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a6e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015a72:	2101      	movs	r1, #1
 8015a74:	f00f fa06 	bl	8024e84 <USBD_LL_PrepareReceive>
}
 8015a78:	4620      	mov	r0, r4
 8015a7a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8015a7c:	2403      	movs	r4, #3
}
 8015a7e:	4620      	mov	r0, r4
 8015a80:	bd10      	pop	{r4, pc}
 8015a82:	bf00      	nop

08015a84 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a84:	b1a0      	cbz	r0, 8015ab0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015a86:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015a8a:	b113      	cbz	r3, 8015a92 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015a92:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8015a96:	b113      	cbz	r3, 8015a9e <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a9e:	b109      	cbz	r1, 8015aa4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8015aa0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015aa4:	2301      	movs	r3, #1
  pdev->id = id;
 8015aa6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015aa8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015aac:	f00f b93e 	b.w	8024d2c <USBD_LL_Init>

  return ret;
}
 8015ab0:	2003      	movs	r0, #3
 8015ab2:	4770      	bx	lr

08015ab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ab4:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8015ab6:	2400      	movs	r4, #0
{
 8015ab8:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8015aba:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8015abe:	b159      	cbz	r1, 8015ad8 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015ac0:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015ac2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015ac4:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8015ac8:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015acc:	4798      	blx	r3
 8015ace:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	b003      	add	sp, #12
 8015ad6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8015ad8:	2403      	movs	r4, #3
}
 8015ada:	4620      	mov	r0, r4
 8015adc:	b003      	add	sp, #12
 8015ade:	bd30      	pop	{r4, r5, pc}

08015ae0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015ae0:	f00f b956 	b.w	8024d90 <USBD_LL_Start>

08015ae4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8015ae4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ae8:	b10b      	cbz	r3, 8015aee <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4718      	bx	r3
  }

  return ret;
}
 8015aee:	2003      	movs	r0, #3
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop

08015af4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015af4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015af6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015afa:	b10b      	cbz	r3, 8015b00 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	4798      	blx	r3
  }

  return USBD_OK;
}
 8015b00:	2000      	movs	r0, #0
 8015b02:	bd08      	pop	{r3, pc}

08015b04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015b04:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b06:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8015b0a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	f000 fb93 	bl	8016238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b12:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8015b14:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8015b18:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8015b1c:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8015b20:	f001 031f 	and.w	r3, r1, #31
 8015b24:	4293      	cmp	r3, r2
 8015b26:	d009      	beq.n	8015b3c <USBD_LL_SetupStage+0x38>
 8015b28:	2b02      	cmp	r3, #2
 8015b2a:	d013      	beq.n	8015b54 <USBD_LL_SetupStage+0x50>
 8015b2c:	b163      	cbz	r3, 8015b48 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8015b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015b38:	f00f b958 	b.w	8024dec <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015b3c:	4629      	mov	r1, r5
 8015b3e:	4620      	mov	r0, r4
}
 8015b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015b44:	f000 ba9e 	b.w	8016084 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015b48:	4629      	mov	r1, r5
 8015b4a:	4620      	mov	r0, r4
}
 8015b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015b50:	f000 b8fa 	b.w	8015d48 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015b54:	4629      	mov	r1, r5
 8015b56:	4620      	mov	r0, r4
}
 8015b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015b5c:	f000 baca 	b.w	80160f4 <USBD_StdEPReq>

08015b60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015b64:	b939      	cbnz	r1, 8015b76 <USBD_LL_DataOutStage+0x16>
 8015b66:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015b68:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8015b6c:	460c      	mov	r4, r1
 8015b6e:	2a03      	cmp	r2, #3
 8015b70:	d00e      	beq.n	8015b90 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015b72:	2000      	movs	r0, #0
}
 8015b74:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8015b76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015b7a:	699b      	ldr	r3, [r3, #24]
 8015b7c:	b133      	cbz	r3, 8015b8c <USBD_LL_DataOutStage+0x2c>
 8015b7e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015b82:	2a03      	cmp	r2, #3
 8015b84:	d102      	bne.n	8015b8c <USBD_LL_DataOutStage+0x2c>
}
 8015b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015b8a:	4718      	bx	r3
    return USBD_FAIL;
 8015b8c:	2003      	movs	r0, #3
}
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015b90:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8015b94:	4291      	cmp	r1, r2
 8015b96:	d80d      	bhi.n	8015bb4 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015b98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015b9c:	691b      	ldr	r3, [r3, #16]
 8015b9e:	b123      	cbz	r3, 8015baa <USBD_LL_DataOutStage+0x4a>
 8015ba0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015ba4:	2a03      	cmp	r2, #3
 8015ba6:	d100      	bne.n	8015baa <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8015ba8:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8015baa:	4628      	mov	r0, r5
 8015bac:	f000 fbb6 	bl	801631c <USBD_CtlSendStatus>
  return USBD_OK;
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	e7df      	b.n	8015b74 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8015bb4:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015bb6:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8015bb8:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015bbc:	bf28      	it	cs
 8015bbe:	460a      	movcs	r2, r1
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	f000 fba1 	bl	8016308 <USBD_CtlContinueRx>
  return USBD_OK;
 8015bc6:	4620      	mov	r0, r4
}
 8015bc8:	bd70      	pop	{r4, r5, r6, pc}
 8015bca:	bf00      	nop

08015bcc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015bcc:	b570      	push	{r4, r5, r6, lr}
 8015bce:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015bd0:	b949      	cbnz	r1, 8015be6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015bd2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8015bd6:	2b02      	cmp	r3, #2
 8015bd8:	d012      	beq.n	8015c00 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015bda:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d027      	beq.n	8015c32 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015be2:	2000      	movs	r0, #0
}
 8015be4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8015be6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015bea:	695b      	ldr	r3, [r3, #20]
 8015bec:	b133      	cbz	r3, 8015bfc <USBD_LL_DataInStage+0x30>
 8015bee:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015bf2:	2a03      	cmp	r2, #3
 8015bf4:	d102      	bne.n	8015bfc <USBD_LL_DataInStage+0x30>
}
 8015bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015bfa:	4718      	bx	r3
    return USBD_FAIL;
 8015bfc:	2003      	movs	r0, #3
}
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015c00:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8015c04:	460d      	mov	r5, r1
 8015c06:	42b3      	cmp	r3, r6
 8015c08:	d818      	bhi.n	8015c3c <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8015c0a:	d027      	beq.n	8015c5c <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015c0c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	b11b      	cbz	r3, 8015c1c <USBD_LL_DataInStage+0x50>
 8015c14:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8015c18:	2a03      	cmp	r2, #3
 8015c1a:	d01c      	beq.n	8015c56 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015c1c:	2180      	movs	r1, #128	; 0x80
 8015c1e:	4620      	mov	r0, r4
 8015c20:	f00f f8e4 	bl	8024dec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015c24:	4620      	mov	r0, r4
 8015c26:	f000 fb85 	bl	8016334 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8015c2a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d1d7      	bne.n	8015be2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8015c32:	2300      	movs	r3, #0
  return USBD_OK;
 8015c34:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8015c36:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8015c3a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8015c3c:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015c3e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8015c40:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015c42:	461a      	mov	r2, r3
 8015c44:	f000 fb48 	bl	80162d8 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015c48:	462b      	mov	r3, r5
 8015c4a:	462a      	mov	r2, r5
 8015c4c:	4629      	mov	r1, r5
 8015c4e:	4620      	mov	r0, r4
 8015c50:	f00f f918 	bl	8024e84 <USBD_LL_PrepareReceive>
 8015c54:	e7c1      	b.n	8015bda <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8015c56:	4620      	mov	r0, r4
 8015c58:	4798      	blx	r3
 8015c5a:	e7df      	b.n	8015c1c <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8015c5c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8015c5e:	4293      	cmp	r3, r2
 8015c60:	d8d4      	bhi.n	8015c0c <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8015c62:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d2d0      	bcs.n	8015c0c <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015c6a:	460a      	mov	r2, r1
 8015c6c:	f000 fb34 	bl	80162d8 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015c70:	462b      	mov	r3, r5
 8015c72:	462a      	mov	r2, r5
 8015c74:	4629      	mov	r1, r5
 8015c76:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8015c78:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015c7c:	f00f f902 	bl	8024e84 <USBD_LL_PrepareReceive>
 8015c80:	e7ab      	b.n	8015bda <USBD_LL_DataInStage+0xe>
 8015c82:	bf00      	nop

08015c84 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8015c84:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c86:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8015c88:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8015c8c:	b570      	push	{r4, r5, r6, lr}
 8015c8e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c90:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015c94:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8015c98:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8015c9a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8015c9e:	b11b      	cbz	r3, 8015ca8 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015ca0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ca8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015caa:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015cac:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015cae:	4620      	mov	r0, r4
 8015cb0:	462b      	mov	r3, r5
 8015cb2:	4611      	mov	r1, r2
 8015cb4:	f00f f87a 	bl	8024dac <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015cb8:	462b      	mov	r3, r5
 8015cba:	2200      	movs	r2, #0
 8015cbc:	2180      	movs	r1, #128	; 0x80
 8015cbe:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015cc0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015cc4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015cc8:	f00f f870 	bl	8024dac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8015ccc:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015cce:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015cd0:	6225      	str	r5, [r4, #32]
}
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}

08015cd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015cd4:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8015cd6:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8015cd8:	7419      	strb	r1, [r3, #16]
}
 8015cda:	4770      	bx	lr

08015cdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015cdc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015cde:	2104      	movs	r1, #4

  return USBD_OK;
}
 8015ce0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8015ce2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ce6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8015cea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8015cee:	4770      	bx	lr

08015cf0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015cf0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015cf4:	2b04      	cmp	r3, #4
 8015cf6:	d103      	bne.n	8015d00 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015cf8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8015cfc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8015d00:	2000      	movs	r0, #0
 8015d02:	4770      	bx	lr

08015d04 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d04:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015d08:	2a03      	cmp	r2, #3
 8015d0a:	d001      	beq.n	8015d10 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	4770      	bx	lr
{
 8015d10:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8015d12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d16:	69db      	ldr	r3, [r3, #28]
 8015d18:	b103      	cbz	r3, 8015d1c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8015d1a:	4798      	blx	r3
}
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	bd08      	pop	{r3, pc}

08015d20 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8015d20:	2000      	movs	r0, #0
 8015d22:	4770      	bx	lr

08015d24 <USBD_LL_IsoOUTIncomplete>:
 8015d24:	2000      	movs	r0, #0
 8015d26:	4770      	bx	lr

08015d28 <USBD_LL_DevConnected>:
 8015d28:	2000      	movs	r0, #0
 8015d2a:	4770      	bx	lr

08015d2c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d2c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8015d2e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d32:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8015d36:	b12a      	cbz	r2, 8015d44 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015d38:	6852      	ldr	r2, [r2, #4]
 8015d3a:	7901      	ldrb	r1, [r0, #4]
{
 8015d3c:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015d3e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8015d40:	2000      	movs	r0, #0
 8015d42:	bd08      	pop	{r3, pc}
 8015d44:	2000      	movs	r0, #0
 8015d46:	4770      	bx	lr

08015d48 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	780c      	ldrb	r4, [r1, #0]
 8015d4c:	b082      	sub	sp, #8
 8015d4e:	460e      	mov	r6, r1
 8015d50:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d52:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8015d56:	2c20      	cmp	r4, #32
 8015d58:	d00e      	beq.n	8015d78 <USBD_StdDevReq+0x30>
 8015d5a:	2c40      	cmp	r4, #64	; 0x40
 8015d5c:	d00c      	beq.n	8015d78 <USBD_StdDevReq+0x30>
 8015d5e:	b1a4      	cbz	r4, 8015d8a <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d60:	2180      	movs	r1, #128	; 0x80
 8015d62:	4628      	mov	r0, r5
 8015d64:	f00f f842 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015d68:	2100      	movs	r1, #0
 8015d6a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015d6c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8015d6e:	f00f f83d 	bl	8024dec <USBD_LL_StallEP>
}
 8015d72:	4620      	mov	r0, r4
 8015d74:	b002      	add	sp, #8
 8015d76:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015d78:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8015d7c:	4631      	mov	r1, r6
 8015d7e:	4628      	mov	r0, r5
 8015d80:	689b      	ldr	r3, [r3, #8]
}
 8015d82:	b002      	add	sp, #8
 8015d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015d88:	4718      	bx	r3
    switch (req->bRequest)
 8015d8a:	784b      	ldrb	r3, [r1, #1]
 8015d8c:	2b09      	cmp	r3, #9
 8015d8e:	d8e7      	bhi.n	8015d60 <USBD_StdDevReq+0x18>
 8015d90:	a201      	add	r2, pc, #4	; (adr r2, 8015d98 <USBD_StdDevReq+0x50>)
 8015d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d96:	bf00      	nop
 8015d98:	08015df7 	.word	0x08015df7
 8015d9c:	08015e25 	.word	0x08015e25
 8015da0:	08015d61 	.word	0x08015d61
 8015da4:	08015e43 	.word	0x08015e43
 8015da8:	08015d61 	.word	0x08015d61
 8015dac:	08015e4b 	.word	0x08015e4b
 8015db0:	08015e83 	.word	0x08015e83
 8015db4:	08015d61 	.word	0x08015d61
 8015db8:	08015ea7 	.word	0x08015ea7
 8015dbc:	08015dc1 	.word	0x08015dc1
  cfgidx = (uint8_t)(req->wValue);
 8015dc0:	7889      	ldrb	r1, [r1, #2]
 8015dc2:	4eaa      	ldr	r6, [pc, #680]	; (801606c <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015dc4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8015dc6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015dc8:	f200 8146 	bhi.w	8016058 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8015dcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015dd0:	2b02      	cmp	r3, #2
 8015dd2:	f000 8130 	beq.w	8016036 <USBD_StdDevReq+0x2ee>
 8015dd6:	2b03      	cmp	r3, #3
 8015dd8:	f000 810c 	beq.w	8015ff4 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ddc:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8015dde:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015de0:	f00f f804 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015de4:	2100      	movs	r1, #0
 8015de6:	4628      	mov	r0, r5
 8015de8:	f00f f800 	bl	8024dec <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015dec:	7831      	ldrb	r1, [r6, #0]
 8015dee:	4628      	mov	r0, r5
 8015df0:	f7ff fe80 	bl	8015af4 <USBD_ClrClassConfig>
    break;
 8015df4:	e7bd      	b.n	8015d72 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8015df6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015dfa:	3a01      	subs	r2, #1
 8015dfc:	2a02      	cmp	r2, #2
 8015dfe:	d868      	bhi.n	8015ed2 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8015e00:	88ca      	ldrh	r2, [r1, #6]
 8015e02:	2a02      	cmp	r2, #2
 8015e04:	d165      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015e06:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8015e08:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015e0c:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8015e0e:	b10a      	cbz	r2, 8015e14 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015e10:	2203      	movs	r2, #3
 8015e12:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015e14:	2202      	movs	r2, #2
 8015e16:	f105 010c 	add.w	r1, r5, #12
 8015e1a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015e1c:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015e1e:	f000 fa4d 	bl	80162bc <USBD_CtlSendData>
    break;
 8015e22:	e7a6      	b.n	8015d72 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8015e24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	2b02      	cmp	r3, #2
 8015e2c:	d851      	bhi.n	8015ed2 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e2e:	884b      	ldrh	r3, [r1, #2]
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	d19e      	bne.n	8015d72 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8015e34:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8015e36:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8015e38:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015e3c:	f000 fa6e 	bl	801631c <USBD_CtlSendStatus>
 8015e40:	e797      	b.n	8015d72 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e42:	884b      	ldrh	r3, [r1, #2]
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d194      	bne.n	8015d72 <USBD_StdDevReq+0x2a>
 8015e48:	e7f5      	b.n	8015e36 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e4a:	888b      	ldrh	r3, [r1, #4]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d140      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
 8015e50:	88cb      	ldrh	r3, [r1, #6]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d13d      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
 8015e56:	884e      	ldrh	r6, [r1, #2]
 8015e58:	2e7f      	cmp	r6, #127	; 0x7f
 8015e5a:	d83a      	bhi.n	8015ed2 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015e60:	2b03      	cmp	r3, #3
 8015e62:	d036      	beq.n	8015ed2 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e64:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8015e66:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e6a:	f00e ffef 	bl	8024e4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f000 fa54 	bl	801631c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8015e74:	2e00      	cmp	r6, #0
 8015e76:	f040 80da 	bne.w	801602e <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8015e80:	e777      	b.n	8015d72 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8015e82:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8015e84:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8015e86:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8015e8a:	0a13      	lsrs	r3, r2, #8
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	2b0e      	cmp	r3, #14
 8015e90:	d81f      	bhi.n	8015ed2 <USBD_StdDevReq+0x18a>
 8015e92:	e8df f003 	tbb	[pc, r3]
 8015e96:	6b77      	.short	0x6b77
 8015e98:	4f1e1e59 	.word	0x4f1e1e59
 8015e9c:	1e1e1e43 	.word	0x1e1e1e43
 8015ea0:	1e1e1e1e 	.word	0x1e1e1e1e
 8015ea4:	29          	.byte	0x29
 8015ea5:	00          	.byte	0x00
  if (req->wLength != 1U)
 8015ea6:	88ca      	ldrh	r2, [r1, #6]
 8015ea8:	2a01      	cmp	r2, #1
 8015eaa:	d112      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8015eac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	f200 8098 	bhi.w	8015fe6 <USBD_StdDevReq+0x29e>
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f43f af52 	beq.w	8015d60 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8015ebc:	4601      	mov	r1, r0
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015ec4:	f000 f9fa 	bl	80162bc <USBD_CtlSendData>
      break;
 8015ec8:	e753      	b.n	8015d72 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015eca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015ece:	699b      	ldr	r3, [r3, #24]
 8015ed0:	b97b      	cbnz	r3, 8015ef2 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ed2:	2180      	movs	r1, #128	; 0x80
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f00e ff89 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015eda:	2100      	movs	r1, #0
 8015edc:	4628      	mov	r0, r5
 8015ede:	f00e ff85 	bl	8024dec <USBD_LL_StallEP>
}
 8015ee2:	4620      	mov	r0, r4
 8015ee4:	b002      	add	sp, #8
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015ee8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015eec:	69db      	ldr	r3, [r3, #28]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d0ef      	beq.n	8015ed2 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ef2:	f10d 0106 	add.w	r1, sp, #6
 8015ef6:	7c28      	ldrb	r0, [r5, #16]
 8015ef8:	4798      	blx	r3
    if (req->wLength != 0U)
 8015efa:	88f2      	ldrh	r2, [r6, #6]
 8015efc:	2a00      	cmp	r2, #0
 8015efe:	d06e      	beq.n	8015fde <USBD_StdDevReq+0x296>
      if (len != 0U)
 8015f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d0e4      	beq.n	8015ed2 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8015f08:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8015f0e:	bf28      	it	cs
 8015f10:	461a      	movcs	r2, r3
 8015f12:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f16:	f000 f9d1 	bl	80162bc <USBD_CtlSendData>
 8015f1a:	e72a      	b.n	8015d72 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f1c:	7c03      	ldrb	r3, [r0, #16]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1d7      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015f22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015f26:	f10d 0006 	add.w	r0, sp, #6
 8015f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f2c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f2e:	2307      	movs	r3, #7
 8015f30:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8015f32:	e7e2      	b.n	8015efa <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f34:	7c03      	ldrb	r3, [r0, #16]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d1cb      	bne.n	8015ed2 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015f3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015f3e:	f10d 0006 	add.w	r0, sp, #6
 8015f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f44:	4798      	blx	r3
  if (err != 0U)
 8015f46:	e7d8      	b.n	8015efa <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8015f48:	b2d2      	uxtb	r2, r2
 8015f4a:	2a05      	cmp	r2, #5
 8015f4c:	d8c1      	bhi.n	8015ed2 <USBD_StdDevReq+0x18a>
 8015f4e:	a301      	add	r3, pc, #4	; (adr r3, 8015f54 <USBD_StdDevReq+0x20c>)
 8015f50:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8015f54:	08015fc5 	.word	0x08015fc5
 8015f58:	08015fb9 	.word	0x08015fb9
 8015f5c:	08015fad 	.word	0x08015fad
 8015f60:	08015fa1 	.word	0x08015fa1
 8015f64:	08015f95 	.word	0x08015f95
 8015f68:	08015ecb 	.word	0x08015ecb
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f6c:	7c03      	ldrb	r3, [r0, #16]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d17e      	bne.n	8016070 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015f72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015f76:	f10d 0006 	add.w	r0, sp, #6
 8015f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f7c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015f7e:	2302      	movs	r3, #2
 8015f80:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8015f82:	e7ba      	b.n	8015efa <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015f84:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015f88:	f10d 0106 	add.w	r1, sp, #6
 8015f8c:	7c00      	ldrb	r0, [r0, #16]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4798      	blx	r3
  if (err != 0U)
 8015f92:	e7b2      	b.n	8015efa <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015f94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015f98:	695b      	ldr	r3, [r3, #20]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d1a9      	bne.n	8015ef2 <USBD_StdDevReq+0x1aa>
 8015f9e:	e798      	b.n	8015ed2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015fa0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d1a3      	bne.n	8015ef2 <USBD_StdDevReq+0x1aa>
 8015faa:	e792      	b.n	8015ed2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015fac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d19d      	bne.n	8015ef2 <USBD_StdDevReq+0x1aa>
 8015fb6:	e78c      	b.n	8015ed2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015fb8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015fbc:	689b      	ldr	r3, [r3, #8]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d197      	bne.n	8015ef2 <USBD_StdDevReq+0x1aa>
 8015fc2:	e786      	b.n	8015ed2 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015fc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015fc8:	685b      	ldr	r3, [r3, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d191      	bne.n	8015ef2 <USBD_StdDevReq+0x1aa>
 8015fce:	e780      	b.n	8015ed2 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fd0:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8015fd2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fd4:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fd6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fda:	f7ff fd8b 	bl	8015af4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015fde:	4628      	mov	r0, r5
 8015fe0:	f000 f99c 	bl	801631c <USBD_CtlSendStatus>
 8015fe4:	e6c5      	b.n	8015d72 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	f47f aeba 	bne.w	8015d60 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015fec:	1d01      	adds	r1, r0, #4
 8015fee:	f000 f965 	bl	80162bc <USBD_CtlSendData>
      break;
 8015ff2:	e6be      	b.n	8015d72 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8015ff4:	2900      	cmp	r1, #0
 8015ff6:	d0eb      	beq.n	8015fd0 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8015ff8:	6841      	ldr	r1, [r0, #4]
 8015ffa:	2901      	cmp	r1, #1
 8015ffc:	d0ef      	beq.n	8015fde <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015ffe:	b2c9      	uxtb	r1, r1
 8016000:	f7ff fd78 	bl	8015af4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016004:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016006:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8016008:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801600a:	f7ff fd6b 	bl	8015ae4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 801600e:	4606      	mov	r6, r0
 8016010:	2800      	cmp	r0, #0
 8016012:	d0e4      	beq.n	8015fde <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016014:	2180      	movs	r1, #128	; 0x80
 8016016:	4628      	mov	r0, r5
 8016018:	f00e fee8 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801601c:	2100      	movs	r1, #0
 801601e:	4628      	mov	r0, r5
 8016020:	4634      	mov	r4, r6
 8016022:	f00e fee3 	bl	8024dec <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016026:	7929      	ldrb	r1, [r5, #4]
 8016028:	4628      	mov	r0, r5
 801602a:	f7ff fd63 	bl	8015af4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801602e:	2302      	movs	r3, #2
 8016030:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8016034:	e69d      	b.n	8015d72 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8016036:	2900      	cmp	r1, #0
 8016038:	d0d1      	beq.n	8015fde <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 801603a:	2101      	movs	r1, #1
 801603c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801603e:	f7ff fd51 	bl	8015ae4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8016042:	4604      	mov	r4, r0
 8016044:	2800      	cmp	r0, #0
 8016046:	f47f af44 	bne.w	8015ed2 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 801604a:	4628      	mov	r0, r5
 801604c:	f000 f966 	bl	801631c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016050:	2303      	movs	r3, #3
 8016052:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8016056:	e68c      	b.n	8015d72 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016058:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801605a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801605c:	f00e fec6 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016060:	2100      	movs	r1, #0
 8016062:	4628      	mov	r0, r5
 8016064:	f00e fec2 	bl	8024dec <USBD_LL_StallEP>
}
 8016068:	e683      	b.n	8015d72 <USBD_StdDevReq+0x2a>
 801606a:	bf00      	nop
 801606c:	20006670 	.word	0x20006670
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016070:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8016074:	f10d 0006 	add.w	r0, sp, #6
 8016078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801607a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801607c:	2302      	movs	r3, #2
 801607e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8016080:	e73b      	b.n	8015efa <USBD_StdDevReq+0x1b2>
 8016082:	bf00      	nop

08016084 <USBD_StdItfReq>:
{
 8016084:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016086:	780b      	ldrb	r3, [r1, #0]
{
 8016088:	460d      	mov	r5, r1
 801608a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801608c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016090:	2a40      	cmp	r2, #64	; 0x40
 8016092:	d00b      	beq.n	80160ac <USBD_StdItfReq+0x28>
 8016094:	065b      	lsls	r3, r3, #25
 8016096:	d509      	bpl.n	80160ac <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8016098:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801609a:	2180      	movs	r1, #128	; 0x80
 801609c:	f00e fea6 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80160a0:	4620      	mov	r0, r4
 80160a2:	4629      	mov	r1, r5
 80160a4:	f00e fea2 	bl	8024dec <USBD_LL_StallEP>
}
 80160a8:	4628      	mov	r0, r5
 80160aa:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80160ac:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80160b0:	3b01      	subs	r3, #1
 80160b2:	2b02      	cmp	r3, #2
 80160b4:	d812      	bhi.n	80160dc <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80160b6:	792b      	ldrb	r3, [r5, #4]
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	d80f      	bhi.n	80160dc <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80160bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80160c0:	4629      	mov	r1, r5
 80160c2:	4620      	mov	r0, r4
 80160c4:	689b      	ldr	r3, [r3, #8]
 80160c6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80160c8:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80160ca:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d1eb      	bne.n	80160a8 <USBD_StdItfReq+0x24>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d1e9      	bne.n	80160a8 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80160d4:	4620      	mov	r0, r4
 80160d6:	f000 f921 	bl	801631c <USBD_CtlSendStatus>
 80160da:	e7e5      	b.n	80160a8 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80160dc:	2180      	movs	r1, #128	; 0x80
 80160de:	4620      	mov	r0, r4
 80160e0:	f00e fe84 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80160e4:	2100      	movs	r1, #0
 80160e6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80160e8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80160ea:	f00e fe7f 	bl	8024dec <USBD_LL_StallEP>
}
 80160ee:	4628      	mov	r0, r5
 80160f0:	bd38      	pop	{r3, r4, r5, pc}
 80160f2:	bf00      	nop

080160f4 <USBD_StdEPReq>:
{
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	780b      	ldrb	r3, [r1, #0]
 80160f8:	460d      	mov	r5, r1
 80160fa:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016100:	2b20      	cmp	r3, #32
 8016102:	d00c      	beq.n	801611e <USBD_StdEPReq+0x2a>
 8016104:	2b40      	cmp	r3, #64	; 0x40
 8016106:	d00a      	beq.n	801611e <USBD_StdEPReq+0x2a>
 8016108:	b18b      	cbz	r3, 801612e <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801610a:	2180      	movs	r1, #128	; 0x80
 801610c:	4620      	mov	r0, r4
 801610e:	f00e fe6d 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016112:	2100      	movs	r1, #0
 8016114:	4620      	mov	r0, r4
 8016116:	f00e fe69 	bl	8024dec <USBD_LL_StallEP>
}
 801611a:	2000      	movs	r0, #0
 801611c:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801611e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8016122:	4629      	mov	r1, r5
 8016124:	4620      	mov	r0, r4
 8016126:	689b      	ldr	r3, [r3, #8]
}
 8016128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801612c:	4718      	bx	r3
    switch (req->bRequest)
 801612e:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8016130:	888a      	ldrh	r2, [r1, #4]
 8016132:	2b01      	cmp	r3, #1
 8016134:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8016136:	d036      	beq.n	80161a6 <USBD_StdEPReq+0xb2>
 8016138:	2b03      	cmp	r3, #3
 801613a:	d023      	beq.n	8016184 <USBD_StdEPReq+0x90>
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e4      	bne.n	801610a <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8016140:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016144:	2b02      	cmp	r3, #2
 8016146:	d04c      	beq.n	80161e2 <USBD_StdEPReq+0xee>
 8016148:	2b03      	cmp	r3, #3
 801614a:	d1de      	bne.n	801610a <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801614c:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8016150:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016156:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801615a:	d453      	bmi.n	8016204 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801615c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8016160:	2b00      	cmp	r3, #0
 8016162:	d0d2      	beq.n	801610a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016164:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016168:	2514      	movs	r5, #20
 801616a:	fb05 0503 	mla	r5, r5, r3, r0
 801616e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016172:	2b00      	cmp	r3, #0
 8016174:	d152      	bne.n	801621c <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8016176:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016178:	2202      	movs	r2, #2
 801617a:	4629      	mov	r1, r5
 801617c:	4620      	mov	r0, r4
 801617e:	f000 f89d 	bl	80162bc <USBD_CtlSendData>
          break;
 8016182:	e7ca      	b.n	801611a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8016184:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016188:	2b02      	cmp	r3, #2
 801618a:	d021      	beq.n	80161d0 <USBD_StdEPReq+0xdc>
 801618c:	2b03      	cmp	r3, #3
 801618e:	d1bc      	bne.n	801610a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016190:	886b      	ldrh	r3, [r5, #2]
 8016192:	b923      	cbnz	r3, 801619e <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016194:	064a      	lsls	r2, r1, #25
 8016196:	d002      	beq.n	801619e <USBD_StdEPReq+0xaa>
 8016198:	88eb      	ldrh	r3, [r5, #6]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d049      	beq.n	8016232 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 801619e:	4620      	mov	r0, r4
 80161a0:	f000 f8bc 	bl	801631c <USBD_CtlSendStatus>
        break;
 80161a4:	e7b9      	b.n	801611a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80161a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80161aa:	2b02      	cmp	r3, #2
 80161ac:	d010      	beq.n	80161d0 <USBD_StdEPReq+0xdc>
 80161ae:	2b03      	cmp	r3, #3
 80161b0:	d1ab      	bne.n	801610a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80161b2:	886b      	ldrh	r3, [r5, #2]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d1b0      	bne.n	801611a <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80161b8:	064e      	lsls	r6, r1, #25
 80161ba:	d135      	bne.n	8016228 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 80161bc:	4620      	mov	r0, r4
 80161be:	f000 f8ad 	bl	801631c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80161c2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80161c6:	4629      	mov	r1, r5
 80161c8:	4620      	mov	r0, r4
 80161ca:	689b      	ldr	r3, [r3, #8]
 80161cc:	4798      	blx	r3
 80161ce:	e7a4      	b.n	801611a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161d0:	064b      	lsls	r3, r1, #25
 80161d2:	d09a      	beq.n	801610a <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80161d4:	f00e fe0a 	bl	8024dec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80161d8:	2180      	movs	r1, #128	; 0x80
 80161da:	4620      	mov	r0, r4
 80161dc:	f00e fe06 	bl	8024dec <USBD_LL_StallEP>
 80161e0:	e79b      	b.n	801611a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161e2:	0648      	lsls	r0, r1, #25
 80161e4:	d191      	bne.n	801610a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161e6:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80161e8:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80161ec:	f04f 0202 	mov.w	r2, #2
 80161f0:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161f2:	bf4c      	ite	mi
 80161f4:	f104 0114 	addmi.w	r1, r4, #20
 80161f8:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 80161fc:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80161fe:	f000 f85d 	bl	80162bc <USBD_CtlSendData>
        break;
 8016202:	e78a      	b.n	801611a <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016204:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016206:	2b00      	cmp	r3, #0
 8016208:	f43f af7f 	beq.w	801610a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801620c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016210:	1c5d      	adds	r5, r3, #1
 8016212:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016216:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801621a:	e7aa      	b.n	8016172 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801621c:	4620      	mov	r0, r4
 801621e:	f00e fe01 	bl	8024e24 <USBD_LL_IsStallEP>
 8016222:	b120      	cbz	r0, 801622e <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8016224:	2301      	movs	r3, #1
 8016226:	e7a6      	b.n	8016176 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016228:	f00e fdee 	bl	8024e08 <USBD_LL_ClearStallEP>
 801622c:	e7c6      	b.n	80161bc <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 801622e:	6028      	str	r0, [r5, #0]
 8016230:	e7a2      	b.n	8016178 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8016232:	f00e fddb 	bl	8024dec <USBD_LL_StallEP>
 8016236:	e7b2      	b.n	801619e <USBD_StdEPReq+0xaa>

08016238 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8016238:	780b      	ldrb	r3, [r1, #0]
 801623a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 801623c:	784b      	ldrb	r3, [r1, #1]
 801623e:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8016240:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8016242:	8043      	strh	r3, [r0, #2]
 8016244:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8016246:	8083      	strh	r3, [r0, #4]
 8016248:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801624a:	80c3      	strh	r3, [r0, #6]
}
 801624c:	4770      	bx	lr
 801624e:	bf00      	nop

08016250 <USBD_CtlError>:
{
 8016250:	b510      	push	{r4, lr}
 8016252:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016254:	2180      	movs	r1, #128	; 0x80
 8016256:	f00e fdc9 	bl	8024dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801625a:	2100      	movs	r1, #0
 801625c:	4620      	mov	r0, r4
}
 801625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8016262:	f00e bdc3 	b.w	8024dec <USBD_LL_StallEP>
 8016266:	bf00      	nop

08016268 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8016268:	b318      	cbz	r0, 80162b2 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801626a:	7803      	ldrb	r3, [r0, #0]
{
 801626c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801626e:	b30b      	cbz	r3, 80162b4 <USBD_GetString+0x4c>
 8016270:	4604      	mov	r4, r0
 8016272:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8016276:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 801627a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801627e:	b2db      	uxtb	r3, r3
 8016280:	2d00      	cmp	r5, #0
 8016282:	d1f8      	bne.n	8016276 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016284:	3301      	adds	r3, #1
 8016286:	005b      	lsls	r3, r3, #1
 8016288:	b2dc      	uxtb	r4, r3
 801628a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801628c:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 801628e:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016290:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8016292:	7804      	ldrb	r4, [r0, #0]
 8016294:	b15c      	cbz	r4, 80162ae <USBD_GetString+0x46>
  idx++;
 8016296:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8016298:	2500      	movs	r5, #0
    idx++;
 801629a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 801629c:	54cc      	strb	r4, [r1, r3]
    idx++;
 801629e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80162a0:	b2d2      	uxtb	r2, r2
    idx++;
 80162a2:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80162a4:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80162a6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80162aa:	2c00      	cmp	r4, #0
 80162ac:	d1f5      	bne.n	801629a <USBD_GetString+0x32>
}
 80162ae:	bc30      	pop	{r4, r5}
 80162b0:	4770      	bx	lr
 80162b2:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80162b4:	2402      	movs	r4, #2
 80162b6:	4623      	mov	r3, r4
 80162b8:	e7e7      	b.n	801628a <USBD_GetString+0x22>
 80162ba:	bf00      	nop

080162bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162bc:	b510      	push	{r4, lr}
 80162be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162c0:	2402      	movs	r4, #2
{
 80162c2:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162c4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162c6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80162ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162ce:	f00e fdcb 	bl	8024e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 80162d2:	2000      	movs	r0, #0
 80162d4:	bd10      	pop	{r4, pc}
 80162d6:	bf00      	nop

080162d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162d8:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162da:	2100      	movs	r1, #0
{
 80162dc:	b508      	push	{r3, lr}
 80162de:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162e0:	4662      	mov	r2, ip
 80162e2:	f00e fdc1 	bl	8024e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 80162e6:	2000      	movs	r0, #0
 80162e8:	bd08      	pop	{r3, pc}
 80162ea:	bf00      	nop

080162ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162ec:	b510      	push	{r4, lr}
 80162ee:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162f0:	2403      	movs	r4, #3
{
 80162f2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80162f4:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162f6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80162fa:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80162fe:	f00e fdc1 	bl	8024e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8016302:	2000      	movs	r0, #0
 8016304:	bd10      	pop	{r4, pc}
 8016306:	bf00      	nop

08016308 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016308:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801630a:	2100      	movs	r1, #0
{
 801630c:	b508      	push	{r3, lr}
 801630e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016310:	4662      	mov	r2, ip
 8016312:	f00e fdb7 	bl	8024e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8016316:	2000      	movs	r0, #0
 8016318:	bd08      	pop	{r3, pc}
 801631a:	bf00      	nop

0801631c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801631c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801631e:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016320:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016322:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016326:	461a      	mov	r2, r3
 8016328:	4619      	mov	r1, r3
 801632a:	f00e fd9d 	bl	8024e68 <USBD_LL_Transmit>

  return USBD_OK;
}
 801632e:	2000      	movs	r0, #0
 8016330:	bd08      	pop	{r3, pc}
 8016332:	bf00      	nop

08016334 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016334:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016336:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016338:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801633a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801633e:	461a      	mov	r2, r3
 8016340:	4619      	mov	r1, r3
 8016342:	f00e fd9f 	bl	8024e84 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8016346:	2000      	movs	r0, #0
 8016348:	bd08      	pop	{r3, pc}
 801634a:	bf00      	nop

0801634c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801634c:	4b10      	ldr	r3, [pc, #64]	; (8016390 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801634e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8016350:	7a5c      	ldrb	r4, [r3, #9]
 8016352:	b9cc      	cbnz	r4, 8016388 <FATFS_LinkDriver+0x3c>
 8016354:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8016356:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 801635a:	7a5c      	ldrb	r4, [r3, #9]
 801635c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801635e:	7a5c      	ldrb	r4, [r3, #9]
 8016360:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016364:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8016366:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8016368:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 801636a:	441c      	add	r4, r3
 801636c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 801636e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8016370:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8016372:	b2e4      	uxtb	r4, r4
 8016374:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8016376:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8016378:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 801637a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 801637c:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 801637e:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8016380:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8016384:	708b      	strb	r3, [r1, #2]
}
 8016386:	4770      	bx	lr
  uint8_t ret = 1;
 8016388:	2001      	movs	r0, #1
}
 801638a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801638e:	4770      	bx	lr
 8016390:	20006674 	.word	0x20006674

08016394 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016394:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8016396:	f001 f9c9 	bl	801772c <vTaskStartScheduler>
  
  return osOK;
}
 801639a:	2000      	movs	r0, #0
 801639c:	bd08      	pop	{r3, pc}
 801639e:	bf00      	nop

080163a0 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163a0:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80163a4:	b10b      	cbz	r3, 80163aa <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80163a6:	f001 ba23 	b.w	80177f0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80163aa:	f001 ba1b 	b.w	80177e4 <xTaskGetTickCount>
 80163ae:	bf00      	nop

080163b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80163b0:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80163b2:	6944      	ldr	r4, [r0, #20]
{
 80163b4:	b086      	sub	sp, #24
 80163b6:	4684      	mov	ip, r0
 80163b8:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80163ba:	b1ac      	cbz	r4, 80163e8 <osThreadCreate+0x38>
 80163bc:	6986      	ldr	r6, [r0, #24]
 80163be:	b19e      	cbz	r6, 80163e8 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163c0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80163c4:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 80163c8:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163cc:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80163d0:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 80163d2:	bf14      	ite	ne
 80163d4:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80163d8:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163da:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80163de:	9500      	str	r5, [sp, #0]
 80163e0:	f001 f932 	bl	8017648 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80163e4:	b006      	add	sp, #24
 80163e6:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163e8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 80163ec:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 80163f0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80163f2:	bf14      	ite	ne
 80163f4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80163f6:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163f8:	e9dc 1000 	ldrd	r1, r0, [ip]
 80163fc:	9400      	str	r4, [sp, #0]
 80163fe:	ac05      	add	r4, sp, #20
 8016400:	9401      	str	r4, [sp, #4]
 8016402:	f001 f961 	bl	80176c8 <xTaskCreate>
 8016406:	2801      	cmp	r0, #1
  return handle;
 8016408:	bf0c      	ite	eq
 801640a:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 801640c:	2000      	movne	r0, #0
}
 801640e:	b006      	add	sp, #24
 8016410:	bd70      	pop	{r4, r5, r6, pc}
 8016412:	bf00      	nop

08016414 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016414:	2801      	cmp	r0, #1
{
 8016416:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016418:	bf38      	it	cc
 801641a:	2001      	movcc	r0, #1
 801641c:	f001 fb48 	bl	8017ab0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016420:	2000      	movs	r0, #0
 8016422:	bd08      	pop	{r3, pc}

08016424 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8016424:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8016426:	6844      	ldr	r4, [r0, #4]
{
 8016428:	b082      	sub	sp, #8
 801642a:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 801642c:	b16c      	cbz	r4, 801644a <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 801642e:	f1a1 0201 	sub.w	r2, r1, #1
 8016432:	6800      	ldr	r0, [r0, #0]
 8016434:	2101      	movs	r1, #1
 8016436:	fab2 f282 	clz	r2, r2
 801643a:	0952      	lsrs	r2, r2, #5
 801643c:	e9cd 0400 	strd	r0, r4, [sp]
 8016440:	4808      	ldr	r0, [pc, #32]	; (8016464 <osTimerCreate+0x40>)
 8016442:	f001 fee9 	bl	8018218 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8016446:	b002      	add	sp, #8
 8016448:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 801644a:	f1a1 0201 	sub.w	r2, r1, #1
 801644e:	6804      	ldr	r4, [r0, #0]
 8016450:	2101      	movs	r1, #1
 8016452:	4804      	ldr	r0, [pc, #16]	; (8016464 <osTimerCreate+0x40>)
 8016454:	fab2 f282 	clz	r2, r2
 8016458:	9400      	str	r4, [sp, #0]
 801645a:	0952      	lsrs	r2, r2, #5
 801645c:	f001 feac 	bl	80181b8 <xTimerCreate>
}
 8016460:	b002      	add	sp, #8
 8016462:	bd10      	pop	{r4, pc}
 8016464:	0802b2d8 	.word	0x0802b2d8

08016468 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8016468:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801646a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 801646c:	b109      	cbz	r1, 8016472 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801646e:	f000 bbc9 	b.w	8016c04 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8016472:	f000 bbdf 	b.w	8016c34 <xQueueCreateMutex>
 8016476:	bf00      	nop

08016478 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8016478:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801647a:	2400      	movs	r4, #0
{
 801647c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801647e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8016480:	b310      	cbz	r0, 80164c8 <osMutexWait+0x50>
 8016482:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8016486:	b933      	cbnz	r3, 8016496 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8016488:	f000 fd88 	bl	8016f9c <xQueueSemaphoreTake>
 801648c:	2801      	cmp	r0, #1
 801648e:	d118      	bne.n	80164c2 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8016490:	2000      	movs	r0, #0
}
 8016492:	b002      	add	sp, #8
 8016494:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016496:	aa01      	add	r2, sp, #4
 8016498:	4621      	mov	r1, r4
 801649a:	f000 fe63 	bl	8017164 <xQueueReceiveFromISR>
 801649e:	2801      	cmp	r0, #1
 80164a0:	d10f      	bne.n	80164c2 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80164a2:	9b01      	ldr	r3, [sp, #4]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d0f3      	beq.n	8016490 <osMutexWait+0x18>
 80164a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80164ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80164b4:	f3bf 8f4f 	dsb	sy
 80164b8:	f3bf 8f6f 	isb	sy
  return osOK;
 80164bc:	4620      	mov	r0, r4
}
 80164be:	b002      	add	sp, #8
 80164c0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80164c2:	20ff      	movs	r0, #255	; 0xff
}
 80164c4:	b002      	add	sp, #8
 80164c6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80164c8:	2080      	movs	r0, #128	; 0x80
}
 80164ca:	b002      	add	sp, #8
 80164cc:	bd10      	pop	{r4, pc}
 80164ce:	bf00      	nop

080164d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80164d0:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80164d2:	2400      	movs	r4, #0
{
 80164d4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80164d6:	9401      	str	r4, [sp, #4]
 80164d8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80164dc:	b19b      	cbz	r3, 8016506 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80164de:	a901      	add	r1, sp, #4
 80164e0:	f000 fc34 	bl	8016d4c <xQueueGiveFromISR>
 80164e4:	2801      	cmp	r0, #1
 80164e6:	d114      	bne.n	8016512 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80164e8:	9b01      	ldr	r3, [sp, #4]
 80164ea:	b1ab      	cbz	r3, 8016518 <osMutexRelease+0x48>
 80164ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80164f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80164f8:	f3bf 8f4f 	dsb	sy
 80164fc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8016500:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8016502:	b002      	add	sp, #8
 8016504:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8016506:	461a      	mov	r2, r3
 8016508:	4619      	mov	r1, r3
 801650a:	f000 faad 	bl	8016a68 <xQueueGenericSend>
 801650e:	2801      	cmp	r0, #1
 8016510:	d002      	beq.n	8016518 <osMutexRelease+0x48>
    result = osErrorOS;
 8016512:	20ff      	movs	r0, #255	; 0xff
}
 8016514:	b002      	add	sp, #8
 8016516:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8016518:	2000      	movs	r0, #0
}
 801651a:	b002      	add	sp, #8
 801651c:	bd10      	pop	{r4, pc}
 801651e:	bf00      	nop

08016520 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016520:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8016522:	6844      	ldr	r4, [r0, #4]
{ 
 8016524:	b083      	sub	sp, #12
 8016526:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8016528:	b184      	cbz	r4, 801654c <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801652a:	2901      	cmp	r1, #1
 801652c:	d003      	beq.n	8016536 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801652e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8016530:	4620      	mov	r0, r4
 8016532:	b003      	add	sp, #12
 8016534:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8016536:	2200      	movs	r2, #0
 8016538:	2503      	movs	r5, #3
 801653a:	4623      	mov	r3, r4
 801653c:	4611      	mov	r1, r2
 801653e:	9500      	str	r5, [sp, #0]
 8016540:	f000 fa08 	bl	8016954 <xQueueGenericCreateStatic>
 8016544:	4604      	mov	r4, r0
}
 8016546:	4620      	mov	r0, r4
 8016548:	b003      	add	sp, #12
 801654a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 801654c:	2901      	cmp	r1, #1
 801654e:	d1ef      	bne.n	8016530 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8016550:	4621      	mov	r1, r4
 8016552:	2203      	movs	r2, #3
 8016554:	f000 fa56 	bl	8016a04 <xQueueGenericCreate>
 8016558:	4604      	mov	r4, r0
 801655a:	2800      	cmp	r0, #0
 801655c:	d0e8      	beq.n	8016530 <osSemaphoreCreate+0x10>
 801655e:	2300      	movs	r3, #0
 8016560:	461a      	mov	r2, r3
 8016562:	4619      	mov	r1, r3
 8016564:	f000 fa80 	bl	8016a68 <xQueueGenericSend>
 8016568:	e7e2      	b.n	8016530 <osSemaphoreCreate+0x10>
 801656a:	bf00      	nop

0801656c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801656c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801656e:	2400      	movs	r4, #0
{
 8016570:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8016572:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8016574:	b310      	cbz	r0, 80165bc <osSemaphoreWait+0x50>
 8016576:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801657a:	b933      	cbnz	r3, 801658a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801657c:	f000 fd0e 	bl	8016f9c <xQueueSemaphoreTake>
 8016580:	2801      	cmp	r0, #1
 8016582:	d118      	bne.n	80165b6 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8016584:	2000      	movs	r0, #0
}
 8016586:	b002      	add	sp, #8
 8016588:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801658a:	aa01      	add	r2, sp, #4
 801658c:	4621      	mov	r1, r4
 801658e:	f000 fde9 	bl	8017164 <xQueueReceiveFromISR>
 8016592:	2801      	cmp	r0, #1
 8016594:	d10f      	bne.n	80165b6 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8016596:	9b01      	ldr	r3, [sp, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d0f3      	beq.n	8016584 <osSemaphoreWait+0x18>
 801659c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80165a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80165a8:	f3bf 8f4f 	dsb	sy
 80165ac:	f3bf 8f6f 	isb	sy
  return osOK;
 80165b0:	4620      	mov	r0, r4
}
 80165b2:	b002      	add	sp, #8
 80165b4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80165b6:	20ff      	movs	r0, #255	; 0xff
}
 80165b8:	b002      	add	sp, #8
 80165ba:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80165bc:	2080      	movs	r0, #128	; 0x80
}
 80165be:	b002      	add	sp, #8
 80165c0:	bd10      	pop	{r4, pc}
 80165c2:	bf00      	nop

080165c4 <osSemaphoreRelease>:
 80165c4:	b510      	push	{r4, lr}
 80165c6:	2400      	movs	r4, #0
 80165c8:	b082      	sub	sp, #8
 80165ca:	9401      	str	r4, [sp, #4]
 80165cc:	f3ef 8305 	mrs	r3, IPSR
 80165d0:	b19b      	cbz	r3, 80165fa <osSemaphoreRelease+0x36>
 80165d2:	a901      	add	r1, sp, #4
 80165d4:	f000 fbba 	bl	8016d4c <xQueueGiveFromISR>
 80165d8:	2801      	cmp	r0, #1
 80165da:	d114      	bne.n	8016606 <osSemaphoreRelease+0x42>
 80165dc:	9b01      	ldr	r3, [sp, #4]
 80165de:	b1ab      	cbz	r3, 801660c <osSemaphoreRelease+0x48>
 80165e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80165e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80165ec:	f3bf 8f4f 	dsb	sy
 80165f0:	f3bf 8f6f 	isb	sy
 80165f4:	4620      	mov	r0, r4
 80165f6:	b002      	add	sp, #8
 80165f8:	bd10      	pop	{r4, pc}
 80165fa:	461a      	mov	r2, r3
 80165fc:	4619      	mov	r1, r3
 80165fe:	f000 fa33 	bl	8016a68 <xQueueGenericSend>
 8016602:	2801      	cmp	r0, #1
 8016604:	d002      	beq.n	801660c <osSemaphoreRelease+0x48>
 8016606:	20ff      	movs	r0, #255	; 0xff
 8016608:	b002      	add	sp, #8
 801660a:	bd10      	pop	{r4, pc}
 801660c:	2000      	movs	r0, #0
 801660e:	b002      	add	sp, #8
 8016610:	bd10      	pop	{r4, pc}
 8016612:	bf00      	nop

08016614 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016614:	6882      	ldr	r2, [r0, #8]
 8016616:	b15a      	cbz	r2, 8016630 <osMessageCreate+0x1c>
 8016618:	68c3      	ldr	r3, [r0, #12]
 801661a:	b14b      	cbz	r3, 8016630 <osMessageCreate+0x1c>
{
 801661c:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801661e:	2400      	movs	r4, #0
{
 8016620:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016622:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016626:	9400      	str	r4, [sp, #0]
 8016628:	f000 f994 	bl	8016954 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801662c:	b002      	add	sp, #8
 801662e:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016630:	2200      	movs	r2, #0
 8016632:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016636:	f000 b9e5 	b.w	8016a04 <xQueueGenericCreate>
 801663a:	bf00      	nop

0801663c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801663c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 801663e:	2400      	movs	r4, #0
{
 8016640:	b084      	sub	sp, #16
 8016642:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016644:	9403      	str	r4, [sp, #12]
 8016646:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801664a:	b15b      	cbz	r3, 8016664 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801664c:	4623      	mov	r3, r4
 801664e:	aa03      	add	r2, sp, #12
 8016650:	a901      	add	r1, sp, #4
 8016652:	f000 fb09 	bl	8016c68 <xQueueGenericSendFromISR>
 8016656:	2801      	cmp	r0, #1
 8016658:	d10c      	bne.n	8016674 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801665a:	9b03      	ldr	r3, [sp, #12]
 801665c:	b96b      	cbnz	r3, 801667a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 801665e:	2000      	movs	r0, #0
}
 8016660:	b004      	add	sp, #16
 8016662:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016664:	2a01      	cmp	r2, #1
 8016666:	a901      	add	r1, sp, #4
 8016668:	bf38      	it	cc
 801666a:	2201      	movcc	r2, #1
 801666c:	f000 f9fc 	bl	8016a68 <xQueueGenericSend>
 8016670:	2801      	cmp	r0, #1
 8016672:	d0f4      	beq.n	801665e <osMessagePut+0x22>
      return osErrorOS;
 8016674:	20ff      	movs	r0, #255	; 0xff
}
 8016676:	b004      	add	sp, #16
 8016678:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 801667a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	f3bf 8f6f 	isb	sy
  return osOK;
 801668e:	4620      	mov	r0, r4
}
 8016690:	b004      	add	sp, #16
 8016692:	bd10      	pop	{r4, pc}

08016694 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016694:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8016696:	2600      	movs	r6, #0
{
 8016698:	b084      	sub	sp, #16
 801669a:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 801669c:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80166a0:	b379      	cbz	r1, 8016702 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80166a2:	460b      	mov	r3, r1
 80166a4:	9600      	str	r6, [sp, #0]
 80166a6:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80166aa:	b991      	cbnz	r1, 80166d2 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80166ac:	a902      	add	r1, sp, #8
 80166ae:	4618      	mov	r0, r3
 80166b0:	4615      	mov	r5, r2
 80166b2:	f000 fbab 	bl	8016e0c <xQueueReceive>
 80166b6:	2801      	cmp	r0, #1
 80166b8:	d02d      	beq.n	8016716 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80166ba:	2d00      	cmp	r5, #0
 80166bc:	bf18      	it	ne
 80166be:	2540      	movne	r5, #64	; 0x40
 80166c0:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80166c2:	ab04      	add	r3, sp, #16
 80166c4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80166c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80166cc:	4620      	mov	r0, r4
 80166ce:	b004      	add	sp, #16
 80166d0:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80166d2:	466a      	mov	r2, sp
 80166d4:	4618      	mov	r0, r3
 80166d6:	a902      	add	r1, sp, #8
 80166d8:	f000 fd44 	bl	8017164 <xQueueReceiveFromISR>
      event.status = osOK;
 80166dc:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 80166de:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80166e0:	bf0c      	ite	eq
 80166e2:	2210      	moveq	r2, #16
 80166e4:	2200      	movne	r2, #0
 80166e6:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d0ea      	beq.n	80166c2 <osMessageGet+0x2e>
 80166ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80166f8:	f3bf 8f4f 	dsb	sy
 80166fc:	f3bf 8f6f 	isb	sy
 8016700:	e7df      	b.n	80166c2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8016702:	2380      	movs	r3, #128	; 0x80
 8016704:	9301      	str	r3, [sp, #4]
    return event;
 8016706:	ab04      	add	r3, sp, #16
 8016708:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801670c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016710:	4620      	mov	r0, r4
 8016712:	b004      	add	sp, #16
 8016714:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8016716:	2310      	movs	r3, #16
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	e7d2      	b.n	80166c2 <osMessageGet+0x2e>

0801671c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801671c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016720:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016724:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016726:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016728:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801672a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801672c:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016730:	4770      	bx	lr
 8016732:	bf00      	nop

08016734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016734:	2300      	movs	r3, #0
 8016736:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop

0801673c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801673c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801673e:	6802      	ldr	r2, [r0, #0]
{
 8016740:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016742:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8016744:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8016746:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016748:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801674a:	689c      	ldr	r4, [r3, #8]
 801674c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801674e:	6099      	str	r1, [r3, #8]
}
 8016750:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8016754:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8016756:	6002      	str	r2, [r0, #0]
}
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop

0801675c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801675c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801675e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016760:	1c6b      	adds	r3, r5, #1
 8016762:	d010      	beq.n	8016786 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016764:	f100 0308 	add.w	r3, r0, #8
 8016768:	461c      	mov	r4, r3
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	681a      	ldr	r2, [r3, #0]
 801676e:	42aa      	cmp	r2, r5
 8016770:	d9fa      	bls.n	8016768 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8016772:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8016774:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8016776:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016778:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801677a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801677c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 801677e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8016780:	6002      	str	r2, [r0, #0]
}
 8016782:	bc30      	pop	{r4, r5}
 8016784:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8016786:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8016788:	6863      	ldr	r3, [r4, #4]
 801678a:	e7f2      	b.n	8016772 <vListInsert+0x16>

0801678c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801678c:	6903      	ldr	r3, [r0, #16]
{
 801678e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016790:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016792:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8016796:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8016798:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801679c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801679e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80167a0:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80167a4:	bf08      	it	eq
 80167a6:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80167a8:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80167aa:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80167ac:	3a01      	subs	r2, #1
 80167ae:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80167b0:	6818      	ldr	r0, [r3, #0]
}
 80167b2:	4770      	bx	lr

080167b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80167b4:	b570      	push	{r4, r5, r6, lr}
 80167b6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80167b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80167ba:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80167bc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80167be:	b92a      	cbnz	r2, 80167cc <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80167c0:	6805      	ldr	r5, [r0, #0]
 80167c2:	b365      	cbz	r5, 801681e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167c4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80167c6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167c8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80167ca:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80167cc:	b97d      	cbnz	r5, 80167ee <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80167ce:	6840      	ldr	r0, [r0, #4]
 80167d0:	f00e fdfa 	bl	80253c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167d4:	6863      	ldr	r3, [r4, #4]
 80167d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80167d8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167da:	68a2      	ldr	r2, [r4, #8]
 80167dc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167de:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167e0:	d319      	bcc.n	8016816 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80167e2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167e4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80167e6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80167e8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167ea:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80167ec:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80167ee:	68c0      	ldr	r0, [r0, #12]
 80167f0:	f00e fdea 	bl	80253c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80167f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80167f6:	68e3      	ldr	r3, [r4, #12]
 80167f8:	4251      	negs	r1, r2
 80167fa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167fc:	6822      	ldr	r2, [r4, #0]
 80167fe:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016800:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016802:	d202      	bcs.n	801680a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016804:	68a3      	ldr	r3, [r4, #8]
 8016806:	440b      	add	r3, r1
 8016808:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801680a:	2d02      	cmp	r5, #2
 801680c:	d00d      	beq.n	801682a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801680e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016810:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016812:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016814:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016816:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016818:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801681a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801681c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801681e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016820:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016822:	f001 fadb 	bl	8017ddc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016826:	60a5      	str	r5, [r4, #8]
 8016828:	e7ce      	b.n	80167c8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801682a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 801682c:	f04f 0000 	mov.w	r0, #0
 8016830:	bf38      	it	cc
 8016832:	2601      	movcc	r6, #1
 8016834:	e7c8      	b.n	80167c8 <prvCopyDataToQueue+0x14>
 8016836:	bf00      	nop

08016838 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016838:	b570      	push	{r4, r5, r6, lr}
 801683a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801683c:	f001 ff6a 	bl	8018714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016840:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8016844:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016846:	2c00      	cmp	r4, #0
 8016848:	dd14      	ble.n	8016874 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801684a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 801684e:	e003      	b.n	8016858 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016850:	1e63      	subs	r3, r4, #1
 8016852:	b2da      	uxtb	r2, r3
 8016854:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016856:	b16a      	cbz	r2, 8016874 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016858:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801685a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801685c:	b153      	cbz	r3, 8016874 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801685e:	f001 f9a5 	bl	8017bac <xTaskRemoveFromEventList>
 8016862:	2800      	cmp	r0, #0
 8016864:	d0f4      	beq.n	8016850 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8016866:	f001 fa45 	bl	8017cf4 <vTaskMissedYield>
			--cTxLock;
 801686a:	1e63      	subs	r3, r4, #1
 801686c:	b2da      	uxtb	r2, r3
 801686e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016870:	2a00      	cmp	r2, #0
 8016872:	d1f1      	bne.n	8016858 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016874:	23ff      	movs	r3, #255	; 0xff
 8016876:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801687a:	f001 ff71 	bl	8018760 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801687e:	f001 ff49 	bl	8018714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016882:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8016886:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016888:	2c00      	cmp	r4, #0
 801688a:	dd14      	ble.n	80168b6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801688c:	f105 0610 	add.w	r6, r5, #16
 8016890:	e003      	b.n	801689a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016892:	1e63      	subs	r3, r4, #1
 8016894:	b2da      	uxtb	r2, r3
 8016896:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016898:	b16a      	cbz	r2, 80168b6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801689a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801689c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801689e:	b153      	cbz	r3, 80168b6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168a0:	f001 f984 	bl	8017bac <xTaskRemoveFromEventList>
 80168a4:	2800      	cmp	r0, #0
 80168a6:	d0f4      	beq.n	8016892 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80168a8:	f001 fa24 	bl	8017cf4 <vTaskMissedYield>
				--cRxLock;
 80168ac:	1e63      	subs	r3, r4, #1
 80168ae:	b2da      	uxtb	r2, r3
 80168b0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80168b2:	2a00      	cmp	r2, #0
 80168b4:	d1f1      	bne.n	801689a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80168b6:	23ff      	movs	r3, #255	; 0xff
 80168b8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80168bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80168c0:	f001 bf4e 	b.w	8018760 <vPortExitCritical>

080168c4 <xQueueGenericReset>:
{
 80168c4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80168c6:	b1e0      	cbz	r0, 8016902 <xQueueGenericReset+0x3e>
 80168c8:	4604      	mov	r4, r0
 80168ca:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80168cc:	f001 ff22 	bl	8018714 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168d0:	6822      	ldr	r2, [r4, #0]
 80168d2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80168d6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168d8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168dc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168de:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168e0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168e2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80168e4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80168e6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80168e8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80168ea:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80168ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80168f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80168f4:	b985      	cbnz	r5, 8016918 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168f6:	6923      	ldr	r3, [r4, #16]
 80168f8:	b9d3      	cbnz	r3, 8016930 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 80168fa:	f001 ff31 	bl	8018760 <vPortExitCritical>
}
 80168fe:	2001      	movs	r0, #1
 8016900:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016902:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016906:	b672      	cpsid	i
 8016908:	f383 8811 	msr	BASEPRI, r3
 801690c:	f3bf 8f6f 	isb	sy
 8016910:	f3bf 8f4f 	dsb	sy
 8016914:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016916:	e7fe      	b.n	8016916 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016918:	f104 0010 	add.w	r0, r4, #16
 801691c:	f7ff fefe 	bl	801671c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016920:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016924:	f7ff fefa 	bl	801671c <vListInitialise>
	taskEXIT_CRITICAL();
 8016928:	f001 ff1a 	bl	8018760 <vPortExitCritical>
}
 801692c:	2001      	movs	r0, #1
 801692e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016930:	f104 0010 	add.w	r0, r4, #16
 8016934:	f001 f93a 	bl	8017bac <xTaskRemoveFromEventList>
 8016938:	2800      	cmp	r0, #0
 801693a:	d0de      	beq.n	80168fa <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801693c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016948:	f3bf 8f4f 	dsb	sy
 801694c:	f3bf 8f6f 	isb	sy
 8016950:	e7d3      	b.n	80168fa <xQueueGenericReset+0x36>
 8016952:	bf00      	nop

08016954 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016954:	b950      	cbnz	r0, 801696c <xQueueGenericCreateStatic+0x18>
 8016956:	f04f 0330 	mov.w	r3, #48	; 0x30
 801695a:	b672      	cpsid	i
 801695c:	f383 8811 	msr	BASEPRI, r3
 8016960:	f3bf 8f6f 	isb	sy
 8016964:	f3bf 8f4f 	dsb	sy
 8016968:	b662      	cpsie	i
 801696a:	e7fe      	b.n	801696a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 801696c:	b17b      	cbz	r3, 801698e <xQueueGenericCreateStatic+0x3a>
	{
 801696e:	b510      	push	{r4, lr}
 8016970:	460c      	mov	r4, r1
 8016972:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016974:	b33a      	cbz	r2, 80169c6 <xQueueGenericCreateStatic+0x72>
 8016976:	b9a9      	cbnz	r1, 80169a4 <xQueueGenericCreateStatic+0x50>
 8016978:	f04f 0330 	mov.w	r3, #48	; 0x30
 801697c:	b672      	cpsid	i
 801697e:	f383 8811 	msr	BASEPRI, r3
 8016982:	f3bf 8f6f 	isb	sy
 8016986:	f3bf 8f4f 	dsb	sy
 801698a:	b662      	cpsie	i
 801698c:	e7fe      	b.n	801698c <xQueueGenericCreateStatic+0x38>
 801698e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016992:	b672      	cpsid	i
 8016994:	f383 8811 	msr	BASEPRI, r3
 8016998:	f3bf 8f6f 	isb	sy
 801699c:	f3bf 8f4f 	dsb	sy
 80169a0:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80169a2:	e7fe      	b.n	80169a2 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80169a4:	b17a      	cbz	r2, 80169c6 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80169a6:	2148      	movs	r1, #72	; 0x48
 80169a8:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80169aa:	9903      	ldr	r1, [sp, #12]
 80169ac:	2948      	cmp	r1, #72	; 0x48
 80169ae:	d017      	beq.n	80169e0 <xQueueGenericCreateStatic+0x8c>
 80169b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80169b4:	b672      	cpsid	i
 80169b6:	f383 8811 	msr	BASEPRI, r3
 80169ba:	f3bf 8f6f 	isb	sy
 80169be:	f3bf 8f4f 	dsb	sy
 80169c2:	b662      	cpsie	i
 80169c4:	e7fe      	b.n	80169c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80169c6:	2c00      	cmp	r4, #0
 80169c8:	d0ed      	beq.n	80169a6 <xQueueGenericCreateStatic+0x52>
 80169ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80169ce:	b672      	cpsid	i
 80169d0:	f383 8811 	msr	BASEPRI, r3
 80169d4:	f3bf 8f6f 	isb	sy
 80169d8:	f3bf 8f4f 	dsb	sy
 80169dc:	b662      	cpsie	i
 80169de:	e7fe      	b.n	80169de <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80169e0:	2c00      	cmp	r4, #0
 80169e2:	bf08      	it	eq
 80169e4:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80169e6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80169e8:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80169ea:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80169ec:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80169f0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80169f2:	641c      	str	r4, [r3, #64]	; 0x40
 80169f4:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80169f6:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80169f8:	f7ff ff64 	bl	80168c4 <xQueueGenericReset>
	}
 80169fc:	9b01      	ldr	r3, [sp, #4]
 80169fe:	4618      	mov	r0, r3
 8016a00:	b004      	add	sp, #16
 8016a02:	bd10      	pop	{r4, pc}

08016a04 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a04:	b950      	cbnz	r0, 8016a1c <xQueueGenericCreate+0x18>
 8016a06:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a0a:	b672      	cpsid	i
 8016a0c:	f383 8811 	msr	BASEPRI, r3
 8016a10:	f3bf 8f6f 	isb	sy
 8016a14:	f3bf 8f4f 	dsb	sy
 8016a18:	b662      	cpsie	i
 8016a1a:	e7fe      	b.n	8016a1a <xQueueGenericCreate+0x16>
	{
 8016a1c:	b570      	push	{r4, r5, r6, lr}
 8016a1e:	4605      	mov	r5, r0
 8016a20:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8016a22:	b979      	cbnz	r1, 8016a44 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016a24:	2048      	movs	r0, #72	; 0x48
 8016a26:	f001 ffdf 	bl	80189e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016a2a:	4604      	mov	r4, r0
 8016a2c:	b1c0      	cbz	r0, 8016a60 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016a2e:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016a32:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016a34:	2101      	movs	r1, #1
 8016a36:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8016a38:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016a3c:	f7ff ff42 	bl	80168c4 <xQueueGenericReset>
	}
 8016a40:	4620      	mov	r0, r4
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a44:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016a48:	3048      	adds	r0, #72	; 0x48
 8016a4a:	f001 ffcd 	bl	80189e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016a4e:	4604      	mov	r4, r0
 8016a50:	b130      	cbz	r0, 8016a60 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016a52:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a54:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016a58:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016a5c:	6003      	str	r3, [r0, #0]
 8016a5e:	e7e9      	b.n	8016a34 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016a60:	2400      	movs	r4, #0
	}
 8016a62:	4620      	mov	r0, r4
 8016a64:	bd70      	pop	{r4, r5, r6, pc}
 8016a66:	bf00      	nop

08016a68 <xQueueGenericSend>:
{
 8016a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a6c:	b085      	sub	sp, #20
 8016a6e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8016a70:	2800      	cmp	r0, #0
 8016a72:	f000 8083 	beq.w	8016b7c <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a76:	460f      	mov	r7, r1
 8016a78:	4604      	mov	r4, r0
 8016a7a:	461e      	mov	r6, r3
 8016a7c:	2900      	cmp	r1, #0
 8016a7e:	d06b      	beq.n	8016b58 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016a80:	2e02      	cmp	r6, #2
 8016a82:	d10d      	bne.n	8016aa0 <xQueueGenericSend+0x38>
 8016a84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d00a      	beq.n	8016aa0 <xQueueGenericSend+0x38>
 8016a8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a8e:	b672      	cpsid	i
 8016a90:	f383 8811 	msr	BASEPRI, r3
 8016a94:	f3bf 8f6f 	isb	sy
 8016a98:	f3bf 8f4f 	dsb	sy
 8016a9c:	b662      	cpsie	i
 8016a9e:	e7fe      	b.n	8016a9e <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016aa0:	f001 f934 	bl	8017d0c <xTaskGetSchedulerState>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d074      	beq.n	8016b92 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016aa8:	f1a6 0802 	sub.w	r8, r6, #2
 8016aac:	2500      	movs	r5, #0
 8016aae:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8016ab2:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ab4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016ab8:	e007      	b.n	8016aca <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8016aba:	f001 fe51 	bl	8018760 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016abe:	4620      	mov	r0, r4
 8016ac0:	f7ff feba 	bl	8016838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ac4:	f000 ffe2 	bl	8017a8c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ac8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8016aca:	f001 fe23 	bl	8018714 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ace:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016ad0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016ad2:	4290      	cmp	r0, r2
 8016ad4:	d36b      	bcc.n	8016bae <xQueueGenericSend+0x146>
 8016ad6:	f1b8 0f00 	cmp.w	r8, #0
 8016ada:	d168      	bne.n	8016bae <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016adc:	9b01      	ldr	r3, [sp, #4]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d07d      	beq.n	8016bde <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8016ae2:	2d00      	cmp	r5, #0
 8016ae4:	d046      	beq.n	8016b74 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8016ae6:	f001 fe3b 	bl	8018760 <vPortExitCritical>
		vTaskSuspendAll();
 8016aea:	f000 fe73 	bl	80177d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016aee:	f001 fe11 	bl	8018714 <vPortEnterCritical>
 8016af2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016af6:	2bff      	cmp	r3, #255	; 0xff
 8016af8:	d101      	bne.n	8016afe <xQueueGenericSend+0x96>
 8016afa:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8016afe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b02:	2bff      	cmp	r3, #255	; 0xff
 8016b04:	d101      	bne.n	8016b0a <xQueueGenericSend+0xa2>
 8016b06:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8016b0a:	f001 fe29 	bl	8018760 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b0e:	a901      	add	r1, sp, #4
 8016b10:	a802      	add	r0, sp, #8
 8016b12:	f001 f8a3 	bl	8017c5c <xTaskCheckForTimeOut>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	d165      	bne.n	8016be6 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8016b1a:	f001 fdfb 	bl	8018714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016b1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d1c9      	bne.n	8016aba <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8016b26:	f001 fe1b 	bl	8018760 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016b2a:	9901      	ldr	r1, [sp, #4]
 8016b2c:	f104 0010 	add.w	r0, r4, #16
 8016b30:	f001 f800 	bl	8017b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016b34:	4620      	mov	r0, r4
 8016b36:	f7ff fe7f 	bl	8016838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016b3a:	f000 ffa7 	bl	8017a8c <xTaskResumeAll>
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d1c2      	bne.n	8016ac8 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8016b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b4e:	f3bf 8f4f 	dsb	sy
 8016b52:	f3bf 8f6f 	isb	sy
 8016b56:	e7b7      	b.n	8016ac8 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d090      	beq.n	8016a80 <xQueueGenericSend+0x18>
 8016b5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b62:	b672      	cpsid	i
 8016b64:	f383 8811 	msr	BASEPRI, r3
 8016b68:	f3bf 8f6f 	isb	sy
 8016b6c:	f3bf 8f4f 	dsb	sy
 8016b70:	b662      	cpsie	i
 8016b72:	e7fe      	b.n	8016b72 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b74:	a802      	add	r0, sp, #8
 8016b76:	f001 f865 	bl	8017c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b7a:	e7b4      	b.n	8016ae6 <xQueueGenericSend+0x7e>
 8016b7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b80:	b672      	cpsid	i
 8016b82:	f383 8811 	msr	BASEPRI, r3
 8016b86:	f3bf 8f6f 	isb	sy
 8016b8a:	f3bf 8f4f 	dsb	sy
 8016b8e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016b90:	e7fe      	b.n	8016b90 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016b92:	9b01      	ldr	r3, [sp, #4]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d087      	beq.n	8016aa8 <xQueueGenericSend+0x40>
 8016b98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b9c:	b672      	cpsid	i
 8016b9e:	f383 8811 	msr	BASEPRI, r3
 8016ba2:	f3bf 8f6f 	isb	sy
 8016ba6:	f3bf 8f4f 	dsb	sy
 8016baa:	b662      	cpsie	i
 8016bac:	e7fe      	b.n	8016bac <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016bae:	4632      	mov	r2, r6
 8016bb0:	4639      	mov	r1, r7
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	f7ff fdfe 	bl	80167b4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bba:	b9db      	cbnz	r3, 8016bf4 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8016bbc:	b148      	cbz	r0, 8016bd2 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8016bbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8016bd2:	f001 fdc5 	bl	8018760 <vPortExitCritical>
				return pdPASS;
 8016bd6:	2001      	movs	r0, #1
}
 8016bd8:	b005      	add	sp, #20
 8016bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8016bde:	f001 fdbf 	bl	8018760 <vPortExitCritical>
					return errQUEUE_FULL;
 8016be2:	4640      	mov	r0, r8
 8016be4:	e7f8      	b.n	8016bd8 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8016be6:	4620      	mov	r0, r4
 8016be8:	f7ff fe26 	bl	8016838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016bec:	f000 ff4e 	bl	8017a8c <xTaskResumeAll>
			return errQUEUE_FULL;
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	e7f1      	b.n	8016bd8 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016bf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016bf8:	f000 ffd8 	bl	8017bac <xTaskRemoveFromEventList>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d0e8      	beq.n	8016bd2 <xQueueGenericSend+0x16a>
 8016c00:	e7dd      	b.n	8016bbe <xQueueGenericSend+0x156>
 8016c02:	bf00      	nop

08016c04 <xQueueCreateMutexStatic>:
	{
 8016c04:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016c06:	2200      	movs	r2, #0
	{
 8016c08:	4604      	mov	r4, r0
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016c0e:	2001      	movs	r0, #1
 8016c10:	4611      	mov	r1, r2
 8016c12:	9400      	str	r4, [sp, #0]
 8016c14:	f7ff fe9e 	bl	8016954 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8016c18:	4604      	mov	r4, r0
 8016c1a:	b138      	cbz	r0, 8016c2c <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c1c:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c22:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016c24:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016c26:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c28:	f7ff ff1e 	bl	8016a68 <xQueueGenericSend>
	}
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	b002      	add	sp, #8
 8016c30:	bd10      	pop	{r4, pc}
 8016c32:	bf00      	nop

08016c34 <xQueueCreateMutex>:
	{
 8016c34:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c36:	2048      	movs	r0, #72	; 0x48
 8016c38:	f001 fed6 	bl	80189e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	b188      	cbz	r0, 8016c64 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c40:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8016c42:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c44:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c46:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8016c4a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c4e:	f7ff fe39 	bl	80168c4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c52:	462b      	mov	r3, r5
 8016c54:	462a      	mov	r2, r5
 8016c56:	4629      	mov	r1, r5
 8016c58:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016c5a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016c5c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016c5e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c60:	f7ff ff02 	bl	8016a68 <xQueueGenericSend>
	}
 8016c64:	4620      	mov	r0, r4
 8016c66:	bd38      	pop	{r3, r4, r5, pc}

08016c68 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d053      	beq.n	8016d14 <xQueueGenericSendFromISR+0xac>
{
 8016c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c70:	460e      	mov	r6, r1
 8016c72:	4604      	mov	r4, r0
 8016c74:	4617      	mov	r7, r2
 8016c76:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c78:	b359      	cbz	r1, 8016cd2 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c7a:	2d02      	cmp	r5, #2
 8016c7c:	d10d      	bne.n	8016c9a <xQueueGenericSendFromISR+0x32>
 8016c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d00a      	beq.n	8016c9a <xQueueGenericSendFromISR+0x32>
 8016c84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c88:	b672      	cpsid	i
 8016c8a:	f383 8811 	msr	BASEPRI, r3
 8016c8e:	f3bf 8f6f 	isb	sy
 8016c92:	f3bf 8f4f 	dsb	sy
 8016c96:	b662      	cpsie	i
 8016c98:	e7fe      	b.n	8016c98 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c9a:	f001 fe41 	bl	8018920 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016c9e:	f3ef 8811 	mrs	r8, BASEPRI
 8016ca2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ca6:	b672      	cpsid	i
 8016ca8:	f383 8811 	msr	BASEPRI, r3
 8016cac:	f3bf 8f6f 	isb	sy
 8016cb0:	f3bf 8f4f 	dsb	sy
 8016cb4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d317      	bcc.n	8016cee <xQueueGenericSendFromISR+0x86>
 8016cbe:	f1a5 0002 	sub.w	r0, r5, #2
 8016cc2:	fab0 f080 	clz	r0, r0
 8016cc6:	0940      	lsrs	r0, r0, #5
 8016cc8:	b988      	cbnz	r0, 8016cee <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016cca:	f388 8811 	msr	BASEPRI, r8
}
 8016cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d0d0      	beq.n	8016c7a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8016cd8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016cdc:	b672      	cpsid	i
 8016cde:	f383 8811 	msr	BASEPRI, r3
 8016ce2:	f3bf 8f6f 	isb	sy
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	b662      	cpsie	i
 8016cec:	e7fe      	b.n	8016cec <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cee:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8016cf0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cf4:	4631      	mov	r1, r6
 8016cf6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8016cf8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cfa:	f7ff fd5b 	bl	80167b4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8016cfe:	1c6b      	adds	r3, r5, #1
 8016d00:	d013      	beq.n	8016d2a <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016d02:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8016d04:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016d06:	b25b      	sxtb	r3, r3
 8016d08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8016d0c:	f388 8811 	msr	BASEPRI, r8
}
 8016d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8016d14:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d18:	b672      	cpsid	i
 8016d1a:	f383 8811 	msr	BASEPRI, r3
 8016d1e:	f3bf 8f6f 	isb	sy
 8016d22:	f3bf 8f4f 	dsb	sy
 8016d26:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016d28:	e7fe      	b.n	8016d28 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d2c:	b90b      	cbnz	r3, 8016d32 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8016d2e:	2001      	movs	r0, #1
 8016d30:	e7cb      	b.n	8016cca <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016d36:	f000 ff39 	bl	8017bac <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d0f7      	beq.n	8016d2e <xQueueGenericSendFromISR+0xc6>
 8016d3e:	2f00      	cmp	r7, #0
 8016d40:	d0f5      	beq.n	8016d2e <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016d42:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016d44:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016d46:	603b      	str	r3, [r7, #0]
 8016d48:	e7bf      	b.n	8016cca <xQueueGenericSendFromISR+0x62>
 8016d4a:	bf00      	nop

08016d4c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8016d4c:	b380      	cbz	r0, 8016db0 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d54:	b153      	cbz	r3, 8016d6c <xQueueGiveFromISR+0x20>
 8016d56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d5a:	b672      	cpsid	i
 8016d5c:	f383 8811 	msr	BASEPRI, r3
 8016d60:	f3bf 8f6f 	isb	sy
 8016d64:	f3bf 8f4f 	dsb	sy
 8016d68:	b662      	cpsie	i
 8016d6a:	e7fe      	b.n	8016d6a <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016d6c:	6803      	ldr	r3, [r0, #0]
 8016d6e:	460d      	mov	r5, r1
 8016d70:	b34b      	cbz	r3, 8016dc6 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016d72:	f001 fdd5 	bl	8018920 <vPortValidateInterruptPriority>
	__asm volatile
 8016d76:	f3ef 8611 	mrs	r6, BASEPRI
 8016d7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d7e:	b672      	cpsid	i
 8016d80:	f383 8811 	msr	BASEPRI, r3
 8016d84:	f3bf 8f6f 	isb	sy
 8016d88:	f3bf 8f4f 	dsb	sy
 8016d8c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016d90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d925      	bls.n	8016de2 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8016d96:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016d9a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8016d9c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016d9e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8016da0:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8016da2:	d022      	beq.n	8016dea <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016da4:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8016da6:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016da8:	b25b      	sxtb	r3, r3
 8016daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016dae:	e019      	b.n	8016de4 <xQueueGiveFromISR+0x98>
	__asm volatile
 8016db0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016db4:	b672      	cpsid	i
 8016db6:	f383 8811 	msr	BASEPRI, r3
 8016dba:	f3bf 8f6f 	isb	sy
 8016dbe:	f3bf 8f4f 	dsb	sy
 8016dc2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016dc4:	e7fe      	b.n	8016dc4 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016dc6:	6883      	ldr	r3, [r0, #8]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d0d2      	beq.n	8016d72 <xQueueGiveFromISR+0x26>
 8016dcc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dd0:	b672      	cpsid	i
 8016dd2:	f383 8811 	msr	BASEPRI, r3
 8016dd6:	f3bf 8f6f 	isb	sy
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	b662      	cpsie	i
 8016de0:	e7fe      	b.n	8016de0 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8016de2:	2000      	movs	r0, #0
	__asm volatile
 8016de4:	f386 8811 	msr	BASEPRI, r6
}
 8016de8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dec:	b90b      	cbnz	r3, 8016df2 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8016dee:	2001      	movs	r0, #1
 8016df0:	e7f8      	b.n	8016de4 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016df2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016df6:	f000 fed9 	bl	8017bac <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016dfa:	2d00      	cmp	r5, #0
 8016dfc:	d0f7      	beq.n	8016dee <xQueueGiveFromISR+0xa2>
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	d0f5      	beq.n	8016dee <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e02:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016e04:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e06:	602b      	str	r3, [r5, #0]
 8016e08:	e7ec      	b.n	8016de4 <xQueueGiveFromISR+0x98>
 8016e0a:	bf00      	nop

08016e0c <xQueueReceive>:
{
 8016e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e10:	b085      	sub	sp, #20
 8016e12:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8016e14:	2800      	cmp	r0, #0
 8016e16:	f000 80a4 	beq.w	8016f62 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e1a:	460d      	mov	r5, r1
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	2900      	cmp	r1, #0
 8016e20:	d047      	beq.n	8016eb2 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016e22:	f000 ff73 	bl	8017d0c <xTaskGetSchedulerState>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	d051      	beq.n	8016ece <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8016e2a:	f001 fc73 	bl	8018714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e2e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016e30:	2e00      	cmp	r6, #0
 8016e32:	d16b      	bne.n	8016f0c <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016e34:	9b01      	ldr	r3, [sp, #4]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d035      	beq.n	8016ea6 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8016e3a:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e3c:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8016e40:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e44:	a802      	add	r0, sp, #8
 8016e46:	f000 fefd 	bl	8017c44 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8016e4a:	f001 fc89 	bl	8018760 <vPortExitCritical>
		vTaskSuspendAll();
 8016e4e:	f000 fcc1 	bl	80177d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e52:	f001 fc5f 	bl	8018714 <vPortEnterCritical>
 8016e56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016e5a:	2bff      	cmp	r3, #255	; 0xff
 8016e5c:	d101      	bne.n	8016e62 <xQueueReceive+0x56>
 8016e5e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8016e62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016e66:	2bff      	cmp	r3, #255	; 0xff
 8016e68:	d101      	bne.n	8016e6e <xQueueReceive+0x62>
 8016e6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e6e:	f001 fc77 	bl	8018760 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e72:	a901      	add	r1, sp, #4
 8016e74:	a802      	add	r0, sp, #8
 8016e76:	f000 fef1 	bl	8017c5c <xTaskCheckForTimeOut>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d135      	bne.n	8016eea <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8016e7e:	f001 fc49 	bl	8018714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d056      	beq.n	8016f36 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8016e88:	f001 fc6a 	bl	8018760 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f7ff fcd3 	bl	8016838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e92:	f000 fdfb 	bl	8017a8c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8016e96:	f001 fc3d 	bl	8018714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016e9c:	2e00      	cmp	r6, #0
 8016e9e:	d135      	bne.n	8016f0c <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ea0:	9b01      	ldr	r3, [sp, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1d1      	bne.n	8016e4a <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8016ea6:	f001 fc5b 	bl	8018760 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8016eaa:	2000      	movs	r0, #0
}
 8016eac:	b005      	add	sp, #20
 8016eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016eb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d0b4      	beq.n	8016e22 <xQueueReceive+0x16>
	__asm volatile
 8016eb8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ebc:	b672      	cpsid	i
 8016ebe:	f383 8811 	msr	BASEPRI, r3
 8016ec2:	f3bf 8f6f 	isb	sy
 8016ec6:	f3bf 8f4f 	dsb	sy
 8016eca:	b662      	cpsie	i
 8016ecc:	e7fe      	b.n	8016ecc <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ece:	9b01      	ldr	r3, [sp, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d0aa      	beq.n	8016e2a <xQueueReceive+0x1e>
 8016ed4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ed8:	b672      	cpsid	i
 8016eda:	f383 8811 	msr	BASEPRI, r3
 8016ede:	f3bf 8f6f 	isb	sy
 8016ee2:	f3bf 8f4f 	dsb	sy
 8016ee6:	b662      	cpsie	i
 8016ee8:	e7fe      	b.n	8016ee8 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8016eea:	4620      	mov	r0, r4
 8016eec:	f7ff fca4 	bl	8016838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ef0:	f000 fdcc 	bl	8017a8c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8016ef4:	f001 fc0e 	bl	8018714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d0d3      	beq.n	8016ea6 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8016efe:	f001 fc2f 	bl	8018760 <vPortExitCritical>
		taskENTER_CRITICAL();
 8016f02:	f001 fc07 	bl	8018714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f08:	2e00      	cmp	r6, #0
 8016f0a:	d0c9      	beq.n	8016ea0 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016f0e:	b152      	cbz	r2, 8016f26 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f10:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f12:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f14:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f16:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f18:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f1a:	d301      	bcc.n	8016f20 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016f1c:	6821      	ldr	r1, [r4, #0]
 8016f1e:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f20:	4628      	mov	r0, r5
 8016f22:	f00e fa51 	bl	80253c8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f26:	3e01      	subs	r6, #1
 8016f28:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016f2a:	6923      	ldr	r3, [r4, #16]
 8016f2c:	bb23      	cbnz	r3, 8016f78 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8016f2e:	f001 fc17 	bl	8018760 <vPortExitCritical>
				return pdPASS;
 8016f32:	2001      	movs	r0, #1
 8016f34:	e7ba      	b.n	8016eac <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8016f36:	f001 fc13 	bl	8018760 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016f3a:	9901      	ldr	r1, [sp, #4]
 8016f3c:	4640      	mov	r0, r8
 8016f3e:	f000 fdf9 	bl	8017b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff fc78 	bl	8016838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016f48:	f000 fda0 	bl	8017a8c <xTaskResumeAll>
 8016f4c:	2800      	cmp	r0, #0
 8016f4e:	d1d8      	bne.n	8016f02 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8016f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8016f54:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8016f58:	f3bf 8f4f 	dsb	sy
 8016f5c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8016f60:	e7cf      	b.n	8016f02 <xQueueReceive+0xf6>
 8016f62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f66:	b672      	cpsid	i
 8016f68:	f383 8811 	msr	BASEPRI, r3
 8016f6c:	f3bf 8f6f 	isb	sy
 8016f70:	f3bf 8f4f 	dsb	sy
 8016f74:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8016f76:	e7fe      	b.n	8016f76 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f78:	f104 0010 	add.w	r0, r4, #16
 8016f7c:	f000 fe16 	bl	8017bac <xTaskRemoveFromEventList>
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d0d4      	beq.n	8016f2e <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8016f84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016f90:	f3bf 8f4f 	dsb	sy
 8016f94:	f3bf 8f6f 	isb	sy
 8016f98:	e7c9      	b.n	8016f2e <xQueueReceive+0x122>
 8016f9a:	bf00      	nop

08016f9c <xQueueSemaphoreTake>:
{
 8016f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f9e:	b085      	sub	sp, #20
 8016fa0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8016fa2:	2800      	cmp	r0, #0
 8016fa4:	d057      	beq.n	8017056 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016fa6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8016fa8:	4604      	mov	r4, r0
 8016faa:	b156      	cbz	r6, 8016fc2 <xQueueSemaphoreTake+0x26>
 8016fac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fb0:	b672      	cpsid	i
 8016fb2:	f383 8811 	msr	BASEPRI, r3
 8016fb6:	f3bf 8f6f 	isb	sy
 8016fba:	f3bf 8f4f 	dsb	sy
 8016fbe:	b662      	cpsie	i
 8016fc0:	e7fe      	b.n	8016fc0 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016fc2:	f000 fea3 	bl	8017d0c <xTaskGetSchedulerState>
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d04f      	beq.n	801706c <xQueueSemaphoreTake+0xd0>
 8016fcc:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8016fce:	f001 fba1 	bl	8018714 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8016fd4:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016fd6:	bb8b      	cbnz	r3, 801703c <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fd8:	9b01      	ldr	r3, [sp, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	f000 809f 	beq.w	801711e <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8016fe0:	2d00      	cmp	r5, #0
 8016fe2:	d05d      	beq.n	80170a0 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8016fe4:	f001 fbbc 	bl	8018760 <vPortExitCritical>
		vTaskSuspendAll();
 8016fe8:	f000 fbf4 	bl	80177d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016fec:	f001 fb92 	bl	8018714 <vPortEnterCritical>
 8016ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016ff4:	2bff      	cmp	r3, #255	; 0xff
 8016ff6:	d101      	bne.n	8016ffc <xQueueSemaphoreTake+0x60>
 8016ff8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8016ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017000:	2bff      	cmp	r3, #255	; 0xff
 8017002:	d101      	bne.n	8017008 <xQueueSemaphoreTake+0x6c>
 8017004:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017008:	f001 fbaa 	bl	8018760 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801700c:	a901      	add	r1, sp, #4
 801700e:	a802      	add	r0, sp, #8
 8017010:	f000 fe24 	bl	8017c5c <xTaskCheckForTimeOut>
 8017014:	2800      	cmp	r0, #0
 8017016:	d137      	bne.n	8017088 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8017018:	f001 fb7c 	bl	8018714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801701c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801701e:	2b00      	cmp	r3, #0
 8017020:	d042      	beq.n	80170a8 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8017022:	f001 fb9d 	bl	8018760 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8017026:	4620      	mov	r0, r4
 8017028:	f7ff fc06 	bl	8016838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801702c:	f000 fd2e 	bl	8017a8c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017030:	f001 fb70 	bl	8018714 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017036:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017038:	2b00      	cmp	r3, #0
 801703a:	d0cd      	beq.n	8016fd8 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801703c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801703e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017040:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017042:	2a00      	cmp	r2, #0
 8017044:	f000 8089 	beq.w	801715a <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017048:	6923      	ldr	r3, [r4, #16]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d174      	bne.n	8017138 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 801704e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8017050:	f001 fb86 	bl	8018760 <vPortExitCritical>
				return pdPASS;
 8017054:	e046      	b.n	80170e4 <xQueueSemaphoreTake+0x148>
 8017056:	f04f 0330 	mov.w	r3, #48	; 0x30
 801705a:	b672      	cpsid	i
 801705c:	f383 8811 	msr	BASEPRI, r3
 8017060:	f3bf 8f6f 	isb	sy
 8017064:	f3bf 8f4f 	dsb	sy
 8017068:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801706a:	e7fe      	b.n	801706a <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801706c:	9b01      	ldr	r3, [sp, #4]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d03b      	beq.n	80170ea <xQueueSemaphoreTake+0x14e>
 8017072:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017076:	b672      	cpsid	i
 8017078:	f383 8811 	msr	BASEPRI, r3
 801707c:	f3bf 8f6f 	isb	sy
 8017080:	f3bf 8f4f 	dsb	sy
 8017084:	b662      	cpsie	i
 8017086:	e7fe      	b.n	8017086 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8017088:	4620      	mov	r0, r4
 801708a:	f7ff fbd5 	bl	8016838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801708e:	f000 fcfd 	bl	8017a8c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8017092:	f001 fb3f 	bl	8018714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017098:	b30b      	cbz	r3, 80170de <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 801709a:	f001 fb61 	bl	8018760 <vPortExitCritical>
	return xReturn;
 801709e:	e7c7      	b.n	8017030 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80170a0:	a802      	add	r0, sp, #8
 80170a2:	f000 fdcf 	bl	8017c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80170a6:	e79d      	b.n	8016fe4 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 80170a8:	f001 fb5a 	bl	8018760 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80170ac:	6823      	ldr	r3, [r4, #0]
 80170ae:	b36b      	cbz	r3, 801710c <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80170b0:	9901      	ldr	r1, [sp, #4]
 80170b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80170b6:	f000 fd3d 	bl	8017b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80170ba:	4620      	mov	r0, r4
 80170bc:	f7ff fbbc 	bl	8016838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80170c0:	f000 fce4 	bl	8017a8c <xTaskResumeAll>
 80170c4:	2800      	cmp	r0, #0
 80170c6:	d1b3      	bne.n	8017030 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 80170c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80170cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80170d4:	f3bf 8f4f 	dsb	sy
 80170d8:	f3bf 8f6f 	isb	sy
 80170dc:	e7a8      	b.n	8017030 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 80170de:	f001 fb3f 	bl	8018760 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80170e2:	b926      	cbnz	r6, 80170ee <xQueueSemaphoreTake+0x152>
}
 80170e4:	4630      	mov	r0, r6
 80170e6:	b005      	add	sp, #20
 80170e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170ea:	4606      	mov	r6, r0
 80170ec:	e76f      	b.n	8016fce <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 80170ee:	f001 fb11 	bl	8018714 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80170f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80170f4:	b119      	cbz	r1, 80170fe <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80170f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80170f8:	6819      	ldr	r1, [r3, #0]
 80170fa:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80170fe:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8017100:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017102:	f000 fecb 	bl	8017e9c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8017106:	f001 fb2b 	bl	8018760 <vPortExitCritical>
 801710a:	e7eb      	b.n	80170e4 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 801710c:	f001 fb02 	bl	8018714 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017110:	68a0      	ldr	r0, [r4, #8]
 8017112:	f000 fe0b 	bl	8017d2c <xTaskPriorityInherit>
 8017116:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8017118:	f001 fb22 	bl	8018760 <vPortExitCritical>
 801711c:	e7c8      	b.n	80170b0 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801711e:	2e00      	cmp	r6, #0
 8017120:	d0f1      	beq.n	8017106 <xQueueSemaphoreTake+0x16a>
 8017122:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017126:	b672      	cpsid	i
 8017128:	f383 8811 	msr	BASEPRI, r3
 801712c:	f3bf 8f6f 	isb	sy
 8017130:	f3bf 8f4f 	dsb	sy
 8017134:	b662      	cpsie	i
 8017136:	e7fe      	b.n	8017136 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017138:	f104 0010 	add.w	r0, r4, #16
 801713c:	f000 fd36 	bl	8017bac <xTaskRemoveFromEventList>
 8017140:	2800      	cmp	r0, #0
 8017142:	d084      	beq.n	801704e <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8017144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801714c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017150:	f3bf 8f4f 	dsb	sy
 8017154:	f3bf 8f6f 	isb	sy
 8017158:	e779      	b.n	801704e <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801715a:	f000 ff0d 	bl	8017f78 <pvTaskIncrementMutexHeldCount>
 801715e:	60a0      	str	r0, [r4, #8]
 8017160:	e772      	b.n	8017048 <xQueueSemaphoreTake+0xac>
 8017162:	bf00      	nop

08017164 <xQueueReceiveFromISR>:
{
 8017164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8017168:	b330      	cbz	r0, 80171b8 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801716a:	460e      	mov	r6, r1
 801716c:	4604      	mov	r4, r0
 801716e:	4617      	mov	r7, r2
 8017170:	b1a1      	cbz	r1, 801719c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017172:	f001 fbd5 	bl	8018920 <vPortValidateInterruptPriority>
	__asm volatile
 8017176:	f3ef 8911 	mrs	r9, BASEPRI
 801717a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801717e:	b672      	cpsid	i
 8017180:	f383 8811 	msr	BASEPRI, r3
 8017184:	f3bf 8f6f 	isb	sy
 8017188:	f3bf 8f4f 	dsb	sy
 801718c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801718e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017190:	b9ed      	cbnz	r5, 80171ce <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8017192:	4628      	mov	r0, r5
	__asm volatile
 8017194:	f389 8811 	msr	BASEPRI, r9
}
 8017198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801719c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d0e7      	beq.n	8017172 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80171a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171a6:	b672      	cpsid	i
 80171a8:	f383 8811 	msr	BASEPRI, r3
 80171ac:	f3bf 8f6f 	isb	sy
 80171b0:	f3bf 8f4f 	dsb	sy
 80171b4:	b662      	cpsie	i
 80171b6:	e7fe      	b.n	80171b6 <xQueueReceiveFromISR+0x52>
 80171b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171bc:	b672      	cpsid	i
 80171be:	f383 8811 	msr	BASEPRI, r3
 80171c2:	f3bf 8f6f 	isb	sy
 80171c6:	f3bf 8f4f 	dsb	sy
 80171ca:	b662      	cpsie	i
	configASSERT( pxQueue );
 80171cc:	e7fe      	b.n	80171cc <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 80171ce:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80171d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80171d4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80171d8:	b142      	cbz	r2, 80171ec <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171da:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171dc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171de:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171e0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171e2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171e4:	d215      	bcs.n	8017212 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171e6:	4630      	mov	r0, r6
 80171e8:	f00e f8ee 	bl	80253c8 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80171ec:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80171ee:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80171f2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80171f4:	d009      	beq.n	801720a <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80171f6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 80171fa:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80171fc:	b25b      	sxtb	r3, r3
 80171fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8017202:	f389 8811 	msr	BASEPRI, r9
}
 8017206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801720a:	6923      	ldr	r3, [r4, #16]
 801720c:	b923      	cbnz	r3, 8017218 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 801720e:	2001      	movs	r0, #1
 8017210:	e7c0      	b.n	8017194 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017212:	6821      	ldr	r1, [r4, #0]
 8017214:	60e1      	str	r1, [r4, #12]
 8017216:	e7e6      	b.n	80171e6 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017218:	f104 0010 	add.w	r0, r4, #16
 801721c:	f000 fcc6 	bl	8017bac <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8017220:	2f00      	cmp	r7, #0
 8017222:	d0f4      	beq.n	801720e <xQueueReceiveFromISR+0xaa>
 8017224:	2800      	cmp	r0, #0
 8017226:	d0f2      	beq.n	801720e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017228:	2301      	movs	r3, #1
			xReturn = pdPASS;
 801722a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 801722c:	603b      	str	r3, [r7, #0]
 801722e:	e7b1      	b.n	8017194 <xQueueReceiveFromISR+0x30>

08017230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017230:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017232:	2300      	movs	r3, #0
 8017234:	4c08      	ldr	r4, [pc, #32]	; (8017258 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017236:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 801723a:	b12a      	cbz	r2, 8017248 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801723c:	3301      	adds	r3, #1
 801723e:	2b08      	cmp	r3, #8
 8017240:	d1f9      	bne.n	8017236 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017246:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017248:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801724c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8017250:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017254:	6050      	str	r0, [r2, #4]
	}
 8017256:	4770      	bx	lr
 8017258:	20006680 	.word	0x20006680

0801725c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801725c:	b570      	push	{r4, r5, r6, lr}
 801725e:	4604      	mov	r4, r0
 8017260:	460e      	mov	r6, r1
 8017262:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017264:	f001 fa56 	bl	8018714 <vPortEnterCritical>
 8017268:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801726c:	2bff      	cmp	r3, #255	; 0xff
 801726e:	d102      	bne.n	8017276 <vQueueWaitForMessageRestricted+0x1a>
 8017270:	2300      	movs	r3, #0
 8017272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8017276:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801727a:	2bff      	cmp	r3, #255	; 0xff
 801727c:	d102      	bne.n	8017284 <vQueueWaitForMessageRestricted+0x28>
 801727e:	2300      	movs	r3, #0
 8017280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017284:	f001 fa6c 	bl	8018760 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801728a:	b123      	cbz	r3, 8017296 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801728c:	4620      	mov	r0, r4
	}
 801728e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8017292:	f7ff bad1 	b.w	8016838 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017296:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801729a:	462a      	mov	r2, r5
 801729c:	4631      	mov	r1, r6
 801729e:	f000 fc65 	bl	8017b6c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80172a2:	4620      	mov	r0, r4
	}
 80172a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80172a8:	f7ff bac6 	b.w	8016838 <prvUnlockQueue>

080172ac <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80172ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172b0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80172b2:	f001 fa2f 	bl	8018714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80172b6:	4a35      	ldr	r2, [pc, #212]	; (801738c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80172b8:	4d35      	ldr	r5, [pc, #212]	; (8017390 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80172ba:	6813      	ldr	r3, [r2, #0]
 80172bc:	3301      	adds	r3, #1
 80172be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80172c0:	682b      	ldr	r3, [r5, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d034      	beq.n	8017330 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80172c6:	4e33      	ldr	r6, [pc, #204]	; (8017394 <prvAddNewTaskToReadyList+0xe8>)
 80172c8:	6833      	ldr	r3, [r6, #0]
 80172ca:	b343      	cbz	r3, 801731e <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80172cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80172ce:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80173b8 <prvAddNewTaskToReadyList+0x10c>
 80172d2:	2201      	movs	r2, #1
		uxTaskNumber++;
 80172d4:	4f30      	ldr	r7, [pc, #192]	; (8017398 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80172d6:	4931      	ldr	r1, [pc, #196]	; (801739c <prvAddNewTaskToReadyList+0xf0>)
 80172d8:	409a      	lsls	r2, r3
 80172da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80172de:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80172e2:	683b      	ldr	r3, [r7, #0]
 80172e4:	3301      	adds	r3, #1
 80172e6:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80172e8:	680b      	ldr	r3, [r1, #0]
 80172ea:	431a      	orrs	r2, r3
 80172ec:	600a      	str	r2, [r1, #0]
 80172ee:	1d21      	adds	r1, r4, #4
 80172f0:	f7ff fa24 	bl	801673c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80172f4:	f001 fa34 	bl	8018760 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80172f8:	6833      	ldr	r3, [r6, #0]
 80172fa:	b173      	cbz	r3, 801731a <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80172fc:	682a      	ldr	r2, [r5, #0]
 80172fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017300:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017302:	429a      	cmp	r2, r3
 8017304:	d209      	bcs.n	801731a <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801730e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017312:	f3bf 8f4f 	dsb	sy
 8017316:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801731a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801731e:	682a      	ldr	r2, [r5, #0]
 8017320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017324:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80173b8 <prvAddNewTaskToReadyList+0x10c>
 8017328:	429a      	cmp	r2, r3
 801732a:	d8d2      	bhi.n	80172d2 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 801732c:	602c      	str	r4, [r5, #0]
 801732e:	e7d0      	b.n	80172d2 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8017330:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017332:	6813      	ldr	r3, [r2, #0]
 8017334:	2b01      	cmp	r3, #1
 8017336:	d004      	beq.n	8017342 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8017338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801733a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80173b8 <prvAddNewTaskToReadyList+0x10c>
 801733e:	4e15      	ldr	r6, [pc, #84]	; (8017394 <prvAddNewTaskToReadyList+0xe8>)
 8017340:	e7c7      	b.n	80172d2 <prvAddNewTaskToReadyList+0x26>
 8017342:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80173b8 <prvAddNewTaskToReadyList+0x10c>
 8017346:	4646      	mov	r6, r8
 8017348:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801734c:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801734e:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017350:	f7ff f9e4 	bl	801671c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017354:	42b7      	cmp	r7, r6
 8017356:	d1f9      	bne.n	801734c <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017358:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80173bc <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 801735c:	4f10      	ldr	r7, [pc, #64]	; (80173a0 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 801735e:	4648      	mov	r0, r9
 8017360:	4e0c      	ldr	r6, [pc, #48]	; (8017394 <prvAddNewTaskToReadyList+0xe8>)
 8017362:	f7ff f9db 	bl	801671c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017366:	4638      	mov	r0, r7
 8017368:	f7ff f9d8 	bl	801671c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801736c:	480d      	ldr	r0, [pc, #52]	; (80173a4 <prvAddNewTaskToReadyList+0xf8>)
 801736e:	f7ff f9d5 	bl	801671c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017372:	480d      	ldr	r0, [pc, #52]	; (80173a8 <prvAddNewTaskToReadyList+0xfc>)
 8017374:	f7ff f9d2 	bl	801671c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017378:	480c      	ldr	r0, [pc, #48]	; (80173ac <prvAddNewTaskToReadyList+0x100>)
 801737a:	f7ff f9cf 	bl	801671c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801737e:	4b0c      	ldr	r3, [pc, #48]	; (80173b0 <prvAddNewTaskToReadyList+0x104>)
 8017380:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017384:	4b0b      	ldr	r3, [pc, #44]	; (80173b4 <prvAddNewTaskToReadyList+0x108>)
 8017386:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8017388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 801738a:	e7a2      	b.n	80172d2 <prvAddNewTaskToReadyList+0x26>
 801738c:	20006758 	.word	0x20006758
 8017390:	200066c0 	.word	0x200066c0
 8017394:	200067b4 	.word	0x200067b4
 8017398:	20006768 	.word	0x20006768
 801739c:	2000676c 	.word	0x2000676c
 80173a0:	20006784 	.word	0x20006784
 80173a4:	200067a0 	.word	0x200067a0
 80173a8:	200067cc 	.word	0x200067cc
 80173ac:	200067b8 	.word	0x200067b8
 80173b0:	200066c4 	.word	0x200066c4
 80173b4:	200066c8 	.word	0x200066c8
 80173b8:	200066cc 	.word	0x200066cc
 80173bc:	20006770 	.word	0x20006770

080173c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80173c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80173c2:	4b1b      	ldr	r3, [pc, #108]	; (8017430 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80173c4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173c6:	4e1b      	ldr	r6, [pc, #108]	; (8017434 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80173c8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80173ca:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173cc:	6833      	ldr	r3, [r6, #0]
 80173ce:	1d18      	adds	r0, r3, #4
 80173d0:	f7ff f9dc 	bl	801678c <uxListRemove>
 80173d4:	b948      	cbnz	r0, 80173ea <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80173d6:	6833      	ldr	r3, [r6, #0]
 80173d8:	4917      	ldr	r1, [pc, #92]	; (8017438 <prvAddCurrentTaskToDelayedList+0x78>)
 80173da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173dc:	2301      	movs	r3, #1
 80173de:	fa03 f202 	lsl.w	r2, r3, r2
 80173e2:	680b      	ldr	r3, [r1, #0]
 80173e4:	ea23 0302 	bic.w	r3, r3, r2
 80173e8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80173ea:	1c63      	adds	r3, r4, #1
 80173ec:	d100      	bne.n	80173f0 <prvAddCurrentTaskToDelayedList+0x30>
 80173ee:	b9bf      	cbnz	r7, 8017420 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80173f0:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80173f2:	6833      	ldr	r3, [r6, #0]
 80173f4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80173f6:	d307      	bcc.n	8017408 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173f8:	4b10      	ldr	r3, [pc, #64]	; (801743c <prvAddCurrentTaskToDelayedList+0x7c>)
 80173fa:	6818      	ldr	r0, [r3, #0]
 80173fc:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80173fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017402:	3104      	adds	r1, #4
 8017404:	f7ff b9aa 	b.w	801675c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017408:	4b0d      	ldr	r3, [pc, #52]	; (8017440 <prvAddCurrentTaskToDelayedList+0x80>)
 801740a:	6818      	ldr	r0, [r3, #0]
 801740c:	6831      	ldr	r1, [r6, #0]
 801740e:	3104      	adds	r1, #4
 8017410:	f7ff f9a4 	bl	801675c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017414:	4b0b      	ldr	r3, [pc, #44]	; (8017444 <prvAddCurrentTaskToDelayedList+0x84>)
 8017416:	681a      	ldr	r2, [r3, #0]
 8017418:	42a2      	cmp	r2, r4
 801741a:	d900      	bls.n	801741e <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 801741c:	601c      	str	r4, [r3, #0]
}
 801741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017420:	6831      	ldr	r1, [r6, #0]
 8017422:	4809      	ldr	r0, [pc, #36]	; (8017448 <prvAddCurrentTaskToDelayedList+0x88>)
 8017424:	3104      	adds	r1, #4
}
 8017426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801742a:	f7ff b987 	b.w	801673c <vListInsertEnd>
 801742e:	bf00      	nop
 8017430:	200067e0 	.word	0x200067e0
 8017434:	200066c0 	.word	0x200066c0
 8017438:	2000676c 	.word	0x2000676c
 801743c:	200066c8 	.word	0x200066c8
 8017440:	200066c4 	.word	0x200066c4
 8017444:	20006798 	.word	0x20006798
 8017448:	200067b8 	.word	0x200067b8

0801744c <prvDeleteTCB>:
	{
 801744c:	b510      	push	{r4, lr}
 801744e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017450:	304c      	adds	r0, #76	; 0x4c
 8017452:	f00f f86f 	bl	8026534 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017456:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 801745a:	b173      	cbz	r3, 801747a <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801745c:	2b01      	cmp	r3, #1
 801745e:	d015      	beq.n	801748c <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017460:	2b02      	cmp	r3, #2
 8017462:	d012      	beq.n	801748a <prvDeleteTCB+0x3e>
	__asm volatile
 8017464:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017468:	b672      	cpsid	i
 801746a:	f383 8811 	msr	BASEPRI, r3
 801746e:	f3bf 8f6f 	isb	sy
 8017472:	f3bf 8f4f 	dsb	sy
 8017476:	b662      	cpsie	i
 8017478:	e7fe      	b.n	8017478 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 801747a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801747c:	f001 fb50 	bl	8018b20 <vPortFree>
				vPortFree( pxTCB );
 8017480:	4620      	mov	r0, r4
	}
 8017482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8017486:	f001 bb4b 	b.w	8018b20 <vPortFree>
	}
 801748a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 801748c:	4620      	mov	r0, r4
	}
 801748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8017492:	f001 bb45 	b.w	8018b20 <vPortFree>
 8017496:	bf00      	nop

08017498 <prvIdleTask>:
{
 8017498:	4c16      	ldr	r4, [pc, #88]	; (80174f4 <prvIdleTask+0x5c>)
				taskYIELD();
 801749a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801749e:	4e16      	ldr	r6, [pc, #88]	; (80174f8 <prvIdleTask+0x60>)
 80174a0:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80174a4:	4d15      	ldr	r5, [pc, #84]	; (80174fc <prvIdleTask+0x64>)
 80174a6:	f8df a058 	ldr.w	sl, [pc, #88]	; 8017500 <prvIdleTask+0x68>
{
 80174aa:	b580      	push	{r7, lr}
 80174ac:	e011      	b.n	80174d2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80174ae:	f001 f931 	bl	8018714 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174b2:	68f3      	ldr	r3, [r6, #12]
 80174b4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80174b6:	1d38      	adds	r0, r7, #4
 80174b8:	f7ff f968 	bl	801678c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80174bc:	682b      	ldr	r3, [r5, #0]
 80174be:	3b01      	subs	r3, #1
 80174c0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80174c2:	6823      	ldr	r3, [r4, #0]
 80174c4:	3b01      	subs	r3, #1
 80174c6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80174c8:	f001 f94a 	bl	8018760 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80174cc:	4638      	mov	r0, r7
 80174ce:	f7ff ffbd 	bl	801744c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80174d2:	6823      	ldr	r3, [r4, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d1ea      	bne.n	80174ae <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80174d8:	f8da 3000 	ldr.w	r3, [sl]
 80174dc:	2b01      	cmp	r3, #1
 80174de:	d905      	bls.n	80174ec <prvIdleTask+0x54>
				taskYIELD();
 80174e0:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80174e4:	f3bf 8f4f 	dsb	sy
 80174e8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80174ec:	f7e9 feb6 	bl	800125c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80174f0:	e7ef      	b.n	80174d2 <prvIdleTask+0x3a>
 80174f2:	bf00      	nop
 80174f4:	2000675c 	.word	0x2000675c
 80174f8:	200067cc 	.word	0x200067cc
 80174fc:	20006758 	.word	0x20006758
 8017500:	200066cc 	.word	0x200066cc

08017504 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8017504:	4b1d      	ldr	r3, [pc, #116]	; (801757c <vTaskSwitchContext.part.0+0x78>)
 8017506:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 8017508:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 801750a:	4c1d      	ldr	r4, [pc, #116]	; (8017580 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 801750c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801750e:	6822      	ldr	r2, [r4, #0]
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	6812      	ldr	r2, [r2, #0]
 8017514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017516:	429a      	cmp	r2, r3
 8017518:	d927      	bls.n	801756a <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801751a:	4b1a      	ldr	r3, [pc, #104]	; (8017584 <vTaskSwitchContext.part.0+0x80>)
 801751c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801751e:	fab3 f383 	clz	r3, r3
 8017522:	b2db      	uxtb	r3, r3
 8017524:	4a18      	ldr	r2, [pc, #96]	; (8017588 <vTaskSwitchContext.part.0+0x84>)
 8017526:	f1c3 031f 	rsb	r3, r3, #31
 801752a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801752e:	0099      	lsls	r1, r3, #2
 8017530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017534:	5850      	ldr	r0, [r2, r1]
 8017536:	b950      	cbnz	r0, 801754e <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 8017538:	f04f 0330 	mov.w	r3, #48	; 0x30
 801753c:	b672      	cpsid	i
 801753e:	f383 8811 	msr	BASEPRI, r3
 8017542:	f3bf 8f6f 	isb	sy
 8017546:	f3bf 8f4f 	dsb	sy
 801754a:	b662      	cpsie	i
 801754c:	e7fe      	b.n	801754c <vTaskSwitchContext.part.0+0x48>
 801754e:	6858      	ldr	r0, [r3, #4]
 8017550:	3108      	adds	r1, #8
 8017552:	6840      	ldr	r0, [r0, #4]
 8017554:	440a      	add	r2, r1
 8017556:	4290      	cmp	r0, r2
 8017558:	6058      	str	r0, [r3, #4]
 801755a:	d00c      	beq.n	8017576 <vTaskSwitchContext.part.0+0x72>
 801755c:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801755e:	4a0b      	ldr	r2, [pc, #44]	; (801758c <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017560:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017562:	6823      	ldr	r3, [r4, #0]
 8017564:	334c      	adds	r3, #76	; 0x4c
 8017566:	6013      	str	r3, [r2, #0]
}
 8017568:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 801756a:	6820      	ldr	r0, [r4, #0]
 801756c:	6821      	ldr	r1, [r4, #0]
 801756e:	3134      	adds	r1, #52	; 0x34
 8017570:	f7e9 fe76 	bl	8001260 <vApplicationStackOverflowHook>
 8017574:	e7d1      	b.n	801751a <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017576:	6840      	ldr	r0, [r0, #4]
 8017578:	6058      	str	r0, [r3, #4]
 801757a:	e7ef      	b.n	801755c <vTaskSwitchContext.part.0+0x58>
 801757c:	200067e4 	.word	0x200067e4
 8017580:	200066c0 	.word	0x200066c0
 8017584:	2000676c 	.word	0x2000676c
 8017588:	200066cc 	.word	0x200066cc
 801758c:	200004a4 	.word	0x200004a4

08017590 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8017590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017596:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017598:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801759c:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801759e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80175a0:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80175a2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80175a6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80175aa:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80175ae:	2900      	cmp	r1, #0
 80175b0:	d041      	beq.n	8017636 <prvInitialiseNewTask.constprop.0+0xa6>
 80175b2:	f101 3cff 	add.w	ip, r1, #4294967295
 80175b6:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80175ba:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80175bc:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 80175c0:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80175c4:	b10d      	cbz	r5, 80175ca <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175c6:	458c      	cmp	ip, r1
 80175c8:	d1f8      	bne.n	80175bc <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80175ca:	2300      	movs	r3, #0
 80175cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175d0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80175d2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80175d6:	1d20      	adds	r0, r4, #4
 80175d8:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80175da:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80175de:	bf28      	it	cs
 80175e0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80175e2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80175e4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175e6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80175ea:	f7ff f8a3 	bl	8016734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80175ee:	f104 0018 	add.w	r0, r4, #24
 80175f2:	f7ff f89f 	bl	8016734 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80175f6:	4651      	mov	r1, sl
 80175f8:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 80175fa:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80175fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017602:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017604:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017606:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017608:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801760c:	f00d ff04 	bl	8025418 <memset>
 8017610:	4b0a      	ldr	r3, [pc, #40]	; (801763c <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017612:	464a      	mov	r2, r9
 8017614:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017616:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017618:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801761a:	4b09      	ldr	r3, [pc, #36]	; (8017640 <prvInitialiseNewTask.constprop.0+0xb0>)
 801761c:	6563      	str	r3, [r4, #84]	; 0x54
 801761e:	4b09      	ldr	r3, [pc, #36]	; (8017644 <prvInitialiseNewTask.constprop.0+0xb4>)
 8017620:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017622:	f001 f847 	bl	80186b4 <pxPortInitialiseStack>
 8017626:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8017628:	f1b8 0f00 	cmp.w	r8, #0
 801762c:	d001      	beq.n	8017632 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801762e:	f8c8 4000 	str.w	r4, [r8]
}
 8017632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017636:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 801763a:	e7c9      	b.n	80175d0 <prvInitialiseNewTask.constprop.0+0x40>
 801763c:	080471d0 	.word	0x080471d0
 8017640:	080471f0 	.word	0x080471f0
 8017644:	080471b0 	.word	0x080471b0

08017648 <xTaskCreateStatic>:
	{
 8017648:	b530      	push	{r4, r5, lr}
 801764a:	b087      	sub	sp, #28
 801764c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801764e:	b1e4      	cbz	r4, 801768a <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8017650:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017652:	b17d      	cbz	r5, 8017674 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8017654:	25b4      	movs	r5, #180	; 0xb4
 8017656:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017658:	9d05      	ldr	r5, [sp, #20]
 801765a:	2db4      	cmp	r5, #180	; 0xb4
 801765c:	d020      	beq.n	80176a0 <xTaskCreateStatic+0x58>
 801765e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017662:	b672      	cpsid	i
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	b662      	cpsie	i
 8017672:	e7fe      	b.n	8017672 <xTaskCreateStatic+0x2a>
 8017674:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017678:	b672      	cpsid	i
 801767a:	f383 8811 	msr	BASEPRI, r3
 801767e:	f3bf 8f6f 	isb	sy
 8017682:	f3bf 8f4f 	dsb	sy
 8017686:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8017688:	e7fe      	b.n	8017688 <xTaskCreateStatic+0x40>
 801768a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801768e:	b672      	cpsid	i
 8017690:	f383 8811 	msr	BASEPRI, r3
 8017694:	f3bf 8f6f 	isb	sy
 8017698:	f3bf 8f4f 	dsb	sy
 801769c:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 801769e:	e7fe      	b.n	801769e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80176a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80176a2:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80176a4:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80176a6:	9502      	str	r5, [sp, #8]
 80176a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80176aa:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80176ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80176ae:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80176b2:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80176b4:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80176b6:	9401      	str	r4, [sp, #4]
 80176b8:	f7ff ff6a 	bl	8017590 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80176bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80176be:	f7ff fdf5 	bl	80172ac <prvAddNewTaskToReadyList>
	}
 80176c2:	9804      	ldr	r0, [sp, #16]
 80176c4:	b007      	add	sp, #28
 80176c6:	bd30      	pop	{r4, r5, pc}

080176c8 <xTaskCreate>:
	{
 80176c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176cc:	4607      	mov	r7, r0
 80176ce:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80176d0:	0090      	lsls	r0, r2, #2
	{
 80176d2:	4615      	mov	r5, r2
 80176d4:	4688      	mov	r8, r1
 80176d6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80176d8:	f001 f986 	bl	80189e8 <pvPortMalloc>
			if( pxStack != NULL )
 80176dc:	b1d8      	cbz	r0, 8017716 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80176de:	4604      	mov	r4, r0
 80176e0:	20b4      	movs	r0, #180	; 0xb4
 80176e2:	f001 f981 	bl	80189e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80176e6:	4606      	mov	r6, r0
 80176e8:	b1d0      	cbz	r0, 8017720 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80176ea:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80176ec:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80176ee:	464b      	mov	r3, r9
 80176f0:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80176f2:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80176f6:	4641      	mov	r1, r8
 80176f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80176fa:	4638      	mov	r0, r7
 80176fc:	9602      	str	r6, [sp, #8]
 80176fe:	9401      	str	r4, [sp, #4]
 8017700:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017702:	9400      	str	r4, [sp, #0]
 8017704:	f7ff ff44 	bl	8017590 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017708:	4630      	mov	r0, r6
 801770a:	f7ff fdcf 	bl	80172ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801770e:	2001      	movs	r0, #1
	}
 8017710:	b005      	add	sp, #20
 8017712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017716:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801771a:	b005      	add	sp, #20
 801771c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8017720:	4620      	mov	r0, r4
 8017722:	f001 f9fd 	bl	8018b20 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017726:	f04f 30ff 	mov.w	r0, #4294967295
 801772a:	e7f1      	b.n	8017710 <xTaskCreate+0x48>

0801772c <vTaskStartScheduler>:
{
 801772c:	b510      	push	{r4, lr}
 801772e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017730:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017732:	aa07      	add	r2, sp, #28
 8017734:	a906      	add	r1, sp, #24
 8017736:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017738:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801773c:	f7e9 fd94 	bl	8001268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017740:	4623      	mov	r3, r4
 8017742:	9a07      	ldr	r2, [sp, #28]
 8017744:	9400      	str	r4, [sp, #0]
 8017746:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801774a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801774e:	491a      	ldr	r1, [pc, #104]	; (80177b8 <vTaskStartScheduler+0x8c>)
 8017750:	481a      	ldr	r0, [pc, #104]	; (80177bc <vTaskStartScheduler+0x90>)
 8017752:	f7ff ff79 	bl	8017648 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8017756:	b1f8      	cbz	r0, 8017798 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8017758:	f000 fcfa 	bl	8018150 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801775c:	2801      	cmp	r0, #1
 801775e:	d11d      	bne.n	801779c <vTaskStartScheduler+0x70>
 8017760:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017764:	b672      	cpsid	i
 8017766:	f383 8811 	msr	BASEPRI, r3
 801776a:	f3bf 8f6f 	isb	sy
 801776e:	f3bf 8f4f 	dsb	sy
 8017772:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017774:	4b12      	ldr	r3, [pc, #72]	; (80177c0 <vTaskStartScheduler+0x94>)
 8017776:	4a13      	ldr	r2, [pc, #76]	; (80177c4 <vTaskStartScheduler+0x98>)
 8017778:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801777a:	4913      	ldr	r1, [pc, #76]	; (80177c8 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801777c:	334c      	adds	r3, #76	; 0x4c
 801777e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017780:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8017784:	4a11      	ldr	r2, [pc, #68]	; (80177cc <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8017786:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017788:	4b11      	ldr	r3, [pc, #68]	; (80177d0 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 801778a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801778c:	601c      	str	r4, [r3, #0]
}
 801778e:	b008      	add	sp, #32
 8017790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8017794:	f001 b85a 	b.w	801884c <xPortStartScheduler>
}
 8017798:	b008      	add	sp, #32
 801779a:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801779c:	3001      	adds	r0, #1
 801779e:	d1fb      	bne.n	8017798 <vTaskStartScheduler+0x6c>
 80177a0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80177a4:	b672      	cpsid	i
 80177a6:	f383 8811 	msr	BASEPRI, r3
 80177aa:	f3bf 8f6f 	isb	sy
 80177ae:	f3bf 8f4f 	dsb	sy
 80177b2:	b662      	cpsie	i
 80177b4:	e7fe      	b.n	80177b4 <vTaskStartScheduler+0x88>
 80177b6:	bf00      	nop
 80177b8:	0802e23c 	.word	0x0802e23c
 80177bc:	08017499 	.word	0x08017499
 80177c0:	200066c0 	.word	0x200066c0
 80177c4:	200004a4 	.word	0x200004a4
 80177c8:	20006798 	.word	0x20006798
 80177cc:	200067b4 	.word	0x200067b4
 80177d0:	200067e0 	.word	0x200067e0

080177d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80177d4:	4a02      	ldr	r2, [pc, #8]	; (80177e0 <vTaskSuspendAll+0xc>)
 80177d6:	6813      	ldr	r3, [r2, #0]
 80177d8:	3301      	adds	r3, #1
 80177da:	6013      	str	r3, [r2, #0]
}
 80177dc:	4770      	bx	lr
 80177de:	bf00      	nop
 80177e0:	20006764 	.word	0x20006764

080177e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80177e4:	4b01      	ldr	r3, [pc, #4]	; (80177ec <xTaskGetTickCount+0x8>)
 80177e6:	6818      	ldr	r0, [r3, #0]
}
 80177e8:	4770      	bx	lr
 80177ea:	bf00      	nop
 80177ec:	200067e0 	.word	0x200067e0

080177f0 <xTaskGetTickCountFromISR>:
{
 80177f0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80177f2:	f001 f895 	bl	8018920 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80177f6:	4b01      	ldr	r3, [pc, #4]	; (80177fc <xTaskGetTickCountFromISR+0xc>)
 80177f8:	6818      	ldr	r0, [r3, #0]
}
 80177fa:	bd08      	pop	{r3, pc}
 80177fc:	200067e0 	.word	0x200067e0

08017800 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017800:	4b52      	ldr	r3, [pc, #328]	; (801794c <xTaskIncrementTick+0x14c>)
 8017802:	681b      	ldr	r3, [r3, #0]
{
 8017804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017808:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801780a:	2b00      	cmp	r3, #0
 801780c:	d14c      	bne.n	80178a8 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801780e:	4b50      	ldr	r3, [pc, #320]	; (8017950 <xTaskIncrementTick+0x150>)
 8017810:	681d      	ldr	r5, [r3, #0]
 8017812:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8017814:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017816:	2d00      	cmp	r5, #0
 8017818:	d054      	beq.n	80178c4 <xTaskIncrementTick+0xc4>
 801781a:	4b4e      	ldr	r3, [pc, #312]	; (8017954 <xTaskIncrementTick+0x154>)
 801781c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 801781e:	9b01      	ldr	r3, [sp, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	42ab      	cmp	r3, r5
 8017824:	d85d      	bhi.n	80178e2 <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017826:	4e4c      	ldr	r6, [pc, #304]	; (8017958 <xTaskIncrementTick+0x158>)
 8017828:	6833      	ldr	r3, [r6, #0]
 801782a:	681c      	ldr	r4, [r3, #0]
 801782c:	2c00      	cmp	r4, #0
 801782e:	d07c      	beq.n	801792a <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8017830:	2400      	movs	r4, #0
 8017832:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8017970 <xTaskIncrementTick+0x170>
 8017836:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8017974 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 801783a:	f04f 0a01 	mov.w	sl, #1
 801783e:	4f47      	ldr	r7, [pc, #284]	; (801795c <xTaskIncrementTick+0x15c>)
 8017840:	e024      	b.n	801788c <xTaskIncrementTick+0x8c>
 8017842:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017844:	f7fe ffa2 	bl	801678c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017848:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801784c:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017850:	9900      	ldr	r1, [sp, #0]
 8017852:	b112      	cbz	r2, 801785a <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017854:	f7fe ff9a 	bl	801678c <uxListRemove>
 8017858:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 801785a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	fa0a f200 	lsl.w	r2, sl, r0
 8017864:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017868:	431a      	orrs	r2, r3
 801786a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801786e:	603a      	str	r2, [r7, #0]
 8017870:	f7fe ff64 	bl	801673c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017874:	f8d9 3000 	ldr.w	r3, [r9]
 8017878:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801787e:	429a      	cmp	r2, r3
 8017880:	bf28      	it	cs
 8017882:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017884:	6833      	ldr	r3, [r6, #0]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d052      	beq.n	8017932 <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801788c:	6833      	ldr	r3, [r6, #0]
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017894:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017898:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 801789c:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801789e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80178a0:	d2cf      	bcs.n	8017842 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 80178a2:	9b01      	ldr	r3, [sp, #4]
 80178a4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80178a6:	e021      	b.n	80178ec <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 80178a8:	4a2d      	ldr	r2, [pc, #180]	; (8017960 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 80178aa:	2400      	movs	r4, #0
		++uxPendedTicks;
 80178ac:	6813      	ldr	r3, [r2, #0]
 80178ae:	3301      	adds	r3, #1
 80178b0:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80178b2:	4b2c      	ldr	r3, [pc, #176]	; (8017964 <xTaskIncrementTick+0x164>)
 80178b4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80178b6:	2b00      	cmp	r3, #0
}
 80178b8:	bf0c      	ite	eq
 80178ba:	4620      	moveq	r0, r4
 80178bc:	2001      	movne	r0, #1
 80178be:	b003      	add	sp, #12
 80178c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80178c4:	4b24      	ldr	r3, [pc, #144]	; (8017958 <xTaskIncrementTick+0x158>)
 80178c6:	681a      	ldr	r2, [r3, #0]
 80178c8:	6812      	ldr	r2, [r2, #0]
 80178ca:	b1da      	cbz	r2, 8017904 <xTaskIncrementTick+0x104>
 80178cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178d0:	b672      	cpsid	i
 80178d2:	f383 8811 	msr	BASEPRI, r3
 80178d6:	f3bf 8f6f 	isb	sy
 80178da:	f3bf 8f4f 	dsb	sy
 80178de:	b662      	cpsie	i
 80178e0:	e7fe      	b.n	80178e0 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 80178e2:	2400      	movs	r4, #0
 80178e4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8017970 <xTaskIncrementTick+0x170>
 80178e8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8017974 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80178ec:	f8d9 3000 	ldr.w	r3, [r9]
 80178f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 80178fc:	2b02      	cmp	r3, #2
 80178fe:	bf28      	it	cs
 8017900:	2401      	movcs	r4, #1
 8017902:	e7d6      	b.n	80178b2 <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8017904:	4a18      	ldr	r2, [pc, #96]	; (8017968 <xTaskIncrementTick+0x168>)
 8017906:	6818      	ldr	r0, [r3, #0]
 8017908:	6811      	ldr	r1, [r2, #0]
 801790a:	6019      	str	r1, [r3, #0]
 801790c:	4917      	ldr	r1, [pc, #92]	; (801796c <xTaskIncrementTick+0x16c>)
 801790e:	6010      	str	r0, [r2, #0]
 8017910:	680a      	ldr	r2, [r1, #0]
 8017912:	3201      	adds	r2, #1
 8017914:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017916:	681a      	ldr	r2, [r3, #0]
 8017918:	6812      	ldr	r2, [r2, #0]
 801791a:	b97a      	cbnz	r2, 801793c <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 801791c:	4b0d      	ldr	r3, [pc, #52]	; (8017954 <xTaskIncrementTick+0x154>)
 801791e:	461a      	mov	r2, r3
 8017920:	9301      	str	r3, [sp, #4]
 8017922:	f04f 33ff 	mov.w	r3, #4294967295
 8017926:	6013      	str	r3, [r2, #0]
 8017928:	e779      	b.n	801781e <xTaskIncrementTick+0x1e>
 801792a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017970 <xTaskIncrementTick+0x170>
 801792e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8017974 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017932:	f04f 33ff 	mov.w	r3, #4294967295
 8017936:	9a01      	ldr	r2, [sp, #4]
 8017938:	6013      	str	r3, [r2, #0]
					break;
 801793a:	e7d7      	b.n	80178ec <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801793c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801793e:	4a05      	ldr	r2, [pc, #20]	; (8017954 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017940:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017942:	9201      	str	r2, [sp, #4]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	6013      	str	r3, [r2, #0]
}
 801794a:	e768      	b.n	801781e <xTaskIncrementTick+0x1e>
 801794c:	20006764 	.word	0x20006764
 8017950:	200067e0 	.word	0x200067e0
 8017954:	20006798 	.word	0x20006798
 8017958:	200066c4 	.word	0x200066c4
 801795c:	2000676c 	.word	0x2000676c
 8017960:	20006760 	.word	0x20006760
 8017964:	200067e4 	.word	0x200067e4
 8017968:	200066c8 	.word	0x200066c8
 801796c:	2000679c 	.word	0x2000679c
 8017970:	200066cc 	.word	0x200066cc
 8017974:	200066c0 	.word	0x200066c0

08017978 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8017978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801797e:	f000 fec9 	bl	8018714 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8017982:	4b38      	ldr	r3, [pc, #224]	; (8017a64 <xTaskResumeAll.part.0+0xec>)
 8017984:	681a      	ldr	r2, [r3, #0]
 8017986:	3a01      	subs	r2, #1
 8017988:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d159      	bne.n	8017a44 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017990:	4b35      	ldr	r3, [pc, #212]	; (8017a68 <xTaskResumeAll.part.0+0xf0>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d055      	beq.n	8017a44 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017998:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a80 <xTaskResumeAll.part.0+0x108>
 801799c:	f8da 3000 	ldr.w	r3, [sl]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d05c      	beq.n	8017a5e <xTaskResumeAll.part.0+0xe6>
 80179a4:	4d31      	ldr	r5, [pc, #196]	; (8017a6c <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 80179a6:	2601      	movs	r6, #1
 80179a8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8017a84 <xTaskResumeAll.part.0+0x10c>
 80179ac:	4f30      	ldr	r7, [pc, #192]	; (8017a70 <xTaskResumeAll.part.0+0xf8>)
 80179ae:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8017a88 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179b2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80179b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179b8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80179bc:	f104 0018 	add.w	r0, r4, #24
 80179c0:	f7fe fee4 	bl	801678c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179c4:	4658      	mov	r0, fp
 80179c6:	f7fe fee1 	bl	801678c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80179ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80179cc:	682a      	ldr	r2, [r5, #0]
 80179ce:	4659      	mov	r1, fp
 80179d0:	fa06 f300 	lsl.w	r3, r6, r0
 80179d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80179d8:	4313      	orrs	r3, r2
 80179da:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80179de:	602b      	str	r3, [r5, #0]
 80179e0:	f7fe feac 	bl	801673c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80179e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d301      	bcc.n	80179f2 <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 80179ee:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80179f2:	f8da 3000 	ldr.w	r3, [sl]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d1db      	bne.n	80179b2 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179fa:	4b1e      	ldr	r3, [pc, #120]	; (8017a74 <xTaskResumeAll.part.0+0xfc>)
 80179fc:	681a      	ldr	r2, [r3, #0]
 80179fe:	6812      	ldr	r2, [r2, #0]
 8017a00:	b342      	cbz	r2, 8017a54 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a02:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017a04:	4b1c      	ldr	r3, [pc, #112]	; (8017a78 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a06:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017a08:	68d2      	ldr	r2, [r2, #12]
 8017a0a:	6852      	ldr	r2, [r2, #4]
 8017a0c:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017a0e:	4e1b      	ldr	r6, [pc, #108]	; (8017a7c <xTaskResumeAll.part.0+0x104>)
 8017a10:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017a12:	b144      	cbz	r4, 8017a26 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8017a14:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8017a16:	f7ff fef3 	bl	8017800 <xTaskIncrementTick>
 8017a1a:	b108      	cbz	r0, 8017a20 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8017a1c:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017a20:	3c01      	subs	r4, #1
 8017a22:	d1f8      	bne.n	8017a16 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8017a24:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8017a26:	f8d9 3000 	ldr.w	r3, [r9]
 8017a2a:	b15b      	cbz	r3, 8017a44 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8017a2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017a38:	f3bf 8f4f 	dsb	sy
 8017a3c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8017a40:	2001      	movs	r0, #1
 8017a42:	e000      	b.n	8017a46 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8017a44:	2000      	movs	r0, #0
 8017a46:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8017a48:	f000 fe8a 	bl	8018760 <vPortExitCritical>
}
 8017a4c:	9801      	ldr	r0, [sp, #4]
 8017a4e:	b003      	add	sp, #12
 8017a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8017a54:	4b08      	ldr	r3, [pc, #32]	; (8017a78 <xTaskResumeAll.part.0+0x100>)
 8017a56:	f04f 32ff 	mov.w	r2, #4294967295
 8017a5a:	601a      	str	r2, [r3, #0]
 8017a5c:	e7d7      	b.n	8017a0e <xTaskResumeAll.part.0+0x96>
 8017a5e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8017a88 <xTaskResumeAll.part.0+0x110>
 8017a62:	e7d4      	b.n	8017a0e <xTaskResumeAll.part.0+0x96>
 8017a64:	20006764 	.word	0x20006764
 8017a68:	20006758 	.word	0x20006758
 8017a6c:	2000676c 	.word	0x2000676c
 8017a70:	200066c0 	.word	0x200066c0
 8017a74:	200066c4 	.word	0x200066c4
 8017a78:	20006798 	.word	0x20006798
 8017a7c:	20006760 	.word	0x20006760
 8017a80:	200067a0 	.word	0x200067a0
 8017a84:	200066cc 	.word	0x200066cc
 8017a88:	200067e4 	.word	0x200067e4

08017a8c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8017a8c:	4b07      	ldr	r3, [pc, #28]	; (8017aac <xTaskResumeAll+0x20>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	b953      	cbnz	r3, 8017aa8 <xTaskResumeAll+0x1c>
 8017a92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017a96:	b672      	cpsid	i
 8017a98:	f383 8811 	msr	BASEPRI, r3
 8017a9c:	f3bf 8f6f 	isb	sy
 8017aa0:	f3bf 8f4f 	dsb	sy
 8017aa4:	b662      	cpsie	i
 8017aa6:	e7fe      	b.n	8017aa6 <xTaskResumeAll+0x1a>
 8017aa8:	f7ff bf66 	b.w	8017978 <xTaskResumeAll.part.0>
 8017aac:	20006764 	.word	0x20006764

08017ab0 <vTaskDelay>:
	{
 8017ab0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017ab2:	b950      	cbnz	r0, 8017aca <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8017ab4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017abc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017ac0:	f3bf 8f4f 	dsb	sy
 8017ac4:	f3bf 8f6f 	isb	sy
	}
 8017ac8:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8017aca:	4c12      	ldr	r4, [pc, #72]	; (8017b14 <vTaskDelay+0x64>)
 8017acc:	6821      	ldr	r1, [r4, #0]
 8017ace:	b151      	cbz	r1, 8017ae6 <vTaskDelay+0x36>
 8017ad0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ad4:	b672      	cpsid	i
 8017ad6:	f383 8811 	msr	BASEPRI, r3
 8017ada:	f3bf 8f6f 	isb	sy
 8017ade:	f3bf 8f4f 	dsb	sy
 8017ae2:	b662      	cpsie	i
 8017ae4:	e7fe      	b.n	8017ae4 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8017ae6:	6823      	ldr	r3, [r4, #0]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017aec:	f7ff fc68 	bl	80173c0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8017af0:	6823      	ldr	r3, [r4, #0]
 8017af2:	b953      	cbnz	r3, 8017b0a <vTaskDelay+0x5a>
 8017af4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017af8:	b672      	cpsid	i
 8017afa:	f383 8811 	msr	BASEPRI, r3
 8017afe:	f3bf 8f6f 	isb	sy
 8017b02:	f3bf 8f4f 	dsb	sy
 8017b06:	b662      	cpsie	i
 8017b08:	e7fe      	b.n	8017b08 <vTaskDelay+0x58>
 8017b0a:	f7ff ff35 	bl	8017978 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	d0d0      	beq.n	8017ab4 <vTaskDelay+0x4>
	}
 8017b12:	bd10      	pop	{r4, pc}
 8017b14:	20006764 	.word	0x20006764

08017b18 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017b18:	4b04      	ldr	r3, [pc, #16]	; (8017b2c <vTaskSwitchContext+0x14>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	b11b      	cbz	r3, 8017b26 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8017b1e:	4b04      	ldr	r3, [pc, #16]	; (8017b30 <vTaskSwitchContext+0x18>)
 8017b20:	2201      	movs	r2, #1
 8017b22:	601a      	str	r2, [r3, #0]
}
 8017b24:	4770      	bx	lr
 8017b26:	f7ff bced 	b.w	8017504 <vTaskSwitchContext.part.0>
 8017b2a:	bf00      	nop
 8017b2c:	20006764 	.word	0x20006764
 8017b30:	200067e4 	.word	0x200067e4

08017b34 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8017b34:	b160      	cbz	r0, 8017b50 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b36:	4b0c      	ldr	r3, [pc, #48]	; (8017b68 <vTaskPlaceOnEventList+0x34>)
{
 8017b38:	b510      	push	{r4, lr}
 8017b3a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b3c:	6819      	ldr	r1, [r3, #0]
 8017b3e:	3118      	adds	r1, #24
 8017b40:	f7fe fe0c 	bl	801675c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b44:	4620      	mov	r0, r4
 8017b46:	2101      	movs	r1, #1
}
 8017b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b4c:	f7ff bc38 	b.w	80173c0 <prvAddCurrentTaskToDelayedList>
 8017b50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b54:	b672      	cpsid	i
 8017b56:	f383 8811 	msr	BASEPRI, r3
 8017b5a:	f3bf 8f6f 	isb	sy
 8017b5e:	f3bf 8f4f 	dsb	sy
 8017b62:	b662      	cpsie	i
	configASSERT( pxEventList );
 8017b64:	e7fe      	b.n	8017b64 <vTaskPlaceOnEventList+0x30>
 8017b66:	bf00      	nop
 8017b68:	200066c0 	.word	0x200066c0

08017b6c <vTaskPlaceOnEventListRestricted>:
	{
 8017b6c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8017b6e:	b180      	cbz	r0, 8017b92 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b70:	4b0d      	ldr	r3, [pc, #52]	; (8017ba8 <vTaskPlaceOnEventListRestricted+0x3c>)
 8017b72:	460d      	mov	r5, r1
 8017b74:	4614      	mov	r4, r2
 8017b76:	6819      	ldr	r1, [r3, #0]
 8017b78:	3118      	adds	r1, #24
 8017b7a:	f7fe fddf 	bl	801673c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8017b7e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017b80:	4621      	mov	r1, r4
 8017b82:	bf0c      	ite	eq
 8017b84:	4628      	moveq	r0, r5
 8017b86:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8017b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017b8e:	f7ff bc17 	b.w	80173c0 <prvAddCurrentTaskToDelayedList>
 8017b92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b96:	b672      	cpsid	i
 8017b98:	f383 8811 	msr	BASEPRI, r3
 8017b9c:	f3bf 8f6f 	isb	sy
 8017ba0:	f3bf 8f4f 	dsb	sy
 8017ba4:	b662      	cpsie	i
		configASSERT( pxEventList );
 8017ba6:	e7fe      	b.n	8017ba6 <vTaskPlaceOnEventListRestricted+0x3a>
 8017ba8:	200066c0 	.word	0x200066c0

08017bac <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bac:	68c3      	ldr	r3, [r0, #12]
{
 8017bae:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bb0:	68dc      	ldr	r4, [r3, #12]
{
 8017bb2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8017bb4:	b364      	cbz	r4, 8017c10 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017bb6:	f104 0518 	add.w	r5, r4, #24
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f7fe fde6 	bl	801678c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bc0:	4b1a      	ldr	r3, [pc, #104]	; (8017c2c <xTaskRemoveFromEventList+0x80>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	b17b      	cbz	r3, 8017be6 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017bc6:	4629      	mov	r1, r5
 8017bc8:	4819      	ldr	r0, [pc, #100]	; (8017c30 <xTaskRemoveFromEventList+0x84>)
 8017bca:	f7fe fdb7 	bl	801673c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017bce:	4b19      	ldr	r3, [pc, #100]	; (8017c34 <xTaskRemoveFromEventList+0x88>)
 8017bd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	d925      	bls.n	8017c26 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8017bda:	2301      	movs	r3, #1
 8017bdc:	4a16      	ldr	r2, [pc, #88]	; (8017c38 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8017bde:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8017be0:	6013      	str	r3, [r2, #0]
}
 8017be2:	b003      	add	sp, #12
 8017be4:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017be6:	1d21      	adds	r1, r4, #4
 8017be8:	4608      	mov	r0, r1
 8017bea:	9101      	str	r1, [sp, #4]
 8017bec:	f7fe fdce 	bl	801678c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017bf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017bf2:	4a12      	ldr	r2, [pc, #72]	; (8017c3c <xTaskRemoveFromEventList+0x90>)
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	9901      	ldr	r1, [sp, #4]
 8017bf8:	6815      	ldr	r5, [r2, #0]
 8017bfa:	4083      	lsls	r3, r0
 8017bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017c00:	432b      	orrs	r3, r5
 8017c02:	6013      	str	r3, [r2, #0]
 8017c04:	4b0e      	ldr	r3, [pc, #56]	; (8017c40 <xTaskRemoveFromEventList+0x94>)
 8017c06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017c0a:	f7fe fd97 	bl	801673c <vListInsertEnd>
 8017c0e:	e7de      	b.n	8017bce <xTaskRemoveFromEventList+0x22>
 8017c10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017c14:	b672      	cpsid	i
 8017c16:	f383 8811 	msr	BASEPRI, r3
 8017c1a:	f3bf 8f6f 	isb	sy
 8017c1e:	f3bf 8f4f 	dsb	sy
 8017c22:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8017c24:	e7fe      	b.n	8017c24 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8017c26:	2000      	movs	r0, #0
}
 8017c28:	b003      	add	sp, #12
 8017c2a:	bd30      	pop	{r4, r5, pc}
 8017c2c:	20006764 	.word	0x20006764
 8017c30:	200067a0 	.word	0x200067a0
 8017c34:	200066c0 	.word	0x200066c0
 8017c38:	200067e4 	.word	0x200067e4
 8017c3c:	2000676c 	.word	0x2000676c
 8017c40:	200066cc 	.word	0x200066cc

08017c44 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c44:	4a03      	ldr	r2, [pc, #12]	; (8017c54 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017c46:	4b04      	ldr	r3, [pc, #16]	; (8017c58 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c48:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	2000679c 	.word	0x2000679c
 8017c58:	200067e0 	.word	0x200067e0

08017c5c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8017c5c:	b338      	cbz	r0, 8017cae <xTaskCheckForTimeOut+0x52>
{
 8017c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c60:	460d      	mov	r5, r1
 8017c62:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8017c64:	b1c1      	cbz	r1, 8017c98 <xTaskCheckForTimeOut+0x3c>
 8017c66:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8017c68:	f000 fd54 	bl	8018714 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8017c6c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8017c6e:	4a1f      	ldr	r2, [pc, #124]	; (8017cec <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8017c70:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8017c72:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8017c74:	d034      	beq.n	8017ce0 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017c76:	f8df c078 	ldr.w	ip, [pc, #120]	; 8017cf0 <xTaskCheckForTimeOut+0x94>
 8017c7a:	6826      	ldr	r6, [r4, #0]
 8017c7c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017c80:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017c82:	42be      	cmp	r6, r7
 8017c84:	d01e      	beq.n	8017cc4 <xTaskCheckForTimeOut+0x68>
 8017c86:	4288      	cmp	r0, r1
 8017c88:	d81c      	bhi.n	8017cc4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8017c8a:	2001      	movs	r0, #1
 8017c8c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8017c8e:	f000 fd67 	bl	8018760 <vPortExitCritical>
}
 8017c92:	9801      	ldr	r0, [sp, #4]
 8017c94:	b003      	add	sp, #12
 8017c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017c9c:	b672      	cpsid	i
 8017c9e:	f383 8811 	msr	BASEPRI, r3
 8017ca2:	f3bf 8f6f 	isb	sy
 8017ca6:	f3bf 8f4f 	dsb	sy
 8017caa:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8017cac:	e7fe      	b.n	8017cac <xTaskCheckForTimeOut+0x50>
 8017cae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017cb2:	b672      	cpsid	i
 8017cb4:	f383 8811 	msr	BASEPRI, r3
 8017cb8:	f3bf 8f6f 	isb	sy
 8017cbc:	f3bf 8f4f 	dsb	sy
 8017cc0:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8017cc2:	e7fe      	b.n	8017cc2 <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017cc4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017cc8:	4573      	cmp	r3, lr
 8017cca:	d90b      	bls.n	8017ce4 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8017ccc:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017cce:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017cd2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8017cd4:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8017cd6:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8017cd8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017cda:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8017cde:	e7d5      	b.n	8017c8c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8017ce0:	2000      	movs	r0, #0
 8017ce2:	e7d3      	b.n	8017c8c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8017ce4:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8017ce6:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8017ce8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8017cea:	e7cf      	b.n	8017c8c <xTaskCheckForTimeOut+0x30>
 8017cec:	200067e0 	.word	0x200067e0
 8017cf0:	2000679c 	.word	0x2000679c

08017cf4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8017cf4:	4b01      	ldr	r3, [pc, #4]	; (8017cfc <vTaskMissedYield+0x8>)
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	601a      	str	r2, [r3, #0]
}
 8017cfa:	4770      	bx	lr
 8017cfc:	200067e4 	.word	0x200067e4

08017d00 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8017d00:	4b01      	ldr	r3, [pc, #4]	; (8017d08 <xTaskGetCurrentTaskHandle+0x8>)
 8017d02:	6818      	ldr	r0, [r3, #0]
	}
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	200066c0 	.word	0x200066c0

08017d0c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8017d0c:	4b05      	ldr	r3, [pc, #20]	; (8017d24 <xTaskGetSchedulerState+0x18>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	b133      	cbz	r3, 8017d20 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d12:	4b05      	ldr	r3, [pc, #20]	; (8017d28 <xTaskGetSchedulerState+0x1c>)
 8017d14:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	bf0c      	ite	eq
 8017d1a:	2002      	moveq	r0, #2
 8017d1c:	2000      	movne	r0, #0
 8017d1e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017d20:	2001      	movs	r0, #1
	}
 8017d22:	4770      	bx	lr
 8017d24:	200067b4 	.word	0x200067b4
 8017d28:	20006764 	.word	0x20006764

08017d2c <xTaskPriorityInherit>:
	{
 8017d2c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8017d2e:	4604      	mov	r4, r0
	{
 8017d30:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8017d32:	b1c8      	cbz	r0, 8017d68 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017d34:	4d26      	ldr	r5, [pc, #152]	; (8017dd0 <xTaskPriorityInherit+0xa4>)
 8017d36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017d38:	682a      	ldr	r2, [r5, #0]
 8017d3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d215      	bcs.n	8017d6c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017d40:	6982      	ldr	r2, [r0, #24]
 8017d42:	2a00      	cmp	r2, #0
 8017d44:	db04      	blt.n	8017d50 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d46:	682a      	ldr	r2, [r5, #0]
 8017d48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017d4a:	f1c2 0207 	rsb	r2, r2, #7
 8017d4e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017d50:	4e20      	ldr	r6, [pc, #128]	; (8017dd4 <xTaskPriorityInherit+0xa8>)
 8017d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017d56:	6962      	ldr	r2, [r4, #20]
 8017d58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	d00e      	beq.n	8017d7e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017d60:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8017d62:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d66:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8017d68:	b002      	add	sp, #8
 8017d6a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017d6c:	682b      	ldr	r3, [r5, #0]
 8017d6e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d72:	4298      	cmp	r0, r3
 8017d74:	bf2c      	ite	cs
 8017d76:	2000      	movcs	r0, #0
 8017d78:	2001      	movcc	r0, #1
	}
 8017d7a:	b002      	add	sp, #8
 8017d7c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017d7e:	1d21      	adds	r1, r4, #4
 8017d80:	4608      	mov	r0, r1
 8017d82:	9101      	str	r1, [sp, #4]
 8017d84:	f7fe fd02 	bl	801678c <uxListRemove>
 8017d88:	9901      	ldr	r1, [sp, #4]
 8017d8a:	b970      	cbnz	r0, 8017daa <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8017d8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017d8e:	4a12      	ldr	r2, [pc, #72]	; (8017dd8 <xTaskPriorityInherit+0xac>)
 8017d90:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8017d94:	009b      	lsls	r3, r3, #2
 8017d96:	58f3      	ldr	r3, [r6, r3]
 8017d98:	b943      	cbnz	r3, 8017dac <xTaskPriorityInherit+0x80>
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8017da0:	6813      	ldr	r3, [r2, #0]
 8017da2:	ea23 0300 	bic.w	r3, r3, r0
 8017da6:	6013      	str	r3, [r2, #0]
 8017da8:	e000      	b.n	8017dac <xTaskPriorityInherit+0x80>
 8017daa:	4a0b      	ldr	r2, [pc, #44]	; (8017dd8 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017dac:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017dae:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017db4:	2401      	movs	r4, #1
 8017db6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8017dba:	fa04 f303 	lsl.w	r3, r4, r3
 8017dbe:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8017dc2:	432b      	orrs	r3, r5
 8017dc4:	6013      	str	r3, [r2, #0]
 8017dc6:	f7fe fcb9 	bl	801673c <vListInsertEnd>
				xReturn = pdTRUE;
 8017dca:	4620      	mov	r0, r4
 8017dcc:	e7cc      	b.n	8017d68 <xTaskPriorityInherit+0x3c>
 8017dce:	bf00      	nop
 8017dd0:	200066c0 	.word	0x200066c0
 8017dd4:	200066cc 	.word	0x200066cc
 8017dd8:	2000676c 	.word	0x2000676c

08017ddc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8017ddc:	b340      	cbz	r0, 8017e30 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8017dde:	4b2c      	ldr	r3, [pc, #176]	; (8017e90 <xTaskPriorityDisinherit+0xb4>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	4283      	cmp	r3, r0
	{
 8017de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017de6:	4604      	mov	r4, r0
 8017de8:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8017dea:	d00a      	beq.n	8017e02 <xTaskPriorityDisinherit+0x26>
 8017dec:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017df0:	b672      	cpsid	i
 8017df2:	f383 8811 	msr	BASEPRI, r3
 8017df6:	f3bf 8f6f 	isb	sy
 8017dfa:	f3bf 8f4f 	dsb	sy
 8017dfe:	b662      	cpsie	i
 8017e00:	e7fe      	b.n	8017e00 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8017e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e04:	b14b      	cbz	r3, 8017e1a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017e06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8017e08:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017e0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8017e0c:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017e0e:	4291      	cmp	r1, r2
 8017e10:	d000      	beq.n	8017e14 <xTaskPriorityDisinherit+0x38>
 8017e12:	b17b      	cbz	r3, 8017e34 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8017e14:	2000      	movs	r0, #0
	}
 8017e16:	b003      	add	sp, #12
 8017e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017e1e:	b672      	cpsid	i
 8017e20:	f383 8811 	msr	BASEPRI, r3
 8017e24:	f3bf 8f6f 	isb	sy
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8017e2e:	e7fe      	b.n	8017e2e <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8017e30:	2000      	movs	r0, #0
	}
 8017e32:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017e34:	1d01      	adds	r1, r0, #4
 8017e36:	4608      	mov	r0, r1
 8017e38:	9101      	str	r1, [sp, #4]
 8017e3a:	f7fe fca7 	bl	801678c <uxListRemove>
 8017e3e:	9901      	ldr	r1, [sp, #4]
 8017e40:	b1a0      	cbz	r0, 8017e6c <xTaskPriorityDisinherit+0x90>
 8017e42:	4814      	ldr	r0, [pc, #80]	; (8017e94 <xTaskPriorityDisinherit+0xb8>)
 8017e44:	4a14      	ldr	r2, [pc, #80]	; (8017e98 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8017e48:	2501      	movs	r5, #1
 8017e4a:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e4c:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017e50:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e52:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8017e54:	fa05 f403 	lsl.w	r4, r5, r3
 8017e58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017e5c:	4334      	orrs	r4, r6
 8017e5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017e62:	6014      	str	r4, [r2, #0]
 8017e64:	f7fe fc6a 	bl	801673c <vListInsertEnd>
					xReturn = pdTRUE;
 8017e68:	4628      	mov	r0, r5
		return xReturn;
 8017e6a:	e7d4      	b.n	8017e16 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017e6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8017e6e:	4809      	ldr	r0, [pc, #36]	; (8017e94 <xTaskPriorityDisinherit+0xb8>)
 8017e70:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8017e74:	4a08      	ldr	r2, [pc, #32]	; (8017e98 <xTaskPriorityDisinherit+0xbc>)
 8017e76:	009b      	lsls	r3, r3, #2
 8017e78:	58c3      	ldr	r3, [r0, r3]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d1e3      	bne.n	8017e46 <xTaskPriorityDisinherit+0x6a>
 8017e7e:	2301      	movs	r3, #1
 8017e80:	fa03 f505 	lsl.w	r5, r3, r5
 8017e84:	6813      	ldr	r3, [r2, #0]
 8017e86:	ea23 0305 	bic.w	r3, r3, r5
 8017e8a:	6013      	str	r3, [r2, #0]
 8017e8c:	e7db      	b.n	8017e46 <xTaskPriorityDisinherit+0x6a>
 8017e8e:	bf00      	nop
 8017e90:	200066c0 	.word	0x200066c0
 8017e94:	200066cc 	.word	0x200066cc
 8017e98:	2000676c 	.word	0x2000676c

08017e9c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d044      	beq.n	8017f2a <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8017ea0:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8017ea2:	b530      	push	{r4, r5, lr}
 8017ea4:	4604      	mov	r4, r0
 8017ea6:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8017ea8:	b153      	cbz	r3, 8017ec0 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017eaa:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017eac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017eae:	4281      	cmp	r1, r0
 8017eb0:	bf38      	it	cc
 8017eb2:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017eb4:	428a      	cmp	r2, r1
 8017eb6:	d001      	beq.n	8017ebc <vTaskPriorityDisinheritAfterTimeout+0x20>
 8017eb8:	2b01      	cmp	r3, #1
 8017eba:	d00c      	beq.n	8017ed6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8017ebc:	b003      	add	sp, #12
 8017ebe:	bd30      	pop	{r4, r5, pc}
 8017ec0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ec4:	b672      	cpsid	i
 8017ec6:	f383 8811 	msr	BASEPRI, r3
 8017eca:	f3bf 8f6f 	isb	sy
 8017ece:	f3bf 8f4f 	dsb	sy
 8017ed2:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8017ed4:	e7fe      	b.n	8017ed4 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8017ed6:	4b25      	ldr	r3, [pc, #148]	; (8017f6c <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	42a3      	cmp	r3, r4
 8017edc:	d026      	beq.n	8017f2c <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017ede:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8017ee0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	db02      	blt.n	8017eec <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ee6:	f1c1 0107 	rsb	r1, r1, #7
 8017eea:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017eec:	4d20      	ldr	r5, [pc, #128]	; (8017f70 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8017eee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017ef2:	6961      	ldr	r1, [r4, #20]
 8017ef4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8017ef8:	4299      	cmp	r1, r3
 8017efa:	d1df      	bne.n	8017ebc <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017efc:	1d21      	adds	r1, r4, #4
 8017efe:	4608      	mov	r0, r1
 8017f00:	9101      	str	r1, [sp, #4]
 8017f02:	f7fe fc43 	bl	801678c <uxListRemove>
 8017f06:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017f08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f0a:	b1d0      	cbz	r0, 8017f42 <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	0090      	lsls	r0, r2, #2
 8017f10:	4c18      	ldr	r4, [pc, #96]	; (8017f74 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8017f12:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8017f14:	4410      	add	r0, r2
 8017f16:	6822      	ldr	r2, [r4, #0]
 8017f18:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8017f1c:	4313      	orrs	r3, r2
 8017f1e:	6023      	str	r3, [r4, #0]
	}
 8017f20:	b003      	add	sp, #12
 8017f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8017f26:	f7fe bc09 	b.w	801673c <vListInsertEnd>
 8017f2a:	4770      	bx	lr
 8017f2c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f30:	b672      	cpsid	i
 8017f32:	f383 8811 	msr	BASEPRI, r3
 8017f36:	f3bf 8f6f 	isb	sy
 8017f3a:	f3bf 8f4f 	dsb	sy
 8017f3e:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8017f40:	e7fe      	b.n	8017f40 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017f42:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8017f46:	0090      	lsls	r0, r2, #2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	58eb      	ldr	r3, [r5, r3]
 8017f4c:	b11b      	cbz	r3, 8017f56 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8017f4e:	2301      	movs	r3, #1
 8017f50:	4c08      	ldr	r4, [pc, #32]	; (8017f74 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8017f52:	4093      	lsls	r3, r2
 8017f54:	e7de      	b.n	8017f14 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8017f56:	4c07      	ldr	r4, [pc, #28]	; (8017f74 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8017f58:	2301      	movs	r3, #1
 8017f5a:	f8d4 c000 	ldr.w	ip, [r4]
 8017f5e:	4093      	lsls	r3, r2
 8017f60:	ea2c 0c03 	bic.w	ip, ip, r3
 8017f64:	f8c4 c000 	str.w	ip, [r4]
 8017f68:	e7d4      	b.n	8017f14 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8017f6a:	bf00      	nop
 8017f6c:	200066c0 	.word	0x200066c0
 8017f70:	200066cc 	.word	0x200066cc
 8017f74:	2000676c 	.word	0x2000676c

08017f78 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8017f78:	4b04      	ldr	r3, [pc, #16]	; (8017f8c <pvTaskIncrementMutexHeldCount+0x14>)
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	b11a      	cbz	r2, 8017f86 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8017f7e:	6819      	ldr	r1, [r3, #0]
 8017f80:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8017f82:	3201      	adds	r2, #1
 8017f84:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8017f86:	6818      	ldr	r0, [r3, #0]
	}
 8017f88:	4770      	bx	lr
 8017f8a:	bf00      	nop
 8017f8c:	200066c0 	.word	0x200066c0

08017f90 <ulTaskNotifyTake>:
	{
 8017f90:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8017f92:	4c1a      	ldr	r4, [pc, #104]	; (8017ffc <ulTaskNotifyTake+0x6c>)
	{
 8017f94:	4606      	mov	r6, r0
 8017f96:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8017f98:	f000 fbbc 	bl	8018714 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017fa2:	b923      	cbnz	r3, 8017fae <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8017fa4:	6823      	ldr	r3, [r4, #0]
 8017fa6:	2101      	movs	r1, #1
 8017fa8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8017fac:	b9c5      	cbnz	r5, 8017fe0 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8017fae:	f000 fbd7 	bl	8018760 <vPortExitCritical>
		taskENTER_CRITICAL();
 8017fb2:	f000 fbaf 	bl	8018714 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8017fb6:	6823      	ldr	r3, [r4, #0]
 8017fb8:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8017fbc:	b125      	cbz	r5, 8017fc8 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017fbe:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8017fc0:	b156      	cbz	r6, 8017fd8 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017fc8:	6823      	ldr	r3, [r4, #0]
 8017fca:	2200      	movs	r2, #0
 8017fcc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8017fd0:	f000 fbc6 	bl	8018760 <vPortExitCritical>
	}
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8017fd8:	1e6a      	subs	r2, r5, #1
 8017fda:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8017fde:	e7f3      	b.n	8017fc8 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	f7ff f9ed 	bl	80173c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8017fe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017ff2:	f3bf 8f4f 	dsb	sy
 8017ff6:	f3bf 8f6f 	isb	sy
 8017ffa:	e7d8      	b.n	8017fae <ulTaskNotifyTake+0x1e>
 8017ffc:	200066c0 	.word	0x200066c0

08018000 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8018000:	b318      	cbz	r0, 801804a <vTaskNotifyGiveFromISR+0x4a>
	{
 8018002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018004:	b083      	sub	sp, #12
 8018006:	4604      	mov	r4, r0
 8018008:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801800a:	f000 fc89 	bl	8018920 <vPortValidateInterruptPriority>
	__asm volatile
 801800e:	f3ef 8611 	mrs	r6, BASEPRI
 8018012:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018016:	b672      	cpsid	i
 8018018:	f383 8811 	msr	BASEPRI, r3
 801801c:	f3bf 8f6f 	isb	sy
 8018020:	f3bf 8f4f 	dsb	sy
 8018024:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018026:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018028:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801802c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018030:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8018032:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018036:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8018038:	f103 0301 	add.w	r3, r3, #1
 801803c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018040:	d00e      	beq.n	8018060 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8018042:	f386 8811 	msr	BASEPRI, r6
	}
 8018046:	b003      	add	sp, #12
 8018048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 801804a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801804e:	b672      	cpsid	i
 8018050:	f383 8811 	msr	BASEPRI, r3
 8018054:	f3bf 8f6f 	isb	sy
 8018058:	f3bf 8f4f 	dsb	sy
 801805c:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801805e:	e7fe      	b.n	801805e <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018062:	b153      	cbz	r3, 801807a <vTaskNotifyGiveFromISR+0x7a>
 8018064:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018068:	b672      	cpsid	i
 801806a:	f383 8811 	msr	BASEPRI, r3
 801806e:	f3bf 8f6f 	isb	sy
 8018072:	f3bf 8f4f 	dsb	sy
 8018076:	b662      	cpsie	i
 8018078:	e7fe      	b.n	8018078 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801807a:	4b14      	ldr	r3, [pc, #80]	; (80180cc <vTaskNotifyGiveFromISR+0xcc>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	b18b      	cbz	r3, 80180a4 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018080:	f104 0118 	add.w	r1, r4, #24
 8018084:	4812      	ldr	r0, [pc, #72]	; (80180d0 <vTaskNotifyGiveFromISR+0xd0>)
 8018086:	f7fe fb59 	bl	801673c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801808a:	4b12      	ldr	r3, [pc, #72]	; (80180d4 <vTaskNotifyGiveFromISR+0xd4>)
 801808c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018092:	429a      	cmp	r2, r3
 8018094:	d9d5      	bls.n	8018042 <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8018096:	b10d      	cbz	r5, 801809c <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8018098:	2301      	movs	r3, #1
 801809a:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 801809c:	4b0e      	ldr	r3, [pc, #56]	; (80180d8 <vTaskNotifyGiveFromISR+0xd8>)
 801809e:	2201      	movs	r2, #1
 80180a0:	601a      	str	r2, [r3, #0]
 80180a2:	e7ce      	b.n	8018042 <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180a4:	1d21      	adds	r1, r4, #4
 80180a6:	4608      	mov	r0, r1
 80180a8:	9101      	str	r1, [sp, #4]
 80180aa:	f7fe fb6f 	bl	801678c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80180ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80180b0:	4b0a      	ldr	r3, [pc, #40]	; (80180dc <vTaskNotifyGiveFromISR+0xdc>)
 80180b2:	4087      	lsls	r7, r0
 80180b4:	4a0a      	ldr	r2, [pc, #40]	; (80180e0 <vTaskNotifyGiveFromISR+0xe0>)
 80180b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80180ba:	9901      	ldr	r1, [sp, #4]
 80180bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	4317      	orrs	r7, r2
 80180c4:	601f      	str	r7, [r3, #0]
 80180c6:	f7fe fb39 	bl	801673c <vListInsertEnd>
 80180ca:	e7de      	b.n	801808a <vTaskNotifyGiveFromISR+0x8a>
 80180cc:	20006764 	.word	0x20006764
 80180d0:	200067a0 	.word	0x200067a0
 80180d4:	200066c0 	.word	0x200066c0
 80180d8:	200067e4 	.word	0x200067e4
 80180dc:	2000676c 	.word	0x2000676c
 80180e0:	200066cc 	.word	0x200066cc

080180e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80180e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80180e6:	4c12      	ldr	r4, [pc, #72]	; (8018130 <prvCheckForValidListAndQueue+0x4c>)
{
 80180e8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80180ea:	f000 fb13 	bl	8018714 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80180ee:	6825      	ldr	r5, [r4, #0]
 80180f0:	b125      	cbz	r5, 80180fc <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80180f2:	b003      	add	sp, #12
 80180f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80180f8:	f000 bb32 	b.w	8018760 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80180fc:	4f0d      	ldr	r7, [pc, #52]	; (8018134 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80180fe:	4e0e      	ldr	r6, [pc, #56]	; (8018138 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8018100:	4638      	mov	r0, r7
 8018102:	f7fe fb0b 	bl	801671c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018106:	4630      	mov	r0, r6
 8018108:	f7fe fb08 	bl	801671c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801810c:	4a0b      	ldr	r2, [pc, #44]	; (801813c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801810e:	9500      	str	r5, [sp, #0]
 8018110:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8018112:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018114:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8018116:	4a0a      	ldr	r2, [pc, #40]	; (8018140 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018118:	4b0a      	ldr	r3, [pc, #40]	; (8018144 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 801811a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801811c:	4a0a      	ldr	r2, [pc, #40]	; (8018148 <prvCheckForValidListAndQueue+0x64>)
 801811e:	f7fe fc19 	bl	8016954 <xQueueGenericCreateStatic>
 8018122:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8018124:	2800      	cmp	r0, #0
 8018126:	d0e4      	beq.n	80180f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018128:	4908      	ldr	r1, [pc, #32]	; (801814c <prvCheckForValidListAndQueue+0x68>)
 801812a:	f7ff f881 	bl	8017230 <vQueueAddToRegistry>
 801812e:	e7e0      	b.n	80180f2 <prvCheckForValidListAndQueue+0xe>
 8018130:	20006904 	.word	0x20006904
 8018134:	20006890 	.word	0x20006890
 8018138:	200068a4 	.word	0x200068a4
 801813c:	200067e8 	.word	0x200067e8
 8018140:	200067ec 	.word	0x200067ec
 8018144:	200068bc 	.word	0x200068bc
 8018148:	200067f0 	.word	0x200067f0
 801814c:	0802e244 	.word	0x0802e244

08018150 <xTimerCreateTimerTask>:
{
 8018150:	b530      	push	{r4, r5, lr}
 8018152:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8018154:	f7ff ffc6 	bl	80180e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8018158:	4b13      	ldr	r3, [pc, #76]	; (80181a8 <xTimerCreateTimerTask+0x58>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	b1cb      	cbz	r3, 8018192 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801815e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018160:	aa07      	add	r2, sp, #28
 8018162:	a906      	add	r1, sp, #24
 8018164:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018166:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018168:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801816c:	f7e9 f88c 	bl	8001288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018170:	4623      	mov	r3, r4
 8018172:	9a07      	ldr	r2, [sp, #28]
 8018174:	9500      	str	r5, [sp, #0]
 8018176:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801817a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801817e:	490b      	ldr	r1, [pc, #44]	; (80181ac <xTimerCreateTimerTask+0x5c>)
 8018180:	480b      	ldr	r0, [pc, #44]	; (80181b0 <xTimerCreateTimerTask+0x60>)
 8018182:	f7ff fa61 	bl	8017648 <xTaskCreateStatic>
 8018186:	4b0b      	ldr	r3, [pc, #44]	; (80181b4 <xTimerCreateTimerTask+0x64>)
 8018188:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801818a:	b110      	cbz	r0, 8018192 <xTimerCreateTimerTask+0x42>
}
 801818c:	2001      	movs	r0, #1
 801818e:	b009      	add	sp, #36	; 0x24
 8018190:	bd30      	pop	{r4, r5, pc}
 8018192:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018196:	b672      	cpsid	i
 8018198:	f383 8811 	msr	BASEPRI, r3
 801819c:	f3bf 8f6f 	isb	sy
 80181a0:	f3bf 8f4f 	dsb	sy
 80181a4:	b662      	cpsie	i
	configASSERT( xReturn );
 80181a6:	e7fe      	b.n	80181a6 <xTimerCreateTimerTask+0x56>
 80181a8:	20006904 	.word	0x20006904
 80181ac:	0802e24c 	.word	0x0802e24c
 80181b0:	080183b1 	.word	0x080183b1
 80181b4:	20006908 	.word	0x20006908

080181b8 <xTimerCreate>:
	{
 80181b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181bc:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80181be:	2028      	movs	r0, #40	; 0x28
	{
 80181c0:	4688      	mov	r8, r1
 80181c2:	4615      	mov	r5, r2
 80181c4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80181c6:	f000 fc0f 	bl	80189e8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80181ca:	4604      	mov	r4, r0
 80181cc:	b1b0      	cbz	r0, 80181fc <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 80181ce:	2300      	movs	r3, #0
 80181d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80181d4:	f1b8 0f00 	cmp.w	r8, #0
 80181d8:	d013      	beq.n	8018202 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 80181da:	f7ff ff83 	bl	80180e4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80181de:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80181e0:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80181e2:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80181e4:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 80181e6:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80181ea:	f7fe faa3 	bl	8016734 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80181ee:	b12d      	cbz	r5, 80181fc <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80181f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80181f4:	f043 0304 	orr.w	r3, r3, #4
 80181f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 80181fc:	4620      	mov	r0, r4
 80181fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018202:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018206:	b672      	cpsid	i
 8018208:	f383 8811 	msr	BASEPRI, r3
 801820c:	f3bf 8f6f 	isb	sy
 8018210:	f3bf 8f4f 	dsb	sy
 8018214:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8018216:	e7fe      	b.n	8018216 <xTimerCreate+0x5e>

08018218 <xTimerCreateStatic>:
	{
 8018218:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 801821a:	2428      	movs	r4, #40	; 0x28
	{
 801821c:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 801821e:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8018220:	9d05      	ldr	r5, [sp, #20]
 8018222:	2d28      	cmp	r5, #40	; 0x28
 8018224:	d00a      	beq.n	801823c <xTimerCreateStatic+0x24>
 8018226:	f04f 0330 	mov.w	r3, #48	; 0x30
 801822a:	b672      	cpsid	i
 801822c:	f383 8811 	msr	BASEPRI, r3
 8018230:	f3bf 8f6f 	isb	sy
 8018234:	f3bf 8f4f 	dsb	sy
 8018238:	b662      	cpsie	i
 801823a:	e7fe      	b.n	801823a <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801823c:	4604      	mov	r4, r0
 801823e:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8018240:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018242:	b318      	cbz	r0, 801828c <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018244:	2002      	movs	r0, #2
 8018246:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018248:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801824c:	b349      	cbz	r1, 80182a2 <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 801824e:	9101      	str	r1, [sp, #4]
 8018250:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018254:	f7ff ff46 	bl	80180e4 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801825a:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 801825c:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 801825e:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8018260:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018262:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8018264:	9b03      	ldr	r3, [sp, #12]
 8018266:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8018268:	4613      	mov	r3, r2
 801826a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801826c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801826e:	f7fe fa61 	bl	8016734 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8018272:	9a02      	ldr	r2, [sp, #8]
 8018274:	b13a      	cbz	r2, 8018286 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8018276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801827a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801827e:	f043 0304 	orr.w	r3, r3, #4
 8018282:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8018286:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018288:	b007      	add	sp, #28
 801828a:	bd30      	pop	{r4, r5, pc}
 801828c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018290:	b672      	cpsid	i
 8018292:	f383 8811 	msr	BASEPRI, r3
 8018296:	f3bf 8f6f 	isb	sy
 801829a:	f3bf 8f4f 	dsb	sy
 801829e:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 80182a0:	e7fe      	b.n	80182a0 <xTimerCreateStatic+0x88>
 80182a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80182a6:	b672      	cpsid	i
 80182a8:	f383 8811 	msr	BASEPRI, r3
 80182ac:	f3bf 8f6f 	isb	sy
 80182b0:	f3bf 8f4f 	dsb	sy
 80182b4:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80182b6:	e7fe      	b.n	80182b6 <xTimerCreateStatic+0x9e>

080182b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80182b8:	b1c8      	cbz	r0, 80182ee <xTimerGenericCommand+0x36>
{
 80182ba:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80182bc:	4d19      	ldr	r5, [pc, #100]	; (8018324 <xTimerGenericCommand+0x6c>)
{
 80182be:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80182c0:	682c      	ldr	r4, [r5, #0]
 80182c2:	b18c      	cbz	r4, 80182e8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80182c4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80182c6:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80182c8:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80182cc:	dc1a      	bgt.n	8018304 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80182ce:	f7ff fd1d 	bl	8017d0c <xTaskGetSchedulerState>
 80182d2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80182d4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80182d8:	d01d      	beq.n	8018316 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80182da:	4669      	mov	r1, sp
 80182dc:	461a      	mov	r2, r3
 80182de:	6828      	ldr	r0, [r5, #0]
 80182e0:	f7fe fbc2 	bl	8016a68 <xQueueGenericSend>
}
 80182e4:	b005      	add	sp, #20
 80182e6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80182e8:	4620      	mov	r0, r4
}
 80182ea:	b005      	add	sp, #20
 80182ec:	bd30      	pop	{r4, r5, pc}
 80182ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80182f2:	b672      	cpsid	i
 80182f4:	f383 8811 	msr	BASEPRI, r3
 80182f8:	f3bf 8f6f 	isb	sy
 80182fc:	f3bf 8f4f 	dsb	sy
 8018300:	b662      	cpsie	i
	configASSERT( xTimer );
 8018302:	e7fe      	b.n	8018302 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018304:	469c      	mov	ip, r3
 8018306:	4669      	mov	r1, sp
 8018308:	2300      	movs	r3, #0
 801830a:	4620      	mov	r0, r4
 801830c:	4662      	mov	r2, ip
 801830e:	f7fe fcab 	bl	8016c68 <xQueueGenericSendFromISR>
}
 8018312:	b005      	add	sp, #20
 8018314:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018316:	9a08      	ldr	r2, [sp, #32]
 8018318:	4669      	mov	r1, sp
 801831a:	6828      	ldr	r0, [r5, #0]
 801831c:	f7fe fba4 	bl	8016a68 <xQueueGenericSend>
 8018320:	e7e3      	b.n	80182ea <xTimerGenericCommand+0x32>
 8018322:	bf00      	nop
 8018324:	20006904 	.word	0x20006904

08018328 <prvSwitchTimerLists>:
{
 8018328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801832c:	4e1e      	ldr	r6, [pc, #120]	; (80183a8 <prvSwitchTimerLists+0x80>)
 801832e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018330:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018334:	e00d      	b.n	8018352 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018336:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018338:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801833a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801833c:	1d25      	adds	r5, r4, #4
 801833e:	4628      	mov	r0, r5
 8018340:	f7fe fa24 	bl	801678c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018344:	6a23      	ldr	r3, [r4, #32]
 8018346:	4620      	mov	r0, r4
 8018348:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801834a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801834e:	075b      	lsls	r3, r3, #29
 8018350:	d40a      	bmi.n	8018368 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018352:	6833      	ldr	r3, [r6, #0]
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	2a00      	cmp	r2, #0
 8018358:	d1ed      	bne.n	8018336 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 801835a:	4a14      	ldr	r2, [pc, #80]	; (80183ac <prvSwitchTimerLists+0x84>)
 801835c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801835e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8018360:	6031      	str	r1, [r6, #0]
}
 8018362:	b002      	add	sp, #8
 8018364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018368:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801836a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801836c:	2300      	movs	r3, #0
 801836e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018370:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018372:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8018374:	42af      	cmp	r7, r5
 8018376:	d205      	bcs.n	8018384 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018378:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801837a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801837c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801837e:	f7fe f9ed 	bl	801675c <vListInsert>
 8018382:	e7e6      	b.n	8018352 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018384:	4619      	mov	r1, r3
 8018386:	f8cd 8000 	str.w	r8, [sp]
 801838a:	f7ff ff95 	bl	80182b8 <xTimerGenericCommand>
				configASSERT( xResult );
 801838e:	2800      	cmp	r0, #0
 8018390:	d1df      	bne.n	8018352 <prvSwitchTimerLists+0x2a>
 8018392:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018396:	b672      	cpsid	i
 8018398:	f383 8811 	msr	BASEPRI, r3
 801839c:	f3bf 8f6f 	isb	sy
 80183a0:	f3bf 8f4f 	dsb	sy
 80183a4:	b662      	cpsie	i
 80183a6:	e7fe      	b.n	80183a6 <prvSwitchTimerLists+0x7e>
 80183a8:	200067e8 	.word	0x200067e8
 80183ac:	200067ec 	.word	0x200067ec

080183b0 <prvTimerTask>:
{
 80183b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b4:	4e9a      	ldr	r6, [pc, #616]	; (8018620 <prvTimerTask+0x270>)
 80183b6:	b087      	sub	sp, #28
 80183b8:	4d9a      	ldr	r5, [pc, #616]	; (8018624 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 80183ba:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80183be:	4c9a      	ldr	r4, [pc, #616]	; (8018628 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80183c0:	6833      	ldr	r3, [r6, #0]
 80183c2:	681f      	ldr	r7, [r3, #0]
 80183c4:	2f00      	cmp	r7, #0
 80183c6:	f000 80ac 	beq.w	8018522 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80183ca:	68db      	ldr	r3, [r3, #12]
 80183cc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80183ce:	f7ff fa01 	bl	80177d4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80183d2:	f7ff fa07 	bl	80177e4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80183d6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80183d8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80183da:	4290      	cmp	r0, r2
 80183dc:	f0c0 80a9 	bcc.w	8018532 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80183e0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80183e2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80183e4:	f200 80ca 	bhi.w	801857c <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 80183e8:	f7ff fb50 	bl	8017a8c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183ec:	6832      	ldr	r2, [r6, #0]
 80183ee:	68d2      	ldr	r2, [r2, #12]
 80183f0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80183f4:	f10b 0804 	add.w	r8, fp, #4
 80183f8:	4640      	mov	r0, r8
 80183fa:	f7fe f9c7 	bl	801678c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80183fe:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8018402:	0743      	lsls	r3, r0, #29
 8018404:	f100 80ca 	bmi.w	801859c <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018408:	f020 0001 	bic.w	r0, r0, #1
 801840c:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018410:	f8db 3020 	ldr.w	r3, [fp, #32]
 8018414:	4658      	mov	r0, fp
 8018416:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018418:	2200      	movs	r2, #0
 801841a:	a902      	add	r1, sp, #8
 801841c:	6820      	ldr	r0, [r4, #0]
 801841e:	f7fe fcf5 	bl	8016e0c <xQueueReceive>
 8018422:	2800      	cmp	r0, #0
 8018424:	d0cc      	beq.n	80183c0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018426:	9b02      	ldr	r3, [sp, #8]
 8018428:	2b00      	cmp	r3, #0
 801842a:	db71      	blt.n	8018510 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801842c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	b113      	cbz	r3, 8018438 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018432:	1d38      	adds	r0, r7, #4
 8018434:	f7fe f9aa 	bl	801678c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8018438:	f7ff f9d4 	bl	80177e4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801843c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801843e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8018440:	4298      	cmp	r0, r3
 8018442:	d37d      	bcc.n	8018540 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8018444:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8018446:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 801844a:	2b09      	cmp	r3, #9
 801844c:	d8e4      	bhi.n	8018418 <prvTimerTask+0x68>
 801844e:	e8df f003 	tbb	[pc, r3]
 8018452:	0505      	.short	0x0505
 8018454:	56394f05 	.word	0x56394f05
 8018458:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801845c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018460:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018462:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018466:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018468:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801846a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801846e:	185a      	adds	r2, r3, r1
 8018470:	bf2c      	ite	cs
 8018472:	2001      	movcs	r0, #1
 8018474:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8018476:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018478:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 801847a:	f200 8081 	bhi.w	8018580 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801847e:	eba8 0303 	sub.w	r3, r8, r3
 8018482:	4299      	cmp	r1, r3
 8018484:	f200 80b5 	bhi.w	80185f2 <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018488:	6a3b      	ldr	r3, [r7, #32]
 801848a:	4638      	mov	r0, r7
 801848c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801848e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018492:	0759      	lsls	r1, r3, #29
 8018494:	d5c0      	bpl.n	8018418 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018496:	2200      	movs	r2, #0
 8018498:	69bb      	ldr	r3, [r7, #24]
 801849a:	4638      	mov	r0, r7
 801849c:	9200      	str	r2, [sp, #0]
 801849e:	9a03      	ldr	r2, [sp, #12]
 80184a0:	441a      	add	r2, r3
 80184a2:	2300      	movs	r3, #0
 80184a4:	4619      	mov	r1, r3
 80184a6:	f7ff ff07 	bl	80182b8 <xTimerGenericCommand>
							configASSERT( xResult );
 80184aa:	2800      	cmp	r0, #0
 80184ac:	d1b4      	bne.n	8018418 <prvTimerTask+0x68>
 80184ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80184b2:	b672      	cpsid	i
 80184b4:	f383 8811 	msr	BASEPRI, r3
 80184b8:	f3bf 8f6f 	isb	sy
 80184bc:	f3bf 8f4f 	dsb	sy
 80184c0:	b662      	cpsie	i
 80184c2:	e7fe      	b.n	80184c2 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80184c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80184c8:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80184ca:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80184ce:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80184d0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f000 8098 	beq.w	801860a <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80184da:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80184dc:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80184de:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80184e0:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80184e2:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80184e4:	d856      	bhi.n	8018594 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80184e6:	4b51      	ldr	r3, [pc, #324]	; (801862c <prvTimerTask+0x27c>)
 80184e8:	6818      	ldr	r0, [r3, #0]
 80184ea:	f7fe f937 	bl	801675c <vListInsert>
	return xProcessTimerNow;
 80184ee:	e793      	b.n	8018418 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80184f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184f4:	f023 0301 	bic.w	r3, r3, #1
 80184f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 80184fc:	e78c      	b.n	8018418 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80184fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018502:	079a      	lsls	r2, r3, #30
 8018504:	d56c      	bpl.n	80185e0 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018506:	f023 0301 	bic.w	r3, r3, #1
 801850a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801850e:	e783      	b.n	8018418 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018510:	9b03      	ldr	r3, [sp, #12]
 8018512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018516:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018518:	9b02      	ldr	r3, [sp, #8]
 801851a:	2b00      	cmp	r3, #0
 801851c:	f6ff af7c 	blt.w	8018418 <prvTimerTask+0x68>
 8018520:	e784      	b.n	801842c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8018522:	f7ff f957 	bl	80177d4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8018526:	f7ff f95d 	bl	80177e4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801852a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801852c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801852e:	4282      	cmp	r2, r0
 8018530:	d909      	bls.n	8018546 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 8018532:	f7ff fef9 	bl	8018328 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8018536:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 801853a:	f7ff faa7 	bl	8017a8c <xTaskResumeAll>
 801853e:	e76b      	b.n	8018418 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8018540:	f7ff fef2 	bl	8018328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018544:	e77e      	b.n	8018444 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018546:	4b39      	ldr	r3, [pc, #228]	; (801862c <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8018548:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801854c:	681a      	ldr	r2, [r3, #0]
 801854e:	6812      	ldr	r2, [r2, #0]
 8018550:	fab2 f282 	clz	r2, r2
 8018554:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018556:	eba7 010a 	sub.w	r1, r7, sl
 801855a:	6820      	ldr	r0, [r4, #0]
 801855c:	f7fe fe7e 	bl	801725c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018560:	f7ff fa94 	bl	8017a8c <xTaskResumeAll>
 8018564:	2800      	cmp	r0, #0
 8018566:	f47f af57 	bne.w	8018418 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 801856a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801856e:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8018572:	f3bf 8f4f 	dsb	sy
 8018576:	f3bf 8f6f 	isb	sy
 801857a:	e74d      	b.n	8018418 <prvTimerTask+0x68>
 801857c:	2200      	movs	r2, #0
 801857e:	e7ea      	b.n	8018556 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018580:	4543      	cmp	r3, r8
 8018582:	d902      	bls.n	801858a <prvTimerTask+0x1da>
 8018584:	2800      	cmp	r0, #0
 8018586:	f43f af7f 	beq.w	8018488 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801858a:	1d39      	adds	r1, r7, #4
 801858c:	6830      	ldr	r0, [r6, #0]
 801858e:	f7fe f8e5 	bl	801675c <vListInsert>
	return xProcessTimerNow;
 8018592:	e741      	b.n	8018418 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018594:	6830      	ldr	r0, [r6, #0]
 8018596:	f7fe f8e1 	bl	801675c <vListInsert>
 801859a:	e73d      	b.n	8018418 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801859c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80185a0:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80185a4:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80185a6:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80185a8:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80185ac:	d31c      	bcc.n	80185e8 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185ae:	ebaa 0307 	sub.w	r3, sl, r7
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d823      	bhi.n	80185fe <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80185b6:	2300      	movs	r3, #0
 80185b8:	463a      	mov	r2, r7
 80185ba:	4658      	mov	r0, fp
 80185bc:	4619      	mov	r1, r3
 80185be:	9300      	str	r3, [sp, #0]
 80185c0:	f7ff fe7a 	bl	80182b8 <xTimerGenericCommand>
			configASSERT( xResult );
 80185c4:	2800      	cmp	r0, #0
 80185c6:	f47f af23 	bne.w	8018410 <prvTimerTask+0x60>
 80185ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80185ce:	b672      	cpsid	i
 80185d0:	f383 8811 	msr	BASEPRI, r3
 80185d4:	f3bf 8f6f 	isb	sy
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	b662      	cpsie	i
 80185de:	e7fe      	b.n	80185de <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 80185e0:	4638      	mov	r0, r7
 80185e2:	f000 fa9d 	bl	8018b20 <vPortFree>
 80185e6:	e717      	b.n	8018418 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80185e8:	4641      	mov	r1, r8
 80185ea:	6830      	ldr	r0, [r6, #0]
 80185ec:	f7fe f8b6 	bl	801675c <vListInsert>
	return xProcessTimerNow;
 80185f0:	e70e      	b.n	8018410 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80185f2:	4b0e      	ldr	r3, [pc, #56]	; (801862c <prvTimerTask+0x27c>)
 80185f4:	1d39      	adds	r1, r7, #4
 80185f6:	6818      	ldr	r0, [r3, #0]
 80185f8:	f7fe f8b0 	bl	801675c <vListInsert>
	return xProcessTimerNow;
 80185fc:	e70c      	b.n	8018418 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80185fe:	4b0b      	ldr	r3, [pc, #44]	; (801862c <prvTimerTask+0x27c>)
 8018600:	4641      	mov	r1, r8
 8018602:	6818      	ldr	r0, [r3, #0]
 8018604:	f7fe f8aa 	bl	801675c <vListInsert>
	return xProcessTimerNow;
 8018608:	e702      	b.n	8018410 <prvTimerTask+0x60>
 801860a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801860e:	b672      	cpsid	i
 8018610:	f383 8811 	msr	BASEPRI, r3
 8018614:	f3bf 8f6f 	isb	sy
 8018618:	f3bf 8f4f 	dsb	sy
 801861c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801861e:	e7fe      	b.n	801861e <prvTimerTask+0x26e>
 8018620:	200067e8 	.word	0x200067e8
 8018624:	200068b8 	.word	0x200068b8
 8018628:	20006904 	.word	0x20006904
 801862c:	200067ec 	.word	0x200067ec

08018630 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018630:	4808      	ldr	r0, [pc, #32]	; (8018654 <prvPortStartFirstTask+0x24>)
 8018632:	6800      	ldr	r0, [r0, #0]
 8018634:	6800      	ldr	r0, [r0, #0]
 8018636:	f380 8808 	msr	MSP, r0
 801863a:	f04f 0000 	mov.w	r0, #0
 801863e:	f380 8814 	msr	CONTROL, r0
 8018642:	b662      	cpsie	i
 8018644:	b661      	cpsie	f
 8018646:	f3bf 8f4f 	dsb	sy
 801864a:	f3bf 8f6f 	isb	sy
 801864e:	df00      	svc	0
 8018650:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018652:	0000      	.short	0x0000
 8018654:	e000ed08 	.word	0xe000ed08

08018658 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018658:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018668 <vPortEnableVFP+0x10>
 801865c:	6801      	ldr	r1, [r0, #0]
 801865e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018662:	6001      	str	r1, [r0, #0]
 8018664:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018666:	0000      	.short	0x0000
 8018668:	e000ed88 	.word	0xe000ed88

0801866c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 801866c:	4b10      	ldr	r3, [pc, #64]	; (80186b0 <prvTaskExitError+0x44>)
{
 801866e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8018670:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8018672:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8018674:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8018676:	3301      	adds	r3, #1
 8018678:	d00a      	beq.n	8018690 <prvTaskExitError+0x24>
 801867a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801867e:	b672      	cpsid	i
 8018680:	f383 8811 	msr	BASEPRI, r3
 8018684:	f3bf 8f6f 	isb	sy
 8018688:	f3bf 8f4f 	dsb	sy
 801868c:	b662      	cpsie	i
 801868e:	e7fe      	b.n	801868e <prvTaskExitError+0x22>
 8018690:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018694:	b672      	cpsid	i
 8018696:	f383 8811 	msr	BASEPRI, r3
 801869a:	f3bf 8f6f 	isb	sy
 801869e:	f3bf 8f4f 	dsb	sy
 80186a2:	b662      	cpsie	i
	while( ulDummy == 0 )
 80186a4:	9b01      	ldr	r3, [sp, #4]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d0fc      	beq.n	80186a4 <prvTaskExitError+0x38>
}
 80186aa:	b002      	add	sp, #8
 80186ac:	4770      	bx	lr
 80186ae:	bf00      	nop
 80186b0:	20000424 	.word	0x20000424

080186b4 <pxPortInitialiseStack>:
{
 80186b4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80186b6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80186ba:	4809      	ldr	r0, [pc, #36]	; (80186e0 <pxPortInitialiseStack+0x2c>)
{
 80186bc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80186be:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80186c2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80186c6:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80186ca:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80186ce:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80186d2:	f06f 0102 	mvn.w	r1, #2
}
 80186d6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80186da:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80186de:	4770      	bx	lr
 80186e0:	0801866d 	.word	0x0801866d
 80186e4:	ffffffff 	.word	0xffffffff
 80186e8:	ffffffff 	.word	0xffffffff
 80186ec:	ffffffff 	.word	0xffffffff

080186f0 <SVC_Handler>:
	__asm volatile (
 80186f0:	4b07      	ldr	r3, [pc, #28]	; (8018710 <pxCurrentTCBConst2>)
 80186f2:	6819      	ldr	r1, [r3, #0]
 80186f4:	6808      	ldr	r0, [r1, #0]
 80186f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fa:	f380 8809 	msr	PSP, r0
 80186fe:	f3bf 8f6f 	isb	sy
 8018702:	f04f 0000 	mov.w	r0, #0
 8018706:	f380 8811 	msr	BASEPRI, r0
 801870a:	4770      	bx	lr
 801870c:	f3af 8000 	nop.w

08018710 <pxCurrentTCBConst2>:
 8018710:	200066c0 	.word	0x200066c0

08018714 <vPortEnterCritical>:
 8018714:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018718:	b672      	cpsid	i
 801871a:	f383 8811 	msr	BASEPRI, r3
 801871e:	f3bf 8f6f 	isb	sy
 8018722:	f3bf 8f4f 	dsb	sy
 8018726:	b662      	cpsie	i
	uxCriticalNesting++;
 8018728:	4a0c      	ldr	r2, [pc, #48]	; (801875c <vPortEnterCritical+0x48>)
 801872a:	6813      	ldr	r3, [r2, #0]
 801872c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801872e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8018730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018732:	d000      	beq.n	8018736 <vPortEnterCritical+0x22>
}
 8018734:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801873a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801873e:	b2db      	uxtb	r3, r3
 8018740:	2b00      	cmp	r3, #0
 8018742:	d0f7      	beq.n	8018734 <vPortEnterCritical+0x20>
 8018744:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018748:	b672      	cpsid	i
 801874a:	f383 8811 	msr	BASEPRI, r3
 801874e:	f3bf 8f6f 	isb	sy
 8018752:	f3bf 8f4f 	dsb	sy
 8018756:	b662      	cpsie	i
 8018758:	e7fe      	b.n	8018758 <vPortEnterCritical+0x44>
 801875a:	bf00      	nop
 801875c:	20000424 	.word	0x20000424

08018760 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018760:	4a09      	ldr	r2, [pc, #36]	; (8018788 <vPortExitCritical+0x28>)
 8018762:	6813      	ldr	r3, [r2, #0]
 8018764:	b953      	cbnz	r3, 801877c <vPortExitCritical+0x1c>
 8018766:	f04f 0330 	mov.w	r3, #48	; 0x30
 801876a:	b672      	cpsid	i
 801876c:	f383 8811 	msr	BASEPRI, r3
 8018770:	f3bf 8f6f 	isb	sy
 8018774:	f3bf 8f4f 	dsb	sy
 8018778:	b662      	cpsie	i
 801877a:	e7fe      	b.n	801877a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801877c:	3b01      	subs	r3, #1
 801877e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018780:	b90b      	cbnz	r3, 8018786 <vPortExitCritical+0x26>
	__asm volatile
 8018782:	f383 8811 	msr	BASEPRI, r3
}
 8018786:	4770      	bx	lr
 8018788:	20000424 	.word	0x20000424
 801878c:	ffffffff 	.word	0xffffffff

08018790 <PendSV_Handler>:
	__asm volatile
 8018790:	f3ef 8009 	mrs	r0, PSP
 8018794:	f3bf 8f6f 	isb	sy
 8018798:	4b15      	ldr	r3, [pc, #84]	; (80187f0 <pxCurrentTCBConst>)
 801879a:	681a      	ldr	r2, [r3, #0]
 801879c:	f01e 0f10 	tst.w	lr, #16
 80187a0:	bf08      	it	eq
 80187a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80187a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187aa:	6010      	str	r0, [r2, #0]
 80187ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80187b0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80187b4:	b672      	cpsid	i
 80187b6:	f380 8811 	msr	BASEPRI, r0
 80187ba:	f3bf 8f4f 	dsb	sy
 80187be:	f3bf 8f6f 	isb	sy
 80187c2:	b662      	cpsie	i
 80187c4:	f7ff f9a8 	bl	8017b18 <vTaskSwitchContext>
 80187c8:	f04f 0000 	mov.w	r0, #0
 80187cc:	f380 8811 	msr	BASEPRI, r0
 80187d0:	bc09      	pop	{r0, r3}
 80187d2:	6819      	ldr	r1, [r3, #0]
 80187d4:	6808      	ldr	r0, [r1, #0]
 80187d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187da:	f01e 0f10 	tst.w	lr, #16
 80187de:	bf08      	it	eq
 80187e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80187e4:	f380 8809 	msr	PSP, r0
 80187e8:	f3bf 8f6f 	isb	sy
 80187ec:	4770      	bx	lr
 80187ee:	bf00      	nop

080187f0 <pxCurrentTCBConst>:
 80187f0:	200066c0 	.word	0x200066c0

080187f4 <SysTick_Handler>:
{
 80187f4:	b508      	push	{r3, lr}
	__asm volatile
 80187f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80187fa:	b672      	cpsid	i
 80187fc:	f383 8811 	msr	BASEPRI, r3
 8018800:	f3bf 8f6f 	isb	sy
 8018804:	f3bf 8f4f 	dsb	sy
 8018808:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801880a:	f7fe fff9 	bl	8017800 <xTaskIncrementTick>
 801880e:	b128      	cbz	r0, 801881c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018810:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018818:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801881c:	2300      	movs	r3, #0
 801881e:	f383 8811 	msr	BASEPRI, r3
}
 8018822:	bd08      	pop	{r3, pc}

08018824 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018824:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018828:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801882a:	4b06      	ldr	r3, [pc, #24]	; (8018844 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801882c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801882e:	4806      	ldr	r0, [pc, #24]	; (8018848 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018830:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018832:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	fba0 0303 	umull	r0, r3, r0, r3
 801883a:	099b      	lsrs	r3, r3, #6
 801883c:	3b01      	subs	r3, #1
 801883e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018840:	6111      	str	r1, [r2, #16]
}
 8018842:	4770      	bx	lr
 8018844:	20000298 	.word	0x20000298
 8018848:	10624dd3 	.word	0x10624dd3

0801884c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801884c:	4b30      	ldr	r3, [pc, #192]	; (8018910 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801884e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018852:	4830      	ldr	r0, [pc, #192]	; (8018914 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018854:	4930      	ldr	r1, [pc, #192]	; (8018918 <xPortStartScheduler+0xcc>)
{
 8018856:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018858:	781a      	ldrb	r2, [r3, #0]
{
 801885a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801885c:	b2d2      	uxtb	r2, r2
 801885e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018860:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018862:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018866:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018868:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801886a:	b2db      	uxtb	r3, r3
 801886c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018870:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018874:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018878:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801887c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801887e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018880:	d50f      	bpl.n	80188a2 <xPortStartScheduler+0x56>
 8018882:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018884:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018888:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801888a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801888c:	005b      	lsls	r3, r3, #1
 801888e:	b2db      	uxtb	r3, r3
 8018890:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018894:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018898:	061b      	lsls	r3, r3, #24
 801889a:	d4f3      	bmi.n	8018884 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801889c:	2903      	cmp	r1, #3
 801889e:	d00b      	beq.n	80188b8 <xPortStartScheduler+0x6c>
 80188a0:	6001      	str	r1, [r0, #0]
	__asm volatile
 80188a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80188a6:	b672      	cpsid	i
 80188a8:	f383 8811 	msr	BASEPRI, r3
 80188ac:	f3bf 8f6f 	isb	sy
 80188b0:	f3bf 8f4f 	dsb	sy
 80188b4:	b662      	cpsie	i
 80188b6:	e7fe      	b.n	80188b6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80188b8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80188ba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80188be:	4a14      	ldr	r2, [pc, #80]	; (8018910 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80188c0:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80188c4:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80188c6:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80188c8:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80188ca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80188cc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80188d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80188d4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80188d8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80188dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80188e0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80188e4:	f7ff ff9e 	bl	8018824 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80188e8:	4b0c      	ldr	r3, [pc, #48]	; (801891c <xPortStartScheduler+0xd0>)
 80188ea:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80188ec:	f7ff feb4 	bl	8018658 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80188f0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80188f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80188f8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80188fc:	f7ff fe98 	bl	8018630 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018900:	f7ff f90a 	bl	8017b18 <vTaskSwitchContext>
}
 8018904:	4628      	mov	r0, r5
	prvTaskExitError();
 8018906:	f7ff feb1 	bl	801866c <prvTaskExitError>
}
 801890a:	b003      	add	sp, #12
 801890c:	bd30      	pop	{r4, r5, pc}
 801890e:	bf00      	nop
 8018910:	e000e400 	.word	0xe000e400
 8018914:	20006910 	.word	0x20006910
 8018918:	2000690c 	.word	0x2000690c
 801891c:	20000424 	.word	0x20000424

08018920 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018920:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018924:	2b0f      	cmp	r3, #15
 8018926:	d910      	bls.n	801894a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018928:	4913      	ldr	r1, [pc, #76]	; (8018978 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801892a:	4a14      	ldr	r2, [pc, #80]	; (801897c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801892c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801892e:	7812      	ldrb	r2, [r2, #0]
 8018930:	429a      	cmp	r2, r3
 8018932:	d90a      	bls.n	801894a <vPortValidateInterruptPriority+0x2a>
 8018934:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018938:	b672      	cpsid	i
 801893a:	f383 8811 	msr	BASEPRI, r3
 801893e:	f3bf 8f6f 	isb	sy
 8018942:	f3bf 8f4f 	dsb	sy
 8018946:	b662      	cpsie	i
 8018948:	e7fe      	b.n	8018948 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801894a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801894e:	4a0c      	ldr	r2, [pc, #48]	; (8018980 <vPortValidateInterruptPriority+0x60>)
 8018950:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8018954:	6812      	ldr	r2, [r2, #0]
 8018956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801895a:	4293      	cmp	r3, r2
 801895c:	d90a      	bls.n	8018974 <vPortValidateInterruptPriority+0x54>
 801895e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018962:	b672      	cpsid	i
 8018964:	f383 8811 	msr	BASEPRI, r3
 8018968:	f3bf 8f6f 	isb	sy
 801896c:	f3bf 8f4f 	dsb	sy
 8018970:	b662      	cpsie	i
 8018972:	e7fe      	b.n	8018972 <vPortValidateInterruptPriority+0x52>
	}
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop
 8018978:	e000e3f0 	.word	0xe000e3f0
 801897c:	2000690c 	.word	0x2000690c
 8018980:	20006910 	.word	0x20006910

08018984 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018984:	4b16      	ldr	r3, [pc, #88]	; (80189e0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8018986:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018988:	461a      	mov	r2, r3
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	4283      	cmp	r3, r0
 801898e:	d3fb      	bcc.n	8018988 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018990:	6851      	ldr	r1, [r2, #4]
 8018992:	eb02 0c01 	add.w	ip, r2, r1
 8018996:	4560      	cmp	r0, ip
 8018998:	d00b      	beq.n	80189b2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801899a:	6841      	ldr	r1, [r0, #4]
 801899c:	eb00 0c01 	add.w	ip, r0, r1
 80189a0:	4563      	cmp	r3, ip
 80189a2:	d00e      	beq.n	80189c2 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80189a4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80189a6:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80189a8:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80189ac:	bf18      	it	ne
 80189ae:	6010      	strne	r0, [r2, #0]
}
 80189b0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80189b2:	6844      	ldr	r4, [r0, #4]
 80189b4:	4610      	mov	r0, r2
 80189b6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80189b8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80189bc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80189be:	4563      	cmp	r3, ip
 80189c0:	d1f0      	bne.n	80189a4 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80189c2:	4c08      	ldr	r4, [pc, #32]	; (80189e4 <prvInsertBlockIntoFreeList+0x60>)
 80189c4:	6824      	ldr	r4, [r4, #0]
 80189c6:	42a3      	cmp	r3, r4
 80189c8:	d0ec      	beq.n	80189a4 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 80189ca:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80189cc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80189d0:	4421      	add	r1, r4
}
 80189d2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80189d6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80189da:	bf18      	it	ne
 80189dc:	6010      	strne	r0, [r2, #0]
}
 80189de:	4770      	bx	lr
 80189e0:	2001e924 	.word	0x2001e924
 80189e4:	20006914 	.word	0x20006914

080189e8 <pvPortMalloc>:
{
 80189e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189ec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80189ee:	f7fe fef1 	bl	80177d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80189f2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8018b1c <pvPortMalloc+0x134>
 80189f6:	f8dc 3000 	ldr.w	r3, [ip]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d05d      	beq.n	8018aba <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80189fe:	4b42      	ldr	r3, [pc, #264]	; (8018b08 <pvPortMalloc+0x120>)
 8018a00:	681d      	ldr	r5, [r3, #0]
 8018a02:	422c      	tst	r4, r5
 8018a04:	d130      	bne.n	8018a68 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8018a06:	b37c      	cbz	r4, 8018a68 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018a08:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8018a0a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018a0e:	d002      	beq.n	8018a16 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018a10:	f021 0107 	bic.w	r1, r1, #7
 8018a14:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018a16:	b339      	cbz	r1, 8018a68 <pvPortMalloc+0x80>
 8018a18:	4f3c      	ldr	r7, [pc, #240]	; (8018b0c <pvPortMalloc+0x124>)
 8018a1a:	683e      	ldr	r6, [r7, #0]
 8018a1c:	428e      	cmp	r6, r1
 8018a1e:	d323      	bcc.n	8018a68 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8018a20:	483b      	ldr	r0, [pc, #236]	; (8018b10 <pvPortMalloc+0x128>)
 8018a22:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018a24:	e003      	b.n	8018a2e <pvPortMalloc+0x46>
 8018a26:	6823      	ldr	r3, [r4, #0]
 8018a28:	b123      	cbz	r3, 8018a34 <pvPortMalloc+0x4c>
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	461c      	mov	r4, r3
 8018a2e:	6862      	ldr	r2, [r4, #4]
 8018a30:	428a      	cmp	r2, r1
 8018a32:	d3f8      	bcc.n	8018a26 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8018a34:	f8dc 3000 	ldr.w	r3, [ip]
 8018a38:	42a3      	cmp	r3, r4
 8018a3a:	d015      	beq.n	8018a68 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018a3c:	6803      	ldr	r3, [r0, #0]
 8018a3e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018a42:	6823      	ldr	r3, [r4, #0]
 8018a44:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018a46:	1a53      	subs	r3, r2, r1
 8018a48:	2b10      	cmp	r3, #16
 8018a4a:	d91b      	bls.n	8018a84 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018a4c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018a4e:	0742      	lsls	r2, r0, #29
 8018a50:	d013      	beq.n	8018a7a <pvPortMalloc+0x92>
 8018a52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a56:	b672      	cpsid	i
 8018a58:	f383 8811 	msr	BASEPRI, r3
 8018a5c:	f3bf 8f6f 	isb	sy
 8018a60:	f3bf 8f4f 	dsb	sy
 8018a64:	b662      	cpsie	i
 8018a66:	e7fe      	b.n	8018a66 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8018a68:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8018a6c:	f7ff f80e 	bl	8017a8c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8018a70:	f7e8 fbf8 	bl	8001264 <vApplicationMallocFailedHook>
}
 8018a74:	4640      	mov	r0, r8
 8018a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018a7a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018a7c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018a7e:	f7ff ff81 	bl	8018984 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018a82:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018a84:	4b23      	ldr	r3, [pc, #140]	; (8018b14 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018a86:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018a88:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018a8a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018a8c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018a8e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018a90:	bf38      	it	cc
 8018a92:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8018a9a:	f7fe fff7 	bl	8017a8c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018a9e:	f018 0f07 	tst.w	r8, #7
 8018aa2:	d0e7      	beq.n	8018a74 <pvPortMalloc+0x8c>
 8018aa4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018aa8:	b672      	cpsid	i
 8018aaa:	f383 8811 	msr	BASEPRI, r3
 8018aae:	f3bf 8f6f 	isb	sy
 8018ab2:	f3bf 8f4f 	dsb	sy
 8018ab6:	b662      	cpsie	i
 8018ab8:	e7fe      	b.n	8018ab8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8018aba:	4b17      	ldr	r3, [pc, #92]	; (8018b18 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018abc:	075d      	lsls	r5, r3, #29
 8018abe:	d11b      	bne.n	8018af8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018ac6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8018ac8:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8018aca:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018acc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ad0:	f023 0307 	bic.w	r3, r3, #7
}
 8018ad4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ad6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8018ad8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8018adc:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ae0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018ae4:	4b0a      	ldr	r3, [pc, #40]	; (8018b10 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8018ae6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018aea:	4b0a      	ldr	r3, [pc, #40]	; (8018b14 <pvPortMalloc+0x12c>)
 8018aec:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018aee:	4b07      	ldr	r3, [pc, #28]	; (8018b0c <pvPortMalloc+0x124>)
 8018af0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018af2:	4b05      	ldr	r3, [pc, #20]	; (8018b08 <pvPortMalloc+0x120>)
 8018af4:	601e      	str	r6, [r3, #0]
}
 8018af6:	e784      	b.n	8018a02 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018af8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018afa:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018afe:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018b02:	4610      	mov	r0, r2
 8018b04:	e7e0      	b.n	8018ac8 <pvPortMalloc+0xe0>
 8018b06:	bf00      	nop
 8018b08:	2001e918 	.word	0x2001e918
 8018b0c:	2001e91c 	.word	0x2001e91c
 8018b10:	2001e924 	.word	0x2001e924
 8018b14:	2001e920 	.word	0x2001e920
 8018b18:	20006918 	.word	0x20006918
 8018b1c:	20006914 	.word	0x20006914

08018b20 <vPortFree>:
	if( pv != NULL )
 8018b20:	b1f0      	cbz	r0, 8018b60 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018b22:	4a1c      	ldr	r2, [pc, #112]	; (8018b94 <vPortFree+0x74>)
 8018b24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018b28:	6812      	ldr	r2, [r2, #0]
 8018b2a:	4213      	tst	r3, r2
 8018b2c:	d00d      	beq.n	8018b4a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018b2e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8018b32:	b1b1      	cbz	r1, 8018b62 <vPortFree+0x42>
 8018b34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b38:	b672      	cpsid	i
 8018b3a:	f383 8811 	msr	BASEPRI, r3
 8018b3e:	f3bf 8f6f 	isb	sy
 8018b42:	f3bf 8f4f 	dsb	sy
 8018b46:	b662      	cpsie	i
 8018b48:	e7fe      	b.n	8018b48 <vPortFree+0x28>
 8018b4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b4e:	b672      	cpsid	i
 8018b50:	f383 8811 	msr	BASEPRI, r3
 8018b54:	f3bf 8f6f 	isb	sy
 8018b58:	f3bf 8f4f 	dsb	sy
 8018b5c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018b5e:	e7fe      	b.n	8018b5e <vPortFree+0x3e>
 8018b60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018b62:	ea23 0302 	bic.w	r3, r3, r2
{
 8018b66:	b500      	push	{lr}
 8018b68:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018b6a:	f840 3c04 	str.w	r3, [r0, #-4]
 8018b6e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8018b70:	f7fe fe30 	bl	80177d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018b74:	4a08      	ldr	r2, [pc, #32]	; (8018b98 <vPortFree+0x78>)
 8018b76:	9801      	ldr	r0, [sp, #4]
 8018b78:	6811      	ldr	r1, [r2, #0]
 8018b7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018b7e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018b80:	440b      	add	r3, r1
 8018b82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018b84:	f7ff fefe 	bl	8018984 <prvInsertBlockIntoFreeList>
}
 8018b88:	b003      	add	sp, #12
 8018b8a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8018b8e:	f7fe bf7d 	b.w	8017a8c <xTaskResumeAll>
 8018b92:	bf00      	nop
 8018b94:	2001e918 	.word	0x2001e918
 8018b98:	2001e91c 	.word	0x2001e91c

08018b9c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8018b9c:	f003 bb10 	b.w	801c1c0 <pbuf_free>

08018ba0 <tcpip_thread>:
{
 8018ba0:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8018ba2:	4839      	ldr	r0, [pc, #228]	; (8018c88 <tcpip_thread+0xe8>)
{
 8018ba4:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8018ba6:	f00b feff 	bl	80249a8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018baa:	4b38      	ldr	r3, [pc, #224]	; (8018c8c <tcpip_thread+0xec>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	b113      	cbz	r3, 8018bb6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8018bb0:	4a37      	ldr	r2, [pc, #220]	; (8018c90 <tcpip_thread+0xf0>)
 8018bb2:	6810      	ldr	r0, [r2, #0]
 8018bb4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018bb6:	4d34      	ldr	r5, [pc, #208]	; (8018c88 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018bb8:	4e36      	ldr	r6, [pc, #216]	; (8018c94 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018bba:	4f37      	ldr	r7, [pc, #220]	; (8018c98 <tcpip_thread+0xf8>)
 8018bbc:	e010      	b.n	8018be0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8018bbe:	b168      	cbz	r0, 8018bdc <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8018bc0:	4628      	mov	r0, r5
 8018bc2:	f00b fef7 	bl	80249b4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018bc6:	4622      	mov	r2, r4
 8018bc8:	a901      	add	r1, sp, #4
 8018bca:	4630      	mov	r0, r6
 8018bcc:	f00b fea8 	bl	8024920 <sys_arch_mbox_fetch>
 8018bd0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8018bd2:	4628      	mov	r0, r5
 8018bd4:	f00b fee8 	bl	80249a8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018bd8:	3401      	adds	r4, #1
 8018bda:	d111      	bne.n	8018c00 <tcpip_thread+0x60>
    sys_check_timeouts();
 8018bdc:	f008 f85c 	bl	8020c98 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8018be0:	f008 f882 	bl	8020ce8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018be4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8018be6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018be8:	d1e9      	bne.n	8018bbe <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8018bea:	4628      	mov	r0, r5
 8018bec:	f00b fee2 	bl	80249b4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	a901      	add	r1, sp, #4
 8018bf4:	4630      	mov	r0, r6
 8018bf6:	f00b fe93 	bl	8024920 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	f00b fed4 	bl	80249a8 <sys_mutex_lock>
    if (msg == NULL) {
 8018c00:	9c01      	ldr	r4, [sp, #4]
 8018c02:	b37c      	cbz	r4, 8018c64 <tcpip_thread+0xc4>
  switch (msg->type) {
 8018c04:	7823      	ldrb	r3, [r4, #0]
 8018c06:	2b04      	cmp	r3, #4
 8018c08:	d837      	bhi.n	8018c7a <tcpip_thread+0xda>
 8018c0a:	e8df f003 	tbb	[pc, r3]
 8018c0e:	1821      	.short	0x1821
 8018c10:	070f      	.short	0x070f
 8018c12:	03          	.byte	0x03
 8018c13:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018c14:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8018c18:	4798      	blx	r3
      break;
 8018c1a:	e7e1      	b.n	8018be0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018c1c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8018c20:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018c22:	4621      	mov	r1, r4
 8018c24:	2009      	movs	r0, #9
 8018c26:	f002 fdb3 	bl	801b790 <memp_free>
      break;
 8018c2a:	e7d9      	b.n	8018be0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8018c2c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8018c30:	f008 f814 	bl	8020c5c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018c34:	4621      	mov	r1, r4
 8018c36:	2009      	movs	r0, #9
 8018c38:	f002 fdaa 	bl	801b790 <memp_free>
      break;
 8018c3c:	e7d0      	b.n	8018be0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8018c3e:	1d20      	adds	r0, r4, #4
 8018c40:	c807      	ldmia	r0, {r0, r1, r2}
 8018c42:	f007 ffed 	bl	8020c20 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018c46:	4621      	mov	r1, r4
 8018c48:	2009      	movs	r0, #9
 8018c4a:	f002 fda1 	bl	801b790 <memp_free>
      break;
 8018c4e:	e7c7      	b.n	8018be0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8018c50:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8018c54:	6860      	ldr	r0, [r4, #4]
 8018c56:	4798      	blx	r3
 8018c58:	b958      	cbnz	r0, 8018c72 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018c5a:	4621      	mov	r1, r4
 8018c5c:	200a      	movs	r0, #10
 8018c5e:	f002 fd97 	bl	801b790 <memp_free>
      break;
 8018c62:	e7bd      	b.n	8018be0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018c64:	463b      	mov	r3, r7
 8018c66:	2291      	movs	r2, #145	; 0x91
 8018c68:	490c      	ldr	r1, [pc, #48]	; (8018c9c <tcpip_thread+0xfc>)
 8018c6a:	480d      	ldr	r0, [pc, #52]	; (8018ca0 <tcpip_thread+0x100>)
 8018c6c:	f00d fb72 	bl	8026354 <iprintf>
      continue;
 8018c70:	e7b6      	b.n	8018be0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8018c72:	6860      	ldr	r0, [r4, #4]
 8018c74:	f003 faa4 	bl	801c1c0 <pbuf_free>
 8018c78:	e7ef      	b.n	8018c5a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018c7a:	463b      	mov	r3, r7
 8018c7c:	22cf      	movs	r2, #207	; 0xcf
 8018c7e:	4907      	ldr	r1, [pc, #28]	; (8018c9c <tcpip_thread+0xfc>)
 8018c80:	4807      	ldr	r0, [pc, #28]	; (8018ca0 <tcpip_thread+0x100>)
 8018c82:	f00d fb67 	bl	8026354 <iprintf>
      break;
 8018c86:	e7ab      	b.n	8018be0 <tcpip_thread+0x40>
 8018c88:	2001e92c 	.word	0x2001e92c
 8018c8c:	2001e930 	.word	0x2001e930
 8018c90:	2001e934 	.word	0x2001e934
 8018c94:	2001e938 	.word	0x2001e938
 8018c98:	0802e254 	.word	0x0802e254
 8018c9c:	0802e284 	.word	0x0802e284
 8018ca0:	0802b034 	.word	0x0802b034

08018ca4 <tcpip_inpkt>:
{
 8018ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ca6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018ca8:	4814      	ldr	r0, [pc, #80]	; (8018cfc <tcpip_inpkt+0x58>)
{
 8018caa:	460e      	mov	r6, r1
 8018cac:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018cae:	f00b fe59 	bl	8024964 <sys_mbox_valid>
 8018cb2:	b188      	cbz	r0, 8018cd8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018cb4:	22fe      	movs	r2, #254	; 0xfe
 8018cb6:	4912      	ldr	r1, [pc, #72]	; (8018d00 <tcpip_inpkt+0x5c>)
 8018cb8:	200a      	movs	r0, #10
 8018cba:	f002 fd33 	bl	801b724 <memp_malloc_fn>
  if (msg == NULL) {
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	b1c0      	cbz	r0, 8018cf4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8018cc2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8018cc4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8018cc6:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018cc8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8018cca:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018ccc:	480b      	ldr	r0, [pc, #44]	; (8018cfc <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 8018cce:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018cd0:	f00b fe1c 	bl	802490c <sys_mbox_trypost>
 8018cd4:	b938      	cbnz	r0, 8018ce6 <tcpip_inpkt+0x42>
}
 8018cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018cd8:	4b09      	ldr	r3, [pc, #36]	; (8018d00 <tcpip_inpkt+0x5c>)
 8018cda:	22fc      	movs	r2, #252	; 0xfc
 8018cdc:	4909      	ldr	r1, [pc, #36]	; (8018d04 <tcpip_inpkt+0x60>)
 8018cde:	480a      	ldr	r0, [pc, #40]	; (8018d08 <tcpip_inpkt+0x64>)
 8018ce0:	f00d fb38 	bl	8026354 <iprintf>
 8018ce4:	e7e6      	b.n	8018cb4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018ce6:	4621      	mov	r1, r4
 8018ce8:	200a      	movs	r0, #10
 8018cea:	f002 fd51 	bl	801b790 <memp_free>
    return ERR_MEM;
 8018cee:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8018cf4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	2001e938 	.word	0x2001e938
 8018d00:	0802e254 	.word	0x0802e254
 8018d04:	0802e2a4 	.word	0x0802e2a4
 8018d08:	0802b034 	.word	0x0802b034

08018d0c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018d0c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8018d10:	f013 0f18 	tst.w	r3, #24
 8018d14:	d002      	beq.n	8018d1c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8018d16:	4a03      	ldr	r2, [pc, #12]	; (8018d24 <tcpip_input+0x18>)
 8018d18:	f7ff bfc4 	b.w	8018ca4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8018d1c:	4a02      	ldr	r2, [pc, #8]	; (8018d28 <tcpip_input+0x1c>)
 8018d1e:	f7ff bfc1 	b.w	8018ca4 <tcpip_inpkt>
 8018d22:	bf00      	nop
 8018d24:	080247cd 	.word	0x080247cd
 8018d28:	08023a29 	.word	0x08023a29

08018d2c <tcpip_try_callback>:
{
 8018d2c:	b570      	push	{r4, r5, r6, lr}
 8018d2e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018d30:	4814      	ldr	r0, [pc, #80]	; (8018d84 <tcpip_try_callback+0x58>)
{
 8018d32:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018d34:	f00b fe16 	bl	8024964 <sys_mbox_valid>
 8018d38:	b188      	cbz	r0, 8018d5e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018d3a:	f240 125f 	movw	r2, #351	; 0x15f
 8018d3e:	4912      	ldr	r1, [pc, #72]	; (8018d88 <tcpip_try_callback+0x5c>)
 8018d40:	2009      	movs	r0, #9
 8018d42:	f002 fcef 	bl	801b724 <memp_malloc_fn>
  if (msg == NULL) {
 8018d46:	4604      	mov	r4, r0
 8018d48:	b1c0      	cbz	r0, 8018d7c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8018d4a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018d4c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8018d4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018d52:	480c      	ldr	r0, [pc, #48]	; (8018d84 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8018d54:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018d56:	f00b fdd9 	bl	802490c <sys_mbox_trypost>
 8018d5a:	b940      	cbnz	r0, 8018d6e <tcpip_try_callback+0x42>
}
 8018d5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018d5e:	4b0a      	ldr	r3, [pc, #40]	; (8018d88 <tcpip_try_callback+0x5c>)
 8018d60:	f240 125d 	movw	r2, #349	; 0x15d
 8018d64:	4909      	ldr	r1, [pc, #36]	; (8018d8c <tcpip_try_callback+0x60>)
 8018d66:	480a      	ldr	r0, [pc, #40]	; (8018d90 <tcpip_try_callback+0x64>)
 8018d68:	f00d faf4 	bl	8026354 <iprintf>
 8018d6c:	e7e5      	b.n	8018d3a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018d6e:	4621      	mov	r1, r4
 8018d70:	2009      	movs	r0, #9
 8018d72:	f002 fd0d 	bl	801b790 <memp_free>
    return ERR_MEM;
 8018d76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018d7a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8018d7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018d80:	bd70      	pop	{r4, r5, r6, pc}
 8018d82:	bf00      	nop
 8018d84:	2001e938 	.word	0x2001e938
 8018d88:	0802e254 	.word	0x0802e254
 8018d8c:	0802e2a4 	.word	0x0802e2a4
 8018d90:	0802b034 	.word	0x0802b034

08018d94 <tcpip_init>:
{
 8018d94:	b530      	push	{r4, r5, lr}
 8018d96:	b083      	sub	sp, #12
 8018d98:	4605      	mov	r5, r0
 8018d9a:	460c      	mov	r4, r1
  lwip_init();
 8018d9c:	f001 ffae 	bl	801acfc <lwip_init>
  tcpip_init_done = initfunc;
 8018da0:	4a15      	ldr	r2, [pc, #84]	; (8018df8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018da2:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 8018da4:	4b15      	ldr	r3, [pc, #84]	; (8018dfc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018da6:	4816      	ldr	r0, [pc, #88]	; (8018e00 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8018da8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8018daa:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018dac:	f00b fd98 	bl	80248e0 <sys_mbox_new>
 8018db0:	b968      	cbnz	r0, 8018dce <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018db2:	4814      	ldr	r0, [pc, #80]	; (8018e04 <tcpip_init+0x70>)
 8018db4:	f00b fde8 	bl	8024988 <sys_mutex_new>
 8018db8:	b9a8      	cbnz	r0, 8018de6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018dc0:	4911      	ldr	r1, [pc, #68]	; (8018e08 <tcpip_init+0x74>)
 8018dc2:	9200      	str	r2, [sp, #0]
 8018dc4:	4811      	ldr	r0, [pc, #68]	; (8018e0c <tcpip_init+0x78>)
 8018dc6:	f00b fdf9 	bl	80249bc <sys_thread_new>
}
 8018dca:	b003      	add	sp, #12
 8018dcc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018dce:	4b10      	ldr	r3, [pc, #64]	; (8018e10 <tcpip_init+0x7c>)
 8018dd0:	f240 2261 	movw	r2, #609	; 0x261
 8018dd4:	490f      	ldr	r1, [pc, #60]	; (8018e14 <tcpip_init+0x80>)
 8018dd6:	4810      	ldr	r0, [pc, #64]	; (8018e18 <tcpip_init+0x84>)
 8018dd8:	f00d fabc 	bl	8026354 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018ddc:	4809      	ldr	r0, [pc, #36]	; (8018e04 <tcpip_init+0x70>)
 8018dde:	f00b fdd3 	bl	8024988 <sys_mutex_new>
 8018de2:	2800      	cmp	r0, #0
 8018de4:	d0e9      	beq.n	8018dba <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8018de6:	4b0a      	ldr	r3, [pc, #40]	; (8018e10 <tcpip_init+0x7c>)
 8018de8:	f240 2265 	movw	r2, #613	; 0x265
 8018dec:	490b      	ldr	r1, [pc, #44]	; (8018e1c <tcpip_init+0x88>)
 8018dee:	480a      	ldr	r0, [pc, #40]	; (8018e18 <tcpip_init+0x84>)
 8018df0:	f00d fab0 	bl	8026354 <iprintf>
 8018df4:	e7e1      	b.n	8018dba <tcpip_init+0x26>
 8018df6:	bf00      	nop
 8018df8:	2001e930 	.word	0x2001e930
 8018dfc:	2001e934 	.word	0x2001e934
 8018e00:	2001e938 	.word	0x2001e938
 8018e04:	2001e92c 	.word	0x2001e92c
 8018e08:	08018ba1 	.word	0x08018ba1
 8018e0c:	0802e2fc 	.word	0x0802e2fc
 8018e10:	0802e254 	.word	0x0802e254
 8018e14:	0802e2b4 	.word	0x0802e2b4
 8018e18:	0802b034 	.word	0x0802b034
 8018e1c:	0802e2d8 	.word	0x0802e2d8

08018e20 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8018e20:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8018e22:	4801      	ldr	r0, [pc, #4]	; (8018e28 <pbuf_free_callback+0x8>)
 8018e24:	f7ff bf82 	b.w	8018d2c <tcpip_try_callback>
 8018e28:	08018b9d 	.word	0x08018b9d

08018e2c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8018e2c:	b1e8      	cbz	r0, 8018e6a <fs_open+0x3e>
{
 8018e2e:	b570      	push	{r4, r5, r6, lr}
 8018e30:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8018e32:	b1b9      	cbz	r1, 8018e64 <fs_open+0x38>
 8018e34:	4606      	mov	r6, r0
 8018e36:	490e      	ldr	r1, [pc, #56]	; (8018e70 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018e38:	4c0e      	ldr	r4, [pc, #56]	; (8018e74 <fs_open+0x48>)
 8018e3a:	e000      	b.n	8018e3e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8018e3c:	6861      	ldr	r1, [r4, #4]
 8018e3e:	4628      	mov	r0, r5
 8018e40:	f7e7 f9fe 	bl	8000240 <strcmp>
 8018e44:	b128      	cbz	r0, 8018e52 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018e46:	6824      	ldr	r4, [r4, #0]
 8018e48:	2c00      	cmp	r4, #0
 8018e4a:	d1f7      	bne.n	8018e3c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8018e4c:	f06f 0005 	mvn.w	r0, #5
}
 8018e50:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8018e52:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8018e56:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8018e58:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8018e5a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8018e5e:	7c23      	ldrb	r3, [r4, #16]
 8018e60:	7433      	strb	r3, [r6, #16]
}
 8018e62:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8018e64:	f06f 000f 	mvn.w	r0, #15
}
 8018e68:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8018e6a:	f06f 000f 	mvn.w	r0, #15
}
 8018e6e:	4770      	bx	lr
 8018e70:	08039190 	.word	0x08039190
 8018e74:	080442fc 	.word	0x080442fc

08018e78 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8018e78:	4770      	bx	lr
 8018e7a:	bf00      	nop

08018e7c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8018e7c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8018e80:	1a10      	subs	r0, r2, r0
 8018e82:	4770      	bx	lr

08018e84 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8018e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8018e88:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8018e8a:	b374      	cbz	r4, 8018eea <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8018e8c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8018e90:	4617      	mov	r7, r2
 8018e92:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8018e96:	4605      	mov	r5, r0
 8018e98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8018e9c:	460e      	mov	r6, r1
 8018e9e:	4698      	mov	r8, r3
 8018ea0:	fa1f fc8c 	uxth.w	ip, ip
 8018ea4:	4594      	cmp	ip, r2
 8018ea6:	bf28      	it	cs
 8018ea8:	4694      	movcs	ip, r2
 8018eaa:	4564      	cmp	r4, ip
 8018eac:	bf28      	it	cs
 8018eae:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8018eb0:	4643      	mov	r3, r8
 8018eb2:	4622      	mov	r2, r4
 8018eb4:	4631      	mov	r1, r6
 8018eb6:	4628      	mov	r0, r5
 8018eb8:	f006 fd1a 	bl	801f8f0 <tcp_write>
    if (err == ERR_MEM) {
 8018ebc:	1c43      	adds	r3, r0, #1
 8018ebe:	d007      	beq.n	8018ed0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8018ec0:	b970      	cbnz	r0, 8018ee0 <http_write+0x5c>
 8018ec2:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8018ec4:	8b6b      	ldrh	r3, [r5, #26]
 8018ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018eca:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8018ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8018ed0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8018ed4:	b123      	cbz	r3, 8018ee0 <http_write+0x5c>
 8018ed6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8018eda:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8018edc:	2b08      	cmp	r3, #8
 8018ede:	d901      	bls.n	8018ee4 <http_write+0x60>
    *length = 0;
 8018ee0:	2400      	movs	r4, #0
 8018ee2:	e7ee      	b.n	8018ec2 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8018ee4:	2c01      	cmp	r4, #1
 8018ee6:	d8e3      	bhi.n	8018eb0 <http_write+0x2c>
 8018ee8:	e7fa      	b.n	8018ee0 <http_write+0x5c>
    return ERR_OK;
 8018eea:	4620      	mov	r0, r4
}
 8018eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ef0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8018ef0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8018ef2:	4b0e      	ldr	r3, [pc, #56]	; (8018f2c <http_get_404_file+0x3c>)
{
 8018ef4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8018ef6:	4604      	mov	r4, r0
 8018ef8:	4619      	mov	r1, r3
  *uri = "/404.html";
 8018efa:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8018efc:	f7ff ff96 	bl	8018e2c <fs_open>
  if (err != ERR_OK) {
 8018f00:	b908      	cbnz	r0, 8018f06 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8018f02:	4620      	mov	r0, r4
 8018f04:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8018f06:	490a      	ldr	r1, [pc, #40]	; (8018f30 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8018f08:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8018f0a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8018f0c:	f7ff ff8e 	bl	8018e2c <fs_open>
    if (err != ERR_OK) {
 8018f10:	2800      	cmp	r0, #0
 8018f12:	d0f6      	beq.n	8018f02 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8018f14:	4907      	ldr	r1, [pc, #28]	; (8018f34 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8018f16:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8018f18:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8018f1a:	f7ff ff87 	bl	8018e2c <fs_open>
      if (err != ERR_OK) {
 8018f1e:	2800      	cmp	r0, #0
 8018f20:	d0ef      	beq.n	8018f02 <http_get_404_file+0x12>
        *uri = NULL;
 8018f22:	2300      	movs	r3, #0
        return NULL;
 8018f24:	461c      	mov	r4, r3
        *uri = NULL;
 8018f26:	602b      	str	r3, [r5, #0]
        return NULL;
 8018f28:	e7eb      	b.n	8018f02 <http_get_404_file+0x12>
 8018f2a:	bf00      	nop
 8018f2c:	08044310 	.word	0x08044310
 8018f30:	0804431c 	.word	0x0804431c
 8018f34:	08044328 	.word	0x08044328

08018f38 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8018f38:	bb82      	cbnz	r2, 8018f9c <http_accept+0x64>
{
 8018f3a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8018f3c:	fab1 f581 	clz	r5, r1
 8018f40:	460c      	mov	r4, r1
 8018f42:	096d      	lsrs	r5, r5, #5
 8018f44:	b339      	cbz	r1, 8018f96 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018f46:	2101      	movs	r1, #1
 8018f48:	4620      	mov	r0, r4
 8018f4a:	f003 fec3 	bl	801ccd4 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8018f4e:	2034      	movs	r0, #52	; 0x34
 8018f50:	f002 fa46 	bl	801b3e0 <mem_malloc>
  if (ret != NULL) {
 8018f54:	4606      	mov	r6, r0
 8018f56:	b1d8      	cbz	r0, 8018f90 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8018f58:	2234      	movs	r2, #52	; 0x34
 8018f5a:	4629      	mov	r1, r5
 8018f5c:	f00c fa5c 	bl	8025418 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8018f60:	4631      	mov	r1, r6
 8018f62:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8018f64:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8018f66:	f003 feeb 	bl	801cd40 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	490d      	ldr	r1, [pc, #52]	; (8018fa4 <http_accept+0x6c>)
 8018f6e:	f003 feeb 	bl	801cd48 <tcp_recv>
  altcp_err(pcb, http_err);
 8018f72:	4620      	mov	r0, r4
 8018f74:	490c      	ldr	r1, [pc, #48]	; (8018fa8 <http_accept+0x70>)
 8018f76:	f003 ff1f 	bl	801cdb8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8018f7a:	2204      	movs	r2, #4
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	490b      	ldr	r1, [pc, #44]	; (8018fac <http_accept+0x74>)
 8018f80:	f003 ff3c 	bl	801cdfc <tcp_poll>
  altcp_sent(pcb, http_sent);
 8018f84:	4620      	mov	r0, r4
 8018f86:	490a      	ldr	r1, [pc, #40]	; (8018fb0 <http_accept+0x78>)
 8018f88:	f003 fefa 	bl	801cd80 <tcp_sent>

  return ERR_OK;
 8018f8c:	4628      	mov	r0, r5
}
 8018f8e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8018f90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018f94:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8018f96:	f06f 0005 	mvn.w	r0, #5
}
 8018f9a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8018f9c:	f06f 0005 	mvn.w	r0, #5
}
 8018fa0:	4770      	bx	lr
 8018fa2:	bf00      	nop
 8018fa4:	08019c11 	.word	0x08019c11
 8018fa8:	080194f9 	.word	0x080194f9
 8018fac:	08019bb9 	.word	0x08019bb9
 8018fb0:	08019ba1 	.word	0x08019ba1

08018fb4 <http_init_file>:
{
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	b087      	sub	sp, #28
 8018fba:	4604      	mov	r4, r0
  if (file != NULL) {
 8018fbc:	460e      	mov	r6, r1
{
 8018fbe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018fc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8018fc8:	2900      	cmp	r1, #0
 8018fca:	f000 80aa 	beq.w	8019122 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8018fce:	680b      	ldr	r3, [r1, #0]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f000 80ac 	beq.w	801912e <http_init_file+0x17a>
    if (tag_check) {
 8018fd6:	2f00      	cmp	r7, #0
 8018fd8:	d16f      	bne.n	80190ba <http_init_file+0x106>
    hs->handle = file;
 8018fda:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8018fdc:	2d00      	cmp	r5, #0
 8018fde:	d04f      	beq.n	8019080 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8018fe0:	782b      	ldrb	r3, [r5, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f000 80c0 	beq.w	8019168 <http_init_file+0x1b4>
 8018fe8:	4b61      	ldr	r3, [pc, #388]	; (8019170 <http_init_file+0x1bc>)
 8018fea:	2701      	movs	r7, #1
 8018fec:	9405      	str	r4, [sp, #20]
 8018fee:	462c      	mov	r4, r5
 8018ff0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8019174 <http_init_file+0x1c0>
 8018ff4:	4698      	mov	r8, r3
 8018ff6:	9304      	str	r3, [sp, #16]
 8018ff8:	e017      	b.n	801902a <http_init_file+0x76>
 8018ffa:	2d0e      	cmp	r5, #14
      *pair = '\0';
 8018ffc:	f04f 0300 	mov.w	r3, #0
 8019000:	bfcc      	ite	gt
 8019002:	2500      	movgt	r5, #0
 8019004:	2501      	movle	r5, #1
 8019006:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 801900a:	4620      	mov	r0, r4
 801900c:	213d      	movs	r1, #61	; 0x3d
 801900e:	f00d fc25 	bl	802685c <strchr>
    if (equals) {
 8019012:	b320      	cbz	r0, 801905e <http_init_file+0xaa>
      *equals = '\0';
 8019014:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019018:	f108 0804 	add.w	r8, r8, #4
 801901c:	3701      	adds	r7, #1
 801901e:	465c      	mov	r4, fp
      *equals = '\0';
 8019020:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8019024:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019028:	b30d      	cbz	r5, 801906e <http_init_file+0xba>
    pair = strchr(pair, '&');
 801902a:	4620      	mov	r0, r4
 801902c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801902e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8019032:	1e7d      	subs	r5, r7, #1
 8019034:	f00d fc12 	bl	802685c <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019038:	46ba      	mov	sl, r7
    if (pair) {
 801903a:	4683      	mov	fp, r0
 801903c:	2800      	cmp	r0, #0
 801903e:	d1dc      	bne.n	8018ffa <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8019040:	4620      	mov	r0, r4
 8019042:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019044:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8019046:	f00d fc09 	bl	802685c <strchr>
      if (pair) {
 801904a:	2800      	cmp	r0, #0
 801904c:	d0dd      	beq.n	801900a <http_init_file+0x56>
        *pair = '\0';
 801904e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8019052:	213d      	movs	r1, #61	; 0x3d
 8019054:	4620      	mov	r0, r4
 8019056:	f00d fc01 	bl	802685c <strchr>
    if (equals) {
 801905a:	2800      	cmp	r0, #0
 801905c:	d1da      	bne.n	8019014 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801905e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019062:	3701      	adds	r7, #1
 8019064:	f108 0804 	add.w	r8, r8, #4
 8019068:	465c      	mov	r4, fp
 801906a:	2d00      	cmp	r5, #0
 801906c:	d1dd      	bne.n	801902a <http_init_file+0x76>
 801906e:	4652      	mov	r2, sl
 8019070:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8019072:	9b04      	ldr	r3, [sp, #16]
 8019074:	4630      	mov	r0, r6
 8019076:	9903      	ldr	r1, [sp, #12]
 8019078:	9300      	str	r3, [sp, #0]
 801907a:	4b3e      	ldr	r3, [pc, #248]	; (8019174 <http_init_file+0x1c0>)
 801907c:	f7ef fc8a 	bl	8008994 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019080:	e9d6 3200 	ldrd	r3, r2, [r6]
 8019084:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8019086:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019088:	db5c      	blt.n	8019144 <http_init_file+0x190>
    hs->retries = 0;
 801908a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801908c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801908e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8019090:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8019094:	7c1b      	ldrb	r3, [r3, #16]
 8019096:	07d9      	lsls	r1, r3, #31
 8019098:	d526      	bpl.n	80190e8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801909a:	9b02      	ldr	r3, [sp, #8]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d132      	bne.n	8019106 <http_init_file+0x152>
  if (hs->keepalive) {
 80190a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80190a4:	b12b      	cbz	r3, 80190b2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 80190a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d054      	beq.n	8019156 <http_init_file+0x1a2>
      hs->keepalive = 0;
 80190ac:	2300      	movs	r3, #0
 80190ae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80190b2:	2000      	movs	r0, #0
 80190b4:	b007      	add	sp, #28
 80190b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80190ba:	f44f 7090 	mov.w	r0, #288	; 0x120
 80190be:	f002 f98f 	bl	801b3e0 <mem_malloc>
  if (ret != NULL) {
 80190c2:	4607      	mov	r7, r0
 80190c4:	2800      	cmp	r0, #0
 80190c6:	d088      	beq.n	8018fda <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80190c8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80190cc:	2100      	movs	r1, #0
 80190ce:	f00c f9a3 	bl	8025418 <memset>
        ssi->parsed = file->data;
 80190d2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 80190d4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 80190d6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 80190d8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 80190dc:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 80190de:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80190e0:	2d00      	cmp	r5, #0
 80190e2:	f47f af7d 	bne.w	8018fe0 <http_init_file+0x2c>
 80190e6:	e7cb      	b.n	8019080 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 80190e8:	4b23      	ldr	r3, [pc, #140]	; (8019178 <http_init_file+0x1c4>)
 80190ea:	f640 1243 	movw	r2, #2371	; 0x943
 80190ee:	4923      	ldr	r1, [pc, #140]	; (801917c <http_init_file+0x1c8>)
 80190f0:	4823      	ldr	r0, [pc, #140]	; (8019180 <http_init_file+0x1cc>)
 80190f2:	f00d f92f 	bl	8026354 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80190f6:	9b02      	ldr	r3, [sp, #8]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d0d1      	beq.n	80190a0 <http_init_file+0xec>
 80190fc:	6963      	ldr	r3, [r4, #20]
 80190fe:	7c1b      	ldrb	r3, [r3, #16]
 8019100:	07db      	lsls	r3, r3, #31
 8019102:	d5cd      	bpl.n	80190a0 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8019104:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019106:	491f      	ldr	r1, [pc, #124]	; (8019184 <http_init_file+0x1d0>)
 8019108:	69a0      	ldr	r0, [r4, #24]
 801910a:	f001 f823 	bl	801a154 <lwip_strnstr>
      if (file_start != NULL) {
 801910e:	2800      	cmp	r0, #0
 8019110:	d0c6      	beq.n	80190a0 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8019112:	3004      	adds	r0, #4
 8019114:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8019116:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8019118:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801911a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801911c:	1a9b      	subs	r3, r3, r2
 801911e:	6263      	str	r3, [r4, #36]	; 0x24
 8019120:	e7be      	b.n	80190a0 <http_init_file+0xec>
    hs->file = NULL;
 8019122:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8019126:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8019128:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801912c:	e7b8      	b.n	80190a0 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801912e:	4b12      	ldr	r3, [pc, #72]	; (8019178 <http_init_file+0x1c4>)
 8019130:	f640 120b 	movw	r2, #2315	; 0x90b
 8019134:	4914      	ldr	r1, [pc, #80]	; (8019188 <http_init_file+0x1d4>)
 8019136:	4812      	ldr	r0, [pc, #72]	; (8019180 <http_init_file+0x1cc>)
 8019138:	f00d f90c 	bl	8026354 <iprintf>
    if (tag_check) {
 801913c:	2f00      	cmp	r7, #0
 801913e:	f43f af4c 	beq.w	8018fda <http_init_file+0x26>
 8019142:	e7ba      	b.n	80190ba <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019144:	f640 1234 	movw	r2, #2356	; 0x934
 8019148:	4b0b      	ldr	r3, [pc, #44]	; (8019178 <http_init_file+0x1c4>)
 801914a:	4910      	ldr	r1, [pc, #64]	; (801918c <http_init_file+0x1d8>)
 801914c:	480c      	ldr	r0, [pc, #48]	; (8019180 <http_init_file+0x1cc>)
 801914e:	f00d f901 	bl	8026354 <iprintf>
      hs->left = (u32_t)file->len;
 8019152:	6872      	ldr	r2, [r6, #4]
 8019154:	e799      	b.n	801908a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8019156:	6963      	ldr	r3, [r4, #20]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d0aa      	beq.n	80190b2 <http_init_file+0xfe>
 801915c:	7c1b      	ldrb	r3, [r3, #16]
 801915e:	f003 0303 	and.w	r3, r3, #3
 8019162:	2b01      	cmp	r3, #1
 8019164:	d1a5      	bne.n	80190b2 <http_init_file+0xfe>
 8019166:	e7a1      	b.n	80190ac <http_init_file+0xf8>
    return (0);
 8019168:	461a      	mov	r2, r3
 801916a:	4b01      	ldr	r3, [pc, #4]	; (8019170 <http_init_file+0x1bc>)
 801916c:	9304      	str	r3, [sp, #16]
 801916e:	e780      	b.n	8019072 <http_init_file+0xbe>
 8019170:	2001e93c 	.word	0x2001e93c
 8019174:	2001e97c 	.word	0x2001e97c
 8019178:	08044334 	.word	0x08044334
 801917c:	080443a0 	.word	0x080443a0
 8019180:	0802b034 	.word	0x0802b034
 8019184:	0802b2d4 	.word	0x0802b2d4
 8019188:	0804436c 	.word	0x0804436c
 801918c:	08044380 	.word	0x08044380

08019190 <http_find_file>:
{
 8019190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019194:	ed2d 8b02 	vpush	{d8}
 8019198:	b087      	sub	sp, #28
 801919a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801919c:	4608      	mov	r0, r1
 801919e:	460c      	mov	r4, r1
{
 80191a0:	4690      	mov	r8, r2
 80191a2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80191a4:	f7e7 f856 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80191a8:	4606      	mov	r6, r0
 80191aa:	b148      	cbz	r0, 80191c0 <http_find_file+0x30>
 80191ac:	f100 39ff 	add.w	r9, r0, #4294967295
 80191b0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80191b4:	2b2f      	cmp	r3, #47	; 0x2f
 80191b6:	d06a      	beq.n	801928e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 80191b8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80191ba:	f04f 0900 	mov.w	r9, #0
 80191be:	e001      	b.n	80191c4 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 80191c0:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80191c2:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 80191c4:	213f      	movs	r1, #63	; 0x3f
 80191c6:	4620      	mov	r0, r4
 80191c8:	f00d fb48 	bl	802685c <strchr>
    if (params != NULL) {
 80191cc:	4606      	mov	r6, r0
 80191ce:	b118      	cbz	r0, 80191d8 <http_find_file+0x48>
      *params = '\0';
 80191d0:	2300      	movs	r3, #0
 80191d2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 80191d6:	9c05      	ldr	r4, [sp, #20]
 80191d8:	4621      	mov	r1, r4
 80191da:	4628      	mov	r0, r5
 80191dc:	f7ff fe26 	bl	8018e2c <fs_open>
    if (err == ERR_OK) {
 80191e0:	b9b0      	cbnz	r0, 8019210 <http_find_file+0x80>
    if (file != NULL) {
 80191e2:	b1e7      	cbz	r7, 801921e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80191e4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80191e8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80191ea:	f019 0908 	ands.w	r9, r9, #8
 80191ee:	d01d      	beq.n	801922c <http_find_file+0x9c>
        tag_check = 1;
 80191f0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80191f4:	4623      	mov	r3, r4
 80191f6:	4642      	mov	r2, r8
 80191f8:	4639      	mov	r1, r7
 80191fa:	4628      	mov	r0, r5
 80191fc:	9601      	str	r6, [sp, #4]
 80191fe:	f8cd 9000 	str.w	r9, [sp]
 8019202:	f7ff fed7 	bl	8018fb4 <http_init_file>
}
 8019206:	b007      	add	sp, #28
 8019208:	ecbd 8b02 	vpop	{d8}
 801920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8019210:	a905      	add	r1, sp, #20
 8019212:	4628      	mov	r0, r5
 8019214:	f7ff fe6c 	bl	8018ef0 <http_get_404_file>
 8019218:	4607      	mov	r7, r0
    if (file != NULL) {
 801921a:	2f00      	cmp	r7, #0
 801921c:	d1e2      	bne.n	80191e4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801921e:	a905      	add	r1, sp, #20
 8019220:	4628      	mov	r0, r5
 8019222:	f7ff fe65 	bl	8018ef0 <http_get_404_file>
 8019226:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8019228:	9c05      	ldr	r4, [sp, #20]
 801922a:	e7e3      	b.n	80191f4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 801922c:	213f      	movs	r1, #63	; 0x3f
 801922e:	4620      	mov	r0, r4
 8019230:	f00d fb14 	bl	802685c <strchr>
    if (param != NULL) {
 8019234:	4682      	mov	sl, r0
 8019236:	b108      	cbz	r0, 801923c <http_find_file+0xac>
      *param = 0;
 8019238:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801923c:	212e      	movs	r1, #46	; 0x2e
 801923e:	4620      	mov	r0, r4
 8019240:	f00d fb0c 	bl	802685c <strchr>
 8019244:	4603      	mov	r3, r0
 8019246:	b138      	cbz	r0, 8019258 <http_find_file+0xc8>
 8019248:	1c58      	adds	r0, r3, #1
 801924a:	212e      	movs	r1, #46	; 0x2e
 801924c:	461c      	mov	r4, r3
 801924e:	f00d fb05 	bl	802685c <strchr>
 8019252:	4603      	mov	r3, r0
 8019254:	2800      	cmp	r0, #0
 8019256:	d1f7      	bne.n	8019248 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8019258:	4940      	ldr	r1, [pc, #256]	; (801935c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801925a:	4620      	mov	r0, r4
 801925c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801936c <http_find_file+0x1dc>
 8019260:	f000 ffa0 	bl	801a1a4 <lwip_stricmp>
 8019264:	b148      	cbz	r0, 801927a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8019266:	4b3e      	ldr	r3, [pc, #248]	; (8019360 <http_find_file+0x1d0>)
 8019268:	459b      	cmp	fp, r3
 801926a:	d008      	beq.n	801927e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801926c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8019270:	4620      	mov	r0, r4
 8019272:	f000 ff97 	bl	801a1a4 <lwip_stricmp>
 8019276:	2800      	cmp	r0, #0
 8019278:	d1f5      	bne.n	8019266 <http_find_file+0xd6>
        tag_check = 1;
 801927a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 801927e:	f1ba 0f00 	cmp.w	sl, #0
 8019282:	d0d1      	beq.n	8019228 <http_find_file+0x98>
      *param = '?';
 8019284:	233f      	movs	r3, #63	; 0x3f
 8019286:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801928a:	9c05      	ldr	r4, [sp, #20]
 801928c:	e7b2      	b.n	80191f4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801928e:	4b35      	ldr	r3, [pc, #212]	; (8019364 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019290:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019292:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019294:	d106      	bne.n	80192a4 <http_find_file+0x114>
 8019296:	f1a0 0001 	sub.w	r0, r0, #1
 801929a:	fab0 f080 	clz	r0, r0
 801929e:	0940      	lsrs	r0, r0, #5
 80192a0:	2800      	cmp	r0, #0
 80192a2:	d057      	beq.n	8019354 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80192a4:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 80192a8:	bf28      	it	cs
 80192aa:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 80192ae:	2e01      	cmp	r6, #1
 80192b0:	d008      	beq.n	80192c4 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 80192b2:	464a      	mov	r2, r9
 80192b4:	4621      	mov	r1, r4
 80192b6:	482b      	ldr	r0, [pc, #172]	; (8019364 <http_find_file+0x1d4>)
 80192b8:	f00c f886 	bl	80253c8 <memcpy>
      http_uri_buf[copy_len] = 0;
 80192bc:	2300      	movs	r3, #0
 80192be:	9a02      	ldr	r2, [sp, #8]
 80192c0:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 80192c4:	462f      	mov	r7, r5
 80192c6:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 80192ca:	f8df a098 	ldr.w	sl, [pc, #152]	; 8019364 <http_find_file+0x1d4>
 80192ce:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 80192d2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 80192d4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 80192d6:	d012      	beq.n	80192fe <http_find_file+0x16e>
        if (len_left > 0) {
 80192d8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 80192dc:	d113      	bne.n	8019306 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 80192de:	4641      	mov	r1, r8
 80192e0:	4628      	mov	r0, r5
 80192e2:	f7ff fda3 	bl	8018e2c <fs_open>
      if (err == ERR_OK) {
 80192e6:	b338      	cbz	r0, 8019338 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80192e8:	f10b 0b01 	add.w	fp, fp, #1
 80192ec:	f1bb 0f05 	cmp.w	fp, #5
 80192f0:	d1ef      	bne.n	80192d2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 80192f2:	ee18 8a10 	vmov	r8, s16
 80192f6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 80192f8:	f04f 0900 	mov.w	r9, #0
 80192fc:	e762      	b.n	80191c4 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 80192fe:	4b1a      	ldr	r3, [pc, #104]	; (8019368 <http_find_file+0x1d8>)
 8019300:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8019304:	e7eb      	b.n	80192de <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019306:	4b18      	ldr	r3, [pc, #96]	; (8019368 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019308:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801930a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801930e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019310:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019312:	4608      	mov	r0, r1
 8019314:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8019316:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801931a:	f7e6 ff9b 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801931e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019320:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8019322:	4282      	cmp	r2, r0
 8019324:	bf28      	it	cs
 8019326:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019328:	4620      	mov	r0, r4
 801932a:	9203      	str	r2, [sp, #12]
 801932c:	f00c f84c 	bl	80253c8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8019330:	2300      	movs	r3, #0
 8019332:	9a03      	ldr	r2, [sp, #12]
 8019334:	54a3      	strb	r3, [r4, r2]
 8019336:	e7d2      	b.n	80192de <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8019338:	4a0b      	ldr	r2, [pc, #44]	; (8019368 <http_find_file+0x1d8>)
        uri = file_name;
 801933a:	4644      	mov	r4, r8
 801933c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8019340:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8019344:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8019346:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 801934a:	2d00      	cmp	r5, #0
 801934c:	f43f af3a 	beq.w	80191c4 <http_find_file+0x34>
  char *params = NULL;
 8019350:	4606      	mov	r6, r0
 8019352:	e74f      	b.n	80191f4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8019354:	462f      	mov	r7, r5
 8019356:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8019358:	4681      	mov	r9, r0
 801935a:	e733      	b.n	80191c4 <http_find_file+0x34>
 801935c:	080443f4 	.word	0x080443f4
 8019360:	08044640 	.word	0x08044640
 8019364:	2001e9bc 	.word	0x2001e9bc
 8019368:	08044650 	.word	0x08044650
 801936c:	08044630 	.word	0x08044630

08019370 <http_post_rxpbuf>:
{
 8019370:	b538      	push	{r3, r4, r5, lr}
 8019372:	4604      	mov	r4, r0
  if (p != NULL) {
 8019374:	b1c9      	cbz	r1, 80193aa <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8019376:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019378:	890a      	ldrh	r2, [r1, #8]
 801937a:	4293      	cmp	r3, r2
 801937c:	d31a      	bcc.n	80193b4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801937e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8019380:	4620      	mov	r0, r4
 8019382:	6323      	str	r3, [r4, #48]	; 0x30
 8019384:	f7ef fc14 	bl	8008bb0 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8019388:	b178      	cbz	r0, 80193aa <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801938a:	2300      	movs	r3, #0
 801938c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801938e:	490a      	ldr	r1, [pc, #40]	; (80193b8 <http_post_rxpbuf+0x48>)
 8019390:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019392:	4620      	mov	r0, r4
 8019394:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8019396:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019398:	f7ef fc1a 	bl	8008bd0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801939c:	462a      	mov	r2, r5
 801939e:	4620      	mov	r0, r4
 80193a0:	4905      	ldr	r1, [pc, #20]	; (80193b8 <http_post_rxpbuf+0x48>)
}
 80193a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80193a6:	f7ff bef3 	b.w	8019190 <http_find_file>
  if (hs->post_content_len_left == 0) {
 80193aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d0ee      	beq.n	801938e <http_post_rxpbuf+0x1e>
}
 80193b0:	2000      	movs	r0, #0
 80193b2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80193b4:	2300      	movs	r3, #0
 80193b6:	e7e3      	b.n	8019380 <http_post_rxpbuf+0x10>
 80193b8:	2001e9bc 	.word	0x2001e9bc

080193bc <http_find_error_file>:
  if (error_nr == 501) {
 80193bc:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 80193c0:	4a17      	ldr	r2, [pc, #92]	; (8019420 <http_find_error_file+0x64>)
 80193c2:	4299      	cmp	r1, r3
 80193c4:	4b17      	ldr	r3, [pc, #92]	; (8019424 <http_find_error_file+0x68>)
 80193c6:	4918      	ldr	r1, [pc, #96]	; (8019428 <http_find_error_file+0x6c>)
{
 80193c8:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 80193ca:	4e18      	ldr	r6, [pc, #96]	; (801942c <http_find_error_file+0x70>)
 80193cc:	bf18      	it	ne
 80193ce:	461e      	movne	r6, r3
 80193d0:	4b17      	ldr	r3, [pc, #92]	; (8019430 <http_find_error_file+0x74>)
 80193d2:	bf18      	it	ne
 80193d4:	460b      	movne	r3, r1
{
 80193d6:	b084      	sub	sp, #16
 80193d8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80193da:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 80193dc:	4d15      	ldr	r5, [pc, #84]	; (8019434 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80193de:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 80193e0:	bf08      	it	eq
 80193e2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80193e4:	f7ff fd22 	bl	8018e2c <fs_open>
 80193e8:	9b03      	ldr	r3, [sp, #12]
 80193ea:	b128      	cbz	r0, 80193f8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 80193ec:	4629      	mov	r1, r5
 80193ee:	4620      	mov	r0, r4
 80193f0:	f7ff fd1c 	bl	8018e2c <fs_open>
 80193f4:	b948      	cbnz	r0, 801940a <http_find_error_file+0x4e>
    uri = uri2;
 80193f6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 80193f8:	2200      	movs	r2, #0
 80193fa:	4621      	mov	r1, r4
 80193fc:	4620      	mov	r0, r4
 80193fe:	e9cd 2200 	strd	r2, r2, [sp]
 8019402:	f7ff fdd7 	bl	8018fb4 <http_init_file>
}
 8019406:	b004      	add	sp, #16
 8019408:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801940a:	4631      	mov	r1, r6
 801940c:	4620      	mov	r0, r4
 801940e:	f7ff fd0d 	bl	8018e2c <fs_open>
 8019412:	b908      	cbnz	r0, 8019418 <http_find_error_file+0x5c>
    uri = uri3;
 8019414:	4633      	mov	r3, r6
 8019416:	e7ef      	b.n	80193f8 <http_find_error_file+0x3c>
    return ERR_ARG;
 8019418:	f06f 000f 	mvn.w	r0, #15
 801941c:	e7f3      	b.n	8019406 <http_find_error_file+0x4a>
 801941e:	bf00      	nop
 8019420:	080443d8 	.word	0x080443d8
 8019424:	080443f0 	.word	0x080443f0
 8019428:	08044408 	.word	0x08044408
 801942c:	080443cc 	.word	0x080443cc
 8019430:	080443e4 	.word	0x080443e4
 8019434:	080443fc 	.word	0x080443fc

08019438 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8019438:	b538      	push	{r3, r4, r5, lr}
 801943a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801943c:	460c      	mov	r4, r1
 801943e:	2900      	cmp	r1, #0
 8019440:	d041      	beq.n	80194c6 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8019442:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8019444:	bb83      	cbnz	r3, 80194a8 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8019446:	2100      	movs	r1, #0
 8019448:	4628      	mov	r0, r5
 801944a:	f003 fc79 	bl	801cd40 <tcp_arg>
  altcp_recv(pcb, NULL);
 801944e:	2100      	movs	r1, #0
 8019450:	4628      	mov	r0, r5
 8019452:	f003 fc79 	bl	801cd48 <tcp_recv>
  altcp_err(pcb, NULL);
 8019456:	2100      	movs	r1, #0
 8019458:	4628      	mov	r0, r5
 801945a:	f003 fcad 	bl	801cdb8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801945e:	2200      	movs	r2, #0
 8019460:	4628      	mov	r0, r5
 8019462:	4611      	mov	r1, r2
 8019464:	f003 fcca 	bl	801cdfc <tcp_poll>
  altcp_sent(pcb, NULL);
 8019468:	4628      	mov	r0, r5
 801946a:	2100      	movs	r1, #0
 801946c:	f003 fc88 	bl	801cd80 <tcp_sent>
  if (hs->handle) {
 8019470:	6960      	ldr	r0, [r4, #20]
 8019472:	b118      	cbz	r0, 801947c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8019474:	f7ff fd00 	bl	8018e78 <fs_close>
    hs->handle = NULL;
 8019478:	2300      	movs	r3, #0
 801947a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801947c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801947e:	b118      	cbz	r0, 8019488 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8019480:	f001 fdf2 	bl	801b068 <mem_free>
    hs->ssi = NULL;
 8019484:	2300      	movs	r3, #0
 8019486:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019488:	6a20      	ldr	r0, [r4, #32]
 801948a:	b118      	cbz	r0, 8019494 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801948c:	f002 fe98 	bl	801c1c0 <pbuf_free>
    hs->req = NULL;
 8019490:	2300      	movs	r3, #0
 8019492:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019494:	4620      	mov	r0, r4
 8019496:	f001 fde7 	bl	801b068 <mem_free>
  err = altcp_close(pcb);
 801949a:	4628      	mov	r0, r5
 801949c:	f004 fb0c 	bl	801dab8 <tcp_close>
  if (err != ERR_OK) {
 80194a0:	4604      	mov	r4, r0
 80194a2:	b948      	cbnz	r0, 80194b8 <http_close_or_abort_conn.constprop.0+0x80>
}
 80194a4:	4620      	mov	r0, r4
 80194a6:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80194a8:	4911      	ldr	r1, [pc, #68]	; (80194f0 <http_close_or_abort_conn.constprop.0+0xb8>)
 80194aa:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80194ac:	223f      	movs	r2, #63	; 0x3f
 80194ae:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 80194b0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80194b2:	f7ef fb8d 	bl	8008bd0 <httpd_post_finished>
 80194b6:	e7c6      	b.n	8019446 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80194b8:	4628      	mov	r0, r5
 80194ba:	2204      	movs	r2, #4
 80194bc:	490d      	ldr	r1, [pc, #52]	; (80194f4 <http_close_or_abort_conn.constprop.0+0xbc>)
 80194be:	f003 fc9d 	bl	801cdfc <tcp_poll>
}
 80194c2:	4620      	mov	r0, r4
 80194c4:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 80194c6:	f003 fc3b 	bl	801cd40 <tcp_arg>
  altcp_recv(pcb, NULL);
 80194ca:	4621      	mov	r1, r4
 80194cc:	4628      	mov	r0, r5
 80194ce:	f003 fc3b 	bl	801cd48 <tcp_recv>
  altcp_err(pcb, NULL);
 80194d2:	4621      	mov	r1, r4
 80194d4:	4628      	mov	r0, r5
 80194d6:	f003 fc6f 	bl	801cdb8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80194da:	4621      	mov	r1, r4
 80194dc:	4628      	mov	r0, r5
 80194de:	4622      	mov	r2, r4
 80194e0:	f003 fc8c 	bl	801cdfc <tcp_poll>
  altcp_sent(pcb, NULL);
 80194e4:	4621      	mov	r1, r4
 80194e6:	4628      	mov	r0, r5
 80194e8:	f003 fc4a 	bl	801cd80 <tcp_sent>
  if (hs != NULL) {
 80194ec:	e7d5      	b.n	801949a <http_close_or_abort_conn.constprop.0+0x62>
 80194ee:	bf00      	nop
 80194f0:	2001e9bc 	.word	0x2001e9bc
 80194f4:	08019bb9 	.word	0x08019bb9

080194f8 <http_err>:
  if (hs != NULL) {
 80194f8:	b1c0      	cbz	r0, 801952c <http_err+0x34>
{
 80194fa:	b510      	push	{r4, lr}
 80194fc:	4604      	mov	r4, r0
  if (hs->handle) {
 80194fe:	6940      	ldr	r0, [r0, #20]
 8019500:	b118      	cbz	r0, 801950a <http_err+0x12>
    fs_close(hs->handle);
 8019502:	f7ff fcb9 	bl	8018e78 <fs_close>
    hs->handle = NULL;
 8019506:	2300      	movs	r3, #0
 8019508:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801950a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801950c:	b118      	cbz	r0, 8019516 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801950e:	f001 fdab 	bl	801b068 <mem_free>
    hs->ssi = NULL;
 8019512:	2300      	movs	r3, #0
 8019514:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019516:	6a20      	ldr	r0, [r4, #32]
 8019518:	b118      	cbz	r0, 8019522 <http_err+0x2a>
    pbuf_free(hs->req);
 801951a:	f002 fe51 	bl	801c1c0 <pbuf_free>
    hs->req = NULL;
 801951e:	2300      	movs	r3, #0
 8019520:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019522:	4620      	mov	r0, r4
}
 8019524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8019528:	f001 bd9e 	b.w	801b068 <mem_free>
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop

08019530 <http_eof>:
{
 8019530:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8019532:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8019536:	b1fb      	cbz	r3, 8019578 <http_eof+0x48>
 8019538:	4605      	mov	r5, r0
  if (hs->handle) {
 801953a:	6948      	ldr	r0, [r1, #20]
 801953c:	460c      	mov	r4, r1
 801953e:	b118      	cbz	r0, 8019548 <http_eof+0x18>
    fs_close(hs->handle);
 8019540:	f7ff fc9a 	bl	8018e78 <fs_close>
    hs->handle = NULL;
 8019544:	2300      	movs	r3, #0
 8019546:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8019548:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801954a:	b118      	cbz	r0, 8019554 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801954c:	f001 fd8c 	bl	801b068 <mem_free>
    hs->ssi = NULL;
 8019550:	2300      	movs	r3, #0
 8019552:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019554:	6a20      	ldr	r0, [r4, #32]
 8019556:	b108      	cbz	r0, 801955c <http_eof+0x2c>
    pbuf_free(hs->req);
 8019558:	f002 fe32 	bl	801c1c0 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801955c:	2234      	movs	r2, #52	; 0x34
 801955e:	2100      	movs	r1, #0
 8019560:	4620      	mov	r0, r4
 8019562:	f00b ff59 	bl	8025418 <memset>
    hs->keepalive = 1;
 8019566:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8019568:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801956a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801956e:	8b6b      	ldrh	r3, [r5, #26]
 8019570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019574:	836b      	strh	r3, [r5, #26]
}
 8019576:	bd38      	pop	{r3, r4, r5, pc}
 8019578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801957c:	f7ff bf5c 	b.w	8019438 <http_close_or_abort_conn.constprop.0>

08019580 <http_send>:
{
 8019580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8019584:	460d      	mov	r5, r1
{
 8019586:	b087      	sub	sp, #28
  if (hs == NULL) {
 8019588:	2900      	cmp	r1, #0
 801958a:	f000 824b 	beq.w	8019a24 <http_send+0x4a4>
  if (hs->left == 0) {
 801958e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019590:	4607      	mov	r7, r0
 8019592:	2b00      	cmp	r3, #0
 8019594:	f000 818c 	beq.w	80198b0 <http_send+0x330>
  if (hs->ssi) {
 8019598:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801959a:	2c00      	cmp	r4, #0
 801959c:	f000 819a 	beq.w	80198d4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 80195a0:	6823      	ldr	r3, [r4, #0]
 80195a2:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 80195a4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 80195a8:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 80195aa:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 80195ae:	f200 80c3 	bhi.w	8019738 <http_send+0x1b8>
  u8_t data_to_send = 0;
 80195b2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 80195b6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80195b8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 80195bc:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80195c0:	2b04      	cmp	r3, #4
 80195c2:	d003      	beq.n	80195cc <http_send+0x4c>
 80195c4:	68e1      	ldr	r1, [r4, #12]
 80195c6:	2900      	cmp	r1, #0
 80195c8:	f000 8091 	beq.w	80196ee <http_send+0x16e>
 80195cc:	2e00      	cmp	r6, #0
 80195ce:	f040 811b 	bne.w	8019808 <http_send+0x288>
    if (len == 0) {
 80195d2:	2a00      	cmp	r2, #0
 80195d4:	f000 811b 	beq.w	801980e <http_send+0x28e>
    switch (ssi->tag_state) {
 80195d8:	2b04      	cmp	r3, #4
 80195da:	d8f1      	bhi.n	80195c0 <http_send+0x40>
 80195dc:	e8df f003 	tbb	[pc, r3]
 80195e0:	23407466 	.word	0x23407466
 80195e4:	03          	.byte	0x03
 80195e5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80195e6:	68a3      	ldr	r3, [r4, #8]
 80195e8:	69a9      	ldr	r1, [r5, #24]
 80195ea:	428b      	cmp	r3, r1
 80195ec:	f240 80f1 	bls.w	80197d2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80195f0:	6863      	ldr	r3, [r4, #4]
 80195f2:	4299      	cmp	r1, r3
 80195f4:	f200 81fc 	bhi.w	80199f0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80195f8:	1a5a      	subs	r2, r3, r1
 80195fa:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80195fe:	4282      	cmp	r2, r0
 8019600:	f340 8117 	ble.w	8019832 <http_send+0x2b2>
 8019604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019608:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801960c:	2300      	movs	r3, #0
 801960e:	f10d 0216 	add.w	r2, sp, #22
 8019612:	4638      	mov	r0, r7
 8019614:	f7ff fc36 	bl	8018e84 <http_write>
          if (err == ERR_OK) {
 8019618:	2800      	cmp	r0, #0
 801961a:	f000 81fe 	beq.w	8019a1a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801961e:	4606      	mov	r6, r0
    if (len == 0) {
 8019620:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019624:	e11a      	b.n	801985c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019626:	6821      	ldr	r1, [r4, #0]
 8019628:	8a20      	ldrh	r0, [r4, #16]
 801962a:	f891 e000 	ldrb.w	lr, [r1]
 801962e:	2800      	cmp	r0, #0
 8019630:	f040 80b9 	bne.w	80197a6 <http_send+0x226>
 8019634:	f1ae 0c09 	sub.w	ip, lr, #9
 8019638:	fa5f fc8c 	uxtb.w	ip, ip
 801963c:	f1bc 0f17 	cmp.w	ip, #23
 8019640:	f200 80b1 	bhi.w	80197a6 <http_send+0x226>
 8019644:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 80199ec <http_send+0x46c>
 8019648:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 801964c:	f01c 0f01 	tst.w	ip, #1
 8019650:	f000 80a9 	beq.w	80197a6 <http_send+0x226>
          ssi->parsed++;
 8019654:	3101      	adds	r1, #1
 8019656:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019658:	68e1      	ldr	r1, [r4, #12]
 801965a:	3901      	subs	r1, #1
 801965c:	60e1      	str	r1, [r4, #12]
          break;
 801965e:	e7af      	b.n	80195c0 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019660:	8a20      	ldrh	r0, [r4, #16]
 8019662:	2800      	cmp	r0, #0
 8019664:	f040 8083 	bne.w	801976e <http_send+0x1ee>
 8019668:	6821      	ldr	r1, [r4, #0]
 801966a:	f891 e000 	ldrb.w	lr, [r1]
 801966e:	f1ae 0c09 	sub.w	ip, lr, #9
 8019672:	fa5f fc8c 	uxtb.w	ip, ip
 8019676:	f1bc 0f17 	cmp.w	ip, #23
 801967a:	f240 8110 	bls.w	801989e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801967e:	f8df c350 	ldr.w	ip, [pc, #848]	; 80199d0 <http_send+0x450>
 8019682:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019686:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 801968a:	f8dc c004 	ldr.w	ip, [ip, #4]
 801968e:	f89c c000 	ldrb.w	ip, [ip]
 8019692:	45f4      	cmp	ip, lr
 8019694:	f000 8083 	beq.w	801979e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8019698:	f100 0c01 	add.w	ip, r0, #1
 801969c:	4420      	add	r0, r4
 801969e:	f8a4 c010 	strh.w	ip, [r4, #16]
 80196a2:	f891 c000 	ldrb.w	ip, [r1]
 80196a6:	f880 c016 	strb.w	ip, [r0, #22]
 80196aa:	e7d3      	b.n	8019654 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80196ac:	6821      	ldr	r1, [r4, #0]
 80196ae:	7808      	ldrb	r0, [r1, #0]
 80196b0:	283c      	cmp	r0, #60	; 0x3c
 80196b2:	d002      	beq.n	80196ba <http_send+0x13a>
 80196b4:	282f      	cmp	r0, #47	; 0x2f
 80196b6:	d1cd      	bne.n	8019654 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80196b8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 80196ba:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 80196bc:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 80196be:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 80196c0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 80196c4:	8223      	strh	r3, [r4, #16]
            break;
 80196c6:	e7c5      	b.n	8019654 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80196c8:	49c1      	ldr	r1, [pc, #772]	; (80199d0 <http_send+0x450>)
 80196ca:	7d20      	ldrb	r0, [r4, #20]
 80196cc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80196d0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 80196d4:	f811 100c 	ldrb.w	r1, [r1, ip]
 80196d8:	2900      	cmp	r1, #0
 80196da:	f040 8086 	bne.w	80197ea <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 80196de:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 80196e0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80196e2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 80196e4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80196e8:	2900      	cmp	r1, #0
 80196ea:	f47f af6f 	bne.w	80195cc <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80196ee:	6823      	ldr	r3, [r4, #0]
 80196f0:	69a9      	ldr	r1, [r5, #24]
 80196f2:	428b      	cmp	r3, r1
 80196f4:	f240 808b 	bls.w	801980e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80196f8:	1a5b      	subs	r3, r3, r1
 80196fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80196fe:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019700:	4293      	cmp	r3, r2
 8019702:	bfa8      	it	ge
 8019704:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019706:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801970a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801970e:	2300      	movs	r3, #0
 8019710:	f7ff fbb8 	bl	8018e84 <http_write>
    if (err == ERR_OK) {
 8019714:	2800      	cmp	r0, #0
 8019716:	d17a      	bne.n	801980e <http_send+0x28e>
    hs->file += len;
 8019718:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 801971c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8019720:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8019722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8019724:	440a      	add	r2, r1
    hs->left -= len;
 8019726:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8019728:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 801972a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801972c:	2b00      	cmp	r3, #0
 801972e:	d071      	beq.n	8019814 <http_send+0x294>
}
 8019730:	4640      	mov	r0, r8
 8019732:	b007      	add	sp, #28
 8019734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019738:	1a5b      	subs	r3, r3, r1
 801973a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801973e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019740:	4293      	cmp	r3, r2
 8019742:	bfa8      	it	ge
 8019744:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019746:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801974a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801974e:	2300      	movs	r3, #0
 8019750:	f7ff fb98 	bl	8018e84 <http_write>
    if (err == ERR_OK) {
 8019754:	4606      	mov	r6, r0
 8019756:	2800      	cmp	r0, #0
 8019758:	f000 8154 	beq.w	8019a04 <http_send+0x484>
  u8_t data_to_send = 0;
 801975c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8019760:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019764:	2b00      	cmp	r3, #0
 8019766:	d052      	beq.n	801980e <http_send+0x28e>
    if (len == 0) {
 8019768:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801976c:	e724      	b.n	80195b8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801976e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80199d0 <http_send+0x450>
 8019772:	7d21      	ldrb	r1, [r4, #20]
 8019774:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8019778:	f8d1 e004 	ldr.w	lr, [r1, #4]
 801977c:	6821      	ldr	r1, [r4, #0]
 801977e:	f89e a000 	ldrb.w	sl, [lr]
 8019782:	f891 c000 	ldrb.w	ip, [r1]
 8019786:	45e2      	cmp	sl, ip
 8019788:	d072      	beq.n	8019870 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 801978a:	f1ac 0c09 	sub.w	ip, ip, #9
 801978e:	fa5f fc8c 	uxtb.w	ip, ip
 8019792:	f1bc 0f17 	cmp.w	ip, #23
 8019796:	d964      	bls.n	8019862 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8019798:	2807      	cmp	r0, #7
 801979a:	f67f af7d 	bls.w	8019698 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 801979e:	2300      	movs	r3, #0
 80197a0:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 80197a4:	e756      	b.n	8019654 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80197a6:	f894 9014 	ldrb.w	r9, [r4, #20]
 80197aa:	f8df c224 	ldr.w	ip, [pc, #548]	; 80199d0 <http_send+0x450>
 80197ae:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 80197b2:	f8dc c004 	ldr.w	ip, [ip, #4]
 80197b6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 80197ba:	45f1      	cmp	r9, lr
 80197bc:	f000 80a1 	beq.w	8019902 <http_send+0x382>
          ssi->parse_left--;
 80197c0:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 80197c2:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 80197c4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80197c8:	3b01      	subs	r3, #1
          ssi->parsed++;
 80197ca:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 80197cc:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 80197ce:	2300      	movs	r3, #0
 80197d0:	e6f8      	b.n	80195c4 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 80197d2:	8a21      	ldrh	r1, [r4, #16]
 80197d4:	8a60      	ldrh	r0, [r4, #18]
 80197d6:	4281      	cmp	r1, r0
 80197d8:	f0c0 80e0 	bcc.w	801999c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 80197dc:	6023      	str	r3, [r4, #0]
 80197de:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 80197e0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 80197e4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 80197e8:	e6ec      	b.n	80195c4 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80197ea:	6820      	ldr	r0, [r4, #0]
 80197ec:	f890 e000 	ldrb.w	lr, [r0]
 80197f0:	458e      	cmp	lr, r1
 80197f2:	f000 80ce 	beq.w	8019992 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 80197f6:	2300      	movs	r3, #0
 80197f8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80197fc:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 80197fe:	3001      	adds	r0, #1
          ssi->parse_left--;
 8019800:	3901      	subs	r1, #1
          ssi->parsed++;
 8019802:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8019804:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8019806:	e6db      	b.n	80195c0 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019808:	2b04      	cmp	r3, #4
 801980a:	f47f af70 	bne.w	80196ee <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801980e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019810:	2b00      	cmp	r3, #0
 8019812:	d18d      	bne.n	8019730 <http_send+0x1b0>
 8019814:	6968      	ldr	r0, [r5, #20]
 8019816:	f7ff fb31 	bl	8018e7c <fs_bytes_left>
 801981a:	2800      	cmp	r0, #0
 801981c:	dc88      	bgt.n	8019730 <http_send+0x1b0>
      return 0;
 801981e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8019822:	4638      	mov	r0, r7
 8019824:	4629      	mov	r1, r5
 8019826:	f7ff fe83 	bl	8019530 <http_eof>
}
 801982a:	4640      	mov	r0, r8
 801982c:	b007      	add	sp, #28
 801982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019832:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019834:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8019838:	2a00      	cmp	r2, #0
 801983a:	f47f aee7 	bne.w	801960c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801983e:	428b      	cmp	r3, r1
 8019840:	d805      	bhi.n	801984e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019842:	68a0      	ldr	r0, [r4, #8]
 8019844:	1ac3      	subs	r3, r0, r3
 8019846:	441a      	add	r2, r3
 8019848:	b292      	uxth	r2, r2
 801984a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 801984e:	4411      	add	r1, r2
 8019850:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8019852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8019854:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8019858:	1a9b      	subs	r3, r3, r2
 801985a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801985c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019860:	e6ae      	b.n	80195c0 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019862:	f8df a188 	ldr.w	sl, [pc, #392]	; 80199ec <http_send+0x46c>
 8019866:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 801986a:	f01c 0f01 	tst.w	ip, #1
 801986e:	d093      	beq.n	8019798 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8019870:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019872:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8019874:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019878:	f200 80e0 	bhi.w	8019a3c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801987c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 801987e:	4420      	add	r0, r4
 8019880:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019884:	f89e 3000 	ldrb.w	r3, [lr]
 8019888:	780a      	ldrb	r2, [r1, #0]
 801988a:	429a      	cmp	r2, r3
 801988c:	f000 80cf 	beq.w	8019a2e <http_send+0x4ae>
              ssi->tag_index = 0;
 8019890:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019894:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019898:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801989c:	e6da      	b.n	8019654 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801989e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80199ec <http_send+0x46c>
 80198a2:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80198a6:	f01c 0f01 	tst.w	ip, #1
 80198aa:	f47f aed3 	bne.w	8019654 <http_send+0xd4>
 80198ae:	e6e6      	b.n	801967e <http_send+0xfe>
  if (hs->handle == NULL) {
 80198b0:	6948      	ldr	r0, [r1, #20]
 80198b2:	2800      	cmp	r0, #0
 80198b4:	d0b3      	beq.n	801981e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 80198b6:	f7ff fae1 	bl	8018e7c <fs_bytes_left>
  if (bytes_left <= 0) {
 80198ba:	2800      	cmp	r0, #0
 80198bc:	ddaf      	ble.n	801981e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80198be:	4b45      	ldr	r3, [pc, #276]	; (80199d4 <http_send+0x454>)
 80198c0:	f240 429d 	movw	r2, #1181	; 0x49d
 80198c4:	4944      	ldr	r1, [pc, #272]	; (80199d8 <http_send+0x458>)
 80198c6:	4845      	ldr	r0, [pc, #276]	; (80199dc <http_send+0x45c>)
 80198c8:	f00c fd44 	bl	8026354 <iprintf>
  if (hs->ssi) {
 80198cc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80198ce:	2c00      	cmp	r4, #0
 80198d0:	f47f ae66 	bne.w	80195a0 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80198d4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80198d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80198dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80198de:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80198e0:	428a      	cmp	r2, r1
 80198e2:	bf88      	it	hi
 80198e4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80198e6:	4623      	mov	r3, r4
 80198e8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80198ea:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80198ee:	f10d 0216 	add.w	r2, sp, #22
 80198f2:	f7ff fac7 	bl	8018e84 <http_write>
  if (err == ERR_OK) {
 80198f6:	2800      	cmp	r0, #0
 80198f8:	f43f af0e 	beq.w	8019718 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80198fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 80198fe:	46a0      	mov	r8, r4
 8019900:	e714      	b.n	801972c <http_send+0x1ac>
          ssi->parsed++;
 8019902:	3101      	adds	r1, #1
          ssi->tag_index++;
 8019904:	3001      	adds	r0, #1
          ssi->parsed++;
 8019906:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8019908:	b280      	uxth	r0, r0
          ssi->parse_left--;
 801990a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 801990c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 801990e:	3901      	subs	r1, #1
 8019910:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8019912:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8019916:	2900      	cmp	r1, #0
 8019918:	f47f ae52 	bne.w	80195c0 <http_send+0x40>
  ssi = hs->ssi;
 801991c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019920:	f1b9 0f00 	cmp.w	r9, #0
 8019924:	f000 8115 	beq.w	8019b52 <http_send+0x5d2>
  if (httpd_ssi_handler
 8019928:	4b2d      	ldr	r3, [pc, #180]	; (80199e0 <http_send+0x460>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	9300      	str	r3, [sp, #0]
 801992e:	2b00      	cmp	r3, #0
 8019930:	f000 8093 	beq.w	8019a5a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8019934:	4b2b      	ldr	r3, [pc, #172]	; (80199e4 <http_send+0x464>)
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	2a00      	cmp	r2, #0
 801993a:	f000 808e 	beq.w	8019a5a <http_send+0x4da>
 801993e:	4b2a      	ldr	r3, [pc, #168]	; (80199e8 <http_send+0x468>)
 8019940:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019942:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8019944:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019946:	f340 8088 	ble.w	8019a5a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801994a:	f109 0a16 	add.w	sl, r9, #22
 801994e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019950:	2300      	movs	r3, #0
 8019952:	9503      	str	r5, [sp, #12]
 8019954:	460d      	mov	r5, r1
 8019956:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801995a:	4656      	mov	r6, sl
 801995c:	461c      	mov	r4, r3
 801995e:	4692      	mov	sl, r2
 8019960:	e003      	b.n	801996a <http_send+0x3ea>
 8019962:	3401      	adds	r4, #1
 8019964:	42a5      	cmp	r5, r4
 8019966:	f000 8105 	beq.w	8019b74 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801996a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801996e:	4630      	mov	r0, r6
 8019970:	f7e6 fc66 	bl	8000240 <strcmp>
 8019974:	2800      	cmp	r0, #0
 8019976:	d1f4      	bne.n	8019962 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8019978:	4623      	mov	r3, r4
 801997a:	22fe      	movs	r2, #254	; 0xfe
 801997c:	f109 011f 	add.w	r1, r9, #31
 8019980:	9e02      	ldr	r6, [sp, #8]
 8019982:	4618      	mov	r0, r3
 8019984:	9b00      	ldr	r3, [sp, #0]
 8019986:	9c01      	ldr	r4, [sp, #4]
 8019988:	9d03      	ldr	r5, [sp, #12]
 801998a:	4798      	blx	r3
 801998c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8019990:	e0a6      	b.n	8019ae0 <http_send+0x560>
            ssi->tag_index++;
 8019992:	f10c 0c01 	add.w	ip, ip, #1
 8019996:	f8a4 c010 	strh.w	ip, [r4, #16]
 801999a:	e72f      	b.n	80197fc <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 801999c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801999e:	311f      	adds	r1, #31
 80199a0:	f10d 0216 	add.w	r2, sp, #22
 80199a4:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 80199a6:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80199aa:	4421      	add	r1, r4
 80199ac:	4638      	mov	r0, r7
 80199ae:	f7ff fa69 	bl	8018e84 <http_write>
              ssi->tag_index += len;
 80199b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 80199b6:	4606      	mov	r6, r0
 80199b8:	2800      	cmp	r0, #0
 80199ba:	f47f af4f 	bne.w	801985c <http_send+0x2dc>
              ssi->tag_index += len;
 80199be:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 80199c0:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 80199c4:	4413      	add	r3, r2
 80199c6:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80199c8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80199cc:	e5f8      	b.n	80195c0 <http_send+0x40>
 80199ce:	bf00      	nop
 80199d0:	08044640 	.word	0x08044640
 80199d4:	08044334 	.word	0x08044334
 80199d8:	08044414 	.word	0x08044414
 80199dc:	0802b034 	.word	0x0802b034
 80199e0:	2001ee00 	.word	0x2001ee00
 80199e4:	2001ee04 	.word	0x2001ee04
 80199e8:	2001e9fc 	.word	0x2001e9fc
 80199ec:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80199f0:	4b63      	ldr	r3, [pc, #396]	; (8019b80 <http_send+0x600>)
 80199f2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80199f6:	4963      	ldr	r1, [pc, #396]	; (8019b84 <http_send+0x604>)
 80199f8:	4863      	ldr	r0, [pc, #396]	; (8019b88 <http_send+0x608>)
 80199fa:	f00c fcab 	bl	8026354 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80199fe:	6863      	ldr	r3, [r4, #4]
 8019a00:	69a9      	ldr	r1, [r5, #24]
 8019a02:	e5f9      	b.n	80195f8 <http_send+0x78>
      hs->file += len;
 8019a04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8019a08:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8019a0c:	69ab      	ldr	r3, [r5, #24]
 8019a0e:	4413      	add	r3, r2
 8019a10:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8019a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019a14:	1a9b      	subs	r3, r3, r2
 8019a16:	626b      	str	r3, [r5, #36]	; 0x24
 8019a18:	e6a2      	b.n	8019760 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8019a1a:	6863      	ldr	r3, [r4, #4]
 8019a1c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019a1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a22:	e70c      	b.n	801983e <http_send+0x2be>
    return 0;
 8019a24:	4688      	mov	r8, r1
}
 8019a26:	4640      	mov	r0, r8
 8019a28:	b007      	add	sp, #28
 8019a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8019a2e:	2301      	movs	r3, #1
 8019a30:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019a32:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019a36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a3a:	e60b      	b.n	8019654 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019a3c:	4b50      	ldr	r3, [pc, #320]	; (8019b80 <http_send+0x600>)
 8019a3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8019a42:	4952      	ldr	r1, [pc, #328]	; (8019b8c <http_send+0x60c>)
 8019a44:	4850      	ldr	r0, [pc, #320]	; (8019b88 <http_send+0x608>)
 8019a46:	f00c fc85 	bl	8026354 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019a4a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019a4c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019a4e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8019a52:	6821      	ldr	r1, [r4, #0]
 8019a54:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8019a58:	e710      	b.n	801987c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019a5a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019a5e:	4650      	mov	r0, sl
 8019a60:	f7e6 fbf8 	bl	8000254 <strlen>
 8019a64:	28e4      	cmp	r0, #228	; 0xe4
 8019a66:	d865      	bhi.n	8019b34 <http_send+0x5b4>
 8019a68:	2809      	cmp	r0, #9
 8019a6a:	bf28      	it	cs
 8019a6c:	2009      	movcs	r0, #9
 8019a6e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8019a72:	4686      	mov	lr, r0
 8019a74:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019a76:	f100 0319 	add.w	r3, r0, #25
 8019a7a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019a7c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8019b9c <http_send+0x61c>
 8019a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a84:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8019a88:	f8bc 3000 	ldrh.w	r3, [ip]
 8019a8c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019a90:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019a94:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019a98:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019a9a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019a9e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019aa0:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019aa4:	f00b fc90 	bl	80253c8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019aa8:	4b39      	ldr	r3, [pc, #228]	; (8019b90 <http_send+0x610>)
 8019aaa:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019aac:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019aae:	eb09 0e02 	add.w	lr, r9, r2
 8019ab2:	6818      	ldr	r0, [r3, #0]
 8019ab4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019ab8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019aba:	799b      	ldrb	r3, [r3, #6]
 8019abc:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8019ac0:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019ac4:	f8ae c004 	strh.w	ip, [lr, #4]
 8019ac8:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019acc:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8019ad0:	f7e6 fbc0 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019ad4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8019ad8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019ada:	d232      	bcs.n	8019b42 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8019adc:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8019ae0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8019ae2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8019ae4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8019ae6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8019aea:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8019aec:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8019af0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8019af2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8019af4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8019af6:	d802      	bhi.n	8019afe <http_send+0x57e>
    if (len == 0) {
 8019af8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019afc:	e566      	b.n	80195cc <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019afe:	1a52      	subs	r2, r2, r1
 8019b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b04:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019b06:	429a      	cmp	r2, r3
 8019b08:	bfa8      	it	ge
 8019b0a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b0c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019b0e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b12:	f10d 0216 	add.w	r2, sp, #22
 8019b16:	f7ff f9b5 	bl	8018e84 <http_write>
              if (err == ERR_OK) {
 8019b1a:	4606      	mov	r6, r0
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	f47f ad7f 	bne.w	8019620 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8019b22:	6861      	ldr	r1, [r4, #4]
 8019b24:	69ab      	ldr	r3, [r5, #24]
 8019b26:	4299      	cmp	r1, r3
 8019b28:	d91b      	bls.n	8019b62 <http_send+0x5e2>
                hs->file += len;
 8019b2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019b2e:	4413      	add	r3, r2
 8019b30:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8019b32:	e68e      	b.n	8019852 <http_send+0x2d2>
 8019b34:	233a      	movs	r3, #58	; 0x3a
 8019b36:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019b38:	f04f 0e09 	mov.w	lr, #9
 8019b3c:	e9cd 3200 	strd	r3, r2, [sp]
 8019b40:	e79c      	b.n	8019a7c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019b42:	4b0f      	ldr	r3, [pc, #60]	; (8019b80 <http_send+0x600>)
 8019b44:	f240 323f 	movw	r2, #831	; 0x33f
 8019b48:	4912      	ldr	r1, [pc, #72]	; (8019b94 <http_send+0x614>)
 8019b4a:	480f      	ldr	r0, [pc, #60]	; (8019b88 <http_send+0x608>)
 8019b4c:	f00c fc02 	bl	8026354 <iprintf>
 8019b50:	e7c4      	b.n	8019adc <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019b52:	4b0b      	ldr	r3, [pc, #44]	; (8019b80 <http_send+0x600>)
 8019b54:	f240 3206 	movw	r2, #774	; 0x306
 8019b58:	490f      	ldr	r1, [pc, #60]	; (8019b98 <http_send+0x618>)
 8019b5a:	480b      	ldr	r0, [pc, #44]	; (8019b88 <http_send+0x608>)
 8019b5c:	f00c fbfa 	bl	8026354 <iprintf>
 8019b60:	e6e2      	b.n	8019928 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019b62:	68a2      	ldr	r2, [r4, #8]
 8019b64:	1a52      	subs	r2, r2, r1
 8019b66:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019b6a:	440a      	add	r2, r1
 8019b6c:	b292      	uxth	r2, r2
 8019b6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019b72:	e7dc      	b.n	8019b2e <http_send+0x5ae>
 8019b74:	46b2      	mov	sl, r6
 8019b76:	9c01      	ldr	r4, [sp, #4]
 8019b78:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8019b7c:	e76f      	b.n	8019a5e <http_send+0x4de>
 8019b7e:	bf00      	nop
 8019b80:	08044334 	.word	0x08044334
 8019b84:	0804449c 	.word	0x0804449c
 8019b88:	0802b034 	.word	0x0802b034
 8019b8c:	0804444c 	.word	0x0804444c
 8019b90:	08044484 	.word	0x08044484
 8019b94:	0804448c 	.word	0x0804448c
 8019b98:	08044464 	.word	0x08044464
 8019b9c:	08044470 	.word	0x08044470

08019ba0 <http_sent>:
{
 8019ba0:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	b130      	cbz	r0, 8019bb4 <http_sent+0x14>
  hs->retries = 0;
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8019baa:	4619      	mov	r1, r3
  hs->retries = 0;
 8019bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8019bb0:	f7ff fce6 	bl	8019580 <http_send>
}
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	bd08      	pop	{r3, pc}

08019bb8 <http_poll>:
{
 8019bb8:	b510      	push	{r4, lr}
 8019bba:	460c      	mov	r4, r1
  if (hs == NULL) {
 8019bbc:	b1a8      	cbz	r0, 8019bea <http_poll+0x32>
    hs->retries++;
 8019bbe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019bc6:	2b04      	cmp	r3, #4
    hs->retries++;
 8019bc8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019bcc:	d019      	beq.n	8019c02 <http_poll+0x4a>
    if (hs->handle) {
 8019bce:	6943      	ldr	r3, [r0, #20]
 8019bd0:	b123      	cbz	r3, 8019bdc <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8019bd2:	4601      	mov	r1, r0
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	f7ff fcd3 	bl	8019580 <http_send>
 8019bda:	b908      	cbnz	r0, 8019be0 <http_poll+0x28>
  return ERR_OK;
 8019bdc:	2000      	movs	r0, #0
}
 8019bde:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8019be0:	4620      	mov	r0, r4
 8019be2:	f006 fc9f 	bl	8020524 <tcp_output>
  return ERR_OK;
 8019be6:	2000      	movs	r0, #0
 8019be8:	e7f9      	b.n	8019bde <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019bea:	4601      	mov	r1, r0
 8019bec:	4620      	mov	r0, r4
 8019bee:	f7ff fc23 	bl	8019438 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	d1f2      	bne.n	8019bdc <http_poll+0x24>
      altcp_abort(pcb);
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f003 fd66 	bl	801d6c8 <tcp_abort>
      return ERR_ABRT;
 8019bfc:	f06f 000c 	mvn.w	r0, #12
}
 8019c00:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8019c02:	4601      	mov	r1, r0
 8019c04:	4620      	mov	r0, r4
 8019c06:	f7ff fc17 	bl	8019438 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8019c0a:	2000      	movs	r0, #0
}
 8019c0c:	bd10      	pop	{r4, pc}
 8019c0e:	bf00      	nop

08019c10 <http_recv>:
{
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	4605      	mov	r5, r0
 8019c16:	b08d      	sub	sp, #52	; 0x34
 8019c18:	460e      	mov	r6, r1
 8019c1a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8019c1c:	b9ab      	cbnz	r3, 8019c4a <http_recv+0x3a>
 8019c1e:	fab2 f782 	clz	r7, r2
 8019c22:	097f      	lsrs	r7, r7, #5
 8019c24:	b1ca      	cbz	r2, 8019c5a <http_recv+0x4a>
 8019c26:	b188      	cbz	r0, 8019c4c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8019c28:	8911      	ldrh	r1, [r2, #8]
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	f002 ff48 	bl	801cac0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8019c30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f040 813c 	bne.w	8019eb0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8019c38:	696b      	ldr	r3, [r5, #20]
 8019c3a:	b1b3      	cbz	r3, 8019c6a <http_recv+0x5a>
      pbuf_free(p);
 8019c3c:	4620      	mov	r0, r4
 8019c3e:	f002 fabf 	bl	801c1c0 <pbuf_free>
}
 8019c42:	2000      	movs	r0, #0
 8019c44:	b00d      	add	sp, #52	; 0x34
 8019c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8019c4a:	b132      	cbz	r2, 8019c5a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8019c4c:	4630      	mov	r0, r6
 8019c4e:	8921      	ldrh	r1, [r4, #8]
 8019c50:	f002 ff36 	bl	801cac0 <tcp_recved>
      pbuf_free(p);
 8019c54:	4620      	mov	r0, r4
 8019c56:	f002 fab3 	bl	801c1c0 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019c5a:	4629      	mov	r1, r5
 8019c5c:	4630      	mov	r0, r6
 8019c5e:	f7ff fbeb 	bl	8019438 <http_close_or_abort_conn.constprop.0>
}
 8019c62:	2000      	movs	r0, #0
 8019c64:	b00d      	add	sp, #52	; 0x34
 8019c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8019c6a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8019c6c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	f040 8173 	bne.w	8019f5a <http_recv+0x34a>
  if (hs->req == NULL) {
 8019c74:	2800      	cmp	r0, #0
 8019c76:	f000 8136 	beq.w	8019ee6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 8019c7a:	4621      	mov	r1, r4
 8019c7c:	f002 fad2 	bl	801c224 <pbuf_cat>
  pbuf_ref(p);
 8019c80:	4620      	mov	r0, r4
 8019c82:	f002 fabb 	bl	801c1fc <pbuf_ref>
  if (hs->req->next != NULL) {
 8019c86:	6a28      	ldr	r0, [r5, #32]
 8019c88:	6803      	ldr	r3, [r0, #0]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	f000 812d 	beq.w	8019eea <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8019c90:	8907      	ldrh	r7, [r0, #8]
 8019c92:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8019c96:	49bc      	ldr	r1, [pc, #752]	; (8019f88 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8019c98:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 8019c9a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8019c9c:	bf28      	it	cs
 8019c9e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	463a      	mov	r2, r7
 8019ca4:	f002 fb30 	bl	801c308 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8019ca8:	2f06      	cmp	r7, #6
 8019caa:	f240 80ef 	bls.w	8019e8c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8019cae:	463a      	mov	r2, r7
 8019cb0:	49b6      	ldr	r1, [pc, #728]	; (8019f8c <http_recv+0x37c>)
 8019cb2:	4640      	mov	r0, r8
 8019cb4:	f000 fa4e 	bl	801a154 <lwip_strnstr>
    if (crlf != NULL) {
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	f000 80e7 	beq.w	8019e8c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8019cbe:	2204      	movs	r2, #4
 8019cc0:	49b3      	ldr	r1, [pc, #716]	; (8019f90 <http_recv+0x380>)
 8019cc2:	4640      	mov	r0, r8
 8019cc4:	f00d fb1a 	bl	80272fc <strncmp>
 8019cc8:	4682      	mov	sl, r0
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	f040 8118 	bne.w	8019f00 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8019cd0:	1f3a      	subs	r2, r7, #4
 8019cd2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8019cd6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8019cda:	49ae      	ldr	r1, [pc, #696]	; (8019f94 <http_recv+0x384>)
 8019cdc:	b292      	uxth	r2, r2
 8019cde:	4658      	mov	r0, fp
 8019ce0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8019ce4:	f000 fa36 	bl	801a154 <lwip_strnstr>
      if (sp2 == NULL) {
 8019ce8:	9a05      	ldr	r2, [sp, #20]
 8019cea:	4681      	mov	r9, r0
 8019cec:	2800      	cmp	r0, #0
 8019cee:	f000 8123 	beq.w	8019f38 <http_recv+0x328>
      int is_09 = 0;
 8019cf2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8019cf4:	9305      	str	r3, [sp, #20]
 8019cf6:	f1b9 0f00 	cmp.w	r9, #0
 8019cfa:	f000 80c7 	beq.w	8019e8c <http_recv+0x27c>
 8019cfe:	9b04      	ldr	r3, [sp, #16]
 8019d00:	4599      	cmp	r9, r3
 8019d02:	f240 80c3 	bls.w	8019e8c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8019d06:	463a      	mov	r2, r7
 8019d08:	49a3      	ldr	r1, [pc, #652]	; (8019f98 <http_recv+0x388>)
 8019d0a:	4640      	mov	r0, r8
 8019d0c:	f000 fa22 	bl	801a154 <lwip_strnstr>
 8019d10:	2800      	cmp	r0, #0
 8019d12:	f000 80bb 	beq.w	8019e8c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8019d16:	9b05      	ldr	r3, [sp, #20]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	f000 812b 	beq.w	8019f74 <http_recv+0x364>
            hs->keepalive = 0;
 8019d1e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8019d20:	eba9 020b 	sub.w	r2, r9, fp
 8019d24:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8019d28:	2100      	movs	r1, #0
 8019d2a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8019d2c:	b292      	uxth	r2, r2
          *sp1 = 0;
 8019d2e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8019d30:	f80b 1002 	strb.w	r1, [fp, r2]
 8019d34:	445a      	add	r2, fp
 8019d36:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8019d38:	f1ba 0f00 	cmp.w	sl, #0
 8019d3c:	f000 8113 	beq.w	8019f66 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8019d40:	f109 0301 	add.w	r3, r9, #1
 8019d44:	4994      	ldr	r1, [pc, #592]	; (8019f98 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8019d46:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8019d4a:	eba3 0208 	sub.w	r2, r3, r8
 8019d4e:	4618      	mov	r0, r3
 8019d50:	9305      	str	r3, [sp, #20]
 8019d52:	1aba      	subs	r2, r7, r2
 8019d54:	f000 f9fe 	bl	801a154 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8019d58:	9008      	str	r0, [sp, #32]
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	f000 8168 	beq.w	801a030 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8019d60:	9b05      	ldr	r3, [sp, #20]
 8019d62:	498e      	ldr	r1, [pc, #568]	; (8019f9c <http_recv+0x38c>)
 8019d64:	1ac2      	subs	r2, r0, r3
 8019d66:	4618      	mov	r0, r3
 8019d68:	f000 f9f4 	bl	801a154 <lwip_strnstr>
    if (scontent_len != NULL) {
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	9009      	str	r0, [sp, #36]	; 0x24
 8019d70:	2800      	cmp	r0, #0
 8019d72:	f000 812f 	beq.w	8019fd4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8019d76:	3310      	adds	r3, #16
 8019d78:	220a      	movs	r2, #10
 8019d7a:	4984      	ldr	r1, [pc, #528]	; (8019f8c <http_recv+0x37c>)
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	9307      	str	r3, [sp, #28]
 8019d80:	f000 f9e8 	bl	801a154 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8019d84:	2800      	cmp	r0, #0
 8019d86:	f000 8125 	beq.w	8019fd4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8019d8a:	9b07      	ldr	r3, [sp, #28]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f00b f8bd 	bl	8024f0c <atoi>
        if (content_len == 0) {
 8019d92:	1e02      	subs	r2, r0, #0
 8019d94:	9207      	str	r2, [sp, #28]
 8019d96:	f040 811b 	bne.w	8019fd0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8019d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9c:	7c1b      	ldrb	r3, [r3, #16]
 8019d9e:	2b30      	cmp	r3, #48	; 0x30
 8019da0:	f040 8118 	bne.w	8019fd4 <http_recv+0x3c4>
 8019da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019da6:	7c5b      	ldrb	r3, [r3, #17]
 8019da8:	2b0d      	cmp	r3, #13
 8019daa:	f040 8113 	bne.w	8019fd4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8019dae:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8019db0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8019db2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8019db4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8019db6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8019db8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8019fb4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8019dbc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8019dc0:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8019dc4:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8019dc6:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8019dc8:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8019dca:	9a05      	ldr	r2, [sp, #20]
 8019dcc:	bfb4      	ite	lt
 8019dce:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8019dd0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8019dd4:	429f      	cmp	r7, r3
 8019dd6:	bfa8      	it	ge
 8019dd8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8019dda:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8019ddc:	2700      	movs	r7, #0
 8019dde:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8019de2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8019de4:	9807      	ldr	r0, [sp, #28]
 8019de6:	f8cd b004 	str.w	fp, [sp, #4]
 8019dea:	9000      	str	r0, [sp, #0]
 8019dec:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8019df0:	9003      	str	r0, [sp, #12]
 8019df2:	203f      	movs	r0, #63	; 0x3f
 8019df4:	9002      	str	r0, [sp, #8]
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7ee fee2 	bl	8008bc0 <httpd_post_begin>
          if (err == ERR_OK) {
 8019dfc:	2800      	cmp	r0, #0
 8019dfe:	f040 80f7 	bne.w	8019ff0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8019e02:	9807      	ldr	r0, [sp, #28]
 8019e04:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8019e06:	f1ba 0f00 	cmp.w	sl, #0
 8019e0a:	f000 80d5 	beq.w	8019fb8 <http_recv+0x3a8>
 8019e0e:	4652      	mov	r2, sl
 8019e10:	e005      	b.n	8019e1e <http_recv+0x20e>
              q = q->next;
 8019e12:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8019e14:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	f000 80cd 	beq.w	8019fb8 <http_recv+0x3a8>
 8019e1e:	8953      	ldrh	r3, [r2, #10]
 8019e20:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8019e22:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8019e26:	d9f4      	bls.n	8019e12 <http_recv+0x202>
 8019e28:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8019e2a:	4641      	mov	r1, r8
 8019e2c:	4610      	mov	r0, r2
 8019e2e:	f002 f93b 	bl	801c0a8 <pbuf_remove_header>
              pbuf_ref(q);
 8019e32:	4650      	mov	r0, sl
 8019e34:	f002 f9e2 	bl	801c1fc <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8019e38:	4651      	mov	r1, sl
 8019e3a:	4628      	mov	r0, r5
 8019e3c:	f7ff fa98 	bl	8019370 <http_post_rxpbuf>
 8019e40:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8019e42:	2f00      	cmp	r7, #0
 8019e44:	f000 80ba 	beq.w	8019fbc <http_recv+0x3ac>
              *sp1 = ' ';
 8019e48:	2320      	movs	r3, #32
 8019e4a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8019e4c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8019e50:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8019e52:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8019e54:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8019e58:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8019e5a:	d022      	beq.n	8019ea2 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8019e5c:	2f00      	cmp	r7, #0
 8019e5e:	d048      	beq.n	8019ef2 <http_recv+0x2e2>
 8019e60:	1d7a      	adds	r2, r7, #5
 8019e62:	f43f aeeb 	beq.w	8019c3c <http_recv+0x2c>
 8019e66:	f027 0308 	bic.w	r3, r7, #8
 8019e6a:	b25b      	sxtb	r3, r3
 8019e6c:	3310      	adds	r3, #16
 8019e6e:	d12e      	bne.n	8019ece <http_recv+0x2be>
        if (hs->req != NULL) {
 8019e70:	6a28      	ldr	r0, [r5, #32]
 8019e72:	b3a0      	cbz	r0, 8019ede <http_recv+0x2ce>
          pbuf_free(hs->req);
 8019e74:	f002 f9a4 	bl	801c1c0 <pbuf_free>
          hs->req = NULL;
 8019e78:	2300      	movs	r3, #0
 8019e7a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f002 f99f 	bl	801c1c0 <pbuf_free>
      if (parsed == ERR_OK) {
 8019e82:	b1df      	cbz	r7, 8019ebc <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8019e84:	3710      	adds	r7, #16
 8019e86:	f43f aee8 	beq.w	8019c5a <http_recv+0x4a>
 8019e8a:	e6ea      	b.n	8019c62 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8019e8c:	6a28      	ldr	r0, [r5, #32]
 8019e8e:	f002 f9ab 	bl	801c1e8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8019e92:	6a2b      	ldr	r3, [r5, #32]
 8019e94:	891b      	ldrh	r3, [r3, #8]
 8019e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e9a:	d202      	bcs.n	8019ea2 <http_recv+0x292>
 8019e9c:	2805      	cmp	r0, #5
 8019e9e:	f67f aecd 	bls.w	8019c3c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8019ea2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	f7ff fa88 	bl	80193bc <http_find_error_file>
 8019eac:	4607      	mov	r7, r0
 8019eae:	e7d5      	b.n	8019e5c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8019eb0:	4621      	mov	r1, r4
 8019eb2:	4628      	mov	r0, r5
    hs->retries = 0;
 8019eb4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8019eb8:	f7ff fa5a 	bl	8019370 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8019ebc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	f47f aecf 	bne.w	8019c62 <http_recv+0x52>
      http_send(pcb, hs);
 8019ec4:	4629      	mov	r1, r5
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f7ff fb5a 	bl	8019580 <http_send>
 8019ecc:	e6c9      	b.n	8019c62 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8019ece:	4b34      	ldr	r3, [pc, #208]	; (8019fa0 <http_recv+0x390>)
 8019ed0:	f640 2204 	movw	r2, #2564	; 0xa04
 8019ed4:	4933      	ldr	r1, [pc, #204]	; (8019fa4 <http_recv+0x394>)
 8019ed6:	4834      	ldr	r0, [pc, #208]	; (8019fa8 <http_recv+0x398>)
 8019ed8:	f00c fa3c 	bl	8026354 <iprintf>
 8019edc:	e7c8      	b.n	8019e70 <http_recv+0x260>
      pbuf_free(p);
 8019ede:	4620      	mov	r0, r4
 8019ee0:	f002 f96e 	bl	801c1c0 <pbuf_free>
      if (parsed == ERR_OK) {
 8019ee4:	e7ce      	b.n	8019e84 <http_recv+0x274>
    hs->req = p;
 8019ee6:	622c      	str	r4, [r5, #32]
 8019ee8:	e6ca      	b.n	8019c80 <http_recv+0x70>
    data = (char *)p->payload;
 8019eea:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8019eee:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8019ef0:	e6da      	b.n	8019ca8 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8019ef2:	1d7b      	adds	r3, r7, #5
 8019ef4:	f43f aea2 	beq.w	8019c3c <http_recv+0x2c>
        if (hs->req != NULL) {
 8019ef8:	6a28      	ldr	r0, [r5, #32]
 8019efa:	2800      	cmp	r0, #0
 8019efc:	d0be      	beq.n	8019e7c <http_recv+0x26c>
 8019efe:	e7b9      	b.n	8019e74 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8019f00:	2205      	movs	r2, #5
 8019f02:	492a      	ldr	r1, [pc, #168]	; (8019fac <http_recv+0x39c>)
 8019f04:	4640      	mov	r0, r8
 8019f06:	f00d f9f9 	bl	80272fc <strncmp>
 8019f0a:	9005      	str	r0, [sp, #20]
 8019f0c:	b9d8      	cbnz	r0, 8019f46 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8019f0e:	f1a7 0a05 	sub.w	sl, r7, #5
 8019f12:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8019f16:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8019f1a:	491e      	ldr	r1, [pc, #120]	; (8019f94 <http_recv+0x384>)
 8019f1c:	fa1f fa8a 	uxth.w	sl, sl
 8019f20:	4658      	mov	r0, fp
        sp1 = data + 4;
 8019f22:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8019f24:	4652      	mov	r2, sl
 8019f26:	f000 f915 	bl	801a154 <lwip_strnstr>
      if (sp2 == NULL) {
 8019f2a:	4681      	mov	r9, r0
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	d059      	beq.n	8019fe4 <http_recv+0x3d4>
        is_post = 1;
 8019f30:	f04f 0a01 	mov.w	sl, #1
 8019f34:	9b05      	ldr	r3, [sp, #20]
 8019f36:	e6dd      	b.n	8019cf4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8019f38:	4914      	ldr	r1, [pc, #80]	; (8019f8c <http_recv+0x37c>)
 8019f3a:	4658      	mov	r0, fp
 8019f3c:	f000 f90a 	bl	801a154 <lwip_strnstr>
        is_09 = 1;
 8019f40:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8019f42:	4681      	mov	r9, r0
        if (is_post) {
 8019f44:	e6d6      	b.n	8019cf4 <http_recv+0xe4>
        data[4] = 0;
 8019f46:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8019f48:	f240 11f5 	movw	r1, #501	; 0x1f5
 8019f4c:	4628      	mov	r0, r5
        data[4] = 0;
 8019f4e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8019f52:	f7ff fa33 	bl	80193bc <http_find_error_file>
 8019f56:	4607      	mov	r7, r0
 8019f58:	e780      	b.n	8019e5c <http_recv+0x24c>
        if (hs->req != NULL) {
 8019f5a:	2800      	cmp	r0, #0
 8019f5c:	f43f ae6e 	beq.w	8019c3c <http_recv+0x2c>
 8019f60:	f06f 0707 	mvn.w	r7, #7
 8019f64:	e786      	b.n	8019e74 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8019f66:	461a      	mov	r2, r3
 8019f68:	4659      	mov	r1, fp
 8019f6a:	4628      	mov	r0, r5
 8019f6c:	f7ff f910 	bl	8019190 <http_find_file>
 8019f70:	4607      	mov	r7, r0
 8019f72:	e773      	b.n	8019e5c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8019f74:	463a      	mov	r2, r7
 8019f76:	490e      	ldr	r1, [pc, #56]	; (8019fb0 <http_recv+0x3a0>)
 8019f78:	4640      	mov	r0, r8
 8019f7a:	f000 f8eb 	bl	801a154 <lwip_strnstr>
 8019f7e:	9b05      	ldr	r3, [sp, #20]
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d047      	beq.n	801a014 <http_recv+0x404>
            hs->keepalive = 1;
 8019f84:	2001      	movs	r0, #1
 8019f86:	e6cb      	b.n	8019d20 <http_recv+0x110>
 8019f88:	2001ea00 	.word	0x2001ea00
 8019f8c:	0802b158 	.word	0x0802b158
 8019f90:	080444b4 	.word	0x080444b4
 8019f94:	0802d9d8 	.word	0x0802d9d8
 8019f98:	0802b2d4 	.word	0x0802b2d4
 8019f9c:	0802b2dc 	.word	0x0802b2dc
 8019fa0:	08044334 	.word	0x08044334
 8019fa4:	080444f4 	.word	0x080444f4
 8019fa8:	0802b034 	.word	0x0802b034
 8019fac:	080444bc 	.word	0x080444bc
 8019fb0:	080444c4 	.word	0x080444c4
 8019fb4:	2001e9bc 	.word	0x2001e9bc
            } else if (hs->post_content_len_left == 0) {
 8019fb8:	9b07      	ldr	r3, [sp, #28]
 8019fba:	b303      	cbz	r3, 8019ffe <http_recv+0x3ee>
        if (hs->req != NULL) {
 8019fbc:	6a28      	ldr	r0, [r5, #32]
 8019fbe:	b398      	cbz	r0, 801a028 <http_recv+0x418>
          pbuf_free(hs->req);
 8019fc0:	f002 f8fe 	bl	801c1c0 <pbuf_free>
          hs->req = NULL;
 8019fc4:	2300      	movs	r3, #0
      pbuf_free(p);
 8019fc6:	4620      	mov	r0, r4
          hs->req = NULL;
 8019fc8:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8019fca:	f002 f8f9 	bl	801c1c0 <pbuf_free>
      if (parsed == ERR_OK) {
 8019fce:	e775      	b.n	8019ebc <http_recv+0x2ac>
        if (content_len >= 0) {
 8019fd0:	f6bf aeed 	bge.w	8019dae <http_recv+0x19e>
              *sp1 = ' ';
 8019fd4:	2320      	movs	r3, #32
 8019fd6:	9a04      	ldr	r2, [sp, #16]
 8019fd8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8019fda:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8019fdc:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8019fe0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8019fe2:	e75e      	b.n	8019ea2 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8019fe4:	4652      	mov	r2, sl
 8019fe6:	4658      	mov	r0, fp
 8019fe8:	4915      	ldr	r1, [pc, #84]	; (801a040 <http_recv+0x430>)
 8019fea:	f000 f8b3 	bl	801a154 <lwip_strnstr>
        if (is_post) {
 8019fee:	e758      	b.n	8019ea2 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8019ff0:	463a      	mov	r2, r7
 8019ff2:	4659      	mov	r1, fp
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	f7ff f8cb 	bl	8019190 <http_find_file>
 8019ffa:	4607      	mov	r7, r0
 8019ffc:	e721      	b.n	8019e42 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8019ffe:	9907      	ldr	r1, [sp, #28]
 801a000:	2241      	movs	r2, #65	; 0x41
 801a002:	4608      	mov	r0, r1
 801a004:	f001 ff0a 	bl	801be1c <pbuf_alloc>
 801a008:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801a00a:	4628      	mov	r0, r5
 801a00c:	f7ff f9b0 	bl	8019370 <http_post_rxpbuf>
 801a010:	4607      	mov	r7, r0
 801a012:	e716      	b.n	8019e42 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801a014:	463a      	mov	r2, r7
 801a016:	490b      	ldr	r1, [pc, #44]	; (801a044 <http_recv+0x434>)
 801a018:	4640      	mov	r0, r8
 801a01a:	f000 f89b 	bl	801a154 <lwip_strnstr>
            hs->keepalive = 1;
 801a01e:	3800      	subs	r0, #0
 801a020:	9b05      	ldr	r3, [sp, #20]
 801a022:	bf18      	it	ne
 801a024:	2001      	movne	r0, #1
 801a026:	e67b      	b.n	8019d20 <http_recv+0x110>
      pbuf_free(p);
 801a028:	4620      	mov	r0, r4
 801a02a:	f002 f8c9 	bl	801c1c0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a02e:	e745      	b.n	8019ebc <http_recv+0x2ac>
              *sp1 = ' ';
 801a030:	2320      	movs	r3, #32
 801a032:	9a04      	ldr	r2, [sp, #16]
 801a034:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a036:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a038:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a03c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801a03e:	e5fd      	b.n	8019c3c <http_recv+0x2c>
 801a040:	0802b158 	.word	0x0802b158
 801a044:	080444dc 	.word	0x080444dc

0801a048 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801a048:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801a04a:	202e      	movs	r0, #46	; 0x2e
 801a04c:	f003 fc60 	bl	801d910 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a050:	b358      	cbz	r0, 801a0aa <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801a052:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801a054:	2101      	movs	r1, #1
 801a056:	f002 fe3d 	bl	801ccd4 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801a05a:	2250      	movs	r2, #80	; 0x50
 801a05c:	4917      	ldr	r1, [pc, #92]	; (801a0bc <httpd_init+0x74>)
 801a05e:	4620      	mov	r0, r4
 801a060:	f002 fc0c 	bl	801c87c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a064:	b958      	cbnz	r0, 801a07e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801a066:	4620      	mov	r0, r4
 801a068:	21ff      	movs	r1, #255	; 0xff
 801a06a:	f002 fce9 	bl	801ca40 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a06e:	4604      	mov	r4, r0
 801a070:	b198      	cbz	r0, 801a09a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 801a072:	4620      	mov	r0, r4
 801a074:	4912      	ldr	r1, [pc, #72]	; (801a0c0 <httpd_init+0x78>)
}
 801a076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801a07a:	f002 beb9 	b.w	801cdf0 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a07e:	4b11      	ldr	r3, [pc, #68]	; (801a0c4 <httpd_init+0x7c>)
 801a080:	f640 2257 	movw	r2, #2647	; 0xa57
 801a084:	4910      	ldr	r1, [pc, #64]	; (801a0c8 <httpd_init+0x80>)
 801a086:	4811      	ldr	r0, [pc, #68]	; (801a0cc <httpd_init+0x84>)
 801a088:	f00c f964 	bl	8026354 <iprintf>
    pcb = altcp_listen(pcb);
 801a08c:	4620      	mov	r0, r4
 801a08e:	21ff      	movs	r1, #255	; 0xff
 801a090:	f002 fcd6 	bl	801ca40 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a094:	4604      	mov	r4, r0
 801a096:	2800      	cmp	r0, #0
 801a098:	d1eb      	bne.n	801a072 <httpd_init+0x2a>
 801a09a:	4b0a      	ldr	r3, [pc, #40]	; (801a0c4 <httpd_init+0x7c>)
 801a09c:	f640 2259 	movw	r2, #2649	; 0xa59
 801a0a0:	490b      	ldr	r1, [pc, #44]	; (801a0d0 <httpd_init+0x88>)
 801a0a2:	480a      	ldr	r0, [pc, #40]	; (801a0cc <httpd_init+0x84>)
 801a0a4:	f00c f956 	bl	8026354 <iprintf>
 801a0a8:	e7e3      	b.n	801a072 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a0aa:	4b06      	ldr	r3, [pc, #24]	; (801a0c4 <httpd_init+0x7c>)
 801a0ac:	f640 2272 	movw	r2, #2674	; 0xa72
 801a0b0:	4908      	ldr	r1, [pc, #32]	; (801a0d4 <httpd_init+0x8c>)
 801a0b2:	4806      	ldr	r0, [pc, #24]	; (801a0cc <httpd_init+0x84>)
}
 801a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a0b8:	f00c b94c 	b.w	8026354 <iprintf>
 801a0bc:	08046e50 	.word	0x08046e50
 801a0c0:	08018f39 	.word	0x08018f39
 801a0c4:	08044334 	.word	0x08044334
 801a0c8:	0804453c 	.word	0x0804453c
 801a0cc:	0802b034 	.word	0x0802b034
 801a0d0:	08044558 	.word	0x08044558
 801a0d4:	08044520 	.word	0x08044520

0801a0d8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801a0d8:	b570      	push	{r4, r5, r6, lr}
 801a0da:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a0dc:	4606      	mov	r6, r0
{
 801a0de:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a0e0:	b1c8      	cbz	r0, 801a116 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 801a0e2:	4b11      	ldr	r3, [pc, #68]	; (801a128 <http_set_ssi_handler+0x50>)
 801a0e4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801a0e6:	b175      	cbz	r5, 801a106 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a0e8:	2c00      	cmp	r4, #0
 801a0ea:	dd04      	ble.n	801a0f6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801a0ec:	4a0f      	ldr	r2, [pc, #60]	; (801a12c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801a0ee:	4b10      	ldr	r3, [pc, #64]	; (801a130 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 801a0f0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 801a0f2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 801a0f4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a0f6:	4b0f      	ldr	r3, [pc, #60]	; (801a134 <http_set_ssi_handler+0x5c>)
 801a0f8:	f640 229f 	movw	r2, #2719	; 0xa9f
 801a0fc:	490e      	ldr	r1, [pc, #56]	; (801a138 <http_set_ssi_handler+0x60>)
 801a0fe:	480f      	ldr	r0, [pc, #60]	; (801a13c <http_set_ssi_handler+0x64>)
 801a100:	f00c f928 	bl	8026354 <iprintf>
 801a104:	e7f2      	b.n	801a0ec <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 801a106:	4b0b      	ldr	r3, [pc, #44]	; (801a134 <http_set_ssi_handler+0x5c>)
 801a108:	f640 229e 	movw	r2, #2718	; 0xa9e
 801a10c:	490c      	ldr	r1, [pc, #48]	; (801a140 <http_set_ssi_handler+0x68>)
 801a10e:	480b      	ldr	r0, [pc, #44]	; (801a13c <http_set_ssi_handler+0x64>)
 801a110:	f00c f920 	bl	8026354 <iprintf>
 801a114:	e7e8      	b.n	801a0e8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a116:	4b07      	ldr	r3, [pc, #28]	; (801a134 <http_set_ssi_handler+0x5c>)
 801a118:	f640 2297 	movw	r2, #2711	; 0xa97
 801a11c:	4909      	ldr	r1, [pc, #36]	; (801a144 <http_set_ssi_handler+0x6c>)
 801a11e:	4807      	ldr	r0, [pc, #28]	; (801a13c <http_set_ssi_handler+0x64>)
 801a120:	f00c f918 	bl	8026354 <iprintf>
 801a124:	e7dd      	b.n	801a0e2 <http_set_ssi_handler+0xa>
 801a126:	bf00      	nop
 801a128:	2001ee00 	.word	0x2001ee00
 801a12c:	2001ee04 	.word	0x2001ee04
 801a130:	2001e9fc 	.word	0x2001e9fc
 801a134:	08044334 	.word	0x08044334
 801a138:	080445a0 	.word	0x080445a0
 801a13c:	0802b034 	.word	0x0802b034
 801a140:	08044590 	.word	0x08044590
 801a144:	08044578 	.word	0x08044578

0801a148 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801a148:	ba40      	rev16	r0, r0
}
 801a14a:	b280      	uxth	r0, r0
 801a14c:	4770      	bx	lr
 801a14e:	bf00      	nop

0801a150 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 801a150:	ba00      	rev	r0, r0
 801a152:	4770      	bx	lr

0801a154 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a158:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801a15a:	4608      	mov	r0, r1
{
 801a15c:	4688      	mov	r8, r1
 801a15e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801a160:	f7e6 f878 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 801a164:	b1c0      	cbz	r0, 801a198 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a166:	4605      	mov	r5, r0
 801a168:	7820      	ldrb	r0, [r4, #0]
 801a16a:	b1b0      	cbz	r0, 801a19a <lwip_strnstr+0x46>
 801a16c:	4426      	add	r6, r4
 801a16e:	1962      	adds	r2, r4, r5
 801a170:	4296      	cmp	r6, r2
 801a172:	d314      	bcc.n	801a19e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a174:	f898 7000 	ldrb.w	r7, [r8]
 801a178:	e005      	b.n	801a186 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a17a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801a17e:	1962      	adds	r2, r4, r5
 801a180:	b158      	cbz	r0, 801a19a <lwip_strnstr+0x46>
 801a182:	4296      	cmp	r6, r2
 801a184:	d30b      	bcc.n	801a19e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a186:	4287      	cmp	r7, r0
 801a188:	d1f7      	bne.n	801a17a <lwip_strnstr+0x26>
 801a18a:	4620      	mov	r0, r4
 801a18c:	462a      	mov	r2, r5
 801a18e:	4641      	mov	r1, r8
 801a190:	f00d f8b4 	bl	80272fc <strncmp>
 801a194:	2800      	cmp	r0, #0
 801a196:	d1f0      	bne.n	801a17a <lwip_strnstr+0x26>
 801a198:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801a19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801a19e:	2000      	movs	r0, #0
}
 801a1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1a4 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 801a1a4:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a1a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a1ac:	4293      	cmp	r3, r2
 801a1ae:	d01c      	beq.n	801a1ea <lwip_stricmp+0x46>
 801a1b0:	f043 0c20 	orr.w	ip, r3, #32
{
 801a1b4:	b500      	push	{lr}
 801a1b6:	f042 0e20 	orr.w	lr, r2, #32
 801a1ba:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a1be:	2a19      	cmp	r2, #25
 801a1c0:	d810      	bhi.n	801a1e4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a1c2:	45f4      	cmp	ip, lr
 801a1c4:	d10e      	bne.n	801a1e4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801a1c6:	b1a3      	cbz	r3, 801a1f2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801a1c8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a1cc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	d0f8      	beq.n	801a1c6 <lwip_stricmp+0x22>
 801a1d4:	f043 0c20 	orr.w	ip, r3, #32
 801a1d8:	f042 0e20 	orr.w	lr, r2, #32
 801a1dc:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a1e0:	2a19      	cmp	r2, #25
 801a1e2:	d9ee      	bls.n	801a1c2 <lwip_stricmp+0x1e>
        return 1;
 801a1e4:	2001      	movs	r0, #1
  return 0;
}
 801a1e6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d1da      	bne.n	801a1a4 <lwip_stricmp>
  return 0;
 801a1ee:	4618      	mov	r0, r3
}
 801a1f0:	4770      	bx	lr
  return 0;
 801a1f2:	4618      	mov	r0, r3
}
 801a1f4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a1f8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801a1f8:	4684      	mov	ip, r0
 801a1fa:	b570      	push	{r4, r5, r6, lr}
 801a1fc:	e004      	b.n	801a208 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a1fe:	42b4      	cmp	r4, r6
 801a200:	d113      	bne.n	801a22a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 801a202:	42e8      	cmn	r0, r5
 801a204:	d013      	beq.n	801a22e <lwip_strnicmp+0x36>
 801a206:	b193      	cbz	r3, 801a22e <lwip_strnicmp+0x36>
    c1 = *str1++;
 801a208:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801a20c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 801a210:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a214:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 801a218:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801a21a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a21e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 801a222:	d0ee      	beq.n	801a202 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a224:	f1be 0f19 	cmp.w	lr, #25
 801a228:	d9e9      	bls.n	801a1fe <lwip_strnicmp+0x6>
        return 1;
 801a22a:	2001      	movs	r0, #1
  return 0;
}
 801a22c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801a22e:	2000      	movs	r0, #0
}
 801a230:	bd70      	pop	{r4, r5, r6, pc}
 801a232:	bf00      	nop

0801a234 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801a234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a238:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a23a:	4f24      	ldr	r7, [pc, #144]	; (801a2cc <dns_call_found+0x98>)
 801a23c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a240:	4c23      	ldr	r4, [pc, #140]	; (801a2d0 <dns_call_found+0x9c>)
{
 801a242:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a244:	012e      	lsls	r6, r5, #4
 801a246:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 801a24a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 801a24e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a252:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801a256:	6823      	ldr	r3, [r4, #0]
 801a258:	b143      	cbz	r3, 801a26c <dns_call_found+0x38>
 801a25a:	7a22      	ldrb	r2, [r4, #8]
 801a25c:	42aa      	cmp	r2, r5
 801a25e:	d105      	bne.n	801a26c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a260:	6862      	ldr	r2, [r4, #4]
 801a262:	4651      	mov	r1, sl
 801a264:	4640      	mov	r0, r8
 801a266:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801a268:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a26c:	340c      	adds	r4, #12
 801a26e:	454c      	cmp	r4, r9
 801a270:	d1f1      	bne.n	801a256 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a272:	1973      	adds	r3, r6, r5
 801a274:	2400      	movs	r4, #0
 801a276:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801a27a:	4f14      	ldr	r7, [pc, #80]	; (801a2cc <dns_call_found+0x98>)
 801a27c:	7bd9      	ldrb	r1, [r3, #15]
 801a27e:	463a      	mov	r2, r7
    if (i == idx) {
 801a280:	b2e3      	uxtb	r3, r4
 801a282:	3401      	adds	r4, #1
 801a284:	429d      	cmp	r5, r3
 801a286:	d002      	beq.n	801a28e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801a288:	7a93      	ldrb	r3, [r2, #10]
 801a28a:	2b02      	cmp	r3, #2
 801a28c:	d015      	beq.n	801a2ba <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a28e:	2c04      	cmp	r4, #4
 801a290:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801a294:	d1f4      	bne.n	801a280 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a296:	2903      	cmp	r1, #3
 801a298:	d80d      	bhi.n	801a2b6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a29a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a29c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801a2d4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a2a0:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a2a4:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801a2a8:	f007 f860 	bl	802136c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a2b0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a2b2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801a2b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a2ba:	7bd3      	ldrb	r3, [r2, #15]
 801a2bc:	428b      	cmp	r3, r1
 801a2be:	d1e6      	bne.n	801a28e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a2c0:	4435      	add	r5, r6
 801a2c2:	2304      	movs	r3, #4
 801a2c4:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801a2c8:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a2ca:	e7f4      	b.n	801a2b6 <dns_call_found+0x82>
 801a2cc:	2001ee58 	.word	0x2001ee58
 801a2d0:	2001ee1c 	.word	0x2001ee1c
 801a2d4:	2001ee0c 	.word	0x2001ee0c

0801a2d8 <dns_send.isra.0>:
dns_send(u8_t idx)
 801a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a2dc:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801a2de:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a2e0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 801a2e4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a2e6:	9301      	str	r3, [sp, #4]
 801a2e8:	4b56      	ldr	r3, [pc, #344]	; (801a444 <dns_send.isra.0+0x16c>)
 801a2ea:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801a2ee:	7ae3      	ldrb	r3, [r4, #11]
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d907      	bls.n	801a304 <dns_send.isra.0+0x2c>
 801a2f4:	4b54      	ldr	r3, [pc, #336]	; (801a448 <dns_send.isra.0+0x170>)
 801a2f6:	f240 22fa 	movw	r2, #762	; 0x2fa
 801a2fa:	4954      	ldr	r1, [pc, #336]	; (801a44c <dns_send.isra.0+0x174>)
 801a2fc:	4854      	ldr	r0, [pc, #336]	; (801a450 <dns_send.isra.0+0x178>)
 801a2fe:	f00c f829 	bl	8026354 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801a302:	7ae3      	ldrb	r3, [r4, #11]
 801a304:	4a53      	ldr	r2, [pc, #332]	; (801a454 <dns_send.isra.0+0x17c>)
 801a306:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a30a:	2c00      	cmp	r4, #0
 801a30c:	f000 808b 	beq.w	801a426 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801a310:	9b01      	ldr	r3, [sp, #4]
 801a312:	4e4c      	ldr	r6, [pc, #304]	; (801a444 <dns_send.isra.0+0x16c>)
 801a314:	eb03 0409 	add.w	r4, r3, r9
 801a318:	0124      	lsls	r4, r4, #4
 801a31a:	f104 0510 	add.w	r5, r4, #16
 801a31e:	4435      	add	r5, r6
 801a320:	4628      	mov	r0, r5
 801a322:	f7e5 ff97 	bl	8000254 <strlen>
 801a326:	3012      	adds	r0, #18
 801a328:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a32c:	b281      	uxth	r1, r0
 801a32e:	2036      	movs	r0, #54	; 0x36
 801a330:	f001 fd74 	bl	801be1c <pbuf_alloc>
  if (p != NULL) {
 801a334:	4680      	mov	r8, r0
 801a336:	2800      	cmp	r0, #0
 801a338:	d06d      	beq.n	801a416 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801a33a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a33c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801a33e:	260c      	movs	r6, #12
    --hostname;
 801a340:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 801a342:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 801a344:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a348:	9305      	str	r3, [sp, #20]
 801a34a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801a34e:	f7ff fefb 	bl	801a148 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 801a352:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 801a354:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a358:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801a35a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801a35e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a362:	4632      	mov	r2, r6
 801a364:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 801a366:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a36a:	f002 f81d 	bl	801c3a8 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a36e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801a370:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a372:	2b2e      	cmp	r3, #46	; 0x2e
 801a374:	d052      	beq.n	801a41c <dns_send.isra.0+0x144>
 801a376:	2b00      	cmp	r3, #0
 801a378:	d050      	beq.n	801a41c <dns_send.isra.0+0x144>
      ++hostname;
 801a37a:	463d      	mov	r5, r7
 801a37c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801a380:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a382:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801a386:	2b2e      	cmp	r3, #46	; 0x2e
 801a388:	b2e4      	uxtb	r4, r4
 801a38a:	d001      	beq.n	801a390 <dns_send.isra.0+0xb8>
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d1f7      	bne.n	801a380 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 801a390:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 801a394:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 801a396:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801a39a:	4433      	add	r3, r6
 801a39c:	4553      	cmp	r3, sl
 801a39e:	dc37      	bgt.n	801a410 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 801a3a0:	4622      	mov	r2, r4
 801a3a2:	4631      	mov	r1, r6
 801a3a4:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a3a6:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 801a3a8:	f002 f8e4 	bl	801c574 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a3ac:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801a3ae:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a3b0:	465a      	mov	r2, fp
 801a3b2:	4639      	mov	r1, r7
 801a3b4:	b29b      	uxth	r3, r3
 801a3b6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a3b8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a3ba:	f002 f85b 	bl	801c474 <pbuf_take_at>
    } while (*hostname != 0);
 801a3be:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801a3c0:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801a3c2:	2a00      	cmp	r2, #0
 801a3c4:	d1d3      	bne.n	801a36e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 801a3c6:	4631      	mov	r1, r6
 801a3c8:	4640      	mov	r0, r8
 801a3ca:	f002 f8d3 	bl	801c574 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a3ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 801a3d2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a3d4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a3d6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a3da:	4640      	mov	r0, r8
 801a3dc:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801a3de:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a3e2:	2204      	movs	r2, #4
 801a3e4:	f002 f846 	bl	801c474 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 801a3e8:	9b01      	ldr	r3, [sp, #4]
 801a3ea:	4a16      	ldr	r2, [pc, #88]	; (801a444 <dns_send.isra.0+0x16c>)
 801a3ec:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a3ee:	4919      	ldr	r1, [pc, #100]	; (801a454 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 801a3f0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a3f2:	4b19      	ldr	r3, [pc, #100]	; (801a458 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 801a3f4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 801a3f8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a3fc:	f89b 000f 	ldrb.w	r0, [fp, #15]
 801a400:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a404:	4641      	mov	r1, r8
 801a406:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a40a:	2335      	movs	r3, #53	; 0x35
 801a40c:	f006 ff0c 	bl	8021228 <udp_sendto>
    pbuf_free(p);
 801a410:	4640      	mov	r0, r8
 801a412:	f001 fed5 	bl	801c1c0 <pbuf_free>
}
 801a416:	b007      	add	sp, #28
 801a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a41c:	2300      	movs	r3, #0
      ++hostname;
 801a41e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a420:	469b      	mov	fp, r3
 801a422:	461c      	mov	r4, r3
 801a424:	e7b9      	b.n	801a39a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 801a426:	4648      	mov	r0, r9
 801a428:	4621      	mov	r1, r4
 801a42a:	f7ff ff03 	bl	801a234 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801a42e:	9b01      	ldr	r3, [sp, #4]
 801a430:	444b      	add	r3, r9
 801a432:	4699      	mov	r9, r3
 801a434:	4b03      	ldr	r3, [pc, #12]	; (801a444 <dns_send.isra.0+0x16c>)
 801a436:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801a43a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801a43e:	b007      	add	sp, #28
 801a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a444:	2001ee58 	.word	0x2001ee58
 801a448:	08044678 	.word	0x08044678
 801a44c:	080446a8 	.word	0x080446a8
 801a450:	0802b034 	.word	0x0802b034
 801a454:	2001ee50 	.word	0x2001ee50
 801a458:	2001ee0c 	.word	0x2001ee0c

0801a45c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a45c:	2803      	cmp	r0, #3
{
 801a45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a462:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a464:	d846      	bhi.n	801a4f4 <dns_check_entry+0x98>

  switch (entry->state) {
 801a466:	4e3a      	ldr	r6, [pc, #232]	; (801a550 <dns_check_entry+0xf4>)
 801a468:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801a46c:	0125      	lsls	r5, r4, #4
 801a46e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801a472:	7a9b      	ldrb	r3, [r3, #10]
 801a474:	2b03      	cmp	r3, #3
 801a476:	d861      	bhi.n	801a53c <dns_check_entry+0xe0>
 801a478:	e8df f003 	tbb	[pc, r3]
 801a47c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a480:	192b      	adds	r3, r5, r4
 801a482:	011b      	lsls	r3, r3, #4
 801a484:	58f2      	ldr	r2, [r6, r3]
 801a486:	2a00      	cmp	r2, #0
 801a488:	d140      	bne.n	801a50c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801a48a:	442c      	add	r4, r5
 801a48c:	2300      	movs	r3, #0
 801a48e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a492:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a498:	4f2e      	ldr	r7, [pc, #184]	; (801a554 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801a49a:	f00b ffff 	bl	802649c <rand>
 801a49e:	4b2c      	ldr	r3, [pc, #176]	; (801a550 <dns_check_entry+0xf4>)
 801a4a0:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a4a2:	7a9a      	ldrb	r2, [r3, #10]
 801a4a4:	2a02      	cmp	r2, #2
 801a4a6:	d02d      	beq.n	801a504 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a4a8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a4ac:	429f      	cmp	r7, r3
 801a4ae:	d1f8      	bne.n	801a4a2 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 801a4b0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 801a4b2:	2202      	movs	r2, #2
      entry->tmr = 1;
 801a4b4:	2301      	movs	r3, #1
      err = dns_send(i);
 801a4b6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 801a4b8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801a4bc:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801a4be:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 801a4c0:	81b3      	strh	r3, [r6, #12]
}
 801a4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 801a4c6:	f7ff bf07 	b.w	801a2d8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801a4ca:	192a      	adds	r2, r5, r4
 801a4cc:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 801a4d0:	7b13      	ldrb	r3, [r2, #12]
 801a4d2:	3b01      	subs	r3, #1
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	7313      	strb	r3, [r2, #12]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d1db      	bne.n	801a494 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801a4dc:	7b53      	ldrb	r3, [r2, #13]
 801a4de:	3301      	adds	r3, #1
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	2b04      	cmp	r3, #4
 801a4e4:	7353      	strb	r3, [r2, #13]
 801a4e6:	d016      	beq.n	801a516 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 801a4e8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801a4ea:	4620      	mov	r0, r4
}
 801a4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 801a4f0:	f7ff bef2 	b.w	801a2d8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a4f4:	4b18      	ldr	r3, [pc, #96]	; (801a558 <dns_check_entry+0xfc>)
 801a4f6:	f240 421c 	movw	r2, #1052	; 0x41c
 801a4fa:	4918      	ldr	r1, [pc, #96]	; (801a55c <dns_check_entry+0x100>)
 801a4fc:	4818      	ldr	r0, [pc, #96]	; (801a560 <dns_check_entry+0x104>)
 801a4fe:	f00b ff29 	bl	8026354 <iprintf>
 801a502:	e7b0      	b.n	801a466 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a504:	891a      	ldrh	r2, [r3, #8]
 801a506:	428a      	cmp	r2, r1
 801a508:	d1ce      	bne.n	801a4a8 <dns_check_entry+0x4c>
 801a50a:	e7c6      	b.n	801a49a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a50c:	3a01      	subs	r2, #1
 801a50e:	50f2      	str	r2, [r6, r3]
 801a510:	2a00      	cmp	r2, #0
 801a512:	d0ba      	beq.n	801a48a <dns_check_entry+0x2e>
 801a514:	e7be      	b.n	801a494 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801a516:	7ad3      	ldrb	r3, [r2, #11]
 801a518:	b913      	cbnz	r3, 801a520 <dns_check_entry+0xc4>
 801a51a:	4b12      	ldr	r3, [pc, #72]	; (801a564 <dns_check_entry+0x108>)
 801a51c:	685b      	ldr	r3, [r3, #4]
 801a51e:	b94b      	cbnz	r3, 801a534 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 801a520:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 801a522:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 801a524:	2100      	movs	r1, #0
 801a526:	f7ff fe85 	bl	801a234 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801a52a:	2300      	movs	r3, #0
 801a52c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a530:	72b3      	strb	r3, [r6, #10]
            break;
 801a532:	e7af      	b.n	801a494 <dns_check_entry+0x38>
            entry->server_idx++;
 801a534:	2301      	movs	r3, #1
 801a536:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 801a538:	8193      	strh	r3, [r2, #12]
 801a53a:	e7d6      	b.n	801a4ea <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a53c:	4b06      	ldr	r3, [pc, #24]	; (801a558 <dns_check_entry+0xfc>)
 801a53e:	f240 425b 	movw	r2, #1115	; 0x45b
 801a542:	4909      	ldr	r1, [pc, #36]	; (801a568 <dns_check_entry+0x10c>)
 801a544:	4806      	ldr	r0, [pc, #24]	; (801a560 <dns_check_entry+0x104>)
}
 801a546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a54a:	f00b bf03 	b.w	8026354 <iprintf>
 801a54e:	bf00      	nop
 801a550:	2001ee58 	.word	0x2001ee58
 801a554:	2001f298 	.word	0x2001f298
 801a558:	08044678 	.word	0x08044678
 801a55c:	080446c0 	.word	0x080446c0
 801a560:	0802b034 	.word	0x0802b034
 801a564:	2001ee50 	.word	0x2001ee50
 801a568:	080446dc 	.word	0x080446dc

0801a56c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a570:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a572:	8912      	ldrh	r2, [r2, #8]
{
 801a574:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a576:	2a0f      	cmp	r2, #15
 801a578:	d805      	bhi.n	801a586 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801a57a:	4620      	mov	r0, r4
 801a57c:	f001 fe20 	bl	801c1c0 <pbuf_free>
  return;
}
 801a580:	b00d      	add	sp, #52	; 0x34
 801a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 801a586:	4699      	mov	r9, r3
 801a588:	220c      	movs	r2, #12
 801a58a:	2300      	movs	r3, #0
 801a58c:	a906      	add	r1, sp, #24
 801a58e:	4620      	mov	r0, r4
 801a590:	f001 feba 	bl	801c308 <pbuf_copy_partial>
 801a594:	280c      	cmp	r0, #12
 801a596:	4605      	mov	r5, r0
 801a598:	d1ef      	bne.n	801a57a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801a59a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 801a890 <dns_recv+0x324>
 801a59e:	2600      	movs	r6, #0
 801a5a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801a5a4:	f7ff fdd0 	bl	801a148 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a5a8:	4643      	mov	r3, r8
 801a5aa:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801a5ac:	7a9a      	ldrb	r2, [r3, #10]
 801a5ae:	2a02      	cmp	r2, #2
 801a5b0:	d008      	beq.n	801a5c4 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a5b2:	3601      	adds	r6, #1
 801a5b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a5b8:	2e04      	cmp	r6, #4
 801a5ba:	d0de      	beq.n	801a57a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801a5bc:	7a9a      	ldrb	r2, [r3, #10]
 801a5be:	b2f7      	uxtb	r7, r6
 801a5c0:	2a02      	cmp	r2, #2
 801a5c2:	d1f6      	bne.n	801a5b2 <dns_recv+0x46>
 801a5c4:	891a      	ldrh	r2, [r3, #8]
 801a5c6:	4282      	cmp	r2, r0
 801a5c8:	d1f3      	bne.n	801a5b2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801a5ca:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801a5ce:	f7ff fdbb 	bl	801a148 <lwip_htons>
 801a5d2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 801a5d4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801a5d8:	f7ff fdb6 	bl	801a148 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801a5dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 801a5e0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 801a5e2:	09db      	lsrs	r3, r3, #7
 801a5e4:	d0c9      	beq.n	801a57a <dns_recv+0xe>
 801a5e6:	f1ba 0f01 	cmp.w	sl, #1
 801a5ea:	d1c6      	bne.n	801a57a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801a5ec:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 801a5f0:	49a5      	ldr	r1, [pc, #660]	; (801a888 <dns_recv+0x31c>)
 801a5f2:	f8d9 2000 	ldr.w	r2, [r9]
 801a5f6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801a5fa:	7adb      	ldrb	r3, [r3, #11]
 801a5fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a600:	429a      	cmp	r2, r3
 801a602:	d1ba      	bne.n	801a57a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801a604:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801a608:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a60c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801a894 <dns_recv+0x328>
 801a610:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801a614:	f103 0210 	add.w	r2, r3, #16
 801a618:	9301      	str	r3, [sp, #4]
 801a61a:	4442      	add	r2, r8
 801a61c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801a620:	462e      	mov	r6, r5
 801a622:	4627      	mov	r7, r4
 801a624:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 801a626:	4631      	mov	r1, r6
 801a628:	4638      	mov	r0, r7
 801a62a:	f001 ff93 	bl	801c554 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801a62e:	2800      	cmp	r0, #0
 801a630:	db2d      	blt.n	801a68e <dns_recv+0x122>
 801a632:	455e      	cmp	r6, fp
 801a634:	d02b      	beq.n	801a68e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 801a636:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801a63a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801a63c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801a63e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 801a640:	d025      	beq.n	801a68e <dns_recv+0x122>
      while (n > 0) {
 801a642:	b330      	cbz	r0, 801a692 <dns_recv+0x126>
 801a644:	46aa      	mov	sl, r5
 801a646:	182c      	adds	r4, r5, r0
 801a648:	e01b      	b.n	801a682 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a64a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801a64e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a650:	f819 2000 	ldrb.w	r2, [r9, r0]
 801a654:	4601      	mov	r1, r0
        ++query;
 801a656:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a658:	f002 0203 	and.w	r2, r2, #3
 801a65c:	2a01      	cmp	r2, #1
 801a65e:	f819 2003 	ldrb.w	r2, [r9, r3]
 801a662:	f002 0203 	and.w	r2, r2, #3
 801a666:	bf08      	it	eq
 801a668:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801a66c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801a66e:	2a01      	cmp	r2, #1
 801a670:	bf08      	it	eq
 801a672:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 801a674:	455e      	cmp	r6, fp
        response_offset++;
 801a676:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 801a678:	d009      	beq.n	801a68e <dns_recv+0x122>
 801a67a:	4299      	cmp	r1, r3
 801a67c:	d107      	bne.n	801a68e <dns_recv+0x122>
      while (n > 0) {
 801a67e:	4554      	cmp	r4, sl
 801a680:	d007      	beq.n	801a692 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 801a682:	4631      	mov	r1, r6
 801a684:	4638      	mov	r0, r7
 801a686:	f001 ff65 	bl	801c554 <pbuf_try_get_at>
        if (c < 0) {
 801a68a:	1e03      	subs	r3, r0, #0
 801a68c:	dadd      	bge.n	801a64a <dns_recv+0xde>
 801a68e:	463c      	mov	r4, r7
 801a690:	e773      	b.n	801a57a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 801a692:	4631      	mov	r1, r6
 801a694:	4638      	mov	r0, r7
 801a696:	f001 ff5d 	bl	801c554 <pbuf_try_get_at>
    if (n < 0) {
 801a69a:	2800      	cmp	r0, #0
      ++query;
 801a69c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 801a6a0:	dbf5      	blt.n	801a68e <dns_recv+0x122>
  } while (n != 0);
 801a6a2:	d1c0      	bne.n	801a626 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 801a6a4:	4635      	mov	r5, r6
 801a6a6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801a6aa:	463c      	mov	r4, r7
 801a6ac:	9e03      	ldr	r6, [sp, #12]
 801a6ae:	454d      	cmp	r5, r9
 801a6b0:	9f02      	ldr	r7, [sp, #8]
 801a6b2:	f43f af62 	beq.w	801a57a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 801a6b6:	f105 0a01 	add.w	sl, r5, #1
 801a6ba:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801a6be:	45ca      	cmp	sl, r9
 801a6c0:	f43f af5b 	beq.w	801a57a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 801a6c4:	4653      	mov	r3, sl
 801a6c6:	2204      	movs	r2, #4
 801a6c8:	a904      	add	r1, sp, #16
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f001 fe1c 	bl	801c308 <pbuf_copy_partial>
 801a6d0:	2804      	cmp	r0, #4
 801a6d2:	f47f af52 	bne.w	801a57a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 801a6d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a6de:	f47f af4c 	bne.w	801a57a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801a6e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 801a6e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a6ea:	f47f af46 	bne.w	801a57a <dns_recv+0xe>
 801a6ee:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801a6f2:	459a      	cmp	sl, r3
 801a6f4:	f63f af41 	bhi.w	801a57a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801a6f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801a6fc:	071b      	lsls	r3, r3, #28
 801a6fe:	d017      	beq.n	801a730 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801a700:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a704:	fb03 8306 	mla	r3, r3, r6, r8
 801a708:	7adb      	ldrb	r3, [r3, #11]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	f040 80ae 	bne.w	801a86c <dns_recv+0x300>
 801a710:	4b5d      	ldr	r3, [pc, #372]	; (801a888 <dns_recv+0x31c>)
 801a712:	685b      	ldr	r3, [r3, #4]
 801a714:	2b00      	cmp	r3, #0
 801a716:	f000 80a9 	beq.w	801a86c <dns_recv+0x300>
            entry->tmr     = 1;
 801a71a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801a71e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 801a720:	fb03 8606 	mla	r6, r3, r6, r8
 801a724:	f240 3301 	movw	r3, #769	; 0x301
 801a728:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801a72a:	f7ff fe97 	bl	801a45c <dns_check_entry>
            goto ignore_packet;
 801a72e:	e724      	b.n	801a57a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801a730:	3505      	adds	r5, #5
 801a732:	f8dd a000 	ldr.w	sl, [sp]
 801a736:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 801a738:	f1ba 0f00 	cmp.w	sl, #0
 801a73c:	f000 8096 	beq.w	801a86c <dns_recv+0x300>
 801a740:	8923      	ldrh	r3, [r4, #8]
 801a742:	42ab      	cmp	r3, r5
 801a744:	d80b      	bhi.n	801a75e <dns_recv+0x1f2>
 801a746:	e091      	b.n	801a86c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 801a748:	8922      	ldrh	r2, [r4, #8]
 801a74a:	4293      	cmp	r3, r2
 801a74c:	f6bf af15 	bge.w	801a57a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 801a750:	4629      	mov	r1, r5
 801a752:	f001 feff 	bl	801c554 <pbuf_try_get_at>
    if (n < 0) {
 801a756:	2800      	cmp	r0, #0
 801a758:	f6ff af0f 	blt.w	801a57a <dns_recv+0xe>
  } while (n != 0);
 801a75c:	d017      	beq.n	801a78e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801a75e:	4629      	mov	r1, r5
 801a760:	4620      	mov	r0, r4
 801a762:	f001 fef7 	bl	801c554 <pbuf_try_get_at>
 801a766:	f105 0b01 	add.w	fp, r5, #1
 801a76a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801a76c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801a76e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 801a772:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 801a774:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 801a778:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801a77a:	f6ff aefe 	blt.w	801a57a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801a77e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 801a780:	f1bb 0f00 	cmp.w	fp, #0
 801a784:	f43f aef9 	beq.w	801a57a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 801a788:	2ac0      	cmp	r2, #192	; 0xc0
 801a78a:	d1dd      	bne.n	801a748 <dns_recv+0x1dc>
 801a78c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801a78e:	454d      	cmp	r5, r9
 801a790:	f43f aef3 	beq.w	801a57a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 801a794:	f105 0b01 	add.w	fp, r5, #1
 801a798:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801a79c:	45cb      	cmp	fp, r9
 801a79e:	f43f aeec 	beq.w	801a57a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801a7a2:	465b      	mov	r3, fp
 801a7a4:	220a      	movs	r2, #10
 801a7a6:	a909      	add	r1, sp, #36	; 0x24
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	f001 fdad 	bl	801c308 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801a7ae:	280a      	cmp	r0, #10
 801a7b0:	f47f aee3 	bne.w	801a57a <dns_recv+0xe>
 801a7b4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801a7b8:	459b      	cmp	fp, r3
 801a7ba:	f63f aede 	bhi.w	801a57a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801a7be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801a7c2:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801a7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801a7c8:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801a7ca:	d013      	beq.n	801a7f4 <dns_recv+0x288>
 801a7cc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 801a7d0:	f7ff fcba 	bl	801a148 <lwip_htons>
 801a7d4:	4428      	add	r0, r5
 801a7d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801a7da:	f6bf aece 	bge.w	801a57a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801a7de:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 801a7e2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801a7e6:	f7ff fcaf 	bl	801a148 <lwip_htons>
 801a7ea:	4405      	add	r5, r0
            --nanswers;
 801a7ec:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801a7f0:	b2ad      	uxth	r5, r5
            --nanswers;
 801a7f2:	e7a1      	b.n	801a738 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801a7f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a7f8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801a7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a800:	d1e6      	bne.n	801a7d0 <dns_recv+0x264>
 801a802:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a806:	d1e3      	bne.n	801a7d0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801a808:	462b      	mov	r3, r5
 801a80a:	2204      	movs	r2, #4
 801a80c:	a905      	add	r1, sp, #20
 801a80e:	4620      	mov	r0, r4
 801a810:	f001 fd7a 	bl	801c308 <pbuf_copy_partial>
 801a814:	2804      	cmp	r0, #4
 801a816:	f47f aeb0 	bne.w	801a57a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801a81a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801a81e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801a820:	fb03 f606 	mul.w	r6, r3, r6
 801a824:	9b05      	ldr	r3, [sp, #20]
 801a826:	eb08 0406 	add.w	r4, r8, r6
 801a82a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801a82c:	f001 fcc8 	bl	801c1c0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801a830:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a832:	f7ff fc8d 	bl	801a150 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801a836:	4a15      	ldr	r2, [pc, #84]	; (801a88c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801a838:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801a83a:	9901      	ldr	r1, [sp, #4]
 801a83c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801a83e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801a840:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 801a844:	bf28      	it	cs
 801a846:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801a848:	4441      	add	r1, r8
  entry->ttl = ttl;
 801a84a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801a84e:	2303      	movs	r3, #3
 801a850:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 801a852:	f7ff fcef 	bl	801a234 <dns_call_found>
  if (entry->ttl == 0) {
 801a856:	f858 3006 	ldr.w	r3, [r8, r6]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	f47f ae90 	bne.w	801a580 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 801a860:	7aa2      	ldrb	r2, [r4, #10]
 801a862:	2a03      	cmp	r2, #3
 801a864:	f47f ae8c 	bne.w	801a580 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 801a868:	72a3      	strb	r3, [r4, #10]
                  return;
 801a86a:	e689      	b.n	801a580 <dns_recv+0x14>
        pbuf_free(p);
 801a86c:	4620      	mov	r0, r4
 801a86e:	f001 fca7 	bl	801c1c0 <pbuf_free>
        dns_call_found(i, NULL);
 801a872:	2100      	movs	r1, #0
 801a874:	4638      	mov	r0, r7
 801a876:	f7ff fcdd 	bl	801a234 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801a87a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a87e:	2200      	movs	r2, #0
 801a880:	fb03 8606 	mla	r6, r3, r6, r8
 801a884:	72b2      	strb	r2, [r6, #10]
        return;
 801a886:	e67b      	b.n	801a580 <dns_recv+0x14>
 801a888:	2001ee50 	.word	0x2001ee50
 801a88c:	00093a80 	.word	0x00093a80
 801a890:	2001ee58 	.word	0x2001ee58
 801a894:	080470ad 	.word	0x080470ad

0801a898 <dns_init>:
}
 801a898:	4770      	bx	lr
 801a89a:	bf00      	nop

0801a89c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801a89c:	2801      	cmp	r0, #1
 801a89e:	d900      	bls.n	801a8a2 <dns_setserver+0x6>
}
 801a8a0:	4770      	bx	lr
    if (dnsserver != NULL) {
 801a8a2:	b121      	cbz	r1, 801a8ae <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801a8a4:	4b05      	ldr	r3, [pc, #20]	; (801a8bc <dns_setserver+0x20>)
 801a8a6:	680a      	ldr	r2, [r1, #0]
 801a8a8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801a8ac:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801a8ae:	4a04      	ldr	r2, [pc, #16]	; (801a8c0 <dns_setserver+0x24>)
 801a8b0:	4b02      	ldr	r3, [pc, #8]	; (801a8bc <dns_setserver+0x20>)
 801a8b2:	6812      	ldr	r2, [r2, #0]
 801a8b4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 801a8b8:	4770      	bx	lr
 801a8ba:	bf00      	nop
 801a8bc:	2001ee50 	.word	0x2001ee50
 801a8c0:	08046e50 	.word	0x08046e50

0801a8c4 <dns_tmr>:
{
 801a8c4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 801a8c6:	2000      	movs	r0, #0
 801a8c8:	f7ff fdc8 	bl	801a45c <dns_check_entry>
 801a8cc:	2001      	movs	r0, #1
 801a8ce:	f7ff fdc5 	bl	801a45c <dns_check_entry>
 801a8d2:	2002      	movs	r0, #2
 801a8d4:	f7ff fdc2 	bl	801a45c <dns_check_entry>
 801a8d8:	2003      	movs	r0, #3
}
 801a8da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801a8de:	f7ff bdbd 	b.w	801a45c <dns_check_entry>
 801a8e2:	bf00      	nop

0801a8e4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 801a8e4:	2900      	cmp	r1, #0
 801a8e6:	f000 812e 	beq.w	801ab46 <dns_gethostbyname_addrtype+0x262>
{
 801a8ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801a8ee:	fab0 f780 	clz	r7, r0
{
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 801a8f6:	097f      	lsrs	r7, r7, #5
 801a8f8:	2800      	cmp	r0, #0
 801a8fa:	f000 8103 	beq.w	801ab04 <dns_gethostbyname_addrtype+0x220>
 801a8fe:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 801a900:	7803      	ldrb	r3, [r0, #0]
 801a902:	2b00      	cmp	r3, #0
 801a904:	f000 80fe 	beq.w	801ab04 <dns_gethostbyname_addrtype+0x220>
 801a908:	4615      	mov	r5, r2
 801a90a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801a90c:	f7e5 fca2 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801a910:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801a912:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801a914:	f200 80f6 	bhi.w	801ab04 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801a918:	4641      	mov	r1, r8
 801a91a:	4630      	mov	r0, r6
 801a91c:	f009 fa46 	bl	8023dac <ip4addr_aton>
 801a920:	b118      	cbz	r0, 801a92a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801a922:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801a924:	b003      	add	sp, #12
 801a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a92a:	4f88      	ldr	r7, [pc, #544]	; (801ab4c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801a92c:	4604      	mov	r4, r0
 801a92e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801a930:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 801a934:	2b03      	cmp	r3, #3
 801a936:	d03a      	beq.n	801a9ae <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801a938:	3401      	adds	r4, #1
 801a93a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801a93e:	2c04      	cmp	r4, #4
 801a940:	d1f6      	bne.n	801a930 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801a942:	4b83      	ldr	r3, [pc, #524]	; (801ab50 <dns_gethostbyname_addrtype+0x26c>)
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	2b00      	cmp	r3, #0
 801a948:	f000 80f6 	beq.w	801ab38 <dns_gethostbyname_addrtype+0x254>
 801a94c:	2400      	movs	r4, #0
 801a94e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801ab5c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a952:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 801a956:	fa5f f884 	uxtb.w	r8, r4
 801a95a:	2b02      	cmp	r3, #2
 801a95c:	d040      	beq.n	801a9e0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a95e:	3401      	adds	r4, #1
 801a960:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801a964:	2c04      	cmp	r4, #4
 801a966:	d1f4      	bne.n	801a952 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801a968:	4a7a      	ldr	r2, [pc, #488]	; (801ab54 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801a96a:	4623      	mov	r3, r4
 801a96c:	4f7a      	ldr	r7, [pc, #488]	; (801ab58 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801a96e:	2400      	movs	r4, #0
 801a970:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 801a972:	46a4      	mov	ip, r4
 801a974:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 801a976:	7a90      	ldrb	r0, [r2, #10]
 801a978:	fa5f f884 	uxtb.w	r8, r4
 801a97c:	2800      	cmp	r0, #0
 801a97e:	d041      	beq.n	801aa04 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 801a980:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801a982:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 801a986:	d023      	beq.n	801a9d0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801a988:	2c04      	cmp	r4, #4
 801a98a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801a98e:	d1f2      	bne.n	801a976 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 801a990:	2b04      	cmp	r3, #4
 801a992:	d007      	beq.n	801a9a4 <dns_gethostbyname_addrtype+0xc0>
 801a994:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 801a998:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801a99c:	7aa2      	ldrb	r2, [r4, #10]
 801a99e:	2a03      	cmp	r2, #3
 801a9a0:	f000 80ae 	beq.w	801ab00 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 801a9a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a9a8:	b003      	add	sp, #12
 801a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801a9ae:	4651      	mov	r1, sl
 801a9b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a9b4:	4630      	mov	r0, r6
 801a9b6:	f7ff fc1f 	bl	801a1f8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	d1bc      	bne.n	801a938 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801a9be:	4b66      	ldr	r3, [pc, #408]	; (801ab58 <dns_gethostbyname_addrtype+0x274>)
 801a9c0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a9c4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801a9c8:	6863      	ldr	r3, [r4, #4]
 801a9ca:	f8c8 3000 	str.w	r3, [r8]
 801a9ce:	e7a9      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801a9d0:	7b90      	ldrb	r0, [r2, #14]
 801a9d2:	1a08      	subs	r0, r1, r0
 801a9d4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 801a9d6:	4560      	cmp	r0, ip
 801a9d8:	d9d6      	bls.n	801a988 <dns_gethostbyname_addrtype+0xa4>
 801a9da:	4643      	mov	r3, r8
 801a9dc:	4684      	mov	ip, r0
 801a9de:	e7d3      	b.n	801a988 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801a9e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a9e4:	4639      	mov	r1, r7
 801a9e6:	4630      	mov	r0, r6
 801a9e8:	f7ff fc06 	bl	801a1f8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a9ec:	2800      	cmp	r0, #0
 801a9ee:	d1b6      	bne.n	801a95e <dns_gethostbyname_addrtype+0x7a>
 801a9f0:	4b5a      	ldr	r3, [pc, #360]	; (801ab5c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 801a9f2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801a9f4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 801a9f6:	2a00      	cmp	r2, #0
 801a9f8:	f000 8091 	beq.w	801ab1e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801a9fc:	3001      	adds	r0, #1
 801a9fe:	2804      	cmp	r0, #4
 801aa00:	d1f7      	bne.n	801a9f2 <dns_gethostbyname_addrtype+0x10e>
 801aa02:	e7ac      	b.n	801a95e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 801aa04:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801aa08:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801aa0c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801ab5c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 801aa10:	2700      	movs	r7, #0
 801aa12:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 801aa14:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801aa16:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 801aa18:	b12b      	cbz	r3, 801aa26 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801aa1a:	3701      	adds	r7, #1
 801aa1c:	2f04      	cmp	r7, #4
 801aa1e:	d1f9      	bne.n	801aa14 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 801aa20:	f04f 30ff 	mov.w	r0, #4294967295
 801aa24:	e7c0      	b.n	801a9a8 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 801aa26:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801aa2a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801aa2c:	f104 0010 	add.w	r0, r4, #16
 801aa30:	4631      	mov	r1, r6
  req->found = found;
 801aa32:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 801aa36:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801aa3a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801aa3c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 801aa40:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 801aa44:	2201      	movs	r2, #1
 801aa46:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 801aa48:	464a      	mov	r2, r9
 801aa4a:	f00a fcbd 	bl	80253c8 <memcpy>
  entry->name[namelen] = 0;
 801aa4e:	44a1      	add	r9, r4
 801aa50:	9b01      	ldr	r3, [sp, #4]
 801aa52:	461d      	mov	r5, r3
 801aa54:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 801aa58:	007b      	lsls	r3, r7, #1
 801aa5a:	9301      	str	r3, [sp, #4]
 801aa5c:	4b40      	ldr	r3, [pc, #256]	; (801ab60 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801aa5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa62:	b2ee      	uxtb	r6, r5
 801aa64:	b30a      	cbz	r2, 801aaaa <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801aa66:	3501      	adds	r5, #1
 801aa68:	2d04      	cmp	r5, #4
 801aa6a:	d1f8      	bne.n	801aa5e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801aa6c:	483d      	ldr	r0, [pc, #244]	; (801ab64 <dns_gethostbyname_addrtype+0x280>)
 801aa6e:	2304      	movs	r3, #4
 801aa70:	7806      	ldrb	r6, [r0, #0]
 801aa72:	3601      	adds	r6, #1
 801aa74:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801aa76:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 801aa78:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801aa7a:	d901      	bls.n	801aa80 <dns_gethostbyname_addrtype+0x19c>
 801aa7c:	2600      	movs	r6, #0
      idx = 0;
 801aa7e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 801aa80:	4d37      	ldr	r5, [pc, #220]	; (801ab60 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801aa82:	1c71      	adds	r1, r6, #1
 801aa84:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 801aa86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801aa8a:	2a00      	cmp	r2, #0
 801aa8c:	d13d      	bne.n	801ab0a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801aa8e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801aa92:	b2ce      	uxtb	r6, r1
 801aa94:	d1ef      	bne.n	801aa76 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 801aa96:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 801aa98:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801aa9c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801aa9e:	443a      	add	r2, r7
 801aaa0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 801aaa4:	2304      	movs	r3, #4
 801aaa6:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 801aaa8:	e73c      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801aaaa:	202e      	movs	r0, #46	; 0x2e
 801aaac:	f006 fc9c 	bl	80213e8 <udp_new_ip_type>
  if (pcb == NULL) {
 801aab0:	4681      	mov	r9, r0
 801aab2:	2800      	cmp	r0, #0
 801aab4:	d043      	beq.n	801ab3e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aab6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801ab6c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801aaba:	f00b fcef 	bl	802649c <rand>
 801aabe:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 801aac0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801aac4:	d3f9      	bcc.n	801aaba <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aac6:	4659      	mov	r1, fp
 801aac8:	4648      	mov	r0, r9
 801aaca:	f006 fa29 	bl	8020f20 <udp_bind>
  } while (err == ERR_USE);
 801aace:	f110 0f08 	cmn.w	r0, #8
 801aad2:	d0f2      	beq.n	801aaba <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 801aad4:	b9d8      	cbnz	r0, 801ab0e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 801aad6:	4602      	mov	r2, r0
 801aad8:	4923      	ldr	r1, [pc, #140]	; (801ab68 <dns_gethostbyname_addrtype+0x284>)
 801aada:	4648      	mov	r0, r9
 801aadc:	f006 fc34 	bl	8021348 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 801aae0:	4b1f      	ldr	r3, [pc, #124]	; (801ab60 <dns_gethostbyname_addrtype+0x27c>)
 801aae2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 801aae6:	4b1f      	ldr	r3, [pc, #124]	; (801ab64 <dns_gethostbyname_addrtype+0x280>)
 801aae8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 801aaea:	4a1a      	ldr	r2, [pc, #104]	; (801ab54 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 801aaec:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 801aaee:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 801aaf0:	7813      	ldrb	r3, [r2, #0]
 801aaf2:	3301      	adds	r3, #1
 801aaf4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 801aaf6:	f7ff fcb1 	bl	801a45c <dns_check_entry>
  return ERR_INPROGRESS;
 801aafa:	f06f 0004 	mvn.w	r0, #4
 801aafe:	e711      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 801ab00:	4698      	mov	r8, r3
 801ab02:	e783      	b.n	801aa0c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 801ab04:	f06f 000f 	mvn.w	r0, #15
 801ab08:	e70c      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801ab0a:	7006      	strb	r6, [r0, #0]
      return idx;
 801ab0c:	e7ed      	b.n	801aaea <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801ab0e:	4648      	mov	r0, r9
 801ab10:	f006 fc2c 	bl	802136c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801ab14:	2300      	movs	r3, #0
 801ab16:	4a12      	ldr	r2, [pc, #72]	; (801ab60 <dns_gethostbyname_addrtype+0x27c>)
 801ab18:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801ab1c:	e7a6      	b.n	801aa6c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801ab1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab22:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 801ab26:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801ab2a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801ab2e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 801ab32:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 801ab36:	e6f5      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 801ab38:	f06f 0005 	mvn.w	r0, #5
 801ab3c:	e6f2      	b.n	801a924 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801ab3e:	4b08      	ldr	r3, [pc, #32]	; (801ab60 <dns_gethostbyname_addrtype+0x27c>)
 801ab40:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801ab44:	e792      	b.n	801aa6c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 801ab46:	f06f 000f 	mvn.w	r0, #15
}
 801ab4a:	4770      	bx	lr
 801ab4c:	2001ee68 	.word	0x2001ee68
 801ab50:	2001ee50 	.word	0x2001ee50
 801ab54:	2001ee4c 	.word	0x2001ee4c
 801ab58:	2001ee58 	.word	0x2001ee58
 801ab5c:	2001ee1c 	.word	0x2001ee1c
 801ab60:	2001ee0c 	.word	0x2001ee0c
 801ab64:	2001ee08 	.word	0x2001ee08
 801ab68:	0801a56d 	.word	0x0801a56d
 801ab6c:	08046e50 	.word	0x08046e50

0801ab70 <dns_gethostbyname>:
{
 801ab70:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801ab72:	2400      	movs	r4, #0
{
 801ab74:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801ab76:	9400      	str	r4, [sp, #0]
 801ab78:	f7ff feb4 	bl	801a8e4 <dns_gethostbyname_addrtype>
}
 801ab7c:	b002      	add	sp, #8
 801ab7e:	bd10      	pop	{r4, pc}

0801ab80 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 801ab80:	2300      	movs	r3, #0
{
 801ab82:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801ab84:	4299      	cmp	r1, r3
{
 801ab86:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 801ab88:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801ab8c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 801ab90:	dd05      	ble.n	801ab9e <lwip_standard_chksum+0x1e>
 801ab92:	b124      	cbz	r4, 801ab9e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801ab94:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 801ab98:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801ab9a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801ab9e:	2901      	cmp	r1, #1
 801aba0:	dd28      	ble.n	801abf4 <lwip_standard_chksum+0x74>
 801aba2:	3902      	subs	r1, #2
  u32_t sum = 0;
 801aba4:	2300      	movs	r3, #0
 801aba6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801abaa:	f10e 0c01 	add.w	ip, lr, #1
 801abae:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 801abb2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801abb6:	4584      	cmp	ip, r0
    sum += *ps++;
 801abb8:	4413      	add	r3, r2
  while (len > 1) {
 801abba:	d1fa      	bne.n	801abb2 <lwip_standard_chksum+0x32>
    len -= 2;
 801abbc:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 801abc0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801abc4:	2901      	cmp	r1, #1
 801abc6:	d103      	bne.n	801abd0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801abc8:	f89c 2000 	ldrb.w	r2, [ip]
 801abcc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 801abd0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801abd4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801abd6:	b298      	uxth	r0, r3
 801abd8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801abdc:	b298      	uxth	r0, r3
 801abde:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 801abe2:	b124      	cbz	r4, 801abee <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 801abe4:	0203      	lsls	r3, r0, #8
 801abe6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801abea:	b29b      	uxth	r3, r3
 801abec:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 801abee:	b280      	uxth	r0, r0
 801abf0:	b002      	add	sp, #8
 801abf2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 801abf4:	4684      	mov	ip, r0
  u32_t sum = 0;
 801abf6:	2300      	movs	r3, #0
 801abf8:	e7e4      	b.n	801abc4 <lwip_standard_chksum+0x44>
 801abfa:	bf00      	nop

0801abfc <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac00:	4688      	mov	r8, r1
 801ac02:	4617      	mov	r7, r2
 801ac04:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 801ac06:	b1f8      	cbz	r0, 801ac48 <inet_cksum_pseudo_base+0x4c>
 801ac08:	4605      	mov	r5, r0
  int swapped = 0;
 801ac0a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801ac0c:	8969      	ldrh	r1, [r5, #10]
 801ac0e:	6868      	ldr	r0, [r5, #4]
 801ac10:	f7ff ffb6 	bl	801ab80 <lwip_standard_chksum>
 801ac14:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801ac16:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 801ac18:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801ac1a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801ac1e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801ac22:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801ac26:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801ac2a:	d004      	beq.n	801ac36 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	f086 0601 	eor.w	r6, r6, #1
 801ac32:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801ac36:	682d      	ldr	r5, [r5, #0]
 801ac38:	2d00      	cmp	r5, #0
 801ac3a:	d1e7      	bne.n	801ac0c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801ac3c:	b126      	cbz	r6, 801ac48 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801ac3e:	0222      	lsls	r2, r4, #8
 801ac40:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ac44:	b292      	uxth	r2, r2
 801ac46:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801ac48:	4640      	mov	r0, r8
 801ac4a:	f7ff fa7d 	bl	801a148 <lwip_htons>
 801ac4e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 801ac50:	4638      	mov	r0, r7
 801ac52:	f7ff fa79 	bl	801a148 <lwip_htons>
 801ac56:	4428      	add	r0, r5
 801ac58:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801ac5a:	b2a0      	uxth	r0, r4
 801ac5c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 801ac60:	b2a0      	uxth	r0, r4
 801ac62:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 801ac66:	43c0      	mvns	r0, r0
}
 801ac68:	b280      	uxth	r0, r0
 801ac6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac6e:	bf00      	nop

0801ac70 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 801ac70:	b430      	push	{r4, r5}
 801ac72:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 801ac74:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 801ac76:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 801ac78:	0c23      	lsrs	r3, r4, #16
 801ac7a:	fa13 f384 	uxtah	r3, r3, r4
 801ac7e:	fa13 f385 	uxtah	r3, r3, r5
 801ac82:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 801ac86:	b29c      	uxth	r4, r3
 801ac88:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801ac8c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801ac8e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 801ac92:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801ac94:	f7ff bfb2 	b.w	801abfc <inet_cksum_pseudo_base>

0801ac98 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801ac98:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801ac9a:	f7ff ff71 	bl	801ab80 <lwip_standard_chksum>
 801ac9e:	43c0      	mvns	r0, r0
}
 801aca0:	b280      	uxth	r0, r0
 801aca2:	bd08      	pop	{r3, pc}

0801aca4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 801aca4:	b338      	cbz	r0, 801acf6 <inet_chksum_pbuf+0x52>
{
 801aca6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 801aca8:	2600      	movs	r6, #0
 801acaa:	4605      	mov	r5, r0
  acc = 0;
 801acac:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801acae:	8969      	ldrh	r1, [r5, #10]
 801acb0:	6868      	ldr	r0, [r5, #4]
 801acb2:	f7ff ff65 	bl	801ab80 <lwip_standard_chksum>
 801acb6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801acb8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801acba:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 801acbc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801acc0:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801acc4:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801acc8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801accc:	d004      	beq.n	801acd8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 801acce:	b29b      	uxth	r3, r3
 801acd0:	f086 0601 	eor.w	r6, r6, #1
 801acd4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801acd8:	682d      	ldr	r5, [r5, #0]
 801acda:	2d00      	cmp	r5, #0
 801acdc:	d1e7      	bne.n	801acae <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 801acde:	b13e      	cbz	r6, 801acf0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801ace0:	0220      	lsls	r0, r4, #8
 801ace2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ace6:	b280      	uxth	r0, r0
 801ace8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 801acea:	43c0      	mvns	r0, r0
 801acec:	b280      	uxth	r0, r0
}
 801acee:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 801acf0:	43e0      	mvns	r0, r4
 801acf2:	b280      	uxth	r0, r0
}
 801acf4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 801acf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801acfa:	4770      	bx	lr

0801acfc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801acfc:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801acfe:	f009 fe37 	bl	8024970 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801ad02:	f000 f975 	bl	801aff0 <mem_init>
  memp_init();
 801ad06:	f000 fcf9 	bl	801b6fc <memp_init>
  pbuf_init();
  netif_init();
 801ad0a:	f000 fdbd 	bl	801b888 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801ad0e:	f005 fffd 	bl	8020d0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801ad12:	f001 fd89 	bl	801c828 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801ad16:	f7ff fdbf 	bl	801a898 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801ad1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801ad1e:	f005 bf4d 	b.w	8020bbc <sys_timeouts_init>
 801ad22:	bf00      	nop

0801ad24 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801ad24:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 801ad28:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801ad2a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801ad2e:	4299      	cmp	r1, r3
 801ad30:	d81b      	bhi.n	801ad6a <mem_link_valid+0x46>
 801ad32:	459c      	cmp	ip, r3
 801ad34:	bf94      	ite	ls
 801ad36:	2200      	movls	r2, #0
 801ad38:	2201      	movhi	r2, #1
 801ad3a:	b9b2      	cbnz	r2, 801ad6a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801ad3c:	4b0f      	ldr	r3, [pc, #60]	; (801ad7c <mem_link_valid+0x58>)
{
 801ad3e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 801ad40:	681c      	ldr	r4, [r3, #0]
 801ad42:	1b03      	subs	r3, r0, r4
 801ad44:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801ad46:	4299      	cmp	r1, r3
 801ad48:	d002      	beq.n	801ad50 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801ad4a:	5a61      	ldrh	r1, [r4, r1]
 801ad4c:	4299      	cmp	r1, r3
 801ad4e:	d10e      	bne.n	801ad6e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801ad50:	4a0b      	ldr	r2, [pc, #44]	; (801ad80 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 801ad52:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801ad54:	6812      	ldr	r2, [r2, #0]
 801ad56:	42a2      	cmp	r2, r4
 801ad58:	d00d      	beq.n	801ad76 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801ad5a:	8860      	ldrh	r0, [r4, #2]
 801ad5c:	1ac0      	subs	r0, r0, r3
 801ad5e:	fab0 f080 	clz	r0, r0
 801ad62:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 801ad64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad68:	4770      	bx	lr
    return 0;
 801ad6a:	2000      	movs	r0, #0
}
 801ad6c:	4770      	bx	lr
    return 0;
 801ad6e:	4610      	mov	r0, r2
}
 801ad70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad74:	4770      	bx	lr
  return 1;
 801ad76:	2001      	movs	r0, #1
 801ad78:	e7f4      	b.n	801ad64 <mem_link_valid+0x40>
 801ad7a:	bf00      	nop
 801ad7c:	2001f2bc 	.word	0x2001f2bc
 801ad80:	2001f2c0 	.word	0x2001f2c0

0801ad84 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 801ad84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801ad88:	4f5f      	ldr	r7, [pc, #380]	; (801af08 <mem_sanity+0x184>)
 801ad8a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801ad8c:	7935      	ldrb	r5, [r6, #4]
 801ad8e:	2d01      	cmp	r5, #1
 801ad90:	d907      	bls.n	801ada2 <mem_sanity+0x1e>
 801ad92:	4b5e      	ldr	r3, [pc, #376]	; (801af0c <mem_sanity+0x188>)
 801ad94:	f240 223f 	movw	r2, #575	; 0x23f
 801ad98:	495d      	ldr	r1, [pc, #372]	; (801af10 <mem_sanity+0x18c>)
 801ad9a:	485e      	ldr	r0, [pc, #376]	; (801af14 <mem_sanity+0x190>)
 801ad9c:	f00b fada 	bl	8026354 <iprintf>
  last_used = mem->used;
 801ada0:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801ada2:	8873      	ldrh	r3, [r6, #2]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	f040 80a7 	bne.w	801aef8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801adaa:	8834      	ldrh	r4, [r6, #0]
 801adac:	f242 7310 	movw	r3, #10000	; 0x2710
 801adb0:	429c      	cmp	r4, r3
 801adb2:	f200 8098 	bhi.w	801aee6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801adba:	429c      	cmp	r4, r3
 801adbc:	d961      	bls.n	801ae82 <mem_sanity+0xfe>
 801adbe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801af30 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801adc2:	f8df a148 	ldr.w	sl, [pc, #328]	; 801af0c <mem_sanity+0x188>
 801adc6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801af34 <mem_sanity+0x1b0>
 801adca:	4e52      	ldr	r6, [pc, #328]	; (801af14 <mem_sanity+0x190>)
 801adcc:	e012      	b.n	801adf4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801adce:	2b01      	cmp	r3, #1
 801add0:	d006      	beq.n	801ade0 <mem_sanity+0x5c>
 801add2:	4653      	mov	r3, sl
 801add4:	f240 2251 	movw	r2, #593	; 0x251
 801add8:	494f      	ldr	r1, [pc, #316]	; (801af18 <mem_sanity+0x194>)
 801adda:	4630      	mov	r0, r6
 801addc:	f00b faba 	bl	8026354 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801ade0:	4620      	mov	r0, r4
 801ade2:	f7ff ff9f 	bl	801ad24 <mem_link_valid>
 801ade6:	b380      	cbz	r0, 801ae4a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 801ade8:	683b      	ldr	r3, [r7, #0]
 801adea:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801adec:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 801adee:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 801adf0:	42a3      	cmp	r3, r4
 801adf2:	d246      	bcs.n	801ae82 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 801adf4:	f8d8 2000 	ldr.w	r2, [r8]
 801adf8:	42a2      	cmp	r2, r4
 801adfa:	d942      	bls.n	801ae82 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801adfc:	1ce2      	adds	r2, r4, #3
 801adfe:	f022 0203 	bic.w	r2, r2, #3
 801ae02:	4294      	cmp	r4, r2
 801ae04:	d006      	beq.n	801ae14 <mem_sanity+0x90>
 801ae06:	4653      	mov	r3, sl
 801ae08:	f240 2249 	movw	r2, #585	; 0x249
 801ae0c:	4649      	mov	r1, r9
 801ae0e:	4630      	mov	r0, r6
 801ae10:	f00b faa0 	bl	8026354 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801ae14:	8862      	ldrh	r2, [r4, #2]
 801ae16:	f242 7310 	movw	r3, #10000	; 0x2710
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d81d      	bhi.n	801ae5a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801ae1e:	8822      	ldrh	r2, [r4, #0]
 801ae20:	f242 7310 	movw	r3, #10000	; 0x2710
 801ae24:	429a      	cmp	r2, r3
 801ae26:	d824      	bhi.n	801ae72 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801ae28:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801ae2a:	2d00      	cmp	r5, #0
 801ae2c:	d0cf      	beq.n	801adce <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d9d6      	bls.n	801ade0 <mem_sanity+0x5c>
 801ae32:	4653      	mov	r3, sl
 801ae34:	f240 2253 	movw	r2, #595	; 0x253
 801ae38:	4938      	ldr	r1, [pc, #224]	; (801af1c <mem_sanity+0x198>)
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	f00b fa8a 	bl	8026354 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801ae40:	4620      	mov	r0, r4
 801ae42:	f7ff ff6f 	bl	801ad24 <mem_link_valid>
 801ae46:	2800      	cmp	r0, #0
 801ae48:	d1ce      	bne.n	801ade8 <mem_sanity+0x64>
 801ae4a:	4653      	mov	r3, sl
 801ae4c:	f240 2256 	movw	r2, #598	; 0x256
 801ae50:	4933      	ldr	r1, [pc, #204]	; (801af20 <mem_sanity+0x19c>)
 801ae52:	4630      	mov	r0, r6
 801ae54:	f00b fa7e 	bl	8026354 <iprintf>
 801ae58:	e7c6      	b.n	801ade8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801ae5a:	4653      	mov	r3, sl
 801ae5c:	f240 224a 	movw	r2, #586	; 0x24a
 801ae60:	4930      	ldr	r1, [pc, #192]	; (801af24 <mem_sanity+0x1a0>)
 801ae62:	4630      	mov	r0, r6
 801ae64:	f00b fa76 	bl	8026354 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801ae68:	8822      	ldrh	r2, [r4, #0]
 801ae6a:	f242 7310 	movw	r3, #10000	; 0x2710
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d9da      	bls.n	801ae28 <mem_sanity+0xa4>
 801ae72:	4653      	mov	r3, sl
 801ae74:	f240 224b 	movw	r2, #587	; 0x24b
 801ae78:	492b      	ldr	r1, [pc, #172]	; (801af28 <mem_sanity+0x1a4>)
 801ae7a:	4630      	mov	r0, r6
 801ae7c:	f00b fa6a 	bl	8026354 <iprintf>
 801ae80:	e7d2      	b.n	801ae28 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 801ae82:	f242 7210 	movw	r2, #10000	; 0x2710
 801ae86:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801ae88:	4294      	cmp	r4, r2
 801ae8a:	d006      	beq.n	801ae9a <mem_sanity+0x116>
 801ae8c:	4b1f      	ldr	r3, [pc, #124]	; (801af0c <mem_sanity+0x188>)
 801ae8e:	f240 225b 	movw	r2, #603	; 0x25b
 801ae92:	4926      	ldr	r1, [pc, #152]	; (801af2c <mem_sanity+0x1a8>)
 801ae94:	481f      	ldr	r0, [pc, #124]	; (801af14 <mem_sanity+0x190>)
 801ae96:	f00b fa5d 	bl	8026354 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801ae9a:	7923      	ldrb	r3, [r4, #4]
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	d006      	beq.n	801aeae <mem_sanity+0x12a>
 801aea0:	4b1a      	ldr	r3, [pc, #104]	; (801af0c <mem_sanity+0x188>)
 801aea2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801aea6:	491a      	ldr	r1, [pc, #104]	; (801af10 <mem_sanity+0x18c>)
 801aea8:	481a      	ldr	r0, [pc, #104]	; (801af14 <mem_sanity+0x190>)
 801aeaa:	f00b fa53 	bl	8026354 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 801aeae:	8862      	ldrh	r2, [r4, #2]
 801aeb0:	f242 7310 	movw	r3, #10000	; 0x2710
 801aeb4:	429a      	cmp	r2, r3
 801aeb6:	d006      	beq.n	801aec6 <mem_sanity+0x142>
 801aeb8:	4b14      	ldr	r3, [pc, #80]	; (801af0c <mem_sanity+0x188>)
 801aeba:	f240 225d 	movw	r2, #605	; 0x25d
 801aebe:	4919      	ldr	r1, [pc, #100]	; (801af24 <mem_sanity+0x1a0>)
 801aec0:	4814      	ldr	r0, [pc, #80]	; (801af14 <mem_sanity+0x190>)
 801aec2:	f00b fa47 	bl	8026354 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801aec6:	8822      	ldrh	r2, [r4, #0]
 801aec8:	f242 7310 	movw	r3, #10000	; 0x2710
 801aecc:	429a      	cmp	r2, r3
 801aece:	d101      	bne.n	801aed4 <mem_sanity+0x150>
}
 801aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801aed4:	4b0d      	ldr	r3, [pc, #52]	; (801af0c <mem_sanity+0x188>)
 801aed6:	f240 225e 	movw	r2, #606	; 0x25e
 801aeda:	4913      	ldr	r1, [pc, #76]	; (801af28 <mem_sanity+0x1a4>)
 801aedc:	480d      	ldr	r0, [pc, #52]	; (801af14 <mem_sanity+0x190>)
}
 801aede:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801aee2:	f00b ba37 	b.w	8026354 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801aee6:	4b09      	ldr	r3, [pc, #36]	; (801af0c <mem_sanity+0x188>)
 801aee8:	f240 2242 	movw	r2, #578	; 0x242
 801aeec:	490e      	ldr	r1, [pc, #56]	; (801af28 <mem_sanity+0x1a4>)
 801aeee:	4809      	ldr	r0, [pc, #36]	; (801af14 <mem_sanity+0x190>)
 801aef0:	f00b fa30 	bl	8026354 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 801aef4:	8834      	ldrh	r4, [r6, #0]
 801aef6:	e75e      	b.n	801adb6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801aef8:	4b04      	ldr	r3, [pc, #16]	; (801af0c <mem_sanity+0x188>)
 801aefa:	f240 2241 	movw	r2, #577	; 0x241
 801aefe:	4909      	ldr	r1, [pc, #36]	; (801af24 <mem_sanity+0x1a0>)
 801af00:	4804      	ldr	r0, [pc, #16]	; (801af14 <mem_sanity+0x190>)
 801af02:	f00b fa27 	bl	8026354 <iprintf>
 801af06:	e750      	b.n	801adaa <mem_sanity+0x26>
 801af08:	2001f2bc 	.word	0x2001f2bc
 801af0c:	080446fc 	.word	0x080446fc
 801af10:	0804472c 	.word	0x0804472c
 801af14:	0802b034 	.word	0x0802b034
 801af18:	08044794 	.word	0x08044794
 801af1c:	080447ac 	.word	0x080447ac
 801af20:	080447c8 	.word	0x080447c8
 801af24:	08044744 	.word	0x08044744
 801af28:	08044760 	.word	0x08044760
 801af2c:	080447e0 	.word	0x080447e0
 801af30:	2001f2c0 	.word	0x2001f2c0
 801af34:	0804477c 	.word	0x0804477c

0801af38 <mem_overflow_check_raw>:
{
 801af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af3c:	1e4c      	subs	r4, r1, #1
 801af3e:	310f      	adds	r1, #15
 801af40:	b0a3      	sub	sp, #140	; 0x8c
 801af42:	4606      	mov	r6, r0
 801af44:	4615      	mov	r5, r2
 801af46:	4698      	mov	r8, r3
 801af48:	4404      	add	r4, r0
 801af4a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801af4c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801afc4 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 801af50:	f8df b074 	ldr.w	fp, [pc, #116]	; 801afc8 <mem_overflow_check_raw+0x90>
 801af54:	f8df a074 	ldr.w	sl, [pc, #116]	; 801afcc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801af58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801af5c:	464a      	mov	r2, r9
 801af5e:	2180      	movs	r1, #128	; 0x80
 801af60:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801af62:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801af64:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801af66:	d009      	beq.n	801af7c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801af68:	f8cd 8000 	str.w	r8, [sp]
 801af6c:	f00b fba8 	bl	80266c0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801af70:	465b      	mov	r3, fp
 801af72:	226d      	movs	r2, #109	; 0x6d
 801af74:	a902      	add	r1, sp, #8
 801af76:	4650      	mov	r0, sl
 801af78:	f00b f9ec 	bl	8026354 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 801af7c:	42bc      	cmp	r4, r7
 801af7e:	d1eb      	bne.n	801af58 <mem_overflow_check_raw+0x20>
 801af80:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801af84:	4f0e      	ldr	r7, [pc, #56]	; (801afc0 <mem_overflow_check_raw+0x88>)
 801af86:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801af88:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801afc8 <mem_overflow_check_raw+0x90>
 801af8c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801afcc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801af90:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801af94:	463a      	mov	r2, r7
 801af96:	2180      	movs	r1, #128	; 0x80
 801af98:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801af9a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801af9c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801af9e:	d009      	beq.n	801afb4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801afa0:	f8cd 8000 	str.w	r8, [sp]
 801afa4:	f00b fb8c 	bl	80266c0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801afa8:	4653      	mov	r3, sl
 801afaa:	2278      	movs	r2, #120	; 0x78
 801afac:	a902      	add	r1, sp, #8
 801afae:	4648      	mov	r0, r9
 801afb0:	f00b f9d0 	bl	8026354 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801afb4:	42b4      	cmp	r4, r6
 801afb6:	d1eb      	bne.n	801af90 <mem_overflow_check_raw+0x58>
}
 801afb8:	b023      	add	sp, #140	; 0x8c
 801afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afbe:	bf00      	nop
 801afc0:	08044814 	.word	0x08044814
 801afc4:	080447f4 	.word	0x080447f4
 801afc8:	080446fc 	.word	0x080446fc
 801afcc:	0802b034 	.word	0x0802b034

0801afd0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801afd0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801afd4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801afd6:	f840 3c10 	str.w	r3, [r0, #-16]
 801afda:	f840 3c0c 	str.w	r3, [r0, #-12]
 801afde:	f840 3c08 	str.w	r3, [r0, #-8]
 801afe2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801afe6:	5043      	str	r3, [r0, r1]
 801afe8:	6053      	str	r3, [r2, #4]
 801afea:	6093      	str	r3, [r2, #8]
 801afec:	60d3      	str	r3, [r2, #12]
}
 801afee:	4770      	bx	lr

0801aff0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801aff0:	4b14      	ldr	r3, [pc, #80]	; (801b044 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801aff2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801aff6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801aff8:	4913      	ldr	r1, [pc, #76]	; (801b048 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801affa:	f023 0303 	bic.w	r3, r3, #3
{
 801affe:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801b000:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b002:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b004:	4c11      	ldr	r4, [pc, #68]	; (801b04c <mem_init+0x5c>)
  mem->used = 0;
 801b006:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b008:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b00a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801b00e:	4910      	ldr	r1, [pc, #64]	; (801b050 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b010:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801b012:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801b014:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801b018:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801b01c:	f7ff feb2 	bl	801ad84 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801b020:	6822      	ldr	r2, [r4, #0]
 801b022:	4b0c      	ldr	r3, [pc, #48]	; (801b054 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b024:	480c      	ldr	r0, [pc, #48]	; (801b058 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801b026:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b028:	f009 fcae 	bl	8024988 <sys_mutex_new>
 801b02c:	b900      	cbnz	r0, 801b030 <mem_init+0x40>
}
 801b02e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b030:	4b0a      	ldr	r3, [pc, #40]	; (801b05c <mem_init+0x6c>)
 801b032:	f240 221f 	movw	r2, #543	; 0x21f
 801b036:	490a      	ldr	r1, [pc, #40]	; (801b060 <mem_init+0x70>)
 801b038:	480a      	ldr	r0, [pc, #40]	; (801b064 <mem_init+0x74>)
}
 801b03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b03e:	f00b b989 	b.w	8026354 <iprintf>
 801b042:	bf00      	nop
 801b044:	2001f2c7 	.word	0x2001f2c7
 801b048:	2001f2c0 	.word	0x2001f2c0
 801b04c:	2001f2bc 	.word	0x2001f2bc
 801b050:	27102710 	.word	0x27102710
 801b054:	2001f2b0 	.word	0x2001f2b0
 801b058:	2001f2b8 	.word	0x2001f2b8
 801b05c:	080446fc 	.word	0x080446fc
 801b060:	08044834 	.word	0x08044834
 801b064:	0802b034 	.word	0x0802b034

0801b068 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b068:	2800      	cmp	r0, #0
 801b06a:	d07f      	beq.n	801b16c <mem_free+0x104>
{
 801b06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b070:	f010 0803 	ands.w	r8, r0, #3
 801b074:	4604      	mov	r4, r0
 801b076:	d170      	bne.n	801b15a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b078:	4e5c      	ldr	r6, [pc, #368]	; (801b1ec <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b07a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b07e:	6833      	ldr	r3, [r6, #0]
 801b080:	42ab      	cmp	r3, r5
 801b082:	d805      	bhi.n	801b090 <mem_free+0x28>
 801b084:	4f5a      	ldr	r7, [pc, #360]	; (801b1f0 <mem_free+0x188>)
 801b086:	f100 030c 	add.w	r3, r0, #12
 801b08a:	683a      	ldr	r2, [r7, #0]
 801b08c:	429a      	cmp	r2, r3
 801b08e:	d208      	bcs.n	801b0a2 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b090:	4b58      	ldr	r3, [pc, #352]	; (801b1f4 <mem_free+0x18c>)
 801b092:	f240 227f 	movw	r2, #639	; 0x27f
 801b096:	4958      	ldr	r1, [pc, #352]	; (801b1f8 <mem_free+0x190>)
 801b098:	4858      	ldr	r0, [pc, #352]	; (801b1fc <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801b09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b09e:	f00b b959 	b.w	8026354 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b0a2:	4b57      	ldr	r3, [pc, #348]	; (801b200 <mem_free+0x198>)
 801b0a4:	4a57      	ldr	r2, [pc, #348]	; (801b204 <mem_free+0x19c>)
 801b0a6:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801b0aa:	f7ff ff45 	bl	801af38 <mem_overflow_check_raw>
  if (!mem->used) {
 801b0ae:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	f000 8082 	beq.w	801b1bc <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801b0b8:	4628      	mov	r0, r5
 801b0ba:	f7ff fe33 	bl	801ad24 <mem_link_valid>
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	f000 8085 	beq.w	801b1ce <mem_free+0x166>
  mem->used = 0;
 801b0c4:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801b0c8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801b228 <mem_free+0x1c0>
 801b0cc:	f8d8 3000 	ldr.w	r3, [r8]
 801b0d0:	42ab      	cmp	r3, r5
 801b0d2:	d901      	bls.n	801b0d8 <mem_free+0x70>
    lfree = mem;
 801b0d4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b0d8:	6833      	ldr	r3, [r6, #0]
 801b0da:	429d      	cmp	r5, r3
 801b0dc:	d351      	bcc.n	801b182 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b0de:	683b      	ldr	r3, [r7, #0]
 801b0e0:	429d      	cmp	r5, r3
 801b0e2:	d258      	bcs.n	801b196 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b0e4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b0e8:	f242 7210 	movw	r2, #10000	; 0x2710
 801b0ec:	4293      	cmp	r3, r2
 801b0ee:	d83e      	bhi.n	801b16e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801b0f0:	6832      	ldr	r2, [r6, #0]
 801b0f2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b0f4:	429d      	cmp	r5, r3
 801b0f6:	d013      	beq.n	801b120 <mem_free+0xb8>
 801b0f8:	7919      	ldrb	r1, [r3, #4]
 801b0fa:	b989      	cbnz	r1, 801b120 <mem_free+0xb8>
 801b0fc:	6839      	ldr	r1, [r7, #0]
 801b0fe:	428b      	cmp	r3, r1
 801b100:	d00e      	beq.n	801b120 <mem_free+0xb8>
    if (lfree == nmem) {
 801b102:	f8d8 1000 	ldr.w	r1, [r8]
 801b106:	428b      	cmp	r3, r1
 801b108:	d06d      	beq.n	801b1e6 <mem_free+0x17e>
    mem->next = nmem->next;
 801b10a:	8819      	ldrh	r1, [r3, #0]
 801b10c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b110:	f242 7110 	movw	r1, #10000	; 0x2710
 801b114:	881b      	ldrh	r3, [r3, #0]
 801b116:	428b      	cmp	r3, r1
 801b118:	d002      	beq.n	801b120 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b11a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801b11c:	1aa9      	subs	r1, r5, r2
 801b11e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801b120:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801b124:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801b126:	429d      	cmp	r5, r3
 801b128:	d010      	beq.n	801b14c <mem_free+0xe4>
 801b12a:	7918      	ldrb	r0, [r3, #4]
 801b12c:	b970      	cbnz	r0, 801b14c <mem_free+0xe4>
    if (lfree == mem) {
 801b12e:	f8d8 0000 	ldr.w	r0, [r8]
 801b132:	4285      	cmp	r5, r0
 801b134:	d054      	beq.n	801b1e0 <mem_free+0x178>
    pmem->next = mem->next;
 801b136:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b13a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801b13e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b140:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b144:	4283      	cmp	r3, r0
 801b146:	d001      	beq.n	801b14c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b148:	441a      	add	r2, r3
 801b14a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801b14c:	f7ff fe1a 	bl	801ad84 <mem_sanity>
  mem_free_count = 1;
 801b150:	4b2d      	ldr	r3, [pc, #180]	; (801b208 <mem_free+0x1a0>)
 801b152:	2201      	movs	r2, #1
 801b154:	701a      	strb	r2, [r3, #0]
}
 801b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b15a:	4b26      	ldr	r3, [pc, #152]	; (801b1f4 <mem_free+0x18c>)
 801b15c:	f240 2273 	movw	r2, #627	; 0x273
 801b160:	492a      	ldr	r1, [pc, #168]	; (801b20c <mem_free+0x1a4>)
 801b162:	4826      	ldr	r0, [pc, #152]	; (801b1fc <mem_free+0x194>)
}
 801b164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b168:	f00b b8f4 	b.w	8026354 <iprintf>
 801b16c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b16e:	4b21      	ldr	r3, [pc, #132]	; (801b1f4 <mem_free+0x18c>)
 801b170:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801b174:	4926      	ldr	r1, [pc, #152]	; (801b210 <mem_free+0x1a8>)
 801b176:	4821      	ldr	r0, [pc, #132]	; (801b1fc <mem_free+0x194>)
 801b178:	f00b f8ec 	bl	8026354 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801b17c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b180:	e7b6      	b.n	801b0f0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b182:	4b1c      	ldr	r3, [pc, #112]	; (801b1f4 <mem_free+0x18c>)
 801b184:	f240 12df 	movw	r2, #479	; 0x1df
 801b188:	4922      	ldr	r1, [pc, #136]	; (801b214 <mem_free+0x1ac>)
 801b18a:	481c      	ldr	r0, [pc, #112]	; (801b1fc <mem_free+0x194>)
 801b18c:	f00b f8e2 	bl	8026354 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	429d      	cmp	r5, r3
 801b194:	d306      	bcc.n	801b1a4 <mem_free+0x13c>
 801b196:	4b17      	ldr	r3, [pc, #92]	; (801b1f4 <mem_free+0x18c>)
 801b198:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b19c:	491e      	ldr	r1, [pc, #120]	; (801b218 <mem_free+0x1b0>)
 801b19e:	4817      	ldr	r0, [pc, #92]	; (801b1fc <mem_free+0x194>)
 801b1a0:	f00b f8d8 	bl	8026354 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b1a4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d09b      	beq.n	801b0e4 <mem_free+0x7c>
 801b1ac:	4b11      	ldr	r3, [pc, #68]	; (801b1f4 <mem_free+0x18c>)
 801b1ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b1b2:	491a      	ldr	r1, [pc, #104]	; (801b21c <mem_free+0x1b4>)
 801b1b4:	4811      	ldr	r0, [pc, #68]	; (801b1fc <mem_free+0x194>)
 801b1b6:	f00b f8cd 	bl	8026354 <iprintf>
 801b1ba:	e793      	b.n	801b0e4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b1bc:	4b0d      	ldr	r3, [pc, #52]	; (801b1f4 <mem_free+0x18c>)
 801b1be:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b1c2:	4917      	ldr	r1, [pc, #92]	; (801b220 <mem_free+0x1b8>)
 801b1c4:	480d      	ldr	r0, [pc, #52]	; (801b1fc <mem_free+0x194>)
}
 801b1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b1ca:	f00b b8c3 	b.w	8026354 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b1ce:	4b09      	ldr	r3, [pc, #36]	; (801b1f4 <mem_free+0x18c>)
 801b1d0:	f240 2295 	movw	r2, #661	; 0x295
 801b1d4:	4913      	ldr	r1, [pc, #76]	; (801b224 <mem_free+0x1bc>)
 801b1d6:	4809      	ldr	r0, [pc, #36]	; (801b1fc <mem_free+0x194>)
}
 801b1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b1dc:	f00b b8ba 	b.w	8026354 <iprintf>
      lfree = pmem;
 801b1e0:	f8c8 3000 	str.w	r3, [r8]
 801b1e4:	e7a7      	b.n	801b136 <mem_free+0xce>
      lfree = mem;
 801b1e6:	f8c8 5000 	str.w	r5, [r8]
 801b1ea:	e78e      	b.n	801b10a <mem_free+0xa2>
 801b1ec:	2001f2bc 	.word	0x2001f2bc
 801b1f0:	2001f2c0 	.word	0x2001f2c0
 801b1f4:	080446fc 	.word	0x080446fc
 801b1f8:	08044874 	.word	0x08044874
 801b1fc:	0802b034 	.word	0x0802b034
 801b200:	0802b2d8 	.word	0x0802b2d8
 801b204:	08044890 	.word	0x08044890
 801b208:	2001f2b4 	.word	0x2001f2b4
 801b20c:	08044850 	.word	0x08044850
 801b210:	08044944 	.word	0x08044944
 801b214:	080448f4 	.word	0x080448f4
 801b218:	0804490c 	.word	0x0804490c
 801b21c:	08044928 	.word	0x08044928
 801b220:	08044898 	.word	0x08044898
 801b224:	080448c0 	.word	0x080448c0
 801b228:	2001f2b0 	.word	0x2001f2b0

0801b22c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b230:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b232:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b236:	f024 0403 	bic.w	r4, r4, #3
 801b23a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801b23c:	2c0c      	cmp	r4, #12
 801b23e:	bf38      	it	cc
 801b240:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b242:	3420      	adds	r4, #32
 801b244:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b246:	429c      	cmp	r4, r3
 801b248:	d87a      	bhi.n	801b340 <mem_trim+0x114>
 801b24a:	42a1      	cmp	r1, r4
 801b24c:	460e      	mov	r6, r1
 801b24e:	d877      	bhi.n	801b340 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b250:	4f58      	ldr	r7, [pc, #352]	; (801b3b4 <mem_trim+0x188>)
 801b252:	4605      	mov	r5, r0
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	4283      	cmp	r3, r0
 801b258:	d803      	bhi.n	801b262 <mem_trim+0x36>
 801b25a:	4b57      	ldr	r3, [pc, #348]	; (801b3b8 <mem_trim+0x18c>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	4283      	cmp	r3, r0
 801b260:	d810      	bhi.n	801b284 <mem_trim+0x58>
 801b262:	4b56      	ldr	r3, [pc, #344]	; (801b3bc <mem_trim+0x190>)
 801b264:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b268:	4955      	ldr	r1, [pc, #340]	; (801b3c0 <mem_trim+0x194>)
 801b26a:	4856      	ldr	r0, [pc, #344]	; (801b3c4 <mem_trim+0x198>)
 801b26c:	f00b f872 	bl	8026354 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b270:	683b      	ldr	r3, [r7, #0]
 801b272:	42ab      	cmp	r3, r5
 801b274:	d902      	bls.n	801b27c <mem_trim+0x50>
{
 801b276:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b27c:	4b4e      	ldr	r3, [pc, #312]	; (801b3b8 <mem_trim+0x18c>)
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	429d      	cmp	r5, r3
 801b282:	d2f8      	bcs.n	801b276 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b284:	4b50      	ldr	r3, [pc, #320]	; (801b3c8 <mem_trim+0x19c>)
 801b286:	4628      	mov	r0, r5
 801b288:	4a50      	ldr	r2, [pc, #320]	; (801b3cc <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b28a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b28e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801b292:	f7ff fe51 	bl	801af38 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801b296:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b298:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801b29c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b2a0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801b2a4:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b2a8:	eba3 0308 	sub.w	r3, r3, r8
 801b2ac:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b2ae:	429c      	cmp	r4, r3
 801b2b0:	d83d      	bhi.n	801b32e <mem_trim+0x102>
  if (newsize == size) {
 801b2b2:	d0e0      	beq.n	801b276 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801b2b4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801b2b8:	f899 0004 	ldrb.w	r0, [r9, #4]
 801b2bc:	2800      	cmp	r0, #0
 801b2be:	d142      	bne.n	801b346 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b2c0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2c4:	4299      	cmp	r1, r3
 801b2c6:	d061      	beq.n	801b38c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b2c8:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801b2cc:	4940      	ldr	r1, [pc, #256]	; (801b3d0 <mem_trim+0x1a4>)
    next = mem2->next;
 801b2ce:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b2d2:	441c      	add	r4, r3
    if (lfree == mem2) {
 801b2d4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b2d6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801b2d8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801b2da:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801b2de:	d053      	beq.n	801b388 <mem_trim+0x15c>
    mem2->used = 0;
 801b2e0:	2100      	movs	r1, #0
    mem2->next = next;
 801b2e2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801b2e4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b2e8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b2ea:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b2ee:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b2f2:	881b      	ldrh	r3, [r3, #0]
 801b2f4:	428b      	cmp	r3, r1
 801b2f6:	d001      	beq.n	801b2fc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b2f8:	4413      	add	r3, r2
 801b2fa:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b2fc:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b300:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801b302:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b306:	f845 3c10 	str.w	r3, [r5, #-16]
 801b30a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801b30e:	f845 3c08 	str.w	r3, [r5, #-8]
 801b312:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b316:	51ab      	str	r3, [r5, r6]
 801b318:	6053      	str	r3, [r2, #4]
 801b31a:	6093      	str	r3, [r2, #8]
 801b31c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801b31e:	f7ff fd31 	bl	801ad84 <mem_sanity>
  mem_free_count = 1;
 801b322:	4b2c      	ldr	r3, [pc, #176]	; (801b3d4 <mem_trim+0x1a8>)
 801b324:	2201      	movs	r2, #1
  return rmem;
 801b326:	4628      	mov	r0, r5
  mem_free_count = 1;
 801b328:	701a      	strb	r2, [r3, #0]
}
 801b32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b32e:	4b23      	ldr	r3, [pc, #140]	; (801b3bc <mem_trim+0x190>)
 801b330:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b334:	4928      	ldr	r1, [pc, #160]	; (801b3d8 <mem_trim+0x1ac>)
 801b336:	4823      	ldr	r0, [pc, #140]	; (801b3c4 <mem_trim+0x198>)
 801b338:	f00b f80c 	bl	8026354 <iprintf>
    return NULL;
 801b33c:	2000      	movs	r0, #0
 801b33e:	e79b      	b.n	801b278 <mem_trim+0x4c>
    return NULL;
 801b340:	2000      	movs	r0, #0
}
 801b342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b346:	f104 0014 	add.w	r0, r4, #20
 801b34a:	4298      	cmp	r0, r3
 801b34c:	d8d6      	bhi.n	801b2fc <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b34e:	f108 0308 	add.w	r3, r8, #8
 801b352:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b354:	f242 7310 	movw	r3, #10000	; 0x2710
 801b358:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b35a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b35c:	d01f      	beq.n	801b39e <mem_trim+0x172>
    if (mem2 < lfree) {
 801b35e:	481c      	ldr	r0, [pc, #112]	; (801b3d0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801b360:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801b362:	6807      	ldr	r7, [r0, #0]
 801b364:	429f      	cmp	r7, r3
 801b366:	d900      	bls.n	801b36a <mem_trim+0x13e>
      lfree = mem2;
 801b368:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801b36a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801b36c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801b36e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b372:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b374:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b378:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b37c:	881b      	ldrh	r3, [r3, #0]
 801b37e:	428b      	cmp	r3, r1
 801b380:	d0bc      	beq.n	801b2fc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b382:	441a      	add	r2, r3
 801b384:	8054      	strh	r4, [r2, #2]
 801b386:	e7b9      	b.n	801b2fc <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801b388:	600b      	str	r3, [r1, #0]
 801b38a:	e7a9      	b.n	801b2e0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b38c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b390:	4b0a      	ldr	r3, [pc, #40]	; (801b3bc <mem_trim+0x190>)
 801b392:	4912      	ldr	r1, [pc, #72]	; (801b3dc <mem_trim+0x1b0>)
 801b394:	480b      	ldr	r0, [pc, #44]	; (801b3c4 <mem_trim+0x198>)
 801b396:	f00a ffdd 	bl	8026354 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b39a:	683a      	ldr	r2, [r7, #0]
 801b39c:	e794      	b.n	801b2c8 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b39e:	f240 3216 	movw	r2, #790	; 0x316
 801b3a2:	490e      	ldr	r1, [pc, #56]	; (801b3dc <mem_trim+0x1b0>)
 801b3a4:	4b05      	ldr	r3, [pc, #20]	; (801b3bc <mem_trim+0x190>)
 801b3a6:	4807      	ldr	r0, [pc, #28]	; (801b3c4 <mem_trim+0x198>)
 801b3a8:	f00a ffd4 	bl	8026354 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b3ac:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801b3ae:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801b3b2:	e7d4      	b.n	801b35e <mem_trim+0x132>
 801b3b4:	2001f2bc 	.word	0x2001f2bc
 801b3b8:	2001f2c0 	.word	0x2001f2c0
 801b3bc:	080446fc 	.word	0x080446fc
 801b3c0:	08044970 	.word	0x08044970
 801b3c4:	0802b034 	.word	0x0802b034
 801b3c8:	0802b2d8 	.word	0x0802b2d8
 801b3cc:	08044890 	.word	0x08044890
 801b3d0:	2001f2b0 	.word	0x2001f2b0
 801b3d4:	2001f2b4 	.word	0x2001f2b4
 801b3d8:	08044988 	.word	0x08044988
 801b3dc:	080449a8 	.word	0x080449a8

0801b3e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b3e4:	4680      	mov	r8, r0
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	f000 80b2 	beq.w	801b550 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b3ec:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b3f0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b3f4:	f02b 0b03 	bic.w	fp, fp, #3
 801b3f8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801b3fc:	f1bb 0f0c 	cmp.w	fp, #12
 801b400:	bf38      	it	cc
 801b402:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b406:	f10b 0720 	add.w	r7, fp, #32
 801b40a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b40c:	42a7      	cmp	r7, r4
 801b40e:	f200 809f 	bhi.w	801b550 <mem_malloc+0x170>
 801b412:	42b8      	cmp	r0, r7
 801b414:	bf94      	ite	ls
 801b416:	f04f 0a00 	movls.w	sl, #0
 801b41a:	f04f 0a01 	movhi.w	sl, #1
 801b41e:	f1ba 0f00 	cmp.w	sl, #0
 801b422:	f040 8095 	bne.w	801b550 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b426:	4866      	ldr	r0, [pc, #408]	; (801b5c0 <mem_malloc+0x1e0>)
 801b428:	f009 fabe 	bl	80249a8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801b42c:	4b65      	ldr	r3, [pc, #404]	; (801b5c4 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b42e:	eba4 0c07 	sub.w	ip, r4, r7
 801b432:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801b5ec <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801b436:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b438:	f06f 0e07 	mvn.w	lr, #7
 801b43c:	4d62      	ldr	r5, [pc, #392]	; (801b5c8 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b43e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801b442:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b444:	b2b3      	uxth	r3, r6
 801b446:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801b448:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b44a:	d97a      	bls.n	801b542 <mem_malloc+0x162>
      mem_free_count = 0;
 801b44c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b450:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801b454:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b456:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801b458:	2900      	cmp	r1, #0
 801b45a:	d1f0      	bne.n	801b43e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801b45c:	7923      	ldrb	r3, [r4, #4]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d16b      	bne.n	801b53a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b462:	8821      	ldrh	r1, [r4, #0]
 801b464:	440a      	add	r2, r1
 801b466:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801b468:	42ba      	cmp	r2, r7
 801b46a:	d3ec      	bcc.n	801b446 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b46c:	f107 0314 	add.w	r3, r7, #20
 801b470:	429a      	cmp	r2, r3
 801b472:	d371      	bcc.n	801b558 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b474:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b478:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b47c:	44b2      	add	sl, r6
 801b47e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b482:	459a      	cmp	sl, r3
 801b484:	f000 808f 	beq.w	801b5a6 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801b488:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801b48c:	2200      	movs	r2, #0
 801b48e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b490:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801b494:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801b498:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801b49a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801b49c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801b4a0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b4a2:	f830 300a 	ldrh.w	r3, [r0, sl]
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	d002      	beq.n	801b4b0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b4aa:	4418      	add	r0, r3
 801b4ac:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b4b0:	f8d9 3000 	ldr.w	r3, [r9]
 801b4b4:	42a3      	cmp	r3, r4
 801b4b6:	f040 8081 	bne.w	801b5bc <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801b4ba:	4b42      	ldr	r3, [pc, #264]	; (801b5c4 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801b4bc:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801b4be:	4e43      	ldr	r6, [pc, #268]	; (801b5cc <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801b4c0:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801b4c4:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801b4c6:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801b4ca:	791a      	ldrb	r2, [r3, #4]
 801b4cc:	b942      	cbnz	r2, 801b4e0 <mem_malloc+0x100>
 801b4ce:	e009      	b.n	801b4e4 <mem_malloc+0x104>
            mem_free_count = 0;
 801b4d0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801b4d2:	782a      	ldrb	r2, [r5, #0]
 801b4d4:	2a00      	cmp	r2, #0
 801b4d6:	d142      	bne.n	801b55e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801b4d8:	881b      	ldrh	r3, [r3, #0]
 801b4da:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801b4dc:	791a      	ldrb	r2, [r3, #4]
 801b4de:	b10a      	cbz	r2, 801b4e4 <mem_malloc+0x104>
 801b4e0:	4299      	cmp	r1, r3
 801b4e2:	d1f5      	bne.n	801b4d0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801b4e4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b4e8:	f8d9 3000 	ldr.w	r3, [r9]
 801b4ec:	4299      	cmp	r1, r3
 801b4ee:	d004      	beq.n	801b4fa <mem_malloc+0x11a>
 801b4f0:	f8d9 3000 	ldr.w	r3, [r9]
 801b4f4:	791b      	ldrb	r3, [r3, #4]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d14d      	bne.n	801b596 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b4fa:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801b4fc:	4830      	ldr	r0, [pc, #192]	; (801b5c0 <mem_malloc+0x1e0>)
 801b4fe:	f009 fa59 	bl	80249b4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b502:	6833      	ldr	r3, [r6, #0]
 801b504:	4427      	add	r7, r4
 801b506:	42bb      	cmp	r3, r7
 801b508:	d33d      	bcc.n	801b586 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b50a:	07a3      	lsls	r3, r4, #30
 801b50c:	d12c      	bne.n	801b568 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b50e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b512:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801b516:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801b51a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b51e:	60a3      	str	r3, [r4, #8]
 801b520:	60e3      	str	r3, [r4, #12]
 801b522:	6123      	str	r3, [r4, #16]
 801b524:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b526:	f845 3008 	str.w	r3, [r5, r8]
 801b52a:	6053      	str	r3, [r2, #4]
 801b52c:	6093      	str	r3, [r2, #8]
 801b52e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801b530:	f7ff fc28 	bl	801ad84 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801b534:	4628      	mov	r0, r5
 801b536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b53a:	8826      	ldrh	r6, [r4, #0]
 801b53c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b53e:	459c      	cmp	ip, r3
 801b540:	d884      	bhi.n	801b44c <mem_malloc+0x6c>
  return NULL;
 801b542:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801b544:	481e      	ldr	r0, [pc, #120]	; (801b5c0 <mem_malloc+0x1e0>)
 801b546:	f009 fa35 	bl	80249b4 <sys_mutex_unlock>
}
 801b54a:	4628      	mov	r0, r5
 801b54c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801b550:	2500      	movs	r5, #0
}
 801b552:	4628      	mov	r0, r5
 801b554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801b558:	2301      	movs	r3, #1
 801b55a:	7123      	strb	r3, [r4, #4]
 801b55c:	e7a8      	b.n	801b4b0 <mem_malloc+0xd0>
        if (mem == lfree) {
 801b55e:	f8d9 3000 	ldr.w	r3, [r9]
 801b562:	42a3      	cmp	r3, r4
 801b564:	d0af      	beq.n	801b4c6 <mem_malloc+0xe6>
 801b566:	e7c8      	b.n	801b4fa <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b568:	4b19      	ldr	r3, [pc, #100]	; (801b5d0 <mem_malloc+0x1f0>)
 801b56a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b56e:	4919      	ldr	r1, [pc, #100]	; (801b5d4 <mem_malloc+0x1f4>)
 801b570:	4819      	ldr	r0, [pc, #100]	; (801b5d8 <mem_malloc+0x1f8>)
 801b572:	f00a feef 	bl	8026354 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b576:	4b16      	ldr	r3, [pc, #88]	; (801b5d0 <mem_malloc+0x1f0>)
 801b578:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b57c:	4917      	ldr	r1, [pc, #92]	; (801b5dc <mem_malloc+0x1fc>)
 801b57e:	4816      	ldr	r0, [pc, #88]	; (801b5d8 <mem_malloc+0x1f8>)
 801b580:	f00a fee8 	bl	8026354 <iprintf>
 801b584:	e7c3      	b.n	801b50e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b586:	4b12      	ldr	r3, [pc, #72]	; (801b5d0 <mem_malloc+0x1f0>)
 801b588:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b58c:	4914      	ldr	r1, [pc, #80]	; (801b5e0 <mem_malloc+0x200>)
 801b58e:	4812      	ldr	r0, [pc, #72]	; (801b5d8 <mem_malloc+0x1f8>)
 801b590:	f00a fee0 	bl	8026354 <iprintf>
 801b594:	e7b9      	b.n	801b50a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b596:	4b0e      	ldr	r3, [pc, #56]	; (801b5d0 <mem_malloc+0x1f0>)
 801b598:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b59c:	4911      	ldr	r1, [pc, #68]	; (801b5e4 <mem_malloc+0x204>)
 801b59e:	480e      	ldr	r0, [pc, #56]	; (801b5d8 <mem_malloc+0x1f8>)
 801b5a0:	f00a fed8 	bl	8026354 <iprintf>
 801b5a4:	e7a9      	b.n	801b4fa <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b5a6:	4b0a      	ldr	r3, [pc, #40]	; (801b5d0 <mem_malloc+0x1f0>)
 801b5a8:	f240 3287 	movw	r2, #903	; 0x387
 801b5ac:	490e      	ldr	r1, [pc, #56]	; (801b5e8 <mem_malloc+0x208>)
 801b5ae:	480a      	ldr	r0, [pc, #40]	; (801b5d8 <mem_malloc+0x1f8>)
 801b5b0:	f00a fed0 	bl	8026354 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b5b4:	4b03      	ldr	r3, [pc, #12]	; (801b5c4 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801b5b6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b5b8:	6818      	ldr	r0, [r3, #0]
 801b5ba:	e765      	b.n	801b488 <mem_malloc+0xa8>
 801b5bc:	4e03      	ldr	r6, [pc, #12]	; (801b5cc <mem_malloc+0x1ec>)
 801b5be:	e79c      	b.n	801b4fa <mem_malloc+0x11a>
 801b5c0:	2001f2b8 	.word	0x2001f2b8
 801b5c4:	2001f2bc 	.word	0x2001f2bc
 801b5c8:	2001f2b4 	.word	0x2001f2b4
 801b5cc:	2001f2c0 	.word	0x2001f2c0
 801b5d0:	080446fc 	.word	0x080446fc
 801b5d4:	08044a08 	.word	0x08044a08
 801b5d8:	0802b034 	.word	0x0802b034
 801b5dc:	08044a38 	.word	0x08044a38
 801b5e0:	080449d8 	.word	0x080449d8
 801b5e4:	080449bc 	.word	0x080449bc
 801b5e8:	080449a8 	.word	0x080449a8
 801b5ec:	2001f2b0 	.word	0x2001f2b0

0801b5f0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5f4:	4f12      	ldr	r7, [pc, #72]	; (801b640 <memp_overflow_check_all+0x50>)
 801b5f6:	2308      	movs	r3, #8
 801b5f8:	4c12      	ldr	r4, [pc, #72]	; (801b644 <memp_overflow_check_all+0x54>)
 801b5fa:	4d13      	ldr	r5, [pc, #76]	; (801b648 <memp_overflow_check_all+0x58>)
 801b5fc:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801b600:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801b64c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801b604:	3403      	adds	r4, #3
 801b606:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b60a:	b183      	cbz	r3, 801b62e <memp_overflow_check_all+0x3e>
 801b60c:	88a9      	ldrh	r1, [r5, #4]
 801b60e:	2600      	movs	r6, #0
 801b610:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801b612:	f104 001c 	add.w	r0, r4, #28
 801b616:	682b      	ldr	r3, [r5, #0]
 801b618:	464a      	mov	r2, r9
 801b61a:	f7ff fc8d 	bl	801af38 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b61e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b620:	88e8      	ldrh	r0, [r5, #6]
 801b622:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b624:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b628:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801b62a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b62c:	d8f0      	bhi.n	801b610 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801b62e:	45b8      	cmp	r8, r7
 801b630:	d004      	beq.n	801b63c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801b632:	f857 5b04 	ldr.w	r5, [r7], #4
 801b636:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801b638:	88eb      	ldrh	r3, [r5, #6]
 801b63a:	e7e3      	b.n	801b604 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801b63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b640:	08044cec 	.word	0x08044cec
 801b644:	20029a40 	.word	0x20029a40
 801b648:	08044c58 	.word	0x08044c58
 801b64c:	08044a5c 	.word	0x08044a5c

0801b650 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801b650:	078b      	lsls	r3, r1, #30
{
 801b652:	b570      	push	{r4, r5, r6, lr}
 801b654:	460c      	mov	r4, r1
 801b656:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801b658:	d11f      	bne.n	801b69a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801b65a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801b65c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801b660:	6811      	ldr	r1, [r2, #0]
 801b662:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801b666:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801b668:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801b66c:	b15a      	cbz	r2, 801b686 <do_memp_free_pool+0x36>
      if (t == h) {
 801b66e:	429a      	cmp	r2, r3
 801b670:	d105      	bne.n	801b67e <do_memp_free_pool+0x2e>
 801b672:	e009      	b.n	801b688 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801b674:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801b676:	b133      	cbz	r3, 801b686 <do_memp_free_pool+0x36>
 801b678:	b12a      	cbz	r2, 801b686 <do_memp_free_pool+0x36>
      if (t == h) {
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d004      	beq.n	801b688 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801b67e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801b680:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801b682:	2a00      	cmp	r2, #0
 801b684:	d1f6      	bne.n	801b674 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801b686:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801b688:	4b08      	ldr	r3, [pc, #32]	; (801b6ac <do_memp_free_pool+0x5c>)
 801b68a:	f240 1285 	movw	r2, #389	; 0x185
 801b68e:	4908      	ldr	r1, [pc, #32]	; (801b6b0 <do_memp_free_pool+0x60>)
 801b690:	4808      	ldr	r0, [pc, #32]	; (801b6b4 <do_memp_free_pool+0x64>)
}
 801b692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801b696:	f00a be5d 	b.w	8026354 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801b69a:	4b04      	ldr	r3, [pc, #16]	; (801b6ac <do_memp_free_pool+0x5c>)
 801b69c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801b6a0:	4905      	ldr	r1, [pc, #20]	; (801b6b8 <do_memp_free_pool+0x68>)
 801b6a2:	4804      	ldr	r0, [pc, #16]	; (801b6b4 <do_memp_free_pool+0x64>)
 801b6a4:	f00a fe56 	bl	8026354 <iprintf>
 801b6a8:	e7d7      	b.n	801b65a <do_memp_free_pool+0xa>
 801b6aa:	bf00      	nop
 801b6ac:	08044a64 	.word	0x08044a64
 801b6b0:	08044ab4 	.word	0x08044ab4
 801b6b4:	0802b034 	.word	0x0802b034
 801b6b8:	08044a94 	.word	0x08044a94

0801b6bc <memp_init_pool>:
{
 801b6bc:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801b6be:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801b6c0:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801b6c2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801b6c6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801b6c8:	b1b1      	cbz	r1, 801b6f8 <memp_init_pool+0x3c>
 801b6ca:	3403      	adds	r4, #3
 801b6cc:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801b6ce:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801b6d0:	4616      	mov	r6, r2
 801b6d2:	f024 0403 	bic.w	r4, r4, #3
 801b6d6:	e001      	b.n	801b6dc <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801b6d8:	68eb      	ldr	r3, [r5, #12]
 801b6da:	681a      	ldr	r2, [r3, #0]
 801b6dc:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801b6de:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801b6e2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801b6e4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801b6e6:	f7ff fc73 	bl	801afd0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801b6ea:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801b6ec:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801b6ee:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801b6f2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801b6f4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801b6f6:	dcef      	bgt.n	801b6d8 <memp_init_pool+0x1c>
}
 801b6f8:	bd70      	pop	{r4, r5, r6, pc}
 801b6fa:	bf00      	nop

0801b6fc <memp_init>:
{
 801b6fc:	b538      	push	{r3, r4, r5, lr}
 801b6fe:	4c07      	ldr	r4, [pc, #28]	; (801b71c <memp_init+0x20>)
 801b700:	4807      	ldr	r0, [pc, #28]	; (801b720 <memp_init+0x24>)
 801b702:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801b706:	e001      	b.n	801b70c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801b708:	f854 0b04 	ldr.w	r0, [r4], #4
 801b70c:	f7ff ffd6 	bl	801b6bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801b710:	42ac      	cmp	r4, r5
 801b712:	d1f9      	bne.n	801b708 <memp_init+0xc>
}
 801b714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801b718:	f7ff bf6a 	b.w	801b5f0 <memp_overflow_check_all>
 801b71c:	08044cec 	.word	0x08044cec
 801b720:	08044c58 	.word	0x08044c58

0801b724 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801b724:	280f      	cmp	r0, #15
{
 801b726:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801b728:	d81d      	bhi.n	801b766 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801b72a:	4604      	mov	r4, r0
 801b72c:	460e      	mov	r6, r1
 801b72e:	4615      	mov	r5, r2
 801b730:	f7ff ff5e 	bl	801b5f0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801b734:	4b11      	ldr	r3, [pc, #68]	; (801b77c <memp_malloc_fn+0x58>)
 801b736:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b73a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801b73c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801b73e:	b144      	cbz	r4, 801b752 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801b740:	6822      	ldr	r2, [r4, #0]
 801b742:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801b744:	2300      	movs	r3, #0
 801b746:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801b748:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801b74a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801b74e:	d102      	bne.n	801b756 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801b750:	341c      	adds	r4, #28
}
 801b752:	4620      	mov	r0, r4
 801b754:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801b756:	4b0a      	ldr	r3, [pc, #40]	; (801b780 <memp_malloc_fn+0x5c>)
 801b758:	f44f 728c 	mov.w	r2, #280	; 0x118
 801b75c:	4909      	ldr	r1, [pc, #36]	; (801b784 <memp_malloc_fn+0x60>)
 801b75e:	480a      	ldr	r0, [pc, #40]	; (801b788 <memp_malloc_fn+0x64>)
 801b760:	f00a fdf8 	bl	8026354 <iprintf>
 801b764:	e7f4      	b.n	801b750 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801b766:	2400      	movs	r4, #0
 801b768:	4b05      	ldr	r3, [pc, #20]	; (801b780 <memp_malloc_fn+0x5c>)
 801b76a:	f240 1257 	movw	r2, #343	; 0x157
 801b76e:	4907      	ldr	r1, [pc, #28]	; (801b78c <memp_malloc_fn+0x68>)
 801b770:	4805      	ldr	r0, [pc, #20]	; (801b788 <memp_malloc_fn+0x64>)
 801b772:	f00a fdef 	bl	8026354 <iprintf>
}
 801b776:	4620      	mov	r0, r4
 801b778:	bd70      	pop	{r4, r5, r6, pc}
 801b77a:	bf00      	nop
 801b77c:	08044ce8 	.word	0x08044ce8
 801b780:	08044a64 	.word	0x08044a64
 801b784:	08044ad4 	.word	0x08044ad4
 801b788:	0802b034 	.word	0x0802b034
 801b78c:	08044af8 	.word	0x08044af8

0801b790 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801b790:	280f      	cmp	r0, #15
 801b792:	d80e      	bhi.n	801b7b2 <memp_free+0x22>
{
 801b794:	b570      	push	{r4, r5, r6, lr}
 801b796:	460d      	mov	r5, r1

  if (mem == NULL) {
 801b798:	b151      	cbz	r1, 801b7b0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801b79a:	4604      	mov	r4, r0
 801b79c:	f7ff ff28 	bl	801b5f0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801b7a0:	4b07      	ldr	r3, [pc, #28]	; (801b7c0 <memp_free+0x30>)
 801b7a2:	4629      	mov	r1, r5
 801b7a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801b7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801b7ac:	f7ff bf50 	b.w	801b650 <do_memp_free_pool>
}
 801b7b0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801b7b2:	4b04      	ldr	r3, [pc, #16]	; (801b7c4 <memp_free+0x34>)
 801b7b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801b7b8:	4903      	ldr	r1, [pc, #12]	; (801b7c8 <memp_free+0x38>)
 801b7ba:	4804      	ldr	r0, [pc, #16]	; (801b7cc <memp_free+0x3c>)
 801b7bc:	f00a bdca 	b.w	8026354 <iprintf>
 801b7c0:	08044ce8 	.word	0x08044ce8
 801b7c4:	08044a64 	.word	0x08044a64
 801b7c8:	08044b18 	.word	0x08044b18
 801b7cc:	0802b034 	.word	0x0802b034

0801b7d0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801b7d0:	f06f 000b 	mvn.w	r0, #11
 801b7d4:	4770      	bx	lr
 801b7d6:	bf00      	nop

0801b7d8 <netif_issue_reports>:
{
 801b7d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801b7da:	4604      	mov	r4, r0
 801b7dc:	b150      	cbz	r0, 801b7f4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801b7de:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801b7e2:	f003 0205 	and.w	r2, r3, #5
 801b7e6:	2a05      	cmp	r2, #5
 801b7e8:	d103      	bne.n	801b7f2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801b7ea:	6862      	ldr	r2, [r4, #4]
 801b7ec:	b10a      	cbz	r2, 801b7f2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801b7ee:	071b      	lsls	r3, r3, #28
 801b7f0:	d408      	bmi.n	801b804 <netif_issue_reports+0x2c>
}
 801b7f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801b7f4:	4b06      	ldr	r3, [pc, #24]	; (801b810 <netif_issue_reports+0x38>)
 801b7f6:	f240 326d 	movw	r2, #877	; 0x36d
 801b7fa:	4906      	ldr	r1, [pc, #24]	; (801b814 <netif_issue_reports+0x3c>)
 801b7fc:	4806      	ldr	r0, [pc, #24]	; (801b818 <netif_issue_reports+0x40>)
 801b7fe:	f00a fda9 	bl	8026354 <iprintf>
 801b802:	e7ec      	b.n	801b7de <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801b804:	1d21      	adds	r1, r4, #4
 801b806:	4620      	mov	r0, r4
}
 801b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801b80c:	f007 bfac 	b.w	8023768 <etharp_request>
 801b810:	08044d28 	.word	0x08044d28
 801b814:	08044d5c 	.word	0x08044d5c
 801b818:	0802b034 	.word	0x0802b034

0801b81c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801b81c:	b570      	push	{r4, r5, r6, lr}
 801b81e:	4605      	mov	r5, r0
 801b820:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801b822:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801b824:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801b826:	b301      	cbz	r1, 801b86a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801b828:	686b      	ldr	r3, [r5, #4]
 801b82a:	6822      	ldr	r2, [r4, #0]
 801b82c:	429a      	cmp	r2, r3
 801b82e:	d101      	bne.n	801b834 <netif_do_set_ipaddr.isra.0+0x18>
}
 801b830:	b002      	add	sp, #8
 801b832:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801b834:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801b836:	4630      	mov	r0, r6
 801b838:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801b83a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801b83c:	f002 fa5a 	bl	801dcf4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801b840:	a901      	add	r1, sp, #4
 801b842:	4630      	mov	r0, r6
 801b844:	f005 fde4 	bl	8021410 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801b848:	a901      	add	r1, sp, #4
 801b84a:	4630      	mov	r0, r6
 801b84c:	f000 ff6c 	bl	801c728 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801b850:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801b852:	2101      	movs	r1, #1
 801b854:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801b856:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801b858:	f7ff ffbe 	bl	801b7d8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801b85c:	69eb      	ldr	r3, [r5, #28]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d0e6      	beq.n	801b830 <netif_do_set_ipaddr.isra.0+0x14>
 801b862:	4628      	mov	r0, r5
 801b864:	4798      	blx	r3
}
 801b866:	b002      	add	sp, #8
 801b868:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801b86a:	4b04      	ldr	r3, [pc, #16]	; (801b87c <netif_do_set_ipaddr.isra.0+0x60>)
 801b86c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801b870:	4903      	ldr	r1, [pc, #12]	; (801b880 <netif_do_set_ipaddr.isra.0+0x64>)
 801b872:	4804      	ldr	r0, [pc, #16]	; (801b884 <netif_do_set_ipaddr.isra.0+0x68>)
 801b874:	f00a fd6e 	bl	8026354 <iprintf>
 801b878:	e7d6      	b.n	801b828 <netif_do_set_ipaddr.isra.0+0xc>
 801b87a:	bf00      	nop
 801b87c:	08044d28 	.word	0x08044d28
 801b880:	08044d80 	.word	0x08044d80
 801b884:	0802b034 	.word	0x0802b034

0801b888 <netif_init>:
}
 801b888:	4770      	bx	lr
 801b88a:	bf00      	nop

0801b88c <netif_set_addr>:
{
 801b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801b88e:	2900      	cmp	r1, #0
{
 801b890:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801b892:	4b16      	ldr	r3, [pc, #88]	; (801b8ec <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801b894:	460c      	mov	r4, r1
{
 801b896:	b083      	sub	sp, #12
 801b898:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801b89a:	bf14      	ite	ne
 801b89c:	460c      	movne	r4, r1
 801b89e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801b8a0:	b30a      	cbz	r2, 801b8e6 <netif_set_addr+0x5a>
 801b8a2:	4616      	mov	r6, r2
  if (gw == NULL) {
 801b8a4:	b1ef      	cbz	r7, 801b8e2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801b8a6:	6823      	ldr	r3, [r4, #0]
 801b8a8:	b993      	cbnz	r3, 801b8d0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801b8aa:	4621      	mov	r1, r4
 801b8ac:	aa01      	add	r2, sp, #4
 801b8ae:	4628      	mov	r0, r5
 801b8b0:	f7ff ffb4 	bl	801b81c <netif_do_set_ipaddr.isra.0>
 801b8b4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801b8b6:	6833      	ldr	r3, [r6, #0]
 801b8b8:	68aa      	ldr	r2, [r5, #8]
 801b8ba:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801b8bc:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801b8be:	bf18      	it	ne
 801b8c0:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801b8c6:	bf18      	it	ne
 801b8c8:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801b8ca:	b119      	cbz	r1, 801b8d4 <netif_set_addr+0x48>
}
 801b8cc:	b003      	add	sp, #12
 801b8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801b8d0:	2100      	movs	r1, #0
 801b8d2:	e7f0      	b.n	801b8b6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801b8d4:	aa01      	add	r2, sp, #4
 801b8d6:	4621      	mov	r1, r4
 801b8d8:	4628      	mov	r0, r5
 801b8da:	f7ff ff9f 	bl	801b81c <netif_do_set_ipaddr.isra.0>
}
 801b8de:	b003      	add	sp, #12
 801b8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801b8e2:	4f02      	ldr	r7, [pc, #8]	; (801b8ec <netif_set_addr+0x60>)
 801b8e4:	e7df      	b.n	801b8a6 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801b8e6:	461e      	mov	r6, r3
 801b8e8:	e7dc      	b.n	801b8a4 <netif_set_addr+0x18>
 801b8ea:	bf00      	nop
 801b8ec:	08046e50 	.word	0x08046e50

0801b8f0 <netif_add>:
{
 801b8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801b8f6:	4606      	mov	r6, r0
 801b8f8:	2800      	cmp	r0, #0
 801b8fa:	f000 8081 	beq.w	801ba00 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801b8fe:	2d00      	cmp	r5, #0
 801b900:	f000 8087 	beq.w	801ba12 <netif_add+0x122>
  if (ipaddr == NULL) {
 801b904:	2900      	cmp	r1, #0
 801b906:	d06f      	beq.n	801b9e8 <netif_add+0xf8>
  if (netmask == NULL) {
 801b908:	2a00      	cmp	r2, #0
 801b90a:	d068      	beq.n	801b9de <netif_add+0xee>
  if (gw == NULL) {
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d069      	beq.n	801b9e4 <netif_add+0xf4>
  netif->state = state;
 801b910:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801b912:	2400      	movs	r4, #0
  netif->num = netif_num;
 801b914:	f8df a128 	ldr.w	sl, [pc, #296]	; 801ba40 <netif_add+0x150>
  netif->state = state;
 801b918:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801b91a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801b91c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801b91e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801b920:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801b924:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801b926:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801b92a:	483e      	ldr	r0, [pc, #248]	; (801ba24 <netif_add+0x134>)
  netif->flags = 0;
 801b92c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801b930:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801b932:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801b934:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801b936:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801b93a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801b93e:	f7ff ffa5 	bl	801b88c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801b942:	4630      	mov	r0, r6
 801b944:	47a8      	blx	r5
 801b946:	2800      	cmp	r0, #0
 801b948:	d157      	bne.n	801b9fa <netif_add+0x10a>
      if (netif->num == 255) {
 801b94a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801b94e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801ba44 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801b952:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801ba34 <netif_add+0x144>
 801b956:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801ba48 <netif_add+0x158>
 801b95a:	4f33      	ldr	r7, [pc, #204]	; (801ba28 <netif_add+0x138>)
      if (netif->num == 255) {
 801b95c:	2aff      	cmp	r2, #255	; 0xff
 801b95e:	d102      	bne.n	801b966 <netif_add+0x76>
        netif->num = 0;
 801b960:	2300      	movs	r3, #0
 801b962:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801b966:	f8d8 4000 	ldr.w	r4, [r8]
 801b96a:	2c00      	cmp	r4, #0
 801b96c:	d042      	beq.n	801b9f4 <netif_add+0x104>
      num_netifs = 0;
 801b96e:	2500      	movs	r5, #0
 801b970:	e007      	b.n	801b982 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801b972:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801b976:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d014      	beq.n	801b9a8 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801b97e:	6824      	ldr	r4, [r4, #0]
 801b980:	b1fc      	cbz	r4, 801b9c2 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801b982:	42a6      	cmp	r6, r4
        num_netifs++;
 801b984:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801b988:	d013      	beq.n	801b9b2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801b98a:	2dff      	cmp	r5, #255	; 0xff
 801b98c:	ddf1      	ble.n	801b972 <netif_add+0x82>
 801b98e:	465b      	mov	r3, fp
 801b990:	f240 128d 	movw	r2, #397	; 0x18d
 801b994:	4925      	ldr	r1, [pc, #148]	; (801ba2c <netif_add+0x13c>)
 801b996:	4638      	mov	r0, r7
 801b998:	f00a fcdc 	bl	8026354 <iprintf>
        if (netif2->num == netif->num) {
 801b99c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801b9a0:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d1ea      	bne.n	801b97e <netif_add+0x8e>
          netif->num++;
 801b9a8:	3201      	adds	r2, #1
 801b9aa:	b2d2      	uxtb	r2, r2
 801b9ac:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801b9b0:	e7d4      	b.n	801b95c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801b9b2:	465b      	mov	r3, fp
 801b9b4:	f240 128b 	movw	r2, #395	; 0x18b
 801b9b8:	4649      	mov	r1, r9
 801b9ba:	4638      	mov	r0, r7
 801b9bc:	f00a fcca 	bl	8026354 <iprintf>
 801b9c0:	e7e3      	b.n	801b98a <netif_add+0x9a>
  netif->next = netif_list;
 801b9c2:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801b9c6:	2bfe      	cmp	r3, #254	; 0xfe
 801b9c8:	d012      	beq.n	801b9f0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801b9ca:	3301      	adds	r3, #1
 801b9cc:	b2db      	uxtb	r3, r3
  return netif;
 801b9ce:	4630      	mov	r0, r6
  netif->next = netif_list;
 801b9d0:	6034      	str	r4, [r6, #0]
 801b9d2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801b9d6:	f8c8 6000 	str.w	r6, [r8]
}
 801b9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801b9de:	4a14      	ldr	r2, [pc, #80]	; (801ba30 <netif_add+0x140>)
  if (gw == NULL) {
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d195      	bne.n	801b910 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801b9e4:	4b12      	ldr	r3, [pc, #72]	; (801ba30 <netif_add+0x140>)
 801b9e6:	e793      	b.n	801b910 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801b9e8:	4911      	ldr	r1, [pc, #68]	; (801ba30 <netif_add+0x140>)
  if (netmask == NULL) {
 801b9ea:	2a00      	cmp	r2, #0
 801b9ec:	d18e      	bne.n	801b90c <netif_add+0x1c>
 801b9ee:	e7f6      	b.n	801b9de <netif_add+0xee>
    netif_num = 0;
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	e7ec      	b.n	801b9ce <netif_add+0xde>
  if (netif->num == 254) {
 801b9f4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801b9f8:	e7e5      	b.n	801b9c6 <netif_add+0xd6>
    return NULL;
 801b9fa:	4620      	mov	r0, r4
}
 801b9fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801ba00:	4b0c      	ldr	r3, [pc, #48]	; (801ba34 <netif_add+0x144>)
 801ba02:	f240 1227 	movw	r2, #295	; 0x127
 801ba06:	490c      	ldr	r1, [pc, #48]	; (801ba38 <netif_add+0x148>)
 801ba08:	4807      	ldr	r0, [pc, #28]	; (801ba28 <netif_add+0x138>)
 801ba0a:	f00a fca3 	bl	8026354 <iprintf>
 801ba0e:	4630      	mov	r0, r6
 801ba10:	e7e3      	b.n	801b9da <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801ba12:	4b08      	ldr	r3, [pc, #32]	; (801ba34 <netif_add+0x144>)
 801ba14:	f44f 7294 	mov.w	r2, #296	; 0x128
 801ba18:	4908      	ldr	r1, [pc, #32]	; (801ba3c <netif_add+0x14c>)
 801ba1a:	4803      	ldr	r0, [pc, #12]	; (801ba28 <netif_add+0x138>)
 801ba1c:	f00a fc9a 	bl	8026354 <iprintf>
 801ba20:	4628      	mov	r0, r5
 801ba22:	e7da      	b.n	801b9da <netif_add+0xea>
 801ba24:	0801b7d1 	.word	0x0801b7d1
 801ba28:	0802b034 	.word	0x0802b034
 801ba2c:	08044de4 	.word	0x08044de4
 801ba30:	08046e50 	.word	0x08046e50
 801ba34:	08044d28 	.word	0x08044d28
 801ba38:	08044d90 	.word	0x08044d90
 801ba3c:	08044dac 	.word	0x08044dac
 801ba40:	2002e42c 	.word	0x2002e42c
 801ba44:	2002e428 	.word	0x2002e428
 801ba48:	08044dd0 	.word	0x08044dd0

0801ba4c <netif_set_default>:
  netif_default = netif;
 801ba4c:	4b01      	ldr	r3, [pc, #4]	; (801ba54 <netif_set_default+0x8>)
 801ba4e:	6018      	str	r0, [r3, #0]
}
 801ba50:	4770      	bx	lr
 801ba52:	bf00      	nop
 801ba54:	2002e424 	.word	0x2002e424

0801ba58 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801ba58:	b198      	cbz	r0, 801ba82 <netif_set_up+0x2a>
{
 801ba5a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801ba5c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ba60:	4604      	mov	r4, r0
 801ba62:	07da      	lsls	r2, r3, #31
 801ba64:	d40c      	bmi.n	801ba80 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801ba66:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801ba6a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801ba6c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801ba70:	b102      	cbz	r2, 801ba74 <netif_set_up+0x1c>
 801ba72:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ba74:	4620      	mov	r0, r4
 801ba76:	2103      	movs	r1, #3
}
 801ba78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ba7c:	f7ff beac 	b.w	801b7d8 <netif_issue_reports>
}
 801ba80:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801ba82:	4b03      	ldr	r3, [pc, #12]	; (801ba90 <netif_set_up+0x38>)
 801ba84:	f44f 7254 	mov.w	r2, #848	; 0x350
 801ba88:	4902      	ldr	r1, [pc, #8]	; (801ba94 <netif_set_up+0x3c>)
 801ba8a:	4803      	ldr	r0, [pc, #12]	; (801ba98 <netif_set_up+0x40>)
 801ba8c:	f00a bc62 	b.w	8026354 <iprintf>
 801ba90:	08044d28 	.word	0x08044d28
 801ba94:	08044e14 	.word	0x08044e14
 801ba98:	0802b034 	.word	0x0802b034

0801ba9c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801ba9c:	b1a8      	cbz	r0, 801baca <netif_set_down+0x2e>
{
 801ba9e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801baa0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801baa4:	4604      	mov	r4, r0
 801baa6:	07da      	lsls	r2, r3, #31
 801baa8:	d50b      	bpl.n	801bac2 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801baaa:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801baae:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801bab0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801bab4:	d406      	bmi.n	801bac4 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801bab6:	69e3      	ldr	r3, [r4, #28]
 801bab8:	b11b      	cbz	r3, 801bac2 <netif_set_down+0x26>
 801baba:	4620      	mov	r0, r4
}
 801babc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801bac0:	4718      	bx	r3
}
 801bac2:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801bac4:	f007 fbc8 	bl	8023258 <etharp_cleanup_netif>
 801bac8:	e7f5      	b.n	801bab6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801baca:	4b03      	ldr	r3, [pc, #12]	; (801bad8 <netif_set_down+0x3c>)
 801bacc:	f240 329b 	movw	r2, #923	; 0x39b
 801bad0:	4902      	ldr	r1, [pc, #8]	; (801badc <netif_set_down+0x40>)
 801bad2:	4803      	ldr	r0, [pc, #12]	; (801bae0 <netif_set_down+0x44>)
 801bad4:	f00a bc3e 	b.w	8026354 <iprintf>
 801bad8:	08044d28 	.word	0x08044d28
 801badc:	08044e30 	.word	0x08044e30
 801bae0:	0802b034 	.word	0x0802b034

0801bae4 <netif_set_status_callback>:
  if (netif) {
 801bae4:	b100      	cbz	r0, 801bae8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801bae6:	61c1      	str	r1, [r0, #28]
}
 801bae8:	4770      	bx	lr
 801baea:	bf00      	nop

0801baec <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801baec:	b1b8      	cbz	r0, 801bb1e <netif_set_link_up+0x32>
{
 801baee:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801baf0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801baf4:	4604      	mov	r4, r0
 801baf6:	075a      	lsls	r2, r3, #29
 801baf8:	d500      	bpl.n	801bafc <netif_set_link_up+0x10>
}
 801bafa:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801bafc:	f043 0304 	orr.w	r3, r3, #4
 801bb00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801bb04:	f006 fd96 	bl	8022634 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bb08:	2103      	movs	r1, #3
 801bb0a:	4620      	mov	r0, r4
 801bb0c:	f7ff fe64 	bl	801b7d8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801bb10:	6a23      	ldr	r3, [r4, #32]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d0f1      	beq.n	801bafa <netif_set_link_up+0xe>
 801bb16:	4620      	mov	r0, r4
}
 801bb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801bb1c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bb1e:	4b03      	ldr	r3, [pc, #12]	; (801bb2c <netif_set_link_up+0x40>)
 801bb20:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bb24:	4902      	ldr	r1, [pc, #8]	; (801bb30 <netif_set_link_up+0x44>)
 801bb26:	4803      	ldr	r0, [pc, #12]	; (801bb34 <netif_set_link_up+0x48>)
 801bb28:	f00a bc14 	b.w	8026354 <iprintf>
 801bb2c:	08044d28 	.word	0x08044d28
 801bb30:	08044e50 	.word	0x08044e50
 801bb34:	0802b034 	.word	0x0802b034

0801bb38 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bb38:	b158      	cbz	r0, 801bb52 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801bb3a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801bb3e:	0751      	lsls	r1, r2, #29
 801bb40:	d506      	bpl.n	801bb50 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bb42:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801bb46:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bb48:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801bb4c:	b101      	cbz	r1, 801bb50 <netif_set_link_down+0x18>
 801bb4e:	4708      	bx	r1
}
 801bb50:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bb52:	4b03      	ldr	r3, [pc, #12]	; (801bb60 <netif_set_link_down+0x28>)
 801bb54:	f240 4206 	movw	r2, #1030	; 0x406
 801bb58:	4902      	ldr	r1, [pc, #8]	; (801bb64 <netif_set_link_down+0x2c>)
 801bb5a:	4803      	ldr	r0, [pc, #12]	; (801bb68 <netif_set_link_down+0x30>)
 801bb5c:	f00a bbfa 	b.w	8026354 <iprintf>
 801bb60:	08044d28 	.word	0x08044d28
 801bb64:	08044e74 	.word	0x08044e74
 801bb68:	0802b034 	.word	0x0802b034

0801bb6c <netif_set_link_callback>:
  if (netif) {
 801bb6c:	b100      	cbz	r0, 801bb70 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801bb6e:	6201      	str	r1, [r0, #32]
}
 801bb70:	4770      	bx	lr
 801bb72:	bf00      	nop

0801bb74 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801bb74:	4602      	mov	r2, r0
 801bb76:	b158      	cbz	r0, 801bb90 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801bb78:	4b06      	ldr	r3, [pc, #24]	; (801bb94 <netif_get_by_index+0x20>)
 801bb7a:	6818      	ldr	r0, [r3, #0]
 801bb7c:	b910      	cbnz	r0, 801bb84 <netif_get_by_index+0x10>
 801bb7e:	e007      	b.n	801bb90 <netif_get_by_index+0x1c>
 801bb80:	6800      	ldr	r0, [r0, #0]
 801bb82:	b130      	cbz	r0, 801bb92 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801bb84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801bb88:	3301      	adds	r3, #1
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d1f7      	bne.n	801bb80 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801bb90:	4770      	bx	lr
 801bb92:	4770      	bx	lr
 801bb94:	2002e428 	.word	0x2002e428

0801bb98 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bb98:	4907      	ldr	r1, [pc, #28]	; (801bbb8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	4b07      	ldr	r3, [pc, #28]	; (801bbbc <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bb9e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bba0:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bba2:	b910      	cbnz	r0, 801bbaa <pbuf_free_ooseq_callback+0x12>
 801bba4:	e006      	b.n	801bbb4 <pbuf_free_ooseq_callback+0x1c>
 801bba6:	68c0      	ldr	r0, [r0, #12]
 801bba8:	b120      	cbz	r0, 801bbb4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801bbaa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d0fa      	beq.n	801bba6 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801bbb0:	f002 b8ca 	b.w	801dd48 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801bbb4:	4770      	bx	lr
 801bbb6:	bf00      	nop
 801bbb8:	2002e434 	.word	0x2002e434
 801bbbc:	2002e42d 	.word	0x2002e42d

0801bbc0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801bbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	2800      	cmp	r0, #0
 801bbc8:	d052      	beq.n	801bc70 <pbuf_free.part.0+0xb0>
  count = 0;
 801bbca:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bbcc:	4f29      	ldr	r7, [pc, #164]	; (801bc74 <pbuf_free.part.0+0xb4>)
 801bbce:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801bc84 <pbuf_free.part.0+0xc4>
 801bbd2:	4e29      	ldr	r6, [pc, #164]	; (801bc78 <pbuf_free.part.0+0xb8>)
 801bbd4:	e00a      	b.n	801bbec <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bbd6:	6923      	ldr	r3, [r4, #16]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d03b      	beq.n	801bc54 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801bbdc:	4620      	mov	r0, r4
 801bbde:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801bbe0:	3501      	adds	r5, #1
 801bbe2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bbe4:	f1b9 0f00 	cmp.w	r9, #0
 801bbe8:	d01b      	beq.n	801bc22 <pbuf_free.part.0+0x62>
 801bbea:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bbec:	7ba3      	ldrb	r3, [r4, #14]
 801bbee:	b1db      	cbz	r3, 801bc28 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801bbf0:	3b01      	subs	r3, #1
 801bbf2:	b2db      	uxtb	r3, r3
 801bbf4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801bbf6:	b9a3      	cbnz	r3, 801bc22 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bbf8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801bbfa:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bbfe:	079b      	lsls	r3, r3, #30
 801bc00:	d4e9      	bmi.n	801bbd6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801bc02:	7b23      	ldrb	r3, [r4, #12]
 801bc04:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801bc08:	2b02      	cmp	r3, #2
 801bc0a:	d01e      	beq.n	801bc4a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801bc0c:	2b01      	cmp	r3, #1
 801bc0e:	d02a      	beq.n	801bc66 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801bc10:	b99b      	cbnz	r3, 801bc3a <pbuf_free.part.0+0x7a>
      count++;
 801bc12:	3501      	adds	r5, #1
          mem_free(p);
 801bc14:	4620      	mov	r0, r4
 801bc16:	f7ff fa27 	bl	801b068 <mem_free>
      count++;
 801bc1a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bc1c:	f1b9 0f00 	cmp.w	r9, #0
 801bc20:	d1e3      	bne.n	801bbea <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801bc22:	4628      	mov	r0, r5
 801bc24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bc28:	463b      	mov	r3, r7
 801bc2a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801bc2e:	4641      	mov	r1, r8
 801bc30:	4630      	mov	r0, r6
 801bc32:	f00a fb8f 	bl	8026354 <iprintf>
    ref = --(p->ref);
 801bc36:	7ba3      	ldrb	r3, [r4, #14]
 801bc38:	e7da      	b.n	801bbf0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801bc3a:	463b      	mov	r3, r7
 801bc3c:	f240 320f 	movw	r2, #783	; 0x30f
 801bc40:	490e      	ldr	r1, [pc, #56]	; (801bc7c <pbuf_free.part.0+0xbc>)
 801bc42:	4630      	mov	r0, r6
 801bc44:	f00a fb86 	bl	8026354 <iprintf>
 801bc48:	e7ca      	b.n	801bbe0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801bc4a:	4621      	mov	r1, r4
 801bc4c:	200f      	movs	r0, #15
 801bc4e:	f7ff fd9f 	bl	801b790 <memp_free>
 801bc52:	e7c5      	b.n	801bbe0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bc54:	463b      	mov	r3, r7
 801bc56:	f240 22ff 	movw	r2, #767	; 0x2ff
 801bc5a:	4909      	ldr	r1, [pc, #36]	; (801bc80 <pbuf_free.part.0+0xc0>)
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f00a fb79 	bl	8026354 <iprintf>
        pc->custom_free_function(p);
 801bc62:	6923      	ldr	r3, [r4, #16]
 801bc64:	e7ba      	b.n	801bbdc <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801bc66:	4621      	mov	r1, r4
 801bc68:	200e      	movs	r0, #14
 801bc6a:	f7ff fd91 	bl	801b790 <memp_free>
 801bc6e:	e7b7      	b.n	801bbe0 <pbuf_free.part.0+0x20>
  count = 0;
 801bc70:	4605      	mov	r5, r0
 801bc72:	e7d6      	b.n	801bc22 <pbuf_free.part.0+0x62>
 801bc74:	08044e98 	.word	0x08044e98
 801bc78:	0802b034 	.word	0x0802b034
 801bc7c:	08044f04 	.word	0x08044f04
 801bc80:	08044ee0 	.word	0x08044ee0
 801bc84:	08044ec8 	.word	0x08044ec8

0801bc88 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801bc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801bc8c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bc8e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801bdb4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801bc92:	4605      	mov	r5, r0
 801bc94:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801bc96:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801bc98:	8944      	ldrh	r4, [r0, #10]
 801bc9a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bc9c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801bdc8 <pbuf_copy.part.0+0x140>
 801bca0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801bdbc <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801bca4:	1be4      	subs	r4, r4, r7
 801bca6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801bca8:	6868      	ldr	r0, [r5, #4]
 801bcaa:	4294      	cmp	r4, r2
 801bcac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bcb0:	4438      	add	r0, r7
 801bcb2:	bf28      	it	cs
 801bcb4:	4614      	movcs	r4, r2
 801bcb6:	4431      	add	r1, r6
 801bcb8:	4622      	mov	r2, r4
    offset_to += len;
 801bcba:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801bcbc:	f009 fb84 	bl	80253c8 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bcc0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801bcc2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bcc4:	429f      	cmp	r7, r3
 801bcc6:	d837      	bhi.n	801bd38 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801bcc8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801bccc:	4296      	cmp	r6, r2
 801bcce:	d829      	bhi.n	801bd24 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801bcd0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801bcd2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801bcd4:	d317      	bcc.n	801bd06 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801bcd6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801bcd8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801bcdc:	d04b      	beq.n	801bd76 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801bcde:	f1b8 0f00 	cmp.w	r8, #0
 801bce2:	d144      	bne.n	801bd6e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801bce4:	892a      	ldrh	r2, [r5, #8]
 801bce6:	896b      	ldrh	r3, [r5, #10]
 801bce8:	429a      	cmp	r2, r3
 801bcea:	d14c      	bne.n	801bd86 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801bcec:	6828      	ldr	r0, [r5, #0]
 801bcee:	b140      	cbz	r0, 801bd02 <pbuf_copy.part.0+0x7a>
 801bcf0:	4b30      	ldr	r3, [pc, #192]	; (801bdb4 <pbuf_copy.part.0+0x12c>)
 801bcf2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801bcf6:	4930      	ldr	r1, [pc, #192]	; (801bdb8 <pbuf_copy.part.0+0x130>)
 801bcf8:	4830      	ldr	r0, [pc, #192]	; (801bdbc <pbuf_copy.part.0+0x134>)
 801bcfa:	f00a fb2b 	bl	8026354 <iprintf>
 801bcfe:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801bd02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801bd06:	429f      	cmp	r7, r3
 801bd08:	d040      	beq.n	801bd8c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801bd0a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801bd0e:	4293      	cmp	r3, r2
 801bd10:	d01a      	beq.n	801bd48 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801bd12:	896c      	ldrh	r4, [r5, #10]
 801bd14:	2d00      	cmp	r5, #0
 801bd16:	d0c5      	beq.n	801bca4 <pbuf_copy.part.0+0x1c>
 801bd18:	892b      	ldrh	r3, [r5, #8]
 801bd1a:	42a3      	cmp	r3, r4
 801bd1c:	d045      	beq.n	801bdaa <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801bd1e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801bd22:	e7bf      	b.n	801bca4 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801bd24:	f240 32da 	movw	r2, #986	; 0x3da
 801bd28:	4653      	mov	r3, sl
 801bd2a:	4925      	ldr	r1, [pc, #148]	; (801bdc0 <pbuf_copy.part.0+0x138>)
 801bd2c:	4648      	mov	r0, r9
 801bd2e:	f00a fb11 	bl	8026354 <iprintf>
    if (offset_from >= p_from->len) {
 801bd32:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801bd36:	e7cb      	b.n	801bcd0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bd38:	4653      	mov	r3, sl
 801bd3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801bd3e:	4659      	mov	r1, fp
 801bd40:	4648      	mov	r0, r9
 801bd42:	f00a fb07 	bl	8026354 <iprintf>
 801bd46:	e7bf      	b.n	801bcc8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801bd48:	f8d8 3000 	ldr.w	r3, [r8]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d0e0      	beq.n	801bd12 <pbuf_copy.part.0+0x8a>
 801bd50:	4b18      	ldr	r3, [pc, #96]	; (801bdb4 <pbuf_copy.part.0+0x12c>)
 801bd52:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801bd56:	4918      	ldr	r1, [pc, #96]	; (801bdb8 <pbuf_copy.part.0+0x130>)
 801bd58:	4818      	ldr	r0, [pc, #96]	; (801bdbc <pbuf_copy.part.0+0x134>)
 801bd5a:	f00a fafb 	bl	8026354 <iprintf>
 801bd5e:	f06f 0005 	mvn.w	r0, #5
}
 801bd62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801bd66:	f1b8 0f00 	cmp.w	r8, #0
 801bd6a:	d00a      	beq.n	801bd82 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801bd6c:	2700      	movs	r7, #0
 801bd6e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801bd70:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801bd74:	e7c9      	b.n	801bd0a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801bd76:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801bd78:	2d00      	cmp	r5, #0
 801bd7a:	d1f4      	bne.n	801bd66 <pbuf_copy.part.0+0xde>
 801bd7c:	f1b8 0f00 	cmp.w	r8, #0
 801bd80:	d108      	bne.n	801bd94 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801bd82:	2d00      	cmp	r5, #0
 801bd84:	d1ae      	bne.n	801bce4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801bd86:	2000      	movs	r0, #0
}
 801bd88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801bd8c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801bd8e:	b10d      	cbz	r5, 801bd94 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801bd90:	2700      	movs	r7, #0
 801bd92:	e7ed      	b.n	801bd70 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801bd94:	4b07      	ldr	r3, [pc, #28]	; (801bdb4 <pbuf_copy.part.0+0x12c>)
 801bd96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801bd9a:	490a      	ldr	r1, [pc, #40]	; (801bdc4 <pbuf_copy.part.0+0x13c>)
 801bd9c:	4807      	ldr	r0, [pc, #28]	; (801bdbc <pbuf_copy.part.0+0x134>)
 801bd9e:	f00a fad9 	bl	8026354 <iprintf>
 801bda2:	f06f 000f 	mvn.w	r0, #15
}
 801bda6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801bdaa:	682b      	ldr	r3, [r5, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d0b6      	beq.n	801bd1e <pbuf_copy.part.0+0x96>
 801bdb0:	e79e      	b.n	801bcf0 <pbuf_copy.part.0+0x68>
 801bdb2:	bf00      	nop
 801bdb4:	08044e98 	.word	0x08044e98
 801bdb8:	08044f5c 	.word	0x08044f5c
 801bdbc:	0802b034 	.word	0x0802b034
 801bdc0:	08044f30 	.word	0x08044f30
 801bdc4:	08044f4c 	.word	0x08044f4c
 801bdc8:	08044f18 	.word	0x08044f18

0801bdcc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801bdcc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801bdd0:	2b01      	cmp	r3, #1
{
 801bdd2:	b570      	push	{r4, r5, r6, lr}
 801bdd4:	4614      	mov	r4, r2
 801bdd6:	4606      	mov	r6, r0
 801bdd8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801bdda:	d110      	bne.n	801bdfe <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801bddc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801bde0:	490b      	ldr	r1, [pc, #44]	; (801be10 <pbuf_alloc_reference+0x44>)
 801bde2:	200e      	movs	r0, #14
 801bde4:	f7ff fc9e 	bl	801b724 <memp_malloc_fn>
  if (p == NULL) {
 801bde8:	b140      	cbz	r0, 801bdfc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801bdea:	2300      	movs	r3, #0
  p->ref = 1;
 801bdec:	2201      	movs	r2, #1
  p->payload = payload;
 801bdee:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801bdf0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801bdf2:	6003      	str	r3, [r0, #0]
  p->len = len;
 801bdf4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801bdf6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801bdf8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801bdfa:	81c2      	strh	r2, [r0, #14]
}
 801bdfc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801bdfe:	4b04      	ldr	r3, [pc, #16]	; (801be10 <pbuf_alloc_reference+0x44>)
 801be00:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801be04:	4903      	ldr	r1, [pc, #12]	; (801be14 <pbuf_alloc_reference+0x48>)
 801be06:	4804      	ldr	r0, [pc, #16]	; (801be18 <pbuf_alloc_reference+0x4c>)
 801be08:	f00a faa4 	bl	8026354 <iprintf>
 801be0c:	e7e6      	b.n	801bddc <pbuf_alloc_reference+0x10>
 801be0e:	bf00      	nop
 801be10:	08044e98 	.word	0x08044e98
 801be14:	08044f88 	.word	0x08044f88
 801be18:	0802b034 	.word	0x0802b034

0801be1c <pbuf_alloc>:
  switch (type) {
 801be1c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be24:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801be26:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801be2a:	d03d      	beq.n	801bea8 <pbuf_alloc+0x8c>
 801be2c:	d80e      	bhi.n	801be4c <pbuf_alloc+0x30>
 801be2e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801be32:	2c01      	cmp	r4, #1
 801be34:	d033      	beq.n	801be9e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801be36:	4b41      	ldr	r3, [pc, #260]	; (801bf3c <pbuf_alloc+0x120>)
 801be38:	f240 1227 	movw	r2, #295	; 0x127
 801be3c:	4940      	ldr	r1, [pc, #256]	; (801bf40 <pbuf_alloc+0x124>)
      return NULL;
 801be3e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801be40:	4840      	ldr	r0, [pc, #256]	; (801bf44 <pbuf_alloc+0x128>)
 801be42:	f00a fa87 	bl	8026354 <iprintf>
}
 801be46:	4628      	mov	r0, r5
 801be48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801be4c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801be50:	d1f1      	bne.n	801be36 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801be52:	f10a 0303 	add.w	r3, sl, #3
 801be56:	1cca      	adds	r2, r1, #3
 801be58:	4606      	mov	r6, r0
 801be5a:	f022 0203 	bic.w	r2, r2, #3
 801be5e:	f023 0303 	bic.w	r3, r3, #3
 801be62:	4413      	add	r3, r2
 801be64:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801be66:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801be6a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801be6c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801be6e:	d34d      	bcc.n	801bf0c <pbuf_alloc+0xf0>
 801be70:	4282      	cmp	r2, r0
 801be72:	d84b      	bhi.n	801bf0c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801be74:	f7ff fab4 	bl	801b3e0 <mem_malloc>
      if (p == NULL) {
 801be78:	4605      	mov	r5, r0
 801be7a:	2800      	cmp	r0, #0
 801be7c:	d0e3      	beq.n	801be46 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801be7e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801be80:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801be82:	4a31      	ldr	r2, [pc, #196]	; (801bf48 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801be84:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801be86:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801be8a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801be8c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801be90:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801be94:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801be96:	6043      	str	r3, [r0, #4]
}
 801be98:	4628      	mov	r0, r5
 801be9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801be9e:	2000      	movs	r0, #0
}
 801bea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801bea4:	f7ff bf92 	b.w	801bdcc <pbuf_alloc_reference>
  switch (type) {
 801bea8:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801beaa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801bf3c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801beae:	4f27      	ldr	r7, [pc, #156]	; (801bf4c <pbuf_alloc+0x130>)
  switch (type) {
 801beb0:	4625      	mov	r5, r4
 801beb2:	e009      	b.n	801bec8 <pbuf_alloc+0xac>
          last->next = q;
 801beb4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801beb6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801beba:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801bebe:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801bec2:	f1b9 0f00 	cmp.w	r9, #0
 801bec6:	d0be      	beq.n	801be46 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801bec8:	22f3      	movs	r2, #243	; 0xf3
 801beca:	4641      	mov	r1, r8
 801becc:	200f      	movs	r0, #15
 801bece:	4626      	mov	r6, r4
 801bed0:	f7ff fc28 	bl	801b724 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801bed4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801bed8:	2100      	movs	r1, #0
        if (q == NULL) {
 801beda:	4604      	mov	r4, r0
 801bedc:	b1d0      	cbz	r0, 801bf14 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801bede:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801bee2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801bee6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801beea:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801beee:	3213      	adds	r2, #19
  p->next = NULL;
 801bef0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801bef2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801bef4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801bef8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801befa:	454b      	cmp	r3, r9
  p->payload = payload;
 801befc:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801befe:	bf28      	it	cs
 801bf00:	464b      	movcs	r3, r9
  p->len = len;
 801bf02:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801bf04:	2d00      	cmp	r5, #0
 801bf06:	d1d5      	bne.n	801beb4 <pbuf_alloc+0x98>
 801bf08:	4605      	mov	r5, r0
 801bf0a:	e7d4      	b.n	801beb6 <pbuf_alloc+0x9a>
          return NULL;
 801bf0c:	2500      	movs	r5, #0
}
 801bf0e:	4628      	mov	r0, r5
 801bf10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801bf14:	4e0e      	ldr	r6, [pc, #56]	; (801bf50 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801bf16:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801bf18:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801bf1a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801bf1c:	b133      	cbz	r3, 801bf2c <pbuf_alloc+0x110>
          if (p) {
 801bf1e:	2d00      	cmp	r5, #0
 801bf20:	d0f4      	beq.n	801bf0c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801bf22:	4628      	mov	r0, r5
          return NULL;
 801bf24:	2500      	movs	r5, #0
 801bf26:	f7ff fe4b 	bl	801bbc0 <pbuf_free.part.0>
 801bf2a:	e78c      	b.n	801be46 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801bf2c:	4601      	mov	r1, r0
 801bf2e:	4809      	ldr	r0, [pc, #36]	; (801bf54 <pbuf_alloc+0x138>)
 801bf30:	f7fc fefc 	bl	8018d2c <tcpip_try_callback>
 801bf34:	2800      	cmp	r0, #0
 801bf36:	d0f2      	beq.n	801bf1e <pbuf_alloc+0x102>
 801bf38:	7034      	strb	r4, [r6, #0]
 801bf3a:	e7f0      	b.n	801bf1e <pbuf_alloc+0x102>
 801bf3c:	08044e98 	.word	0x08044e98
 801bf40:	08044f9c 	.word	0x08044f9c
 801bf44:	0802b034 	.word	0x0802b034
 801bf48:	00010080 	.word	0x00010080
 801bf4c:	00010082 	.word	0x00010082
 801bf50:	2002e42d 	.word	0x2002e42d
 801bf54:	0801bb99 	.word	0x0801bb99

0801bf58 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801bf58:	3003      	adds	r0, #3
 801bf5a:	f020 0003 	bic.w	r0, r0, #3
{
 801bf5e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801bf60:	eb01 0e00 	add.w	lr, r1, r0
{
 801bf64:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801bf68:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801bf6a:	45e6      	cmp	lr, ip
 801bf6c:	d80d      	bhi.n	801bf8a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801bf6e:	b104      	cbz	r4, 801bf72 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801bf70:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801bf72:	4618      	mov	r0, r3
  p->next = NULL;
 801bf74:	2300      	movs	r3, #0
  p->payload = payload;
 801bf76:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801bf78:	2402      	movs	r4, #2
  p->next = NULL;
 801bf7a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801bf7c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801bf7e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801bf80:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801bf82:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801bf84:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801bf86:	81c3      	strh	r3, [r0, #14]
}
 801bf88:	bd10      	pop	{r4, pc}
    return NULL;
 801bf8a:	2000      	movs	r0, #0
}
 801bf8c:	bd10      	pop	{r4, pc}
 801bf8e:	bf00      	nop

0801bf90 <pbuf_realloc>:
{
 801bf90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801bf92:	4604      	mov	r4, r0
{
 801bf94:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801bf96:	2800      	cmp	r0, #0
 801bf98:	d037      	beq.n	801c00a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801bf9a:	8922      	ldrh	r2, [r4, #8]
 801bf9c:	42aa      	cmp	r2, r5
 801bf9e:	d91b      	bls.n	801bfd8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801bfa0:	8963      	ldrh	r3, [r4, #10]
 801bfa2:	429d      	cmp	r5, r3
 801bfa4:	d90d      	bls.n	801bfc2 <pbuf_realloc+0x32>
 801bfa6:	1aa9      	subs	r1, r5, r2
 801bfa8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801bfaa:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801bfac:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801bfae:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801bfb0:	b29d      	uxth	r5, r3
    q = q->next;
 801bfb2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801bfb4:	2c00      	cmp	r4, #0
 801bfb6:	d030      	beq.n	801c01a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801bfb8:	8963      	ldrh	r3, [r4, #10]
 801bfba:	42ab      	cmp	r3, r5
 801bfbc:	d201      	bcs.n	801bfc2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801bfbe:	8922      	ldrh	r2, [r4, #8]
 801bfc0:	e7f3      	b.n	801bfaa <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801bfc2:	7b22      	ldrb	r2, [r4, #12]
 801bfc4:	0712      	lsls	r2, r2, #28
 801bfc6:	d008      	beq.n	801bfda <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801bfc8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801bfca:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801bfcc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801bfce:	b108      	cbz	r0, 801bfd4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801bfd0:	f7ff fdf6 	bl	801bbc0 <pbuf_free.part.0>
  q->next = NULL;
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	6023      	str	r3, [r4, #0]
}
 801bfd8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801bfda:	429d      	cmp	r5, r3
 801bfdc:	d0f4      	beq.n	801bfc8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801bfde:	7b63      	ldrb	r3, [r4, #13]
 801bfe0:	079b      	lsls	r3, r3, #30
 801bfe2:	d4f1      	bmi.n	801bfc8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801bfe4:	6863      	ldr	r3, [r4, #4]
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	1b1b      	subs	r3, r3, r4
 801bfea:	18e9      	adds	r1, r5, r3
 801bfec:	b289      	uxth	r1, r1
 801bfee:	f7ff f91d 	bl	801b22c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801bff2:	4604      	mov	r4, r0
 801bff4:	2800      	cmp	r0, #0
 801bff6:	d1e7      	bne.n	801bfc8 <pbuf_realloc+0x38>
 801bff8:	4b0c      	ldr	r3, [pc, #48]	; (801c02c <pbuf_realloc+0x9c>)
 801bffa:	f240 12bd 	movw	r2, #445	; 0x1bd
 801bffe:	490c      	ldr	r1, [pc, #48]	; (801c030 <pbuf_realloc+0xa0>)
 801c000:	480c      	ldr	r0, [pc, #48]	; (801c034 <pbuf_realloc+0xa4>)
 801c002:	f00a f9a7 	bl	8026354 <iprintf>
  q->len = rem_len;
 801c006:	8164      	strh	r4, [r4, #10]
 801c008:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c00a:	4b08      	ldr	r3, [pc, #32]	; (801c02c <pbuf_realloc+0x9c>)
 801c00c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c010:	4909      	ldr	r1, [pc, #36]	; (801c038 <pbuf_realloc+0xa8>)
 801c012:	4808      	ldr	r0, [pc, #32]	; (801c034 <pbuf_realloc+0xa4>)
 801c014:	f00a f99e 	bl	8026354 <iprintf>
 801c018:	e7bf      	b.n	801bf9a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c01a:	4b04      	ldr	r3, [pc, #16]	; (801c02c <pbuf_realloc+0x9c>)
 801c01c:	f240 12af 	movw	r2, #431	; 0x1af
 801c020:	4906      	ldr	r1, [pc, #24]	; (801c03c <pbuf_realloc+0xac>)
 801c022:	4804      	ldr	r0, [pc, #16]	; (801c034 <pbuf_realloc+0xa4>)
 801c024:	f00a f996 	bl	8026354 <iprintf>
  while (rem_len > q->len) {
 801c028:	8963      	ldrh	r3, [r4, #10]
 801c02a:	deff      	udf	#255	; 0xff
 801c02c:	08044e98 	.word	0x08044e98
 801c030:	08044fe8 	.word	0x08044fe8
 801c034:	0802b034 	.word	0x0802b034
 801c038:	08044fb8 	.word	0x08044fb8
 801c03c:	08044fd0 	.word	0x08044fd0

0801c040 <pbuf_add_header>:
{
 801c040:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c042:	b310      	cbz	r0, 801c08a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c044:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c048:	d20c      	bcs.n	801c064 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801c04a:	b169      	cbz	r1, 801c068 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801c04c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c050:	8902      	ldrh	r2, [r0, #8]
 801c052:	4603      	mov	r3, r0
 801c054:	4462      	add	r2, ip
 801c056:	b292      	uxth	r2, r2
 801c058:	4594      	cmp	ip, r2
 801c05a:	d803      	bhi.n	801c064 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c05c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801c060:	2800      	cmp	r0, #0
 801c062:	db03      	blt.n	801c06c <pbuf_add_header+0x2c>
    return 1;
 801c064:	2001      	movs	r0, #1
}
 801c066:	bd08      	pop	{r3, pc}
    return 0;
 801c068:	4608      	mov	r0, r1
}
 801c06a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801c06c:	6858      	ldr	r0, [r3, #4]
 801c06e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c070:	f103 0010 	add.w	r0, r3, #16
 801c074:	4281      	cmp	r1, r0
 801c076:	d3f5      	bcc.n	801c064 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c078:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c07c:	2000      	movs	r0, #0
  p->payload = payload;
 801c07e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c080:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c082:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c084:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c088:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c08a:	4b04      	ldr	r3, [pc, #16]	; (801c09c <pbuf_add_header+0x5c>)
 801c08c:	f240 12df 	movw	r2, #479	; 0x1df
 801c090:	4903      	ldr	r1, [pc, #12]	; (801c0a0 <pbuf_add_header+0x60>)
 801c092:	4804      	ldr	r0, [pc, #16]	; (801c0a4 <pbuf_add_header+0x64>)
 801c094:	f00a f95e 	bl	8026354 <iprintf>
    return 1;
 801c098:	2001      	movs	r0, #1
}
 801c09a:	bd08      	pop	{r3, pc}
 801c09c:	08044e98 	.word	0x08044e98
 801c0a0:	080468c4 	.word	0x080468c4
 801c0a4:	0802b034 	.word	0x0802b034

0801c0a8 <pbuf_remove_header>:
{
 801c0a8:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c0aa:	b1c8      	cbz	r0, 801c0e0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c0ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c0b0:	d21f      	bcs.n	801c0f2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801c0b2:	b199      	cbz	r1, 801c0dc <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801c0b4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c0b8:	8942      	ldrh	r2, [r0, #10]
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	4594      	cmp	ip, r2
 801c0be:	d81a      	bhi.n	801c0f6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c0c0:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801c0c2:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c0c6:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c0ca:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801c0cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c0ce:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801c0d2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c0d4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c0d6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801c0da:	bd08      	pop	{r3, pc}
    return 0;
 801c0dc:	4608      	mov	r0, r1
}
 801c0de:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c0e0:	4b09      	ldr	r3, [pc, #36]	; (801c108 <pbuf_remove_header+0x60>)
 801c0e2:	f240 224b 	movw	r2, #587	; 0x24b
 801c0e6:	4909      	ldr	r1, [pc, #36]	; (801c10c <pbuf_remove_header+0x64>)
 801c0e8:	4809      	ldr	r0, [pc, #36]	; (801c110 <pbuf_remove_header+0x68>)
 801c0ea:	f00a f933 	bl	8026354 <iprintf>
    return 1;
 801c0ee:	2001      	movs	r0, #1
}
 801c0f0:	bd08      	pop	{r3, pc}
    return 1;
 801c0f2:	2001      	movs	r0, #1
}
 801c0f4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c0f6:	4b04      	ldr	r3, [pc, #16]	; (801c108 <pbuf_remove_header+0x60>)
 801c0f8:	f240 2255 	movw	r2, #597	; 0x255
 801c0fc:	4905      	ldr	r1, [pc, #20]	; (801c114 <pbuf_remove_header+0x6c>)
 801c0fe:	4804      	ldr	r0, [pc, #16]	; (801c110 <pbuf_remove_header+0x68>)
 801c100:	f00a f928 	bl	8026354 <iprintf>
 801c104:	2001      	movs	r0, #1
}
 801c106:	bd08      	pop	{r3, pc}
 801c108:	08044e98 	.word	0x08044e98
 801c10c:	080468c4 	.word	0x080468c4
 801c110:	0802b034 	.word	0x0802b034
 801c114:	08045004 	.word	0x08045004

0801c118 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801c118:	2900      	cmp	r1, #0
 801c11a:	db1a      	blt.n	801c152 <pbuf_header_force+0x3a>
{
 801c11c:	b508      	push	{r3, lr}
 801c11e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801c120:	b1d0      	cbz	r0, 801c158 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801c122:	b341      	cbz	r1, 801c176 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801c124:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c128:	891a      	ldrh	r2, [r3, #8]
 801c12a:	4462      	add	r2, ip
 801c12c:	b292      	uxth	r2, r2
 801c12e:	4594      	cmp	ip, r2
 801c130:	d81f      	bhi.n	801c172 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c132:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801c136:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801c138:	6858      	ldr	r0, [r3, #4]
 801c13a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c13e:	db14      	blt.n	801c16a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c140:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c144:	2000      	movs	r0, #0
  p->payload = payload;
 801c146:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c148:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c14a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c14c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c150:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c152:	4249      	negs	r1, r1
 801c154:	f7ff bfa8 	b.w	801c0a8 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c158:	4b08      	ldr	r3, [pc, #32]	; (801c17c <pbuf_header_force+0x64>)
 801c15a:	f240 12df 	movw	r2, #479	; 0x1df
 801c15e:	4908      	ldr	r1, [pc, #32]	; (801c180 <pbuf_header_force+0x68>)
 801c160:	4808      	ldr	r0, [pc, #32]	; (801c184 <pbuf_header_force+0x6c>)
 801c162:	f00a f8f7 	bl	8026354 <iprintf>
    return 1;
 801c166:	2001      	movs	r0, #1
}
 801c168:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c16a:	f103 0010 	add.w	r0, r3, #16
 801c16e:	4281      	cmp	r1, r0
 801c170:	d2e6      	bcs.n	801c140 <pbuf_header_force+0x28>
    return 1;
 801c172:	2001      	movs	r0, #1
}
 801c174:	bd08      	pop	{r3, pc}
    return 0;
 801c176:	4608      	mov	r0, r1
}
 801c178:	bd08      	pop	{r3, pc}
 801c17a:	bf00      	nop
 801c17c:	08044e98 	.word	0x08044e98
 801c180:	080468c4 	.word	0x080468c4
 801c184:	0802b034 	.word	0x0802b034

0801c188 <pbuf_free_header>:
{
 801c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801c18a:	4604      	mov	r4, r0
 801c18c:	b158      	cbz	r0, 801c1a6 <pbuf_free_header+0x1e>
 801c18e:	460d      	mov	r5, r1
 801c190:	b149      	cbz	r1, 801c1a6 <pbuf_free_header+0x1e>
      f->next = 0;
 801c192:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801c194:	8963      	ldrh	r3, [r4, #10]
 801c196:	4620      	mov	r0, r4
 801c198:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801c19a:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801c19e:	d904      	bls.n	801c1aa <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801c1a0:	4629      	mov	r1, r5
 801c1a2:	f7ff ff81 	bl	801c0a8 <pbuf_remove_header>
}
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801c1aa:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801c1ac:	b295      	uxth	r5, r2
      f->next = 0;
 801c1ae:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801c1b0:	4634      	mov	r4, r6
 801c1b2:	f7ff fd05 	bl	801bbc0 <pbuf_free.part.0>
  while (free_left && p) {
 801c1b6:	b10d      	cbz	r5, 801c1bc <pbuf_free_header+0x34>
 801c1b8:	2e00      	cmp	r6, #0
 801c1ba:	d1eb      	bne.n	801c194 <pbuf_free_header+0xc>
      p = p->next;
 801c1bc:	4634      	mov	r4, r6
 801c1be:	e7f2      	b.n	801c1a6 <pbuf_free_header+0x1e>

0801c1c0 <pbuf_free>:
  if (p == NULL) {
 801c1c0:	b108      	cbz	r0, 801c1c6 <pbuf_free+0x6>
 801c1c2:	f7ff bcfd 	b.w	801bbc0 <pbuf_free.part.0>
{
 801c1c6:	b510      	push	{r4, lr}
 801c1c8:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801c1ca:	4b04      	ldr	r3, [pc, #16]	; (801c1dc <pbuf_free+0x1c>)
 801c1cc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c1d0:	4903      	ldr	r1, [pc, #12]	; (801c1e0 <pbuf_free+0x20>)
 801c1d2:	4804      	ldr	r0, [pc, #16]	; (801c1e4 <pbuf_free+0x24>)
 801c1d4:	f00a f8be 	bl	8026354 <iprintf>
}
 801c1d8:	4620      	mov	r0, r4
 801c1da:	bd10      	pop	{r4, pc}
 801c1dc:	08044e98 	.word	0x08044e98
 801c1e0:	080468c4 	.word	0x080468c4
 801c1e4:	0802b034 	.word	0x0802b034

0801c1e8 <pbuf_clen>:
  while (p != NULL) {
 801c1e8:	4603      	mov	r3, r0
 801c1ea:	b130      	cbz	r0, 801c1fa <pbuf_clen+0x12>
  len = 0;
 801c1ec:	2000      	movs	r0, #0
    ++len;
 801c1ee:	3001      	adds	r0, #1
    p = p->next;
 801c1f0:	681b      	ldr	r3, [r3, #0]
    ++len;
 801c1f2:	b280      	uxth	r0, r0
  while (p != NULL) {
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d1fa      	bne.n	801c1ee <pbuf_clen+0x6>
 801c1f8:	4770      	bx	lr
}
 801c1fa:	4770      	bx	lr

0801c1fc <pbuf_ref>:
  if (p != NULL) {
 801c1fc:	b120      	cbz	r0, 801c208 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c1fe:	7b83      	ldrb	r3, [r0, #14]
 801c200:	3301      	adds	r3, #1
 801c202:	b2db      	uxtb	r3, r3
 801c204:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c206:	b103      	cbz	r3, 801c20a <pbuf_ref+0xe>
}
 801c208:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c20a:	4b03      	ldr	r3, [pc, #12]	; (801c218 <pbuf_ref+0x1c>)
 801c20c:	f240 3242 	movw	r2, #834	; 0x342
 801c210:	4902      	ldr	r1, [pc, #8]	; (801c21c <pbuf_ref+0x20>)
 801c212:	4803      	ldr	r0, [pc, #12]	; (801c220 <pbuf_ref+0x24>)
 801c214:	f00a b89e 	b.w	8026354 <iprintf>
 801c218:	08044e98 	.word	0x08044e98
 801c21c:	08045024 	.word	0x08045024
 801c220:	0802b034 	.word	0x0802b034

0801c224 <pbuf_cat>:
{
 801c224:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c226:	b330      	cbz	r0, 801c276 <pbuf_cat+0x52>
 801c228:	460d      	mov	r5, r1
 801c22a:	b321      	cbz	r1, 801c276 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801c22c:	6803      	ldr	r3, [r0, #0]
 801c22e:	4604      	mov	r4, r0
 801c230:	b13b      	cbz	r3, 801c242 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c232:	8922      	ldrh	r2, [r4, #8]
 801c234:	8928      	ldrh	r0, [r5, #8]
 801c236:	4402      	add	r2, r0
 801c238:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c23a:	461c      	mov	r4, r3
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d1f7      	bne.n	801c232 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c242:	8963      	ldrh	r3, [r4, #10]
 801c244:	8922      	ldrh	r2, [r4, #8]
 801c246:	429a      	cmp	r2, r3
 801c248:	d010      	beq.n	801c26c <pbuf_cat+0x48>
 801c24a:	4b0f      	ldr	r3, [pc, #60]	; (801c288 <pbuf_cat+0x64>)
 801c24c:	f240 3262 	movw	r2, #866	; 0x362
 801c250:	490e      	ldr	r1, [pc, #56]	; (801c28c <pbuf_cat+0x68>)
 801c252:	480f      	ldr	r0, [pc, #60]	; (801c290 <pbuf_cat+0x6c>)
 801c254:	f00a f87e 	bl	8026354 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c258:	6823      	ldr	r3, [r4, #0]
 801c25a:	b133      	cbz	r3, 801c26a <pbuf_cat+0x46>
 801c25c:	4b0a      	ldr	r3, [pc, #40]	; (801c288 <pbuf_cat+0x64>)
 801c25e:	f240 3263 	movw	r2, #867	; 0x363
 801c262:	490c      	ldr	r1, [pc, #48]	; (801c294 <pbuf_cat+0x70>)
 801c264:	480a      	ldr	r0, [pc, #40]	; (801c290 <pbuf_cat+0x6c>)
 801c266:	f00a f875 	bl	8026354 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c26a:	8923      	ldrh	r3, [r4, #8]
 801c26c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801c26e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c270:	4413      	add	r3, r2
 801c272:	8123      	strh	r3, [r4, #8]
}
 801c274:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c276:	4b04      	ldr	r3, [pc, #16]	; (801c288 <pbuf_cat+0x64>)
 801c278:	f240 3259 	movw	r2, #857	; 0x359
 801c27c:	4906      	ldr	r1, [pc, #24]	; (801c298 <pbuf_cat+0x74>)
 801c27e:	4804      	ldr	r0, [pc, #16]	; (801c290 <pbuf_cat+0x6c>)
}
 801c280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c284:	f00a b866 	b.w	8026354 <iprintf>
 801c288:	08044e98 	.word	0x08044e98
 801c28c:	08045070 	.word	0x08045070
 801c290:	0802b034 	.word	0x0802b034
 801c294:	080450a0 	.word	0x080450a0
 801c298:	08045038 	.word	0x08045038

0801c29c <pbuf_chain>:
{
 801c29c:	b510      	push	{r4, lr}
 801c29e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801c2a0:	f7ff ffc0 	bl	801c224 <pbuf_cat>
  if (p != NULL) {
 801c2a4:	b124      	cbz	r4, 801c2b0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c2a6:	7ba3      	ldrb	r3, [r4, #14]
 801c2a8:	3301      	adds	r3, #1
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c2ae:	b103      	cbz	r3, 801c2b2 <pbuf_chain+0x16>
}
 801c2b0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c2b2:	4b04      	ldr	r3, [pc, #16]	; (801c2c4 <pbuf_chain+0x28>)
 801c2b4:	f240 3242 	movw	r2, #834	; 0x342
 801c2b8:	4903      	ldr	r1, [pc, #12]	; (801c2c8 <pbuf_chain+0x2c>)
 801c2ba:	4804      	ldr	r0, [pc, #16]	; (801c2cc <pbuf_chain+0x30>)
}
 801c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c2c0:	f00a b848 	b.w	8026354 <iprintf>
 801c2c4:	08044e98 	.word	0x08044e98
 801c2c8:	08045024 	.word	0x08045024
 801c2cc:	0802b034 	.word	0x0802b034

0801c2d0 <pbuf_copy>:
{
 801c2d0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c2d2:	b140      	cbz	r0, 801c2e6 <pbuf_copy+0x16>
 801c2d4:	b139      	cbz	r1, 801c2e6 <pbuf_copy+0x16>
 801c2d6:	8902      	ldrh	r2, [r0, #8]
 801c2d8:	890b      	ldrh	r3, [r1, #8]
 801c2da:	429a      	cmp	r2, r3
 801c2dc:	d303      	bcc.n	801c2e6 <pbuf_copy+0x16>
}
 801c2de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c2e2:	f7ff bcd1 	b.w	801bc88 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c2e6:	4b05      	ldr	r3, [pc, #20]	; (801c2fc <pbuf_copy+0x2c>)
 801c2e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c2ec:	4904      	ldr	r1, [pc, #16]	; (801c300 <pbuf_copy+0x30>)
 801c2ee:	4805      	ldr	r0, [pc, #20]	; (801c304 <pbuf_copy+0x34>)
 801c2f0:	f00a f830 	bl	8026354 <iprintf>
}
 801c2f4:	f06f 000f 	mvn.w	r0, #15
 801c2f8:	bd08      	pop	{r3, pc}
 801c2fa:	bf00      	nop
 801c2fc:	08044e98 	.word	0x08044e98
 801c300:	080450b0 	.word	0x080450b0
 801c304:	0802b034 	.word	0x0802b034

0801c308 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c30c:	4605      	mov	r5, r0
 801c30e:	b370      	cbz	r0, 801c36e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c310:	460f      	mov	r7, r1
 801c312:	2900      	cmp	r1, #0
 801c314:	d036      	beq.n	801c384 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c316:	4690      	mov	r8, r2
 801c318:	b392      	cbz	r2, 801c380 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801c31a:	2600      	movs	r6, #0
 801c31c:	e005      	b.n	801c32a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801c31e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c320:	682d      	ldr	r5, [r5, #0]
 801c322:	f1b8 0f00 	cmp.w	r8, #0
 801c326:	d01f      	beq.n	801c368 <pbuf_copy_partial+0x60>
 801c328:	b1f5      	cbz	r5, 801c368 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c32a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801c32c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801c330:	b11b      	cbz	r3, 801c33a <pbuf_copy_partial+0x32>
 801c332:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801c334:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801c338:	d2f1      	bcs.n	801c31e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801c33a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c33e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801c340:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c344:	4419      	add	r1, r3
 801c346:	4544      	cmp	r4, r8
 801c348:	bf28      	it	cs
 801c34a:	4644      	movcs	r4, r8
 801c34c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c34e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801c350:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c354:	f009 f838 	bl	80253c8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c358:	b2b6      	uxth	r6, r6
      offset = 0;
 801c35a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801c35c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c360:	682d      	ldr	r5, [r5, #0]
 801c362:	f1b8 0f00 	cmp.w	r8, #0
 801c366:	d1df      	bne.n	801c328 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801c368:	4630      	mov	r0, r6
 801c36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c36e:	4b0a      	ldr	r3, [pc, #40]	; (801c398 <pbuf_copy_partial+0x90>)
 801c370:	f240 420a 	movw	r2, #1034	; 0x40a
 801c374:	4909      	ldr	r1, [pc, #36]	; (801c39c <pbuf_copy_partial+0x94>)
 801c376:	462e      	mov	r6, r5
 801c378:	4809      	ldr	r0, [pc, #36]	; (801c3a0 <pbuf_copy_partial+0x98>)
 801c37a:	f009 ffeb 	bl	8026354 <iprintf>
 801c37e:	e7f3      	b.n	801c368 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801c380:	4616      	mov	r6, r2
 801c382:	e7f1      	b.n	801c368 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c384:	4b04      	ldr	r3, [pc, #16]	; (801c398 <pbuf_copy_partial+0x90>)
 801c386:	f240 420b 	movw	r2, #1035	; 0x40b
 801c38a:	4906      	ldr	r1, [pc, #24]	; (801c3a4 <pbuf_copy_partial+0x9c>)
 801c38c:	463e      	mov	r6, r7
 801c38e:	4804      	ldr	r0, [pc, #16]	; (801c3a0 <pbuf_copy_partial+0x98>)
 801c390:	f009 ffe0 	bl	8026354 <iprintf>
 801c394:	e7e8      	b.n	801c368 <pbuf_copy_partial+0x60>
 801c396:	bf00      	nop
 801c398:	08044e98 	.word	0x08044e98
 801c39c:	080450e0 	.word	0x080450e0
 801c3a0:	0802b034 	.word	0x0802b034
 801c3a4:	08045100 	.word	0x08045100

0801c3a8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801c3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c3ac:	2800      	cmp	r0, #0
 801c3ae:	d049      	beq.n	801c444 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c3b0:	460f      	mov	r7, r1
 801c3b2:	2900      	cmp	r1, #0
 801c3b4:	d03c      	beq.n	801c430 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c3b6:	8903      	ldrh	r3, [r0, #8]
 801c3b8:	4604      	mov	r4, r0
 801c3ba:	4690      	mov	r8, r2
 801c3bc:	4293      	cmp	r3, r2
 801c3be:	d32d      	bcc.n	801c41c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c3c0:	b34a      	cbz	r2, 801c416 <pbuf_take+0x6e>
 801c3c2:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801c3c4:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c3c6:	f8df b094 	ldr.w	fp, [pc, #148]	; 801c45c <pbuf_take+0xb4>
 801c3ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801c470 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801c3ce:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c3d0:	19b9      	adds	r1, r7, r6
 801c3d2:	6860      	ldr	r0, [r4, #4]
 801c3d4:	42aa      	cmp	r2, r5
 801c3d6:	bf28      	it	cs
 801c3d8:	462a      	movcs	r2, r5
 801c3da:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801c3dc:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c3de:	f008 fff3 	bl	80253c8 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c3e2:	6824      	ldr	r4, [r4, #0]
 801c3e4:	ebb5 0509 	subs.w	r5, r5, r9
 801c3e8:	d009      	beq.n	801c3fe <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c3ea:	2c00      	cmp	r4, #0
 801c3ec:	d1ef      	bne.n	801c3ce <pbuf_take+0x26>
 801c3ee:	465b      	mov	r3, fp
 801c3f0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801c3f4:	4651      	mov	r1, sl
 801c3f6:	4818      	ldr	r0, [pc, #96]	; (801c458 <pbuf_take+0xb0>)
 801c3f8:	f009 ffac 	bl	8026354 <iprintf>
 801c3fc:	e7e7      	b.n	801c3ce <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801c3fe:	45b0      	cmp	r8, r6
 801c400:	d009      	beq.n	801c416 <pbuf_take+0x6e>
 801c402:	4b16      	ldr	r3, [pc, #88]	; (801c45c <pbuf_take+0xb4>)
 801c404:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801c408:	4915      	ldr	r1, [pc, #84]	; (801c460 <pbuf_take+0xb8>)
 801c40a:	4813      	ldr	r0, [pc, #76]	; (801c458 <pbuf_take+0xb0>)
 801c40c:	f009 ffa2 	bl	8026354 <iprintf>
  return ERR_OK;
 801c410:	4628      	mov	r0, r5
}
 801c412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801c416:	2000      	movs	r0, #0
}
 801c418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c41c:	4b0f      	ldr	r3, [pc, #60]	; (801c45c <pbuf_take+0xb4>)
 801c41e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801c422:	4910      	ldr	r1, [pc, #64]	; (801c464 <pbuf_take+0xbc>)
 801c424:	480c      	ldr	r0, [pc, #48]	; (801c458 <pbuf_take+0xb0>)
 801c426:	f009 ff95 	bl	8026354 <iprintf>
 801c42a:	f04f 30ff 	mov.w	r0, #4294967295
 801c42e:	e7f3      	b.n	801c418 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c430:	4b0a      	ldr	r3, [pc, #40]	; (801c45c <pbuf_take+0xb4>)
 801c432:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801c436:	490c      	ldr	r1, [pc, #48]	; (801c468 <pbuf_take+0xc0>)
 801c438:	4807      	ldr	r0, [pc, #28]	; (801c458 <pbuf_take+0xb0>)
 801c43a:	f009 ff8b 	bl	8026354 <iprintf>
 801c43e:	f06f 000f 	mvn.w	r0, #15
 801c442:	e7e9      	b.n	801c418 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c444:	4b05      	ldr	r3, [pc, #20]	; (801c45c <pbuf_take+0xb4>)
 801c446:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801c44a:	4908      	ldr	r1, [pc, #32]	; (801c46c <pbuf_take+0xc4>)
 801c44c:	4802      	ldr	r0, [pc, #8]	; (801c458 <pbuf_take+0xb0>)
 801c44e:	f009 ff81 	bl	8026354 <iprintf>
 801c452:	f06f 000f 	mvn.w	r0, #15
 801c456:	e7df      	b.n	801c418 <pbuf_take+0x70>
 801c458:	0802b034 	.word	0x0802b034
 801c45c:	08044e98 	.word	0x08044e98
 801c460:	08045190 	.word	0x08045190
 801c464:	08045158 	.word	0x08045158
 801c468:	0804513c 	.word	0x0804513c
 801c46c:	08045124 	.word	0x08045124
 801c470:	08045178 	.word	0x08045178

0801c474 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c474:	b390      	cbz	r0, 801c4dc <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801c476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c47a:	460f      	mov	r7, r1
 801c47c:	4604      	mov	r4, r0
 801c47e:	e002      	b.n	801c486 <pbuf_take_at+0x12>
    q = q->next;
 801c480:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c482:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801c484:	b334      	cbz	r4, 801c4d4 <pbuf_take_at+0x60>
 801c486:	8965      	ldrh	r5, [r4, #10]
 801c488:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801c48a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801c48e:	d9f7      	bls.n	801c480 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801c490:	8921      	ldrh	r1, [r4, #8]
 801c492:	189e      	adds	r6, r3, r2
 801c494:	42b1      	cmp	r1, r6
 801c496:	db1d      	blt.n	801c4d4 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801c498:	1ae9      	subs	r1, r5, r3
 801c49a:	428a      	cmp	r2, r1
 801c49c:	dc07      	bgt.n	801c4ae <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c49e:	6860      	ldr	r0, [r4, #4]
 801c4a0:	4639      	mov	r1, r7
 801c4a2:	4418      	add	r0, r3
 801c4a4:	f008 ff90 	bl	80253c8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801c4a8:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801c4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c4ae:	fa1f f881 	uxth.w	r8, r1
 801c4b2:	6860      	ldr	r0, [r4, #4]
 801c4b4:	4639      	mov	r1, r7
 801c4b6:	4642      	mov	r2, r8
 801c4b8:	4418      	add	r0, r3
 801c4ba:	f008 ff85 	bl	80253c8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801c4be:	1b70      	subs	r0, r6, r5
 801c4c0:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801c4c2:	2a00      	cmp	r2, #0
 801c4c4:	d0f0      	beq.n	801c4a8 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c4c6:	eb07 0108 	add.w	r1, r7, r8
 801c4ca:	6820      	ldr	r0, [r4, #0]
}
 801c4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c4d0:	f7ff bf6a 	b.w	801c3a8 <pbuf_take>
  return ERR_MEM;
 801c4d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801c4dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c4e0:	4770      	bx	lr
 801c4e2:	bf00      	nop

0801c4e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801c4e4:	b538      	push	{r3, r4, r5, lr}
 801c4e6:	4615      	mov	r5, r2
 801c4e8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801c4ea:	8929      	ldrh	r1, [r5, #8]
 801c4ec:	f7ff fc96 	bl	801be1c <pbuf_alloc>
  if (q == NULL) {
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	b138      	cbz	r0, 801c504 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c4f4:	8902      	ldrh	r2, [r0, #8]
 801c4f6:	892b      	ldrh	r3, [r5, #8]
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	d305      	bcc.n	801c508 <pbuf_clone+0x24>
 801c4fc:	4629      	mov	r1, r5
 801c4fe:	f7ff fbc3 	bl	801bc88 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c502:	b940      	cbnz	r0, 801c516 <pbuf_clone+0x32>
  return q;
}
 801c504:	4620      	mov	r0, r4
 801c506:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c508:	4b07      	ldr	r3, [pc, #28]	; (801c528 <pbuf_clone+0x44>)
 801c50a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c50e:	4907      	ldr	r1, [pc, #28]	; (801c52c <pbuf_clone+0x48>)
 801c510:	4807      	ldr	r0, [pc, #28]	; (801c530 <pbuf_clone+0x4c>)
 801c512:	f009 ff1f 	bl	8026354 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c516:	4b04      	ldr	r3, [pc, #16]	; (801c528 <pbuf_clone+0x44>)
 801c518:	f240 5224 	movw	r2, #1316	; 0x524
 801c51c:	4905      	ldr	r1, [pc, #20]	; (801c534 <pbuf_clone+0x50>)
 801c51e:	4804      	ldr	r0, [pc, #16]	; (801c530 <pbuf_clone+0x4c>)
 801c520:	f009 ff18 	bl	8026354 <iprintf>
}
 801c524:	4620      	mov	r0, r4
 801c526:	bd38      	pop	{r3, r4, r5, pc}
 801c528:	08044e98 	.word	0x08044e98
 801c52c:	080450b0 	.word	0x080450b0
 801c530:	0802b034 	.word	0x0802b034
 801c534:	080451a8 	.word	0x080451a8

0801c538 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c538:	b918      	cbnz	r0, 801c542 <pbuf_get_at+0xa>
 801c53a:	e00a      	b.n	801c552 <pbuf_get_at+0x1a>
    q = q->next;
 801c53c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c53e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c540:	b130      	cbz	r0, 801c550 <pbuf_get_at+0x18>
 801c542:	8943      	ldrh	r3, [r0, #10]
 801c544:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c546:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c54a:	d9f7      	bls.n	801c53c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801c54c:	6843      	ldr	r3, [r0, #4]
 801c54e:	5c58      	ldrb	r0, [r3, r1]
}
 801c550:	4770      	bx	lr
 801c552:	4770      	bx	lr

0801c554 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c554:	b140      	cbz	r0, 801c568 <pbuf_try_get_at+0x14>
 801c556:	8943      	ldrh	r3, [r0, #10]
 801c558:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c55a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c55e:	d806      	bhi.n	801c56e <pbuf_try_get_at+0x1a>
    q = q->next;
 801c560:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c562:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c564:	2800      	cmp	r0, #0
 801c566:	d1f6      	bne.n	801c556 <pbuf_try_get_at+0x2>
  }
  return -1;
 801c568:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c56c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801c56e:	6843      	ldr	r3, [r0, #4]
 801c570:	5c58      	ldrb	r0, [r3, r1]
 801c572:	4770      	bx	lr

0801c574 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c574:	b918      	cbnz	r0, 801c57e <pbuf_put_at+0xa>
 801c576:	e00a      	b.n	801c58e <pbuf_put_at+0x1a>
    q = q->next;
 801c578:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c57a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c57c:	b130      	cbz	r0, 801c58c <pbuf_put_at+0x18>
 801c57e:	8943      	ldrh	r3, [r0, #10]
 801c580:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c582:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c586:	d9f7      	bls.n	801c578 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801c588:	6843      	ldr	r3, [r0, #4]
 801c58a:	545a      	strb	r2, [r3, r1]
  }
}
 801c58c:	4770      	bx	lr
 801c58e:	4770      	bx	lr

0801c590 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801c590:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801c592:	8905      	ldrh	r5, [r0, #8]
 801c594:	18cc      	adds	r4, r1, r3
 801c596:	42a5      	cmp	r5, r4
 801c598:	db2e      	blt.n	801c5f8 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801c59a:	8944      	ldrh	r4, [r0, #10]
 801c59c:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801c59e:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c5a2:	d803      	bhi.n	801c5ac <pbuf_memcmp+0x1c>
    q = q->next;
 801c5a4:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801c5a6:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c5a8:	2800      	cmp	r0, #0
 801c5aa:	d1f6      	bne.n	801c59a <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801c5ac:	b1f3      	cbz	r3, 801c5ec <pbuf_memcmp+0x5c>
 801c5ae:	2500      	movs	r5, #0
 801c5b0:	1e56      	subs	r6, r2, #1
 801c5b2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801c5b4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801c5b8:	4604      	mov	r4, r0
 801c5ba:	fa1f fc8c 	uxth.w	ip, ip
 801c5be:	b920      	cbnz	r0, 801c5ca <pbuf_memcmp+0x3a>
 801c5c0:	e00b      	b.n	801c5da <pbuf_memcmp+0x4a>
    q = q->next;
 801c5c2:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c5c4:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c5c8:	b13c      	cbz	r4, 801c5da <pbuf_memcmp+0x4a>
 801c5ca:	8962      	ldrh	r2, [r4, #10]
 801c5cc:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801c5ce:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c5d2:	d2f6      	bcs.n	801c5c2 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801c5d4:	6862      	ldr	r2, [r4, #4]
 801c5d6:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801c5da:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801c5de:	42a2      	cmp	r2, r4
 801c5e0:	d106      	bne.n	801c5f0 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801c5e2:	3501      	adds	r5, #1
 801c5e4:	fa1f fe85 	uxth.w	lr, r5
 801c5e8:	4573      	cmp	r3, lr
 801c5ea:	d8e3      	bhi.n	801c5b4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801c5ec:	2000      	movs	r0, #0
}
 801c5ee:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801c5f0:	f10e 0001 	add.w	r0, lr, #1
 801c5f4:	b280      	uxth	r0, r0
}
 801c5f6:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801c5f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c5fc:	bd70      	pop	{r4, r5, r6, pc}
 801c5fe:	bf00      	nop

0801c600 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c602:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c604:	8905      	ldrh	r5, [r0, #8]
{
 801c606:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801c608:	4422      	add	r2, r4
 801c60a:	4295      	cmp	r5, r2
 801c60c:	db15      	blt.n	801c63a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801c60e:	1aed      	subs	r5, r5, r3
 801c610:	4606      	mov	r6, r0
 801c612:	460f      	mov	r7, r1
 801c614:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801c616:	42a5      	cmp	r5, r4
 801c618:	d204      	bcs.n	801c624 <pbuf_memfind+0x24>
 801c61a:	e00e      	b.n	801c63a <pbuf_memfind+0x3a>
 801c61c:	fa1f f48c 	uxth.w	r4, ip
 801c620:	42a5      	cmp	r5, r4
 801c622:	d30a      	bcc.n	801c63a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801c624:	4621      	mov	r1, r4
 801c626:	463a      	mov	r2, r7
 801c628:	4630      	mov	r0, r6
 801c62a:	f7ff ffb1 	bl	801c590 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801c62e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801c632:	2800      	cmp	r0, #0
 801c634:	d1f2      	bne.n	801c61c <pbuf_memfind+0x1c>
 801c636:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801c638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801c63a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c640 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801c640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c644:	4e33      	ldr	r6, [pc, #204]	; (801c714 <raw_input+0xd4>)
{
 801c646:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c648:	6831      	ldr	r1, [r6, #0]
 801c64a:	6970      	ldr	r0, [r6, #20]
 801c64c:	f007 fb90 	bl	8023d70 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801c650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c654:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801c656:	4b30      	ldr	r3, [pc, #192]	; (801c718 <raw_input+0xd8>)
 801c658:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801c65a:	2c00      	cmp	r4, #0
 801c65c:	d056      	beq.n	801c70c <raw_input+0xcc>
 801c65e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801c660:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801c662:	f106 0b10 	add.w	fp, r6, #16
 801c666:	46ca      	mov	sl, r9
  prev = NULL;
 801c668:	4606      	mov	r6, r0
 801c66a:	e004      	b.n	801c676 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801c66c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801c66e:	4626      	mov	r6, r4
 801c670:	2b00      	cmp	r3, #0
 801c672:	d037      	beq.n	801c6e4 <raw_input+0xa4>
 801c674:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801c676:	7c23      	ldrb	r3, [r4, #16]
 801c678:	42ab      	cmp	r3, r5
 801c67a:	d1f7      	bne.n	801c66c <raw_input+0x2c>
 801c67c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c67e:	b13a      	cbz	r2, 801c690 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c680:	4b24      	ldr	r3, [pc, #144]	; (801c714 <raw_input+0xd4>)
 801c682:	685b      	ldr	r3, [r3, #4]
 801c684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c688:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c68a:	b2db      	uxtb	r3, r3
 801c68c:	429a      	cmp	r2, r3
 801c68e:	d1ed      	bne.n	801c66c <raw_input+0x2c>
 801c690:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801c692:	f1ba 0f00 	cmp.w	sl, #0
 801c696:	d027      	beq.n	801c6e8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d1e7      	bne.n	801c66c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801c69c:	7c63      	ldrb	r3, [r4, #17]
 801c69e:	07db      	lsls	r3, r3, #31
 801c6a0:	d504      	bpl.n	801c6ac <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801c6a2:	4b1c      	ldr	r3, [pc, #112]	; (801c714 <raw_input+0xd4>)
 801c6a4:	6862      	ldr	r2, [r4, #4]
 801c6a6:	691b      	ldr	r3, [r3, #16]
 801c6a8:	429a      	cmp	r2, r3
 801c6aa:	d1df      	bne.n	801c66c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801c6ac:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801c6b0:	f1b9 0f00 	cmp.w	r9, #0
 801c6b4:	d0da      	beq.n	801c66c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801c6b6:	465b      	mov	r3, fp
 801c6b8:	4642      	mov	r2, r8
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801c6be:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801c6c2:	47c8      	blx	r9
        if (eaten != 0) {
 801c6c4:	b9c8      	cbnz	r0, 801c6fa <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801c6c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c6ca:	42bb      	cmp	r3, r7
 801c6cc:	d013      	beq.n	801c6f6 <raw_input+0xb6>
 801c6ce:	4b13      	ldr	r3, [pc, #76]	; (801c71c <raw_input+0xdc>)
 801c6d0:	22c0      	movs	r2, #192	; 0xc0
 801c6d2:	4913      	ldr	r1, [pc, #76]	; (801c720 <raw_input+0xe0>)
 801c6d4:	4626      	mov	r6, r4
 801c6d6:	4813      	ldr	r0, [pc, #76]	; (801c724 <raw_input+0xe4>)
 801c6d8:	f009 fe3c 	bl	8026354 <iprintf>
    pcb = pcb->next;
 801c6dc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801c6de:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d1c7      	bne.n	801c674 <raw_input+0x34>
  }
  return ret;
}
 801c6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d0d7      	beq.n	801c69c <raw_input+0x5c>
 801c6ec:	4a09      	ldr	r2, [pc, #36]	; (801c714 <raw_input+0xd4>)
 801c6ee:	6952      	ldr	r2, [r2, #20]
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	d1bb      	bne.n	801c66c <raw_input+0x2c>
 801c6f4:	e7d2      	b.n	801c69c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801c6f6:	2002      	movs	r0, #2
 801c6f8:	e7b8      	b.n	801c66c <raw_input+0x2c>
          if (prev != NULL) {
 801c6fa:	b14e      	cbz	r6, 801c710 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801c6fc:	4906      	ldr	r1, [pc, #24]	; (801c718 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801c6fe:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801c700:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801c702:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801c704:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801c706:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801c708:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801c70a:	e7eb      	b.n	801c6e4 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801c70c:	4620      	mov	r0, r4
 801c70e:	e7e9      	b.n	801c6e4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801c710:	2001      	movs	r0, #1
 801c712:	e7e7      	b.n	801c6e4 <raw_input+0xa4>
 801c714:	2001f298 	.word	0x2001f298
 801c718:	2002e430 	.word	0x2002e430
 801c71c:	080451bc 	.word	0x080451bc
 801c720:	080451ec 	.word	0x080451ec
 801c724:	0802b034 	.word	0x0802b034

0801c728 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c728:	b110      	cbz	r0, 801c730 <raw_netif_ip_addr_changed+0x8>
 801c72a:	6802      	ldr	r2, [r0, #0]
 801c72c:	b101      	cbz	r1, 801c730 <raw_netif_ip_addr_changed+0x8>
 801c72e:	b902      	cbnz	r2, 801c732 <raw_netif_ip_addr_changed+0xa>
 801c730:	4770      	bx	lr
 801c732:	680b      	ldr	r3, [r1, #0]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d0fb      	beq.n	801c730 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801c738:	4b08      	ldr	r3, [pc, #32]	; (801c75c <raw_netif_ip_addr_changed+0x34>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d0f7      	beq.n	801c730 <raw_netif_ip_addr_changed+0x8>
{
 801c740:	b410      	push	{r4}
 801c742:	e000      	b.n	801c746 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801c744:	6802      	ldr	r2, [r0, #0]
 801c746:	681c      	ldr	r4, [r3, #0]
 801c748:	4294      	cmp	r4, r2
 801c74a:	d101      	bne.n	801c750 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801c74c:	680a      	ldr	r2, [r1, #0]
 801c74e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801c750:	68db      	ldr	r3, [r3, #12]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d1f6      	bne.n	801c744 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801c756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c75a:	4770      	bx	lr
 801c75c:	2002e430 	.word	0x2002e430

0801c760 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801c760:	b4f0      	push	{r4, r5, r6, r7}
 801c762:	4f13      	ldr	r7, [pc, #76]	; (801c7b0 <tcp_new_port+0x50>)
 801c764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801c768:	4e12      	ldr	r6, [pc, #72]	; (801c7b4 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801c76a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801c76e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801c770:	4d11      	ldr	r5, [pc, #68]	; (801c7b8 <tcp_new_port+0x58>)
  tcp_port++;
 801c772:	3001      	adds	r0, #1
 801c774:	4c11      	ldr	r4, [pc, #68]	; (801c7bc <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801c776:	462b      	mov	r3, r5
  tcp_port++;
 801c778:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801c77a:	4560      	cmp	r0, ip
 801c77c:	bf08      	it	eq
 801c77e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	b913      	cbnz	r3, 801c78c <tcp_new_port+0x2c>
 801c786:	e00b      	b.n	801c7a0 <tcp_new_port+0x40>
 801c788:	68db      	ldr	r3, [r3, #12]
 801c78a:	b14b      	cbz	r3, 801c7a0 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801c78c:	8ada      	ldrh	r2, [r3, #22]
 801c78e:	4282      	cmp	r2, r0
 801c790:	d1fa      	bne.n	801c788 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801c792:	3901      	subs	r1, #1
 801c794:	b289      	uxth	r1, r1
 801c796:	2900      	cmp	r1, #0
 801c798:	d1eb      	bne.n	801c772 <tcp_new_port+0x12>
 801c79a:	8038      	strh	r0, [r7, #0]
          return 0;
 801c79c:	4608      	mov	r0, r1
 801c79e:	e005      	b.n	801c7ac <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801c7a0:	42b4      	cmp	r4, r6
 801c7a2:	d002      	beq.n	801c7aa <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c7a4:	f854 3b04 	ldr.w	r3, [r4], #4
 801c7a8:	e7eb      	b.n	801c782 <tcp_new_port+0x22>
 801c7aa:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801c7ac:	bcf0      	pop	{r4, r5, r6, r7}
 801c7ae:	4770      	bx	lr
 801c7b0:	2000042c 	.word	0x2000042c
 801c7b4:	0804592c 	.word	0x0804592c
 801c7b8:	2002e440 	.word	0x2002e440
 801c7bc:	08045920 	.word	0x08045920

0801c7c0 <tcp_close_shutdown_fin>:
{
 801c7c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801c7c2:	4604      	mov	r4, r0
 801c7c4:	b310      	cbz	r0, 801c80c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801c7c6:	7d23      	ldrb	r3, [r4, #20]
 801c7c8:	2b04      	cmp	r3, #4
 801c7ca:	d005      	beq.n	801c7d8 <tcp_close_shutdown_fin+0x18>
 801c7cc:	2b07      	cmp	r3, #7
 801c7ce:	d00e      	beq.n	801c7ee <tcp_close_shutdown_fin+0x2e>
 801c7d0:	2b03      	cmp	r3, #3
 801c7d2:	d001      	beq.n	801c7d8 <tcp_close_shutdown_fin+0x18>
 801c7d4:	2000      	movs	r0, #0
}
 801c7d6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801c7d8:	4620      	mov	r0, r4
 801c7da:	f003 fd33 	bl	8020244 <tcp_send_fin>
      if (err == ERR_OK) {
 801c7de:	b950      	cbnz	r0, 801c7f6 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801c7e0:	2305      	movs	r3, #5
 801c7e2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f003 fe9d 	bl	8020524 <tcp_output>
 801c7ea:	2000      	movs	r0, #0
}
 801c7ec:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	f003 fd28 	bl	8020244 <tcp_send_fin>
      if (err == ERR_OK) {
 801c7f4:	b138      	cbz	r0, 801c806 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801c7f6:	1c43      	adds	r3, r0, #1
 801c7f8:	d1ed      	bne.n	801c7d6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801c7fa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801c7fc:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801c7fe:	f043 0308 	orr.w	r3, r3, #8
 801c802:	8363      	strh	r3, [r4, #26]
}
 801c804:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801c806:	2309      	movs	r3, #9
 801c808:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801c80a:	e7eb      	b.n	801c7e4 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801c80c:	4b03      	ldr	r3, [pc, #12]	; (801c81c <tcp_close_shutdown_fin+0x5c>)
 801c80e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801c812:	4903      	ldr	r1, [pc, #12]	; (801c820 <tcp_close_shutdown_fin+0x60>)
 801c814:	4803      	ldr	r0, [pc, #12]	; (801c824 <tcp_close_shutdown_fin+0x64>)
 801c816:	f009 fd9d 	bl	8026354 <iprintf>
 801c81a:	e7d4      	b.n	801c7c6 <tcp_close_shutdown_fin+0x6>
 801c81c:	08045238 	.word	0x08045238
 801c820:	08045268 	.word	0x08045268
 801c824:	0802b034 	.word	0x0802b034

0801c828 <tcp_init>:
{
 801c828:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c82a:	f009 fe37 	bl	802649c <rand>
 801c82e:	4b02      	ldr	r3, [pc, #8]	; (801c838 <tcp_init+0x10>)
 801c830:	4a02      	ldr	r2, [pc, #8]	; (801c83c <tcp_init+0x14>)
 801c832:	4303      	orrs	r3, r0
 801c834:	8013      	strh	r3, [r2, #0]
}
 801c836:	bd08      	pop	{r3, pc}
 801c838:	ffffc000 	.word	0xffffc000
 801c83c:	2000042c 	.word	0x2000042c

0801c840 <tcp_free>:
{
 801c840:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c842:	7d03      	ldrb	r3, [r0, #20]
{
 801c844:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c846:	2b01      	cmp	r3, #1
 801c848:	d005      	beq.n	801c856 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801c84a:	4621      	mov	r1, r4
 801c84c:	2002      	movs	r0, #2
}
 801c84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c852:	f7fe bf9d 	b.w	801b790 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c856:	4906      	ldr	r1, [pc, #24]	; (801c870 <tcp_free+0x30>)
 801c858:	22d4      	movs	r2, #212	; 0xd4
 801c85a:	4b06      	ldr	r3, [pc, #24]	; (801c874 <tcp_free+0x34>)
 801c85c:	4806      	ldr	r0, [pc, #24]	; (801c878 <tcp_free+0x38>)
 801c85e:	f009 fd79 	bl	8026354 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801c862:	4621      	mov	r1, r4
 801c864:	2002      	movs	r0, #2
}
 801c866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c86a:	f7fe bf91 	b.w	801b790 <memp_free>
 801c86e:	bf00      	nop
 801c870:	08045274 	.word	0x08045274
 801c874:	08045238 	.word	0x08045238
 801c878:	0802b034 	.word	0x0802b034

0801c87c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801c87c:	2900      	cmp	r1, #0
{
 801c87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801c880:	4b26      	ldr	r3, [pc, #152]	; (801c91c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801c882:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801c884:	bf14      	ite	ne
 801c886:	460e      	movne	r6, r1
 801c888:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c88a:	2800      	cmp	r0, #0
 801c88c:	d03c      	beq.n	801c908 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801c88e:	7d03      	ldrb	r3, [r0, #20]
 801c890:	4607      	mov	r7, r0
 801c892:	bb7b      	cbnz	r3, 801c8f4 <tcp_bind+0x78>
  if (port == 0) {
 801c894:	b31a      	cbz	r2, 801c8de <tcp_bind+0x62>
 801c896:	4922      	ldr	r1, [pc, #136]	; (801c920 <tcp_bind+0xa4>)
 801c898:	4b22      	ldr	r3, [pc, #136]	; (801c924 <tcp_bind+0xa8>)
 801c89a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	b913      	cbnz	r3, 801c8a8 <tcp_bind+0x2c>
 801c8a2:	e00e      	b.n	801c8c2 <tcp_bind+0x46>
 801c8a4:	68db      	ldr	r3, [r3, #12]
 801c8a6:	b163      	cbz	r3, 801c8c2 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801c8a8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801c8ac:	4594      	cmp	ip, r2
 801c8ae:	d1f9      	bne.n	801c8a4 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801c8b0:	681c      	ldr	r4, [r3, #0]
 801c8b2:	b11c      	cbz	r4, 801c8bc <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801c8b4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801c8b6:	b10d      	cbz	r5, 801c8bc <tcp_bind+0x40>
 801c8b8:	42ac      	cmp	r4, r5
 801c8ba:	d1f3      	bne.n	801c8a4 <tcp_bind+0x28>
              return ERR_USE;
 801c8bc:	f06f 0007 	mvn.w	r0, #7
}
 801c8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801c8c2:	4281      	cmp	r1, r0
 801c8c4:	d113      	bne.n	801c8ee <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801c8c6:	6833      	ldr	r3, [r6, #0]
 801c8c8:	b103      	cbz	r3, 801c8cc <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801c8ca:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801c8cc:	4b16      	ldr	r3, [pc, #88]	; (801c928 <tcp_bind+0xac>)
  pcb->local_port = port;
 801c8ce:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801c8d0:	681a      	ldr	r2, [r3, #0]
 801c8d2:	601f      	str	r7, [r3, #0]
 801c8d4:	60fa      	str	r2, [r7, #12]
 801c8d6:	f004 f951 	bl	8020b7c <tcp_timer_needed>
  return ERR_OK;
 801c8da:	2000      	movs	r0, #0
}
 801c8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801c8de:	f7ff ff3f 	bl	801c760 <tcp_new_port>
    if (port == 0) {
 801c8e2:	4602      	mov	r2, r0
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	d1ee      	bne.n	801c8c6 <tcp_bind+0x4a>
      return ERR_BUF;
 801c8e8:	f06f 0001 	mvn.w	r0, #1
}
 801c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801c8ee:	f851 3b04 	ldr.w	r3, [r1], #4
 801c8f2:	e7d4      	b.n	801c89e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801c8f4:	4b0d      	ldr	r3, [pc, #52]	; (801c92c <tcp_bind+0xb0>)
 801c8f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c8fa:	490d      	ldr	r1, [pc, #52]	; (801c930 <tcp_bind+0xb4>)
 801c8fc:	480d      	ldr	r0, [pc, #52]	; (801c934 <tcp_bind+0xb8>)
 801c8fe:	f009 fd29 	bl	8026354 <iprintf>
 801c902:	f06f 0005 	mvn.w	r0, #5
}
 801c906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c908:	4b08      	ldr	r3, [pc, #32]	; (801c92c <tcp_bind+0xb0>)
 801c90a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801c90e:	490a      	ldr	r1, [pc, #40]	; (801c938 <tcp_bind+0xbc>)
 801c910:	4808      	ldr	r0, [pc, #32]	; (801c934 <tcp_bind+0xb8>)
 801c912:	f009 fd1f 	bl	8026354 <iprintf>
 801c916:	f06f 000f 	mvn.w	r0, #15
}
 801c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c91c:	08046e50 	.word	0x08046e50
 801c920:	08045920 	.word	0x08045920
 801c924:	2002e440 	.word	0x2002e440
 801c928:	2002e43c 	.word	0x2002e43c
 801c92c:	08045238 	.word	0x08045238
 801c930:	080452a0 	.word	0x080452a0
 801c934:	0802b034 	.word	0x0802b034
 801c938:	08045288 	.word	0x08045288

0801c93c <tcp_listen_with_backlog_and_err>:
{
 801c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801c93e:	4604      	mov	r4, r0
{
 801c940:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801c942:	2800      	cmp	r0, #0
 801c944:	d060      	beq.n	801ca08 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801c946:	7d05      	ldrb	r5, [r0, #20]
 801c948:	2d00      	cmp	r5, #0
 801c94a:	d14a      	bne.n	801c9e2 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801c94c:	f240 3272 	movw	r2, #882	; 0x372
 801c950:	4933      	ldr	r1, [pc, #204]	; (801ca20 <tcp_listen_with_backlog_and_err+0xe4>)
 801c952:	2003      	movs	r0, #3
 801c954:	f7fe fee6 	bl	801b724 <memp_malloc_fn>
  if (lpcb == NULL) {
 801c958:	4606      	mov	r6, r0
 801c95a:	2800      	cmp	r0, #0
 801c95c:	d051      	beq.n	801ca02 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801c95e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801c960:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801c962:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801c964:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801c966:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801c968:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801c96a:	7d62      	ldrb	r2, [r4, #21]
 801c96c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801c96e:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801c970:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801c972:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801c974:	7ae2      	ldrb	r2, [r4, #11]
 801c976:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801c978:	7aa2      	ldrb	r2, [r4, #10]
 801c97a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801c97c:	6822      	ldr	r2, [r4, #0]
 801c97e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801c980:	b99b      	cbnz	r3, 801c9aa <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c982:	7d23      	ldrb	r3, [r4, #20]
 801c984:	2b01      	cmp	r3, #1
 801c986:	d020      	beq.n	801c9ca <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801c988:	4621      	mov	r1, r4
 801c98a:	2002      	movs	r0, #2
 801c98c:	f7fe ff00 	bl	801b790 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801c990:	4b24      	ldr	r3, [pc, #144]	; (801ca24 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801c992:	4925      	ldr	r1, [pc, #148]	; (801ca28 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801c994:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801c996:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801c998:	60f2      	str	r2, [r6, #12]
 801c99a:	601e      	str	r6, [r3, #0]
 801c99c:	f004 f8ee 	bl	8020b7c <tcp_timer_needed>
  res = ERR_OK;
 801c9a0:	2300      	movs	r3, #0
  if (err != NULL) {
 801c9a2:	b107      	cbz	r7, 801c9a6 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801c9a4:	703b      	strb	r3, [r7, #0]
}
 801c9a6:	4630      	mov	r0, r6
 801c9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801c9aa:	4a20      	ldr	r2, [pc, #128]	; (801ca2c <tcp_listen_with_backlog_and_err+0xf0>)
 801c9ac:	6813      	ldr	r3, [r2, #0]
 801c9ae:	42a3      	cmp	r3, r4
 801c9b0:	d012      	beq.n	801c9d8 <tcp_listen_with_backlog_and_err+0x9c>
 801c9b2:	b12b      	cbz	r3, 801c9c0 <tcp_listen_with_backlog_and_err+0x84>
 801c9b4:	68d9      	ldr	r1, [r3, #12]
 801c9b6:	42a1      	cmp	r1, r4
 801c9b8:	d01e      	beq.n	801c9f8 <tcp_listen_with_backlog_and_err+0xbc>
 801c9ba:	460b      	mov	r3, r1
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d1f9      	bne.n	801c9b4 <tcp_listen_with_backlog_and_err+0x78>
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c9c4:	7d23      	ldrb	r3, [r4, #20]
 801c9c6:	2b01      	cmp	r3, #1
 801c9c8:	d1de      	bne.n	801c988 <tcp_listen_with_backlog_and_err+0x4c>
 801c9ca:	4b15      	ldr	r3, [pc, #84]	; (801ca20 <tcp_listen_with_backlog_and_err+0xe4>)
 801c9cc:	22d4      	movs	r2, #212	; 0xd4
 801c9ce:	4918      	ldr	r1, [pc, #96]	; (801ca30 <tcp_listen_with_backlog_and_err+0xf4>)
 801c9d0:	4818      	ldr	r0, [pc, #96]	; (801ca34 <tcp_listen_with_backlog_and_err+0xf8>)
 801c9d2:	f009 fcbf 	bl	8026354 <iprintf>
 801c9d6:	e7d7      	b.n	801c988 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801c9d8:	68e3      	ldr	r3, [r4, #12]
 801c9da:	6013      	str	r3, [r2, #0]
 801c9dc:	2300      	movs	r3, #0
 801c9de:	60e3      	str	r3, [r4, #12]
 801c9e0:	e7f0      	b.n	801c9c4 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801c9e2:	4b0f      	ldr	r3, [pc, #60]	; (801ca20 <tcp_listen_with_backlog_and_err+0xe4>)
 801c9e4:	f240 325a 	movw	r2, #858	; 0x35a
 801c9e8:	4913      	ldr	r1, [pc, #76]	; (801ca38 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801c9ea:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801c9ec:	4811      	ldr	r0, [pc, #68]	; (801ca34 <tcp_listen_with_backlog_and_err+0xf8>)
 801c9ee:	f009 fcb1 	bl	8026354 <iprintf>
 801c9f2:	f06f 030e 	mvn.w	r3, #14
 801c9f6:	e7d4      	b.n	801c9a2 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801c9f8:	68e2      	ldr	r2, [r4, #12]
 801c9fa:	60da      	str	r2, [r3, #12]
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	60e3      	str	r3, [r4, #12]
 801ca00:	e7e0      	b.n	801c9c4 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801ca02:	f04f 33ff 	mov.w	r3, #4294967295
 801ca06:	e7cc      	b.n	801c9a2 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ca08:	4b05      	ldr	r3, [pc, #20]	; (801ca20 <tcp_listen_with_backlog_and_err+0xe4>)
 801ca0a:	f240 3259 	movw	r2, #857	; 0x359
 801ca0e:	490b      	ldr	r1, [pc, #44]	; (801ca3c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ca10:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ca12:	4808      	ldr	r0, [pc, #32]	; (801ca34 <tcp_listen_with_backlog_and_err+0xf8>)
 801ca14:	f009 fc9e 	bl	8026354 <iprintf>
 801ca18:	f06f 030f 	mvn.w	r3, #15
 801ca1c:	e7c1      	b.n	801c9a2 <tcp_listen_with_backlog_and_err+0x66>
 801ca1e:	bf00      	nop
 801ca20:	08045238 	.word	0x08045238
 801ca24:	2002e440 	.word	0x2002e440
 801ca28:	0801d6d1 	.word	0x0801d6d1
 801ca2c:	2002e43c 	.word	0x2002e43c
 801ca30:	08045274 	.word	0x08045274
 801ca34:	0802b034 	.word	0x0802b034
 801ca38:	080452f8 	.word	0x080452f8
 801ca3c:	080452c8 	.word	0x080452c8

0801ca40 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801ca40:	2200      	movs	r2, #0
 801ca42:	f7ff bf7b 	b.w	801c93c <tcp_listen_with_backlog_and_err>
 801ca46:	bf00      	nop

0801ca48 <tcp_update_rcv_ann_wnd>:
{
 801ca48:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	b1c0      	cbz	r0, 801ca80 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ca4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ca50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ca52:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ca56:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ca58:	1ad0      	subs	r0, r2, r3
 801ca5a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801ca5e:	4428      	add	r0, r5
 801ca60:	bf94      	ite	ls
 801ca62:	eba0 010c 	subls.w	r1, r0, ip
 801ca66:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801ca6a:	2900      	cmp	r1, #0
 801ca6c:	db01      	blt.n	801ca72 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801ca6e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801ca70:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801ca72:	1aea      	subs	r2, r5, r3
 801ca74:	2a00      	cmp	r2, #0
 801ca76:	dd0b      	ble.n	801ca90 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801ca78:	2300      	movs	r3, #0
    return 0;
 801ca7a:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801ca7c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801ca7e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ca80:	4b0b      	ldr	r3, [pc, #44]	; (801cab0 <tcp_update_rcv_ann_wnd+0x68>)
 801ca82:	f240 32a6 	movw	r2, #934	; 0x3a6
 801ca86:	490b      	ldr	r1, [pc, #44]	; (801cab4 <tcp_update_rcv_ann_wnd+0x6c>)
 801ca88:	480b      	ldr	r0, [pc, #44]	; (801cab8 <tcp_update_rcv_ann_wnd+0x70>)
 801ca8a:	f009 fc63 	bl	8026354 <iprintf>
 801ca8e:	e7de      	b.n	801ca4e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801ca90:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ca92:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801ca96:	d202      	bcs.n	801ca9e <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801ca98:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801ca9a:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801ca9c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ca9e:	4b04      	ldr	r3, [pc, #16]	; (801cab0 <tcp_update_rcv_ann_wnd+0x68>)
 801caa0:	f240 32b6 	movw	r2, #950	; 0x3b6
 801caa4:	4905      	ldr	r1, [pc, #20]	; (801cabc <tcp_update_rcv_ann_wnd+0x74>)
 801caa6:	4804      	ldr	r0, [pc, #16]	; (801cab8 <tcp_update_rcv_ann_wnd+0x70>)
 801caa8:	f009 fc54 	bl	8026354 <iprintf>
 801caac:	e7f4      	b.n	801ca98 <tcp_update_rcv_ann_wnd+0x50>
 801caae:	bf00      	nop
 801cab0:	08045238 	.word	0x08045238
 801cab4:	08045330 	.word	0x08045330
 801cab8:	0802b034 	.word	0x0802b034
 801cabc:	08045354 	.word	0x08045354

0801cac0 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801cac0:	b340      	cbz	r0, 801cb14 <tcp_recved+0x54>
{
 801cac2:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801cac4:	7d03      	ldrb	r3, [r0, #20]
 801cac6:	4605      	mov	r5, r0
 801cac8:	460c      	mov	r4, r1
 801caca:	2b01      	cmp	r3, #1
 801cacc:	d01a      	beq.n	801cb04 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801cace:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801cad0:	1919      	adds	r1, r3, r4
 801cad2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801cad4:	428b      	cmp	r3, r1
 801cad6:	d802      	bhi.n	801cade <tcp_recved+0x1e>
 801cad8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801cadc:	d901      	bls.n	801cae2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801cade:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801cae2:	4628      	mov	r0, r5
 801cae4:	8529      	strh	r1, [r5, #40]	; 0x28
 801cae6:	f7ff ffaf 	bl	801ca48 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801caea:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801caee:	d200      	bcs.n	801caf2 <tcp_recved+0x32>
}
 801caf0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801caf2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801caf4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801caf6:	f043 0302 	orr.w	r3, r3, #2
 801cafa:	836b      	strh	r3, [r5, #26]
}
 801cafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801cb00:	f003 bd10 	b.w	8020524 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801cb04:	4b07      	ldr	r3, [pc, #28]	; (801cb24 <tcp_recved+0x64>)
 801cb06:	f240 32d2 	movw	r2, #978	; 0x3d2
 801cb0a:	4907      	ldr	r1, [pc, #28]	; (801cb28 <tcp_recved+0x68>)
 801cb0c:	4807      	ldr	r0, [pc, #28]	; (801cb2c <tcp_recved+0x6c>)
 801cb0e:	f009 fc21 	bl	8026354 <iprintf>
 801cb12:	e7dc      	b.n	801cace <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801cb14:	4b03      	ldr	r3, [pc, #12]	; (801cb24 <tcp_recved+0x64>)
 801cb16:	f240 32cf 	movw	r2, #975	; 0x3cf
 801cb1a:	4905      	ldr	r1, [pc, #20]	; (801cb30 <tcp_recved+0x70>)
 801cb1c:	4803      	ldr	r0, [pc, #12]	; (801cb2c <tcp_recved+0x6c>)
 801cb1e:	f009 bc19 	b.w	8026354 <iprintf>
 801cb22:	bf00      	nop
 801cb24:	08045238 	.word	0x08045238
 801cb28:	08045388 	.word	0x08045388
 801cb2c:	0802b034 	.word	0x0802b034
 801cb30:	08045370 	.word	0x08045370

0801cb34 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb36:	2800      	cmp	r0, #0
 801cb38:	f000 808c 	beq.w	801cc54 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cb3c:	2900      	cmp	r1, #0
 801cb3e:	d07f      	beq.n	801cc40 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cb40:	461e      	mov	r6, r3
 801cb42:	7d03      	ldrb	r3, [r0, #20]
 801cb44:	4604      	mov	r4, r0
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d16a      	bne.n	801cc20 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cb4a:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cb4c:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801cb4e:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cb50:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cb52:	2800      	cmp	r0, #0
 801cb54:	d049      	beq.n	801cbea <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801cb56:	f7ff f80d 	bl	801bb74 <netif_get_by_index>
 801cb5a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801cb5c:	2d00      	cmp	r5, #0
 801cb5e:	d06c      	beq.n	801cc3a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cb60:	6823      	ldr	r3, [r4, #0]
 801cb62:	b90b      	cbnz	r3, 801cb68 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cb64:	686b      	ldr	r3, [r5, #4]
 801cb66:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801cb68:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801cb6a:	b927      	cbnz	r7, 801cb76 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801cb6c:	f7ff fdf8 	bl	801c760 <tcp_new_port>
 801cb70:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801cb72:	2800      	cmp	r0, #0
 801cb74:	d05e      	beq.n	801cc34 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cb76:	4b3c      	ldr	r3, [pc, #240]	; (801cc68 <tcp_connect+0x134>)
 801cb78:	4a3c      	ldr	r2, [pc, #240]	; (801cc6c <tcp_connect+0x138>)
 801cb7a:	6811      	ldr	r1, [r2, #0]
 801cb7c:	681a      	ldr	r2, [r3, #0]
 801cb7e:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801cb80:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801cb84:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801cb86:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801cb88:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cb8a:	4b39      	ldr	r3, [pc, #228]	; (801cc70 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801cb8c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cb8e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801cb90:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801cb92:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801cb96:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cb9e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d037      	beq.n	801cc14 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cba4:	2b28      	cmp	r3, #40	; 0x28
 801cba6:	d907      	bls.n	801cbb8 <tcp_connect+0x84>
 801cba8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cbac:	b292      	uxth	r2, r2
 801cbae:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801cbb2:	bf28      	it	cs
 801cbb4:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801cbb8:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cbba:	2102      	movs	r1, #2
 801cbbc:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801cbbe:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801cbc0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801cbc4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cbc8:	f003 fa90 	bl	80200ec <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801cbcc:	4605      	mov	r5, r0
 801cbce:	b9f8      	cbnz	r0, 801cc10 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801cbd0:	2302      	movs	r3, #2
 801cbd2:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801cbd4:	b187      	cbz	r7, 801cbf8 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cbd6:	4a27      	ldr	r2, [pc, #156]	; (801cc74 <tcp_connect+0x140>)
 801cbd8:	6813      	ldr	r3, [r2, #0]
 801cbda:	42a3      	cmp	r3, r4
 801cbdc:	d01d      	beq.n	801cc1a <tcp_connect+0xe6>
 801cbde:	b15b      	cbz	r3, 801cbf8 <tcp_connect+0xc4>
 801cbe0:	68da      	ldr	r2, [r3, #12]
 801cbe2:	42a2      	cmp	r2, r4
 801cbe4:	d006      	beq.n	801cbf4 <tcp_connect+0xc0>
 801cbe6:	4613      	mov	r3, r2
 801cbe8:	e7f9      	b.n	801cbde <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801cbea:	1d20      	adds	r0, r4, #4
 801cbec:	f006 fee4 	bl	80239b8 <ip4_route>
 801cbf0:	4605      	mov	r5, r0
 801cbf2:	e7b3      	b.n	801cb5c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cbf4:	68e2      	ldr	r2, [r4, #12]
 801cbf6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801cbf8:	4b1f      	ldr	r3, [pc, #124]	; (801cc78 <tcp_connect+0x144>)
 801cbfa:	681a      	ldr	r2, [r3, #0]
 801cbfc:	601c      	str	r4, [r3, #0]
 801cbfe:	60e2      	str	r2, [r4, #12]
 801cc00:	f003 ffbc 	bl	8020b7c <tcp_timer_needed>
 801cc04:	4b1d      	ldr	r3, [pc, #116]	; (801cc7c <tcp_connect+0x148>)
 801cc06:	2201      	movs	r2, #1
    tcp_output(pcb);
 801cc08:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801cc0a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801cc0c:	f003 fc8a 	bl	8020524 <tcp_output>
}
 801cc10:	4628      	mov	r0, r5
 801cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc14:	f44f 7206 	mov.w	r2, #536	; 0x218
 801cc18:	e7ce      	b.n	801cbb8 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cc1a:	68e3      	ldr	r3, [r4, #12]
 801cc1c:	6013      	str	r3, [r2, #0]
 801cc1e:	e7eb      	b.n	801cbf8 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cc20:	4b17      	ldr	r3, [pc, #92]	; (801cc80 <tcp_connect+0x14c>)
 801cc22:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801cc26:	4917      	ldr	r1, [pc, #92]	; (801cc84 <tcp_connect+0x150>)
 801cc28:	f06f 0509 	mvn.w	r5, #9
 801cc2c:	4816      	ldr	r0, [pc, #88]	; (801cc88 <tcp_connect+0x154>)
 801cc2e:	f009 fb91 	bl	8026354 <iprintf>
 801cc32:	e7ed      	b.n	801cc10 <tcp_connect+0xdc>
      return ERR_BUF;
 801cc34:	f06f 0501 	mvn.w	r5, #1
 801cc38:	e7ea      	b.n	801cc10 <tcp_connect+0xdc>
    return ERR_RTE;
 801cc3a:	f06f 0503 	mvn.w	r5, #3
 801cc3e:	e7e7      	b.n	801cc10 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cc40:	4b0f      	ldr	r3, [pc, #60]	; (801cc80 <tcp_connect+0x14c>)
 801cc42:	f240 4236 	movw	r2, #1078	; 0x436
 801cc46:	4911      	ldr	r1, [pc, #68]	; (801cc8c <tcp_connect+0x158>)
 801cc48:	f06f 050f 	mvn.w	r5, #15
 801cc4c:	480e      	ldr	r0, [pc, #56]	; (801cc88 <tcp_connect+0x154>)
 801cc4e:	f009 fb81 	bl	8026354 <iprintf>
 801cc52:	e7dd      	b.n	801cc10 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc54:	4b0a      	ldr	r3, [pc, #40]	; (801cc80 <tcp_connect+0x14c>)
 801cc56:	f240 4235 	movw	r2, #1077	; 0x435
 801cc5a:	490d      	ldr	r1, [pc, #52]	; (801cc90 <tcp_connect+0x15c>)
 801cc5c:	f06f 050f 	mvn.w	r5, #15
 801cc60:	4809      	ldr	r0, [pc, #36]	; (801cc88 <tcp_connect+0x154>)
 801cc62:	f009 fb77 	bl	8026354 <iprintf>
 801cc66:	e7d3      	b.n	801cc10 <tcp_connect+0xdc>
 801cc68:	20000428 	.word	0x20000428
 801cc6c:	2002e444 	.word	0x2002e444
 801cc70:	08600860 	.word	0x08600860
 801cc74:	2002e43c 	.word	0x2002e43c
 801cc78:	2002e434 	.word	0x2002e434
 801cc7c:	2002e438 	.word	0x2002e438
 801cc80:	08045238 	.word	0x08045238
 801cc84:	080453e8 	.word	0x080453e8
 801cc88:	0802b034 	.word	0x0802b034
 801cc8c:	080453cc 	.word	0x080453cc
 801cc90:	080453b0 	.word	0x080453b0

0801cc94 <tcp_segs_free>:
  while (seg != NULL) {
 801cc94:	b170      	cbz	r0, 801ccb4 <tcp_segs_free+0x20>
{
 801cc96:	b538      	push	{r3, r4, r5, lr}
 801cc98:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801cc9a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801cc9c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801cc9e:	6868      	ldr	r0, [r5, #4]
 801cca0:	b108      	cbz	r0, 801cca6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801cca2:	f7ff fa8d 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801cca6:	4629      	mov	r1, r5
 801cca8:	2004      	movs	r0, #4
 801ccaa:	f7fe fd71 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801ccae:	2c00      	cmp	r4, #0
 801ccb0:	d1f3      	bne.n	801cc9a <tcp_segs_free+0x6>
}
 801ccb2:	bd38      	pop	{r3, r4, r5, pc}
 801ccb4:	4770      	bx	lr
 801ccb6:	bf00      	nop

0801ccb8 <tcp_seg_free>:
  if (seg != NULL) {
 801ccb8:	b158      	cbz	r0, 801ccd2 <tcp_seg_free+0x1a>
{
 801ccba:	b510      	push	{r4, lr}
 801ccbc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801ccbe:	6840      	ldr	r0, [r0, #4]
 801ccc0:	b108      	cbz	r0, 801ccc6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801ccc2:	f7ff fa7d 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ccc6:	4621      	mov	r1, r4
 801ccc8:	2004      	movs	r0, #4
}
 801ccca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801ccce:	f7fe bd5f 	b.w	801b790 <memp_free>
 801ccd2:	4770      	bx	lr

0801ccd4 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801ccd4:	b108      	cbz	r0, 801ccda <tcp_setprio+0x6>
  pcb->prio = prio;
 801ccd6:	7541      	strb	r1, [r0, #21]
}
 801ccd8:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801ccda:	4b03      	ldr	r3, [pc, #12]	; (801cce8 <tcp_setprio+0x14>)
 801ccdc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801cce0:	4902      	ldr	r1, [pc, #8]	; (801ccec <tcp_setprio+0x18>)
 801cce2:	4803      	ldr	r0, [pc, #12]	; (801ccf0 <tcp_setprio+0x1c>)
 801cce4:	f009 bb36 	b.w	8026354 <iprintf>
 801cce8:	08045238 	.word	0x08045238
 801ccec:	08045418 	.word	0x08045418
 801ccf0:	0802b034 	.word	0x0802b034

0801ccf4 <tcp_seg_copy>:
{
 801ccf4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801ccf6:	4605      	mov	r5, r0
 801ccf8:	b1a0      	cbz	r0, 801cd24 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801ccfa:	f240 6284 	movw	r2, #1668	; 0x684
 801ccfe:	490d      	ldr	r1, [pc, #52]	; (801cd34 <tcp_seg_copy+0x40>)
 801cd00:	2004      	movs	r0, #4
 801cd02:	f7fe fd0f 	bl	801b724 <memp_malloc_fn>
  if (cseg == NULL) {
 801cd06:	4604      	mov	r4, r0
 801cd08:	b150      	cbz	r0, 801cd20 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801cd0a:	6868      	ldr	r0, [r5, #4]
 801cd0c:	6829      	ldr	r1, [r5, #0]
 801cd0e:	68aa      	ldr	r2, [r5, #8]
 801cd10:	68eb      	ldr	r3, [r5, #12]
 801cd12:	6060      	str	r0, [r4, #4]
 801cd14:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801cd16:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801cd18:	60a2      	str	r2, [r4, #8]
 801cd1a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801cd1c:	f7ff fa6e 	bl	801c1fc <pbuf_ref>
}
 801cd20:	4620      	mov	r0, r4
 801cd22:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801cd24:	4b03      	ldr	r3, [pc, #12]	; (801cd34 <tcp_seg_copy+0x40>)
 801cd26:	f240 6282 	movw	r2, #1666	; 0x682
 801cd2a:	4903      	ldr	r1, [pc, #12]	; (801cd38 <tcp_seg_copy+0x44>)
 801cd2c:	4803      	ldr	r0, [pc, #12]	; (801cd3c <tcp_seg_copy+0x48>)
 801cd2e:	f009 fb11 	bl	8026354 <iprintf>
 801cd32:	e7e2      	b.n	801ccfa <tcp_seg_copy+0x6>
 801cd34:	08045238 	.word	0x08045238
 801cd38:	08045434 	.word	0x08045434
 801cd3c:	0802b034 	.word	0x0802b034

0801cd40 <tcp_arg>:
  if (pcb != NULL) {
 801cd40:	b100      	cbz	r0, 801cd44 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801cd42:	6101      	str	r1, [r0, #16]
}
 801cd44:	4770      	bx	lr
 801cd46:	bf00      	nop

0801cd48 <tcp_recv>:
  if (pcb != NULL) {
 801cd48:	b140      	cbz	r0, 801cd5c <tcp_recv+0x14>
{
 801cd4a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801cd4c:	7d03      	ldrb	r3, [r0, #20]
 801cd4e:	4604      	mov	r4, r0
 801cd50:	460d      	mov	r5, r1
 801cd52:	2b01      	cmp	r3, #1
 801cd54:	d003      	beq.n	801cd5e <tcp_recv+0x16>
    pcb->recv = recv;
 801cd56:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801cd5a:	bd38      	pop	{r3, r4, r5, pc}
 801cd5c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801cd5e:	4b05      	ldr	r3, [pc, #20]	; (801cd74 <tcp_recv+0x2c>)
 801cd60:	f240 72df 	movw	r2, #2015	; 0x7df
 801cd64:	4904      	ldr	r1, [pc, #16]	; (801cd78 <tcp_recv+0x30>)
 801cd66:	4805      	ldr	r0, [pc, #20]	; (801cd7c <tcp_recv+0x34>)
 801cd68:	f009 faf4 	bl	8026354 <iprintf>
    pcb->recv = recv;
 801cd6c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801cd70:	bd38      	pop	{r3, r4, r5, pc}
 801cd72:	bf00      	nop
 801cd74:	08045238 	.word	0x08045238
 801cd78:	08045450 	.word	0x08045450
 801cd7c:	0802b034 	.word	0x0802b034

0801cd80 <tcp_sent>:
  if (pcb != NULL) {
 801cd80:	b140      	cbz	r0, 801cd94 <tcp_sent+0x14>
{
 801cd82:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801cd84:	7d03      	ldrb	r3, [r0, #20]
 801cd86:	4604      	mov	r4, r0
 801cd88:	460d      	mov	r5, r1
 801cd8a:	2b01      	cmp	r3, #1
 801cd8c:	d003      	beq.n	801cd96 <tcp_sent+0x16>
    pcb->sent = sent;
 801cd8e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801cd92:	bd38      	pop	{r3, r4, r5, pc}
 801cd94:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801cd96:	4b05      	ldr	r3, [pc, #20]	; (801cdac <tcp_sent+0x2c>)
 801cd98:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801cd9c:	4904      	ldr	r1, [pc, #16]	; (801cdb0 <tcp_sent+0x30>)
 801cd9e:	4805      	ldr	r0, [pc, #20]	; (801cdb4 <tcp_sent+0x34>)
 801cda0:	f009 fad8 	bl	8026354 <iprintf>
    pcb->sent = sent;
 801cda4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801cda8:	bd38      	pop	{r3, r4, r5, pc}
 801cdaa:	bf00      	nop
 801cdac:	08045238 	.word	0x08045238
 801cdb0:	08045478 	.word	0x08045478
 801cdb4:	0802b034 	.word	0x0802b034

0801cdb8 <tcp_err>:
  if (pcb != NULL) {
 801cdb8:	b140      	cbz	r0, 801cdcc <tcp_err+0x14>
{
 801cdba:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801cdbc:	7d03      	ldrb	r3, [r0, #20]
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	460d      	mov	r5, r1
 801cdc2:	2b01      	cmp	r3, #1
 801cdc4:	d003      	beq.n	801cdce <tcp_err+0x16>
    pcb->errf = err;
 801cdc6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801cdca:	bd38      	pop	{r3, r4, r5, pc}
 801cdcc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801cdce:	4b05      	ldr	r3, [pc, #20]	; (801cde4 <tcp_err+0x2c>)
 801cdd0:	f640 020d 	movw	r2, #2061	; 0x80d
 801cdd4:	4904      	ldr	r1, [pc, #16]	; (801cde8 <tcp_err+0x30>)
 801cdd6:	4805      	ldr	r0, [pc, #20]	; (801cdec <tcp_err+0x34>)
 801cdd8:	f009 fabc 	bl	8026354 <iprintf>
    pcb->errf = err;
 801cddc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801cde0:	bd38      	pop	{r3, r4, r5, pc}
 801cde2:	bf00      	nop
 801cde4:	08045238 	.word	0x08045238
 801cde8:	080454a0 	.word	0x080454a0
 801cdec:	0802b034 	.word	0x0802b034

0801cdf0 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801cdf0:	b118      	cbz	r0, 801cdfa <tcp_accept+0xa>
 801cdf2:	7d03      	ldrb	r3, [r0, #20]
 801cdf4:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801cdf6:	bf08      	it	eq
 801cdf8:	6181      	streq	r1, [r0, #24]
}
 801cdfa:	4770      	bx	lr

0801cdfc <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801cdfc:	b1a8      	cbz	r0, 801ce2a <tcp_poll+0x2e>
{
 801cdfe:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ce00:	7d03      	ldrb	r3, [r0, #20]
 801ce02:	460e      	mov	r6, r1
 801ce04:	4604      	mov	r4, r0
 801ce06:	4615      	mov	r5, r2
 801ce08:	2b01      	cmp	r3, #1
 801ce0a:	d003      	beq.n	801ce14 <tcp_poll+0x18>
  pcb->poll = poll;
 801ce0c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801ce10:	7765      	strb	r5, [r4, #29]
}
 801ce12:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ce14:	4b08      	ldr	r3, [pc, #32]	; (801ce38 <tcp_poll+0x3c>)
 801ce16:	f640 023e 	movw	r2, #2110	; 0x83e
 801ce1a:	4908      	ldr	r1, [pc, #32]	; (801ce3c <tcp_poll+0x40>)
 801ce1c:	4808      	ldr	r0, [pc, #32]	; (801ce40 <tcp_poll+0x44>)
 801ce1e:	f009 fa99 	bl	8026354 <iprintf>
  pcb->poll = poll;
 801ce22:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801ce26:	7765      	strb	r5, [r4, #29]
}
 801ce28:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ce2a:	4b03      	ldr	r3, [pc, #12]	; (801ce38 <tcp_poll+0x3c>)
 801ce2c:	f640 023d 	movw	r2, #2109	; 0x83d
 801ce30:	4904      	ldr	r1, [pc, #16]	; (801ce44 <tcp_poll+0x48>)
 801ce32:	4803      	ldr	r0, [pc, #12]	; (801ce40 <tcp_poll+0x44>)
 801ce34:	f009 ba8e 	b.w	8026354 <iprintf>
 801ce38:	08045238 	.word	0x08045238
 801ce3c:	080454e0 	.word	0x080454e0
 801ce40:	0802b034 	.word	0x0802b034
 801ce44:	080454c8 	.word	0x080454c8

0801ce48 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ce48:	2800      	cmp	r0, #0
 801ce4a:	d041      	beq.n	801ced0 <tcp_pcb_purge+0x88>
{
 801ce4c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801ce4e:	7d03      	ldrb	r3, [r0, #20]
 801ce50:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801ce52:	2b0a      	cmp	r3, #10
 801ce54:	d001      	beq.n	801ce5a <tcp_pcb_purge+0x12>
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	d800      	bhi.n	801ce5c <tcp_pcb_purge+0x14>
}
 801ce5a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801ce5c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801ce5e:	b118      	cbz	r0, 801ce68 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801ce60:	f7ff f9ae 	bl	801c1c0 <pbuf_free>
      pcb->refused_data = NULL;
 801ce64:	2300      	movs	r3, #0
 801ce66:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801ce68:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801ce6a:	b164      	cbz	r4, 801ce86 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801ce6c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ce6e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ce70:	6870      	ldr	r0, [r6, #4]
 801ce72:	b108      	cbz	r0, 801ce78 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801ce74:	f7ff f9a4 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ce78:	4631      	mov	r1, r6
 801ce7a:	2004      	movs	r0, #4
 801ce7c:	f7fe fc88 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801ce80:	2c00      	cmp	r4, #0
 801ce82:	d1f3      	bne.n	801ce6c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801ce84:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801ce86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801ce8a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801ce8c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801ce8e:	b15c      	cbz	r4, 801cea8 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801ce90:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ce92:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ce94:	6870      	ldr	r0, [r6, #4]
 801ce96:	b108      	cbz	r0, 801ce9c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801ce98:	f7ff f992 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ce9c:	4631      	mov	r1, r6
 801ce9e:	2004      	movs	r0, #4
 801cea0:	f7fe fc76 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801cea4:	2c00      	cmp	r4, #0
 801cea6:	d1f3      	bne.n	801ce90 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801cea8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801ceaa:	b15c      	cbz	r4, 801cec4 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801ceac:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ceae:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ceb0:	6870      	ldr	r0, [r6, #4]
 801ceb2:	b108      	cbz	r0, 801ceb8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801ceb4:	f7ff f984 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ceb8:	4631      	mov	r1, r6
 801ceba:	2004      	movs	r0, #4
 801cebc:	f7fe fc68 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801cec0:	2c00      	cmp	r4, #0
 801cec2:	d1f3      	bne.n	801ceac <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801cec4:	2300      	movs	r3, #0
 801cec6:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801ceca:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801cece:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ced0:	4b03      	ldr	r3, [pc, #12]	; (801cee0 <tcp_pcb_purge+0x98>)
 801ced2:	f640 0251 	movw	r2, #2129	; 0x851
 801ced6:	4903      	ldr	r1, [pc, #12]	; (801cee4 <tcp_pcb_purge+0x9c>)
 801ced8:	4803      	ldr	r0, [pc, #12]	; (801cee8 <tcp_pcb_purge+0xa0>)
 801ceda:	f009 ba3b 	b.w	8026354 <iprintf>
 801cede:	bf00      	nop
 801cee0:	08045238 	.word	0x08045238
 801cee4:	08045500 	.word	0x08045500
 801cee8:	0802b034 	.word	0x0802b034

0801ceec <tcp_slowtmr>:
{
 801ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801cef0:	4da9      	ldr	r5, [pc, #676]	; (801d198 <tcp_slowtmr+0x2ac>)
{
 801cef2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801cef4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801d1c4 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801cef8:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801cefa:	4fa8      	ldr	r7, [pc, #672]	; (801d19c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801cefc:	3301      	adds	r3, #1
 801cefe:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801cf00:	f89b 3000 	ldrb.w	r3, [fp]
 801cf04:	3301      	adds	r3, #1
 801cf06:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801cf0a:	4ba5      	ldr	r3, [pc, #660]	; (801d1a0 <tcp_slowtmr+0x2b4>)
 801cf0c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801cf0e:	2c00      	cmp	r4, #0
 801cf10:	f000 808a 	beq.w	801d028 <tcp_slowtmr+0x13c>
  prev = NULL;
 801cf14:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801cf16:	46b1      	mov	r9, r6
 801cf18:	7d23      	ldrb	r3, [r4, #20]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	f000 80fc 	beq.w	801d118 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801cf20:	2b01      	cmp	r3, #1
 801cf22:	f000 8104 	beq.w	801d12e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801cf26:	2b0a      	cmp	r3, #10
 801cf28:	f000 810c 	beq.w	801d144 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801cf2c:	f89b 2000 	ldrb.w	r2, [fp]
 801cf30:	7fa3      	ldrb	r3, [r4, #30]
 801cf32:	4293      	cmp	r3, r2
 801cf34:	f000 8113 	beq.w	801d15e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801cf38:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801cf3a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801cf3c:	2b02      	cmp	r3, #2
 801cf3e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801cf42:	f000 8112 	beq.w	801d16a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801cf46:	2a0b      	cmp	r2, #11
 801cf48:	f240 80cb 	bls.w	801d0e2 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801cf4c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801cf50:	2b06      	cmp	r3, #6
 801cf52:	f000 80b7 	beq.w	801d0c4 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801cf56:	f894 a009 	ldrb.w	sl, [r4, #9]
 801cf5a:	f01a 0a08 	ands.w	sl, sl, #8
 801cf5e:	d01d      	beq.n	801cf9c <tcp_slowtmr+0xb0>
 801cf60:	2b04      	cmp	r3, #4
 801cf62:	d007      	beq.n	801cf74 <tcp_slowtmr+0x88>
 801cf64:	f1a3 0307 	sub.w	r3, r3, #7
 801cf68:	fab3 f383 	clz	r3, r3
 801cf6c:	095b      	lsrs	r3, r3, #5
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	f000 80b4 	beq.w	801d0dc <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801cf74:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801cf78:	4b8a      	ldr	r3, [pc, #552]	; (801d1a4 <tcp_slowtmr+0x2b8>)
 801cf7a:	488b      	ldr	r0, [pc, #556]	; (801d1a8 <tcp_slowtmr+0x2bc>)
 801cf7c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cf7e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801cf80:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cf84:	6a20      	ldr	r0, [r4, #32]
 801cf86:	1a12      	subs	r2, r2, r0
 801cf88:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801cf8c:	f240 8160 	bls.w	801d250 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801cf90:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801cf94:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801cf98:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801cf9c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801cf9e:	b156      	cbz	r6, 801cfb6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801cfa0:	682b      	ldr	r3, [r5, #0]
 801cfa2:	6a22      	ldr	r2, [r4, #32]
 801cfa4:	1a9a      	subs	r2, r3, r2
 801cfa6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801cfaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801cfae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801cfb2:	f080 80e1 	bcs.w	801d178 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801cfb6:	7d23      	ldrb	r3, [r4, #20]
 801cfb8:	2b03      	cmp	r3, #3
 801cfba:	d057      	beq.n	801d06c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801cfbc:	2b09      	cmp	r3, #9
 801cfbe:	d15a      	bne.n	801d076 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801cfc0:	682b      	ldr	r3, [r5, #0]
 801cfc2:	6a22      	ldr	r2, [r4, #32]
 801cfc4:	1a9b      	subs	r3, r3, r2
 801cfc6:	2bf0      	cmp	r3, #240	; 0xf0
 801cfc8:	d955      	bls.n	801d076 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801cfca:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801cfcc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801cfd0:	f7ff ff3a 	bl	801ce48 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801cfd4:	4b72      	ldr	r3, [pc, #456]	; (801d1a0 <tcp_slowtmr+0x2b4>)
 801cfd6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801cfd8:	f1b9 0f00 	cmp.w	r9, #0
 801cfdc:	f000 817e 	beq.w	801d2dc <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801cfe0:	42a3      	cmp	r3, r4
 801cfe2:	f000 81df 	beq.w	801d3a4 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801cfe6:	68e3      	ldr	r3, [r4, #12]
 801cfe8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801cfec:	f1ba 0f00 	cmp.w	sl, #0
 801cff0:	f040 8147 	bne.w	801d282 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cff4:	7d23      	ldrb	r3, [r4, #20]
 801cff6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801cff8:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cffc:	f000 8153 	beq.w	801d2a6 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801d000:	4621      	mov	r1, r4
 801d002:	2002      	movs	r0, #2
 801d004:	f7fe fbc4 	bl	801b790 <memp_free>
      tcp_active_pcbs_changed = 0;
 801d008:	4c68      	ldr	r4, [pc, #416]	; (801d1ac <tcp_slowtmr+0x2c0>)
 801d00a:	2300      	movs	r3, #0
 801d00c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801d00e:	b13e      	cbz	r6, 801d020 <tcp_slowtmr+0x134>
 801d010:	f06f 010c 	mvn.w	r1, #12
 801d014:	4650      	mov	r0, sl
 801d016:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801d018:	7823      	ldrb	r3, [r4, #0]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	f47f af75 	bne.w	801cf0a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801d020:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801d022:	2c00      	cmp	r4, #0
 801d024:	f47f af78 	bne.w	801cf18 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801d028:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801d1c8 <tcp_slowtmr+0x2dc>
 801d02c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801d030:	b1cc      	cbz	r4, 801d066 <tcp_slowtmr+0x17a>
  prev = NULL;
 801d032:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d034:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801d19c <tcp_slowtmr+0x2b0>
 801d038:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d1cc <tcp_slowtmr+0x2e0>
 801d03c:	4f5c      	ldr	r7, [pc, #368]	; (801d1b0 <tcp_slowtmr+0x2c4>)
 801d03e:	7d23      	ldrb	r3, [r4, #20]
 801d040:	2b0a      	cmp	r3, #10
 801d042:	d006      	beq.n	801d052 <tcp_slowtmr+0x166>
 801d044:	4643      	mov	r3, r8
 801d046:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801d04a:	4651      	mov	r1, sl
 801d04c:	4638      	mov	r0, r7
 801d04e:	f009 f981 	bl	8026354 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d052:	682b      	ldr	r3, [r5, #0]
 801d054:	6a22      	ldr	r2, [r4, #32]
 801d056:	1a9b      	subs	r3, r3, r2
 801d058:	2bf0      	cmp	r3, #240	; 0xf0
 801d05a:	f200 80d4 	bhi.w	801d206 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801d05e:	4626      	mov	r6, r4
 801d060:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d062:	2c00      	cmp	r4, #0
 801d064:	d1eb      	bne.n	801d03e <tcp_slowtmr+0x152>
}
 801d066:	b007      	add	sp, #28
 801d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d06c:	682b      	ldr	r3, [r5, #0]
 801d06e:	6a22      	ldr	r2, [r4, #32]
 801d070:	1a9b      	subs	r3, r3, r2
 801d072:	2b28      	cmp	r3, #40	; 0x28
 801d074:	d8a9      	bhi.n	801cfca <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801d076:	f1b8 0f00 	cmp.w	r8, #0
 801d07a:	d1a6      	bne.n	801cfca <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801d07c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d07e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801d080:	3301      	adds	r3, #1
      pcb = pcb->next;
 801d082:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801d084:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801d086:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801d088:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d08a:	d815      	bhi.n	801d0b8 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801d08c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801d1ac <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801d090:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801d094:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801d098:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f000 80ce 	beq.w	801d23e <tcp_slowtmr+0x352>
 801d0a2:	4621      	mov	r1, r4
 801d0a4:	6920      	ldr	r0, [r4, #16]
 801d0a6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801d0a8:	f899 3000 	ldrb.w	r3, [r9]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f47f af2c 	bne.w	801cf0a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801d0b2:	2800      	cmp	r0, #0
 801d0b4:	f000 80c3 	beq.w	801d23e <tcp_slowtmr+0x352>
 801d0b8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d0ba:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801d0bc:	2c00      	cmp	r4, #0
 801d0be:	f47f af2b 	bne.w	801cf18 <tcp_slowtmr+0x2c>
 801d0c2:	e7b1      	b.n	801d028 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801d0c4:	8b63      	ldrh	r3, [r4, #26]
 801d0c6:	06db      	lsls	r3, r3, #27
 801d0c8:	d508      	bpl.n	801d0dc <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d0ca:	682b      	ldr	r3, [r5, #0]
 801d0cc:	6a22      	ldr	r2, [r4, #32]
 801d0ce:	1a9b      	subs	r3, r3, r2
 801d0d0:	2b28      	cmp	r3, #40	; 0x28
 801d0d2:	d903      	bls.n	801d0dc <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801d0d4:	f108 0801 	add.w	r8, r8, #1
 801d0d8:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801d0dc:	f04f 0a00 	mov.w	sl, #0
 801d0e0:	e75c      	b.n	801cf9c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801d0e2:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801d0e6:	f1b8 0f00 	cmp.w	r8, #0
 801d0ea:	d071      	beq.n	801d1d0 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d0ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d0ee:	b133      	cbz	r3, 801d0fe <tcp_slowtmr+0x212>
 801d0f0:	463b      	mov	r3, r7
 801d0f2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801d0f6:	492f      	ldr	r1, [pc, #188]	; (801d1b4 <tcp_slowtmr+0x2c8>)
 801d0f8:	482d      	ldr	r0, [pc, #180]	; (801d1b0 <tcp_slowtmr+0x2c4>)
 801d0fa:	f009 f92b 	bl	8026354 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d0fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d100:	2b00      	cmp	r3, #0
 801d102:	f000 8171 	beq.w	801d3e8 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d106:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801d10a:	2b0b      	cmp	r3, #11
 801d10c:	f240 80d2 	bls.w	801d2b4 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801d110:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801d112:	f04f 0801 	mov.w	r8, #1
 801d116:	e71b      	b.n	801cf50 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d118:	463b      	mov	r3, r7
 801d11a:	f240 42be 	movw	r2, #1214	; 0x4be
 801d11e:	4926      	ldr	r1, [pc, #152]	; (801d1b8 <tcp_slowtmr+0x2cc>)
 801d120:	4823      	ldr	r0, [pc, #140]	; (801d1b0 <tcp_slowtmr+0x2c4>)
 801d122:	f009 f917 	bl	8026354 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d126:	7d23      	ldrb	r3, [r4, #20]
 801d128:	2b01      	cmp	r3, #1
 801d12a:	f47f aefc 	bne.w	801cf26 <tcp_slowtmr+0x3a>
 801d12e:	463b      	mov	r3, r7
 801d130:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801d134:	4921      	ldr	r1, [pc, #132]	; (801d1bc <tcp_slowtmr+0x2d0>)
 801d136:	481e      	ldr	r0, [pc, #120]	; (801d1b0 <tcp_slowtmr+0x2c4>)
 801d138:	f009 f90c 	bl	8026354 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d13c:	7d23      	ldrb	r3, [r4, #20]
 801d13e:	2b0a      	cmp	r3, #10
 801d140:	f47f aef4 	bne.w	801cf2c <tcp_slowtmr+0x40>
 801d144:	463b      	mov	r3, r7
 801d146:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801d14a:	491d      	ldr	r1, [pc, #116]	; (801d1c0 <tcp_slowtmr+0x2d4>)
 801d14c:	4818      	ldr	r0, [pc, #96]	; (801d1b0 <tcp_slowtmr+0x2c4>)
 801d14e:	f009 f901 	bl	8026354 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d152:	f89b 2000 	ldrb.w	r2, [fp]
 801d156:	7fa3      	ldrb	r3, [r4, #30]
 801d158:	4293      	cmp	r3, r2
 801d15a:	f47f aeed 	bne.w	801cf38 <tcp_slowtmr+0x4c>
      continue;
 801d15e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d160:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d162:	2c00      	cmp	r4, #0
 801d164:	f47f aed8 	bne.w	801cf18 <tcp_slowtmr+0x2c>
 801d168:	e75e      	b.n	801d028 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d16a:	2a05      	cmp	r2, #5
 801d16c:	d9b9      	bls.n	801d0e2 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801d16e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801d172:	f04f 0801 	mov.w	r8, #1
 801d176:	e711      	b.n	801cf9c <tcp_slowtmr+0xb0>
 801d178:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801d17a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801d17c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801d17e:	6860      	ldr	r0, [r4, #4]
 801d180:	b108      	cbz	r0, 801d186 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801d182:	f7ff f81d 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d186:	4621      	mov	r1, r4
 801d188:	2004      	movs	r0, #4
 801d18a:	f7fe fb01 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801d18e:	2e00      	cmp	r6, #0
 801d190:	d1f3      	bne.n	801d17a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801d192:	9c05      	ldr	r4, [sp, #20]
 801d194:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d196:	e70e      	b.n	801cfb6 <tcp_slowtmr+0xca>
 801d198:	2002e444 	.word	0x2002e444
 801d19c:	08045238 	.word	0x08045238
 801d1a0:	2002e434 	.word	0x2002e434
 801d1a4:	000a4cb8 	.word	0x000a4cb8
 801d1a8:	10624dd3 	.word	0x10624dd3
 801d1ac:	2002e438 	.word	0x2002e438
 801d1b0:	0802b034 	.word	0x0802b034
 801d1b4:	080455a4 	.word	0x080455a4
 801d1b8:	0804551c 	.word	0x0804551c
 801d1bc:	08045548 	.word	0x08045548
 801d1c0:	08045574 	.word	0x08045574
 801d1c4:	2002e449 	.word	0x2002e449
 801d1c8:	2002e44c 	.word	0x2002e44c
 801d1cc:	08045668 	.word	0x08045668
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d1d0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801d1d4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801d1d8:	b291      	uxth	r1, r2
 801d1da:	4281      	cmp	r1, r0
 801d1dc:	d802      	bhi.n	801d1e4 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801d1de:	1c4a      	adds	r2, r1, #1
 801d1e0:	b212      	sxth	r2, r2
 801d1e2:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801d1e4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801d1e8:	4291      	cmp	r1, r2
 801d1ea:	f73f aeb1 	bgt.w	801cf50 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d1ee:	4620      	mov	r0, r4
 801d1f0:	f003 f85a 	bl	80202a8 <tcp_rexmit_rto_prepare>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	f000 80a0 	beq.w	801d33a <tcp_slowtmr+0x44e>
 801d1fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d1fc:	2b00      	cmp	r3, #0
 801d1fe:	f000 8098 	beq.w	801d332 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801d202:	7d23      	ldrb	r3, [r4, #20]
 801d204:	e6a4      	b.n	801cf50 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801d206:	4620      	mov	r0, r4
 801d208:	f7ff fe1e 	bl	801ce48 <tcp_pcb_purge>
      if (prev != NULL) {
 801d20c:	2e00      	cmp	r6, #0
 801d20e:	f000 80d1 	beq.w	801d3b4 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d212:	f8d9 3000 	ldr.w	r3, [r9]
 801d216:	42a3      	cmp	r3, r4
 801d218:	f000 80ee 	beq.w	801d3f8 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801d21c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801d220:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d224:	7d23      	ldrb	r3, [r4, #20]
 801d226:	2b01      	cmp	r3, #1
 801d228:	f000 80d7 	beq.w	801d3da <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801d22c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801d22e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801d230:	2002      	movs	r0, #2
 801d232:	f7fe faad 	bl	801b790 <memp_free>
  while (pcb != NULL) {
 801d236:	2c00      	cmp	r4, #0
 801d238:	f47f af01 	bne.w	801d03e <tcp_slowtmr+0x152>
 801d23c:	e713      	b.n	801d066 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801d23e:	4620      	mov	r0, r4
 801d240:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d242:	4634      	mov	r4, r6
          tcp_output(prev);
 801d244:	f003 f96e 	bl	8020524 <tcp_output>
  while (pcb != NULL) {
 801d248:	2c00      	cmp	r4, #0
 801d24a:	f47f ae65 	bne.w	801cf18 <tcp_slowtmr+0x2c>
 801d24e:	e6eb      	b.n	801d028 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801d250:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801d254:	4870      	ldr	r0, [pc, #448]	; (801d418 <tcp_slowtmr+0x52c>)
 801d256:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801d25a:	4b70      	ldr	r3, [pc, #448]	; (801d41c <tcp_slowtmr+0x530>)
 801d25c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d260:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801d264:	f67f af3a 	bls.w	801d0dc <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801d268:	4620      	mov	r0, r4
 801d26a:	f003 fb91 	bl	8020990 <tcp_keepalive>
        if (err == ERR_OK) {
 801d26e:	2800      	cmp	r0, #0
 801d270:	f47f af34 	bne.w	801d0dc <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801d274:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801d278:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801d27a:	3301      	adds	r3, #1
 801d27c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801d280:	e68c      	b.n	801cf9c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d282:	8b23      	ldrh	r3, [r4, #24]
 801d284:	4620      	mov	r0, r4
 801d286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d288:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d28a:	9302      	str	r3, [sp, #8]
 801d28c:	8ae3      	ldrh	r3, [r4, #22]
 801d28e:	9301      	str	r3, [sp, #4]
 801d290:	1d23      	adds	r3, r4, #4
 801d292:	9300      	str	r3, [sp, #0]
 801d294:	4623      	mov	r3, r4
 801d296:	f003 f8cb 	bl	8020430 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d29a:	7d23      	ldrb	r3, [r4, #20]
 801d29c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d29e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d2a2:	f47f aead 	bne.w	801d000 <tcp_slowtmr+0x114>
 801d2a6:	463b      	mov	r3, r7
 801d2a8:	22d4      	movs	r2, #212	; 0xd4
 801d2aa:	495d      	ldr	r1, [pc, #372]	; (801d420 <tcp_slowtmr+0x534>)
 801d2ac:	485d      	ldr	r0, [pc, #372]	; (801d424 <tcp_slowtmr+0x538>)
 801d2ae:	f009 f851 	bl	8026354 <iprintf>
 801d2b2:	e6a5      	b.n	801d000 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d2b4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801d2b8:	4a5b      	ldr	r2, [pc, #364]	; (801d428 <tcp_slowtmr+0x53c>)
 801d2ba:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801d2bc:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d2c0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	d216      	bcs.n	801d2f6 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801d2c8:	3301      	adds	r3, #1
 801d2ca:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801d2cc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801d2ce:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801d2d2:	d210      	bcs.n	801d2f6 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801d2d4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801d2d6:	f04f 0800 	mov.w	r8, #0
 801d2da:	e639      	b.n	801cf50 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801d2dc:	42a3      	cmp	r3, r4
 801d2de:	d006      	beq.n	801d2ee <tcp_slowtmr+0x402>
 801d2e0:	463b      	mov	r3, r7
 801d2e2:	f240 5271 	movw	r2, #1393	; 0x571
 801d2e6:	4951      	ldr	r1, [pc, #324]	; (801d42c <tcp_slowtmr+0x540>)
 801d2e8:	484e      	ldr	r0, [pc, #312]	; (801d424 <tcp_slowtmr+0x538>)
 801d2ea:	f009 f833 	bl	8026354 <iprintf>
        tcp_active_pcbs = pcb->next;
 801d2ee:	68e3      	ldr	r3, [r4, #12]
 801d2f0:	4a4f      	ldr	r2, [pc, #316]	; (801d430 <tcp_slowtmr+0x544>)
 801d2f2:	6013      	str	r3, [r2, #0]
 801d2f4:	e67a      	b.n	801cfec <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801d2f6:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801d2fa:	b936      	cbnz	r6, 801d30a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d2fc:	4620      	mov	r0, r4
 801d2fe:	f003 fb6d 	bl	80209dc <tcp_zero_window_probe>
 801d302:	b140      	cbz	r0, 801d316 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d304:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801d306:	7d23      	ldrb	r3, [r4, #20]
 801d308:	e622      	b.n	801cf50 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d30a:	4631      	mov	r1, r6
 801d30c:	4620      	mov	r0, r4
 801d30e:	f002 fe17 	bl	801ff40 <tcp_split_unsent_seg>
 801d312:	2800      	cmp	r0, #0
 801d314:	d078      	beq.n	801d408 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d316:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801d31a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d31e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801d320:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d324:	f63f af6d 	bhi.w	801d202 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801d328:	3301      	adds	r3, #1
 801d32a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801d32e:	7d23      	ldrb	r3, [r4, #20]
 801d330:	e60e      	b.n	801cf50 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d332:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d334:	2b00      	cmp	r3, #0
 801d336:	f43f af64 	beq.w	801d202 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801d33a:	7d23      	ldrb	r3, [r4, #20]
 801d33c:	2b02      	cmp	r3, #2
 801d33e:	d014      	beq.n	801d36a <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d340:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d344:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801d348:	2a0c      	cmp	r2, #12
 801d34a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801d34e:	bf28      	it	cs
 801d350:	220c      	movcs	r2, #12
 801d352:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801d356:	4937      	ldr	r1, [pc, #220]	; (801d434 <tcp_slowtmr+0x548>)
 801d358:	5c8a      	ldrb	r2, [r1, r2]
 801d35a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d35c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d360:	4293      	cmp	r3, r2
 801d362:	bfa8      	it	ge
 801d364:	4613      	movge	r3, r2
 801d366:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d36a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801d36e:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d370:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d374:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801d376:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801d378:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d37c:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801d380:	bf28      	it	cs
 801d382:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d384:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d386:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801d38a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d38e:	bf88      	it	hi
 801d390:	4613      	movhi	r3, r2
 801d392:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801d396:	2300      	movs	r3, #0
 801d398:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801d39a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801d39e:	f003 faab 	bl	80208f8 <tcp_rexmit_rto_commit>
 801d3a2:	e72e      	b.n	801d202 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d3a4:	463b      	mov	r3, r7
 801d3a6:	f240 526d 	movw	r2, #1389	; 0x56d
 801d3aa:	4923      	ldr	r1, [pc, #140]	; (801d438 <tcp_slowtmr+0x54c>)
 801d3ac:	481d      	ldr	r0, [pc, #116]	; (801d424 <tcp_slowtmr+0x538>)
 801d3ae:	f008 ffd1 	bl	8026354 <iprintf>
 801d3b2:	e618      	b.n	801cfe6 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801d3b4:	f8d9 3000 	ldr.w	r3, [r9]
 801d3b8:	42a3      	cmp	r3, r4
 801d3ba:	d006      	beq.n	801d3ca <tcp_slowtmr+0x4de>
 801d3bc:	4643      	mov	r3, r8
 801d3be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801d3c2:	491e      	ldr	r1, [pc, #120]	; (801d43c <tcp_slowtmr+0x550>)
 801d3c4:	4638      	mov	r0, r7
 801d3c6:	f008 ffc5 	bl	8026354 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3ca:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801d3cc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3d0:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801d3d2:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3d6:	f47f af29 	bne.w	801d22c <tcp_slowtmr+0x340>
 801d3da:	4643      	mov	r3, r8
 801d3dc:	22d4      	movs	r2, #212	; 0xd4
 801d3de:	4910      	ldr	r1, [pc, #64]	; (801d420 <tcp_slowtmr+0x534>)
 801d3e0:	4638      	mov	r0, r7
 801d3e2:	f008 ffb7 	bl	8026354 <iprintf>
 801d3e6:	e721      	b.n	801d22c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d3e8:	463b      	mov	r3, r7
 801d3ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801d3ee:	4914      	ldr	r1, [pc, #80]	; (801d440 <tcp_slowtmr+0x554>)
 801d3f0:	480c      	ldr	r0, [pc, #48]	; (801d424 <tcp_slowtmr+0x538>)
 801d3f2:	f008 ffaf 	bl	8026354 <iprintf>
 801d3f6:	e686      	b.n	801d106 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d3f8:	4643      	mov	r3, r8
 801d3fa:	f240 52af 	movw	r2, #1455	; 0x5af
 801d3fe:	4911      	ldr	r1, [pc, #68]	; (801d444 <tcp_slowtmr+0x558>)
 801d400:	4638      	mov	r0, r7
 801d402:	f008 ffa7 	bl	8026354 <iprintf>
 801d406:	e709      	b.n	801d21c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801d408:	4620      	mov	r0, r4
 801d40a:	f003 f88b 	bl	8020524 <tcp_output>
 801d40e:	2800      	cmp	r0, #0
 801d410:	d181      	bne.n	801d316 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d412:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801d414:	7d23      	ldrb	r3, [r4, #20]
 801d416:	e59b      	b.n	801cf50 <tcp_slowtmr+0x64>
 801d418:	000124f8 	.word	0x000124f8
 801d41c:	10624dd3 	.word	0x10624dd3
 801d420:	08045274 	.word	0x08045274
 801d424:	0802b034 	.word	0x0802b034
 801d428:	0804592c 	.word	0x0804592c
 801d42c:	0804563c 	.word	0x0804563c
 801d430:	2002e434 	.word	0x2002e434
 801d434:	0804590c 	.word	0x0804590c
 801d438:	08045610 	.word	0x08045610
 801d43c:	080456c0 	.word	0x080456c0
 801d440:	080455d8 	.word	0x080455d8
 801d444:	08045698 	.word	0x08045698

0801d448 <tcp_pcb_remove>:
{
 801d448:	b538      	push	{r3, r4, r5, lr}
 801d44a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d44c:	460c      	mov	r4, r1
 801d44e:	2900      	cmp	r1, #0
 801d450:	d04a      	beq.n	801d4e8 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d452:	2d00      	cmp	r5, #0
 801d454:	d051      	beq.n	801d4fa <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801d456:	682b      	ldr	r3, [r5, #0]
 801d458:	42a3      	cmp	r3, r4
 801d45a:	d032      	beq.n	801d4c2 <tcp_pcb_remove+0x7a>
 801d45c:	b12b      	cbz	r3, 801d46a <tcp_pcb_remove+0x22>
 801d45e:	68da      	ldr	r2, [r3, #12]
 801d460:	42a2      	cmp	r2, r4
 801d462:	d03e      	beq.n	801d4e2 <tcp_pcb_remove+0x9a>
 801d464:	4613      	mov	r3, r2
 801d466:	2b00      	cmp	r3, #0
 801d468:	d1f9      	bne.n	801d45e <tcp_pcb_remove+0x16>
 801d46a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801d46c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801d46e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801d470:	f7ff fcea 	bl	801ce48 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801d474:	7d23      	ldrb	r3, [r4, #20]
 801d476:	2b0a      	cmp	r3, #10
 801d478:	d02d      	beq.n	801d4d6 <tcp_pcb_remove+0x8e>
 801d47a:	2b01      	cmp	r3, #1
 801d47c:	d01d      	beq.n	801d4ba <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801d47e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801d480:	07da      	lsls	r2, r3, #31
 801d482:	d421      	bmi.n	801d4c8 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d484:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d486:	b133      	cbz	r3, 801d496 <tcp_pcb_remove+0x4e>
 801d488:	4b20      	ldr	r3, [pc, #128]	; (801d50c <tcp_pcb_remove+0xc4>)
 801d48a:	f640 0293 	movw	r2, #2195	; 0x893
 801d48e:	4920      	ldr	r1, [pc, #128]	; (801d510 <tcp_pcb_remove+0xc8>)
 801d490:	4820      	ldr	r0, [pc, #128]	; (801d514 <tcp_pcb_remove+0xcc>)
 801d492:	f008 ff5f 	bl	8026354 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d496:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d498:	b133      	cbz	r3, 801d4a8 <tcp_pcb_remove+0x60>
 801d49a:	4b1c      	ldr	r3, [pc, #112]	; (801d50c <tcp_pcb_remove+0xc4>)
 801d49c:	f640 0294 	movw	r2, #2196	; 0x894
 801d4a0:	491d      	ldr	r1, [pc, #116]	; (801d518 <tcp_pcb_remove+0xd0>)
 801d4a2:	481c      	ldr	r0, [pc, #112]	; (801d514 <tcp_pcb_remove+0xcc>)
 801d4a4:	f008 ff56 	bl	8026354 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d4a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d4aa:	b133      	cbz	r3, 801d4ba <tcp_pcb_remove+0x72>
 801d4ac:	4b17      	ldr	r3, [pc, #92]	; (801d50c <tcp_pcb_remove+0xc4>)
 801d4ae:	f640 0296 	movw	r2, #2198	; 0x896
 801d4b2:	491a      	ldr	r1, [pc, #104]	; (801d51c <tcp_pcb_remove+0xd4>)
 801d4b4:	4817      	ldr	r0, [pc, #92]	; (801d514 <tcp_pcb_remove+0xcc>)
 801d4b6:	f008 ff4d 	bl	8026354 <iprintf>
  pcb->state = CLOSED;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801d4be:	82e3      	strh	r3, [r4, #22]
}
 801d4c0:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801d4c2:	68e3      	ldr	r3, [r4, #12]
 801d4c4:	602b      	str	r3, [r5, #0]
 801d4c6:	e7d0      	b.n	801d46a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801d4c8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801d4cc:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801d4ce:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801d4d0:	f003 f828 	bl	8020524 <tcp_output>
  if (pcb->state != LISTEN) {
 801d4d4:	7d23      	ldrb	r3, [r4, #20]
 801d4d6:	2b01      	cmp	r3, #1
 801d4d8:	d0ef      	beq.n	801d4ba <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d4da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d1d3      	bne.n	801d488 <tcp_pcb_remove+0x40>
 801d4e0:	e7d9      	b.n	801d496 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801d4e2:	68e2      	ldr	r2, [r4, #12]
 801d4e4:	60da      	str	r2, [r3, #12]
 801d4e6:	e7c0      	b.n	801d46a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d4e8:	4b08      	ldr	r3, [pc, #32]	; (801d50c <tcp_pcb_remove+0xc4>)
 801d4ea:	f640 0283 	movw	r2, #2179	; 0x883
 801d4ee:	490c      	ldr	r1, [pc, #48]	; (801d520 <tcp_pcb_remove+0xd8>)
 801d4f0:	4808      	ldr	r0, [pc, #32]	; (801d514 <tcp_pcb_remove+0xcc>)
 801d4f2:	f008 ff2f 	bl	8026354 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d4f6:	2d00      	cmp	r5, #0
 801d4f8:	d1ad      	bne.n	801d456 <tcp_pcb_remove+0xe>
 801d4fa:	4b04      	ldr	r3, [pc, #16]	; (801d50c <tcp_pcb_remove+0xc4>)
 801d4fc:	f640 0284 	movw	r2, #2180	; 0x884
 801d500:	4908      	ldr	r1, [pc, #32]	; (801d524 <tcp_pcb_remove+0xdc>)
 801d502:	4804      	ldr	r0, [pc, #16]	; (801d514 <tcp_pcb_remove+0xcc>)
 801d504:	f008 ff26 	bl	8026354 <iprintf>
 801d508:	e7a5      	b.n	801d456 <tcp_pcb_remove+0xe>
 801d50a:	bf00      	nop
 801d50c:	08045238 	.word	0x08045238
 801d510:	08045724 	.word	0x08045724
 801d514:	0802b034 	.word	0x0802b034
 801d518:	0804573c 	.word	0x0804573c
 801d51c:	08045758 	.word	0x08045758
 801d520:	080456e8 	.word	0x080456e8
 801d524:	08045704 	.word	0x08045704

0801d528 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d528:	2800      	cmp	r0, #0
 801d52a:	f000 80ad 	beq.w	801d688 <tcp_abandon+0x160>
{
 801d52e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d532:	7d03      	ldrb	r3, [r0, #20]
{
 801d534:	b087      	sub	sp, #28
 801d536:	4605      	mov	r5, r0
 801d538:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d53a:	2b01      	cmp	r3, #1
 801d53c:	f000 808b 	beq.w	801d656 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801d540:	2b0a      	cmp	r3, #10
 801d542:	f000 8093 	beq.w	801d66c <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801d546:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801d548:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801d54c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801d550:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801d554:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801d556:	b96b      	cbnz	r3, 801d574 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801d558:	8aef      	ldrh	r7, [r5, #22]
 801d55a:	2f00      	cmp	r7, #0
 801d55c:	d052      	beq.n	801d604 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d55e:	4a51      	ldr	r2, [pc, #324]	; (801d6a4 <tcp_abandon+0x17c>)
 801d560:	6813      	ldr	r3, [r2, #0]
 801d562:	42ab      	cmp	r3, r5
 801d564:	d074      	beq.n	801d650 <tcp_abandon+0x128>
 801d566:	2b00      	cmp	r3, #0
 801d568:	d050      	beq.n	801d60c <tcp_abandon+0xe4>
 801d56a:	68da      	ldr	r2, [r3, #12]
 801d56c:	42aa      	cmp	r2, r5
 801d56e:	d04b      	beq.n	801d608 <tcp_abandon+0xe0>
 801d570:	4613      	mov	r3, r2
 801d572:	e7f8      	b.n	801d566 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d574:	4629      	mov	r1, r5
 801d576:	484c      	ldr	r0, [pc, #304]	; (801d6a8 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801d578:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d57a:	f7ff ff65 	bl	801d448 <tcp_pcb_remove>
 801d57e:	4b4b      	ldr	r3, [pc, #300]	; (801d6ac <tcp_abandon+0x184>)
 801d580:	2201      	movs	r2, #1
 801d582:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d584:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801d586:	b164      	cbz	r4, 801d5a2 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801d588:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d58a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d58c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d590:	b108      	cbz	r0, 801d596 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801d592:	f7fe fe15 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d596:	4651      	mov	r1, sl
 801d598:	2004      	movs	r0, #4
 801d59a:	f7fe f8f9 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801d59e:	2c00      	cmp	r4, #0
 801d5a0:	d1f2      	bne.n	801d588 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801d5a2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801d5a4:	b164      	cbz	r4, 801d5c0 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801d5a6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d5a8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d5aa:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d5ae:	b108      	cbz	r0, 801d5b4 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801d5b0:	f7fe fe06 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d5b4:	4651      	mov	r1, sl
 801d5b6:	2004      	movs	r0, #4
 801d5b8:	f7fe f8ea 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801d5bc:	2c00      	cmp	r4, #0
 801d5be:	d1f2      	bne.n	801d5a6 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801d5c0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d5c2:	b164      	cbz	r4, 801d5de <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801d5c4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d5c6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d5c8:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d5cc:	b108      	cbz	r0, 801d5d2 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801d5ce:	f7fe fdf7 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d5d2:	4651      	mov	r1, sl
 801d5d4:	2004      	movs	r0, #4
 801d5d6:	f7fe f8db 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801d5da:	2c00      	cmp	r4, #0
 801d5dc:	d1f2      	bne.n	801d5c4 <tcp_abandon+0x9c>
    if (send_rst) {
 801d5de:	b9ce      	cbnz	r6, 801d614 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d5e0:	7d2b      	ldrb	r3, [r5, #20]
 801d5e2:	2b01      	cmp	r3, #1
 801d5e4:	d024      	beq.n	801d630 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801d5e6:	4629      	mov	r1, r5
 801d5e8:	2002      	movs	r0, #2
 801d5ea:	f7fe f8d1 	bl	801b790 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d5ee:	f1b8 0f00 	cmp.w	r8, #0
 801d5f2:	d02a      	beq.n	801d64a <tcp_abandon+0x122>
 801d5f4:	f06f 010c 	mvn.w	r1, #12
 801d5f8:	4648      	mov	r0, r9
 801d5fa:	4643      	mov	r3, r8
}
 801d5fc:	b007      	add	sp, #28
 801d5fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d602:	4718      	bx	r3
    int send_rst = 0;
 801d604:	461e      	mov	r6, r3
 801d606:	e7bd      	b.n	801d584 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d608:	68ea      	ldr	r2, [r5, #12]
 801d60a:	60da      	str	r2, [r3, #12]
 801d60c:	2700      	movs	r7, #0
    int send_rst = 0;
 801d60e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d610:	60ef      	str	r7, [r5, #12]
 801d612:	e7b7      	b.n	801d584 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d614:	9701      	str	r7, [sp, #4]
 801d616:	465a      	mov	r2, fp
 801d618:	8b2b      	ldrh	r3, [r5, #24]
 801d61a:	4628      	mov	r0, r5
 801d61c:	9905      	ldr	r1, [sp, #20]
 801d61e:	9302      	str	r3, [sp, #8]
 801d620:	1d2b      	adds	r3, r5, #4
 801d622:	9300      	str	r3, [sp, #0]
 801d624:	462b      	mov	r3, r5
 801d626:	f002 ff03 	bl	8020430 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d62a:	7d2b      	ldrb	r3, [r5, #20]
 801d62c:	2b01      	cmp	r3, #1
 801d62e:	d1da      	bne.n	801d5e6 <tcp_abandon+0xbe>
 801d630:	491f      	ldr	r1, [pc, #124]	; (801d6b0 <tcp_abandon+0x188>)
 801d632:	22d4      	movs	r2, #212	; 0xd4
 801d634:	4b1f      	ldr	r3, [pc, #124]	; (801d6b4 <tcp_abandon+0x18c>)
 801d636:	4820      	ldr	r0, [pc, #128]	; (801d6b8 <tcp_abandon+0x190>)
 801d638:	f008 fe8c 	bl	8026354 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801d63c:	4629      	mov	r1, r5
 801d63e:	2002      	movs	r0, #2
 801d640:	f7fe f8a6 	bl	801b790 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d644:	f1b8 0f00 	cmp.w	r8, #0
 801d648:	d1d4      	bne.n	801d5f4 <tcp_abandon+0xcc>
}
 801d64a:	b007      	add	sp, #28
 801d64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d650:	68eb      	ldr	r3, [r5, #12]
 801d652:	6013      	str	r3, [r2, #0]
 801d654:	e7da      	b.n	801d60c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d656:	4b17      	ldr	r3, [pc, #92]	; (801d6b4 <tcp_abandon+0x18c>)
 801d658:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d65c:	4917      	ldr	r1, [pc, #92]	; (801d6bc <tcp_abandon+0x194>)
 801d65e:	4816      	ldr	r0, [pc, #88]	; (801d6b8 <tcp_abandon+0x190>)
 801d660:	f008 fe78 	bl	8026354 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801d664:	7d2b      	ldrb	r3, [r5, #20]
 801d666:	2b0a      	cmp	r3, #10
 801d668:	f47f af6d 	bne.w	801d546 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d66c:	4629      	mov	r1, r5
 801d66e:	4814      	ldr	r0, [pc, #80]	; (801d6c0 <tcp_abandon+0x198>)
 801d670:	f7ff feea 	bl	801d448 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d674:	7d2b      	ldrb	r3, [r5, #20]
 801d676:	2b01      	cmp	r3, #1
 801d678:	d00d      	beq.n	801d696 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801d67a:	4629      	mov	r1, r5
 801d67c:	2002      	movs	r0, #2
}
 801d67e:	b007      	add	sp, #28
 801d680:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801d684:	f7fe b884 	b.w	801b790 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d688:	4b0a      	ldr	r3, [pc, #40]	; (801d6b4 <tcp_abandon+0x18c>)
 801d68a:	f240 223d 	movw	r2, #573	; 0x23d
 801d68e:	490d      	ldr	r1, [pc, #52]	; (801d6c4 <tcp_abandon+0x19c>)
 801d690:	4809      	ldr	r0, [pc, #36]	; (801d6b8 <tcp_abandon+0x190>)
 801d692:	f008 be5f 	b.w	8026354 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d696:	4b07      	ldr	r3, [pc, #28]	; (801d6b4 <tcp_abandon+0x18c>)
 801d698:	22d4      	movs	r2, #212	; 0xd4
 801d69a:	4905      	ldr	r1, [pc, #20]	; (801d6b0 <tcp_abandon+0x188>)
 801d69c:	4806      	ldr	r0, [pc, #24]	; (801d6b8 <tcp_abandon+0x190>)
 801d69e:	f008 fe59 	bl	8026354 <iprintf>
 801d6a2:	e7ea      	b.n	801d67a <tcp_abandon+0x152>
 801d6a4:	2002e43c 	.word	0x2002e43c
 801d6a8:	2002e434 	.word	0x2002e434
 801d6ac:	2002e438 	.word	0x2002e438
 801d6b0:	08045274 	.word	0x08045274
 801d6b4:	08045238 	.word	0x08045238
 801d6b8:	0802b034 	.word	0x0802b034
 801d6bc:	0804578c 	.word	0x0804578c
 801d6c0:	2002e44c 	.word	0x2002e44c
 801d6c4:	08045770 	.word	0x08045770

0801d6c8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801d6c8:	2101      	movs	r1, #1
 801d6ca:	f7ff bf2d 	b.w	801d528 <tcp_abandon>
 801d6ce:	bf00      	nop

0801d6d0 <tcp_accept_null>:
{
 801d6d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801d6d2:	460c      	mov	r4, r1
 801d6d4:	b131      	cbz	r1, 801d6e4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801d6d6:	4620      	mov	r0, r4
 801d6d8:	2101      	movs	r1, #1
 801d6da:	f7ff ff25 	bl	801d528 <tcp_abandon>
}
 801d6de:	f06f 000c 	mvn.w	r0, #12
 801d6e2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801d6e4:	4b06      	ldr	r3, [pc, #24]	; (801d700 <tcp_accept_null+0x30>)
 801d6e6:	f240 320f 	movw	r2, #783	; 0x30f
 801d6ea:	4906      	ldr	r1, [pc, #24]	; (801d704 <tcp_accept_null+0x34>)
 801d6ec:	4806      	ldr	r0, [pc, #24]	; (801d708 <tcp_accept_null+0x38>)
 801d6ee:	f008 fe31 	bl	8026354 <iprintf>
  tcp_abandon(pcb, 1);
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	2101      	movs	r1, #1
 801d6f6:	f7ff ff17 	bl	801d528 <tcp_abandon>
}
 801d6fa:	f06f 000c 	mvn.w	r0, #12
 801d6fe:	bd10      	pop	{r4, pc}
 801d700:	08045238 	.word	0x08045238
 801d704:	080457c0 	.word	0x080457c0
 801d708:	0802b034 	.word	0x0802b034

0801d70c <tcp_netif_ip_addr_changed_pcblist>:
{
 801d70c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d70e:	4605      	mov	r5, r0
{
 801d710:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d712:	b178      	cbz	r0, 801d734 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801d714:	b134      	cbz	r4, 801d724 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801d716:	6822      	ldr	r2, [r4, #0]
 801d718:	682b      	ldr	r3, [r5, #0]
 801d71a:	429a      	cmp	r2, r3
 801d71c:	d003      	beq.n	801d726 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801d71e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d720:	2c00      	cmp	r4, #0
 801d722:	d1f8      	bne.n	801d716 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801d724:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801d726:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801d728:	4620      	mov	r0, r4
 801d72a:	2101      	movs	r1, #1
      pcb = next;
 801d72c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801d72e:	f7ff fefb 	bl	801d528 <tcp_abandon>
      pcb = next;
 801d732:	e7ef      	b.n	801d714 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d734:	4b03      	ldr	r3, [pc, #12]	; (801d744 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801d736:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801d73a:	4903      	ldr	r1, [pc, #12]	; (801d748 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801d73c:	4803      	ldr	r0, [pc, #12]	; (801d74c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801d73e:	f008 fe09 	bl	8026354 <iprintf>
 801d742:	e7e7      	b.n	801d714 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801d744:	08045238 	.word	0x08045238
 801d748:	080457e0 	.word	0x080457e0
 801d74c:	0802b034 	.word	0x0802b034

0801d750 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d750:	4b0f      	ldr	r3, [pc, #60]	; (801d790 <tcp_kill_state+0x40>)
 801d752:	6819      	ldr	r1, [r3, #0]
 801d754:	b1d1      	cbz	r1, 801d78c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d756:	4b0f      	ldr	r3, [pc, #60]	; (801d794 <tcp_kill_state+0x44>)
  inactivity = 0;
 801d758:	2200      	movs	r2, #0
{
 801d75a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d75c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801d75e:	4614      	mov	r4, r2
 801d760:	e001      	b.n	801d766 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d762:	68c9      	ldr	r1, [r1, #12]
 801d764:	b159      	cbz	r1, 801d77e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801d766:	7d0b      	ldrb	r3, [r1, #20]
 801d768:	4283      	cmp	r3, r0
 801d76a:	d1fa      	bne.n	801d762 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d76c:	6a0b      	ldr	r3, [r1, #32]
 801d76e:	1aeb      	subs	r3, r5, r3
 801d770:	4293      	cmp	r3, r2
 801d772:	d3f6      	bcc.n	801d762 <tcp_kill_state+0x12>
 801d774:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d776:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d778:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d77a:	2900      	cmp	r1, #0
 801d77c:	d1f3      	bne.n	801d766 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801d77e:	b11c      	cbz	r4, 801d788 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801d780:	4620      	mov	r0, r4
}
 801d782:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801d784:	f7ff bed0 	b.w	801d528 <tcp_abandon>
}
 801d788:	bc30      	pop	{r4, r5}
 801d78a:	4770      	bx	lr
 801d78c:	4770      	bx	lr
 801d78e:	bf00      	nop
 801d790:	2002e434 	.word	0x2002e434
 801d794:	2002e444 	.word	0x2002e444

0801d798 <tcp_alloc>:
{
 801d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d79a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801d79e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d7a0:	494f      	ldr	r1, [pc, #316]	; (801d8e0 <tcp_alloc+0x148>)
 801d7a2:	2002      	movs	r0, #2
 801d7a4:	f7fd ffbe 	bl	801b724 <memp_malloc_fn>
  if (pcb == NULL) {
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	b320      	cbz	r0, 801d7f6 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801d7ac:	229c      	movs	r2, #156	; 0x9c
 801d7ae:	2100      	movs	r1, #0
 801d7b0:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801d7b2:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801d7b6:	f007 fe2f 	bl	8025418 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801d7ba:	494a      	ldr	r1, [pc, #296]	; (801d8e4 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801d7bc:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801d7be:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801d7c0:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801d7c2:	4849      	ldr	r0, [pc, #292]	; (801d8e8 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801d7c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801d7c8:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801d7ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801d7cc:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801d7ce:	4a47      	ldr	r2, [pc, #284]	; (801d8ec <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801d7d0:	4947      	ldr	r1, [pc, #284]	; (801d8f0 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801d7d2:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801d7d6:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801d7d8:	4c46      	ldr	r4, [pc, #280]	; (801d8f4 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801d7da:	4847      	ldr	r0, [pc, #284]	; (801d8f8 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801d7dc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801d7e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801d7e4:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801d7e6:	4945      	ldr	r1, [pc, #276]	; (801d8fc <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801d7e8:	6498      	str	r0, [r3, #72]	; 0x48
}
 801d7ea:	4618      	mov	r0, r3
    pcb->prio = prio;
 801d7ec:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801d7ee:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801d7f0:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801d7f2:	72da      	strb	r2, [r3, #11]
}
 801d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801d7f6:	4e42      	ldr	r6, [pc, #264]	; (801d900 <tcp_alloc+0x168>)
 801d7f8:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801d7fa:	b15c      	cbz	r4, 801d814 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801d7fc:	4620      	mov	r0, r4
 801d7fe:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801d800:	8b43      	ldrh	r3, [r0, #26]
 801d802:	0719      	lsls	r1, r3, #28
 801d804:	d5f9      	bpl.n	801d7fa <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801d806:	f023 0308 	bic.w	r3, r3, #8
 801d80a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801d80c:	f7fe ffd8 	bl	801c7c0 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801d810:	2c00      	cmp	r4, #0
 801d812:	d1f3      	bne.n	801d7fc <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d814:	4b3b      	ldr	r3, [pc, #236]	; (801d904 <tcp_alloc+0x16c>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	b193      	cbz	r3, 801d840 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d81a:	4a33      	ldr	r2, [pc, #204]	; (801d8e8 <tcp_alloc+0x150>)
 801d81c:	4618      	mov	r0, r3
 801d81e:	6a19      	ldr	r1, [r3, #32]
 801d820:	6814      	ldr	r4, [r2, #0]
 801d822:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d824:	68db      	ldr	r3, [r3, #12]
 801d826:	b143      	cbz	r3, 801d83a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d828:	6a1a      	ldr	r2, [r3, #32]
 801d82a:	1aa2      	subs	r2, r4, r2
 801d82c:	428a      	cmp	r2, r1
 801d82e:	d3f9      	bcc.n	801d824 <tcp_alloc+0x8c>
 801d830:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d832:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d834:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d836:	2b00      	cmp	r3, #0
 801d838:	d1f6      	bne.n	801d828 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801d83a:	2101      	movs	r1, #1
 801d83c:	f7ff fe74 	bl	801d528 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d840:	f240 7239 	movw	r2, #1849	; 0x739
 801d844:	4926      	ldr	r1, [pc, #152]	; (801d8e0 <tcp_alloc+0x148>)
 801d846:	2002      	movs	r0, #2
 801d848:	f7fd ff6c 	bl	801b724 <memp_malloc_fn>
    if (pcb == NULL) {
 801d84c:	4603      	mov	r3, r0
 801d84e:	2800      	cmp	r0, #0
 801d850:	d1ac      	bne.n	801d7ac <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801d852:	2009      	movs	r0, #9
 801d854:	f7ff ff7c 	bl	801d750 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d858:	f240 723f 	movw	r2, #1855	; 0x73f
 801d85c:	4920      	ldr	r1, [pc, #128]	; (801d8e0 <tcp_alloc+0x148>)
 801d85e:	2002      	movs	r0, #2
 801d860:	f7fd ff60 	bl	801b724 <memp_malloc_fn>
      if (pcb == NULL) {
 801d864:	4603      	mov	r3, r0
 801d866:	2800      	cmp	r0, #0
 801d868:	d1a0      	bne.n	801d7ac <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801d86a:	2008      	movs	r0, #8
 801d86c:	f7ff ff70 	bl	801d750 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d870:	f240 7245 	movw	r2, #1861	; 0x745
 801d874:	491a      	ldr	r1, [pc, #104]	; (801d8e0 <tcp_alloc+0x148>)
 801d876:	2002      	movs	r0, #2
 801d878:	f7fd ff54 	bl	801b724 <memp_malloc_fn>
        if (pcb == NULL) {
 801d87c:	4603      	mov	r3, r0
 801d87e:	2800      	cmp	r0, #0
 801d880:	d194      	bne.n	801d7ac <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801d882:	062a      	lsls	r2, r5, #24
 801d884:	d42a      	bmi.n	801d8dc <tcp_alloc+0x144>
  if (mprio == 0) {
 801d886:	b1ed      	cbz	r5, 801d8c4 <tcp_alloc+0x12c>
 801d888:	462a      	mov	r2, r5
  mprio--;
 801d88a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d88c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801d88e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d890:	b1c2      	cbz	r2, 801d8c4 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d892:	4815      	ldr	r0, [pc, #84]	; (801d8e8 <tcp_alloc+0x150>)
  inactivity = 0;
 801d894:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d896:	6807      	ldr	r7, [r0, #0]
 801d898:	e005      	b.n	801d8a6 <tcp_alloc+0x10e>
 801d89a:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801d89c:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801d89e:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801d8a0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d8a2:	68d2      	ldr	r2, [r2, #12]
 801d8a4:	b14a      	cbz	r2, 801d8ba <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801d8a6:	7d50      	ldrb	r0, [r2, #21]
 801d8a8:	4288      	cmp	r0, r1
 801d8aa:	d3f6      	bcc.n	801d89a <tcp_alloc+0x102>
 801d8ac:	d1f9      	bne.n	801d8a2 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d8ae:	6a14      	ldr	r4, [r2, #32]
 801d8b0:	eba7 0e04 	sub.w	lr, r7, r4
 801d8b4:	45b6      	cmp	lr, r6
 801d8b6:	d3f4      	bcc.n	801d8a2 <tcp_alloc+0x10a>
 801d8b8:	e7f0      	b.n	801d89c <tcp_alloc+0x104>
  if (inactive != NULL) {
 801d8ba:	b11b      	cbz	r3, 801d8c4 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801d8bc:	2101      	movs	r1, #1
 801d8be:	4618      	mov	r0, r3
 801d8c0:	f7ff fe32 	bl	801d528 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d8c4:	f240 724b 	movw	r2, #1867	; 0x74b
 801d8c8:	4905      	ldr	r1, [pc, #20]	; (801d8e0 <tcp_alloc+0x148>)
 801d8ca:	2002      	movs	r0, #2
 801d8cc:	f7fd ff2a 	bl	801b724 <memp_malloc_fn>
  if (pcb != NULL) {
 801d8d0:	4603      	mov	r3, r0
 801d8d2:	2800      	cmp	r0, #0
 801d8d4:	f47f af6a 	bne.w	801d7ac <tcp_alloc+0x14>
}
 801d8d8:	4618      	mov	r0, r3
 801d8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801d8dc:	227f      	movs	r2, #127	; 0x7f
 801d8de:	e7d4      	b.n	801d88a <tcp_alloc+0xf2>
 801d8e0:	08045238 	.word	0x08045238
 801d8e4:	2002e449 	.word	0x2002e449
 801d8e8:	2002e444 	.word	0x2002e444
 801d8ec:	006ddd00 	.word	0x006ddd00
 801d8f0:	0801daf5 	.word	0x0801daf5
 801d8f4:	0218ffff 	.word	0x0218ffff
 801d8f8:	04300001 	.word	0x04300001
 801d8fc:	08600860 	.word	0x08600860
 801d900:	2002e434 	.word	0x2002e434
 801d904:	2002e44c 	.word	0x2002e44c

0801d908 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801d908:	2040      	movs	r0, #64	; 0x40
 801d90a:	f7ff bf45 	b.w	801d798 <tcp_alloc>
 801d90e:	bf00      	nop

0801d910 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801d910:	2040      	movs	r0, #64	; 0x40
 801d912:	f7ff bf41 	b.w	801d798 <tcp_alloc>
 801d916:	bf00      	nop

0801d918 <tcp_close_shutdown>:
{
 801d918:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801d91a:	4604      	mov	r4, r0
{
 801d91c:	b085      	sub	sp, #20
 801d91e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801d920:	2800      	cmp	r0, #0
 801d922:	d06a      	beq.n	801d9fa <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d924:	7d23      	ldrb	r3, [r4, #20]
 801d926:	b11d      	cbz	r5, 801d930 <tcp_close_shutdown+0x18>
 801d928:	2b04      	cmp	r3, #4
 801d92a:	d00c      	beq.n	801d946 <tcp_close_shutdown+0x2e>
 801d92c:	2b07      	cmp	r3, #7
 801d92e:	d00a      	beq.n	801d946 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801d930:	2b01      	cmp	r3, #1
 801d932:	d06a      	beq.n	801da0a <tcp_close_shutdown+0xf2>
 801d934:	2b02      	cmp	r3, #2
 801d936:	d030      	beq.n	801d99a <tcp_close_shutdown+0x82>
 801d938:	b333      	cbz	r3, 801d988 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801d93a:	4620      	mov	r0, r4
}
 801d93c:	b005      	add	sp, #20
 801d93e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801d942:	f7fe bf3d 	b.w	801c7c0 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d946:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d948:	2a00      	cmp	r2, #0
 801d94a:	d037      	beq.n	801d9bc <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d94c:	8b63      	ldrh	r3, [r4, #26]
 801d94e:	06db      	lsls	r3, r3, #27
 801d950:	f140 8084 	bpl.w	801da5c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d954:	8b21      	ldrh	r1, [r4, #24]
 801d956:	1d20      	adds	r0, r4, #4
 801d958:	8ae2      	ldrh	r2, [r4, #22]
 801d95a:	4623      	mov	r3, r4
 801d95c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801d960:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d962:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d964:	9000      	str	r0, [sp, #0]
 801d966:	4620      	mov	r0, r4
 801d968:	f002 fd62 	bl	8020430 <tcp_rst>
      tcp_pcb_purge(pcb);
 801d96c:	4620      	mov	r0, r4
 801d96e:	f7ff fa6b 	bl	801ce48 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d972:	4a45      	ldr	r2, [pc, #276]	; (801da88 <tcp_close_shutdown+0x170>)
 801d974:	6813      	ldr	r3, [r2, #0]
 801d976:	42a3      	cmp	r3, r4
 801d978:	d030      	beq.n	801d9dc <tcp_close_shutdown+0xc4>
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d030      	beq.n	801d9e0 <tcp_close_shutdown+0xc8>
 801d97e:	68da      	ldr	r2, [r3, #12]
 801d980:	42a2      	cmp	r2, r4
 801d982:	d068      	beq.n	801da56 <tcp_close_shutdown+0x13e>
 801d984:	4613      	mov	r3, r2
 801d986:	e7f8      	b.n	801d97a <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801d988:	8ae3      	ldrh	r3, [r4, #22]
 801d98a:	b9e3      	cbnz	r3, 801d9c6 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801d98c:	4621      	mov	r1, r4
 801d98e:	2002      	movs	r0, #2
 801d990:	f7fd fefe 	bl	801b790 <memp_free>
}
 801d994:	2000      	movs	r0, #0
 801d996:	b005      	add	sp, #20
 801d998:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d99a:	4621      	mov	r1, r4
 801d99c:	483a      	ldr	r0, [pc, #232]	; (801da88 <tcp_close_shutdown+0x170>)
 801d99e:	f7ff fd53 	bl	801d448 <tcp_pcb_remove>
 801d9a2:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9a4:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d9a6:	4a39      	ldr	r2, [pc, #228]	; (801da8c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9a8:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d9aa:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9ac:	d1ee      	bne.n	801d98c <tcp_close_shutdown+0x74>
 801d9ae:	4b38      	ldr	r3, [pc, #224]	; (801da90 <tcp_close_shutdown+0x178>)
 801d9b0:	22d4      	movs	r2, #212	; 0xd4
 801d9b2:	4938      	ldr	r1, [pc, #224]	; (801da94 <tcp_close_shutdown+0x17c>)
 801d9b4:	4838      	ldr	r0, [pc, #224]	; (801da98 <tcp_close_shutdown+0x180>)
 801d9b6:	f008 fccd 	bl	8026354 <iprintf>
 801d9ba:	e7e7      	b.n	801d98c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d9bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d9be:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801d9c2:	d0b5      	beq.n	801d930 <tcp_close_shutdown+0x18>
 801d9c4:	e7c2      	b.n	801d94c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d9c6:	4a35      	ldr	r2, [pc, #212]	; (801da9c <tcp_close_shutdown+0x184>)
 801d9c8:	6813      	ldr	r3, [r2, #0]
 801d9ca:	42a3      	cmp	r3, r4
 801d9cc:	d051      	beq.n	801da72 <tcp_close_shutdown+0x15a>
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d03e      	beq.n	801da50 <tcp_close_shutdown+0x138>
 801d9d2:	68da      	ldr	r2, [r3, #12]
 801d9d4:	42a2      	cmp	r2, r4
 801d9d6:	d039      	beq.n	801da4c <tcp_close_shutdown+0x134>
 801d9d8:	4613      	mov	r3, r2
 801d9da:	e7f8      	b.n	801d9ce <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801d9dc:	68e3      	ldr	r3, [r4, #12]
 801d9de:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801d9e0:	4b2f      	ldr	r3, [pc, #188]	; (801daa0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801d9e2:	2000      	movs	r0, #0
 801d9e4:	4a29      	ldr	r2, [pc, #164]	; (801da8c <tcp_close_shutdown+0x174>)
 801d9e6:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801d9e8:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801d9ea:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801d9ec:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801d9ee:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801d9f0:	d03c      	beq.n	801da6c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9f2:	7d23      	ldrb	r3, [r4, #20]
 801d9f4:	2b01      	cmp	r3, #1
 801d9f6:	d1c9      	bne.n	801d98c <tcp_close_shutdown+0x74>
 801d9f8:	e7d9      	b.n	801d9ae <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801d9fa:	4b25      	ldr	r3, [pc, #148]	; (801da90 <tcp_close_shutdown+0x178>)
 801d9fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801da00:	4928      	ldr	r1, [pc, #160]	; (801daa4 <tcp_close_shutdown+0x18c>)
 801da02:	4825      	ldr	r0, [pc, #148]	; (801da98 <tcp_close_shutdown+0x180>)
 801da04:	f008 fca6 	bl	8026354 <iprintf>
 801da08:	e78c      	b.n	801d924 <tcp_close_shutdown+0xc>
 801da0a:	4927      	ldr	r1, [pc, #156]	; (801daa8 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801da0c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801da0e:	4b23      	ldr	r3, [pc, #140]	; (801da9c <tcp_close_shutdown+0x184>)
 801da10:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801da14:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801da16:	b133      	cbz	r3, 801da26 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801da18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801da1a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801da1c:	bf08      	it	eq
 801da1e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801da20:	68db      	ldr	r3, [r3, #12]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d1f8      	bne.n	801da18 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801da26:	42a9      	cmp	r1, r5
 801da28:	d002      	beq.n	801da30 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801da2a:	f851 3b04 	ldr.w	r3, [r1], #4
 801da2e:	e7f1      	b.n	801da14 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801da30:	4621      	mov	r1, r4
 801da32:	481e      	ldr	r0, [pc, #120]	; (801daac <tcp_close_shutdown+0x194>)
 801da34:	f7ff fd08 	bl	801d448 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801da38:	7d23      	ldrb	r3, [r4, #20]
 801da3a:	2b01      	cmp	r3, #1
 801da3c:	d01c      	beq.n	801da78 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801da3e:	4621      	mov	r1, r4
 801da40:	2003      	movs	r0, #3
 801da42:	f7fd fea5 	bl	801b790 <memp_free>
}
 801da46:	2000      	movs	r0, #0
 801da48:	b005      	add	sp, #20
 801da4a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da4c:	68e2      	ldr	r2, [r4, #12]
 801da4e:	60da      	str	r2, [r3, #12]
 801da50:	2300      	movs	r3, #0
 801da52:	60e3      	str	r3, [r4, #12]
 801da54:	e79a      	b.n	801d98c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801da56:	68e2      	ldr	r2, [r4, #12]
 801da58:	60da      	str	r2, [r3, #12]
 801da5a:	e7c1      	b.n	801d9e0 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801da5c:	4b0c      	ldr	r3, [pc, #48]	; (801da90 <tcp_close_shutdown+0x178>)
 801da5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801da62:	4913      	ldr	r1, [pc, #76]	; (801dab0 <tcp_close_shutdown+0x198>)
 801da64:	480c      	ldr	r0, [pc, #48]	; (801da98 <tcp_close_shutdown+0x180>)
 801da66:	f008 fc75 	bl	8026354 <iprintf>
 801da6a:	e773      	b.n	801d954 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801da6c:	f001 fd9e 	bl	801f5ac <tcp_trigger_input_pcb_close>
 801da70:	e790      	b.n	801d994 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da72:	68e3      	ldr	r3, [r4, #12]
 801da74:	6013      	str	r3, [r2, #0]
 801da76:	e7eb      	b.n	801da50 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801da78:	4b05      	ldr	r3, [pc, #20]	; (801da90 <tcp_close_shutdown+0x178>)
 801da7a:	22df      	movs	r2, #223	; 0xdf
 801da7c:	490d      	ldr	r1, [pc, #52]	; (801dab4 <tcp_close_shutdown+0x19c>)
 801da7e:	4806      	ldr	r0, [pc, #24]	; (801da98 <tcp_close_shutdown+0x180>)
 801da80:	f008 fc68 	bl	8026354 <iprintf>
 801da84:	e7db      	b.n	801da3e <tcp_close_shutdown+0x126>
 801da86:	bf00      	nop
 801da88:	2002e434 	.word	0x2002e434
 801da8c:	2002e438 	.word	0x2002e438
 801da90:	08045238 	.word	0x08045238
 801da94:	08045274 	.word	0x08045274
 801da98:	0802b034 	.word	0x0802b034
 801da9c:	2002e43c 	.word	0x2002e43c
 801daa0:	2002e478 	.word	0x2002e478
 801daa4:	08045814 	.word	0x08045814
 801daa8:	08045924 	.word	0x08045924
 801daac:	2002e440 	.word	0x2002e440
 801dab0:	08045834 	.word	0x08045834
 801dab4:	08045850 	.word	0x08045850

0801dab8 <tcp_close>:
{
 801dab8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801daba:	b158      	cbz	r0, 801dad4 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801dabc:	7d03      	ldrb	r3, [r0, #20]
 801dabe:	2b01      	cmp	r3, #1
 801dac0:	d003      	beq.n	801daca <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801dac2:	8b43      	ldrh	r3, [r0, #26]
 801dac4:	f043 0310 	orr.w	r3, r3, #16
 801dac8:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801daca:	2101      	movs	r1, #1
}
 801dacc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801dad0:	f7ff bf22 	b.w	801d918 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801dad4:	4b04      	ldr	r3, [pc, #16]	; (801dae8 <tcp_close+0x30>)
 801dad6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801dada:	4904      	ldr	r1, [pc, #16]	; (801daec <tcp_close+0x34>)
 801dadc:	4804      	ldr	r0, [pc, #16]	; (801daf0 <tcp_close+0x38>)
 801dade:	f008 fc39 	bl	8026354 <iprintf>
}
 801dae2:	f06f 000f 	mvn.w	r0, #15
 801dae6:	bd08      	pop	{r3, pc}
 801dae8:	08045238 	.word	0x08045238
 801daec:	0804586c 	.word	0x0804586c
 801daf0:	0802b034 	.word	0x0802b034

0801daf4 <tcp_recv_null>:
{
 801daf4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801daf6:	b1c9      	cbz	r1, 801db2c <tcp_recv_null+0x38>
  if (p != NULL) {
 801daf8:	4614      	mov	r4, r2
 801dafa:	4608      	mov	r0, r1
 801dafc:	b13a      	cbz	r2, 801db0e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801dafe:	8911      	ldrh	r1, [r2, #8]
 801db00:	f7fe ffde 	bl	801cac0 <tcp_recved>
    pbuf_free(p);
 801db04:	4620      	mov	r0, r4
 801db06:	f7fe fb5b 	bl	801c1c0 <pbuf_free>
  return ERR_OK;
 801db0a:	2000      	movs	r0, #0
}
 801db0c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801db0e:	b10b      	cbz	r3, 801db14 <tcp_recv_null+0x20>
  return ERR_OK;
 801db10:	4610      	mov	r0, r2
}
 801db12:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801db14:	7d0b      	ldrb	r3, [r1, #20]
 801db16:	2b01      	cmp	r3, #1
 801db18:	d003      	beq.n	801db22 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801db1a:	8b4b      	ldrh	r3, [r1, #26]
 801db1c:	f043 0310 	orr.w	r3, r3, #16
 801db20:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801db22:	2101      	movs	r1, #1
}
 801db24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801db28:	f7ff bef6 	b.w	801d918 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801db2c:	4b04      	ldr	r3, [pc, #16]	; (801db40 <tcp_recv_null+0x4c>)
 801db2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801db32:	4904      	ldr	r1, [pc, #16]	; (801db44 <tcp_recv_null+0x50>)
 801db34:	4804      	ldr	r0, [pc, #16]	; (801db48 <tcp_recv_null+0x54>)
 801db36:	f008 fc0d 	bl	8026354 <iprintf>
 801db3a:	f06f 000f 	mvn.w	r0, #15
}
 801db3e:	bd10      	pop	{r4, pc}
 801db40:	08045238 	.word	0x08045238
 801db44:	08045884 	.word	0x08045884
 801db48:	0802b034 	.word	0x0802b034

0801db4c <tcp_process_refused_data>:
{
 801db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801db4e:	b378      	cbz	r0, 801dbb0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801db50:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801db52:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801db54:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801db58:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801db5a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801db5c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801db5e:	b156      	cbz	r6, 801db76 <tcp_process_refused_data+0x2a>
 801db60:	4601      	mov	r1, r0
 801db62:	462a      	mov	r2, r5
 801db64:	6900      	ldr	r0, [r0, #16]
 801db66:	47b0      	blx	r6
    if (err == ERR_OK) {
 801db68:	b158      	cbz	r0, 801db82 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801db6a:	300d      	adds	r0, #13
 801db6c:	d01d      	beq.n	801dbaa <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801db6e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801db72:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801db76:	8929      	ldrh	r1, [r5, #8]
 801db78:	f7fe ffa2 	bl	801cac0 <tcp_recved>
    pbuf_free(p);
 801db7c:	4628      	mov	r0, r5
 801db7e:	f7fe fb1f 	bl	801c1c0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801db82:	06bb      	lsls	r3, r7, #26
 801db84:	d50f      	bpl.n	801dba6 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801db86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801db88:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801db8c:	d001      	beq.n	801db92 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801db8e:	3301      	adds	r3, #1
 801db90:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801db92:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801db96:	b135      	cbz	r5, 801dba6 <tcp_process_refused_data+0x5a>
 801db98:	2300      	movs	r3, #0
 801db9a:	4621      	mov	r1, r4
 801db9c:	6920      	ldr	r0, [r4, #16]
 801db9e:	461a      	mov	r2, r3
 801dba0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801dba2:	300d      	adds	r0, #13
 801dba4:	d001      	beq.n	801dbaa <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801dba6:	2000      	movs	r0, #0
}
 801dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801dbaa:	f06f 000c 	mvn.w	r0, #12
}
 801dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801dbb0:	4b04      	ldr	r3, [pc, #16]	; (801dbc4 <tcp_process_refused_data+0x78>)
 801dbb2:	f240 6209 	movw	r2, #1545	; 0x609
 801dbb6:	4904      	ldr	r1, [pc, #16]	; (801dbc8 <tcp_process_refused_data+0x7c>)
 801dbb8:	4804      	ldr	r0, [pc, #16]	; (801dbcc <tcp_process_refused_data+0x80>)
 801dbba:	f008 fbcb 	bl	8026354 <iprintf>
 801dbbe:	f06f 000f 	mvn.w	r0, #15
}
 801dbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbc4:	08045238 	.word	0x08045238
 801dbc8:	080458a0 	.word	0x080458a0
 801dbcc:	0802b034 	.word	0x0802b034

0801dbd0 <tcp_fasttmr>:
{
 801dbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801dbd4:	4d1c      	ldr	r5, [pc, #112]	; (801dc48 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801dbd6:	2700      	movs	r7, #0
 801dbd8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801dc50 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801dbdc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801dbde:	4e1b      	ldr	r6, [pc, #108]	; (801dc4c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801dbe0:	3301      	adds	r3, #1
 801dbe2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801dbe4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801dbe8:	b1bc      	cbz	r4, 801dc1a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801dbea:	782a      	ldrb	r2, [r5, #0]
 801dbec:	7fa3      	ldrb	r3, [r4, #30]
 801dbee:	4293      	cmp	r3, r2
 801dbf0:	d015      	beq.n	801dc1e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801dbf2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801dbf4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801dbf6:	07d9      	lsls	r1, r3, #31
 801dbf8:	d41a      	bmi.n	801dc30 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801dbfa:	071a      	lsls	r2, r3, #28
 801dbfc:	d411      	bmi.n	801dc22 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801dbfe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801dc00:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801dc04:	b133      	cbz	r3, 801dc14 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801dc06:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801dc08:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801dc0a:	f7ff ff9f 	bl	801db4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801dc0e:	7833      	ldrb	r3, [r6, #0]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d1e7      	bne.n	801dbe4 <tcp_fasttmr+0x14>
      pcb = next;
 801dc14:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801dc16:	2c00      	cmp	r4, #0
 801dc18:	d1e7      	bne.n	801dbea <tcp_fasttmr+0x1a>
}
 801dc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801dc1e:	68e4      	ldr	r4, [r4, #12]
 801dc20:	e7e2      	b.n	801dbe8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dc22:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801dc26:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dc28:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801dc2a:	f7fe fdc9 	bl	801c7c0 <tcp_close_shutdown_fin>
 801dc2e:	e7e6      	b.n	801dbfe <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801dc30:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801dc34:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801dc36:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801dc38:	f002 fc74 	bl	8020524 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801dc3c:	8b63      	ldrh	r3, [r4, #26]
 801dc3e:	f023 0303 	bic.w	r3, r3, #3
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	8363      	strh	r3, [r4, #26]
 801dc46:	e7d8      	b.n	801dbfa <tcp_fasttmr+0x2a>
 801dc48:	2002e449 	.word	0x2002e449
 801dc4c:	2002e438 	.word	0x2002e438
 801dc50:	2002e434 	.word	0x2002e434

0801dc54 <tcp_tmr>:
{
 801dc54:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801dc56:	f7ff ffbb 	bl	801dbd0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801dc5a:	4a06      	ldr	r2, [pc, #24]	; (801dc74 <tcp_tmr+0x20>)
 801dc5c:	7813      	ldrb	r3, [r2, #0]
 801dc5e:	3301      	adds	r3, #1
 801dc60:	b2db      	uxtb	r3, r3
 801dc62:	7013      	strb	r3, [r2, #0]
 801dc64:	07db      	lsls	r3, r3, #31
 801dc66:	d400      	bmi.n	801dc6a <tcp_tmr+0x16>
}
 801dc68:	bd08      	pop	{r3, pc}
 801dc6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801dc6e:	f7ff b93d 	b.w	801ceec <tcp_slowtmr>
 801dc72:	bf00      	nop
 801dc74:	2002e448 	.word	0x2002e448

0801dc78 <tcp_next_iss>:
{
 801dc78:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801dc7a:	b130      	cbz	r0, 801dc8a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801dc7c:	4b07      	ldr	r3, [pc, #28]	; (801dc9c <tcp_next_iss+0x24>)
 801dc7e:	4a08      	ldr	r2, [pc, #32]	; (801dca0 <tcp_next_iss+0x28>)
 801dc80:	6818      	ldr	r0, [r3, #0]
 801dc82:	6812      	ldr	r2, [r2, #0]
 801dc84:	4410      	add	r0, r2
 801dc86:	6018      	str	r0, [r3, #0]
}
 801dc88:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801dc8a:	4b06      	ldr	r3, [pc, #24]	; (801dca4 <tcp_next_iss+0x2c>)
 801dc8c:	f640 02af 	movw	r2, #2223	; 0x8af
 801dc90:	4905      	ldr	r1, [pc, #20]	; (801dca8 <tcp_next_iss+0x30>)
 801dc92:	4806      	ldr	r0, [pc, #24]	; (801dcac <tcp_next_iss+0x34>)
 801dc94:	f008 fb5e 	bl	8026354 <iprintf>
 801dc98:	e7f0      	b.n	801dc7c <tcp_next_iss+0x4>
 801dc9a:	bf00      	nop
 801dc9c:	20000428 	.word	0x20000428
 801dca0:	2002e444 	.word	0x2002e444
 801dca4:	08045238 	.word	0x08045238
 801dca8:	080458c8 	.word	0x080458c8
 801dcac:	0802b034 	.word	0x0802b034

0801dcb0 <tcp_eff_send_mss_netif>:
{
 801dcb0:	b538      	push	{r3, r4, r5, lr}
 801dcb2:	4605      	mov	r5, r0
 801dcb4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801dcb6:	b172      	cbz	r2, 801dcd6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801dcb8:	b144      	cbz	r4, 801dccc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801dcba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801dcbc:	b133      	cbz	r3, 801dccc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801dcbe:	2b28      	cmp	r3, #40	; 0x28
 801dcc0:	d906      	bls.n	801dcd0 <tcp_eff_send_mss_netif+0x20>
 801dcc2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801dcc4:	b29b      	uxth	r3, r3
 801dcc6:	429d      	cmp	r5, r3
 801dcc8:	bf28      	it	cs
 801dcca:	461d      	movcs	r5, r3
}
 801dccc:	4628      	mov	r0, r5
 801dcce:	bd38      	pop	{r3, r4, r5, pc}
 801dcd0:	2500      	movs	r5, #0
 801dcd2:	4628      	mov	r0, r5
 801dcd4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801dcd6:	4b04      	ldr	r3, [pc, #16]	; (801dce8 <tcp_eff_send_mss_netif+0x38>)
 801dcd8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801dcdc:	4903      	ldr	r1, [pc, #12]	; (801dcec <tcp_eff_send_mss_netif+0x3c>)
 801dcde:	4804      	ldr	r0, [pc, #16]	; (801dcf0 <tcp_eff_send_mss_netif+0x40>)
 801dce0:	f008 fb38 	bl	8026354 <iprintf>
 801dce4:	e7e8      	b.n	801dcb8 <tcp_eff_send_mss_netif+0x8>
 801dce6:	bf00      	nop
 801dce8:	08045238 	.word	0x08045238
 801dcec:	080458e4 	.word	0x080458e4
 801dcf0:	0802b034 	.word	0x0802b034

0801dcf4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801dcf4:	b308      	cbz	r0, 801dd3a <tcp_netif_ip_addr_changed+0x46>
{
 801dcf6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801dcf8:	6803      	ldr	r3, [r0, #0]
 801dcfa:	4604      	mov	r4, r0
 801dcfc:	b903      	cbnz	r3, 801dd00 <tcp_netif_ip_addr_changed+0xc>
}
 801dcfe:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801dd00:	4b0e      	ldr	r3, [pc, #56]	; (801dd3c <tcp_netif_ip_addr_changed+0x48>)
 801dd02:	460d      	mov	r5, r1
 801dd04:	6819      	ldr	r1, [r3, #0]
 801dd06:	f7ff fd01 	bl	801d70c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801dd0a:	4b0d      	ldr	r3, [pc, #52]	; (801dd40 <tcp_netif_ip_addr_changed+0x4c>)
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	6819      	ldr	r1, [r3, #0]
 801dd10:	f7ff fcfc 	bl	801d70c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801dd14:	2d00      	cmp	r5, #0
 801dd16:	d0f2      	beq.n	801dcfe <tcp_netif_ip_addr_changed+0xa>
 801dd18:	682b      	ldr	r3, [r5, #0]
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d0ef      	beq.n	801dcfe <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801dd1e:	4b09      	ldr	r3, [pc, #36]	; (801dd44 <tcp_netif_ip_addr_changed+0x50>)
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d0eb      	beq.n	801dcfe <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801dd26:	6819      	ldr	r1, [r3, #0]
 801dd28:	6822      	ldr	r2, [r4, #0]
 801dd2a:	4291      	cmp	r1, r2
 801dd2c:	d101      	bne.n	801dd32 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801dd2e:	682a      	ldr	r2, [r5, #0]
 801dd30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801dd32:	68db      	ldr	r3, [r3, #12]
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d1f6      	bne.n	801dd26 <tcp_netif_ip_addr_changed+0x32>
}
 801dd38:	bd38      	pop	{r3, r4, r5, pc}
 801dd3a:	4770      	bx	lr
 801dd3c:	2002e434 	.word	0x2002e434
 801dd40:	2002e43c 	.word	0x2002e43c
 801dd44:	2002e440 	.word	0x2002e440

0801dd48 <tcp_free_ooseq>:
{
 801dd48:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801dd4a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801dd4c:	b16c      	cbz	r4, 801dd6a <tcp_free_ooseq+0x22>
 801dd4e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801dd50:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801dd52:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801dd54:	6868      	ldr	r0, [r5, #4]
 801dd56:	b108      	cbz	r0, 801dd5c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801dd58:	f7fe fa32 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801dd5c:	4629      	mov	r1, r5
 801dd5e:	2004      	movs	r0, #4
 801dd60:	f7fd fd16 	bl	801b790 <memp_free>
  while (seg != NULL) {
 801dd64:	2c00      	cmp	r4, #0
 801dd66:	d1f3      	bne.n	801dd50 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801dd68:	6774      	str	r4, [r6, #116]	; 0x74
}
 801dd6a:	bd70      	pop	{r4, r5, r6, pc}

0801dd6c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801dd6e:	4605      	mov	r5, r0
{
 801dd70:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801dd72:	2800      	cmp	r0, #0
 801dd74:	d03e      	beq.n	801ddf4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801dd76:	68eb      	ldr	r3, [r5, #12]
 801dd78:	8998      	ldrh	r0, [r3, #12]
 801dd7a:	f7fc f9e5 	bl	801a148 <lwip_htons>
 801dd7e:	07c2      	lsls	r2, r0, #31
 801dd80:	d432      	bmi.n	801dde8 <tcp_oos_insert_segment+0x7c>
 801dd82:	4e20      	ldr	r6, [pc, #128]	; (801de04 <tcp_oos_insert_segment+0x98>)
 801dd84:	e005      	b.n	801dd92 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801dd86:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801dd88:	4620      	mov	r0, r4
 801dd8a:	f7fe ff95 	bl	801ccb8 <tcp_seg_free>
    while (next &&
 801dd8e:	463c      	mov	r4, r7
 801dd90:	b1ef      	cbz	r7, 801ddce <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801dd92:	68e1      	ldr	r1, [r4, #12]
 801dd94:	8923      	ldrh	r3, [r4, #8]
 801dd96:	6837      	ldr	r7, [r6, #0]
 801dd98:	892a      	ldrh	r2, [r5, #8]
 801dd9a:	6848      	ldr	r0, [r1, #4]
 801dd9c:	443a      	add	r2, r7
 801dd9e:	4403      	add	r3, r0
 801dda0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	db15      	blt.n	801ddd2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801dda6:	8988      	ldrh	r0, [r1, #12]
 801dda8:	f7fc f9ce 	bl	801a148 <lwip_htons>
 801ddac:	07c3      	lsls	r3, r0, #31
 801ddae:	d5ea      	bpl.n	801dd86 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ddb0:	68eb      	ldr	r3, [r5, #12]
 801ddb2:	2001      	movs	r0, #1
 801ddb4:	899f      	ldrh	r7, [r3, #12]
 801ddb6:	f7fc f9c7 	bl	801a148 <lwip_htons>
 801ddba:	68eb      	ldr	r3, [r5, #12]
 801ddbc:	4338      	orrs	r0, r7
      next = next->next;
 801ddbe:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ddc0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f7fe ff78 	bl	801ccb8 <tcp_seg_free>
    while (next &&
 801ddc8:	463c      	mov	r4, r7
 801ddca:	2f00      	cmp	r7, #0
 801ddcc:	d1e1      	bne.n	801dd92 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801ddce:	602c      	str	r4, [r5, #0]
}
 801ddd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ddd2:	1a12      	subs	r2, r2, r0
    if (next &&
 801ddd4:	2a00      	cmp	r2, #0
 801ddd6:	ddfa      	ble.n	801ddce <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ddd8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801ddda:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801dddc:	b289      	uxth	r1, r1
 801ddde:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801dde0:	f7fe f8d6 	bl	801bf90 <pbuf_realloc>
  cseg->next = next;
 801dde4:	602c      	str	r4, [r5, #0]
}
 801dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801dde8:	4620      	mov	r0, r4
    next = NULL;
 801ddea:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801ddec:	f7fe ff52 	bl	801cc94 <tcp_segs_free>
  cseg->next = next;
 801ddf0:	602c      	str	r4, [r5, #0]
}
 801ddf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ddf4:	4b04      	ldr	r3, [pc, #16]	; (801de08 <tcp_oos_insert_segment+0x9c>)
 801ddf6:	f240 421f 	movw	r2, #1055	; 0x41f
 801ddfa:	4904      	ldr	r1, [pc, #16]	; (801de0c <tcp_oos_insert_segment+0xa0>)
 801ddfc:	4804      	ldr	r0, [pc, #16]	; (801de10 <tcp_oos_insert_segment+0xa4>)
 801ddfe:	f008 faa9 	bl	8026354 <iprintf>
 801de02:	e7b8      	b.n	801dd76 <tcp_oos_insert_segment+0xa>
 801de04:	2002e474 	.word	0x2002e474
 801de08:	08045934 	.word	0x08045934
 801de0c:	08045968 	.word	0x08045968
 801de10:	0802b034 	.word	0x0802b034

0801de14 <tcp_input_delayed_close>:
{
 801de14:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801de16:	4604      	mov	r4, r0
 801de18:	b1c8      	cbz	r0, 801de4e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801de1a:	4b11      	ldr	r3, [pc, #68]	; (801de60 <tcp_input_delayed_close+0x4c>)
 801de1c:	781b      	ldrb	r3, [r3, #0]
 801de1e:	f013 0310 	ands.w	r3, r3, #16
 801de22:	d101      	bne.n	801de28 <tcp_input_delayed_close+0x14>
  return 0;
 801de24:	4618      	mov	r0, r3
}
 801de26:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801de28:	8b63      	ldrh	r3, [r4, #26]
 801de2a:	06db      	lsls	r3, r3, #27
 801de2c:	d406      	bmi.n	801de3c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801de2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801de32:	b11b      	cbz	r3, 801de3c <tcp_input_delayed_close+0x28>
 801de34:	f06f 010e 	mvn.w	r1, #14
 801de38:	6920      	ldr	r0, [r4, #16]
 801de3a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801de3c:	4621      	mov	r1, r4
 801de3e:	4809      	ldr	r0, [pc, #36]	; (801de64 <tcp_input_delayed_close+0x50>)
 801de40:	f7ff fb02 	bl	801d448 <tcp_pcb_remove>
    tcp_free(pcb);
 801de44:	4620      	mov	r0, r4
 801de46:	f7fe fcfb 	bl	801c840 <tcp_free>
 801de4a:	2001      	movs	r0, #1
}
 801de4c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801de4e:	4b06      	ldr	r3, [pc, #24]	; (801de68 <tcp_input_delayed_close+0x54>)
 801de50:	f240 225a 	movw	r2, #602	; 0x25a
 801de54:	4905      	ldr	r1, [pc, #20]	; (801de6c <tcp_input_delayed_close+0x58>)
 801de56:	4806      	ldr	r0, [pc, #24]	; (801de70 <tcp_input_delayed_close+0x5c>)
 801de58:	f008 fa7c 	bl	8026354 <iprintf>
 801de5c:	e7dd      	b.n	801de1a <tcp_input_delayed_close+0x6>
 801de5e:	bf00      	nop
 801de60:	2002e470 	.word	0x2002e470
 801de64:	2002e434 	.word	0x2002e434
 801de68:	08045934 	.word	0x08045934
 801de6c:	08045990 	.word	0x08045990
 801de70:	0802b034 	.word	0x0802b034

0801de74 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de78:	b083      	sub	sp, #12
 801de7a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801de7c:	2900      	cmp	r1, #0
 801de7e:	d03d      	beq.n	801defc <tcp_free_acked_segments.constprop.0+0x88>
 801de80:	4607      	mov	r7, r0
 801de82:	460c      	mov	r4, r1
 801de84:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801df4c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801de88:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801df40 <tcp_free_acked_segments.constprop.0+0xcc>
 801de8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801df50 <tcp_free_acked_segments.constprop.0+0xdc>
 801de90:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801df48 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801de94:	68e3      	ldr	r3, [r4, #12]
 801de96:	6858      	ldr	r0, [r3, #4]
 801de98:	f7fc f95a 	bl	801a150 <lwip_htonl>
 801de9c:	68e3      	ldr	r3, [r4, #12]
 801de9e:	4605      	mov	r5, r0
 801dea0:	8926      	ldrh	r6, [r4, #8]
 801dea2:	8998      	ldrh	r0, [r3, #12]
 801dea4:	f7fc f950 	bl	801a148 <lwip_htons>
 801dea8:	f8d8 3000 	ldr.w	r3, [r8]
 801deac:	f010 0003 	ands.w	r0, r0, #3
 801deb0:	eba5 0503 	sub.w	r5, r5, r3
 801deb4:	bf18      	it	ne
 801deb6:	2001      	movne	r0, #1
 801deb8:	4435      	add	r5, r6
 801deba:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801debc:	2800      	cmp	r0, #0
 801debe:	dc37      	bgt.n	801df30 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801dec0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801dec4:	f7fe f990 	bl	801c1e8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801dec8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801decc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801dece:	4298      	cmp	r0, r3
 801ded0:	d824      	bhi.n	801df1c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ded2:	491a      	ldr	r1, [pc, #104]	; (801df3c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ded4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ded6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801ded8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801deda:	880d      	ldrh	r5, [r1, #0]
 801dedc:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801dede:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801dee2:	1953      	adds	r3, r2, r5
 801dee4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801dee6:	f7fe fee7 	bl	801ccb8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801deea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801deee:	b11b      	cbz	r3, 801def8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801def0:	9b01      	ldr	r3, [sp, #4]
 801def2:	ea56 0503 	orrs.w	r5, r6, r3
 801def6:	d006      	beq.n	801df06 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801def8:	2e00      	cmp	r6, #0
 801defa:	d1cb      	bne.n	801de94 <tcp_free_acked_segments.constprop.0+0x20>
 801defc:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801defe:	4628      	mov	r0, r5
 801df00:	b003      	add	sp, #12
 801df02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801df06:	4b0e      	ldr	r3, [pc, #56]	; (801df40 <tcp_free_acked_segments.constprop.0+0xcc>)
 801df08:	f240 4261 	movw	r2, #1121	; 0x461
 801df0c:	490d      	ldr	r1, [pc, #52]	; (801df44 <tcp_free_acked_segments.constprop.0+0xd0>)
 801df0e:	480e      	ldr	r0, [pc, #56]	; (801df48 <tcp_free_acked_segments.constprop.0+0xd4>)
 801df10:	f008 fa20 	bl	8026354 <iprintf>
}
 801df14:	4628      	mov	r0, r5
 801df16:	b003      	add	sp, #12
 801df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801df1c:	465b      	mov	r3, fp
 801df1e:	f240 4257 	movw	r2, #1111	; 0x457
 801df22:	4651      	mov	r1, sl
 801df24:	4648      	mov	r0, r9
 801df26:	f008 fa15 	bl	8026354 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801df2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801df2e:	e7d0      	b.n	801ded2 <tcp_free_acked_segments.constprop.0+0x5e>
 801df30:	4625      	mov	r5, r4
}
 801df32:	4628      	mov	r0, r5
 801df34:	b003      	add	sp, #12
 801df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3a:	bf00      	nop
 801df3c:	2002e468 	.word	0x2002e468
 801df40:	08045934 	.word	0x08045934
 801df44:	080459e0 	.word	0x080459e0
 801df48:	0802b034 	.word	0x0802b034
 801df4c:	2002e450 	.word	0x2002e450
 801df50:	080459b8 	.word	0x080459b8

0801df54 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801df54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801df58:	4604      	mov	r4, r0
 801df5a:	2800      	cmp	r0, #0
 801df5c:	f000 8200 	beq.w	801e360 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801df60:	7d23      	ldrb	r3, [r4, #20]
 801df62:	2b03      	cmp	r3, #3
 801df64:	f240 811e 	bls.w	801e1a4 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801df68:	4bb4      	ldr	r3, [pc, #720]	; (801e23c <tcp_receive+0x2e8>)
 801df6a:	781b      	ldrb	r3, [r3, #0]
 801df6c:	06dd      	lsls	r5, r3, #27
 801df6e:	f100 8097 	bmi.w	801e0a0 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801df72:	4fb3      	ldr	r7, [pc, #716]	; (801e240 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801df74:	4eb3      	ldr	r6, [pc, #716]	; (801e244 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801df76:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801df78:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801df7a:	2900      	cmp	r1, #0
 801df7c:	d07f      	beq.n	801e07e <tcp_receive+0x12a>
 801df7e:	7d22      	ldrb	r2, [r4, #20]
 801df80:	2a06      	cmp	r2, #6
 801df82:	d87c      	bhi.n	801e07e <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801df84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801df86:	eba2 0803 	sub.w	r8, r2, r3
 801df8a:	f1b8 0f01 	cmp.w	r8, #1
 801df8e:	d405      	bmi.n	801df9c <tcp_receive+0x48>
 801df90:	1c50      	adds	r0, r2, #1
 801df92:	1ac0      	subs	r0, r0, r3
 801df94:	1a41      	subs	r1, r0, r1
 801df96:	2900      	cmp	r1, #0
 801df98:	f340 81f3 	ble.w	801e382 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801df9c:	1a99      	subs	r1, r3, r2
 801df9e:	2900      	cmp	r1, #0
 801dfa0:	f2c0 81ea 	blt.w	801e378 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dfa4:	f103 0c01 	add.w	ip, r3, #1
 801dfa8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801dfaa:	ebac 0102 	sub.w	r1, ip, r2
 801dfae:	1a09      	subs	r1, r1, r0
 801dfb0:	2900      	cmp	r1, #0
 801dfb2:	dc39      	bgt.n	801e028 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801dfb4:	429a      	cmp	r2, r3
 801dfb6:	f000 8470 	beq.w	801e89a <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801dfba:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801dfbc:	2d00      	cmp	r5, #0
 801dfbe:	f000 8378 	beq.w	801e6b2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801dfc2:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801dfc4:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801dfc8:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801dfcc:	6842      	ldr	r2, [r0, #4]
 801dfce:	429a      	cmp	r2, r3
 801dfd0:	d019      	beq.n	801e006 <tcp_receive+0xb2>
              if (prev == NULL) {
 801dfd2:	f1b8 0f00 	cmp.w	r8, #0
 801dfd6:	f000 815b 	beq.w	801e290 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801dfda:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801dfde:	6849      	ldr	r1, [r1, #4]
 801dfe0:	ebae 0101 	sub.w	r1, lr, r1
 801dfe4:	2900      	cmp	r1, #0
 801dfe6:	db04      	blt.n	801dff2 <tcp_receive+0x9e>
 801dfe8:	ebac 0102 	sub.w	r1, ip, r2
 801dfec:	2900      	cmp	r1, #0
 801dfee:	f340 8369 	ble.w	801e6c4 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801dff2:	6829      	ldr	r1, [r5, #0]
 801dff4:	46a8      	mov	r8, r5
 801dff6:	2900      	cmp	r1, #0
 801dff8:	f000 8159 	beq.w	801e2ae <tcp_receive+0x35a>
 801dffc:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801dffe:	68e8      	ldr	r0, [r5, #12]
 801e000:	6842      	ldr	r2, [r0, #4]
 801e002:	429a      	cmp	r2, r3
 801e004:	d1e5      	bne.n	801dfd2 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801e006:	4890      	ldr	r0, [pc, #576]	; (801e248 <tcp_receive+0x2f4>)
 801e008:	892b      	ldrh	r3, [r5, #8]
 801e00a:	8902      	ldrh	r2, [r0, #8]
 801e00c:	429a      	cmp	r2, r3
 801e00e:	d90b      	bls.n	801e028 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e010:	f7fe fe70 	bl	801ccf4 <tcp_seg_copy>
                if (cseg != NULL) {
 801e014:	b140      	cbz	r0, 801e028 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801e016:	f1b8 0f00 	cmp.w	r8, #0
 801e01a:	f000 8414 	beq.w	801e846 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801e01e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801e022:	4629      	mov	r1, r5
 801e024:	f7ff fea2 	bl	801dd6c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e028:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801e02a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801e02e:	f002 ba47 	b.w	80204c0 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801e032:	4f83      	ldr	r7, [pc, #524]	; (801e240 <tcp_receive+0x2ec>)
 801e034:	8839      	ldrh	r1, [r7, #0]
 801e036:	2900      	cmp	r1, #0
 801e038:	f040 8116 	bne.w	801e268 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e03c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e03e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e040:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801e044:	4470      	add	r0, lr
 801e046:	4560      	cmp	r0, ip
 801e048:	f040 810e 	bne.w	801e268 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801e04c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801e04e:	0400      	lsls	r0, r0, #16
 801e050:	f100 810a 	bmi.w	801e268 <tcp_receive+0x314>
 801e054:	4590      	cmp	r8, r2
 801e056:	f040 8107 	bne.w	801e268 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e05a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801e05e:	28ff      	cmp	r0, #255	; 0xff
 801e060:	f000 8393 	beq.w	801e78a <tcp_receive+0x836>
                ++pcb->dupacks;
 801e064:	3001      	adds	r0, #1
 801e066:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801e068:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801e06a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801e06e:	f200 838c 	bhi.w	801e78a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801e072:	f000 8396 	beq.w	801e7a2 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e076:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e078:	2800      	cmp	r0, #0
 801e07a:	f040 80b6 	bne.w	801e1ea <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e07e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e080:	1a99      	subs	r1, r3, r2
 801e082:	2900      	cmp	r1, #0
 801e084:	db06      	blt.n	801e094 <tcp_receive+0x140>
 801e086:	f1c2 0201 	rsb	r2, r2, #1
 801e08a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e08c:	1a52      	subs	r2, r2, r1
 801e08e:	4413      	add	r3, r2
 801e090:	2b00      	cmp	r3, #0
 801e092:	dd03      	ble.n	801e09c <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801e094:	8b63      	ldrh	r3, [r4, #26]
 801e096:	f043 0302 	orr.w	r3, r3, #2
 801e09a:	8363      	strh	r3, [r4, #26]
}
 801e09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e0a0:	4e68      	ldr	r6, [pc, #416]	; (801e244 <tcp_receive+0x2f0>)
 801e0a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e0a4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e0a6:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e0aa:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e0ac:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e0b0:	2900      	cmp	r1, #0
 801e0b2:	db7f      	blt.n	801e1b4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e0b4:	4d65      	ldr	r5, [pc, #404]	; (801e24c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e0b6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e0b8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e0ba:	f000 80d9 	beq.w	801e270 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e0be:	4594      	cmp	ip, r2
 801e0c0:	f000 80df 	beq.w	801e282 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e0c4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801e0c8:	eba2 0108 	sub.w	r1, r2, r8
 801e0cc:	2900      	cmp	r1, #0
 801e0ce:	ddb0      	ble.n	801e032 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e0d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e0d2:	1ad3      	subs	r3, r2, r3
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	dc7d      	bgt.n	801e1d4 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801e0d8:	8b63      	ldrh	r3, [r4, #26]
 801e0da:	0758      	lsls	r0, r3, #29
 801e0dc:	d509      	bpl.n	801e0f2 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801e0de:	f023 0304 	bic.w	r3, r3, #4
 801e0e2:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801e0e4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e0e8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e0f2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801e0f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801e0f8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e0fa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801e0fe:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e100:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801e104:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801e106:	f04f 0300 	mov.w	r3, #0
 801e10a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801e10e:	d913      	bls.n	801e138 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801e110:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e114:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801e116:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801e11a:	429a      	cmp	r2, r3
 801e11c:	f200 81c9 	bhi.w	801e4b2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e120:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801e124:	4411      	add	r1, r2
 801e126:	b289      	uxth	r1, r1
 801e128:	428a      	cmp	r2, r1
 801e12a:	f200 82a9 	bhi.w	801e680 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e12e:	428b      	cmp	r3, r1
 801e130:	f240 82a8 	bls.w	801e684 <tcp_receive+0x730>
 801e134:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e138:	4620      	mov	r0, r4
 801e13a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801e13e:	f7ff fe99 	bl	801de74 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e142:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e144:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e146:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e148:	4620      	mov	r0, r4
 801e14a:	f7ff fe93 	bl	801de74 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801e14e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e150:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801e152:	fab2 f382 	clz	r3, r2
 801e156:	095b      	lsrs	r3, r3, #5
 801e158:	425b      	negs	r3, r3
 801e15a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801e15c:	2300      	movs	r3, #0
 801e15e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801e160:	2800      	cmp	r0, #0
 801e162:	f000 81a3 	beq.w	801e4ac <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e166:	4b3a      	ldr	r3, [pc, #232]	; (801e250 <tcp_receive+0x2fc>)
 801e168:	8819      	ldrh	r1, [r3, #0]
 801e16a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801e16e:	440b      	add	r3, r1
 801e170:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801e174:	8b63      	ldrh	r3, [r4, #26]
 801e176:	0519      	lsls	r1, r3, #20
 801e178:	f140 80fa 	bpl.w	801e370 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801e17c:	2a00      	cmp	r2, #0
 801e17e:	f000 81af 	beq.w	801e4e0 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e182:	68d3      	ldr	r3, [r2, #12]
 801e184:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e186:	6858      	ldr	r0, [r3, #4]
 801e188:	f7fb ffe2 	bl	801a150 <lwip_htonl>
 801e18c:	1a38      	subs	r0, r7, r0
 801e18e:	2800      	cmp	r0, #0
 801e190:	f300 80ee 	bgt.w	801e370 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801e194:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e196:	4f2a      	ldr	r7, [pc, #168]	; (801e240 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801e198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e19c:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801e19e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e1a0:	6833      	ldr	r3, [r6, #0]
 801e1a2:	e01d      	b.n	801e1e0 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e1a4:	4b2b      	ldr	r3, [pc, #172]	; (801e254 <tcp_receive+0x300>)
 801e1a6:	f240 427c 	movw	r2, #1148	; 0x47c
 801e1aa:	492b      	ldr	r1, [pc, #172]	; (801e258 <tcp_receive+0x304>)
 801e1ac:	482b      	ldr	r0, [pc, #172]	; (801e25c <tcp_receive+0x308>)
 801e1ae:	f008 f8d1 	bl	8026354 <iprintf>
 801e1b2:	e6d9      	b.n	801df68 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e1b4:	4a2a      	ldr	r2, [pc, #168]	; (801e260 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e1b6:	4d25      	ldr	r5, [pc, #148]	; (801e24c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e1b8:	6812      	ldr	r2, [r2, #0]
 801e1ba:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e1bc:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e1be:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e1c2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e1c6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801e1c8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e1cc:	bf38      	it	cc
 801e1ce:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801e1d2:	e777      	b.n	801e0c4 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e1d4:	4f1a      	ldr	r7, [pc, #104]	; (801e240 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	f002 f972 	bl	80204c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e1dc:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e1de:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e1e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e1e2:	2800      	cmp	r0, #0
 801e1e4:	f43f aec9 	beq.w	801df7a <tcp_receive+0x26>
 801e1e8:	682a      	ldr	r2, [r5, #0]
 801e1ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801e1ec:	1aaa      	subs	r2, r5, r2
 801e1ee:	2a00      	cmp	r2, #0
 801e1f0:	f6bf aec3 	bge.w	801df7a <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801e1f4:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e1f8:	b280      	uxth	r0, r0
 801e1fa:	4a1a      	ldr	r2, [pc, #104]	; (801e264 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801e1fc:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e200:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801e204:	ebae 020c 	sub.w	r2, lr, ip
 801e208:	1a12      	subs	r2, r2, r0
 801e20a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801e20c:	4415      	add	r5, r2
      if (m < 0) {
 801e20e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801e212:	b22d      	sxth	r5, r5
 801e214:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801e216:	d003      	beq.n	801e220 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801e218:	ebac 0c0e 	sub.w	ip, ip, lr
 801e21c:	4460      	add	r0, ip
 801e21e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801e220:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e224:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801e228:	4410      	add	r0, r2
      pcb->rttest = 0;
 801e22a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801e22c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801e22e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e230:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801e234:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e236:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801e23a:	e69e      	b.n	801df7a <tcp_receive+0x26>
 801e23c:	2002e454 	.word	0x2002e454
 801e240:	2002e48e 	.word	0x2002e48e
 801e244:	2002e474 	.word	0x2002e474
 801e248:	2002e458 	.word	0x2002e458
 801e24c:	2002e450 	.word	0x2002e450
 801e250:	2002e468 	.word	0x2002e468
 801e254:	08045934 	.word	0x08045934
 801e258:	08045a1c 	.word	0x08045a1c
 801e25c:	0802b034 	.word	0x0802b034
 801e260:	2002e480 	.word	0x2002e480
 801e264:	2002e444 	.word	0x2002e444
        pcb->dupacks = 0;
 801e268:	2200      	movs	r2, #0
 801e26a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e26e:	e7b7      	b.n	801e1e0 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e270:	ebac 0102 	sub.w	r1, ip, r2
 801e274:	2900      	cmp	r1, #0
 801e276:	f6bf af22 	bge.w	801e0be <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e27a:	49ac      	ldr	r1, [pc, #688]	; (801e52c <tcp_receive+0x5d8>)
 801e27c:	6809      	ldr	r1, [r1, #0]
 801e27e:	89c9      	ldrh	r1, [r1, #14]
 801e280:	e79d      	b.n	801e1be <tcp_receive+0x26a>
 801e282:	49aa      	ldr	r1, [pc, #680]	; (801e52c <tcp_receive+0x5d8>)
 801e284:	6809      	ldr	r1, [r1, #0]
 801e286:	89c9      	ldrh	r1, [r1, #14]
 801e288:	458e      	cmp	lr, r1
 801e28a:	f4bf af1b 	bcs.w	801e0c4 <tcp_receive+0x170>
 801e28e:	e796      	b.n	801e1be <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e290:	1a99      	subs	r1, r3, r2
 801e292:	2900      	cmp	r1, #0
 801e294:	f6bf aead 	bge.w	801dff2 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e298:	48a5      	ldr	r0, [pc, #660]	; (801e530 <tcp_receive+0x5dc>)
 801e29a:	f7fe fd2b 	bl	801ccf4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801e29e:	2800      	cmp	r0, #0
 801e2a0:	f43f aec2 	beq.w	801e028 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801e2a4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801e2a6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e2a8:	f7ff fd60 	bl	801dd6c <tcp_oos_insert_segment>
 801e2ac:	e6bc      	b.n	801e028 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e2ae:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	f77f aeb9 	ble.w	801e028 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e2b6:	8980      	ldrh	r0, [r0, #12]
 801e2b8:	f7fb ff46 	bl	801a148 <lwip_htons>
 801e2bc:	07c1      	lsls	r1, r0, #31
 801e2be:	f53f aeb3 	bmi.w	801e028 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801e2c2:	489b      	ldr	r0, [pc, #620]	; (801e530 <tcp_receive+0x5dc>)
 801e2c4:	f7fe fd16 	bl	801ccf4 <tcp_seg_copy>
 801e2c8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801e2ca:	2800      	cmp	r0, #0
 801e2cc:	f43f aeac 	beq.w	801e028 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e2d0:	68eb      	ldr	r3, [r5, #12]
 801e2d2:	892a      	ldrh	r2, [r5, #8]
 801e2d4:	6859      	ldr	r1, [r3, #4]
 801e2d6:	6833      	ldr	r3, [r6, #0]
 801e2d8:	440a      	add	r2, r1
 801e2da:	1ad2      	subs	r2, r2, r3
 801e2dc:	2a00      	cmp	r2, #0
 801e2de:	dd05      	ble.n	801e2ec <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e2e0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801e2e2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e2e4:	b299      	uxth	r1, r3
 801e2e6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801e2e8:	f7fd fe52 	bl	801bf90 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e2ec:	6832      	ldr	r2, [r6, #0]
 801e2ee:	883b      	ldrh	r3, [r7, #0]
 801e2f0:	4413      	add	r3, r2
 801e2f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e2f4:	1a9b      	subs	r3, r3, r2
 801e2f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e2f8:	1a9b      	subs	r3, r3, r2
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	f77f ae94 	ble.w	801e028 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e300:	682b      	ldr	r3, [r5, #0]
 801e302:	68db      	ldr	r3, [r3, #12]
 801e304:	8998      	ldrh	r0, [r3, #12]
 801e306:	f7fb ff1f 	bl	801a148 <lwip_htons>
 801e30a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e30c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e30e:	f100 82b1 	bmi.w	801e874 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e312:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e314:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801e316:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e318:	1a89      	subs	r1, r1, r2
 801e31a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e31c:	4411      	add	r1, r2
 801e31e:	b289      	uxth	r1, r1
 801e320:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e322:	f7fd fe35 	bl	801bf90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e326:	682b      	ldr	r3, [r5, #0]
 801e328:	891d      	ldrh	r5, [r3, #8]
 801e32a:	68db      	ldr	r3, [r3, #12]
 801e32c:	8998      	ldrh	r0, [r3, #12]
 801e32e:	f7fb ff0b 	bl	801a148 <lwip_htons>
 801e332:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e336:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801e338:	bf18      	it	ne
 801e33a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e33c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801e33e:	442b      	add	r3, r5
 801e340:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e342:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801e344:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e348:	4413      	add	r3, r2
 801e34a:	4299      	cmp	r1, r3
 801e34c:	f43f ae6c 	beq.w	801e028 <tcp_receive+0xd4>
 801e350:	4b78      	ldr	r3, [pc, #480]	; (801e534 <tcp_receive+0x5e0>)
 801e352:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e356:	4978      	ldr	r1, [pc, #480]	; (801e538 <tcp_receive+0x5e4>)
 801e358:	4878      	ldr	r0, [pc, #480]	; (801e53c <tcp_receive+0x5e8>)
 801e35a:	f007 fffb 	bl	8026354 <iprintf>
 801e35e:	e663      	b.n	801e028 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e360:	4b74      	ldr	r3, [pc, #464]	; (801e534 <tcp_receive+0x5e0>)
 801e362:	f240 427b 	movw	r2, #1147	; 0x47b
 801e366:	4976      	ldr	r1, [pc, #472]	; (801e540 <tcp_receive+0x5ec>)
 801e368:	4874      	ldr	r0, [pc, #464]	; (801e53c <tcp_receive+0x5e8>)
 801e36a:	f007 fff3 	bl	8026354 <iprintf>
 801e36e:	e5f7      	b.n	801df60 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e370:	4f74      	ldr	r7, [pc, #464]	; (801e544 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e372:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e374:	8839      	ldrh	r1, [r7, #0]
 801e376:	e733      	b.n	801e1e0 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801e378:	8b63      	ldrh	r3, [r4, #26]
 801e37a:	f043 0302 	orr.w	r3, r3, #2
 801e37e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e380:	e652      	b.n	801e028 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801e382:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e530 <tcp_receive+0x5dc>
 801e386:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e38a:	2d00      	cmp	r5, #0
 801e38c:	f000 8170 	beq.w	801e670 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e390:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e394:	4598      	cmp	r8, r3
 801e396:	f200 80c0 	bhi.w	801e51a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e39a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801e39e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e3a2:	891a      	ldrh	r2, [r3, #8]
 801e3a4:	4542      	cmp	r2, r8
 801e3a6:	f0c0 80ad 	bcc.w	801e504 <tcp_receive+0x5b0>
      inseg.len -= off;
 801e3aa:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e3ae:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801e3b2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e3b6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801e3b8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801e3bc:	896b      	ldrh	r3, [r5, #10]
 801e3be:	4543      	cmp	r3, r8
 801e3c0:	d20a      	bcs.n	801e3d8 <tcp_receive+0x484>
        p->len = 0;
 801e3c2:	2100      	movs	r1, #0
        off -= p->len;
 801e3c4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801e3c8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801e3ca:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801e3cc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801e3ce:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801e3d2:	896b      	ldrh	r3, [r5, #10]
 801e3d4:	4543      	cmp	r3, r8
 801e3d6:	d3f5      	bcc.n	801e3c4 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801e3d8:	4641      	mov	r1, r8
 801e3da:	4628      	mov	r0, r5
 801e3dc:	f7fd fe64 	bl	801c0a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e3e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e3e6:	6033      	str	r3, [r6, #0]
 801e3e8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e3ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	f43f ae1b 	beq.w	801e028 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801e3f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e3f6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801e3fa:	8998      	ldrh	r0, [r3, #12]
 801e3fc:	f7fb fea4 	bl	801a148 <lwip_htons>
 801e400:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801e404:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801e406:	bf18      	it	ne
 801e408:	2301      	movne	r3, #1
 801e40a:	442b      	add	r3, r5
 801e40c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801e40e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801e410:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801e412:	f0c0 8181 	bcc.w	801e718 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801e416:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e418:	2b00      	cmp	r3, #0
 801e41a:	f000 80a0 	beq.w	801e55e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e41e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e422:	8998      	ldrh	r0, [r3, #12]
 801e424:	f7fb fe90 	bl	801a148 <lwip_htons>
 801e428:	07c2      	lsls	r2, r0, #31
 801e42a:	f100 8095 	bmi.w	801e558 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801e42e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801e430:	b955      	cbnz	r5, 801e448 <tcp_receive+0x4f4>
 801e432:	e1f4      	b.n	801e81e <tcp_receive+0x8ca>
              next = next->next;
 801e434:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801e438:	4628      	mov	r0, r5
 801e43a:	f7fe fc3d 	bl	801ccb8 <tcp_seg_free>
            while (next &&
 801e43e:	4645      	mov	r5, r8
 801e440:	f1b8 0f00 	cmp.w	r8, #0
 801e444:	f000 81eb 	beq.w	801e81e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e448:	68e8      	ldr	r0, [r5, #12]
 801e44a:	883a      	ldrh	r2, [r7, #0]
 801e44c:	f8d6 e000 	ldr.w	lr, [r6]
 801e450:	892b      	ldrh	r3, [r5, #8]
 801e452:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801e456:	eb02 010e 	add.w	r1, r2, lr
 801e45a:	4463      	add	r3, ip
 801e45c:	1acb      	subs	r3, r1, r3
            while (next &&
 801e45e:	2b00      	cmp	r3, #0
 801e460:	f2c0 81a5 	blt.w	801e7ae <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e464:	8980      	ldrh	r0, [r0, #12]
 801e466:	f7fb fe6f 	bl	801a148 <lwip_htons>
 801e46a:	07c3      	lsls	r3, r0, #31
 801e46c:	d5e2      	bpl.n	801e434 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e46e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e472:	8998      	ldrh	r0, [r3, #12]
 801e474:	f7fb fe68 	bl	801a148 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e478:	0780      	lsls	r0, r0, #30
 801e47a:	d4db      	bmi.n	801e434 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e47c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e480:	2001      	movs	r0, #1
 801e482:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801e486:	f7fb fe5f 	bl	801a148 <lwip_htons>
 801e48a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e48e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801e492:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e496:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e498:	b280      	uxth	r0, r0
 801e49a:	f7fb fe55 	bl	801a148 <lwip_htons>
 801e49e:	f010 0003 	ands.w	r0, r0, #3
 801e4a2:	bf18      	it	ne
 801e4a4:	2001      	movne	r0, #1
 801e4a6:	4440      	add	r0, r8
 801e4a8:	8038      	strh	r0, [r7, #0]
 801e4aa:	e7c3      	b.n	801e434 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801e4ac:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801e4b0:	e659      	b.n	801e166 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e4b2:	8b62      	ldrh	r2, [r4, #26]
 801e4b4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e4b8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e4ba:	bf14      	ite	ne
 801e4bc:	2001      	movne	r0, #1
 801e4be:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e4c0:	fb12 f200 	smulbb	r2, r2, r0
 801e4c4:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801e4c6:	428a      	cmp	r2, r1
 801e4c8:	bf94      	ite	ls
 801e4ca:	1898      	addls	r0, r3, r2
 801e4cc:	1858      	addhi	r0, r3, r1
 801e4ce:	b282      	uxth	r2, r0
 801e4d0:	4293      	cmp	r3, r2
 801e4d2:	f240 80e0 	bls.w	801e696 <tcp_receive+0x742>
 801e4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e4da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801e4de:	e62b      	b.n	801e138 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801e4e0:	b148      	cbz	r0, 801e4f6 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e4e2:	68c3      	ldr	r3, [r0, #12]
 801e4e4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e4e6:	6858      	ldr	r0, [r3, #4]
 801e4e8:	f7fb fe32 	bl	801a150 <lwip_htonl>
 801e4ec:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801e4ee:	2800      	cmp	r0, #0
 801e4f0:	f73f af3e 	bgt.w	801e370 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801e4f4:	8b63      	ldrh	r3, [r4, #26]
 801e4f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e4fa:	4f12      	ldr	r7, [pc, #72]	; (801e544 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801e4fc:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e4fe:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e500:	6833      	ldr	r3, [r6, #0]
 801e502:	e66d      	b.n	801e1e0 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e504:	4b0b      	ldr	r3, [pc, #44]	; (801e534 <tcp_receive+0x5e0>)
 801e506:	f240 5297 	movw	r2, #1431	; 0x597
 801e50a:	490f      	ldr	r1, [pc, #60]	; (801e548 <tcp_receive+0x5f4>)
 801e50c:	480b      	ldr	r0, [pc, #44]	; (801e53c <tcp_receive+0x5e8>)
 801e50e:	f007 ff21 	bl	8026354 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e512:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e516:	891a      	ldrh	r2, [r3, #8]
 801e518:	e747      	b.n	801e3aa <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e51a:	4b06      	ldr	r3, [pc, #24]	; (801e534 <tcp_receive+0x5e0>)
 801e51c:	f240 5295 	movw	r2, #1429	; 0x595
 801e520:	490a      	ldr	r1, [pc, #40]	; (801e54c <tcp_receive+0x5f8>)
 801e522:	4806      	ldr	r0, [pc, #24]	; (801e53c <tcp_receive+0x5e8>)
 801e524:	f007 ff16 	bl	8026354 <iprintf>
 801e528:	e737      	b.n	801e39a <tcp_receive+0x446>
 801e52a:	bf00      	nop
 801e52c:	2002e480 	.word	0x2002e480
 801e530:	2002e458 	.word	0x2002e458
 801e534:	08045934 	.word	0x08045934
 801e538:	08045a68 	.word	0x08045a68
 801e53c:	0802b034 	.word	0x0802b034
 801e540:	08045a00 	.word	0x08045a00
 801e544:	2002e48e 	.word	0x2002e48e
 801e548:	08045a58 	.word	0x08045a58
 801e54c:	08045a48 	.word	0x08045a48
              pcb->ooseq = pcb->ooseq->next;
 801e550:	6803      	ldr	r3, [r0, #0]
 801e552:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e554:	f7fe fbb0 	bl	801ccb8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e558:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801e55a:	2800      	cmp	r0, #0
 801e55c:	d1f8      	bne.n	801e550 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801e55e:	883a      	ldrh	r2, [r7, #0]
 801e560:	6831      	ldr	r1, [r6, #0]
 801e562:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e564:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801e566:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e568:	4293      	cmp	r3, r2
 801e56a:	f0c0 80cb 	bcc.w	801e704 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801e56e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801e570:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801e572:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801e574:	f7fe fa68 	bl	801ca48 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801e578:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e57c:	891a      	ldrh	r2, [r3, #8]
 801e57e:	b122      	cbz	r2, 801e58a <tcp_receive+0x636>
          recv_data = inseg.p;
 801e580:	4ab2      	ldr	r2, [pc, #712]	; (801e84c <tcp_receive+0x8f8>)
 801e582:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801e584:	2300      	movs	r3, #0
 801e586:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e58a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e58e:	8998      	ldrh	r0, [r3, #12]
 801e590:	f7fb fdda 	bl	801a148 <lwip_htons>
 801e594:	07c2      	lsls	r2, r0, #31
 801e596:	d504      	bpl.n	801e5a2 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801e598:	4aad      	ldr	r2, [pc, #692]	; (801e850 <tcp_receive+0x8fc>)
 801e59a:	7813      	ldrb	r3, [r2, #0]
 801e59c:	f043 0320 	orr.w	r3, r3, #32
 801e5a0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801e5a2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e5a4:	2d00      	cmp	r5, #0
 801e5a6:	d07b      	beq.n	801e6a0 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e5a8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801e858 <tcp_receive+0x904>
 801e5ac:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801e870 <tcp_receive+0x91c>
 801e5b0:	4fa8      	ldr	r7, [pc, #672]	; (801e854 <tcp_receive+0x900>)
 801e5b2:	e033      	b.n	801e61c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e5b4:	68eb      	ldr	r3, [r5, #12]
 801e5b6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e5ba:	8998      	ldrh	r0, [r3, #12]
 801e5bc:	f7fb fdc4 	bl	801a148 <lwip_htons>
 801e5c0:	f010 0003 	ands.w	r0, r0, #3
 801e5c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e5c6:	bf18      	it	ne
 801e5c8:	2001      	movne	r0, #1
 801e5ca:	4450      	add	r0, sl
 801e5cc:	1a18      	subs	r0, r3, r0
 801e5ce:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	f7fe fa39 	bl	801ca48 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801e5d6:	6869      	ldr	r1, [r5, #4]
 801e5d8:	890b      	ldrh	r3, [r1, #8]
 801e5da:	b13b      	cbz	r3, 801e5ec <tcp_receive+0x698>
            if (recv_data) {
 801e5dc:	4b9b      	ldr	r3, [pc, #620]	; (801e84c <tcp_receive+0x8f8>)
 801e5de:	6818      	ldr	r0, [r3, #0]
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	d05b      	beq.n	801e69c <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801e5e4:	f7fd fe1e 	bl	801c224 <pbuf_cat>
            cseg->p = NULL;
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e5ec:	68eb      	ldr	r3, [r5, #12]
 801e5ee:	8998      	ldrh	r0, [r3, #12]
 801e5f0:	f7fb fdaa 	bl	801a148 <lwip_htons>
 801e5f4:	07c3      	lsls	r3, r0, #31
 801e5f6:	d509      	bpl.n	801e60c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801e5f8:	4a95      	ldr	r2, [pc, #596]	; (801e850 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e5fa:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801e5fc:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e5fe:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801e600:	f043 0320 	orr.w	r3, r3, #32
 801e604:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e606:	d101      	bne.n	801e60c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801e608:	2307      	movs	r3, #7
 801e60a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801e60c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801e60e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801e610:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801e612:	f7fe fb51 	bl	801ccb8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e616:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e618:	2d00      	cmp	r5, #0
 801e61a:	d041      	beq.n	801e6a0 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e61c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801e61e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e620:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801e622:	428b      	cmp	r3, r1
 801e624:	d13c      	bne.n	801e6a0 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801e626:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e628:	8990      	ldrh	r0, [r2, #12]
 801e62a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e62e:	f7fb fd8b 	bl	801a148 <lwip_htons>
 801e632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e634:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e638:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e63c:	bf18      	it	ne
 801e63e:	2001      	movne	r0, #1
 801e640:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e642:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e644:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e646:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e64a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e64c:	8998      	ldrh	r0, [r3, #12]
 801e64e:	f7fb fd7b 	bl	801a148 <lwip_htons>
 801e652:	f010 0003 	ands.w	r0, r0, #3
 801e656:	bf18      	it	ne
 801e658:	2001      	movne	r0, #1
 801e65a:	4458      	add	r0, fp
 801e65c:	4582      	cmp	sl, r0
 801e65e:	d2a9      	bcs.n	801e5b4 <tcp_receive+0x660>
 801e660:	464b      	mov	r3, r9
 801e662:	f240 622b 	movw	r2, #1579	; 0x62b
 801e666:	4641      	mov	r1, r8
 801e668:	4638      	mov	r0, r7
 801e66a:	f007 fe73 	bl	8026354 <iprintf>
 801e66e:	e7a1      	b.n	801e5b4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e670:	4b79      	ldr	r3, [pc, #484]	; (801e858 <tcp_receive+0x904>)
 801e672:	f240 5294 	movw	r2, #1428	; 0x594
 801e676:	4979      	ldr	r1, [pc, #484]	; (801e85c <tcp_receive+0x908>)
 801e678:	4876      	ldr	r0, [pc, #472]	; (801e854 <tcp_receive+0x900>)
 801e67a:	f007 fe6b 	bl	8026354 <iprintf>
 801e67e:	e687      	b.n	801e390 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e680:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e684:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801e686:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e688:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801e68a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e68e:	b292      	uxth	r2, r2
 801e690:	4293      	cmp	r3, r2
 801e692:	f63f af20 	bhi.w	801e4d6 <tcp_receive+0x582>
 801e696:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801e69a:	e54d      	b.n	801e138 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801e69c:	6019      	str	r1, [r3, #0]
 801e69e:	e7a3      	b.n	801e5e8 <tcp_receive+0x694>
        tcp_ack(pcb);
 801e6a0:	8b63      	ldrh	r3, [r4, #26]
 801e6a2:	07d8      	lsls	r0, r3, #31
 801e6a4:	d50a      	bpl.n	801e6bc <tcp_receive+0x768>
 801e6a6:	f023 0301 	bic.w	r3, r3, #1
 801e6aa:	f043 0302 	orr.w	r3, r3, #2
 801e6ae:	8363      	strh	r3, [r4, #26]
 801e6b0:	e4f4      	b.n	801e09c <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e6b2:	486b      	ldr	r0, [pc, #428]	; (801e860 <tcp_receive+0x90c>)
 801e6b4:	f7fe fb1e 	bl	801ccf4 <tcp_seg_copy>
 801e6b8:	6760      	str	r0, [r4, #116]	; 0x74
 801e6ba:	e4b5      	b.n	801e028 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801e6bc:	f043 0301 	orr.w	r3, r3, #1
 801e6c0:	8363      	strh	r3, [r4, #26]
 801e6c2:	e4eb      	b.n	801e09c <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e6c4:	4866      	ldr	r0, [pc, #408]	; (801e860 <tcp_receive+0x90c>)
 801e6c6:	f7fe fb15 	bl	801ccf4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801e6ca:	4607      	mov	r7, r0
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	f43f acab 	beq.w	801e028 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e6d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e6d6:	6832      	ldr	r2, [r6, #0]
 801e6d8:	6859      	ldr	r1, [r3, #4]
 801e6da:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801e6de:	440b      	add	r3, r1
 801e6e0:	1a9b      	subs	r3, r3, r2
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	dd07      	ble.n	801e6f6 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e6e6:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801e6e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e6ec:	b291      	uxth	r1, r2
 801e6ee:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e6f2:	f7fd fc4d 	bl	801bf90 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801e6f6:	4629      	mov	r1, r5
 801e6f8:	4638      	mov	r0, r7
                    prev->next = cseg;
 801e6fa:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801e6fe:	f7ff fb35 	bl	801dd6c <tcp_oos_insert_segment>
 801e702:	e491      	b.n	801e028 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e704:	4b54      	ldr	r3, [pc, #336]	; (801e858 <tcp_receive+0x904>)
 801e706:	f240 6207 	movw	r2, #1543	; 0x607
 801e70a:	4956      	ldr	r1, [pc, #344]	; (801e864 <tcp_receive+0x910>)
 801e70c:	4851      	ldr	r0, [pc, #324]	; (801e854 <tcp_receive+0x900>)
 801e70e:	f007 fe21 	bl	8026354 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e712:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e714:	883a      	ldrh	r2, [r7, #0]
 801e716:	e72a      	b.n	801e56e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e718:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e71c:	8998      	ldrh	r0, [r3, #12]
 801e71e:	f7fb fd13 	bl	801a148 <lwip_htons>
 801e722:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e724:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e728:	d47d      	bmi.n	801e826 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e72a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e72c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e72e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e732:	f7fb fd09 	bl	801a148 <lwip_htons>
 801e736:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801e738:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e73c:	d503      	bpl.n	801e746 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801e73e:	3901      	subs	r1, #1
 801e740:	b289      	uxth	r1, r1
 801e742:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801e746:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e74a:	f7fd fc21 	bl	801bf90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e74e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e752:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801e756:	8998      	ldrh	r0, [r3, #12]
 801e758:	f7fb fcf6 	bl	801a148 <lwip_htons>
 801e75c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e760:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801e762:	bf18      	it	ne
 801e764:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e766:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801e768:	442b      	add	r3, r5
 801e76a:	b29b      	uxth	r3, r3
 801e76c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e76e:	4413      	add	r3, r2
 801e770:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e772:	440a      	add	r2, r1
 801e774:	4293      	cmp	r3, r2
 801e776:	f43f ae4e 	beq.w	801e416 <tcp_receive+0x4c2>
 801e77a:	4b37      	ldr	r3, [pc, #220]	; (801e858 <tcp_receive+0x904>)
 801e77c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801e780:	4939      	ldr	r1, [pc, #228]	; (801e868 <tcp_receive+0x914>)
 801e782:	4834      	ldr	r0, [pc, #208]	; (801e854 <tcp_receive+0x900>)
 801e784:	f007 fde6 	bl	8026354 <iprintf>
 801e788:	e645      	b.n	801e416 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801e78a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801e78e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e792:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801e794:	4413      	add	r3, r2
 801e796:	b29b      	uxth	r3, r3
 801e798:	429a      	cmp	r2, r3
 801e79a:	bf88      	it	hi
 801e79c:	460b      	movhi	r3, r1
 801e79e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	f001 fe0a 	bl	80203bc <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e7a8:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e7aa:	6833      	ldr	r3, [r6, #0]
 801e7ac:	e518      	b.n	801e1e0 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801e7ae:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	dc01      	bgt.n	801e7ba <tcp_receive+0x866>
            pcb->ooseq = next;
 801e7b6:	6765      	str	r5, [r4, #116]	; 0x74
 801e7b8:	e6d4      	b.n	801e564 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e7ba:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e7be:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e7c2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e7c6:	8998      	ldrh	r0, [r3, #12]
 801e7c8:	f7fb fcbe 	bl	801a148 <lwip_htons>
 801e7cc:	0781      	lsls	r1, r0, #30
 801e7ce:	d504      	bpl.n	801e7da <tcp_receive+0x886>
                inseg.len -= 1;
 801e7d0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801e7d4:	3b01      	subs	r3, #1
 801e7d6:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801e7da:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801e7de:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e7e2:	f7fd fbd5 	bl	801bf90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e7e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e7ea:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801e7ee:	8998      	ldrh	r0, [r3, #12]
 801e7f0:	f7fb fcaa 	bl	801a148 <lwip_htons>
 801e7f4:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e7f8:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801e7fa:	bf18      	it	ne
 801e7fc:	2001      	movne	r0, #1
 801e7fe:	eb08 0200 	add.w	r2, r8, r0
 801e802:	b292      	uxth	r2, r2
 801e804:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e806:	6859      	ldr	r1, [r3, #4]
 801e808:	6833      	ldr	r3, [r6, #0]
 801e80a:	4413      	add	r3, r2
 801e80c:	428b      	cmp	r3, r1
 801e80e:	d0d2      	beq.n	801e7b6 <tcp_receive+0x862>
 801e810:	4b11      	ldr	r3, [pc, #68]	; (801e858 <tcp_receive+0x904>)
 801e812:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801e816:	4915      	ldr	r1, [pc, #84]	; (801e86c <tcp_receive+0x918>)
 801e818:	480e      	ldr	r0, [pc, #56]	; (801e854 <tcp_receive+0x900>)
 801e81a:	f007 fd9b 	bl	8026354 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801e81e:	883a      	ldrh	r2, [r7, #0]
 801e820:	6831      	ldr	r1, [r6, #0]
 801e822:	4411      	add	r1, r2
 801e824:	e7c7      	b.n	801e7b6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e826:	899d      	ldrh	r5, [r3, #12]
 801e828:	4628      	mov	r0, r5
 801e82a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801e82e:	f7fb fc8b 	bl	801a148 <lwip_htons>
 801e832:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801e836:	f7fb fc87 	bl	801a148 <lwip_htons>
 801e83a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e83e:	4328      	orrs	r0, r5
 801e840:	8198      	strh	r0, [r3, #12]
 801e842:	b280      	uxth	r0, r0
 801e844:	e772      	b.n	801e72c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801e846:	6760      	str	r0, [r4, #116]	; 0x74
 801e848:	f7ff bbeb 	b.w	801e022 <tcp_receive+0xce>
 801e84c:	2002e46c 	.word	0x2002e46c
 801e850:	2002e470 	.word	0x2002e470
 801e854:	0802b034 	.word	0x0802b034
 801e858:	08045934 	.word	0x08045934
 801e85c:	08045a38 	.word	0x08045a38
 801e860:	2002e458 	.word	0x2002e458
 801e864:	08045adc 	.word	0x08045adc
 801e868:	08045a68 	.word	0x08045a68
 801e86c:	08045aa0 	.word	0x08045aa0
 801e870:	08045afc 	.word	0x08045afc
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e874:	68db      	ldr	r3, [r3, #12]
 801e876:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801e87a:	4640      	mov	r0, r8
 801e87c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801e880:	f7fb fc62 	bl	801a148 <lwip_htons>
 801e884:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801e888:	f7fb fc5e 	bl	801a148 <lwip_htons>
 801e88c:	682b      	ldr	r3, [r5, #0]
 801e88e:	ea48 0800 	orr.w	r8, r8, r0
 801e892:	68da      	ldr	r2, [r3, #12]
 801e894:	f8a2 800c 	strh.w	r8, [r2, #12]
 801e898:	e53b      	b.n	801e312 <tcp_receive+0x3be>
 801e89a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801e8a0 <tcp_receive+0x94c>
 801e89e:	e5a8      	b.n	801e3f2 <tcp_receive+0x49e>
 801e8a0:	2002e458 	.word	0x2002e458

0801e8a4 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8a4:	494a      	ldr	r1, [pc, #296]	; (801e9d0 <tcp_parseopt.part.0+0x12c>)
 801e8a6:	4b4b      	ldr	r3, [pc, #300]	; (801e9d4 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e8a8:	4a4b      	ldr	r2, [pc, #300]	; (801e9d8 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801e8aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8ae:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e8b2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8b4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e8b6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e8ba:	4b48      	ldr	r3, [pc, #288]	; (801e9dc <tcp_parseopt.part.0+0x138>)
 801e8bc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801e9e0 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e8c0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801e8c2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e8c6:	681d      	ldr	r5, [r3, #0]
 801e8c8:	f8b9 2000 	ldrh.w	r2, [r9]
 801e8cc:	f102 0c14 	add.w	ip, r2, #20
 801e8d0:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e8d2:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801e8d4:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e8d8:	d96d      	bls.n	801e9b6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801e8da:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8dc:	b1ac      	cbz	r4, 801e90a <tcp_parseopt.part.0+0x66>
 801e8de:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801e8e0:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8e4:	d811      	bhi.n	801e90a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801e8e6:	b2c9      	uxtb	r1, r1
 801e8e8:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801e8ea:	2901      	cmp	r1, #1
 801e8ec:	d011      	beq.n	801e912 <tcp_parseopt.part.0+0x6e>
 801e8ee:	2902      	cmp	r1, #2
 801e8f0:	d017      	beq.n	801e922 <tcp_parseopt.part.0+0x7e>
 801e8f2:	b191      	cbz	r1, 801e91a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e8f4:	b10c      	cbz	r4, 801e8fa <tcp_parseopt.part.0+0x56>
 801e8f6:	4573      	cmp	r3, lr
 801e8f8:	d242      	bcs.n	801e980 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801e8fa:	442b      	add	r3, r5
 801e8fc:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801e8fe:	2b01      	cmp	r3, #1
 801e900:	d961      	bls.n	801e9c6 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801e902:	441a      	add	r2, r3
 801e904:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801e906:	2101      	movs	r1, #1
 801e908:	e7e0      	b.n	801e8cc <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801e90a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801e90e:	2901      	cmp	r1, #1
 801e910:	d1ed      	bne.n	801e8ee <tcp_parseopt.part.0+0x4a>
 801e912:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801e916:	461a      	mov	r2, r3
 801e918:	e7db      	b.n	801e8d2 <tcp_parseopt.part.0+0x2e>
 801e91a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801e91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801e922:	1c91      	adds	r1, r2, #2
 801e924:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e926:	b10c      	cbz	r4, 801e92c <tcp_parseopt.part.0+0x88>
 801e928:	4573      	cmp	r3, lr
 801e92a:	d224      	bcs.n	801e976 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801e92c:	442b      	add	r3, r5
 801e92e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801e930:	2b04      	cmp	r3, #4
 801e932:	d145      	bne.n	801e9c0 <tcp_parseopt.part.0+0x11c>
 801e934:	1c4b      	adds	r3, r1, #1
 801e936:	42b3      	cmp	r3, r6
 801e938:	da42      	bge.n	801e9c0 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801e93a:	1cd3      	adds	r3, r2, #3
 801e93c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e93e:	b384      	cbz	r4, 801e9a2 <tcp_parseopt.part.0+0xfe>
 801e940:	458e      	cmp	lr, r1
 801e942:	d822      	bhi.n	801e98a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e944:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801e948:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e94a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801e94c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801e94e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e950:	f814 c001 	ldrb.w	ip, [r4, r1]
 801e954:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e958:	d820      	bhi.n	801e99c <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e95a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801e95e:	b2c9      	uxtb	r1, r1
 801e960:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801e962:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801e966:	1e59      	subs	r1, r3, #1
 801e968:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801e96c:	bf28      	it	cs
 801e96e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801e972:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801e974:	e7c7      	b.n	801e906 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e976:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801e97a:	b2db      	uxtb	r3, r3
 801e97c:	5ce3      	ldrb	r3, [r4, r3]
 801e97e:	e7d7      	b.n	801e930 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e980:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801e984:	b2db      	uxtb	r3, r3
 801e986:	5ce3      	ldrb	r3, [r4, r3]
 801e988:	e7b9      	b.n	801e8fe <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801e98a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801e98c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e98e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e990:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801e994:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e996:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e99a:	d9de      	bls.n	801e95a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801e99c:	442b      	add	r3, r5
 801e99e:	7d1b      	ldrb	r3, [r3, #20]
 801e9a0:	e7df      	b.n	801e962 <tcp_parseopt.part.0+0xbe>
 801e9a2:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801e9a4:	3204      	adds	r2, #4
    return opts[optidx];
 801e9a6:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e9a8:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801e9ac:	b292      	uxth	r2, r2
    return opts[optidx];
 801e9ae:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e9b0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801e9b4:	e7d5      	b.n	801e962 <tcp_parseopt.part.0+0xbe>
 801e9b6:	2900      	cmp	r1, #0
 801e9b8:	d0b1      	beq.n	801e91e <tcp_parseopt.part.0+0x7a>
 801e9ba:	f8a9 2000 	strh.w	r2, [r9]
 801e9be:	e7ae      	b.n	801e91e <tcp_parseopt.part.0+0x7a>
 801e9c0:	f8a9 1000 	strh.w	r1, [r9]
 801e9c4:	e7ab      	b.n	801e91e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801e9c6:	3202      	adds	r2, #2
 801e9c8:	f8a9 2000 	strh.w	r2, [r9]
 801e9cc:	e7a7      	b.n	801e91e <tcp_parseopt.part.0+0x7a>
 801e9ce:	bf00      	nop
 801e9d0:	2002e484 	.word	0x2002e484
 801e9d4:	2002e488 	.word	0x2002e488
 801e9d8:	2002e48c 	.word	0x2002e48c
 801e9dc:	2002e480 	.word	0x2002e480
 801e9e0:	2002e47c 	.word	0x2002e47c

0801e9e4 <tcp_input>:
{
 801e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801e9e8:	4604      	mov	r4, r0
{
 801e9ea:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801e9ec:	2800      	cmp	r0, #0
 801e9ee:	f000 80d2 	beq.w	801eb96 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801e9f2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801e9f4:	4e6b      	ldr	r6, [pc, #428]	; (801eba4 <tcp_input+0x1c0>)
 801e9f6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801e9f8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801e9fa:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801e9fc:	d805      	bhi.n	801ea0a <tcp_input+0x26>
  pbuf_free(p);
 801e9fe:	4620      	mov	r0, r4
}
 801ea00:	b009      	add	sp, #36	; 0x24
 801ea02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801ea06:	f7fd bbdb 	b.w	801c1c0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea0a:	4f67      	ldr	r7, [pc, #412]	; (801eba8 <tcp_input+0x1c4>)
 801ea0c:	6839      	ldr	r1, [r7, #0]
 801ea0e:	6978      	ldr	r0, [r7, #20]
 801ea10:	f005 f9ae 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 801ea14:	2800      	cmp	r0, #0
 801ea16:	d1f2      	bne.n	801e9fe <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ea18:	697b      	ldr	r3, [r7, #20]
 801ea1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea1e:	2be0      	cmp	r3, #224	; 0xe0
 801ea20:	d0ed      	beq.n	801e9fe <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801ea22:	f107 0314 	add.w	r3, r7, #20
 801ea26:	f107 0910 	add.w	r9, r7, #16
 801ea2a:	2106      	movs	r1, #6
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	9300      	str	r3, [sp, #0]
 801ea30:	464b      	mov	r3, r9
 801ea32:	8922      	ldrh	r2, [r4, #8]
 801ea34:	f7fc f91c 	bl	801ac70 <ip_chksum_pseudo>
    if (chksum != 0) {
 801ea38:	4605      	mov	r5, r0
 801ea3a:	2800      	cmp	r0, #0
 801ea3c:	d1df      	bne.n	801e9fe <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ea3e:	6833      	ldr	r3, [r6, #0]
 801ea40:	8998      	ldrh	r0, [r3, #12]
 801ea42:	f7fb fb81 	bl	801a148 <lwip_htons>
 801ea46:	0a80      	lsrs	r0, r0, #10
 801ea48:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ea4c:	2913      	cmp	r1, #19
 801ea4e:	d9d6      	bls.n	801e9fe <tcp_input+0x1a>
 801ea50:	8923      	ldrh	r3, [r4, #8]
 801ea52:	b28a      	uxth	r2, r1
 801ea54:	428b      	cmp	r3, r1
 801ea56:	d3d2      	bcc.n	801e9fe <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ea58:	f1a2 0314 	sub.w	r3, r2, #20
 801ea5c:	4853      	ldr	r0, [pc, #332]	; (801ebac <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801ea5e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801ebd8 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ea62:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801ea64:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ea68:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801ea6a:	8960      	ldrh	r0, [r4, #10]
 801ea6c:	4290      	cmp	r0, r2
 801ea6e:	f080 819f 	bcs.w	801edb0 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ea72:	6823      	ldr	r3, [r4, #0]
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	f000 837b 	beq.w	801f170 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801ea7a:	2114      	movs	r1, #20
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f7fd fb13 	bl	801c0a8 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ea82:	4b4a      	ldr	r3, [pc, #296]	; (801ebac <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801ea84:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ea86:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ea88:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801ea8c:	4b48      	ldr	r3, [pc, #288]	; (801ebb0 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ea8e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ea90:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801ea94:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ea96:	f7fd fb07 	bl	801c0a8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801ea9a:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ea9c:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801eaa0:	8943      	ldrh	r3, [r0, #10]
 801eaa2:	455b      	cmp	r3, fp
 801eaa4:	d3ab      	bcc.n	801e9fe <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801eaa6:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801eaa8:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801eaaa:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801eaae:	f7fd fafb 	bl	801c0a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eab2:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eab4:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eab6:	442b      	add	r3, r5
 801eab8:	eba3 030a 	sub.w	r3, r3, sl
 801eabc:	b29b      	uxth	r3, r3
 801eabe:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eac0:	2a00      	cmp	r2, #0
 801eac2:	f040 835c 	bne.w	801f17e <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801eac6:	6822      	ldr	r2, [r4, #0]
 801eac8:	8912      	ldrh	r2, [r2, #8]
 801eaca:	429a      	cmp	r2, r3
 801eacc:	d005      	beq.n	801eada <tcp_input+0xf6>
 801eace:	4b39      	ldr	r3, [pc, #228]	; (801ebb4 <tcp_input+0x1d0>)
 801ead0:	22e0      	movs	r2, #224	; 0xe0
 801ead2:	4939      	ldr	r1, [pc, #228]	; (801ebb8 <tcp_input+0x1d4>)
 801ead4:	4839      	ldr	r0, [pc, #228]	; (801ebbc <tcp_input+0x1d8>)
 801ead6:	f007 fc3d 	bl	8026354 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801eada:	6835      	ldr	r5, [r6, #0]
 801eadc:	8828      	ldrh	r0, [r5, #0]
 801eade:	f7fb fb33 	bl	801a148 <lwip_htons>
 801eae2:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801eae4:	6835      	ldr	r5, [r6, #0]
 801eae6:	8868      	ldrh	r0, [r5, #2]
 801eae8:	f7fb fb2e 	bl	801a148 <lwip_htons>
 801eaec:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eaee:	6835      	ldr	r5, [r6, #0]
 801eaf0:	6868      	ldr	r0, [r5, #4]
 801eaf2:	f7fb fb2d 	bl	801a150 <lwip_htonl>
 801eaf6:	4b32      	ldr	r3, [pc, #200]	; (801ebc0 <tcp_input+0x1dc>)
 801eaf8:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eafa:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eafc:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eafe:	68a8      	ldr	r0, [r5, #8]
 801eb00:	f7fb fb26 	bl	801a150 <lwip_htonl>
 801eb04:	4b2f      	ldr	r3, [pc, #188]	; (801ebc4 <tcp_input+0x1e0>)
 801eb06:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801eb08:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eb0a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801eb0c:	89e8      	ldrh	r0, [r5, #14]
 801eb0e:	f7fb fb1b 	bl	801a148 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801eb12:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801eb14:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801eb16:	8998      	ldrh	r0, [r3, #12]
 801eb18:	f7fb fb16 	bl	801a148 <lwip_htons>
 801eb1c:	492a      	ldr	r1, [pc, #168]	; (801ebc8 <tcp_input+0x1e4>)
 801eb1e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801eb22:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801eb24:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801eb26:	0782      	lsls	r2, r0, #30
 801eb28:	f040 8139 	bne.w	801ed9e <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801eb2c:	4a27      	ldr	r2, [pc, #156]	; (801ebcc <tcp_input+0x1e8>)
 801eb2e:	9205      	str	r2, [sp, #20]
 801eb30:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eb32:	4b27      	ldr	r3, [pc, #156]	; (801ebd0 <tcp_input+0x1ec>)
 801eb34:	681d      	ldr	r5, [r3, #0]
 801eb36:	2d00      	cmp	r5, #0
 801eb38:	f000 80e0 	beq.w	801ecfc <tcp_input+0x318>
  prev = NULL;
 801eb3c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801eb40:	4b1c      	ldr	r3, [pc, #112]	; (801ebb4 <tcp_input+0x1d0>)
 801eb42:	f8df b098 	ldr.w	fp, [pc, #152]	; 801ebdc <tcp_input+0x1f8>
 801eb46:	f8df a074 	ldr.w	sl, [pc, #116]	; 801ebbc <tcp_input+0x1d8>
 801eb4a:	e019      	b.n	801eb80 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801eb4c:	2a0a      	cmp	r2, #10
 801eb4e:	f000 80cd 	beq.w	801ecec <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801eb52:	2a01      	cmp	r2, #1
 801eb54:	f000 80c3 	beq.w	801ecde <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb58:	7a29      	ldrb	r1, [r5, #8]
 801eb5a:	b131      	cbz	r1, 801eb6a <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801eb5c:	687a      	ldr	r2, [r7, #4]
 801eb5e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801eb62:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801eb64:	b2d2      	uxtb	r2, r2
 801eb66:	4291      	cmp	r1, r2
 801eb68:	d104      	bne.n	801eb74 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801eb6a:	6832      	ldr	r2, [r6, #0]
 801eb6c:	8b28      	ldrh	r0, [r5, #24]
 801eb6e:	8811      	ldrh	r1, [r2, #0]
 801eb70:	4288      	cmp	r0, r1
 801eb72:	d035      	beq.n	801ebe0 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eb74:	68ea      	ldr	r2, [r5, #12]
 801eb76:	46a8      	mov	r8, r5
 801eb78:	2a00      	cmp	r2, #0
 801eb7a:	f000 80bf 	beq.w	801ecfc <tcp_input+0x318>
 801eb7e:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801eb80:	7d2a      	ldrb	r2, [r5, #20]
 801eb82:	2a00      	cmp	r2, #0
 801eb84:	d1e2      	bne.n	801eb4c <tcp_input+0x168>
 801eb86:	22fb      	movs	r2, #251	; 0xfb
 801eb88:	4659      	mov	r1, fp
 801eb8a:	4650      	mov	r0, sl
 801eb8c:	f007 fbe2 	bl	8026354 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801eb90:	7d2a      	ldrb	r2, [r5, #20]
 801eb92:	4b08      	ldr	r3, [pc, #32]	; (801ebb4 <tcp_input+0x1d0>)
 801eb94:	e7da      	b.n	801eb4c <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801eb96:	4b07      	ldr	r3, [pc, #28]	; (801ebb4 <tcp_input+0x1d0>)
 801eb98:	2283      	movs	r2, #131	; 0x83
 801eb9a:	490e      	ldr	r1, [pc, #56]	; (801ebd4 <tcp_input+0x1f0>)
 801eb9c:	4807      	ldr	r0, [pc, #28]	; (801ebbc <tcp_input+0x1d8>)
 801eb9e:	f007 fbd9 	bl	8026354 <iprintf>
 801eba2:	e726      	b.n	801e9f2 <tcp_input+0xe>
 801eba4:	2002e480 	.word	0x2002e480
 801eba8:	2001f298 	.word	0x2001f298
 801ebac:	2002e48c 	.word	0x2002e48c
 801ebb0:	2002e484 	.word	0x2002e484
 801ebb4:	08045934 	.word	0x08045934
 801ebb8:	08045b58 	.word	0x08045b58
 801ebbc:	0802b034 	.word	0x0802b034
 801ebc0:	2002e474 	.word	0x2002e474
 801ebc4:	2002e450 	.word	0x2002e450
 801ebc8:	2002e454 	.word	0x2002e454
 801ebcc:	2002e48e 	.word	0x2002e48e
 801ebd0:	2002e434 	.word	0x2002e434
 801ebd4:	08045b24 	.word	0x08045b24
 801ebd8:	2002e488 	.word	0x2002e488
 801ebdc:	08045b78 	.word	0x08045b78
    if (pcb->remote_port == tcphdr->src &&
 801ebe0:	8852      	ldrh	r2, [r2, #2]
 801ebe2:	8ae9      	ldrh	r1, [r5, #22]
 801ebe4:	4291      	cmp	r1, r2
 801ebe6:	d1c5      	bne.n	801eb74 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801ebe8:	6869      	ldr	r1, [r5, #4]
 801ebea:	693a      	ldr	r2, [r7, #16]
 801ebec:	4291      	cmp	r1, r2
 801ebee:	d1c1      	bne.n	801eb74 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ebf0:	6829      	ldr	r1, [r5, #0]
 801ebf2:	697a      	ldr	r2, [r7, #20]
 801ebf4:	4291      	cmp	r1, r2
 801ebf6:	d1bd      	bne.n	801eb74 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ebf8:	68eb      	ldr	r3, [r5, #12]
 801ebfa:	42ab      	cmp	r3, r5
 801ebfc:	f000 846e 	beq.w	801f4dc <tcp_input+0xaf8>
      if (prev != NULL) {
 801ec00:	f1b8 0f00 	cmp.w	r8, #0
 801ec04:	d009      	beq.n	801ec1a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801ec06:	4a75      	ldr	r2, [pc, #468]	; (801eddc <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801ec08:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801ec0c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801ec0e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801ec10:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ec12:	68eb      	ldr	r3, [r5, #12]
 801ec14:	42ab      	cmp	r3, r5
 801ec16:	f000 8447 	beq.w	801f4a8 <tcp_input+0xac4>
    inseg.next = NULL;
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	4f70      	ldr	r7, [pc, #448]	; (801ede0 <tcp_input+0x3fc>)
    recv_data = NULL;
 801ec1e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801ee08 <tcp_input+0x424>
    recv_flags = 0;
 801ec22:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801ee0c <tcp_input+0x428>
    recv_acked = 0;
 801ec26:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801ee10 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801ec2a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801ec2c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801ec2e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801ec32:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801ec36:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801ec3a:	4b6a      	ldr	r3, [pc, #424]	; (801ede4 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801ec3c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801ec3e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801ec40:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801ec42:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801ec44:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801ec46:	071a      	lsls	r2, r3, #28
 801ec48:	d503      	bpl.n	801ec52 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801ec4a:	7b62      	ldrb	r2, [r4, #13]
 801ec4c:	f042 0201 	orr.w	r2, r2, #1
 801ec50:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801ec52:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801ec54:	b172      	cbz	r2, 801ec74 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ec56:	4628      	mov	r0, r5
 801ec58:	f7fe ff78 	bl	801db4c <tcp_process_refused_data>
 801ec5c:	300d      	adds	r0, #13
 801ec5e:	f000 8296 	beq.w	801f18e <tcp_input+0x7aa>
 801ec62:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801ec64:	b123      	cbz	r3, 801ec70 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ec66:	9b05      	ldr	r3, [sp, #20]
 801ec68:	881b      	ldrh	r3, [r3, #0]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	f040 828f 	bne.w	801f18e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801ec70:	4b5c      	ldr	r3, [pc, #368]	; (801ede4 <tcp_input+0x400>)
 801ec72:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801ec74:	4c5c      	ldr	r4, [pc, #368]	; (801ede8 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801ec76:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801ec78:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801ec7a:	f140 8163 	bpl.w	801ef44 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801ec7e:	7d29      	ldrb	r1, [r5, #20]
 801ec80:	2902      	cmp	r1, #2
 801ec82:	f000 8350 	beq.w	801f326 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801ec86:	4b59      	ldr	r3, [pc, #356]	; (801edec <tcp_input+0x408>)
 801ec88:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	429a      	cmp	r2, r3
 801ec8e:	f000 844a 	beq.w	801f526 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ec92:	1a9b      	subs	r3, r3, r2
 801ec94:	d404      	bmi.n	801eca0 <tcp_input+0x2bc>
 801ec96:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801ec98:	1a9b      	subs	r3, r3, r2
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	f340 833e 	ble.w	801f31c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801eca0:	f89a 3000 	ldrb.w	r3, [sl]
 801eca4:	0718      	lsls	r0, r3, #28
 801eca6:	f140 8278 	bpl.w	801f19a <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ecaa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801ecae:	b11b      	cbz	r3, 801ecb8 <tcp_input+0x2d4>
 801ecb0:	f06f 010d 	mvn.w	r1, #13
 801ecb4:	6928      	ldr	r0, [r5, #16]
 801ecb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ecb8:	4848      	ldr	r0, [pc, #288]	; (801eddc <tcp_input+0x3f8>)
 801ecba:	4629      	mov	r1, r5
 801ecbc:	f7fe fbc4 	bl	801d448 <tcp_pcb_remove>
        tcp_free(pcb);
 801ecc0:	4628      	mov	r0, r5
 801ecc2:	f7fd fdbd 	bl	801c840 <tcp_free>
    tcp_input_pcb = NULL;
 801ecc6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801ecc8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801ecca:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801eccc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801ecd0:	b110      	cbz	r0, 801ecd8 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801ecd2:	f7fd fa75 	bl	801c1c0 <pbuf_free>
      inseg.p = NULL;
 801ecd6:	607d      	str	r5, [r7, #4]
}
 801ecd8:	b009      	add	sp, #36	; 0x24
 801ecda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ecde:	22fd      	movs	r2, #253	; 0xfd
 801ece0:	4943      	ldr	r1, [pc, #268]	; (801edf0 <tcp_input+0x40c>)
 801ece2:	4650      	mov	r0, sl
 801ece4:	f007 fb36 	bl	8026354 <iprintf>
 801ece8:	4b42      	ldr	r3, [pc, #264]	; (801edf4 <tcp_input+0x410>)
 801ecea:	e735      	b.n	801eb58 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ecec:	22fc      	movs	r2, #252	; 0xfc
 801ecee:	4942      	ldr	r1, [pc, #264]	; (801edf8 <tcp_input+0x414>)
 801ecf0:	4650      	mov	r0, sl
 801ecf2:	f007 fb2f 	bl	8026354 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ecf6:	7d2a      	ldrb	r2, [r5, #20]
 801ecf8:	4b3e      	ldr	r3, [pc, #248]	; (801edf4 <tcp_input+0x410>)
 801ecfa:	e72a      	b.n	801eb52 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ecfc:	4b3f      	ldr	r3, [pc, #252]	; (801edfc <tcp_input+0x418>)
 801ecfe:	681d      	ldr	r5, [r3, #0]
 801ed00:	2d00      	cmp	r5, #0
 801ed02:	d05b      	beq.n	801edbc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ed04:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801edf4 <tcp_input+0x410>
 801ed08:	f8df b108 	ldr.w	fp, [pc, #264]	; 801ee14 <tcp_input+0x430>
 801ed0c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801ee18 <tcp_input+0x434>
 801ed10:	e002      	b.n	801ed18 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed12:	68ed      	ldr	r5, [r5, #12]
 801ed14:	2d00      	cmp	r5, #0
 801ed16:	d051      	beq.n	801edbc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ed18:	7d2b      	ldrb	r3, [r5, #20]
 801ed1a:	2b0a      	cmp	r3, #10
 801ed1c:	4643      	mov	r3, r8
 801ed1e:	d005      	beq.n	801ed2c <tcp_input+0x348>
 801ed20:	f240 121f 	movw	r2, #287	; 0x11f
 801ed24:	4659      	mov	r1, fp
 801ed26:	4650      	mov	r0, sl
 801ed28:	f007 fb14 	bl	8026354 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed2c:	7a2a      	ldrb	r2, [r5, #8]
 801ed2e:	b132      	cbz	r2, 801ed3e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ed36:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed38:	b2db      	uxtb	r3, r3
 801ed3a:	429a      	cmp	r2, r3
 801ed3c:	d1e9      	bne.n	801ed12 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801ed3e:	6832      	ldr	r2, [r6, #0]
 801ed40:	8b2b      	ldrh	r3, [r5, #24]
 801ed42:	8811      	ldrh	r1, [r2, #0]
 801ed44:	428b      	cmp	r3, r1
 801ed46:	d1e4      	bne.n	801ed12 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801ed48:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801ed4a:	8ae8      	ldrh	r0, [r5, #22]
 801ed4c:	4290      	cmp	r0, r2
 801ed4e:	d1e0      	bne.n	801ed12 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801ed50:	6869      	ldr	r1, [r5, #4]
 801ed52:	693a      	ldr	r2, [r7, #16]
 801ed54:	4291      	cmp	r1, r2
 801ed56:	d1dc      	bne.n	801ed12 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ed58:	6829      	ldr	r1, [r5, #0]
 801ed5a:	697a      	ldr	r2, [r7, #20]
 801ed5c:	4291      	cmp	r1, r2
 801ed5e:	d1d8      	bne.n	801ed12 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801ed60:	4a20      	ldr	r2, [pc, #128]	; (801ede4 <tcp_input+0x400>)
 801ed62:	7812      	ldrb	r2, [r2, #0]
 801ed64:	0757      	lsls	r7, r2, #29
 801ed66:	f53f ae4a 	bmi.w	801e9fe <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801ed6a:	0796      	lsls	r6, r2, #30
 801ed6c:	f140 8395 	bpl.w	801f49a <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801ed70:	4a1e      	ldr	r2, [pc, #120]	; (801edec <tcp_input+0x408>)
 801ed72:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ed74:	6812      	ldr	r2, [r2, #0]
 801ed76:	1a51      	subs	r1, r2, r1
 801ed78:	d404      	bmi.n	801ed84 <tcp_input+0x3a0>
 801ed7a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801ed7c:	1b89      	subs	r1, r1, r6
 801ed7e:	2900      	cmp	r1, #0
 801ed80:	f340 83ba 	ble.w	801f4f8 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801ed84:	9b05      	ldr	r3, [sp, #20]
 801ed86:	881b      	ldrh	r3, [r3, #0]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	f43f ae38 	beq.w	801e9fe <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801ed8e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801ed90:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801ed92:	f043 0302 	orr.w	r3, r3, #2
 801ed96:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801ed98:	f001 fbc4 	bl	8020524 <tcp_output>
        pbuf_free(p);
 801ed9c:	e62f      	b.n	801e9fe <tcp_input+0x1a>
    tcplen++;
 801ed9e:	1c5a      	adds	r2, r3, #1
 801eda0:	4917      	ldr	r1, [pc, #92]	; (801ee00 <tcp_input+0x41c>)
 801eda2:	b292      	uxth	r2, r2
 801eda4:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801eda6:	4293      	cmp	r3, r2
    tcplen++;
 801eda8:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801edaa:	f67f aec2 	bls.w	801eb32 <tcp_input+0x14e>
 801edae:	e626      	b.n	801e9fe <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801edb0:	4a14      	ldr	r2, [pc, #80]	; (801ee04 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801edb2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801edb4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801edb6:	f7fd f977 	bl	801c0a8 <pbuf_remove_header>
 801edba:	e68e      	b.n	801eada <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801edbc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801ee1c <tcp_input+0x438>
 801edc0:	f8da 8000 	ldr.w	r8, [sl]
 801edc4:	f1b8 0f00 	cmp.w	r8, #0
 801edc8:	f000 8237 	beq.w	801f23a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801edcc:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801edd0:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801edd2:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801edd4:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801edd6:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801edda:	e027      	b.n	801ee2c <tcp_input+0x448>
 801eddc:	2002e434 	.word	0x2002e434
 801ede0:	2002e458 	.word	0x2002e458
 801ede4:	2002e454 	.word	0x2002e454
 801ede8:	2002e478 	.word	0x2002e478
 801edec:	2002e474 	.word	0x2002e474
 801edf0:	08045bcc 	.word	0x08045bcc
 801edf4:	08045934 	.word	0x08045934
 801edf8:	08045ba0 	.word	0x08045ba0
 801edfc:	2002e44c 	.word	0x2002e44c
 801ee00:	2002e48e 	.word	0x2002e48e
 801ee04:	2002e484 	.word	0x2002e484
 801ee08:	2002e46c 	.word	0x2002e46c
 801ee0c:	2002e470 	.word	0x2002e470
 801ee10:	2002e468 	.word	0x2002e468
 801ee14:	08045c4c 	.word	0x08045c4c
 801ee18:	0802b034 	.word	0x0802b034
 801ee1c:	2002e440 	.word	0x2002e440
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ee20:	68eb      	ldr	r3, [r5, #12]
 801ee22:	4629      	mov	r1, r5
 801ee24:	461d      	mov	r5, r3
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f000 8208 	beq.w	801f23c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ee2c:	7a2a      	ldrb	r2, [r5, #8]
 801ee2e:	b12a      	cbz	r2, 801ee3c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ee30:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801ee34:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ee36:	b2db      	uxtb	r3, r3
 801ee38:	429a      	cmp	r2, r3
 801ee3a:	d1f1      	bne.n	801ee20 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801ee3c:	8aea      	ldrh	r2, [r5, #22]
 801ee3e:	8843      	ldrh	r3, [r0, #2]
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d1ed      	bne.n	801ee20 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ee44:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ee46:	b10a      	cbz	r2, 801ee4c <tcp_input+0x468>
 801ee48:	4572      	cmp	r2, lr
 801ee4a:	d1e9      	bne.n	801ee20 <tcp_input+0x43c>
      if (prev != NULL) {
 801ee4c:	b129      	cbz	r1, 801ee5a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ee4e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ee50:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ee54:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ee56:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801ee5a:	4a9d      	ldr	r2, [pc, #628]	; (801f0d0 <tcp_input+0x6ec>)
 801ee5c:	7812      	ldrb	r2, [r2, #0]
 801ee5e:	0751      	lsls	r1, r2, #29
 801ee60:	f53f adcd 	bmi.w	801e9fe <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801ee64:	f012 0810 	ands.w	r8, r2, #16
 801ee68:	f040 8273 	bne.w	801f352 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801ee6c:	0791      	lsls	r1, r2, #30
 801ee6e:	f57f adc6 	bpl.w	801e9fe <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801ee72:	7d68      	ldrb	r0, [r5, #21]
 801ee74:	f7fe fc90 	bl	801d798 <tcp_alloc>
    if (npcb == NULL) {
 801ee78:	4681      	mov	r9, r0
 801ee7a:	2800      	cmp	r0, #0
 801ee7c:	f000 82ce 	beq.w	801f41c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801ee80:	4b94      	ldr	r3, [pc, #592]	; (801f0d4 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801ee82:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801ee84:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801ee86:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801ee88:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801ee8a:	7849      	ldrb	r1, [r1, #1]
 801ee8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801ee90:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801ee92:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801ee94:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ee96:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801ee98:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ee9a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ee9c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801ee9e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801eea0:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801eea2:	2303      	movs	r3, #3
 801eea4:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801eea6:	f7fe fee7 	bl	801dc78 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801eeaa:	4b8a      	ldr	r3, [pc, #552]	; (801f0d4 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801eeac:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801eeb0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801eeb2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801eeb6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801eeb8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801eebc:	4a86      	ldr	r2, [pc, #536]	; (801f0d8 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801eebe:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801eec2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801eec4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801eec8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801eecc:	7a6b      	ldrb	r3, [r5, #9]
 801eece:	f003 030c 	and.w	r3, r3, #12
 801eed2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801eed6:	7a2b      	ldrb	r3, [r5, #8]
 801eed8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801eedc:	6813      	ldr	r3, [r2, #0]
 801eede:	f8c2 9000 	str.w	r9, [r2]
 801eee2:	f8c9 300c 	str.w	r3, [r9, #12]
 801eee6:	f001 fe49 	bl	8020b7c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801eeea:	4b7c      	ldr	r3, [pc, #496]	; (801f0dc <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801eeec:	4a7c      	ldr	r2, [pc, #496]	; (801f0e0 <tcp_input+0x6fc>)
 801eeee:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801eef0:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801eef2:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801eef4:	b12b      	cbz	r3, 801ef02 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801eef6:	4b7b      	ldr	r3, [pc, #492]	; (801f0e4 <tcp_input+0x700>)
 801eef8:	4648      	mov	r0, r9
 801eefa:	f8a3 8000 	strh.w	r8, [r3]
 801eefe:	f7ff fcd1 	bl	801e8a4 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801ef02:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ef04:	f109 0204 	add.w	r2, r9, #4
 801ef08:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801ef0c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ef0e:	4610      	mov	r0, r2
 801ef10:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801ef12:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801ef16:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ef1a:	f004 fd4d 	bl	80239b8 <ip4_route>
 801ef1e:	9a05      	ldr	r2, [sp, #20]
 801ef20:	4601      	mov	r1, r0
 801ef22:	4628      	mov	r0, r5
 801ef24:	f7fe fec4 	bl	801dcb0 <tcp_eff_send_mss_netif>
 801ef28:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ef2a:	2112      	movs	r1, #18
 801ef2c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ef2e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ef32:	f001 f8db 	bl	80200ec <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801ef36:	2800      	cmp	r0, #0
 801ef38:	f040 82ca 	bne.w	801f4d0 <tcp_input+0xaec>
    tcp_output(npcb);
 801ef3c:	4648      	mov	r0, r9
 801ef3e:	f001 faf1 	bl	8020524 <tcp_output>
 801ef42:	e55c      	b.n	801e9fe <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801ef44:	f013 0102 	ands.w	r1, r3, #2
 801ef48:	d004      	beq.n	801ef54 <tcp_input+0x570>
 801ef4a:	7d2a      	ldrb	r2, [r5, #20]
 801ef4c:	3a02      	subs	r2, #2
 801ef4e:	2a01      	cmp	r2, #1
 801ef50:	f200 81e4 	bhi.w	801f31c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801ef54:	8b6a      	ldrh	r2, [r5, #26]
 801ef56:	06d0      	lsls	r0, r2, #27
 801ef58:	d402      	bmi.n	801ef60 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801ef5a:	4a63      	ldr	r2, [pc, #396]	; (801f0e8 <tcp_input+0x704>)
 801ef5c:	6812      	ldr	r2, [r2, #0]
 801ef5e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801ef60:	4a5e      	ldr	r2, [pc, #376]	; (801f0dc <tcp_input+0x6f8>)
 801ef62:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801ef64:	2200      	movs	r2, #0
 801ef66:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801ef6a:	b140      	cbz	r0, 801ef7e <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ef6c:	485d      	ldr	r0, [pc, #372]	; (801f0e4 <tcp_input+0x700>)
 801ef6e:	8002      	strh	r2, [r0, #0]
 801ef70:	4628      	mov	r0, r5
 801ef72:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801ef76:	f7ff fc95 	bl	801e8a4 <tcp_parseopt.part.0>
 801ef7a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801ef7e:	7d2a      	ldrb	r2, [r5, #20]
 801ef80:	3a02      	subs	r2, #2
 801ef82:	2a07      	cmp	r2, #7
 801ef84:	f63f ae8c 	bhi.w	801eca0 <tcp_input+0x2bc>
 801ef88:	e8df f002 	tbb	[pc, r2]
 801ef8c:	89041331 	.word	0x89041331
 801ef90:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801ef94:	4628      	mov	r0, r5
 801ef96:	f7fe ffdd 	bl	801df54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801ef9a:	f89a 3000 	ldrb.w	r3, [sl]
 801ef9e:	069e      	lsls	r6, r3, #26
 801efa0:	f57f ae7e 	bpl.w	801eca0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801efa4:	8b6b      	ldrh	r3, [r5, #26]
 801efa6:	f043 0302 	orr.w	r3, r3, #2
 801efaa:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801efac:	2307      	movs	r3, #7
 801efae:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801efb0:	e676      	b.n	801eca0 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801efb2:	06da      	lsls	r2, r3, #27
 801efb4:	f140 821c 	bpl.w	801f3f0 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801efb8:	4b4c      	ldr	r3, [pc, #304]	; (801f0ec <tcp_input+0x708>)
 801efba:	6819      	ldr	r1, [r3, #0]
 801efbc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801efbe:	43db      	mvns	r3, r3
 801efc0:	42cb      	cmn	r3, r1
 801efc2:	d404      	bmi.n	801efce <tcp_input+0x5ea>
 801efc4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801efc6:	1acb      	subs	r3, r1, r3
 801efc8:	2b00      	cmp	r3, #0
 801efca:	f340 823a 	ble.w	801f442 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801efce:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801efd0:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801efd2:	8810      	ldrh	r0, [r2, #0]
 801efd4:	4a3f      	ldr	r2, [pc, #252]	; (801f0d4 <tcp_input+0x6f0>)
 801efd6:	6812      	ldr	r2, [r2, #0]
 801efd8:	4402      	add	r2, r0
 801efda:	8818      	ldrh	r0, [r3, #0]
 801efdc:	9002      	str	r0, [sp, #8]
 801efde:	4628      	mov	r0, r5
 801efe0:	885b      	ldrh	r3, [r3, #2]
 801efe2:	e9cd 9300 	strd	r9, r3, [sp]
 801efe6:	4b42      	ldr	r3, [pc, #264]	; (801f0f0 <tcp_input+0x70c>)
 801efe8:	f001 fa22 	bl	8020430 <tcp_rst>
    if (err != ERR_ABRT) {
 801efec:	e658      	b.n	801eca0 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801efee:	f003 0212 	and.w	r2, r3, #18
 801eff2:	2a12      	cmp	r2, #18
 801eff4:	f000 813b 	beq.w	801f26e <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801eff8:	06d9      	lsls	r1, r3, #27
 801effa:	f57f ae51 	bpl.w	801eca0 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801effe:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f000:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f002:	8811      	ldrh	r1, [r2, #0]
 801f004:	4a33      	ldr	r2, [pc, #204]	; (801f0d4 <tcp_input+0x6f0>)
 801f006:	8818      	ldrh	r0, [r3, #0]
 801f008:	6812      	ldr	r2, [r2, #0]
 801f00a:	440a      	add	r2, r1
 801f00c:	4937      	ldr	r1, [pc, #220]	; (801f0ec <tcp_input+0x708>)
 801f00e:	6809      	ldr	r1, [r1, #0]
 801f010:	9002      	str	r0, [sp, #8]
 801f012:	4628      	mov	r0, r5
 801f014:	885b      	ldrh	r3, [r3, #2]
 801f016:	e9cd 9300 	strd	r9, r3, [sp]
 801f01a:	4b35      	ldr	r3, [pc, #212]	; (801f0f0 <tcp_input+0x70c>)
 801f01c:	f001 fa08 	bl	8020430 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f020:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801f024:	2b05      	cmp	r3, #5
 801f026:	f63f ae3b 	bhi.w	801eca0 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801f02a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801f02c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801f02e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801f030:	f001 fc80 	bl	8020934 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801f034:	e634      	b.n	801eca0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f036:	4628      	mov	r0, r5
 801f038:	f7fe ff8c 	bl	801df54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f03c:	4b24      	ldr	r3, [pc, #144]	; (801f0d0 <tcp_input+0x6ec>)
 801f03e:	781b      	ldrb	r3, [r3, #0]
 801f040:	06de      	lsls	r6, r3, #27
 801f042:	f57f ae2d 	bpl.w	801eca0 <tcp_input+0x2bc>
 801f046:	4b29      	ldr	r3, [pc, #164]	; (801f0ec <tcp_input+0x708>)
 801f048:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	429a      	cmp	r2, r3
 801f04e:	f47f ae27 	bne.w	801eca0 <tcp_input+0x2bc>
 801f052:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f054:	2b00      	cmp	r3, #0
 801f056:	f47f ae23 	bne.w	801eca0 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801f05a:	f89a 3000 	ldrb.w	r3, [sl]
 801f05e:	f043 0310 	orr.w	r3, r3, #16
 801f062:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801f066:	e61b      	b.n	801eca0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f068:	4628      	mov	r0, r5
 801f06a:	f7fe ff73 	bl	801df54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f06e:	f89a 3000 	ldrb.w	r3, [sl]
 801f072:	069a      	lsls	r2, r3, #26
 801f074:	f57f ae14 	bpl.w	801eca0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f078:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f07a:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801f07c:	f043 0302 	orr.w	r3, r3, #2
 801f080:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f082:	f7fd fee1 	bl	801ce48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f086:	4b14      	ldr	r3, [pc, #80]	; (801f0d8 <tcp_input+0x6f4>)
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	42ab      	cmp	r3, r5
 801f08c:	d061      	beq.n	801f152 <tcp_input+0x76e>
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d062      	beq.n	801f158 <tcp_input+0x774>
 801f092:	68da      	ldr	r2, [r3, #12]
 801f094:	42aa      	cmp	r2, r5
 801f096:	f000 8210 	beq.w	801f4ba <tcp_input+0xad6>
 801f09a:	4613      	mov	r3, r2
 801f09c:	e7f7      	b.n	801f08e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801f09e:	4628      	mov	r0, r5
 801f0a0:	f7fe ff58 	bl	801df54 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f0a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f0a8:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f0ac:	4b08      	ldr	r3, [pc, #32]	; (801f0d0 <tcp_input+0x6ec>)
 801f0ae:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801f0b0:	f000 818e 	beq.w	801f3d0 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f0b4:	06d8      	lsls	r0, r3, #27
 801f0b6:	d504      	bpl.n	801f0c2 <tcp_input+0x6de>
 801f0b8:	4b0c      	ldr	r3, [pc, #48]	; (801f0ec <tcp_input+0x708>)
 801f0ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	429a      	cmp	r2, r3
 801f0c0:	d038      	beq.n	801f134 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801f0c2:	8b6b      	ldrh	r3, [r5, #26]
 801f0c4:	f043 0302 	orr.w	r3, r3, #2
 801f0c8:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801f0ca:	2308      	movs	r3, #8
 801f0cc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f0ce:	e5e7      	b.n	801eca0 <tcp_input+0x2bc>
 801f0d0:	2002e454 	.word	0x2002e454
 801f0d4:	2002e474 	.word	0x2002e474
 801f0d8:	2002e434 	.word	0x2002e434
 801f0dc:	2002e48c 	.word	0x2002e48c
 801f0e0:	2002e438 	.word	0x2002e438
 801f0e4:	2002e47c 	.word	0x2002e47c
 801f0e8:	2002e444 	.word	0x2002e444
 801f0ec:	2002e450 	.word	0x2002e450
 801f0f0:	2001f2ac 	.word	0x2001f2ac
      tcp_receive(pcb);
 801f0f4:	4628      	mov	r0, r5
 801f0f6:	f7fe ff2d 	bl	801df54 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f0fa:	4ba8      	ldr	r3, [pc, #672]	; (801f39c <tcp_input+0x9b8>)
 801f0fc:	781b      	ldrb	r3, [r3, #0]
 801f0fe:	06db      	lsls	r3, r3, #27
 801f100:	f57f adce 	bpl.w	801eca0 <tcp_input+0x2bc>
 801f104:	4ba6      	ldr	r3, [pc, #664]	; (801f3a0 <tcp_input+0x9bc>)
 801f106:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	429a      	cmp	r2, r3
 801f10c:	f47f adc8 	bne.w	801eca0 <tcp_input+0x2bc>
 801f110:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f112:	2b00      	cmp	r3, #0
 801f114:	f47f adc4 	bne.w	801eca0 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801f118:	4628      	mov	r0, r5
 801f11a:	f7fd fe95 	bl	801ce48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f11e:	4ba1      	ldr	r3, [pc, #644]	; (801f3a4 <tcp_input+0x9c0>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	42ab      	cmp	r3, r5
 801f124:	d015      	beq.n	801f152 <tcp_input+0x76e>
 801f126:	b1bb      	cbz	r3, 801f158 <tcp_input+0x774>
 801f128:	68da      	ldr	r2, [r3, #12]
 801f12a:	42aa      	cmp	r2, r5
 801f12c:	f000 81c5 	beq.w	801f4ba <tcp_input+0xad6>
 801f130:	4613      	mov	r3, r2
 801f132:	e7f8      	b.n	801f126 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f134:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f136:	2b00      	cmp	r3, #0
 801f138:	d1c3      	bne.n	801f0c2 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801f13a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f13c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801f13e:	f043 0302 	orr.w	r3, r3, #2
 801f142:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f144:	f7fd fe80 	bl	801ce48 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f148:	4b96      	ldr	r3, [pc, #600]	; (801f3a4 <tcp_input+0x9c0>)
 801f14a:	681b      	ldr	r3, [r3, #0]
 801f14c:	42ab      	cmp	r3, r5
 801f14e:	f040 81b7 	bne.w	801f4c0 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801f152:	68eb      	ldr	r3, [r5, #12]
 801f154:	4a93      	ldr	r2, [pc, #588]	; (801f3a4 <tcp_input+0x9c0>)
 801f156:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f158:	4b93      	ldr	r3, [pc, #588]	; (801f3a8 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801f15a:	220a      	movs	r2, #10
 801f15c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f15e:	681a      	ldr	r2, [r3, #0]
 801f160:	601d      	str	r5, [r3, #0]
 801f162:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801f164:	2201      	movs	r2, #1
 801f166:	4b91      	ldr	r3, [pc, #580]	; (801f3ac <tcp_input+0x9c8>)
 801f168:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f16a:	f001 fd07 	bl	8020b7c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801f16e:	e597      	b.n	801eca0 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801f170:	4b8f      	ldr	r3, [pc, #572]	; (801f3b0 <tcp_input+0x9cc>)
 801f172:	22c2      	movs	r2, #194	; 0xc2
 801f174:	498f      	ldr	r1, [pc, #572]	; (801f3b4 <tcp_input+0x9d0>)
 801f176:	4890      	ldr	r0, [pc, #576]	; (801f3b8 <tcp_input+0x9d4>)
 801f178:	f007 f8ec 	bl	8026354 <iprintf>
 801f17c:	e47d      	b.n	801ea7a <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801f17e:	4b8c      	ldr	r3, [pc, #560]	; (801f3b0 <tcp_input+0x9cc>)
 801f180:	22df      	movs	r2, #223	; 0xdf
 801f182:	498e      	ldr	r1, [pc, #568]	; (801f3bc <tcp_input+0x9d8>)
 801f184:	488c      	ldr	r0, [pc, #560]	; (801f3b8 <tcp_input+0x9d4>)
 801f186:	f007 f8e5 	bl	8026354 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801f18a:	8923      	ldrh	r3, [r4, #8]
 801f18c:	e49b      	b.n	801eac6 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801f18e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801f190:	2b00      	cmp	r3, #0
 801f192:	f000 80d9 	beq.w	801f348 <tcp_input+0x964>
 801f196:	4c8a      	ldr	r4, [pc, #552]	; (801f3c0 <tcp_input+0x9dc>)
 801f198:	e595      	b.n	801ecc6 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801f19a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f19e:	b15a      	cbz	r2, 801f1b8 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801f1a0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801f1a4:	b12b      	cbz	r3, 801f1b2 <tcp_input+0x7ce>
 801f1a6:	4629      	mov	r1, r5
 801f1a8:	6928      	ldr	r0, [r5, #16]
 801f1aa:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801f1ac:	300d      	adds	r0, #13
 801f1ae:	f43f ad8a 	beq.w	801ecc6 <tcp_input+0x2e2>
          recv_acked = 0;
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801f1b8:	4628      	mov	r0, r5
 801f1ba:	f7fe fe2b 	bl	801de14 <tcp_input_delayed_close>
 801f1be:	2800      	cmp	r0, #0
 801f1c0:	f47f ad81 	bne.w	801ecc6 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801f1c4:	f8d8 3000 	ldr.w	r3, [r8]
 801f1c8:	b1fb      	cbz	r3, 801f20a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801f1ca:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f1cc:	b133      	cbz	r3, 801f1dc <tcp_input+0x7f8>
 801f1ce:	4b78      	ldr	r3, [pc, #480]	; (801f3b0 <tcp_input+0x9cc>)
 801f1d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801f1d4:	497b      	ldr	r1, [pc, #492]	; (801f3c4 <tcp_input+0x9e0>)
 801f1d6:	4878      	ldr	r0, [pc, #480]	; (801f3b8 <tcp_input+0x9d4>)
 801f1d8:	f007 f8bc 	bl	8026354 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801f1dc:	8b6b      	ldrh	r3, [r5, #26]
 801f1de:	f013 0310 	ands.w	r3, r3, #16
 801f1e2:	f040 8113 	bne.w	801f40c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f1e6:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f1ea:	2e00      	cmp	r6, #0
 801f1ec:	f000 8121 	beq.w	801f432 <tcp_input+0xa4e>
 801f1f0:	f8d8 2000 	ldr.w	r2, [r8]
 801f1f4:	4629      	mov	r1, r5
 801f1f6:	6928      	ldr	r0, [r5, #16]
 801f1f8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801f1fa:	f110 0f0d 	cmn.w	r0, #13
 801f1fe:	f43f ad62 	beq.w	801ecc6 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801f202:	b110      	cbz	r0, 801f20a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801f204:	f8d8 3000 	ldr.w	r3, [r8]
 801f208:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801f20a:	f89a 3000 	ldrb.w	r3, [sl]
 801f20e:	0699      	lsls	r1, r3, #26
 801f210:	d507      	bpl.n	801f222 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801f212:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f214:	2b00      	cmp	r3, #0
 801f216:	f000 80ad 	beq.w	801f374 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f21a:	7b5a      	ldrb	r2, [r3, #13]
 801f21c:	f042 0220 	orr.w	r2, r2, #32
 801f220:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801f222:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801f224:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801f226:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f228:	f7fe fdf4 	bl	801de14 <tcp_input_delayed_close>
 801f22c:	2800      	cmp	r0, #0
 801f22e:	f47f ad4a 	bne.w	801ecc6 <tcp_input+0x2e2>
        tcp_output(pcb);
 801f232:	4628      	mov	r0, r5
 801f234:	f001 f976 	bl	8020524 <tcp_output>
 801f238:	e545      	b.n	801ecc6 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f23a:	6830      	ldr	r0, [r6, #0]
 801f23c:	8980      	ldrh	r0, [r0, #12]
 801f23e:	f7fa ff83 	bl	801a148 <lwip_htons>
 801f242:	f010 0004 	ands.w	r0, r0, #4
 801f246:	f47f abda 	bne.w	801e9fe <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f24a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f24c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f24e:	8811      	ldrh	r1, [r2, #0]
 801f250:	4a5d      	ldr	r2, [pc, #372]	; (801f3c8 <tcp_input+0x9e4>)
 801f252:	881d      	ldrh	r5, [r3, #0]
 801f254:	6812      	ldr	r2, [r2, #0]
 801f256:	440a      	add	r2, r1
 801f258:	4951      	ldr	r1, [pc, #324]	; (801f3a0 <tcp_input+0x9bc>)
 801f25a:	6809      	ldr	r1, [r1, #0]
 801f25c:	9502      	str	r5, [sp, #8]
 801f25e:	885b      	ldrh	r3, [r3, #2]
 801f260:	e9cd 9300 	strd	r9, r3, [sp]
 801f264:	4b59      	ldr	r3, [pc, #356]	; (801f3cc <tcp_input+0x9e8>)
 801f266:	f001 f8e3 	bl	8020430 <tcp_rst>
 801f26a:	f7ff bbc8 	b.w	801e9fe <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801f26e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801f270:	494b      	ldr	r1, [pc, #300]	; (801f3a0 <tcp_input+0x9bc>)
 801f272:	3201      	adds	r2, #1
 801f274:	6809      	ldr	r1, [r1, #0]
 801f276:	428a      	cmp	r2, r1
 801f278:	f47f aebe 	bne.w	801eff8 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801f27c:	4b52      	ldr	r3, [pc, #328]	; (801f3c8 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801f27e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801f280:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801f282:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f284:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801f286:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f288:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f28a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801f28c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f28e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801f290:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f292:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f294:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801f296:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801f298:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801f29c:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f29e:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f2a2:	9205      	str	r2, [sp, #20]
 801f2a4:	f004 fb88 	bl	80239b8 <ip4_route>
 801f2a8:	9a05      	ldr	r2, [sp, #20]
 801f2aa:	4601      	mov	r1, r0
 801f2ac:	4630      	mov	r0, r6
 801f2ae:	f7fe fcff 	bl	801dcb0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f2b2:	f241 131c 	movw	r3, #4380	; 0x111c
 801f2b6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f2b8:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f2ba:	0081      	lsls	r1, r0, #2
 801f2bc:	429a      	cmp	r2, r3
 801f2be:	4616      	mov	r6, r2
 801f2c0:	bf38      	it	cc
 801f2c2:	461e      	movcc	r6, r3
 801f2c4:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801f2c8:	f240 814d 	bls.w	801f566 <tcp_input+0xb82>
 801f2cc:	b28b      	uxth	r3, r1
 801f2ce:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f2d2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	f000 813d 	beq.w	801f556 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801f2dc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801f2e0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801f2e2:	3b01      	subs	r3, #1
 801f2e4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801f2e8:	2e00      	cmp	r6, #0
 801f2ea:	f000 812f 	beq.w	801f54c <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801f2ee:	6833      	ldr	r3, [r6, #0]
 801f2f0:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801f2f2:	4630      	mov	r0, r6
 801f2f4:	f7fd fce0 	bl	801ccb8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801f2f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	f000 8122 	beq.w	801f544 <tcp_input+0xb60>
          pcb->rtime = 0;
 801f300:	2300      	movs	r3, #0
 801f302:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801f304:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f308:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801f30c:	b133      	cbz	r3, 801f31c <tcp_input+0x938>
 801f30e:	2200      	movs	r2, #0
 801f310:	4629      	mov	r1, r5
 801f312:	6928      	ldr	r0, [r5, #16]
 801f314:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801f316:	300d      	adds	r0, #13
 801f318:	f43f acd5 	beq.w	801ecc6 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801f31c:	8b6b      	ldrh	r3, [r5, #26]
 801f31e:	f043 0302 	orr.w	r3, r3, #2
 801f322:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f324:	e4bc      	b.n	801eca0 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801f326:	4b1e      	ldr	r3, [pc, #120]	; (801f3a0 <tcp_input+0x9bc>)
 801f328:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	429a      	cmp	r2, r3
 801f32e:	f47f acb7 	bne.w	801eca0 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801f332:	f89a 3000 	ldrb.w	r3, [sl]
 801f336:	f043 0308 	orr.w	r3, r3, #8
 801f33a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f33e:	8b6b      	ldrh	r3, [r5, #26]
 801f340:	f023 0301 	bic.w	r3, r3, #1
 801f344:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f346:	e4ab      	b.n	801eca0 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801f348:	4628      	mov	r0, r5
 801f34a:	4c1d      	ldr	r4, [pc, #116]	; (801f3c0 <tcp_input+0x9dc>)
 801f34c:	f001 f8b8 	bl	80204c0 <tcp_send_empty_ack>
 801f350:	e4b9      	b.n	801ecc6 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f352:	8802      	ldrh	r2, [r0, #0]
 801f354:	e9cd 9300 	strd	r9, r3, [sp]
 801f358:	9b05      	ldr	r3, [sp, #20]
 801f35a:	9202      	str	r2, [sp, #8]
 801f35c:	881a      	ldrh	r2, [r3, #0]
 801f35e:	4b1a      	ldr	r3, [pc, #104]	; (801f3c8 <tcp_input+0x9e4>)
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	441a      	add	r2, r3
 801f364:	4b0e      	ldr	r3, [pc, #56]	; (801f3a0 <tcp_input+0x9bc>)
 801f366:	4628      	mov	r0, r5
 801f368:	6819      	ldr	r1, [r3, #0]
 801f36a:	4b18      	ldr	r3, [pc, #96]	; (801f3cc <tcp_input+0x9e8>)
 801f36c:	f001 f860 	bl	8020430 <tcp_rst>
 801f370:	f7ff bb45 	b.w	801e9fe <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f374:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801f376:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801f37a:	d001      	beq.n	801f380 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801f37c:	3301      	adds	r3, #1
 801f37e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801f380:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f384:	2e00      	cmp	r6, #0
 801f386:	f43f af4c 	beq.w	801f222 <tcp_input+0x83e>
 801f38a:	2300      	movs	r3, #0
 801f38c:	4629      	mov	r1, r5
 801f38e:	6928      	ldr	r0, [r5, #16]
 801f390:	461a      	mov	r2, r3
 801f392:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801f394:	300d      	adds	r0, #13
 801f396:	f47f af44 	bne.w	801f222 <tcp_input+0x83e>
 801f39a:	e494      	b.n	801ecc6 <tcp_input+0x2e2>
 801f39c:	2002e454 	.word	0x2002e454
 801f3a0:	2002e450 	.word	0x2002e450
 801f3a4:	2002e434 	.word	0x2002e434
 801f3a8:	2002e44c 	.word	0x2002e44c
 801f3ac:	2002e438 	.word	0x2002e438
 801f3b0:	08045934 	.word	0x08045934
 801f3b4:	08045b3c 	.word	0x08045b3c
 801f3b8:	0802b034 	.word	0x0802b034
 801f3bc:	08045b4c 	.word	0x08045b4c
 801f3c0:	2002e478 	.word	0x2002e478
 801f3c4:	08045ce8 	.word	0x08045ce8
 801f3c8:	2002e474 	.word	0x2002e474
 801f3cc:	2001f2ac 	.word	0x2001f2ac
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f3d0:	06d9      	lsls	r1, r3, #27
 801f3d2:	f57f ac65 	bpl.w	801eca0 <tcp_input+0x2bc>
 801f3d6:	4b6a      	ldr	r3, [pc, #424]	; (801f580 <tcp_input+0xb9c>)
 801f3d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	429a      	cmp	r2, r3
 801f3de:	f47f ac5f 	bne.w	801eca0 <tcp_input+0x2bc>
 801f3e2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	f47f ac5b 	bne.w	801eca0 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801f3ea:	2306      	movs	r3, #6
 801f3ec:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f3ee:	e457      	b.n	801eca0 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f3f0:	2900      	cmp	r1, #0
 801f3f2:	f43f ac55 	beq.w	801eca0 <tcp_input+0x2bc>
 801f3f6:	4b63      	ldr	r3, [pc, #396]	; (801f584 <tcp_input+0xba0>)
 801f3f8:	681a      	ldr	r2, [r3, #0]
 801f3fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f3fc:	3b01      	subs	r3, #1
 801f3fe:	4293      	cmp	r3, r2
 801f400:	f47f ac4e 	bne.w	801eca0 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801f404:	4628      	mov	r0, r5
 801f406:	f000 ff95 	bl	8020334 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801f40a:	e449      	b.n	801eca0 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801f40c:	f8d8 0000 	ldr.w	r0, [r8]
 801f410:	f7fc fed6 	bl	801c1c0 <pbuf_free>
            tcp_abort(pcb);
 801f414:	4628      	mov	r0, r5
 801f416:	f7fe f957 	bl	801d6c8 <tcp_abort>
            goto aborted;
 801f41a:	e454      	b.n	801ecc6 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f41c:	69ab      	ldr	r3, [r5, #24]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	f43f aaed 	beq.w	801e9fe <tcp_input+0x1a>
 801f424:	4601      	mov	r1, r0
 801f426:	f04f 32ff 	mov.w	r2, #4294967295
 801f42a:	6928      	ldr	r0, [r5, #16]
 801f42c:	4798      	blx	r3
 801f42e:	f7ff bae6 	b.w	801e9fe <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f432:	4633      	mov	r3, r6
 801f434:	4630      	mov	r0, r6
 801f436:	f8d8 2000 	ldr.w	r2, [r8]
 801f43a:	4629      	mov	r1, r5
 801f43c:	f7fe fb5a 	bl	801daf4 <tcp_recv_null>
 801f440:	e6db      	b.n	801f1fa <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801f442:	2304      	movs	r3, #4
 801f444:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801f446:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d0e3      	beq.n	801f414 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f44c:	699b      	ldr	r3, [r3, #24]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d05d      	beq.n	801f50e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f452:	2200      	movs	r2, #0
 801f454:	4629      	mov	r1, r5
 801f456:	6928      	ldr	r0, [r5, #16]
 801f458:	4798      	blx	r3
          if (err != ERR_OK) {
 801f45a:	2800      	cmp	r0, #0
 801f45c:	d153      	bne.n	801f506 <tcp_input+0xb22>
          tcp_receive(pcb);
 801f45e:	4628      	mov	r0, r5
 801f460:	f7fe fd78 	bl	801df54 <tcp_receive>
          if (recv_acked != 0) {
 801f464:	f8bb 3000 	ldrh.w	r3, [fp]
 801f468:	b113      	cbz	r3, 801f470 <tcp_input+0xa8c>
            recv_acked--;
 801f46a:	3b01      	subs	r3, #1
 801f46c:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f470:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801f472:	f241 131c 	movw	r3, #4380	; 0x111c
 801f476:	004a      	lsls	r2, r1, #1
 801f478:	0088      	lsls	r0, r1, #2
 801f47a:	429a      	cmp	r2, r3
 801f47c:	4616      	mov	r6, r2
 801f47e:	bf38      	it	cc
 801f480:	461e      	movcc	r6, r3
 801f482:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801f486:	d959      	bls.n	801f53c <tcp_input+0xb58>
 801f488:	b283      	uxth	r3, r0
 801f48a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801f48e:	f89a 3000 	ldrb.w	r3, [sl]
 801f492:	069b      	lsls	r3, r3, #26
 801f494:	f57f ac04 	bpl.w	801eca0 <tcp_input+0x2bc>
 801f498:	e584      	b.n	801efa4 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801f49a:	07d0      	lsls	r0, r2, #31
 801f49c:	f57f ac72 	bpl.w	801ed84 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801f4a0:	4b39      	ldr	r3, [pc, #228]	; (801f588 <tcp_input+0xba4>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	622b      	str	r3, [r5, #32]
 801f4a6:	e46d      	b.n	801ed84 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f4a8:	4b38      	ldr	r3, [pc, #224]	; (801f58c <tcp_input+0xba8>)
 801f4aa:	f240 1215 	movw	r2, #277	; 0x115
 801f4ae:	4938      	ldr	r1, [pc, #224]	; (801f590 <tcp_input+0xbac>)
 801f4b0:	4838      	ldr	r0, [pc, #224]	; (801f594 <tcp_input+0xbb0>)
 801f4b2:	f006 ff4f 	bl	8026354 <iprintf>
 801f4b6:	f7ff bbb0 	b.w	801ec1a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801f4ba:	68ea      	ldr	r2, [r5, #12]
 801f4bc:	60da      	str	r2, [r3, #12]
 801f4be:	e64b      	b.n	801f158 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	f43f ae49 	beq.w	801f158 <tcp_input+0x774>
 801f4c6:	68da      	ldr	r2, [r3, #12]
 801f4c8:	42aa      	cmp	r2, r5
 801f4ca:	d0f6      	beq.n	801f4ba <tcp_input+0xad6>
 801f4cc:	4613      	mov	r3, r2
 801f4ce:	e7f7      	b.n	801f4c0 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801f4d0:	2100      	movs	r1, #0
 801f4d2:	4648      	mov	r0, r9
 801f4d4:	f7fe f828 	bl	801d528 <tcp_abandon>
      return;
 801f4d8:	f7ff ba91 	b.w	801e9fe <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801f4dc:	4b2b      	ldr	r3, [pc, #172]	; (801f58c <tcp_input+0xba8>)
 801f4de:	f240 120d 	movw	r2, #269	; 0x10d
 801f4e2:	492d      	ldr	r1, [pc, #180]	; (801f598 <tcp_input+0xbb4>)
 801f4e4:	482b      	ldr	r0, [pc, #172]	; (801f594 <tcp_input+0xbb0>)
 801f4e6:	f006 ff35 	bl	8026354 <iprintf>
      if (prev != NULL) {
 801f4ea:	f1b8 0f00 	cmp.w	r8, #0
 801f4ee:	f43f ab90 	beq.w	801ec12 <tcp_input+0x22e>
 801f4f2:	68eb      	ldr	r3, [r5, #12]
 801f4f4:	f7ff bb87 	b.w	801ec06 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f4f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801f4fc:	9b05      	ldr	r3, [sp, #20]
 801f4fe:	f8cd 9000 	str.w	r9, [sp]
 801f502:	881b      	ldrh	r3, [r3, #0]
 801f504:	e72d      	b.n	801f362 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801f506:	300d      	adds	r0, #13
 801f508:	f43f abdd 	beq.w	801ecc6 <tcp_input+0x2e2>
 801f50c:	e782      	b.n	801f414 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f50e:	4b1f      	ldr	r3, [pc, #124]	; (801f58c <tcp_input+0xba8>)
 801f510:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801f514:	4921      	ldr	r1, [pc, #132]	; (801f59c <tcp_input+0xbb8>)
 801f516:	481f      	ldr	r0, [pc, #124]	; (801f594 <tcp_input+0xbb0>)
 801f518:	f006 ff1c 	bl	8026354 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f51c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f51e:	699b      	ldr	r3, [r3, #24]
 801f520:	2b00      	cmp	r3, #0
 801f522:	d196      	bne.n	801f452 <tcp_input+0xa6e>
 801f524:	e776      	b.n	801f414 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f526:	2900      	cmp	r1, #0
 801f528:	f47f af03 	bne.w	801f332 <tcp_input+0x94e>
 801f52c:	4b17      	ldr	r3, [pc, #92]	; (801f58c <tcp_input+0xba8>)
 801f52e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801f532:	491b      	ldr	r1, [pc, #108]	; (801f5a0 <tcp_input+0xbbc>)
 801f534:	4817      	ldr	r0, [pc, #92]	; (801f594 <tcp_input+0xbb0>)
 801f536:	f006 ff0d 	bl	8026354 <iprintf>
 801f53a:	e6fa      	b.n	801f332 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f53c:	429a      	cmp	r2, r3
 801f53e:	bf88      	it	hi
 801f540:	b293      	uxthhi	r3, r2
 801f542:	e7a2      	b.n	801f48a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801f544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f548:	862b      	strh	r3, [r5, #48]	; 0x30
 801f54a:	e6dd      	b.n	801f308 <tcp_input+0x924>
          rseg = pcb->unsent;
 801f54c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f54e:	b176      	cbz	r6, 801f56e <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801f550:	6833      	ldr	r3, [r6, #0]
 801f552:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f554:	e6cd      	b.n	801f2f2 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f556:	4b0d      	ldr	r3, [pc, #52]	; (801f58c <tcp_input+0xba8>)
 801f558:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801f55c:	4911      	ldr	r1, [pc, #68]	; (801f5a4 <tcp_input+0xbc0>)
 801f55e:	480d      	ldr	r0, [pc, #52]	; (801f594 <tcp_input+0xbb0>)
 801f560:	f006 fef8 	bl	8026354 <iprintf>
 801f564:	e6ba      	b.n	801f2dc <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f566:	429a      	cmp	r2, r3
 801f568:	bf88      	it	hi
 801f56a:	b293      	uxthhi	r3, r2
 801f56c:	e6af      	b.n	801f2ce <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f56e:	4b07      	ldr	r3, [pc, #28]	; (801f58c <tcp_input+0xba8>)
 801f570:	f44f 725d 	mov.w	r2, #884	; 0x374
 801f574:	490c      	ldr	r1, [pc, #48]	; (801f5a8 <tcp_input+0xbc4>)
 801f576:	4807      	ldr	r0, [pc, #28]	; (801f594 <tcp_input+0xbb0>)
 801f578:	f006 feec 	bl	8026354 <iprintf>
 801f57c:	e7e8      	b.n	801f550 <tcp_input+0xb6c>
 801f57e:	bf00      	nop
 801f580:	2002e450 	.word	0x2002e450
 801f584:	2002e474 	.word	0x2002e474
 801f588:	2002e444 	.word	0x2002e444
 801f58c:	08045934 	.word	0x08045934
 801f590:	08045c20 	.word	0x08045c20
 801f594:	0802b034 	.word	0x0802b034
 801f598:	08045bf4 	.word	0x08045bf4
 801f59c:	08045cc8 	.word	0x08045cc8
 801f5a0:	08045c7c 	.word	0x08045c7c
 801f5a4:	08045c9c 	.word	0x08045c9c
 801f5a8:	08045cb4 	.word	0x08045cb4

0801f5ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801f5ac:	4a02      	ldr	r2, [pc, #8]	; (801f5b8 <tcp_trigger_input_pcb_close+0xc>)
 801f5ae:	7813      	ldrb	r3, [r2, #0]
 801f5b0:	f043 0310 	orr.w	r3, r3, #16
 801f5b4:	7013      	strb	r3, [r2, #0]
}
 801f5b6:	4770      	bx	lr
 801f5b8:	2002e470 	.word	0x2002e470

0801f5bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5c0:	9f08      	ldr	r7, [sp, #32]
 801f5c2:	4680      	mov	r8, r0
 801f5c4:	460d      	mov	r5, r1
 801f5c6:	4614      	mov	r4, r2
 801f5c8:	461e      	mov	r6, r3
 801f5ca:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801f5ce:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f5d2:	2f00      	cmp	r7, #0
 801f5d4:	d033      	beq.n	801f63e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f5d6:	42a5      	cmp	r5, r4
 801f5d8:	d20e      	bcs.n	801f5f8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f5da:	f019 0f02 	tst.w	r9, #2
 801f5de:	d008      	beq.n	801f5f2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f5e0:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801f5e4:	f021 0103 	bic.w	r1, r1, #3
 801f5e8:	428c      	cmp	r4, r1
 801f5ea:	bf28      	it	cs
 801f5ec:	460c      	movcs	r4, r1
 801f5ee:	b2a1      	uxth	r1, r4
 801f5f0:	e003      	b.n	801f5fa <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f5f2:	8b7b      	ldrh	r3, [r7, #26]
 801f5f4:	065b      	lsls	r3, r3, #25
 801f5f6:	d518      	bpl.n	801f62a <tcp_pbuf_prealloc+0x6e>
 801f5f8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f5fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f5fe:	4640      	mov	r0, r8
 801f600:	f7fc fc0c 	bl	801be1c <pbuf_alloc>
  if (p == NULL) {
 801f604:	4604      	mov	r4, r0
 801f606:	b168      	cbz	r0, 801f624 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801f608:	6803      	ldr	r3, [r0, #0]
 801f60a:	b133      	cbz	r3, 801f61a <tcp_pbuf_prealloc+0x5e>
 801f60c:	4b0f      	ldr	r3, [pc, #60]	; (801f64c <tcp_pbuf_prealloc+0x90>)
 801f60e:	f240 120b 	movw	r2, #267	; 0x10b
 801f612:	490f      	ldr	r1, [pc, #60]	; (801f650 <tcp_pbuf_prealloc+0x94>)
 801f614:	480f      	ldr	r0, [pc, #60]	; (801f654 <tcp_pbuf_prealloc+0x98>)
 801f616:	f006 fe9d 	bl	8026354 <iprintf>
  *oversize = p->len - length;
 801f61a:	8963      	ldrh	r3, [r4, #10]
 801f61c:	1b5b      	subs	r3, r3, r5
 801f61e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801f620:	8125      	strh	r5, [r4, #8]
 801f622:	8165      	strh	r5, [r4, #10]
  return p;
}
 801f624:	4620      	mov	r0, r4
 801f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801f62a:	f1ba 0f00 	cmp.w	sl, #0
 801f62e:	d0d7      	beq.n	801f5e0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801f630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f632:	2b00      	cmp	r3, #0
 801f634:	d1d4      	bne.n	801f5e0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801f636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d1d1      	bne.n	801f5e0 <tcp_pbuf_prealloc+0x24>
 801f63c:	e7dc      	b.n	801f5f8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f63e:	4b03      	ldr	r3, [pc, #12]	; (801f64c <tcp_pbuf_prealloc+0x90>)
 801f640:	22e9      	movs	r2, #233	; 0xe9
 801f642:	4905      	ldr	r1, [pc, #20]	; (801f658 <tcp_pbuf_prealloc+0x9c>)
 801f644:	4803      	ldr	r0, [pc, #12]	; (801f654 <tcp_pbuf_prealloc+0x98>)
 801f646:	f006 fe85 	bl	8026354 <iprintf>
 801f64a:	e7c4      	b.n	801f5d6 <tcp_pbuf_prealloc+0x1a>
 801f64c:	08045d04 	.word	0x08045d04
 801f650:	08045d58 	.word	0x08045d58
 801f654:	0802b034 	.word	0x0802b034
 801f658:	08045d38 	.word	0x08045d38

0801f65c <tcp_create_segment>:
{
 801f65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f660:	460e      	mov	r6, r1
 801f662:	f89d a020 	ldrb.w	sl, [sp, #32]
 801f666:	4690      	mov	r8, r2
 801f668:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801f66a:	4607      	mov	r7, r0
 801f66c:	2800      	cmp	r0, #0
 801f66e:	d04c      	beq.n	801f70a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801f670:	2e00      	cmp	r6, #0
 801f672:	d052      	beq.n	801f71a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f674:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801f678:	22a8      	movs	r2, #168	; 0xa8
 801f67a:	4931      	ldr	r1, [pc, #196]	; (801f740 <tcp_create_segment+0xe4>)
 801f67c:	2004      	movs	r0, #4
 801f67e:	f7fc f851 	bl	801b724 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f682:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801f686:	4604      	mov	r4, r0
 801f688:	2800      	cmp	r0, #0
 801f68a:	d054      	beq.n	801f736 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801f68c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801f690:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f692:	8932      	ldrh	r2, [r6, #8]
 801f694:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801f698:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f69a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801f69c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f69e:	d32c      	bcc.n	801f6fa <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801f6a0:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801f6a4:	4630      	mov	r0, r6
 801f6a6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801f6a8:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801f6aa:	f7fc fcc9 	bl	801c040 <pbuf_add_header>
 801f6ae:	4606      	mov	r6, r0
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	d139      	bne.n	801f728 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801f6b4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f6b6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801f6b8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801f6ba:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f6be:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801f6c2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801f6c6:	f7fa fd3f 	bl	801a148 <lwip_htons>
 801f6ca:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801f6ce:	8b38      	ldrh	r0, [r7, #24]
 801f6d0:	68e7      	ldr	r7, [r4, #12]
 801f6d2:	f7fa fd39 	bl	801a148 <lwip_htons>
 801f6d6:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801f6d8:	4648      	mov	r0, r9
 801f6da:	68e7      	ldr	r7, [r4, #12]
 801f6dc:	f7fa fd38 	bl	801a150 <lwip_htonl>
 801f6e0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f6e2:	ea45 0008 	orr.w	r0, r5, r8
 801f6e6:	68e7      	ldr	r7, [r4, #12]
 801f6e8:	f7fa fd2e 	bl	801a148 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801f6ec:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801f6ee:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801f6f0:	749e      	strb	r6, [r3, #18]
 801f6f2:	74de      	strb	r6, [r3, #19]
}
 801f6f4:	4620      	mov	r0, r4
 801f6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801f6fa:	22b0      	movs	r2, #176	; 0xb0
 801f6fc:	4b10      	ldr	r3, [pc, #64]	; (801f740 <tcp_create_segment+0xe4>)
 801f6fe:	4911      	ldr	r1, [pc, #68]	; (801f744 <tcp_create_segment+0xe8>)
 801f700:	4811      	ldr	r0, [pc, #68]	; (801f748 <tcp_create_segment+0xec>)
 801f702:	f006 fe27 	bl	8026354 <iprintf>
  seg->len = p->tot_len - optlen;
 801f706:	8932      	ldrh	r2, [r6, #8]
 801f708:	e7ca      	b.n	801f6a0 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801f70a:	4b0d      	ldr	r3, [pc, #52]	; (801f740 <tcp_create_segment+0xe4>)
 801f70c:	22a3      	movs	r2, #163	; 0xa3
 801f70e:	490f      	ldr	r1, [pc, #60]	; (801f74c <tcp_create_segment+0xf0>)
 801f710:	480d      	ldr	r0, [pc, #52]	; (801f748 <tcp_create_segment+0xec>)
 801f712:	f006 fe1f 	bl	8026354 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801f716:	2e00      	cmp	r6, #0
 801f718:	d1ac      	bne.n	801f674 <tcp_create_segment+0x18>
 801f71a:	4b09      	ldr	r3, [pc, #36]	; (801f740 <tcp_create_segment+0xe4>)
 801f71c:	22a4      	movs	r2, #164	; 0xa4
 801f71e:	490c      	ldr	r1, [pc, #48]	; (801f750 <tcp_create_segment+0xf4>)
 801f720:	4809      	ldr	r0, [pc, #36]	; (801f748 <tcp_create_segment+0xec>)
 801f722:	f006 fe17 	bl	8026354 <iprintf>
 801f726:	e7a5      	b.n	801f674 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801f728:	4620      	mov	r0, r4
    return NULL;
 801f72a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801f72c:	f7fd fac4 	bl	801ccb8 <tcp_seg_free>
}
 801f730:	4620      	mov	r0, r4
 801f732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801f736:	4630      	mov	r0, r6
 801f738:	f7fc fd42 	bl	801c1c0 <pbuf_free>
    return NULL;
 801f73c:	e7da      	b.n	801f6f4 <tcp_create_segment+0x98>
 801f73e:	bf00      	nop
 801f740:	08045d04 	.word	0x08045d04
 801f744:	08045db0 	.word	0x08045db0
 801f748:	0802b034 	.word	0x0802b034
 801f74c:	08045d6c 	.word	0x08045d6c
 801f750:	08045d8c 	.word	0x08045d8c

0801f754 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f754:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801f756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f75a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801f75c:	4606      	mov	r6, r0
 801f75e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f760:	2022      	movs	r0, #34	; 0x22
 801f762:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801f766:	461c      	mov	r4, r3
 801f768:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801f76c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801f770:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f774:	f7fc fb52 	bl	801be1c <pbuf_alloc>
  if (p != NULL) {
 801f778:	4605      	mov	r5, r0
 801f77a:	b300      	cbz	r0, 801f7be <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f77c:	8943      	ldrh	r3, [r0, #10]
 801f77e:	2b13      	cmp	r3, #19
 801f780:	d920      	bls.n	801f7c4 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801f782:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801f784:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801f786:	f7fa fcdf 	bl	801a148 <lwip_htons>
 801f78a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f78c:	4650      	mov	r0, sl
 801f78e:	f7fa fcdb 	bl	801a148 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801f792:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801f794:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801f796:	4630      	mov	r0, r6
 801f798:	f7fa fcda 	bl	801a150 <lwip_htonl>
 801f79c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f79e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801f7a2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f7a4:	f7fa fcd0 	bl	801a148 <lwip_htons>
 801f7a8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801f7aa:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f7ac:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f7ae:	f7fa fccb 	bl	801a148 <lwip_htons>
    tcphdr->chksum = 0;
 801f7b2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801f7b4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801f7b6:	7423      	strb	r3, [r4, #16]
 801f7b8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801f7ba:	74a3      	strb	r3, [r4, #18]
 801f7bc:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801f7be:	4628      	mov	r0, r5
 801f7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f7c4:	4b03      	ldr	r3, [pc, #12]	; (801f7d4 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801f7c6:	f240 7223 	movw	r2, #1827	; 0x723
 801f7ca:	4903      	ldr	r1, [pc, #12]	; (801f7d8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801f7cc:	4803      	ldr	r0, [pc, #12]	; (801f7dc <tcp_output_alloc_header_common.constprop.0+0x88>)
 801f7ce:	f006 fdc1 	bl	8026354 <iprintf>
 801f7d2:	e7d6      	b.n	801f782 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801f7d4:	08045d04 	.word	0x08045d04
 801f7d8:	08045dc8 	.word	0x08045dc8
 801f7dc:	0802b034 	.word	0x0802b034

0801f7e0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801f7e0:	b570      	push	{r4, r5, r6, lr}
 801f7e2:	460d      	mov	r5, r1
 801f7e4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f7e6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801f7e8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f7ea:	b190      	cbz	r0, 801f812 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f7ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801f7ee:	2210      	movs	r2, #16
 801f7f0:	8b21      	ldrh	r1, [r4, #24]
 801f7f2:	9302      	str	r3, [sp, #8]
 801f7f4:	e9cd 1200 	strd	r1, r2, [sp]
 801f7f8:	4632      	mov	r2, r6
 801f7fa:	4629      	mov	r1, r5
 801f7fc:	8ae3      	ldrh	r3, [r4, #22]
 801f7fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f800:	f7ff ffa8 	bl	801f754 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f804:	b118      	cbz	r0, 801f80e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f806:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801f808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f80a:	4413      	add	r3, r2
 801f80c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801f80e:	b004      	add	sp, #16
 801f810:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f812:	4b04      	ldr	r3, [pc, #16]	; (801f824 <tcp_output_alloc_header.constprop.0+0x44>)
 801f814:	f240 7242 	movw	r2, #1858	; 0x742
 801f818:	4903      	ldr	r1, [pc, #12]	; (801f828 <tcp_output_alloc_header.constprop.0+0x48>)
 801f81a:	4804      	ldr	r0, [pc, #16]	; (801f82c <tcp_output_alloc_header.constprop.0+0x4c>)
 801f81c:	f006 fd9a 	bl	8026354 <iprintf>
 801f820:	e7e4      	b.n	801f7ec <tcp_output_alloc_header.constprop.0+0xc>
 801f822:	bf00      	nop
 801f824:	08045d04 	.word	0x08045d04
 801f828:	08045df8 	.word	0x08045df8
 801f82c:	0802b034 	.word	0x0802b034

0801f830 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f834:	4605      	mov	r5, r0
 801f836:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f838:	460c      	mov	r4, r1
{
 801f83a:	4690      	mov	r8, r2
 801f83c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f83e:	2900      	cmp	r1, #0
 801f840:	d034      	beq.n	801f8ac <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f842:	2d00      	cmp	r5, #0
 801f844:	d03a      	beq.n	801f8bc <tcp_output_control_segment+0x8c>
 801f846:	7a28      	ldrb	r0, [r5, #8]
 801f848:	bb10      	cbnz	r0, 801f890 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801f84a:	4630      	mov	r0, r6
 801f84c:	f004 f8b4 	bl	80239b8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801f850:	4607      	mov	r7, r0
 801f852:	b310      	cbz	r0, 801f89a <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801f854:	9600      	str	r6, [sp, #0]
 801f856:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801f858:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801f85c:	2106      	movs	r1, #6
 801f85e:	8922      	ldrh	r2, [r4, #8]
 801f860:	4620      	mov	r0, r4
 801f862:	f7fb fa05 	bl	801ac70 <ip_chksum_pseudo>
 801f866:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f86a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801f86c:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f86e:	9500      	str	r5, [sp, #0]
 801f870:	2506      	movs	r5, #6
 801f872:	4632      	mov	r2, r6
 801f874:	4641      	mov	r1, r8
 801f876:	9501      	str	r5, [sp, #4]
 801f878:	4620      	mov	r0, r4
 801f87a:	9702      	str	r7, [sp, #8]
 801f87c:	f004 fa66 	bl	8023d4c <ip4_output_if>
 801f880:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f882:	4620      	mov	r0, r4
 801f884:	f7fc fc9c 	bl	801c1c0 <pbuf_free>
  return err;
}
 801f888:	4628      	mov	r0, r5
 801f88a:	b005      	add	sp, #20
 801f88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801f890:	f7fc f970 	bl	801bb74 <netif_get_by_index>
  if (netif == NULL) {
 801f894:	4607      	mov	r7, r0
 801f896:	2800      	cmp	r0, #0
 801f898:	d1dc      	bne.n	801f854 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801f89a:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801f89e:	4620      	mov	r0, r4
 801f8a0:	f7fc fc8e 	bl	801c1c0 <pbuf_free>
}
 801f8a4:	4628      	mov	r0, r5
 801f8a6:	b005      	add	sp, #20
 801f8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f8ac:	4b0d      	ldr	r3, [pc, #52]	; (801f8e4 <tcp_output_control_segment+0xb4>)
 801f8ae:	f240 7287 	movw	r2, #1927	; 0x787
 801f8b2:	490d      	ldr	r1, [pc, #52]	; (801f8e8 <tcp_output_control_segment+0xb8>)
 801f8b4:	480d      	ldr	r0, [pc, #52]	; (801f8ec <tcp_output_control_segment+0xbc>)
 801f8b6:	f006 fd4d 	bl	8026354 <iprintf>
 801f8ba:	e7c2      	b.n	801f842 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801f8bc:	4630      	mov	r0, r6
 801f8be:	f004 f87b 	bl	80239b8 <ip4_route>
  if (netif == NULL) {
 801f8c2:	4607      	mov	r7, r0
 801f8c4:	2800      	cmp	r0, #0
 801f8c6:	d0e8      	beq.n	801f89a <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801f8c8:	9600      	str	r6, [sp, #0]
 801f8ca:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801f8cc:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801f8d0:	2106      	movs	r1, #6
 801f8d2:	8922      	ldrh	r2, [r4, #8]
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	f7fb f9cb 	bl	801ac70 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801f8da:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801f8dc:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801f8e0:	e7c5      	b.n	801f86e <tcp_output_control_segment+0x3e>
 801f8e2:	bf00      	nop
 801f8e4:	08045d04 	.word	0x08045d04
 801f8e8:	08045e20 	.word	0x08045e20
 801f8ec:	0802b034 	.word	0x0802b034

0801f8f0 <tcp_write>:
{
 801f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801f8f4:	2400      	movs	r4, #0
{
 801f8f6:	b091      	sub	sp, #68	; 0x44
 801f8f8:	9107      	str	r1, [sp, #28]
 801f8fa:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801f8fc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801f900:	2800      	cmp	r0, #0
 801f902:	f000 82fc 	beq.w	801fefe <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f906:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801f90a:	4692      	mov	sl, r2
 801f90c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801f90e:	4681      	mov	r9, r0
 801f910:	085b      	lsrs	r3, r3, #1
 801f912:	4293      	cmp	r3, r2
 801f914:	bf28      	it	cs
 801f916:	4613      	movcs	r3, r2
 801f918:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	bf08      	it	eq
 801f91e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f920:	9b07      	ldr	r3, [sp, #28]
 801f922:	2b00      	cmp	r3, #0
 801f924:	f000 82df 	beq.w	801fee6 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801f928:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801f92a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801f92c:	2a02      	cmp	r2, #2
 801f92e:	d902      	bls.n	801f936 <tcp_write+0x46>
 801f930:	2b07      	cmp	r3, #7
 801f932:	f040 829c 	bne.w	801fe6e <tcp_write+0x57e>
  } else if (len == 0) {
 801f936:	f1ba 0f00 	cmp.w	sl, #0
 801f93a:	f000 80ec 	beq.w	801fb16 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801f93e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801f942:	4553      	cmp	r3, sl
 801f944:	f0c0 82b6 	bcc.w	801feb4 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801f948:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801f94c:	2e08      	cmp	r6, #8
 801f94e:	f200 82b1 	bhi.w	801feb4 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801f952:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801f956:	2e00      	cmp	r6, #0
 801f958:	f000 80d3 	beq.w	801fb02 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	f040 80dc 	bne.w	801fb1a <tcp_write+0x22a>
 801f962:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801f966:	f1b8 0f00 	cmp.w	r8, #0
 801f96a:	f000 8263 	beq.w	801fe34 <tcp_write+0x544>
 801f96e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f970:	461a      	mov	r2, r3
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d1fb      	bne.n	801f970 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f978:	7a94      	ldrb	r4, [r2, #10]
 801f97a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f97c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f97e:	00a4      	lsls	r4, r4, #2
 801f980:	920b      	str	r2, [sp, #44]	; 0x2c
 801f982:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f986:	191a      	adds	r2, r3, r4
 801f988:	4593      	cmp	fp, r2
 801f98a:	f2c0 81a6 	blt.w	801fcda <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f98e:	ebab 0404 	sub.w	r4, fp, r4
 801f992:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801f994:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f998:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801f99a:	930a      	str	r3, [sp, #40]	; 0x28
 801f99c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	f000 80cf 	beq.w	801fb44 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f9a6:	42a3      	cmp	r3, r4
 801f9a8:	f200 818a 	bhi.w	801fcc0 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f9ac:	45a2      	cmp	sl, r4
 801f9ae:	4653      	mov	r3, sl
 801f9b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9b2:	bf28      	it	cs
 801f9b4:	4623      	movcs	r3, r4
 801f9b6:	4293      	cmp	r3, r2
 801f9b8:	bf28      	it	cs
 801f9ba:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801f9bc:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801f9be:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f9c0:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801f9c2:	b292      	uxth	r2, r2
      space -= oversize_used;
 801f9c4:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801f9c6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f9ca:	2a00      	cmp	r2, #0
 801f9cc:	f000 8183 	beq.w	801fcd6 <tcp_write+0x3e6>
 801f9d0:	459a      	cmp	sl, r3
 801f9d2:	f000 8180 	beq.w	801fcd6 <tcp_write+0x3e6>
 801f9d6:	4bb2      	ldr	r3, [pc, #712]	; (801fca0 <tcp_write+0x3b0>)
 801f9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f9dc:	49b1      	ldr	r1, [pc, #708]	; (801fca4 <tcp_write+0x3b4>)
 801f9de:	48b2      	ldr	r0, [pc, #712]	; (801fca8 <tcp_write+0x3b8>)
 801f9e0:	f006 fcb8 	bl	8026354 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f9e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f9e8:	459a      	cmp	sl, r3
 801f9ea:	f200 80b0 	bhi.w	801fb4e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f9f2:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801f9f4:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801f9f6:	45a2      	cmp	sl, r4
 801f9f8:	f240 80ee 	bls.w	801fbd8 <tcp_write+0x2e8>
 801f9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9fe:	f04f 0800 	mov.w	r8, #0
 801fa02:	f003 0301 	and.w	r3, r3, #1
 801fa06:	f8cd 8014 	str.w	r8, [sp, #20]
 801fa0a:	9308      	str	r3, [sp, #32]
 801fa0c:	4643      	mov	r3, r8
 801fa0e:	46d8      	mov	r8, fp
 801fa10:	469b      	mov	fp, r3
 801fa12:	e042      	b.n	801fa9a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fa14:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	f040 80f0 	bne.w	801fbfe <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fa1e:	2201      	movs	r2, #1
 801fa20:	4629      	mov	r1, r5
 801fa22:	2036      	movs	r0, #54	; 0x36
 801fa24:	f7fc f9fa 	bl	801be1c <pbuf_alloc>
 801fa28:	2800      	cmp	r0, #0
 801fa2a:	f000 8100 	beq.w	801fc2e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fa2e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fa30:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fa32:	9006      	str	r0, [sp, #24]
 801fa34:	4422      	add	r2, r4
 801fa36:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fa38:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fa3c:	2036      	movs	r0, #54	; 0x36
 801fa3e:	f7fc f9ed 	bl	801be1c <pbuf_alloc>
 801fa42:	9b06      	ldr	r3, [sp, #24]
 801fa44:	4607      	mov	r7, r0
 801fa46:	2800      	cmp	r0, #0
 801fa48:	f000 8195 	beq.w	801fd76 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801fa4c:	4619      	mov	r1, r3
 801fa4e:	f7fc fbe9 	bl	801c224 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801fa52:	4638      	mov	r0, r7
 801fa54:	f7fc fbc8 	bl	801c1e8 <pbuf_clen>
 801fa58:	4430      	add	r0, r6
 801fa5a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fa5c:	2e09      	cmp	r6, #9
 801fa5e:	d84a      	bhi.n	801faf6 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fa60:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801fa64:	2200      	movs	r2, #0
 801fa66:	4639      	mov	r1, r7
 801fa68:	4648      	mov	r0, r9
 801fa6a:	4423      	add	r3, r4
 801fa6c:	9200      	str	r2, [sp, #0]
 801fa6e:	f7ff fdf5 	bl	801f65c <tcp_create_segment>
 801fa72:	4607      	mov	r7, r0
 801fa74:	2800      	cmp	r0, #0
 801fa76:	f000 80da 	beq.w	801fc2e <tcp_write+0x33e>
    if (queue == NULL) {
 801fa7a:	9b05      	ldr	r3, [sp, #20]
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	f000 80a3 	beq.w	801fbc8 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fa82:	f1bb 0f00 	cmp.w	fp, #0
 801fa86:	f000 80c2 	beq.w	801fc0e <tcp_write+0x31e>
    pos += seglen;
 801fa8a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801fa8c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801fa90:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801fa92:	45a2      	cmp	sl, r4
 801fa94:	f240 809e 	bls.w	801fbd4 <tcp_write+0x2e4>
 801fa98:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801fa9a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fa9e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801faa0:	b2ad      	uxth	r5, r5
 801faa2:	4545      	cmp	r5, r8
 801faa4:	bf28      	it	cs
 801faa6:	4645      	movcs	r5, r8
 801faa8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d0b2      	beq.n	801fa14 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801faae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fab0:	4642      	mov	r2, r8
 801fab2:	4629      	mov	r1, r5
 801fab4:	2036      	movs	r0, #54	; 0x36
 801fab6:	e9cd 9300 	strd	r9, r3, [sp]
 801faba:	9b05      	ldr	r3, [sp, #20]
 801fabc:	fab3 f383 	clz	r3, r3
 801fac0:	095b      	lsrs	r3, r3, #5
 801fac2:	9302      	str	r3, [sp, #8]
 801fac4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801fac8:	f7ff fd78 	bl	801f5bc <tcp_pbuf_prealloc>
 801facc:	4607      	mov	r7, r0
 801face:	2800      	cmp	r0, #0
 801fad0:	f000 80ad 	beq.w	801fc2e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fad4:	8943      	ldrh	r3, [r0, #10]
 801fad6:	42ab      	cmp	r3, r5
 801fad8:	f0c0 80a1 	bcc.w	801fc1e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fadc:	9b07      	ldr	r3, [sp, #28]
 801fade:	462a      	mov	r2, r5
 801fae0:	6878      	ldr	r0, [r7, #4]
 801fae2:	1919      	adds	r1, r3, r4
 801fae4:	f005 fc70 	bl	80253c8 <memcpy>
    queuelen += pbuf_clen(p);
 801fae8:	4638      	mov	r0, r7
 801faea:	f7fc fb7d 	bl	801c1e8 <pbuf_clen>
 801faee:	4430      	add	r0, r6
 801faf0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801faf2:	2e09      	cmp	r6, #9
 801faf4:	d9b4      	bls.n	801fa60 <tcp_write+0x170>
      pbuf_free(p);
 801faf6:	4638      	mov	r0, r7
 801faf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801fafc:	f7fc fb60 	bl	801c1c0 <pbuf_free>
      goto memerr;
 801fb00:	e097      	b.n	801fc32 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	f000 80b6 	beq.w	801fc74 <tcp_write+0x384>
 801fb08:	4b65      	ldr	r3, [pc, #404]	; (801fca0 <tcp_write+0x3b0>)
 801fb0a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801fb0e:	4967      	ldr	r1, [pc, #412]	; (801fcac <tcp_write+0x3bc>)
 801fb10:	4865      	ldr	r0, [pc, #404]	; (801fca8 <tcp_write+0x3b8>)
 801fb12:	f006 fc1f 	bl	8026354 <iprintf>
  queuelen = pcb->snd_queuelen;
 801fb16:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801fb1a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801fb1e:	f1b8 0f00 	cmp.w	r8, #0
 801fb22:	f47f af24 	bne.w	801f96e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801fb26:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	f040 80ac 	bne.w	801fc88 <tcp_write+0x398>
  while (pos < len) {
 801fb30:	f1ba 0f00 	cmp.w	sl, #0
 801fb34:	f000 81c7 	beq.w	801fec6 <tcp_write+0x5d6>
          extendlen = seglen;
 801fb38:	2400      	movs	r4, #0
 801fb3a:	940d      	str	r4, [sp, #52]	; 0x34
 801fb3c:	940c      	str	r4, [sp, #48]	; 0x30
 801fb3e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801fb42:	e75b      	b.n	801f9fc <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801fb44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb48:	459a      	cmp	sl, r3
 801fb4a:	f67f af50 	bls.w	801f9ee <tcp_write+0xfe>
 801fb4e:	2c00      	cmp	r4, #0
 801fb50:	f43f af4d 	beq.w	801f9ee <tcp_write+0xfe>
 801fb54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fb56:	8912      	ldrh	r2, [r2, #8]
 801fb58:	920d      	str	r2, [sp, #52]	; 0x34
 801fb5a:	2a00      	cmp	r2, #0
 801fb5c:	f000 809c 	beq.w	801fc98 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fb60:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fb66:	42a7      	cmp	r7, r4
 801fb68:	bfa8      	it	ge
 801fb6a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fb6c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801fb6e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fb70:	f100 8187 	bmi.w	801fe82 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801fb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb76:	685a      	ldr	r2, [r3, #4]
 801fb78:	4613      	mov	r3, r2
 801fb7a:	6812      	ldr	r2, [r2, #0]
 801fb7c:	2a00      	cmp	r2, #0
 801fb7e:	d1fb      	bne.n	801fb78 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801fb80:	920c      	str	r2, [sp, #48]	; 0x30
 801fb82:	7b1a      	ldrb	r2, [r3, #12]
 801fb84:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801fb88:	d106      	bne.n	801fb98 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801fb8a:	895a      	ldrh	r2, [r3, #10]
 801fb8c:	685b      	ldr	r3, [r3, #4]
 801fb8e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801fb90:	9a07      	ldr	r2, [sp, #28]
 801fb92:	429a      	cmp	r2, r3
 801fb94:	f000 8167 	beq.w	801fe66 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801fb98:	2201      	movs	r2, #1
 801fb9a:	4629      	mov	r1, r5
 801fb9c:	2000      	movs	r0, #0
 801fb9e:	f7fc f93d 	bl	801be1c <pbuf_alloc>
 801fba2:	900c      	str	r0, [sp, #48]	; 0x30
 801fba4:	2800      	cmp	r0, #0
 801fba6:	f000 813e 	beq.w	801fe26 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801fbaa:	9b07      	ldr	r3, [sp, #28]
 801fbac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fbae:	440b      	add	r3, r1
 801fbb0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801fbb2:	f7fc fb19 	bl	801c1e8 <pbuf_clen>
 801fbb6:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801fbb8:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801fbba:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801fbbc:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801fbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fbc2:	18ec      	adds	r4, r5, r3
 801fbc4:	b2a4      	uxth	r4, r4
 801fbc6:	e716      	b.n	801f9f6 <tcp_write+0x106>
    pos += seglen;
 801fbc8:	442c      	add	r4, r5
 801fbca:	9005      	str	r0, [sp, #20]
 801fbcc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801fbce:	45a2      	cmp	sl, r4
 801fbd0:	f63f af62 	bhi.w	801fa98 <tcp_write+0x1a8>
 801fbd4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801fbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	f000 80db 	beq.w	801fd96 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801fbe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fbe2:	6854      	ldr	r4, [r2, #4]
 801fbe4:	2c00      	cmp	r4, #0
 801fbe6:	f000 8090 	beq.w	801fd0a <tcp_write+0x41a>
 801fbea:	469b      	mov	fp, r3
 801fbec:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801fbee:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801fbf0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801fbf2:	445b      	add	r3, fp
 801fbf4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801fbf6:	2a00      	cmp	r2, #0
 801fbf8:	d079      	beq.n	801fcee <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801fbfa:	4614      	mov	r4, r2
 801fbfc:	e7f7      	b.n	801fbee <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fbfe:	4b28      	ldr	r3, [pc, #160]	; (801fca0 <tcp_write+0x3b0>)
 801fc00:	f240 2271 	movw	r2, #625	; 0x271
 801fc04:	492a      	ldr	r1, [pc, #168]	; (801fcb0 <tcp_write+0x3c0>)
 801fc06:	4828      	ldr	r0, [pc, #160]	; (801fca8 <tcp_write+0x3b8>)
 801fc08:	f006 fba4 	bl	8026354 <iprintf>
 801fc0c:	e707      	b.n	801fa1e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fc0e:	4b24      	ldr	r3, [pc, #144]	; (801fca0 <tcp_write+0x3b0>)
 801fc10:	f240 22ab 	movw	r2, #683	; 0x2ab
 801fc14:	4927      	ldr	r1, [pc, #156]	; (801fcb4 <tcp_write+0x3c4>)
 801fc16:	4824      	ldr	r0, [pc, #144]	; (801fca8 <tcp_write+0x3b8>)
 801fc18:	f006 fb9c 	bl	8026354 <iprintf>
 801fc1c:	e735      	b.n	801fa8a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fc1e:	4b20      	ldr	r3, [pc, #128]	; (801fca0 <tcp_write+0x3b0>)
 801fc20:	f240 2266 	movw	r2, #614	; 0x266
 801fc24:	4924      	ldr	r1, [pc, #144]	; (801fcb8 <tcp_write+0x3c8>)
 801fc26:	4820      	ldr	r0, [pc, #128]	; (801fca8 <tcp_write+0x3b8>)
 801fc28:	f006 fb94 	bl	8026354 <iprintf>
 801fc2c:	e756      	b.n	801fadc <tcp_write+0x1ec>
 801fc2e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fc32:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801fc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc3a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801fc3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc40:	b113      	cbz	r3, 801fc48 <tcp_write+0x358>
    pbuf_free(concat_p);
 801fc42:	4618      	mov	r0, r3
 801fc44:	f7fc fabc 	bl	801c1c0 <pbuf_free>
  if (queue != NULL) {
 801fc48:	f1b8 0f00 	cmp.w	r8, #0
 801fc4c:	d002      	beq.n	801fc54 <tcp_write+0x364>
    tcp_segs_free(queue);
 801fc4e:	4640      	mov	r0, r8
 801fc50:	f7fd f820 	bl	801cc94 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801fc54:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801fc58:	b13b      	cbz	r3, 801fc6a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801fc5a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801fc5e:	b923      	cbnz	r3, 801fc6a <tcp_write+0x37a>
 801fc60:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	f000 808c 	beq.w	801fd82 <tcp_write+0x492>
  return ERR_MEM;
 801fc6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fc6e:	b011      	add	sp, #68	; 0x44
 801fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801fc74:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	f47f af45 	bne.w	801fb08 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801fc7e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	f43f af58 	beq.w	801fb38 <tcp_write+0x248>
 801fc88:	4b05      	ldr	r3, [pc, #20]	; (801fca0 <tcp_write+0x3b0>)
 801fc8a:	f240 224a 	movw	r2, #586	; 0x24a
 801fc8e:	490b      	ldr	r1, [pc, #44]	; (801fcbc <tcp_write+0x3cc>)
 801fc90:	4805      	ldr	r0, [pc, #20]	; (801fca8 <tcp_write+0x3b8>)
 801fc92:	f006 fb5f 	bl	8026354 <iprintf>
 801fc96:	e74b      	b.n	801fb30 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801fc98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc9c:	930c      	str	r3, [sp, #48]	; 0x30
 801fc9e:	e6ad      	b.n	801f9fc <tcp_write+0x10c>
 801fca0:	08045d04 	.word	0x08045d04
 801fca4:	08045f40 	.word	0x08045f40
 801fca8:	0802b034 	.word	0x0802b034
 801fcac:	08045ed4 	.word	0x08045ed4
 801fcb0:	08045ffc 	.word	0x08045ffc
 801fcb4:	0804600c 	.word	0x0804600c
 801fcb8:	08045fbc 	.word	0x08045fbc
 801fcbc:	08045f8c 	.word	0x08045f8c
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801fcc0:	4b94      	ldr	r3, [pc, #592]	; (801ff14 <tcp_write+0x624>)
 801fcc2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801fcc6:	4994      	ldr	r1, [pc, #592]	; (801ff18 <tcp_write+0x628>)
 801fcc8:	4894      	ldr	r0, [pc, #592]	; (801ff1c <tcp_write+0x62c>)
 801fcca:	f006 fb43 	bl	8026354 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801fcce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fcd2:	930a      	str	r3, [sp, #40]	; 0x28
 801fcd4:	e66a      	b.n	801f9ac <tcp_write+0xbc>
 801fcd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fcd8:	e735      	b.n	801fb46 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fcda:	4b8e      	ldr	r3, [pc, #568]	; (801ff14 <tcp_write+0x624>)
 801fcdc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801fce0:	498f      	ldr	r1, [pc, #572]	; (801ff20 <tcp_write+0x630>)
 801fce2:	488e      	ldr	r0, [pc, #568]	; (801ff1c <tcp_write+0x62c>)
 801fce4:	f006 fb36 	bl	8026354 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fcea:	891b      	ldrh	r3, [r3, #8]
 801fcec:	e64f      	b.n	801f98e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801fcee:	8963      	ldrh	r3, [r4, #10]
 801fcf0:	465a      	mov	r2, fp
 801fcf2:	6860      	ldr	r0, [r4, #4]
 801fcf4:	4629      	mov	r1, r5
 801fcf6:	4418      	add	r0, r3
 801fcf8:	f005 fb66 	bl	80253c8 <memcpy>
        p->len += oversize_used;
 801fcfc:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801fcfe:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801fd00:	445b      	add	r3, fp
 801fd02:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801fd04:	2a00      	cmp	r2, #0
 801fd06:	f47f af78 	bne.w	801fbfa <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801fd0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fd0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fd0e:	8913      	ldrh	r3, [r2, #8]
 801fd10:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801fd12:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801fd16:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801fd18:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801fd1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d061      	beq.n	801fde6 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801fd22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fd24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fd26:	6860      	ldr	r0, [r4, #4]
 801fd28:	4629      	mov	r1, r5
 801fd2a:	f7fc fa7b 	bl	801c224 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801fd2e:	892a      	ldrh	r2, [r5, #8]
 801fd30:	8923      	ldrh	r3, [r4, #8]
 801fd32:	4413      	add	r3, r2
 801fd34:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801fd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd38:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801fd3c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801fd40:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801fd44:	4453      	add	r3, sl
 801fd46:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801fd4a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801fd4e:	eba3 0a0a 	sub.w	sl, r3, sl
 801fd52:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801fd56:	b11e      	cbz	r6, 801fd60 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801fd58:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d036      	beq.n	801fdce <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801fd60:	b12f      	cbz	r7, 801fd6e <tcp_write+0x47e>
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	b11b      	cbz	r3, 801fd6e <tcp_write+0x47e>
 801fd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd68:	f012 0502 	ands.w	r5, r2, #2
 801fd6c:	d025      	beq.n	801fdba <tcp_write+0x4ca>
  return ERR_OK;
 801fd6e:	2000      	movs	r0, #0
}
 801fd70:	b011      	add	sp, #68	; 0x44
 801fd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801fd76:	4618      	mov	r0, r3
 801fd78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801fd7c:	f7fc fa20 	bl	801c1c0 <pbuf_free>
        goto memerr;
 801fd80:	e757      	b.n	801fc32 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801fd82:	4b64      	ldr	r3, [pc, #400]	; (801ff14 <tcp_write+0x624>)
 801fd84:	f240 3227 	movw	r2, #807	; 0x327
 801fd88:	4966      	ldr	r1, [pc, #408]	; (801ff24 <tcp_write+0x634>)
 801fd8a:	4864      	ldr	r0, [pc, #400]	; (801ff1c <tcp_write+0x62c>)
 801fd8c:	f006 fae2 	bl	8026354 <iprintf>
  return ERR_MEM;
 801fd90:	f04f 30ff 	mov.w	r0, #4294967295
 801fd94:	e76b      	b.n	801fc6e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801fd96:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fd9a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801fd9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d051      	beq.n	801fe48 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801fda4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d1bb      	bne.n	801fd22 <tcp_write+0x432>
 801fdaa:	4b5a      	ldr	r3, [pc, #360]	; (801ff14 <tcp_write+0x624>)
 801fdac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801fdb0:	495d      	ldr	r1, [pc, #372]	; (801ff28 <tcp_write+0x638>)
 801fdb2:	485a      	ldr	r0, [pc, #360]	; (801ff1c <tcp_write+0x62c>)
 801fdb4:	f006 face 	bl	8026354 <iprintf>
 801fdb8:	e7b3      	b.n	801fd22 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801fdba:	2008      	movs	r0, #8
 801fdbc:	899c      	ldrh	r4, [r3, #12]
 801fdbe:	f7fa f9c3 	bl	801a148 <lwip_htons>
 801fdc2:	4602      	mov	r2, r0
 801fdc4:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801fdc6:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801fdc8:	4314      	orrs	r4, r2
 801fdca:	819c      	strh	r4, [r3, #12]
 801fdcc:	e74f      	b.n	801fc6e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801fdce:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d1c4      	bne.n	801fd60 <tcp_write+0x470>
 801fdd6:	4b4f      	ldr	r3, [pc, #316]	; (801ff14 <tcp_write+0x624>)
 801fdd8:	f240 3212 	movw	r2, #786	; 0x312
 801fddc:	4951      	ldr	r1, [pc, #324]	; (801ff24 <tcp_write+0x634>)
 801fdde:	484f      	ldr	r0, [pc, #316]	; (801ff1c <tcp_write+0x62c>)
 801fde0:	f006 fab8 	bl	8026354 <iprintf>
 801fde4:	e7bc      	b.n	801fd60 <tcp_write+0x470>
  } else if (extendlen > 0) {
 801fde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d0a4      	beq.n	801fd36 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801fdec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdee:	6859      	ldr	r1, [r3, #4]
 801fdf0:	2900      	cmp	r1, #0
 801fdf2:	d02e      	beq.n	801fe52 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fdf4:	680a      	ldr	r2, [r1, #0]
 801fdf6:	2a00      	cmp	r2, #0
 801fdf8:	d07f      	beq.n	801fefa <tcp_write+0x60a>
 801fdfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fdfc:	e000      	b.n	801fe00 <tcp_write+0x510>
 801fdfe:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801fe00:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fe02:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801fe04:	4423      	add	r3, r4
 801fe06:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fe08:	4611      	mov	r1, r2
 801fe0a:	2800      	cmp	r0, #0
 801fe0c:	d1f7      	bne.n	801fdfe <tcp_write+0x50e>
    p->tot_len += extendlen;
 801fe0e:	8913      	ldrh	r3, [r2, #8]
 801fe10:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fe12:	440b      	add	r3, r1
 801fe14:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801fe16:	8953      	ldrh	r3, [r2, #10]
 801fe18:	440b      	add	r3, r1
 801fe1a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801fe1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fe1e:	8913      	ldrh	r3, [r2, #8]
 801fe20:	440b      	add	r3, r1
 801fe22:	8113      	strh	r3, [r2, #8]
 801fe24:	e787      	b.n	801fd36 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fe26:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801fe2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fe2e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801fe32:	e70f      	b.n	801fc54 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fe34:	4b37      	ldr	r3, [pc, #220]	; (801ff14 <tcp_write+0x624>)
 801fe36:	f240 1255 	movw	r2, #341	; 0x155
 801fe3a:	493c      	ldr	r1, [pc, #240]	; (801ff2c <tcp_write+0x63c>)
 801fe3c:	4837      	ldr	r0, [pc, #220]	; (801ff1c <tcp_write+0x62c>)
 801fe3e:	f006 fa89 	bl	8026354 <iprintf>
  queuelen = pcb->snd_queuelen;
 801fe42:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801fe46:	e668      	b.n	801fb1a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801fe48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fe4a:	b19b      	cbz	r3, 801fe74 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801fe4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d1cc      	bne.n	801fdec <tcp_write+0x4fc>
 801fe52:	4b30      	ldr	r3, [pc, #192]	; (801ff14 <tcp_write+0x624>)
 801fe54:	f240 22e6 	movw	r2, #742	; 0x2e6
 801fe58:	4935      	ldr	r1, [pc, #212]	; (801ff30 <tcp_write+0x640>)
 801fe5a:	4830      	ldr	r0, [pc, #192]	; (801ff1c <tcp_write+0x62c>)
 801fe5c:	f006 fa7a 	bl	8026354 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fe60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe62:	6859      	ldr	r1, [r3, #4]
 801fe64:	e7c6      	b.n	801fdf4 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801fe66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe68:	bba3      	cbnz	r3, 801fed4 <tcp_write+0x5e4>
          extendlen = seglen;
 801fe6a:	950d      	str	r5, [sp, #52]	; 0x34
 801fe6c:	e6a7      	b.n	801fbbe <tcp_write+0x2ce>
    return ERR_CONN;
 801fe6e:	f06f 000a 	mvn.w	r0, #10
 801fe72:	e6fc      	b.n	801fc6e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801fe74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	f47f af5d 	bne.w	801fd36 <tcp_write+0x446>
    pcb->unsent = queue;
 801fe7c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801fe80:	e75c      	b.n	801fd3c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801fe82:	e9cd 9300 	strd	r9, r3, [sp]
 801fe86:	2301      	movs	r3, #1
 801fe88:	4622      	mov	r2, r4
 801fe8a:	4629      	mov	r1, r5
 801fe8c:	2000      	movs	r0, #0
 801fe8e:	9302      	str	r3, [sp, #8]
 801fe90:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801fe94:	f7ff fb92 	bl	801f5bc <tcp_pbuf_prealloc>
 801fe98:	4603      	mov	r3, r0
 801fe9a:	4604      	mov	r4, r0
 801fe9c:	900c      	str	r0, [sp, #48]	; 0x30
 801fe9e:	2800      	cmp	r0, #0
 801fea0:	d0c1      	beq.n	801fe26 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801fea2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fea4:	462a      	mov	r2, r5
 801fea6:	9907      	ldr	r1, [sp, #28]
 801fea8:	4401      	add	r1, r0
 801feaa:	6858      	ldr	r0, [r3, #4]
 801feac:	f005 fa8c 	bl	80253c8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801feb0:	4620      	mov	r0, r4
 801feb2:	e67e      	b.n	801fbb2 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801feb4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801feb8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801febc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fec0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801fec4:	e6d3      	b.n	801fc6e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801fec6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801feca:	46d0      	mov	r8, sl
 801fecc:	4657      	mov	r7, sl
 801fece:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801fed2:	e7d3      	b.n	801fe7c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801fed4:	4b0f      	ldr	r3, [pc, #60]	; (801ff14 <tcp_write+0x624>)
 801fed6:	f240 2231 	movw	r2, #561	; 0x231
 801feda:	4916      	ldr	r1, [pc, #88]	; (801ff34 <tcp_write+0x644>)
 801fedc:	480f      	ldr	r0, [pc, #60]	; (801ff1c <tcp_write+0x62c>)
 801fede:	f006 fa39 	bl	8026354 <iprintf>
          extendlen = seglen;
 801fee2:	950d      	str	r5, [sp, #52]	; 0x34
 801fee4:	e66b      	b.n	801fbbe <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801fee6:	4b0b      	ldr	r3, [pc, #44]	; (801ff14 <tcp_write+0x624>)
 801fee8:	f240 12ad 	movw	r2, #429	; 0x1ad
 801feec:	4912      	ldr	r1, [pc, #72]	; (801ff38 <tcp_write+0x648>)
 801feee:	480b      	ldr	r0, [pc, #44]	; (801ff1c <tcp_write+0x62c>)
 801fef0:	f006 fa30 	bl	8026354 <iprintf>
 801fef4:	f06f 000f 	mvn.w	r0, #15
 801fef8:	e6b9      	b.n	801fc6e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801fefa:	460a      	mov	r2, r1
 801fefc:	e787      	b.n	801fe0e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801fefe:	4b05      	ldr	r3, [pc, #20]	; (801ff14 <tcp_write+0x624>)
 801ff00:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ff04:	490d      	ldr	r1, [pc, #52]	; (801ff3c <tcp_write+0x64c>)
 801ff06:	4805      	ldr	r0, [pc, #20]	; (801ff1c <tcp_write+0x62c>)
 801ff08:	f006 fa24 	bl	8026354 <iprintf>
 801ff0c:	f06f 000f 	mvn.w	r0, #15
 801ff10:	e6ad      	b.n	801fc6e <tcp_write+0x37e>
 801ff12:	bf00      	nop
 801ff14:	08045d04 	.word	0x08045d04
 801ff18:	08045f20 	.word	0x08045f20
 801ff1c:	0802b034 	.word	0x0802b034
 801ff20:	08045f08 	.word	0x08045f08
 801ff24:	08046090 	.word	0x08046090
 801ff28:	08046020 	.word	0x08046020
 801ff2c:	08045e98 	.word	0x08045e98
 801ff30:	08046058 	.word	0x08046058
 801ff34:	08045f60 	.word	0x08045f60
 801ff38:	08045e64 	.word	0x08045e64
 801ff3c:	08045e4c 	.word	0x08045e4c

0801ff40 <tcp_split_unsent_seg>:
{
 801ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ff44:	4605      	mov	r5, r0
{
 801ff46:	b083      	sub	sp, #12
 801ff48:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ff4a:	2800      	cmp	r0, #0
 801ff4c:	f000 80a7 	beq.w	802009e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801ff50:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801ff52:	b376      	cbz	r6, 801ffb2 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801ff54:	2c00      	cmp	r4, #0
 801ff56:	f000 80b3 	beq.w	80200c0 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801ff5a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ff5e:	45a1      	cmp	r9, r4
 801ff60:	f240 8099 	bls.w	8020096 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ff64:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801ff66:	42a3      	cmp	r3, r4
 801ff68:	d328      	bcc.n	801ffbc <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801ff6a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801ff6e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ff72:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ff76:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ff78:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801ff7c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ff80:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ff84:	eb08 010b 	add.w	r1, r8, fp
 801ff88:	b289      	uxth	r1, r1
 801ff8a:	f7fb ff47 	bl	801be1c <pbuf_alloc>
  if (p == NULL) {
 801ff8e:	4607      	mov	r7, r0
 801ff90:	b178      	cbz	r0, 801ffb2 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801ff92:	6870      	ldr	r0, [r6, #4]
 801ff94:	8932      	ldrh	r2, [r6, #8]
 801ff96:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ff98:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801ff9a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ff9c:	4642      	mov	r2, r8
 801ff9e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801ffa0:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ffa2:	b29b      	uxth	r3, r3
 801ffa4:	f7fc f9b0 	bl	801c308 <pbuf_copy_partial>
 801ffa8:	4540      	cmp	r0, r8
 801ffaa:	d01d      	beq.n	801ffe8 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801ffac:	4638      	mov	r0, r7
 801ffae:	f7fc f907 	bl	801c1c0 <pbuf_free>
  return ERR_MEM;
 801ffb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ffb6:	b003      	add	sp, #12
 801ffb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ffbc:	4b45      	ldr	r3, [pc, #276]	; (80200d4 <tcp_split_unsent_seg+0x194>)
 801ffbe:	f240 325b 	movw	r2, #859	; 0x35b
 801ffc2:	4945      	ldr	r1, [pc, #276]	; (80200d8 <tcp_split_unsent_seg+0x198>)
 801ffc4:	4845      	ldr	r0, [pc, #276]	; (80200dc <tcp_split_unsent_seg+0x19c>)
 801ffc6:	f006 f9c5 	bl	8026354 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ffca:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ffce:	f1b9 0f00 	cmp.w	r9, #0
 801ffd2:	d1ca      	bne.n	801ff6a <tcp_split_unsent_seg+0x2a>
 801ffd4:	4b3f      	ldr	r3, [pc, #252]	; (80200d4 <tcp_split_unsent_seg+0x194>)
 801ffd6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ffda:	4941      	ldr	r1, [pc, #260]	; (80200e0 <tcp_split_unsent_seg+0x1a0>)
 801ffdc:	483f      	ldr	r0, [pc, #252]	; (80200dc <tcp_split_unsent_seg+0x19c>)
 801ffde:	f006 f9b9 	bl	8026354 <iprintf>
  remainder = useg->len - split;
 801ffe2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ffe6:	e7c0      	b.n	801ff6a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ffe8:	68f3      	ldr	r3, [r6, #12]
 801ffea:	8998      	ldrh	r0, [r3, #12]
 801ffec:	f7fa f8ac 	bl	801a148 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801fff0:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801fff4:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801fff8:	d159      	bne.n	80200ae <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801fffa:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801fffe:	f018 0f01 	tst.w	r8, #1
 8020002:	d003      	beq.n	802000c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 8020004:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8020008:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 802000c:	68f3      	ldr	r3, [r6, #12]
 802000e:	6858      	ldr	r0, [r3, #4]
 8020010:	f7fa f89e 	bl	801a150 <lwip_htonl>
 8020014:	f8cd a000 	str.w	sl, [sp]
 8020018:	1823      	adds	r3, r4, r0
 802001a:	465a      	mov	r2, fp
 802001c:	4639      	mov	r1, r7
 802001e:	4628      	mov	r0, r5
 8020020:	f7ff fb1c 	bl	801f65c <tcp_create_segment>
  if (seg == NULL) {
 8020024:	4682      	mov	sl, r0
 8020026:	2800      	cmp	r0, #0
 8020028:	d0c0      	beq.n	801ffac <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802002a:	6870      	ldr	r0, [r6, #4]
 802002c:	eba4 0409 	sub.w	r4, r4, r9
 8020030:	f7fc f8da 	bl	801c1e8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020034:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020036:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802003a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 802003c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802003e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020040:	4610      	mov	r0, r2
 8020042:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020044:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020048:	b289      	uxth	r1, r1
 802004a:	f7fb ffa1 	bl	801bf90 <pbuf_realloc>
  useg->len -= remainder;
 802004e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020050:	4640      	mov	r0, r8
  useg->len -= remainder;
 8020052:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020054:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 8020056:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020058:	899c      	ldrh	r4, [r3, #12]
 802005a:	f7fa f875 	bl	801a148 <lwip_htons>
 802005e:	68f3      	ldr	r3, [r6, #12]
 8020060:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020062:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020064:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020066:	f7fc f8bf 	bl	801c1e8 <pbuf_clen>
 802006a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802006e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020070:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020074:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020078:	f7fc f8b6 	bl	801c1e8 <pbuf_clen>
 802007c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8020080:	4418      	add	r0, r3
  seg->next = useg->next;
 8020082:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020084:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8020088:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 802008c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 8020090:	f8da 3000 	ldr.w	r3, [sl]
 8020094:	b183      	cbz	r3, 80200b8 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 8020096:	2000      	movs	r0, #0
}
 8020098:	b003      	add	sp, #12
 802009a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802009e:	4b0d      	ldr	r3, [pc, #52]	; (80200d4 <tcp_split_unsent_seg+0x194>)
 80200a0:	f240 324b 	movw	r2, #843	; 0x34b
 80200a4:	490f      	ldr	r1, [pc, #60]	; (80200e4 <tcp_split_unsent_seg+0x1a4>)
 80200a6:	480d      	ldr	r0, [pc, #52]	; (80200dc <tcp_split_unsent_seg+0x19c>)
 80200a8:	f006 f954 	bl	8026354 <iprintf>
 80200ac:	e750      	b.n	801ff50 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 80200ae:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80200b2:	f04f 0b08 	mov.w	fp, #8
 80200b6:	e7a2      	b.n	801fffe <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 80200b8:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 80200ba:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80200be:	e77a      	b.n	801ffb6 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80200c0:	4b04      	ldr	r3, [pc, #16]	; (80200d4 <tcp_split_unsent_seg+0x194>)
 80200c2:	f240 3253 	movw	r2, #851	; 0x353
 80200c6:	4908      	ldr	r1, [pc, #32]	; (80200e8 <tcp_split_unsent_seg+0x1a8>)
 80200c8:	4804      	ldr	r0, [pc, #16]	; (80200dc <tcp_split_unsent_seg+0x19c>)
 80200ca:	f006 f943 	bl	8026354 <iprintf>
    return ERR_VAL;
 80200ce:	f06f 0005 	mvn.w	r0, #5
 80200d2:	e770      	b.n	801ffb6 <tcp_split_unsent_seg+0x76>
 80200d4:	08045d04 	.word	0x08045d04
 80200d8:	080460f8 	.word	0x080460f8
 80200dc:	0802b034 	.word	0x0802b034
 80200e0:	08046108 	.word	0x08046108
 80200e4:	080460b0 	.word	0x080460b0
 80200e8:	080460d4 	.word	0x080460d4

080200ec <tcp_enqueue_flags>:
{
 80200ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80200f0:	f011 0703 	ands.w	r7, r1, #3
{
 80200f4:	b082      	sub	sp, #8
 80200f6:	460d      	mov	r5, r1
 80200f8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80200fa:	d05e      	beq.n	80201ba <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80200fc:	2c00      	cmp	r4, #0
 80200fe:	d065      	beq.n	80201cc <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 8020100:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8020104:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 8020108:	d049      	beq.n	802019e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802010a:	2104      	movs	r1, #4
 802010c:	2036      	movs	r0, #54	; 0x36
 802010e:	f7fb fe85 	bl	801be1c <pbuf_alloc>
 8020112:	4606      	mov	r6, r0
 8020114:	2800      	cmp	r0, #0
 8020116:	d049      	beq.n	80201ac <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020118:	8943      	ldrh	r3, [r0, #10]
 802011a:	2b03      	cmp	r3, #3
 802011c:	d872      	bhi.n	8020204 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 802011e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020122:	4b40      	ldr	r3, [pc, #256]	; (8020224 <tcp_enqueue_flags+0x138>)
 8020124:	f240 4239 	movw	r2, #1081	; 0x439
 8020128:	493f      	ldr	r1, [pc, #252]	; (8020228 <tcp_enqueue_flags+0x13c>)
 802012a:	4840      	ldr	r0, [pc, #256]	; (802022c <tcp_enqueue_flags+0x140>)
 802012c:	f006 f912 	bl	8026354 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8020130:	4631      	mov	r1, r6
 8020132:	f8cd 8000 	str.w	r8, [sp]
 8020136:	462a      	mov	r2, r5
 8020138:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802013a:	4620      	mov	r0, r4
 802013c:	f7ff fa8e 	bl	801f65c <tcp_create_segment>
 8020140:	4606      	mov	r6, r0
 8020142:	2800      	cmp	r0, #0
 8020144:	d032      	beq.n	80201ac <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020146:	68c3      	ldr	r3, [r0, #12]
 8020148:	079a      	lsls	r2, r3, #30
 802014a:	d153      	bne.n	80201f4 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802014c:	8933      	ldrh	r3, [r6, #8]
 802014e:	2b00      	cmp	r3, #0
 8020150:	d144      	bne.n	80201dc <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 8020152:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8020154:	2b00      	cmp	r3, #0
 8020156:	d04b      	beq.n	80201f0 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020158:	461a      	mov	r2, r3
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	2b00      	cmp	r3, #0
 802015e:	d1fb      	bne.n	8020158 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 8020160:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8020162:	2300      	movs	r3, #0
 8020164:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020168:	b117      	cbz	r7, 8020170 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 802016a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802016c:	3301      	adds	r3, #1
 802016e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8020170:	07eb      	lsls	r3, r5, #31
 8020172:	d503      	bpl.n	802017c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 8020174:	8b63      	ldrh	r3, [r4, #26]
 8020176:	f043 0320 	orr.w	r3, r3, #32
 802017a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802017c:	6870      	ldr	r0, [r6, #4]
 802017e:	f7fc f833 	bl	801c1e8 <pbuf_clen>
 8020182:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8020186:	4418      	add	r0, r3
 8020188:	b280      	uxth	r0, r0
 802018a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 802018e:	b118      	cbz	r0, 8020198 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020190:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8020192:	2800      	cmp	r0, #0
 8020194:	d039      	beq.n	802020a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8020196:	2000      	movs	r0, #0
}
 8020198:	b002      	add	sp, #8
 802019a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802019e:	4641      	mov	r1, r8
 80201a0:	2036      	movs	r0, #54	; 0x36
 80201a2:	f7fb fe3b 	bl	801be1c <pbuf_alloc>
 80201a6:	4606      	mov	r6, r0
 80201a8:	2800      	cmp	r0, #0
 80201aa:	d1c1      	bne.n	8020130 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80201ac:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 80201ae:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80201b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201b6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 80201b8:	e7ee      	b.n	8020198 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80201ba:	4b1a      	ldr	r3, [pc, #104]	; (8020224 <tcp_enqueue_flags+0x138>)
 80201bc:	f240 4211 	movw	r2, #1041	; 0x411
 80201c0:	491b      	ldr	r1, [pc, #108]	; (8020230 <tcp_enqueue_flags+0x144>)
 80201c2:	481a      	ldr	r0, [pc, #104]	; (802022c <tcp_enqueue_flags+0x140>)
 80201c4:	f006 f8c6 	bl	8026354 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80201c8:	2c00      	cmp	r4, #0
 80201ca:	d199      	bne.n	8020100 <tcp_enqueue_flags+0x14>
 80201cc:	4b15      	ldr	r3, [pc, #84]	; (8020224 <tcp_enqueue_flags+0x138>)
 80201ce:	f240 4213 	movw	r2, #1043	; 0x413
 80201d2:	4918      	ldr	r1, [pc, #96]	; (8020234 <tcp_enqueue_flags+0x148>)
 80201d4:	4815      	ldr	r0, [pc, #84]	; (802022c <tcp_enqueue_flags+0x140>)
 80201d6:	f006 f8bd 	bl	8026354 <iprintf>
 80201da:	e791      	b.n	8020100 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80201dc:	4b11      	ldr	r3, [pc, #68]	; (8020224 <tcp_enqueue_flags+0x138>)
 80201de:	f240 4243 	movw	r2, #1091	; 0x443
 80201e2:	4915      	ldr	r1, [pc, #84]	; (8020238 <tcp_enqueue_flags+0x14c>)
 80201e4:	4811      	ldr	r0, [pc, #68]	; (802022c <tcp_enqueue_flags+0x140>)
 80201e6:	f006 f8b5 	bl	8026354 <iprintf>
  if (pcb->unsent == NULL) {
 80201ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	d1b3      	bne.n	8020158 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 80201f0:	66e6      	str	r6, [r4, #108]	; 0x6c
 80201f2:	e7b6      	b.n	8020162 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80201f4:	4b0b      	ldr	r3, [pc, #44]	; (8020224 <tcp_enqueue_flags+0x138>)
 80201f6:	f240 4242 	movw	r2, #1090	; 0x442
 80201fa:	4910      	ldr	r1, [pc, #64]	; (802023c <tcp_enqueue_flags+0x150>)
 80201fc:	480b      	ldr	r0, [pc, #44]	; (802022c <tcp_enqueue_flags+0x140>)
 80201fe:	f006 f8a9 	bl	8026354 <iprintf>
 8020202:	e7a3      	b.n	802014c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 8020204:	f04f 0801 	mov.w	r8, #1
 8020208:	e792      	b.n	8020130 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802020a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 802020c:	2c00      	cmp	r4, #0
 802020e:	d1c3      	bne.n	8020198 <tcp_enqueue_flags+0xac>
 8020210:	4b04      	ldr	r3, [pc, #16]	; (8020224 <tcp_enqueue_flags+0x138>)
 8020212:	f240 4265 	movw	r2, #1125	; 0x465
 8020216:	490a      	ldr	r1, [pc, #40]	; (8020240 <tcp_enqueue_flags+0x154>)
 8020218:	4804      	ldr	r0, [pc, #16]	; (802022c <tcp_enqueue_flags+0x140>)
 802021a:	f006 f89b 	bl	8026354 <iprintf>
  return ERR_OK;
 802021e:	4620      	mov	r0, r4
 8020220:	e7ba      	b.n	8020198 <tcp_enqueue_flags+0xac>
 8020222:	bf00      	nop
 8020224:	08045d04 	.word	0x08045d04
 8020228:	08046190 	.word	0x08046190
 802022c:	0802b034 	.word	0x0802b034
 8020230:	08046118 	.word	0x08046118
 8020234:	08046170 	.word	0x08046170
 8020238:	080461e4 	.word	0x080461e4
 802023c:	080461cc 	.word	0x080461cc
 8020240:	08046210 	.word	0x08046210

08020244 <tcp_send_fin>:
{
 8020244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8020246:	4606      	mov	r6, r0
 8020248:	b188      	cbz	r0, 802026e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 802024a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 802024c:	b14c      	cbz	r4, 8020262 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802024e:	4625      	mov	r5, r4
 8020250:	6824      	ldr	r4, [r4, #0]
 8020252:	2c00      	cmp	r4, #0
 8020254:	d1fb      	bne.n	802024e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020256:	68eb      	ldr	r3, [r5, #12]
 8020258:	8998      	ldrh	r0, [r3, #12]
 802025a:	f7f9 ff75 	bl	801a148 <lwip_htons>
 802025e:	0743      	lsls	r3, r0, #29
 8020260:	d00d      	beq.n	802027e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020262:	4630      	mov	r0, r6
 8020264:	2101      	movs	r1, #1
}
 8020266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 802026a:	f7ff bf3f 	b.w	80200ec <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 802026e:	4b0b      	ldr	r3, [pc, #44]	; (802029c <tcp_send_fin+0x58>)
 8020270:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8020274:	490a      	ldr	r1, [pc, #40]	; (80202a0 <tcp_send_fin+0x5c>)
 8020276:	480b      	ldr	r0, [pc, #44]	; (80202a4 <tcp_send_fin+0x60>)
 8020278:	f006 f86c 	bl	8026354 <iprintf>
 802027c:	e7e5      	b.n	802024a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802027e:	68eb      	ldr	r3, [r5, #12]
 8020280:	2001      	movs	r0, #1
 8020282:	899f      	ldrh	r7, [r3, #12]
 8020284:	f7f9 ff60 	bl	801a148 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8020288:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802028a:	4338      	orrs	r0, r7
 802028c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 802028e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020292:	8190      	strh	r0, [r2, #12]
}
 8020294:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 8020296:	8373      	strh	r3, [r6, #26]
}
 8020298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802029a:	bf00      	nop
 802029c:	08045d04 	.word	0x08045d04
 80202a0:	08046238 	.word	0x08046238
 80202a4:	0802b034 	.word	0x0802b034

080202a8 <tcp_rexmit_rto_prepare>:
{
 80202a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80202aa:	4605      	mov	r5, r0
 80202ac:	2800      	cmp	r0, #0
 80202ae:	d032      	beq.n	8020316 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 80202b0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80202b2:	b132      	cbz	r2, 80202c2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80202b4:	6813      	ldr	r3, [r2, #0]
 80202b6:	4614      	mov	r4, r2
 80202b8:	b15b      	cbz	r3, 80202d2 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 80202ba:	6863      	ldr	r3, [r4, #4]
 80202bc:	7b9b      	ldrb	r3, [r3, #14]
 80202be:	2b01      	cmp	r3, #1
 80202c0:	d003      	beq.n	80202ca <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 80202c2:	f06f 0305 	mvn.w	r3, #5
}
 80202c6:	4618      	mov	r0, r3
 80202c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80202ca:	6824      	ldr	r4, [r4, #0]
 80202cc:	6823      	ldr	r3, [r4, #0]
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d1f3      	bne.n	80202ba <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 80202d2:	6863      	ldr	r3, [r4, #4]
 80202d4:	7b9b      	ldrb	r3, [r3, #14]
 80202d6:	2b01      	cmp	r3, #1
 80202d8:	d1f3      	bne.n	80202c2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80202da:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80202dc:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80202de:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80202e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 80202e4:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80202e6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80202e8:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80202ea:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80202ee:	6858      	ldr	r0, [r3, #4]
 80202f0:	f7f9 ff2e 	bl	801a150 <lwip_htonl>
 80202f4:	68e3      	ldr	r3, [r4, #12]
 80202f6:	4606      	mov	r6, r0
 80202f8:	8924      	ldrh	r4, [r4, #8]
 80202fa:	8998      	ldrh	r0, [r3, #12]
 80202fc:	f7f9 ff24 	bl	801a148 <lwip_htons>
 8020300:	f010 0003 	ands.w	r0, r0, #3
 8020304:	4426      	add	r6, r4
  return ERR_OK;
 8020306:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020308:	bf18      	it	ne
 802030a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 802030c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802030e:	4430      	add	r0, r6
 8020310:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 8020312:	4618      	mov	r0, r3
 8020314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020316:	4b04      	ldr	r3, [pc, #16]	; (8020328 <tcp_rexmit_rto_prepare+0x80>)
 8020318:	f240 6263 	movw	r2, #1635	; 0x663
 802031c:	4903      	ldr	r1, [pc, #12]	; (802032c <tcp_rexmit_rto_prepare+0x84>)
 802031e:	4804      	ldr	r0, [pc, #16]	; (8020330 <tcp_rexmit_rto_prepare+0x88>)
 8020320:	f006 f818 	bl	8026354 <iprintf>
 8020324:	e7c4      	b.n	80202b0 <tcp_rexmit_rto_prepare+0x8>
 8020326:	bf00      	nop
 8020328:	08045d04 	.word	0x08045d04
 802032c:	08046254 	.word	0x08046254
 8020330:	0802b034 	.word	0x0802b034

08020334 <tcp_rexmit>:
{
 8020334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020336:	4607      	mov	r7, r0
 8020338:	2800      	cmp	r0, #0
 802033a:	d031      	beq.n	80203a0 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 802033c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 802033e:	b34e      	cbz	r6, 8020394 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8020340:	6873      	ldr	r3, [r6, #4]
 8020342:	7b9b      	ldrb	r3, [r3, #14]
 8020344:	2b01      	cmp	r3, #1
 8020346:	d125      	bne.n	8020394 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 8020348:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 802034a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 802034e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 8020350:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 8020352:	b91b      	cbnz	r3, 802035c <tcp_rexmit+0x28>
 8020354:	e00f      	b.n	8020376 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 8020356:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8020358:	682b      	ldr	r3, [r5, #0]
 802035a:	b163      	cbz	r3, 8020376 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802035c:	68db      	ldr	r3, [r3, #12]
 802035e:	6858      	ldr	r0, [r3, #4]
 8020360:	f7f9 fef6 	bl	801a150 <lwip_htonl>
 8020364:	68f3      	ldr	r3, [r6, #12]
 8020366:	4604      	mov	r4, r0
 8020368:	6858      	ldr	r0, [r3, #4]
 802036a:	f7f9 fef1 	bl	801a150 <lwip_htonl>
 802036e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8020370:	2c00      	cmp	r4, #0
 8020372:	dbf0      	blt.n	8020356 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 8020374:	682b      	ldr	r3, [r5, #0]
 8020376:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8020378:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 802037a:	6833      	ldr	r3, [r6, #0]
 802037c:	b16b      	cbz	r3, 802039a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 802037e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8020382:	2bff      	cmp	r3, #255	; 0xff
 8020384:	d002      	beq.n	802038c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8020386:	3301      	adds	r3, #1
 8020388:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 802038c:	2300      	movs	r3, #0
  return ERR_OK;
 802038e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8020390:	637b      	str	r3, [r7, #52]	; 0x34
}
 8020392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8020394:	f06f 0005 	mvn.w	r0, #5
}
 8020398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 802039a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 802039e:	e7ee      	b.n	802037e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80203a0:	4b03      	ldr	r3, [pc, #12]	; (80203b0 <tcp_rexmit+0x7c>)
 80203a2:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80203a6:	4903      	ldr	r1, [pc, #12]	; (80203b4 <tcp_rexmit+0x80>)
 80203a8:	4803      	ldr	r0, [pc, #12]	; (80203b8 <tcp_rexmit+0x84>)
 80203aa:	f005 ffd3 	bl	8026354 <iprintf>
 80203ae:	e7c5      	b.n	802033c <tcp_rexmit+0x8>
 80203b0:	08045d04 	.word	0x08045d04
 80203b4:	08046278 	.word	0x08046278
 80203b8:	0802b034 	.word	0x0802b034

080203bc <tcp_rexmit_fast>:
{
 80203bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80203be:	4604      	mov	r4, r0
 80203c0:	b340      	cbz	r0, 8020414 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80203c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80203c4:	b113      	cbz	r3, 80203cc <tcp_rexmit_fast+0x10>
 80203c6:	8b63      	ldrh	r3, [r4, #26]
 80203c8:	075b      	lsls	r3, r3, #29
 80203ca:	d500      	bpl.n	80203ce <tcp_rexmit_fast+0x12>
}
 80203cc:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 80203ce:	4620      	mov	r0, r4
 80203d0:	f7ff ffb0 	bl	8020334 <tcp_rexmit>
 80203d4:	2800      	cmp	r0, #0
 80203d6:	d1f9      	bne.n	80203cc <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80203d8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80203dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80203e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80203e2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80203e4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80203e8:	bf28      	it	cs
 80203ea:	4619      	movcs	r1, r3
 80203ec:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80203ee:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80203f2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80203f6:	d902      	bls.n	80203fe <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80203f8:	b283      	uxth	r3, r0
 80203fa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80203fe:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020400:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 8020402:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020406:	4413      	add	r3, r2
      pcb->rtime = 0;
 8020408:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802040a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 802040e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 8020410:	8622      	strh	r2, [r4, #48]	; 0x30
}
 8020412:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020414:	4b03      	ldr	r3, [pc, #12]	; (8020424 <tcp_rexmit_fast+0x68>)
 8020416:	f240 62f9 	movw	r2, #1785	; 0x6f9
 802041a:	4903      	ldr	r1, [pc, #12]	; (8020428 <tcp_rexmit_fast+0x6c>)
 802041c:	4803      	ldr	r0, [pc, #12]	; (802042c <tcp_rexmit_fast+0x70>)
 802041e:	f005 ff99 	bl	8026354 <iprintf>
 8020422:	e7ce      	b.n	80203c2 <tcp_rexmit_fast+0x6>
 8020424:	08045d04 	.word	0x08045d04
 8020428:	08046290 	.word	0x08046290
 802042c:	0802b034 	.word	0x0802b034

08020430 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020434:	b084      	sub	sp, #16
 8020436:	4607      	mov	r7, r0
 8020438:	460e      	mov	r6, r1
 802043a:	4615      	mov	r5, r2
 802043c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020440:	461c      	mov	r4, r3
{
 8020442:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8020446:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802044a:	b1fb      	cbz	r3, 802048c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802044c:	f1b8 0f00 	cmp.w	r8, #0
 8020450:	d026      	beq.n	80204a0 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020452:	4630      	mov	r0, r6
 8020454:	f7f9 fe7c 	bl	801a150 <lwip_htonl>
 8020458:	2114      	movs	r1, #20
 802045a:	4602      	mov	r2, r0
 802045c:	4628      	mov	r0, r5
 802045e:	f246 0508 	movw	r5, #24584	; 0x6008
 8020462:	464b      	mov	r3, r9
 8020464:	f8cd a000 	str.w	sl, [sp]
 8020468:	e9cd 1501 	strd	r1, r5, [sp, #4]
 802046c:	2100      	movs	r1, #0
 802046e:	f7ff f971 	bl	801f754 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020472:	4601      	mov	r1, r0
 8020474:	b138      	cbz	r0, 8020486 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020476:	4643      	mov	r3, r8
 8020478:	4622      	mov	r2, r4
 802047a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 802047c:	b004      	add	sp, #16
 802047e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020482:	f7ff b9d5 	b.w	801f830 <tcp_output_control_segment>
}
 8020486:	b004      	add	sp, #16
 8020488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802048c:	4b08      	ldr	r3, [pc, #32]	; (80204b0 <tcp_rst+0x80>)
 802048e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020492:	4908      	ldr	r1, [pc, #32]	; (80204b4 <tcp_rst+0x84>)
 8020494:	4808      	ldr	r0, [pc, #32]	; (80204b8 <tcp_rst+0x88>)
 8020496:	f005 ff5d 	bl	8026354 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802049a:	f1b8 0f00 	cmp.w	r8, #0
 802049e:	d1d8      	bne.n	8020452 <tcp_rst+0x22>
 80204a0:	4b03      	ldr	r3, [pc, #12]	; (80204b0 <tcp_rst+0x80>)
 80204a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80204a6:	4905      	ldr	r1, [pc, #20]	; (80204bc <tcp_rst+0x8c>)
 80204a8:	4803      	ldr	r0, [pc, #12]	; (80204b8 <tcp_rst+0x88>)
 80204aa:	f005 ff53 	bl	8026354 <iprintf>
 80204ae:	e7d0      	b.n	8020452 <tcp_rst+0x22>
 80204b0:	08045d04 	.word	0x08045d04
 80204b4:	080462b0 	.word	0x080462b0
 80204b8:	0802b034 	.word	0x0802b034
 80204bc:	080462cc 	.word	0x080462cc

080204c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80204c0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80204c2:	4604      	mov	r4, r0
 80204c4:	b1c0      	cbz	r0, 80204f8 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80204c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80204c8:	f7f9 fe42 	bl	801a150 <lwip_htonl>
 80204cc:	2100      	movs	r1, #0
 80204ce:	4602      	mov	r2, r0
 80204d0:	4620      	mov	r0, r4
 80204d2:	f7ff f985 	bl	801f7e0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80204d6:	4601      	mov	r1, r0
 80204d8:	b1b0      	cbz	r0, 8020508 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80204da:	1d23      	adds	r3, r4, #4
 80204dc:	4622      	mov	r2, r4
 80204de:	4620      	mov	r0, r4
 80204e0:	f7ff f9a6 	bl	801f830 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80204e4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80204e6:	b118      	cbz	r0, 80204f0 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80204e8:	f043 0303 	orr.w	r3, r3, #3
 80204ec:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80204ee:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80204f0:	f023 0303 	bic.w	r3, r3, #3
 80204f4:	8363      	strh	r3, [r4, #26]
}
 80204f6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80204f8:	4b07      	ldr	r3, [pc, #28]	; (8020518 <tcp_send_empty_ack+0x58>)
 80204fa:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80204fe:	4907      	ldr	r1, [pc, #28]	; (802051c <tcp_send_empty_ack+0x5c>)
 8020500:	4807      	ldr	r0, [pc, #28]	; (8020520 <tcp_send_empty_ack+0x60>)
 8020502:	f005 ff27 	bl	8026354 <iprintf>
 8020506:	e7de      	b.n	80204c6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020508:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 802050a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802050e:	f043 0303 	orr.w	r3, r3, #3
 8020512:	8363      	strh	r3, [r4, #26]
}
 8020514:	bd10      	pop	{r4, pc}
 8020516:	bf00      	nop
 8020518:	08045d04 	.word	0x08045d04
 802051c:	080462e8 	.word	0x080462e8
 8020520:	0802b034 	.word	0x0802b034

08020524 <tcp_output>:
{
 8020524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020528:	4604      	mov	r4, r0
{
 802052a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 802052c:	2800      	cmp	r0, #0
 802052e:	f000 81bc 	beq.w	80208aa <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020532:	7d23      	ldrb	r3, [r4, #20]
 8020534:	2b01      	cmp	r3, #1
 8020536:	f000 8173 	beq.w	8020820 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 802053a:	4bb3      	ldr	r3, [pc, #716]	; (8020808 <tcp_output+0x2e4>)
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	42a3      	cmp	r3, r4
 8020540:	f000 817a 	beq.w	8020838 <tcp_output+0x314>
  seg = pcb->unsent;
 8020544:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020546:	b345      	cbz	r5, 802059a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020548:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802054a:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802054e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8020552:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020556:	2800      	cmp	r0, #0
 8020558:	f040 81af 	bne.w	80208ba <tcp_output+0x396>
    return ip_route(src, dst);
 802055c:	4648      	mov	r0, r9
 802055e:	f003 fa2b 	bl	80239b8 <ip4_route>
 8020562:	4682      	mov	sl, r0
  if (netif == NULL) {
 8020564:	f1ba 0f00 	cmp.w	sl, #0
 8020568:	f000 81b9 	beq.w	80208de <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 802056c:	6823      	ldr	r3, [r4, #0]
 802056e:	b913      	cbnz	r3, 8020576 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8020570:	f8da 3004 	ldr.w	r3, [sl, #4]
 8020574:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020576:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020578:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802057a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802057c:	bf28      	it	cs
 802057e:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020580:	f7f9 fde6 	bl	801a150 <lwip_htonl>
 8020584:	892b      	ldrh	r3, [r5, #8]
 8020586:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020588:	1a9b      	subs	r3, r3, r2
 802058a:	4418      	add	r0, r3
 802058c:	42b8      	cmp	r0, r7
 802058e:	d90f      	bls.n	80205b0 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020590:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8020594:	42bb      	cmp	r3, r7
 8020596:	f000 8159 	beq.w	802084c <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 802059a:	8b62      	ldrh	r2, [r4, #26]
 802059c:	0791      	lsls	r1, r2, #30
 802059e:	f100 814f 	bmi.w	8020840 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80205a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 80205a6:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80205a8:	8362      	strh	r2, [r4, #26]
}
 80205aa:	b005      	add	sp, #20
 80205ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 80205b0:	2300      	movs	r3, #0
 80205b2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 80205b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	f000 8157 	beq.w	802086c <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 80205be:	4698      	mov	r8, r3
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d1fb      	bne.n	80205be <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 80205c6:	464e      	mov	r6, r9
 80205c8:	e0b7      	b.n	802073a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80205ca:	68eb      	ldr	r3, [r5, #12]
 80205cc:	2010      	movs	r0, #16
 80205ce:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80205d2:	f7f9 fdb9 	bl	801a148 <lwip_htons>
 80205d6:	ea49 0000 	orr.w	r0, r9, r0
 80205da:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80205de:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 80205e2:	686b      	ldr	r3, [r5, #4]
 80205e4:	7b9b      	ldrb	r3, [r3, #14]
 80205e6:	2b01      	cmp	r3, #1
 80205e8:	d160      	bne.n	80206ac <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80205ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80205ec:	f7f9 fdb0 	bl	801a150 <lwip_htonl>
 80205f0:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80205f4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80205f6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80205fa:	f7f9 fda5 	bl	801a148 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80205fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8020600:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020602:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020606:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020608:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802060c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802060e:	7aab      	ldrb	r3, [r5, #10]
 8020610:	07db      	lsls	r3, r3, #31
 8020612:	f100 80d0 	bmi.w	80207b6 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020616:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 802061a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 802061e:	2b00      	cmp	r3, #0
 8020620:	da01      	bge.n	8020626 <tcp_output+0x102>
    pcb->rtime = 0;
 8020622:	2300      	movs	r3, #0
 8020624:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8020626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020628:	2b00      	cmp	r3, #0
 802062a:	f000 80b9 	beq.w	80207a0 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 802062e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 8020630:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020634:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 8020636:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020638:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 802063c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 802063e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020642:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 8020644:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 8020646:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 8020648:	b292      	uxth	r2, r2
  seg->p->len -= len;
 802064a:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 802064c:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 802064e:	f889 c010 	strb.w	ip, [r9, #16]
 8020652:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8020656:	7aab      	ldrb	r3, [r5, #10]
 8020658:	009b      	lsls	r3, r3, #2
 802065a:	f003 0304 	and.w	r3, r3, #4
 802065e:	3314      	adds	r3, #20
 8020660:	444b      	add	r3, r9
 8020662:	459b      	cmp	fp, r3
 8020664:	d00a      	beq.n	802067c <tcp_output+0x158>
 8020666:	f240 621c 	movw	r2, #1564	; 0x61c
 802066a:	4b68      	ldr	r3, [pc, #416]	; (802080c <tcp_output+0x2e8>)
 802066c:	4968      	ldr	r1, [pc, #416]	; (8020810 <tcp_output+0x2ec>)
 802066e:	4869      	ldr	r0, [pc, #420]	; (8020814 <tcp_output+0x2f0>)
 8020670:	f005 fe70 	bl	8026354 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8020674:	6868      	ldr	r0, [r5, #4]
 8020676:	f8d5 900c 	ldr.w	r9, [r5, #12]
 802067a:	8902      	ldrh	r2, [r0, #8]
 802067c:	4623      	mov	r3, r4
 802067e:	2106      	movs	r1, #6
 8020680:	9600      	str	r6, [sp, #0]
 8020682:	f7fa faf5 	bl	801ac70 <ip_chksum_pseudo>
 8020686:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802068a:	6868      	ldr	r0, [r5, #4]
 802068c:	4632      	mov	r2, r6
 802068e:	f8cd a008 	str.w	sl, [sp, #8]
 8020692:	4621      	mov	r1, r4
 8020694:	7aa3      	ldrb	r3, [r4, #10]
 8020696:	9300      	str	r3, [sp, #0]
 8020698:	2306      	movs	r3, #6
 802069a:	9301      	str	r3, [sp, #4]
 802069c:	7ae3      	ldrb	r3, [r4, #11]
 802069e:	f003 fb55 	bl	8023d4c <ip4_output_if>
    if (err != ERR_OK) {
 80206a2:	2800      	cmp	r0, #0
 80206a4:	f040 8116 	bne.w	80208d4 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206a8:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 80206ac:	682b      	ldr	r3, [r5, #0]
 80206ae:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80206b0:	7d23      	ldrb	r3, [r4, #20]
 80206b2:	2b02      	cmp	r3, #2
 80206b4:	d003      	beq.n	80206be <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80206b6:	8b63      	ldrh	r3, [r4, #26]
 80206b8:	f023 0303 	bic.w	r3, r3, #3
 80206bc:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206be:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80206c2:	f7f9 fd45 	bl	801a150 <lwip_htonl>
 80206c6:	68eb      	ldr	r3, [r5, #12]
 80206c8:	4681      	mov	r9, r0
 80206ca:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 80206ce:	8998      	ldrh	r0, [r3, #12]
 80206d0:	f7f9 fd3a 	bl	801a148 <lwip_htons>
 80206d4:	f010 0003 	ands.w	r0, r0, #3
 80206d8:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80206da:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206dc:	bf18      	it	ne
 80206de:	2001      	movne	r0, #1
 80206e0:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 80206e2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80206e6:	1a1b      	subs	r3, r3, r0
 80206e8:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 80206ea:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 80206ec:	bfb8      	it	lt
 80206ee:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 80206f0:	8998      	ldrh	r0, [r3, #12]
 80206f2:	f7f9 fd29 	bl	801a148 <lwip_htons>
 80206f6:	f010 0003 	ands.w	r0, r0, #3
 80206fa:	bf18      	it	ne
 80206fc:	2001      	movne	r0, #1
 80206fe:	eb10 0f09 	cmn.w	r0, r9
 8020702:	d046      	beq.n	8020792 <tcp_output+0x26e>
      seg->next = NULL;
 8020704:	2300      	movs	r3, #0
 8020706:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8020708:	6f23      	ldr	r3, [r4, #112]	; 0x70
 802070a:	2b00      	cmp	r3, #0
 802070c:	d045      	beq.n	802079a <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 802070e:	68eb      	ldr	r3, [r5, #12]
 8020710:	6858      	ldr	r0, [r3, #4]
 8020712:	f7f9 fd1d 	bl	801a150 <lwip_htonl>
 8020716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802071a:	4681      	mov	r9, r0
 802071c:	6858      	ldr	r0, [r3, #4]
 802071e:	f7f9 fd17 	bl	801a150 <lwip_htonl>
 8020722:	eba9 0000 	sub.w	r0, r9, r0
 8020726:	2800      	cmp	r0, #0
 8020728:	f2c0 80a2 	blt.w	8020870 <tcp_output+0x34c>
          useg->next = seg;
 802072c:	f8c8 5000 	str.w	r5, [r8]
 8020730:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 8020732:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 8020734:	2d00      	cmp	r5, #0
 8020736:	f000 80c4 	beq.w	80208c2 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 802073a:	68eb      	ldr	r3, [r5, #12]
 802073c:	6858      	ldr	r0, [r3, #4]
 802073e:	f7f9 fd07 	bl	801a150 <lwip_htonl>
 8020742:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020744:	1ac0      	subs	r0, r0, r3
 8020746:	892b      	ldrh	r3, [r5, #8]
 8020748:	4418      	add	r0, r3
  while (seg != NULL &&
 802074a:	42b8      	cmp	r0, r7
 802074c:	f200 80bb 	bhi.w	80208c6 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 8020750:	68eb      	ldr	r3, [r5, #12]
 8020752:	8998      	ldrh	r0, [r3, #12]
 8020754:	f7f9 fcf8 	bl	801a148 <lwip_htons>
 8020758:	0742      	lsls	r2, r0, #29
 802075a:	d412      	bmi.n	8020782 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 802075c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 802075e:	b14b      	cbz	r3, 8020774 <tcp_output+0x250>
 8020760:	8b63      	ldrh	r3, [r4, #26]
 8020762:	f013 0f44 	tst.w	r3, #68	; 0x44
 8020766:	461a      	mov	r2, r3
 8020768:	d104      	bne.n	8020774 <tcp_output+0x250>
 802076a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 802076c:	2900      	cmp	r1, #0
 802076e:	d038      	beq.n	80207e2 <tcp_output+0x2be>
 8020770:	6808      	ldr	r0, [r1, #0]
 8020772:	b388      	cbz	r0, 80207d8 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 8020774:	7d23      	ldrb	r3, [r4, #20]
 8020776:	2b02      	cmp	r3, #2
 8020778:	f47f af27 	bne.w	80205ca <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802077c:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020780:	e72f      	b.n	80205e2 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 8020782:	4b22      	ldr	r3, [pc, #136]	; (802080c <tcp_output+0x2e8>)
 8020784:	f240 5236 	movw	r2, #1334	; 0x536
 8020788:	4923      	ldr	r1, [pc, #140]	; (8020818 <tcp_output+0x2f4>)
 802078a:	4822      	ldr	r0, [pc, #136]	; (8020814 <tcp_output+0x2f0>)
 802078c:	f005 fde2 	bl	8026354 <iprintf>
 8020790:	e7e4      	b.n	802075c <tcp_output+0x238>
      tcp_seg_free(seg);
 8020792:	4628      	mov	r0, r5
 8020794:	f7fc fa90 	bl	801ccb8 <tcp_seg_free>
 8020798:	e7cb      	b.n	8020732 <tcp_output+0x20e>
        pcb->unacked = seg;
 802079a:	46a8      	mov	r8, r5
 802079c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 802079e:	e7c8      	b.n	8020732 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 80207a0:	4b1e      	ldr	r3, [pc, #120]	; (802081c <tcp_output+0x2f8>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80207a6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80207aa:	f7f9 fcd1 	bl	801a150 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80207ae:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80207b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80207b4:	e73b      	b.n	802062e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80207b6:	4632      	mov	r2, r6
 80207b8:	4651      	mov	r1, sl
 80207ba:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 80207be:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80207c2:	f7fd fa75 	bl	801dcb0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80207c6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80207ca:	f7f9 fcc1 	bl	801a150 <lwip_htonl>
 80207ce:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80207d2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80207d6:	e720      	b.n	802061a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80207d8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80207dc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80207de:	4584      	cmp	ip, r0
 80207e0:	d2c8      	bcs.n	8020774 <tcp_output+0x250>
 80207e2:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 80207e6:	2800      	cmp	r0, #0
 80207e8:	d0c4      	beq.n	8020774 <tcp_output+0x250>
 80207ea:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 80207ee:	2808      	cmp	r0, #8
 80207f0:	d8c0      	bhi.n	8020774 <tcp_output+0x250>
 80207f2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80207f6:	d1bd      	bne.n	8020774 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 80207f8:	2900      	cmp	r1, #0
 80207fa:	f47f aed2 	bne.w	80205a2 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 80207fe:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020800:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 8020802:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8020806:	e6cc      	b.n	80205a2 <tcp_output+0x7e>
 8020808:	2002e478 	.word	0x2002e478
 802080c:	08045d04 	.word	0x08045d04
 8020810:	08046360 	.word	0x08046360
 8020814:	0802b034 	.word	0x0802b034
 8020818:	08046348 	.word	0x08046348
 802081c:	2002e444 	.word	0x2002e444
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020820:	4b30      	ldr	r3, [pc, #192]	; (80208e4 <tcp_output+0x3c0>)
 8020822:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020826:	4930      	ldr	r1, [pc, #192]	; (80208e8 <tcp_output+0x3c4>)
 8020828:	4830      	ldr	r0, [pc, #192]	; (80208ec <tcp_output+0x3c8>)
 802082a:	f005 fd93 	bl	8026354 <iprintf>
  if (tcp_input_pcb == pcb) {
 802082e:	4b30      	ldr	r3, [pc, #192]	; (80208f0 <tcp_output+0x3cc>)
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	42a3      	cmp	r3, r4
 8020834:	f47f ae86 	bne.w	8020544 <tcp_output+0x20>
    return ERR_OK;
 8020838:	2000      	movs	r0, #0
}
 802083a:	b005      	add	sp, #20
 802083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 8020840:	4620      	mov	r0, r4
}
 8020842:	b005      	add	sp, #20
 8020844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8020848:	f7ff be3a 	b.w	80204c0 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 802084c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 802084e:	2b00      	cmp	r3, #0
 8020850:	f47f aea3 	bne.w	802059a <tcp_output+0x76>
 8020854:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8020858:	2b00      	cmp	r3, #0
 802085a:	f47f ae9e 	bne.w	802059a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 802085e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 8020862:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 8020866:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 802086a:	e696      	b.n	802059a <tcp_output+0x76>
 802086c:	4698      	mov	r8, r3
 802086e:	e6aa      	b.n	80205c6 <tcp_output+0xa2>
          while (*cur_seg &&
 8020870:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020872:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 8020876:	b92b      	cbnz	r3, 8020884 <tcp_output+0x360>
 8020878:	e013      	b.n	80208a2 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 802087a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 802087e:	f8db 3000 	ldr.w	r3, [fp]
 8020882:	b173      	cbz	r3, 80208a2 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020884:	68db      	ldr	r3, [r3, #12]
 8020886:	6858      	ldr	r0, [r3, #4]
 8020888:	f7f9 fc62 	bl	801a150 <lwip_htonl>
 802088c:	68eb      	ldr	r3, [r5, #12]
 802088e:	4681      	mov	r9, r0
 8020890:	6858      	ldr	r0, [r3, #4]
 8020892:	f7f9 fc5d 	bl	801a150 <lwip_htonl>
 8020896:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 802089a:	2800      	cmp	r0, #0
 802089c:	dbed      	blt.n	802087a <tcp_output+0x356>
          seg->next = (*cur_seg);
 802089e:	f8db 3000 	ldr.w	r3, [fp]
 80208a2:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 80208a4:	f8cb 5000 	str.w	r5, [fp]
 80208a8:	e743      	b.n	8020732 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80208aa:	4b0e      	ldr	r3, [pc, #56]	; (80208e4 <tcp_output+0x3c0>)
 80208ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80208b0:	4910      	ldr	r1, [pc, #64]	; (80208f4 <tcp_output+0x3d0>)
 80208b2:	480e      	ldr	r0, [pc, #56]	; (80208ec <tcp_output+0x3c8>)
 80208b4:	f005 fd4e 	bl	8026354 <iprintf>
 80208b8:	e63b      	b.n	8020532 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 80208ba:	f7fb f95b 	bl	801bb74 <netif_get_by_index>
 80208be:	4682      	mov	sl, r0
 80208c0:	e650      	b.n	8020564 <tcp_output+0x40>
 80208c2:	8b63      	ldrh	r3, [r4, #26]
 80208c4:	e79b      	b.n	80207fe <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80208c6:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 80208c8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80208ca:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 80208cc:	2900      	cmp	r1, #0
 80208ce:	f47f ae68 	bne.w	80205a2 <tcp_output+0x7e>
 80208d2:	e794      	b.n	80207fe <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80208d4:	8b63      	ldrh	r3, [r4, #26]
 80208d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80208da:	8363      	strh	r3, [r4, #26]
      return err;
 80208dc:	e665      	b.n	80205aa <tcp_output+0x86>
    return ERR_RTE;
 80208de:	f06f 0003 	mvn.w	r0, #3
 80208e2:	e662      	b.n	80205aa <tcp_output+0x86>
 80208e4:	08045d04 	.word	0x08045d04
 80208e8:	08046320 	.word	0x08046320
 80208ec:	0802b034 	.word	0x0802b034
 80208f0:	2002e478 	.word	0x2002e478
 80208f4:	08046308 	.word	0x08046308

080208f8 <tcp_rexmit_rto_commit>:
{
 80208f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80208fa:	4604      	mov	r4, r0
 80208fc:	b158      	cbz	r0, 8020916 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 80208fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020902:	2bff      	cmp	r3, #255	; 0xff
 8020904:	d002      	beq.n	802090c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8020906:	3301      	adds	r3, #1
 8020908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 802090c:	4620      	mov	r0, r4
}
 802090e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020912:	f7ff be07 	b.w	8020524 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020916:	4b04      	ldr	r3, [pc, #16]	; (8020928 <tcp_rexmit_rto_commit+0x30>)
 8020918:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 802091c:	4903      	ldr	r1, [pc, #12]	; (802092c <tcp_rexmit_rto_commit+0x34>)
 802091e:	4804      	ldr	r0, [pc, #16]	; (8020930 <tcp_rexmit_rto_commit+0x38>)
 8020920:	f005 fd18 	bl	8026354 <iprintf>
 8020924:	e7eb      	b.n	80208fe <tcp_rexmit_rto_commit+0x6>
 8020926:	bf00      	nop
 8020928:	08045d04 	.word	0x08045d04
 802092c:	08046374 	.word	0x08046374
 8020930:	0802b034 	.word	0x0802b034

08020934 <tcp_rexmit_rto>:
{
 8020934:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020936:	4604      	mov	r4, r0
 8020938:	b118      	cbz	r0, 8020942 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 802093a:	f7ff fcb5 	bl	80202a8 <tcp_rexmit_rto_prepare>
 802093e:	b198      	cbz	r0, 8020968 <tcp_rexmit_rto+0x34>
}
 8020940:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020942:	4b0f      	ldr	r3, [pc, #60]	; (8020980 <tcp_rexmit_rto+0x4c>)
 8020944:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8020948:	490e      	ldr	r1, [pc, #56]	; (8020984 <tcp_rexmit_rto+0x50>)
 802094a:	480f      	ldr	r0, [pc, #60]	; (8020988 <tcp_rexmit_rto+0x54>)
 802094c:	f005 fd02 	bl	8026354 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020950:	4620      	mov	r0, r4
 8020952:	f7ff fca9 	bl	80202a8 <tcp_rexmit_rto_prepare>
 8020956:	2800      	cmp	r0, #0
 8020958:	d1f2      	bne.n	8020940 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 802095a:	4b09      	ldr	r3, [pc, #36]	; (8020980 <tcp_rexmit_rto+0x4c>)
 802095c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020960:	490a      	ldr	r1, [pc, #40]	; (802098c <tcp_rexmit_rto+0x58>)
 8020962:	4809      	ldr	r0, [pc, #36]	; (8020988 <tcp_rexmit_rto+0x54>)
 8020964:	f005 fcf6 	bl	8026354 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8020968:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 802096c:	2bff      	cmp	r3, #255	; 0xff
 802096e:	d002      	beq.n	8020976 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8020970:	3301      	adds	r3, #1
 8020972:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020976:	4620      	mov	r0, r4
}
 8020978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 802097c:	f7ff bdd2 	b.w	8020524 <tcp_output>
 8020980:	08045d04 	.word	0x08045d04
 8020984:	08046398 	.word	0x08046398
 8020988:	0802b034 	.word	0x0802b034
 802098c:	08046374 	.word	0x08046374

08020990 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020990:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020992:	4604      	mov	r4, r0
 8020994:	b188      	cbz	r0, 80209ba <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020996:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8020998:	3801      	subs	r0, #1
 802099a:	f7f9 fbd9 	bl	801a150 <lwip_htonl>
 802099e:	2100      	movs	r1, #0
 80209a0:	4602      	mov	r2, r0
 80209a2:	4620      	mov	r0, r4
 80209a4:	f7fe ff1c 	bl	801f7e0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80209a8:	4601      	mov	r1, r0
 80209aa:	b170      	cbz	r0, 80209ca <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80209ac:	1d23      	adds	r3, r4, #4
 80209ae:	4622      	mov	r2, r4
 80209b0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80209b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80209b6:	f7fe bf3b 	b.w	801f830 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80209ba:	4b05      	ldr	r3, [pc, #20]	; (80209d0 <tcp_keepalive+0x40>)
 80209bc:	f640 0224 	movw	r2, #2084	; 0x824
 80209c0:	4904      	ldr	r1, [pc, #16]	; (80209d4 <tcp_keepalive+0x44>)
 80209c2:	4805      	ldr	r0, [pc, #20]	; (80209d8 <tcp_keepalive+0x48>)
 80209c4:	f005 fcc6 	bl	8026354 <iprintf>
 80209c8:	e7e5      	b.n	8020996 <tcp_keepalive+0x6>
}
 80209ca:	f04f 30ff 	mov.w	r0, #4294967295
 80209ce:	bd10      	pop	{r4, pc}
 80209d0:	08045d04 	.word	0x08045d04
 80209d4:	080463b4 	.word	0x080463b4
 80209d8:	0802b034 	.word	0x0802b034

080209dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80209dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80209e0:	4604      	mov	r4, r0
 80209e2:	2800      	cmp	r0, #0
 80209e4:	d051      	beq.n	8020a8a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80209e6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 80209e8:	2d00      	cmp	r5, #0
 80209ea:	d04b      	beq.n	8020a84 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80209ec:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80209f0:	2bff      	cmp	r3, #255	; 0xff
 80209f2:	d002      	beq.n	80209fa <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 80209f4:	3301      	adds	r3, #1
 80209f6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80209fa:	68eb      	ldr	r3, [r5, #12]
 80209fc:	8998      	ldrh	r0, [r3, #12]
 80209fe:	f7f9 fba3 	bl	801a148 <lwip_htons>
 8020a02:	07c3      	lsls	r3, r0, #31
 8020a04:	d527      	bpl.n	8020a56 <tcp_zero_window_probe+0x7a>
 8020a06:	8929      	ldrh	r1, [r5, #8]
 8020a08:	bb29      	cbnz	r1, 8020a56 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020a0a:	68eb      	ldr	r3, [r5, #12]
 8020a0c:	4620      	mov	r0, r4
 8020a0e:	685a      	ldr	r2, [r3, #4]
 8020a10:	f7fe fee6 	bl	801f7e0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020a14:	4606      	mov	r6, r0
 8020a16:	b388      	cbz	r0, 8020a7c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020a18:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020a1c:	2011      	movs	r0, #17
 8020a1e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8020a22:	f7f9 fb91 	bl	801a148 <lwip_htons>
 8020a26:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8020a2a:	4338      	orrs	r0, r7
 8020a2c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020a30:	68eb      	ldr	r3, [r5, #12]
 8020a32:	6858      	ldr	r0, [r3, #4]
 8020a34:	f7f9 fb8c 	bl	801a150 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a38:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020a3a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a3c:	4622      	mov	r2, r4
 8020a3e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a40:	1a1b      	subs	r3, r3, r0
 8020a42:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a44:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8020a48:	bfb8      	it	lt
 8020a4a:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a4c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a52:	f7fe beed 	b.w	801f830 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020a56:	68eb      	ldr	r3, [r5, #12]
 8020a58:	2101      	movs	r1, #1
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	685a      	ldr	r2, [r3, #4]
 8020a5e:	f7fe febf 	bl	801f7e0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020a62:	4606      	mov	r6, r0
 8020a64:	b150      	cbz	r0, 8020a7c <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020a66:	6868      	ldr	r0, [r5, #4]
 8020a68:	892a      	ldrh	r2, [r5, #8]
 8020a6a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8020a6c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020a6e:	1a9b      	subs	r3, r3, r2
 8020a70:	2201      	movs	r2, #1
 8020a72:	3114      	adds	r1, #20
 8020a74:	b29b      	uxth	r3, r3
 8020a76:	f7fb fc47 	bl	801c308 <pbuf_copy_partial>
 8020a7a:	e7d9      	b.n	8020a30 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 8020a7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 8020a84:	4628      	mov	r0, r5
}
 8020a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020a8a:	4b04      	ldr	r3, [pc, #16]	; (8020a9c <tcp_zero_window_probe+0xc0>)
 8020a8c:	f640 024f 	movw	r2, #2127	; 0x84f
 8020a90:	4903      	ldr	r1, [pc, #12]	; (8020aa0 <tcp_zero_window_probe+0xc4>)
 8020a92:	4804      	ldr	r0, [pc, #16]	; (8020aa4 <tcp_zero_window_probe+0xc8>)
 8020a94:	f005 fc5e 	bl	8026354 <iprintf>
 8020a98:	e7a5      	b.n	80209e6 <tcp_zero_window_probe+0xa>
 8020a9a:	bf00      	nop
 8020a9c:	08045d04 	.word	0x08045d04
 8020aa0:	080463d0 	.word	0x080463d0
 8020aa4:	0802b034 	.word	0x0802b034

08020aa8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020aa8:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020aaa:	22bc      	movs	r2, #188	; 0xbc
{
 8020aac:	b570      	push	{r4, r5, r6, lr}
 8020aae:	460e      	mov	r6, r1
 8020ab0:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020ab2:	4910      	ldr	r1, [pc, #64]	; (8020af4 <sys_timeout_abs+0x4c>)
 8020ab4:	200c      	movs	r0, #12
{
 8020ab6:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020ab8:	f7fa fe34 	bl	801b724 <memp_malloc_fn>
  if (timeout == NULL) {
 8020abc:	b190      	cbz	r0, 8020ae4 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8020abe:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020ac0:	490d      	ldr	r1, [pc, #52]	; (8020af8 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 8020ac2:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8020ac4:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8020ac6:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8020aca:	680b      	ldr	r3, [r1, #0]
 8020acc:	b91b      	cbnz	r3, 8020ad6 <sys_timeout_abs+0x2e>
 8020ace:	e007      	b.n	8020ae0 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020ad0:	4619      	mov	r1, r3
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	b11b      	cbz	r3, 8020ade <sys_timeout_abs+0x36>
 8020ad6:	685a      	ldr	r2, [r3, #4]
 8020ad8:	1aa2      	subs	r2, r4, r2
 8020ada:	2a00      	cmp	r2, #0
 8020adc:	daf8      	bge.n	8020ad0 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 8020ade:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8020ae0:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8020ae2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020ae4:	4b03      	ldr	r3, [pc, #12]	; (8020af4 <sys_timeout_abs+0x4c>)
 8020ae6:	22be      	movs	r2, #190	; 0xbe
 8020ae8:	4904      	ldr	r1, [pc, #16]	; (8020afc <sys_timeout_abs+0x54>)
 8020aea:	4805      	ldr	r0, [pc, #20]	; (8020b00 <sys_timeout_abs+0x58>)
}
 8020aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020af0:	f005 bc30 	b.w	8026354 <iprintf>
 8020af4:	080463f4 	.word	0x080463f4
 8020af8:	2002e494 	.word	0x2002e494
 8020afc:	08046428 	.word	0x08046428
 8020b00:	0802b034 	.word	0x0802b034

08020b04 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020b04:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020b06:	6843      	ldr	r3, [r0, #4]
{
 8020b08:	4604      	mov	r4, r0
  cyclic->handler();
 8020b0a:	4798      	blx	r3

  now = sys_now();
 8020b0c:	f7f4 fd6e 	bl	80155ec <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020b10:	4b09      	ldr	r3, [pc, #36]	; (8020b38 <lwip_cyclic_timer+0x34>)
 8020b12:	6825      	ldr	r5, [r4, #0]
 8020b14:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020b16:	4909      	ldr	r1, [pc, #36]	; (8020b3c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020b18:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020b1a:	1a1a      	subs	r2, r3, r0
 8020b1c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020b1e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020b20:	da04      	bge.n	8020b2c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020b22:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020b28:	f7ff bfbe 	b.w	8020aa8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020b2c:	4618      	mov	r0, r3
}
 8020b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020b32:	f7ff bfb9 	b.w	8020aa8 <sys_timeout_abs>
 8020b36:	bf00      	nop
 8020b38:	2002e490 	.word	0x2002e490
 8020b3c:	08020b05 	.word	0x08020b05

08020b40 <tcpip_tcp_timer>:
{
 8020b40:	b508      	push	{r3, lr}
  tcp_tmr();
 8020b42:	f7fd f887 	bl	801dc54 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020b46:	4b09      	ldr	r3, [pc, #36]	; (8020b6c <tcpip_tcp_timer+0x2c>)
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	b143      	cbz	r3, 8020b5e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020b4c:	f7f4 fd4e 	bl	80155ec <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020b50:	2200      	movs	r2, #0
 8020b52:	4907      	ldr	r1, [pc, #28]	; (8020b70 <tcpip_tcp_timer+0x30>)
 8020b54:	30fa      	adds	r0, #250	; 0xfa
}
 8020b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020b5a:	f7ff bfa5 	b.w	8020aa8 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020b5e:	4b05      	ldr	r3, [pc, #20]	; (8020b74 <tcpip_tcp_timer+0x34>)
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d1f2      	bne.n	8020b4c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8020b66:	4a04      	ldr	r2, [pc, #16]	; (8020b78 <tcpip_tcp_timer+0x38>)
 8020b68:	6013      	str	r3, [r2, #0]
}
 8020b6a:	bd08      	pop	{r3, pc}
 8020b6c:	2002e434 	.word	0x2002e434
 8020b70:	08020b41 	.word	0x08020b41
 8020b74:	2002e44c 	.word	0x2002e44c
 8020b78:	2002e498 	.word	0x2002e498

08020b7c <tcp_timer_needed>:
{
 8020b7c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020b7e:	4b0b      	ldr	r3, [pc, #44]	; (8020bac <tcp_timer_needed+0x30>)
 8020b80:	681a      	ldr	r2, [r3, #0]
 8020b82:	b98a      	cbnz	r2, 8020ba8 <tcp_timer_needed+0x2c>
 8020b84:	4a0a      	ldr	r2, [pc, #40]	; (8020bb0 <tcp_timer_needed+0x34>)
 8020b86:	6812      	ldr	r2, [r2, #0]
 8020b88:	b152      	cbz	r2, 8020ba0 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8020b8a:	2201      	movs	r2, #1
 8020b8c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020b8e:	f7f4 fd2d 	bl	80155ec <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020b92:	2200      	movs	r2, #0
 8020b94:	4907      	ldr	r1, [pc, #28]	; (8020bb4 <tcp_timer_needed+0x38>)
 8020b96:	30fa      	adds	r0, #250	; 0xfa
}
 8020b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020b9c:	f7ff bf84 	b.w	8020aa8 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020ba0:	4a05      	ldr	r2, [pc, #20]	; (8020bb8 <tcp_timer_needed+0x3c>)
 8020ba2:	6812      	ldr	r2, [r2, #0]
 8020ba4:	2a00      	cmp	r2, #0
 8020ba6:	d1f0      	bne.n	8020b8a <tcp_timer_needed+0xe>
}
 8020ba8:	bd08      	pop	{r3, pc}
 8020baa:	bf00      	nop
 8020bac:	2002e498 	.word	0x2002e498
 8020bb0:	2002e434 	.word	0x2002e434
 8020bb4:	08020b41 	.word	0x08020b41
 8020bb8:	2002e44c 	.word	0x2002e44c

08020bbc <sys_timeouts_init>:
{
 8020bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020bc0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8020bc4:	4c11      	ldr	r4, [pc, #68]	; (8020c0c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020bc6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8020c18 <sys_timeouts_init+0x5c>
 8020bca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020bce:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8020c1c <sys_timeouts_init+0x60>
 8020bd2:	f104 0620 	add.w	r6, r4, #32
 8020bd6:	4f0e      	ldr	r7, [pc, #56]	; (8020c10 <sys_timeouts_init+0x54>)
 8020bd8:	d20d      	bcs.n	8020bf6 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020bda:	f7f4 fd07 	bl	80155ec <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020bde:	4622      	mov	r2, r4
 8020be0:	490c      	ldr	r1, [pc, #48]	; (8020c14 <sys_timeouts_init+0x58>)
 8020be2:	4428      	add	r0, r5
 8020be4:	f7ff ff60 	bl	8020aa8 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020be8:	42b4      	cmp	r4, r6
 8020bea:	d00c      	beq.n	8020c06 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020bec:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020bf0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020bf4:	d3f1      	bcc.n	8020bda <sys_timeouts_init+0x1e>
 8020bf6:	464b      	mov	r3, r9
 8020bf8:	4641      	mov	r1, r8
 8020bfa:	f240 1229 	movw	r2, #297	; 0x129
 8020bfe:	4638      	mov	r0, r7
 8020c00:	f005 fba8 	bl	8026354 <iprintf>
 8020c04:	e7e9      	b.n	8020bda <sys_timeouts_init+0x1e>
}
 8020c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c0a:	bf00      	nop
 8020c0c:	080464a8 	.word	0x080464a8
 8020c10:	0802b034 	.word	0x0802b034
 8020c14:	08020b05 	.word	0x08020b05
 8020c18:	080463f4 	.word	0x080463f4
 8020c1c:	08046468 	.word	0x08046468

08020c20 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020c20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8020c24:	b570      	push	{r4, r5, r6, lr}
 8020c26:	4604      	mov	r4, r0
 8020c28:	460d      	mov	r5, r1
 8020c2a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020c2c:	d208      	bcs.n	8020c40 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020c2e:	f7f4 fcdd 	bl	80155ec <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020c32:	4632      	mov	r2, r6
 8020c34:	4629      	mov	r1, r5
 8020c36:	4420      	add	r0, r4
#endif
}
 8020c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020c3c:	f7ff bf34 	b.w	8020aa8 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020c40:	4b03      	ldr	r3, [pc, #12]	; (8020c50 <sys_timeout+0x30>)
 8020c42:	f240 1229 	movw	r2, #297	; 0x129
 8020c46:	4903      	ldr	r1, [pc, #12]	; (8020c54 <sys_timeout+0x34>)
 8020c48:	4803      	ldr	r0, [pc, #12]	; (8020c58 <sys_timeout+0x38>)
 8020c4a:	f005 fb83 	bl	8026354 <iprintf>
 8020c4e:	e7ee      	b.n	8020c2e <sys_timeout+0xe>
 8020c50:	080463f4 	.word	0x080463f4
 8020c54:	08046468 	.word	0x08046468
 8020c58:	0802b034 	.word	0x0802b034

08020c5c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8020c5c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020c5e:	4d0d      	ldr	r5, [pc, #52]	; (8020c94 <sys_untimeout+0x38>)
 8020c60:	682b      	ldr	r3, [r5, #0]
 8020c62:	b19b      	cbz	r3, 8020c8c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8020c64:	2400      	movs	r4, #0
 8020c66:	e003      	b.n	8020c70 <sys_untimeout+0x14>
 8020c68:	681a      	ldr	r2, [r3, #0]
 8020c6a:	461c      	mov	r4, r3
 8020c6c:	4613      	mov	r3, r2
 8020c6e:	b16a      	cbz	r2, 8020c8c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 8020c70:	689a      	ldr	r2, [r3, #8]
 8020c72:	4282      	cmp	r2, r0
 8020c74:	d1f8      	bne.n	8020c68 <sys_untimeout+0xc>
 8020c76:	68da      	ldr	r2, [r3, #12]
 8020c78:	428a      	cmp	r2, r1
 8020c7a:	d1f5      	bne.n	8020c68 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 8020c7c:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 8020c7e:	b13c      	cbz	r4, 8020c90 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 8020c80:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8020c82:	4619      	mov	r1, r3
 8020c84:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 8020c86:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8020c88:	f7fa bd82 	b.w	801b790 <memp_free>
}
 8020c8c:	bc30      	pop	{r4, r5}
 8020c8e:	4770      	bx	lr
        next_timeout = t->next;
 8020c90:	602a      	str	r2, [r5, #0]
 8020c92:	e7f6      	b.n	8020c82 <sys_untimeout+0x26>
 8020c94:	2002e494 	.word	0x2002e494

08020c98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8020c9c:	f7f4 fca6 	bl	80155ec <sys_now>
 8020ca0:	4c0f      	ldr	r4, [pc, #60]	; (8020ce0 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8020ca2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8020ce4 <sys_check_timeouts+0x4c>
  now = sys_now();
 8020ca6:	4607      	mov	r7, r0
 8020ca8:	e00f      	b.n	8020cca <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8020caa:	685a      	ldr	r2, [r3, #4]
 8020cac:	eba7 0c02 	sub.w	ip, r7, r2
 8020cb0:	f1bc 0f00 	cmp.w	ip, #0
 8020cb4:	db0e      	blt.n	8020cd4 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 8020cb6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8020cb8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 8020cba:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 8020cbe:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8020cc2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020cc4:	f7fa fd64 	bl	801b790 <memp_free>
    if (handler != NULL) {
 8020cc8:	b935      	cbnz	r5, 8020cd8 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 8020cca:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020ccc:	200c      	movs	r0, #12
 8020cce:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	d1ea      	bne.n	8020caa <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8020cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8020cd8:	4648      	mov	r0, r9
 8020cda:	47a8      	blx	r5
 8020cdc:	e7f5      	b.n	8020cca <sys_check_timeouts+0x32>
 8020cde:	bf00      	nop
 8020ce0:	2002e494 	.word	0x2002e494
 8020ce4:	2002e490 	.word	0x2002e490

08020ce8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8020ce8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020cea:	4c07      	ldr	r4, [pc, #28]	; (8020d08 <sys_timeouts_sleeptime+0x20>)
 8020cec:	6823      	ldr	r3, [r4, #0]
 8020cee:	b13b      	cbz	r3, 8020d00 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8020cf0:	f7f4 fc7c 	bl	80155ec <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020cf4:	6823      	ldr	r3, [r4, #0]
 8020cf6:	685b      	ldr	r3, [r3, #4]
    return 0;
 8020cf8:	1a18      	subs	r0, r3, r0
 8020cfa:	bf48      	it	mi
 8020cfc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8020cfe:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8020d00:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020d04:	bd10      	pop	{r4, pc}
 8020d06:	bf00      	nop
 8020d08:	2002e494 	.word	0x2002e494

08020d0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020d0c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020d0e:	f005 fbc5 	bl	802649c <rand>
 8020d12:	4b02      	ldr	r3, [pc, #8]	; (8020d1c <udp_init+0x10>)
 8020d14:	4a02      	ldr	r2, [pc, #8]	; (8020d20 <udp_init+0x14>)
 8020d16:	4303      	orrs	r3, r0
 8020d18:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8020d1a:	bd08      	pop	{r3, pc}
 8020d1c:	ffffc000 	.word	0xffffc000
 8020d20:	2000042e 	.word	0x2000042e

08020d24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020d28:	4680      	mov	r8, r0
{
 8020d2a:	b085      	sub	sp, #20
 8020d2c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020d2e:	2800      	cmp	r0, #0
 8020d30:	f000 80af 	beq.w	8020e92 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020d34:	2f00      	cmp	r7, #0
 8020d36:	f000 80b5 	beq.w	8020ea4 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020d3a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8020d3e:	2b07      	cmp	r3, #7
 8020d40:	f240 8091 	bls.w	8020e66 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020d44:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8020f1c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 8020d48:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020d4c:	f8d9 1000 	ldr.w	r1, [r9]
 8020d50:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020d54:	f003 f80c 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 8020d58:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020d5a:	8820      	ldrh	r0, [r4, #0]
 8020d5c:	f7f9 f9f4 	bl	801a148 <lwip_htons>
 8020d60:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8020d62:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8020d64:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8020d66:	f7f9 f9ef 	bl	801a148 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020d6a:	4b64      	ldr	r3, [pc, #400]	; (8020efc <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 8020d6c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020d6e:	681c      	ldr	r4, [r3, #0]
 8020d70:	2c00      	cmp	r4, #0
 8020d72:	d064      	beq.n	8020e3e <udp_input+0x11a>
  uncon_pcb = NULL;
 8020d74:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020d78:	f8df c190 	ldr.w	ip, [pc, #400]	; 8020f0c <udp_input+0x1e8>
 8020d7c:	4960      	ldr	r1, [pc, #384]	; (8020f00 <udp_input+0x1dc>)
  prev = NULL;
 8020d7e:	465e      	mov	r6, fp
 8020d80:	e004      	b.n	8020d8c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020d82:	68e2      	ldr	r2, [r4, #12]
 8020d84:	4626      	mov	r6, r4
 8020d86:	2a00      	cmp	r2, #0
 8020d88:	d056      	beq.n	8020e38 <udp_input+0x114>
 8020d8a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020d8c:	8a62      	ldrh	r2, [r4, #18]
 8020d8e:	42aa      	cmp	r2, r5
 8020d90:	d1f7      	bne.n	8020d82 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020d92:	2f00      	cmp	r7, #0
 8020d94:	d06d      	beq.n	8020e72 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020d96:	7a20      	ldrb	r0, [r4, #8]
 8020d98:	b138      	cbz	r0, 8020daa <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020d9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8020d9e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8020da2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020da4:	b2d2      	uxtb	r2, r2
 8020da6:	4290      	cmp	r0, r2
 8020da8:	d1eb      	bne.n	8020d82 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020daa:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 8020dac:	f1ba 0f00 	cmp.w	sl, #0
 8020db0:	d038      	beq.n	8020e24 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020db2:	b13a      	cbz	r2, 8020dc4 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020db4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020db8:	1c43      	adds	r3, r0, #1
 8020dba:	d003      	beq.n	8020dc4 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020dbc:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020dbe:	68bb      	ldr	r3, [r7, #8]
 8020dc0:	4218      	tst	r0, r3
 8020dc2:	d1de      	bne.n	8020d82 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8020dc4:	7c20      	ldrb	r0, [r4, #16]
 8020dc6:	0743      	lsls	r3, r0, #29
 8020dc8:	d409      	bmi.n	8020dde <udp_input+0xba>
        if (uncon_pcb == NULL) {
 8020dca:	f1bb 0f00 	cmp.w	fp, #0
 8020dce:	d059      	beq.n	8020e84 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020dd0:	f1ba 0f00 	cmp.w	sl, #0
 8020dd4:	d003      	beq.n	8020dde <udp_input+0xba>
 8020dd6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020dda:	3001      	adds	r0, #1
 8020ddc:	d069      	beq.n	8020eb2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8020dde:	8aa2      	ldrh	r2, [r4, #20]
 8020de0:	9803      	ldr	r0, [sp, #12]
 8020de2:	4282      	cmp	r2, r0
 8020de4:	d1cd      	bne.n	8020d82 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020de6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 8020de8:	b11a      	cbz	r2, 8020df2 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020dea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8020dee:	4282      	cmp	r2, r0
 8020df0:	d1c7      	bne.n	8020d82 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020df2:	b12e      	cbz	r6, 8020e00 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8020df4:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 8020df6:	4a41      	ldr	r2, [pc, #260]	; (8020efc <udp_input+0x1d8>)
          prev->next = pcb->next;
 8020df8:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 8020dfa:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 8020dfc:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 8020dfe:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020e00:	2108      	movs	r1, #8
 8020e02:	4640      	mov	r0, r8
 8020e04:	f7fb f950 	bl	801c0a8 <pbuf_remove_header>
 8020e08:	2800      	cmp	r0, #0
 8020e0a:	d15b      	bne.n	8020ec4 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020e0c:	69a5      	ldr	r5, [r4, #24]
 8020e0e:	b355      	cbz	r5, 8020e66 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8020e10:	9b03      	ldr	r3, [sp, #12]
 8020e12:	4642      	mov	r2, r8
 8020e14:	69e0      	ldr	r0, [r4, #28]
 8020e16:	4621      	mov	r1, r4
 8020e18:	9300      	str	r3, [sp, #0]
 8020e1a:	4b3a      	ldr	r3, [pc, #232]	; (8020f04 <udp_input+0x1e0>)
 8020e1c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8020e1e:	b005      	add	sp, #20
 8020e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020e24:	2a00      	cmp	r2, #0
 8020e26:	d0cd      	beq.n	8020dc4 <udp_input+0xa0>
 8020e28:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8020e2c:	4282      	cmp	r2, r0
 8020e2e:	d0c9      	beq.n	8020dc4 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e30:	68e2      	ldr	r2, [r4, #12]
 8020e32:	4626      	mov	r6, r4
 8020e34:	2a00      	cmp	r2, #0
 8020e36:	d1a8      	bne.n	8020d8a <udp_input+0x66>
  if (pcb != NULL) {
 8020e38:	f1bb 0f00 	cmp.w	fp, #0
 8020e3c:	d15b      	bne.n	8020ef6 <udp_input+0x1d2>
  if (for_us) {
 8020e3e:	687a      	ldr	r2, [r7, #4]
 8020e40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8020e44:	429a      	cmp	r2, r3
 8020e46:	d10e      	bne.n	8020e66 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020e48:	2108      	movs	r1, #8
 8020e4a:	4640      	mov	r0, r8
 8020e4c:	f7fb f92c 	bl	801c0a8 <pbuf_remove_header>
 8020e50:	2800      	cmp	r0, #0
 8020e52:	d137      	bne.n	8020ec4 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020e54:	f1ba 0f00 	cmp.w	sl, #0
 8020e58:	d105      	bne.n	8020e66 <udp_input+0x142>
 8020e5a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8020e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020e62:	2be0      	cmp	r3, #224	; 0xe0
 8020e64:	d13b      	bne.n	8020ede <udp_input+0x1ba>
      pbuf_free(p);
 8020e66:	4640      	mov	r0, r8
}
 8020e68:	b005      	add	sp, #20
 8020e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8020e6e:	f7fb b9a7 	b.w	801c1c0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020e72:	4663      	mov	r3, ip
 8020e74:	2288      	movs	r2, #136	; 0x88
 8020e76:	4824      	ldr	r0, [pc, #144]	; (8020f08 <udp_input+0x1e4>)
 8020e78:	f005 fa6c 	bl	8026354 <iprintf>
 8020e7c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8020f0c <udp_input+0x1e8>
 8020e80:	491f      	ldr	r1, [pc, #124]	; (8020f00 <udp_input+0x1dc>)
 8020e82:	e788      	b.n	8020d96 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 8020e84:	8aa2      	ldrh	r2, [r4, #20]
 8020e86:	46a3      	mov	fp, r4
 8020e88:	9803      	ldr	r0, [sp, #12]
 8020e8a:	4282      	cmp	r2, r0
 8020e8c:	f47f af79 	bne.w	8020d82 <udp_input+0x5e>
 8020e90:	e7a9      	b.n	8020de6 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020e92:	4b1e      	ldr	r3, [pc, #120]	; (8020f0c <udp_input+0x1e8>)
 8020e94:	22cf      	movs	r2, #207	; 0xcf
 8020e96:	491e      	ldr	r1, [pc, #120]	; (8020f10 <udp_input+0x1ec>)
 8020e98:	481b      	ldr	r0, [pc, #108]	; (8020f08 <udp_input+0x1e4>)
 8020e9a:	f005 fa5b 	bl	8026354 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020e9e:	2f00      	cmp	r7, #0
 8020ea0:	f47f af4b 	bne.w	8020d3a <udp_input+0x16>
 8020ea4:	4b19      	ldr	r3, [pc, #100]	; (8020f0c <udp_input+0x1e8>)
 8020ea6:	22d0      	movs	r2, #208	; 0xd0
 8020ea8:	491a      	ldr	r1, [pc, #104]	; (8020f14 <udp_input+0x1f0>)
 8020eaa:	4817      	ldr	r0, [pc, #92]	; (8020f08 <udp_input+0x1e4>)
 8020eac:	f005 fa52 	bl	8026354 <iprintf>
 8020eb0:	e743      	b.n	8020d3a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020eb2:	6878      	ldr	r0, [r7, #4]
 8020eb4:	f8db 3000 	ldr.w	r3, [fp]
 8020eb8:	4283      	cmp	r3, r0
 8020eba:	d090      	beq.n	8020dde <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020ebc:	4290      	cmp	r0, r2
 8020ebe:	bf08      	it	eq
 8020ec0:	46a3      	moveq	fp, r4
 8020ec2:	e78c      	b.n	8020dde <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8020ec4:	4b11      	ldr	r3, [pc, #68]	; (8020f0c <udp_input+0x1e8>)
 8020ec6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8020eca:	4913      	ldr	r1, [pc, #76]	; (8020f18 <udp_input+0x1f4>)
 8020ecc:	480e      	ldr	r0, [pc, #56]	; (8020f08 <udp_input+0x1e4>)
 8020ece:	f005 fa41 	bl	8026354 <iprintf>
      pbuf_free(p);
 8020ed2:	4640      	mov	r0, r8
}
 8020ed4:	b005      	add	sp, #20
 8020ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8020eda:	f7fb b971 	b.w	801c1c0 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020ede:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8020ee2:	4640      	mov	r0, r8
 8020ee4:	3108      	adds	r1, #8
 8020ee6:	b209      	sxth	r1, r1
 8020ee8:	f7fb f916 	bl	801c118 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8020eec:	2103      	movs	r1, #3
 8020eee:	4640      	mov	r0, r8
 8020ef0:	f002 fd5a 	bl	80239a8 <icmp_dest_unreach>
 8020ef4:	e7b7      	b.n	8020e66 <udp_input+0x142>
 8020ef6:	465c      	mov	r4, fp
 8020ef8:	e782      	b.n	8020e00 <udp_input+0xdc>
 8020efa:	bf00      	nop
 8020efc:	2002e49c 	.word	0x2002e49c
 8020f00:	08046534 	.word	0x08046534
 8020f04:	2001f2a8 	.word	0x2001f2a8
 8020f08:	0802b034 	.word	0x0802b034
 8020f0c:	080464d0 	.word	0x080464d0
 8020f10:	08046500 	.word	0x08046500
 8020f14:	08046518 	.word	0x08046518
 8020f18:	0804655c 	.word	0x0804655c
 8020f1c:	2001f298 	.word	0x2001f298

08020f20 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8020f20:	4b38      	ldr	r3, [pc, #224]	; (8021004 <udp_bind+0xe4>)
 8020f22:	2900      	cmp	r1, #0
{
 8020f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8020f28:	bf08      	it	eq
 8020f2a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8020f2c:	2800      	cmp	r0, #0
 8020f2e:	d05e      	beq.n	8020fee <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020f30:	4f35      	ldr	r7, [pc, #212]	; (8021008 <udp_bind+0xe8>)
 8020f32:	683e      	ldr	r6, [r7, #0]
 8020f34:	b34e      	cbz	r6, 8020f8a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8020f36:	42b0      	cmp	r0, r6
 8020f38:	d031      	beq.n	8020f9e <udp_bind+0x7e>
 8020f3a:	4634      	mov	r4, r6
 8020f3c:	e001      	b.n	8020f42 <udp_bind+0x22>
 8020f3e:	42a0      	cmp	r0, r4
 8020f40:	d02d      	beq.n	8020f9e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020f42:	68e4      	ldr	r4, [r4, #12]
 8020f44:	2c00      	cmp	r4, #0
 8020f46:	d1fa      	bne.n	8020f3e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8020f48:	b362      	cbz	r2, 8020fa4 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020f4a:	680d      	ldr	r5, [r1, #0]
 8020f4c:	4633      	mov	r3, r6
 8020f4e:	e001      	b.n	8020f54 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020f50:	68db      	ldr	r3, [r3, #12]
 8020f52:	b19b      	cbz	r3, 8020f7c <udp_bind+0x5c>
      if (pcb != ipcb) {
 8020f54:	4298      	cmp	r0, r3
 8020f56:	d0fb      	beq.n	8020f50 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 8020f58:	8a59      	ldrh	r1, [r3, #18]
 8020f5a:	4291      	cmp	r1, r2
 8020f5c:	d1f8      	bne.n	8020f50 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020f5e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8020f60:	2900      	cmp	r1, #0
 8020f62:	bf18      	it	ne
 8020f64:	42a9      	cmpne	r1, r5
 8020f66:	d001      	beq.n	8020f6c <udp_bind+0x4c>
 8020f68:	2d00      	cmp	r5, #0
 8020f6a:	d1f1      	bne.n	8020f50 <udp_bind+0x30>
      return ERR_USE;
 8020f6c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8020f70:	4618      	mov	r0, r3
 8020f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020f76:	680d      	ldr	r5, [r1, #0]
 8020f78:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8020f7c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 8020f7e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8020f80:	b13c      	cbz	r4, 8020f92 <udp_bind+0x72>
  return ERR_OK;
 8020f82:	2300      	movs	r3, #0
}
 8020f84:	4618      	mov	r0, r3
 8020f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 8020f8a:	b372      	cbz	r2, 8020fea <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020f8c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 8020f8e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8020f90:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 8020f92:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 8020f94:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8020f96:	6038      	str	r0, [r7, #0]
}
 8020f98:	4618      	mov	r0, r3
 8020f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 8020f9e:	2401      	movs	r4, #1
  if (port == 0) {
 8020fa0:	2a00      	cmp	r2, #0
 8020fa2:	d1d2      	bne.n	8020f4a <udp_bind+0x2a>
 8020fa4:	f8df e070 	ldr.w	lr, [pc, #112]	; 8021018 <udp_bind+0xf8>
  rebind = 0;
 8020fa8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020fac:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8020fb0:	f8be 2000 	ldrh.w	r2, [lr]
 8020fb4:	4542      	cmp	r2, r8
 8020fb6:	d015      	beq.n	8020fe4 <udp_bind+0xc4>
 8020fb8:	3201      	adds	r2, #1
 8020fba:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020fbc:	2e00      	cmp	r6, #0
 8020fbe:	d0da      	beq.n	8020f76 <udp_bind+0x56>
 8020fc0:	4633      	mov	r3, r6
 8020fc2:	e002      	b.n	8020fca <udp_bind+0xaa>
 8020fc4:	68db      	ldr	r3, [r3, #12]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d0d5      	beq.n	8020f76 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 8020fca:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8020fce:	4594      	cmp	ip, r2
 8020fd0:	d1f8      	bne.n	8020fc4 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020fd2:	3d01      	subs	r5, #1
 8020fd4:	b2ad      	uxth	r5, r5
 8020fd6:	2d00      	cmp	r5, #0
 8020fd8:	d1ec      	bne.n	8020fb4 <udp_bind+0x94>
      return ERR_USE;
 8020fda:	f06f 0307 	mvn.w	r3, #7
 8020fde:	f8ae 2000 	strh.w	r2, [lr]
 8020fe2:	e7cf      	b.n	8020f84 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020fe4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8020fe8:	e7e8      	b.n	8020fbc <udp_bind+0x9c>
  rebind = 0;
 8020fea:	4634      	mov	r4, r6
 8020fec:	e7da      	b.n	8020fa4 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8020fee:	4b07      	ldr	r3, [pc, #28]	; (802100c <udp_bind+0xec>)
 8020ff0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8020ff4:	4906      	ldr	r1, [pc, #24]	; (8021010 <udp_bind+0xf0>)
 8020ff6:	4807      	ldr	r0, [pc, #28]	; (8021014 <udp_bind+0xf4>)
 8020ff8:	f005 f9ac 	bl	8026354 <iprintf>
 8020ffc:	f06f 030f 	mvn.w	r3, #15
 8021000:	e7c0      	b.n	8020f84 <udp_bind+0x64>
 8021002:	bf00      	nop
 8021004:	08046e50 	.word	0x08046e50
 8021008:	2002e49c 	.word	0x2002e49c
 802100c:	080464d0 	.word	0x080464d0
 8021010:	08046578 	.word	0x08046578
 8021014:	0802b034 	.word	0x0802b034
 8021018:	2000042e 	.word	0x2000042e

0802101c <udp_sendto_if_src>:
{
 802101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021020:	b085      	sub	sp, #20
 8021022:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021026:	2800      	cmp	r0, #0
 8021028:	f000 8087 	beq.w	802113a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802102c:	460d      	mov	r5, r1
 802102e:	2900      	cmp	r1, #0
 8021030:	d079      	beq.n	8021126 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021032:	4690      	mov	r8, r2
 8021034:	2a00      	cmp	r2, #0
 8021036:	d06c      	beq.n	8021112 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021038:	f1ba 0f00 	cmp.w	sl, #0
 802103c:	d05f      	beq.n	80210fe <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802103e:	f1bb 0f00 	cmp.w	fp, #0
 8021042:	f000 8084 	beq.w	802114e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 8021046:	8a42      	ldrh	r2, [r0, #18]
 8021048:	4699      	mov	r9, r3
 802104a:	4604      	mov	r4, r0
 802104c:	b39a      	cbz	r2, 80210b6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802104e:	892a      	ldrh	r2, [r5, #8]
 8021050:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8021054:	429a      	cmp	r2, r3
 8021056:	d84f      	bhi.n	80210f8 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021058:	2108      	movs	r1, #8
 802105a:	4628      	mov	r0, r5
 802105c:	f7fa fff0 	bl	801c040 <pbuf_add_header>
 8021060:	bb98      	cbnz	r0, 80210ca <udp_sendto_if_src+0xae>
 8021062:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021064:	8973      	ldrh	r3, [r6, #10]
 8021066:	2b07      	cmp	r3, #7
 8021068:	d93e      	bls.n	80210e8 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 802106a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 802106c:	8a60      	ldrh	r0, [r4, #18]
 802106e:	f7f9 f86b 	bl	801a148 <lwip_htons>
 8021072:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021074:	4648      	mov	r0, r9
 8021076:	f7f9 f867 	bl	801a148 <lwip_htons>
  udphdr->chksum = 0x0000;
 802107a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 802107c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 802107e:	71bb      	strb	r3, [r7, #6]
 8021080:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8021082:	8930      	ldrh	r0, [r6, #8]
 8021084:	f7f9 f860 	bl	801a148 <lwip_htons>
 8021088:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802108a:	f8cd b008 	str.w	fp, [sp, #8]
 802108e:	2011      	movs	r0, #17
 8021090:	7aa3      	ldrb	r3, [r4, #10]
 8021092:	4642      	mov	r2, r8
 8021094:	4651      	mov	r1, sl
 8021096:	9300      	str	r3, [sp, #0]
 8021098:	7ae3      	ldrb	r3, [r4, #11]
 802109a:	9001      	str	r0, [sp, #4]
 802109c:	4630      	mov	r0, r6
 802109e:	f002 fdb9 	bl	8023c14 <ip4_output_if_src>
  if (q != p) {
 80210a2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80210a4:	4607      	mov	r7, r0
  if (q != p) {
 80210a6:	d002      	beq.n	80210ae <udp_sendto_if_src+0x92>
    pbuf_free(q);
 80210a8:	4630      	mov	r0, r6
 80210aa:	f7fb f889 	bl	801c1c0 <pbuf_free>
}
 80210ae:	4638      	mov	r0, r7
 80210b0:	b005      	add	sp, #20
 80210b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80210b6:	4601      	mov	r1, r0
 80210b8:	f7ff ff32 	bl	8020f20 <udp_bind>
    if (err != ERR_OK) {
 80210bc:	4607      	mov	r7, r0
 80210be:	2800      	cmp	r0, #0
 80210c0:	d0c5      	beq.n	802104e <udp_sendto_if_src+0x32>
}
 80210c2:	4638      	mov	r0, r7
 80210c4:	b005      	add	sp, #20
 80210c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80210ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80210ce:	2108      	movs	r1, #8
 80210d0:	2022      	movs	r0, #34	; 0x22
 80210d2:	f7fa fea3 	bl	801be1c <pbuf_alloc>
    if (q == NULL) {
 80210d6:	4606      	mov	r6, r0
 80210d8:	b170      	cbz	r0, 80210f8 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 80210da:	892b      	ldrh	r3, [r5, #8]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d0c1      	beq.n	8021064 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 80210e0:	4629      	mov	r1, r5
 80210e2:	f7fb f8db 	bl	801c29c <pbuf_chain>
 80210e6:	e7bd      	b.n	8021064 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80210e8:	4b1e      	ldr	r3, [pc, #120]	; (8021164 <udp_sendto_if_src+0x148>)
 80210ea:	f240 320d 	movw	r2, #781	; 0x30d
 80210ee:	491e      	ldr	r1, [pc, #120]	; (8021168 <udp_sendto_if_src+0x14c>)
 80210f0:	481e      	ldr	r0, [pc, #120]	; (802116c <udp_sendto_if_src+0x150>)
 80210f2:	f005 f92f 	bl	8026354 <iprintf>
 80210f6:	e7b8      	b.n	802106a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 80210f8:	f04f 37ff 	mov.w	r7, #4294967295
 80210fc:	e7d7      	b.n	80210ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80210fe:	4b19      	ldr	r3, [pc, #100]	; (8021164 <udp_sendto_if_src+0x148>)
 8021100:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021104:	491a      	ldr	r1, [pc, #104]	; (8021170 <udp_sendto_if_src+0x154>)
 8021106:	f06f 070f 	mvn.w	r7, #15
 802110a:	4818      	ldr	r0, [pc, #96]	; (802116c <udp_sendto_if_src+0x150>)
 802110c:	f005 f922 	bl	8026354 <iprintf>
 8021110:	e7cd      	b.n	80210ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021112:	4b14      	ldr	r3, [pc, #80]	; (8021164 <udp_sendto_if_src+0x148>)
 8021114:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021118:	4916      	ldr	r1, [pc, #88]	; (8021174 <udp_sendto_if_src+0x158>)
 802111a:	f06f 070f 	mvn.w	r7, #15
 802111e:	4813      	ldr	r0, [pc, #76]	; (802116c <udp_sendto_if_src+0x150>)
 8021120:	f005 f918 	bl	8026354 <iprintf>
 8021124:	e7c3      	b.n	80210ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021126:	4b0f      	ldr	r3, [pc, #60]	; (8021164 <udp_sendto_if_src+0x148>)
 8021128:	f240 22d2 	movw	r2, #722	; 0x2d2
 802112c:	4912      	ldr	r1, [pc, #72]	; (8021178 <udp_sendto_if_src+0x15c>)
 802112e:	f06f 070f 	mvn.w	r7, #15
 8021132:	480e      	ldr	r0, [pc, #56]	; (802116c <udp_sendto_if_src+0x150>)
 8021134:	f005 f90e 	bl	8026354 <iprintf>
 8021138:	e7b9      	b.n	80210ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802113a:	4b0a      	ldr	r3, [pc, #40]	; (8021164 <udp_sendto_if_src+0x148>)
 802113c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021140:	490e      	ldr	r1, [pc, #56]	; (802117c <udp_sendto_if_src+0x160>)
 8021142:	f06f 070f 	mvn.w	r7, #15
 8021146:	4809      	ldr	r0, [pc, #36]	; (802116c <udp_sendto_if_src+0x150>)
 8021148:	f005 f904 	bl	8026354 <iprintf>
 802114c:	e7af      	b.n	80210ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802114e:	4b05      	ldr	r3, [pc, #20]	; (8021164 <udp_sendto_if_src+0x148>)
 8021150:	f240 22d5 	movw	r2, #725	; 0x2d5
 8021154:	490a      	ldr	r1, [pc, #40]	; (8021180 <udp_sendto_if_src+0x164>)
 8021156:	f06f 070f 	mvn.w	r7, #15
 802115a:	4804      	ldr	r0, [pc, #16]	; (802116c <udp_sendto_if_src+0x150>)
 802115c:	f005 f8fa 	bl	8026354 <iprintf>
 8021160:	e7a5      	b.n	80210ae <udp_sendto_if_src+0x92>
 8021162:	bf00      	nop
 8021164:	080464d0 	.word	0x080464d0
 8021168:	0804663c 	.word	0x0804663c
 802116c:	0802b034 	.word	0x0802b034
 8021170:	080465f4 	.word	0x080465f4
 8021174:	080465d0 	.word	0x080465d0
 8021178:	080465b0 	.word	0x080465b0
 802117c:	08046590 	.word	0x08046590
 8021180:	08046618 	.word	0x08046618

08021184 <udp_sendto_if>:
{
 8021184:	b570      	push	{r4, r5, r6, lr}
 8021186:	b082      	sub	sp, #8
 8021188:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802118a:	2800      	cmp	r0, #0
 802118c:	d036      	beq.n	80211fc <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802118e:	b359      	cbz	r1, 80211e8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021190:	b302      	cbz	r2, 80211d4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021192:	b1ac      	cbz	r4, 80211c0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021194:	6805      	ldr	r5, [r0, #0]
 8021196:	b935      	cbnz	r5, 80211a6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 8021198:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802119a:	e9cd 4500 	strd	r4, r5, [sp]
 802119e:	f7ff ff3d 	bl	802101c <udp_sendto_if_src>
}
 80211a2:	b002      	add	sp, #8
 80211a4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80211a6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211aa:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 80211ae:	d0f3      	beq.n	8021198 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80211b0:	6866      	ldr	r6, [r4, #4]
 80211b2:	42b5      	cmp	r5, r6
 80211b4:	d101      	bne.n	80211ba <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211b6:	4605      	mov	r5, r0
 80211b8:	e7ef      	b.n	802119a <udp_sendto_if+0x16>
        return ERR_RTE;
 80211ba:	f06f 0003 	mvn.w	r0, #3
 80211be:	e7f0      	b.n	80211a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80211c0:	4b13      	ldr	r3, [pc, #76]	; (8021210 <udp_sendto_if+0x8c>)
 80211c2:	f240 2283 	movw	r2, #643	; 0x283
 80211c6:	4913      	ldr	r1, [pc, #76]	; (8021214 <udp_sendto_if+0x90>)
 80211c8:	4813      	ldr	r0, [pc, #76]	; (8021218 <udp_sendto_if+0x94>)
 80211ca:	f005 f8c3 	bl	8026354 <iprintf>
 80211ce:	f06f 000f 	mvn.w	r0, #15
 80211d2:	e7e6      	b.n	80211a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80211d4:	4b0e      	ldr	r3, [pc, #56]	; (8021210 <udp_sendto_if+0x8c>)
 80211d6:	f240 2282 	movw	r2, #642	; 0x282
 80211da:	4910      	ldr	r1, [pc, #64]	; (802121c <udp_sendto_if+0x98>)
 80211dc:	480e      	ldr	r0, [pc, #56]	; (8021218 <udp_sendto_if+0x94>)
 80211de:	f005 f8b9 	bl	8026354 <iprintf>
 80211e2:	f06f 000f 	mvn.w	r0, #15
 80211e6:	e7dc      	b.n	80211a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80211e8:	4b09      	ldr	r3, [pc, #36]	; (8021210 <udp_sendto_if+0x8c>)
 80211ea:	f240 2281 	movw	r2, #641	; 0x281
 80211ee:	490c      	ldr	r1, [pc, #48]	; (8021220 <udp_sendto_if+0x9c>)
 80211f0:	4809      	ldr	r0, [pc, #36]	; (8021218 <udp_sendto_if+0x94>)
 80211f2:	f005 f8af 	bl	8026354 <iprintf>
 80211f6:	f06f 000f 	mvn.w	r0, #15
 80211fa:	e7d2      	b.n	80211a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80211fc:	4b04      	ldr	r3, [pc, #16]	; (8021210 <udp_sendto_if+0x8c>)
 80211fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021202:	4908      	ldr	r1, [pc, #32]	; (8021224 <udp_sendto_if+0xa0>)
 8021204:	4804      	ldr	r0, [pc, #16]	; (8021218 <udp_sendto_if+0x94>)
 8021206:	f005 f8a5 	bl	8026354 <iprintf>
 802120a:	f06f 000f 	mvn.w	r0, #15
 802120e:	e7c8      	b.n	80211a2 <udp_sendto_if+0x1e>
 8021210:	080464d0 	.word	0x080464d0
 8021214:	080466c4 	.word	0x080466c4
 8021218:	0802b034 	.word	0x0802b034
 802121c:	080466a4 	.word	0x080466a4
 8021220:	08046688 	.word	0x08046688
 8021224:	0804666c 	.word	0x0804666c

08021228 <udp_sendto>:
{
 8021228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802122c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802122e:	b388      	cbz	r0, 8021294 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021230:	460e      	mov	r6, r1
 8021232:	b329      	cbz	r1, 8021280 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021234:	4615      	mov	r5, r2
 8021236:	b1ca      	cbz	r2, 802126c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021238:	4604      	mov	r4, r0
 802123a:	7a00      	ldrb	r0, [r0, #8]
 802123c:	4698      	mov	r8, r3
 802123e:	b168      	cbz	r0, 802125c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 8021240:	f7fa fc98 	bl	801bb74 <netif_get_by_index>
 8021244:	4607      	mov	r7, r0
  if (netif == NULL) {
 8021246:	b177      	cbz	r7, 8021266 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021248:	4643      	mov	r3, r8
 802124a:	462a      	mov	r2, r5
 802124c:	4631      	mov	r1, r6
 802124e:	4620      	mov	r0, r4
 8021250:	9700      	str	r7, [sp, #0]
 8021252:	f7ff ff97 	bl	8021184 <udp_sendto_if>
}
 8021256:	b002      	add	sp, #8
 8021258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 802125c:	4610      	mov	r0, r2
 802125e:	f002 fbab 	bl	80239b8 <ip4_route>
 8021262:	4607      	mov	r7, r0
 8021264:	e7ef      	b.n	8021246 <udp_sendto+0x1e>
    return ERR_RTE;
 8021266:	f06f 0003 	mvn.w	r0, #3
 802126a:	e7f4      	b.n	8021256 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802126c:	4b0e      	ldr	r3, [pc, #56]	; (80212a8 <udp_sendto+0x80>)
 802126e:	f240 221a 	movw	r2, #538	; 0x21a
 8021272:	490e      	ldr	r1, [pc, #56]	; (80212ac <udp_sendto+0x84>)
 8021274:	480e      	ldr	r0, [pc, #56]	; (80212b0 <udp_sendto+0x88>)
 8021276:	f005 f86d 	bl	8026354 <iprintf>
 802127a:	f06f 000f 	mvn.w	r0, #15
 802127e:	e7ea      	b.n	8021256 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021280:	4b09      	ldr	r3, [pc, #36]	; (80212a8 <udp_sendto+0x80>)
 8021282:	f240 2219 	movw	r2, #537	; 0x219
 8021286:	490b      	ldr	r1, [pc, #44]	; (80212b4 <udp_sendto+0x8c>)
 8021288:	4809      	ldr	r0, [pc, #36]	; (80212b0 <udp_sendto+0x88>)
 802128a:	f005 f863 	bl	8026354 <iprintf>
 802128e:	f06f 000f 	mvn.w	r0, #15
 8021292:	e7e0      	b.n	8021256 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8021294:	4b04      	ldr	r3, [pc, #16]	; (80212a8 <udp_sendto+0x80>)
 8021296:	f44f 7206 	mov.w	r2, #536	; 0x218
 802129a:	4907      	ldr	r1, [pc, #28]	; (80212b8 <udp_sendto+0x90>)
 802129c:	4804      	ldr	r0, [pc, #16]	; (80212b0 <udp_sendto+0x88>)
 802129e:	f005 f859 	bl	8026354 <iprintf>
 80212a2:	f06f 000f 	mvn.w	r0, #15
 80212a6:	e7d6      	b.n	8021256 <udp_sendto+0x2e>
 80212a8:	080464d0 	.word	0x080464d0
 80212ac:	08046718 	.word	0x08046718
 80212b0:	0802b034 	.word	0x0802b034
 80212b4:	080466fc 	.word	0x080466fc
 80212b8:	080466e4 	.word	0x080466e4

080212bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80212bc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80212be:	b320      	cbz	r0, 802130a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80212c0:	460d      	mov	r5, r1
 80212c2:	b361      	cbz	r1, 802131e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 80212c4:	4616      	mov	r6, r2
 80212c6:	8a42      	ldrh	r2, [r0, #18]
 80212c8:	4604      	mov	r4, r0
 80212ca:	b1c2      	cbz	r2, 80212fe <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80212cc:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80212ce:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212d0:	4918      	ldr	r1, [pc, #96]	; (8021334 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80212d2:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80212d6:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212d8:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 80212da:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80212dc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212de:	b142      	cbz	r2, 80212f2 <udp_connect+0x36>
    if (pcb == ipcb) {
 80212e0:	4294      	cmp	r4, r2
 80212e2:	d00a      	beq.n	80212fa <udp_connect+0x3e>
 80212e4:	4613      	mov	r3, r2
 80212e6:	e001      	b.n	80212ec <udp_connect+0x30>
 80212e8:	429c      	cmp	r4, r3
 80212ea:	d006      	beq.n	80212fa <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212ec:	68db      	ldr	r3, [r3, #12]
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d1fa      	bne.n	80212e8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 80212f2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 80212f4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 80212f6:	600c      	str	r4, [r1, #0]
}
 80212f8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 80212fa:	2000      	movs	r0, #0
}
 80212fc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80212fe:	4601      	mov	r1, r0
 8021300:	f7ff fe0e 	bl	8020f20 <udp_bind>
    if (err != ERR_OK) {
 8021304:	2800      	cmp	r0, #0
 8021306:	d0e1      	beq.n	80212cc <udp_connect+0x10>
}
 8021308:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802130a:	4b0b      	ldr	r3, [pc, #44]	; (8021338 <udp_connect+0x7c>)
 802130c:	f240 4235 	movw	r2, #1077	; 0x435
 8021310:	490a      	ldr	r1, [pc, #40]	; (802133c <udp_connect+0x80>)
 8021312:	480b      	ldr	r0, [pc, #44]	; (8021340 <udp_connect+0x84>)
 8021314:	f005 f81e 	bl	8026354 <iprintf>
 8021318:	f06f 000f 	mvn.w	r0, #15
}
 802131c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802131e:	4b06      	ldr	r3, [pc, #24]	; (8021338 <udp_connect+0x7c>)
 8021320:	f240 4236 	movw	r2, #1078	; 0x436
 8021324:	4907      	ldr	r1, [pc, #28]	; (8021344 <udp_connect+0x88>)
 8021326:	4806      	ldr	r0, [pc, #24]	; (8021340 <udp_connect+0x84>)
 8021328:	f005 f814 	bl	8026354 <iprintf>
 802132c:	f06f 000f 	mvn.w	r0, #15
}
 8021330:	bd70      	pop	{r4, r5, r6, pc}
 8021332:	bf00      	nop
 8021334:	2002e49c 	.word	0x2002e49c
 8021338:	080464d0 	.word	0x080464d0
 802133c:	08046734 	.word	0x08046734
 8021340:	0802b034 	.word	0x0802b034
 8021344:	08046750 	.word	0x08046750

08021348 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021348:	b110      	cbz	r0, 8021350 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 802134a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 802134e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021350:	4b03      	ldr	r3, [pc, #12]	; (8021360 <udp_recv+0x18>)
 8021352:	f240 428a 	movw	r2, #1162	; 0x48a
 8021356:	4903      	ldr	r1, [pc, #12]	; (8021364 <udp_recv+0x1c>)
 8021358:	4803      	ldr	r0, [pc, #12]	; (8021368 <udp_recv+0x20>)
 802135a:	f004 bffb 	b.w	8026354 <iprintf>
 802135e:	bf00      	nop
 8021360:	080464d0 	.word	0x080464d0
 8021364:	0804676c 	.word	0x0804676c
 8021368:	0802b034 	.word	0x0802b034

0802136c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802136c:	4601      	mov	r1, r0
 802136e:	b1c0      	cbz	r0, 80213a2 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021370:	4b0f      	ldr	r3, [pc, #60]	; (80213b0 <udp_remove+0x44>)
 8021372:	681a      	ldr	r2, [r3, #0]
 8021374:	4282      	cmp	r2, r0
 8021376:	d00a      	beq.n	802138e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021378:	b132      	cbz	r2, 8021388 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802137a:	68d3      	ldr	r3, [r2, #12]
 802137c:	428b      	cmp	r3, r1
 802137e:	d100      	bne.n	8021382 <udp_remove+0x16>
 8021380:	b953      	cbnz	r3, 8021398 <udp_remove+0x2c>
 8021382:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021384:	2a00      	cmp	r2, #0
 8021386:	d1f8      	bne.n	802137a <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021388:	2001      	movs	r0, #1
 802138a:	f7fa ba01 	b.w	801b790 <memp_free>
    udp_pcbs = udp_pcbs->next;
 802138e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8021390:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 8021392:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8021394:	f7fa b9fc 	b.w	801b790 <memp_free>
        pcb2->next = pcb->next;
 8021398:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802139a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 802139c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802139e:	f7fa b9f7 	b.w	801b790 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80213a2:	4b04      	ldr	r3, [pc, #16]	; (80213b4 <udp_remove+0x48>)
 80213a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80213a8:	4903      	ldr	r1, [pc, #12]	; (80213b8 <udp_remove+0x4c>)
 80213aa:	4804      	ldr	r0, [pc, #16]	; (80213bc <udp_remove+0x50>)
 80213ac:	f004 bfd2 	b.w	8026354 <iprintf>
 80213b0:	2002e49c 	.word	0x2002e49c
 80213b4:	080464d0 	.word	0x080464d0
 80213b8:	08046784 	.word	0x08046784
 80213bc:	0802b034 	.word	0x0802b034

080213c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80213c0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80213c2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80213c6:	4907      	ldr	r1, [pc, #28]	; (80213e4 <udp_new+0x24>)
 80213c8:	2001      	movs	r0, #1
 80213ca:	f7fa f9ab 	bl	801b724 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80213ce:	4604      	mov	r4, r0
 80213d0:	b128      	cbz	r0, 80213de <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80213d2:	2220      	movs	r2, #32
 80213d4:	2100      	movs	r1, #0
 80213d6:	f004 f81f 	bl	8025418 <memset>
    pcb->ttl = UDP_TTL;
 80213da:	23ff      	movs	r3, #255	; 0xff
 80213dc:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80213de:	4620      	mov	r0, r4
 80213e0:	bd10      	pop	{r4, pc}
 80213e2:	bf00      	nop
 80213e4:	080464d0 	.word	0x080464d0

080213e8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80213e8:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80213ea:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80213ee:	4907      	ldr	r1, [pc, #28]	; (802140c <udp_new_ip_type+0x24>)
 80213f0:	2001      	movs	r0, #1
 80213f2:	f7fa f997 	bl	801b724 <memp_malloc_fn>
  if (pcb != NULL) {
 80213f6:	4604      	mov	r4, r0
 80213f8:	b128      	cbz	r0, 8021406 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80213fa:	2220      	movs	r2, #32
 80213fc:	2100      	movs	r1, #0
 80213fe:	f004 f80b 	bl	8025418 <memset>
    pcb->ttl = UDP_TTL;
 8021402:	23ff      	movs	r3, #255	; 0xff
 8021404:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8021406:	4620      	mov	r0, r4
 8021408:	bd10      	pop	{r4, pc}
 802140a:	bf00      	nop
 802140c:	080464d0 	.word	0x080464d0

08021410 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021410:	b110      	cbz	r0, 8021418 <udp_netif_ip_addr_changed+0x8>
 8021412:	6802      	ldr	r2, [r0, #0]
 8021414:	b101      	cbz	r1, 8021418 <udp_netif_ip_addr_changed+0x8>
 8021416:	b902      	cbnz	r2, 802141a <udp_netif_ip_addr_changed+0xa>
 8021418:	4770      	bx	lr
 802141a:	680b      	ldr	r3, [r1, #0]
 802141c:	2b00      	cmp	r3, #0
 802141e:	d0fb      	beq.n	8021418 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021420:	4b08      	ldr	r3, [pc, #32]	; (8021444 <udp_netif_ip_addr_changed+0x34>)
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	2b00      	cmp	r3, #0
 8021426:	d0f7      	beq.n	8021418 <udp_netif_ip_addr_changed+0x8>
{
 8021428:	b410      	push	{r4}
 802142a:	e000      	b.n	802142e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802142c:	6802      	ldr	r2, [r0, #0]
 802142e:	681c      	ldr	r4, [r3, #0]
 8021430:	4294      	cmp	r4, r2
 8021432:	d101      	bne.n	8021438 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021434:	680a      	ldr	r2, [r1, #0]
 8021436:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021438:	68db      	ldr	r3, [r3, #12]
 802143a:	2b00      	cmp	r3, #0
 802143c:	d1f6      	bne.n	802142c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 802143e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021442:	4770      	bx	lr
 8021444:	2002e49c 	.word	0x2002e49c

08021448 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8021448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802144a:	1d07      	adds	r7, r0, #4
{
 802144c:	4604      	mov	r4, r0
 802144e:	460d      	mov	r5, r1
 8021450:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021452:	2f44      	cmp	r7, #68	; 0x44
 8021454:	d80e      	bhi.n	8021474 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8021456:	0e33      	lsrs	r3, r6, #24
 8021458:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802145a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 802145c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802145e:	b292      	uxth	r2, r2
 8021460:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021462:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8021464:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021466:	0a32      	lsrs	r2, r6, #8
 8021468:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 802146a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 802146c:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 802146e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8021470:	552e      	strb	r6, [r5, r4]
}
 8021472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021474:	4b03      	ldr	r3, [pc, #12]	; (8021484 <dhcp_option_long+0x3c>)
 8021476:	f240 52b7 	movw	r2, #1463	; 0x5b7
 802147a:	4903      	ldr	r1, [pc, #12]	; (8021488 <dhcp_option_long+0x40>)
 802147c:	4803      	ldr	r0, [pc, #12]	; (802148c <dhcp_option_long+0x44>)
 802147e:	f004 ff69 	bl	8026354 <iprintf>
 8021482:	e7e8      	b.n	8021456 <dhcp_option_long+0xe>
 8021484:	0804679c 	.word	0x0804679c
 8021488:	080467d4 	.word	0x080467d4
 802148c:	0802b034 	.word	0x0802b034

08021490 <dhcp_check>:
{
 8021490:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021492:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 8021494:	7963      	ldrb	r3, [r4, #5]
 8021496:	2b08      	cmp	r3, #8
 8021498:	d004      	beq.n	80214a4 <dhcp_check+0x14>
    dhcp->tries = 0;
 802149a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802149c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 802149e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 80214a0:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 80214a2:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80214a4:	2200      	movs	r2, #0
 80214a6:	f104 011c 	add.w	r1, r4, #28
 80214aa:	f001 ffab 	bl	8023404 <etharp_query>
  if (dhcp->tries < 255) {
 80214ae:	79a3      	ldrb	r3, [r4, #6]
 80214b0:	2bff      	cmp	r3, #255	; 0xff
 80214b2:	d001      	beq.n	80214b8 <dhcp_check+0x28>
    dhcp->tries++;
 80214b4:	3301      	adds	r3, #1
 80214b6:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214b8:	2301      	movs	r3, #1
 80214ba:	8123      	strh	r3, [r4, #8]
}
 80214bc:	bd10      	pop	{r4, pc}
 80214be:	bf00      	nop

080214c0 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80214c0:	2800      	cmp	r0, #0
 80214c2:	f000 808e 	beq.w	80215e2 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 80214c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80214c8:	2900      	cmp	r1, #0
 80214ca:	f000 8091 	beq.w	80215f0 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80214ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 80214d0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80214d2:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 80214d6:	b500      	push	{lr}
  dhcp->lease_used = 0;
 80214d8:	824a      	strh	r2, [r1, #18]
{
 80214da:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80214dc:	d00e      	beq.n	80214fc <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80214de:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80214e0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80214e4:	d258      	bcs.n	8021598 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80214e6:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 80214ea:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80214ec:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 80214f0:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 80214f4:	f200 8083 	bhi.w	80215fe <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 80214f8:	2301      	movs	r3, #1
 80214fa:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80214fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80214fe:	1c5a      	adds	r2, r3, #1
 8021500:	d050      	beq.n	80215a4 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021502:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8021504:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8021508:	d241      	bcs.n	802158e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802150a:	4a40      	ldr	r2, [pc, #256]	; (802160c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802150c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802150e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8021512:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8021516:	d874      	bhi.n	8021602 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8021518:	2301      	movs	r3, #1
 802151a:	469c      	mov	ip, r3
 802151c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802151e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8021520:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021524:	1c53      	adds	r3, r2, #1
 8021526:	d042      	beq.n	80215ae <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021528:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802152a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802152e:	d24b      	bcs.n	80215c8 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021530:	4b36      	ldr	r3, [pc, #216]	; (802160c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8021532:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021534:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8021538:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802153c:	d864      	bhi.n	8021608 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802153e:	2201      	movs	r2, #1
 8021540:	4613      	mov	r3, r2
 8021542:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8021544:	2201      	movs	r2, #1
 8021546:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021548:	459c      	cmp	ip, r3
 802154a:	d302      	bcc.n	8021552 <dhcp_bind+0x92>
 802154c:	b10a      	cbz	r2, 8021552 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 802154e:	2300      	movs	r3, #0
 8021550:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8021552:	79cb      	ldrb	r3, [r1, #7]
 8021554:	2b00      	cmp	r3, #0
 8021556:	d02f      	beq.n	80215b8 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8021558:	6a0b      	ldr	r3, [r1, #32]
 802155a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802155c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802155e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8021560:	b92b      	cbnz	r3, 802156e <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8021562:	69cb      	ldr	r3, [r1, #28]
 8021564:	9a00      	ldr	r2, [sp, #0]
 8021566:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8021568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802156c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 802156e:	794b      	ldrb	r3, [r1, #5]
 8021570:	2b0a      	cmp	r3, #10
 8021572:	d004      	beq.n	802157e <dhcp_bind+0xbe>
    dhcp->tries = 0;
 8021574:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021576:	220a      	movs	r2, #10
    dhcp->tries = 0;
 8021578:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 802157a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 802157c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 802157e:	ab01      	add	r3, sp, #4
 8021580:	466a      	mov	r2, sp
 8021582:	311c      	adds	r1, #28
 8021584:	f7fa f982 	bl	801b88c <netif_set_addr>
}
 8021588:	b003      	add	sp, #12
 802158a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802158e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021592:	469c      	mov	ip, r3
 8021594:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 8021596:	e7c2      	b.n	802151e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 8021598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802159c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802159e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80215a0:	1c5a      	adds	r2, r3, #1
 80215a2:	d1ae      	bne.n	8021502 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80215a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80215a6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80215aa:	1c53      	adds	r3, r2, #1
 80215ac:	d1bc      	bne.n	8021528 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80215ae:	898b      	ldrh	r3, [r1, #12]
 80215b0:	1e1a      	subs	r2, r3, #0
 80215b2:	bf18      	it	ne
 80215b4:	2201      	movne	r2, #1
 80215b6:	e7c7      	b.n	8021548 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 80215b8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80215bc:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 80215be:	2b00      	cmp	r3, #0
 80215c0:	db07      	blt.n	80215d2 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80215c2:	23ff      	movs	r3, #255	; 0xff
 80215c4:	9300      	str	r3, [sp, #0]
 80215c6:	e7c9      	b.n	802155c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 80215c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80215cc:	4613      	mov	r3, r2
 80215ce:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 80215d0:	e7b8      	b.n	8021544 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 80215d2:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80215d4:	bf8c      	ite	hi
 80215d6:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80215da:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80215de:	9300      	str	r3, [sp, #0]
 80215e0:	e7bc      	b.n	802155c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80215e2:	4b0b      	ldr	r3, [pc, #44]	; (8021610 <dhcp_bind+0x150>)
 80215e4:	f240 4215 	movw	r2, #1045	; 0x415
 80215e8:	490a      	ldr	r1, [pc, #40]	; (8021614 <dhcp_bind+0x154>)
 80215ea:	480b      	ldr	r0, [pc, #44]	; (8021618 <dhcp_bind+0x158>)
 80215ec:	f004 beb2 	b.w	8026354 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80215f0:	4b07      	ldr	r3, [pc, #28]	; (8021610 <dhcp_bind+0x150>)
 80215f2:	f240 4217 	movw	r2, #1047	; 0x417
 80215f6:	4909      	ldr	r1, [pc, #36]	; (802161c <dhcp_bind+0x15c>)
 80215f8:	4807      	ldr	r0, [pc, #28]	; (8021618 <dhcp_bind+0x158>)
 80215fa:	f004 beab 	b.w	8026354 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 80215fe:	828a      	strh	r2, [r1, #20]
 8021600:	e77c      	b.n	80214fc <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8021602:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8021606:	e78a      	b.n	802151e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8021608:	818b      	strh	r3, [r1, #12]
 802160a:	e79b      	b.n	8021544 <dhcp_bind+0x84>
 802160c:	88888889 	.word	0x88888889
 8021610:	0804679c 	.word	0x0804679c
 8021614:	08046810 	.word	0x08046810
 8021618:	0802b034 	.word	0x0802b034
 802161c:	0804682c 	.word	0x0804682c

08021620 <dhcp_inc_pcb_refcount>:
{
 8021620:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8021622:	4c15      	ldr	r4, [pc, #84]	; (8021678 <dhcp_inc_pcb_refcount+0x58>)
 8021624:	7823      	ldrb	r3, [r4, #0]
 8021626:	b9fb      	cbnz	r3, 8021668 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8021628:	4d14      	ldr	r5, [pc, #80]	; (802167c <dhcp_inc_pcb_refcount+0x5c>)
 802162a:	682b      	ldr	r3, [r5, #0]
 802162c:	b12b      	cbz	r3, 802163a <dhcp_inc_pcb_refcount+0x1a>
 802162e:	4b14      	ldr	r3, [pc, #80]	; (8021680 <dhcp_inc_pcb_refcount+0x60>)
 8021630:	22e5      	movs	r2, #229	; 0xe5
 8021632:	4914      	ldr	r1, [pc, #80]	; (8021684 <dhcp_inc_pcb_refcount+0x64>)
 8021634:	4814      	ldr	r0, [pc, #80]	; (8021688 <dhcp_inc_pcb_refcount+0x68>)
 8021636:	f004 fe8d 	bl	8026354 <iprintf>
    dhcp_pcb = udp_new();
 802163a:	f7ff fec1 	bl	80213c0 <udp_new>
 802163e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8021640:	b1b0      	cbz	r0, 8021670 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021642:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021644:	4911      	ldr	r1, [pc, #68]	; (802168c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021646:	f042 0220 	orr.w	r2, r2, #32
 802164a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 802164c:	2244      	movs	r2, #68	; 0x44
 802164e:	f7ff fc67 	bl	8020f20 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8021652:	2243      	movs	r2, #67	; 0x43
 8021654:	490d      	ldr	r1, [pc, #52]	; (802168c <dhcp_inc_pcb_refcount+0x6c>)
 8021656:	6828      	ldr	r0, [r5, #0]
 8021658:	f7ff fe30 	bl	80212bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 802165c:	2200      	movs	r2, #0
 802165e:	490c      	ldr	r1, [pc, #48]	; (8021690 <dhcp_inc_pcb_refcount+0x70>)
 8021660:	6828      	ldr	r0, [r5, #0]
 8021662:	f7ff fe71 	bl	8021348 <udp_recv>
  dhcp_pcb_refcount++;
 8021666:	7823      	ldrb	r3, [r4, #0]
 8021668:	3301      	adds	r3, #1
  return ERR_OK;
 802166a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 802166c:	7023      	strb	r3, [r4, #0]
}
 802166e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8021670:	f04f 30ff 	mov.w	r0, #4294967295
}
 8021674:	bd38      	pop	{r3, r4, r5, pc}
 8021676:	bf00      	nop
 8021678:	2002e4a4 	.word	0x2002e4a4
 802167c:	2002e4a0 	.word	0x2002e4a0
 8021680:	0804679c 	.word	0x0804679c
 8021684:	08046844 	.word	0x08046844
 8021688:	0802b034 	.word	0x0802b034
 802168c:	08046e50 	.word	0x08046e50
 8021690:	08021f39 	.word	0x08021f39

08021694 <dhcp_dec_pcb_refcount>:
{
 8021694:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021696:	4d0b      	ldr	r5, [pc, #44]	; (80216c4 <dhcp_dec_pcb_refcount+0x30>)
 8021698:	782c      	ldrb	r4, [r5, #0]
 802169a:	b154      	cbz	r4, 80216b2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 802169c:	3c01      	subs	r4, #1
 802169e:	b2e4      	uxtb	r4, r4
 80216a0:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 80216a2:	b104      	cbz	r4, 80216a6 <dhcp_dec_pcb_refcount+0x12>
}
 80216a4:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 80216a6:	4d08      	ldr	r5, [pc, #32]	; (80216c8 <dhcp_dec_pcb_refcount+0x34>)
 80216a8:	6828      	ldr	r0, [r5, #0]
 80216aa:	f7ff fe5f 	bl	802136c <udp_remove>
    dhcp_pcb = NULL;
 80216ae:	602c      	str	r4, [r5, #0]
}
 80216b0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80216b2:	4b06      	ldr	r3, [pc, #24]	; (80216cc <dhcp_dec_pcb_refcount+0x38>)
 80216b4:	22ff      	movs	r2, #255	; 0xff
 80216b6:	4906      	ldr	r1, [pc, #24]	; (80216d0 <dhcp_dec_pcb_refcount+0x3c>)
 80216b8:	4806      	ldr	r0, [pc, #24]	; (80216d4 <dhcp_dec_pcb_refcount+0x40>)
 80216ba:	f004 fe4b 	bl	8026354 <iprintf>
  dhcp_pcb_refcount--;
 80216be:	782c      	ldrb	r4, [r5, #0]
 80216c0:	e7ec      	b.n	802169c <dhcp_dec_pcb_refcount+0x8>
 80216c2:	bf00      	nop
 80216c4:	2002e4a4 	.word	0x2002e4a4
 80216c8:	2002e4a0 	.word	0x2002e4a0
 80216cc:	0804679c 	.word	0x0804679c
 80216d0:	0804686c 	.word	0x0804686c
 80216d4:	0802b034 	.word	0x0802b034

080216d8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80216d8:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80216da:	4d29      	ldr	r5, [pc, #164]	; (8021780 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80216dc:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80216de:	b083      	sub	sp, #12
 80216e0:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80216e2:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80216e4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80216e8:	b112      	cbz	r2, 80216f0 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80216ea:	4b26      	ldr	r3, [pc, #152]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 80216ec:	68db      	ldr	r3, [r3, #12]
 80216ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80216f0:	792b      	ldrb	r3, [r5, #4]
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d041      	beq.n	802177a <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80216f6:	4b23      	ldr	r3, [pc, #140]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 80216f8:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80216fa:	796a      	ldrb	r2, [r5, #5]
 80216fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80216fe:	b312      	cbz	r2, 8021746 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8021700:	4b20      	ldr	r3, [pc, #128]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 8021702:	695b      	ldr	r3, [r3, #20]
 8021704:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021706:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021708:	690a      	ldr	r2, [r1, #16]
 802170a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 802170c:	bb2b      	cbnz	r3, 802175a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 802170e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021710:	79eb      	ldrb	r3, [r5, #7]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d12b      	bne.n	802176e <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021716:	7a2b      	ldrb	r3, [r5, #8]
 8021718:	b19b      	cbz	r3, 8021742 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802171a:	4c1a      	ldr	r4, [pc, #104]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 802171c:	6a20      	ldr	r0, [r4, #32]
 802171e:	f7f8 fd17 	bl	801a150 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8021722:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021724:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021726:	2000      	movs	r0, #0
 8021728:	f7f9 f8b8 	bl	801a89c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 802172c:	7a6b      	ldrb	r3, [r5, #9]
 802172e:	b143      	cbz	r3, 8021742 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021730:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021732:	f7f8 fd0d 	bl	801a150 <lwip_htonl>
 8021736:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8021738:	a901      	add	r1, sp, #4
 802173a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802173c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 802173e:	f7f9 f8ad 	bl	801a89c <dns_setserver>
}
 8021742:	b003      	add	sp, #12
 8021744:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8021746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021748:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802174c:	08db      	lsrs	r3, r3, #3
 802174e:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021750:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021752:	690a      	ldr	r2, [r1, #16]
 8021754:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021756:	2b00      	cmp	r3, #0
 8021758:	d0d9      	beq.n	802170e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 802175a:	4b0a      	ldr	r3, [pc, #40]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 802175c:	6998      	ldr	r0, [r3, #24]
 802175e:	f7f8 fcf7 	bl	801a150 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8021762:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021764:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8021766:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021768:	79eb      	ldrb	r3, [r5, #7]
 802176a:	2b00      	cmp	r3, #0
 802176c:	d0d3      	beq.n	8021716 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 802176e:	4b05      	ldr	r3, [pc, #20]	; (8021784 <dhcp_handle_ack.isra.0+0xac>)
 8021770:	69d8      	ldr	r0, [r3, #28]
 8021772:	f7f8 fced 	bl	801a150 <lwip_htonl>
 8021776:	6260      	str	r0, [r4, #36]	; 0x24
 8021778:	e7cd      	b.n	8021716 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 802177a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802177c:	085b      	lsrs	r3, r3, #1
 802177e:	e7bc      	b.n	80216fa <dhcp_handle_ack.isra.0+0x22>
 8021780:	2002e4a8 	.word	0x2002e4a8
 8021784:	2002e4b4 	.word	0x2002e4b4

08021788 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8021788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 802178c:	4681      	mov	r9, r0
 802178e:	2800      	cmp	r0, #0
 8021790:	f000 8097 	beq.w	80218c2 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021794:	460c      	mov	r4, r1
 8021796:	2900      	cmp	r1, #0
 8021798:	f000 808a 	beq.w	80218b0 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 802179c:	4616      	mov	r6, r2
 802179e:	f44f 719a 	mov.w	r1, #308	; 0x134
 80217a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80217a6:	2036      	movs	r0, #54	; 0x36
 80217a8:	461f      	mov	r7, r3
 80217aa:	f7fa fb37 	bl	801be1c <pbuf_alloc>
  if (p_out == NULL) {
 80217ae:	4605      	mov	r5, r0
 80217b0:	2800      	cmp	r0, #0
 80217b2:	d049      	beq.n	8021848 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80217b4:	8943      	ldrh	r3, [r0, #10]
 80217b6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80217ba:	d371      	bcc.n	80218a0 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80217bc:	2e03      	cmp	r6, #3
 80217be:	d051      	beq.n	8021864 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80217c0:	79a3      	ldrb	r3, [r4, #6]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d043      	beq.n	802184e <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80217c6:	4b43      	ldr	r3, [pc, #268]	; (80218d4 <dhcp_create_msg+0x14c>)
 80217c8:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80217ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80217ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80217d2:	2100      	movs	r1, #0
    dhcp->xid = xid;
 80217d4:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80217d6:	4640      	mov	r0, r8
 80217d8:	f003 fe1e 	bl	8025418 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80217dc:	2301      	movs	r3, #1
 80217de:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80217e2:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 80217e6:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 80217ea:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80217ee:	6820      	ldr	r0, [r4, #0]
 80217f0:	f7f8 fcae 	bl	801a150 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80217f4:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 80217f6:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80217fa:	d12d      	bne.n	8021858 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80217fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021800:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021804:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8021808:	f109 0434 	add.w	r4, r9, #52	; 0x34
 802180c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021810:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021814:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021816:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802181a:	d1f9      	bne.n	8021810 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802181c:	2363      	movs	r3, #99	; 0x63
 802181e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8021822:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021826:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 802182a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 802182e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021830:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8021834:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8021836:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 802183a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802183c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8021840:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8021844:	2303      	movs	r3, #3
 8021846:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8021848:	4628      	mov	r0, r5
 802184a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 802184e:	f004 fe25 	bl	802649c <rand>
 8021852:	4b20      	ldr	r3, [pc, #128]	; (80218d4 <dhcp_create_msg+0x14c>)
 8021854:	6018      	str	r0, [r3, #0]
 8021856:	e7b8      	b.n	80217ca <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021858:	1ff3      	subs	r3, r6, #7
 802185a:	2b01      	cmp	r3, #1
 802185c:	d9ce      	bls.n	80217fc <dhcp_create_msg+0x74>
 802185e:	2e03      	cmp	r6, #3
 8021860:	d1d0      	bne.n	8021804 <dhcp_create_msg+0x7c>
 8021862:	e018      	b.n	8021896 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021864:	7963      	ldrb	r3, [r4, #5]
 8021866:	2b03      	cmp	r3, #3
 8021868:	d0aa      	beq.n	80217c0 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 802186a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802186e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021872:	2100      	movs	r1, #0
 8021874:	4640      	mov	r0, r8
 8021876:	f003 fdcf 	bl	8025418 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 802187a:	2301      	movs	r3, #1
 802187c:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021880:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021884:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021888:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802188c:	6820      	ldr	r0, [r4, #0]
 802188e:	f7f8 fc5f 	bl	801a150 <lwip_htonl>
 8021892:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8021896:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8021898:	3b04      	subs	r3, #4
 802189a:	2b01      	cmp	r3, #1
 802189c:	d8b2      	bhi.n	8021804 <dhcp_create_msg+0x7c>
 802189e:	e7ad      	b.n	80217fc <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80218a0:	4b0d      	ldr	r3, [pc, #52]	; (80218d8 <dhcp_create_msg+0x150>)
 80218a2:	f240 7271 	movw	r2, #1905	; 0x771
 80218a6:	490d      	ldr	r1, [pc, #52]	; (80218dc <dhcp_create_msg+0x154>)
 80218a8:	480d      	ldr	r0, [pc, #52]	; (80218e0 <dhcp_create_msg+0x158>)
 80218aa:	f004 fd53 	bl	8026354 <iprintf>
 80218ae:	e785      	b.n	80217bc <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80218b0:	4b09      	ldr	r3, [pc, #36]	; (80218d8 <dhcp_create_msg+0x150>)
 80218b2:	f240 726a 	movw	r2, #1898	; 0x76a
 80218b6:	490b      	ldr	r1, [pc, #44]	; (80218e4 <dhcp_create_msg+0x15c>)
 80218b8:	4625      	mov	r5, r4
 80218ba:	4809      	ldr	r0, [pc, #36]	; (80218e0 <dhcp_create_msg+0x158>)
 80218bc:	f004 fd4a 	bl	8026354 <iprintf>
 80218c0:	e7c2      	b.n	8021848 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80218c2:	4b05      	ldr	r3, [pc, #20]	; (80218d8 <dhcp_create_msg+0x150>)
 80218c4:	f240 7269 	movw	r2, #1897	; 0x769
 80218c8:	4907      	ldr	r1, [pc, #28]	; (80218e8 <dhcp_create_msg+0x160>)
 80218ca:	464d      	mov	r5, r9
 80218cc:	4804      	ldr	r0, [pc, #16]	; (80218e0 <dhcp_create_msg+0x158>)
 80218ce:	f004 fd41 	bl	8026354 <iprintf>
 80218d2:	e7b9      	b.n	8021848 <dhcp_create_msg+0xc0>
 80218d4:	2002e4dc 	.word	0x2002e4dc
 80218d8:	0804679c 	.word	0x0804679c
 80218dc:	080468d0 	.word	0x080468d0
 80218e0:	0802b034 	.word	0x0802b034
 80218e4:	080468b0 	.word	0x080468b0
 80218e8:	08046890 	.word	0x08046890

080218ec <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 80218ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80218f0:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 80218f4:	b087      	sub	sp, #28
 80218f6:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 80218f8:	f89a 3005 	ldrb.w	r3, [sl, #5]
 80218fc:	2b03      	cmp	r3, #3
 80218fe:	d007      	beq.n	8021910 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8021900:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021902:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8021904:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8021908:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 802190c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021910:	f10d 0316 	add.w	r3, sp, #22
 8021914:	2203      	movs	r2, #3
 8021916:	4651      	mov	r1, sl
 8021918:	4648      	mov	r0, r9
 802191a:	f7ff ff35 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 802191e:	4607      	mov	r7, r0
 8021920:	2800      	cmp	r0, #0
 8021922:	f000 808d 	beq.w	8021a40 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021926:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802192a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802192c:	f104 0804 	add.w	r8, r4, #4
 8021930:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021932:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021934:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021938:	f200 80a3 	bhi.w	8021a82 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 802193c:	2239      	movs	r2, #57	; 0x39
 802193e:	1c63      	adds	r3, r4, #1
 8021940:	fa1f fb85 	uxth.w	fp, r5
 8021944:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021946:	b29b      	uxth	r3, r3
 8021948:	2202      	movs	r2, #2
 802194a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802194c:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021950:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021954:	2b44      	cmp	r3, #68	; 0x44
 8021956:	f200 80ac 	bhi.w	8021ab2 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802195a:	2202      	movs	r2, #2
 802195c:	1ce3      	adds	r3, r4, #3
 802195e:	fa1f f588 	uxth.w	r5, r8
 8021962:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021966:	b29b      	uxth	r3, r3
 8021968:	2240      	movs	r2, #64	; 0x40
 802196a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802196c:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 802196e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021972:	2b44      	cmp	r3, #68	; 0x44
 8021974:	f200 8095 	bhi.w	8021aa2 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8021978:	1d63      	adds	r3, r4, #5
 802197a:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 802197c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 802197e:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021980:	b29b      	uxth	r3, r3
 8021982:	2204      	movs	r2, #4
 8021984:	b2a4      	uxth	r4, r4
 8021986:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021988:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802198c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021990:	f7f8 fbde 	bl	801a150 <lwip_htonl>
 8021994:	4631      	mov	r1, r6
 8021996:	4602      	mov	r2, r0
 8021998:	4620      	mov	r0, r4
 802199a:	f7ff fd55 	bl	8021448 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802199e:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80219a0:	4605      	mov	r5, r0
 80219a2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80219a6:	2b44      	cmp	r3, #68	; 0x44
 80219a8:	9303      	str	r3, [sp, #12]
 80219aa:	d872      	bhi.n	8021a92 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 80219ac:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 80219ae:	2237      	movs	r2, #55	; 0x37
 80219b0:	1c6b      	adds	r3, r5, #1
 80219b2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8021ae8 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 80219b6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 80219b8:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80219ba:	b29b      	uxth	r3, r3
 80219bc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80219be:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80219c0:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 80219c4:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80219c6:	493f      	ldr	r1, [pc, #252]	; (8021ac4 <dhcp_reboot.isra.0+0x1d8>)
 80219c8:	4b3f      	ldr	r3, [pc, #252]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80219ca:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80219ce:	d80c      	bhi.n	80219ea <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 80219d0:	1c62      	adds	r2, r4, #1
 80219d2:	f806 b004 	strb.w	fp, [r6, r4]
 80219d6:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80219d8:	4a3c      	ldr	r2, [pc, #240]	; (8021acc <dhcp_reboot.isra.0+0x1e0>)
 80219da:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80219dc:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80219e0:	d00b      	beq.n	80219fa <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80219e2:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80219e4:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80219e8:	d9f2      	bls.n	80219d0 <dhcp_reboot.isra.0+0xe4>
 80219ea:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80219ee:	4838      	ldr	r0, [pc, #224]	; (8021ad0 <dhcp_reboot.isra.0+0x1e4>)
 80219f0:	f004 fcb0 	bl	8026354 <iprintf>
 80219f4:	4b34      	ldr	r3, [pc, #208]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
 80219f6:	4933      	ldr	r1, [pc, #204]	; (8021ac4 <dhcp_reboot.isra.0+0x1d8>)
 80219f8:	e7ea      	b.n	80219d0 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 80219fa:	1de8      	adds	r0, r5, #7
 80219fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021a00:	22ff      	movs	r2, #255	; 0xff
 8021a02:	b280      	uxth	r0, r0
 8021a04:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021a06:	2843      	cmp	r0, #67	; 0x43
 8021a08:	d808      	bhi.n	8021a1c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021a0a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8021a0e:	4430      	add	r0, r6
 8021a10:	2100      	movs	r1, #0
 8021a12:	b2ad      	uxth	r5, r5
 8021a14:	1c6a      	adds	r2, r5, #1
 8021a16:	f003 fcff 	bl	8025418 <memset>
 8021a1a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021a1c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021a20:	4638      	mov	r0, r7
 8021a22:	b289      	uxth	r1, r1
 8021a24:	f7fa fab4 	bl	801bf90 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021a28:	482a      	ldr	r0, [pc, #168]	; (8021ad4 <dhcp_reboot.isra.0+0x1e8>)
 8021a2a:	2343      	movs	r3, #67	; 0x43
 8021a2c:	4a2a      	ldr	r2, [pc, #168]	; (8021ad8 <dhcp_reboot.isra.0+0x1ec>)
 8021a2e:	6800      	ldr	r0, [r0, #0]
 8021a30:	4639      	mov	r1, r7
 8021a32:	f8cd 9000 	str.w	r9, [sp]
 8021a36:	f7ff fba5 	bl	8021184 <udp_sendto_if>
    pbuf_free(p_out);
 8021a3a:	4638      	mov	r0, r7
 8021a3c:	f7fa fbc0 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021a40:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8021a44:	2bff      	cmp	r3, #255	; 0xff
 8021a46:	d016      	beq.n	8021a76 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8021a48:	3301      	adds	r3, #1
 8021a4a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021a4c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021a4e:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021a52:	d810      	bhi.n	8021a76 <dhcp_reboot.isra.0+0x18a>
 8021a54:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021a58:	4a20      	ldr	r2, [pc, #128]	; (8021adc <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021a5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021a5e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021a60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021a64:	b29b      	uxth	r3, r3
 8021a66:	fba2 2303 	umull	r2, r3, r2, r3
 8021a6a:	095b      	lsrs	r3, r3, #5
 8021a6c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021a70:	b007      	add	sp, #28
 8021a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021a76:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021a78:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021a7c:	b007      	add	sp, #28
 8021a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021a82:	4b11      	ldr	r3, [pc, #68]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
 8021a84:	f240 529a 	movw	r2, #1434	; 0x59a
 8021a88:	4915      	ldr	r1, [pc, #84]	; (8021ae0 <dhcp_reboot.isra.0+0x1f4>)
 8021a8a:	4811      	ldr	r0, [pc, #68]	; (8021ad0 <dhcp_reboot.isra.0+0x1e4>)
 8021a8c:	f004 fc62 	bl	8026354 <iprintf>
 8021a90:	e754      	b.n	802193c <dhcp_reboot.isra.0+0x50>
 8021a92:	4b0d      	ldr	r3, [pc, #52]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
 8021a94:	f240 529a 	movw	r2, #1434	; 0x59a
 8021a98:	4911      	ldr	r1, [pc, #68]	; (8021ae0 <dhcp_reboot.isra.0+0x1f4>)
 8021a9a:	480d      	ldr	r0, [pc, #52]	; (8021ad0 <dhcp_reboot.isra.0+0x1e4>)
 8021a9c:	f004 fc5a 	bl	8026354 <iprintf>
 8021aa0:	e784      	b.n	80219ac <dhcp_reboot.isra.0+0xc0>
 8021aa2:	4b09      	ldr	r3, [pc, #36]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
 8021aa4:	f240 529a 	movw	r2, #1434	; 0x59a
 8021aa8:	490d      	ldr	r1, [pc, #52]	; (8021ae0 <dhcp_reboot.isra.0+0x1f4>)
 8021aaa:	4809      	ldr	r0, [pc, #36]	; (8021ad0 <dhcp_reboot.isra.0+0x1e4>)
 8021aac:	f004 fc52 	bl	8026354 <iprintf>
 8021ab0:	e762      	b.n	8021978 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021ab2:	4b05      	ldr	r3, [pc, #20]	; (8021ac8 <dhcp_reboot.isra.0+0x1dc>)
 8021ab4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021ab8:	490a      	ldr	r1, [pc, #40]	; (8021ae4 <dhcp_reboot.isra.0+0x1f8>)
 8021aba:	4805      	ldr	r0, [pc, #20]	; (8021ad0 <dhcp_reboot.isra.0+0x1e4>)
 8021abc:	f004 fc4a 	bl	8026354 <iprintf>
 8021ac0:	e74b      	b.n	802195a <dhcp_reboot.isra.0+0x6e>
 8021ac2:	bf00      	nop
 8021ac4:	08046990 	.word	0x08046990
 8021ac8:	0804679c 	.word	0x0804679c
 8021acc:	08046b18 	.word	0x08046b18
 8021ad0:	0802b034 	.word	0x0802b034
 8021ad4:	2002e4a0 	.word	0x2002e4a0
 8021ad8:	08046e54 	.word	0x08046e54
 8021adc:	10624dd3 	.word	0x10624dd3
 8021ae0:	08046910 	.word	0x08046910
 8021ae4:	08046954 	.word	0x08046954
 8021ae8:	08046b15 	.word	0x08046b15

08021aec <dhcp_discover>:
{
 8021aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021af0:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021af2:	2300      	movs	r3, #0
{
 8021af4:	b087      	sub	sp, #28
 8021af6:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8021af8:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021afa:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8021afc:	2a06      	cmp	r2, #6
 8021afe:	d003      	beq.n	8021b08 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8021b00:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8021b02:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8021b04:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8021b06:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8021b08:	f10d 0316 	add.w	r3, sp, #22
 8021b0c:	2201      	movs	r2, #1
 8021b0e:	4639      	mov	r1, r7
 8021b10:	4658      	mov	r0, fp
 8021b12:	f7ff fe39 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 8021b16:	4605      	mov	r5, r0
 8021b18:	2800      	cmp	r0, #0
 8021b1a:	f000 8081 	beq.w	8021c20 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021b1e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021b22:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021b24:	f104 0804 	add.w	r8, r4, #4
 8021b28:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021b2c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021b2e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021b32:	f200 809a 	bhi.w	8021c6a <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8021b36:	2239      	movs	r2, #57	; 0x39
 8021b38:	1c63      	adds	r3, r4, #1
 8021b3a:	fa1f f189 	uxth.w	r1, r9
 8021b3e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021b40:	b29b      	uxth	r3, r3
 8021b42:	2202      	movs	r2, #2
 8021b44:	9103      	str	r1, [sp, #12]
 8021b46:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021b48:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021b4a:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021b4e:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021b50:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021b54:	f200 8091 	bhi.w	8021c7a <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021b58:	1ce3      	adds	r3, r4, #3
 8021b5a:	fa1f f988 	uxth.w	r9, r8
 8021b5e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021b62:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021b64:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021b66:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021b68:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021b6c:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021b70:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021b74:	2b44      	cmp	r3, #68	; 0x44
 8021b76:	d870      	bhi.n	8021c5a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8021b78:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021b7c:	2237      	movs	r2, #55	; 0x37
 8021b7e:	1d63      	adds	r3, r4, #5
 8021b80:	f8df a130 	ldr.w	sl, [pc, #304]	; 8021cb4 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8021b84:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8021b88:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021b8c:	b29b      	uxth	r3, r3
 8021b8e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021b90:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021b94:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8021b98:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021b9a:	493c      	ldr	r1, [pc, #240]	; (8021c8c <dhcp_discover+0x1a0>)
 8021b9c:	4b3c      	ldr	r3, [pc, #240]	; (8021c90 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021b9e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021ba2:	d80f      	bhi.n	8021bc4 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8021ba4:	f108 0201 	add.w	r2, r8, #1
 8021ba8:	f806 9008 	strb.w	r9, [r6, r8]
 8021bac:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021bb0:	4a38      	ldr	r2, [pc, #224]	; (8021c94 <dhcp_discover+0x1a8>)
 8021bb2:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021bb4:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021bb8:	d00c      	beq.n	8021bd4 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021bba:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021bbe:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021bc2:	d9ef      	bls.n	8021ba4 <dhcp_discover+0xb8>
 8021bc4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021bc8:	4833      	ldr	r0, [pc, #204]	; (8021c98 <dhcp_discover+0x1ac>)
 8021bca:	f004 fbc3 	bl	8026354 <iprintf>
 8021bce:	4b30      	ldr	r3, [pc, #192]	; (8021c90 <dhcp_discover+0x1a4>)
 8021bd0:	492e      	ldr	r1, [pc, #184]	; (8021c8c <dhcp_discover+0x1a0>)
 8021bd2:	e7e7      	b.n	8021ba4 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8021bd4:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8021bd8:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021bdc:	22ff      	movs	r2, #255	; 0xff
 8021bde:	b280      	uxth	r0, r0
 8021be0:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021be2:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021be4:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021be6:	d808      	bhi.n	8021bfa <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8021be8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8021bec:	4430      	add	r0, r6
 8021bee:	2100      	movs	r1, #0
 8021bf0:	b2a4      	uxth	r4, r4
 8021bf2:	1c62      	adds	r2, r4, #1
 8021bf4:	f003 fc10 	bl	8025418 <memset>
 8021bf8:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021bfa:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021bfe:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021c00:	4c26      	ldr	r4, [pc, #152]	; (8021c9c <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021c02:	b289      	uxth	r1, r1
 8021c04:	f7fa f9c4 	bl	801bf90 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021c08:	4825      	ldr	r0, [pc, #148]	; (8021ca0 <dhcp_discover+0x1b4>)
 8021c0a:	2343      	movs	r3, #67	; 0x43
 8021c0c:	4a25      	ldr	r2, [pc, #148]	; (8021ca4 <dhcp_discover+0x1b8>)
 8021c0e:	6800      	ldr	r0, [r0, #0]
 8021c10:	4629      	mov	r1, r5
 8021c12:	e9cd b400 	strd	fp, r4, [sp]
 8021c16:	f7ff fa01 	bl	802101c <udp_sendto_if_src>
    pbuf_free(p_out);
 8021c1a:	4628      	mov	r0, r5
 8021c1c:	f7fa fad0 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021c20:	79bb      	ldrb	r3, [r7, #6]
 8021c22:	2bff      	cmp	r3, #255	; 0xff
 8021c24:	d013      	beq.n	8021c4e <dhcp_discover+0x162>
    dhcp->tries++;
 8021c26:	3301      	adds	r3, #1
 8021c28:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021c2a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8021c2c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021c2e:	d80e      	bhi.n	8021c4e <dhcp_discover+0x162>
 8021c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021c34:	491c      	ldr	r1, [pc, #112]	; (8021ca8 <dhcp_discover+0x1bc>)
}
 8021c36:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021c38:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021c3a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021c3e:	b29b      	uxth	r3, r3
 8021c40:	fba1 2303 	umull	r2, r3, r1, r3
 8021c44:	095b      	lsrs	r3, r3, #5
 8021c46:	813b      	strh	r3, [r7, #8]
}
 8021c48:	b007      	add	sp, #28
 8021c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021c4e:	2378      	movs	r3, #120	; 0x78
}
 8021c50:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021c52:	813b      	strh	r3, [r7, #8]
}
 8021c54:	b007      	add	sp, #28
 8021c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c5a:	4b0d      	ldr	r3, [pc, #52]	; (8021c90 <dhcp_discover+0x1a4>)
 8021c5c:	f240 529a 	movw	r2, #1434	; 0x59a
 8021c60:	4912      	ldr	r1, [pc, #72]	; (8021cac <dhcp_discover+0x1c0>)
 8021c62:	480d      	ldr	r0, [pc, #52]	; (8021c98 <dhcp_discover+0x1ac>)
 8021c64:	f004 fb76 	bl	8026354 <iprintf>
 8021c68:	e786      	b.n	8021b78 <dhcp_discover+0x8c>
 8021c6a:	4b09      	ldr	r3, [pc, #36]	; (8021c90 <dhcp_discover+0x1a4>)
 8021c6c:	f240 529a 	movw	r2, #1434	; 0x59a
 8021c70:	490e      	ldr	r1, [pc, #56]	; (8021cac <dhcp_discover+0x1c0>)
 8021c72:	4809      	ldr	r0, [pc, #36]	; (8021c98 <dhcp_discover+0x1ac>)
 8021c74:	f004 fb6e 	bl	8026354 <iprintf>
 8021c78:	e75d      	b.n	8021b36 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c7a:	4b05      	ldr	r3, [pc, #20]	; (8021c90 <dhcp_discover+0x1a4>)
 8021c7c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021c80:	490b      	ldr	r1, [pc, #44]	; (8021cb0 <dhcp_discover+0x1c4>)
 8021c82:	4805      	ldr	r0, [pc, #20]	; (8021c98 <dhcp_discover+0x1ac>)
 8021c84:	f004 fb66 	bl	8026354 <iprintf>
 8021c88:	e766      	b.n	8021b58 <dhcp_discover+0x6c>
 8021c8a:	bf00      	nop
 8021c8c:	08046990 	.word	0x08046990
 8021c90:	0804679c 	.word	0x0804679c
 8021c94:	08046b18 	.word	0x08046b18
 8021c98:	0802b034 	.word	0x0802b034
 8021c9c:	08046e50 	.word	0x08046e50
 8021ca0:	2002e4a0 	.word	0x2002e4a0
 8021ca4:	08046e54 	.word	0x08046e54
 8021ca8:	10624dd3 	.word	0x10624dd3
 8021cac:	08046910 	.word	0x08046910
 8021cb0:	08046954 	.word	0x08046954
 8021cb4:	08046b15 	.word	0x08046b15

08021cb8 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8021cb8:	2800      	cmp	r0, #0
 8021cba:	f000 8112 	beq.w	8021ee2 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 8021cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 8021cc2:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8021cc4:	b087      	sub	sp, #28
 8021cc6:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8021cc8:	2e00      	cmp	r6, #0
 8021cca:	f000 8111 	beq.w	8021ef0 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 8021cce:	7973      	ldrb	r3, [r6, #5]
 8021cd0:	2b01      	cmp	r3, #1
 8021cd2:	d004      	beq.n	8021cde <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8021cd4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021cd6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8021cd8:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 8021cda:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8021cdc:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021cde:	f10d 0316 	add.w	r3, sp, #22
 8021ce2:	2203      	movs	r2, #3
 8021ce4:	4631      	mov	r1, r6
 8021ce6:	4658      	mov	r0, fp
 8021ce8:	f7ff fd4e 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 8021cec:	4605      	mov	r5, r0
 8021cee:	2800      	cmp	r0, #0
 8021cf0:	f000 80b4 	beq.w	8021e5c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021cf4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8021cf8:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021cfa:	f107 0804 	add.w	r8, r7, #4
 8021cfe:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d02:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d04:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021d08:	f200 80cb 	bhi.w	8021ea2 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 8021d0c:	2239      	movs	r2, #57	; 0x39
 8021d0e:	1c7b      	adds	r3, r7, #1
 8021d10:	fa1f f189 	uxth.w	r1, r9
 8021d14:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8021d16:	b29b      	uxth	r3, r3
 8021d18:	2202      	movs	r2, #2
 8021d1a:	9103      	str	r1, [sp, #12]
 8021d1c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d1e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021d20:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d24:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d26:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d2a:	f200 80c2 	bhi.w	8021eb2 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021d2e:	1cfb      	adds	r3, r7, #3
 8021d30:	fa1f f988 	uxth.w	r9, r8
 8021d34:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021d38:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021d3a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021d3c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021d3e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d42:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021d46:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d4a:	2b44      	cmp	r3, #68	; 0x44
 8021d4c:	f200 80b9 	bhi.w	8021ec2 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8021d50:	1d7b      	adds	r3, r7, #5
 8021d52:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8021d54:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8021d56:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 8021d5a:	b29b      	uxth	r3, r3
 8021d5c:	2204      	movs	r2, #4
 8021d5e:	b2bf      	uxth	r7, r7
 8021d60:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d62:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021d64:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d68:	f7f8 f9f2 	bl	801a150 <lwip_htonl>
 8021d6c:	4621      	mov	r1, r4
 8021d6e:	4602      	mov	r2, r0
 8021d70:	4638      	mov	r0, r7
 8021d72:	f7ff fb69 	bl	8021448 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d76:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d78:	4607      	mov	r7, r0
 8021d7a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d7e:	2b44      	cmp	r3, #68	; 0x44
 8021d80:	f200 80a7 	bhi.w	8021ed2 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8021d84:	2236      	movs	r2, #54	; 0x36
 8021d86:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8021d88:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 8021d8c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8021d8e:	b29b      	uxth	r3, r3
 8021d90:	2204      	movs	r2, #4
 8021d92:	fa1f f888 	uxth.w	r8, r8
 8021d96:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8021d98:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021d9a:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8021d9e:	f7f8 f9d7 	bl	801a150 <lwip_htonl>
 8021da2:	4621      	mov	r1, r4
 8021da4:	4602      	mov	r2, r0
 8021da6:	4640      	mov	r0, r8
 8021da8:	f7ff fb4e 	bl	8021448 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021dac:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8021dae:	4680      	mov	r8, r0
 8021db0:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021db4:	2b44      	cmp	r3, #68	; 0x44
 8021db6:	9303      	str	r3, [sp, #12]
 8021db8:	d86b      	bhi.n	8021e92 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 8021dba:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 8021dbe:	2237      	movs	r2, #55	; 0x37
 8021dc0:	f108 0301 	add.w	r3, r8, #1
 8021dc4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8021f34 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8021dc8:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 8021dca:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 8021dce:	b29b      	uxth	r3, r3
 8021dd0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dd2:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021dd4:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8021dd8:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dda:	494a      	ldr	r1, [pc, #296]	; (8021f04 <dhcp_select.isra.0+0x24c>)
 8021ddc:	4b4a      	ldr	r3, [pc, #296]	; (8021f08 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021dde:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021de2:	d80c      	bhi.n	8021dfe <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8021de4:	1c7a      	adds	r2, r7, #1
 8021de6:	f804 a007 	strb.w	sl, [r4, r7]
 8021dea:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021dec:	4a47      	ldr	r2, [pc, #284]	; (8021f0c <dhcp_select.isra.0+0x254>)
 8021dee:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021df0:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021df4:	d00b      	beq.n	8021e0e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021df6:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021df8:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dfc:	d9f2      	bls.n	8021de4 <dhcp_select.isra.0+0x12c>
 8021dfe:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021e02:	4843      	ldr	r0, [pc, #268]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021e04:	f004 faa6 	bl	8026354 <iprintf>
 8021e08:	4b3f      	ldr	r3, [pc, #252]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021e0a:	493e      	ldr	r1, [pc, #248]	; (8021f04 <dhcp_select.isra.0+0x24c>)
 8021e0c:	e7ea      	b.n	8021de4 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 8021e0e:	f108 0007 	add.w	r0, r8, #7
 8021e12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021e16:	22ff      	movs	r2, #255	; 0xff
 8021e18:	b280      	uxth	r0, r0
 8021e1a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021e1c:	2843      	cmp	r0, #67	; 0x43
 8021e1e:	d80a      	bhi.n	8021e36 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8021e20:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8021e24:	4420      	add	r0, r4
 8021e26:	2100      	movs	r1, #0
 8021e28:	fa1f f888 	uxth.w	r8, r8
 8021e2c:	f108 0201 	add.w	r2, r8, #1
 8021e30:	f003 faf2 	bl	8025418 <memset>
 8021e34:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021e36:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021e3a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021e3c:	4c35      	ldr	r4, [pc, #212]	; (8021f14 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021e3e:	b289      	uxth	r1, r1
 8021e40:	f7fa f8a6 	bl	801bf90 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021e44:	4834      	ldr	r0, [pc, #208]	; (8021f18 <dhcp_select.isra.0+0x260>)
 8021e46:	2343      	movs	r3, #67	; 0x43
 8021e48:	4a34      	ldr	r2, [pc, #208]	; (8021f1c <dhcp_select.isra.0+0x264>)
 8021e4a:	6800      	ldr	r0, [r0, #0]
 8021e4c:	4629      	mov	r1, r5
 8021e4e:	e9cd b400 	strd	fp, r4, [sp]
 8021e52:	f7ff f8e3 	bl	802101c <udp_sendto_if_src>
    pbuf_free(p_out);
 8021e56:	4628      	mov	r0, r5
 8021e58:	f7fa f9b2 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021e5c:	79b3      	ldrb	r3, [r6, #6]
 8021e5e:	2bff      	cmp	r3, #255	; 0xff
 8021e60:	d012      	beq.n	8021e88 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8021e62:	3301      	adds	r3, #1
 8021e64:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021e66:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8021e68:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021e6a:	d80d      	bhi.n	8021e88 <dhcp_select.isra.0+0x1d0>
 8021e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e70:	492b      	ldr	r1, [pc, #172]	; (8021f20 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8021e72:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e74:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021e78:	b29b      	uxth	r3, r3
 8021e7a:	fba1 2303 	umull	r2, r3, r1, r3
 8021e7e:	095b      	lsrs	r3, r3, #5
 8021e80:	8133      	strh	r3, [r6, #8]
}
 8021e82:	b007      	add	sp, #28
 8021e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021e88:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e8a:	8133      	strh	r3, [r6, #8]
}
 8021e8c:	b007      	add	sp, #28
 8021e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021e92:	4b1d      	ldr	r3, [pc, #116]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021e94:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e98:	4922      	ldr	r1, [pc, #136]	; (8021f24 <dhcp_select.isra.0+0x26c>)
 8021e9a:	481d      	ldr	r0, [pc, #116]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021e9c:	f004 fa5a 	bl	8026354 <iprintf>
 8021ea0:	e78b      	b.n	8021dba <dhcp_select.isra.0+0x102>
 8021ea2:	4b19      	ldr	r3, [pc, #100]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021ea4:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ea8:	491e      	ldr	r1, [pc, #120]	; (8021f24 <dhcp_select.isra.0+0x26c>)
 8021eaa:	4819      	ldr	r0, [pc, #100]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021eac:	f004 fa52 	bl	8026354 <iprintf>
 8021eb0:	e72c      	b.n	8021d0c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021eb2:	4b15      	ldr	r3, [pc, #84]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021eb4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021eb8:	491b      	ldr	r1, [pc, #108]	; (8021f28 <dhcp_select.isra.0+0x270>)
 8021eba:	4815      	ldr	r0, [pc, #84]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021ebc:	f004 fa4a 	bl	8026354 <iprintf>
 8021ec0:	e735      	b.n	8021d2e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021ec2:	4b11      	ldr	r3, [pc, #68]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021ec4:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ec8:	4916      	ldr	r1, [pc, #88]	; (8021f24 <dhcp_select.isra.0+0x26c>)
 8021eca:	4811      	ldr	r0, [pc, #68]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021ecc:	f004 fa42 	bl	8026354 <iprintf>
 8021ed0:	e73e      	b.n	8021d50 <dhcp_select.isra.0+0x98>
 8021ed2:	4b0d      	ldr	r3, [pc, #52]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021ed4:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ed8:	4912      	ldr	r1, [pc, #72]	; (8021f24 <dhcp_select.isra.0+0x26c>)
 8021eda:	480d      	ldr	r0, [pc, #52]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021edc:	f004 fa3a 	bl	8026354 <iprintf>
 8021ee0:	e750      	b.n	8021d84 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8021ee2:	4b09      	ldr	r3, [pc, #36]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021ee4:	f240 1277 	movw	r2, #375	; 0x177
 8021ee8:	4910      	ldr	r1, [pc, #64]	; (8021f2c <dhcp_select.isra.0+0x274>)
 8021eea:	4809      	ldr	r0, [pc, #36]	; (8021f10 <dhcp_select.isra.0+0x258>)
 8021eec:	f004 ba32 	b.w	8026354 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8021ef0:	4b05      	ldr	r3, [pc, #20]	; (8021f08 <dhcp_select.isra.0+0x250>)
 8021ef2:	f240 1279 	movw	r2, #377	; 0x179
 8021ef6:	490e      	ldr	r1, [pc, #56]	; (8021f30 <dhcp_select.isra.0+0x278>)
 8021ef8:	4805      	ldr	r0, [pc, #20]	; (8021f10 <dhcp_select.isra.0+0x258>)
}
 8021efa:	b007      	add	sp, #28
 8021efc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8021f00:	f004 ba28 	b.w	8026354 <iprintf>
 8021f04:	08046990 	.word	0x08046990
 8021f08:	0804679c 	.word	0x0804679c
 8021f0c:	08046b18 	.word	0x08046b18
 8021f10:	0802b034 	.word	0x0802b034
 8021f14:	08046e50 	.word	0x08046e50
 8021f18:	2002e4a0 	.word	0x2002e4a0
 8021f1c:	08046e54 	.word	0x08046e54
 8021f20:	10624dd3 	.word	0x10624dd3
 8021f24:	08046910 	.word	0x08046910
 8021f28:	08046954 	.word	0x08046954
 8021f2c:	080469c8 	.word	0x080469c8
 8021f30:	080469e4 	.word	0x080469e4
 8021f34:	08046b15 	.word	0x08046b15

08021f38 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8021f38:	4ba5      	ldr	r3, [pc, #660]	; (80221d0 <dhcp_recv+0x298>)
{
 8021f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8021f3e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8021f42:	b08b      	sub	sp, #44	; 0x2c
 8021f44:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021f46:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8021f4a:	f1b9 0f00 	cmp.w	r9, #0
 8021f4e:	d04b      	beq.n	8021fe8 <dhcp_recv+0xb0>
 8021f50:	f899 3004 	ldrb.w	r3, [r9, #4]
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d047      	beq.n	8021fe8 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8021f58:	8953      	ldrh	r3, [r2, #10]
 8021f5a:	2b2b      	cmp	r3, #43	; 0x2b
 8021f5c:	d944      	bls.n	8021fe8 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8021f5e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8021f60:	782b      	ldrb	r3, [r5, #0]
 8021f62:	2b02      	cmp	r3, #2
 8021f64:	d140      	bne.n	8021fe8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021f66:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8021f6a:	b186      	cbz	r6, 8021f8e <dhcp_recv+0x56>
 8021f6c:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8021f70:	f105 021c 	add.w	r2, r5, #28
 8021f74:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8021f76:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021f7a:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8021f7c:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021f80:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8021f82:	4284      	cmp	r4, r0
 8021f84:	d130      	bne.n	8021fe8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021f86:	2b06      	cmp	r3, #6
 8021f88:	d001      	beq.n	8021f8e <dhcp_recv+0x56>
 8021f8a:	42b3      	cmp	r3, r6
 8021f8c:	d3f3      	bcc.n	8021f76 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8021f8e:	6868      	ldr	r0, [r5, #4]
 8021f90:	f7f8 f8de 	bl	801a150 <lwip_htonl>
 8021f94:	f8d9 3000 	ldr.w	r3, [r9]
 8021f98:	4298      	cmp	r0, r3
 8021f9a:	d125      	bne.n	8021fe8 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8021f9c:	4b8d      	ldr	r3, [pc, #564]	; (80221d4 <dhcp_recv+0x29c>)
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	605a      	str	r2, [r3, #4]
 8021fa2:	811a      	strh	r2, [r3, #8]
 8021fa4:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8021fa6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8021faa:	2b2b      	cmp	r3, #43	; 0x2b
 8021fac:	d91c      	bls.n	8021fe8 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 8021fae:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8021fb2:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8021fb4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8021fb8:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 8021fbc:	4693      	mov	fp, r2
 8021fbe:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8021fc2:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8021fc6:	e000      	b.n	8021fca <dhcp_recv+0x92>
 8021fc8:	896b      	ldrh	r3, [r5, #10]
 8021fca:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 8021fcc:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8021fd0:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021fd4:	d80e      	bhi.n	8021ff4 <dhcp_recv+0xbc>
    q = q->next;
 8021fd6:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8021fd8:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8021fdc:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021fe0:	2d00      	cmp	r5, #0
 8021fe2:	d1f1      	bne.n	8021fc8 <dhcp_recv+0x90>
 8021fe4:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8021fe8:	4658      	mov	r0, fp
}
 8021fea:	b00b      	add	sp, #44	; 0x2c
 8021fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8021ff0:	f7fa b8e6 	b.w	801c1c0 <pbuf_free>
  options = (u8_t *)q->payload;
 8021ff4:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021ff6:	45d8      	cmp	r8, fp
 8021ff8:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 8021ffc:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021ffe:	f080 8140 	bcs.w	8022282 <dhcp_recv+0x34a>
 8022002:	9c02      	ldr	r4, [sp, #8]
 8022004:	9b01      	ldr	r3, [sp, #4]
 8022006:	5d1a      	ldrb	r2, [r3, r4]
 8022008:	2aff      	cmp	r2, #255	; 0xff
 802200a:	f000 813a 	beq.w	8022282 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 802200e:	1ca7      	adds	r7, r4, #2
 8022010:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8022012:	42bc      	cmp	r4, r7
 8022014:	d8e6      	bhi.n	8021fe4 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8022016:	1c61      	adds	r1, r4, #1
 8022018:	896b      	ldrh	r3, [r5, #10]
 802201a:	4299      	cmp	r1, r3
 802201c:	f280 8129 	bge.w	8022272 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8022020:	9801      	ldr	r0, [sp, #4]
 8022022:	4420      	add	r0, r4
 8022024:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8022026:	2a3b      	cmp	r2, #59	; 0x3b
 8022028:	d83e      	bhi.n	80220a8 <dhcp_recv+0x170>
 802202a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802202e:	0040      	.short	0x0040
 8022030:	003d0053 	.word	0x003d0053
 8022034:	003d00b4 	.word	0x003d00b4
 8022038:	009f003d 	.word	0x009f003d
 802203c:	003d003d 	.word	0x003d003d
 8022040:	003d003d 	.word	0x003d003d
 8022044:	003d003d 	.word	0x003d003d
 8022048:	003d003d 	.word	0x003d003d
 802204c:	003d003d 	.word	0x003d003d
 8022050:	003d003d 	.word	0x003d003d
 8022054:	003d003d 	.word	0x003d003d
 8022058:	003d003d 	.word	0x003d003d
 802205c:	003d003d 	.word	0x003d003d
 8022060:	003d003d 	.word	0x003d003d
 8022064:	003d003d 	.word	0x003d003d
 8022068:	003d003d 	.word	0x003d003d
 802206c:	003d003d 	.word	0x003d003d
 8022070:	003d003d 	.word	0x003d003d
 8022074:	003d003d 	.word	0x003d003d
 8022078:	003d003d 	.word	0x003d003d
 802207c:	003d003d 	.word	0x003d003d
 8022080:	003d003d 	.word	0x003d003d
 8022084:	003d003d 	.word	0x003d003d
 8022088:	003d003d 	.word	0x003d003d
 802208c:	003d003d 	.word	0x003d003d
 8022090:	003d003d 	.word	0x003d003d
 8022094:	00f80115 	.word	0x00f80115
 8022098:	00df0109 	.word	0x00df0109
 802209c:	003d003d 	.word	0x003d003d
 80220a0:	00ec003d 	.word	0x00ec003d
 80220a4:	00c3      	.short	0x00c3
 80220a6:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 80220a8:	2a00      	cmp	r2, #0
 80220aa:	f040 82a2 	bne.w	80225f2 <dhcp_recv+0x6ba>
      offset++;
 80220ae:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 80220b0:	429c      	cmp	r4, r3
 80220b2:	f0c0 80e3 	bcc.w	802227c <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 80220b6:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80220b8:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 80220bc:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80220be:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 80220c2:	455c      	cmp	r4, fp
 80220c4:	d28e      	bcs.n	8021fe4 <dhcp_recv+0xac>
        q = q->next;
 80220c6:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80220c8:	2d00      	cmp	r5, #0
 80220ca:	f000 81e1 	beq.w	8022490 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 80220ce:	686b      	ldr	r3, [r5, #4]
 80220d0:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80220d2:	e797      	b.n	8022004 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80220d4:	2e04      	cmp	r6, #4
 80220d6:	f040 81b5 	bne.w	8022444 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 80220da:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80220de:	429c      	cmp	r4, r3
 80220e0:	dc80      	bgt.n	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80220e2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80220e4:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 80220e8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 80220ea:	2300      	movs	r3, #0
 80220ec:	9405      	str	r4, [sp, #20]
 80220ee:	9309      	str	r3, [sp, #36]	; 0x24
 80220f0:	4b38      	ldr	r3, [pc, #224]	; (80221d4 <dhcp_recv+0x29c>)
 80220f2:	eb03 0908 	add.w	r9, r3, r8
 80220f6:	4b38      	ldr	r3, [pc, #224]	; (80221d8 <dhcp_recv+0x2a0>)
 80220f8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80220fc:	e02b      	b.n	8022156 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80220fe:	f899 3000 	ldrb.w	r3, [r9]
 8022102:	2b00      	cmp	r3, #0
 8022104:	f040 81a8 	bne.w	8022458 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8022108:	2e04      	cmp	r6, #4
 802210a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802210c:	463b      	mov	r3, r7
 802210e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8022110:	bf28      	it	cs
 8022112:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022114:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8022116:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022118:	4622      	mov	r2, r4
 802211a:	f7fa f8f5 	bl	801c308 <pbuf_copy_partial>
 802211e:	4284      	cmp	r4, r0
 8022120:	f47f af60 	bne.w	8021fe4 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8022124:	2e04      	cmp	r6, #4
 8022126:	f240 819a 	bls.w	802245e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802212a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 802212e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8022132:	f040 81a3 	bne.w	802247c <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8022136:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022138:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802213a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 802213c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022140:	f7f8 f806 	bl	801a150 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8022144:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8022146:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022148:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 802214c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 802214e:	429f      	cmp	r7, r3
            goto decode_next;
 8022150:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8022152:	f63f af47 	bhi.w	8021fe4 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8022156:	f1b8 0f09 	cmp.w	r8, #9
 802215a:	d9d0      	bls.n	80220fe <dhcp_recv+0x1c6>
 802215c:	4b1f      	ldr	r3, [pc, #124]	; (80221dc <dhcp_recv+0x2a4>)
 802215e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8022162:	491f      	ldr	r1, [pc, #124]	; (80221e0 <dhcp_recv+0x2a8>)
 8022164:	481f      	ldr	r0, [pc, #124]	; (80221e4 <dhcp_recv+0x2ac>)
 8022166:	f004 f8f5 	bl	8026354 <iprintf>
 802216a:	e7c8      	b.n	80220fe <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802216c:	07b2      	lsls	r2, r6, #30
 802216e:	f040 81ae 	bne.w	80224ce <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8022172:	2e08      	cmp	r6, #8
 8022174:	4632      	mov	r2, r6
 8022176:	bf28      	it	cs
 8022178:	2208      	movcs	r2, #8
 802217a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802217c:	42b2      	cmp	r2, r6
 802217e:	f240 8241 	bls.w	8022604 <dhcp_recv+0x6cc>
 8022182:	4b16      	ldr	r3, [pc, #88]	; (80221dc <dhcp_recv+0x2a4>)
 8022184:	f240 623c 	movw	r2, #1596	; 0x63c
 8022188:	4917      	ldr	r1, [pc, #92]	; (80221e8 <dhcp_recv+0x2b0>)
 802218a:	4816      	ldr	r0, [pc, #88]	; (80221e4 <dhcp_recv+0x2ac>)
 802218c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022190:	f004 f8e0 	bl	8026354 <iprintf>
 8022194:	e728      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022196:	2e03      	cmp	r6, #3
 8022198:	f240 814a 	bls.w	8022430 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 802219c:	4434      	add	r4, r6
 802219e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80221a2:	429c      	cmp	r4, r3
 80221a4:	f73f af1e 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80221a8:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80221aa:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 80221ae:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 80221b0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80221b2:	e79a      	b.n	80220ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80221b4:	2e04      	cmp	r6, #4
 80221b6:	f040 8131 	bne.w	802241c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 80221ba:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80221be:	429c      	cmp	r4, r3
 80221c0:	f73f af10 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80221c4:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 80221c6:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 80221ca:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80221cc:	e78d      	b.n	80220ea <dhcp_recv+0x1b2>
 80221ce:	bf00      	nop
 80221d0:	2001f298 	.word	0x2001f298
 80221d4:	2002e4a8 	.word	0x2002e4a8
 80221d8:	2002e4b4 	.word	0x2002e4b4
 80221dc:	0804679c 	.word	0x0804679c
 80221e0:	08046a54 	.word	0x08046a54
 80221e4:	0802b034 	.word	0x0802b034
 80221e8:	08046a0c 	.word	0x08046a0c
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80221ec:	2e04      	cmp	r6, #4
 80221ee:	f040 80ed 	bne.w	80223cc <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 80221f2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80221f6:	429c      	cmp	r4, r3
 80221f8:	f73f aef4 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80221fc:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80221fe:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8022202:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022204:	e771      	b.n	80220ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022206:	2e04      	cmp	r6, #4
 8022208:	f040 80d6 	bne.w	80223b8 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 802220c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022210:	429c      	cmp	r4, r3
 8022212:	f73f aee7 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022216:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8022218:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802221a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802221c:	e765      	b.n	80220ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802221e:	2e01      	cmp	r6, #1
 8022220:	f040 80e8 	bne.w	80223f4 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8022224:	9b02      	ldr	r3, [sp, #8]
 8022226:	2bf0      	cmp	r3, #240	; 0xf0
 8022228:	f040 8147 	bne.w	80224ba <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 802222c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8022230:	4299      	cmp	r1, r3
 8022232:	f43f aed7 	beq.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022236:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8022238:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 802223c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802223e:	e754      	b.n	80220ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022240:	2e01      	cmp	r6, #1
 8022242:	f040 80cd 	bne.w	80223e0 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8022246:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802224a:	4299      	cmp	r1, r3
 802224c:	f43f aeca 	beq.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022250:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8022252:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8022254:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022256:	e748      	b.n	80220ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022258:	2e04      	cmp	r6, #4
 802225a:	f040 80d5 	bne.w	8022408 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 802225e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022262:	429c      	cmp	r4, r3
 8022264:	f73f aebe 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022268:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802226a:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 802226e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022270:	e73b      	b.n	80220ea <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8022272:	6828      	ldr	r0, [r5, #0]
 8022274:	b310      	cbz	r0, 80222bc <dhcp_recv+0x384>
 8022276:	6840      	ldr	r0, [r0, #4]
 8022278:	7806      	ldrb	r6, [r0, #0]
 802227a:	e6d4      	b.n	8022026 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802227c:	455c      	cmp	r4, fp
 802227e:	f4ff aec1 	bcc.w	8022004 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8022282:	4bb7      	ldr	r3, [pc, #732]	; (8022560 <dhcp_recv+0x628>)
 8022284:	781b      	ldrb	r3, [r3, #0]
 8022286:	b163      	cbz	r3, 80222a2 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022288:	2300      	movs	r3, #0
 802228a:	4ab5      	ldr	r2, [pc, #724]	; (8022560 <dhcp_recv+0x628>)
 802228c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802228e:	4bb5      	ldr	r3, [pc, #724]	; (8022564 <dhcp_recv+0x62c>)
 8022290:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8022292:	2b01      	cmp	r3, #1
 8022294:	f000 8108 	beq.w	80224a8 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8022298:	2b02      	cmp	r3, #2
 802229a:	d006      	beq.n	80222aa <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 802229c:	2b03      	cmp	r3, #3
 802229e:	f000 8101 	beq.w	80224a4 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 80222a2:	9b04      	ldr	r3, [sp, #16]
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	f000 811c 	beq.w	80224e2 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 80222aa:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80222ac:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 80222b0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 80222b2:	232c      	movs	r3, #44	; 0x2c
 80222b4:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80222b6:	9b03      	ldr	r3, [sp, #12]
 80222b8:	895b      	ldrh	r3, [r3, #10]
 80222ba:	e682      	b.n	8021fc2 <dhcp_recv+0x8a>
    switch (op) {
 80222bc:	1e50      	subs	r0, r2, #1
 80222be:	283a      	cmp	r0, #58	; 0x3a
 80222c0:	f63f aef1 	bhi.w	80220a6 <dhcp_recv+0x16e>
 80222c4:	a601      	add	r6, pc, #4	; (adr r6, 80222cc <dhcp_recv+0x394>)
 80222c6:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 80222ca:	bf00      	nop
 80222cc:	08022445 	.word	0x08022445
 80222d0:	080220a7 	.word	0x080220a7
 80222d4:	08022431 	.word	0x08022431
 80222d8:	080220a7 	.word	0x080220a7
 80222dc:	080220a7 	.word	0x080220a7
 80222e0:	080220a7 	.word	0x080220a7
 80222e4:	080220a7 	.word	0x080220a7
 80222e8:	080220a7 	.word	0x080220a7
 80222ec:	080220a7 	.word	0x080220a7
 80222f0:	080220a7 	.word	0x080220a7
 80222f4:	080220a7 	.word	0x080220a7
 80222f8:	080220a7 	.word	0x080220a7
 80222fc:	080220a7 	.word	0x080220a7
 8022300:	080220a7 	.word	0x080220a7
 8022304:	080220a7 	.word	0x080220a7
 8022308:	080220a7 	.word	0x080220a7
 802230c:	080220a7 	.word	0x080220a7
 8022310:	080220a7 	.word	0x080220a7
 8022314:	080220a7 	.word	0x080220a7
 8022318:	080220a7 	.word	0x080220a7
 802231c:	080220a7 	.word	0x080220a7
 8022320:	080220a7 	.word	0x080220a7
 8022324:	080220a7 	.word	0x080220a7
 8022328:	080220a7 	.word	0x080220a7
 802232c:	080220a7 	.word	0x080220a7
 8022330:	080220a7 	.word	0x080220a7
 8022334:	080220a7 	.word	0x080220a7
 8022338:	080220a7 	.word	0x080220a7
 802233c:	080220a7 	.word	0x080220a7
 8022340:	080220a7 	.word	0x080220a7
 8022344:	080220a7 	.word	0x080220a7
 8022348:	080220a7 	.word	0x080220a7
 802234c:	080220a7 	.word	0x080220a7
 8022350:	080220a7 	.word	0x080220a7
 8022354:	080220a7 	.word	0x080220a7
 8022358:	080220a7 	.word	0x080220a7
 802235c:	080220a7 	.word	0x080220a7
 8022360:	080220a7 	.word	0x080220a7
 8022364:	080220a7 	.word	0x080220a7
 8022368:	080220a7 	.word	0x080220a7
 802236c:	080220a7 	.word	0x080220a7
 8022370:	080220a7 	.word	0x080220a7
 8022374:	080220a7 	.word	0x080220a7
 8022378:	080220a7 	.word	0x080220a7
 802237c:	080220a7 	.word	0x080220a7
 8022380:	080220a7 	.word	0x080220a7
 8022384:	080220a7 	.word	0x080220a7
 8022388:	080220a7 	.word	0x080220a7
 802238c:	080220a7 	.word	0x080220a7
 8022390:	080220a7 	.word	0x080220a7
 8022394:	08022409 	.word	0x08022409
 8022398:	080223f5 	.word	0x080223f5
 802239c:	080223e1 	.word	0x080223e1
 80223a0:	080223cd 	.word	0x080223cd
 80223a4:	080220a7 	.word	0x080220a7
 80223a8:	080220a7 	.word	0x080220a7
 80223ac:	080220a7 	.word	0x080220a7
 80223b0:	080223b9 	.word	0x080223b9
 80223b4:	0802241d 	.word	0x0802241d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80223b8:	4b6b      	ldr	r3, [pc, #428]	; (8022568 <dhcp_recv+0x630>)
 80223ba:	f240 625d 	movw	r2, #1629	; 0x65d
 80223be:	496b      	ldr	r1, [pc, #428]	; (802256c <dhcp_recv+0x634>)
 80223c0:	486b      	ldr	r0, [pc, #428]	; (8022570 <dhcp_recv+0x638>)
 80223c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80223c6:	f003 ffc5 	bl	8026354 <iprintf>
 80223ca:	e60d      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80223cc:	4b66      	ldr	r3, [pc, #408]	; (8022568 <dhcp_recv+0x630>)
 80223ce:	f240 6259 	movw	r2, #1625	; 0x659
 80223d2:	4966      	ldr	r1, [pc, #408]	; (802256c <dhcp_recv+0x634>)
 80223d4:	4866      	ldr	r0, [pc, #408]	; (8022570 <dhcp_recv+0x638>)
 80223d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80223da:	f003 ffbb 	bl	8026354 <iprintf>
 80223de:	e603      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80223e0:	4b61      	ldr	r3, [pc, #388]	; (8022568 <dhcp_recv+0x630>)
 80223e2:	f240 6255 	movw	r2, #1621	; 0x655
 80223e6:	4963      	ldr	r1, [pc, #396]	; (8022574 <dhcp_recv+0x63c>)
 80223e8:	4861      	ldr	r0, [pc, #388]	; (8022570 <dhcp_recv+0x638>)
 80223ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80223ee:	f003 ffb1 	bl	8026354 <iprintf>
 80223f2:	e5f9      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80223f4:	4b5c      	ldr	r3, [pc, #368]	; (8022568 <dhcp_recv+0x630>)
 80223f6:	f240 624f 	movw	r2, #1615	; 0x64f
 80223fa:	495e      	ldr	r1, [pc, #376]	; (8022574 <dhcp_recv+0x63c>)
 80223fc:	485c      	ldr	r0, [pc, #368]	; (8022570 <dhcp_recv+0x638>)
 80223fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022402:	f003 ffa7 	bl	8026354 <iprintf>
 8022406:	e5ef      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022408:	4b57      	ldr	r3, [pc, #348]	; (8022568 <dhcp_recv+0x630>)
 802240a:	f240 6241 	movw	r2, #1601	; 0x641
 802240e:	4957      	ldr	r1, [pc, #348]	; (802256c <dhcp_recv+0x634>)
 8022410:	4857      	ldr	r0, [pc, #348]	; (8022570 <dhcp_recv+0x638>)
 8022412:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022416:	f003 ff9d 	bl	8026354 <iprintf>
 802241a:	e5e5      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802241c:	4b52      	ldr	r3, [pc, #328]	; (8022568 <dhcp_recv+0x630>)
 802241e:	f240 6261 	movw	r2, #1633	; 0x661
 8022422:	4952      	ldr	r1, [pc, #328]	; (802256c <dhcp_recv+0x634>)
 8022424:	4852      	ldr	r0, [pc, #328]	; (8022570 <dhcp_recv+0x638>)
 8022426:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802242a:	f003 ff93 	bl	8026354 <iprintf>
 802242e:	e5db      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022430:	4b4d      	ldr	r3, [pc, #308]	; (8022568 <dhcp_recv+0x630>)
 8022432:	f240 6233 	movw	r2, #1587	; 0x633
 8022436:	4950      	ldr	r1, [pc, #320]	; (8022578 <dhcp_recv+0x640>)
 8022438:	484d      	ldr	r0, [pc, #308]	; (8022570 <dhcp_recv+0x638>)
 802243a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802243e:	f003 ff89 	bl	8026354 <iprintf>
 8022442:	e5d1      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022444:	4b48      	ldr	r3, [pc, #288]	; (8022568 <dhcp_recv+0x630>)
 8022446:	f240 622e 	movw	r2, #1582	; 0x62e
 802244a:	4948      	ldr	r1, [pc, #288]	; (802256c <dhcp_recv+0x634>)
 802244c:	4848      	ldr	r0, [pc, #288]	; (8022570 <dhcp_recv+0x638>)
 802244e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022452:	f003 ff7f 	bl	8026354 <iprintf>
 8022456:	e5c7      	b.n	8021fe8 <dhcp_recv+0xb0>
 8022458:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802245a:	896b      	ldrh	r3, [r5, #10]
 802245c:	e628      	b.n	80220b0 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 802245e:	9c05      	ldr	r4, [sp, #20]
 8022460:	d027      	beq.n	80224b2 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8022462:	2e01      	cmp	r6, #1
 8022464:	f040 80bb 	bne.w	80225de <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8022468:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 802246c:	4b3d      	ldr	r3, [pc, #244]	; (8022564 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 802246e:	4a3c      	ldr	r2, [pc, #240]	; (8022560 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8022470:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8022474:	2301      	movs	r3, #1
 8022476:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802247a:	e7ee      	b.n	802245a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802247c:	4b3a      	ldr	r3, [pc, #232]	; (8022568 <dhcp_recv+0x630>)
 802247e:	f240 6281 	movw	r2, #1665	; 0x681
 8022482:	493e      	ldr	r1, [pc, #248]	; (802257c <dhcp_recv+0x644>)
 8022484:	483a      	ldr	r0, [pc, #232]	; (8022570 <dhcp_recv+0x638>)
 8022486:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802248a:	f003 ff63 	bl	8026354 <iprintf>
 802248e:	e5ab      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022490:	4b35      	ldr	r3, [pc, #212]	; (8022568 <dhcp_recv+0x630>)
 8022492:	f240 629d 	movw	r2, #1693	; 0x69d
 8022496:	493a      	ldr	r1, [pc, #232]	; (8022580 <dhcp_recv+0x648>)
 8022498:	4835      	ldr	r0, [pc, #212]	; (8022570 <dhcp_recv+0x638>)
 802249a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802249e:	f003 ff59 	bl	8026354 <iprintf>
 80224a2:	e5a1      	b.n	8021fe8 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 80224a4:	2301      	movs	r3, #1
 80224a6:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 80224a8:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80224aa:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80224ae:	9302      	str	r3, [sp, #8]
 80224b0:	e701      	b.n	80222b6 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 80224b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224b4:	f7f7 fe4c 	bl	801a150 <lwip_htonl>
 80224b8:	e7d8      	b.n	802246c <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80224ba:	4b2b      	ldr	r3, [pc, #172]	; (8022568 <dhcp_recv+0x630>)
 80224bc:	f240 6251 	movw	r2, #1617	; 0x651
 80224c0:	4930      	ldr	r1, [pc, #192]	; (8022584 <dhcp_recv+0x64c>)
 80224c2:	482b      	ldr	r0, [pc, #172]	; (8022570 <dhcp_recv+0x638>)
 80224c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80224c8:	f003 ff44 	bl	8026354 <iprintf>
 80224cc:	e58c      	b.n	8021fe8 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80224ce:	4b26      	ldr	r3, [pc, #152]	; (8022568 <dhcp_recv+0x630>)
 80224d0:	f240 6239 	movw	r2, #1593	; 0x639
 80224d4:	492c      	ldr	r1, [pc, #176]	; (8022588 <dhcp_recv+0x650>)
 80224d6:	4826      	ldr	r0, [pc, #152]	; (8022570 <dhcp_recv+0x638>)
 80224d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80224dc:	f003 ff3a 	bl	8026354 <iprintf>
 80224e0:	e582      	b.n	8021fe8 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80224e2:	4b1f      	ldr	r3, [pc, #124]	; (8022560 <dhcp_recv+0x628>)
 80224e4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80224e8:	785b      	ldrb	r3, [r3, #1]
 80224ea:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	f43f ad7a 	beq.w	8021fe8 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80224f4:	4a1b      	ldr	r2, [pc, #108]	; (8022564 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 80224f6:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80224fa:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80224fc:	2b05      	cmp	r3, #5
 80224fe:	d01d      	beq.n	802253c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8022500:	2b06      	cmp	r3, #6
 8022502:	d043      	beq.n	802258c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8022504:	2b02      	cmp	r3, #2
 8022506:	f47f ad6f 	bne.w	8021fe8 <dhcp_recv+0xb0>
 802250a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802250e:	2b06      	cmp	r3, #6
 8022510:	f47f ad6a 	bne.w	8021fe8 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8022514:	4b12      	ldr	r3, [pc, #72]	; (8022560 <dhcp_recv+0x628>)
 8022516:	789b      	ldrb	r3, [r3, #2]
 8022518:	2b00      	cmp	r3, #0
 802251a:	f43f ad65 	beq.w	8021fe8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802251e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8022522:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022524:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8022526:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022528:	f7f7 fe12 	bl	801a150 <lwip_htonl>
 802252c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802252e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022530:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8022532:	6923      	ldr	r3, [r4, #16]
 8022534:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8022536:	f7ff fbbf 	bl	8021cb8 <dhcp_select.isra.0>
 802253a:	e555      	b.n	8021fe8 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802253c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022540:	2b01      	cmp	r3, #1
 8022542:	d03f      	beq.n	80225c4 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022544:	3b03      	subs	r3, #3
 8022546:	2b02      	cmp	r3, #2
 8022548:	f63f ad4e 	bhi.w	8021fe8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 802254c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8022550:	4621      	mov	r1, r4
 8022552:	f7ff f8c1 	bl	80216d8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8022556:	4650      	mov	r0, sl
 8022558:	f7fe ffb2 	bl	80214c0 <dhcp_bind>
 802255c:	e544      	b.n	8021fe8 <dhcp_recv+0xb0>
 802255e:	bf00      	nop
 8022560:	2002e4a8 	.word	0x2002e4a8
 8022564:	2002e4b4 	.word	0x2002e4b4
 8022568:	0804679c 	.word	0x0804679c
 802256c:	08046a00 	.word	0x08046a00
 8022570:	0802b034 	.word	0x0802b034
 8022574:	08046a30 	.word	0x08046a30
 8022578:	08046a0c 	.word	0x08046a0c
 802257c:	08046a68 	.word	0x08046a68
 8022580:	08046a94 	.word	0x08046a94
 8022584:	08046a3c 	.word	0x08046a3c
 8022588:	08046a20 	.word	0x08046a20
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802258c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022590:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022592:	2a02      	cmp	r2, #2
 8022594:	d902      	bls.n	802259c <dhcp_recv+0x664>
 8022596:	2b01      	cmp	r3, #1
 8022598:	f47f ad26 	bne.w	8021fe8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802259c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 80225a0:	795a      	ldrb	r2, [r3, #5]
 80225a2:	2a0c      	cmp	r2, #12
 80225a4:	d004      	beq.n	80225b0 <dhcp_recv+0x678>
    dhcp->tries = 0;
 80225a6:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80225a8:	210c      	movs	r1, #12
    dhcp->tries = 0;
 80225aa:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 80225ac:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 80225ae:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80225b0:	4b1c      	ldr	r3, [pc, #112]	; (8022624 <dhcp_recv+0x6ec>)
 80225b2:	4650      	mov	r0, sl
 80225b4:	461a      	mov	r2, r3
 80225b6:	4619      	mov	r1, r3
 80225b8:	f7f9 f968 	bl	801b88c <netif_set_addr>
  dhcp_discover(netif);
 80225bc:	4650      	mov	r0, sl
 80225be:	f7ff fa95 	bl	8021aec <dhcp_discover>
}
 80225c2:	e511      	b.n	8021fe8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80225c4:	4621      	mov	r1, r4
 80225c6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80225ca:	f7ff f885 	bl	80216d8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80225ce:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 80225d2:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80225d4:	0719      	lsls	r1, r3, #28
 80225d6:	d5bf      	bpl.n	8022558 <dhcp_recv+0x620>
        dhcp_check(netif);
 80225d8:	f7fe ff5a 	bl	8021490 <dhcp_check>
 80225dc:	e504      	b.n	8021fe8 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80225de:	4b12      	ldr	r3, [pc, #72]	; (8022628 <dhcp_recv+0x6f0>)
 80225e0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80225e4:	4911      	ldr	r1, [pc, #68]	; (802262c <dhcp_recv+0x6f4>)
 80225e6:	4812      	ldr	r0, [pc, #72]	; (8022630 <dhcp_recv+0x6f8>)
 80225e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80225ec:	f003 feb2 	bl	8026354 <iprintf>
 80225f0:	e4fa      	b.n	8021fe8 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 80225f2:	4434      	add	r4, r6
 80225f4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80225f8:	4294      	cmp	r4, r2
 80225fa:	f73f acf3 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225fe:	19bc      	adds	r4, r7, r6
 8022600:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022602:	e555      	b.n	80220b0 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8022604:	4434      	add	r4, r6
 8022606:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802260a:	428c      	cmp	r4, r1
 802260c:	f73f acea 	bgt.w	8021fe4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022610:	19bc      	adds	r4, r7, r6
 8022612:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022614:	2e00      	cmp	r6, #0
 8022616:	f43f ad4b 	beq.w	80220b0 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802261a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 802261c:	f04f 0808 	mov.w	r8, #8
 8022620:	e563      	b.n	80220ea <dhcp_recv+0x1b2>
 8022622:	bf00      	nop
 8022624:	08046e50 	.word	0x08046e50
 8022628:	0804679c 	.word	0x0804679c
 802262c:	08046a80 	.word	0x08046a80
 8022630:	0802b034 	.word	0x0802b034

08022634 <dhcp_network_changed>:
{
 8022634:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022636:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8022638:	b135      	cbz	r5, 8022648 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 802263a:	796b      	ldrb	r3, [r5, #5]
 802263c:	4604      	mov	r4, r0
 802263e:	2b05      	cmp	r3, #5
 8022640:	d803      	bhi.n	802264a <dhcp_network_changed+0x16>
 8022642:	2b02      	cmp	r3, #2
 8022644:	d813      	bhi.n	802266e <dhcp_network_changed+0x3a>
 8022646:	b95b      	cbnz	r3, 8022660 <dhcp_network_changed+0x2c>
}
 8022648:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 802264a:	2b0a      	cmp	r3, #10
 802264c:	d00f      	beq.n	802266e <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 802264e:	2b0c      	cmp	r3, #12
 8022650:	d906      	bls.n	8022660 <dhcp_network_changed+0x2c>
 8022652:	4b0a      	ldr	r3, [pc, #40]	; (802267c <dhcp_network_changed+0x48>)
 8022654:	f240 326d 	movw	r2, #877	; 0x36d
 8022658:	4909      	ldr	r1, [pc, #36]	; (8022680 <dhcp_network_changed+0x4c>)
 802265a:	480a      	ldr	r0, [pc, #40]	; (8022684 <dhcp_network_changed+0x50>)
 802265c:	f003 fe7a 	bl	8026354 <iprintf>
      dhcp->tries = 0;
 8022660:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8022662:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022664:	71ab      	strb	r3, [r5, #6]
}
 8022666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 802266a:	f7ff ba3f 	b.w	8021aec <dhcp_discover>
      dhcp->tries = 0;
 802266e:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8022670:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022672:	71ab      	strb	r3, [r5, #6]
}
 8022674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8022678:	f7ff b938 	b.w	80218ec <dhcp_reboot.isra.0>
 802267c:	0804679c 	.word	0x0804679c
 8022680:	08046adc 	.word	0x08046adc
 8022684:	0802b034 	.word	0x0802b034

08022688 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022688:	2800      	cmp	r0, #0
 802268a:	d066      	beq.n	802275a <dhcp_arp_reply+0xd2>
{
 802268c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8022690:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8022692:	b085      	sub	sp, #20
 8022694:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8022696:	b115      	cbz	r5, 802269e <dhcp_arp_reply+0x16>
 8022698:	796b      	ldrb	r3, [r5, #5]
 802269a:	2b08      	cmp	r3, #8
 802269c:	d002      	beq.n	80226a4 <dhcp_arp_reply+0x1c>
}
 802269e:	b005      	add	sp, #20
 80226a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80226a4:	680a      	ldr	r2, [r1, #0]
 80226a6:	69eb      	ldr	r3, [r5, #28]
 80226a8:	429a      	cmp	r2, r3
 80226aa:	d1f8      	bne.n	802269e <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 80226ac:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80226ae:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80226b0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 80226b2:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 80226b4:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80226b6:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 80226ba:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80226bc:	2204      	movs	r2, #4
 80226be:	f7ff f863 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 80226c2:	4606      	mov	r6, r0
 80226c4:	2800      	cmp	r0, #0
 80226c6:	d040      	beq.n	802274a <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80226c8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80226cc:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80226ce:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80226d2:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80226d4:	2b44      	cmp	r3, #68	; 0x44
 80226d6:	d847      	bhi.n	8022768 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 80226d8:	2232      	movs	r2, #50	; 0x32
 80226da:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 80226de:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 80226e2:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 80226e6:	b29b      	uxth	r3, r3
 80226e8:	2204      	movs	r2, #4
 80226ea:	fa1f f888 	uxth.w	r8, r8
 80226ee:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80226f0:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80226f2:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80226f6:	f7f7 fd2b 	bl	801a150 <lwip_htonl>
 80226fa:	4639      	mov	r1, r7
 80226fc:	4602      	mov	r2, r0
 80226fe:	4640      	mov	r0, r8
 8022700:	f7fe fea2 	bl	8021448 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022704:	1c41      	adds	r1, r0, #1
 8022706:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022708:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 802270c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802270e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022710:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022712:	2943      	cmp	r1, #67	; 0x43
 8022714:	d807      	bhi.n	8022726 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8022716:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802271a:	1878      	adds	r0, r7, r1
 802271c:	2100      	movs	r1, #0
 802271e:	b292      	uxth	r2, r2
 8022720:	f002 fe7a 	bl	8025418 <memset>
 8022724:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022726:	31f0      	adds	r1, #240	; 0xf0
 8022728:	4630      	mov	r0, r6
 802272a:	b289      	uxth	r1, r1
 802272c:	f7f9 fc30 	bl	801bf90 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022730:	4911      	ldr	r1, [pc, #68]	; (8022778 <dhcp_arp_reply+0xf0>)
 8022732:	4a12      	ldr	r2, [pc, #72]	; (802277c <dhcp_arp_reply+0xf4>)
 8022734:	2343      	movs	r3, #67	; 0x43
 8022736:	9400      	str	r4, [sp, #0]
 8022738:	6808      	ldr	r0, [r1, #0]
 802273a:	4631      	mov	r1, r6
 802273c:	9201      	str	r2, [sp, #4]
 802273e:	4a10      	ldr	r2, [pc, #64]	; (8022780 <dhcp_arp_reply+0xf8>)
 8022740:	f7fe fc6c 	bl	802101c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022744:	4630      	mov	r0, r6
 8022746:	f7f9 fd3b 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 802274a:	79ab      	ldrb	r3, [r5, #6]
 802274c:	2bff      	cmp	r3, #255	; 0xff
 802274e:	d001      	beq.n	8022754 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8022750:	3301      	adds	r3, #1
 8022752:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022754:	2314      	movs	r3, #20
 8022756:	812b      	strh	r3, [r5, #8]
  return result;
 8022758:	e7a1      	b.n	802269e <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802275a:	4b0a      	ldr	r3, [pc, #40]	; (8022784 <dhcp_arp_reply+0xfc>)
 802275c:	f240 328b 	movw	r2, #907	; 0x38b
 8022760:	4909      	ldr	r1, [pc, #36]	; (8022788 <dhcp_arp_reply+0x100>)
 8022762:	480a      	ldr	r0, [pc, #40]	; (802278c <dhcp_arp_reply+0x104>)
 8022764:	f003 bdf6 	b.w	8026354 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022768:	4b06      	ldr	r3, [pc, #24]	; (8022784 <dhcp_arp_reply+0xfc>)
 802276a:	f240 529a 	movw	r2, #1434	; 0x59a
 802276e:	4908      	ldr	r1, [pc, #32]	; (8022790 <dhcp_arp_reply+0x108>)
 8022770:	4806      	ldr	r0, [pc, #24]	; (802278c <dhcp_arp_reply+0x104>)
 8022772:	f003 fdef 	bl	8026354 <iprintf>
 8022776:	e7af      	b.n	80226d8 <dhcp_arp_reply+0x50>
 8022778:	2002e4a0 	.word	0x2002e4a0
 802277c:	08046e50 	.word	0x08046e50
 8022780:	08046e54 	.word	0x08046e54
 8022784:	0804679c 	.word	0x0804679c
 8022788:	0802e22c 	.word	0x0802e22c
 802278c:	0802b034 	.word	0x0802b034
 8022790:	08046910 	.word	0x08046910

08022794 <dhcp_renew>:
{
 8022794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022798:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 802279a:	b087      	sub	sp, #28
 802279c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 802279e:	797b      	ldrb	r3, [r7, #5]
 80227a0:	2b05      	cmp	r3, #5
 80227a2:	d004      	beq.n	80227ae <dhcp_renew+0x1a>
    dhcp->tries = 0;
 80227a4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80227a6:	2205      	movs	r2, #5
    dhcp->tries = 0;
 80227a8:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 80227aa:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 80227ac:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80227ae:	f10d 0316 	add.w	r3, sp, #22
 80227b2:	2203      	movs	r2, #3
 80227b4:	4639      	mov	r1, r7
 80227b6:	4658      	mov	r0, fp
 80227b8:	f7fe ffe6 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 80227bc:	4605      	mov	r5, r0
 80227be:	2800      	cmp	r0, #0
 80227c0:	f000 80b9 	beq.w	8022936 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80227c4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80227c8:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80227ca:	f104 0804 	add.w	r8, r4, #4
 80227ce:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80227d2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80227d4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80227d8:	f200 8095 	bhi.w	8022906 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 80227dc:	2239      	movs	r2, #57	; 0x39
 80227de:	1c63      	adds	r3, r4, #1
 80227e0:	fa1f f189 	uxth.w	r1, r9
 80227e4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80227e6:	b29b      	uxth	r3, r3
 80227e8:	2202      	movs	r2, #2
 80227ea:	9103      	str	r1, [sp, #12]
 80227ec:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80227ee:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80227f0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80227f4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80227f6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80227fa:	f200 8094 	bhi.w	8022926 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80227fe:	1ce3      	adds	r3, r4, #3
 8022800:	fa1f f988 	uxth.w	r9, r8
 8022804:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022808:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802280a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802280c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802280e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022812:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022816:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802281a:	2b44      	cmp	r3, #68	; 0x44
 802281c:	d87b      	bhi.n	8022916 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 802281e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8022822:	2237      	movs	r2, #55	; 0x37
 8022824:	1d63      	adds	r3, r4, #5
 8022826:	f8df a134 	ldr.w	sl, [pc, #308]	; 802295c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 802282a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 802282e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8022832:	b29b      	uxth	r3, r3
 8022834:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022836:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802283a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 802283e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022840:	493e      	ldr	r1, [pc, #248]	; (802293c <dhcp_renew+0x1a8>)
 8022842:	4b3f      	ldr	r3, [pc, #252]	; (8022940 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022844:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022848:	d80f      	bhi.n	802286a <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 802284a:	f108 0201 	add.w	r2, r8, #1
 802284e:	f806 9008 	strb.w	r9, [r6, r8]
 8022852:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022856:	4a3b      	ldr	r2, [pc, #236]	; (8022944 <dhcp_renew+0x1b0>)
 8022858:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802285a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802285e:	d00c      	beq.n	802287a <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022860:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022864:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022868:	d9ef      	bls.n	802284a <dhcp_renew+0xb6>
 802286a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802286e:	4836      	ldr	r0, [pc, #216]	; (8022948 <dhcp_renew+0x1b4>)
 8022870:	f003 fd70 	bl	8026354 <iprintf>
 8022874:	4b32      	ldr	r3, [pc, #200]	; (8022940 <dhcp_renew+0x1ac>)
 8022876:	4931      	ldr	r1, [pc, #196]	; (802293c <dhcp_renew+0x1a8>)
 8022878:	e7e7      	b.n	802284a <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 802287a:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 802287e:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8022882:	22ff      	movs	r2, #255	; 0xff
 8022884:	b280      	uxth	r0, r0
 8022886:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022888:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 802288a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802288c:	d808      	bhi.n	80228a0 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 802288e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8022892:	4430      	add	r0, r6
 8022894:	2100      	movs	r1, #0
 8022896:	b2a4      	uxth	r4, r4
 8022898:	1c62      	adds	r2, r4, #1
 802289a:	f002 fdbd 	bl	8025418 <memset>
 802289e:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80228a0:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80228a4:	4628      	mov	r0, r5
 80228a6:	b289      	uxth	r1, r1
 80228a8:	f7f9 fb72 	bl	801bf90 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80228ac:	4827      	ldr	r0, [pc, #156]	; (802294c <dhcp_renew+0x1b8>)
 80228ae:	2343      	movs	r3, #67	; 0x43
 80228b0:	f107 0218 	add.w	r2, r7, #24
 80228b4:	6800      	ldr	r0, [r0, #0]
 80228b6:	4629      	mov	r1, r5
 80228b8:	f8cd b000 	str.w	fp, [sp]
 80228bc:	f7fe fc62 	bl	8021184 <udp_sendto_if>
 80228c0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80228c2:	4628      	mov	r0, r5
 80228c4:	f7f9 fc7c 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 80228c8:	79bb      	ldrb	r3, [r7, #6]
 80228ca:	2bff      	cmp	r3, #255	; 0xff
 80228cc:	d015      	beq.n	80228fa <dhcp_renew+0x166>
    dhcp->tries++;
 80228ce:	3301      	adds	r3, #1
 80228d0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80228d2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80228d4:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80228d6:	d810      	bhi.n	80228fa <dhcp_renew+0x166>
 80228d8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80228dc:	4a1c      	ldr	r2, [pc, #112]	; (8022950 <dhcp_renew+0x1bc>)
}
 80228de:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80228e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80228e4:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80228e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80228ea:	b29b      	uxth	r3, r3
 80228ec:	fba2 2303 	umull	r2, r3, r2, r3
 80228f0:	095b      	lsrs	r3, r3, #5
 80228f2:	813b      	strh	r3, [r7, #8]
}
 80228f4:	b007      	add	sp, #28
 80228f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 80228fa:	2328      	movs	r3, #40	; 0x28
}
 80228fc:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80228fe:	813b      	strh	r3, [r7, #8]
}
 8022900:	b007      	add	sp, #28
 8022902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022906:	4b0e      	ldr	r3, [pc, #56]	; (8022940 <dhcp_renew+0x1ac>)
 8022908:	f240 529a 	movw	r2, #1434	; 0x59a
 802290c:	4911      	ldr	r1, [pc, #68]	; (8022954 <dhcp_renew+0x1c0>)
 802290e:	480e      	ldr	r0, [pc, #56]	; (8022948 <dhcp_renew+0x1b4>)
 8022910:	f003 fd20 	bl	8026354 <iprintf>
 8022914:	e762      	b.n	80227dc <dhcp_renew+0x48>
 8022916:	4b0a      	ldr	r3, [pc, #40]	; (8022940 <dhcp_renew+0x1ac>)
 8022918:	f240 529a 	movw	r2, #1434	; 0x59a
 802291c:	490d      	ldr	r1, [pc, #52]	; (8022954 <dhcp_renew+0x1c0>)
 802291e:	480a      	ldr	r0, [pc, #40]	; (8022948 <dhcp_renew+0x1b4>)
 8022920:	f003 fd18 	bl	8026354 <iprintf>
 8022924:	e77b      	b.n	802281e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022926:	4b06      	ldr	r3, [pc, #24]	; (8022940 <dhcp_renew+0x1ac>)
 8022928:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802292c:	490a      	ldr	r1, [pc, #40]	; (8022958 <dhcp_renew+0x1c4>)
 802292e:	4806      	ldr	r0, [pc, #24]	; (8022948 <dhcp_renew+0x1b4>)
 8022930:	f003 fd10 	bl	8026354 <iprintf>
 8022934:	e763      	b.n	80227fe <dhcp_renew+0x6a>
    result = ERR_MEM;
 8022936:	f04f 34ff 	mov.w	r4, #4294967295
 802293a:	e7c5      	b.n	80228c8 <dhcp_renew+0x134>
 802293c:	08046990 	.word	0x08046990
 8022940:	0804679c 	.word	0x0804679c
 8022944:	08046b18 	.word	0x08046b18
 8022948:	0802b034 	.word	0x0802b034
 802294c:	2002e4a0 	.word	0x2002e4a0
 8022950:	10624dd3 	.word	0x10624dd3
 8022954:	08046910 	.word	0x08046910
 8022958:	08046954 	.word	0x08046954
 802295c:	08046b15 	.word	0x08046b15

08022960 <dhcp_release_and_stop>:
{
 8022960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022964:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8022966:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8022968:	2c00      	cmp	r4, #0
 802296a:	d06c      	beq.n	8022a46 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 802296c:	7962      	ldrb	r2, [r4, #5]
 802296e:	2a00      	cmp	r2, #0
 8022970:	d069      	beq.n	8022a46 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022972:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022974:	2300      	movs	r3, #0
 8022976:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022978:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802297a:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 802297c:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802297e:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022980:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022982:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8022984:	81e3      	strh	r3, [r4, #14]
 8022986:	6123      	str	r3, [r4, #16]
 8022988:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 802298a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802298e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022992:	d901      	bls.n	8022998 <dhcp_release_and_stop+0x38>
 8022994:	2a0a      	cmp	r2, #10
 8022996:	d148      	bne.n	8022a2a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8022998:	f10d 030a 	add.w	r3, sp, #10
 802299c:	2207      	movs	r2, #7
 802299e:	4621      	mov	r1, r4
 80229a0:	4628      	mov	r0, r5
 80229a2:	f7fe fef1 	bl	8021788 <dhcp_create_msg>
    if (p_out != NULL) {
 80229a6:	4606      	mov	r6, r0
 80229a8:	2800      	cmp	r0, #0
 80229aa:	d03e      	beq.n	8022a2a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80229ac:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80229b0:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80229b2:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80229b6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80229b8:	2b44      	cmp	r3, #68	; 0x44
 80229ba:	d84e      	bhi.n	8022a5a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 80229bc:	f108 0301 	add.w	r3, r8, #1
 80229c0:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 80229c2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 80229c4:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 80229c8:	2204      	movs	r2, #4
 80229ca:	f108 0802 	add.w	r8, r8, #2
 80229ce:	54fa      	strb	r2, [r7, r3]
 80229d0:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80229d4:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80229d6:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80229da:	f7f7 fbb9 	bl	801a150 <lwip_htonl>
 80229de:	4639      	mov	r1, r7
 80229e0:	4602      	mov	r2, r0
 80229e2:	4640      	mov	r0, r8
 80229e4:	f7fe fd30 	bl	8021448 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 80229e8:	1c43      	adds	r3, r0, #1
 80229ea:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80229ec:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 80229f0:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80229f2:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 80229f4:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80229f6:	2b43      	cmp	r3, #67	; 0x43
 80229f8:	d807      	bhi.n	8022a0a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 80229fa:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 80229fe:	18f8      	adds	r0, r7, r3
 8022a00:	2100      	movs	r1, #0
 8022a02:	b292      	uxth	r2, r2
 8022a04:	f002 fd08 	bl	8025418 <memset>
 8022a08:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022a0a:	33f0      	adds	r3, #240	; 0xf0
 8022a0c:	4630      	mov	r0, r6
 8022a0e:	b299      	uxth	r1, r3
 8022a10:	f7f9 fabe 	bl	801bf90 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022a14:	4a15      	ldr	r2, [pc, #84]	; (8022a6c <dhcp_release_and_stop+0x10c>)
 8022a16:	9500      	str	r5, [sp, #0]
 8022a18:	2343      	movs	r3, #67	; 0x43
 8022a1a:	6810      	ldr	r0, [r2, #0]
 8022a1c:	4631      	mov	r1, r6
 8022a1e:	aa03      	add	r2, sp, #12
 8022a20:	f7fe fbb0 	bl	8021184 <udp_sendto_if>
      pbuf_free(p_out);
 8022a24:	4630      	mov	r0, r6
 8022a26:	f7f9 fbcb 	bl	801c1c0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022a2a:	4b11      	ldr	r3, [pc, #68]	; (8022a70 <dhcp_release_and_stop+0x110>)
 8022a2c:	4628      	mov	r0, r5
 8022a2e:	461a      	mov	r2, r3
 8022a30:	4619      	mov	r1, r3
 8022a32:	f7f8 ff2b 	bl	801b88c <netif_set_addr>
  if (new_state != dhcp->state) {
 8022a36:	7963      	ldrb	r3, [r4, #5]
 8022a38:	b11b      	cbz	r3, 8022a42 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8022a3a:	2300      	movs	r3, #0
 8022a3c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8022a3e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8022a40:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8022a42:	7923      	ldrb	r3, [r4, #4]
 8022a44:	b913      	cbnz	r3, 8022a4c <dhcp_release_and_stop+0xec>
}
 8022a46:	b004      	add	sp, #16
 8022a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022a4c:	f7fe fe22 	bl	8021694 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8022a50:	2300      	movs	r3, #0
 8022a52:	7123      	strb	r3, [r4, #4]
}
 8022a54:	b004      	add	sp, #16
 8022a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022a5a:	4b06      	ldr	r3, [pc, #24]	; (8022a74 <dhcp_release_and_stop+0x114>)
 8022a5c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022a60:	4905      	ldr	r1, [pc, #20]	; (8022a78 <dhcp_release_and_stop+0x118>)
 8022a62:	4806      	ldr	r0, [pc, #24]	; (8022a7c <dhcp_release_and_stop+0x11c>)
 8022a64:	f003 fc76 	bl	8026354 <iprintf>
 8022a68:	e7a8      	b.n	80229bc <dhcp_release_and_stop+0x5c>
 8022a6a:	bf00      	nop
 8022a6c:	2002e4a0 	.word	0x2002e4a0
 8022a70:	08046e50 	.word	0x08046e50
 8022a74:	0804679c 	.word	0x0804679c
 8022a78:	08046910 	.word	0x08046910
 8022a7c:	0802b034 	.word	0x0802b034

08022a80 <dhcp_start>:
{
 8022a80:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022a82:	2800      	cmp	r0, #0
 8022a84:	d046      	beq.n	8022b14 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022a86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8022a8a:	4604      	mov	r4, r0
 8022a8c:	07da      	lsls	r2, r3, #31
 8022a8e:	d537      	bpl.n	8022b00 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022a90:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8022a92:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022a94:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8022a98:	d32f      	bcc.n	8022afa <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8022a9a:	b33d      	cbz	r5, 8022aec <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8022a9c:	792b      	ldrb	r3, [r5, #4]
 8022a9e:	bb13      	cbnz	r3, 8022ae6 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8022aa0:	2234      	movs	r2, #52	; 0x34
 8022aa2:	2100      	movs	r1, #0
 8022aa4:	4628      	mov	r0, r5
 8022aa6:	f002 fcb7 	bl	8025418 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8022aaa:	f7fe fdb9 	bl	8021620 <dhcp_inc_pcb_refcount>
 8022aae:	4606      	mov	r6, r0
 8022ab0:	bb18      	cbnz	r0, 8022afa <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8022ab2:	2301      	movs	r3, #1
 8022ab4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8022ab6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8022aba:	075b      	lsls	r3, r3, #29
 8022abc:	d408      	bmi.n	8022ad0 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8022abe:	796b      	ldrb	r3, [r5, #5]
 8022ac0:	2b02      	cmp	r3, #2
 8022ac2:	d003      	beq.n	8022acc <dhcp_start+0x4c>
    dhcp->state = new_state;
 8022ac4:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8022ac6:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8022ac8:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8022aca:	716b      	strb	r3, [r5, #5]
}
 8022acc:	4630      	mov	r0, r6
 8022ace:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8022ad0:	4620      	mov	r0, r4
 8022ad2:	f7ff f80b 	bl	8021aec <dhcp_discover>
  if (result != ERR_OK) {
 8022ad6:	2800      	cmp	r0, #0
 8022ad8:	d0f8      	beq.n	8022acc <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8022ada:	4620      	mov	r0, r4
    return ERR_MEM;
 8022adc:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8022ae0:	f7ff ff3e 	bl	8022960 <dhcp_release_and_stop>
    return ERR_MEM;
 8022ae4:	e7f2      	b.n	8022acc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022ae6:	f7fe fdd5 	bl	8021694 <dhcp_dec_pcb_refcount>
 8022aea:	e7d9      	b.n	8022aa0 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022aec:	2034      	movs	r0, #52	; 0x34
 8022aee:	f7f8 fc77 	bl	801b3e0 <mem_malloc>
    if (dhcp == NULL) {
 8022af2:	4605      	mov	r5, r0
 8022af4:	b108      	cbz	r0, 8022afa <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8022af6:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8022af8:	e7d2      	b.n	8022aa0 <dhcp_start+0x20>
    return ERR_MEM;
 8022afa:	f04f 36ff 	mov.w	r6, #4294967295
 8022afe:	e7e5      	b.n	8022acc <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022b00:	4b09      	ldr	r3, [pc, #36]	; (8022b28 <dhcp_start+0xa8>)
 8022b02:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8022b06:	4909      	ldr	r1, [pc, #36]	; (8022b2c <dhcp_start+0xac>)
 8022b08:	f06f 060f 	mvn.w	r6, #15
 8022b0c:	4808      	ldr	r0, [pc, #32]	; (8022b30 <dhcp_start+0xb0>)
 8022b0e:	f003 fc21 	bl	8026354 <iprintf>
 8022b12:	e7db      	b.n	8022acc <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022b14:	4b04      	ldr	r3, [pc, #16]	; (8022b28 <dhcp_start+0xa8>)
 8022b16:	f240 22e7 	movw	r2, #743	; 0x2e7
 8022b1a:	4906      	ldr	r1, [pc, #24]	; (8022b34 <dhcp_start+0xb4>)
 8022b1c:	f06f 060f 	mvn.w	r6, #15
 8022b20:	4803      	ldr	r0, [pc, #12]	; (8022b30 <dhcp_start+0xb0>)
 8022b22:	f003 fc17 	bl	8026354 <iprintf>
 8022b26:	e7d1      	b.n	8022acc <dhcp_start+0x4c>
 8022b28:	0804679c 	.word	0x0804679c
 8022b2c:	08046af0 	.word	0x08046af0
 8022b30:	0802b034 	.word	0x0802b034
 8022b34:	0802e22c 	.word	0x0802e22c

08022b38 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8022b38:	4b8a      	ldr	r3, [pc, #552]	; (8022d64 <dhcp_coarse_tmr+0x22c>)
{
 8022b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8022b3e:	681d      	ldr	r5, [r3, #0]
{
 8022b40:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8022b42:	b1dd      	cbz	r5, 8022b7c <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022b44:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022b46:	b1b4      	cbz	r4, 8022b76 <dhcp_coarse_tmr+0x3e>
 8022b48:	7963      	ldrb	r3, [r4, #5]
 8022b4a:	b1a3      	cbz	r3, 8022b76 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8022b4c:	8aa1      	ldrh	r1, [r4, #20]
 8022b4e:	b129      	cbz	r1, 8022b5c <dhcp_coarse_tmr+0x24>
 8022b50:	8a62      	ldrh	r2, [r4, #18]
 8022b52:	3201      	adds	r2, #1
 8022b54:	b292      	uxth	r2, r2
 8022b56:	4291      	cmp	r1, r2
 8022b58:	8262      	strh	r2, [r4, #18]
 8022b5a:	d012      	beq.n	8022b82 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8022b5c:	8a22      	ldrh	r2, [r4, #16]
 8022b5e:	b11a      	cbz	r2, 8022b68 <dhcp_coarse_tmr+0x30>
 8022b60:	1e51      	subs	r1, r2, #1
 8022b62:	2a01      	cmp	r2, #1
 8022b64:	8221      	strh	r1, [r4, #16]
 8022b66:	d013      	beq.n	8022b90 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8022b68:	89e2      	ldrh	r2, [r4, #14]
 8022b6a:	b122      	cbz	r2, 8022b76 <dhcp_coarse_tmr+0x3e>
 8022b6c:	1e51      	subs	r1, r2, #1
 8022b6e:	2a01      	cmp	r2, #1
 8022b70:	81e1      	strh	r1, [r4, #14]
 8022b72:	f000 8087 	beq.w	8022c84 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8022b76:	682d      	ldr	r5, [r5, #0]
 8022b78:	2d00      	cmp	r5, #0
 8022b7a:	d1e3      	bne.n	8022b44 <dhcp_coarse_tmr+0xc>
}
 8022b7c:	b007      	add	sp, #28
 8022b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8022b82:	4628      	mov	r0, r5
 8022b84:	f7ff feec 	bl	8022960 <dhcp_release_and_stop>
        dhcp_start(netif);
 8022b88:	4628      	mov	r0, r5
 8022b8a:	f7ff ff79 	bl	8022a80 <dhcp_start>
 8022b8e:	e7f2      	b.n	8022b76 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022b90:	1e5a      	subs	r2, r3, #1
 8022b92:	b2d1      	uxtb	r1, r2
 8022b94:	2909      	cmp	r1, #9
 8022b96:	d8ee      	bhi.n	8022b76 <dhcp_coarse_tmr+0x3e>
 8022b98:	f240 2219 	movw	r2, #537	; 0x219
 8022b9c:	40ca      	lsrs	r2, r1
 8022b9e:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022ba0:	f012 0201 	ands.w	r2, r2, #1
 8022ba4:	d1e7      	bne.n	8022b76 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8022ba6:	2b04      	cmp	r3, #4
 8022ba8:	d003      	beq.n	8022bb2 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8022baa:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8022bac:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8022bae:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8022bb0:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022bb2:	f10d 0316 	add.w	r3, sp, #22
 8022bb6:	2203      	movs	r2, #3
 8022bb8:	4621      	mov	r1, r4
 8022bba:	4628      	mov	r0, r5
 8022bbc:	f7fe fde4 	bl	8021788 <dhcp_create_msg>
  if (p_out != NULL) {
 8022bc0:	4607      	mov	r7, r0
 8022bc2:	2800      	cmp	r0, #0
 8022bc4:	f000 8096 	beq.w	8022cf4 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bc8:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8022bcc:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bce:	f106 0904 	add.w	r9, r6, #4
 8022bd2:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bd6:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bda:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8022bde:	f200 80b9 	bhi.w	8022d54 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8022be2:	2239      	movs	r2, #57	; 0x39
 8022be4:	1c73      	adds	r3, r6, #1
 8022be6:	fa1f fb8a 	uxth.w	fp, sl
 8022bea:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8022bee:	b29b      	uxth	r3, r3
 8022bf0:	2202      	movs	r2, #2
 8022bf2:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bf6:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022bfa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bfc:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bfe:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022c02:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022c04:	f200 809e 	bhi.w	8022d44 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022c08:	9903      	ldr	r1, [sp, #12]
 8022c0a:	1cf3      	adds	r3, r6, #3
 8022c0c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022c10:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022c12:	0a0a      	lsrs	r2, r1, #8
 8022c14:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022c18:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c1c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022c20:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c24:	2b44      	cmp	r3, #68	; 0x44
 8022c26:	f200 8085 	bhi.w	8022d34 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8022c2a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8022c2e:	2237      	movs	r2, #55	; 0x37
 8022c30:	1d73      	adds	r3, r6, #5
 8022c32:	f8df b158 	ldr.w	fp, [pc, #344]	; 8022d8c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8022c36:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8022c3a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8022c3e:	b29b      	uxth	r3, r3
 8022c40:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c42:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c46:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8022c4a:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c4e:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c52:	d80f      	bhi.n	8022c74 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8022c54:	f808 a009 	strb.w	sl, [r8, r9]
 8022c58:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c5c:	4b42      	ldr	r3, [pc, #264]	; (8022d68 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8022c5e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c62:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c64:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c68:	d01f      	beq.n	8022caa <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c6a:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c6e:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c72:	d9ef      	bls.n	8022c54 <dhcp_coarse_tmr+0x11c>
 8022c74:	4b3d      	ldr	r3, [pc, #244]	; (8022d6c <dhcp_coarse_tmr+0x234>)
 8022c76:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022c7a:	493d      	ldr	r1, [pc, #244]	; (8022d70 <dhcp_coarse_tmr+0x238>)
 8022c7c:	483d      	ldr	r0, [pc, #244]	; (8022d74 <dhcp_coarse_tmr+0x23c>)
 8022c7e:	f003 fb69 	bl	8026354 <iprintf>
 8022c82:	e7e7      	b.n	8022c54 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022c84:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8022c88:	2a01      	cmp	r2, #1
 8022c8a:	d002      	beq.n	8022c92 <dhcp_coarse_tmr+0x15a>
 8022c8c:	2b0a      	cmp	r3, #10
 8022c8e:	f47f af72 	bne.w	8022b76 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8022c92:	4628      	mov	r0, r5
 8022c94:	f7ff fd7e 	bl	8022794 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8022c98:	89a3      	ldrh	r3, [r4, #12]
 8022c9a:	8a62      	ldrh	r2, [r4, #18]
 8022c9c:	1a9b      	subs	r3, r3, r2
 8022c9e:	2b01      	cmp	r3, #1
 8022ca0:	f77f af69 	ble.w	8022b76 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8022ca4:	105b      	asrs	r3, r3, #1
 8022ca6:	81e3      	strh	r3, [r4, #14]
 8022ca8:	e765      	b.n	8022b76 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8022caa:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 8022cae:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8022cb2:	22ff      	movs	r2, #255	; 0xff
 8022cb4:	b280      	uxth	r0, r0
 8022cb6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022cb8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8022cba:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022cbe:	d808      	bhi.n	8022cd2 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8022cc0:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8022cc4:	4440      	add	r0, r8
 8022cc6:	2100      	movs	r1, #0
 8022cc8:	b292      	uxth	r2, r2
 8022cca:	3201      	adds	r2, #1
 8022ccc:	f002 fba4 	bl	8025418 <memset>
 8022cd0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022cd2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8022cd6:	4638      	mov	r0, r7
 8022cd8:	b289      	uxth	r1, r1
 8022cda:	f7f9 f959 	bl	801bf90 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022cde:	4b26      	ldr	r3, [pc, #152]	; (8022d78 <dhcp_coarse_tmr+0x240>)
 8022ce0:	9500      	str	r5, [sp, #0]
 8022ce2:	4639      	mov	r1, r7
 8022ce4:	6818      	ldr	r0, [r3, #0]
 8022ce6:	2343      	movs	r3, #67	; 0x43
 8022ce8:	4a24      	ldr	r2, [pc, #144]	; (8022d7c <dhcp_coarse_tmr+0x244>)
 8022cea:	f7fe fa4b 	bl	8021184 <udp_sendto_if>
    pbuf_free(p_out);
 8022cee:	4638      	mov	r0, r7
 8022cf0:	f7f9 fa66 	bl	801c1c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022cf4:	79a3      	ldrb	r3, [r4, #6]
 8022cf6:	2bff      	cmp	r3, #255	; 0xff
 8022cf8:	d01a      	beq.n	8022d30 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8022cfa:	3301      	adds	r3, #1
 8022cfc:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022cfe:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8022d00:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022d02:	d815      	bhi.n	8022d30 <dhcp_coarse_tmr+0x1f8>
 8022d04:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8022d08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022d0c:	4a1c      	ldr	r2, [pc, #112]	; (8022d80 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022d0e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022d10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022d14:	b29b      	uxth	r3, r3
 8022d16:	fba2 2303 	umull	r2, r3, r2, r3
 8022d1a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8022d1c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022d1e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8022d20:	8aa3      	ldrh	r3, [r4, #20]
 8022d22:	1a9b      	subs	r3, r3, r2
 8022d24:	2b01      	cmp	r3, #1
 8022d26:	f77f af26 	ble.w	8022b76 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8022d2a:	105b      	asrs	r3, r3, #1
 8022d2c:	8223      	strh	r3, [r4, #16]
 8022d2e:	e722      	b.n	8022b76 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8022d30:	2314      	movs	r3, #20
 8022d32:	e7f3      	b.n	8022d1c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022d34:	4b0d      	ldr	r3, [pc, #52]	; (8022d6c <dhcp_coarse_tmr+0x234>)
 8022d36:	f240 529a 	movw	r2, #1434	; 0x59a
 8022d3a:	4912      	ldr	r1, [pc, #72]	; (8022d84 <dhcp_coarse_tmr+0x24c>)
 8022d3c:	480d      	ldr	r0, [pc, #52]	; (8022d74 <dhcp_coarse_tmr+0x23c>)
 8022d3e:	f003 fb09 	bl	8026354 <iprintf>
 8022d42:	e772      	b.n	8022c2a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022d44:	4b09      	ldr	r3, [pc, #36]	; (8022d6c <dhcp_coarse_tmr+0x234>)
 8022d46:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022d4a:	490f      	ldr	r1, [pc, #60]	; (8022d88 <dhcp_coarse_tmr+0x250>)
 8022d4c:	4809      	ldr	r0, [pc, #36]	; (8022d74 <dhcp_coarse_tmr+0x23c>)
 8022d4e:	f003 fb01 	bl	8026354 <iprintf>
 8022d52:	e759      	b.n	8022c08 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022d54:	4b05      	ldr	r3, [pc, #20]	; (8022d6c <dhcp_coarse_tmr+0x234>)
 8022d56:	f240 529a 	movw	r2, #1434	; 0x59a
 8022d5a:	490a      	ldr	r1, [pc, #40]	; (8022d84 <dhcp_coarse_tmr+0x24c>)
 8022d5c:	4805      	ldr	r0, [pc, #20]	; (8022d74 <dhcp_coarse_tmr+0x23c>)
 8022d5e:	f003 faf9 	bl	8026354 <iprintf>
 8022d62:	e73e      	b.n	8022be2 <dhcp_coarse_tmr+0xaa>
 8022d64:	2002e428 	.word	0x2002e428
 8022d68:	08046b18 	.word	0x08046b18
 8022d6c:	0804679c 	.word	0x0804679c
 8022d70:	08046990 	.word	0x08046990
 8022d74:	0802b034 	.word	0x0802b034
 8022d78:	2002e4a0 	.word	0x2002e4a0
 8022d7c:	08046e54 	.word	0x08046e54
 8022d80:	10624dd3 	.word	0x10624dd3
 8022d84:	08046910 	.word	0x08046910
 8022d88:	08046954 	.word	0x08046954
 8022d8c:	08046b15 	.word	0x08046b15

08022d90 <dhcp_fine_tmr>:
{
 8022d90:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8022d92:	4b21      	ldr	r3, [pc, #132]	; (8022e18 <dhcp_fine_tmr+0x88>)
 8022d94:	681c      	ldr	r4, [r3, #0]
 8022d96:	b1fc      	cbz	r4, 8022dd8 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8022d98:	2500      	movs	r5, #0
 8022d9a:	e003      	b.n	8022da4 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8022d9c:	3a01      	subs	r2, #1
 8022d9e:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8022da0:	6824      	ldr	r4, [r4, #0]
 8022da2:	b1cc      	cbz	r4, 8022dd8 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d0fa      	beq.n	8022da0 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8022daa:	891a      	ldrh	r2, [r3, #8]
 8022dac:	2a01      	cmp	r2, #1
 8022dae:	d8f5      	bhi.n	8022d9c <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8022db0:	d1f6      	bne.n	8022da0 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8022db2:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8022db4:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8022db6:	2a0c      	cmp	r2, #12
 8022db8:	d016      	beq.n	8022de8 <dhcp_fine_tmr+0x58>
 8022dba:	2a06      	cmp	r2, #6
 8022dbc:	d014      	beq.n	8022de8 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8022dbe:	2a01      	cmp	r2, #1
 8022dc0:	d016      	beq.n	8022df0 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8022dc2:	2a08      	cmp	r2, #8
 8022dc4:	d009      	beq.n	8022dda <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8022dc6:	2a03      	cmp	r2, #3
 8022dc8:	d1ea      	bne.n	8022da0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8022dca:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8022dcc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8022dce:	2b01      	cmp	r3, #1
 8022dd0:	d91e      	bls.n	8022e10 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8022dd2:	f7fe fe8b 	bl	8021aec <dhcp_discover>
 8022dd6:	e7e3      	b.n	8022da0 <dhcp_fine_tmr+0x10>
}
 8022dd8:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8022dda:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8022ddc:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8022dde:	2b01      	cmp	r3, #1
 8022de0:	d913      	bls.n	8022e0a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8022de2:	f7fe fb6d 	bl	80214c0 <dhcp_bind>
 8022de6:	e7db      	b.n	8022da0 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8022de8:	4620      	mov	r0, r4
 8022dea:	f7fe fe7f 	bl	8021aec <dhcp_discover>
 8022dee:	e7d7      	b.n	8022da0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8022df0:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8022df2:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8022df4:	2b05      	cmp	r3, #5
 8022df6:	d802      	bhi.n	8022dfe <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8022df8:	f7fe ff5e 	bl	8021cb8 <dhcp_select.isra.0>
 8022dfc:	e7d0      	b.n	8022da0 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8022dfe:	f7ff fdaf 	bl	8022960 <dhcp_release_and_stop>
      dhcp_start(netif);
 8022e02:	4620      	mov	r0, r4
 8022e04:	f7ff fe3c 	bl	8022a80 <dhcp_start>
 8022e08:	e7ca      	b.n	8022da0 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8022e0a:	f7fe fb41 	bl	8021490 <dhcp_check>
 8022e0e:	e7c7      	b.n	8022da0 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8022e10:	f7fe fd6c 	bl	80218ec <dhcp_reboot.isra.0>
 8022e14:	e7c4      	b.n	8022da0 <dhcp_fine_tmr+0x10>
 8022e16:	bf00      	nop
 8022e18:	2002e428 	.word	0x2002e428

08022e1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8022e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8022e20:	4f1a      	ldr	r7, [pc, #104]	; (8022e8c <etharp_free_entry+0x70>)
 8022e22:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8022e26:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8022e28:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8022e2c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8022e30:	b32c      	cbz	r4, 8022e7e <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8022e32:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8022e90 <etharp_free_entry+0x74>
 8022e36:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8022e94 <etharp_free_entry+0x78>
 8022e3a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8022e98 <etharp_free_entry+0x7c>
 8022e3e:	e006      	b.n	8022e4e <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8022e40:	f7f9 f9be 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8022e44:	4629      	mov	r1, r5
 8022e46:	200b      	movs	r0, #11
 8022e48:	f7f8 fca2 	bl	801b790 <memp_free>
  while (q) {
 8022e4c:	b19c      	cbz	r4, 8022e76 <etharp_free_entry+0x5a>
    q = q->next;
 8022e4e:	4625      	mov	r5, r4
 8022e50:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8022e52:	6868      	ldr	r0, [r5, #4]
 8022e54:	2800      	cmp	r0, #0
 8022e56:	d1f3      	bne.n	8022e40 <etharp_free_entry+0x24>
 8022e58:	4651      	mov	r1, sl
 8022e5a:	465b      	mov	r3, fp
 8022e5c:	229a      	movs	r2, #154	; 0x9a
 8022e5e:	4648      	mov	r0, r9
 8022e60:	f003 fa78 	bl	8026354 <iprintf>
    pbuf_free(r->p);
 8022e64:	6868      	ldr	r0, [r5, #4]
 8022e66:	f7f9 f9ab 	bl	801c1c0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8022e6a:	4629      	mov	r1, r5
 8022e6c:	200b      	movs	r0, #11
 8022e6e:	f7f8 fc8f 	bl	801b790 <memp_free>
  while (q) {
 8022e72:	2c00      	cmp	r4, #0
 8022e74:	d1eb      	bne.n	8022e4e <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8022e76:	eb08 0306 	add.w	r3, r8, r6
 8022e7a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8022e7e:	4446      	add	r6, r8
 8022e80:	2300      	movs	r3, #0
 8022e82:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8022e86:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8022e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e8c:	2002e4e0 	.word	0x2002e4e0
 8022e90:	08046b18 	.word	0x08046b18
 8022e94:	08046b50 	.word	0x08046b50
 8022e98:	0802b034 	.word	0x0802b034

08022e9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8022e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ea0:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8022ea2:	f04f 0820 	mov.w	r8, #32
{
 8022ea6:	b083      	sub	sp, #12
 8022ea8:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8022eaa:	469e      	mov	lr, r3
 8022eac:	469b      	mov	fp, r3
{
 8022eae:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8022eb0:	469a      	mov	sl, r3
 8022eb2:	4948      	ldr	r1, [pc, #288]	; (8022fd4 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8022eb4:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8022eb6:	46c4      	mov	ip, r8
 8022eb8:	4691      	mov	r9, r2
 8022eba:	f8cd 8004 	str.w	r8, [sp, #4]
 8022ebe:	e004      	b.n	8022eca <etharp_find_entry+0x2e>
 8022ec0:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022ec2:	3301      	adds	r3, #1
 8022ec4:	3118      	adds	r1, #24
 8022ec6:	2b20      	cmp	r3, #32
 8022ec8:	d015      	beq.n	8022ef6 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8022eca:	2c20      	cmp	r4, #32
 8022ecc:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8022ece:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8022ed0:	d134      	bne.n	8022f3c <etharp_find_entry+0xa0>
 8022ed2:	2800      	cmp	r0, #0
 8022ed4:	d0f4      	beq.n	8022ec0 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8022ed6:	b11d      	cbz	r5, 8022ee0 <etharp_find_entry+0x44>
 8022ed8:	682f      	ldr	r7, [r5, #0]
 8022eda:	684e      	ldr	r6, [r1, #4]
 8022edc:	42b7      	cmp	r7, r6
 8022ede:	d038      	beq.n	8022f52 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8022ee0:	2801      	cmp	r0, #1
 8022ee2:	d02e      	beq.n	8022f42 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8022ee4:	8a48      	ldrh	r0, [r1, #18]
 8022ee6:	4570      	cmp	r0, lr
 8022ee8:	d3eb      	bcc.n	8022ec2 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022eea:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8022eec:	4686      	mov	lr, r0
 8022eee:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022ef0:	3118      	adds	r1, #24
 8022ef2:	2b20      	cmp	r3, #32
 8022ef4:	d1e9      	bne.n	8022eca <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8022ef6:	9b00      	ldr	r3, [sp, #0]
 8022ef8:	464e      	mov	r6, r9
 8022efa:	2b01      	cmp	r3, #1
 8022efc:	d166      	bne.n	8022fcc <etharp_find_entry+0x130>
 8022efe:	2c20      	cmp	r4, #32
 8022f00:	d040      	beq.n	8022f84 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8022f02:	46a1      	mov	r9, r4
 8022f04:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8022f08:	4a32      	ldr	r2, [pc, #200]	; (8022fd4 <etharp_find_entry+0x138>)
 8022f0a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8022f0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022f12:	7d1b      	ldrb	r3, [r3, #20]
 8022f14:	bb73      	cbnz	r3, 8022f74 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8022f16:	b135      	cbz	r5, 8022f26 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8022f18:	eb08 0309 	add.w	r3, r8, r9
 8022f1c:	492d      	ldr	r1, [pc, #180]	; (8022fd4 <etharp_find_entry+0x138>)
 8022f1e:	682a      	ldr	r2, [r5, #0]
 8022f20:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8022f24:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8022f26:	44c8      	add	r8, r9
 8022f28:	4a2a      	ldr	r2, [pc, #168]	; (8022fd4 <etharp_find_entry+0x138>)
 8022f2a:	2300      	movs	r3, #0
 8022f2c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8022f30:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022f32:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8022f34:	4620      	mov	r0, r4
 8022f36:	b003      	add	sp, #12
 8022f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8022f3c:	2800      	cmp	r0, #0
 8022f3e:	d0c0      	beq.n	8022ec2 <etharp_find_entry+0x26>
 8022f40:	e7c9      	b.n	8022ed6 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8022f42:	6808      	ldr	r0, [r1, #0]
 8022f44:	b180      	cbz	r0, 8022f68 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8022f46:	8a48      	ldrh	r0, [r1, #18]
 8022f48:	4550      	cmp	r0, sl
 8022f4a:	d3ba      	bcc.n	8022ec2 <etharp_find_entry+0x26>
 8022f4c:	4682      	mov	sl, r0
 8022f4e:	4690      	mov	r8, r2
 8022f50:	e7b7      	b.n	8022ec2 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8022f52:	f1b9 0f00 	cmp.w	r9, #0
 8022f56:	d002      	beq.n	8022f5e <etharp_find_entry+0xc2>
 8022f58:	688e      	ldr	r6, [r1, #8]
 8022f5a:	454e      	cmp	r6, r9
 8022f5c:	d1c0      	bne.n	8022ee0 <etharp_find_entry+0x44>
 8022f5e:	4614      	mov	r4, r2
}
 8022f60:	4620      	mov	r0, r4
 8022f62:	b003      	add	sp, #12
 8022f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8022f68:	8a48      	ldrh	r0, [r1, #18]
 8022f6a:	4558      	cmp	r0, fp
 8022f6c:	d3a9      	bcc.n	8022ec2 <etharp_find_entry+0x26>
 8022f6e:	4683      	mov	fp, r0
 8022f70:	9201      	str	r2, [sp, #4]
 8022f72:	e7a6      	b.n	8022ec2 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8022f74:	4b18      	ldr	r3, [pc, #96]	; (8022fd8 <etharp_find_entry+0x13c>)
 8022f76:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8022f7a:	4918      	ldr	r1, [pc, #96]	; (8022fdc <etharp_find_entry+0x140>)
 8022f7c:	4818      	ldr	r0, [pc, #96]	; (8022fe0 <etharp_find_entry+0x144>)
 8022f7e:	f003 f9e9 	bl	8026354 <iprintf>
 8022f82:	e7c8      	b.n	8022f16 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8022f84:	f1bc 0f20 	cmp.w	ip, #32
 8022f88:	d012      	beq.n	8022fb0 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022f8a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8022f8e:	4a11      	ldr	r2, [pc, #68]	; (8022fd4 <etharp_find_entry+0x138>)
 8022f90:	46e1      	mov	r9, ip
 8022f92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022f96:	b1bb      	cbz	r3, 8022fc8 <etharp_find_entry+0x12c>
 8022f98:	464c      	mov	r4, r9
 8022f9a:	4b0f      	ldr	r3, [pc, #60]	; (8022fd8 <etharp_find_entry+0x13c>)
 8022f9c:	f240 126d 	movw	r2, #365	; 0x16d
 8022fa0:	4910      	ldr	r1, [pc, #64]	; (8022fe4 <etharp_find_entry+0x148>)
 8022fa2:	480f      	ldr	r0, [pc, #60]	; (8022fe0 <etharp_find_entry+0x144>)
 8022fa4:	f003 f9d6 	bl	8026354 <iprintf>
    etharp_free_entry(i);
 8022fa8:	4648      	mov	r0, r9
 8022faa:	f7ff ff37 	bl	8022e1c <etharp_free_entry>
 8022fae:	e7a9      	b.n	8022f04 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8022fb0:	9b01      	ldr	r3, [sp, #4]
 8022fb2:	2b20      	cmp	r3, #32
 8022fb4:	d105      	bne.n	8022fc2 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8022fb6:	f1b8 0f20 	cmp.w	r8, #32
 8022fba:	d007      	beq.n	8022fcc <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8022fbc:	4644      	mov	r4, r8
 8022fbe:	46c1      	mov	r9, r8
 8022fc0:	e7f2      	b.n	8022fa8 <etharp_find_entry+0x10c>
 8022fc2:	461c      	mov	r4, r3
 8022fc4:	4699      	mov	r9, r3
 8022fc6:	e7ef      	b.n	8022fa8 <etharp_find_entry+0x10c>
 8022fc8:	4664      	mov	r4, ip
 8022fca:	e7ed      	b.n	8022fa8 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8022fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8022fd0:	e7b0      	b.n	8022f34 <etharp_find_entry+0x98>
 8022fd2:	bf00      	nop
 8022fd4:	2002e4e0 	.word	0x2002e4e0
 8022fd8:	08046b18 	.word	0x08046b18
 8022fdc:	08046b78 	.word	0x08046b78
 8022fe0:	0802b034 	.word	0x0802b034
 8022fe4:	08046b60 	.word	0x08046b60

08022fe8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fec:	b082      	sub	sp, #8
 8022fee:	4688      	mov	r8, r1
 8022ff0:	4691      	mov	r9, r2
 8022ff2:	461f      	mov	r7, r3
 8022ff4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022ff8:	4606      	mov	r6, r0
{
 8022ffa:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022ffe:	2800      	cmp	r0, #0
 8023000:	d050      	beq.n	80230a4 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023002:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023006:	211c      	movs	r1, #28
 8023008:	200e      	movs	r0, #14
 802300a:	f7f8 ff07 	bl	801be1c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802300e:	4605      	mov	r5, r0
 8023010:	2800      	cmp	r0, #0
 8023012:	d04f      	beq.n	80230b4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023014:	8943      	ldrh	r3, [r0, #10]
 8023016:	2b1b      	cmp	r3, #27
 8023018:	d93c      	bls.n	8023094 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802301a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802301c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802301e:	f7f7 f893 	bl	801a148 <lwip_htons>
 8023022:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023024:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8023028:	2b06      	cmp	r3, #6
 802302a:	d006      	beq.n	802303a <etharp_raw+0x52>
 802302c:	4b23      	ldr	r3, [pc, #140]	; (80230bc <etharp_raw+0xd4>)
 802302e:	f240 4269 	movw	r2, #1129	; 0x469
 8023032:	4923      	ldr	r1, [pc, #140]	; (80230c0 <etharp_raw+0xd8>)
 8023034:	4823      	ldr	r0, [pc, #140]	; (80230c4 <etharp_raw+0xdc>)
 8023036:	f003 f98d 	bl	8026354 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802303a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802303c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802303e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023040:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023042:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023044:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023046:	88b9      	ldrh	r1, [r7, #4]
 8023048:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802304a:	f8da 1000 	ldr.w	r1, [sl]
 802304e:	f8c4 1012 	str.w	r1, [r4, #18]
 8023052:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8023056:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8023058:	990a      	ldr	r1, [sp, #40]	; 0x28
 802305a:	6809      	ldr	r1, [r1, #0]
 802305c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023060:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023062:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023064:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023066:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023068:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802306a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802306c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802306e:	2108      	movs	r1, #8
 8023070:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8023072:	2106      	movs	r1, #6
 8023074:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023076:	2104      	movs	r1, #4
 8023078:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802307a:	f640 0106 	movw	r1, #2054	; 0x806
 802307e:	9100      	str	r1, [sp, #0]
 8023080:	4629      	mov	r1, r5
 8023082:	f001 fbf5 	bl	8024870 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023086:	4628      	mov	r0, r5
 8023088:	f7f9 f89a 	bl	801c1c0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 802308c:	4630      	mov	r0, r6
}
 802308e:	b002      	add	sp, #8
 8023090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023094:	4b09      	ldr	r3, [pc, #36]	; (80230bc <etharp_raw+0xd4>)
 8023096:	f240 4262 	movw	r2, #1122	; 0x462
 802309a:	490b      	ldr	r1, [pc, #44]	; (80230c8 <etharp_raw+0xe0>)
 802309c:	4809      	ldr	r0, [pc, #36]	; (80230c4 <etharp_raw+0xdc>)
 802309e:	f003 f959 	bl	8026354 <iprintf>
 80230a2:	e7ba      	b.n	802301a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80230a4:	4b05      	ldr	r3, [pc, #20]	; (80230bc <etharp_raw+0xd4>)
 80230a6:	f240 4257 	movw	r2, #1111	; 0x457
 80230aa:	4908      	ldr	r1, [pc, #32]	; (80230cc <etharp_raw+0xe4>)
 80230ac:	4805      	ldr	r0, [pc, #20]	; (80230c4 <etharp_raw+0xdc>)
 80230ae:	f003 f951 	bl	8026354 <iprintf>
 80230b2:	e7a6      	b.n	8023002 <etharp_raw+0x1a>
    return ERR_MEM;
 80230b4:	f04f 30ff 	mov.w	r0, #4294967295
 80230b8:	e7e9      	b.n	802308e <etharp_raw+0xa6>
 80230ba:	bf00      	nop
 80230bc:	08046b18 	.word	0x08046b18
 80230c0:	08046bd8 	.word	0x08046bd8
 80230c4:	0802b034 	.word	0x0802b034
 80230c8:	08046ba4 	.word	0x08046ba4
 80230cc:	0802e22c 	.word	0x0802e22c

080230d0 <etharp_output_to_arp_index>:
{
 80230d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80230d4:	4f37      	ldr	r7, [pc, #220]	; (80231b4 <etharp_output_to_arp_index+0xe4>)
 80230d6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 80230da:	b085      	sub	sp, #20
 80230dc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80230de:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 80230e2:	4605      	mov	r5, r0
 80230e4:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80230e6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80230ea:	f899 3014 	ldrb.w	r3, [r9, #20]
 80230ee:	2b01      	cmp	r3, #1
 80230f0:	d93c      	bls.n	802316c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80230f2:	2b02      	cmp	r3, #2
 80230f4:	d011      	beq.n	802311a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80230f6:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80230f8:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80230fc:	fb02 7404 	mla	r4, r2, r4, r7
 8023100:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023102:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8023106:	4623      	mov	r3, r4
 8023108:	464a      	mov	r2, r9
 802310a:	4631      	mov	r1, r6
 802310c:	4628      	mov	r0, r5
 802310e:	9700      	str	r7, [sp, #0]
 8023110:	f001 fbae 	bl	8024870 <ethernet_output>
}
 8023114:	b005      	add	sp, #20
 8023116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802311a:	44a0      	add	r8, r4
 802311c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8023120:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8023124:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8023128:	d82a      	bhi.n	8023180 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802312a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802312e:	d3e2      	bcc.n	80230f6 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023130:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023134:	2301      	movs	r3, #1
 8023136:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802313a:	4628      	mov	r0, r5
 802313c:	00e4      	lsls	r4, r4, #3
 802313e:	9303      	str	r3, [sp, #12]
 8023140:	4b1d      	ldr	r3, [pc, #116]	; (80231b8 <etharp_output_to_arp_index+0xe8>)
 8023142:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023144:	f104 020c 	add.w	r2, r4, #12
 8023148:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802314c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802314e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023150:	18bc      	adds	r4, r7, r2
 8023152:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023154:	9300      	str	r3, [sp, #0]
 8023156:	464b      	mov	r3, r9
 8023158:	4622      	mov	r2, r4
 802315a:	9702      	str	r7, [sp, #8]
 802315c:	f7ff ff44 	bl	8022fe8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023160:	2800      	cmp	r0, #0
 8023162:	d1ce      	bne.n	8023102 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023164:	2303      	movs	r3, #3
 8023166:	f888 3014 	strb.w	r3, [r8, #20]
 802316a:	e7ca      	b.n	8023102 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802316c:	4b13      	ldr	r3, [pc, #76]	; (80231bc <etharp_output_to_arp_index+0xec>)
 802316e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023172:	4913      	ldr	r1, [pc, #76]	; (80231c0 <etharp_output_to_arp_index+0xf0>)
 8023174:	4813      	ldr	r0, [pc, #76]	; (80231c4 <etharp_output_to_arp_index+0xf4>)
 8023176:	f003 f8ed 	bl	8026354 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802317a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802317e:	e7b8      	b.n	80230f2 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023184:	2301      	movs	r3, #1
 8023186:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802318a:	4a0f      	ldr	r2, [pc, #60]	; (80231c8 <etharp_output_to_arp_index+0xf8>)
 802318c:	00e4      	lsls	r4, r4, #3
 802318e:	9303      	str	r3, [sp, #12]
 8023190:	4649      	mov	r1, r9
 8023192:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023194:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023196:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023198:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802319a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802319c:	9302      	str	r3, [sp, #8]
 802319e:	4b06      	ldr	r3, [pc, #24]	; (80231b8 <etharp_output_to_arp_index+0xe8>)
 80231a0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80231a2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80231a4:	9300      	str	r3, [sp, #0]
 80231a6:	464b      	mov	r3, r9
 80231a8:	f7ff ff1e 	bl	8022fe8 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80231ac:	2800      	cmp	r0, #0
 80231ae:	d0d9      	beq.n	8023164 <etharp_output_to_arp_index+0x94>
 80231b0:	e7a7      	b.n	8023102 <etharp_output_to_arp_index+0x32>
 80231b2:	bf00      	nop
 80231b4:	2002e4e0 	.word	0x2002e4e0
 80231b8:	08047050 	.word	0x08047050
 80231bc:	08046b18 	.word	0x08046b18
 80231c0:	08046c1c 	.word	0x08046c1c
 80231c4:	0802b034 	.word	0x0802b034
 80231c8:	08047048 	.word	0x08047048

080231cc <etharp_tmr>:
{
 80231cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231d0:	4c1e      	ldr	r4, [pc, #120]	; (802324c <etharp_tmr+0x80>)
 80231d2:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80231d4:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80231d6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8023254 <etharp_tmr+0x88>
 80231da:	4f1d      	ldr	r7, [pc, #116]	; (8023250 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 80231dc:	2602      	movs	r6, #2
 80231de:	e00d      	b.n	80231fc <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80231e0:	2a01      	cmp	r2, #1
 80231e2:	d101      	bne.n	80231e8 <etharp_tmr+0x1c>
 80231e4:	2b04      	cmp	r3, #4
 80231e6:	d813      	bhi.n	8023210 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80231e8:	2a03      	cmp	r2, #3
 80231ea:	d01b      	beq.n	8023224 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80231ec:	2a04      	cmp	r2, #4
 80231ee:	d01c      	beq.n	802322a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80231f0:	2a01      	cmp	r2, #1
 80231f2:	d01c      	beq.n	802322e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80231f4:	3501      	adds	r5, #1
 80231f6:	3418      	adds	r4, #24
 80231f8:	2d20      	cmp	r5, #32
 80231fa:	d010      	beq.n	802321e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 80231fc:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80231fe:	2a00      	cmp	r2, #0
 8023200:	d0f8      	beq.n	80231f4 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8023202:	89e3      	ldrh	r3, [r4, #14]
 8023204:	3301      	adds	r3, #1
 8023206:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023208:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 802320c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802320e:	d3e7      	bcc.n	80231e0 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8023210:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023212:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8023214:	f7ff fe02 	bl	8022e1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023218:	3418      	adds	r4, #24
 802321a:	2d20      	cmp	r5, #32
 802321c:	d1ee      	bne.n	80231fc <etharp_tmr+0x30>
}
 802321e:	b004      	add	sp, #16
 8023220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023224:	2304      	movs	r3, #4
 8023226:	7423      	strb	r3, [r4, #16]
 8023228:	e7e4      	b.n	80231f4 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 802322a:	7426      	strb	r6, [r4, #16]
 802322c:	e7e2      	b.n	80231f4 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802322e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023230:	f8cd 8004 	str.w	r8, [sp, #4]
 8023234:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023238:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802323a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802323e:	9100      	str	r1, [sp, #0]
 8023240:	463a      	mov	r2, r7
 8023242:	4619      	mov	r1, r3
 8023244:	f7ff fed0 	bl	8022fe8 <etharp_raw>
 8023248:	e7d4      	b.n	80231f4 <etharp_tmr+0x28>
 802324a:	bf00      	nop
 802324c:	2002e4e4 	.word	0x2002e4e4
 8023250:	08047048 	.word	0x08047048
 8023254:	08047050 	.word	0x08047050

08023258 <etharp_cleanup_netif>:
{
 8023258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802325a:	4c0c      	ldr	r4, [pc, #48]	; (802328c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802325c:	2500      	movs	r5, #0
{
 802325e:	4607      	mov	r7, r0
 8023260:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8023264:	e003      	b.n	802326e <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023266:	3418      	adds	r4, #24
 8023268:	3501      	adds	r5, #1
 802326a:	42b4      	cmp	r4, r6
 802326c:	d00c      	beq.n	8023288 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802326e:	7d23      	ldrb	r3, [r4, #20]
 8023270:	2b00      	cmp	r3, #0
 8023272:	d0f8      	beq.n	8023266 <etharp_cleanup_netif+0xe>
 8023274:	68a3      	ldr	r3, [r4, #8]
 8023276:	42bb      	cmp	r3, r7
 8023278:	d1f5      	bne.n	8023266 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802327a:	3418      	adds	r4, #24
      etharp_free_entry(i);
 802327c:	4628      	mov	r0, r5
 802327e:	f7ff fdcd 	bl	8022e1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023282:	3501      	adds	r5, #1
 8023284:	42b4      	cmp	r4, r6
 8023286:	d1f2      	bne.n	802326e <etharp_cleanup_netif+0x16>
}
 8023288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802328a:	bf00      	nop
 802328c:	2002e4e0 	.word	0x2002e4e0

08023290 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023290:	2900      	cmp	r1, #0
 8023292:	f000 808e 	beq.w	80233b2 <etharp_input+0x122>
{
 8023296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 802329a:	6846      	ldr	r6, [r0, #4]
{
 802329c:	b087      	sub	sp, #28
 802329e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80232a0:	8833      	ldrh	r3, [r6, #0]
 80232a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80232a6:	d102      	bne.n	80232ae <etharp_input+0x1e>
 80232a8:	7933      	ldrb	r3, [r6, #4]
 80232aa:	2b06      	cmp	r3, #6
 80232ac:	d005      	beq.n	80232ba <etharp_input+0x2a>
    pbuf_free(p);
 80232ae:	4620      	mov	r0, r4
}
 80232b0:	b007      	add	sp, #28
 80232b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80232b6:	f7f8 bf83 	b.w	801c1c0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80232ba:	7973      	ldrb	r3, [r6, #5]
 80232bc:	2b04      	cmp	r3, #4
 80232be:	d1f6      	bne.n	80232ae <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80232c0:	8873      	ldrh	r3, [r6, #2]
 80232c2:	2b08      	cmp	r3, #8
 80232c4:	d1f3      	bne.n	80232ae <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80232c6:	f8d6 000e 	ldr.w	r0, [r6, #14]
 80232ca:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80232cc:	684b      	ldr	r3, [r1, #4]
 80232ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80232d2:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	d073      	beq.n	80233c0 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80232d8:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80232dc:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80232e0:	faba fa8a 	clz	sl, sl
 80232e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80232e8:	f1ca 0702 	rsb	r7, sl, #2
 80232ec:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80232ee:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80232f2:	2b06      	cmp	r3, #6
 80232f4:	d007      	beq.n	8023306 <etharp_input+0x76>
 80232f6:	4b3e      	ldr	r3, [pc, #248]	; (80233f0 <etharp_input+0x160>)
 80232f8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80232fc:	493d      	ldr	r1, [pc, #244]	; (80233f4 <etharp_input+0x164>)
 80232fe:	483e      	ldr	r0, [pc, #248]	; (80233f8 <etharp_input+0x168>)
 8023300:	f003 f828 	bl	8026354 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8023304:	9805      	ldr	r0, [sp, #20]
 8023306:	2800      	cmp	r0, #0
 8023308:	d042      	beq.n	8023390 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802330a:	4629      	mov	r1, r5
 802330c:	f000 fd30 	bl	8023d70 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8023310:	4681      	mov	r9, r0
 8023312:	2800      	cmp	r0, #0
 8023314:	d13c      	bne.n	8023390 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8023316:	9b05      	ldr	r3, [sp, #20]
 8023318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802331c:	2be0      	cmp	r3, #224	; 0xe0
 802331e:	d037      	beq.n	8023390 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8023320:	4639      	mov	r1, r7
 8023322:	462a      	mov	r2, r5
 8023324:	a805      	add	r0, sp, #20
 8023326:	f7ff fdb9 	bl	8022e9c <etharp_find_entry>
  if (i < 0) {
 802332a:	2800      	cmp	r0, #0
 802332c:	db30      	blt.n	8023390 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802332e:	4a33      	ldr	r2, [pc, #204]	; (80233fc <etharp_input+0x16c>)
 8023330:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8023334:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023336:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802333a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 802333e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023340:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8023342:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023344:	fb10 330c 	smlabb	r3, r0, ip, r3
 8023348:	f8d8 0000 	ldr.w	r0, [r8]
 802334c:	50d0      	str	r0, [r2, r3]
 802334e:	18d0      	adds	r0, r2, r3
 8023350:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8023354:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8023356:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 802335a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 802335e:	b1b9      	cbz	r1, 8023390 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023360:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8023364:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8023366:	200b      	movs	r0, #11
    p = q->p;
 8023368:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 802336c:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 802336e:	f7f8 fa0f 	bl	801b790 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023376:	4659      	mov	r1, fp
 8023378:	464a      	mov	r2, r9
 802337a:	9300      	str	r3, [sp, #0]
 802337c:	4628      	mov	r0, r5
 802337e:	4643      	mov	r3, r8
 8023380:	f001 fa76 	bl	8024870 <ethernet_output>
    pbuf_free(p);
 8023384:	4658      	mov	r0, fp
 8023386:	f7f8 ff1b 	bl	801c1c0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 802338a:	6839      	ldr	r1, [r7, #0]
 802338c:	2900      	cmp	r1, #0
 802338e:	d1e9      	bne.n	8023364 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8023390:	88f3      	ldrh	r3, [r6, #6]
 8023392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023396:	d018      	beq.n	80233ca <etharp_input+0x13a>
 8023398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802339c:	d103      	bne.n	80233a6 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802339e:	a905      	add	r1, sp, #20
 80233a0:	4628      	mov	r0, r5
 80233a2:	f7ff f971 	bl	8022688 <dhcp_arp_reply>
  pbuf_free(p);
 80233a6:	4620      	mov	r0, r4
 80233a8:	f7f8 ff0a 	bl	801c1c0 <pbuf_free>
}
 80233ac:	b007      	add	sp, #28
 80233ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80233b2:	4b0f      	ldr	r3, [pc, #60]	; (80233f0 <etharp_input+0x160>)
 80233b4:	f240 228a 	movw	r2, #650	; 0x28a
 80233b8:	4911      	ldr	r1, [pc, #68]	; (8023400 <etharp_input+0x170>)
 80233ba:	480f      	ldr	r0, [pc, #60]	; (80233f8 <etharp_input+0x168>)
 80233bc:	f002 bfca 	b.w	8026354 <iprintf>
    for_us = 0;
 80233c0:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80233c2:	f106 0808 	add.w	r8, r6, #8
 80233c6:	2702      	movs	r7, #2
 80233c8:	e791      	b.n	80232ee <etharp_input+0x5e>
      if (for_us) {
 80233ca:	f1ba 0f00 	cmp.w	sl, #0
 80233ce:	d0ea      	beq.n	80233a6 <etharp_input+0x116>
        etharp_raw(netif,
 80233d0:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80233d2:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 80233d6:	4642      	mov	r2, r8
 80233d8:	4628      	mov	r0, r5
 80233da:	9103      	str	r1, [sp, #12]
 80233dc:	a905      	add	r1, sp, #20
 80233de:	f8cd 8004 	str.w	r8, [sp, #4]
 80233e2:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80233e4:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 80233e6:	9100      	str	r1, [sp, #0]
 80233e8:	4619      	mov	r1, r3
 80233ea:	f7ff fdfd 	bl	8022fe8 <etharp_raw>
 80233ee:	e7da      	b.n	80233a6 <etharp_input+0x116>
 80233f0:	08046b18 	.word	0x08046b18
 80233f4:	08046c6c 	.word	0x08046c6c
 80233f8:	0802b034 	.word	0x0802b034
 80233fc:	2002e4e0 	.word	0x2002e4e0
 8023400:	0802e22c 	.word	0x0802e22c

08023404 <etharp_query>:
{
 8023404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023408:	468a      	mov	sl, r1
 802340a:	b085      	sub	sp, #20
 802340c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802340e:	4601      	mov	r1, r0
 8023410:	f8da 0000 	ldr.w	r0, [sl]
{
 8023414:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023416:	f000 fcab 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 802341a:	2800      	cmp	r0, #0
 802341c:	f040 80d1 	bne.w	80235c2 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8023420:	f8da 3000 	ldr.w	r3, [sl]
 8023424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8023428:	2ae0      	cmp	r2, #224	; 0xe0
 802342a:	f000 80ca 	beq.w	80235c2 <etharp_query+0x1be>
 802342e:	2b00      	cmp	r3, #0
 8023430:	f000 80c7 	beq.w	80235c2 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023434:	462a      	mov	r2, r5
 8023436:	2101      	movs	r1, #1
 8023438:	4650      	mov	r0, sl
 802343a:	f7ff fd2f 	bl	8022e9c <etharp_find_entry>
  if (i_err < 0) {
 802343e:	1e07      	subs	r7, r0, #0
 8023440:	db52      	blt.n	80234e8 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023442:	2f7e      	cmp	r7, #126	; 0x7e
 8023444:	dc48      	bgt.n	80234d8 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8023446:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023448:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80235f8 <etharp_query+0x1f4>
 802344c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8023450:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8023454:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8023458:	7d1a      	ldrb	r2, [r3, #20]
 802345a:	b18a      	cbz	r2, 8023480 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802345c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8023460:	2e00      	cmp	r6, #0
 8023462:	f000 80a0 	beq.w	80235a6 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023466:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 802346a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802346e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8023472:	7d13      	ldrb	r3, [r2, #20]
 8023474:	2b01      	cmp	r3, #1
 8023476:	d81e      	bhi.n	80234b6 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023478:	d03a      	beq.n	80234f0 <etharp_query+0xec>
}
 802347a:	b005      	add	sp, #20
 802347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023480:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023482:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8023486:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023488:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 802348c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802348e:	4628      	mov	r0, r5
 8023490:	4b53      	ldr	r3, [pc, #332]	; (80235e0 <etharp_query+0x1dc>)
 8023492:	4659      	mov	r1, fp
 8023494:	9203      	str	r2, [sp, #12]
 8023496:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023498:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802349a:	4a52      	ldr	r2, [pc, #328]	; (80235e4 <etharp_query+0x1e0>)
 802349c:	9300      	str	r3, [sp, #0]
 802349e:	465b      	mov	r3, fp
 80234a0:	f7ff fda2 	bl	8022fe8 <etharp_raw>
    if (q == NULL) {
 80234a4:	2e00      	cmp	r6, #0
 80234a6:	d0e8      	beq.n	802347a <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80234a8:	eb09 0207 	add.w	r2, r9, r7
 80234ac:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80234b0:	7d13      	ldrb	r3, [r2, #20]
 80234b2:	2b01      	cmp	r3, #1
 80234b4:	d9e0      	bls.n	8023478 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80234b6:	2318      	movs	r3, #24
 80234b8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80234bc:	465a      	mov	r2, fp
 80234be:	4631      	mov	r1, r6
 80234c0:	fb03 8307 	mla	r3, r3, r7, r8
 80234c4:	4628      	mov	r0, r5
 80234c6:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 80234c8:	4c47      	ldr	r4, [pc, #284]	; (80235e8 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80234ca:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 80234cc:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80234ce:	f001 f9cf 	bl	8024870 <ethernet_output>
}
 80234d2:	b005      	add	sp, #20
 80234d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80234d8:	4b44      	ldr	r3, [pc, #272]	; (80235ec <etharp_query+0x1e8>)
 80234da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80234de:	4944      	ldr	r1, [pc, #272]	; (80235f0 <etharp_query+0x1ec>)
 80234e0:	4844      	ldr	r0, [pc, #272]	; (80235f4 <etharp_query+0x1f0>)
 80234e2:	f002 ff37 	bl	8026354 <iprintf>
 80234e6:	e7ae      	b.n	8023446 <etharp_query+0x42>
    return (err_t)i_err;
 80234e8:	b278      	sxtb	r0, r7
}
 80234ea:	b005      	add	sp, #20
 80234ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234f0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80234f2:	4d3e      	ldr	r5, [pc, #248]	; (80235ec <etharp_query+0x1e8>)
 80234f4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80235fc <etharp_query+0x1f8>
 80234f8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80235f4 <etharp_query+0x1f0>
 80234fc:	e005      	b.n	802350a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 80234fe:	7b23      	ldrb	r3, [r4, #12]
 8023500:	065a      	lsls	r2, r3, #25
 8023502:	d413      	bmi.n	802352c <etharp_query+0x128>
      p = p->next;
 8023504:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8023506:	2c00      	cmp	r4, #0
 8023508:	d038      	beq.n	802357c <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802350a:	8962      	ldrh	r2, [r4, #10]
 802350c:	8923      	ldrh	r3, [r4, #8]
 802350e:	429a      	cmp	r2, r3
 8023510:	d1f5      	bne.n	80234fe <etharp_query+0xfa>
 8023512:	6822      	ldr	r2, [r4, #0]
 8023514:	462b      	mov	r3, r5
 8023516:	b132      	cbz	r2, 8023526 <etharp_query+0x122>
 8023518:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802351c:	4659      	mov	r1, fp
 802351e:	4650      	mov	r0, sl
 8023520:	f002 ff18 	bl	8026354 <iprintf>
 8023524:	e7eb      	b.n	80234fe <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8023526:	7b23      	ldrb	r3, [r4, #12]
 8023528:	065b      	lsls	r3, r3, #25
 802352a:	d527      	bpl.n	802357c <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802352c:	4632      	mov	r2, r6
 802352e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8023532:	200e      	movs	r0, #14
 8023534:	f7f8 ffd6 	bl	801c4e4 <pbuf_clone>
    if (p != NULL) {
 8023538:	4606      	mov	r6, r0
 802353a:	2800      	cmp	r0, #0
 802353c:	d047      	beq.n	80235ce <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802353e:	f240 4206 	movw	r2, #1030	; 0x406
 8023542:	492a      	ldr	r1, [pc, #168]	; (80235ec <etharp_query+0x1e8>)
 8023544:	200b      	movs	r0, #11
 8023546:	f7f8 f8ed 	bl	801b724 <memp_malloc_fn>
      if (new_entry != NULL) {
 802354a:	4602      	mov	r2, r0
 802354c:	2800      	cmp	r0, #0
 802354e:	d041      	beq.n	80235d4 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8023550:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8023554:	2100      	movs	r1, #0
        new_entry->p = p;
 8023556:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8023558:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802355a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802355c:	f858 5003 	ldr.w	r5, [r8, r3]
 8023560:	b1ed      	cbz	r5, 802359e <etharp_query+0x19a>
          while (r->next != NULL) {
 8023562:	682c      	ldr	r4, [r5, #0]
 8023564:	b384      	cbz	r4, 80235c8 <etharp_query+0x1c4>
          qlen++;
 8023566:	2301      	movs	r3, #1
            qlen++;
 8023568:	4620      	mov	r0, r4
          while (r->next != NULL) {
 802356a:	6824      	ldr	r4, [r4, #0]
            qlen++;
 802356c:	3301      	adds	r3, #1
          while (r->next != NULL) {
 802356e:	2c00      	cmp	r4, #0
 8023570:	d1fa      	bne.n	8023568 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8023572:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8023574:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8023576:	d805      	bhi.n	8023584 <etharp_query+0x180>
        result = ERR_OK;
 8023578:	4620      	mov	r0, r4
 802357a:	e77e      	b.n	802347a <etharp_query+0x76>
      pbuf_ref(p);
 802357c:	4630      	mov	r0, r6
 802357e:	f7f8 fe3d 	bl	801c1fc <pbuf_ref>
    if (p != NULL) {
 8023582:	e7dc      	b.n	802353e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8023584:	682b      	ldr	r3, [r5, #0]
 8023586:	444f      	add	r7, r9
          pbuf_free(old->p);
 8023588:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802358a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802358e:	f7f8 fe17 	bl	801c1c0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8023592:	200b      	movs	r0, #11
 8023594:	4629      	mov	r1, r5
 8023596:	f7f8 f8fb 	bl	801b790 <memp_free>
        result = ERR_OK;
 802359a:	4620      	mov	r0, r4
 802359c:	e76d      	b.n	802347a <etharp_query+0x76>
 802359e:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 80235a0:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 80235a4:	e769      	b.n	802347a <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80235a6:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235a8:	2301      	movs	r3, #1
 80235aa:	4c0d      	ldr	r4, [pc, #52]	; (80235e0 <etharp_query+0x1dc>)
 80235ac:	4659      	mov	r1, fp
 80235ae:	4628      	mov	r0, r5
 80235b0:	e9cd a302 	strd	sl, r3, [sp, #8]
 80235b4:	e9cd 2400 	strd	r2, r4, [sp]
 80235b8:	465b      	mov	r3, fp
 80235ba:	4a0a      	ldr	r2, [pc, #40]	; (80235e4 <etharp_query+0x1e0>)
 80235bc:	f7ff fd14 	bl	8022fe8 <etharp_raw>
    if (q == NULL) {
 80235c0:	e75b      	b.n	802347a <etharp_query+0x76>
    return ERR_ARG;
 80235c2:	f06f 000f 	mvn.w	r0, #15
 80235c6:	e758      	b.n	802347a <etharp_query+0x76>
        result = ERR_OK;
 80235c8:	4620      	mov	r0, r4
          r->next = new_entry;
 80235ca:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80235cc:	e755      	b.n	802347a <etharp_query+0x76>
      result = ERR_MEM;
 80235ce:	f04f 30ff 	mov.w	r0, #4294967295
 80235d2:	e752      	b.n	802347a <etharp_query+0x76>
        pbuf_free(p);
 80235d4:	4630      	mov	r0, r6
 80235d6:	f7f8 fdf3 	bl	801c1c0 <pbuf_free>
        result = ERR_MEM;
 80235da:	f04f 30ff 	mov.w	r0, #4294967295
 80235de:	e74c      	b.n	802347a <etharp_query+0x76>
 80235e0:	08047050 	.word	0x08047050
 80235e4:	08047048 	.word	0x08047048
 80235e8:	2002e7e0 	.word	0x2002e7e0
 80235ec:	08046b18 	.word	0x08046b18
 80235f0:	08046c90 	.word	0x08046c90
 80235f4:	0802b034 	.word	0x0802b034
 80235f8:	2002e4e0 	.word	0x2002e4e0
 80235fc:	08046ca0 	.word	0x08046ca0

08023600 <etharp_output>:
{
 8023600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023604:	460f      	mov	r7, r1
 8023606:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023608:	4605      	mov	r5, r0
{
 802360a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802360c:	2800      	cmp	r0, #0
 802360e:	f000 8086 	beq.w	802371e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023612:	2f00      	cmp	r7, #0
 8023614:	d072      	beq.n	80236fc <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023616:	2e00      	cmp	r6, #0
 8023618:	d079      	beq.n	802370e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802361a:	4629      	mov	r1, r5
 802361c:	6830      	ldr	r0, [r6, #0]
 802361e:	f000 fba7 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 8023622:	2800      	cmp	r0, #0
 8023624:	d160      	bne.n	80236e8 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023626:	6833      	ldr	r3, [r6, #0]
 8023628:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802362c:	2ae0      	cmp	r2, #224	; 0xe0
 802362e:	d03b      	beq.n	80236a8 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023630:	686a      	ldr	r2, [r5, #4]
 8023632:	68a9      	ldr	r1, [r5, #8]
 8023634:	405a      	eors	r2, r3
 8023636:	420a      	tst	r2, r1
 8023638:	d009      	beq.n	802364e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 802363a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802363c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023640:	4293      	cmp	r3, r2
 8023642:	d004      	beq.n	802364e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023644:	68eb      	ldr	r3, [r5, #12]
 8023646:	2b00      	cmp	r3, #0
 8023648:	d07b      	beq.n	8023742 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 802364a:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802364e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8023764 <etharp_output+0x164>
 8023652:	4b3d      	ldr	r3, [pc, #244]	; (8023748 <etharp_output+0x148>)
 8023654:	f898 2000 	ldrb.w	r2, [r8]
 8023658:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802365c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8023660:	7d19      	ldrb	r1, [r3, #20]
 8023662:	2901      	cmp	r1, #1
 8023664:	d902      	bls.n	802366c <etharp_output+0x6c>
 8023666:	6899      	ldr	r1, [r3, #8]
 8023668:	42a9      	cmp	r1, r5
 802366a:	d063      	beq.n	8023734 <etharp_output+0x134>
 802366c:	4c36      	ldr	r4, [pc, #216]	; (8023748 <etharp_output+0x148>)
{
 802366e:	2300      	movs	r3, #0
 8023670:	e003      	b.n	802367a <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023672:	2b20      	cmp	r3, #32
 8023674:	f104 0418 	add.w	r4, r4, #24
 8023678:	d038      	beq.n	80236ec <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802367a:	f894 c014 	ldrb.w	ip, [r4, #20]
 802367e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023680:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023682:	f1bc 0f01 	cmp.w	ip, #1
 8023686:	d9f4      	bls.n	8023672 <etharp_output+0x72>
 8023688:	68a0      	ldr	r0, [r4, #8]
 802368a:	42a8      	cmp	r0, r5
 802368c:	d1f1      	bne.n	8023672 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 802368e:	6860      	ldr	r0, [r4, #4]
 8023690:	6831      	ldr	r1, [r6, #0]
 8023692:	4281      	cmp	r1, r0
 8023694:	d1ed      	bne.n	8023672 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8023696:	4639      	mov	r1, r7
 8023698:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 802369a:	f888 2000 	strb.w	r2, [r8]
}
 802369e:	b004      	add	sp, #16
 80236a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 80236a4:	f7ff bd14 	b.w	80230d0 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80236a8:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80236aa:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80236ac:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80236ae:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80236b2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80236b6:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80236b8:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80236ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80236be:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80236c2:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 80236c6:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80236c8:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80236cc:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80236d0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80236d4:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 80236d8:	4639      	mov	r1, r7
 80236da:	4628      	mov	r0, r5
 80236dc:	9400      	str	r4, [sp, #0]
 80236de:	f001 f8c7 	bl	8024870 <ethernet_output>
}
 80236e2:	b004      	add	sp, #16
 80236e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 80236e8:	4b18      	ldr	r3, [pc, #96]	; (802374c <etharp_output+0x14c>)
 80236ea:	e7f1      	b.n	80236d0 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 80236ec:	463a      	mov	r2, r7
 80236ee:	4631      	mov	r1, r6
 80236f0:	4628      	mov	r0, r5
}
 80236f2:	b004      	add	sp, #16
 80236f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 80236f8:	f7ff be84 	b.w	8023404 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 80236fc:	4b14      	ldr	r3, [pc, #80]	; (8023750 <etharp_output+0x150>)
 80236fe:	f240 321f 	movw	r2, #799	; 0x31f
 8023702:	4914      	ldr	r1, [pc, #80]	; (8023754 <etharp_output+0x154>)
 8023704:	4814      	ldr	r0, [pc, #80]	; (8023758 <etharp_output+0x158>)
 8023706:	f002 fe25 	bl	8026354 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802370a:	2e00      	cmp	r6, #0
 802370c:	d185      	bne.n	802361a <etharp_output+0x1a>
 802370e:	4b10      	ldr	r3, [pc, #64]	; (8023750 <etharp_output+0x150>)
 8023710:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023714:	4911      	ldr	r1, [pc, #68]	; (802375c <etharp_output+0x15c>)
 8023716:	4810      	ldr	r0, [pc, #64]	; (8023758 <etharp_output+0x158>)
 8023718:	f002 fe1c 	bl	8026354 <iprintf>
 802371c:	e77d      	b.n	802361a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802371e:	4b0c      	ldr	r3, [pc, #48]	; (8023750 <etharp_output+0x150>)
 8023720:	f240 321e 	movw	r2, #798	; 0x31e
 8023724:	490e      	ldr	r1, [pc, #56]	; (8023760 <etharp_output+0x160>)
 8023726:	480c      	ldr	r0, [pc, #48]	; (8023758 <etharp_output+0x158>)
 8023728:	f002 fe14 	bl	8026354 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802372c:	2f00      	cmp	r7, #0
 802372e:	f47f af72 	bne.w	8023616 <etharp_output+0x16>
 8023732:	e7e3      	b.n	80236fc <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023734:	685b      	ldr	r3, [r3, #4]
 8023736:	6831      	ldr	r1, [r6, #0]
 8023738:	4299      	cmp	r1, r3
 802373a:	d197      	bne.n	802366c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802373c:	4639      	mov	r1, r7
 802373e:	4628      	mov	r0, r5
 8023740:	e7ad      	b.n	802369e <etharp_output+0x9e>
            return ERR_RTE;
 8023742:	f06f 0003 	mvn.w	r0, #3
 8023746:	e7cc      	b.n	80236e2 <etharp_output+0xe2>
 8023748:	2002e4e0 	.word	0x2002e4e0
 802374c:	08047048 	.word	0x08047048
 8023750:	08046b18 	.word	0x08046b18
 8023754:	08046cbc 	.word	0x08046cbc
 8023758:	0802b034 	.word	0x0802b034
 802375c:	08046c4c 	.word	0x08046c4c
 8023760:	0802e22c 	.word	0x0802e22c
 8023764:	2002e7e0 	.word	0x2002e7e0

08023768 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023768:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802376a:	2301      	movs	r3, #1
{
 802376c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802376e:	4c07      	ldr	r4, [pc, #28]	; (802378c <etharp_request+0x24>)
 8023770:	4a07      	ldr	r2, [pc, #28]	; (8023790 <etharp_request+0x28>)
 8023772:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023774:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023776:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802377a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 802377e:	9400      	str	r4, [sp, #0]
 8023780:	4619      	mov	r1, r3
 8023782:	f7ff fc31 	bl	8022fe8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8023786:	b004      	add	sp, #16
 8023788:	bd10      	pop	{r4, pc}
 802378a:	bf00      	nop
 802378c:	08047050 	.word	0x08047050
 8023790:	08047048 	.word	0x08047048

08023794 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023796:	460e      	mov	r6, r1
 8023798:	b087      	sub	sp, #28
 802379a:	4617      	mov	r7, r2
 802379c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802379e:	2124      	movs	r1, #36	; 0x24
 80237a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80237a4:	2022      	movs	r0, #34	; 0x22
 80237a6:	f7f8 fb39 	bl	801be1c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80237aa:	b3a8      	cbz	r0, 8023818 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80237ac:	8943      	ldrh	r3, [r0, #10]
 80237ae:	4605      	mov	r5, r0
 80237b0:	2b23      	cmp	r3, #35	; 0x23
 80237b2:	d933      	bls.n	802381c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80237b4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80237b6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 80237b8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 80237ba:	2600      	movs	r6, #0
  icmphdr->code = code;
 80237bc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 80237be:	7126      	strb	r6, [r4, #4]
 80237c0:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 80237c2:	71a6      	strb	r6, [r4, #6]
 80237c4:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80237c6:	6818      	ldr	r0, [r3, #0]
 80237c8:	6859      	ldr	r1, [r3, #4]
 80237ca:	689a      	ldr	r2, [r3, #8]
 80237cc:	68df      	ldr	r7, [r3, #12]
 80237ce:	60a0      	str	r0, [r4, #8]
 80237d0:	6167      	str	r7, [r4, #20]
 80237d2:	60e1      	str	r1, [r4, #12]
 80237d4:	6122      	str	r2, [r4, #16]
 80237d6:	6918      	ldr	r0, [r3, #16]
 80237d8:	6959      	ldr	r1, [r3, #20]
 80237da:	699a      	ldr	r2, [r3, #24]
 80237dc:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80237de:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80237e0:	61e1      	str	r1, [r4, #28]
 80237e2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 80237e4:	68db      	ldr	r3, [r3, #12]
 80237e6:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 80237e8:	f000 f8e6 	bl	80239b8 <ip4_route>
#endif
  if (netif != NULL) {
 80237ec:	4607      	mov	r7, r0
 80237ee:	b180      	cbz	r0, 8023812 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80237f0:	8969      	ldrh	r1, [r5, #10]
 80237f2:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 80237f4:	70a6      	strb	r6, [r4, #2]
 80237f6:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80237f8:	f7f7 fa4e 	bl	801ac98 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80237fc:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80237fe:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023800:	aa05      	add	r2, sp, #20
 8023802:	4631      	mov	r1, r6
 8023804:	4628      	mov	r0, r5
 8023806:	9600      	str	r6, [sp, #0]
 8023808:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802380c:	23ff      	movs	r3, #255	; 0xff
 802380e:	f000 fa9d 	bl	8023d4c <ip4_output_if>
  }
  pbuf_free(q);
 8023812:	4628      	mov	r0, r5
 8023814:	f7f8 fcd4 	bl	801c1c0 <pbuf_free>
}
 8023818:	b007      	add	sp, #28
 802381a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802381c:	4b03      	ldr	r3, [pc, #12]	; (802382c <icmp_send_response+0x98>)
 802381e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023822:	4903      	ldr	r1, [pc, #12]	; (8023830 <icmp_send_response+0x9c>)
 8023824:	4803      	ldr	r0, [pc, #12]	; (8023834 <icmp_send_response+0xa0>)
 8023826:	f002 fd95 	bl	8026354 <iprintf>
 802382a:	e7c3      	b.n	80237b4 <icmp_send_response+0x20>
 802382c:	08046cc8 	.word	0x08046cc8
 8023830:	08046d00 	.word	0x08046d00
 8023834:	0802b034 	.word	0x0802b034

08023838 <icmp_input>:
{
 8023838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 802383c:	4f54      	ldr	r7, [pc, #336]	; (8023990 <icmp_input+0x158>)
{
 802383e:	b086      	sub	sp, #24
 8023840:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8023842:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8023846:	f898 4000 	ldrb.w	r4, [r8]
 802384a:	f004 040f 	and.w	r4, r4, #15
 802384e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8023850:	2c13      	cmp	r4, #19
 8023852:	d913      	bls.n	802387c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8023854:	8943      	ldrh	r3, [r0, #10]
 8023856:	2b03      	cmp	r3, #3
 8023858:	d910      	bls.n	802387c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 802385a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 802385c:	781b      	ldrb	r3, [r3, #0]
 802385e:	2b08      	cmp	r3, #8
 8023860:	d10c      	bne.n	802387c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023862:	6978      	ldr	r0, [r7, #20]
 8023864:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8023868:	2be0      	cmp	r3, #224	; 0xe0
 802386a:	d007      	beq.n	802387c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802386c:	460e      	mov	r6, r1
 802386e:	6839      	ldr	r1, [r7, #0]
 8023870:	f000 fa7e 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 8023874:	b910      	cbnz	r0, 802387c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023876:	892b      	ldrh	r3, [r5, #8]
 8023878:	2b07      	cmp	r3, #7
 802387a:	d805      	bhi.n	8023888 <icmp_input+0x50>
  pbuf_free(p);
 802387c:	4628      	mov	r0, r5
}
 802387e:	b006      	add	sp, #24
 8023880:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8023884:	f7f8 bc9c 	b.w	801c1c0 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8023888:	4628      	mov	r0, r5
 802388a:	f7f7 fa0b 	bl	801aca4 <inet_chksum_pbuf>
 802388e:	2800      	cmp	r0, #0
 8023890:	d1f4      	bne.n	802387c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023892:	f104 010e 	add.w	r1, r4, #14
 8023896:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8023898:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802389c:	9105      	str	r1, [sp, #20]
 802389e:	f7f8 fbcf 	bl	801c040 <pbuf_add_header>
 80238a2:	9905      	ldr	r1, [sp, #20]
 80238a4:	2800      	cmp	r0, #0
 80238a6:	d058      	beq.n	802395a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80238a8:	892b      	ldrh	r3, [r5, #8]
 80238aa:	eb03 0109 	add.w	r1, r3, r9
 80238ae:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80238b0:	428b      	cmp	r3, r1
 80238b2:	d8e3      	bhi.n	802387c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80238b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80238b8:	200e      	movs	r0, #14
 80238ba:	f7f8 faaf 	bl	801be1c <pbuf_alloc>
        if (r == NULL) {
 80238be:	4682      	mov	sl, r0
 80238c0:	2800      	cmp	r0, #0
 80238c2:	d0db      	beq.n	802387c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80238c4:	8942      	ldrh	r2, [r0, #10]
 80238c6:	f104 0308 	add.w	r3, r4, #8
 80238ca:	429a      	cmp	r2, r3
 80238cc:	d351      	bcc.n	8023972 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 80238ce:	4641      	mov	r1, r8
 80238d0:	4622      	mov	r2, r4
 80238d2:	6840      	ldr	r0, [r0, #4]
 80238d4:	f001 fd78 	bl	80253c8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80238d8:	4621      	mov	r1, r4
 80238da:	4650      	mov	r0, sl
 80238dc:	f7f8 fbe4 	bl	801c0a8 <pbuf_remove_header>
 80238e0:	2800      	cmp	r0, #0
 80238e2:	d14a      	bne.n	802397a <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 80238e4:	4629      	mov	r1, r5
 80238e6:	4650      	mov	r0, sl
 80238e8:	f7f8 fcf2 	bl	801c2d0 <pbuf_copy>
 80238ec:	2800      	cmp	r0, #0
 80238ee:	d140      	bne.n	8023972 <icmp_input+0x13a>
        pbuf_free(p);
 80238f0:	4628      	mov	r0, r5
 80238f2:	4655      	mov	r5, sl
 80238f4:	f7f8 fc64 	bl	801c1c0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80238f8:	4621      	mov	r1, r4
 80238fa:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 80238fc:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8023900:	f7f8 fb9e 	bl	801c040 <pbuf_add_header>
 8023904:	2800      	cmp	r0, #0
 8023906:	d1b9      	bne.n	802387c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023908:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802390a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 802390e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023910:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8023912:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023914:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8023916:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023918:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802391a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802391e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023922:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023924:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8023926:	bf8c      	ite	hi
 8023928:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802392a:	3308      	addls	r3, #8
 802392c:	b29b      	uxth	r3, r3
 802392e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023932:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8023936:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023938:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802393c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802393e:	f7f7 f9ab 	bl	801ac98 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023942:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023944:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023946:	4643      	mov	r3, r8
 8023948:	4912      	ldr	r1, [pc, #72]	; (8023994 <icmp_input+0x15c>)
 802394a:	4628      	mov	r0, r5
 802394c:	9700      	str	r7, [sp, #0]
 802394e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8023952:	463a      	mov	r2, r7
 8023954:	f000 f9fa 	bl	8023d4c <ip4_output_if>
  pbuf_free(p);
 8023958:	e790      	b.n	802387c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802395a:	4628      	mov	r0, r5
 802395c:	f7f8 fba4 	bl	801c0a8 <pbuf_remove_header>
 8023960:	2800      	cmp	r0, #0
 8023962:	d0c9      	beq.n	80238f8 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023964:	4b0c      	ldr	r3, [pc, #48]	; (8023998 <icmp_input+0x160>)
 8023966:	22c7      	movs	r2, #199	; 0xc7
 8023968:	490c      	ldr	r1, [pc, #48]	; (802399c <icmp_input+0x164>)
 802396a:	480d      	ldr	r0, [pc, #52]	; (80239a0 <icmp_input+0x168>)
 802396c:	f002 fcf2 	bl	8026354 <iprintf>
          goto icmperr;
 8023970:	e784      	b.n	802387c <icmp_input+0x44>
          pbuf_free(r);
 8023972:	4650      	mov	r0, sl
 8023974:	f7f8 fc24 	bl	801c1c0 <pbuf_free>
          goto icmperr;
 8023978:	e780      	b.n	802387c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802397a:	4b07      	ldr	r3, [pc, #28]	; (8023998 <icmp_input+0x160>)
 802397c:	22b6      	movs	r2, #182	; 0xb6
 802397e:	4909      	ldr	r1, [pc, #36]	; (80239a4 <icmp_input+0x16c>)
 8023980:	4807      	ldr	r0, [pc, #28]	; (80239a0 <icmp_input+0x168>)
 8023982:	f002 fce7 	bl	8026354 <iprintf>
          pbuf_free(r);
 8023986:	4650      	mov	r0, sl
 8023988:	f7f8 fc1a 	bl	801c1c0 <pbuf_free>
          goto icmperr;
 802398c:	e776      	b.n	802387c <icmp_input+0x44>
 802398e:	bf00      	nop
 8023990:	2001f298 	.word	0x2001f298
 8023994:	2001f2ac 	.word	0x2001f2ac
 8023998:	08046cc8 	.word	0x08046cc8
 802399c:	08046d64 	.word	0x08046d64
 80239a0:	0802b034 	.word	0x0802b034
 80239a4:	08046d2c 	.word	0x08046d2c

080239a8 <icmp_dest_unreach>:
{
 80239a8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80239aa:	2103      	movs	r1, #3
 80239ac:	f7ff bef2 	b.w	8023794 <icmp_send_response>

080239b0 <icmp_time_exceeded>:
{
 80239b0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80239b2:	210b      	movs	r1, #11
 80239b4:	f7ff beee 	b.w	8023794 <icmp_send_response>

080239b8 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80239b8:	4b19      	ldr	r3, [pc, #100]	; (8023a20 <ip4_route+0x68>)
{
 80239ba:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 80239bc:	681b      	ldr	r3, [r3, #0]
 80239be:	b1ab      	cbz	r3, 80239ec <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80239c0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80239c4:	07d4      	lsls	r4, r2, #31
 80239c6:	d5f9      	bpl.n	80239bc <ip4_route+0x4>
 80239c8:	0751      	lsls	r1, r2, #29
 80239ca:	d5f7      	bpl.n	80239bc <ip4_route+0x4>
 80239cc:	6859      	ldr	r1, [r3, #4]
 80239ce:	2900      	cmp	r1, #0
 80239d0:	d0f4      	beq.n	80239bc <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80239d2:	6804      	ldr	r4, [r0, #0]
 80239d4:	689d      	ldr	r5, [r3, #8]
 80239d6:	4061      	eors	r1, r4
 80239d8:	4229      	tst	r1, r5
 80239da:	d004      	beq.n	80239e6 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80239dc:	0792      	lsls	r2, r2, #30
 80239de:	d4ed      	bmi.n	80239bc <ip4_route+0x4>
 80239e0:	68da      	ldr	r2, [r3, #12]
 80239e2:	4294      	cmp	r4, r2
 80239e4:	d1ea      	bne.n	80239bc <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 80239e6:	4618      	mov	r0, r3
 80239e8:	bc30      	pop	{r4, r5}
 80239ea:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80239ec:	4b0d      	ldr	r3, [pc, #52]	; (8023a24 <ip4_route+0x6c>)
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d0f8      	beq.n	80239e6 <ip4_route+0x2e>
 80239f4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80239f8:	f002 0205 	and.w	r2, r2, #5
 80239fc:	2a05      	cmp	r2, #5
 80239fe:	d108      	bne.n	8023a12 <ip4_route+0x5a>
 8023a00:	685a      	ldr	r2, [r3, #4]
 8023a02:	b152      	cbz	r2, 8023a1a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023a04:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8023a06:	2a7f      	cmp	r2, #127	; 0x7f
 8023a08:	bf08      	it	eq
 8023a0a:	2300      	moveq	r3, #0
}
 8023a0c:	bc30      	pop	{r4, r5}
 8023a0e:	4618      	mov	r0, r3
 8023a10:	4770      	bx	lr
    return NULL;
 8023a12:	2300      	movs	r3, #0
}
 8023a14:	bc30      	pop	{r4, r5}
 8023a16:	4618      	mov	r0, r3
 8023a18:	4770      	bx	lr
    return NULL;
 8023a1a:	4613      	mov	r3, r2
 8023a1c:	e7e3      	b.n	80239e6 <ip4_route+0x2e>
 8023a1e:	bf00      	nop
 8023a20:	2002e428 	.word	0x2002e428
 8023a24:	2002e424 	.word	0x2002e424

08023a28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023a2c:	6847      	ldr	r7, [r0, #4]
{
 8023a2e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8023a30:	783b      	ldrb	r3, [r7, #0]
 8023a32:	091a      	lsrs	r2, r3, #4
 8023a34:	2a04      	cmp	r2, #4
 8023a36:	f040 80a8 	bne.w	8023b8a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023a3a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023a3e:	8878      	ldrh	r0, [r7, #2]
 8023a40:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023a42:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023a46:	f7f6 fb7f 	bl	801a148 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023a4a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023a4c:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023a4e:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8023a50:	4283      	cmp	r3, r0
 8023a52:	f200 80a0 	bhi.w	8023b96 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023a56:	8963      	ldrh	r3, [r4, #10]
 8023a58:	42ab      	cmp	r3, r5
 8023a5a:	f0c0 8096 	bcc.w	8023b8a <ip4_input+0x162>
 8023a5e:	8923      	ldrh	r3, [r4, #8]
 8023a60:	4543      	cmp	r3, r8
 8023a62:	f0c0 8092 	bcc.w	8023b8a <ip4_input+0x162>
 8023a66:	2d13      	cmp	r5, #19
 8023a68:	f240 808f 	bls.w	8023b8a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023a6c:	693b      	ldr	r3, [r7, #16]
 8023a6e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8023c10 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023a76:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023a7a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023a7c:	68f8      	ldr	r0, [r7, #12]
 8023a7e:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023a82:	d073      	beq.n	8023b6c <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023a84:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8023a88:	07d2      	lsls	r2, r2, #31
 8023a8a:	d503      	bpl.n	8023a94 <ip4_input+0x6c>
 8023a8c:	6872      	ldr	r2, [r6, #4]
 8023a8e:	2a00      	cmp	r2, #0
 8023a90:	f040 8094 	bne.w	8023bbc <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023a94:	b2db      	uxtb	r3, r3
 8023a96:	2b7f      	cmp	r3, #127	; 0x7f
 8023a98:	d06c      	beq.n	8023b74 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023a9a:	4b5c      	ldr	r3, [pc, #368]	; (8023c0c <ip4_input+0x1e4>)
 8023a9c:	681d      	ldr	r5, [r3, #0]
 8023a9e:	b935      	cbnz	r5, 8023aae <ip4_input+0x86>
 8023aa0:	e068      	b.n	8023b74 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023aa2:	f000 f965 	bl	8023d70 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023aa6:	b980      	cbnz	r0, 8023aca <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8023aa8:	682d      	ldr	r5, [r5, #0]
 8023aaa:	2d00      	cmp	r5, #0
 8023aac:	d062      	beq.n	8023b74 <ip4_input+0x14c>
          if (netif == inp) {
 8023aae:	42ae      	cmp	r6, r5
 8023ab0:	d0fa      	beq.n	8023aa8 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023ab2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8023ab6:	07db      	lsls	r3, r3, #31
 8023ab8:	d5f6      	bpl.n	8023aa8 <ip4_input+0x80>
 8023aba:	686b      	ldr	r3, [r5, #4]
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	d0f3      	beq.n	8023aa8 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023ac0:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023ac4:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023ac6:	4283      	cmp	r3, r0
 8023ac8:	d1eb      	bne.n	8023aa2 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023aca:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023ace:	2800      	cmp	r0, #0
 8023ad0:	d157      	bne.n	8023b82 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023ad2:	88fb      	ldrh	r3, [r7, #6]
 8023ad4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8023ad8:	b133      	cbz	r3, 8023ae8 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023ada:	4620      	mov	r0, r4
 8023adc:	f000 fb1c 	bl	8024118 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023ae0:	4604      	mov	r4, r0
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	d054      	beq.n	8023b90 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023ae6:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8023ae8:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8023aec:	4631      	mov	r1, r6
 8023aee:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8023af0:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023af4:	783b      	ldrb	r3, [r7, #0]
 8023af6:	f003 030f 	and.w	r3, r3, #15
 8023afa:	009b      	lsls	r3, r3, #2
 8023afc:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8023b00:	f7f8 fd9e 	bl	801c640 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8023b04:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8023b06:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8023b08:	d024      	beq.n	8023b54 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023b0a:	4649      	mov	r1, r9
 8023b0c:	4620      	mov	r0, r4
 8023b0e:	f7f8 facb 	bl	801c0a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023b12:	7a7b      	ldrb	r3, [r7, #9]
 8023b14:	2b06      	cmp	r3, #6
 8023b16:	d065      	beq.n	8023be4 <ip4_input+0x1bc>
 8023b18:	2b11      	cmp	r3, #17
 8023b1a:	d05e      	beq.n	8023bda <ip4_input+0x1b2>
 8023b1c:	2b01      	cmp	r3, #1
 8023b1e:	d057      	beq.n	8023bd0 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8023b20:	f1ba 0f02 	cmp.w	sl, #2
 8023b24:	d013      	beq.n	8023b4e <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023b26:	4629      	mov	r1, r5
 8023b28:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8023b2c:	f000 f920 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 8023b30:	b968      	cbnz	r0, 8023b4e <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023b32:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023b3a:	2be0      	cmp	r3, #224	; 0xe0
 8023b3c:	d007      	beq.n	8023b4e <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023b3e:	4649      	mov	r1, r9
 8023b40:	4620      	mov	r0, r4
 8023b42:	f7f8 fae9 	bl	801c118 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023b46:	2102      	movs	r1, #2
 8023b48:	4620      	mov	r0, r4
 8023b4a:	f7ff ff2d 	bl	80239a8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023b4e:	4620      	mov	r0, r4
 8023b50:	f7f8 fb36 	bl	801c1c0 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023b54:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8023b56:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8023b58:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8023b5c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023b60:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023b64:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8023b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023b6c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8023b70:	07d9      	lsls	r1, r3, #31
 8023b72:	d41e      	bmi.n	8023bb2 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8023b74:	7a7b      	ldrb	r3, [r7, #9]
 8023b76:	2b11      	cmp	r3, #17
 8023b78:	d039      	beq.n	8023bee <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023b7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023b7e:	b120      	cbz	r0, 8023b8a <ip4_input+0x162>
 8023b80:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023b82:	4631      	mov	r1, r6
 8023b84:	f000 f8f4 	bl	8023d70 <ip4_addr_isbroadcast_u32>
 8023b88:	b150      	cbz	r0, 8023ba0 <ip4_input+0x178>
    pbuf_free(p);
 8023b8a:	4620      	mov	r0, r4
 8023b8c:	f7f8 fb18 	bl	801c1c0 <pbuf_free>
}
 8023b90:	2000      	movs	r0, #0
 8023b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8023b96:	4601      	mov	r1, r0
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f7f8 f9f9 	bl	801bf90 <pbuf_realloc>
 8023b9e:	e75a      	b.n	8023a56 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023ba0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8023ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023ba8:	2be0      	cmp	r3, #224	; 0xe0
 8023baa:	d0ee      	beq.n	8023b8a <ip4_input+0x162>
  if (netif == NULL) {
 8023bac:	2d00      	cmp	r5, #0
 8023bae:	d190      	bne.n	8023ad2 <ip4_input+0xaa>
 8023bb0:	e7eb      	b.n	8023b8a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023bb2:	6873      	ldr	r3, [r6, #4]
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	d0dd      	beq.n	8023b74 <ip4_input+0x14c>
 8023bb8:	4635      	mov	r5, r6
 8023bba:	e788      	b.n	8023ace <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023bbc:	4293      	cmp	r3, r2
 8023bbe:	d0fb      	beq.n	8023bb8 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023bc0:	4618      	mov	r0, r3
 8023bc2:	4631      	mov	r1, r6
 8023bc4:	f000 f8d4 	bl	8023d70 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023bc8:	b9e0      	cbnz	r0, 8023c04 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023bca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023bce:	e761      	b.n	8023a94 <ip4_input+0x6c>
        icmp_input(p, inp);
 8023bd0:	4631      	mov	r1, r6
 8023bd2:	4620      	mov	r0, r4
 8023bd4:	f7ff fe30 	bl	8023838 <icmp_input>
        break;
 8023bd8:	e7bc      	b.n	8023b54 <ip4_input+0x12c>
        udp_input(p, inp);
 8023bda:	4631      	mov	r1, r6
 8023bdc:	4620      	mov	r0, r4
 8023bde:	f7fd f8a1 	bl	8020d24 <udp_input>
        break;
 8023be2:	e7b7      	b.n	8023b54 <ip4_input+0x12c>
        tcp_input(p, inp);
 8023be4:	4631      	mov	r1, r6
 8023be6:	4620      	mov	r0, r4
 8023be8:	f7fa fefc 	bl	801e9e4 <tcp_input>
        break;
 8023bec:	e7b2      	b.n	8023b54 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8023bee:	eb07 0309 	add.w	r3, r7, r9
 8023bf2:	885b      	ldrh	r3, [r3, #2]
 8023bf4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8023bf8:	d1bf      	bne.n	8023b7a <ip4_input+0x152>
 8023bfa:	4635      	mov	r5, r6
  if (netif == NULL) {
 8023bfc:	2d00      	cmp	r5, #0
 8023bfe:	f47f af68 	bne.w	8023ad2 <ip4_input+0xaa>
 8023c02:	e7c2      	b.n	8023b8a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023c04:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023c08:	4635      	mov	r5, r6
 8023c0a:	e760      	b.n	8023ace <ip4_input+0xa6>
 8023c0c:	2002e428 	.word	0x2002e428
 8023c10:	2001f298 	.word	0x2001f298

08023c14 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c18:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023c1a:	7b83      	ldrb	r3, [r0, #14]
{
 8023c1c:	b083      	sub	sp, #12
 8023c1e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023c20:	2b01      	cmp	r3, #1
{
 8023c22:	4689      	mov	r9, r1
 8023c24:	4617      	mov	r7, r2
 8023c26:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023c2a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8023c2e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023c32:	d158      	bne.n	8023ce6 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023c34:	2f00      	cmp	r7, #0
 8023c36:	d05f      	beq.n	8023cf8 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023c38:	2114      	movs	r1, #20
 8023c3a:	4620      	mov	r0, r4
 8023c3c:	f7f8 fa00 	bl	801c040 <pbuf_add_header>
 8023c40:	2800      	cmp	r0, #0
 8023c42:	d174      	bne.n	8023d2e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023c44:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8023c46:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023c48:	2b13      	cmp	r3, #19
 8023c4a:	d95d      	bls.n	8023d08 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023c4c:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8023c50:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8023c54:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8023c58:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8023c5a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023c5c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8023c5e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8023c60:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023c62:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8023c66:	fa10 f383 	uxtah	r3, r0, r3
 8023c6a:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8023c6c:	ea4f 252a 	mov.w	r5, sl, asr #8
 8023c70:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8023c74:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023c78:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023c7a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8023d48 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023c7e:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8023c80:	8920      	ldrh	r0, [r4, #8]
 8023c82:	f7f6 fa61 	bl	801a148 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8023c86:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8023c88:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8023c8a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8023c8c:	71b3      	strb	r3, [r6, #6]
 8023c8e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023c90:	f8ba 0000 	ldrh.w	r0, [sl]
 8023c94:	f7f6 fa58 	bl	801a148 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023c98:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8023c9c:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023c9e:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8023ca0:	3201      	adds	r2, #1
 8023ca2:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8023ca6:	f1b9 0f00 	cmp.w	r9, #0
 8023caa:	d035      	beq.n	8023d18 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8023cac:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8023cb0:	fa13 f382 	uxtah	r3, r3, r2
 8023cb4:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8023cb6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8023cba:	b29a      	uxth	r2, r3
 8023cbc:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8023cc0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8023cc4:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8023cc6:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8023cc8:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8023ccc:	b113      	cbz	r3, 8023cd4 <ip4_output_if_src+0xc0>
 8023cce:	8922      	ldrh	r2, [r4, #8]
 8023cd0:	429a      	cmp	r2, r3
 8023cd2:	d824      	bhi.n	8023d1e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8023cd4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023cd8:	463a      	mov	r2, r7
 8023cda:	4621      	mov	r1, r4
 8023cdc:	4640      	mov	r0, r8
 8023cde:	4798      	blx	r3
}
 8023ce0:	b003      	add	sp, #12
 8023ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023ce6:	4b13      	ldr	r3, [pc, #76]	; (8023d34 <ip4_output_if_src+0x120>)
 8023ce8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023cec:	4912      	ldr	r1, [pc, #72]	; (8023d38 <ip4_output_if_src+0x124>)
 8023cee:	4813      	ldr	r0, [pc, #76]	; (8023d3c <ip4_output_if_src+0x128>)
 8023cf0:	f002 fb30 	bl	8026354 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8023cf4:	2f00      	cmp	r7, #0
 8023cf6:	d19f      	bne.n	8023c38 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8023cf8:	8963      	ldrh	r3, [r4, #10]
 8023cfa:	2b13      	cmp	r3, #19
 8023cfc:	d917      	bls.n	8023d2e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8023cfe:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8023d00:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8023d02:	691b      	ldr	r3, [r3, #16]
 8023d04:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8023d06:	e7df      	b.n	8023cc8 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023d08:	4b0a      	ldr	r3, [pc, #40]	; (8023d34 <ip4_output_if_src+0x120>)
 8023d0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8023d0e:	490c      	ldr	r1, [pc, #48]	; (8023d40 <ip4_output_if_src+0x12c>)
 8023d10:	480a      	ldr	r0, [pc, #40]	; (8023d3c <ip4_output_if_src+0x128>)
 8023d12:	f002 fb1f 	bl	8026354 <iprintf>
 8023d16:	e799      	b.n	8023c4c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8023d18:	4a0a      	ldr	r2, [pc, #40]	; (8023d44 <ip4_output_if_src+0x130>)
 8023d1a:	6812      	ldr	r2, [r2, #0]
 8023d1c:	e7c8      	b.n	8023cb0 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 8023d1e:	463a      	mov	r2, r7
 8023d20:	4641      	mov	r1, r8
 8023d22:	4620      	mov	r0, r4
 8023d24:	f000 fc36 	bl	8024594 <ip4_frag>
}
 8023d28:	b003      	add	sp, #12
 8023d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8023d2e:	f06f 0001 	mvn.w	r0, #1
 8023d32:	e7d5      	b.n	8023ce0 <ip4_output_if_src+0xcc>
 8023d34:	08046d98 	.word	0x08046d98
 8023d38:	08046dcc 	.word	0x08046dcc
 8023d3c:	0802b034 	.word	0x0802b034
 8023d40:	08046dd8 	.word	0x08046dd8
 8023d44:	08046e50 	.word	0x08046e50
 8023d48:	2002e7e2 	.word	0x2002e7e2

08023d4c <ip4_output_if>:
{
 8023d4c:	b4f0      	push	{r4, r5, r6, r7}
 8023d4e:	9c06      	ldr	r4, [sp, #24]
 8023d50:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8023d54:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8023d58:	b11a      	cbz	r2, 8023d62 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8023d5a:	b109      	cbz	r1, 8023d60 <ip4_output_if+0x14>
 8023d5c:	680f      	ldr	r7, [r1, #0]
 8023d5e:	b907      	cbnz	r7, 8023d62 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8023d60:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023d62:	9504      	str	r5, [sp, #16]
 8023d64:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8023d68:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023d6a:	f7ff bf53 	b.w	8023c14 <ip4_output_if_src>
 8023d6e:	bf00      	nop

08023d70 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8023d70:	1e43      	subs	r3, r0, #1
 8023d72:	3303      	adds	r3, #3
 8023d74:	d814      	bhi.n	8023da0 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8023d76:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8023d7a:	f013 0302 	ands.w	r3, r3, #2
 8023d7e:	d00d      	beq.n	8023d9c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8023d80:	684b      	ldr	r3, [r1, #4]
 8023d82:	4283      	cmp	r3, r0
 8023d84:	d00f      	beq.n	8023da6 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8023d86:	688a      	ldr	r2, [r1, #8]
 8023d88:	4043      	eors	r3, r0
 8023d8a:	4213      	tst	r3, r2
 8023d8c:	d10b      	bne.n	8023da6 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023d8e:	43d3      	mvns	r3, r2
 8023d90:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8023d94:	1ac3      	subs	r3, r0, r3
 8023d96:	fab3 f383 	clz	r3, r3
 8023d9a:	095b      	lsrs	r3, r3, #5
  }
}
 8023d9c:	4618      	mov	r0, r3
 8023d9e:	4770      	bx	lr
    return 1;
 8023da0:	2301      	movs	r3, #1
}
 8023da2:	4618      	mov	r0, r3
 8023da4:	4770      	bx	lr
    return 0;
 8023da6:	2300      	movs	r3, #0
}
 8023da8:	4618      	mov	r0, r3
 8023daa:	4770      	bx	lr

08023dac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8023dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8023db0:	4e4f      	ldr	r6, [pc, #316]	; (8023ef0 <ip4addr_aton+0x144>)
{
 8023db2:	b085      	sub	sp, #20
  c = *cp;
 8023db4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8023db6:	5cf2      	ldrb	r2, [r6, r3]
 8023db8:	0754      	lsls	r4, r2, #29
 8023dba:	d538      	bpl.n	8023e2e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8023dbc:	46e9      	mov	r9, sp
 8023dbe:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8023dc0:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8023dc4:	464f      	mov	r7, r9
    if (c == '0') {
 8023dc6:	2b30      	cmp	r3, #48	; 0x30
 8023dc8:	d035      	beq.n	8023e36 <ip4addr_aton+0x8a>
    base = 10;
 8023dca:	210a      	movs	r1, #10
 8023dcc:	1c42      	adds	r2, r0, #1
 8023dce:	2400      	movs	r4, #0
 8023dd0:	e003      	b.n	8023dda <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8023dd2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8023dd6:	7813      	ldrb	r3, [r2, #0]
 8023dd8:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8023dda:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8023dde:	f103 0e0a 	add.w	lr, r3, #10
 8023de2:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8023de6:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8023dea:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8023dee:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8023df2:	d1ee      	bne.n	8023dd2 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8023df4:	2910      	cmp	r1, #16
 8023df6:	d10d      	bne.n	8023e14 <ip4addr_aton+0x68>
 8023df8:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8023dfc:	d00a      	beq.n	8023e14 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8023dfe:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8023e02:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8023e04:	bf0c      	ite	eq
 8023e06:	2061      	moveq	r0, #97	; 0x61
 8023e08:	2041      	movne	r0, #65	; 0x41
 8023e0a:	ebae 0e00 	sub.w	lr, lr, r0
 8023e0e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8023e12:	e7e1      	b.n	8023dd8 <ip4addr_aton+0x2c>
    if (c == '.') {
 8023e14:	2b2e      	cmp	r3, #46	; 0x2e
 8023e16:	d11a      	bne.n	8023e4e <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8023e18:	4547      	cmp	r7, r8
 8023e1a:	d008      	beq.n	8023e2e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8023e1c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8023e20:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8023e24:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8023e28:	5cf2      	ldrb	r2, [r6, r3]
 8023e2a:	0752      	lsls	r2, r2, #29
 8023e2c:	d4cb      	bmi.n	8023dc6 <ip4addr_aton+0x1a>
      return 0;
 8023e2e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8023e30:	b005      	add	sp, #20
 8023e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8023e36:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8023e38:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8023e3c:	2a58      	cmp	r2, #88	; 0x58
 8023e3e:	d002      	beq.n	8023e46 <ip4addr_aton+0x9a>
      c = *++cp;
 8023e40:	3001      	adds	r0, #1
        base = 8;
 8023e42:	2108      	movs	r1, #8
 8023e44:	e7c2      	b.n	8023dcc <ip4addr_aton+0x20>
        c = *++cp;
 8023e46:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8023e48:	2110      	movs	r1, #16
        c = *++cp;
 8023e4a:	3002      	adds	r0, #2
 8023e4c:	e7be      	b.n	8023dcc <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8023e4e:	b113      	cbz	r3, 8023e56 <ip4addr_aton+0xaa>
 8023e50:	f01c 0f08 	tst.w	ip, #8
 8023e54:	d0eb      	beq.n	8023e2e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8023e56:	eba7 0009 	sub.w	r0, r7, r9
 8023e5a:	1080      	asrs	r0, r0, #2
 8023e5c:	3001      	adds	r0, #1
 8023e5e:	2804      	cmp	r0, #4
 8023e60:	d83e      	bhi.n	8023ee0 <ip4addr_aton+0x134>
 8023e62:	a301      	add	r3, pc, #4	; (adr r3, 8023e68 <ip4addr_aton+0xbc>)
 8023e64:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8023e68:	08023e31 	.word	0x08023e31
 8023e6c:	08023e8d 	.word	0x08023e8d
 8023e70:	08023e7d 	.word	0x08023e7d
 8023e74:	08023ec1 	.word	0x08023ec1
 8023e78:	08023e9d 	.word	0x08023e9d
      if (val > 0xffffffUL) {
 8023e7c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8023e80:	d2d5      	bcs.n	8023e2e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8023e82:	9b00      	ldr	r3, [sp, #0]
 8023e84:	2bff      	cmp	r3, #255	; 0xff
 8023e86:	d8d2      	bhi.n	8023e2e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8023e88:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8023e8c:	b335      	cbz	r5, 8023edc <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8023e8e:	4620      	mov	r0, r4
 8023e90:	f7f6 f95e 	bl	801a150 <lwip_htonl>
 8023e94:	4603      	mov	r3, r0
  return 1;
 8023e96:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8023e98:	602b      	str	r3, [r5, #0]
 8023e9a:	e7c9      	b.n	8023e30 <ip4addr_aton+0x84>
      if (val > 0xff) {
 8023e9c:	2cff      	cmp	r4, #255	; 0xff
 8023e9e:	d8c6      	bhi.n	8023e2e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8023ea0:	9900      	ldr	r1, [sp, #0]
 8023ea2:	29ff      	cmp	r1, #255	; 0xff
 8023ea4:	d8c3      	bhi.n	8023e2e <ip4addr_aton+0x82>
 8023ea6:	9b01      	ldr	r3, [sp, #4]
 8023ea8:	2bff      	cmp	r3, #255	; 0xff
 8023eaa:	d8c0      	bhi.n	8023e2e <ip4addr_aton+0x82>
 8023eac:	9a02      	ldr	r2, [sp, #8]
 8023eae:	2aff      	cmp	r2, #255	; 0xff
 8023eb0:	d8bd      	bhi.n	8023e2e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8023eb2:	041b      	lsls	r3, r3, #16
 8023eb4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8023eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023ebc:	431c      	orrs	r4, r3
      break;
 8023ebe:	e7e5      	b.n	8023e8c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8023ec0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8023ec4:	d2b3      	bcs.n	8023e2e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8023ec6:	9a00      	ldr	r2, [sp, #0]
 8023ec8:	2aff      	cmp	r2, #255	; 0xff
 8023eca:	d8b0      	bhi.n	8023e2e <ip4addr_aton+0x82>
 8023ecc:	9b01      	ldr	r3, [sp, #4]
 8023ece:	2bff      	cmp	r3, #255	; 0xff
 8023ed0:	d8ad      	bhi.n	8023e2e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8023ed2:	041b      	lsls	r3, r3, #16
 8023ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8023ed8:	431c      	orrs	r4, r3
      break;
 8023eda:	e7d7      	b.n	8023e8c <ip4addr_aton+0xe0>
  return 1;
 8023edc:	2001      	movs	r0, #1
 8023ede:	e7a7      	b.n	8023e30 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8023ee0:	4b04      	ldr	r3, [pc, #16]	; (8023ef4 <ip4addr_aton+0x148>)
 8023ee2:	22f9      	movs	r2, #249	; 0xf9
 8023ee4:	4904      	ldr	r1, [pc, #16]	; (8023ef8 <ip4addr_aton+0x14c>)
 8023ee6:	4805      	ldr	r0, [pc, #20]	; (8023efc <ip4addr_aton+0x150>)
 8023ee8:	f002 fa34 	bl	8026354 <iprintf>
      break;
 8023eec:	e7ce      	b.n	8023e8c <ip4addr_aton+0xe0>
 8023eee:	bf00      	nop
 8023ef0:	080470ad 	.word	0x080470ad
 8023ef4:	08046e08 	.word	0x08046e08
 8023ef8:	08046e44 	.word	0x08046e44
 8023efc:	0802b034 	.word	0x0802b034

08023f00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8023f00:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023f02:	4604      	mov	r4, r0
 8023f04:	b148      	cbz	r0, 8023f1a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8023f06:	6960      	ldr	r0, [r4, #20]
 8023f08:	b108      	cbz	r0, 8023f0e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8023f0a:	f7f8 f959 	bl	801c1c0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8023f0e:	4621      	mov	r1, r4
 8023f10:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8023f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8023f16:	f7f7 bc3b 	b.w	801b790 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023f1a:	4b04      	ldr	r3, [pc, #16]	; (8023f2c <ipfrag_free_pbuf_custom+0x2c>)
 8023f1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8023f20:	4903      	ldr	r1, [pc, #12]	; (8023f30 <ipfrag_free_pbuf_custom+0x30>)
 8023f22:	4804      	ldr	r0, [pc, #16]	; (8023f34 <ipfrag_free_pbuf_custom+0x34>)
 8023f24:	f002 fa16 	bl	8026354 <iprintf>
 8023f28:	e7ed      	b.n	8023f06 <ipfrag_free_pbuf_custom+0x6>
 8023f2a:	bf00      	nop
 8023f2c:	08046e58 	.word	0x08046e58
 8023f30:	08046e94 	.word	0x08046e94
 8023f34:	0802b034 	.word	0x0802b034

08023f38 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023f38:	4281      	cmp	r1, r0
{
 8023f3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f3e:	4606      	mov	r6, r0
 8023f40:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023f42:	d075      	beq.n	8024030 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8023f44:	b147      	cbz	r7, 8023f58 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023f46:	683b      	ldr	r3, [r7, #0]
 8023f48:	42b3      	cmp	r3, r6
 8023f4a:	d005      	beq.n	8023f58 <ip_reass_free_complete_datagram+0x20>
 8023f4c:	4b40      	ldr	r3, [pc, #256]	; (8024050 <ip_reass_free_complete_datagram+0x118>)
 8023f4e:	22ad      	movs	r2, #173	; 0xad
 8023f50:	4940      	ldr	r1, [pc, #256]	; (8024054 <ip_reass_free_complete_datagram+0x11c>)
 8023f52:	4841      	ldr	r0, [pc, #260]	; (8024058 <ip_reass_free_complete_datagram+0x120>)
 8023f54:	f002 f9fe 	bl	8026354 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023f58:	6875      	ldr	r5, [r6, #4]
 8023f5a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8023f5c:	889a      	ldrh	r2, [r3, #4]
 8023f5e:	2a00      	cmp	r2, #0
 8023f60:	d047      	beq.n	8023ff2 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8023f62:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023f66:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8024050 <ip_reass_free_complete_datagram+0x118>
 8023f6a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8024070 <ip_reass_free_complete_datagram+0x138>
 8023f6e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8024058 <ip_reass_free_complete_datagram+0x120>
 8023f72:	e005      	b.n	8023f80 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8023f74:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8023f76:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8023f78:	f7f8 f922 	bl	801c1c0 <pbuf_free>
  while (p != NULL) {
 8023f7c:	b1b4      	cbz	r4, 8023fac <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8023f7e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8023f80:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8023f82:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8023f84:	f7f8 f930 	bl	801c1e8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023f88:	4458      	add	r0, fp
 8023f8a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023f8e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023f92:	dbef      	blt.n	8023f74 <ip_reass_free_complete_datagram+0x3c>
 8023f94:	4653      	mov	r3, sl
 8023f96:	22cc      	movs	r2, #204	; 0xcc
 8023f98:	4649      	mov	r1, r9
 8023f9a:	4640      	mov	r0, r8
 8023f9c:	f002 f9da 	bl	8026354 <iprintf>
    pbuf_free(pcur);
 8023fa0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8023fa2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8023fa4:	f7f8 f90c 	bl	801c1c0 <pbuf_free>
  while (p != NULL) {
 8023fa8:	2c00      	cmp	r4, #0
 8023faa:	d1e8      	bne.n	8023f7e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8023fac:	4b2b      	ldr	r3, [pc, #172]	; (802405c <ip_reass_free_complete_datagram+0x124>)
 8023fae:	681a      	ldr	r2, [r3, #0]
 8023fb0:	4296      	cmp	r6, r2
 8023fb2:	d03a      	beq.n	802402a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023fb4:	2f00      	cmp	r7, #0
 8023fb6:	d042      	beq.n	802403e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8023fb8:	6833      	ldr	r3, [r6, #0]
 8023fba:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023fbc:	4c28      	ldr	r4, [pc, #160]	; (8024060 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8023fbe:	4631      	mov	r1, r6
 8023fc0:	2005      	movs	r0, #5
 8023fc2:	f7f7 fbe5 	bl	801b790 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023fc6:	8823      	ldrh	r3, [r4, #0]
 8023fc8:	455b      	cmp	r3, fp
 8023fca:	d305      	bcc.n	8023fd8 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023fcc:	eba3 030b 	sub.w	r3, r3, fp
}
 8023fd0:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023fd2:	8023      	strh	r3, [r4, #0]
}
 8023fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023fd8:	4b1d      	ldr	r3, [pc, #116]	; (8024050 <ip_reass_free_complete_datagram+0x118>)
 8023fda:	22d2      	movs	r2, #210	; 0xd2
 8023fdc:	4921      	ldr	r1, [pc, #132]	; (8024064 <ip_reass_free_complete_datagram+0x12c>)
 8023fde:	481e      	ldr	r0, [pc, #120]	; (8024058 <ip_reass_free_complete_datagram+0x120>)
 8023fe0:	f002 f9b8 	bl	8026354 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023fe4:	8823      	ldrh	r3, [r4, #0]
}
 8023fe6:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023fe8:	eba3 030b 	sub.w	r3, r3, fp
 8023fec:	8023      	strh	r3, [r4, #0]
}
 8023fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8023ff2:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023ff4:	6930      	ldr	r0, [r6, #16]
 8023ff6:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8023ff8:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023ffa:	68f4      	ldr	r4, [r6, #12]
 8023ffc:	68b2      	ldr	r2, [r6, #8]
 8023ffe:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024000:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024002:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024004:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024006:	601a      	str	r2, [r3, #0]
 8024008:	605c      	str	r4, [r3, #4]
 802400a:	69b2      	ldr	r2, [r6, #24]
 802400c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802400e:	f7ff fccf 	bl	80239b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024012:	4628      	mov	r0, r5
 8024014:	f7f8 f8e8 	bl	801c1e8 <pbuf_clen>
 8024018:	4683      	mov	fp, r0
    pbuf_free(p);
 802401a:	4628      	mov	r0, r5
 802401c:	f7f8 f8d0 	bl	801c1c0 <pbuf_free>
  p = ipr->p;
 8024020:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8024022:	2d00      	cmp	r5, #0
 8024024:	d0c2      	beq.n	8023fac <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8024026:	686b      	ldr	r3, [r5, #4]
 8024028:	e79d      	b.n	8023f66 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 802402a:	6832      	ldr	r2, [r6, #0]
 802402c:	601a      	str	r2, [r3, #0]
 802402e:	e7c5      	b.n	8023fbc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024030:	4b07      	ldr	r3, [pc, #28]	; (8024050 <ip_reass_free_complete_datagram+0x118>)
 8024032:	22ab      	movs	r2, #171	; 0xab
 8024034:	490c      	ldr	r1, [pc, #48]	; (8024068 <ip_reass_free_complete_datagram+0x130>)
 8024036:	4808      	ldr	r0, [pc, #32]	; (8024058 <ip_reass_free_complete_datagram+0x120>)
 8024038:	f002 f98c 	bl	8026354 <iprintf>
 802403c:	e782      	b.n	8023f44 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802403e:	4b04      	ldr	r3, [pc, #16]	; (8024050 <ip_reass_free_complete_datagram+0x118>)
 8024040:	f240 1245 	movw	r2, #325	; 0x145
 8024044:	4909      	ldr	r1, [pc, #36]	; (802406c <ip_reass_free_complete_datagram+0x134>)
 8024046:	4804      	ldr	r0, [pc, #16]	; (8024058 <ip_reass_free_complete_datagram+0x120>)
 8024048:	f002 f984 	bl	8026354 <iprintf>
 802404c:	e7b4      	b.n	8023fb8 <ip_reass_free_complete_datagram+0x80>
 802404e:	bf00      	nop
 8024050:	08046e58 	.word	0x08046e58
 8024054:	08046eac 	.word	0x08046eac
 8024058:	0802b034 	.word	0x0802b034
 802405c:	2002e7e8 	.word	0x2002e7e8
 8024060:	2002e7e4 	.word	0x2002e7e4
 8024064:	08046efc 	.word	0x08046efc
 8024068:	08046ea0 	.word	0x08046ea0
 802406c:	08046ee0 	.word	0x08046ee0
 8024070:	08046ec0 	.word	0x08046ec0

08024074 <ip_reass_remove_oldest_datagram>:
{
 8024074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8024078:	2700      	movs	r7, #0
 802407a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80240e4 <ip_reass_remove_oldest_datagram+0x70>
{
 802407e:	4605      	mov	r5, r0
 8024080:	460e      	mov	r6, r1
    r = reassdatagrams;
 8024082:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8024086:	b1f3      	cbz	r3, 80240c6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8024088:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802408a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802408e:	4621      	mov	r1, r4
    prev = NULL;
 8024090:	46a4      	mov	ip, r4
    oldest = NULL;
 8024092:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024094:	695a      	ldr	r2, [r3, #20]
 8024096:	4572      	cmp	r2, lr
 8024098:	d018      	beq.n	80240cc <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 802409a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 802409c:	b120      	cbz	r0, 80240a8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802409e:	f893 901f 	ldrb.w	r9, [r3, #31]
 80240a2:	7fc2      	ldrb	r2, [r0, #31]
 80240a4:	4591      	cmp	r9, r2
 80240a6:	d801      	bhi.n	80240ac <ip_reass_remove_oldest_datagram+0x38>
 80240a8:	4661      	mov	r1, ip
 80240aa:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80240ac:	681a      	ldr	r2, [r3, #0]
 80240ae:	469c      	mov	ip, r3
 80240b0:	4613      	mov	r3, r2
 80240b2:	2a00      	cmp	r2, #0
 80240b4:	d1ee      	bne.n	8024094 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80240b6:	b110      	cbz	r0, 80240be <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80240b8:	f7ff ff3e 	bl	8023f38 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80240bc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80240be:	42b7      	cmp	r7, r6
 80240c0:	da01      	bge.n	80240c6 <ip_reass_remove_oldest_datagram+0x52>
 80240c2:	2c01      	cmp	r4, #1
 80240c4:	dcdd      	bgt.n	8024082 <ip_reass_remove_oldest_datagram+0xe>
}
 80240c6:	4638      	mov	r0, r7
 80240c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80240cc:	699a      	ldr	r2, [r3, #24]
 80240ce:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80240d2:	454a      	cmp	r2, r9
 80240d4:	d1e1      	bne.n	802409a <ip_reass_remove_oldest_datagram+0x26>
 80240d6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80240da:	88aa      	ldrh	r2, [r5, #4]
 80240dc:	4591      	cmp	r9, r2
 80240de:	d1dc      	bne.n	802409a <ip_reass_remove_oldest_datagram+0x26>
 80240e0:	e7e4      	b.n	80240ac <ip_reass_remove_oldest_datagram+0x38>
 80240e2:	bf00      	nop
 80240e4:	2002e7e8 	.word	0x2002e7e8

080240e8 <ip_reass_tmr>:
{
 80240e8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80240ea:	4b0a      	ldr	r3, [pc, #40]	; (8024114 <ip_reass_tmr+0x2c>)
 80240ec:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80240ee:	b140      	cbz	r0, 8024102 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80240f0:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80240f2:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80240f4:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80240f6:	b12b      	cbz	r3, 8024104 <ip_reass_tmr+0x1c>
 80240f8:	4604      	mov	r4, r0
      r->timer--;
 80240fa:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80240fc:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80240fe:	2800      	cmp	r0, #0
 8024100:	d1f7      	bne.n	80240f2 <ip_reass_tmr+0xa>
}
 8024102:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8024104:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8024106:	4621      	mov	r1, r4
 8024108:	f7ff ff16 	bl	8023f38 <ip_reass_free_complete_datagram>
      r = r->next;
 802410c:	4628      	mov	r0, r5
  while (r != NULL) {
 802410e:	2800      	cmp	r0, #0
 8024110:	d1ef      	bne.n	80240f2 <ip_reass_tmr+0xa>
 8024112:	e7f6      	b.n	8024102 <ip_reass_tmr+0x1a>
 8024114:	2002e7e8 	.word	0x2002e7e8

08024118 <ip4_reass>:
{
 8024118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802411c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8024120:	b085      	sub	sp, #20
 8024122:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024124:	f89a 3000 	ldrb.w	r3, [sl]
 8024128:	f003 030f 	and.w	r3, r3, #15
 802412c:	2b05      	cmp	r3, #5
 802412e:	f040 8089 	bne.w	8024244 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024132:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8024136:	f7f6 f807 	bl	801a148 <lwip_htons>
 802413a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802413c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8024140:	f7f6 f802 	bl	801a148 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8024144:	f89a 2000 	ldrb.w	r2, [sl]
 8024148:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 802414c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8024150:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8024154:	d376      	bcc.n	8024244 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8024156:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024158:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8024450 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 802415c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 802415e:	b29b      	uxth	r3, r3
 8024160:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8024162:	f7f8 f841 	bl	801c1e8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024166:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 802416a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802416c:	4403      	add	r3, r0
 802416e:	2b14      	cmp	r3, #20
 8024170:	f300 80e5 	bgt.w	802433e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024174:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8024454 <ip4_reass+0x33c>
 8024178:	f8d9 4000 	ldr.w	r4, [r9]
 802417c:	2c00      	cmp	r4, #0
 802417e:	f000 80ec 	beq.w	802435a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024182:	f8da 200c 	ldr.w	r2, [sl, #12]
 8024186:	e003      	b.n	8024190 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024188:	6824      	ldr	r4, [r4, #0]
 802418a:	2c00      	cmp	r4, #0
 802418c:	f000 80e5 	beq.w	802435a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024190:	6963      	ldr	r3, [r4, #20]
 8024192:	4293      	cmp	r3, r2
 8024194:	d1f8      	bne.n	8024188 <ip4_reass+0x70>
 8024196:	f8da 3010 	ldr.w	r3, [sl, #16]
 802419a:	69a1      	ldr	r1, [r4, #24]
 802419c:	4299      	cmp	r1, r3
 802419e:	d1f3      	bne.n	8024188 <ip4_reass+0x70>
 80241a0:	89a1      	ldrh	r1, [r4, #12]
 80241a2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80241a6:	4299      	cmp	r1, r3
 80241a8:	d1ee      	bne.n	8024188 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80241aa:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80241ae:	f7f5 ffcb 	bl	801a148 <lwip_htons>
 80241b2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80241b6:	2800      	cmp	r0, #0
 80241b8:	f000 80a9 	beq.w	802430e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80241bc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80241c0:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80241c4:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80241c8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80241cc:	9301      	str	r3, [sp, #4]
 80241ce:	d108      	bne.n	80241e2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80241d0:	9b00      	ldr	r3, [sp, #0]
 80241d2:	18f3      	adds	r3, r6, r3
 80241d4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80241d6:	429e      	cmp	r6, r3
 80241d8:	d812      	bhi.n	8024200 <ip4_reass+0xe8>
 80241da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80241de:	4293      	cmp	r3, r2
 80241e0:	d80e      	bhi.n	8024200 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80241e2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80241e6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80241ea:	f7f5 ffad 	bl	801a148 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80241ee:	f89a 2000 	ldrb.w	r2, [sl]
 80241f2:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80241f6:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80241fa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80241fe:	d229      	bcs.n	8024254 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8024200:	6866      	ldr	r6, [r4, #4]
 8024202:	b9fe      	cbnz	r6, 8024244 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024204:	f8d9 3000 	ldr.w	r3, [r9]
 8024208:	42a3      	cmp	r3, r4
 802420a:	d014      	beq.n	8024236 <ip4_reass+0x11e>
 802420c:	4b8c      	ldr	r3, [pc, #560]	; (8024440 <ip4_reass+0x328>)
 802420e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024212:	498c      	ldr	r1, [pc, #560]	; (8024444 <ip4_reass+0x32c>)
 8024214:	488c      	ldr	r0, [pc, #560]	; (8024448 <ip4_reass+0x330>)
 8024216:	f002 f89d 	bl	8026354 <iprintf>
  if (reassdatagrams == ipr) {
 802421a:	f8d9 3000 	ldr.w	r3, [r9]
 802421e:	429c      	cmp	r4, r3
 8024220:	d009      	beq.n	8024236 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024222:	4b87      	ldr	r3, [pc, #540]	; (8024440 <ip4_reass+0x328>)
 8024224:	f240 1245 	movw	r2, #325	; 0x145
 8024228:	4988      	ldr	r1, [pc, #544]	; (802444c <ip4_reass+0x334>)
 802422a:	4887      	ldr	r0, [pc, #540]	; (8024448 <ip4_reass+0x330>)
 802422c:	f002 f892 	bl	8026354 <iprintf>
    prev->next = ipr->next;
 8024230:	6823      	ldr	r3, [r4, #0]
 8024232:	6033      	str	r3, [r6, #0]
 8024234:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8024236:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8024238:	4621      	mov	r1, r4
 802423a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802423c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8024240:	f7f7 faa6 	bl	801b790 <memp_free>
  pbuf_free(p);
 8024244:	4628      	mov	r0, r5
  return NULL;
 8024246:	2600      	movs	r6, #0
  pbuf_free(p);
 8024248:	f7f7 ffba 	bl	801c1c0 <pbuf_free>
}
 802424c:	4630      	mov	r0, r6
 802424e:	b005      	add	sp, #20
 8024250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8024254:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024256:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802425a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 802425e:	f7f5 ff73 	bl	801a148 <lwip_htons>
 8024262:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8024266:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802426a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 802426c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8024270:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8024274:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8024278:	f8ab 3006 	strh.w	r3, [fp, #6]
 802427c:	b29b      	uxth	r3, r3
 802427e:	4619      	mov	r1, r3
 8024280:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8024282:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8024284:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8024286:	f88b 3000 	strb.w	r3, [fp]
 802428a:	f88b 3001 	strb.w	r3, [fp, #1]
 802428e:	f88b 3002 	strb.w	r3, [fp, #2]
 8024292:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8024296:	d8b3      	bhi.n	8024200 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8024298:	6861      	ldr	r1, [r4, #4]
 802429a:	2900      	cmp	r1, #0
 802429c:	f000 80c4 	beq.w	8024428 <ip4_reass+0x310>
  int valid = 1;
 80242a0:	f04f 0a01 	mov.w	sl, #1
 80242a4:	4694      	mov	ip, r2
 80242a6:	e00e      	b.n	80242c6 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 80242a8:	d0cc      	beq.n	8024244 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 80242aa:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80242ae:	45f4      	cmp	ip, lr
 80242b0:	d3c8      	bcc.n	8024244 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80242b2:	b122      	cbz	r2, 80242be <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 80242b4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80242b6:	4282      	cmp	r2, r0
 80242b8:	bf18      	it	ne
 80242ba:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80242be:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 80242c0:	2900      	cmp	r1, #0
 80242c2:	f000 808a 	beq.w	80243da <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80242c6:	461a      	mov	r2, r3
 80242c8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80242ca:	8898      	ldrh	r0, [r3, #4]
 80242cc:	4584      	cmp	ip, r0
 80242ce:	d2eb      	bcs.n	80242a8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 80242d0:	4613      	mov	r3, r2
 80242d2:	f8cb 1000 	str.w	r1, [fp]
 80242d6:	4662      	mov	r2, ip
 80242d8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d066      	beq.n	80243ac <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80242de:	88db      	ldrh	r3, [r3, #6]
 80242e0:	429a      	cmp	r2, r3
 80242e2:	d3af      	bcc.n	8024244 <ip4_reass+0x12c>
 80242e4:	9903      	ldr	r1, [sp, #12]
 80242e6:	4281      	cmp	r1, r0
 80242e8:	d8ac      	bhi.n	8024244 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80242ea:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80242ec:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80242f0:	d061      	beq.n	80243b6 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80242f2:	9b01      	ldr	r3, [sp, #4]
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	f000 808a 	beq.w	802440e <ip4_reass+0x2f6>
 80242fa:	7fa3      	ldrb	r3, [r4, #30]
 80242fc:	07db      	lsls	r3, r3, #31
 80242fe:	d462      	bmi.n	80243c6 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024300:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8024304:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024306:	441f      	add	r7, r3
 8024308:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802430c:	e79e      	b.n	802424c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802430e:	89e0      	ldrh	r0, [r4, #14]
 8024310:	f7f5 ff1a 	bl	801a148 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024314:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8024318:	2800      	cmp	r0, #0
 802431a:	f43f af4f 	beq.w	80241bc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802431e:	f8da 3000 	ldr.w	r3, [sl]
 8024322:	f8da 0004 	ldr.w	r0, [sl, #4]
 8024326:	f8da 1008 	ldr.w	r1, [sl, #8]
 802432a:	f8da 200c 	ldr.w	r2, [sl, #12]
 802432e:	60a3      	str	r3, [r4, #8]
 8024330:	60e0      	str	r0, [r4, #12]
 8024332:	6121      	str	r1, [r4, #16]
 8024334:	6162      	str	r2, [r4, #20]
 8024336:	f8da 3010 	ldr.w	r3, [sl, #16]
 802433a:	61a3      	str	r3, [r4, #24]
 802433c:	e73e      	b.n	80241bc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802433e:	4601      	mov	r1, r0
 8024340:	4650      	mov	r0, sl
 8024342:	f7ff fe97 	bl	8024074 <ip_reass_remove_oldest_datagram>
 8024346:	2800      	cmp	r0, #0
 8024348:	f43f af7c 	beq.w	8024244 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802434c:	f8b8 3000 	ldrh.w	r3, [r8]
 8024350:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024352:	2b14      	cmp	r3, #20
 8024354:	f77f af0e 	ble.w	8024174 <ip4_reass+0x5c>
 8024358:	e774      	b.n	8024244 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802435a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 802435e:	4938      	ldr	r1, [pc, #224]	; (8024440 <ip4_reass+0x328>)
 8024360:	2005      	movs	r0, #5
 8024362:	f7f7 f9df 	bl	801b724 <memp_malloc_fn>
  if (ipr == NULL) {
 8024366:	4604      	mov	r4, r0
 8024368:	b178      	cbz	r0, 802438a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802436a:	2300      	movs	r3, #0
 802436c:	61e3      	str	r3, [r4, #28]
 802436e:	60a3      	str	r3, [r4, #8]
 8024370:	60e3      	str	r3, [r4, #12]
 8024372:	6123      	str	r3, [r4, #16]
 8024374:	6163      	str	r3, [r4, #20]
 8024376:	61a3      	str	r3, [r4, #24]
 8024378:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 802437a:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 802437e:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8024382:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8024384:	230f      	movs	r3, #15
 8024386:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024388:	e7c9      	b.n	802431e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802438a:	4639      	mov	r1, r7
 802438c:	4650      	mov	r0, sl
 802438e:	f7ff fe71 	bl	8024074 <ip_reass_remove_oldest_datagram>
 8024392:	4287      	cmp	r7, r0
 8024394:	f73f af56 	bgt.w	8024244 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024398:	f44f 7291 	mov.w	r2, #290	; 0x122
 802439c:	4928      	ldr	r1, [pc, #160]	; (8024440 <ip4_reass+0x328>)
 802439e:	2005      	movs	r0, #5
 80243a0:	f7f7 f9c0 	bl	801b724 <memp_malloc_fn>
    if (ipr == NULL)
 80243a4:	4604      	mov	r4, r0
 80243a6:	2800      	cmp	r0, #0
 80243a8:	d1df      	bne.n	802436a <ip4_reass+0x252>
 80243aa:	e74b      	b.n	8024244 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80243ac:	9b03      	ldr	r3, [sp, #12]
 80243ae:	4283      	cmp	r3, r0
 80243b0:	f63f af48 	bhi.w	8024244 <ip4_reass+0x12c>
        ipr->p = new_p;
 80243b4:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80243b6:	9b01      	ldr	r3, [sp, #4]
 80243b8:	b19b      	cbz	r3, 80243e2 <ip4_reass+0x2ca>
 80243ba:	7fa3      	ldrb	r3, [r4, #30]
 80243bc:	07d9      	lsls	r1, r3, #31
 80243be:	d59f      	bpl.n	8024300 <ip4_reass+0x1e8>
    if (valid) {
 80243c0:	f1ba 0f00 	cmp.w	sl, #0
 80243c4:	d138      	bne.n	8024438 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80243c6:	f8b8 3000 	ldrh.w	r3, [r8]
 80243ca:	441f      	add	r7, r3
 80243cc:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 80243d0:	2600      	movs	r6, #0
}
 80243d2:	4630      	mov	r0, r6
 80243d4:	b005      	add	sp, #20
 80243d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80243da:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80243dc:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80243de:	d188      	bne.n	80242f2 <ip4_reass+0x1da>
 80243e0:	e7e9      	b.n	80243b6 <ip4_reass+0x29e>
    if (valid) {
 80243e2:	f1ba 0f00 	cmp.w	sl, #0
 80243e6:	d012      	beq.n	802440e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80243e8:	6863      	ldr	r3, [r4, #4]
 80243ea:	b183      	cbz	r3, 802440e <ip4_reass+0x2f6>
 80243ec:	6859      	ldr	r1, [r3, #4]
 80243ee:	888b      	ldrh	r3, [r1, #4]
 80243f0:	2b00      	cmp	r3, #0
 80243f2:	d031      	beq.n	8024458 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80243f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80243f8:	441f      	add	r7, r3
  if (is_last) {
 80243fa:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80243fc:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8024400:	2b00      	cmp	r3, #0
 8024402:	d1e5      	bne.n	80243d0 <ip4_reass+0x2b8>
 8024404:	e008      	b.n	8024418 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024406:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802440a:	4659      	mov	r1, fp
 802440c:	b323      	cbz	r3, 8024458 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802440e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024412:	441f      	add	r7, r3
 8024414:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024418:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802441a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802441c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8024420:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024422:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8024424:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8024426:	e7d3      	b.n	80243d0 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024428:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 802442a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802442c:	2b00      	cmp	r3, #0
 802442e:	d0ea      	beq.n	8024406 <ip4_reass+0x2ee>
 8024430:	7fa3      	ldrb	r3, [r4, #30]
 8024432:	07da      	lsls	r2, r3, #31
 8024434:	f57f af64 	bpl.w	8024300 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024438:	6863      	ldr	r3, [r4, #4]
 802443a:	2b00      	cmp	r3, #0
 802443c:	d0c3      	beq.n	80243c6 <ip4_reass+0x2ae>
 802443e:	e7d5      	b.n	80243ec <ip4_reass+0x2d4>
 8024440:	08046e58 	.word	0x08046e58
 8024444:	08046f70 	.word	0x08046f70
 8024448:	0802b034 	.word	0x0802b034
 802444c:	08046ee0 	.word	0x08046ee0
 8024450:	2002e7e4 	.word	0x2002e7e4
 8024454:	2002e7e8 	.word	0x2002e7e8
        q = iprh->next_pbuf;
 8024458:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 802445c:	b153      	cbz	r3, 8024474 <ip4_reass+0x35c>
 802445e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8024460:	4610      	mov	r0, r2
 8024462:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8024464:	88c0      	ldrh	r0, [r0, #6]
 8024466:	8893      	ldrh	r3, [r2, #4]
 8024468:	4298      	cmp	r0, r3
 802446a:	d1c3      	bne.n	80243f4 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 802446c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 802446e:	2b00      	cmp	r3, #0
 8024470:	d1f6      	bne.n	8024460 <ip4_reass+0x348>
 8024472:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8024474:	9b02      	ldr	r3, [sp, #8]
 8024476:	428b      	cmp	r3, r1
 8024478:	d110      	bne.n	802449c <ip4_reass+0x384>
 802447a:	4b40      	ldr	r3, [pc, #256]	; (802457c <ip4_reass+0x464>)
 802447c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8024480:	493f      	ldr	r1, [pc, #252]	; (8024580 <ip4_reass+0x468>)
 8024482:	4840      	ldr	r0, [pc, #256]	; (8024584 <ip4_reass+0x46c>)
 8024484:	f001 ff66 	bl	8026354 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024488:	9b02      	ldr	r3, [sp, #8]
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	b133      	cbz	r3, 802449c <ip4_reass+0x384>
 802448e:	4b3b      	ldr	r3, [pc, #236]	; (802457c <ip4_reass+0x464>)
 8024490:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024494:	493c      	ldr	r1, [pc, #240]	; (8024588 <ip4_reass+0x470>)
 8024496:	483b      	ldr	r0, [pc, #236]	; (8024584 <ip4_reass+0x46c>)
 8024498:	f001 ff5c 	bl	8026354 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802449c:	f8b8 3000 	ldrh.w	r3, [r8]
 80244a0:	441f      	add	r7, r3
  if (is_last) {
 80244a2:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80244a4:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80244a8:	2b00      	cmp	r3, #0
 80244aa:	d15b      	bne.n	8024564 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 80244ac:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80244ae:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80244b0:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80244b2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80244b6:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80244b8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80244ba:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80244bc:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80244be:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80244c0:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80244c2:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80244c4:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80244c6:	68a3      	ldr	r3, [r4, #8]
 80244c8:	6921      	ldr	r1, [r4, #16]
 80244ca:	6962      	ldr	r2, [r4, #20]
 80244cc:	6075      	str	r5, [r6, #4]
 80244ce:	60b1      	str	r1, [r6, #8]
 80244d0:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80244d2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80244d4:	6033      	str	r3, [r6, #0]
 80244d6:	69a3      	ldr	r3, [r4, #24]
 80244d8:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80244da:	f7f5 fe35 	bl	801a148 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80244de:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80244e0:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80244e2:	2114      	movs	r1, #20
 80244e4:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 80244e6:	71b3      	strb	r3, [r6, #6]
 80244e8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80244ea:	72b3      	strb	r3, [r6, #10]
 80244ec:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80244ee:	f7f6 fbd3 	bl	801ac98 <inet_chksum>
 80244f2:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 80244f4:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80244f6:	b15d      	cbz	r5, 8024510 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 80244f8:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80244fa:	4628      	mov	r0, r5
 80244fc:	2114      	movs	r1, #20
 80244fe:	f7f7 fdd3 	bl	801c0a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024502:	4629      	mov	r1, r5
 8024504:	4630      	mov	r0, r6
 8024506:	f7f7 fe8d 	bl	801c224 <pbuf_cat>
      r = iprh->next_pbuf;
 802450a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802450c:	2d00      	cmp	r5, #0
 802450e:	d1f3      	bne.n	80244f8 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8024510:	f8d9 5000 	ldr.w	r5, [r9]
 8024514:	42a5      	cmp	r5, r4
 8024516:	d005      	beq.n	8024524 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024518:	b335      	cbz	r5, 8024568 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802451a:	682b      	ldr	r3, [r5, #0]
 802451c:	42a3      	cmp	r3, r4
 802451e:	d014      	beq.n	802454a <ip4_reass+0x432>
 8024520:	461d      	mov	r5, r3
 8024522:	e7f9      	b.n	8024518 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8024524:	6823      	ldr	r3, [r4, #0]
 8024526:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802452a:	4621      	mov	r1, r4
 802452c:	2005      	movs	r0, #5
 802452e:	f7f7 f92f 	bl	801b790 <memp_free>
    clen = pbuf_clen(p);
 8024532:	4630      	mov	r0, r6
 8024534:	f7f7 fe58 	bl	801c1e8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024538:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802453c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802453e:	4283      	cmp	r3, r0
 8024540:	d306      	bcc.n	8024550 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024542:	1b1b      	subs	r3, r3, r4
 8024544:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8024548:	e680      	b.n	802424c <ip4_reass+0x134>
    prev->next = ipr->next;
 802454a:	6823      	ldr	r3, [r4, #0]
 802454c:	602b      	str	r3, [r5, #0]
 802454e:	e7ec      	b.n	802452a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024550:	4b0a      	ldr	r3, [pc, #40]	; (802457c <ip4_reass+0x464>)
 8024552:	f240 229b 	movw	r2, #667	; 0x29b
 8024556:	490d      	ldr	r1, [pc, #52]	; (802458c <ip4_reass+0x474>)
 8024558:	480a      	ldr	r0, [pc, #40]	; (8024584 <ip4_reass+0x46c>)
 802455a:	f001 fefb 	bl	8026354 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802455e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024562:	e7ee      	b.n	8024542 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024564:	8ba0      	ldrh	r0, [r4, #28]
 8024566:	e7a9      	b.n	80244bc <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024568:	4b04      	ldr	r3, [pc, #16]	; (802457c <ip4_reass+0x464>)
 802456a:	f240 1245 	movw	r2, #325	; 0x145
 802456e:	4908      	ldr	r1, [pc, #32]	; (8024590 <ip4_reass+0x478>)
 8024570:	4804      	ldr	r0, [pc, #16]	; (8024584 <ip4_reass+0x46c>)
 8024572:	f001 feef 	bl	8026354 <iprintf>
    prev->next = ipr->next;
 8024576:	6823      	ldr	r3, [r4, #0]
 8024578:	602b      	str	r3, [r5, #0]
 802457a:	deff      	udf	#255	; 0xff
 802457c:	08046e58 	.word	0x08046e58
 8024580:	08046f20 	.word	0x08046f20
 8024584:	0802b034 	.word	0x0802b034
 8024588:	08046f30 	.word	0x08046f30
 802458c:	08046f54 	.word	0x08046f54
 8024590:	08046ee0 	.word	0x08046ee0

08024594 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024598:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 802459a:	b08f      	sub	sp, #60	; 0x3c
 802459c:	4605      	mov	r5, r0
 802459e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80245a0:	f1b3 0214 	subs.w	r2, r3, #20
{
 80245a4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80245a6:	bf48      	it	mi
 80245a8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80245ac:	6843      	ldr	r3, [r0, #4]
 80245ae:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80245b0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80245b4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80245b6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80245b8:	f003 030f 	and.w	r3, r3, #15
 80245bc:	2b05      	cmp	r3, #5
 80245be:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80245c2:	f040 80ea 	bne.w	802479a <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80245c6:	8943      	ldrh	r3, [r0, #10]
 80245c8:	2b13      	cmp	r3, #19
 80245ca:	f240 80e9 	bls.w	80247a0 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80245ce:	9b04      	ldr	r3, [sp, #16]
 80245d0:	88d8      	ldrh	r0, [r3, #6]
 80245d2:	f7f5 fdb9 	bl	801a148 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80245d6:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80245d8:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80245dc:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80245de:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80245e0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80245e4:	b29b      	uxth	r3, r3
 80245e6:	920d      	str	r2, [sp, #52]	; 0x34
 80245e8:	9305      	str	r3, [sp, #20]

  while (left) {
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	f000 809d 	beq.w	802472a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80245f0:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80245f2:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80245f4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80247c0 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80245f8:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80245fa:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80247c8 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80245fe:	b29b      	uxth	r3, r3
 8024600:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8024602:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024606:	2114      	movs	r1, #20
 8024608:	200e      	movs	r0, #14
 802460a:	f7f7 fc07 	bl	801be1c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024610:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8024612:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024614:	4293      	cmp	r3, r2
 8024616:	bf28      	it	cs
 8024618:	4613      	movcs	r3, r2
 802461a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 802461c:	2800      	cmp	r0, #0
 802461e:	f000 80b9 	beq.w	8024794 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024622:	8943      	ldrh	r3, [r0, #10]
 8024624:	2b13      	cmp	r3, #19
 8024626:	f240 8091 	bls.w	802474c <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802462a:	9904      	ldr	r1, [sp, #16]
 802462c:	9b03      	ldr	r3, [sp, #12]
 802462e:	680a      	ldr	r2, [r1, #0]
 8024630:	685b      	ldr	r3, [r3, #4]
 8024632:	684f      	ldr	r7, [r1, #4]
 8024634:	6888      	ldr	r0, [r1, #8]
 8024636:	68c9      	ldr	r1, [r1, #12]
 8024638:	605f      	str	r7, [r3, #4]
 802463a:	60d9      	str	r1, [r3, #12]
 802463c:	9904      	ldr	r1, [sp, #16]
 802463e:	601a      	str	r2, [r3, #0]
 8024640:	6098      	str	r0, [r3, #8]
 8024642:	690a      	ldr	r2, [r1, #16]
 8024644:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024646:	9b03      	ldr	r3, [sp, #12]
 8024648:	685b      	ldr	r3, [r3, #4]
 802464a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 802464c:	9b06      	ldr	r3, [sp, #24]
 802464e:	2b00      	cmp	r3, #0
 8024650:	d034      	beq.n	80246bc <ip4_frag+0x128>
 8024652:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024654:	896b      	ldrh	r3, [r5, #10]
 8024656:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024658:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 802465a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802465c:	d36e      	bcc.n	802473c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802465e:	454c      	cmp	r4, r9
 8024660:	bf28      	it	cs
 8024662:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024664:	2c00      	cmp	r4, #0
 8024666:	d062      	beq.n	802472e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024668:	4641      	mov	r1, r8
 802466a:	f240 22bd 	movw	r2, #701	; 0x2bd
 802466e:	2006      	movs	r0, #6
 8024670:	f7f7 f858 	bl	801b724 <memp_malloc_fn>
 8024674:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024676:	2241      	movs	r2, #65	; 0x41
 8024678:	4621      	mov	r1, r4
 802467a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 802467c:	f1bb 0f00 	cmp.w	fp, #0
 8024680:	d06f      	beq.n	8024762 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024682:	9401      	str	r4, [sp, #4]
 8024684:	465b      	mov	r3, fp
 8024686:	686f      	ldr	r7, [r5, #4]
 8024688:	4437      	add	r7, r6
 802468a:	9700      	str	r7, [sp, #0]
 802468c:	f7f7 fc64 	bl	801bf58 <pbuf_alloced_custom>
 8024690:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8024692:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8024694:	2f00      	cmp	r7, #0
 8024696:	d06e      	beq.n	8024776 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024698:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 802469c:	f7f7 fdae 	bl	801c1fc <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80246a0:	4a44      	ldr	r2, [pc, #272]	; (80247b4 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 80246a2:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80246a4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80246a8:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 80246aa:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80246ae:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 80246b2:	f7f7 fdb7 	bl	801c224 <pbuf_cat>
      if (left_to_copy) {
 80246b6:	f1b9 0f00 	cmp.w	r9, #0
 80246ba:	d138      	bne.n	802472e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80246bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80246be:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80246c0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 80246c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 80246c4:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 80246c6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80246ca:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80246cc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80246ce:	4293      	cmp	r3, r2
 80246d0:	dd44      	ble.n	802475c <ip4_frag+0x1c8>
 80246d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80246d4:	2b00      	cmp	r3, #0
 80246d6:	d141      	bne.n	802475c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80246d8:	f7f5 fd36 	bl	801a148 <lwip_htons>
 80246dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80246de:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80246e0:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80246e2:	f103 0014 	add.w	r0, r3, #20
 80246e6:	b280      	uxth	r0, r0
 80246e8:	f7f5 fd2e 	bl	801a148 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80246ec:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80246ee:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80246f0:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 80246f2:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80246f4:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 80246f6:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80246f8:	f7f6 face 	bl	801ac98 <inet_chksum>
 80246fc:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80246fe:	9f03      	ldr	r7, [sp, #12]
 8024700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024704:	4639      	mov	r1, r7
 8024706:	6943      	ldr	r3, [r0, #20]
 8024708:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802470a:	4638      	mov	r0, r7
 802470c:	f7f7 fd58 	bl	801c1c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024710:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8024714:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8024716:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 802471a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 802471c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802471e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8024720:	b292      	uxth	r2, r2
 8024722:	9207      	str	r2, [sp, #28]
  while (left) {
 8024724:	2b00      	cmp	r3, #0
 8024726:	f47f af6c 	bne.w	8024602 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802472a:	2000      	movs	r0, #0
 802472c:	e020      	b.n	8024770 <ip4_frag+0x1dc>
        p = p->next;
 802472e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8024730:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8024732:	896b      	ldrh	r3, [r5, #10]
 8024734:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024736:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024738:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802473a:	d290      	bcs.n	802465e <ip4_frag+0xca>
 802473c:	4643      	mov	r3, r8
 802473e:	f240 322d 	movw	r2, #813	; 0x32d
 8024742:	491d      	ldr	r1, [pc, #116]	; (80247b8 <ip4_frag+0x224>)
 8024744:	4650      	mov	r0, sl
 8024746:	f001 fe05 	bl	8026354 <iprintf>
 802474a:	e788      	b.n	802465e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802474c:	4643      	mov	r3, r8
 802474e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024752:	491a      	ldr	r1, [pc, #104]	; (80247bc <ip4_frag+0x228>)
 8024754:	4650      	mov	r0, sl
 8024756:	f001 fdfd 	bl	8026354 <iprintf>
 802475a:	e766      	b.n	802462a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 802475c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8024760:	e7ba      	b.n	80246d8 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8024762:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024766:	4658      	mov	r0, fp
 8024768:	f7f7 fd2a 	bl	801c1c0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802476c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024770:	b00f      	add	sp, #60	; 0x3c
 8024772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8024776:	46d9      	mov	r9, fp
 8024778:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802477c:	2006      	movs	r0, #6
 802477e:	4649      	mov	r1, r9
 8024780:	f7f7 f806 	bl	801b790 <memp_free>
        pbuf_free(rambuf);
 8024784:	4658      	mov	r0, fp
 8024786:	f7f7 fd1b 	bl	801c1c0 <pbuf_free>
  return ERR_MEM;
 802478a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802478e:	b00f      	add	sp, #60	; 0x3c
 8024790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8024794:	f04f 30ff 	mov.w	r0, #4294967295
 8024798:	e7ea      	b.n	8024770 <ip4_frag+0x1dc>
    return ERR_VAL;
 802479a:	f06f 0005 	mvn.w	r0, #5
 802479e:	e7e7      	b.n	8024770 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80247a0:	4b07      	ldr	r3, [pc, #28]	; (80247c0 <ip4_frag+0x22c>)
 80247a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80247a6:	4907      	ldr	r1, [pc, #28]	; (80247c4 <ip4_frag+0x230>)
 80247a8:	4807      	ldr	r0, [pc, #28]	; (80247c8 <ip4_frag+0x234>)
 80247aa:	f001 fdd3 	bl	8026354 <iprintf>
 80247ae:	f06f 0005 	mvn.w	r0, #5
 80247b2:	e7dd      	b.n	8024770 <ip4_frag+0x1dc>
 80247b4:	08023f01 	.word	0x08023f01
 80247b8:	08046fcc 	.word	0x08046fcc
 80247bc:	08046fac 	.word	0x08046fac
 80247c0:	08046e58 	.word	0x08046e58
 80247c4:	08046f90 	.word	0x08046f90
 80247c8:	0802b034 	.word	0x0802b034

080247cc <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80247cc:	8943      	ldrh	r3, [r0, #10]
 80247ce:	2b0e      	cmp	r3, #14
{
 80247d0:	b570      	push	{r4, r5, r6, lr}
 80247d2:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 80247d4:	d91b      	bls.n	802480e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80247d6:	7bc3      	ldrb	r3, [r0, #15]
 80247d8:	460d      	mov	r5, r1
 80247da:	b91b      	cbnz	r3, 80247e4 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 80247dc:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 80247e0:	3301      	adds	r3, #1
 80247e2:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80247e4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80247e6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80247e8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80247ea:	07d9      	lsls	r1, r3, #31
 80247ec:	d50a      	bpl.n	8024804 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80247ee:	2b01      	cmp	r3, #1
 80247f0:	d030      	beq.n	8024854 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80247f2:	2206      	movs	r2, #6
 80247f4:	491d      	ldr	r1, [pc, #116]	; (802486c <ethernet_input+0xa0>)
 80247f6:	f000 fdd7 	bl	80253a8 <memcmp>
 80247fa:	b918      	cbnz	r0, 8024804 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80247fc:	7b63      	ldrb	r3, [r4, #13]
 80247fe:	f043 0308 	orr.w	r3, r3, #8
 8024802:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8024804:	2e08      	cmp	r6, #8
 8024806:	d016      	beq.n	8024836 <ethernet_input+0x6a>
 8024808:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 802480c:	d004      	beq.n	8024818 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802480e:	4620      	mov	r0, r4
 8024810:	f7f7 fcd6 	bl	801c1c0 <pbuf_free>
  return ERR_OK;
}
 8024814:	2000      	movs	r0, #0
 8024816:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024818:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802481c:	071b      	lsls	r3, r3, #28
 802481e:	d5f6      	bpl.n	802480e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024820:	210e      	movs	r1, #14
 8024822:	4620      	mov	r0, r4
 8024824:	f7f7 fc40 	bl	801c0a8 <pbuf_remove_header>
 8024828:	2800      	cmp	r0, #0
 802482a:	d1f0      	bne.n	802480e <ethernet_input+0x42>
        etharp_input(p, netif);
 802482c:	4629      	mov	r1, r5
 802482e:	4620      	mov	r0, r4
 8024830:	f7fe fd2e 	bl	8023290 <etharp_input>
      break;
 8024834:	e7ee      	b.n	8024814 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024836:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802483a:	071a      	lsls	r2, r3, #28
 802483c:	d5e7      	bpl.n	802480e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802483e:	210e      	movs	r1, #14
 8024840:	4620      	mov	r0, r4
 8024842:	f7f7 fc31 	bl	801c0a8 <pbuf_remove_header>
 8024846:	2800      	cmp	r0, #0
 8024848:	d1e1      	bne.n	802480e <ethernet_input+0x42>
        ip4_input(p, netif);
 802484a:	4629      	mov	r1, r5
 802484c:	4620      	mov	r0, r4
 802484e:	f7ff f8eb 	bl	8023a28 <ip4_input>
      break;
 8024852:	e7df      	b.n	8024814 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024854:	7843      	ldrb	r3, [r0, #1]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d1d4      	bne.n	8024804 <ethernet_input+0x38>
 802485a:	7883      	ldrb	r3, [r0, #2]
 802485c:	2b5e      	cmp	r3, #94	; 0x5e
 802485e:	d1d1      	bne.n	8024804 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8024860:	7b63      	ldrb	r3, [r4, #13]
 8024862:	f043 0310 	orr.w	r3, r3, #16
 8024866:	7363      	strb	r3, [r4, #13]
 8024868:	e7cc      	b.n	8024804 <ethernet_input+0x38>
 802486a:	bf00      	nop
 802486c:	08047048 	.word	0x08047048

08024870 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024874:	460c      	mov	r4, r1
 8024876:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024878:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 802487c:	4616      	mov	r6, r2
 802487e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8024880:	f7f5 fc62 	bl	801a148 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024884:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8024886:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024888:	4620      	mov	r0, r4
 802488a:	f7f7 fbd9 	bl	801c040 <pbuf_add_header>
 802488e:	b9e0      	cbnz	r0, 80248ca <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024890:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8024892:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024896:	683b      	ldr	r3, [r7, #0]
 8024898:	600b      	str	r3, [r1, #0]
 802489a:	88bb      	ldrh	r3, [r7, #4]
 802489c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802489e:	6833      	ldr	r3, [r6, #0]
 80248a0:	f8c1 3006 	str.w	r3, [r1, #6]
 80248a4:	88b3      	ldrh	r3, [r6, #4]
 80248a6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80248a8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80248ac:	2b06      	cmp	r3, #6
 80248ae:	d006      	beq.n	80248be <ethernet_output+0x4e>
 80248b0:	4b08      	ldr	r3, [pc, #32]	; (80248d4 <ethernet_output+0x64>)
 80248b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80248b6:	4908      	ldr	r1, [pc, #32]	; (80248d8 <ethernet_output+0x68>)
 80248b8:	4808      	ldr	r0, [pc, #32]	; (80248dc <ethernet_output+0x6c>)
 80248ba:	f001 fd4b 	bl	8026354 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80248be:	69ab      	ldr	r3, [r5, #24]
 80248c0:	4621      	mov	r1, r4
 80248c2:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80248c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80248c8:	4718      	bx	r3
}
 80248ca:	f06f 0001 	mvn.w	r0, #1
 80248ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80248d2:	bf00      	nop
 80248d4:	08046fdc 	.word	0x08046fdc
 80248d8:	08047014 	.word	0x08047014
 80248dc:	0802b034 	.word	0x0802b034

080248e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80248e0:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80248e2:	2300      	movs	r3, #0
{
 80248e4:	b085      	sub	sp, #20
 80248e6:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 80248e8:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80248ea:	4619      	mov	r1, r3
{
 80248ec:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80248ee:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 80248f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80248f4:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80248f8:	f7f1 fe8c 	bl	8016614 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80248fc:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024900:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8024902:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8024904:	4258      	negs	r0, r3
 8024906:	b005      	add	sp, #20
 8024908:	bd30      	pop	{r4, r5, pc}
 802490a:	bf00      	nop

0802490c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802490c:	2200      	movs	r2, #0
 802490e:	6800      	ldr	r0, [r0, #0]
{
 8024910:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024912:	f7f1 fe93 	bl	801663c <osMessagePut>
 8024916:	3800      	subs	r0, #0
 8024918:	bf18      	it	ne
 802491a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 802491c:	4240      	negs	r0, r0
 802491e:	bd08      	pop	{r3, pc}

08024920 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024922:	4614      	mov	r4, r2
 8024924:	b085      	sub	sp, #20
 8024926:	4605      	mov	r5, r0
 8024928:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 802492a:	f7f1 fd39 	bl	80163a0 <osKernelSysTick>
 802492e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024930:	b15c      	cbz	r4, 802494a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024932:	4622      	mov	r2, r4
 8024934:	6829      	ldr	r1, [r5, #0]
 8024936:	a801      	add	r0, sp, #4
 8024938:	f7f1 feac 	bl	8016694 <osMessageGet>

    if(event.status == osEventMessage)
 802493c:	9b01      	ldr	r3, [sp, #4]
 802493e:	2b10      	cmp	r3, #16
 8024940:	d009      	beq.n	8024956 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024942:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024946:	b005      	add	sp, #20
 8024948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 802494a:	f04f 32ff 	mov.w	r2, #4294967295
 802494e:	6829      	ldr	r1, [r5, #0]
 8024950:	a801      	add	r0, sp, #4
 8024952:	f7f1 fe9f 	bl	8016694 <osMessageGet>
    *msg = (void *)event.value.v;
 8024956:	9b02      	ldr	r3, [sp, #8]
 8024958:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 802495a:	f7f1 fd21 	bl	80163a0 <osKernelSysTick>
 802495e:	1b80      	subs	r0, r0, r6
}
 8024960:	b005      	add	sp, #20
 8024962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024964 <sys_mbox_valid>:
 8024964:	6800      	ldr	r0, [r0, #0]
 8024966:	3800      	subs	r0, #0
 8024968:	bf18      	it	ne
 802496a:	2001      	movne	r0, #1
 802496c:	4770      	bx	lr
 802496e:	bf00      	nop

08024970 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024970:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024972:	4803      	ldr	r0, [pc, #12]	; (8024980 <sys_init+0x10>)
 8024974:	f7f1 fd78 	bl	8016468 <osMutexCreate>
 8024978:	4b02      	ldr	r3, [pc, #8]	; (8024984 <sys_init+0x14>)
 802497a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 802497c:	bd08      	pop	{r3, pc}
 802497e:	bf00      	nop
 8024980:	08047058 	.word	0x08047058
 8024984:	2002e7ec 	.word	0x2002e7ec

08024988 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024988:	b510      	push	{r4, lr}
 802498a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802498c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802498e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024990:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8024992:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024996:	f7f1 fd67 	bl	8016468 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 802499a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802499e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 80249a0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80249a2:	4258      	negs	r0, r3
 80249a4:	b002      	add	sp, #8
 80249a6:	bd10      	pop	{r4, pc}

080249a8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80249a8:	f04f 31ff 	mov.w	r1, #4294967295
 80249ac:	6800      	ldr	r0, [r0, #0]
 80249ae:	f7f1 bd63 	b.w	8016478 <osMutexWait>
 80249b2:	bf00      	nop

080249b4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80249b4:	6800      	ldr	r0, [r0, #0]
 80249b6:	f7f1 bd8b 	b.w	80164d0 <osMutexRelease>
 80249ba:	bf00      	nop

080249bc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80249bc:	b510      	push	{r4, lr}
 80249be:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80249c0:	2400      	movs	r4, #0
 80249c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80249c6:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 80249c8:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80249ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 80249cc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80249ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80249d2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80249d6:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 80249da:	f7f1 fce9 	bl	80163b0 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80249de:	b008      	add	sp, #32
 80249e0:	bd10      	pop	{r4, pc}
 80249e2:	bf00      	nop

080249e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80249e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80249e6:	2200      	movs	r2, #0
 80249e8:	4917      	ldr	r1, [pc, #92]	; (8024a48 <MX_USB_DEVICE_Init+0x64>)
 80249ea:	4818      	ldr	r0, [pc, #96]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 80249ec:	f7f1 f84a 	bl	8015a84 <USBD_Init>
 80249f0:	b970      	cbnz	r0, 8024a10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80249f2:	4917      	ldr	r1, [pc, #92]	; (8024a50 <MX_USB_DEVICE_Init+0x6c>)
 80249f4:	4815      	ldr	r0, [pc, #84]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 80249f6:	f7f1 f85d 	bl	8015ab4 <USBD_RegisterClass>
 80249fa:	b988      	cbnz	r0, 8024a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80249fc:	4915      	ldr	r1, [pc, #84]	; (8024a54 <MX_USB_DEVICE_Init+0x70>)
 80249fe:	4813      	ldr	r0, [pc, #76]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 8024a00:	f7f1 f80a 	bl	8015a18 <USBD_CDC_RegisterInterface>
 8024a04:	b9a0      	cbnz	r0, 8024a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024a06:	4811      	ldr	r0, [pc, #68]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 8024a08:	f7f1 f86a 	bl	8015ae0 <USBD_Start>
 8024a0c:	b9b8      	cbnz	r0, 8024a3e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024a0e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8024a10:	f7df fefa 	bl	8004808 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024a14:	490e      	ldr	r1, [pc, #56]	; (8024a50 <MX_USB_DEVICE_Init+0x6c>)
 8024a16:	480d      	ldr	r0, [pc, #52]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 8024a18:	f7f1 f84c 	bl	8015ab4 <USBD_RegisterClass>
 8024a1c:	2800      	cmp	r0, #0
 8024a1e:	d0ed      	beq.n	80249fc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8024a20:	f7df fef2 	bl	8004808 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024a24:	490b      	ldr	r1, [pc, #44]	; (8024a54 <MX_USB_DEVICE_Init+0x70>)
 8024a26:	4809      	ldr	r0, [pc, #36]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 8024a28:	f7f0 fff6 	bl	8015a18 <USBD_CDC_RegisterInterface>
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	d0ea      	beq.n	8024a06 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8024a30:	f7df feea 	bl	8004808 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024a34:	4805      	ldr	r0, [pc, #20]	; (8024a4c <MX_USB_DEVICE_Init+0x68>)
 8024a36:	f7f1 f853 	bl	8015ae0 <USBD_Start>
 8024a3a:	2800      	cmp	r0, #0
 8024a3c:	d0e7      	beq.n	8024a0e <MX_USB_DEVICE_Init+0x2a>
}
 8024a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8024a42:	f7df bee1 	b.w	8004808 <Error_Handler>
 8024a46:	bf00      	nop
 8024a48:	20000444 	.word	0x20000444
 8024a4c:	2002e7f0 	.word	0x2002e7f0
 8024a50:	20000314 	.word	0x20000314
 8024a54:	20000430 	.word	0x20000430

08024a58 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8024a58:	2000      	movs	r0, #0
 8024a5a:	4770      	bx	lr

08024a5c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8024a5c:	2000      	movs	r0, #0
 8024a5e:	4770      	bx	lr

08024a60 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8024a60:	2000      	movs	r0, #0
 8024a62:	4770      	bx	lr

08024a64 <CDC_Receive_FS>:
{
 8024a64:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024a66:	4c05      	ldr	r4, [pc, #20]	; (8024a7c <CDC_Receive_FS+0x18>)
{
 8024a68:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024a6a:	4620      	mov	r0, r4
 8024a6c:	f7f0 ffe6 	bl	8015a3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8024a70:	4620      	mov	r0, r4
 8024a72:	f7f0 ffeb 	bl	8015a4c <USBD_CDC_ReceivePacket>
}
 8024a76:	2000      	movs	r0, #0
 8024a78:	bd10      	pop	{r4, pc}
 8024a7a:	bf00      	nop
 8024a7c:	2002e7f0 	.word	0x2002e7f0

08024a80 <CDC_Init_FS>:
{
 8024a80:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8024a82:	4c06      	ldr	r4, [pc, #24]	; (8024a9c <CDC_Init_FS+0x1c>)
 8024a84:	2200      	movs	r2, #0
 8024a86:	4906      	ldr	r1, [pc, #24]	; (8024aa0 <CDC_Init_FS+0x20>)
 8024a88:	4620      	mov	r0, r4
 8024a8a:	f7f0 ffcd 	bl	8015a28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8024a8e:	4905      	ldr	r1, [pc, #20]	; (8024aa4 <CDC_Init_FS+0x24>)
 8024a90:	4620      	mov	r0, r4
 8024a92:	f7f0 ffd3 	bl	8015a3c <USBD_CDC_SetRxBuffer>
}
 8024a96:	2000      	movs	r0, #0
 8024a98:	bd10      	pop	{r4, pc}
 8024a9a:	bf00      	nop
 8024a9c:	2002e7f0 	.word	0x2002e7f0
 8024aa0:	2002f2c0 	.word	0x2002f2c0
 8024aa4:	2002eac0 	.word	0x2002eac0

08024aa8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8024aa8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8024aaa:	4801      	ldr	r0, [pc, #4]	; (8024ab0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8024aac:	800b      	strh	r3, [r1, #0]
}
 8024aae:	4770      	bx	lr
 8024ab0:	20000470 	.word	0x20000470

08024ab4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8024ab4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8024ab6:	4801      	ldr	r0, [pc, #4]	; (8024abc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8024ab8:	800b      	strh	r3, [r1, #0]
}
 8024aba:	4770      	bx	lr
 8024abc:	20000484 	.word	0x20000484

08024ac0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8024ac0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8024ac2:	4801      	ldr	r0, [pc, #4]	; (8024ac8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8024ac4:	800b      	strh	r3, [r1, #0]
}
 8024ac6:	4770      	bx	lr
 8024ac8:	20000464 	.word	0x20000464

08024acc <USBD_FS_ManufacturerStrDescriptor>:
{
 8024acc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ace:	4c04      	ldr	r4, [pc, #16]	; (8024ae0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8024ad0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ad2:	4804      	ldr	r0, [pc, #16]	; (8024ae4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8024ad4:	4621      	mov	r1, r4
 8024ad6:	f7f1 fbc7 	bl	8016268 <USBD_GetString>
}
 8024ada:	4620      	mov	r0, r4
 8024adc:	bd10      	pop	{r4, pc}
 8024ade:	bf00      	nop
 8024ae0:	2002fac0 	.word	0x2002fac0
 8024ae4:	08047060 	.word	0x08047060

08024ae8 <USBD_FS_ProductStrDescriptor>:
{
 8024ae8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024aea:	4c04      	ldr	r4, [pc, #16]	; (8024afc <USBD_FS_ProductStrDescriptor+0x14>)
{
 8024aec:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024aee:	4804      	ldr	r0, [pc, #16]	; (8024b00 <USBD_FS_ProductStrDescriptor+0x18>)
 8024af0:	4621      	mov	r1, r4
 8024af2:	f7f1 fbb9 	bl	8016268 <USBD_GetString>
}
 8024af6:	4620      	mov	r0, r4
 8024af8:	bd10      	pop	{r4, pc}
 8024afa:	bf00      	nop
 8024afc:	2002fac0 	.word	0x2002fac0
 8024b00:	08047074 	.word	0x08047074

08024b04 <USBD_FS_ConfigStrDescriptor>:
{
 8024b04:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024b06:	4c04      	ldr	r4, [pc, #16]	; (8024b18 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8024b08:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024b0a:	4804      	ldr	r0, [pc, #16]	; (8024b1c <USBD_FS_ConfigStrDescriptor+0x18>)
 8024b0c:	4621      	mov	r1, r4
 8024b0e:	f7f1 fbab 	bl	8016268 <USBD_GetString>
}
 8024b12:	4620      	mov	r0, r4
 8024b14:	bd10      	pop	{r4, pc}
 8024b16:	bf00      	nop
 8024b18:	2002fac0 	.word	0x2002fac0
 8024b1c:	0804708c 	.word	0x0804708c

08024b20 <USBD_FS_InterfaceStrDescriptor>:
{
 8024b20:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024b22:	4c04      	ldr	r4, [pc, #16]	; (8024b34 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8024b24:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024b26:	4804      	ldr	r0, [pc, #16]	; (8024b38 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8024b28:	4621      	mov	r1, r4
 8024b2a:	f7f1 fb9d 	bl	8016268 <USBD_GetString>
}
 8024b2e:	4620      	mov	r0, r4
 8024b30:	bd10      	pop	{r4, pc}
 8024b32:	bf00      	nop
 8024b34:	2002fac0 	.word	0x2002fac0
 8024b38:	08047098 	.word	0x08047098

08024b3c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8024b3c:	4b21      	ldr	r3, [pc, #132]	; (8024bc4 <USBD_FS_SerialStrDescriptor+0x88>)
 8024b3e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8024b42:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8024b46:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8024b48:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8024b4a:	f04f 041a 	mov.w	r4, #26
 8024b4e:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8024b50:	d101      	bne.n	8024b56 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8024b52:	481d      	ldr	r0, [pc, #116]	; (8024bc8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024b54:	bd30      	pop	{r4, r5, pc}
 8024b56:	491c      	ldr	r1, [pc, #112]	; (8024bc8 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8024b58:	f04f 0e00 	mov.w	lr, #0
 8024b5c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8024b60:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8024b62:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8024b64:	0f13      	lsrs	r3, r2, #28
 8024b66:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024b6a:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8024b6e:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024b72:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024b76:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024b7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8024b7e:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024b82:	bf34      	ite	cc
 8024b84:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024b88:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8024b8c:	f1be 0f10 	cmp.w	lr, #16
 8024b90:	d1e8      	bne.n	8024b64 <USBD_FS_SerialStrDescriptor+0x28>
 8024b92:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8024b94:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8024b96:	0f03      	lsrs	r3, r0, #28
 8024b98:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024b9c:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8024ba0:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024ba2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024ba6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024baa:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8024bae:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024bb2:	bf34      	ite	cc
 8024bb4:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024bb8:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8024bba:	2a08      	cmp	r2, #8
 8024bbc:	d1eb      	bne.n	8024b96 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8024bbe:	4802      	ldr	r0, [pc, #8]	; (8024bc8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024bc0:	bd30      	pop	{r4, r5, pc}
 8024bc2:	bf00      	nop
 8024bc4:	1ff0f000 	.word	0x1ff0f000
 8024bc8:	20000488 	.word	0x20000488

08024bcc <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8024bcc:	6803      	ldr	r3, [r0, #0]
{
 8024bce:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8024bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8024bd4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024bd6:	f04f 0400 	mov.w	r4, #0
 8024bda:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024bde:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8024be2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8024be4:	d001      	beq.n	8024bea <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8024be6:	b009      	add	sp, #36	; 0x24
 8024be8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024bea:	4d1e      	ldr	r5, [pc, #120]	; (8024c64 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8024bec:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bf0:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024bf2:	481d      	ldr	r0, [pc, #116]	; (8024c68 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024bf4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024bf6:	f043 0301 	orr.w	r3, r3, #1
 8024bfa:	632b      	str	r3, [r5, #48]	; 0x30
 8024bfc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024bfe:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024c02:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024c06:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024c08:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024c0a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024c0c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024c0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024c14:	f7e7 fd6c 	bl	800c6f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8024c18:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8024c1c:	a903      	add	r1, sp, #12
 8024c1e:	4812      	ldr	r0, [pc, #72]	; (8024c68 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024c20:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024c22:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8024c26:	f7e7 fd63 	bl	800c6f0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024c2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024c2c:	4622      	mov	r2, r4
 8024c2e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024c34:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024c36:	636b      	str	r3, [r5, #52]	; 0x34
 8024c38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8024c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024c3e:	9301      	str	r3, [sp, #4]
 8024c40:	9b01      	ldr	r3, [sp, #4]
 8024c42:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8024c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024c48:	646b      	str	r3, [r5, #68]	; 0x44
 8024c4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8024c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024c50:	9302      	str	r3, [sp, #8]
 8024c52:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8024c54:	f7e4 fece 	bl	80099f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8024c58:	2043      	movs	r0, #67	; 0x43
 8024c5a:	f7e4 ff15 	bl	8009a88 <HAL_NVIC_EnableIRQ>
}
 8024c5e:	b009      	add	sp, #36	; 0x24
 8024c60:	bd30      	pop	{r4, r5, pc}
 8024c62:	bf00      	nop
 8024c64:	40023800 	.word	0x40023800
 8024c68:	40020000 	.word	0x40020000

08024c6c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8024c6c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8024c70:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024c74:	f7f0 bf46 	b.w	8015b04 <USBD_LL_SetupStage>

08024c78 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8024c78:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8024c7c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024c80:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024c84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8024c88:	f7f0 bf6a 	b.w	8015b60 <USBD_LL_DataOutStage>

08024c8c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8024c8c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8024c90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024c94:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8024c9a:	f7f0 bf97 	b.w	8015bcc <USBD_LL_DataInStage>
 8024c9e:	bf00      	nop

08024ca0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8024ca0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024ca4:	f7f1 b82e 	b.w	8015d04 <USBD_LL_SOF>

08024ca8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8024ca8:	68c1      	ldr	r1, [r0, #12]
{
 8024caa:	b510      	push	{r4, lr}
 8024cac:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8024cae:	b111      	cbz	r1, 8024cb6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8024cb0:	2902      	cmp	r1, #2
 8024cb2:	d10a      	bne.n	8024cca <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8024cb4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8024cb6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8024cba:	f7f1 f80b 	bl	8015cd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8024cbe:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8024cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8024cc6:	f7f0 bfdd 	b.w	8015c84 <USBD_LL_Reset>
    Error_Handler();
 8024cca:	f7df fd9d 	bl	8004808 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8024cce:	2101      	movs	r1, #1
 8024cd0:	e7f1      	b.n	8024cb6 <HAL_PCD_ResetCallback+0xe>
 8024cd2:	bf00      	nop

08024cd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8024cd4:	b510      	push	{r4, lr}
 8024cd6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8024cd8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024cdc:	f7f0 fffe 	bl	8015cdc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8024ce0:	6822      	ldr	r2, [r4, #0]
 8024ce2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8024ce6:	f043 0301 	orr.w	r3, r3, #1
 8024cea:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8024cee:	6a23      	ldr	r3, [r4, #32]
 8024cf0:	b123      	cbz	r3, 8024cfc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8024cf2:	4a03      	ldr	r2, [pc, #12]	; (8024d00 <HAL_PCD_SuspendCallback+0x2c>)
 8024cf4:	6913      	ldr	r3, [r2, #16]
 8024cf6:	f043 0306 	orr.w	r3, r3, #6
 8024cfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8024cfc:	bd10      	pop	{r4, pc}
 8024cfe:	bf00      	nop
 8024d00:	e000ed00 	.word	0xe000ed00

08024d04 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8024d04:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024d08:	f7f0 bff2 	b.w	8015cf0 <USBD_LL_Resume>

08024d0c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8024d0c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024d10:	f7f1 b808 	b.w	8015d24 <USBD_LL_IsoOUTIncomplete>

08024d14 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8024d14:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024d18:	f7f1 b802 	b.w	8015d20 <USBD_LL_IsoINIncomplete>

08024d1c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8024d1c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024d20:	f7f1 b802 	b.w	8015d28 <USBD_LL_DevConnected>

08024d24 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8024d24:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8024d28:	f7f1 b800 	b.w	8015d2c <USBD_LL_DevDisconnected>

08024d2c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8024d2c:	7802      	ldrb	r2, [r0, #0]
 8024d2e:	b10a      	cbz	r2, 8024d34 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8024d30:	2000      	movs	r0, #0
 8024d32:	4770      	bx	lr
{
 8024d34:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8024d36:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8024d38:	4b14      	ldr	r3, [pc, #80]	; (8024d8c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8024d3a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8024d3c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8024d40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8024d42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8024d44:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8024d48:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8024d4c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8024d4e:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8024d50:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8024d52:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8024d54:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8024d58:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8024d5c:	2206      	movs	r2, #6
 8024d5e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8024d60:	f7e8 fdfe 	bl	800d960 <HAL_PCD_Init>
 8024d64:	b978      	cbnz	r0, 8024d86 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8024d66:	2180      	movs	r1, #128	; 0x80
 8024d68:	4808      	ldr	r0, [pc, #32]	; (8024d8c <USBD_LL_Init+0x60>)
 8024d6a:	f7e9 fb63 	bl	800e434 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8024d6e:	2240      	movs	r2, #64	; 0x40
 8024d70:	2100      	movs	r1, #0
 8024d72:	4806      	ldr	r0, [pc, #24]	; (8024d8c <USBD_LL_Init+0x60>)
 8024d74:	f7e9 fb34 	bl	800e3e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8024d78:	2280      	movs	r2, #128	; 0x80
 8024d7a:	2101      	movs	r1, #1
 8024d7c:	4803      	ldr	r0, [pc, #12]	; (8024d8c <USBD_LL_Init+0x60>)
 8024d7e:	f7e9 fb2f 	bl	800e3e0 <HAL_PCDEx_SetTxFiFo>
}
 8024d82:	2000      	movs	r0, #0
 8024d84:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8024d86:	f7df fd3f 	bl	8004808 <Error_Handler>
 8024d8a:	e7ec      	b.n	8024d66 <USBD_LL_Init+0x3a>
 8024d8c:	2002fcc0 	.word	0x2002fcc0

08024d90 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8024d90:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024d94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8024d96:	f7e8 fe91 	bl	800dabc <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8024d9a:	2803      	cmp	r0, #3
 8024d9c:	d802      	bhi.n	8024da4 <USBD_LL_Start+0x14>
 8024d9e:	4b02      	ldr	r3, [pc, #8]	; (8024da8 <USBD_LL_Start+0x18>)
 8024da0:	5c18      	ldrb	r0, [r3, r0]
}
 8024da2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8024da4:	2003      	movs	r0, #3
}
 8024da6:	bd08      	pop	{r3, pc}
 8024da8:	080470a8 	.word	0x080470a8

08024dac <USBD_LL_OpenEP>:
{
 8024dac:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8024dae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024db2:	461a      	mov	r2, r3
 8024db4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8024db6:	4663      	mov	r3, ip
 8024db8:	f7e9 f9c4 	bl	800e144 <HAL_PCD_EP_Open>
  switch (hal_status)
 8024dbc:	2803      	cmp	r0, #3
 8024dbe:	d802      	bhi.n	8024dc6 <USBD_LL_OpenEP+0x1a>
 8024dc0:	4b02      	ldr	r3, [pc, #8]	; (8024dcc <USBD_LL_OpenEP+0x20>)
 8024dc2:	5c18      	ldrb	r0, [r3, r0]
}
 8024dc4:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8024dc6:	2003      	movs	r0, #3
}
 8024dc8:	bd08      	pop	{r3, pc}
 8024dca:	bf00      	nop
 8024dcc:	080470a8 	.word	0x080470a8

08024dd0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8024dd0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024dd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8024dd6:	f7e9 f9f3 	bl	800e1c0 <HAL_PCD_EP_Close>
  switch (hal_status)
 8024dda:	2803      	cmp	r0, #3
 8024ddc:	d802      	bhi.n	8024de4 <USBD_LL_CloseEP+0x14>
 8024dde:	4b02      	ldr	r3, [pc, #8]	; (8024de8 <USBD_LL_CloseEP+0x18>)
 8024de0:	5c18      	ldrb	r0, [r3, r0]
}
 8024de2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8024de4:	2003      	movs	r0, #3
}
 8024de6:	bd08      	pop	{r3, pc}
 8024de8:	080470a8 	.word	0x080470a8

08024dec <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8024dec:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024df0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8024df2:	f7e9 fa75 	bl	800e2e0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8024df6:	2803      	cmp	r0, #3
 8024df8:	d802      	bhi.n	8024e00 <USBD_LL_StallEP+0x14>
 8024dfa:	4b02      	ldr	r3, [pc, #8]	; (8024e04 <USBD_LL_StallEP+0x18>)
 8024dfc:	5c18      	ldrb	r0, [r3, r0]
}
 8024dfe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8024e00:	2003      	movs	r0, #3
}
 8024e02:	bd08      	pop	{r3, pc}
 8024e04:	080470a8 	.word	0x080470a8

08024e08 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8024e08:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024e0c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8024e0e:	f7e9 faab 	bl	800e368 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8024e12:	2803      	cmp	r0, #3
 8024e14:	d802      	bhi.n	8024e1c <USBD_LL_ClearStallEP+0x14>
 8024e16:	4b02      	ldr	r3, [pc, #8]	; (8024e20 <USBD_LL_ClearStallEP+0x18>)
 8024e18:	5c18      	ldrb	r0, [r3, r0]
}
 8024e1a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8024e1c:	2003      	movs	r0, #3
}
 8024e1e:	bd08      	pop	{r3, pc}
 8024e20:	080470a8 	.word	0x080470a8

08024e24 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8024e24:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8024e26:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8024e2a:	d406      	bmi.n	8024e3a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8024e2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8024e30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8024e34:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8024e38:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8024e3a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8024e3e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8024e42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8024e46:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8024e4a:	4770      	bx	lr

08024e4c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8024e4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024e50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8024e52:	f7e9 f961 	bl	800e118 <HAL_PCD_SetAddress>
  switch (hal_status)
 8024e56:	2803      	cmp	r0, #3
 8024e58:	d802      	bhi.n	8024e60 <USBD_LL_SetUSBAddress+0x14>
 8024e5a:	4b02      	ldr	r3, [pc, #8]	; (8024e64 <USBD_LL_SetUSBAddress+0x18>)
 8024e5c:	5c18      	ldrb	r0, [r3, r0]
}
 8024e5e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8024e60:	2003      	movs	r0, #3
}
 8024e62:	bd08      	pop	{r3, pc}
 8024e64:	080470a8 	.word	0x080470a8

08024e68 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8024e68:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024e6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8024e6e:	f7e9 fa0f 	bl	800e290 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8024e72:	2803      	cmp	r0, #3
 8024e74:	d802      	bhi.n	8024e7c <USBD_LL_Transmit+0x14>
 8024e76:	4b02      	ldr	r3, [pc, #8]	; (8024e80 <USBD_LL_Transmit+0x18>)
 8024e78:	5c18      	ldrb	r0, [r3, r0]
}
 8024e7a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8024e7c:	2003      	movs	r0, #3
}
 8024e7e:	bd08      	pop	{r3, pc}
 8024e80:	080470a8 	.word	0x080470a8

08024e84 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8024e84:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8024e88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8024e8a:	f7e9 f9cf 	bl	800e22c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8024e8e:	2803      	cmp	r0, #3
 8024e90:	d802      	bhi.n	8024e98 <USBD_LL_PrepareReceive+0x14>
 8024e92:	4b02      	ldr	r3, [pc, #8]	; (8024e9c <USBD_LL_PrepareReceive+0x18>)
 8024e94:	5c18      	ldrb	r0, [r3, r0]
}
 8024e96:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8024e98:	2003      	movs	r0, #3
}
 8024e9a:	bd08      	pop	{r3, pc}
 8024e9c:	080470a8 	.word	0x080470a8

08024ea0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8024ea0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8024ea4:	f7e9 b9ea 	b.w	800e27c <HAL_PCD_EP_GetRxCount>

08024ea8 <HAL_PCDEx_LPM_Callback>:
{
 8024ea8:	b510      	push	{r4, lr}
 8024eaa:	4604      	mov	r4, r0
  switch (msg)
 8024eac:	b1a1      	cbz	r1, 8024ed8 <HAL_PCDEx_LPM_Callback+0x30>
 8024eae:	2901      	cmp	r1, #1
 8024eb0:	d111      	bne.n	8024ed6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8024eb2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8024eb4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8024eb8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8024ebc:	f043 0301 	orr.w	r3, r3, #1
 8024ec0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8024ec4:	f7f0 ff0a 	bl	8015cdc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8024ec8:	6a23      	ldr	r3, [r4, #32]
 8024eca:	b123      	cbz	r3, 8024ed6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8024ecc:	4a0e      	ldr	r2, [pc, #56]	; (8024f08 <HAL_PCDEx_LPM_Callback+0x60>)
 8024ece:	6913      	ldr	r3, [r2, #16]
 8024ed0:	f043 0306 	orr.w	r3, r3, #6
 8024ed4:	6113      	str	r3, [r2, #16]
}
 8024ed6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8024ed8:	6a03      	ldr	r3, [r0, #32]
 8024eda:	b963      	cbnz	r3, 8024ef6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8024edc:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8024ede:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8024ee2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8024ee6:	f023 0301 	bic.w	r3, r3, #1
}
 8024eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8024eee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8024ef2:	f7f0 befd 	b.w	8015cf0 <USBD_LL_Resume>
  SystemClock_Config();
 8024ef6:	f7df fc8f 	bl	8004818 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8024efa:	4a03      	ldr	r2, [pc, #12]	; (8024f08 <HAL_PCDEx_LPM_Callback+0x60>)
 8024efc:	6913      	ldr	r3, [r2, #16]
 8024efe:	f023 0306 	bic.w	r3, r3, #6
 8024f02:	6113      	str	r3, [r2, #16]
 8024f04:	e7ea      	b.n	8024edc <HAL_PCDEx_LPM_Callback+0x34>
 8024f06:	bf00      	nop
 8024f08:	e000ed00 	.word	0xe000ed00

08024f0c <atoi>:
 8024f0c:	220a      	movs	r2, #10
 8024f0e:	2100      	movs	r1, #0
 8024f10:	f002 ba8c 	b.w	802742c <strtol>

08024f14 <ctime>:
 8024f14:	b508      	push	{r3, lr}
 8024f16:	f000 f91f 	bl	8025158 <localtime>
 8024f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8024f1e:	f002 be1f 	b.w	8027b60 <asctime>
 8024f22:	Address 0x0000000008024f22 is out of bounds.


08024f24 <std>:
 8024f24:	2300      	movs	r3, #0
 8024f26:	b510      	push	{r4, lr}
 8024f28:	4604      	mov	r4, r0
 8024f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8024f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024f32:	6083      	str	r3, [r0, #8]
 8024f34:	8181      	strh	r1, [r0, #12]
 8024f36:	6643      	str	r3, [r0, #100]	; 0x64
 8024f38:	81c2      	strh	r2, [r0, #14]
 8024f3a:	6183      	str	r3, [r0, #24]
 8024f3c:	4619      	mov	r1, r3
 8024f3e:	2208      	movs	r2, #8
 8024f40:	305c      	adds	r0, #92	; 0x5c
 8024f42:	f000 fa69 	bl	8025418 <memset>
 8024f46:	4b05      	ldr	r3, [pc, #20]	; (8024f5c <std+0x38>)
 8024f48:	6263      	str	r3, [r4, #36]	; 0x24
 8024f4a:	4b05      	ldr	r3, [pc, #20]	; (8024f60 <std+0x3c>)
 8024f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8024f4e:	4b05      	ldr	r3, [pc, #20]	; (8024f64 <std+0x40>)
 8024f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024f52:	4b05      	ldr	r3, [pc, #20]	; (8024f68 <std+0x44>)
 8024f54:	6224      	str	r4, [r4, #32]
 8024f56:	6323      	str	r3, [r4, #48]	; 0x30
 8024f58:	bd10      	pop	{r4, pc}
 8024f5a:	bf00      	nop
 8024f5c:	080267c1 	.word	0x080267c1
 8024f60:	080267e7 	.word	0x080267e7
 8024f64:	0802681f 	.word	0x0802681f
 8024f68:	08026843 	.word	0x08026843

08024f6c <_cleanup_r>:
 8024f6c:	4901      	ldr	r1, [pc, #4]	; (8024f74 <_cleanup_r+0x8>)
 8024f6e:	f000 b8af 	b.w	80250d0 <_fwalk_reent>
 8024f72:	bf00      	nop
 8024f74:	08028985 	.word	0x08028985

08024f78 <__sfmoreglue>:
 8024f78:	b570      	push	{r4, r5, r6, lr}
 8024f7a:	2268      	movs	r2, #104	; 0x68
 8024f7c:	1e4d      	subs	r5, r1, #1
 8024f7e:	4355      	muls	r5, r2
 8024f80:	460e      	mov	r6, r1
 8024f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024f86:	f000 fd2d 	bl	80259e4 <_malloc_r>
 8024f8a:	4604      	mov	r4, r0
 8024f8c:	b140      	cbz	r0, 8024fa0 <__sfmoreglue+0x28>
 8024f8e:	2100      	movs	r1, #0
 8024f90:	e9c0 1600 	strd	r1, r6, [r0]
 8024f94:	300c      	adds	r0, #12
 8024f96:	60a0      	str	r0, [r4, #8]
 8024f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024f9c:	f000 fa3c 	bl	8025418 <memset>
 8024fa0:	4620      	mov	r0, r4
 8024fa2:	bd70      	pop	{r4, r5, r6, pc}

08024fa4 <__sfp_lock_acquire>:
 8024fa4:	4801      	ldr	r0, [pc, #4]	; (8024fac <__sfp_lock_acquire+0x8>)
 8024fa6:	f000 b9eb 	b.w	8025380 <__retarget_lock_acquire_recursive>
 8024faa:	bf00      	nop
 8024fac:	200300c6 	.word	0x200300c6

08024fb0 <__sfp_lock_release>:
 8024fb0:	4801      	ldr	r0, [pc, #4]	; (8024fb8 <__sfp_lock_release+0x8>)
 8024fb2:	f000 b9e7 	b.w	8025384 <__retarget_lock_release_recursive>
 8024fb6:	bf00      	nop
 8024fb8:	200300c6 	.word	0x200300c6

08024fbc <__sinit_lock_acquire>:
 8024fbc:	4801      	ldr	r0, [pc, #4]	; (8024fc4 <__sinit_lock_acquire+0x8>)
 8024fbe:	f000 b9df 	b.w	8025380 <__retarget_lock_acquire_recursive>
 8024fc2:	bf00      	nop
 8024fc4:	200300c7 	.word	0x200300c7

08024fc8 <__sinit_lock_release>:
 8024fc8:	4801      	ldr	r0, [pc, #4]	; (8024fd0 <__sinit_lock_release+0x8>)
 8024fca:	f000 b9db 	b.w	8025384 <__retarget_lock_release_recursive>
 8024fce:	bf00      	nop
 8024fd0:	200300c7 	.word	0x200300c7

08024fd4 <__sinit>:
 8024fd4:	b510      	push	{r4, lr}
 8024fd6:	4604      	mov	r4, r0
 8024fd8:	f7ff fff0 	bl	8024fbc <__sinit_lock_acquire>
 8024fdc:	69a3      	ldr	r3, [r4, #24]
 8024fde:	b11b      	cbz	r3, 8024fe8 <__sinit+0x14>
 8024fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024fe4:	f7ff bff0 	b.w	8024fc8 <__sinit_lock_release>
 8024fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024fec:	6523      	str	r3, [r4, #80]	; 0x50
 8024fee:	4b13      	ldr	r3, [pc, #76]	; (802503c <__sinit+0x68>)
 8024ff0:	4a13      	ldr	r2, [pc, #76]	; (8025040 <__sinit+0x6c>)
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8024ff6:	42a3      	cmp	r3, r4
 8024ff8:	bf04      	itt	eq
 8024ffa:	2301      	moveq	r3, #1
 8024ffc:	61a3      	streq	r3, [r4, #24]
 8024ffe:	4620      	mov	r0, r4
 8025000:	f000 f820 	bl	8025044 <__sfp>
 8025004:	6060      	str	r0, [r4, #4]
 8025006:	4620      	mov	r0, r4
 8025008:	f000 f81c 	bl	8025044 <__sfp>
 802500c:	60a0      	str	r0, [r4, #8]
 802500e:	4620      	mov	r0, r4
 8025010:	f000 f818 	bl	8025044 <__sfp>
 8025014:	2200      	movs	r2, #0
 8025016:	60e0      	str	r0, [r4, #12]
 8025018:	2104      	movs	r1, #4
 802501a:	6860      	ldr	r0, [r4, #4]
 802501c:	f7ff ff82 	bl	8024f24 <std>
 8025020:	68a0      	ldr	r0, [r4, #8]
 8025022:	2201      	movs	r2, #1
 8025024:	2109      	movs	r1, #9
 8025026:	f7ff ff7d 	bl	8024f24 <std>
 802502a:	68e0      	ldr	r0, [r4, #12]
 802502c:	2202      	movs	r2, #2
 802502e:	2112      	movs	r1, #18
 8025030:	f7ff ff78 	bl	8024f24 <std>
 8025034:	2301      	movs	r3, #1
 8025036:	61a3      	str	r3, [r4, #24]
 8025038:	e7d2      	b.n	8024fe0 <__sinit+0xc>
 802503a:	bf00      	nop
 802503c:	08047210 	.word	0x08047210
 8025040:	08024f6d 	.word	0x08024f6d

08025044 <__sfp>:
 8025044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025046:	4607      	mov	r7, r0
 8025048:	f7ff ffac 	bl	8024fa4 <__sfp_lock_acquire>
 802504c:	4b1e      	ldr	r3, [pc, #120]	; (80250c8 <__sfp+0x84>)
 802504e:	681e      	ldr	r6, [r3, #0]
 8025050:	69b3      	ldr	r3, [r6, #24]
 8025052:	b913      	cbnz	r3, 802505a <__sfp+0x16>
 8025054:	4630      	mov	r0, r6
 8025056:	f7ff ffbd 	bl	8024fd4 <__sinit>
 802505a:	3648      	adds	r6, #72	; 0x48
 802505c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025060:	3b01      	subs	r3, #1
 8025062:	d503      	bpl.n	802506c <__sfp+0x28>
 8025064:	6833      	ldr	r3, [r6, #0]
 8025066:	b30b      	cbz	r3, 80250ac <__sfp+0x68>
 8025068:	6836      	ldr	r6, [r6, #0]
 802506a:	e7f7      	b.n	802505c <__sfp+0x18>
 802506c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025070:	b9d5      	cbnz	r5, 80250a8 <__sfp+0x64>
 8025072:	4b16      	ldr	r3, [pc, #88]	; (80250cc <__sfp+0x88>)
 8025074:	60e3      	str	r3, [r4, #12]
 8025076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802507a:	6665      	str	r5, [r4, #100]	; 0x64
 802507c:	f000 f97e 	bl	802537c <__retarget_lock_init_recursive>
 8025080:	f7ff ff96 	bl	8024fb0 <__sfp_lock_release>
 8025084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802508c:	6025      	str	r5, [r4, #0]
 802508e:	61a5      	str	r5, [r4, #24]
 8025090:	2208      	movs	r2, #8
 8025092:	4629      	mov	r1, r5
 8025094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025098:	f000 f9be 	bl	8025418 <memset>
 802509c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80250a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80250a4:	4620      	mov	r0, r4
 80250a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250a8:	3468      	adds	r4, #104	; 0x68
 80250aa:	e7d9      	b.n	8025060 <__sfp+0x1c>
 80250ac:	2104      	movs	r1, #4
 80250ae:	4638      	mov	r0, r7
 80250b0:	f7ff ff62 	bl	8024f78 <__sfmoreglue>
 80250b4:	4604      	mov	r4, r0
 80250b6:	6030      	str	r0, [r6, #0]
 80250b8:	2800      	cmp	r0, #0
 80250ba:	d1d5      	bne.n	8025068 <__sfp+0x24>
 80250bc:	f7ff ff78 	bl	8024fb0 <__sfp_lock_release>
 80250c0:	230c      	movs	r3, #12
 80250c2:	603b      	str	r3, [r7, #0]
 80250c4:	e7ee      	b.n	80250a4 <__sfp+0x60>
 80250c6:	bf00      	nop
 80250c8:	08047210 	.word	0x08047210
 80250cc:	ffff0001 	.word	0xffff0001

080250d0 <_fwalk_reent>:
 80250d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80250d4:	4606      	mov	r6, r0
 80250d6:	4688      	mov	r8, r1
 80250d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80250dc:	2700      	movs	r7, #0
 80250de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80250e2:	f1b9 0901 	subs.w	r9, r9, #1
 80250e6:	d505      	bpl.n	80250f4 <_fwalk_reent+0x24>
 80250e8:	6824      	ldr	r4, [r4, #0]
 80250ea:	2c00      	cmp	r4, #0
 80250ec:	d1f7      	bne.n	80250de <_fwalk_reent+0xe>
 80250ee:	4638      	mov	r0, r7
 80250f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80250f4:	89ab      	ldrh	r3, [r5, #12]
 80250f6:	2b01      	cmp	r3, #1
 80250f8:	d907      	bls.n	802510a <_fwalk_reent+0x3a>
 80250fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80250fe:	3301      	adds	r3, #1
 8025100:	d003      	beq.n	802510a <_fwalk_reent+0x3a>
 8025102:	4629      	mov	r1, r5
 8025104:	4630      	mov	r0, r6
 8025106:	47c0      	blx	r8
 8025108:	4307      	orrs	r7, r0
 802510a:	3568      	adds	r5, #104	; 0x68
 802510c:	e7e9      	b.n	80250e2 <_fwalk_reent+0x12>
 802510e:	Address 0x000000000802510e is out of bounds.


08025110 <__libc_init_array>:
 8025110:	b570      	push	{r4, r5, r6, lr}
 8025112:	4d0d      	ldr	r5, [pc, #52]	; (8025148 <__libc_init_array+0x38>)
 8025114:	4c0d      	ldr	r4, [pc, #52]	; (802514c <__libc_init_array+0x3c>)
 8025116:	1b64      	subs	r4, r4, r5
 8025118:	10a4      	asrs	r4, r4, #2
 802511a:	2600      	movs	r6, #0
 802511c:	42a6      	cmp	r6, r4
 802511e:	d109      	bne.n	8025134 <__libc_init_array+0x24>
 8025120:	4d0b      	ldr	r5, [pc, #44]	; (8025150 <__libc_init_array+0x40>)
 8025122:	4c0c      	ldr	r4, [pc, #48]	; (8025154 <__libc_init_array+0x44>)
 8025124:	f005 f938 	bl	802a398 <_init>
 8025128:	1b64      	subs	r4, r4, r5
 802512a:	10a4      	asrs	r4, r4, #2
 802512c:	2600      	movs	r6, #0
 802512e:	42a6      	cmp	r6, r4
 8025130:	d105      	bne.n	802513e <__libc_init_array+0x2e>
 8025132:	bd70      	pop	{r4, r5, r6, pc}
 8025134:	f855 3b04 	ldr.w	r3, [r5], #4
 8025138:	4798      	blx	r3
 802513a:	3601      	adds	r6, #1
 802513c:	e7ee      	b.n	802511c <__libc_init_array+0xc>
 802513e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025142:	4798      	blx	r3
 8025144:	3601      	adds	r6, #1
 8025146:	e7f2      	b.n	802512e <__libc_init_array+0x1e>
 8025148:	0804799c 	.word	0x0804799c
 802514c:	0804799c 	.word	0x0804799c
 8025150:	0804799c 	.word	0x0804799c
 8025154:	080479a0 	.word	0x080479a0

08025158 <localtime>:
 8025158:	b538      	push	{r3, r4, r5, lr}
 802515a:	4b0b      	ldr	r3, [pc, #44]	; (8025188 <localtime+0x30>)
 802515c:	681d      	ldr	r5, [r3, #0]
 802515e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8025160:	4604      	mov	r4, r0
 8025162:	b953      	cbnz	r3, 802517a <localtime+0x22>
 8025164:	2024      	movs	r0, #36	; 0x24
 8025166:	f000 f90f 	bl	8025388 <malloc>
 802516a:	4602      	mov	r2, r0
 802516c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802516e:	b920      	cbnz	r0, 802517a <localtime+0x22>
 8025170:	4b06      	ldr	r3, [pc, #24]	; (802518c <localtime+0x34>)
 8025172:	4807      	ldr	r0, [pc, #28]	; (8025190 <localtime+0x38>)
 8025174:	2132      	movs	r1, #50	; 0x32
 8025176:	f002 fd3b 	bl	8027bf0 <__assert_func>
 802517a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802517c:	4620      	mov	r0, r4
 802517e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025182:	f000 b807 	b.w	8025194 <localtime_r>
 8025186:	bf00      	nop
 8025188:	200004a4 	.word	0x200004a4
 802518c:	08047214 	.word	0x08047214
 8025190:	0804722b 	.word	0x0804722b

08025194 <localtime_r>:
 8025194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025198:	4680      	mov	r8, r0
 802519a:	9101      	str	r1, [sp, #4]
 802519c:	f003 fc84 	bl	8028aa8 <__gettzinfo>
 80251a0:	9901      	ldr	r1, [sp, #4]
 80251a2:	4605      	mov	r5, r0
 80251a4:	4640      	mov	r0, r8
 80251a6:	f003 fc83 	bl	8028ab0 <gmtime_r>
 80251aa:	6943      	ldr	r3, [r0, #20]
 80251ac:	0799      	lsls	r1, r3, #30
 80251ae:	4604      	mov	r4, r0
 80251b0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80251b4:	d105      	bne.n	80251c2 <localtime_r+0x2e>
 80251b6:	2264      	movs	r2, #100	; 0x64
 80251b8:	fb97 f3f2 	sdiv	r3, r7, r2
 80251bc:	fb02 7313 	mls	r3, r2, r3, r7
 80251c0:	bb73      	cbnz	r3, 8025220 <localtime_r+0x8c>
 80251c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80251c6:	fb97 f6f3 	sdiv	r6, r7, r3
 80251ca:	fb03 7616 	mls	r6, r3, r6, r7
 80251ce:	fab6 f386 	clz	r3, r6
 80251d2:	095b      	lsrs	r3, r3, #5
 80251d4:	4e67      	ldr	r6, [pc, #412]	; (8025374 <localtime_r+0x1e0>)
 80251d6:	2230      	movs	r2, #48	; 0x30
 80251d8:	fb02 6603 	mla	r6, r2, r3, r6
 80251dc:	f002 fa58 	bl	8027690 <__tz_lock>
 80251e0:	f002 fa62 	bl	80276a8 <_tzset_unlocked>
 80251e4:	4b64      	ldr	r3, [pc, #400]	; (8025378 <localtime_r+0x1e4>)
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	b34b      	cbz	r3, 802523e <localtime_r+0xaa>
 80251ea:	686b      	ldr	r3, [r5, #4]
 80251ec:	42bb      	cmp	r3, r7
 80251ee:	d119      	bne.n	8025224 <localtime_r+0x90>
 80251f0:	682f      	ldr	r7, [r5, #0]
 80251f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80251f6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80251fa:	b9df      	cbnz	r7, 8025234 <localtime_r+0xa0>
 80251fc:	4282      	cmp	r2, r0
 80251fe:	eb73 0101 	sbcs.w	r1, r3, r1
 8025202:	da23      	bge.n	802524c <localtime_r+0xb8>
 8025204:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025208:	4282      	cmp	r2, r0
 802520a:	eb73 0701 	sbcs.w	r7, r3, r1
 802520e:	bfb4      	ite	lt
 8025210:	2701      	movlt	r7, #1
 8025212:	2700      	movge	r7, #0
 8025214:	4282      	cmp	r2, r0
 8025216:	418b      	sbcs	r3, r1
 8025218:	6227      	str	r7, [r4, #32]
 802521a:	db19      	blt.n	8025250 <localtime_r+0xbc>
 802521c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802521e:	e018      	b.n	8025252 <localtime_r+0xbe>
 8025220:	2301      	movs	r3, #1
 8025222:	e7d7      	b.n	80251d4 <localtime_r+0x40>
 8025224:	4638      	mov	r0, r7
 8025226:	f002 f989 	bl	802753c <__tzcalc_limits>
 802522a:	2800      	cmp	r0, #0
 802522c:	d1e0      	bne.n	80251f0 <localtime_r+0x5c>
 802522e:	f04f 33ff 	mov.w	r3, #4294967295
 8025232:	e004      	b.n	802523e <localtime_r+0xaa>
 8025234:	4282      	cmp	r2, r0
 8025236:	eb73 0101 	sbcs.w	r1, r3, r1
 802523a:	da02      	bge.n	8025242 <localtime_r+0xae>
 802523c:	2300      	movs	r3, #0
 802523e:	6223      	str	r3, [r4, #32]
 8025240:	e7ec      	b.n	802521c <localtime_r+0x88>
 8025242:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025246:	4282      	cmp	r2, r0
 8025248:	418b      	sbcs	r3, r1
 802524a:	daf7      	bge.n	802523c <localtime_r+0xa8>
 802524c:	2301      	movs	r3, #1
 802524e:	6223      	str	r3, [r4, #32]
 8025250:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8025252:	6861      	ldr	r1, [r4, #4]
 8025254:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8025258:	203c      	movs	r0, #60	; 0x3c
 802525a:	fb93 f5f2 	sdiv	r5, r3, r2
 802525e:	fb02 3315 	mls	r3, r2, r5, r3
 8025262:	fb93 f2f0 	sdiv	r2, r3, r0
 8025266:	fb00 3012 	mls	r0, r0, r2, r3
 802526a:	6823      	ldr	r3, [r4, #0]
 802526c:	1a89      	subs	r1, r1, r2
 802526e:	68a2      	ldr	r2, [r4, #8]
 8025270:	6061      	str	r1, [r4, #4]
 8025272:	1a1b      	subs	r3, r3, r0
 8025274:	1b52      	subs	r2, r2, r5
 8025276:	2b3b      	cmp	r3, #59	; 0x3b
 8025278:	6023      	str	r3, [r4, #0]
 802527a:	60a2      	str	r2, [r4, #8]
 802527c:	dd35      	ble.n	80252ea <localtime_r+0x156>
 802527e:	3101      	adds	r1, #1
 8025280:	6061      	str	r1, [r4, #4]
 8025282:	3b3c      	subs	r3, #60	; 0x3c
 8025284:	6023      	str	r3, [r4, #0]
 8025286:	6863      	ldr	r3, [r4, #4]
 8025288:	2b3b      	cmp	r3, #59	; 0x3b
 802528a:	dd34      	ble.n	80252f6 <localtime_r+0x162>
 802528c:	3201      	adds	r2, #1
 802528e:	60a2      	str	r2, [r4, #8]
 8025290:	3b3c      	subs	r3, #60	; 0x3c
 8025292:	6063      	str	r3, [r4, #4]
 8025294:	68a3      	ldr	r3, [r4, #8]
 8025296:	2b17      	cmp	r3, #23
 8025298:	dd33      	ble.n	8025302 <localtime_r+0x16e>
 802529a:	69e2      	ldr	r2, [r4, #28]
 802529c:	3201      	adds	r2, #1
 802529e:	61e2      	str	r2, [r4, #28]
 80252a0:	69a2      	ldr	r2, [r4, #24]
 80252a2:	3201      	adds	r2, #1
 80252a4:	2a06      	cmp	r2, #6
 80252a6:	bfc8      	it	gt
 80252a8:	2200      	movgt	r2, #0
 80252aa:	61a2      	str	r2, [r4, #24]
 80252ac:	68e2      	ldr	r2, [r4, #12]
 80252ae:	3b18      	subs	r3, #24
 80252b0:	3201      	adds	r2, #1
 80252b2:	60a3      	str	r3, [r4, #8]
 80252b4:	6923      	ldr	r3, [r4, #16]
 80252b6:	60e2      	str	r2, [r4, #12]
 80252b8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80252bc:	428a      	cmp	r2, r1
 80252be:	dd0e      	ble.n	80252de <localtime_r+0x14a>
 80252c0:	2b0b      	cmp	r3, #11
 80252c2:	eba2 0201 	sub.w	r2, r2, r1
 80252c6:	60e2      	str	r2, [r4, #12]
 80252c8:	f103 0201 	add.w	r2, r3, #1
 80252cc:	bf09      	itett	eq
 80252ce:	6963      	ldreq	r3, [r4, #20]
 80252d0:	6122      	strne	r2, [r4, #16]
 80252d2:	2200      	moveq	r2, #0
 80252d4:	3301      	addeq	r3, #1
 80252d6:	bf02      	ittt	eq
 80252d8:	6122      	streq	r2, [r4, #16]
 80252da:	6163      	streq	r3, [r4, #20]
 80252dc:	61e2      	streq	r2, [r4, #28]
 80252de:	f002 f9dd 	bl	802769c <__tz_unlock>
 80252e2:	4620      	mov	r0, r4
 80252e4:	b002      	add	sp, #8
 80252e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	dacb      	bge.n	8025286 <localtime_r+0xf2>
 80252ee:	3901      	subs	r1, #1
 80252f0:	6061      	str	r1, [r4, #4]
 80252f2:	333c      	adds	r3, #60	; 0x3c
 80252f4:	e7c6      	b.n	8025284 <localtime_r+0xf0>
 80252f6:	2b00      	cmp	r3, #0
 80252f8:	dacc      	bge.n	8025294 <localtime_r+0x100>
 80252fa:	3a01      	subs	r2, #1
 80252fc:	60a2      	str	r2, [r4, #8]
 80252fe:	333c      	adds	r3, #60	; 0x3c
 8025300:	e7c7      	b.n	8025292 <localtime_r+0xfe>
 8025302:	2b00      	cmp	r3, #0
 8025304:	daeb      	bge.n	80252de <localtime_r+0x14a>
 8025306:	69e2      	ldr	r2, [r4, #28]
 8025308:	3a01      	subs	r2, #1
 802530a:	61e2      	str	r2, [r4, #28]
 802530c:	69a2      	ldr	r2, [r4, #24]
 802530e:	3a01      	subs	r2, #1
 8025310:	bf48      	it	mi
 8025312:	2206      	movmi	r2, #6
 8025314:	61a2      	str	r2, [r4, #24]
 8025316:	68e2      	ldr	r2, [r4, #12]
 8025318:	3318      	adds	r3, #24
 802531a:	3a01      	subs	r2, #1
 802531c:	60e2      	str	r2, [r4, #12]
 802531e:	60a3      	str	r3, [r4, #8]
 8025320:	2a00      	cmp	r2, #0
 8025322:	d1dc      	bne.n	80252de <localtime_r+0x14a>
 8025324:	6923      	ldr	r3, [r4, #16]
 8025326:	3b01      	subs	r3, #1
 8025328:	d405      	bmi.n	8025336 <localtime_r+0x1a2>
 802532a:	6123      	str	r3, [r4, #16]
 802532c:	6923      	ldr	r3, [r4, #16]
 802532e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025332:	60e3      	str	r3, [r4, #12]
 8025334:	e7d3      	b.n	80252de <localtime_r+0x14a>
 8025336:	230b      	movs	r3, #11
 8025338:	6123      	str	r3, [r4, #16]
 802533a:	6963      	ldr	r3, [r4, #20]
 802533c:	1e5a      	subs	r2, r3, #1
 802533e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8025342:	6162      	str	r2, [r4, #20]
 8025344:	079a      	lsls	r2, r3, #30
 8025346:	d105      	bne.n	8025354 <localtime_r+0x1c0>
 8025348:	2164      	movs	r1, #100	; 0x64
 802534a:	fb93 f2f1 	sdiv	r2, r3, r1
 802534e:	fb01 3212 	mls	r2, r1, r2, r3
 8025352:	b962      	cbnz	r2, 802536e <localtime_r+0x1da>
 8025354:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025358:	fb93 f1f2 	sdiv	r1, r3, r2
 802535c:	fb02 3311 	mls	r3, r2, r1, r3
 8025360:	fab3 f383 	clz	r3, r3
 8025364:	095b      	lsrs	r3, r3, #5
 8025366:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802536a:	61e3      	str	r3, [r4, #28]
 802536c:	e7de      	b.n	802532c <localtime_r+0x198>
 802536e:	2301      	movs	r3, #1
 8025370:	e7f9      	b.n	8025366 <localtime_r+0x1d2>
 8025372:	bf00      	nop
 8025374:	080472e8 	.word	0x080472e8
 8025378:	200300f4 	.word	0x200300f4

0802537c <__retarget_lock_init_recursive>:
 802537c:	4770      	bx	lr

0802537e <__retarget_lock_acquire>:
 802537e:	4770      	bx	lr

08025380 <__retarget_lock_acquire_recursive>:
 8025380:	4770      	bx	lr

08025382 <__retarget_lock_release>:
 8025382:	4770      	bx	lr

08025384 <__retarget_lock_release_recursive>:
 8025384:	4770      	bx	lr
 8025386:	Address 0x0000000008025386 is out of bounds.


08025388 <malloc>:
 8025388:	4b02      	ldr	r3, [pc, #8]	; (8025394 <malloc+0xc>)
 802538a:	4601      	mov	r1, r0
 802538c:	6818      	ldr	r0, [r3, #0]
 802538e:	f000 bb29 	b.w	80259e4 <_malloc_r>
 8025392:	bf00      	nop
 8025394:	200004a4 	.word	0x200004a4

08025398 <free>:
 8025398:	4b02      	ldr	r3, [pc, #8]	; (80253a4 <free+0xc>)
 802539a:	4601      	mov	r1, r0
 802539c:	6818      	ldr	r0, [r3, #0]
 802539e:	f000 bab5 	b.w	802590c <_free_r>
 80253a2:	bf00      	nop
 80253a4:	200004a4 	.word	0x200004a4

080253a8 <memcmp>:
 80253a8:	b510      	push	{r4, lr}
 80253aa:	3901      	subs	r1, #1
 80253ac:	4402      	add	r2, r0
 80253ae:	4290      	cmp	r0, r2
 80253b0:	d101      	bne.n	80253b6 <memcmp+0xe>
 80253b2:	2000      	movs	r0, #0
 80253b4:	e005      	b.n	80253c2 <memcmp+0x1a>
 80253b6:	7803      	ldrb	r3, [r0, #0]
 80253b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80253bc:	42a3      	cmp	r3, r4
 80253be:	d001      	beq.n	80253c4 <memcmp+0x1c>
 80253c0:	1b18      	subs	r0, r3, r4
 80253c2:	bd10      	pop	{r4, pc}
 80253c4:	3001      	adds	r0, #1
 80253c6:	e7f2      	b.n	80253ae <memcmp+0x6>

080253c8 <memcpy>:
 80253c8:	440a      	add	r2, r1
 80253ca:	4291      	cmp	r1, r2
 80253cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80253d0:	d100      	bne.n	80253d4 <memcpy+0xc>
 80253d2:	4770      	bx	lr
 80253d4:	b510      	push	{r4, lr}
 80253d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80253de:	4291      	cmp	r1, r2
 80253e0:	d1f9      	bne.n	80253d6 <memcpy+0xe>
 80253e2:	bd10      	pop	{r4, pc}

080253e4 <memmove>:
 80253e4:	4288      	cmp	r0, r1
 80253e6:	b510      	push	{r4, lr}
 80253e8:	eb01 0402 	add.w	r4, r1, r2
 80253ec:	d902      	bls.n	80253f4 <memmove+0x10>
 80253ee:	4284      	cmp	r4, r0
 80253f0:	4623      	mov	r3, r4
 80253f2:	d807      	bhi.n	8025404 <memmove+0x20>
 80253f4:	1e43      	subs	r3, r0, #1
 80253f6:	42a1      	cmp	r1, r4
 80253f8:	d008      	beq.n	802540c <memmove+0x28>
 80253fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80253fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025402:	e7f8      	b.n	80253f6 <memmove+0x12>
 8025404:	4402      	add	r2, r0
 8025406:	4601      	mov	r1, r0
 8025408:	428a      	cmp	r2, r1
 802540a:	d100      	bne.n	802540e <memmove+0x2a>
 802540c:	bd10      	pop	{r4, pc}
 802540e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025416:	e7f7      	b.n	8025408 <memmove+0x24>

08025418 <memset>:
 8025418:	4402      	add	r2, r0
 802541a:	4603      	mov	r3, r0
 802541c:	4293      	cmp	r3, r2
 802541e:	d100      	bne.n	8025422 <memset+0xa>
 8025420:	4770      	bx	lr
 8025422:	f803 1b01 	strb.w	r1, [r3], #1
 8025426:	e7f9      	b.n	802541c <memset+0x4>

08025428 <validate_structure>:
 8025428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802542a:	6801      	ldr	r1, [r0, #0]
 802542c:	293b      	cmp	r1, #59	; 0x3b
 802542e:	4604      	mov	r4, r0
 8025430:	d911      	bls.n	8025456 <validate_structure+0x2e>
 8025432:	223c      	movs	r2, #60	; 0x3c
 8025434:	4668      	mov	r0, sp
 8025436:	f002 fc09 	bl	8027c4c <div>
 802543a:	9a01      	ldr	r2, [sp, #4]
 802543c:	6863      	ldr	r3, [r4, #4]
 802543e:	9900      	ldr	r1, [sp, #0]
 8025440:	2a00      	cmp	r2, #0
 8025442:	440b      	add	r3, r1
 8025444:	6063      	str	r3, [r4, #4]
 8025446:	bfbb      	ittet	lt
 8025448:	323c      	addlt	r2, #60	; 0x3c
 802544a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802544e:	6022      	strge	r2, [r4, #0]
 8025450:	6022      	strlt	r2, [r4, #0]
 8025452:	bfb8      	it	lt
 8025454:	6063      	strlt	r3, [r4, #4]
 8025456:	6861      	ldr	r1, [r4, #4]
 8025458:	293b      	cmp	r1, #59	; 0x3b
 802545a:	d911      	bls.n	8025480 <validate_structure+0x58>
 802545c:	223c      	movs	r2, #60	; 0x3c
 802545e:	4668      	mov	r0, sp
 8025460:	f002 fbf4 	bl	8027c4c <div>
 8025464:	9a01      	ldr	r2, [sp, #4]
 8025466:	68a3      	ldr	r3, [r4, #8]
 8025468:	9900      	ldr	r1, [sp, #0]
 802546a:	2a00      	cmp	r2, #0
 802546c:	440b      	add	r3, r1
 802546e:	60a3      	str	r3, [r4, #8]
 8025470:	bfbb      	ittet	lt
 8025472:	323c      	addlt	r2, #60	; 0x3c
 8025474:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8025478:	6062      	strge	r2, [r4, #4]
 802547a:	6062      	strlt	r2, [r4, #4]
 802547c:	bfb8      	it	lt
 802547e:	60a3      	strlt	r3, [r4, #8]
 8025480:	68a1      	ldr	r1, [r4, #8]
 8025482:	2917      	cmp	r1, #23
 8025484:	d911      	bls.n	80254aa <validate_structure+0x82>
 8025486:	2218      	movs	r2, #24
 8025488:	4668      	mov	r0, sp
 802548a:	f002 fbdf 	bl	8027c4c <div>
 802548e:	9a01      	ldr	r2, [sp, #4]
 8025490:	68e3      	ldr	r3, [r4, #12]
 8025492:	9900      	ldr	r1, [sp, #0]
 8025494:	2a00      	cmp	r2, #0
 8025496:	440b      	add	r3, r1
 8025498:	60e3      	str	r3, [r4, #12]
 802549a:	bfbb      	ittet	lt
 802549c:	3218      	addlt	r2, #24
 802549e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80254a2:	60a2      	strge	r2, [r4, #8]
 80254a4:	60a2      	strlt	r2, [r4, #8]
 80254a6:	bfb8      	it	lt
 80254a8:	60e3      	strlt	r3, [r4, #12]
 80254aa:	6921      	ldr	r1, [r4, #16]
 80254ac:	290b      	cmp	r1, #11
 80254ae:	d911      	bls.n	80254d4 <validate_structure+0xac>
 80254b0:	220c      	movs	r2, #12
 80254b2:	4668      	mov	r0, sp
 80254b4:	f002 fbca 	bl	8027c4c <div>
 80254b8:	9a01      	ldr	r2, [sp, #4]
 80254ba:	6963      	ldr	r3, [r4, #20]
 80254bc:	9900      	ldr	r1, [sp, #0]
 80254be:	2a00      	cmp	r2, #0
 80254c0:	440b      	add	r3, r1
 80254c2:	6163      	str	r3, [r4, #20]
 80254c4:	bfbb      	ittet	lt
 80254c6:	320c      	addlt	r2, #12
 80254c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80254cc:	6122      	strge	r2, [r4, #16]
 80254ce:	6122      	strlt	r2, [r4, #16]
 80254d0:	bfb8      	it	lt
 80254d2:	6163      	strlt	r3, [r4, #20]
 80254d4:	6963      	ldr	r3, [r4, #20]
 80254d6:	0798      	lsls	r0, r3, #30
 80254d8:	d120      	bne.n	802551c <validate_structure+0xf4>
 80254da:	2164      	movs	r1, #100	; 0x64
 80254dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80254e0:	fb01 3212 	mls	r2, r1, r2, r3
 80254e4:	b9e2      	cbnz	r2, 8025520 <validate_structure+0xf8>
 80254e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80254ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80254ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80254f2:	fb02 3311 	mls	r3, r2, r1, r3
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	bf14      	ite	ne
 80254fa:	231c      	movne	r3, #28
 80254fc:	231d      	moveq	r3, #29
 80254fe:	68e2      	ldr	r2, [r4, #12]
 8025500:	2a00      	cmp	r2, #0
 8025502:	dc0f      	bgt.n	8025524 <validate_structure+0xfc>
 8025504:	4f33      	ldr	r7, [pc, #204]	; (80255d4 <validate_structure+0x1ac>)
 8025506:	260b      	movs	r6, #11
 8025508:	2064      	movs	r0, #100	; 0x64
 802550a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802550e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8025512:	f1bc 0f00 	cmp.w	ip, #0
 8025516:	dd31      	ble.n	802557c <validate_structure+0x154>
 8025518:	b003      	add	sp, #12
 802551a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802551c:	231c      	movs	r3, #28
 802551e:	e7ee      	b.n	80254fe <validate_structure+0xd6>
 8025520:	231d      	movs	r3, #29
 8025522:	e7ec      	b.n	80254fe <validate_structure+0xd6>
 8025524:	4e2b      	ldr	r6, [pc, #172]	; (80255d4 <validate_structure+0x1ac>)
 8025526:	2700      	movs	r7, #0
 8025528:	2064      	movs	r0, #100	; 0x64
 802552a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802552e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8025532:	2a01      	cmp	r2, #1
 8025534:	bf14      	ite	ne
 8025536:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802553a:	469c      	moveq	ip, r3
 802553c:	4561      	cmp	r1, ip
 802553e:	ddeb      	ble.n	8025518 <validate_structure+0xf0>
 8025540:	3201      	adds	r2, #1
 8025542:	eba1 010c 	sub.w	r1, r1, ip
 8025546:	2a0c      	cmp	r2, #12
 8025548:	60e1      	str	r1, [r4, #12]
 802554a:	6122      	str	r2, [r4, #16]
 802554c:	d1ef      	bne.n	802552e <validate_structure+0x106>
 802554e:	6963      	ldr	r3, [r4, #20]
 8025550:	1c5a      	adds	r2, r3, #1
 8025552:	0791      	lsls	r1, r2, #30
 8025554:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8025558:	d137      	bne.n	80255ca <validate_structure+0x1a2>
 802555a:	fb92 f1f0 	sdiv	r1, r2, r0
 802555e:	fb00 2211 	mls	r2, r0, r1, r2
 8025562:	2a00      	cmp	r2, #0
 8025564:	d133      	bne.n	80255ce <validate_structure+0x1a6>
 8025566:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802556a:	fb93 f2f5 	sdiv	r2, r3, r5
 802556e:	fb05 3312 	mls	r3, r5, r2, r3
 8025572:	2b00      	cmp	r3, #0
 8025574:	bf14      	ite	ne
 8025576:	231c      	movne	r3, #28
 8025578:	231d      	moveq	r3, #29
 802557a:	e7d8      	b.n	802552e <validate_structure+0x106>
 802557c:	6921      	ldr	r1, [r4, #16]
 802557e:	3901      	subs	r1, #1
 8025580:	6121      	str	r1, [r4, #16]
 8025582:	3101      	adds	r1, #1
 8025584:	d114      	bne.n	80255b0 <validate_structure+0x188>
 8025586:	6963      	ldr	r3, [r4, #20]
 8025588:	1e5a      	subs	r2, r3, #1
 802558a:	0791      	lsls	r1, r2, #30
 802558c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8025590:	d117      	bne.n	80255c2 <validate_structure+0x19a>
 8025592:	fb92 f1f0 	sdiv	r1, r2, r0
 8025596:	fb00 2211 	mls	r2, r0, r1, r2
 802559a:	b9a2      	cbnz	r2, 80255c6 <validate_structure+0x19e>
 802559c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80255a0:	fb93 f2f5 	sdiv	r2, r3, r5
 80255a4:	fb05 3312 	mls	r3, r5, r2, r3
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	bf14      	ite	ne
 80255ac:	231c      	movne	r3, #28
 80255ae:	231d      	moveq	r3, #29
 80255b0:	6922      	ldr	r2, [r4, #16]
 80255b2:	2a01      	cmp	r2, #1
 80255b4:	bf14      	ite	ne
 80255b6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80255ba:	461a      	moveq	r2, r3
 80255bc:	4462      	add	r2, ip
 80255be:	60e2      	str	r2, [r4, #12]
 80255c0:	e7a5      	b.n	802550e <validate_structure+0xe6>
 80255c2:	231c      	movs	r3, #28
 80255c4:	e7f4      	b.n	80255b0 <validate_structure+0x188>
 80255c6:	231d      	movs	r3, #29
 80255c8:	e7f2      	b.n	80255b0 <validate_structure+0x188>
 80255ca:	231c      	movs	r3, #28
 80255cc:	e7af      	b.n	802552e <validate_structure+0x106>
 80255ce:	231d      	movs	r3, #29
 80255d0:	e7ad      	b.n	802552e <validate_structure+0x106>
 80255d2:	bf00      	nop
 80255d4:	08047288 	.word	0x08047288

080255d8 <mktime>:
 80255d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255dc:	b085      	sub	sp, #20
 80255de:	4607      	mov	r7, r0
 80255e0:	f003 fa62 	bl	8028aa8 <__gettzinfo>
 80255e4:	4681      	mov	r9, r0
 80255e6:	4638      	mov	r0, r7
 80255e8:	f7ff ff1e 	bl	8025428 <validate_structure>
 80255ec:	e9d7 4000 	ldrd	r4, r0, [r7]
 80255f0:	233c      	movs	r3, #60	; 0x3c
 80255f2:	fb03 4400 	mla	r4, r3, r0, r4
 80255f6:	68b8      	ldr	r0, [r7, #8]
 80255f8:	4abc      	ldr	r2, [pc, #752]	; (80258ec <mktime+0x314>)
 80255fa:	697e      	ldr	r6, [r7, #20]
 80255fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025600:	fb03 4400 	mla	r4, r3, r0, r4
 8025604:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8025608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802560c:	3d01      	subs	r5, #1
 802560e:	2b01      	cmp	r3, #1
 8025610:	4415      	add	r5, r2
 8025612:	dd11      	ble.n	8025638 <mktime+0x60>
 8025614:	07b1      	lsls	r1, r6, #30
 8025616:	d10f      	bne.n	8025638 <mktime+0x60>
 8025618:	2264      	movs	r2, #100	; 0x64
 802561a:	fb96 f3f2 	sdiv	r3, r6, r2
 802561e:	fb02 6313 	mls	r3, r2, r3, r6
 8025622:	b943      	cbnz	r3, 8025636 <mktime+0x5e>
 8025624:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025628:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802562c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025630:	fb02 3311 	mls	r3, r2, r1, r3
 8025634:	b903      	cbnz	r3, 8025638 <mktime+0x60>
 8025636:	3501      	adds	r5, #1
 8025638:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802563c:	3310      	adds	r3, #16
 802563e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8025642:	4293      	cmp	r3, r2
 8025644:	61fd      	str	r5, [r7, #28]
 8025646:	f200 815d 	bhi.w	8025904 <mktime+0x32c>
 802564a:	2e46      	cmp	r6, #70	; 0x46
 802564c:	dd71      	ble.n	8025732 <mktime+0x15a>
 802564e:	2346      	movs	r3, #70	; 0x46
 8025650:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025654:	2164      	movs	r1, #100	; 0x64
 8025656:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802565a:	079a      	lsls	r2, r3, #30
 802565c:	d163      	bne.n	8025726 <mktime+0x14e>
 802565e:	fb93 f2f1 	sdiv	r2, r3, r1
 8025662:	fb01 3212 	mls	r2, r1, r2, r3
 8025666:	2a00      	cmp	r2, #0
 8025668:	d160      	bne.n	802572c <mktime+0x154>
 802566a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802566e:	fb92 fef0 	sdiv	lr, r2, r0
 8025672:	fb00 221e 	mls	r2, r0, lr, r2
 8025676:	2a00      	cmp	r2, #0
 8025678:	bf14      	ite	ne
 802567a:	4662      	movne	r2, ip
 802567c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025680:	3301      	adds	r3, #1
 8025682:	429e      	cmp	r6, r3
 8025684:	4415      	add	r5, r2
 8025686:	d1e8      	bne.n	802565a <mktime+0x82>
 8025688:	4b99      	ldr	r3, [pc, #612]	; (80258f0 <mktime+0x318>)
 802568a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802568e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8025692:	f001 fffd 	bl	8027690 <__tz_lock>
 8025696:	f002 f807 	bl	80276a8 <_tzset_unlocked>
 802569a:	4b96      	ldr	r3, [pc, #600]	; (80258f4 <mktime+0x31c>)
 802569c:	f8d3 b000 	ldr.w	fp, [r3]
 80256a0:	f1bb 0f00 	cmp.w	fp, #0
 80256a4:	d039      	beq.n	802571a <mktime+0x142>
 80256a6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80256aa:	6978      	ldr	r0, [r7, #20]
 80256ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80256b0:	f1bb 0f01 	cmp.w	fp, #1
 80256b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80256b8:	46da      	mov	sl, fp
 80256ba:	bfa8      	it	ge
 80256bc:	f04f 0a01 	movge.w	sl, #1
 80256c0:	4283      	cmp	r3, r0
 80256c2:	d178      	bne.n	80257b6 <mktime+0x1de>
 80256c4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80256c8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80256cc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80256d0:	1a5b      	subs	r3, r3, r1
 80256d2:	9302      	str	r3, [sp, #8]
 80256d4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80256d8:	9303      	str	r3, [sp, #12]
 80256da:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80256de:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80256e2:	9301      	str	r3, [sp, #4]
 80256e4:	ebb3 0c02 	subs.w	ip, r3, r2
 80256e8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80256ec:	4564      	cmp	r4, ip
 80256ee:	eb78 0300 	sbcs.w	r3, r8, r0
 80256f2:	da66      	bge.n	80257c2 <mktime+0x1ea>
 80256f4:	f8d9 3000 	ldr.w	r3, [r9]
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	d06f      	beq.n	80257dc <mktime+0x204>
 80256fc:	9b02      	ldr	r3, [sp, #8]
 80256fe:	429c      	cmp	r4, r3
 8025700:	9b03      	ldr	r3, [sp, #12]
 8025702:	eb78 0303 	sbcs.w	r3, r8, r3
 8025706:	db03      	blt.n	8025710 <mktime+0x138>
 8025708:	4564      	cmp	r4, ip
 802570a:	eb78 0300 	sbcs.w	r3, r8, r0
 802570e:	db6b      	blt.n	80257e8 <mktime+0x210>
 8025710:	f1bb 0f00 	cmp.w	fp, #0
 8025714:	f04f 0b00 	mov.w	fp, #0
 8025718:	da6b      	bge.n	80257f2 <mktime+0x21a>
 802571a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802571e:	190c      	adds	r4, r1, r4
 8025720:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025724:	e0a9      	b.n	802587a <mktime+0x2a2>
 8025726:	f240 126d 	movw	r2, #365	; 0x16d
 802572a:	e7a9      	b.n	8025680 <mktime+0xa8>
 802572c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025730:	e7a6      	b.n	8025680 <mktime+0xa8>
 8025732:	d0a9      	beq.n	8025688 <mktime+0xb0>
 8025734:	2345      	movs	r3, #69	; 0x45
 8025736:	f240 1c6d 	movw	ip, #365	; 0x16d
 802573a:	2164      	movs	r1, #100	; 0x64
 802573c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025740:	e012      	b.n	8025768 <mktime+0x190>
 8025742:	bb62      	cbnz	r2, 802579e <mktime+0x1c6>
 8025744:	fb93 f2f1 	sdiv	r2, r3, r1
 8025748:	fb01 3212 	mls	r2, r1, r2, r3
 802574c:	bb52      	cbnz	r2, 80257a4 <mktime+0x1cc>
 802574e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025752:	fb92 fef0 	sdiv	lr, r2, r0
 8025756:	fb00 221e 	mls	r2, r0, lr, r2
 802575a:	2a00      	cmp	r2, #0
 802575c:	bf14      	ite	ne
 802575e:	4662      	movne	r2, ip
 8025760:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025764:	1aad      	subs	r5, r5, r2
 8025766:	3b01      	subs	r3, #1
 8025768:	429e      	cmp	r6, r3
 802576a:	f003 0203 	and.w	r2, r3, #3
 802576e:	dbe8      	blt.n	8025742 <mktime+0x16a>
 8025770:	b9da      	cbnz	r2, 80257aa <mktime+0x1d2>
 8025772:	2264      	movs	r2, #100	; 0x64
 8025774:	fb96 f3f2 	sdiv	r3, r6, r2
 8025778:	fb02 6313 	mls	r3, r2, r3, r6
 802577c:	b9c3      	cbnz	r3, 80257b0 <mktime+0x1d8>
 802577e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025782:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025786:	fb93 f1f2 	sdiv	r1, r3, r2
 802578a:	fb02 3311 	mls	r3, r2, r1, r3
 802578e:	2b00      	cmp	r3, #0
 8025790:	f240 136d 	movw	r3, #365	; 0x16d
 8025794:	bf08      	it	eq
 8025796:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802579a:	1aed      	subs	r5, r5, r3
 802579c:	e774      	b.n	8025688 <mktime+0xb0>
 802579e:	f240 126d 	movw	r2, #365	; 0x16d
 80257a2:	e7df      	b.n	8025764 <mktime+0x18c>
 80257a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80257a8:	e7dc      	b.n	8025764 <mktime+0x18c>
 80257aa:	f240 136d 	movw	r3, #365	; 0x16d
 80257ae:	e7f4      	b.n	802579a <mktime+0x1c2>
 80257b0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80257b4:	e7f1      	b.n	802579a <mktime+0x1c2>
 80257b6:	f001 fec1 	bl	802753c <__tzcalc_limits>
 80257ba:	2800      	cmp	r0, #0
 80257bc:	d182      	bne.n	80256c4 <mktime+0xec>
 80257be:	46d3      	mov	fp, sl
 80257c0:	e050      	b.n	8025864 <mktime+0x28c>
 80257c2:	9b01      	ldr	r3, [sp, #4]
 80257c4:	1a5b      	subs	r3, r3, r1
 80257c6:	9301      	str	r3, [sp, #4]
 80257c8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80257cc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80257d0:	9b01      	ldr	r3, [sp, #4]
 80257d2:	429c      	cmp	r4, r3
 80257d4:	eb78 030e 	sbcs.w	r3, r8, lr
 80257d8:	dbf1      	blt.n	80257be <mktime+0x1e6>
 80257da:	e78b      	b.n	80256f4 <mktime+0x11c>
 80257dc:	9b02      	ldr	r3, [sp, #8]
 80257de:	429c      	cmp	r4, r3
 80257e0:	9b03      	ldr	r3, [sp, #12]
 80257e2:	eb78 0303 	sbcs.w	r3, r8, r3
 80257e6:	db8f      	blt.n	8025708 <mktime+0x130>
 80257e8:	f1bb 0f00 	cmp.w	fp, #0
 80257ec:	db3e      	blt.n	802586c <mktime+0x294>
 80257ee:	f04f 0b01 	mov.w	fp, #1
 80257f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80257f6:	f1ba 0f01 	cmp.w	sl, #1
 80257fa:	d133      	bne.n	8025864 <mktime+0x28c>
 80257fc:	f1bb 0f00 	cmp.w	fp, #0
 8025800:	d04e      	beq.n	80258a0 <mktime+0x2c8>
 8025802:	1a52      	subs	r2, r2, r1
 8025804:	683b      	ldr	r3, [r7, #0]
 8025806:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802580a:	4413      	add	r3, r2
 802580c:	1914      	adds	r4, r2, r4
 802580e:	603b      	str	r3, [r7, #0]
 8025810:	4638      	mov	r0, r7
 8025812:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8025816:	f7ff fe07 	bl	8025428 <validate_structure>
 802581a:	68fa      	ldr	r2, [r7, #12]
 802581c:	ebb2 020a 	subs.w	r2, r2, sl
 8025820:	d020      	beq.n	8025864 <mktime+0x28c>
 8025822:	2a01      	cmp	r2, #1
 8025824:	dc3e      	bgt.n	80258a4 <mktime+0x2cc>
 8025826:	1c90      	adds	r0, r2, #2
 8025828:	bfd8      	it	le
 802582a:	2201      	movle	r2, #1
 802582c:	69fb      	ldr	r3, [r7, #28]
 802582e:	18d3      	adds	r3, r2, r3
 8025830:	4415      	add	r5, r2
 8025832:	d540      	bpl.n	80258b6 <mktime+0x2de>
 8025834:	1e73      	subs	r3, r6, #1
 8025836:	0799      	lsls	r1, r3, #30
 8025838:	d137      	bne.n	80258aa <mktime+0x2d2>
 802583a:	2264      	movs	r2, #100	; 0x64
 802583c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025840:	fb02 3311 	mls	r3, r2, r1, r3
 8025844:	bba3      	cbnz	r3, 80258b0 <mktime+0x2d8>
 8025846:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802584a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802584e:	fb96 f2f3 	sdiv	r2, r6, r3
 8025852:	fb03 6612 	mls	r6, r3, r2, r6
 8025856:	2e00      	cmp	r6, #0
 8025858:	f240 136d 	movw	r3, #365	; 0x16d
 802585c:	bf18      	it	ne
 802585e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8025862:	61fb      	str	r3, [r7, #28]
 8025864:	f1bb 0f01 	cmp.w	fp, #1
 8025868:	f47f af57 	bne.w	802571a <mktime+0x142>
 802586c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025870:	190c      	adds	r4, r1, r4
 8025872:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025876:	f04f 0b01 	mov.w	fp, #1
 802587a:	f001 ff0f 	bl	802769c <__tz_unlock>
 802587e:	3504      	adds	r5, #4
 8025880:	2307      	movs	r3, #7
 8025882:	fb95 f3f3 	sdiv	r3, r5, r3
 8025886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802588a:	1aed      	subs	r5, r5, r3
 802588c:	bf48      	it	mi
 802588e:	3507      	addmi	r5, #7
 8025890:	f8c7 b020 	str.w	fp, [r7, #32]
 8025894:	61bd      	str	r5, [r7, #24]
 8025896:	4620      	mov	r0, r4
 8025898:	4641      	mov	r1, r8
 802589a:	b005      	add	sp, #20
 802589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258a0:	1a8a      	subs	r2, r1, r2
 80258a2:	e7af      	b.n	8025804 <mktime+0x22c>
 80258a4:	f04f 32ff 	mov.w	r2, #4294967295
 80258a8:	e7c0      	b.n	802582c <mktime+0x254>
 80258aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80258ae:	e7d8      	b.n	8025862 <mktime+0x28a>
 80258b0:	f240 136d 	movw	r3, #365	; 0x16d
 80258b4:	e7d5      	b.n	8025862 <mktime+0x28a>
 80258b6:	07b2      	lsls	r2, r6, #30
 80258b8:	d11e      	bne.n	80258f8 <mktime+0x320>
 80258ba:	2164      	movs	r1, #100	; 0x64
 80258bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80258c0:	fb01 6212 	mls	r2, r1, r2, r6
 80258c4:	b9da      	cbnz	r2, 80258fe <mktime+0x326>
 80258c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80258ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80258ce:	fb96 f1f2 	sdiv	r1, r6, r2
 80258d2:	fb02 6611 	mls	r6, r2, r1, r6
 80258d6:	2e00      	cmp	r6, #0
 80258d8:	f240 126d 	movw	r2, #365	; 0x16d
 80258dc:	bf08      	it	eq
 80258de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80258e2:	4293      	cmp	r3, r2
 80258e4:	bfa8      	it	ge
 80258e6:	1a9b      	subge	r3, r3, r2
 80258e8:	e7bb      	b.n	8025862 <mktime+0x28a>
 80258ea:	bf00      	nop
 80258ec:	080472b8 	.word	0x080472b8
 80258f0:	00015180 	.word	0x00015180
 80258f4:	200300f4 	.word	0x200300f4
 80258f8:	f240 126d 	movw	r2, #365	; 0x16d
 80258fc:	e7f1      	b.n	80258e2 <mktime+0x30a>
 80258fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025902:	e7ee      	b.n	80258e2 <mktime+0x30a>
 8025904:	f04f 34ff 	mov.w	r4, #4294967295
 8025908:	46a0      	mov	r8, r4
 802590a:	e7c4      	b.n	8025896 <mktime+0x2be>

0802590c <_free_r>:
 802590c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802590e:	2900      	cmp	r1, #0
 8025910:	d044      	beq.n	802599c <_free_r+0x90>
 8025912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025916:	9001      	str	r0, [sp, #4]
 8025918:	2b00      	cmp	r3, #0
 802591a:	f1a1 0404 	sub.w	r4, r1, #4
 802591e:	bfb8      	it	lt
 8025920:	18e4      	addlt	r4, r4, r3
 8025922:	f003 f9f1 	bl	8028d08 <__malloc_lock>
 8025926:	4a1e      	ldr	r2, [pc, #120]	; (80259a0 <_free_r+0x94>)
 8025928:	9801      	ldr	r0, [sp, #4]
 802592a:	6813      	ldr	r3, [r2, #0]
 802592c:	b933      	cbnz	r3, 802593c <_free_r+0x30>
 802592e:	6063      	str	r3, [r4, #4]
 8025930:	6014      	str	r4, [r2, #0]
 8025932:	b003      	add	sp, #12
 8025934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025938:	f003 b9ec 	b.w	8028d14 <__malloc_unlock>
 802593c:	42a3      	cmp	r3, r4
 802593e:	d908      	bls.n	8025952 <_free_r+0x46>
 8025940:	6825      	ldr	r5, [r4, #0]
 8025942:	1961      	adds	r1, r4, r5
 8025944:	428b      	cmp	r3, r1
 8025946:	bf01      	itttt	eq
 8025948:	6819      	ldreq	r1, [r3, #0]
 802594a:	685b      	ldreq	r3, [r3, #4]
 802594c:	1949      	addeq	r1, r1, r5
 802594e:	6021      	streq	r1, [r4, #0]
 8025950:	e7ed      	b.n	802592e <_free_r+0x22>
 8025952:	461a      	mov	r2, r3
 8025954:	685b      	ldr	r3, [r3, #4]
 8025956:	b10b      	cbz	r3, 802595c <_free_r+0x50>
 8025958:	42a3      	cmp	r3, r4
 802595a:	d9fa      	bls.n	8025952 <_free_r+0x46>
 802595c:	6811      	ldr	r1, [r2, #0]
 802595e:	1855      	adds	r5, r2, r1
 8025960:	42a5      	cmp	r5, r4
 8025962:	d10b      	bne.n	802597c <_free_r+0x70>
 8025964:	6824      	ldr	r4, [r4, #0]
 8025966:	4421      	add	r1, r4
 8025968:	1854      	adds	r4, r2, r1
 802596a:	42a3      	cmp	r3, r4
 802596c:	6011      	str	r1, [r2, #0]
 802596e:	d1e0      	bne.n	8025932 <_free_r+0x26>
 8025970:	681c      	ldr	r4, [r3, #0]
 8025972:	685b      	ldr	r3, [r3, #4]
 8025974:	6053      	str	r3, [r2, #4]
 8025976:	4421      	add	r1, r4
 8025978:	6011      	str	r1, [r2, #0]
 802597a:	e7da      	b.n	8025932 <_free_r+0x26>
 802597c:	d902      	bls.n	8025984 <_free_r+0x78>
 802597e:	230c      	movs	r3, #12
 8025980:	6003      	str	r3, [r0, #0]
 8025982:	e7d6      	b.n	8025932 <_free_r+0x26>
 8025984:	6825      	ldr	r5, [r4, #0]
 8025986:	1961      	adds	r1, r4, r5
 8025988:	428b      	cmp	r3, r1
 802598a:	bf04      	itt	eq
 802598c:	6819      	ldreq	r1, [r3, #0]
 802598e:	685b      	ldreq	r3, [r3, #4]
 8025990:	6063      	str	r3, [r4, #4]
 8025992:	bf04      	itt	eq
 8025994:	1949      	addeq	r1, r1, r5
 8025996:	6021      	streq	r1, [r4, #0]
 8025998:	6054      	str	r4, [r2, #4]
 802599a:	e7ca      	b.n	8025932 <_free_r+0x26>
 802599c:	b003      	add	sp, #12
 802599e:	bd30      	pop	{r4, r5, pc}
 80259a0:	200300cc 	.word	0x200300cc

080259a4 <sbrk_aligned>:
 80259a4:	b570      	push	{r4, r5, r6, lr}
 80259a6:	4e0e      	ldr	r6, [pc, #56]	; (80259e0 <sbrk_aligned+0x3c>)
 80259a8:	460c      	mov	r4, r1
 80259aa:	6831      	ldr	r1, [r6, #0]
 80259ac:	4605      	mov	r5, r0
 80259ae:	b911      	cbnz	r1, 80259b6 <sbrk_aligned+0x12>
 80259b0:	f000 fe76 	bl	80266a0 <_sbrk_r>
 80259b4:	6030      	str	r0, [r6, #0]
 80259b6:	4621      	mov	r1, r4
 80259b8:	4628      	mov	r0, r5
 80259ba:	f000 fe71 	bl	80266a0 <_sbrk_r>
 80259be:	1c43      	adds	r3, r0, #1
 80259c0:	d00a      	beq.n	80259d8 <sbrk_aligned+0x34>
 80259c2:	1cc4      	adds	r4, r0, #3
 80259c4:	f024 0403 	bic.w	r4, r4, #3
 80259c8:	42a0      	cmp	r0, r4
 80259ca:	d007      	beq.n	80259dc <sbrk_aligned+0x38>
 80259cc:	1a21      	subs	r1, r4, r0
 80259ce:	4628      	mov	r0, r5
 80259d0:	f000 fe66 	bl	80266a0 <_sbrk_r>
 80259d4:	3001      	adds	r0, #1
 80259d6:	d101      	bne.n	80259dc <sbrk_aligned+0x38>
 80259d8:	f04f 34ff 	mov.w	r4, #4294967295
 80259dc:	4620      	mov	r0, r4
 80259de:	bd70      	pop	{r4, r5, r6, pc}
 80259e0:	200300d0 	.word	0x200300d0

080259e4 <_malloc_r>:
 80259e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259e8:	1ccd      	adds	r5, r1, #3
 80259ea:	f025 0503 	bic.w	r5, r5, #3
 80259ee:	3508      	adds	r5, #8
 80259f0:	2d0c      	cmp	r5, #12
 80259f2:	bf38      	it	cc
 80259f4:	250c      	movcc	r5, #12
 80259f6:	2d00      	cmp	r5, #0
 80259f8:	4607      	mov	r7, r0
 80259fa:	db01      	blt.n	8025a00 <_malloc_r+0x1c>
 80259fc:	42a9      	cmp	r1, r5
 80259fe:	d905      	bls.n	8025a0c <_malloc_r+0x28>
 8025a00:	230c      	movs	r3, #12
 8025a02:	603b      	str	r3, [r7, #0]
 8025a04:	2600      	movs	r6, #0
 8025a06:	4630      	mov	r0, r6
 8025a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a0c:	4e2e      	ldr	r6, [pc, #184]	; (8025ac8 <_malloc_r+0xe4>)
 8025a0e:	f003 f97b 	bl	8028d08 <__malloc_lock>
 8025a12:	6833      	ldr	r3, [r6, #0]
 8025a14:	461c      	mov	r4, r3
 8025a16:	bb34      	cbnz	r4, 8025a66 <_malloc_r+0x82>
 8025a18:	4629      	mov	r1, r5
 8025a1a:	4638      	mov	r0, r7
 8025a1c:	f7ff ffc2 	bl	80259a4 <sbrk_aligned>
 8025a20:	1c43      	adds	r3, r0, #1
 8025a22:	4604      	mov	r4, r0
 8025a24:	d14d      	bne.n	8025ac2 <_malloc_r+0xde>
 8025a26:	6834      	ldr	r4, [r6, #0]
 8025a28:	4626      	mov	r6, r4
 8025a2a:	2e00      	cmp	r6, #0
 8025a2c:	d140      	bne.n	8025ab0 <_malloc_r+0xcc>
 8025a2e:	6823      	ldr	r3, [r4, #0]
 8025a30:	4631      	mov	r1, r6
 8025a32:	4638      	mov	r0, r7
 8025a34:	eb04 0803 	add.w	r8, r4, r3
 8025a38:	f000 fe32 	bl	80266a0 <_sbrk_r>
 8025a3c:	4580      	cmp	r8, r0
 8025a3e:	d13a      	bne.n	8025ab6 <_malloc_r+0xd2>
 8025a40:	6821      	ldr	r1, [r4, #0]
 8025a42:	3503      	adds	r5, #3
 8025a44:	1a6d      	subs	r5, r5, r1
 8025a46:	f025 0503 	bic.w	r5, r5, #3
 8025a4a:	3508      	adds	r5, #8
 8025a4c:	2d0c      	cmp	r5, #12
 8025a4e:	bf38      	it	cc
 8025a50:	250c      	movcc	r5, #12
 8025a52:	4629      	mov	r1, r5
 8025a54:	4638      	mov	r0, r7
 8025a56:	f7ff ffa5 	bl	80259a4 <sbrk_aligned>
 8025a5a:	3001      	adds	r0, #1
 8025a5c:	d02b      	beq.n	8025ab6 <_malloc_r+0xd2>
 8025a5e:	6823      	ldr	r3, [r4, #0]
 8025a60:	442b      	add	r3, r5
 8025a62:	6023      	str	r3, [r4, #0]
 8025a64:	e00e      	b.n	8025a84 <_malloc_r+0xa0>
 8025a66:	6822      	ldr	r2, [r4, #0]
 8025a68:	1b52      	subs	r2, r2, r5
 8025a6a:	d41e      	bmi.n	8025aaa <_malloc_r+0xc6>
 8025a6c:	2a0b      	cmp	r2, #11
 8025a6e:	d916      	bls.n	8025a9e <_malloc_r+0xba>
 8025a70:	1961      	adds	r1, r4, r5
 8025a72:	42a3      	cmp	r3, r4
 8025a74:	6025      	str	r5, [r4, #0]
 8025a76:	bf18      	it	ne
 8025a78:	6059      	strne	r1, [r3, #4]
 8025a7a:	6863      	ldr	r3, [r4, #4]
 8025a7c:	bf08      	it	eq
 8025a7e:	6031      	streq	r1, [r6, #0]
 8025a80:	5162      	str	r2, [r4, r5]
 8025a82:	604b      	str	r3, [r1, #4]
 8025a84:	4638      	mov	r0, r7
 8025a86:	f104 060b 	add.w	r6, r4, #11
 8025a8a:	f003 f943 	bl	8028d14 <__malloc_unlock>
 8025a8e:	f026 0607 	bic.w	r6, r6, #7
 8025a92:	1d23      	adds	r3, r4, #4
 8025a94:	1af2      	subs	r2, r6, r3
 8025a96:	d0b6      	beq.n	8025a06 <_malloc_r+0x22>
 8025a98:	1b9b      	subs	r3, r3, r6
 8025a9a:	50a3      	str	r3, [r4, r2]
 8025a9c:	e7b3      	b.n	8025a06 <_malloc_r+0x22>
 8025a9e:	6862      	ldr	r2, [r4, #4]
 8025aa0:	42a3      	cmp	r3, r4
 8025aa2:	bf0c      	ite	eq
 8025aa4:	6032      	streq	r2, [r6, #0]
 8025aa6:	605a      	strne	r2, [r3, #4]
 8025aa8:	e7ec      	b.n	8025a84 <_malloc_r+0xa0>
 8025aaa:	4623      	mov	r3, r4
 8025aac:	6864      	ldr	r4, [r4, #4]
 8025aae:	e7b2      	b.n	8025a16 <_malloc_r+0x32>
 8025ab0:	4634      	mov	r4, r6
 8025ab2:	6876      	ldr	r6, [r6, #4]
 8025ab4:	e7b9      	b.n	8025a2a <_malloc_r+0x46>
 8025ab6:	230c      	movs	r3, #12
 8025ab8:	603b      	str	r3, [r7, #0]
 8025aba:	4638      	mov	r0, r7
 8025abc:	f003 f92a 	bl	8028d14 <__malloc_unlock>
 8025ac0:	e7a1      	b.n	8025a06 <_malloc_r+0x22>
 8025ac2:	6025      	str	r5, [r4, #0]
 8025ac4:	e7de      	b.n	8025a84 <_malloc_r+0xa0>
 8025ac6:	bf00      	nop
 8025ac8:	200300cc 	.word	0x200300cc

08025acc <__cvt>:
 8025acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ace:	ed2d 8b02 	vpush	{d8}
 8025ad2:	eeb0 8b40 	vmov.f64	d8, d0
 8025ad6:	b085      	sub	sp, #20
 8025ad8:	4617      	mov	r7, r2
 8025ada:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025adc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025ade:	ee18 2a90 	vmov	r2, s17
 8025ae2:	f025 0520 	bic.w	r5, r5, #32
 8025ae6:	2a00      	cmp	r2, #0
 8025ae8:	bfb6      	itet	lt
 8025aea:	222d      	movlt	r2, #45	; 0x2d
 8025aec:	2200      	movge	r2, #0
 8025aee:	eeb1 8b40 	vneglt.f64	d8, d0
 8025af2:	2d46      	cmp	r5, #70	; 0x46
 8025af4:	460c      	mov	r4, r1
 8025af6:	701a      	strb	r2, [r3, #0]
 8025af8:	d004      	beq.n	8025b04 <__cvt+0x38>
 8025afa:	2d45      	cmp	r5, #69	; 0x45
 8025afc:	d100      	bne.n	8025b00 <__cvt+0x34>
 8025afe:	3401      	adds	r4, #1
 8025b00:	2102      	movs	r1, #2
 8025b02:	e000      	b.n	8025b06 <__cvt+0x3a>
 8025b04:	2103      	movs	r1, #3
 8025b06:	ab03      	add	r3, sp, #12
 8025b08:	9301      	str	r3, [sp, #4]
 8025b0a:	ab02      	add	r3, sp, #8
 8025b0c:	9300      	str	r3, [sp, #0]
 8025b0e:	4622      	mov	r2, r4
 8025b10:	4633      	mov	r3, r6
 8025b12:	eeb0 0b48 	vmov.f64	d0, d8
 8025b16:	f002 f93b 	bl	8027d90 <_dtoa_r>
 8025b1a:	2d47      	cmp	r5, #71	; 0x47
 8025b1c:	d101      	bne.n	8025b22 <__cvt+0x56>
 8025b1e:	07fb      	lsls	r3, r7, #31
 8025b20:	d51a      	bpl.n	8025b58 <__cvt+0x8c>
 8025b22:	2d46      	cmp	r5, #70	; 0x46
 8025b24:	eb00 0204 	add.w	r2, r0, r4
 8025b28:	d10c      	bne.n	8025b44 <__cvt+0x78>
 8025b2a:	7803      	ldrb	r3, [r0, #0]
 8025b2c:	2b30      	cmp	r3, #48	; 0x30
 8025b2e:	d107      	bne.n	8025b40 <__cvt+0x74>
 8025b30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b38:	bf1c      	itt	ne
 8025b3a:	f1c4 0401 	rsbne	r4, r4, #1
 8025b3e:	6034      	strne	r4, [r6, #0]
 8025b40:	6833      	ldr	r3, [r6, #0]
 8025b42:	441a      	add	r2, r3
 8025b44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b4c:	bf08      	it	eq
 8025b4e:	9203      	streq	r2, [sp, #12]
 8025b50:	2130      	movs	r1, #48	; 0x30
 8025b52:	9b03      	ldr	r3, [sp, #12]
 8025b54:	4293      	cmp	r3, r2
 8025b56:	d307      	bcc.n	8025b68 <__cvt+0x9c>
 8025b58:	9b03      	ldr	r3, [sp, #12]
 8025b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025b5c:	1a1b      	subs	r3, r3, r0
 8025b5e:	6013      	str	r3, [r2, #0]
 8025b60:	b005      	add	sp, #20
 8025b62:	ecbd 8b02 	vpop	{d8}
 8025b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b68:	1c5c      	adds	r4, r3, #1
 8025b6a:	9403      	str	r4, [sp, #12]
 8025b6c:	7019      	strb	r1, [r3, #0]
 8025b6e:	e7f0      	b.n	8025b52 <__cvt+0x86>

08025b70 <__exponent>:
 8025b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025b72:	4603      	mov	r3, r0
 8025b74:	2900      	cmp	r1, #0
 8025b76:	bfb8      	it	lt
 8025b78:	4249      	neglt	r1, r1
 8025b7a:	f803 2b02 	strb.w	r2, [r3], #2
 8025b7e:	bfb4      	ite	lt
 8025b80:	222d      	movlt	r2, #45	; 0x2d
 8025b82:	222b      	movge	r2, #43	; 0x2b
 8025b84:	2909      	cmp	r1, #9
 8025b86:	7042      	strb	r2, [r0, #1]
 8025b88:	dd2a      	ble.n	8025be0 <__exponent+0x70>
 8025b8a:	f10d 0407 	add.w	r4, sp, #7
 8025b8e:	46a4      	mov	ip, r4
 8025b90:	270a      	movs	r7, #10
 8025b92:	46a6      	mov	lr, r4
 8025b94:	460a      	mov	r2, r1
 8025b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8025b9a:	fb07 1516 	mls	r5, r7, r6, r1
 8025b9e:	3530      	adds	r5, #48	; 0x30
 8025ba0:	2a63      	cmp	r2, #99	; 0x63
 8025ba2:	f104 34ff 	add.w	r4, r4, #4294967295
 8025ba6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025baa:	4631      	mov	r1, r6
 8025bac:	dcf1      	bgt.n	8025b92 <__exponent+0x22>
 8025bae:	3130      	adds	r1, #48	; 0x30
 8025bb0:	f1ae 0502 	sub.w	r5, lr, #2
 8025bb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025bb8:	1c44      	adds	r4, r0, #1
 8025bba:	4629      	mov	r1, r5
 8025bbc:	4561      	cmp	r1, ip
 8025bbe:	d30a      	bcc.n	8025bd6 <__exponent+0x66>
 8025bc0:	f10d 0209 	add.w	r2, sp, #9
 8025bc4:	eba2 020e 	sub.w	r2, r2, lr
 8025bc8:	4565      	cmp	r5, ip
 8025bca:	bf88      	it	hi
 8025bcc:	2200      	movhi	r2, #0
 8025bce:	4413      	add	r3, r2
 8025bd0:	1a18      	subs	r0, r3, r0
 8025bd2:	b003      	add	sp, #12
 8025bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025bda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025bde:	e7ed      	b.n	8025bbc <__exponent+0x4c>
 8025be0:	2330      	movs	r3, #48	; 0x30
 8025be2:	3130      	adds	r1, #48	; 0x30
 8025be4:	7083      	strb	r3, [r0, #2]
 8025be6:	70c1      	strb	r1, [r0, #3]
 8025be8:	1d03      	adds	r3, r0, #4
 8025bea:	e7f1      	b.n	8025bd0 <__exponent+0x60>
 8025bec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08025bf0 <_printf_float>:
 8025bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bf4:	b08b      	sub	sp, #44	; 0x2c
 8025bf6:	460c      	mov	r4, r1
 8025bf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025bfc:	4616      	mov	r6, r2
 8025bfe:	461f      	mov	r7, r3
 8025c00:	4605      	mov	r5, r0
 8025c02:	f003 f805 	bl	8028c10 <_localeconv_r>
 8025c06:	f8d0 b000 	ldr.w	fp, [r0]
 8025c0a:	4658      	mov	r0, fp
 8025c0c:	f7da fb22 	bl	8000254 <strlen>
 8025c10:	2300      	movs	r3, #0
 8025c12:	9308      	str	r3, [sp, #32]
 8025c14:	f8d8 3000 	ldr.w	r3, [r8]
 8025c18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8025c1c:	6822      	ldr	r2, [r4, #0]
 8025c1e:	3307      	adds	r3, #7
 8025c20:	f023 0307 	bic.w	r3, r3, #7
 8025c24:	f103 0108 	add.w	r1, r3, #8
 8025c28:	f8c8 1000 	str.w	r1, [r8]
 8025c2c:	4682      	mov	sl, r0
 8025c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025c32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8025c36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8025e98 <_printf_float+0x2a8>
 8025c3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8025c3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8025c42:	eeb4 6b47 	vcmp.f64	d6, d7
 8025c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c4a:	dd24      	ble.n	8025c96 <_printf_float+0xa6>
 8025c4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c54:	d502      	bpl.n	8025c5c <_printf_float+0x6c>
 8025c56:	232d      	movs	r3, #45	; 0x2d
 8025c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025c5c:	4b90      	ldr	r3, [pc, #576]	; (8025ea0 <_printf_float+0x2b0>)
 8025c5e:	4891      	ldr	r0, [pc, #580]	; (8025ea4 <_printf_float+0x2b4>)
 8025c60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8025c64:	bf94      	ite	ls
 8025c66:	4698      	movls	r8, r3
 8025c68:	4680      	movhi	r8, r0
 8025c6a:	2303      	movs	r3, #3
 8025c6c:	6123      	str	r3, [r4, #16]
 8025c6e:	f022 0204 	bic.w	r2, r2, #4
 8025c72:	2300      	movs	r3, #0
 8025c74:	6022      	str	r2, [r4, #0]
 8025c76:	9304      	str	r3, [sp, #16]
 8025c78:	9700      	str	r7, [sp, #0]
 8025c7a:	4633      	mov	r3, r6
 8025c7c:	aa09      	add	r2, sp, #36	; 0x24
 8025c7e:	4621      	mov	r1, r4
 8025c80:	4628      	mov	r0, r5
 8025c82:	f000 f9d3 	bl	802602c <_printf_common>
 8025c86:	3001      	adds	r0, #1
 8025c88:	f040 808a 	bne.w	8025da0 <_printf_float+0x1b0>
 8025c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c90:	b00b      	add	sp, #44	; 0x2c
 8025c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c96:	eeb4 0b40 	vcmp.f64	d0, d0
 8025c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c9e:	d709      	bvc.n	8025cb4 <_printf_float+0xc4>
 8025ca0:	ee10 3a90 	vmov	r3, s1
 8025ca4:	2b00      	cmp	r3, #0
 8025ca6:	bfbc      	itt	lt
 8025ca8:	232d      	movlt	r3, #45	; 0x2d
 8025caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025cae:	487e      	ldr	r0, [pc, #504]	; (8025ea8 <_printf_float+0x2b8>)
 8025cb0:	4b7e      	ldr	r3, [pc, #504]	; (8025eac <_printf_float+0x2bc>)
 8025cb2:	e7d5      	b.n	8025c60 <_printf_float+0x70>
 8025cb4:	6863      	ldr	r3, [r4, #4]
 8025cb6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8025cba:	9104      	str	r1, [sp, #16]
 8025cbc:	1c59      	adds	r1, r3, #1
 8025cbe:	d13c      	bne.n	8025d3a <_printf_float+0x14a>
 8025cc0:	2306      	movs	r3, #6
 8025cc2:	6063      	str	r3, [r4, #4]
 8025cc4:	2300      	movs	r3, #0
 8025cc6:	9303      	str	r3, [sp, #12]
 8025cc8:	ab08      	add	r3, sp, #32
 8025cca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025cd2:	ab07      	add	r3, sp, #28
 8025cd4:	6861      	ldr	r1, [r4, #4]
 8025cd6:	9300      	str	r3, [sp, #0]
 8025cd8:	6022      	str	r2, [r4, #0]
 8025cda:	f10d 031b 	add.w	r3, sp, #27
 8025cde:	4628      	mov	r0, r5
 8025ce0:	f7ff fef4 	bl	8025acc <__cvt>
 8025ce4:	9b04      	ldr	r3, [sp, #16]
 8025ce6:	9907      	ldr	r1, [sp, #28]
 8025ce8:	2b47      	cmp	r3, #71	; 0x47
 8025cea:	4680      	mov	r8, r0
 8025cec:	d108      	bne.n	8025d00 <_printf_float+0x110>
 8025cee:	1cc8      	adds	r0, r1, #3
 8025cf0:	db02      	blt.n	8025cf8 <_printf_float+0x108>
 8025cf2:	6863      	ldr	r3, [r4, #4]
 8025cf4:	4299      	cmp	r1, r3
 8025cf6:	dd41      	ble.n	8025d7c <_printf_float+0x18c>
 8025cf8:	f1a9 0902 	sub.w	r9, r9, #2
 8025cfc:	fa5f f989 	uxtb.w	r9, r9
 8025d00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025d04:	d820      	bhi.n	8025d48 <_printf_float+0x158>
 8025d06:	3901      	subs	r1, #1
 8025d08:	464a      	mov	r2, r9
 8025d0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025d0e:	9107      	str	r1, [sp, #28]
 8025d10:	f7ff ff2e 	bl	8025b70 <__exponent>
 8025d14:	9a08      	ldr	r2, [sp, #32]
 8025d16:	9004      	str	r0, [sp, #16]
 8025d18:	1813      	adds	r3, r2, r0
 8025d1a:	2a01      	cmp	r2, #1
 8025d1c:	6123      	str	r3, [r4, #16]
 8025d1e:	dc02      	bgt.n	8025d26 <_printf_float+0x136>
 8025d20:	6822      	ldr	r2, [r4, #0]
 8025d22:	07d2      	lsls	r2, r2, #31
 8025d24:	d501      	bpl.n	8025d2a <_printf_float+0x13a>
 8025d26:	3301      	adds	r3, #1
 8025d28:	6123      	str	r3, [r4, #16]
 8025d2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d0a2      	beq.n	8025c78 <_printf_float+0x88>
 8025d32:	232d      	movs	r3, #45	; 0x2d
 8025d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025d38:	e79e      	b.n	8025c78 <_printf_float+0x88>
 8025d3a:	9904      	ldr	r1, [sp, #16]
 8025d3c:	2947      	cmp	r1, #71	; 0x47
 8025d3e:	d1c1      	bne.n	8025cc4 <_printf_float+0xd4>
 8025d40:	2b00      	cmp	r3, #0
 8025d42:	d1bf      	bne.n	8025cc4 <_printf_float+0xd4>
 8025d44:	2301      	movs	r3, #1
 8025d46:	e7bc      	b.n	8025cc2 <_printf_float+0xd2>
 8025d48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8025d4c:	d118      	bne.n	8025d80 <_printf_float+0x190>
 8025d4e:	2900      	cmp	r1, #0
 8025d50:	6863      	ldr	r3, [r4, #4]
 8025d52:	dd0b      	ble.n	8025d6c <_printf_float+0x17c>
 8025d54:	6121      	str	r1, [r4, #16]
 8025d56:	b913      	cbnz	r3, 8025d5e <_printf_float+0x16e>
 8025d58:	6822      	ldr	r2, [r4, #0]
 8025d5a:	07d0      	lsls	r0, r2, #31
 8025d5c:	d502      	bpl.n	8025d64 <_printf_float+0x174>
 8025d5e:	3301      	adds	r3, #1
 8025d60:	440b      	add	r3, r1
 8025d62:	6123      	str	r3, [r4, #16]
 8025d64:	2300      	movs	r3, #0
 8025d66:	65a1      	str	r1, [r4, #88]	; 0x58
 8025d68:	9304      	str	r3, [sp, #16]
 8025d6a:	e7de      	b.n	8025d2a <_printf_float+0x13a>
 8025d6c:	b913      	cbnz	r3, 8025d74 <_printf_float+0x184>
 8025d6e:	6822      	ldr	r2, [r4, #0]
 8025d70:	07d2      	lsls	r2, r2, #31
 8025d72:	d501      	bpl.n	8025d78 <_printf_float+0x188>
 8025d74:	3302      	adds	r3, #2
 8025d76:	e7f4      	b.n	8025d62 <_printf_float+0x172>
 8025d78:	2301      	movs	r3, #1
 8025d7a:	e7f2      	b.n	8025d62 <_printf_float+0x172>
 8025d7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8025d80:	9b08      	ldr	r3, [sp, #32]
 8025d82:	4299      	cmp	r1, r3
 8025d84:	db05      	blt.n	8025d92 <_printf_float+0x1a2>
 8025d86:	6823      	ldr	r3, [r4, #0]
 8025d88:	6121      	str	r1, [r4, #16]
 8025d8a:	07d8      	lsls	r0, r3, #31
 8025d8c:	d5ea      	bpl.n	8025d64 <_printf_float+0x174>
 8025d8e:	1c4b      	adds	r3, r1, #1
 8025d90:	e7e7      	b.n	8025d62 <_printf_float+0x172>
 8025d92:	2900      	cmp	r1, #0
 8025d94:	bfd4      	ite	le
 8025d96:	f1c1 0202 	rsble	r2, r1, #2
 8025d9a:	2201      	movgt	r2, #1
 8025d9c:	4413      	add	r3, r2
 8025d9e:	e7e0      	b.n	8025d62 <_printf_float+0x172>
 8025da0:	6823      	ldr	r3, [r4, #0]
 8025da2:	055a      	lsls	r2, r3, #21
 8025da4:	d407      	bmi.n	8025db6 <_printf_float+0x1c6>
 8025da6:	6923      	ldr	r3, [r4, #16]
 8025da8:	4642      	mov	r2, r8
 8025daa:	4631      	mov	r1, r6
 8025dac:	4628      	mov	r0, r5
 8025dae:	47b8      	blx	r7
 8025db0:	3001      	adds	r0, #1
 8025db2:	d12a      	bne.n	8025e0a <_printf_float+0x21a>
 8025db4:	e76a      	b.n	8025c8c <_printf_float+0x9c>
 8025db6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025dba:	f240 80e2 	bls.w	8025f82 <_printf_float+0x392>
 8025dbe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dca:	d133      	bne.n	8025e34 <_printf_float+0x244>
 8025dcc:	4a38      	ldr	r2, [pc, #224]	; (8025eb0 <_printf_float+0x2c0>)
 8025dce:	2301      	movs	r3, #1
 8025dd0:	4631      	mov	r1, r6
 8025dd2:	4628      	mov	r0, r5
 8025dd4:	47b8      	blx	r7
 8025dd6:	3001      	adds	r0, #1
 8025dd8:	f43f af58 	beq.w	8025c8c <_printf_float+0x9c>
 8025ddc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025de0:	429a      	cmp	r2, r3
 8025de2:	db02      	blt.n	8025dea <_printf_float+0x1fa>
 8025de4:	6823      	ldr	r3, [r4, #0]
 8025de6:	07d8      	lsls	r0, r3, #31
 8025de8:	d50f      	bpl.n	8025e0a <_printf_float+0x21a>
 8025dea:	4653      	mov	r3, sl
 8025dec:	465a      	mov	r2, fp
 8025dee:	4631      	mov	r1, r6
 8025df0:	4628      	mov	r0, r5
 8025df2:	47b8      	blx	r7
 8025df4:	3001      	adds	r0, #1
 8025df6:	f43f af49 	beq.w	8025c8c <_printf_float+0x9c>
 8025dfa:	f04f 0800 	mov.w	r8, #0
 8025dfe:	f104 091a 	add.w	r9, r4, #26
 8025e02:	9b08      	ldr	r3, [sp, #32]
 8025e04:	3b01      	subs	r3, #1
 8025e06:	4543      	cmp	r3, r8
 8025e08:	dc09      	bgt.n	8025e1e <_printf_float+0x22e>
 8025e0a:	6823      	ldr	r3, [r4, #0]
 8025e0c:	079b      	lsls	r3, r3, #30
 8025e0e:	f100 8108 	bmi.w	8026022 <_printf_float+0x432>
 8025e12:	68e0      	ldr	r0, [r4, #12]
 8025e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e16:	4298      	cmp	r0, r3
 8025e18:	bfb8      	it	lt
 8025e1a:	4618      	movlt	r0, r3
 8025e1c:	e738      	b.n	8025c90 <_printf_float+0xa0>
 8025e1e:	2301      	movs	r3, #1
 8025e20:	464a      	mov	r2, r9
 8025e22:	4631      	mov	r1, r6
 8025e24:	4628      	mov	r0, r5
 8025e26:	47b8      	blx	r7
 8025e28:	3001      	adds	r0, #1
 8025e2a:	f43f af2f 	beq.w	8025c8c <_printf_float+0x9c>
 8025e2e:	f108 0801 	add.w	r8, r8, #1
 8025e32:	e7e6      	b.n	8025e02 <_printf_float+0x212>
 8025e34:	9b07      	ldr	r3, [sp, #28]
 8025e36:	2b00      	cmp	r3, #0
 8025e38:	dc3c      	bgt.n	8025eb4 <_printf_float+0x2c4>
 8025e3a:	4a1d      	ldr	r2, [pc, #116]	; (8025eb0 <_printf_float+0x2c0>)
 8025e3c:	2301      	movs	r3, #1
 8025e3e:	4631      	mov	r1, r6
 8025e40:	4628      	mov	r0, r5
 8025e42:	47b8      	blx	r7
 8025e44:	3001      	adds	r0, #1
 8025e46:	f43f af21 	beq.w	8025c8c <_printf_float+0x9c>
 8025e4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025e4e:	4313      	orrs	r3, r2
 8025e50:	d102      	bne.n	8025e58 <_printf_float+0x268>
 8025e52:	6823      	ldr	r3, [r4, #0]
 8025e54:	07d9      	lsls	r1, r3, #31
 8025e56:	d5d8      	bpl.n	8025e0a <_printf_float+0x21a>
 8025e58:	4653      	mov	r3, sl
 8025e5a:	465a      	mov	r2, fp
 8025e5c:	4631      	mov	r1, r6
 8025e5e:	4628      	mov	r0, r5
 8025e60:	47b8      	blx	r7
 8025e62:	3001      	adds	r0, #1
 8025e64:	f43f af12 	beq.w	8025c8c <_printf_float+0x9c>
 8025e68:	f04f 0900 	mov.w	r9, #0
 8025e6c:	f104 0a1a 	add.w	sl, r4, #26
 8025e70:	9b07      	ldr	r3, [sp, #28]
 8025e72:	425b      	negs	r3, r3
 8025e74:	454b      	cmp	r3, r9
 8025e76:	dc01      	bgt.n	8025e7c <_printf_float+0x28c>
 8025e78:	9b08      	ldr	r3, [sp, #32]
 8025e7a:	e795      	b.n	8025da8 <_printf_float+0x1b8>
 8025e7c:	2301      	movs	r3, #1
 8025e7e:	4652      	mov	r2, sl
 8025e80:	4631      	mov	r1, r6
 8025e82:	4628      	mov	r0, r5
 8025e84:	47b8      	blx	r7
 8025e86:	3001      	adds	r0, #1
 8025e88:	f43f af00 	beq.w	8025c8c <_printf_float+0x9c>
 8025e8c:	f109 0901 	add.w	r9, r9, #1
 8025e90:	e7ee      	b.n	8025e70 <_printf_float+0x280>
 8025e92:	bf00      	nop
 8025e94:	f3af 8000 	nop.w
 8025e98:	ffffffff 	.word	0xffffffff
 8025e9c:	7fefffff 	.word	0x7fefffff
 8025ea0:	08047348 	.word	0x08047348
 8025ea4:	0804734c 	.word	0x0804734c
 8025ea8:	08047354 	.word	0x08047354
 8025eac:	08047350 	.word	0x08047350
 8025eb0:	08047971 	.word	0x08047971
 8025eb4:	9a08      	ldr	r2, [sp, #32]
 8025eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025eb8:	429a      	cmp	r2, r3
 8025eba:	bfa8      	it	ge
 8025ebc:	461a      	movge	r2, r3
 8025ebe:	2a00      	cmp	r2, #0
 8025ec0:	4691      	mov	r9, r2
 8025ec2:	dc38      	bgt.n	8025f36 <_printf_float+0x346>
 8025ec4:	2300      	movs	r3, #0
 8025ec6:	9305      	str	r3, [sp, #20]
 8025ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025ecc:	f104 021a 	add.w	r2, r4, #26
 8025ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025ed2:	9905      	ldr	r1, [sp, #20]
 8025ed4:	9304      	str	r3, [sp, #16]
 8025ed6:	eba3 0309 	sub.w	r3, r3, r9
 8025eda:	428b      	cmp	r3, r1
 8025edc:	dc33      	bgt.n	8025f46 <_printf_float+0x356>
 8025ede:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025ee2:	429a      	cmp	r2, r3
 8025ee4:	db3c      	blt.n	8025f60 <_printf_float+0x370>
 8025ee6:	6823      	ldr	r3, [r4, #0]
 8025ee8:	07da      	lsls	r2, r3, #31
 8025eea:	d439      	bmi.n	8025f60 <_printf_float+0x370>
 8025eec:	9b08      	ldr	r3, [sp, #32]
 8025eee:	9a04      	ldr	r2, [sp, #16]
 8025ef0:	9907      	ldr	r1, [sp, #28]
 8025ef2:	1a9a      	subs	r2, r3, r2
 8025ef4:	eba3 0901 	sub.w	r9, r3, r1
 8025ef8:	4591      	cmp	r9, r2
 8025efa:	bfa8      	it	ge
 8025efc:	4691      	movge	r9, r2
 8025efe:	f1b9 0f00 	cmp.w	r9, #0
 8025f02:	dc35      	bgt.n	8025f70 <_printf_float+0x380>
 8025f04:	f04f 0800 	mov.w	r8, #0
 8025f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025f0c:	f104 0a1a 	add.w	sl, r4, #26
 8025f10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025f14:	1a9b      	subs	r3, r3, r2
 8025f16:	eba3 0309 	sub.w	r3, r3, r9
 8025f1a:	4543      	cmp	r3, r8
 8025f1c:	f77f af75 	ble.w	8025e0a <_printf_float+0x21a>
 8025f20:	2301      	movs	r3, #1
 8025f22:	4652      	mov	r2, sl
 8025f24:	4631      	mov	r1, r6
 8025f26:	4628      	mov	r0, r5
 8025f28:	47b8      	blx	r7
 8025f2a:	3001      	adds	r0, #1
 8025f2c:	f43f aeae 	beq.w	8025c8c <_printf_float+0x9c>
 8025f30:	f108 0801 	add.w	r8, r8, #1
 8025f34:	e7ec      	b.n	8025f10 <_printf_float+0x320>
 8025f36:	4613      	mov	r3, r2
 8025f38:	4631      	mov	r1, r6
 8025f3a:	4642      	mov	r2, r8
 8025f3c:	4628      	mov	r0, r5
 8025f3e:	47b8      	blx	r7
 8025f40:	3001      	adds	r0, #1
 8025f42:	d1bf      	bne.n	8025ec4 <_printf_float+0x2d4>
 8025f44:	e6a2      	b.n	8025c8c <_printf_float+0x9c>
 8025f46:	2301      	movs	r3, #1
 8025f48:	4631      	mov	r1, r6
 8025f4a:	4628      	mov	r0, r5
 8025f4c:	9204      	str	r2, [sp, #16]
 8025f4e:	47b8      	blx	r7
 8025f50:	3001      	adds	r0, #1
 8025f52:	f43f ae9b 	beq.w	8025c8c <_printf_float+0x9c>
 8025f56:	9b05      	ldr	r3, [sp, #20]
 8025f58:	9a04      	ldr	r2, [sp, #16]
 8025f5a:	3301      	adds	r3, #1
 8025f5c:	9305      	str	r3, [sp, #20]
 8025f5e:	e7b7      	b.n	8025ed0 <_printf_float+0x2e0>
 8025f60:	4653      	mov	r3, sl
 8025f62:	465a      	mov	r2, fp
 8025f64:	4631      	mov	r1, r6
 8025f66:	4628      	mov	r0, r5
 8025f68:	47b8      	blx	r7
 8025f6a:	3001      	adds	r0, #1
 8025f6c:	d1be      	bne.n	8025eec <_printf_float+0x2fc>
 8025f6e:	e68d      	b.n	8025c8c <_printf_float+0x9c>
 8025f70:	9a04      	ldr	r2, [sp, #16]
 8025f72:	464b      	mov	r3, r9
 8025f74:	4442      	add	r2, r8
 8025f76:	4631      	mov	r1, r6
 8025f78:	4628      	mov	r0, r5
 8025f7a:	47b8      	blx	r7
 8025f7c:	3001      	adds	r0, #1
 8025f7e:	d1c1      	bne.n	8025f04 <_printf_float+0x314>
 8025f80:	e684      	b.n	8025c8c <_printf_float+0x9c>
 8025f82:	9a08      	ldr	r2, [sp, #32]
 8025f84:	2a01      	cmp	r2, #1
 8025f86:	dc01      	bgt.n	8025f8c <_printf_float+0x39c>
 8025f88:	07db      	lsls	r3, r3, #31
 8025f8a:	d537      	bpl.n	8025ffc <_printf_float+0x40c>
 8025f8c:	2301      	movs	r3, #1
 8025f8e:	4642      	mov	r2, r8
 8025f90:	4631      	mov	r1, r6
 8025f92:	4628      	mov	r0, r5
 8025f94:	47b8      	blx	r7
 8025f96:	3001      	adds	r0, #1
 8025f98:	f43f ae78 	beq.w	8025c8c <_printf_float+0x9c>
 8025f9c:	4653      	mov	r3, sl
 8025f9e:	465a      	mov	r2, fp
 8025fa0:	4631      	mov	r1, r6
 8025fa2:	4628      	mov	r0, r5
 8025fa4:	47b8      	blx	r7
 8025fa6:	3001      	adds	r0, #1
 8025fa8:	f43f ae70 	beq.w	8025c8c <_printf_float+0x9c>
 8025fac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025fb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fb8:	d01b      	beq.n	8025ff2 <_printf_float+0x402>
 8025fba:	9b08      	ldr	r3, [sp, #32]
 8025fbc:	f108 0201 	add.w	r2, r8, #1
 8025fc0:	3b01      	subs	r3, #1
 8025fc2:	4631      	mov	r1, r6
 8025fc4:	4628      	mov	r0, r5
 8025fc6:	47b8      	blx	r7
 8025fc8:	3001      	adds	r0, #1
 8025fca:	d10e      	bne.n	8025fea <_printf_float+0x3fa>
 8025fcc:	e65e      	b.n	8025c8c <_printf_float+0x9c>
 8025fce:	2301      	movs	r3, #1
 8025fd0:	464a      	mov	r2, r9
 8025fd2:	4631      	mov	r1, r6
 8025fd4:	4628      	mov	r0, r5
 8025fd6:	47b8      	blx	r7
 8025fd8:	3001      	adds	r0, #1
 8025fda:	f43f ae57 	beq.w	8025c8c <_printf_float+0x9c>
 8025fde:	f108 0801 	add.w	r8, r8, #1
 8025fe2:	9b08      	ldr	r3, [sp, #32]
 8025fe4:	3b01      	subs	r3, #1
 8025fe6:	4543      	cmp	r3, r8
 8025fe8:	dcf1      	bgt.n	8025fce <_printf_float+0x3de>
 8025fea:	9b04      	ldr	r3, [sp, #16]
 8025fec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025ff0:	e6db      	b.n	8025daa <_printf_float+0x1ba>
 8025ff2:	f04f 0800 	mov.w	r8, #0
 8025ff6:	f104 091a 	add.w	r9, r4, #26
 8025ffa:	e7f2      	b.n	8025fe2 <_printf_float+0x3f2>
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	4642      	mov	r2, r8
 8026000:	e7df      	b.n	8025fc2 <_printf_float+0x3d2>
 8026002:	2301      	movs	r3, #1
 8026004:	464a      	mov	r2, r9
 8026006:	4631      	mov	r1, r6
 8026008:	4628      	mov	r0, r5
 802600a:	47b8      	blx	r7
 802600c:	3001      	adds	r0, #1
 802600e:	f43f ae3d 	beq.w	8025c8c <_printf_float+0x9c>
 8026012:	f108 0801 	add.w	r8, r8, #1
 8026016:	68e3      	ldr	r3, [r4, #12]
 8026018:	9909      	ldr	r1, [sp, #36]	; 0x24
 802601a:	1a5b      	subs	r3, r3, r1
 802601c:	4543      	cmp	r3, r8
 802601e:	dcf0      	bgt.n	8026002 <_printf_float+0x412>
 8026020:	e6f7      	b.n	8025e12 <_printf_float+0x222>
 8026022:	f04f 0800 	mov.w	r8, #0
 8026026:	f104 0919 	add.w	r9, r4, #25
 802602a:	e7f4      	b.n	8026016 <_printf_float+0x426>

0802602c <_printf_common>:
 802602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026030:	4616      	mov	r6, r2
 8026032:	4699      	mov	r9, r3
 8026034:	688a      	ldr	r2, [r1, #8]
 8026036:	690b      	ldr	r3, [r1, #16]
 8026038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802603c:	4293      	cmp	r3, r2
 802603e:	bfb8      	it	lt
 8026040:	4613      	movlt	r3, r2
 8026042:	6033      	str	r3, [r6, #0]
 8026044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026048:	4607      	mov	r7, r0
 802604a:	460c      	mov	r4, r1
 802604c:	b10a      	cbz	r2, 8026052 <_printf_common+0x26>
 802604e:	3301      	adds	r3, #1
 8026050:	6033      	str	r3, [r6, #0]
 8026052:	6823      	ldr	r3, [r4, #0]
 8026054:	0699      	lsls	r1, r3, #26
 8026056:	bf42      	ittt	mi
 8026058:	6833      	ldrmi	r3, [r6, #0]
 802605a:	3302      	addmi	r3, #2
 802605c:	6033      	strmi	r3, [r6, #0]
 802605e:	6825      	ldr	r5, [r4, #0]
 8026060:	f015 0506 	ands.w	r5, r5, #6
 8026064:	d106      	bne.n	8026074 <_printf_common+0x48>
 8026066:	f104 0a19 	add.w	sl, r4, #25
 802606a:	68e3      	ldr	r3, [r4, #12]
 802606c:	6832      	ldr	r2, [r6, #0]
 802606e:	1a9b      	subs	r3, r3, r2
 8026070:	42ab      	cmp	r3, r5
 8026072:	dc26      	bgt.n	80260c2 <_printf_common+0x96>
 8026074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026078:	1e13      	subs	r3, r2, #0
 802607a:	6822      	ldr	r2, [r4, #0]
 802607c:	bf18      	it	ne
 802607e:	2301      	movne	r3, #1
 8026080:	0692      	lsls	r2, r2, #26
 8026082:	d42b      	bmi.n	80260dc <_printf_common+0xb0>
 8026084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026088:	4649      	mov	r1, r9
 802608a:	4638      	mov	r0, r7
 802608c:	47c0      	blx	r8
 802608e:	3001      	adds	r0, #1
 8026090:	d01e      	beq.n	80260d0 <_printf_common+0xa4>
 8026092:	6823      	ldr	r3, [r4, #0]
 8026094:	68e5      	ldr	r5, [r4, #12]
 8026096:	6832      	ldr	r2, [r6, #0]
 8026098:	f003 0306 	and.w	r3, r3, #6
 802609c:	2b04      	cmp	r3, #4
 802609e:	bf08      	it	eq
 80260a0:	1aad      	subeq	r5, r5, r2
 80260a2:	68a3      	ldr	r3, [r4, #8]
 80260a4:	6922      	ldr	r2, [r4, #16]
 80260a6:	bf0c      	ite	eq
 80260a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80260ac:	2500      	movne	r5, #0
 80260ae:	4293      	cmp	r3, r2
 80260b0:	bfc4      	itt	gt
 80260b2:	1a9b      	subgt	r3, r3, r2
 80260b4:	18ed      	addgt	r5, r5, r3
 80260b6:	2600      	movs	r6, #0
 80260b8:	341a      	adds	r4, #26
 80260ba:	42b5      	cmp	r5, r6
 80260bc:	d11a      	bne.n	80260f4 <_printf_common+0xc8>
 80260be:	2000      	movs	r0, #0
 80260c0:	e008      	b.n	80260d4 <_printf_common+0xa8>
 80260c2:	2301      	movs	r3, #1
 80260c4:	4652      	mov	r2, sl
 80260c6:	4649      	mov	r1, r9
 80260c8:	4638      	mov	r0, r7
 80260ca:	47c0      	blx	r8
 80260cc:	3001      	adds	r0, #1
 80260ce:	d103      	bne.n	80260d8 <_printf_common+0xac>
 80260d0:	f04f 30ff 	mov.w	r0, #4294967295
 80260d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80260d8:	3501      	adds	r5, #1
 80260da:	e7c6      	b.n	802606a <_printf_common+0x3e>
 80260dc:	18e1      	adds	r1, r4, r3
 80260de:	1c5a      	adds	r2, r3, #1
 80260e0:	2030      	movs	r0, #48	; 0x30
 80260e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80260e6:	4422      	add	r2, r4
 80260e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80260ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80260f0:	3302      	adds	r3, #2
 80260f2:	e7c7      	b.n	8026084 <_printf_common+0x58>
 80260f4:	2301      	movs	r3, #1
 80260f6:	4622      	mov	r2, r4
 80260f8:	4649      	mov	r1, r9
 80260fa:	4638      	mov	r0, r7
 80260fc:	47c0      	blx	r8
 80260fe:	3001      	adds	r0, #1
 8026100:	d0e6      	beq.n	80260d0 <_printf_common+0xa4>
 8026102:	3601      	adds	r6, #1
 8026104:	e7d9      	b.n	80260ba <_printf_common+0x8e>
 8026106:	Address 0x0000000008026106 is out of bounds.


08026108 <_printf_i>:
 8026108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802610c:	7e0f      	ldrb	r7, [r1, #24]
 802610e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026110:	2f78      	cmp	r7, #120	; 0x78
 8026112:	4691      	mov	r9, r2
 8026114:	4680      	mov	r8, r0
 8026116:	460c      	mov	r4, r1
 8026118:	469a      	mov	sl, r3
 802611a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802611e:	d807      	bhi.n	8026130 <_printf_i+0x28>
 8026120:	2f62      	cmp	r7, #98	; 0x62
 8026122:	d80a      	bhi.n	802613a <_printf_i+0x32>
 8026124:	2f00      	cmp	r7, #0
 8026126:	f000 80d8 	beq.w	80262da <_printf_i+0x1d2>
 802612a:	2f58      	cmp	r7, #88	; 0x58
 802612c:	f000 80a3 	beq.w	8026276 <_printf_i+0x16e>
 8026130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026138:	e03a      	b.n	80261b0 <_printf_i+0xa8>
 802613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802613e:	2b15      	cmp	r3, #21
 8026140:	d8f6      	bhi.n	8026130 <_printf_i+0x28>
 8026142:	a101      	add	r1, pc, #4	; (adr r1, 8026148 <_printf_i+0x40>)
 8026144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026148:	080261a1 	.word	0x080261a1
 802614c:	080261b5 	.word	0x080261b5
 8026150:	08026131 	.word	0x08026131
 8026154:	08026131 	.word	0x08026131
 8026158:	08026131 	.word	0x08026131
 802615c:	08026131 	.word	0x08026131
 8026160:	080261b5 	.word	0x080261b5
 8026164:	08026131 	.word	0x08026131
 8026168:	08026131 	.word	0x08026131
 802616c:	08026131 	.word	0x08026131
 8026170:	08026131 	.word	0x08026131
 8026174:	080262c1 	.word	0x080262c1
 8026178:	080261e5 	.word	0x080261e5
 802617c:	080262a3 	.word	0x080262a3
 8026180:	08026131 	.word	0x08026131
 8026184:	08026131 	.word	0x08026131
 8026188:	080262e3 	.word	0x080262e3
 802618c:	08026131 	.word	0x08026131
 8026190:	080261e5 	.word	0x080261e5
 8026194:	08026131 	.word	0x08026131
 8026198:	08026131 	.word	0x08026131
 802619c:	080262ab 	.word	0x080262ab
 80261a0:	682b      	ldr	r3, [r5, #0]
 80261a2:	1d1a      	adds	r2, r3, #4
 80261a4:	681b      	ldr	r3, [r3, #0]
 80261a6:	602a      	str	r2, [r5, #0]
 80261a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80261ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80261b0:	2301      	movs	r3, #1
 80261b2:	e0a3      	b.n	80262fc <_printf_i+0x1f4>
 80261b4:	6820      	ldr	r0, [r4, #0]
 80261b6:	6829      	ldr	r1, [r5, #0]
 80261b8:	0606      	lsls	r6, r0, #24
 80261ba:	f101 0304 	add.w	r3, r1, #4
 80261be:	d50a      	bpl.n	80261d6 <_printf_i+0xce>
 80261c0:	680e      	ldr	r6, [r1, #0]
 80261c2:	602b      	str	r3, [r5, #0]
 80261c4:	2e00      	cmp	r6, #0
 80261c6:	da03      	bge.n	80261d0 <_printf_i+0xc8>
 80261c8:	232d      	movs	r3, #45	; 0x2d
 80261ca:	4276      	negs	r6, r6
 80261cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80261d0:	485e      	ldr	r0, [pc, #376]	; (802634c <_printf_i+0x244>)
 80261d2:	230a      	movs	r3, #10
 80261d4:	e019      	b.n	802620a <_printf_i+0x102>
 80261d6:	680e      	ldr	r6, [r1, #0]
 80261d8:	602b      	str	r3, [r5, #0]
 80261da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80261de:	bf18      	it	ne
 80261e0:	b236      	sxthne	r6, r6
 80261e2:	e7ef      	b.n	80261c4 <_printf_i+0xbc>
 80261e4:	682b      	ldr	r3, [r5, #0]
 80261e6:	6820      	ldr	r0, [r4, #0]
 80261e8:	1d19      	adds	r1, r3, #4
 80261ea:	6029      	str	r1, [r5, #0]
 80261ec:	0601      	lsls	r1, r0, #24
 80261ee:	d501      	bpl.n	80261f4 <_printf_i+0xec>
 80261f0:	681e      	ldr	r6, [r3, #0]
 80261f2:	e002      	b.n	80261fa <_printf_i+0xf2>
 80261f4:	0646      	lsls	r6, r0, #25
 80261f6:	d5fb      	bpl.n	80261f0 <_printf_i+0xe8>
 80261f8:	881e      	ldrh	r6, [r3, #0]
 80261fa:	4854      	ldr	r0, [pc, #336]	; (802634c <_printf_i+0x244>)
 80261fc:	2f6f      	cmp	r7, #111	; 0x6f
 80261fe:	bf0c      	ite	eq
 8026200:	2308      	moveq	r3, #8
 8026202:	230a      	movne	r3, #10
 8026204:	2100      	movs	r1, #0
 8026206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802620a:	6865      	ldr	r5, [r4, #4]
 802620c:	60a5      	str	r5, [r4, #8]
 802620e:	2d00      	cmp	r5, #0
 8026210:	bfa2      	ittt	ge
 8026212:	6821      	ldrge	r1, [r4, #0]
 8026214:	f021 0104 	bicge.w	r1, r1, #4
 8026218:	6021      	strge	r1, [r4, #0]
 802621a:	b90e      	cbnz	r6, 8026220 <_printf_i+0x118>
 802621c:	2d00      	cmp	r5, #0
 802621e:	d04d      	beq.n	80262bc <_printf_i+0x1b4>
 8026220:	4615      	mov	r5, r2
 8026222:	fbb6 f1f3 	udiv	r1, r6, r3
 8026226:	fb03 6711 	mls	r7, r3, r1, r6
 802622a:	5dc7      	ldrb	r7, [r0, r7]
 802622c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026230:	4637      	mov	r7, r6
 8026232:	42bb      	cmp	r3, r7
 8026234:	460e      	mov	r6, r1
 8026236:	d9f4      	bls.n	8026222 <_printf_i+0x11a>
 8026238:	2b08      	cmp	r3, #8
 802623a:	d10b      	bne.n	8026254 <_printf_i+0x14c>
 802623c:	6823      	ldr	r3, [r4, #0]
 802623e:	07de      	lsls	r6, r3, #31
 8026240:	d508      	bpl.n	8026254 <_printf_i+0x14c>
 8026242:	6923      	ldr	r3, [r4, #16]
 8026244:	6861      	ldr	r1, [r4, #4]
 8026246:	4299      	cmp	r1, r3
 8026248:	bfde      	ittt	le
 802624a:	2330      	movle	r3, #48	; 0x30
 802624c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026250:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026254:	1b52      	subs	r2, r2, r5
 8026256:	6122      	str	r2, [r4, #16]
 8026258:	f8cd a000 	str.w	sl, [sp]
 802625c:	464b      	mov	r3, r9
 802625e:	aa03      	add	r2, sp, #12
 8026260:	4621      	mov	r1, r4
 8026262:	4640      	mov	r0, r8
 8026264:	f7ff fee2 	bl	802602c <_printf_common>
 8026268:	3001      	adds	r0, #1
 802626a:	d14c      	bne.n	8026306 <_printf_i+0x1fe>
 802626c:	f04f 30ff 	mov.w	r0, #4294967295
 8026270:	b004      	add	sp, #16
 8026272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026276:	4835      	ldr	r0, [pc, #212]	; (802634c <_printf_i+0x244>)
 8026278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802627c:	6829      	ldr	r1, [r5, #0]
 802627e:	6823      	ldr	r3, [r4, #0]
 8026280:	f851 6b04 	ldr.w	r6, [r1], #4
 8026284:	6029      	str	r1, [r5, #0]
 8026286:	061d      	lsls	r5, r3, #24
 8026288:	d514      	bpl.n	80262b4 <_printf_i+0x1ac>
 802628a:	07df      	lsls	r7, r3, #31
 802628c:	bf44      	itt	mi
 802628e:	f043 0320 	orrmi.w	r3, r3, #32
 8026292:	6023      	strmi	r3, [r4, #0]
 8026294:	b91e      	cbnz	r6, 802629e <_printf_i+0x196>
 8026296:	6823      	ldr	r3, [r4, #0]
 8026298:	f023 0320 	bic.w	r3, r3, #32
 802629c:	6023      	str	r3, [r4, #0]
 802629e:	2310      	movs	r3, #16
 80262a0:	e7b0      	b.n	8026204 <_printf_i+0xfc>
 80262a2:	6823      	ldr	r3, [r4, #0]
 80262a4:	f043 0320 	orr.w	r3, r3, #32
 80262a8:	6023      	str	r3, [r4, #0]
 80262aa:	2378      	movs	r3, #120	; 0x78
 80262ac:	4828      	ldr	r0, [pc, #160]	; (8026350 <_printf_i+0x248>)
 80262ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80262b2:	e7e3      	b.n	802627c <_printf_i+0x174>
 80262b4:	0659      	lsls	r1, r3, #25
 80262b6:	bf48      	it	mi
 80262b8:	b2b6      	uxthmi	r6, r6
 80262ba:	e7e6      	b.n	802628a <_printf_i+0x182>
 80262bc:	4615      	mov	r5, r2
 80262be:	e7bb      	b.n	8026238 <_printf_i+0x130>
 80262c0:	682b      	ldr	r3, [r5, #0]
 80262c2:	6826      	ldr	r6, [r4, #0]
 80262c4:	6961      	ldr	r1, [r4, #20]
 80262c6:	1d18      	adds	r0, r3, #4
 80262c8:	6028      	str	r0, [r5, #0]
 80262ca:	0635      	lsls	r5, r6, #24
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	d501      	bpl.n	80262d4 <_printf_i+0x1cc>
 80262d0:	6019      	str	r1, [r3, #0]
 80262d2:	e002      	b.n	80262da <_printf_i+0x1d2>
 80262d4:	0670      	lsls	r0, r6, #25
 80262d6:	d5fb      	bpl.n	80262d0 <_printf_i+0x1c8>
 80262d8:	8019      	strh	r1, [r3, #0]
 80262da:	2300      	movs	r3, #0
 80262dc:	6123      	str	r3, [r4, #16]
 80262de:	4615      	mov	r5, r2
 80262e0:	e7ba      	b.n	8026258 <_printf_i+0x150>
 80262e2:	682b      	ldr	r3, [r5, #0]
 80262e4:	1d1a      	adds	r2, r3, #4
 80262e6:	602a      	str	r2, [r5, #0]
 80262e8:	681d      	ldr	r5, [r3, #0]
 80262ea:	6862      	ldr	r2, [r4, #4]
 80262ec:	2100      	movs	r1, #0
 80262ee:	4628      	mov	r0, r5
 80262f0:	f7d9 ffbe 	bl	8000270 <memchr>
 80262f4:	b108      	cbz	r0, 80262fa <_printf_i+0x1f2>
 80262f6:	1b40      	subs	r0, r0, r5
 80262f8:	6060      	str	r0, [r4, #4]
 80262fa:	6863      	ldr	r3, [r4, #4]
 80262fc:	6123      	str	r3, [r4, #16]
 80262fe:	2300      	movs	r3, #0
 8026300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026304:	e7a8      	b.n	8026258 <_printf_i+0x150>
 8026306:	6923      	ldr	r3, [r4, #16]
 8026308:	462a      	mov	r2, r5
 802630a:	4649      	mov	r1, r9
 802630c:	4640      	mov	r0, r8
 802630e:	47d0      	blx	sl
 8026310:	3001      	adds	r0, #1
 8026312:	d0ab      	beq.n	802626c <_printf_i+0x164>
 8026314:	6823      	ldr	r3, [r4, #0]
 8026316:	079b      	lsls	r3, r3, #30
 8026318:	d413      	bmi.n	8026342 <_printf_i+0x23a>
 802631a:	68e0      	ldr	r0, [r4, #12]
 802631c:	9b03      	ldr	r3, [sp, #12]
 802631e:	4298      	cmp	r0, r3
 8026320:	bfb8      	it	lt
 8026322:	4618      	movlt	r0, r3
 8026324:	e7a4      	b.n	8026270 <_printf_i+0x168>
 8026326:	2301      	movs	r3, #1
 8026328:	4632      	mov	r2, r6
 802632a:	4649      	mov	r1, r9
 802632c:	4640      	mov	r0, r8
 802632e:	47d0      	blx	sl
 8026330:	3001      	adds	r0, #1
 8026332:	d09b      	beq.n	802626c <_printf_i+0x164>
 8026334:	3501      	adds	r5, #1
 8026336:	68e3      	ldr	r3, [r4, #12]
 8026338:	9903      	ldr	r1, [sp, #12]
 802633a:	1a5b      	subs	r3, r3, r1
 802633c:	42ab      	cmp	r3, r5
 802633e:	dcf2      	bgt.n	8026326 <_printf_i+0x21e>
 8026340:	e7eb      	b.n	802631a <_printf_i+0x212>
 8026342:	2500      	movs	r5, #0
 8026344:	f104 0619 	add.w	r6, r4, #25
 8026348:	e7f5      	b.n	8026336 <_printf_i+0x22e>
 802634a:	bf00      	nop
 802634c:	08047358 	.word	0x08047358
 8026350:	08047369 	.word	0x08047369

08026354 <iprintf>:
 8026354:	b40f      	push	{r0, r1, r2, r3}
 8026356:	4b0a      	ldr	r3, [pc, #40]	; (8026380 <iprintf+0x2c>)
 8026358:	b513      	push	{r0, r1, r4, lr}
 802635a:	681c      	ldr	r4, [r3, #0]
 802635c:	b124      	cbz	r4, 8026368 <iprintf+0x14>
 802635e:	69a3      	ldr	r3, [r4, #24]
 8026360:	b913      	cbnz	r3, 8026368 <iprintf+0x14>
 8026362:	4620      	mov	r0, r4
 8026364:	f7fe fe36 	bl	8024fd4 <__sinit>
 8026368:	ab05      	add	r3, sp, #20
 802636a:	9a04      	ldr	r2, [sp, #16]
 802636c:	68a1      	ldr	r1, [r4, #8]
 802636e:	9301      	str	r3, [sp, #4]
 8026370:	4620      	mov	r0, r4
 8026372:	f003 fbc7 	bl	8029b04 <_vfiprintf_r>
 8026376:	b002      	add	sp, #8
 8026378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802637c:	b004      	add	sp, #16
 802637e:	4770      	bx	lr
 8026380:	200004a4 	.word	0x200004a4

08026384 <putchar>:
 8026384:	4b09      	ldr	r3, [pc, #36]	; (80263ac <putchar+0x28>)
 8026386:	b513      	push	{r0, r1, r4, lr}
 8026388:	681c      	ldr	r4, [r3, #0]
 802638a:	4601      	mov	r1, r0
 802638c:	b134      	cbz	r4, 802639c <putchar+0x18>
 802638e:	69a3      	ldr	r3, [r4, #24]
 8026390:	b923      	cbnz	r3, 802639c <putchar+0x18>
 8026392:	9001      	str	r0, [sp, #4]
 8026394:	4620      	mov	r0, r4
 8026396:	f7fe fe1d 	bl	8024fd4 <__sinit>
 802639a:	9901      	ldr	r1, [sp, #4]
 802639c:	68a2      	ldr	r2, [r4, #8]
 802639e:	4620      	mov	r0, r4
 80263a0:	b002      	add	sp, #8
 80263a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263a6:	f003 be2f 	b.w	802a008 <_putc_r>
 80263aa:	bf00      	nop
 80263ac:	200004a4 	.word	0x200004a4

080263b0 <_puts_r>:
 80263b0:	b570      	push	{r4, r5, r6, lr}
 80263b2:	460e      	mov	r6, r1
 80263b4:	4605      	mov	r5, r0
 80263b6:	b118      	cbz	r0, 80263c0 <_puts_r+0x10>
 80263b8:	6983      	ldr	r3, [r0, #24]
 80263ba:	b90b      	cbnz	r3, 80263c0 <_puts_r+0x10>
 80263bc:	f7fe fe0a 	bl	8024fd4 <__sinit>
 80263c0:	69ab      	ldr	r3, [r5, #24]
 80263c2:	68ac      	ldr	r4, [r5, #8]
 80263c4:	b913      	cbnz	r3, 80263cc <_puts_r+0x1c>
 80263c6:	4628      	mov	r0, r5
 80263c8:	f7fe fe04 	bl	8024fd4 <__sinit>
 80263cc:	4b2c      	ldr	r3, [pc, #176]	; (8026480 <_puts_r+0xd0>)
 80263ce:	429c      	cmp	r4, r3
 80263d0:	d120      	bne.n	8026414 <_puts_r+0x64>
 80263d2:	686c      	ldr	r4, [r5, #4]
 80263d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80263d6:	07db      	lsls	r3, r3, #31
 80263d8:	d405      	bmi.n	80263e6 <_puts_r+0x36>
 80263da:	89a3      	ldrh	r3, [r4, #12]
 80263dc:	0598      	lsls	r0, r3, #22
 80263de:	d402      	bmi.n	80263e6 <_puts_r+0x36>
 80263e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80263e2:	f7fe ffcd 	bl	8025380 <__retarget_lock_acquire_recursive>
 80263e6:	89a3      	ldrh	r3, [r4, #12]
 80263e8:	0719      	lsls	r1, r3, #28
 80263ea:	d51d      	bpl.n	8026428 <_puts_r+0x78>
 80263ec:	6923      	ldr	r3, [r4, #16]
 80263ee:	b1db      	cbz	r3, 8026428 <_puts_r+0x78>
 80263f0:	3e01      	subs	r6, #1
 80263f2:	68a3      	ldr	r3, [r4, #8]
 80263f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80263f8:	3b01      	subs	r3, #1
 80263fa:	60a3      	str	r3, [r4, #8]
 80263fc:	bb39      	cbnz	r1, 802644e <_puts_r+0x9e>
 80263fe:	2b00      	cmp	r3, #0
 8026400:	da38      	bge.n	8026474 <_puts_r+0xc4>
 8026402:	4622      	mov	r2, r4
 8026404:	210a      	movs	r1, #10
 8026406:	4628      	mov	r0, r5
 8026408:	f001 fad4 	bl	80279b4 <__swbuf_r>
 802640c:	3001      	adds	r0, #1
 802640e:	d011      	beq.n	8026434 <_puts_r+0x84>
 8026410:	250a      	movs	r5, #10
 8026412:	e011      	b.n	8026438 <_puts_r+0x88>
 8026414:	4b1b      	ldr	r3, [pc, #108]	; (8026484 <_puts_r+0xd4>)
 8026416:	429c      	cmp	r4, r3
 8026418:	d101      	bne.n	802641e <_puts_r+0x6e>
 802641a:	68ac      	ldr	r4, [r5, #8]
 802641c:	e7da      	b.n	80263d4 <_puts_r+0x24>
 802641e:	4b1a      	ldr	r3, [pc, #104]	; (8026488 <_puts_r+0xd8>)
 8026420:	429c      	cmp	r4, r3
 8026422:	bf08      	it	eq
 8026424:	68ec      	ldreq	r4, [r5, #12]
 8026426:	e7d5      	b.n	80263d4 <_puts_r+0x24>
 8026428:	4621      	mov	r1, r4
 802642a:	4628      	mov	r0, r5
 802642c:	f001 fb26 	bl	8027a7c <__swsetup_r>
 8026430:	2800      	cmp	r0, #0
 8026432:	d0dd      	beq.n	80263f0 <_puts_r+0x40>
 8026434:	f04f 35ff 	mov.w	r5, #4294967295
 8026438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802643a:	07da      	lsls	r2, r3, #31
 802643c:	d405      	bmi.n	802644a <_puts_r+0x9a>
 802643e:	89a3      	ldrh	r3, [r4, #12]
 8026440:	059b      	lsls	r3, r3, #22
 8026442:	d402      	bmi.n	802644a <_puts_r+0x9a>
 8026444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026446:	f7fe ff9d 	bl	8025384 <__retarget_lock_release_recursive>
 802644a:	4628      	mov	r0, r5
 802644c:	bd70      	pop	{r4, r5, r6, pc}
 802644e:	2b00      	cmp	r3, #0
 8026450:	da04      	bge.n	802645c <_puts_r+0xac>
 8026452:	69a2      	ldr	r2, [r4, #24]
 8026454:	429a      	cmp	r2, r3
 8026456:	dc06      	bgt.n	8026466 <_puts_r+0xb6>
 8026458:	290a      	cmp	r1, #10
 802645a:	d004      	beq.n	8026466 <_puts_r+0xb6>
 802645c:	6823      	ldr	r3, [r4, #0]
 802645e:	1c5a      	adds	r2, r3, #1
 8026460:	6022      	str	r2, [r4, #0]
 8026462:	7019      	strb	r1, [r3, #0]
 8026464:	e7c5      	b.n	80263f2 <_puts_r+0x42>
 8026466:	4622      	mov	r2, r4
 8026468:	4628      	mov	r0, r5
 802646a:	f001 faa3 	bl	80279b4 <__swbuf_r>
 802646e:	3001      	adds	r0, #1
 8026470:	d1bf      	bne.n	80263f2 <_puts_r+0x42>
 8026472:	e7df      	b.n	8026434 <_puts_r+0x84>
 8026474:	6823      	ldr	r3, [r4, #0]
 8026476:	250a      	movs	r5, #10
 8026478:	1c5a      	adds	r2, r3, #1
 802647a:	6022      	str	r2, [r4, #0]
 802647c:	701d      	strb	r5, [r3, #0]
 802647e:	e7db      	b.n	8026438 <_puts_r+0x88>
 8026480:	080471d0 	.word	0x080471d0
 8026484:	080471f0 	.word	0x080471f0
 8026488:	080471b0 	.word	0x080471b0

0802648c <puts>:
 802648c:	4b02      	ldr	r3, [pc, #8]	; (8026498 <puts+0xc>)
 802648e:	4601      	mov	r1, r0
 8026490:	6818      	ldr	r0, [r3, #0]
 8026492:	f7ff bf8d 	b.w	80263b0 <_puts_r>
 8026496:	bf00      	nop
 8026498:	200004a4 	.word	0x200004a4

0802649c <rand>:
 802649c:	4b16      	ldr	r3, [pc, #88]	; (80264f8 <rand+0x5c>)
 802649e:	b510      	push	{r4, lr}
 80264a0:	681c      	ldr	r4, [r3, #0]
 80264a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80264a4:	b9b3      	cbnz	r3, 80264d4 <rand+0x38>
 80264a6:	2018      	movs	r0, #24
 80264a8:	f7fe ff6e 	bl	8025388 <malloc>
 80264ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80264ae:	b928      	cbnz	r0, 80264bc <rand+0x20>
 80264b0:	4602      	mov	r2, r0
 80264b2:	4b12      	ldr	r3, [pc, #72]	; (80264fc <rand+0x60>)
 80264b4:	4812      	ldr	r0, [pc, #72]	; (8026500 <rand+0x64>)
 80264b6:	214e      	movs	r1, #78	; 0x4e
 80264b8:	f001 fb9a 	bl	8027bf0 <__assert_func>
 80264bc:	4a11      	ldr	r2, [pc, #68]	; (8026504 <rand+0x68>)
 80264be:	4b12      	ldr	r3, [pc, #72]	; (8026508 <rand+0x6c>)
 80264c0:	e9c0 2300 	strd	r2, r3, [r0]
 80264c4:	4b11      	ldr	r3, [pc, #68]	; (802650c <rand+0x70>)
 80264c6:	6083      	str	r3, [r0, #8]
 80264c8:	230b      	movs	r3, #11
 80264ca:	8183      	strh	r3, [r0, #12]
 80264cc:	2201      	movs	r2, #1
 80264ce:	2300      	movs	r3, #0
 80264d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80264d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80264d6:	4a0e      	ldr	r2, [pc, #56]	; (8026510 <rand+0x74>)
 80264d8:	6920      	ldr	r0, [r4, #16]
 80264da:	6963      	ldr	r3, [r4, #20]
 80264dc:	490d      	ldr	r1, [pc, #52]	; (8026514 <rand+0x78>)
 80264de:	4342      	muls	r2, r0
 80264e0:	fb01 2203 	mla	r2, r1, r3, r2
 80264e4:	fba0 0101 	umull	r0, r1, r0, r1
 80264e8:	1c43      	adds	r3, r0, #1
 80264ea:	eb42 0001 	adc.w	r0, r2, r1
 80264ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80264f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80264f6:	bd10      	pop	{r4, pc}
 80264f8:	200004a4 	.word	0x200004a4
 80264fc:	08047214 	.word	0x08047214
 8026500:	0804737a 	.word	0x0804737a
 8026504:	abcd330e 	.word	0xabcd330e
 8026508:	e66d1234 	.word	0xe66d1234
 802650c:	0005deec 	.word	0x0005deec
 8026510:	5851f42d 	.word	0x5851f42d
 8026514:	4c957f2d 	.word	0x4c957f2d

08026518 <cleanup_glue>:
 8026518:	b538      	push	{r3, r4, r5, lr}
 802651a:	460c      	mov	r4, r1
 802651c:	6809      	ldr	r1, [r1, #0]
 802651e:	4605      	mov	r5, r0
 8026520:	b109      	cbz	r1, 8026526 <cleanup_glue+0xe>
 8026522:	f7ff fff9 	bl	8026518 <cleanup_glue>
 8026526:	4621      	mov	r1, r4
 8026528:	4628      	mov	r0, r5
 802652a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802652e:	f7ff b9ed 	b.w	802590c <_free_r>
 8026532:	Address 0x0000000008026532 is out of bounds.


08026534 <_reclaim_reent>:
 8026534:	4b2c      	ldr	r3, [pc, #176]	; (80265e8 <_reclaim_reent+0xb4>)
 8026536:	681b      	ldr	r3, [r3, #0]
 8026538:	4283      	cmp	r3, r0
 802653a:	b570      	push	{r4, r5, r6, lr}
 802653c:	4604      	mov	r4, r0
 802653e:	d051      	beq.n	80265e4 <_reclaim_reent+0xb0>
 8026540:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026542:	b143      	cbz	r3, 8026556 <_reclaim_reent+0x22>
 8026544:	68db      	ldr	r3, [r3, #12]
 8026546:	2b00      	cmp	r3, #0
 8026548:	d14a      	bne.n	80265e0 <_reclaim_reent+0xac>
 802654a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802654c:	6819      	ldr	r1, [r3, #0]
 802654e:	b111      	cbz	r1, 8026556 <_reclaim_reent+0x22>
 8026550:	4620      	mov	r0, r4
 8026552:	f7ff f9db 	bl	802590c <_free_r>
 8026556:	6961      	ldr	r1, [r4, #20]
 8026558:	b111      	cbz	r1, 8026560 <_reclaim_reent+0x2c>
 802655a:	4620      	mov	r0, r4
 802655c:	f7ff f9d6 	bl	802590c <_free_r>
 8026560:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026562:	b111      	cbz	r1, 802656a <_reclaim_reent+0x36>
 8026564:	4620      	mov	r0, r4
 8026566:	f7ff f9d1 	bl	802590c <_free_r>
 802656a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802656c:	b111      	cbz	r1, 8026574 <_reclaim_reent+0x40>
 802656e:	4620      	mov	r0, r4
 8026570:	f7ff f9cc 	bl	802590c <_free_r>
 8026574:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026576:	b111      	cbz	r1, 802657e <_reclaim_reent+0x4a>
 8026578:	4620      	mov	r0, r4
 802657a:	f7ff f9c7 	bl	802590c <_free_r>
 802657e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026580:	b111      	cbz	r1, 8026588 <_reclaim_reent+0x54>
 8026582:	4620      	mov	r0, r4
 8026584:	f7ff f9c2 	bl	802590c <_free_r>
 8026588:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802658a:	b111      	cbz	r1, 8026592 <_reclaim_reent+0x5e>
 802658c:	4620      	mov	r0, r4
 802658e:	f7ff f9bd 	bl	802590c <_free_r>
 8026592:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026594:	b111      	cbz	r1, 802659c <_reclaim_reent+0x68>
 8026596:	4620      	mov	r0, r4
 8026598:	f7ff f9b8 	bl	802590c <_free_r>
 802659c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802659e:	b111      	cbz	r1, 80265a6 <_reclaim_reent+0x72>
 80265a0:	4620      	mov	r0, r4
 80265a2:	f7ff f9b3 	bl	802590c <_free_r>
 80265a6:	69a3      	ldr	r3, [r4, #24]
 80265a8:	b1e3      	cbz	r3, 80265e4 <_reclaim_reent+0xb0>
 80265aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80265ac:	4620      	mov	r0, r4
 80265ae:	4798      	blx	r3
 80265b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80265b2:	b1b9      	cbz	r1, 80265e4 <_reclaim_reent+0xb0>
 80265b4:	4620      	mov	r0, r4
 80265b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80265ba:	f7ff bfad 	b.w	8026518 <cleanup_glue>
 80265be:	5949      	ldr	r1, [r1, r5]
 80265c0:	b941      	cbnz	r1, 80265d4 <_reclaim_reent+0xa0>
 80265c2:	3504      	adds	r5, #4
 80265c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80265c6:	2d80      	cmp	r5, #128	; 0x80
 80265c8:	68d9      	ldr	r1, [r3, #12]
 80265ca:	d1f8      	bne.n	80265be <_reclaim_reent+0x8a>
 80265cc:	4620      	mov	r0, r4
 80265ce:	f7ff f99d 	bl	802590c <_free_r>
 80265d2:	e7ba      	b.n	802654a <_reclaim_reent+0x16>
 80265d4:	680e      	ldr	r6, [r1, #0]
 80265d6:	4620      	mov	r0, r4
 80265d8:	f7ff f998 	bl	802590c <_free_r>
 80265dc:	4631      	mov	r1, r6
 80265de:	e7ef      	b.n	80265c0 <_reclaim_reent+0x8c>
 80265e0:	2500      	movs	r5, #0
 80265e2:	e7ef      	b.n	80265c4 <_reclaim_reent+0x90>
 80265e4:	bd70      	pop	{r4, r5, r6, pc}
 80265e6:	bf00      	nop
 80265e8:	200004a4 	.word	0x200004a4

080265ec <modf>:
 80265ec:	b570      	push	{r4, r5, r6, lr}
 80265ee:	ed2d 8b02 	vpush	{d8}
 80265f2:	eeb0 8b40 	vmov.f64	d8, d0
 80265f6:	ee18 5a90 	vmov	r5, s17
 80265fa:	4604      	mov	r4, r0
 80265fc:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8026600:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8026604:	2b13      	cmp	r3, #19
 8026606:	ee10 1a10 	vmov	r1, s0
 802660a:	dc23      	bgt.n	8026654 <modf+0x68>
 802660c:	2b00      	cmp	r3, #0
 802660e:	da09      	bge.n	8026624 <modf+0x38>
 8026610:	2200      	movs	r2, #0
 8026612:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026616:	e9c4 2300 	strd	r2, r3, [r4]
 802661a:	eeb0 0b48 	vmov.f64	d0, d8
 802661e:	ecbd 8b02 	vpop	{d8}
 8026622:	bd70      	pop	{r4, r5, r6, pc}
 8026624:	481d      	ldr	r0, [pc, #116]	; (802669c <modf+0xb0>)
 8026626:	4118      	asrs	r0, r3
 8026628:	ea05 0300 	and.w	r3, r5, r0
 802662c:	4319      	orrs	r1, r3
 802662e:	d107      	bne.n	8026640 <modf+0x54>
 8026630:	ed84 0b00 	vstr	d0, [r4]
 8026634:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026638:	460a      	mov	r2, r1
 802663a:	ec43 2b18 	vmov	d8, r2, r3
 802663e:	e7ec      	b.n	802661a <modf+0x2e>
 8026640:	2200      	movs	r2, #0
 8026642:	ea25 0300 	bic.w	r3, r5, r0
 8026646:	ec43 2b17 	vmov	d7, r2, r3
 802664a:	e9c4 2300 	strd	r2, r3, [r4]
 802664e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8026652:	e7e2      	b.n	802661a <modf+0x2e>
 8026654:	2b33      	cmp	r3, #51	; 0x33
 8026656:	dd0d      	ble.n	8026674 <modf+0x88>
 8026658:	ed84 0b00 	vstr	d0, [r4]
 802665c:	f003 fd2e 	bl	802a0bc <__fpclassifyd>
 8026660:	b920      	cbnz	r0, 802666c <modf+0x80>
 8026662:	ee38 8b08 	vadd.f64	d8, d8, d8
 8026666:	ed84 8b00 	vstr	d8, [r4]
 802666a:	e7d6      	b.n	802661a <modf+0x2e>
 802666c:	2200      	movs	r2, #0
 802666e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026672:	e7e2      	b.n	802663a <modf+0x4e>
 8026674:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8026678:	f04f 30ff 	mov.w	r0, #4294967295
 802667c:	40d8      	lsrs	r0, r3
 802667e:	ea11 0600 	ands.w	r6, r1, r0
 8026682:	d105      	bne.n	8026690 <modf+0xa4>
 8026684:	ed84 0b00 	vstr	d0, [r4]
 8026688:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802668c:	4632      	mov	r2, r6
 802668e:	e7d4      	b.n	802663a <modf+0x4e>
 8026690:	ee18 3a90 	vmov	r3, s17
 8026694:	ea21 0200 	bic.w	r2, r1, r0
 8026698:	e7d5      	b.n	8026646 <modf+0x5a>
 802669a:	bf00      	nop
 802669c:	000fffff 	.word	0x000fffff

080266a0 <_sbrk_r>:
 80266a0:	b538      	push	{r3, r4, r5, lr}
 80266a2:	4d06      	ldr	r5, [pc, #24]	; (80266bc <_sbrk_r+0x1c>)
 80266a4:	2300      	movs	r3, #0
 80266a6:	4604      	mov	r4, r0
 80266a8:	4608      	mov	r0, r1
 80266aa:	602b      	str	r3, [r5, #0]
 80266ac:	f7e1 fdf8 	bl	80082a0 <_sbrk>
 80266b0:	1c43      	adds	r3, r0, #1
 80266b2:	d102      	bne.n	80266ba <_sbrk_r+0x1a>
 80266b4:	682b      	ldr	r3, [r5, #0]
 80266b6:	b103      	cbz	r3, 80266ba <_sbrk_r+0x1a>
 80266b8:	6023      	str	r3, [r4, #0]
 80266ba:	bd38      	pop	{r3, r4, r5, pc}
 80266bc:	200300d4 	.word	0x200300d4

080266c0 <sniprintf>:
 80266c0:	b40c      	push	{r2, r3}
 80266c2:	b530      	push	{r4, r5, lr}
 80266c4:	4b17      	ldr	r3, [pc, #92]	; (8026724 <sniprintf+0x64>)
 80266c6:	1e0c      	subs	r4, r1, #0
 80266c8:	681d      	ldr	r5, [r3, #0]
 80266ca:	b09d      	sub	sp, #116	; 0x74
 80266cc:	da08      	bge.n	80266e0 <sniprintf+0x20>
 80266ce:	238b      	movs	r3, #139	; 0x8b
 80266d0:	602b      	str	r3, [r5, #0]
 80266d2:	f04f 30ff 	mov.w	r0, #4294967295
 80266d6:	b01d      	add	sp, #116	; 0x74
 80266d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80266dc:	b002      	add	sp, #8
 80266de:	4770      	bx	lr
 80266e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80266e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80266e8:	bf14      	ite	ne
 80266ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80266ee:	4623      	moveq	r3, r4
 80266f0:	9304      	str	r3, [sp, #16]
 80266f2:	9307      	str	r3, [sp, #28]
 80266f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80266f8:	9002      	str	r0, [sp, #8]
 80266fa:	9006      	str	r0, [sp, #24]
 80266fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026700:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026702:	ab21      	add	r3, sp, #132	; 0x84
 8026704:	a902      	add	r1, sp, #8
 8026706:	4628      	mov	r0, r5
 8026708:	9301      	str	r3, [sp, #4]
 802670a:	f002 feff 	bl	802950c <_svfiprintf_r>
 802670e:	1c43      	adds	r3, r0, #1
 8026710:	bfbc      	itt	lt
 8026712:	238b      	movlt	r3, #139	; 0x8b
 8026714:	602b      	strlt	r3, [r5, #0]
 8026716:	2c00      	cmp	r4, #0
 8026718:	d0dd      	beq.n	80266d6 <sniprintf+0x16>
 802671a:	9b02      	ldr	r3, [sp, #8]
 802671c:	2200      	movs	r2, #0
 802671e:	701a      	strb	r2, [r3, #0]
 8026720:	e7d9      	b.n	80266d6 <sniprintf+0x16>
 8026722:	bf00      	nop
 8026724:	200004a4 	.word	0x200004a4

08026728 <siprintf>:
 8026728:	b40e      	push	{r1, r2, r3}
 802672a:	b500      	push	{lr}
 802672c:	b09c      	sub	sp, #112	; 0x70
 802672e:	ab1d      	add	r3, sp, #116	; 0x74
 8026730:	9002      	str	r0, [sp, #8]
 8026732:	9006      	str	r0, [sp, #24]
 8026734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026738:	4809      	ldr	r0, [pc, #36]	; (8026760 <siprintf+0x38>)
 802673a:	9107      	str	r1, [sp, #28]
 802673c:	9104      	str	r1, [sp, #16]
 802673e:	4909      	ldr	r1, [pc, #36]	; (8026764 <siprintf+0x3c>)
 8026740:	f853 2b04 	ldr.w	r2, [r3], #4
 8026744:	9105      	str	r1, [sp, #20]
 8026746:	6800      	ldr	r0, [r0, #0]
 8026748:	9301      	str	r3, [sp, #4]
 802674a:	a902      	add	r1, sp, #8
 802674c:	f002 fede 	bl	802950c <_svfiprintf_r>
 8026750:	9b02      	ldr	r3, [sp, #8]
 8026752:	2200      	movs	r2, #0
 8026754:	701a      	strb	r2, [r3, #0]
 8026756:	b01c      	add	sp, #112	; 0x70
 8026758:	f85d eb04 	ldr.w	lr, [sp], #4
 802675c:	b003      	add	sp, #12
 802675e:	4770      	bx	lr
 8026760:	200004a4 	.word	0x200004a4
 8026764:	ffff0208 	.word	0xffff0208

08026768 <siscanf>:
 8026768:	b40e      	push	{r1, r2, r3}
 802676a:	b510      	push	{r4, lr}
 802676c:	b09f      	sub	sp, #124	; 0x7c
 802676e:	ac21      	add	r4, sp, #132	; 0x84
 8026770:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026774:	f854 2b04 	ldr.w	r2, [r4], #4
 8026778:	9201      	str	r2, [sp, #4]
 802677a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802677e:	9004      	str	r0, [sp, #16]
 8026780:	9008      	str	r0, [sp, #32]
 8026782:	f7d9 fd67 	bl	8000254 <strlen>
 8026786:	4b0c      	ldr	r3, [pc, #48]	; (80267b8 <siscanf+0x50>)
 8026788:	9005      	str	r0, [sp, #20]
 802678a:	9009      	str	r0, [sp, #36]	; 0x24
 802678c:	930d      	str	r3, [sp, #52]	; 0x34
 802678e:	480b      	ldr	r0, [pc, #44]	; (80267bc <siscanf+0x54>)
 8026790:	9a01      	ldr	r2, [sp, #4]
 8026792:	6800      	ldr	r0, [r0, #0]
 8026794:	9403      	str	r4, [sp, #12]
 8026796:	2300      	movs	r3, #0
 8026798:	9311      	str	r3, [sp, #68]	; 0x44
 802679a:	9316      	str	r3, [sp, #88]	; 0x58
 802679c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80267a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80267a4:	a904      	add	r1, sp, #16
 80267a6:	4623      	mov	r3, r4
 80267a8:	f003 f80a 	bl	80297c0 <__ssvfiscanf_r>
 80267ac:	b01f      	add	sp, #124	; 0x7c
 80267ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80267b2:	b003      	add	sp, #12
 80267b4:	4770      	bx	lr
 80267b6:	bf00      	nop
 80267b8:	080267e3 	.word	0x080267e3
 80267bc:	200004a4 	.word	0x200004a4

080267c0 <__sread>:
 80267c0:	b510      	push	{r4, lr}
 80267c2:	460c      	mov	r4, r1
 80267c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267c8:	f003 fc66 	bl	802a098 <_read_r>
 80267cc:	2800      	cmp	r0, #0
 80267ce:	bfab      	itete	ge
 80267d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80267d2:	89a3      	ldrhlt	r3, [r4, #12]
 80267d4:	181b      	addge	r3, r3, r0
 80267d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80267da:	bfac      	ite	ge
 80267dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80267de:	81a3      	strhlt	r3, [r4, #12]
 80267e0:	bd10      	pop	{r4, pc}

080267e2 <__seofread>:
 80267e2:	2000      	movs	r0, #0
 80267e4:	4770      	bx	lr

080267e6 <__swrite>:
 80267e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267ea:	461f      	mov	r7, r3
 80267ec:	898b      	ldrh	r3, [r1, #12]
 80267ee:	05db      	lsls	r3, r3, #23
 80267f0:	4605      	mov	r5, r0
 80267f2:	460c      	mov	r4, r1
 80267f4:	4616      	mov	r6, r2
 80267f6:	d505      	bpl.n	8026804 <__swrite+0x1e>
 80267f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267fc:	2302      	movs	r3, #2
 80267fe:	2200      	movs	r2, #0
 8026800:	f002 fa0a 	bl	8028c18 <_lseek_r>
 8026804:	89a3      	ldrh	r3, [r4, #12]
 8026806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802680a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802680e:	81a3      	strh	r3, [r4, #12]
 8026810:	4632      	mov	r2, r6
 8026812:	463b      	mov	r3, r7
 8026814:	4628      	mov	r0, r5
 8026816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802681a:	f001 b91d 	b.w	8027a58 <_write_r>

0802681e <__sseek>:
 802681e:	b510      	push	{r4, lr}
 8026820:	460c      	mov	r4, r1
 8026822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026826:	f002 f9f7 	bl	8028c18 <_lseek_r>
 802682a:	1c43      	adds	r3, r0, #1
 802682c:	89a3      	ldrh	r3, [r4, #12]
 802682e:	bf15      	itete	ne
 8026830:	6560      	strne	r0, [r4, #84]	; 0x54
 8026832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802683a:	81a3      	strheq	r3, [r4, #12]
 802683c:	bf18      	it	ne
 802683e:	81a3      	strhne	r3, [r4, #12]
 8026840:	bd10      	pop	{r4, pc}

08026842 <__sclose>:
 8026842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026846:	f001 b9f1 	b.w	8027c2c <_close_r>

0802684a <stpcpy>:
 802684a:	4603      	mov	r3, r0
 802684c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026850:	4618      	mov	r0, r3
 8026852:	f803 2b01 	strb.w	r2, [r3], #1
 8026856:	2a00      	cmp	r2, #0
 8026858:	d1f8      	bne.n	802684c <stpcpy+0x2>
 802685a:	4770      	bx	lr

0802685c <strchr>:
 802685c:	b2c9      	uxtb	r1, r1
 802685e:	4603      	mov	r3, r0
 8026860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026864:	b11a      	cbz	r2, 802686e <strchr+0x12>
 8026866:	428a      	cmp	r2, r1
 8026868:	d1f9      	bne.n	802685e <strchr+0x2>
 802686a:	4618      	mov	r0, r3
 802686c:	4770      	bx	lr
 802686e:	2900      	cmp	r1, #0
 8026870:	bf18      	it	ne
 8026872:	2300      	movne	r3, #0
 8026874:	e7f9      	b.n	802686a <strchr+0xe>

08026876 <strcpy>:
 8026876:	4603      	mov	r3, r0
 8026878:	f811 2b01 	ldrb.w	r2, [r1], #1
 802687c:	f803 2b01 	strb.w	r2, [r3], #1
 8026880:	2a00      	cmp	r2, #0
 8026882:	d1f9      	bne.n	8026878 <strcpy+0x2>
 8026884:	4770      	bx	lr
 8026886:	Address 0x0000000008026886 is out of bounds.


08026888 <iso_year_adjust>:
 8026888:	6942      	ldr	r2, [r0, #20]
 802688a:	2a00      	cmp	r2, #0
 802688c:	f240 736c 	movw	r3, #1900	; 0x76c
 8026890:	bfa8      	it	ge
 8026892:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8026896:	4413      	add	r3, r2
 8026898:	0792      	lsls	r2, r2, #30
 802689a:	d105      	bne.n	80268a8 <iso_year_adjust+0x20>
 802689c:	2164      	movs	r1, #100	; 0x64
 802689e:	fb93 f2f1 	sdiv	r2, r3, r1
 80268a2:	fb01 3212 	mls	r2, r1, r2, r3
 80268a6:	b9da      	cbnz	r2, 80268e0 <iso_year_adjust+0x58>
 80268a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80268ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80268b0:	fb02 3311 	mls	r3, r2, r1, r3
 80268b4:	fab3 f383 	clz	r3, r3
 80268b8:	095b      	lsrs	r3, r3, #5
 80268ba:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80268be:	0040      	lsls	r0, r0, #1
 80268c0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80268c4:	4418      	add	r0, r3
 80268c6:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80268ca:	4298      	cmp	r0, r3
 80268cc:	d03a      	beq.n	8026944 <iso_year_adjust+0xbc>
 80268ce:	dc21      	bgt.n	8026914 <iso_year_adjust+0x8c>
 80268d0:	2801      	cmp	r0, #1
 80268d2:	dc1a      	bgt.n	802690a <iso_year_adjust+0x82>
 80268d4:	2800      	cmp	r0, #0
 80268d6:	bfb4      	ite	lt
 80268d8:	2000      	movlt	r0, #0
 80268da:	f04f 30ff 	movge.w	r0, #4294967295
 80268de:	4770      	bx	lr
 80268e0:	2301      	movs	r3, #1
 80268e2:	e7ea      	b.n	80268ba <iso_year_adjust+0x32>
 80268e4:	2817      	cmp	r0, #23
 80268e6:	d813      	bhi.n	8026910 <iso_year_adjust+0x88>
 80268e8:	e8df f000 	tbb	[pc, r0]
 80268ec:	0c0c0c0c 	.word	0x0c0c0c0c
 80268f0:	0c0c1212 	.word	0x0c0c1212
 80268f4:	12121212 	.word	0x12121212
 80268f8:	12121212 	.word	0x12121212
 80268fc:	0c0c1212 	.word	0x0c0c1212
 8026900:	0c0c1212 	.word	0x0c0c1212
 8026904:	f04f 30ff 	mov.w	r0, #4294967295
 8026908:	4770      	bx	lr
 802690a:	380a      	subs	r0, #10
 802690c:	2817      	cmp	r0, #23
 802690e:	d9e9      	bls.n	80268e4 <iso_year_adjust+0x5c>
 8026910:	2000      	movs	r0, #0
 8026912:	4770      	bx	lr
 8026914:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8026918:	4298      	cmp	r0, r3
 802691a:	dc06      	bgt.n	802692a <iso_year_adjust+0xa2>
 802691c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8026920:	4298      	cmp	r0, r3
 8026922:	bfd4      	ite	le
 8026924:	2000      	movle	r0, #0
 8026926:	2001      	movgt	r0, #1
 8026928:	4770      	bx	lr
 802692a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802692e:	3802      	subs	r0, #2
 8026930:	2815      	cmp	r0, #21
 8026932:	d8ed      	bhi.n	8026910 <iso_year_adjust+0x88>
 8026934:	2301      	movs	r3, #1
 8026936:	4083      	lsls	r3, r0
 8026938:	4803      	ldr	r0, [pc, #12]	; (8026948 <iso_year_adjust+0xc0>)
 802693a:	4018      	ands	r0, r3
 802693c:	3800      	subs	r0, #0
 802693e:	bf18      	it	ne
 8026940:	2001      	movne	r0, #1
 8026942:	4770      	bx	lr
 8026944:	2001      	movs	r0, #1
 8026946:	4770      	bx	lr
 8026948:	002a001f 	.word	0x002a001f

0802694c <__strftime.isra.0>:
 802694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026950:	b08f      	sub	sp, #60	; 0x3c
 8026952:	461e      	mov	r6, r3
 8026954:	2300      	movs	r3, #0
 8026956:	4607      	mov	r7, r0
 8026958:	460d      	mov	r5, r1
 802695a:	9302      	str	r3, [sp, #8]
 802695c:	461c      	mov	r4, r3
 802695e:	7813      	ldrb	r3, [r2, #0]
 8026960:	2b00      	cmp	r3, #0
 8026962:	f000 84ba 	beq.w	80272da <__strftime.isra.0+0x98e>
 8026966:	2b25      	cmp	r3, #37	; 0x25
 8026968:	d11f      	bne.n	80269aa <__strftime.isra.0+0x5e>
 802696a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802696e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8026972:	d024      	beq.n	80269be <__strftime.isra.0+0x72>
 8026974:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026978:	d021      	beq.n	80269be <__strftime.isra.0+0x72>
 802697a:	f102 0801 	add.w	r8, r2, #1
 802697e:	f04f 0b00 	mov.w	fp, #0
 8026982:	f898 2000 	ldrb.w	r2, [r8]
 8026986:	3a31      	subs	r2, #49	; 0x31
 8026988:	2a08      	cmp	r2, #8
 802698a:	d81b      	bhi.n	80269c4 <__strftime.isra.0+0x78>
 802698c:	4640      	mov	r0, r8
 802698e:	220a      	movs	r2, #10
 8026990:	a906      	add	r1, sp, #24
 8026992:	f000 fdc9 	bl	8027528 <strtoul>
 8026996:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802699a:	4681      	mov	r9, r0
 802699c:	f898 2000 	ldrb.w	r2, [r8]
 80269a0:	2a45      	cmp	r2, #69	; 0x45
 80269a2:	d112      	bne.n	80269ca <__strftime.isra.0+0x7e>
 80269a4:	f108 0801 	add.w	r8, r8, #1
 80269a8:	e011      	b.n	80269ce <__strftime.isra.0+0x82>
 80269aa:	1e69      	subs	r1, r5, #1
 80269ac:	42a1      	cmp	r1, r4
 80269ae:	d802      	bhi.n	80269b6 <__strftime.isra.0+0x6a>
 80269b0:	2400      	movs	r4, #0
 80269b2:	f000 bc95 	b.w	80272e0 <__strftime.isra.0+0x994>
 80269b6:	553b      	strb	r3, [r7, r4]
 80269b8:	3201      	adds	r2, #1
 80269ba:	3401      	adds	r4, #1
 80269bc:	e7cf      	b.n	802695e <__strftime.isra.0+0x12>
 80269be:	f102 0802 	add.w	r8, r2, #2
 80269c2:	e7de      	b.n	8026982 <__strftime.isra.0+0x36>
 80269c4:	f04f 0900 	mov.w	r9, #0
 80269c8:	e7e8      	b.n	802699c <__strftime.isra.0+0x50>
 80269ca:	2a4f      	cmp	r2, #79	; 0x4f
 80269cc:	d0ea      	beq.n	80269a4 <__strftime.isra.0+0x58>
 80269ce:	f898 0000 	ldrb.w	r0, [r8]
 80269d2:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80269d6:	2a55      	cmp	r2, #85	; 0x55
 80269d8:	d8ea      	bhi.n	80269b0 <__strftime.isra.0+0x64>
 80269da:	a301      	add	r3, pc, #4	; (adr r3, 80269e0 <__strftime.isra.0+0x94>)
 80269dc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80269e0:	080272cf 	.word	0x080272cf
 80269e4:	080269b1 	.word	0x080269b1
 80269e8:	080269b1 	.word	0x080269b1
 80269ec:	080269b1 	.word	0x080269b1
 80269f0:	080269b1 	.word	0x080269b1
 80269f4:	080269b1 	.word	0x080269b1
 80269f8:	080269b1 	.word	0x080269b1
 80269fc:	080269b1 	.word	0x080269b1
 8026a00:	080269b1 	.word	0x080269b1
 8026a04:	080269b1 	.word	0x080269b1
 8026a08:	080269b1 	.word	0x080269b1
 8026a0c:	080269b1 	.word	0x080269b1
 8026a10:	080269b1 	.word	0x080269b1
 8026a14:	080269b1 	.word	0x080269b1
 8026a18:	080269b1 	.word	0x080269b1
 8026a1c:	080269b1 	.word	0x080269b1
 8026a20:	080269b1 	.word	0x080269b1
 8026a24:	080269b1 	.word	0x080269b1
 8026a28:	080269b1 	.word	0x080269b1
 8026a2c:	080269b1 	.word	0x080269b1
 8026a30:	080269b1 	.word	0x080269b1
 8026a34:	080269b1 	.word	0x080269b1
 8026a38:	080269b1 	.word	0x080269b1
 8026a3c:	080269b1 	.word	0x080269b1
 8026a40:	080269b1 	.word	0x080269b1
 8026a44:	080269b1 	.word	0x080269b1
 8026a48:	080269b1 	.word	0x080269b1
 8026a4c:	080269b1 	.word	0x080269b1
 8026a50:	08026b75 	.word	0x08026b75
 8026a54:	08026bcd 	.word	0x08026bcd
 8026a58:	08026c3b 	.word	0x08026c3b
 8026a5c:	08026cd9 	.word	0x08026cd9
 8026a60:	080269b1 	.word	0x080269b1
 8026a64:	08026d25 	.word	0x08026d25
 8026a68:	08026e11 	.word	0x08026e11
 8026a6c:	08026eeb 	.word	0x08026eeb
 8026a70:	08026ef9 	.word	0x08026ef9
 8026a74:	080269b1 	.word	0x080269b1
 8026a78:	080269b1 	.word	0x080269b1
 8026a7c:	080269b1 	.word	0x080269b1
 8026a80:	08026f29 	.word	0x08026f29
 8026a84:	080269b1 	.word	0x080269b1
 8026a88:	080269b1 	.word	0x080269b1
 8026a8c:	08026f3d 	.word	0x08026f3d
 8026a90:	080269b1 	.word	0x080269b1
 8026a94:	08026f8f 	.word	0x08026f8f
 8026a98:	080270a3 	.word	0x080270a3
 8026a9c:	080270b3 	.word	0x080270b3
 8026aa0:	080270db 	.word	0x080270db
 8026aa4:	08027115 	.word	0x08027115
 8026aa8:	08027189 	.word	0x08027189
 8026aac:	08026c33 	.word	0x08026c33
 8026ab0:	080271b5 	.word	0x080271b5
 8026ab4:	0802727d 	.word	0x0802727d
 8026ab8:	080269b1 	.word	0x080269b1
 8026abc:	080269b1 	.word	0x080269b1
 8026ac0:	080269b1 	.word	0x080269b1
 8026ac4:	080269b1 	.word	0x080269b1
 8026ac8:	080269b1 	.word	0x080269b1
 8026acc:	080269b1 	.word	0x080269b1
 8026ad0:	08026b39 	.word	0x08026b39
 8026ad4:	08026ba3 	.word	0x08026ba3
 8026ad8:	08026bf9 	.word	0x08026bf9
 8026adc:	08026cb5 	.word	0x08026cb5
 8026ae0:	08026cb5 	.word	0x08026cb5
 8026ae4:	080269b1 	.word	0x080269b1
 8026ae8:	08026d77 	.word	0x08026d77
 8026aec:	08026ba3 	.word	0x08026ba3
 8026af0:	080269b1 	.word	0x080269b1
 8026af4:	08026f1b 	.word	0x08026f1b
 8026af8:	08026eeb 	.word	0x08026eeb
 8026afc:	08026ef9 	.word	0x08026ef9
 8026b00:	08026f23 	.word	0x08026f23
 8026b04:	08026f2d 	.word	0x08026f2d
 8026b08:	080269b1 	.word	0x080269b1
 8026b0c:	08026f3d 	.word	0x08026f3d
 8026b10:	080269b1 	.word	0x080269b1
 8026b14:	08026c23 	.word	0x08026c23
 8026b18:	08026fa1 	.word	0x08026fa1
 8026b1c:	080270a7 	.word	0x080270a7
 8026b20:	080270c1 	.word	0x080270c1
 8026b24:	080269b1 	.word	0x080269b1
 8026b28:	0802717b 	.word	0x0802717b
 8026b2c:	08026c2b 	.word	0x08026c2b
 8026b30:	08027199 	.word	0x08027199
 8026b34:	08027207 	.word	0x08027207
 8026b38:	69b3      	ldr	r3, [r6, #24]
 8026b3a:	4aa9      	ldr	r2, [pc, #676]	; (8026de0 <__strftime.isra.0+0x494>)
 8026b3c:	3318      	adds	r3, #24
 8026b3e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026b42:	4648      	mov	r0, r9
 8026b44:	f7d9 fb86 	bl	8000254 <strlen>
 8026b48:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b4c:	4420      	add	r0, r4
 8026b4e:	1e6b      	subs	r3, r5, #1
 8026b50:	42a0      	cmp	r0, r4
 8026b52:	d107      	bne.n	8026b64 <__strftime.isra.0+0x218>
 8026b54:	f898 3000 	ldrb.w	r3, [r8]
 8026b58:	2b00      	cmp	r3, #0
 8026b5a:	f000 83be 	beq.w	80272da <__strftime.isra.0+0x98e>
 8026b5e:	f108 0201 	add.w	r2, r8, #1
 8026b62:	e6fc      	b.n	802695e <__strftime.isra.0+0x12>
 8026b64:	42a3      	cmp	r3, r4
 8026b66:	f67f af23 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8026b6a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026b6e:	553a      	strb	r2, [r7, r4]
 8026b70:	3401      	adds	r4, #1
 8026b72:	e7ed      	b.n	8026b50 <__strftime.isra.0+0x204>
 8026b74:	69b2      	ldr	r2, [r6, #24]
 8026b76:	4b9a      	ldr	r3, [pc, #616]	; (8026de0 <__strftime.isra.0+0x494>)
 8026b78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026b7c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8026b80:	4648      	mov	r0, r9
 8026b82:	f7d9 fb67 	bl	8000254 <strlen>
 8026b86:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b8a:	4420      	add	r0, r4
 8026b8c:	1e6b      	subs	r3, r5, #1
 8026b8e:	42a0      	cmp	r0, r4
 8026b90:	d0e0      	beq.n	8026b54 <__strftime.isra.0+0x208>
 8026b92:	42a3      	cmp	r3, r4
 8026b94:	f67f af0c 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8026b98:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026b9c:	553a      	strb	r2, [r7, r4]
 8026b9e:	3401      	adds	r4, #1
 8026ba0:	e7f5      	b.n	8026b8e <__strftime.isra.0+0x242>
 8026ba2:	4b8f      	ldr	r3, [pc, #572]	; (8026de0 <__strftime.isra.0+0x494>)
 8026ba4:	6932      	ldr	r2, [r6, #16]
 8026ba6:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8026baa:	4648      	mov	r0, r9
 8026bac:	f7d9 fb52 	bl	8000254 <strlen>
 8026bb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8026bb4:	4420      	add	r0, r4
 8026bb6:	1e6b      	subs	r3, r5, #1
 8026bb8:	42a0      	cmp	r0, r4
 8026bba:	d0cb      	beq.n	8026b54 <__strftime.isra.0+0x208>
 8026bbc:	42a3      	cmp	r3, r4
 8026bbe:	f67f aef7 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8026bc2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026bc6:	553a      	strb	r2, [r7, r4]
 8026bc8:	3401      	adds	r4, #1
 8026bca:	e7f5      	b.n	8026bb8 <__strftime.isra.0+0x26c>
 8026bcc:	6933      	ldr	r3, [r6, #16]
 8026bce:	4a84      	ldr	r2, [pc, #528]	; (8026de0 <__strftime.isra.0+0x494>)
 8026bd0:	330c      	adds	r3, #12
 8026bd2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026bd6:	4648      	mov	r0, r9
 8026bd8:	f7d9 fb3c 	bl	8000254 <strlen>
 8026bdc:	f109 39ff 	add.w	r9, r9, #4294967295
 8026be0:	4420      	add	r0, r4
 8026be2:	1e6b      	subs	r3, r5, #1
 8026be4:	42a0      	cmp	r0, r4
 8026be6:	d0b5      	beq.n	8026b54 <__strftime.isra.0+0x208>
 8026be8:	42a3      	cmp	r3, r4
 8026bea:	f67f aee1 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8026bee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026bf2:	553a      	strb	r2, [r7, r4]
 8026bf4:	3401      	adds	r4, #1
 8026bf6:	e7f5      	b.n	8026be4 <__strftime.isra.0+0x298>
 8026bf8:	4b79      	ldr	r3, [pc, #484]	; (8026de0 <__strftime.isra.0+0x494>)
 8026bfa:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8026bfe:	4648      	mov	r0, r9
 8026c00:	f7d9 fb28 	bl	8000254 <strlen>
 8026c04:	f899 3000 	ldrb.w	r3, [r9]
 8026c08:	2b00      	cmp	r3, #0
 8026c0a:	d0a3      	beq.n	8026b54 <__strftime.isra.0+0x208>
 8026c0c:	4633      	mov	r3, r6
 8026c0e:	464a      	mov	r2, r9
 8026c10:	1b29      	subs	r1, r5, r4
 8026c12:	1938      	adds	r0, r7, r4
 8026c14:	f7ff fe9a 	bl	802694c <__strftime.isra.0>
 8026c18:	2800      	cmp	r0, #0
 8026c1a:	f77f aec9 	ble.w	80269b0 <__strftime.isra.0+0x64>
 8026c1e:	4404      	add	r4, r0
 8026c20:	e798      	b.n	8026b54 <__strftime.isra.0+0x208>
 8026c22:	4b6f      	ldr	r3, [pc, #444]	; (8026de0 <__strftime.isra.0+0x494>)
 8026c24:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8026c28:	e7e9      	b.n	8026bfe <__strftime.isra.0+0x2b2>
 8026c2a:	4b6d      	ldr	r3, [pc, #436]	; (8026de0 <__strftime.isra.0+0x494>)
 8026c2c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8026c30:	e7e5      	b.n	8026bfe <__strftime.isra.0+0x2b2>
 8026c32:	4b6b      	ldr	r3, [pc, #428]	; (8026de0 <__strftime.isra.0+0x494>)
 8026c34:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8026c38:	e7e1      	b.n	8026bfe <__strftime.isra.0+0x2b2>
 8026c3a:	496a      	ldr	r1, [pc, #424]	; (8026de4 <__strftime.isra.0+0x498>)
 8026c3c:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8026c40:	458a      	cmp	sl, r1
 8026c42:	bfac      	ite	ge
 8026c44:	2100      	movge	r1, #0
 8026c46:	2101      	movlt	r1, #1
 8026c48:	f1ba 0f00 	cmp.w	sl, #0
 8026c4c:	db11      	blt.n	8026c72 <__strftime.isra.0+0x326>
 8026c4e:	2064      	movs	r0, #100	; 0x64
 8026c50:	fb9a f0f0 	sdiv	r0, sl, r0
 8026c54:	3013      	adds	r0, #19
 8026c56:	f1bb 0f00 	cmp.w	fp, #0
 8026c5a:	d014      	beq.n	8026c86 <__strftime.isra.0+0x33a>
 8026c5c:	2863      	cmp	r0, #99	; 0x63
 8026c5e:	dd27      	ble.n	8026cb0 <__strftime.isra.0+0x364>
 8026c60:	4b61      	ldr	r3, [pc, #388]	; (8026de8 <__strftime.isra.0+0x49c>)
 8026c62:	4a62      	ldr	r2, [pc, #392]	; (8026dec <__strftime.isra.0+0x4a0>)
 8026c64:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026c68:	bf18      	it	ne
 8026c6a:	461a      	movne	r2, r3
 8026c6c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8026e08 <__strftime.isra.0+0x4bc>
 8026c70:	e00c      	b.n	8026c8c <__strftime.isra.0+0x340>
 8026c72:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8026c76:	9103      	str	r1, [sp, #12]
 8026c78:	f000 ff6e 	bl	8027b58 <abs>
 8026c7c:	2264      	movs	r2, #100	; 0x64
 8026c7e:	9903      	ldr	r1, [sp, #12]
 8026c80:	fb90 f0f2 	sdiv	r0, r0, r2
 8026c84:	e7e7      	b.n	8026c56 <__strftime.isra.0+0x30a>
 8026c86:	4a58      	ldr	r2, [pc, #352]	; (8026de8 <__strftime.isra.0+0x49c>)
 8026c88:	f8df c180 	ldr.w	ip, [pc, #384]	; 8026e0c <__strftime.isra.0+0x4c0>
 8026c8c:	4b58      	ldr	r3, [pc, #352]	; (8026df0 <__strftime.isra.0+0x4a4>)
 8026c8e:	9001      	str	r0, [sp, #4]
 8026c90:	f1b9 0f02 	cmp.w	r9, #2
 8026c94:	bf2c      	ite	cs
 8026c96:	ebc1 0109 	rsbcs	r1, r1, r9
 8026c9a:	f1c1 0102 	rsbcc	r1, r1, #2
 8026c9e:	9100      	str	r1, [sp, #0]
 8026ca0:	4950      	ldr	r1, [pc, #320]	; (8026de4 <__strftime.isra.0+0x498>)
 8026ca2:	458a      	cmp	sl, r1
 8026ca4:	bfa8      	it	ge
 8026ca6:	4613      	movge	r3, r2
 8026ca8:	4662      	mov	r2, ip
 8026caa:	1b29      	subs	r1, r5, r4
 8026cac:	1938      	adds	r0, r7, r4
 8026cae:	e028      	b.n	8026d02 <__strftime.isra.0+0x3b6>
 8026cb0:	4a4d      	ldr	r2, [pc, #308]	; (8026de8 <__strftime.isra.0+0x49c>)
 8026cb2:	e7db      	b.n	8026c6c <__strftime.isra.0+0x320>
 8026cb4:	494f      	ldr	r1, [pc, #316]	; (8026df4 <__strftime.isra.0+0x4a8>)
 8026cb6:	4a50      	ldr	r2, [pc, #320]	; (8026df8 <__strftime.isra.0+0x4ac>)
 8026cb8:	68f3      	ldr	r3, [r6, #12]
 8026cba:	2864      	cmp	r0, #100	; 0x64
 8026cbc:	bf08      	it	eq
 8026cbe:	460a      	moveq	r2, r1
 8026cc0:	1b29      	subs	r1, r5, r4
 8026cc2:	1938      	adds	r0, r7, r4
 8026cc4:	f7ff fcfc 	bl	80266c0 <sniprintf>
 8026cc8:	2800      	cmp	r0, #0
 8026cca:	f6ff ae71 	blt.w	80269b0 <__strftime.isra.0+0x64>
 8026cce:	4404      	add	r4, r0
 8026cd0:	42a5      	cmp	r5, r4
 8026cd2:	f63f af3f 	bhi.w	8026b54 <__strftime.isra.0+0x208>
 8026cd6:	e66b      	b.n	80269b0 <__strftime.isra.0+0x64>
 8026cd8:	6970      	ldr	r0, [r6, #20]
 8026cda:	6933      	ldr	r3, [r6, #16]
 8026cdc:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8026ce0:	2800      	cmp	r0, #0
 8026ce2:	eb07 0904 	add.w	r9, r7, r4
 8026ce6:	eba5 0104 	sub.w	r1, r5, r4
 8026cea:	f103 0301 	add.w	r3, r3, #1
 8026cee:	db0b      	blt.n	8026d08 <__strftime.isra.0+0x3bc>
 8026cf0:	2264      	movs	r2, #100	; 0x64
 8026cf2:	fb90 fcf2 	sdiv	ip, r0, r2
 8026cf6:	fb02 001c 	mls	r0, r2, ip, r0
 8026cfa:	4a40      	ldr	r2, [pc, #256]	; (8026dfc <__strftime.isra.0+0x4b0>)
 8026cfc:	e9cd a000 	strd	sl, r0, [sp]
 8026d00:	4648      	mov	r0, r9
 8026d02:	f7ff fcdd 	bl	80266c0 <sniprintf>
 8026d06:	e7df      	b.n	8026cc8 <__strftime.isra.0+0x37c>
 8026d08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8026d0c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8026d10:	f000 ff22 	bl	8027b58 <abs>
 8026d14:	2264      	movs	r2, #100	; 0x64
 8026d16:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8026d1a:	fb90 fcf2 	sdiv	ip, r0, r2
 8026d1e:	fb0c 0012 	mls	r0, ip, r2, r0
 8026d22:	e7ea      	b.n	8026cfa <__strftime.isra.0+0x3ae>
 8026d24:	2225      	movs	r2, #37	; 0x25
 8026d26:	f88d 2018 	strb.w	r2, [sp, #24]
 8026d2a:	f1bb 0f00 	cmp.w	fp, #0
 8026d2e:	d011      	beq.n	8026d54 <__strftime.isra.0+0x408>
 8026d30:	f1b9 0f06 	cmp.w	r9, #6
 8026d34:	bf38      	it	cc
 8026d36:	f04f 0906 	movcc.w	r9, #6
 8026d3a:	f1b9 0306 	subs.w	r3, r9, #6
 8026d3e:	f88d b019 	strb.w	fp, [sp, #25]
 8026d42:	d10c      	bne.n	8026d5e <__strftime.isra.0+0x412>
 8026d44:	f10d 001a 	add.w	r0, sp, #26
 8026d48:	492d      	ldr	r1, [pc, #180]	; (8026e00 <__strftime.isra.0+0x4b4>)
 8026d4a:	f7ff fd94 	bl	8026876 <strcpy>
 8026d4e:	4633      	mov	r3, r6
 8026d50:	aa06      	add	r2, sp, #24
 8026d52:	e75d      	b.n	8026c10 <__strftime.isra.0+0x2c4>
 8026d54:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8026d58:	f04f 090a 	mov.w	r9, #10
 8026d5c:	e7ed      	b.n	8026d3a <__strftime.isra.0+0x3ee>
 8026d5e:	4a29      	ldr	r2, [pc, #164]	; (8026e04 <__strftime.isra.0+0x4b8>)
 8026d60:	211e      	movs	r1, #30
 8026d62:	f10d 001a 	add.w	r0, sp, #26
 8026d66:	f7ff fcab 	bl	80266c0 <sniprintf>
 8026d6a:	2800      	cmp	r0, #0
 8026d6c:	ddea      	ble.n	8026d44 <__strftime.isra.0+0x3f8>
 8026d6e:	f10d 031a 	add.w	r3, sp, #26
 8026d72:	4418      	add	r0, r3
 8026d74:	e7e8      	b.n	8026d48 <__strftime.isra.0+0x3fc>
 8026d76:	4630      	mov	r0, r6
 8026d78:	f7ff fd86 	bl	8026888 <iso_year_adjust>
 8026d7c:	4681      	mov	r9, r0
 8026d7e:	6970      	ldr	r0, [r6, #20]
 8026d80:	2800      	cmp	r0, #0
 8026d82:	db11      	blt.n	8026da8 <__strftime.isra.0+0x45c>
 8026d84:	2364      	movs	r3, #100	; 0x64
 8026d86:	fb90 f2f3 	sdiv	r2, r0, r3
 8026d8a:	fb03 0012 	mls	r0, r3, r2, r0
 8026d8e:	2264      	movs	r2, #100	; 0x64
 8026d90:	4481      	add	r9, r0
 8026d92:	fb99 f3f2 	sdiv	r3, r9, r2
 8026d96:	fb02 9913 	mls	r9, r2, r3, r9
 8026d9a:	4491      	add	r9, r2
 8026d9c:	fbb9 f3f2 	udiv	r3, r9, r2
 8026da0:	fb02 9313 	mls	r3, r2, r3, r9
 8026da4:	4a13      	ldr	r2, [pc, #76]	; (8026df4 <__strftime.isra.0+0x4a8>)
 8026da6:	e78b      	b.n	8026cc0 <__strftime.isra.0+0x374>
 8026da8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8026dac:	f000 fed4 	bl	8027b58 <abs>
 8026db0:	2364      	movs	r3, #100	; 0x64
 8026db2:	f1b9 0f00 	cmp.w	r9, #0
 8026db6:	fb90 f2f3 	sdiv	r2, r0, r3
 8026dba:	fb02 0013 	mls	r0, r2, r3, r0
 8026dbe:	da07      	bge.n	8026dd0 <__strftime.isra.0+0x484>
 8026dc0:	6972      	ldr	r2, [r6, #20]
 8026dc2:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8026dc6:	429a      	cmp	r2, r3
 8026dc8:	bfb8      	it	lt
 8026dca:	f04f 0901 	movlt.w	r9, #1
 8026dce:	e7de      	b.n	8026d8e <__strftime.isra.0+0x442>
 8026dd0:	d0dd      	beq.n	8026d8e <__strftime.isra.0+0x442>
 8026dd2:	6972      	ldr	r2, [r6, #20]
 8026dd4:	4b03      	ldr	r3, [pc, #12]	; (8026de4 <__strftime.isra.0+0x498>)
 8026dd6:	429a      	cmp	r2, r3
 8026dd8:	bfb8      	it	lt
 8026dda:	f04f 39ff 	movlt.w	r9, #4294967295
 8026dde:	e7d6      	b.n	8026d8e <__strftime.isra.0+0x442>
 8026de0:	0804755c 	.word	0x0804755c
 8026de4:	fffff894 	.word	0xfffff894
 8026de8:	0804770f 	.word	0x0804770f
 8026dec:	080473e4 	.word	0x080473e4
 8026df0:	0804796e 	.word	0x0804796e
 8026df4:	080473f4 	.word	0x080473f4
 8026df8:	080473e6 	.word	0x080473e6
 8026dfc:	080473ea 	.word	0x080473ea
 8026e00:	080473fd 	.word	0x080473fd
 8026e04:	080473f9 	.word	0x080473f9
 8026e08:	080473dc 	.word	0x080473dc
 8026e0c:	080473d5 	.word	0x080473d5
 8026e10:	6971      	ldr	r1, [r6, #20]
 8026e12:	4ab6      	ldr	r2, [pc, #728]	; (80270ec <__strftime.isra.0+0x7a0>)
 8026e14:	4291      	cmp	r1, r2
 8026e16:	bfac      	ite	ge
 8026e18:	2300      	movge	r3, #0
 8026e1a:	2301      	movlt	r3, #1
 8026e1c:	4630      	mov	r0, r6
 8026e1e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8026e22:	f7ff fd31 	bl	8026888 <iso_year_adjust>
 8026e26:	9904      	ldr	r1, [sp, #16]
 8026e28:	2900      	cmp	r1, #0
 8026e2a:	4682      	mov	sl, r0
 8026e2c:	db2c      	blt.n	8026e88 <__strftime.isra.0+0x53c>
 8026e2e:	2264      	movs	r2, #100	; 0x64
 8026e30:	fb91 f2f2 	sdiv	r2, r1, r2
 8026e34:	3213      	adds	r2, #19
 8026e36:	6970      	ldr	r0, [r6, #20]
 8026e38:	2800      	cmp	r0, #0
 8026e3a:	db30      	blt.n	8026e9e <__strftime.isra.0+0x552>
 8026e3c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8026e40:	fb90 fefc 	sdiv	lr, r0, ip
 8026e44:	fb0c 001e 	mls	r0, ip, lr, r0
 8026e48:	f1ba 0f00 	cmp.w	sl, #0
 8026e4c:	da36      	bge.n	8026ebc <__strftime.isra.0+0x570>
 8026e4e:	6971      	ldr	r1, [r6, #20]
 8026e50:	4ba7      	ldr	r3, [pc, #668]	; (80270f0 <__strftime.isra.0+0x7a4>)
 8026e52:	4299      	cmp	r1, r3
 8026e54:	db3d      	blt.n	8026ed2 <__strftime.isra.0+0x586>
 8026e56:	4482      	add	sl, r0
 8026e58:	f1ba 3fff 	cmp.w	sl, #4294967295
 8026e5c:	d13e      	bne.n	8026edc <__strftime.isra.0+0x590>
 8026e5e:	3a01      	subs	r2, #1
 8026e60:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8026e64:	9b03      	ldr	r3, [sp, #12]
 8026e66:	2064      	movs	r0, #100	; 0x64
 8026e68:	fb00 aa02 	mla	sl, r0, r2, sl
 8026e6c:	2b00      	cmp	r3, #0
 8026e6e:	f000 81ad 	beq.w	80271cc <__strftime.isra.0+0x880>
 8026e72:	222d      	movs	r2, #45	; 0x2d
 8026e74:	f88d 2018 	strb.w	r2, [sp, #24]
 8026e78:	f1b9 0f00 	cmp.w	r9, #0
 8026e7c:	d001      	beq.n	8026e82 <__strftime.isra.0+0x536>
 8026e7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8026e82:	f10d 0219 	add.w	r2, sp, #25
 8026e86:	e1ac      	b.n	80271e2 <__strftime.isra.0+0x896>
 8026e88:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8026e8c:	9104      	str	r1, [sp, #16]
 8026e8e:	f000 fe63 	bl	8027b58 <abs>
 8026e92:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8026e96:	9904      	ldr	r1, [sp, #16]
 8026e98:	fb90 f2fc 	sdiv	r2, r0, ip
 8026e9c:	e7cb      	b.n	8026e36 <__strftime.isra.0+0x4ea>
 8026e9e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8026ea2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8026ea6:	f000 fe57 	bl	8027b58 <abs>
 8026eaa:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8026eae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8026eb2:	fb90 fefc 	sdiv	lr, r0, ip
 8026eb6:	fb0e 001c 	mls	r0, lr, ip, r0
 8026eba:	e7c5      	b.n	8026e48 <__strftime.isra.0+0x4fc>
 8026ebc:	d0cb      	beq.n	8026e56 <__strftime.isra.0+0x50a>
 8026ebe:	4b8b      	ldr	r3, [pc, #556]	; (80270ec <__strftime.isra.0+0x7a0>)
 8026ec0:	4299      	cmp	r1, r3
 8026ec2:	bfb4      	ite	lt
 8026ec4:	2301      	movlt	r3, #1
 8026ec6:	2300      	movge	r3, #0
 8026ec8:	9303      	str	r3, [sp, #12]
 8026eca:	bfb8      	it	lt
 8026ecc:	f04f 3aff 	movlt.w	sl, #4294967295
 8026ed0:	e7c1      	b.n	8026e56 <__strftime.isra.0+0x50a>
 8026ed2:	f04f 0a01 	mov.w	sl, #1
 8026ed6:	f8cd a00c 	str.w	sl, [sp, #12]
 8026eda:	e7bc      	b.n	8026e56 <__strftime.isra.0+0x50a>
 8026edc:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8026ee0:	bf04      	itt	eq
 8026ee2:	3201      	addeq	r2, #1
 8026ee4:	f04f 0a00 	moveq.w	sl, #0
 8026ee8:	e7bc      	b.n	8026e64 <__strftime.isra.0+0x518>
 8026eea:	4982      	ldr	r1, [pc, #520]	; (80270f4 <__strftime.isra.0+0x7a8>)
 8026eec:	4a82      	ldr	r2, [pc, #520]	; (80270f8 <__strftime.isra.0+0x7ac>)
 8026eee:	68b3      	ldr	r3, [r6, #8]
 8026ef0:	286b      	cmp	r0, #107	; 0x6b
 8026ef2:	bf08      	it	eq
 8026ef4:	460a      	moveq	r2, r1
 8026ef6:	e6e3      	b.n	8026cc0 <__strftime.isra.0+0x374>
 8026ef8:	68b3      	ldr	r3, [r6, #8]
 8026efa:	b163      	cbz	r3, 8026f16 <__strftime.isra.0+0x5ca>
 8026efc:	2b0c      	cmp	r3, #12
 8026efe:	d004      	beq.n	8026f0a <__strftime.isra.0+0x5be>
 8026f00:	210c      	movs	r1, #12
 8026f02:	fb93 f2f1 	sdiv	r2, r3, r1
 8026f06:	fb01 3312 	mls	r3, r1, r2, r3
 8026f0a:	497b      	ldr	r1, [pc, #492]	; (80270f8 <__strftime.isra.0+0x7ac>)
 8026f0c:	4a79      	ldr	r2, [pc, #484]	; (80270f4 <__strftime.isra.0+0x7a8>)
 8026f0e:	2849      	cmp	r0, #73	; 0x49
 8026f10:	bf08      	it	eq
 8026f12:	460a      	moveq	r2, r1
 8026f14:	e6d4      	b.n	8026cc0 <__strftime.isra.0+0x374>
 8026f16:	230c      	movs	r3, #12
 8026f18:	e7f7      	b.n	8026f0a <__strftime.isra.0+0x5be>
 8026f1a:	69f3      	ldr	r3, [r6, #28]
 8026f1c:	4a77      	ldr	r2, [pc, #476]	; (80270fc <__strftime.isra.0+0x7b0>)
 8026f1e:	3301      	adds	r3, #1
 8026f20:	e6ce      	b.n	8026cc0 <__strftime.isra.0+0x374>
 8026f22:	6933      	ldr	r3, [r6, #16]
 8026f24:	3301      	adds	r3, #1
 8026f26:	e73d      	b.n	8026da4 <__strftime.isra.0+0x458>
 8026f28:	6873      	ldr	r3, [r6, #4]
 8026f2a:	e73b      	b.n	8026da4 <__strftime.isra.0+0x458>
 8026f2c:	1e6b      	subs	r3, r5, #1
 8026f2e:	429c      	cmp	r4, r3
 8026f30:	f4bf ad3e 	bcs.w	80269b0 <__strftime.isra.0+0x64>
 8026f34:	230a      	movs	r3, #10
 8026f36:	553b      	strb	r3, [r7, r4]
 8026f38:	3401      	adds	r4, #1
 8026f3a:	e60b      	b.n	8026b54 <__strftime.isra.0+0x208>
 8026f3c:	68b3      	ldr	r3, [r6, #8]
 8026f3e:	2b0b      	cmp	r3, #11
 8026f40:	4b6f      	ldr	r3, [pc, #444]	; (8027100 <__strftime.isra.0+0x7b4>)
 8026f42:	bfd4      	ite	le
 8026f44:	2200      	movle	r2, #0
 8026f46:	2201      	movgt	r2, #1
 8026f48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026f4c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8026f50:	4648      	mov	r0, r9
 8026f52:	f7d9 f97f 	bl	8000254 <strlen>
 8026f56:	f109 32ff 	add.w	r2, r9, #4294967295
 8026f5a:	4420      	add	r0, r4
 8026f5c:	f105 3cff 	add.w	ip, r5, #4294967295
 8026f60:	42a0      	cmp	r0, r4
 8026f62:	f43f adf7 	beq.w	8026b54 <__strftime.isra.0+0x208>
 8026f66:	45a4      	cmp	ip, r4
 8026f68:	f67f ad22 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8026f6c:	f898 1000 	ldrb.w	r1, [r8]
 8026f70:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8026f74:	2950      	cmp	r1, #80	; 0x50
 8026f76:	d107      	bne.n	8026f88 <__strftime.isra.0+0x63c>
 8026f78:	4962      	ldr	r1, [pc, #392]	; (8027104 <__strftime.isra.0+0x7b8>)
 8026f7a:	5cc9      	ldrb	r1, [r1, r3]
 8026f7c:	f001 0103 	and.w	r1, r1, #3
 8026f80:	2901      	cmp	r1, #1
 8026f82:	bf08      	it	eq
 8026f84:	3320      	addeq	r3, #32
 8026f86:	b2db      	uxtb	r3, r3
 8026f88:	553b      	strb	r3, [r7, r4]
 8026f8a:	3401      	adds	r4, #1
 8026f8c:	e7e8      	b.n	8026f60 <__strftime.isra.0+0x614>
 8026f8e:	6873      	ldr	r3, [r6, #4]
 8026f90:	9300      	str	r3, [sp, #0]
 8026f92:	4a5d      	ldr	r2, [pc, #372]	; (8027108 <__strftime.isra.0+0x7bc>)
 8026f94:	68b3      	ldr	r3, [r6, #8]
 8026f96:	1b29      	subs	r1, r5, r4
 8026f98:	1938      	adds	r0, r7, r4
 8026f9a:	f7ff fb91 	bl	80266c0 <sniprintf>
 8026f9e:	e693      	b.n	8026cc8 <__strftime.isra.0+0x37c>
 8026fa0:	6a33      	ldr	r3, [r6, #32]
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	db7a      	blt.n	802709c <__strftime.isra.0+0x750>
 8026fa6:	f000 fb73 	bl	8027690 <__tz_lock>
 8026faa:	9b02      	ldr	r3, [sp, #8]
 8026fac:	b90b      	cbnz	r3, 8026fb2 <__strftime.isra.0+0x666>
 8026fae:	f000 fb7b 	bl	80276a8 <_tzset_unlocked>
 8026fb2:	f001 fd79 	bl	8028aa8 <__gettzinfo>
 8026fb6:	6a33      	ldr	r3, [r6, #32]
 8026fb8:	2b00      	cmp	r3, #0
 8026fba:	bfd4      	ite	le
 8026fbc:	2200      	movle	r2, #0
 8026fbe:	2201      	movgt	r2, #1
 8026fc0:	2328      	movs	r3, #40	; 0x28
 8026fc2:	fb02 3303 	mla	r3, r2, r3, r3
 8026fc6:	58c3      	ldr	r3, [r0, r3]
 8026fc8:	f1c3 0900 	rsb	r9, r3, #0
 8026fcc:	f000 fb66 	bl	802769c <__tz_unlock>
 8026fd0:	2301      	movs	r3, #1
 8026fd2:	9302      	str	r3, [sp, #8]
 8026fd4:	6972      	ldr	r2, [r6, #20]
 8026fd6:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8026fda:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8026fde:	f16c 0c00 	sbc.w	ip, ip, #0
 8026fe2:	f1bc 0f00 	cmp.w	ip, #0
 8026fe6:	eba5 0104 	sub.w	r1, r5, r4
 8026fea:	eb07 0004 	add.w	r0, r7, r4
 8026fee:	da02      	bge.n	8026ff6 <__strftime.isra.0+0x6aa>
 8026ff0:	3303      	adds	r3, #3
 8026ff2:	f14c 0c00 	adc.w	ip, ip, #0
 8026ff6:	089b      	lsrs	r3, r3, #2
 8026ff8:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8026ffc:	f102 3aff 	add.w	sl, r2, #4294967295
 8027000:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8027004:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8027008:	fb9a fefe 	sdiv	lr, sl, lr
 802700c:	ebb3 030e 	subs.w	r3, r3, lr
 8027010:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8027014:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8027018:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 802701c:	fb9a fefe 	sdiv	lr, sl, lr
 8027020:	eb13 030e 	adds.w	r3, r3, lr
 8027024:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8027028:	3a46      	subs	r2, #70	; 0x46
 802702a:	f240 1c6d 	movw	ip, #365	; 0x16d
 802702e:	fb0c f202 	mul.w	r2, ip, r2
 8027032:	189b      	adds	r3, r3, r2
 8027034:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8027038:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 802703c:	f04f 0c18 	mov.w	ip, #24
 8027040:	eb13 030e 	adds.w	r3, r3, lr
 8027044:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027048:	fba3 3e0c 	umull	r3, lr, r3, ip
 802704c:	fb0c e202 	mla	r2, ip, r2, lr
 8027050:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8027054:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8027058:	eb13 030e 	adds.w	r3, r3, lr
 802705c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8027060:	fba3 320c 	umull	r3, r2, r3, ip
 8027064:	fb0c 220e 	mla	r2, ip, lr, r2
 8027068:	f8d6 e004 	ldr.w	lr, [r6, #4]
 802706c:	eb13 030e 	adds.w	r3, r3, lr
 8027070:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027074:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027078:	fb0c e202 	mla	r2, ip, r2, lr
 802707c:	f8d6 e000 	ldr.w	lr, [r6]
 8027080:	eb13 030e 	adds.w	r3, r3, lr
 8027084:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027088:	ebb3 0309 	subs.w	r3, r3, r9
 802708c:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8027090:	e9cd 3200 	strd	r3, r2, [sp]
 8027094:	4a1d      	ldr	r2, [pc, #116]	; (802710c <__strftime.isra.0+0x7c0>)
 8027096:	f7ff fb13 	bl	80266c0 <sniprintf>
 802709a:	e615      	b.n	8026cc8 <__strftime.isra.0+0x37c>
 802709c:	f04f 0900 	mov.w	r9, #0
 80270a0:	e798      	b.n	8026fd4 <__strftime.isra.0+0x688>
 80270a2:	6833      	ldr	r3, [r6, #0]
 80270a4:	e67e      	b.n	8026da4 <__strftime.isra.0+0x458>
 80270a6:	1e6b      	subs	r3, r5, #1
 80270a8:	429c      	cmp	r4, r3
 80270aa:	f4bf ac81 	bcs.w	80269b0 <__strftime.isra.0+0x64>
 80270ae:	2309      	movs	r3, #9
 80270b0:	e741      	b.n	8026f36 <__strftime.isra.0+0x5ea>
 80270b2:	6833      	ldr	r3, [r6, #0]
 80270b4:	9301      	str	r3, [sp, #4]
 80270b6:	6873      	ldr	r3, [r6, #4]
 80270b8:	9300      	str	r3, [sp, #0]
 80270ba:	4a15      	ldr	r2, [pc, #84]	; (8027110 <__strftime.isra.0+0x7c4>)
 80270bc:	68b3      	ldr	r3, [r6, #8]
 80270be:	e5f4      	b.n	8026caa <__strftime.isra.0+0x35e>
 80270c0:	1e6b      	subs	r3, r5, #1
 80270c2:	429c      	cmp	r4, r3
 80270c4:	f4bf ac74 	bcs.w	80269b0 <__strftime.isra.0+0x64>
 80270c8:	69b3      	ldr	r3, [r6, #24]
 80270ca:	1c62      	adds	r2, r4, #1
 80270cc:	b91b      	cbnz	r3, 80270d6 <__strftime.isra.0+0x78a>
 80270ce:	2337      	movs	r3, #55	; 0x37
 80270d0:	553b      	strb	r3, [r7, r4]
 80270d2:	4614      	mov	r4, r2
 80270d4:	e53e      	b.n	8026b54 <__strftime.isra.0+0x208>
 80270d6:	3330      	adds	r3, #48	; 0x30
 80270d8:	e7fa      	b.n	80270d0 <__strftime.isra.0+0x784>
 80270da:	69f3      	ldr	r3, [r6, #28]
 80270dc:	69b2      	ldr	r2, [r6, #24]
 80270de:	3307      	adds	r3, #7
 80270e0:	1a9b      	subs	r3, r3, r2
 80270e2:	2207      	movs	r2, #7
 80270e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80270e8:	e65c      	b.n	8026da4 <__strftime.isra.0+0x458>
 80270ea:	bf00      	nop
 80270ec:	fffff894 	.word	0xfffff894
 80270f0:	fffff895 	.word	0xfffff895
 80270f4:	080473e6 	.word	0x080473e6
 80270f8:	080473f4 	.word	0x080473f4
 80270fc:	08047409 	.word	0x08047409
 8027100:	0804755c 	.word	0x0804755c
 8027104:	080470ad 	.word	0x080470ad
 8027108:	08047418 	.word	0x08047418
 802710c:	0804740e 	.word	0x0804740e
 8027110:	08047413 	.word	0x08047413
 8027114:	4630      	mov	r0, r6
 8027116:	f7ff fbb7 	bl	8026888 <iso_year_adjust>
 802711a:	69b2      	ldr	r2, [r6, #24]
 802711c:	b132      	cbz	r2, 802712c <__strftime.isra.0+0x7e0>
 802711e:	3a01      	subs	r2, #1
 8027120:	2800      	cmp	r0, #0
 8027122:	dc28      	bgt.n	8027176 <__strftime.isra.0+0x82a>
 8027124:	69f3      	ldr	r3, [r6, #28]
 8027126:	d103      	bne.n	8027130 <__strftime.isra.0+0x7e4>
 8027128:	330a      	adds	r3, #10
 802712a:	e7d9      	b.n	80270e0 <__strftime.isra.0+0x794>
 802712c:	2206      	movs	r2, #6
 802712e:	e7f7      	b.n	8027120 <__strftime.isra.0+0x7d4>
 8027130:	6971      	ldr	r1, [r6, #20]
 8027132:	2900      	cmp	r1, #0
 8027134:	eba2 0203 	sub.w	r2, r2, r3
 8027138:	f240 736b 	movw	r3, #1899	; 0x76b
 802713c:	bfa8      	it	ge
 802713e:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8027142:	440b      	add	r3, r1
 8027144:	0799      	lsls	r1, r3, #30
 8027146:	d105      	bne.n	8027154 <__strftime.isra.0+0x808>
 8027148:	2064      	movs	r0, #100	; 0x64
 802714a:	fb93 f1f0 	sdiv	r1, r3, r0
 802714e:	fb00 3111 	mls	r1, r0, r1, r3
 8027152:	b971      	cbnz	r1, 8027172 <__strftime.isra.0+0x826>
 8027154:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8027158:	fb93 f0f1 	sdiv	r0, r3, r1
 802715c:	fb01 3310 	mls	r3, r1, r0, r3
 8027160:	fab3 f383 	clz	r3, r3
 8027164:	095b      	lsrs	r3, r3, #5
 8027166:	1ad3      	subs	r3, r2, r3
 8027168:	2b05      	cmp	r3, #5
 802716a:	bfb4      	ite	lt
 802716c:	2335      	movlt	r3, #53	; 0x35
 802716e:	2334      	movge	r3, #52	; 0x34
 8027170:	e618      	b.n	8026da4 <__strftime.isra.0+0x458>
 8027172:	2301      	movs	r3, #1
 8027174:	e7f7      	b.n	8027166 <__strftime.isra.0+0x81a>
 8027176:	2301      	movs	r3, #1
 8027178:	e614      	b.n	8026da4 <__strftime.isra.0+0x458>
 802717a:	1e6b      	subs	r3, r5, #1
 802717c:	429c      	cmp	r4, r3
 802717e:	f4bf ac17 	bcs.w	80269b0 <__strftime.isra.0+0x64>
 8027182:	69b3      	ldr	r3, [r6, #24]
 8027184:	3330      	adds	r3, #48	; 0x30
 8027186:	e6d6      	b.n	8026f36 <__strftime.isra.0+0x5ea>
 8027188:	69b2      	ldr	r2, [r6, #24]
 802718a:	b11a      	cbz	r2, 8027194 <__strftime.isra.0+0x848>
 802718c:	3a01      	subs	r2, #1
 802718e:	69f3      	ldr	r3, [r6, #28]
 8027190:	3307      	adds	r3, #7
 8027192:	e7a5      	b.n	80270e0 <__strftime.isra.0+0x794>
 8027194:	2206      	movs	r2, #6
 8027196:	e7fa      	b.n	802718e <__strftime.isra.0+0x842>
 8027198:	6970      	ldr	r0, [r6, #20]
 802719a:	2800      	cmp	r0, #0
 802719c:	db05      	blt.n	80271aa <__strftime.isra.0+0x85e>
 802719e:	2364      	movs	r3, #100	; 0x64
 80271a0:	fb90 f2f3 	sdiv	r2, r0, r3
 80271a4:	fb02 0313 	mls	r3, r2, r3, r0
 80271a8:	e5fc      	b.n	8026da4 <__strftime.isra.0+0x458>
 80271aa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80271ae:	f000 fcd3 	bl	8027b58 <abs>
 80271b2:	e7f4      	b.n	802719e <__strftime.isra.0+0x852>
 80271b4:	6972      	ldr	r2, [r6, #20]
 80271b6:	494c      	ldr	r1, [pc, #304]	; (80272e8 <__strftime.isra.0+0x99c>)
 80271b8:	428a      	cmp	r2, r1
 80271ba:	da05      	bge.n	80271c8 <__strftime.isra.0+0x87c>
 80271bc:	202d      	movs	r0, #45	; 0x2d
 80271be:	f88d 0018 	strb.w	r0, [sp, #24]
 80271c2:	eba1 0a02 	sub.w	sl, r1, r2
 80271c6:	e657      	b.n	8026e78 <__strftime.isra.0+0x52c>
 80271c8:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 80271cc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80271d0:	d106      	bne.n	80271e0 <__strftime.isra.0+0x894>
 80271d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80271d6:	4592      	cmp	sl, r2
 80271d8:	d902      	bls.n	80271e0 <__strftime.isra.0+0x894>
 80271da:	f88d b018 	strb.w	fp, [sp, #24]
 80271de:	e64b      	b.n	8026e78 <__strftime.isra.0+0x52c>
 80271e0:	aa06      	add	r2, sp, #24
 80271e2:	2125      	movs	r1, #37	; 0x25
 80271e4:	7011      	strb	r1, [r2, #0]
 80271e6:	f1bb 0f00 	cmp.w	fp, #0
 80271ea:	d108      	bne.n	80271fe <__strftime.isra.0+0x8b2>
 80271ec:	1c50      	adds	r0, r2, #1
 80271ee:	493f      	ldr	r1, [pc, #252]	; (80272ec <__strftime.isra.0+0x9a0>)
 80271f0:	f7ff fb41 	bl	8026876 <strcpy>
 80271f4:	f8cd a000 	str.w	sl, [sp]
 80271f8:	464b      	mov	r3, r9
 80271fa:	aa06      	add	r2, sp, #24
 80271fc:	e6cb      	b.n	8026f96 <__strftime.isra.0+0x64a>
 80271fe:	2330      	movs	r3, #48	; 0x30
 8027200:	1c90      	adds	r0, r2, #2
 8027202:	7053      	strb	r3, [r2, #1]
 8027204:	e7f3      	b.n	80271ee <__strftime.isra.0+0x8a2>
 8027206:	6a33      	ldr	r3, [r6, #32]
 8027208:	2b00      	cmp	r3, #0
 802720a:	f6ff aca3 	blt.w	8026b54 <__strftime.isra.0+0x208>
 802720e:	f000 fa3f 	bl	8027690 <__tz_lock>
 8027212:	9b02      	ldr	r3, [sp, #8]
 8027214:	b90b      	cbnz	r3, 802721a <__strftime.isra.0+0x8ce>
 8027216:	f000 fa47 	bl	80276a8 <_tzset_unlocked>
 802721a:	f001 fc45 	bl	8028aa8 <__gettzinfo>
 802721e:	6a33      	ldr	r3, [r6, #32]
 8027220:	2b00      	cmp	r3, #0
 8027222:	bfd4      	ite	le
 8027224:	2200      	movle	r2, #0
 8027226:	2201      	movgt	r2, #1
 8027228:	2328      	movs	r3, #40	; 0x28
 802722a:	fb02 3303 	mla	r3, r2, r3, r3
 802722e:	eb07 0a04 	add.w	sl, r7, r4
 8027232:	58c3      	ldr	r3, [r0, r3]
 8027234:	f1c3 0900 	rsb	r9, r3, #0
 8027238:	f000 fa30 	bl	802769c <__tz_unlock>
 802723c:	233c      	movs	r3, #60	; 0x3c
 802723e:	fb99 f0f3 	sdiv	r0, r9, r3
 8027242:	f001 fce1 	bl	8028c08 <labs>
 8027246:	233c      	movs	r3, #60	; 0x3c
 8027248:	eba5 0b04 	sub.w	fp, r5, r4
 802724c:	fb90 f2f3 	sdiv	r2, r0, r3
 8027250:	fb02 0013 	mls	r0, r2, r3, r0
 8027254:	9000      	str	r0, [sp, #0]
 8027256:	4a26      	ldr	r2, [pc, #152]	; (80272f0 <__strftime.isra.0+0x9a4>)
 8027258:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802725c:	4659      	mov	r1, fp
 802725e:	4650      	mov	r0, sl
 8027260:	fb99 f3f3 	sdiv	r3, r9, r3
 8027264:	f7ff fa2c 	bl	80266c0 <sniprintf>
 8027268:	2800      	cmp	r0, #0
 802726a:	f6ff aba1 	blt.w	80269b0 <__strftime.isra.0+0x64>
 802726e:	4404      	add	r4, r0
 8027270:	42a5      	cmp	r5, r4
 8027272:	f67f ab9d 	bls.w	80269b0 <__strftime.isra.0+0x64>
 8027276:	2301      	movs	r3, #1
 8027278:	9302      	str	r3, [sp, #8]
 802727a:	e46b      	b.n	8026b54 <__strftime.isra.0+0x208>
 802727c:	6a33      	ldr	r3, [r6, #32]
 802727e:	2b00      	cmp	r3, #0
 8027280:	f6ff ac68 	blt.w	8026b54 <__strftime.isra.0+0x208>
 8027284:	f000 fa04 	bl	8027690 <__tz_lock>
 8027288:	9b02      	ldr	r3, [sp, #8]
 802728a:	b90b      	cbnz	r3, 8027290 <__strftime.isra.0+0x944>
 802728c:	f000 fa0c 	bl	80276a8 <_tzset_unlocked>
 8027290:	6a33      	ldr	r3, [r6, #32]
 8027292:	4a18      	ldr	r2, [pc, #96]	; (80272f4 <__strftime.isra.0+0x9a8>)
 8027294:	2b00      	cmp	r3, #0
 8027296:	bfd4      	ite	le
 8027298:	2300      	movle	r3, #0
 802729a:	2301      	movgt	r3, #1
 802729c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80272a0:	4648      	mov	r0, r9
 80272a2:	f7d8 ffd7 	bl	8000254 <strlen>
 80272a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80272aa:	4420      	add	r0, r4
 80272ac:	1e6b      	subs	r3, r5, #1
 80272ae:	42a0      	cmp	r0, r4
 80272b0:	d102      	bne.n	80272b8 <__strftime.isra.0+0x96c>
 80272b2:	f000 f9f3 	bl	802769c <__tz_unlock>
 80272b6:	e7de      	b.n	8027276 <__strftime.isra.0+0x92a>
 80272b8:	42a3      	cmp	r3, r4
 80272ba:	d904      	bls.n	80272c6 <__strftime.isra.0+0x97a>
 80272bc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80272c0:	553a      	strb	r2, [r7, r4]
 80272c2:	3401      	adds	r4, #1
 80272c4:	e7f3      	b.n	80272ae <__strftime.isra.0+0x962>
 80272c6:	f000 f9e9 	bl	802769c <__tz_unlock>
 80272ca:	f7ff bb71 	b.w	80269b0 <__strftime.isra.0+0x64>
 80272ce:	1e6b      	subs	r3, r5, #1
 80272d0:	429c      	cmp	r4, r3
 80272d2:	f4bf ab6d 	bcs.w	80269b0 <__strftime.isra.0+0x64>
 80272d6:	2325      	movs	r3, #37	; 0x25
 80272d8:	e62d      	b.n	8026f36 <__strftime.isra.0+0x5ea>
 80272da:	b10d      	cbz	r5, 80272e0 <__strftime.isra.0+0x994>
 80272dc:	2300      	movs	r3, #0
 80272de:	553b      	strb	r3, [r7, r4]
 80272e0:	4620      	mov	r0, r4
 80272e2:	b00f      	add	sp, #60	; 0x3c
 80272e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272e8:	fffff894 	.word	0xfffff894
 80272ec:	08047405 	.word	0x08047405
 80272f0:	08047422 	.word	0x08047422
 80272f4:	20000508 	.word	0x20000508

080272f8 <strftime>:
 80272f8:	f7ff bb28 	b.w	802694c <__strftime.isra.0>

080272fc <strncmp>:
 80272fc:	b510      	push	{r4, lr}
 80272fe:	b17a      	cbz	r2, 8027320 <strncmp+0x24>
 8027300:	4603      	mov	r3, r0
 8027302:	3901      	subs	r1, #1
 8027304:	1884      	adds	r4, r0, r2
 8027306:	f813 0b01 	ldrb.w	r0, [r3], #1
 802730a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802730e:	4290      	cmp	r0, r2
 8027310:	d101      	bne.n	8027316 <strncmp+0x1a>
 8027312:	42a3      	cmp	r3, r4
 8027314:	d101      	bne.n	802731a <strncmp+0x1e>
 8027316:	1a80      	subs	r0, r0, r2
 8027318:	bd10      	pop	{r4, pc}
 802731a:	2800      	cmp	r0, #0
 802731c:	d1f3      	bne.n	8027306 <strncmp+0xa>
 802731e:	e7fa      	b.n	8027316 <strncmp+0x1a>
 8027320:	4610      	mov	r0, r2
 8027322:	e7f9      	b.n	8027318 <strncmp+0x1c>

08027324 <_strtol_l.constprop.0>:
 8027324:	2b01      	cmp	r3, #1
 8027326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802732a:	d001      	beq.n	8027330 <_strtol_l.constprop.0+0xc>
 802732c:	2b24      	cmp	r3, #36	; 0x24
 802732e:	d906      	bls.n	802733e <_strtol_l.constprop.0+0x1a>
 8027330:	f001 fa9c 	bl	802886c <__errno>
 8027334:	2316      	movs	r3, #22
 8027336:	6003      	str	r3, [r0, #0]
 8027338:	2000      	movs	r0, #0
 802733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802733e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8027424 <_strtol_l.constprop.0+0x100>
 8027342:	460d      	mov	r5, r1
 8027344:	462e      	mov	r6, r5
 8027346:	f815 4b01 	ldrb.w	r4, [r5], #1
 802734a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802734e:	f017 0708 	ands.w	r7, r7, #8
 8027352:	d1f7      	bne.n	8027344 <_strtol_l.constprop.0+0x20>
 8027354:	2c2d      	cmp	r4, #45	; 0x2d
 8027356:	d132      	bne.n	80273be <_strtol_l.constprop.0+0x9a>
 8027358:	782c      	ldrb	r4, [r5, #0]
 802735a:	2701      	movs	r7, #1
 802735c:	1cb5      	adds	r5, r6, #2
 802735e:	2b00      	cmp	r3, #0
 8027360:	d05b      	beq.n	802741a <_strtol_l.constprop.0+0xf6>
 8027362:	2b10      	cmp	r3, #16
 8027364:	d109      	bne.n	802737a <_strtol_l.constprop.0+0x56>
 8027366:	2c30      	cmp	r4, #48	; 0x30
 8027368:	d107      	bne.n	802737a <_strtol_l.constprop.0+0x56>
 802736a:	782c      	ldrb	r4, [r5, #0]
 802736c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8027370:	2c58      	cmp	r4, #88	; 0x58
 8027372:	d14d      	bne.n	8027410 <_strtol_l.constprop.0+0xec>
 8027374:	786c      	ldrb	r4, [r5, #1]
 8027376:	2310      	movs	r3, #16
 8027378:	3502      	adds	r5, #2
 802737a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802737e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027382:	f04f 0c00 	mov.w	ip, #0
 8027386:	fbb8 f9f3 	udiv	r9, r8, r3
 802738a:	4666      	mov	r6, ip
 802738c:	fb03 8a19 	mls	sl, r3, r9, r8
 8027390:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8027394:	f1be 0f09 	cmp.w	lr, #9
 8027398:	d816      	bhi.n	80273c8 <_strtol_l.constprop.0+0xa4>
 802739a:	4674      	mov	r4, lr
 802739c:	42a3      	cmp	r3, r4
 802739e:	dd24      	ble.n	80273ea <_strtol_l.constprop.0+0xc6>
 80273a0:	f1bc 0f00 	cmp.w	ip, #0
 80273a4:	db1e      	blt.n	80273e4 <_strtol_l.constprop.0+0xc0>
 80273a6:	45b1      	cmp	r9, r6
 80273a8:	d31c      	bcc.n	80273e4 <_strtol_l.constprop.0+0xc0>
 80273aa:	d101      	bne.n	80273b0 <_strtol_l.constprop.0+0x8c>
 80273ac:	45a2      	cmp	sl, r4
 80273ae:	db19      	blt.n	80273e4 <_strtol_l.constprop.0+0xc0>
 80273b0:	fb06 4603 	mla	r6, r6, r3, r4
 80273b4:	f04f 0c01 	mov.w	ip, #1
 80273b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80273bc:	e7e8      	b.n	8027390 <_strtol_l.constprop.0+0x6c>
 80273be:	2c2b      	cmp	r4, #43	; 0x2b
 80273c0:	bf04      	itt	eq
 80273c2:	782c      	ldrbeq	r4, [r5, #0]
 80273c4:	1cb5      	addeq	r5, r6, #2
 80273c6:	e7ca      	b.n	802735e <_strtol_l.constprop.0+0x3a>
 80273c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80273cc:	f1be 0f19 	cmp.w	lr, #25
 80273d0:	d801      	bhi.n	80273d6 <_strtol_l.constprop.0+0xb2>
 80273d2:	3c37      	subs	r4, #55	; 0x37
 80273d4:	e7e2      	b.n	802739c <_strtol_l.constprop.0+0x78>
 80273d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80273da:	f1be 0f19 	cmp.w	lr, #25
 80273de:	d804      	bhi.n	80273ea <_strtol_l.constprop.0+0xc6>
 80273e0:	3c57      	subs	r4, #87	; 0x57
 80273e2:	e7db      	b.n	802739c <_strtol_l.constprop.0+0x78>
 80273e4:	f04f 3cff 	mov.w	ip, #4294967295
 80273e8:	e7e6      	b.n	80273b8 <_strtol_l.constprop.0+0x94>
 80273ea:	f1bc 0f00 	cmp.w	ip, #0
 80273ee:	da05      	bge.n	80273fc <_strtol_l.constprop.0+0xd8>
 80273f0:	2322      	movs	r3, #34	; 0x22
 80273f2:	6003      	str	r3, [r0, #0]
 80273f4:	4646      	mov	r6, r8
 80273f6:	b942      	cbnz	r2, 802740a <_strtol_l.constprop.0+0xe6>
 80273f8:	4630      	mov	r0, r6
 80273fa:	e79e      	b.n	802733a <_strtol_l.constprop.0+0x16>
 80273fc:	b107      	cbz	r7, 8027400 <_strtol_l.constprop.0+0xdc>
 80273fe:	4276      	negs	r6, r6
 8027400:	2a00      	cmp	r2, #0
 8027402:	d0f9      	beq.n	80273f8 <_strtol_l.constprop.0+0xd4>
 8027404:	f1bc 0f00 	cmp.w	ip, #0
 8027408:	d000      	beq.n	802740c <_strtol_l.constprop.0+0xe8>
 802740a:	1e69      	subs	r1, r5, #1
 802740c:	6011      	str	r1, [r2, #0]
 802740e:	e7f3      	b.n	80273f8 <_strtol_l.constprop.0+0xd4>
 8027410:	2430      	movs	r4, #48	; 0x30
 8027412:	2b00      	cmp	r3, #0
 8027414:	d1b1      	bne.n	802737a <_strtol_l.constprop.0+0x56>
 8027416:	2308      	movs	r3, #8
 8027418:	e7af      	b.n	802737a <_strtol_l.constprop.0+0x56>
 802741a:	2c30      	cmp	r4, #48	; 0x30
 802741c:	d0a5      	beq.n	802736a <_strtol_l.constprop.0+0x46>
 802741e:	230a      	movs	r3, #10
 8027420:	e7ab      	b.n	802737a <_strtol_l.constprop.0+0x56>
 8027422:	bf00      	nop
 8027424:	080470ad 	.word	0x080470ad

08027428 <_strtol_r>:
 8027428:	f7ff bf7c 	b.w	8027324 <_strtol_l.constprop.0>

0802742c <strtol>:
 802742c:	4613      	mov	r3, r2
 802742e:	460a      	mov	r2, r1
 8027430:	4601      	mov	r1, r0
 8027432:	4802      	ldr	r0, [pc, #8]	; (802743c <strtol+0x10>)
 8027434:	6800      	ldr	r0, [r0, #0]
 8027436:	f7ff bf75 	b.w	8027324 <_strtol_l.constprop.0>
 802743a:	bf00      	nop
 802743c:	200004a4 	.word	0x200004a4

08027440 <_strtoul_l.constprop.0>:
 8027440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027444:	4f36      	ldr	r7, [pc, #216]	; (8027520 <_strtoul_l.constprop.0+0xe0>)
 8027446:	4686      	mov	lr, r0
 8027448:	460d      	mov	r5, r1
 802744a:	4628      	mov	r0, r5
 802744c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027450:	5de6      	ldrb	r6, [r4, r7]
 8027452:	f016 0608 	ands.w	r6, r6, #8
 8027456:	d1f8      	bne.n	802744a <_strtoul_l.constprop.0+0xa>
 8027458:	2c2d      	cmp	r4, #45	; 0x2d
 802745a:	d12f      	bne.n	80274bc <_strtoul_l.constprop.0+0x7c>
 802745c:	782c      	ldrb	r4, [r5, #0]
 802745e:	2601      	movs	r6, #1
 8027460:	1c85      	adds	r5, r0, #2
 8027462:	2b00      	cmp	r3, #0
 8027464:	d057      	beq.n	8027516 <_strtoul_l.constprop.0+0xd6>
 8027466:	2b10      	cmp	r3, #16
 8027468:	d109      	bne.n	802747e <_strtoul_l.constprop.0+0x3e>
 802746a:	2c30      	cmp	r4, #48	; 0x30
 802746c:	d107      	bne.n	802747e <_strtoul_l.constprop.0+0x3e>
 802746e:	7828      	ldrb	r0, [r5, #0]
 8027470:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027474:	2858      	cmp	r0, #88	; 0x58
 8027476:	d149      	bne.n	802750c <_strtoul_l.constprop.0+0xcc>
 8027478:	786c      	ldrb	r4, [r5, #1]
 802747a:	2310      	movs	r3, #16
 802747c:	3502      	adds	r5, #2
 802747e:	f04f 38ff 	mov.w	r8, #4294967295
 8027482:	2700      	movs	r7, #0
 8027484:	fbb8 f8f3 	udiv	r8, r8, r3
 8027488:	fb03 f908 	mul.w	r9, r3, r8
 802748c:	ea6f 0909 	mvn.w	r9, r9
 8027490:	4638      	mov	r0, r7
 8027492:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8027496:	f1bc 0f09 	cmp.w	ip, #9
 802749a:	d814      	bhi.n	80274c6 <_strtoul_l.constprop.0+0x86>
 802749c:	4664      	mov	r4, ip
 802749e:	42a3      	cmp	r3, r4
 80274a0:	dd22      	ble.n	80274e8 <_strtoul_l.constprop.0+0xa8>
 80274a2:	2f00      	cmp	r7, #0
 80274a4:	db1d      	blt.n	80274e2 <_strtoul_l.constprop.0+0xa2>
 80274a6:	4580      	cmp	r8, r0
 80274a8:	d31b      	bcc.n	80274e2 <_strtoul_l.constprop.0+0xa2>
 80274aa:	d101      	bne.n	80274b0 <_strtoul_l.constprop.0+0x70>
 80274ac:	45a1      	cmp	r9, r4
 80274ae:	db18      	blt.n	80274e2 <_strtoul_l.constprop.0+0xa2>
 80274b0:	fb00 4003 	mla	r0, r0, r3, r4
 80274b4:	2701      	movs	r7, #1
 80274b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80274ba:	e7ea      	b.n	8027492 <_strtoul_l.constprop.0+0x52>
 80274bc:	2c2b      	cmp	r4, #43	; 0x2b
 80274be:	bf04      	itt	eq
 80274c0:	782c      	ldrbeq	r4, [r5, #0]
 80274c2:	1c85      	addeq	r5, r0, #2
 80274c4:	e7cd      	b.n	8027462 <_strtoul_l.constprop.0+0x22>
 80274c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80274ca:	f1bc 0f19 	cmp.w	ip, #25
 80274ce:	d801      	bhi.n	80274d4 <_strtoul_l.constprop.0+0x94>
 80274d0:	3c37      	subs	r4, #55	; 0x37
 80274d2:	e7e4      	b.n	802749e <_strtoul_l.constprop.0+0x5e>
 80274d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80274d8:	f1bc 0f19 	cmp.w	ip, #25
 80274dc:	d804      	bhi.n	80274e8 <_strtoul_l.constprop.0+0xa8>
 80274de:	3c57      	subs	r4, #87	; 0x57
 80274e0:	e7dd      	b.n	802749e <_strtoul_l.constprop.0+0x5e>
 80274e2:	f04f 37ff 	mov.w	r7, #4294967295
 80274e6:	e7e6      	b.n	80274b6 <_strtoul_l.constprop.0+0x76>
 80274e8:	2f00      	cmp	r7, #0
 80274ea:	da07      	bge.n	80274fc <_strtoul_l.constprop.0+0xbc>
 80274ec:	2322      	movs	r3, #34	; 0x22
 80274ee:	f8ce 3000 	str.w	r3, [lr]
 80274f2:	f04f 30ff 	mov.w	r0, #4294967295
 80274f6:	b932      	cbnz	r2, 8027506 <_strtoul_l.constprop.0+0xc6>
 80274f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80274fc:	b106      	cbz	r6, 8027500 <_strtoul_l.constprop.0+0xc0>
 80274fe:	4240      	negs	r0, r0
 8027500:	2a00      	cmp	r2, #0
 8027502:	d0f9      	beq.n	80274f8 <_strtoul_l.constprop.0+0xb8>
 8027504:	b107      	cbz	r7, 8027508 <_strtoul_l.constprop.0+0xc8>
 8027506:	1e69      	subs	r1, r5, #1
 8027508:	6011      	str	r1, [r2, #0]
 802750a:	e7f5      	b.n	80274f8 <_strtoul_l.constprop.0+0xb8>
 802750c:	2430      	movs	r4, #48	; 0x30
 802750e:	2b00      	cmp	r3, #0
 8027510:	d1b5      	bne.n	802747e <_strtoul_l.constprop.0+0x3e>
 8027512:	2308      	movs	r3, #8
 8027514:	e7b3      	b.n	802747e <_strtoul_l.constprop.0+0x3e>
 8027516:	2c30      	cmp	r4, #48	; 0x30
 8027518:	d0a9      	beq.n	802746e <_strtoul_l.constprop.0+0x2e>
 802751a:	230a      	movs	r3, #10
 802751c:	e7af      	b.n	802747e <_strtoul_l.constprop.0+0x3e>
 802751e:	bf00      	nop
 8027520:	080470ad 	.word	0x080470ad

08027524 <_strtoul_r>:
 8027524:	f7ff bf8c 	b.w	8027440 <_strtoul_l.constprop.0>

08027528 <strtoul>:
 8027528:	4613      	mov	r3, r2
 802752a:	460a      	mov	r2, r1
 802752c:	4601      	mov	r1, r0
 802752e:	4802      	ldr	r0, [pc, #8]	; (8027538 <strtoul+0x10>)
 8027530:	6800      	ldr	r0, [r0, #0]
 8027532:	f7ff bf85 	b.w	8027440 <_strtoul_l.constprop.0>
 8027536:	bf00      	nop
 8027538:	200004a4 	.word	0x200004a4

0802753c <__tzcalc_limits>:
 802753c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027540:	4605      	mov	r5, r0
 8027542:	f001 fab1 	bl	8028aa8 <__gettzinfo>
 8027546:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802754a:	429d      	cmp	r5, r3
 802754c:	f340 8099 	ble.w	8027682 <__tzcalc_limits+0x146>
 8027550:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8027554:	18ac      	adds	r4, r5, r2
 8027556:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802755a:	f240 126d 	movw	r2, #365	; 0x16d
 802755e:	10a4      	asrs	r4, r4, #2
 8027560:	fb02 4403 	mla	r4, r2, r3, r4
 8027564:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8027568:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802756c:	fb93 f3f2 	sdiv	r3, r3, r2
 8027570:	441c      	add	r4, r3
 8027572:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8027576:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802757a:	fb95 fcf3 	sdiv	ip, r5, r3
 802757e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8027582:	186a      	adds	r2, r5, r1
 8027584:	fabc f68c 	clz	r6, ip
 8027588:	fbb2 f2f3 	udiv	r2, r2, r3
 802758c:	f005 0303 	and.w	r3, r5, #3
 8027590:	4414      	add	r4, r2
 8027592:	2264      	movs	r2, #100	; 0x64
 8027594:	6045      	str	r5, [r0, #4]
 8027596:	fb95 f7f2 	sdiv	r7, r5, r2
 802759a:	0976      	lsrs	r6, r6, #5
 802759c:	fb02 5717 	mls	r7, r2, r7, r5
 80275a0:	4601      	mov	r1, r0
 80275a2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80275a6:	9300      	str	r3, [sp, #0]
 80275a8:	f04f 0a07 	mov.w	sl, #7
 80275ac:	7a0d      	ldrb	r5, [r1, #8]
 80275ae:	694b      	ldr	r3, [r1, #20]
 80275b0:	2d4a      	cmp	r5, #74	; 0x4a
 80275b2:	d12d      	bne.n	8027610 <__tzcalc_limits+0xd4>
 80275b4:	9a00      	ldr	r2, [sp, #0]
 80275b6:	eb04 0e03 	add.w	lr, r4, r3
 80275ba:	b902      	cbnz	r2, 80275be <__tzcalc_limits+0x82>
 80275bc:	b917      	cbnz	r7, 80275c4 <__tzcalc_limits+0x88>
 80275be:	f1bc 0f00 	cmp.w	ip, #0
 80275c2:	d123      	bne.n	802760c <__tzcalc_limits+0xd0>
 80275c4:	2b3b      	cmp	r3, #59	; 0x3b
 80275c6:	bfd4      	ite	le
 80275c8:	2300      	movle	r3, #0
 80275ca:	2301      	movgt	r3, #1
 80275cc:	4473      	add	r3, lr
 80275ce:	3b01      	subs	r3, #1
 80275d0:	698d      	ldr	r5, [r1, #24]
 80275d2:	4a2d      	ldr	r2, [pc, #180]	; (8027688 <__tzcalc_limits+0x14c>)
 80275d4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80275d8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80275dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80275de:	18ed      	adds	r5, r5, r3
 80275e0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80275e4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80275e8:	3128      	adds	r1, #40	; 0x28
 80275ea:	458b      	cmp	fp, r1
 80275ec:	d1de      	bne.n	80275ac <__tzcalc_limits+0x70>
 80275ee:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80275f2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80275f6:	428c      	cmp	r4, r1
 80275f8:	eb72 0303 	sbcs.w	r3, r2, r3
 80275fc:	bfb4      	ite	lt
 80275fe:	2301      	movlt	r3, #1
 8027600:	2300      	movge	r3, #0
 8027602:	6003      	str	r3, [r0, #0]
 8027604:	2001      	movs	r0, #1
 8027606:	b003      	add	sp, #12
 8027608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802760c:	2300      	movs	r3, #0
 802760e:	e7dd      	b.n	80275cc <__tzcalc_limits+0x90>
 8027610:	2d44      	cmp	r5, #68	; 0x44
 8027612:	d101      	bne.n	8027618 <__tzcalc_limits+0xdc>
 8027614:	4423      	add	r3, r4
 8027616:	e7db      	b.n	80275d0 <__tzcalc_limits+0x94>
 8027618:	9a00      	ldr	r2, [sp, #0]
 802761a:	bb62      	cbnz	r2, 8027676 <__tzcalc_limits+0x13a>
 802761c:	2f00      	cmp	r7, #0
 802761e:	bf0c      	ite	eq
 8027620:	4635      	moveq	r5, r6
 8027622:	2501      	movne	r5, #1
 8027624:	68ca      	ldr	r2, [r1, #12]
 8027626:	9201      	str	r2, [sp, #4]
 8027628:	4a18      	ldr	r2, [pc, #96]	; (802768c <__tzcalc_limits+0x150>)
 802762a:	f04f 0930 	mov.w	r9, #48	; 0x30
 802762e:	fb09 2505 	mla	r5, r9, r5, r2
 8027632:	46a6      	mov	lr, r4
 8027634:	f04f 0800 	mov.w	r8, #0
 8027638:	3d04      	subs	r5, #4
 802763a:	9a01      	ldr	r2, [sp, #4]
 802763c:	f108 0801 	add.w	r8, r8, #1
 8027640:	4542      	cmp	r2, r8
 8027642:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8027646:	dc18      	bgt.n	802767a <__tzcalc_limits+0x13e>
 8027648:	f10e 0504 	add.w	r5, lr, #4
 802764c:	fb95 f8fa 	sdiv	r8, r5, sl
 8027650:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8027654:	eba5 0808 	sub.w	r8, r5, r8
 8027658:	ebb3 0808 	subs.w	r8, r3, r8
 802765c:	690b      	ldr	r3, [r1, #16]
 802765e:	f103 33ff 	add.w	r3, r3, #4294967295
 8027662:	bf48      	it	mi
 8027664:	f108 0807 	addmi.w	r8, r8, #7
 8027668:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802766c:	4443      	add	r3, r8
 802766e:	454b      	cmp	r3, r9
 8027670:	da05      	bge.n	802767e <__tzcalc_limits+0x142>
 8027672:	4473      	add	r3, lr
 8027674:	e7ac      	b.n	80275d0 <__tzcalc_limits+0x94>
 8027676:	4635      	mov	r5, r6
 8027678:	e7d4      	b.n	8027624 <__tzcalc_limits+0xe8>
 802767a:	44ce      	add	lr, r9
 802767c:	e7dd      	b.n	802763a <__tzcalc_limits+0xfe>
 802767e:	3b07      	subs	r3, #7
 8027680:	e7f5      	b.n	802766e <__tzcalc_limits+0x132>
 8027682:	2000      	movs	r0, #0
 8027684:	e7bf      	b.n	8027606 <__tzcalc_limits+0xca>
 8027686:	bf00      	nop
 8027688:	00015180 	.word	0x00015180
 802768c:	080472e8 	.word	0x080472e8

08027690 <__tz_lock>:
 8027690:	4801      	ldr	r0, [pc, #4]	; (8027698 <__tz_lock+0x8>)
 8027692:	f7fd be74 	b.w	802537e <__retarget_lock_acquire>
 8027696:	bf00      	nop
 8027698:	200300c8 	.word	0x200300c8

0802769c <__tz_unlock>:
 802769c:	4801      	ldr	r0, [pc, #4]	; (80276a4 <__tz_unlock+0x8>)
 802769e:	f7fd be70 	b.w	8025382 <__retarget_lock_release>
 80276a2:	bf00      	nop
 80276a4:	200300c8 	.word	0x200300c8

080276a8 <_tzset_unlocked>:
 80276a8:	4b01      	ldr	r3, [pc, #4]	; (80276b0 <_tzset_unlocked+0x8>)
 80276aa:	6818      	ldr	r0, [r3, #0]
 80276ac:	f000 b802 	b.w	80276b4 <_tzset_unlocked_r>
 80276b0:	200004a4 	.word	0x200004a4

080276b4 <_tzset_unlocked_r>:
 80276b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276b8:	b08d      	sub	sp, #52	; 0x34
 80276ba:	4607      	mov	r7, r0
 80276bc:	f001 f9f4 	bl	8028aa8 <__gettzinfo>
 80276c0:	49b0      	ldr	r1, [pc, #704]	; (8027984 <_tzset_unlocked_r+0x2d0>)
 80276c2:	4eb1      	ldr	r6, [pc, #708]	; (8027988 <_tzset_unlocked_r+0x2d4>)
 80276c4:	4605      	mov	r5, r0
 80276c6:	4638      	mov	r0, r7
 80276c8:	f001 f9e6 	bl	8028a98 <_getenv_r>
 80276cc:	4604      	mov	r4, r0
 80276ce:	b970      	cbnz	r0, 80276ee <_tzset_unlocked_r+0x3a>
 80276d0:	4bae      	ldr	r3, [pc, #696]	; (802798c <_tzset_unlocked_r+0x2d8>)
 80276d2:	4aaf      	ldr	r2, [pc, #700]	; (8027990 <_tzset_unlocked_r+0x2dc>)
 80276d4:	6018      	str	r0, [r3, #0]
 80276d6:	4baf      	ldr	r3, [pc, #700]	; (8027994 <_tzset_unlocked_r+0x2e0>)
 80276d8:	6018      	str	r0, [r3, #0]
 80276da:	4baf      	ldr	r3, [pc, #700]	; (8027998 <_tzset_unlocked_r+0x2e4>)
 80276dc:	6830      	ldr	r0, [r6, #0]
 80276de:	e9c3 2200 	strd	r2, r2, [r3]
 80276e2:	f7fd fe59 	bl	8025398 <free>
 80276e6:	6034      	str	r4, [r6, #0]
 80276e8:	b00d      	add	sp, #52	; 0x34
 80276ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276ee:	6831      	ldr	r1, [r6, #0]
 80276f0:	2900      	cmp	r1, #0
 80276f2:	d162      	bne.n	80277ba <_tzset_unlocked_r+0x106>
 80276f4:	6830      	ldr	r0, [r6, #0]
 80276f6:	f7fd fe4f 	bl	8025398 <free>
 80276fa:	4620      	mov	r0, r4
 80276fc:	f7d8 fdaa 	bl	8000254 <strlen>
 8027700:	1c41      	adds	r1, r0, #1
 8027702:	4638      	mov	r0, r7
 8027704:	f7fe f96e 	bl	80259e4 <_malloc_r>
 8027708:	6030      	str	r0, [r6, #0]
 802770a:	2800      	cmp	r0, #0
 802770c:	d15a      	bne.n	80277c4 <_tzset_unlocked_r+0x110>
 802770e:	7823      	ldrb	r3, [r4, #0]
 8027710:	4aa2      	ldr	r2, [pc, #648]	; (802799c <_tzset_unlocked_r+0x2e8>)
 8027712:	49a3      	ldr	r1, [pc, #652]	; (80279a0 <_tzset_unlocked_r+0x2ec>)
 8027714:	2b3a      	cmp	r3, #58	; 0x3a
 8027716:	bf08      	it	eq
 8027718:	3401      	addeq	r4, #1
 802771a:	ae0a      	add	r6, sp, #40	; 0x28
 802771c:	4633      	mov	r3, r6
 802771e:	4620      	mov	r0, r4
 8027720:	f7ff f822 	bl	8026768 <siscanf>
 8027724:	2800      	cmp	r0, #0
 8027726:	dddf      	ble.n	80276e8 <_tzset_unlocked_r+0x34>
 8027728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802772a:	18e7      	adds	r7, r4, r3
 802772c:	5ce3      	ldrb	r3, [r4, r3]
 802772e:	2b2d      	cmp	r3, #45	; 0x2d
 8027730:	d14c      	bne.n	80277cc <_tzset_unlocked_r+0x118>
 8027732:	3701      	adds	r7, #1
 8027734:	f04f 38ff 	mov.w	r8, #4294967295
 8027738:	f10d 0a20 	add.w	sl, sp, #32
 802773c:	f10d 0b1e 	add.w	fp, sp, #30
 8027740:	2400      	movs	r4, #0
 8027742:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8027746:	4997      	ldr	r1, [pc, #604]	; (80279a4 <_tzset_unlocked_r+0x2f0>)
 8027748:	9603      	str	r6, [sp, #12]
 802774a:	f8cd b000 	str.w	fp, [sp]
 802774e:	4633      	mov	r3, r6
 8027750:	aa07      	add	r2, sp, #28
 8027752:	4638      	mov	r0, r7
 8027754:	f8ad 401e 	strh.w	r4, [sp, #30]
 8027758:	f8ad 4020 	strh.w	r4, [sp, #32]
 802775c:	f7ff f804 	bl	8026768 <siscanf>
 8027760:	42a0      	cmp	r0, r4
 8027762:	ddc1      	ble.n	80276e8 <_tzset_unlocked_r+0x34>
 8027764:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027768:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802776c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80279b0 <_tzset_unlocked_r+0x2fc>
 8027770:	213c      	movs	r1, #60	; 0x3c
 8027772:	fb01 3302 	mla	r3, r1, r2, r3
 8027776:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802777a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802777e:	fb01 3302 	mla	r3, r1, r2, r3
 8027782:	fb08 f303 	mul.w	r3, r8, r3
 8027786:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8027998 <_tzset_unlocked_r+0x2e4>
 802778a:	62ab      	str	r3, [r5, #40]	; 0x28
 802778c:	4b83      	ldr	r3, [pc, #524]	; (802799c <_tzset_unlocked_r+0x2e8>)
 802778e:	f8c8 3000 	str.w	r3, [r8]
 8027792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027794:	4982      	ldr	r1, [pc, #520]	; (80279a0 <_tzset_unlocked_r+0x2ec>)
 8027796:	441f      	add	r7, r3
 8027798:	464a      	mov	r2, r9
 802779a:	4633      	mov	r3, r6
 802779c:	4638      	mov	r0, r7
 802779e:	f7fe ffe3 	bl	8026768 <siscanf>
 80277a2:	42a0      	cmp	r0, r4
 80277a4:	dc18      	bgt.n	80277d8 <_tzset_unlocked_r+0x124>
 80277a6:	f8d8 3000 	ldr.w	r3, [r8]
 80277aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80277ae:	4b77      	ldr	r3, [pc, #476]	; (802798c <_tzset_unlocked_r+0x2d8>)
 80277b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80277b2:	601a      	str	r2, [r3, #0]
 80277b4:	4b77      	ldr	r3, [pc, #476]	; (8027994 <_tzset_unlocked_r+0x2e0>)
 80277b6:	601c      	str	r4, [r3, #0]
 80277b8:	e796      	b.n	80276e8 <_tzset_unlocked_r+0x34>
 80277ba:	f7d8 fd41 	bl	8000240 <strcmp>
 80277be:	2800      	cmp	r0, #0
 80277c0:	d198      	bne.n	80276f4 <_tzset_unlocked_r+0x40>
 80277c2:	e791      	b.n	80276e8 <_tzset_unlocked_r+0x34>
 80277c4:	4621      	mov	r1, r4
 80277c6:	f7ff f856 	bl	8026876 <strcpy>
 80277ca:	e7a0      	b.n	802770e <_tzset_unlocked_r+0x5a>
 80277cc:	2b2b      	cmp	r3, #43	; 0x2b
 80277ce:	bf08      	it	eq
 80277d0:	3701      	addeq	r7, #1
 80277d2:	f04f 0801 	mov.w	r8, #1
 80277d6:	e7af      	b.n	8027738 <_tzset_unlocked_r+0x84>
 80277d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80277da:	f8c8 9004 	str.w	r9, [r8, #4]
 80277de:	18fc      	adds	r4, r7, r3
 80277e0:	5cfb      	ldrb	r3, [r7, r3]
 80277e2:	2b2d      	cmp	r3, #45	; 0x2d
 80277e4:	f040 808b 	bne.w	80278fe <_tzset_unlocked_r+0x24a>
 80277e8:	3401      	adds	r4, #1
 80277ea:	f04f 37ff 	mov.w	r7, #4294967295
 80277ee:	2300      	movs	r3, #0
 80277f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80277f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80277f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80277fc:	930a      	str	r3, [sp, #40]	; 0x28
 80277fe:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027802:	e9cd b600 	strd	fp, r6, [sp]
 8027806:	4967      	ldr	r1, [pc, #412]	; (80279a4 <_tzset_unlocked_r+0x2f0>)
 8027808:	4633      	mov	r3, r6
 802780a:	aa07      	add	r2, sp, #28
 802780c:	4620      	mov	r0, r4
 802780e:	f7fe ffab 	bl	8026768 <siscanf>
 8027812:	2800      	cmp	r0, #0
 8027814:	dc78      	bgt.n	8027908 <_tzset_unlocked_r+0x254>
 8027816:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8027818:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802781c:	652b      	str	r3, [r5, #80]	; 0x50
 802781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027820:	462f      	mov	r7, r5
 8027822:	441c      	add	r4, r3
 8027824:	f04f 0900 	mov.w	r9, #0
 8027828:	7823      	ldrb	r3, [r4, #0]
 802782a:	2b2c      	cmp	r3, #44	; 0x2c
 802782c:	bf08      	it	eq
 802782e:	3401      	addeq	r4, #1
 8027830:	f894 8000 	ldrb.w	r8, [r4]
 8027834:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8027838:	d178      	bne.n	802792c <_tzset_unlocked_r+0x278>
 802783a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802783e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8027842:	ab09      	add	r3, sp, #36	; 0x24
 8027844:	9300      	str	r3, [sp, #0]
 8027846:	4958      	ldr	r1, [pc, #352]	; (80279a8 <_tzset_unlocked_r+0x2f4>)
 8027848:	9603      	str	r6, [sp, #12]
 802784a:	4633      	mov	r3, r6
 802784c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8027850:	4620      	mov	r0, r4
 8027852:	f7fe ff89 	bl	8026768 <siscanf>
 8027856:	2803      	cmp	r0, #3
 8027858:	f47f af46 	bne.w	80276e8 <_tzset_unlocked_r+0x34>
 802785c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8027860:	1e4b      	subs	r3, r1, #1
 8027862:	2b0b      	cmp	r3, #11
 8027864:	f63f af40 	bhi.w	80276e8 <_tzset_unlocked_r+0x34>
 8027868:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802786c:	1e53      	subs	r3, r2, #1
 802786e:	2b04      	cmp	r3, #4
 8027870:	f63f af3a 	bhi.w	80276e8 <_tzset_unlocked_r+0x34>
 8027874:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8027878:	2b06      	cmp	r3, #6
 802787a:	f63f af35 	bhi.w	80276e8 <_tzset_unlocked_r+0x34>
 802787e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027882:	f887 8008 	strb.w	r8, [r7, #8]
 8027886:	617b      	str	r3, [r7, #20]
 8027888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802788a:	eb04 0803 	add.w	r8, r4, r3
 802788e:	2302      	movs	r3, #2
 8027890:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027894:	2300      	movs	r3, #0
 8027896:	f8ad 301e 	strh.w	r3, [sp, #30]
 802789a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802789e:	930a      	str	r3, [sp, #40]	; 0x28
 80278a0:	f898 3000 	ldrb.w	r3, [r8]
 80278a4:	2b2f      	cmp	r3, #47	; 0x2f
 80278a6:	d109      	bne.n	80278bc <_tzset_unlocked_r+0x208>
 80278a8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80278ac:	e9cd b600 	strd	fp, r6, [sp]
 80278b0:	493e      	ldr	r1, [pc, #248]	; (80279ac <_tzset_unlocked_r+0x2f8>)
 80278b2:	4633      	mov	r3, r6
 80278b4:	aa07      	add	r2, sp, #28
 80278b6:	4640      	mov	r0, r8
 80278b8:	f7fe ff56 	bl	8026768 <siscanf>
 80278bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80278c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80278c4:	213c      	movs	r1, #60	; 0x3c
 80278c6:	fb01 3302 	mla	r3, r1, r2, r3
 80278ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80278ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80278d2:	fb01 3302 	mla	r3, r1, r2, r3
 80278d6:	61bb      	str	r3, [r7, #24]
 80278d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80278da:	3728      	adds	r7, #40	; 0x28
 80278dc:	4444      	add	r4, r8
 80278de:	f1b9 0f00 	cmp.w	r9, #0
 80278e2:	d020      	beq.n	8027926 <_tzset_unlocked_r+0x272>
 80278e4:	6868      	ldr	r0, [r5, #4]
 80278e6:	f7ff fe29 	bl	802753c <__tzcalc_limits>
 80278ea:	4b28      	ldr	r3, [pc, #160]	; (802798c <_tzset_unlocked_r+0x2d8>)
 80278ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80278ee:	601a      	str	r2, [r3, #0]
 80278f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80278f2:	1a9b      	subs	r3, r3, r2
 80278f4:	4a27      	ldr	r2, [pc, #156]	; (8027994 <_tzset_unlocked_r+0x2e0>)
 80278f6:	bf18      	it	ne
 80278f8:	2301      	movne	r3, #1
 80278fa:	6013      	str	r3, [r2, #0]
 80278fc:	e6f4      	b.n	80276e8 <_tzset_unlocked_r+0x34>
 80278fe:	2b2b      	cmp	r3, #43	; 0x2b
 8027900:	bf08      	it	eq
 8027902:	3401      	addeq	r4, #1
 8027904:	2701      	movs	r7, #1
 8027906:	e772      	b.n	80277ee <_tzset_unlocked_r+0x13a>
 8027908:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802790c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027910:	213c      	movs	r1, #60	; 0x3c
 8027912:	fb01 3302 	mla	r3, r1, r2, r3
 8027916:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802791a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802791e:	fb01 3302 	mla	r3, r1, r2, r3
 8027922:	437b      	muls	r3, r7
 8027924:	e77a      	b.n	802781c <_tzset_unlocked_r+0x168>
 8027926:	f04f 0901 	mov.w	r9, #1
 802792a:	e77d      	b.n	8027828 <_tzset_unlocked_r+0x174>
 802792c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8027930:	bf06      	itte	eq
 8027932:	3401      	addeq	r4, #1
 8027934:	4643      	moveq	r3, r8
 8027936:	2344      	movne	r3, #68	; 0x44
 8027938:	220a      	movs	r2, #10
 802793a:	a90b      	add	r1, sp, #44	; 0x2c
 802793c:	4620      	mov	r0, r4
 802793e:	9305      	str	r3, [sp, #20]
 8027940:	f7ff fdf2 	bl	8027528 <strtoul>
 8027944:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027948:	9b05      	ldr	r3, [sp, #20]
 802794a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802794e:	45a0      	cmp	r8, r4
 8027950:	d114      	bne.n	802797c <_tzset_unlocked_r+0x2c8>
 8027952:	234d      	movs	r3, #77	; 0x4d
 8027954:	f1b9 0f00 	cmp.w	r9, #0
 8027958:	d107      	bne.n	802796a <_tzset_unlocked_r+0x2b6>
 802795a:	722b      	strb	r3, [r5, #8]
 802795c:	2103      	movs	r1, #3
 802795e:	2302      	movs	r3, #2
 8027960:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8027964:	f8c5 9014 	str.w	r9, [r5, #20]
 8027968:	e791      	b.n	802788e <_tzset_unlocked_r+0x1da>
 802796a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802796e:	220b      	movs	r2, #11
 8027970:	2301      	movs	r3, #1
 8027972:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8027976:	2300      	movs	r3, #0
 8027978:	63eb      	str	r3, [r5, #60]	; 0x3c
 802797a:	e788      	b.n	802788e <_tzset_unlocked_r+0x1da>
 802797c:	b280      	uxth	r0, r0
 802797e:	723b      	strb	r3, [r7, #8]
 8027980:	6178      	str	r0, [r7, #20]
 8027982:	e784      	b.n	802788e <_tzset_unlocked_r+0x1da>
 8027984:	08047658 	.word	0x08047658
 8027988:	200300f0 	.word	0x200300f0
 802798c:	200300f8 	.word	0x200300f8
 8027990:	0804765b 	.word	0x0804765b
 8027994:	200300f4 	.word	0x200300f4
 8027998:	20000508 	.word	0x20000508
 802799c:	200300e3 	.word	0x200300e3
 80279a0:	0804765f 	.word	0x0804765f
 80279a4:	08047682 	.word	0x08047682
 80279a8:	0804766e 	.word	0x0804766e
 80279ac:	08047681 	.word	0x08047681
 80279b0:	200300d8 	.word	0x200300d8

080279b4 <__swbuf_r>:
 80279b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279b6:	460e      	mov	r6, r1
 80279b8:	4614      	mov	r4, r2
 80279ba:	4605      	mov	r5, r0
 80279bc:	b118      	cbz	r0, 80279c6 <__swbuf_r+0x12>
 80279be:	6983      	ldr	r3, [r0, #24]
 80279c0:	b90b      	cbnz	r3, 80279c6 <__swbuf_r+0x12>
 80279c2:	f7fd fb07 	bl	8024fd4 <__sinit>
 80279c6:	4b21      	ldr	r3, [pc, #132]	; (8027a4c <__swbuf_r+0x98>)
 80279c8:	429c      	cmp	r4, r3
 80279ca:	d12b      	bne.n	8027a24 <__swbuf_r+0x70>
 80279cc:	686c      	ldr	r4, [r5, #4]
 80279ce:	69a3      	ldr	r3, [r4, #24]
 80279d0:	60a3      	str	r3, [r4, #8]
 80279d2:	89a3      	ldrh	r3, [r4, #12]
 80279d4:	071a      	lsls	r2, r3, #28
 80279d6:	d52f      	bpl.n	8027a38 <__swbuf_r+0x84>
 80279d8:	6923      	ldr	r3, [r4, #16]
 80279da:	b36b      	cbz	r3, 8027a38 <__swbuf_r+0x84>
 80279dc:	6923      	ldr	r3, [r4, #16]
 80279de:	6820      	ldr	r0, [r4, #0]
 80279e0:	1ac0      	subs	r0, r0, r3
 80279e2:	6963      	ldr	r3, [r4, #20]
 80279e4:	b2f6      	uxtb	r6, r6
 80279e6:	4283      	cmp	r3, r0
 80279e8:	4637      	mov	r7, r6
 80279ea:	dc04      	bgt.n	80279f6 <__swbuf_r+0x42>
 80279ec:	4621      	mov	r1, r4
 80279ee:	4628      	mov	r0, r5
 80279f0:	f000 ffc8 	bl	8028984 <_fflush_r>
 80279f4:	bb30      	cbnz	r0, 8027a44 <__swbuf_r+0x90>
 80279f6:	68a3      	ldr	r3, [r4, #8]
 80279f8:	3b01      	subs	r3, #1
 80279fa:	60a3      	str	r3, [r4, #8]
 80279fc:	6823      	ldr	r3, [r4, #0]
 80279fe:	1c5a      	adds	r2, r3, #1
 8027a00:	6022      	str	r2, [r4, #0]
 8027a02:	701e      	strb	r6, [r3, #0]
 8027a04:	6963      	ldr	r3, [r4, #20]
 8027a06:	3001      	adds	r0, #1
 8027a08:	4283      	cmp	r3, r0
 8027a0a:	d004      	beq.n	8027a16 <__swbuf_r+0x62>
 8027a0c:	89a3      	ldrh	r3, [r4, #12]
 8027a0e:	07db      	lsls	r3, r3, #31
 8027a10:	d506      	bpl.n	8027a20 <__swbuf_r+0x6c>
 8027a12:	2e0a      	cmp	r6, #10
 8027a14:	d104      	bne.n	8027a20 <__swbuf_r+0x6c>
 8027a16:	4621      	mov	r1, r4
 8027a18:	4628      	mov	r0, r5
 8027a1a:	f000 ffb3 	bl	8028984 <_fflush_r>
 8027a1e:	b988      	cbnz	r0, 8027a44 <__swbuf_r+0x90>
 8027a20:	4638      	mov	r0, r7
 8027a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a24:	4b0a      	ldr	r3, [pc, #40]	; (8027a50 <__swbuf_r+0x9c>)
 8027a26:	429c      	cmp	r4, r3
 8027a28:	d101      	bne.n	8027a2e <__swbuf_r+0x7a>
 8027a2a:	68ac      	ldr	r4, [r5, #8]
 8027a2c:	e7cf      	b.n	80279ce <__swbuf_r+0x1a>
 8027a2e:	4b09      	ldr	r3, [pc, #36]	; (8027a54 <__swbuf_r+0xa0>)
 8027a30:	429c      	cmp	r4, r3
 8027a32:	bf08      	it	eq
 8027a34:	68ec      	ldreq	r4, [r5, #12]
 8027a36:	e7ca      	b.n	80279ce <__swbuf_r+0x1a>
 8027a38:	4621      	mov	r1, r4
 8027a3a:	4628      	mov	r0, r5
 8027a3c:	f000 f81e 	bl	8027a7c <__swsetup_r>
 8027a40:	2800      	cmp	r0, #0
 8027a42:	d0cb      	beq.n	80279dc <__swbuf_r+0x28>
 8027a44:	f04f 37ff 	mov.w	r7, #4294967295
 8027a48:	e7ea      	b.n	8027a20 <__swbuf_r+0x6c>
 8027a4a:	bf00      	nop
 8027a4c:	080471d0 	.word	0x080471d0
 8027a50:	080471f0 	.word	0x080471f0
 8027a54:	080471b0 	.word	0x080471b0

08027a58 <_write_r>:
 8027a58:	b538      	push	{r3, r4, r5, lr}
 8027a5a:	4d07      	ldr	r5, [pc, #28]	; (8027a78 <_write_r+0x20>)
 8027a5c:	4604      	mov	r4, r0
 8027a5e:	4608      	mov	r0, r1
 8027a60:	4611      	mov	r1, r2
 8027a62:	2200      	movs	r2, #0
 8027a64:	602a      	str	r2, [r5, #0]
 8027a66:	461a      	mov	r2, r3
 8027a68:	f7dc f8ca 	bl	8003c00 <_write>
 8027a6c:	1c43      	adds	r3, r0, #1
 8027a6e:	d102      	bne.n	8027a76 <_write_r+0x1e>
 8027a70:	682b      	ldr	r3, [r5, #0]
 8027a72:	b103      	cbz	r3, 8027a76 <_write_r+0x1e>
 8027a74:	6023      	str	r3, [r4, #0]
 8027a76:	bd38      	pop	{r3, r4, r5, pc}
 8027a78:	200300d4 	.word	0x200300d4

08027a7c <__swsetup_r>:
 8027a7c:	4b32      	ldr	r3, [pc, #200]	; (8027b48 <__swsetup_r+0xcc>)
 8027a7e:	b570      	push	{r4, r5, r6, lr}
 8027a80:	681d      	ldr	r5, [r3, #0]
 8027a82:	4606      	mov	r6, r0
 8027a84:	460c      	mov	r4, r1
 8027a86:	b125      	cbz	r5, 8027a92 <__swsetup_r+0x16>
 8027a88:	69ab      	ldr	r3, [r5, #24]
 8027a8a:	b913      	cbnz	r3, 8027a92 <__swsetup_r+0x16>
 8027a8c:	4628      	mov	r0, r5
 8027a8e:	f7fd faa1 	bl	8024fd4 <__sinit>
 8027a92:	4b2e      	ldr	r3, [pc, #184]	; (8027b4c <__swsetup_r+0xd0>)
 8027a94:	429c      	cmp	r4, r3
 8027a96:	d10f      	bne.n	8027ab8 <__swsetup_r+0x3c>
 8027a98:	686c      	ldr	r4, [r5, #4]
 8027a9a:	89a3      	ldrh	r3, [r4, #12]
 8027a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027aa0:	0719      	lsls	r1, r3, #28
 8027aa2:	d42c      	bmi.n	8027afe <__swsetup_r+0x82>
 8027aa4:	06dd      	lsls	r5, r3, #27
 8027aa6:	d411      	bmi.n	8027acc <__swsetup_r+0x50>
 8027aa8:	2309      	movs	r3, #9
 8027aaa:	6033      	str	r3, [r6, #0]
 8027aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027ab0:	81a3      	strh	r3, [r4, #12]
 8027ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8027ab6:	e03e      	b.n	8027b36 <__swsetup_r+0xba>
 8027ab8:	4b25      	ldr	r3, [pc, #148]	; (8027b50 <__swsetup_r+0xd4>)
 8027aba:	429c      	cmp	r4, r3
 8027abc:	d101      	bne.n	8027ac2 <__swsetup_r+0x46>
 8027abe:	68ac      	ldr	r4, [r5, #8]
 8027ac0:	e7eb      	b.n	8027a9a <__swsetup_r+0x1e>
 8027ac2:	4b24      	ldr	r3, [pc, #144]	; (8027b54 <__swsetup_r+0xd8>)
 8027ac4:	429c      	cmp	r4, r3
 8027ac6:	bf08      	it	eq
 8027ac8:	68ec      	ldreq	r4, [r5, #12]
 8027aca:	e7e6      	b.n	8027a9a <__swsetup_r+0x1e>
 8027acc:	0758      	lsls	r0, r3, #29
 8027ace:	d512      	bpl.n	8027af6 <__swsetup_r+0x7a>
 8027ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027ad2:	b141      	cbz	r1, 8027ae6 <__swsetup_r+0x6a>
 8027ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027ad8:	4299      	cmp	r1, r3
 8027ada:	d002      	beq.n	8027ae2 <__swsetup_r+0x66>
 8027adc:	4630      	mov	r0, r6
 8027ade:	f7fd ff15 	bl	802590c <_free_r>
 8027ae2:	2300      	movs	r3, #0
 8027ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8027ae6:	89a3      	ldrh	r3, [r4, #12]
 8027ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027aec:	81a3      	strh	r3, [r4, #12]
 8027aee:	2300      	movs	r3, #0
 8027af0:	6063      	str	r3, [r4, #4]
 8027af2:	6923      	ldr	r3, [r4, #16]
 8027af4:	6023      	str	r3, [r4, #0]
 8027af6:	89a3      	ldrh	r3, [r4, #12]
 8027af8:	f043 0308 	orr.w	r3, r3, #8
 8027afc:	81a3      	strh	r3, [r4, #12]
 8027afe:	6923      	ldr	r3, [r4, #16]
 8027b00:	b94b      	cbnz	r3, 8027b16 <__swsetup_r+0x9a>
 8027b02:	89a3      	ldrh	r3, [r4, #12]
 8027b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027b0c:	d003      	beq.n	8027b16 <__swsetup_r+0x9a>
 8027b0e:	4621      	mov	r1, r4
 8027b10:	4630      	mov	r0, r6
 8027b12:	f001 f8b9 	bl	8028c88 <__smakebuf_r>
 8027b16:	89a0      	ldrh	r0, [r4, #12]
 8027b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027b1c:	f010 0301 	ands.w	r3, r0, #1
 8027b20:	d00a      	beq.n	8027b38 <__swsetup_r+0xbc>
 8027b22:	2300      	movs	r3, #0
 8027b24:	60a3      	str	r3, [r4, #8]
 8027b26:	6963      	ldr	r3, [r4, #20]
 8027b28:	425b      	negs	r3, r3
 8027b2a:	61a3      	str	r3, [r4, #24]
 8027b2c:	6923      	ldr	r3, [r4, #16]
 8027b2e:	b943      	cbnz	r3, 8027b42 <__swsetup_r+0xc6>
 8027b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027b34:	d1ba      	bne.n	8027aac <__swsetup_r+0x30>
 8027b36:	bd70      	pop	{r4, r5, r6, pc}
 8027b38:	0781      	lsls	r1, r0, #30
 8027b3a:	bf58      	it	pl
 8027b3c:	6963      	ldrpl	r3, [r4, #20]
 8027b3e:	60a3      	str	r3, [r4, #8]
 8027b40:	e7f4      	b.n	8027b2c <__swsetup_r+0xb0>
 8027b42:	2000      	movs	r0, #0
 8027b44:	e7f7      	b.n	8027b36 <__swsetup_r+0xba>
 8027b46:	bf00      	nop
 8027b48:	200004a4 	.word	0x200004a4
 8027b4c:	080471d0 	.word	0x080471d0
 8027b50:	080471f0 	.word	0x080471f0
 8027b54:	080471b0 	.word	0x080471b0

08027b58 <abs>:
 8027b58:	2800      	cmp	r0, #0
 8027b5a:	bfb8      	it	lt
 8027b5c:	4240      	neglt	r0, r0
 8027b5e:	4770      	bx	lr

08027b60 <asctime>:
 8027b60:	4b0d      	ldr	r3, [pc, #52]	; (8027b98 <asctime+0x38>)
 8027b62:	b570      	push	{r4, r5, r6, lr}
 8027b64:	681d      	ldr	r5, [r3, #0]
 8027b66:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8027b68:	4604      	mov	r4, r0
 8027b6a:	b976      	cbnz	r6, 8027b8a <asctime+0x2a>
 8027b6c:	201a      	movs	r0, #26
 8027b6e:	f7fd fc0b 	bl	8025388 <malloc>
 8027b72:	4602      	mov	r2, r0
 8027b74:	6428      	str	r0, [r5, #64]	; 0x40
 8027b76:	b920      	cbnz	r0, 8027b82 <asctime+0x22>
 8027b78:	4b08      	ldr	r3, [pc, #32]	; (8027b9c <asctime+0x3c>)
 8027b7a:	4809      	ldr	r0, [pc, #36]	; (8027ba0 <asctime+0x40>)
 8027b7c:	2137      	movs	r1, #55	; 0x37
 8027b7e:	f000 f837 	bl	8027bf0 <__assert_func>
 8027b82:	221a      	movs	r2, #26
 8027b84:	4631      	mov	r1, r6
 8027b86:	f7fd fc47 	bl	8025418 <memset>
 8027b8a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8027b8c:	4620      	mov	r0, r4
 8027b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027b92:	f000 b807 	b.w	8027ba4 <asctime_r>
 8027b96:	bf00      	nop
 8027b98:	200004a4 	.word	0x200004a4
 8027b9c:	08047214 	.word	0x08047214
 8027ba0:	08047694 	.word	0x08047694

08027ba4 <asctime_r>:
 8027ba4:	b510      	push	{r4, lr}
 8027ba6:	460c      	mov	r4, r1
 8027ba8:	6941      	ldr	r1, [r0, #20]
 8027baa:	6903      	ldr	r3, [r0, #16]
 8027bac:	6982      	ldr	r2, [r0, #24]
 8027bae:	b086      	sub	sp, #24
 8027bb0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8027bb4:	9104      	str	r1, [sp, #16]
 8027bb6:	6801      	ldr	r1, [r0, #0]
 8027bb8:	9103      	str	r1, [sp, #12]
 8027bba:	6841      	ldr	r1, [r0, #4]
 8027bbc:	9102      	str	r1, [sp, #8]
 8027bbe:	6881      	ldr	r1, [r0, #8]
 8027bc0:	9101      	str	r1, [sp, #4]
 8027bc2:	68c1      	ldr	r1, [r0, #12]
 8027bc4:	9100      	str	r1, [sp, #0]
 8027bc6:	4907      	ldr	r1, [pc, #28]	; (8027be4 <asctime_r+0x40>)
 8027bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027bcc:	440b      	add	r3, r1
 8027bce:	4906      	ldr	r1, [pc, #24]	; (8027be8 <asctime_r+0x44>)
 8027bd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027bd4:	440a      	add	r2, r1
 8027bd6:	4620      	mov	r0, r4
 8027bd8:	4904      	ldr	r1, [pc, #16]	; (8027bec <asctime_r+0x48>)
 8027bda:	f7fe fda5 	bl	8026728 <siprintf>
 8027bde:	4620      	mov	r0, r4
 8027be0:	b006      	add	sp, #24
 8027be2:	bd10      	pop	{r4, pc}
 8027be4:	08047725 	.word	0x08047725
 8027be8:	08047710 	.word	0x08047710
 8027bec:	080476f0 	.word	0x080476f0

08027bf0 <__assert_func>:
 8027bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027bf2:	4614      	mov	r4, r2
 8027bf4:	461a      	mov	r2, r3
 8027bf6:	4b09      	ldr	r3, [pc, #36]	; (8027c1c <__assert_func+0x2c>)
 8027bf8:	681b      	ldr	r3, [r3, #0]
 8027bfa:	4605      	mov	r5, r0
 8027bfc:	68d8      	ldr	r0, [r3, #12]
 8027bfe:	b14c      	cbz	r4, 8027c14 <__assert_func+0x24>
 8027c00:	4b07      	ldr	r3, [pc, #28]	; (8027c20 <__assert_func+0x30>)
 8027c02:	9100      	str	r1, [sp, #0]
 8027c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027c08:	4906      	ldr	r1, [pc, #24]	; (8027c24 <__assert_func+0x34>)
 8027c0a:	462b      	mov	r3, r5
 8027c0c:	f000 fef6 	bl	80289fc <fiprintf>
 8027c10:	f002 faf0 	bl	802a1f4 <abort>
 8027c14:	4b04      	ldr	r3, [pc, #16]	; (8027c28 <__assert_func+0x38>)
 8027c16:	461c      	mov	r4, r3
 8027c18:	e7f3      	b.n	8027c02 <__assert_func+0x12>
 8027c1a:	bf00      	nop
 8027c1c:	200004a4 	.word	0x200004a4
 8027c20:	08047749 	.word	0x08047749
 8027c24:	08047756 	.word	0x08047756
 8027c28:	0804770f 	.word	0x0804770f

08027c2c <_close_r>:
 8027c2c:	b538      	push	{r3, r4, r5, lr}
 8027c2e:	4d06      	ldr	r5, [pc, #24]	; (8027c48 <_close_r+0x1c>)
 8027c30:	2300      	movs	r3, #0
 8027c32:	4604      	mov	r4, r0
 8027c34:	4608      	mov	r0, r1
 8027c36:	602b      	str	r3, [r5, #0]
 8027c38:	f7e0 fb24 	bl	8008284 <_close>
 8027c3c:	1c43      	adds	r3, r0, #1
 8027c3e:	d102      	bne.n	8027c46 <_close_r+0x1a>
 8027c40:	682b      	ldr	r3, [r5, #0]
 8027c42:	b103      	cbz	r3, 8027c46 <_close_r+0x1a>
 8027c44:	6023      	str	r3, [r4, #0]
 8027c46:	bd38      	pop	{r3, r4, r5, pc}
 8027c48:	200300d4 	.word	0x200300d4

08027c4c <div>:
 8027c4c:	2900      	cmp	r1, #0
 8027c4e:	b510      	push	{r4, lr}
 8027c50:	fb91 f4f2 	sdiv	r4, r1, r2
 8027c54:	fb02 1314 	mls	r3, r2, r4, r1
 8027c58:	db06      	blt.n	8027c68 <div+0x1c>
 8027c5a:	2b00      	cmp	r3, #0
 8027c5c:	da01      	bge.n	8027c62 <div+0x16>
 8027c5e:	3401      	adds	r4, #1
 8027c60:	1a9b      	subs	r3, r3, r2
 8027c62:	e9c0 4300 	strd	r4, r3, [r0]
 8027c66:	bd10      	pop	{r4, pc}
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	bfc4      	itt	gt
 8027c6c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8027c70:	189b      	addgt	r3, r3, r2
 8027c72:	e7f6      	b.n	8027c62 <div+0x16>

08027c74 <quorem>:
 8027c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c78:	6903      	ldr	r3, [r0, #16]
 8027c7a:	690c      	ldr	r4, [r1, #16]
 8027c7c:	42a3      	cmp	r3, r4
 8027c7e:	4607      	mov	r7, r0
 8027c80:	f2c0 8081 	blt.w	8027d86 <quorem+0x112>
 8027c84:	3c01      	subs	r4, #1
 8027c86:	f101 0814 	add.w	r8, r1, #20
 8027c8a:	f100 0514 	add.w	r5, r0, #20
 8027c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027c92:	9301      	str	r3, [sp, #4]
 8027c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027c9c:	3301      	adds	r3, #1
 8027c9e:	429a      	cmp	r2, r3
 8027ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8027ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8027cac:	d331      	bcc.n	8027d12 <quorem+0x9e>
 8027cae:	f04f 0e00 	mov.w	lr, #0
 8027cb2:	4640      	mov	r0, r8
 8027cb4:	46ac      	mov	ip, r5
 8027cb6:	46f2      	mov	sl, lr
 8027cb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8027cbc:	b293      	uxth	r3, r2
 8027cbe:	fb06 e303 	mla	r3, r6, r3, lr
 8027cc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8027cc6:	b29b      	uxth	r3, r3
 8027cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8027ccc:	f8dc a000 	ldr.w	sl, [ip]
 8027cd0:	0c12      	lsrs	r2, r2, #16
 8027cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8027cd6:	fb06 e202 	mla	r2, r6, r2, lr
 8027cda:	9300      	str	r3, [sp, #0]
 8027cdc:	9b00      	ldr	r3, [sp, #0]
 8027cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8027ce2:	b292      	uxth	r2, r2
 8027ce4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8027ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8027cf0:	4581      	cmp	r9, r0
 8027cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027cf6:	f84c 3b04 	str.w	r3, [ip], #4
 8027cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8027cfe:	d2db      	bcs.n	8027cb8 <quorem+0x44>
 8027d00:	f855 300b 	ldr.w	r3, [r5, fp]
 8027d04:	b92b      	cbnz	r3, 8027d12 <quorem+0x9e>
 8027d06:	9b01      	ldr	r3, [sp, #4]
 8027d08:	3b04      	subs	r3, #4
 8027d0a:	429d      	cmp	r5, r3
 8027d0c:	461a      	mov	r2, r3
 8027d0e:	d32e      	bcc.n	8027d6e <quorem+0xfa>
 8027d10:	613c      	str	r4, [r7, #16]
 8027d12:	4638      	mov	r0, r7
 8027d14:	f001 fa86 	bl	8029224 <__mcmp>
 8027d18:	2800      	cmp	r0, #0
 8027d1a:	db24      	blt.n	8027d66 <quorem+0xf2>
 8027d1c:	3601      	adds	r6, #1
 8027d1e:	4628      	mov	r0, r5
 8027d20:	f04f 0c00 	mov.w	ip, #0
 8027d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8027d28:	f8d0 e000 	ldr.w	lr, [r0]
 8027d2c:	b293      	uxth	r3, r2
 8027d2e:	ebac 0303 	sub.w	r3, ip, r3
 8027d32:	0c12      	lsrs	r2, r2, #16
 8027d34:	fa13 f38e 	uxtah	r3, r3, lr
 8027d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027d40:	b29b      	uxth	r3, r3
 8027d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027d46:	45c1      	cmp	r9, r8
 8027d48:	f840 3b04 	str.w	r3, [r0], #4
 8027d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8027d50:	d2e8      	bcs.n	8027d24 <quorem+0xb0>
 8027d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027d5a:	b922      	cbnz	r2, 8027d66 <quorem+0xf2>
 8027d5c:	3b04      	subs	r3, #4
 8027d5e:	429d      	cmp	r5, r3
 8027d60:	461a      	mov	r2, r3
 8027d62:	d30a      	bcc.n	8027d7a <quorem+0x106>
 8027d64:	613c      	str	r4, [r7, #16]
 8027d66:	4630      	mov	r0, r6
 8027d68:	b003      	add	sp, #12
 8027d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d6e:	6812      	ldr	r2, [r2, #0]
 8027d70:	3b04      	subs	r3, #4
 8027d72:	2a00      	cmp	r2, #0
 8027d74:	d1cc      	bne.n	8027d10 <quorem+0x9c>
 8027d76:	3c01      	subs	r4, #1
 8027d78:	e7c7      	b.n	8027d0a <quorem+0x96>
 8027d7a:	6812      	ldr	r2, [r2, #0]
 8027d7c:	3b04      	subs	r3, #4
 8027d7e:	2a00      	cmp	r2, #0
 8027d80:	d1f0      	bne.n	8027d64 <quorem+0xf0>
 8027d82:	3c01      	subs	r4, #1
 8027d84:	e7eb      	b.n	8027d5e <quorem+0xea>
 8027d86:	2000      	movs	r0, #0
 8027d88:	e7ee      	b.n	8027d68 <quorem+0xf4>
 8027d8a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8027d8e:	Address 0x0000000008027d8e is out of bounds.


08027d90 <_dtoa_r>:
 8027d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d94:	ed2d 8b02 	vpush	{d8}
 8027d98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027d9a:	b091      	sub	sp, #68	; 0x44
 8027d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8027da0:	ec59 8b10 	vmov	r8, r9, d0
 8027da4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8027da6:	9106      	str	r1, [sp, #24]
 8027da8:	4606      	mov	r6, r0
 8027daa:	9208      	str	r2, [sp, #32]
 8027dac:	930c      	str	r3, [sp, #48]	; 0x30
 8027dae:	b975      	cbnz	r5, 8027dce <_dtoa_r+0x3e>
 8027db0:	2010      	movs	r0, #16
 8027db2:	f7fd fae9 	bl	8025388 <malloc>
 8027db6:	4602      	mov	r2, r0
 8027db8:	6270      	str	r0, [r6, #36]	; 0x24
 8027dba:	b920      	cbnz	r0, 8027dc6 <_dtoa_r+0x36>
 8027dbc:	4baa      	ldr	r3, [pc, #680]	; (8028068 <_dtoa_r+0x2d8>)
 8027dbe:	21ea      	movs	r1, #234	; 0xea
 8027dc0:	48aa      	ldr	r0, [pc, #680]	; (802806c <_dtoa_r+0x2dc>)
 8027dc2:	f7ff ff15 	bl	8027bf0 <__assert_func>
 8027dc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027dca:	6005      	str	r5, [r0, #0]
 8027dcc:	60c5      	str	r5, [r0, #12]
 8027dce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8027dd0:	6819      	ldr	r1, [r3, #0]
 8027dd2:	b151      	cbz	r1, 8027dea <_dtoa_r+0x5a>
 8027dd4:	685a      	ldr	r2, [r3, #4]
 8027dd6:	604a      	str	r2, [r1, #4]
 8027dd8:	2301      	movs	r3, #1
 8027dda:	4093      	lsls	r3, r2
 8027ddc:	608b      	str	r3, [r1, #8]
 8027dde:	4630      	mov	r0, r6
 8027de0:	f000 ffde 	bl	8028da0 <_Bfree>
 8027de4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8027de6:	2200      	movs	r2, #0
 8027de8:	601a      	str	r2, [r3, #0]
 8027dea:	f1b9 0300 	subs.w	r3, r9, #0
 8027dee:	bfbb      	ittet	lt
 8027df0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8027df4:	9303      	strlt	r3, [sp, #12]
 8027df6:	2300      	movge	r3, #0
 8027df8:	2201      	movlt	r2, #1
 8027dfa:	bfac      	ite	ge
 8027dfc:	6023      	strge	r3, [r4, #0]
 8027dfe:	6022      	strlt	r2, [r4, #0]
 8027e00:	4b9b      	ldr	r3, [pc, #620]	; (8028070 <_dtoa_r+0x2e0>)
 8027e02:	9c03      	ldr	r4, [sp, #12]
 8027e04:	43a3      	bics	r3, r4
 8027e06:	d11c      	bne.n	8027e42 <_dtoa_r+0xb2>
 8027e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027e0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8027e0e:	6013      	str	r3, [r2, #0]
 8027e10:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8027e14:	ea53 0308 	orrs.w	r3, r3, r8
 8027e18:	f000 84fd 	beq.w	8028816 <_dtoa_r+0xa86>
 8027e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027e1e:	b963      	cbnz	r3, 8027e3a <_dtoa_r+0xaa>
 8027e20:	4b94      	ldr	r3, [pc, #592]	; (8028074 <_dtoa_r+0x2e4>)
 8027e22:	e01f      	b.n	8027e64 <_dtoa_r+0xd4>
 8027e24:	4b94      	ldr	r3, [pc, #592]	; (8028078 <_dtoa_r+0x2e8>)
 8027e26:	9301      	str	r3, [sp, #4]
 8027e28:	3308      	adds	r3, #8
 8027e2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027e2c:	6013      	str	r3, [r2, #0]
 8027e2e:	9801      	ldr	r0, [sp, #4]
 8027e30:	b011      	add	sp, #68	; 0x44
 8027e32:	ecbd 8b02 	vpop	{d8}
 8027e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e3a:	4b8e      	ldr	r3, [pc, #568]	; (8028074 <_dtoa_r+0x2e4>)
 8027e3c:	9301      	str	r3, [sp, #4]
 8027e3e:	3303      	adds	r3, #3
 8027e40:	e7f3      	b.n	8027e2a <_dtoa_r+0x9a>
 8027e42:	ed9d 8b02 	vldr	d8, [sp, #8]
 8027e46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8027e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e4e:	d10b      	bne.n	8027e68 <_dtoa_r+0xd8>
 8027e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027e52:	2301      	movs	r3, #1
 8027e54:	6013      	str	r3, [r2, #0]
 8027e56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	f000 84d9 	beq.w	8028810 <_dtoa_r+0xa80>
 8027e5e:	4887      	ldr	r0, [pc, #540]	; (802807c <_dtoa_r+0x2ec>)
 8027e60:	6018      	str	r0, [r3, #0]
 8027e62:	1e43      	subs	r3, r0, #1
 8027e64:	9301      	str	r3, [sp, #4]
 8027e66:	e7e2      	b.n	8027e2e <_dtoa_r+0x9e>
 8027e68:	a90f      	add	r1, sp, #60	; 0x3c
 8027e6a:	aa0e      	add	r2, sp, #56	; 0x38
 8027e6c:	4630      	mov	r0, r6
 8027e6e:	eeb0 0b48 	vmov.f64	d0, d8
 8027e72:	f001 fa7d 	bl	8029370 <__d2b>
 8027e76:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8027e7a:	4605      	mov	r5, r0
 8027e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027e7e:	2900      	cmp	r1, #0
 8027e80:	d046      	beq.n	8027f10 <_dtoa_r+0x180>
 8027e82:	ee18 4a90 	vmov	r4, s17
 8027e86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8027e8a:	ec53 2b18 	vmov	r2, r3, d8
 8027e8e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8027e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027e96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8027e9a:	2400      	movs	r4, #0
 8027e9c:	ec43 2b16 	vmov	d6, r2, r3
 8027ea0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8027ea4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028050 <_dtoa_r+0x2c0>
 8027ea8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8027eac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8028058 <_dtoa_r+0x2c8>
 8027eb0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027eb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028060 <_dtoa_r+0x2d0>
 8027eb8:	ee07 1a90 	vmov	s15, r1
 8027ebc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8027ec0:	eeb0 7b46 	vmov.f64	d7, d6
 8027ec4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8027ec8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8027ecc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8027ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ed4:	ee16 ba90 	vmov	fp, s13
 8027ed8:	940a      	str	r4, [sp, #40]	; 0x28
 8027eda:	d508      	bpl.n	8027eee <_dtoa_r+0x15e>
 8027edc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8027ee0:	eeb4 6b47 	vcmp.f64	d6, d7
 8027ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ee8:	bf18      	it	ne
 8027eea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8027eee:	f1bb 0f16 	cmp.w	fp, #22
 8027ef2:	d82f      	bhi.n	8027f54 <_dtoa_r+0x1c4>
 8027ef4:	4b62      	ldr	r3, [pc, #392]	; (8028080 <_dtoa_r+0x2f0>)
 8027ef6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8027efa:	ed93 7b00 	vldr	d7, [r3]
 8027efe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f06:	d501      	bpl.n	8027f0c <_dtoa_r+0x17c>
 8027f08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027f0c:	2300      	movs	r3, #0
 8027f0e:	e022      	b.n	8027f56 <_dtoa_r+0x1c6>
 8027f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027f12:	4401      	add	r1, r0
 8027f14:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8027f18:	2b20      	cmp	r3, #32
 8027f1a:	bfc1      	itttt	gt
 8027f1c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8027f20:	fa04 f303 	lslgt.w	r3, r4, r3
 8027f24:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8027f28:	fa28 f804 	lsrgt.w	r8, r8, r4
 8027f2c:	bfd6      	itet	le
 8027f2e:	f1c3 0320 	rsble	r3, r3, #32
 8027f32:	ea43 0808 	orrgt.w	r8, r3, r8
 8027f36:	fa08 f803 	lslle.w	r8, r8, r3
 8027f3a:	ee07 8a90 	vmov	s15, r8
 8027f3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027f42:	3901      	subs	r1, #1
 8027f44:	ee17 4a90 	vmov	r4, s15
 8027f48:	ec53 2b17 	vmov	r2, r3, d7
 8027f4c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8027f50:	2401      	movs	r4, #1
 8027f52:	e7a3      	b.n	8027e9c <_dtoa_r+0x10c>
 8027f54:	2301      	movs	r3, #1
 8027f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8027f58:	1a43      	subs	r3, r0, r1
 8027f5a:	1e5a      	subs	r2, r3, #1
 8027f5c:	bf45      	ittet	mi
 8027f5e:	f1c3 0301 	rsbmi	r3, r3, #1
 8027f62:	9304      	strmi	r3, [sp, #16]
 8027f64:	2300      	movpl	r3, #0
 8027f66:	2300      	movmi	r3, #0
 8027f68:	9205      	str	r2, [sp, #20]
 8027f6a:	bf54      	ite	pl
 8027f6c:	9304      	strpl	r3, [sp, #16]
 8027f6e:	9305      	strmi	r3, [sp, #20]
 8027f70:	f1bb 0f00 	cmp.w	fp, #0
 8027f74:	db18      	blt.n	8027fa8 <_dtoa_r+0x218>
 8027f76:	9b05      	ldr	r3, [sp, #20]
 8027f78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8027f7c:	445b      	add	r3, fp
 8027f7e:	9305      	str	r3, [sp, #20]
 8027f80:	2300      	movs	r3, #0
 8027f82:	9a06      	ldr	r2, [sp, #24]
 8027f84:	2a09      	cmp	r2, #9
 8027f86:	d849      	bhi.n	802801c <_dtoa_r+0x28c>
 8027f88:	2a05      	cmp	r2, #5
 8027f8a:	bfc4      	itt	gt
 8027f8c:	3a04      	subgt	r2, #4
 8027f8e:	9206      	strgt	r2, [sp, #24]
 8027f90:	9a06      	ldr	r2, [sp, #24]
 8027f92:	f1a2 0202 	sub.w	r2, r2, #2
 8027f96:	bfcc      	ite	gt
 8027f98:	2400      	movgt	r4, #0
 8027f9a:	2401      	movle	r4, #1
 8027f9c:	2a03      	cmp	r2, #3
 8027f9e:	d848      	bhi.n	8028032 <_dtoa_r+0x2a2>
 8027fa0:	e8df f002 	tbb	[pc, r2]
 8027fa4:	3a2c2e0b 	.word	0x3a2c2e0b
 8027fa8:	9b04      	ldr	r3, [sp, #16]
 8027faa:	2200      	movs	r2, #0
 8027fac:	eba3 030b 	sub.w	r3, r3, fp
 8027fb0:	9304      	str	r3, [sp, #16]
 8027fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8027fb4:	f1cb 0300 	rsb	r3, fp, #0
 8027fb8:	e7e3      	b.n	8027f82 <_dtoa_r+0x1f2>
 8027fba:	2200      	movs	r2, #0
 8027fbc:	9207      	str	r2, [sp, #28]
 8027fbe:	9a08      	ldr	r2, [sp, #32]
 8027fc0:	2a00      	cmp	r2, #0
 8027fc2:	dc39      	bgt.n	8028038 <_dtoa_r+0x2a8>
 8027fc4:	f04f 0a01 	mov.w	sl, #1
 8027fc8:	46d1      	mov	r9, sl
 8027fca:	4652      	mov	r2, sl
 8027fcc:	f8cd a020 	str.w	sl, [sp, #32]
 8027fd0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8027fd2:	2100      	movs	r1, #0
 8027fd4:	6079      	str	r1, [r7, #4]
 8027fd6:	2004      	movs	r0, #4
 8027fd8:	f100 0c14 	add.w	ip, r0, #20
 8027fdc:	4594      	cmp	ip, r2
 8027fde:	6879      	ldr	r1, [r7, #4]
 8027fe0:	d92f      	bls.n	8028042 <_dtoa_r+0x2b2>
 8027fe2:	4630      	mov	r0, r6
 8027fe4:	930d      	str	r3, [sp, #52]	; 0x34
 8027fe6:	f000 fe9b 	bl	8028d20 <_Balloc>
 8027fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027fec:	9001      	str	r0, [sp, #4]
 8027fee:	4602      	mov	r2, r0
 8027ff0:	2800      	cmp	r0, #0
 8027ff2:	d149      	bne.n	8028088 <_dtoa_r+0x2f8>
 8027ff4:	4b23      	ldr	r3, [pc, #140]	; (8028084 <_dtoa_r+0x2f4>)
 8027ff6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8027ffa:	e6e1      	b.n	8027dc0 <_dtoa_r+0x30>
 8027ffc:	2201      	movs	r2, #1
 8027ffe:	e7dd      	b.n	8027fbc <_dtoa_r+0x22c>
 8028000:	2200      	movs	r2, #0
 8028002:	9207      	str	r2, [sp, #28]
 8028004:	9a08      	ldr	r2, [sp, #32]
 8028006:	eb0b 0a02 	add.w	sl, fp, r2
 802800a:	f10a 0901 	add.w	r9, sl, #1
 802800e:	464a      	mov	r2, r9
 8028010:	2a01      	cmp	r2, #1
 8028012:	bfb8      	it	lt
 8028014:	2201      	movlt	r2, #1
 8028016:	e7db      	b.n	8027fd0 <_dtoa_r+0x240>
 8028018:	2201      	movs	r2, #1
 802801a:	e7f2      	b.n	8028002 <_dtoa_r+0x272>
 802801c:	2401      	movs	r4, #1
 802801e:	2200      	movs	r2, #0
 8028020:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8028024:	f04f 3aff 	mov.w	sl, #4294967295
 8028028:	2100      	movs	r1, #0
 802802a:	46d1      	mov	r9, sl
 802802c:	2212      	movs	r2, #18
 802802e:	9108      	str	r1, [sp, #32]
 8028030:	e7ce      	b.n	8027fd0 <_dtoa_r+0x240>
 8028032:	2201      	movs	r2, #1
 8028034:	9207      	str	r2, [sp, #28]
 8028036:	e7f5      	b.n	8028024 <_dtoa_r+0x294>
 8028038:	f8dd a020 	ldr.w	sl, [sp, #32]
 802803c:	46d1      	mov	r9, sl
 802803e:	4652      	mov	r2, sl
 8028040:	e7c6      	b.n	8027fd0 <_dtoa_r+0x240>
 8028042:	3101      	adds	r1, #1
 8028044:	6079      	str	r1, [r7, #4]
 8028046:	0040      	lsls	r0, r0, #1
 8028048:	e7c6      	b.n	8027fd8 <_dtoa_r+0x248>
 802804a:	bf00      	nop
 802804c:	f3af 8000 	nop.w
 8028050:	636f4361 	.word	0x636f4361
 8028054:	3fd287a7 	.word	0x3fd287a7
 8028058:	8b60c8b3 	.word	0x8b60c8b3
 802805c:	3fc68a28 	.word	0x3fc68a28
 8028060:	509f79fb 	.word	0x509f79fb
 8028064:	3fd34413 	.word	0x3fd34413
 8028068:	08047214 	.word	0x08047214
 802806c:	08047792 	.word	0x08047792
 8028070:	7ff00000 	.word	0x7ff00000
 8028074:	0804778e 	.word	0x0804778e
 8028078:	08047785 	.word	0x08047785
 802807c:	08047972 	.word	0x08047972
 8028080:	08047888 	.word	0x08047888
 8028084:	080477ed 	.word	0x080477ed
 8028088:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802808a:	9901      	ldr	r1, [sp, #4]
 802808c:	6011      	str	r1, [r2, #0]
 802808e:	f1b9 0f0e 	cmp.w	r9, #14
 8028092:	d86c      	bhi.n	802816e <_dtoa_r+0x3de>
 8028094:	2c00      	cmp	r4, #0
 8028096:	d06a      	beq.n	802816e <_dtoa_r+0x3de>
 8028098:	f1bb 0f00 	cmp.w	fp, #0
 802809c:	f340 80a0 	ble.w	80281e0 <_dtoa_r+0x450>
 80280a0:	49c1      	ldr	r1, [pc, #772]	; (80283a8 <_dtoa_r+0x618>)
 80280a2:	f00b 020f 	and.w	r2, fp, #15
 80280a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80280aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80280ae:	ed92 7b00 	vldr	d7, [r2]
 80280b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80280b6:	f000 8087 	beq.w	80281c8 <_dtoa_r+0x438>
 80280ba:	4abc      	ldr	r2, [pc, #752]	; (80283ac <_dtoa_r+0x61c>)
 80280bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80280c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80280c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80280c8:	f001 010f 	and.w	r1, r1, #15
 80280cc:	2203      	movs	r2, #3
 80280ce:	48b7      	ldr	r0, [pc, #732]	; (80283ac <_dtoa_r+0x61c>)
 80280d0:	2900      	cmp	r1, #0
 80280d2:	d17b      	bne.n	80281cc <_dtoa_r+0x43c>
 80280d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80280d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80280dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80280e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80280e2:	2900      	cmp	r1, #0
 80280e4:	f000 80a2 	beq.w	802822c <_dtoa_r+0x49c>
 80280e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80280ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80280f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80280f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280f8:	f140 8098 	bpl.w	802822c <_dtoa_r+0x49c>
 80280fc:	f1b9 0f00 	cmp.w	r9, #0
 8028100:	f000 8094 	beq.w	802822c <_dtoa_r+0x49c>
 8028104:	f1ba 0f00 	cmp.w	sl, #0
 8028108:	dd2f      	ble.n	802816a <_dtoa_r+0x3da>
 802810a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802810e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028116:	f10b 37ff 	add.w	r7, fp, #4294967295
 802811a:	3201      	adds	r2, #1
 802811c:	4650      	mov	r0, sl
 802811e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8028122:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8028126:	ee07 2a90 	vmov	s15, r2
 802812a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802812e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8028132:	ee15 4a90 	vmov	r4, s11
 8028136:	ec52 1b15 	vmov	r1, r2, d5
 802813a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802813e:	2800      	cmp	r0, #0
 8028140:	d177      	bne.n	8028232 <_dtoa_r+0x4a2>
 8028142:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8028146:	ee36 6b47 	vsub.f64	d6, d6, d7
 802814a:	ec42 1b17 	vmov	d7, r1, r2
 802814e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028156:	f300 8263 	bgt.w	8028620 <_dtoa_r+0x890>
 802815a:	eeb1 7b47 	vneg.f64	d7, d7
 802815e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028166:	f100 8258 	bmi.w	802861a <_dtoa_r+0x88a>
 802816a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802816e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028170:	2a00      	cmp	r2, #0
 8028172:	f2c0 811d 	blt.w	80283b0 <_dtoa_r+0x620>
 8028176:	f1bb 0f0e 	cmp.w	fp, #14
 802817a:	f300 8119 	bgt.w	80283b0 <_dtoa_r+0x620>
 802817e:	4b8a      	ldr	r3, [pc, #552]	; (80283a8 <_dtoa_r+0x618>)
 8028180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028184:	ed93 6b00 	vldr	d6, [r3]
 8028188:	9b08      	ldr	r3, [sp, #32]
 802818a:	2b00      	cmp	r3, #0
 802818c:	f280 80b7 	bge.w	80282fe <_dtoa_r+0x56e>
 8028190:	f1b9 0f00 	cmp.w	r9, #0
 8028194:	f300 80b3 	bgt.w	80282fe <_dtoa_r+0x56e>
 8028198:	f040 823f 	bne.w	802861a <_dtoa_r+0x88a>
 802819c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80281a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80281a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80281a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80281ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281b0:	464c      	mov	r4, r9
 80281b2:	464f      	mov	r7, r9
 80281b4:	f280 8215 	bge.w	80285e2 <_dtoa_r+0x852>
 80281b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80281bc:	2331      	movs	r3, #49	; 0x31
 80281be:	f808 3b01 	strb.w	r3, [r8], #1
 80281c2:	f10b 0b01 	add.w	fp, fp, #1
 80281c6:	e211      	b.n	80285ec <_dtoa_r+0x85c>
 80281c8:	2202      	movs	r2, #2
 80281ca:	e780      	b.n	80280ce <_dtoa_r+0x33e>
 80281cc:	07cc      	lsls	r4, r1, #31
 80281ce:	d504      	bpl.n	80281da <_dtoa_r+0x44a>
 80281d0:	ed90 6b00 	vldr	d6, [r0]
 80281d4:	3201      	adds	r2, #1
 80281d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80281da:	1049      	asrs	r1, r1, #1
 80281dc:	3008      	adds	r0, #8
 80281de:	e777      	b.n	80280d0 <_dtoa_r+0x340>
 80281e0:	d022      	beq.n	8028228 <_dtoa_r+0x498>
 80281e2:	f1cb 0100 	rsb	r1, fp, #0
 80281e6:	4a70      	ldr	r2, [pc, #448]	; (80283a8 <_dtoa_r+0x618>)
 80281e8:	f001 000f 	and.w	r0, r1, #15
 80281ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80281f0:	ed92 7b00 	vldr	d7, [r2]
 80281f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80281f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80281fc:	486b      	ldr	r0, [pc, #428]	; (80283ac <_dtoa_r+0x61c>)
 80281fe:	1109      	asrs	r1, r1, #4
 8028200:	2400      	movs	r4, #0
 8028202:	2202      	movs	r2, #2
 8028204:	b929      	cbnz	r1, 8028212 <_dtoa_r+0x482>
 8028206:	2c00      	cmp	r4, #0
 8028208:	f43f af6a 	beq.w	80280e0 <_dtoa_r+0x350>
 802820c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028210:	e766      	b.n	80280e0 <_dtoa_r+0x350>
 8028212:	07cf      	lsls	r7, r1, #31
 8028214:	d505      	bpl.n	8028222 <_dtoa_r+0x492>
 8028216:	ed90 6b00 	vldr	d6, [r0]
 802821a:	3201      	adds	r2, #1
 802821c:	2401      	movs	r4, #1
 802821e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028222:	1049      	asrs	r1, r1, #1
 8028224:	3008      	adds	r0, #8
 8028226:	e7ed      	b.n	8028204 <_dtoa_r+0x474>
 8028228:	2202      	movs	r2, #2
 802822a:	e759      	b.n	80280e0 <_dtoa_r+0x350>
 802822c:	465f      	mov	r7, fp
 802822e:	4648      	mov	r0, r9
 8028230:	e775      	b.n	802811e <_dtoa_r+0x38e>
 8028232:	ec42 1b17 	vmov	d7, r1, r2
 8028236:	4a5c      	ldr	r2, [pc, #368]	; (80283a8 <_dtoa_r+0x618>)
 8028238:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802823c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8028240:	9a01      	ldr	r2, [sp, #4]
 8028242:	1814      	adds	r4, r2, r0
 8028244:	9a07      	ldr	r2, [sp, #28]
 8028246:	b352      	cbz	r2, 802829e <_dtoa_r+0x50e>
 8028248:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802824c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8028250:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028254:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8028258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802825c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028260:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028264:	ee14 2a90 	vmov	r2, s9
 8028268:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802826c:	3230      	adds	r2, #48	; 0x30
 802826e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028272:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802827a:	f808 2b01 	strb.w	r2, [r8], #1
 802827e:	d439      	bmi.n	80282f4 <_dtoa_r+0x564>
 8028280:	ee32 5b46 	vsub.f64	d5, d2, d6
 8028284:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802828c:	d472      	bmi.n	8028374 <_dtoa_r+0x5e4>
 802828e:	45a0      	cmp	r8, r4
 8028290:	f43f af6b 	beq.w	802816a <_dtoa_r+0x3da>
 8028294:	ee27 7b03 	vmul.f64	d7, d7, d3
 8028298:	ee26 6b03 	vmul.f64	d6, d6, d3
 802829c:	e7e0      	b.n	8028260 <_dtoa_r+0x4d0>
 802829e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80282a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80282a6:	4621      	mov	r1, r4
 80282a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80282ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80282b0:	ee14 2a90 	vmov	r2, s9
 80282b4:	3230      	adds	r2, #48	; 0x30
 80282b6:	f808 2b01 	strb.w	r2, [r8], #1
 80282ba:	45a0      	cmp	r8, r4
 80282bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80282c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80282c4:	d118      	bne.n	80282f8 <_dtoa_r+0x568>
 80282c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80282ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80282ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80282d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282d6:	dc4d      	bgt.n	8028374 <_dtoa_r+0x5e4>
 80282d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80282dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80282e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282e4:	f57f af41 	bpl.w	802816a <_dtoa_r+0x3da>
 80282e8:	4688      	mov	r8, r1
 80282ea:	3901      	subs	r1, #1
 80282ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80282f0:	2b30      	cmp	r3, #48	; 0x30
 80282f2:	d0f9      	beq.n	80282e8 <_dtoa_r+0x558>
 80282f4:	46bb      	mov	fp, r7
 80282f6:	e02a      	b.n	802834e <_dtoa_r+0x5be>
 80282f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80282fc:	e7d6      	b.n	80282ac <_dtoa_r+0x51c>
 80282fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028302:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8028306:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802830a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802830e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8028312:	ee15 3a10 	vmov	r3, s10
 8028316:	3330      	adds	r3, #48	; 0x30
 8028318:	f808 3b01 	strb.w	r3, [r8], #1
 802831c:	9b01      	ldr	r3, [sp, #4]
 802831e:	eba8 0303 	sub.w	r3, r8, r3
 8028322:	4599      	cmp	r9, r3
 8028324:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028328:	eea3 7b46 	vfms.f64	d7, d3, d6
 802832c:	d133      	bne.n	8028396 <_dtoa_r+0x606>
 802832e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8028332:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802833a:	dc1a      	bgt.n	8028372 <_dtoa_r+0x5e2>
 802833c:	eeb4 7b46 	vcmp.f64	d7, d6
 8028340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028344:	d103      	bne.n	802834e <_dtoa_r+0x5be>
 8028346:	ee15 3a10 	vmov	r3, s10
 802834a:	07d9      	lsls	r1, r3, #31
 802834c:	d411      	bmi.n	8028372 <_dtoa_r+0x5e2>
 802834e:	4629      	mov	r1, r5
 8028350:	4630      	mov	r0, r6
 8028352:	f000 fd25 	bl	8028da0 <_Bfree>
 8028356:	2300      	movs	r3, #0
 8028358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802835a:	f888 3000 	strb.w	r3, [r8]
 802835e:	f10b 0301 	add.w	r3, fp, #1
 8028362:	6013      	str	r3, [r2, #0]
 8028364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028366:	2b00      	cmp	r3, #0
 8028368:	f43f ad61 	beq.w	8027e2e <_dtoa_r+0x9e>
 802836c:	f8c3 8000 	str.w	r8, [r3]
 8028370:	e55d      	b.n	8027e2e <_dtoa_r+0x9e>
 8028372:	465f      	mov	r7, fp
 8028374:	4643      	mov	r3, r8
 8028376:	4698      	mov	r8, r3
 8028378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802837c:	2a39      	cmp	r2, #57	; 0x39
 802837e:	d106      	bne.n	802838e <_dtoa_r+0x5fe>
 8028380:	9a01      	ldr	r2, [sp, #4]
 8028382:	429a      	cmp	r2, r3
 8028384:	d1f7      	bne.n	8028376 <_dtoa_r+0x5e6>
 8028386:	9901      	ldr	r1, [sp, #4]
 8028388:	2230      	movs	r2, #48	; 0x30
 802838a:	3701      	adds	r7, #1
 802838c:	700a      	strb	r2, [r1, #0]
 802838e:	781a      	ldrb	r2, [r3, #0]
 8028390:	3201      	adds	r2, #1
 8028392:	701a      	strb	r2, [r3, #0]
 8028394:	e7ae      	b.n	80282f4 <_dtoa_r+0x564>
 8028396:	ee27 7b04 	vmul.f64	d7, d7, d4
 802839a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283a2:	d1b2      	bne.n	802830a <_dtoa_r+0x57a>
 80283a4:	e7d3      	b.n	802834e <_dtoa_r+0x5be>
 80283a6:	bf00      	nop
 80283a8:	08047888 	.word	0x08047888
 80283ac:	08047860 	.word	0x08047860
 80283b0:	9907      	ldr	r1, [sp, #28]
 80283b2:	2900      	cmp	r1, #0
 80283b4:	f000 80d0 	beq.w	8028558 <_dtoa_r+0x7c8>
 80283b8:	9906      	ldr	r1, [sp, #24]
 80283ba:	2901      	cmp	r1, #1
 80283bc:	f300 80b4 	bgt.w	8028528 <_dtoa_r+0x798>
 80283c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80283c2:	2900      	cmp	r1, #0
 80283c4:	f000 80ac 	beq.w	8028520 <_dtoa_r+0x790>
 80283c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80283cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80283d0:	461c      	mov	r4, r3
 80283d2:	930a      	str	r3, [sp, #40]	; 0x28
 80283d4:	9b04      	ldr	r3, [sp, #16]
 80283d6:	4413      	add	r3, r2
 80283d8:	9304      	str	r3, [sp, #16]
 80283da:	9b05      	ldr	r3, [sp, #20]
 80283dc:	2101      	movs	r1, #1
 80283de:	4413      	add	r3, r2
 80283e0:	4630      	mov	r0, r6
 80283e2:	9305      	str	r3, [sp, #20]
 80283e4:	f000 fd94 	bl	8028f10 <__i2b>
 80283e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80283ea:	4607      	mov	r7, r0
 80283ec:	f1b8 0f00 	cmp.w	r8, #0
 80283f0:	dd0d      	ble.n	802840e <_dtoa_r+0x67e>
 80283f2:	9a05      	ldr	r2, [sp, #20]
 80283f4:	2a00      	cmp	r2, #0
 80283f6:	dd0a      	ble.n	802840e <_dtoa_r+0x67e>
 80283f8:	4542      	cmp	r2, r8
 80283fa:	9904      	ldr	r1, [sp, #16]
 80283fc:	bfa8      	it	ge
 80283fe:	4642      	movge	r2, r8
 8028400:	1a89      	subs	r1, r1, r2
 8028402:	9104      	str	r1, [sp, #16]
 8028404:	9905      	ldr	r1, [sp, #20]
 8028406:	eba8 0802 	sub.w	r8, r8, r2
 802840a:	1a8a      	subs	r2, r1, r2
 802840c:	9205      	str	r2, [sp, #20]
 802840e:	b303      	cbz	r3, 8028452 <_dtoa_r+0x6c2>
 8028410:	9a07      	ldr	r2, [sp, #28]
 8028412:	2a00      	cmp	r2, #0
 8028414:	f000 80a5 	beq.w	8028562 <_dtoa_r+0x7d2>
 8028418:	2c00      	cmp	r4, #0
 802841a:	dd13      	ble.n	8028444 <_dtoa_r+0x6b4>
 802841c:	4639      	mov	r1, r7
 802841e:	4622      	mov	r2, r4
 8028420:	4630      	mov	r0, r6
 8028422:	930d      	str	r3, [sp, #52]	; 0x34
 8028424:	f000 fe34 	bl	8029090 <__pow5mult>
 8028428:	462a      	mov	r2, r5
 802842a:	4601      	mov	r1, r0
 802842c:	4607      	mov	r7, r0
 802842e:	4630      	mov	r0, r6
 8028430:	f000 fd84 	bl	8028f3c <__multiply>
 8028434:	4629      	mov	r1, r5
 8028436:	900a      	str	r0, [sp, #40]	; 0x28
 8028438:	4630      	mov	r0, r6
 802843a:	f000 fcb1 	bl	8028da0 <_Bfree>
 802843e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028442:	4615      	mov	r5, r2
 8028444:	1b1a      	subs	r2, r3, r4
 8028446:	d004      	beq.n	8028452 <_dtoa_r+0x6c2>
 8028448:	4629      	mov	r1, r5
 802844a:	4630      	mov	r0, r6
 802844c:	f000 fe20 	bl	8029090 <__pow5mult>
 8028450:	4605      	mov	r5, r0
 8028452:	2101      	movs	r1, #1
 8028454:	4630      	mov	r0, r6
 8028456:	f000 fd5b 	bl	8028f10 <__i2b>
 802845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802845c:	2b00      	cmp	r3, #0
 802845e:	4604      	mov	r4, r0
 8028460:	f340 8081 	ble.w	8028566 <_dtoa_r+0x7d6>
 8028464:	461a      	mov	r2, r3
 8028466:	4601      	mov	r1, r0
 8028468:	4630      	mov	r0, r6
 802846a:	f000 fe11 	bl	8029090 <__pow5mult>
 802846e:	9b06      	ldr	r3, [sp, #24]
 8028470:	2b01      	cmp	r3, #1
 8028472:	4604      	mov	r4, r0
 8028474:	dd7a      	ble.n	802856c <_dtoa_r+0x7dc>
 8028476:	2300      	movs	r3, #0
 8028478:	930a      	str	r3, [sp, #40]	; 0x28
 802847a:	6922      	ldr	r2, [r4, #16]
 802847c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028480:	6910      	ldr	r0, [r2, #16]
 8028482:	f000 fcf5 	bl	8028e70 <__hi0bits>
 8028486:	f1c0 0020 	rsb	r0, r0, #32
 802848a:	9b05      	ldr	r3, [sp, #20]
 802848c:	4418      	add	r0, r3
 802848e:	f010 001f 	ands.w	r0, r0, #31
 8028492:	f000 808c 	beq.w	80285ae <_dtoa_r+0x81e>
 8028496:	f1c0 0220 	rsb	r2, r0, #32
 802849a:	2a04      	cmp	r2, #4
 802849c:	f340 8085 	ble.w	80285aa <_dtoa_r+0x81a>
 80284a0:	f1c0 001c 	rsb	r0, r0, #28
 80284a4:	9b04      	ldr	r3, [sp, #16]
 80284a6:	4403      	add	r3, r0
 80284a8:	9304      	str	r3, [sp, #16]
 80284aa:	9b05      	ldr	r3, [sp, #20]
 80284ac:	4403      	add	r3, r0
 80284ae:	4480      	add	r8, r0
 80284b0:	9305      	str	r3, [sp, #20]
 80284b2:	9b04      	ldr	r3, [sp, #16]
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	dd05      	ble.n	80284c4 <_dtoa_r+0x734>
 80284b8:	4629      	mov	r1, r5
 80284ba:	461a      	mov	r2, r3
 80284bc:	4630      	mov	r0, r6
 80284be:	f000 fe41 	bl	8029144 <__lshift>
 80284c2:	4605      	mov	r5, r0
 80284c4:	9b05      	ldr	r3, [sp, #20]
 80284c6:	2b00      	cmp	r3, #0
 80284c8:	dd05      	ble.n	80284d6 <_dtoa_r+0x746>
 80284ca:	4621      	mov	r1, r4
 80284cc:	461a      	mov	r2, r3
 80284ce:	4630      	mov	r0, r6
 80284d0:	f000 fe38 	bl	8029144 <__lshift>
 80284d4:	4604      	mov	r4, r0
 80284d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80284d8:	2b00      	cmp	r3, #0
 80284da:	d06a      	beq.n	80285b2 <_dtoa_r+0x822>
 80284dc:	4621      	mov	r1, r4
 80284de:	4628      	mov	r0, r5
 80284e0:	f000 fea0 	bl	8029224 <__mcmp>
 80284e4:	2800      	cmp	r0, #0
 80284e6:	da64      	bge.n	80285b2 <_dtoa_r+0x822>
 80284e8:	2300      	movs	r3, #0
 80284ea:	4629      	mov	r1, r5
 80284ec:	220a      	movs	r2, #10
 80284ee:	4630      	mov	r0, r6
 80284f0:	f000 fc78 	bl	8028de4 <__multadd>
 80284f4:	9b07      	ldr	r3, [sp, #28]
 80284f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80284fa:	4605      	mov	r5, r0
 80284fc:	2b00      	cmp	r3, #0
 80284fe:	f000 8191 	beq.w	8028824 <_dtoa_r+0xa94>
 8028502:	4639      	mov	r1, r7
 8028504:	2300      	movs	r3, #0
 8028506:	220a      	movs	r2, #10
 8028508:	4630      	mov	r0, r6
 802850a:	f000 fc6b 	bl	8028de4 <__multadd>
 802850e:	f1ba 0f00 	cmp.w	sl, #0
 8028512:	4607      	mov	r7, r0
 8028514:	f300 808d 	bgt.w	8028632 <_dtoa_r+0x8a2>
 8028518:	9b06      	ldr	r3, [sp, #24]
 802851a:	2b02      	cmp	r3, #2
 802851c:	dc50      	bgt.n	80285c0 <_dtoa_r+0x830>
 802851e:	e088      	b.n	8028632 <_dtoa_r+0x8a2>
 8028520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028522:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8028526:	e751      	b.n	80283cc <_dtoa_r+0x63c>
 8028528:	f109 34ff 	add.w	r4, r9, #4294967295
 802852c:	42a3      	cmp	r3, r4
 802852e:	bfbf      	itttt	lt
 8028530:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8028532:	1ae3      	sublt	r3, r4, r3
 8028534:	18d2      	addlt	r2, r2, r3
 8028536:	9209      	strlt	r2, [sp, #36]	; 0x24
 8028538:	bfb6      	itet	lt
 802853a:	4623      	movlt	r3, r4
 802853c:	1b1c      	subge	r4, r3, r4
 802853e:	2400      	movlt	r4, #0
 8028540:	f1b9 0f00 	cmp.w	r9, #0
 8028544:	bfb5      	itete	lt
 8028546:	9a04      	ldrlt	r2, [sp, #16]
 8028548:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 802854c:	eba2 0809 	sublt.w	r8, r2, r9
 8028550:	464a      	movge	r2, r9
 8028552:	bfb8      	it	lt
 8028554:	2200      	movlt	r2, #0
 8028556:	e73c      	b.n	80283d2 <_dtoa_r+0x642>
 8028558:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802855c:	9f07      	ldr	r7, [sp, #28]
 802855e:	461c      	mov	r4, r3
 8028560:	e744      	b.n	80283ec <_dtoa_r+0x65c>
 8028562:	461a      	mov	r2, r3
 8028564:	e770      	b.n	8028448 <_dtoa_r+0x6b8>
 8028566:	9b06      	ldr	r3, [sp, #24]
 8028568:	2b01      	cmp	r3, #1
 802856a:	dc18      	bgt.n	802859e <_dtoa_r+0x80e>
 802856c:	9b02      	ldr	r3, [sp, #8]
 802856e:	b9b3      	cbnz	r3, 802859e <_dtoa_r+0x80e>
 8028570:	9b03      	ldr	r3, [sp, #12]
 8028572:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8028576:	b9a2      	cbnz	r2, 80285a2 <_dtoa_r+0x812>
 8028578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802857c:	0d12      	lsrs	r2, r2, #20
 802857e:	0512      	lsls	r2, r2, #20
 8028580:	b18a      	cbz	r2, 80285a6 <_dtoa_r+0x816>
 8028582:	9b04      	ldr	r3, [sp, #16]
 8028584:	3301      	adds	r3, #1
 8028586:	9304      	str	r3, [sp, #16]
 8028588:	9b05      	ldr	r3, [sp, #20]
 802858a:	3301      	adds	r3, #1
 802858c:	9305      	str	r3, [sp, #20]
 802858e:	2301      	movs	r3, #1
 8028590:	930a      	str	r3, [sp, #40]	; 0x28
 8028592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028594:	2b00      	cmp	r3, #0
 8028596:	f47f af70 	bne.w	802847a <_dtoa_r+0x6ea>
 802859a:	2001      	movs	r0, #1
 802859c:	e775      	b.n	802848a <_dtoa_r+0x6fa>
 802859e:	2300      	movs	r3, #0
 80285a0:	e7f6      	b.n	8028590 <_dtoa_r+0x800>
 80285a2:	9b02      	ldr	r3, [sp, #8]
 80285a4:	e7f4      	b.n	8028590 <_dtoa_r+0x800>
 80285a6:	920a      	str	r2, [sp, #40]	; 0x28
 80285a8:	e7f3      	b.n	8028592 <_dtoa_r+0x802>
 80285aa:	d082      	beq.n	80284b2 <_dtoa_r+0x722>
 80285ac:	4610      	mov	r0, r2
 80285ae:	301c      	adds	r0, #28
 80285b0:	e778      	b.n	80284a4 <_dtoa_r+0x714>
 80285b2:	f1b9 0f00 	cmp.w	r9, #0
 80285b6:	dc37      	bgt.n	8028628 <_dtoa_r+0x898>
 80285b8:	9b06      	ldr	r3, [sp, #24]
 80285ba:	2b02      	cmp	r3, #2
 80285bc:	dd34      	ble.n	8028628 <_dtoa_r+0x898>
 80285be:	46ca      	mov	sl, r9
 80285c0:	f1ba 0f00 	cmp.w	sl, #0
 80285c4:	d10d      	bne.n	80285e2 <_dtoa_r+0x852>
 80285c6:	4621      	mov	r1, r4
 80285c8:	4653      	mov	r3, sl
 80285ca:	2205      	movs	r2, #5
 80285cc:	4630      	mov	r0, r6
 80285ce:	f000 fc09 	bl	8028de4 <__multadd>
 80285d2:	4601      	mov	r1, r0
 80285d4:	4604      	mov	r4, r0
 80285d6:	4628      	mov	r0, r5
 80285d8:	f000 fe24 	bl	8029224 <__mcmp>
 80285dc:	2800      	cmp	r0, #0
 80285de:	f73f adeb 	bgt.w	80281b8 <_dtoa_r+0x428>
 80285e2:	9b08      	ldr	r3, [sp, #32]
 80285e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80285e8:	ea6f 0b03 	mvn.w	fp, r3
 80285ec:	f04f 0900 	mov.w	r9, #0
 80285f0:	4621      	mov	r1, r4
 80285f2:	4630      	mov	r0, r6
 80285f4:	f000 fbd4 	bl	8028da0 <_Bfree>
 80285f8:	2f00      	cmp	r7, #0
 80285fa:	f43f aea8 	beq.w	802834e <_dtoa_r+0x5be>
 80285fe:	f1b9 0f00 	cmp.w	r9, #0
 8028602:	d005      	beq.n	8028610 <_dtoa_r+0x880>
 8028604:	45b9      	cmp	r9, r7
 8028606:	d003      	beq.n	8028610 <_dtoa_r+0x880>
 8028608:	4649      	mov	r1, r9
 802860a:	4630      	mov	r0, r6
 802860c:	f000 fbc8 	bl	8028da0 <_Bfree>
 8028610:	4639      	mov	r1, r7
 8028612:	4630      	mov	r0, r6
 8028614:	f000 fbc4 	bl	8028da0 <_Bfree>
 8028618:	e699      	b.n	802834e <_dtoa_r+0x5be>
 802861a:	2400      	movs	r4, #0
 802861c:	4627      	mov	r7, r4
 802861e:	e7e0      	b.n	80285e2 <_dtoa_r+0x852>
 8028620:	46bb      	mov	fp, r7
 8028622:	4604      	mov	r4, r0
 8028624:	4607      	mov	r7, r0
 8028626:	e5c7      	b.n	80281b8 <_dtoa_r+0x428>
 8028628:	9b07      	ldr	r3, [sp, #28]
 802862a:	46ca      	mov	sl, r9
 802862c:	2b00      	cmp	r3, #0
 802862e:	f000 8100 	beq.w	8028832 <_dtoa_r+0xaa2>
 8028632:	f1b8 0f00 	cmp.w	r8, #0
 8028636:	dd05      	ble.n	8028644 <_dtoa_r+0x8b4>
 8028638:	4639      	mov	r1, r7
 802863a:	4642      	mov	r2, r8
 802863c:	4630      	mov	r0, r6
 802863e:	f000 fd81 	bl	8029144 <__lshift>
 8028642:	4607      	mov	r7, r0
 8028644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028646:	2b00      	cmp	r3, #0
 8028648:	d05d      	beq.n	8028706 <_dtoa_r+0x976>
 802864a:	6879      	ldr	r1, [r7, #4]
 802864c:	4630      	mov	r0, r6
 802864e:	f000 fb67 	bl	8028d20 <_Balloc>
 8028652:	4680      	mov	r8, r0
 8028654:	b928      	cbnz	r0, 8028662 <_dtoa_r+0x8d2>
 8028656:	4b82      	ldr	r3, [pc, #520]	; (8028860 <_dtoa_r+0xad0>)
 8028658:	4602      	mov	r2, r0
 802865a:	f240 21ea 	movw	r1, #746	; 0x2ea
 802865e:	f7ff bbaf 	b.w	8027dc0 <_dtoa_r+0x30>
 8028662:	693a      	ldr	r2, [r7, #16]
 8028664:	3202      	adds	r2, #2
 8028666:	0092      	lsls	r2, r2, #2
 8028668:	f107 010c 	add.w	r1, r7, #12
 802866c:	300c      	adds	r0, #12
 802866e:	f7fc feab 	bl	80253c8 <memcpy>
 8028672:	2201      	movs	r2, #1
 8028674:	4641      	mov	r1, r8
 8028676:	4630      	mov	r0, r6
 8028678:	f000 fd64 	bl	8029144 <__lshift>
 802867c:	9b01      	ldr	r3, [sp, #4]
 802867e:	3301      	adds	r3, #1
 8028680:	9304      	str	r3, [sp, #16]
 8028682:	9b01      	ldr	r3, [sp, #4]
 8028684:	4453      	add	r3, sl
 8028686:	9308      	str	r3, [sp, #32]
 8028688:	9b02      	ldr	r3, [sp, #8]
 802868a:	f003 0301 	and.w	r3, r3, #1
 802868e:	46b9      	mov	r9, r7
 8028690:	9307      	str	r3, [sp, #28]
 8028692:	4607      	mov	r7, r0
 8028694:	9b04      	ldr	r3, [sp, #16]
 8028696:	4621      	mov	r1, r4
 8028698:	3b01      	subs	r3, #1
 802869a:	4628      	mov	r0, r5
 802869c:	9302      	str	r3, [sp, #8]
 802869e:	f7ff fae9 	bl	8027c74 <quorem>
 80286a2:	4603      	mov	r3, r0
 80286a4:	3330      	adds	r3, #48	; 0x30
 80286a6:	9005      	str	r0, [sp, #20]
 80286a8:	4649      	mov	r1, r9
 80286aa:	4628      	mov	r0, r5
 80286ac:	9309      	str	r3, [sp, #36]	; 0x24
 80286ae:	f000 fdb9 	bl	8029224 <__mcmp>
 80286b2:	463a      	mov	r2, r7
 80286b4:	4682      	mov	sl, r0
 80286b6:	4621      	mov	r1, r4
 80286b8:	4630      	mov	r0, r6
 80286ba:	f000 fdcf 	bl	802925c <__mdiff>
 80286be:	68c2      	ldr	r2, [r0, #12]
 80286c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286c2:	4680      	mov	r8, r0
 80286c4:	bb0a      	cbnz	r2, 802870a <_dtoa_r+0x97a>
 80286c6:	4601      	mov	r1, r0
 80286c8:	4628      	mov	r0, r5
 80286ca:	f000 fdab 	bl	8029224 <__mcmp>
 80286ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286d0:	4602      	mov	r2, r0
 80286d2:	4641      	mov	r1, r8
 80286d4:	4630      	mov	r0, r6
 80286d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80286da:	f000 fb61 	bl	8028da0 <_Bfree>
 80286de:	9b06      	ldr	r3, [sp, #24]
 80286e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80286e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80286e6:	ea43 0102 	orr.w	r1, r3, r2
 80286ea:	9b07      	ldr	r3, [sp, #28]
 80286ec:	430b      	orrs	r3, r1
 80286ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286f0:	d10d      	bne.n	802870e <_dtoa_r+0x97e>
 80286f2:	2b39      	cmp	r3, #57	; 0x39
 80286f4:	d029      	beq.n	802874a <_dtoa_r+0x9ba>
 80286f6:	f1ba 0f00 	cmp.w	sl, #0
 80286fa:	dd01      	ble.n	8028700 <_dtoa_r+0x970>
 80286fc:	9b05      	ldr	r3, [sp, #20]
 80286fe:	3331      	adds	r3, #49	; 0x31
 8028700:	9a02      	ldr	r2, [sp, #8]
 8028702:	7013      	strb	r3, [r2, #0]
 8028704:	e774      	b.n	80285f0 <_dtoa_r+0x860>
 8028706:	4638      	mov	r0, r7
 8028708:	e7b8      	b.n	802867c <_dtoa_r+0x8ec>
 802870a:	2201      	movs	r2, #1
 802870c:	e7e1      	b.n	80286d2 <_dtoa_r+0x942>
 802870e:	f1ba 0f00 	cmp.w	sl, #0
 8028712:	db06      	blt.n	8028722 <_dtoa_r+0x992>
 8028714:	9906      	ldr	r1, [sp, #24]
 8028716:	ea41 0a0a 	orr.w	sl, r1, sl
 802871a:	9907      	ldr	r1, [sp, #28]
 802871c:	ea5a 0101 	orrs.w	r1, sl, r1
 8028720:	d120      	bne.n	8028764 <_dtoa_r+0x9d4>
 8028722:	2a00      	cmp	r2, #0
 8028724:	ddec      	ble.n	8028700 <_dtoa_r+0x970>
 8028726:	4629      	mov	r1, r5
 8028728:	2201      	movs	r2, #1
 802872a:	4630      	mov	r0, r6
 802872c:	9304      	str	r3, [sp, #16]
 802872e:	f000 fd09 	bl	8029144 <__lshift>
 8028732:	4621      	mov	r1, r4
 8028734:	4605      	mov	r5, r0
 8028736:	f000 fd75 	bl	8029224 <__mcmp>
 802873a:	2800      	cmp	r0, #0
 802873c:	9b04      	ldr	r3, [sp, #16]
 802873e:	dc02      	bgt.n	8028746 <_dtoa_r+0x9b6>
 8028740:	d1de      	bne.n	8028700 <_dtoa_r+0x970>
 8028742:	07da      	lsls	r2, r3, #31
 8028744:	d5dc      	bpl.n	8028700 <_dtoa_r+0x970>
 8028746:	2b39      	cmp	r3, #57	; 0x39
 8028748:	d1d8      	bne.n	80286fc <_dtoa_r+0x96c>
 802874a:	9a02      	ldr	r2, [sp, #8]
 802874c:	2339      	movs	r3, #57	; 0x39
 802874e:	7013      	strb	r3, [r2, #0]
 8028750:	4643      	mov	r3, r8
 8028752:	4698      	mov	r8, r3
 8028754:	3b01      	subs	r3, #1
 8028756:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802875a:	2a39      	cmp	r2, #57	; 0x39
 802875c:	d051      	beq.n	8028802 <_dtoa_r+0xa72>
 802875e:	3201      	adds	r2, #1
 8028760:	701a      	strb	r2, [r3, #0]
 8028762:	e745      	b.n	80285f0 <_dtoa_r+0x860>
 8028764:	2a00      	cmp	r2, #0
 8028766:	dd03      	ble.n	8028770 <_dtoa_r+0x9e0>
 8028768:	2b39      	cmp	r3, #57	; 0x39
 802876a:	d0ee      	beq.n	802874a <_dtoa_r+0x9ba>
 802876c:	3301      	adds	r3, #1
 802876e:	e7c7      	b.n	8028700 <_dtoa_r+0x970>
 8028770:	9a04      	ldr	r2, [sp, #16]
 8028772:	9908      	ldr	r1, [sp, #32]
 8028774:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028778:	428a      	cmp	r2, r1
 802877a:	d02b      	beq.n	80287d4 <_dtoa_r+0xa44>
 802877c:	4629      	mov	r1, r5
 802877e:	2300      	movs	r3, #0
 8028780:	220a      	movs	r2, #10
 8028782:	4630      	mov	r0, r6
 8028784:	f000 fb2e 	bl	8028de4 <__multadd>
 8028788:	45b9      	cmp	r9, r7
 802878a:	4605      	mov	r5, r0
 802878c:	f04f 0300 	mov.w	r3, #0
 8028790:	f04f 020a 	mov.w	r2, #10
 8028794:	4649      	mov	r1, r9
 8028796:	4630      	mov	r0, r6
 8028798:	d107      	bne.n	80287aa <_dtoa_r+0xa1a>
 802879a:	f000 fb23 	bl	8028de4 <__multadd>
 802879e:	4681      	mov	r9, r0
 80287a0:	4607      	mov	r7, r0
 80287a2:	9b04      	ldr	r3, [sp, #16]
 80287a4:	3301      	adds	r3, #1
 80287a6:	9304      	str	r3, [sp, #16]
 80287a8:	e774      	b.n	8028694 <_dtoa_r+0x904>
 80287aa:	f000 fb1b 	bl	8028de4 <__multadd>
 80287ae:	4639      	mov	r1, r7
 80287b0:	4681      	mov	r9, r0
 80287b2:	2300      	movs	r3, #0
 80287b4:	220a      	movs	r2, #10
 80287b6:	4630      	mov	r0, r6
 80287b8:	f000 fb14 	bl	8028de4 <__multadd>
 80287bc:	4607      	mov	r7, r0
 80287be:	e7f0      	b.n	80287a2 <_dtoa_r+0xa12>
 80287c0:	f1ba 0f00 	cmp.w	sl, #0
 80287c4:	9a01      	ldr	r2, [sp, #4]
 80287c6:	bfcc      	ite	gt
 80287c8:	46d0      	movgt	r8, sl
 80287ca:	f04f 0801 	movle.w	r8, #1
 80287ce:	4490      	add	r8, r2
 80287d0:	f04f 0900 	mov.w	r9, #0
 80287d4:	4629      	mov	r1, r5
 80287d6:	2201      	movs	r2, #1
 80287d8:	4630      	mov	r0, r6
 80287da:	9302      	str	r3, [sp, #8]
 80287dc:	f000 fcb2 	bl	8029144 <__lshift>
 80287e0:	4621      	mov	r1, r4
 80287e2:	4605      	mov	r5, r0
 80287e4:	f000 fd1e 	bl	8029224 <__mcmp>
 80287e8:	2800      	cmp	r0, #0
 80287ea:	dcb1      	bgt.n	8028750 <_dtoa_r+0x9c0>
 80287ec:	d102      	bne.n	80287f4 <_dtoa_r+0xa64>
 80287ee:	9b02      	ldr	r3, [sp, #8]
 80287f0:	07db      	lsls	r3, r3, #31
 80287f2:	d4ad      	bmi.n	8028750 <_dtoa_r+0x9c0>
 80287f4:	4643      	mov	r3, r8
 80287f6:	4698      	mov	r8, r3
 80287f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80287fc:	2a30      	cmp	r2, #48	; 0x30
 80287fe:	d0fa      	beq.n	80287f6 <_dtoa_r+0xa66>
 8028800:	e6f6      	b.n	80285f0 <_dtoa_r+0x860>
 8028802:	9a01      	ldr	r2, [sp, #4]
 8028804:	429a      	cmp	r2, r3
 8028806:	d1a4      	bne.n	8028752 <_dtoa_r+0x9c2>
 8028808:	f10b 0b01 	add.w	fp, fp, #1
 802880c:	2331      	movs	r3, #49	; 0x31
 802880e:	e778      	b.n	8028702 <_dtoa_r+0x972>
 8028810:	4b14      	ldr	r3, [pc, #80]	; (8028864 <_dtoa_r+0xad4>)
 8028812:	f7ff bb27 	b.w	8027e64 <_dtoa_r+0xd4>
 8028816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028818:	2b00      	cmp	r3, #0
 802881a:	f47f ab03 	bne.w	8027e24 <_dtoa_r+0x94>
 802881e:	4b12      	ldr	r3, [pc, #72]	; (8028868 <_dtoa_r+0xad8>)
 8028820:	f7ff bb20 	b.w	8027e64 <_dtoa_r+0xd4>
 8028824:	f1ba 0f00 	cmp.w	sl, #0
 8028828:	dc03      	bgt.n	8028832 <_dtoa_r+0xaa2>
 802882a:	9b06      	ldr	r3, [sp, #24]
 802882c:	2b02      	cmp	r3, #2
 802882e:	f73f aec7 	bgt.w	80285c0 <_dtoa_r+0x830>
 8028832:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028836:	4621      	mov	r1, r4
 8028838:	4628      	mov	r0, r5
 802883a:	f7ff fa1b 	bl	8027c74 <quorem>
 802883e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028842:	f808 3b01 	strb.w	r3, [r8], #1
 8028846:	9a01      	ldr	r2, [sp, #4]
 8028848:	eba8 0202 	sub.w	r2, r8, r2
 802884c:	4592      	cmp	sl, r2
 802884e:	ddb7      	ble.n	80287c0 <_dtoa_r+0xa30>
 8028850:	4629      	mov	r1, r5
 8028852:	2300      	movs	r3, #0
 8028854:	220a      	movs	r2, #10
 8028856:	4630      	mov	r0, r6
 8028858:	f000 fac4 	bl	8028de4 <__multadd>
 802885c:	4605      	mov	r5, r0
 802885e:	e7ea      	b.n	8028836 <_dtoa_r+0xaa6>
 8028860:	080477ed 	.word	0x080477ed
 8028864:	08047971 	.word	0x08047971
 8028868:	08047785 	.word	0x08047785

0802886c <__errno>:
 802886c:	4b01      	ldr	r3, [pc, #4]	; (8028874 <__errno+0x8>)
 802886e:	6818      	ldr	r0, [r3, #0]
 8028870:	4770      	bx	lr
 8028872:	bf00      	nop
 8028874:	200004a4 	.word	0x200004a4

08028878 <__sflush_r>:
 8028878:	898a      	ldrh	r2, [r1, #12]
 802887a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802887e:	4605      	mov	r5, r0
 8028880:	0710      	lsls	r0, r2, #28
 8028882:	460c      	mov	r4, r1
 8028884:	d458      	bmi.n	8028938 <__sflush_r+0xc0>
 8028886:	684b      	ldr	r3, [r1, #4]
 8028888:	2b00      	cmp	r3, #0
 802888a:	dc05      	bgt.n	8028898 <__sflush_r+0x20>
 802888c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802888e:	2b00      	cmp	r3, #0
 8028890:	dc02      	bgt.n	8028898 <__sflush_r+0x20>
 8028892:	2000      	movs	r0, #0
 8028894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802889a:	2e00      	cmp	r6, #0
 802889c:	d0f9      	beq.n	8028892 <__sflush_r+0x1a>
 802889e:	2300      	movs	r3, #0
 80288a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80288a4:	682f      	ldr	r7, [r5, #0]
 80288a6:	602b      	str	r3, [r5, #0]
 80288a8:	d032      	beq.n	8028910 <__sflush_r+0x98>
 80288aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80288ac:	89a3      	ldrh	r3, [r4, #12]
 80288ae:	075a      	lsls	r2, r3, #29
 80288b0:	d505      	bpl.n	80288be <__sflush_r+0x46>
 80288b2:	6863      	ldr	r3, [r4, #4]
 80288b4:	1ac0      	subs	r0, r0, r3
 80288b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80288b8:	b10b      	cbz	r3, 80288be <__sflush_r+0x46>
 80288ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80288bc:	1ac0      	subs	r0, r0, r3
 80288be:	2300      	movs	r3, #0
 80288c0:	4602      	mov	r2, r0
 80288c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80288c4:	6a21      	ldr	r1, [r4, #32]
 80288c6:	4628      	mov	r0, r5
 80288c8:	47b0      	blx	r6
 80288ca:	1c43      	adds	r3, r0, #1
 80288cc:	89a3      	ldrh	r3, [r4, #12]
 80288ce:	d106      	bne.n	80288de <__sflush_r+0x66>
 80288d0:	6829      	ldr	r1, [r5, #0]
 80288d2:	291d      	cmp	r1, #29
 80288d4:	d82c      	bhi.n	8028930 <__sflush_r+0xb8>
 80288d6:	4a2a      	ldr	r2, [pc, #168]	; (8028980 <__sflush_r+0x108>)
 80288d8:	40ca      	lsrs	r2, r1
 80288da:	07d6      	lsls	r6, r2, #31
 80288dc:	d528      	bpl.n	8028930 <__sflush_r+0xb8>
 80288de:	2200      	movs	r2, #0
 80288e0:	6062      	str	r2, [r4, #4]
 80288e2:	04d9      	lsls	r1, r3, #19
 80288e4:	6922      	ldr	r2, [r4, #16]
 80288e6:	6022      	str	r2, [r4, #0]
 80288e8:	d504      	bpl.n	80288f4 <__sflush_r+0x7c>
 80288ea:	1c42      	adds	r2, r0, #1
 80288ec:	d101      	bne.n	80288f2 <__sflush_r+0x7a>
 80288ee:	682b      	ldr	r3, [r5, #0]
 80288f0:	b903      	cbnz	r3, 80288f4 <__sflush_r+0x7c>
 80288f2:	6560      	str	r0, [r4, #84]	; 0x54
 80288f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80288f6:	602f      	str	r7, [r5, #0]
 80288f8:	2900      	cmp	r1, #0
 80288fa:	d0ca      	beq.n	8028892 <__sflush_r+0x1a>
 80288fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028900:	4299      	cmp	r1, r3
 8028902:	d002      	beq.n	802890a <__sflush_r+0x92>
 8028904:	4628      	mov	r0, r5
 8028906:	f7fd f801 	bl	802590c <_free_r>
 802890a:	2000      	movs	r0, #0
 802890c:	6360      	str	r0, [r4, #52]	; 0x34
 802890e:	e7c1      	b.n	8028894 <__sflush_r+0x1c>
 8028910:	6a21      	ldr	r1, [r4, #32]
 8028912:	2301      	movs	r3, #1
 8028914:	4628      	mov	r0, r5
 8028916:	47b0      	blx	r6
 8028918:	1c41      	adds	r1, r0, #1
 802891a:	d1c7      	bne.n	80288ac <__sflush_r+0x34>
 802891c:	682b      	ldr	r3, [r5, #0]
 802891e:	2b00      	cmp	r3, #0
 8028920:	d0c4      	beq.n	80288ac <__sflush_r+0x34>
 8028922:	2b1d      	cmp	r3, #29
 8028924:	d001      	beq.n	802892a <__sflush_r+0xb2>
 8028926:	2b16      	cmp	r3, #22
 8028928:	d101      	bne.n	802892e <__sflush_r+0xb6>
 802892a:	602f      	str	r7, [r5, #0]
 802892c:	e7b1      	b.n	8028892 <__sflush_r+0x1a>
 802892e:	89a3      	ldrh	r3, [r4, #12]
 8028930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028934:	81a3      	strh	r3, [r4, #12]
 8028936:	e7ad      	b.n	8028894 <__sflush_r+0x1c>
 8028938:	690f      	ldr	r7, [r1, #16]
 802893a:	2f00      	cmp	r7, #0
 802893c:	d0a9      	beq.n	8028892 <__sflush_r+0x1a>
 802893e:	0793      	lsls	r3, r2, #30
 8028940:	680e      	ldr	r6, [r1, #0]
 8028942:	bf08      	it	eq
 8028944:	694b      	ldreq	r3, [r1, #20]
 8028946:	600f      	str	r7, [r1, #0]
 8028948:	bf18      	it	ne
 802894a:	2300      	movne	r3, #0
 802894c:	eba6 0807 	sub.w	r8, r6, r7
 8028950:	608b      	str	r3, [r1, #8]
 8028952:	f1b8 0f00 	cmp.w	r8, #0
 8028956:	dd9c      	ble.n	8028892 <__sflush_r+0x1a>
 8028958:	6a21      	ldr	r1, [r4, #32]
 802895a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802895c:	4643      	mov	r3, r8
 802895e:	463a      	mov	r2, r7
 8028960:	4628      	mov	r0, r5
 8028962:	47b0      	blx	r6
 8028964:	2800      	cmp	r0, #0
 8028966:	dc06      	bgt.n	8028976 <__sflush_r+0xfe>
 8028968:	89a3      	ldrh	r3, [r4, #12]
 802896a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802896e:	81a3      	strh	r3, [r4, #12]
 8028970:	f04f 30ff 	mov.w	r0, #4294967295
 8028974:	e78e      	b.n	8028894 <__sflush_r+0x1c>
 8028976:	4407      	add	r7, r0
 8028978:	eba8 0800 	sub.w	r8, r8, r0
 802897c:	e7e9      	b.n	8028952 <__sflush_r+0xda>
 802897e:	bf00      	nop
 8028980:	20400001 	.word	0x20400001

08028984 <_fflush_r>:
 8028984:	b538      	push	{r3, r4, r5, lr}
 8028986:	690b      	ldr	r3, [r1, #16]
 8028988:	4605      	mov	r5, r0
 802898a:	460c      	mov	r4, r1
 802898c:	b913      	cbnz	r3, 8028994 <_fflush_r+0x10>
 802898e:	2500      	movs	r5, #0
 8028990:	4628      	mov	r0, r5
 8028992:	bd38      	pop	{r3, r4, r5, pc}
 8028994:	b118      	cbz	r0, 802899e <_fflush_r+0x1a>
 8028996:	6983      	ldr	r3, [r0, #24]
 8028998:	b90b      	cbnz	r3, 802899e <_fflush_r+0x1a>
 802899a:	f7fc fb1b 	bl	8024fd4 <__sinit>
 802899e:	4b14      	ldr	r3, [pc, #80]	; (80289f0 <_fflush_r+0x6c>)
 80289a0:	429c      	cmp	r4, r3
 80289a2:	d11b      	bne.n	80289dc <_fflush_r+0x58>
 80289a4:	686c      	ldr	r4, [r5, #4]
 80289a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d0ef      	beq.n	802898e <_fflush_r+0xa>
 80289ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80289b0:	07d0      	lsls	r0, r2, #31
 80289b2:	d404      	bmi.n	80289be <_fflush_r+0x3a>
 80289b4:	0599      	lsls	r1, r3, #22
 80289b6:	d402      	bmi.n	80289be <_fflush_r+0x3a>
 80289b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80289ba:	f7fc fce1 	bl	8025380 <__retarget_lock_acquire_recursive>
 80289be:	4628      	mov	r0, r5
 80289c0:	4621      	mov	r1, r4
 80289c2:	f7ff ff59 	bl	8028878 <__sflush_r>
 80289c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80289c8:	07da      	lsls	r2, r3, #31
 80289ca:	4605      	mov	r5, r0
 80289cc:	d4e0      	bmi.n	8028990 <_fflush_r+0xc>
 80289ce:	89a3      	ldrh	r3, [r4, #12]
 80289d0:	059b      	lsls	r3, r3, #22
 80289d2:	d4dd      	bmi.n	8028990 <_fflush_r+0xc>
 80289d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80289d6:	f7fc fcd5 	bl	8025384 <__retarget_lock_release_recursive>
 80289da:	e7d9      	b.n	8028990 <_fflush_r+0xc>
 80289dc:	4b05      	ldr	r3, [pc, #20]	; (80289f4 <_fflush_r+0x70>)
 80289de:	429c      	cmp	r4, r3
 80289e0:	d101      	bne.n	80289e6 <_fflush_r+0x62>
 80289e2:	68ac      	ldr	r4, [r5, #8]
 80289e4:	e7df      	b.n	80289a6 <_fflush_r+0x22>
 80289e6:	4b04      	ldr	r3, [pc, #16]	; (80289f8 <_fflush_r+0x74>)
 80289e8:	429c      	cmp	r4, r3
 80289ea:	bf08      	it	eq
 80289ec:	68ec      	ldreq	r4, [r5, #12]
 80289ee:	e7da      	b.n	80289a6 <_fflush_r+0x22>
 80289f0:	080471d0 	.word	0x080471d0
 80289f4:	080471f0 	.word	0x080471f0
 80289f8:	080471b0 	.word	0x080471b0

080289fc <fiprintf>:
 80289fc:	b40e      	push	{r1, r2, r3}
 80289fe:	b503      	push	{r0, r1, lr}
 8028a00:	4601      	mov	r1, r0
 8028a02:	ab03      	add	r3, sp, #12
 8028a04:	4805      	ldr	r0, [pc, #20]	; (8028a1c <fiprintf+0x20>)
 8028a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8028a0a:	6800      	ldr	r0, [r0, #0]
 8028a0c:	9301      	str	r3, [sp, #4]
 8028a0e:	f001 f879 	bl	8029b04 <_vfiprintf_r>
 8028a12:	b002      	add	sp, #8
 8028a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8028a18:	b003      	add	sp, #12
 8028a1a:	4770      	bx	lr
 8028a1c:	200004a4 	.word	0x200004a4

08028a20 <_findenv_r>:
 8028a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a24:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8028a94 <_findenv_r+0x74>
 8028a28:	4607      	mov	r7, r0
 8028a2a:	4689      	mov	r9, r1
 8028a2c:	4616      	mov	r6, r2
 8028a2e:	f001 fbe9 	bl	802a204 <__env_lock>
 8028a32:	f8da 4000 	ldr.w	r4, [sl]
 8028a36:	b134      	cbz	r4, 8028a46 <_findenv_r+0x26>
 8028a38:	464b      	mov	r3, r9
 8028a3a:	4698      	mov	r8, r3
 8028a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028a40:	b13a      	cbz	r2, 8028a52 <_findenv_r+0x32>
 8028a42:	2a3d      	cmp	r2, #61	; 0x3d
 8028a44:	d1f9      	bne.n	8028a3a <_findenv_r+0x1a>
 8028a46:	4638      	mov	r0, r7
 8028a48:	f001 fbe2 	bl	802a210 <__env_unlock>
 8028a4c:	2000      	movs	r0, #0
 8028a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a52:	eba8 0809 	sub.w	r8, r8, r9
 8028a56:	46a3      	mov	fp, r4
 8028a58:	f854 0b04 	ldr.w	r0, [r4], #4
 8028a5c:	2800      	cmp	r0, #0
 8028a5e:	d0f2      	beq.n	8028a46 <_findenv_r+0x26>
 8028a60:	4642      	mov	r2, r8
 8028a62:	4649      	mov	r1, r9
 8028a64:	f7fe fc4a 	bl	80272fc <strncmp>
 8028a68:	2800      	cmp	r0, #0
 8028a6a:	d1f4      	bne.n	8028a56 <_findenv_r+0x36>
 8028a6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8028a70:	eb03 0508 	add.w	r5, r3, r8
 8028a74:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028a78:	2b3d      	cmp	r3, #61	; 0x3d
 8028a7a:	d1ec      	bne.n	8028a56 <_findenv_r+0x36>
 8028a7c:	f8da 3000 	ldr.w	r3, [sl]
 8028a80:	ebab 0303 	sub.w	r3, fp, r3
 8028a84:	109b      	asrs	r3, r3, #2
 8028a86:	4638      	mov	r0, r7
 8028a88:	6033      	str	r3, [r6, #0]
 8028a8a:	f001 fbc1 	bl	802a210 <__env_unlock>
 8028a8e:	1c68      	adds	r0, r5, #1
 8028a90:	e7dd      	b.n	8028a4e <_findenv_r+0x2e>
 8028a92:	bf00      	nop
 8028a94:	20000294 	.word	0x20000294

08028a98 <_getenv_r>:
 8028a98:	b507      	push	{r0, r1, r2, lr}
 8028a9a:	aa01      	add	r2, sp, #4
 8028a9c:	f7ff ffc0 	bl	8028a20 <_findenv_r>
 8028aa0:	b003      	add	sp, #12
 8028aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8028aa6:	Address 0x0000000008028aa6 is out of bounds.


08028aa8 <__gettzinfo>:
 8028aa8:	4800      	ldr	r0, [pc, #0]	; (8028aac <__gettzinfo+0x4>)
 8028aaa:	4770      	bx	lr
 8028aac:	20000510 	.word	0x20000510

08028ab0 <gmtime_r>:
 8028ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ab4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8028ab8:	460c      	mov	r4, r1
 8028aba:	4a4f      	ldr	r2, [pc, #316]	; (8028bf8 <gmtime_r+0x148>)
 8028abc:	2300      	movs	r3, #0
 8028abe:	4630      	mov	r0, r6
 8028ac0:	4639      	mov	r1, r7
 8028ac2:	f7d7 fc25 	bl	8000310 <__aeabi_ldivmod>
 8028ac6:	4639      	mov	r1, r7
 8028ac8:	4605      	mov	r5, r0
 8028aca:	4a4b      	ldr	r2, [pc, #300]	; (8028bf8 <gmtime_r+0x148>)
 8028acc:	4630      	mov	r0, r6
 8028ace:	2300      	movs	r3, #0
 8028ad0:	f7d7 fc1e 	bl	8000310 <__aeabi_ldivmod>
 8028ad4:	2a00      	cmp	r2, #0
 8028ad6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8028ada:	bfb7      	itett	lt
 8028adc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8028ae0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8028ae4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8028ae8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8028aec:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8028af0:	fbb2 f1f0 	udiv	r1, r2, r0
 8028af4:	fb00 2211 	mls	r2, r0, r1, r2
 8028af8:	203c      	movs	r0, #60	; 0x3c
 8028afa:	60a1      	str	r1, [r4, #8]
 8028afc:	fbb2 f1f0 	udiv	r1, r2, r0
 8028b00:	fb00 2211 	mls	r2, r0, r1, r2
 8028b04:	6061      	str	r1, [r4, #4]
 8028b06:	6022      	str	r2, [r4, #0]
 8028b08:	2107      	movs	r1, #7
 8028b0a:	1cda      	adds	r2, r3, #3
 8028b0c:	fb92 f1f1 	sdiv	r1, r2, r1
 8028b10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8028b14:	1a52      	subs	r2, r2, r1
 8028b16:	bf48      	it	mi
 8028b18:	3207      	addmi	r2, #7
 8028b1a:	4d38      	ldr	r5, [pc, #224]	; (8028bfc <gmtime_r+0x14c>)
 8028b1c:	4838      	ldr	r0, [pc, #224]	; (8028c00 <gmtime_r+0x150>)
 8028b1e:	61a2      	str	r2, [r4, #24]
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	bfb7      	itett	lt
 8028b24:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8028b28:	fb93 f5f5 	sdivge	r5, r3, r5
 8028b2c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8028b30:	fb92 f5f5 	sdivlt	r5, r2, r5
 8028b34:	fb00 3005 	mla	r0, r0, r5, r3
 8028b38:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8028b3c:	fbb0 f2f2 	udiv	r2, r0, r2
 8028b40:	4402      	add	r2, r0
 8028b42:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8028b46:	fbb0 f1f3 	udiv	r1, r0, r3
 8028b4a:	1a52      	subs	r2, r2, r1
 8028b4c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8028b50:	492c      	ldr	r1, [pc, #176]	; (8028c04 <gmtime_r+0x154>)
 8028b52:	fbb0 f1f1 	udiv	r1, r0, r1
 8028b56:	2764      	movs	r7, #100	; 0x64
 8028b58:	1a52      	subs	r2, r2, r1
 8028b5a:	fbb2 f1fc 	udiv	r1, r2, ip
 8028b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8028b62:	fbb1 f6f7 	udiv	r6, r1, r7
 8028b66:	1af3      	subs	r3, r6, r3
 8028b68:	4403      	add	r3, r0
 8028b6a:	fb0c 3311 	mls	r3, ip, r1, r3
 8028b6e:	2299      	movs	r2, #153	; 0x99
 8028b70:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8028b74:	f10e 0e02 	add.w	lr, lr, #2
 8028b78:	f103 0c01 	add.w	ip, r3, #1
 8028b7c:	fbbe f0f2 	udiv	r0, lr, r2
 8028b80:	4342      	muls	r2, r0
 8028b82:	3202      	adds	r2, #2
 8028b84:	f04f 0805 	mov.w	r8, #5
 8028b88:	fbb2 f2f8 	udiv	r2, r2, r8
 8028b8c:	ebac 0c02 	sub.w	ip, ip, r2
 8028b90:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8028b94:	4596      	cmp	lr, r2
 8028b96:	bf94      	ite	ls
 8028b98:	2202      	movls	r2, #2
 8028b9a:	f06f 0209 	mvnhi.w	r2, #9
 8028b9e:	4410      	add	r0, r2
 8028ba0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028ba4:	fb02 1505 	mla	r5, r2, r5, r1
 8028ba8:	2801      	cmp	r0, #1
 8028baa:	bf98      	it	ls
 8028bac:	3501      	addls	r5, #1
 8028bae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8028bb2:	d30d      	bcc.n	8028bd0 <gmtime_r+0x120>
 8028bb4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8028bb8:	61e3      	str	r3, [r4, #28]
 8028bba:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8028bbe:	2300      	movs	r3, #0
 8028bc0:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8028bc4:	f8c4 c00c 	str.w	ip, [r4, #12]
 8028bc8:	6223      	str	r3, [r4, #32]
 8028bca:	4620      	mov	r0, r4
 8028bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028bd0:	078a      	lsls	r2, r1, #30
 8028bd2:	d102      	bne.n	8028bda <gmtime_r+0x12a>
 8028bd4:	fb07 1616 	mls	r6, r7, r6, r1
 8028bd8:	b95e      	cbnz	r6, 8028bf2 <gmtime_r+0x142>
 8028bda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028bde:	fbb1 f6f2 	udiv	r6, r1, r2
 8028be2:	fb02 1216 	mls	r2, r2, r6, r1
 8028be6:	fab2 f282 	clz	r2, r2
 8028bea:	0952      	lsrs	r2, r2, #5
 8028bec:	333b      	adds	r3, #59	; 0x3b
 8028bee:	4413      	add	r3, r2
 8028bf0:	e7e2      	b.n	8028bb8 <gmtime_r+0x108>
 8028bf2:	2201      	movs	r2, #1
 8028bf4:	e7fa      	b.n	8028bec <gmtime_r+0x13c>
 8028bf6:	bf00      	nop
 8028bf8:	00015180 	.word	0x00015180
 8028bfc:	00023ab1 	.word	0x00023ab1
 8028c00:	fffdc54f 	.word	0xfffdc54f
 8028c04:	00023ab0 	.word	0x00023ab0

08028c08 <labs>:
 8028c08:	2800      	cmp	r0, #0
 8028c0a:	bfb8      	it	lt
 8028c0c:	4240      	neglt	r0, r0
 8028c0e:	4770      	bx	lr

08028c10 <_localeconv_r>:
 8028c10:	4800      	ldr	r0, [pc, #0]	; (8028c14 <_localeconv_r+0x4>)
 8028c12:	4770      	bx	lr
 8028c14:	20000658 	.word	0x20000658

08028c18 <_lseek_r>:
 8028c18:	b538      	push	{r3, r4, r5, lr}
 8028c1a:	4d07      	ldr	r5, [pc, #28]	; (8028c38 <_lseek_r+0x20>)
 8028c1c:	4604      	mov	r4, r0
 8028c1e:	4608      	mov	r0, r1
 8028c20:	4611      	mov	r1, r2
 8028c22:	2200      	movs	r2, #0
 8028c24:	602a      	str	r2, [r5, #0]
 8028c26:	461a      	mov	r2, r3
 8028c28:	f7df fb38 	bl	800829c <_lseek>
 8028c2c:	1c43      	adds	r3, r0, #1
 8028c2e:	d102      	bne.n	8028c36 <_lseek_r+0x1e>
 8028c30:	682b      	ldr	r3, [r5, #0]
 8028c32:	b103      	cbz	r3, 8028c36 <_lseek_r+0x1e>
 8028c34:	6023      	str	r3, [r4, #0]
 8028c36:	bd38      	pop	{r3, r4, r5, pc}
 8028c38:	200300d4 	.word	0x200300d4

08028c3c <__swhatbuf_r>:
 8028c3c:	b570      	push	{r4, r5, r6, lr}
 8028c3e:	460e      	mov	r6, r1
 8028c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c44:	2900      	cmp	r1, #0
 8028c46:	b096      	sub	sp, #88	; 0x58
 8028c48:	4614      	mov	r4, r2
 8028c4a:	461d      	mov	r5, r3
 8028c4c:	da08      	bge.n	8028c60 <__swhatbuf_r+0x24>
 8028c4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8028c52:	2200      	movs	r2, #0
 8028c54:	602a      	str	r2, [r5, #0]
 8028c56:	061a      	lsls	r2, r3, #24
 8028c58:	d410      	bmi.n	8028c7c <__swhatbuf_r+0x40>
 8028c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028c5e:	e00e      	b.n	8028c7e <__swhatbuf_r+0x42>
 8028c60:	466a      	mov	r2, sp
 8028c62:	f001 fadb 	bl	802a21c <_fstat_r>
 8028c66:	2800      	cmp	r0, #0
 8028c68:	dbf1      	blt.n	8028c4e <__swhatbuf_r+0x12>
 8028c6a:	9a01      	ldr	r2, [sp, #4]
 8028c6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028c70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028c74:	425a      	negs	r2, r3
 8028c76:	415a      	adcs	r2, r3
 8028c78:	602a      	str	r2, [r5, #0]
 8028c7a:	e7ee      	b.n	8028c5a <__swhatbuf_r+0x1e>
 8028c7c:	2340      	movs	r3, #64	; 0x40
 8028c7e:	2000      	movs	r0, #0
 8028c80:	6023      	str	r3, [r4, #0]
 8028c82:	b016      	add	sp, #88	; 0x58
 8028c84:	bd70      	pop	{r4, r5, r6, pc}
 8028c86:	Address 0x0000000008028c86 is out of bounds.


08028c88 <__smakebuf_r>:
 8028c88:	898b      	ldrh	r3, [r1, #12]
 8028c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028c8c:	079d      	lsls	r5, r3, #30
 8028c8e:	4606      	mov	r6, r0
 8028c90:	460c      	mov	r4, r1
 8028c92:	d507      	bpl.n	8028ca4 <__smakebuf_r+0x1c>
 8028c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028c98:	6023      	str	r3, [r4, #0]
 8028c9a:	6123      	str	r3, [r4, #16]
 8028c9c:	2301      	movs	r3, #1
 8028c9e:	6163      	str	r3, [r4, #20]
 8028ca0:	b002      	add	sp, #8
 8028ca2:	bd70      	pop	{r4, r5, r6, pc}
 8028ca4:	ab01      	add	r3, sp, #4
 8028ca6:	466a      	mov	r2, sp
 8028ca8:	f7ff ffc8 	bl	8028c3c <__swhatbuf_r>
 8028cac:	9900      	ldr	r1, [sp, #0]
 8028cae:	4605      	mov	r5, r0
 8028cb0:	4630      	mov	r0, r6
 8028cb2:	f7fc fe97 	bl	80259e4 <_malloc_r>
 8028cb6:	b948      	cbnz	r0, 8028ccc <__smakebuf_r+0x44>
 8028cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028cbc:	059a      	lsls	r2, r3, #22
 8028cbe:	d4ef      	bmi.n	8028ca0 <__smakebuf_r+0x18>
 8028cc0:	f023 0303 	bic.w	r3, r3, #3
 8028cc4:	f043 0302 	orr.w	r3, r3, #2
 8028cc8:	81a3      	strh	r3, [r4, #12]
 8028cca:	e7e3      	b.n	8028c94 <__smakebuf_r+0xc>
 8028ccc:	4b0d      	ldr	r3, [pc, #52]	; (8028d04 <__smakebuf_r+0x7c>)
 8028cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8028cd0:	89a3      	ldrh	r3, [r4, #12]
 8028cd2:	6020      	str	r0, [r4, #0]
 8028cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028cd8:	81a3      	strh	r3, [r4, #12]
 8028cda:	9b00      	ldr	r3, [sp, #0]
 8028cdc:	6163      	str	r3, [r4, #20]
 8028cde:	9b01      	ldr	r3, [sp, #4]
 8028ce0:	6120      	str	r0, [r4, #16]
 8028ce2:	b15b      	cbz	r3, 8028cfc <__smakebuf_r+0x74>
 8028ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028ce8:	4630      	mov	r0, r6
 8028cea:	f001 faa9 	bl	802a240 <_isatty_r>
 8028cee:	b128      	cbz	r0, 8028cfc <__smakebuf_r+0x74>
 8028cf0:	89a3      	ldrh	r3, [r4, #12]
 8028cf2:	f023 0303 	bic.w	r3, r3, #3
 8028cf6:	f043 0301 	orr.w	r3, r3, #1
 8028cfa:	81a3      	strh	r3, [r4, #12]
 8028cfc:	89a0      	ldrh	r0, [r4, #12]
 8028cfe:	4305      	orrs	r5, r0
 8028d00:	81a5      	strh	r5, [r4, #12]
 8028d02:	e7cd      	b.n	8028ca0 <__smakebuf_r+0x18>
 8028d04:	08024f6d 	.word	0x08024f6d

08028d08 <__malloc_lock>:
 8028d08:	4801      	ldr	r0, [pc, #4]	; (8028d10 <__malloc_lock+0x8>)
 8028d0a:	f7fc bb39 	b.w	8025380 <__retarget_lock_acquire_recursive>
 8028d0e:	bf00      	nop
 8028d10:	200300c5 	.word	0x200300c5

08028d14 <__malloc_unlock>:
 8028d14:	4801      	ldr	r0, [pc, #4]	; (8028d1c <__malloc_unlock+0x8>)
 8028d16:	f7fc bb35 	b.w	8025384 <__retarget_lock_release_recursive>
 8028d1a:	bf00      	nop
 8028d1c:	200300c5 	.word	0x200300c5

08028d20 <_Balloc>:
 8028d20:	b570      	push	{r4, r5, r6, lr}
 8028d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028d24:	4604      	mov	r4, r0
 8028d26:	460d      	mov	r5, r1
 8028d28:	b976      	cbnz	r6, 8028d48 <_Balloc+0x28>
 8028d2a:	2010      	movs	r0, #16
 8028d2c:	f7fc fb2c 	bl	8025388 <malloc>
 8028d30:	4602      	mov	r2, r0
 8028d32:	6260      	str	r0, [r4, #36]	; 0x24
 8028d34:	b920      	cbnz	r0, 8028d40 <_Balloc+0x20>
 8028d36:	4b18      	ldr	r3, [pc, #96]	; (8028d98 <_Balloc+0x78>)
 8028d38:	4818      	ldr	r0, [pc, #96]	; (8028d9c <_Balloc+0x7c>)
 8028d3a:	2166      	movs	r1, #102	; 0x66
 8028d3c:	f7fe ff58 	bl	8027bf0 <__assert_func>
 8028d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028d44:	6006      	str	r6, [r0, #0]
 8028d46:	60c6      	str	r6, [r0, #12]
 8028d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028d4a:	68f3      	ldr	r3, [r6, #12]
 8028d4c:	b183      	cbz	r3, 8028d70 <_Balloc+0x50>
 8028d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028d50:	68db      	ldr	r3, [r3, #12]
 8028d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8028d56:	b9b8      	cbnz	r0, 8028d88 <_Balloc+0x68>
 8028d58:	2101      	movs	r1, #1
 8028d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8028d5e:	1d72      	adds	r2, r6, #5
 8028d60:	0092      	lsls	r2, r2, #2
 8028d62:	4620      	mov	r0, r4
 8028d64:	f000 fb60 	bl	8029428 <_calloc_r>
 8028d68:	b160      	cbz	r0, 8028d84 <_Balloc+0x64>
 8028d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8028d6e:	e00e      	b.n	8028d8e <_Balloc+0x6e>
 8028d70:	2221      	movs	r2, #33	; 0x21
 8028d72:	2104      	movs	r1, #4
 8028d74:	4620      	mov	r0, r4
 8028d76:	f000 fb57 	bl	8029428 <_calloc_r>
 8028d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028d7c:	60f0      	str	r0, [r6, #12]
 8028d7e:	68db      	ldr	r3, [r3, #12]
 8028d80:	2b00      	cmp	r3, #0
 8028d82:	d1e4      	bne.n	8028d4e <_Balloc+0x2e>
 8028d84:	2000      	movs	r0, #0
 8028d86:	bd70      	pop	{r4, r5, r6, pc}
 8028d88:	6802      	ldr	r2, [r0, #0]
 8028d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8028d8e:	2300      	movs	r3, #0
 8028d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028d94:	e7f7      	b.n	8028d86 <_Balloc+0x66>
 8028d96:	bf00      	nop
 8028d98:	08047214 	.word	0x08047214
 8028d9c:	080477fe 	.word	0x080477fe

08028da0 <_Bfree>:
 8028da0:	b570      	push	{r4, r5, r6, lr}
 8028da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028da4:	4605      	mov	r5, r0
 8028da6:	460c      	mov	r4, r1
 8028da8:	b976      	cbnz	r6, 8028dc8 <_Bfree+0x28>
 8028daa:	2010      	movs	r0, #16
 8028dac:	f7fc faec 	bl	8025388 <malloc>
 8028db0:	4602      	mov	r2, r0
 8028db2:	6268      	str	r0, [r5, #36]	; 0x24
 8028db4:	b920      	cbnz	r0, 8028dc0 <_Bfree+0x20>
 8028db6:	4b09      	ldr	r3, [pc, #36]	; (8028ddc <_Bfree+0x3c>)
 8028db8:	4809      	ldr	r0, [pc, #36]	; (8028de0 <_Bfree+0x40>)
 8028dba:	218a      	movs	r1, #138	; 0x8a
 8028dbc:	f7fe ff18 	bl	8027bf0 <__assert_func>
 8028dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028dc4:	6006      	str	r6, [r0, #0]
 8028dc6:	60c6      	str	r6, [r0, #12]
 8028dc8:	b13c      	cbz	r4, 8028dda <_Bfree+0x3a>
 8028dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028dcc:	6862      	ldr	r2, [r4, #4]
 8028dce:	68db      	ldr	r3, [r3, #12]
 8028dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028dd4:	6021      	str	r1, [r4, #0]
 8028dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028dda:	bd70      	pop	{r4, r5, r6, pc}
 8028ddc:	08047214 	.word	0x08047214
 8028de0:	080477fe 	.word	0x080477fe

08028de4 <__multadd>:
 8028de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028de8:	690d      	ldr	r5, [r1, #16]
 8028dea:	4607      	mov	r7, r0
 8028dec:	460c      	mov	r4, r1
 8028dee:	461e      	mov	r6, r3
 8028df0:	f101 0c14 	add.w	ip, r1, #20
 8028df4:	2000      	movs	r0, #0
 8028df6:	f8dc 3000 	ldr.w	r3, [ip]
 8028dfa:	b299      	uxth	r1, r3
 8028dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8028e00:	0c1e      	lsrs	r6, r3, #16
 8028e02:	0c0b      	lsrs	r3, r1, #16
 8028e04:	fb02 3306 	mla	r3, r2, r6, r3
 8028e08:	b289      	uxth	r1, r1
 8028e0a:	3001      	adds	r0, #1
 8028e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028e10:	4285      	cmp	r5, r0
 8028e12:	f84c 1b04 	str.w	r1, [ip], #4
 8028e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8028e1a:	dcec      	bgt.n	8028df6 <__multadd+0x12>
 8028e1c:	b30e      	cbz	r6, 8028e62 <__multadd+0x7e>
 8028e1e:	68a3      	ldr	r3, [r4, #8]
 8028e20:	42ab      	cmp	r3, r5
 8028e22:	dc19      	bgt.n	8028e58 <__multadd+0x74>
 8028e24:	6861      	ldr	r1, [r4, #4]
 8028e26:	4638      	mov	r0, r7
 8028e28:	3101      	adds	r1, #1
 8028e2a:	f7ff ff79 	bl	8028d20 <_Balloc>
 8028e2e:	4680      	mov	r8, r0
 8028e30:	b928      	cbnz	r0, 8028e3e <__multadd+0x5a>
 8028e32:	4602      	mov	r2, r0
 8028e34:	4b0c      	ldr	r3, [pc, #48]	; (8028e68 <__multadd+0x84>)
 8028e36:	480d      	ldr	r0, [pc, #52]	; (8028e6c <__multadd+0x88>)
 8028e38:	21b5      	movs	r1, #181	; 0xb5
 8028e3a:	f7fe fed9 	bl	8027bf0 <__assert_func>
 8028e3e:	6922      	ldr	r2, [r4, #16]
 8028e40:	3202      	adds	r2, #2
 8028e42:	f104 010c 	add.w	r1, r4, #12
 8028e46:	0092      	lsls	r2, r2, #2
 8028e48:	300c      	adds	r0, #12
 8028e4a:	f7fc fabd 	bl	80253c8 <memcpy>
 8028e4e:	4621      	mov	r1, r4
 8028e50:	4638      	mov	r0, r7
 8028e52:	f7ff ffa5 	bl	8028da0 <_Bfree>
 8028e56:	4644      	mov	r4, r8
 8028e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8028e5c:	3501      	adds	r5, #1
 8028e5e:	615e      	str	r6, [r3, #20]
 8028e60:	6125      	str	r5, [r4, #16]
 8028e62:	4620      	mov	r0, r4
 8028e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e68:	080477ed 	.word	0x080477ed
 8028e6c:	080477fe 	.word	0x080477fe

08028e70 <__hi0bits>:
 8028e70:	0c03      	lsrs	r3, r0, #16
 8028e72:	041b      	lsls	r3, r3, #16
 8028e74:	b9d3      	cbnz	r3, 8028eac <__hi0bits+0x3c>
 8028e76:	0400      	lsls	r0, r0, #16
 8028e78:	2310      	movs	r3, #16
 8028e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8028e7e:	bf04      	itt	eq
 8028e80:	0200      	lsleq	r0, r0, #8
 8028e82:	3308      	addeq	r3, #8
 8028e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8028e88:	bf04      	itt	eq
 8028e8a:	0100      	lsleq	r0, r0, #4
 8028e8c:	3304      	addeq	r3, #4
 8028e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8028e92:	bf04      	itt	eq
 8028e94:	0080      	lsleq	r0, r0, #2
 8028e96:	3302      	addeq	r3, #2
 8028e98:	2800      	cmp	r0, #0
 8028e9a:	db05      	blt.n	8028ea8 <__hi0bits+0x38>
 8028e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8028ea0:	f103 0301 	add.w	r3, r3, #1
 8028ea4:	bf08      	it	eq
 8028ea6:	2320      	moveq	r3, #32
 8028ea8:	4618      	mov	r0, r3
 8028eaa:	4770      	bx	lr
 8028eac:	2300      	movs	r3, #0
 8028eae:	e7e4      	b.n	8028e7a <__hi0bits+0xa>

08028eb0 <__lo0bits>:
 8028eb0:	6803      	ldr	r3, [r0, #0]
 8028eb2:	f013 0207 	ands.w	r2, r3, #7
 8028eb6:	4601      	mov	r1, r0
 8028eb8:	d00b      	beq.n	8028ed2 <__lo0bits+0x22>
 8028eba:	07da      	lsls	r2, r3, #31
 8028ebc:	d423      	bmi.n	8028f06 <__lo0bits+0x56>
 8028ebe:	0798      	lsls	r0, r3, #30
 8028ec0:	bf49      	itett	mi
 8028ec2:	085b      	lsrmi	r3, r3, #1
 8028ec4:	089b      	lsrpl	r3, r3, #2
 8028ec6:	2001      	movmi	r0, #1
 8028ec8:	600b      	strmi	r3, [r1, #0]
 8028eca:	bf5c      	itt	pl
 8028ecc:	600b      	strpl	r3, [r1, #0]
 8028ece:	2002      	movpl	r0, #2
 8028ed0:	4770      	bx	lr
 8028ed2:	b298      	uxth	r0, r3
 8028ed4:	b9a8      	cbnz	r0, 8028f02 <__lo0bits+0x52>
 8028ed6:	0c1b      	lsrs	r3, r3, #16
 8028ed8:	2010      	movs	r0, #16
 8028eda:	b2da      	uxtb	r2, r3
 8028edc:	b90a      	cbnz	r2, 8028ee2 <__lo0bits+0x32>
 8028ede:	3008      	adds	r0, #8
 8028ee0:	0a1b      	lsrs	r3, r3, #8
 8028ee2:	071a      	lsls	r2, r3, #28
 8028ee4:	bf04      	itt	eq
 8028ee6:	091b      	lsreq	r3, r3, #4
 8028ee8:	3004      	addeq	r0, #4
 8028eea:	079a      	lsls	r2, r3, #30
 8028eec:	bf04      	itt	eq
 8028eee:	089b      	lsreq	r3, r3, #2
 8028ef0:	3002      	addeq	r0, #2
 8028ef2:	07da      	lsls	r2, r3, #31
 8028ef4:	d403      	bmi.n	8028efe <__lo0bits+0x4e>
 8028ef6:	085b      	lsrs	r3, r3, #1
 8028ef8:	f100 0001 	add.w	r0, r0, #1
 8028efc:	d005      	beq.n	8028f0a <__lo0bits+0x5a>
 8028efe:	600b      	str	r3, [r1, #0]
 8028f00:	4770      	bx	lr
 8028f02:	4610      	mov	r0, r2
 8028f04:	e7e9      	b.n	8028eda <__lo0bits+0x2a>
 8028f06:	2000      	movs	r0, #0
 8028f08:	4770      	bx	lr
 8028f0a:	2020      	movs	r0, #32
 8028f0c:	4770      	bx	lr
 8028f0e:	Address 0x0000000008028f0e is out of bounds.


08028f10 <__i2b>:
 8028f10:	b510      	push	{r4, lr}
 8028f12:	460c      	mov	r4, r1
 8028f14:	2101      	movs	r1, #1
 8028f16:	f7ff ff03 	bl	8028d20 <_Balloc>
 8028f1a:	4602      	mov	r2, r0
 8028f1c:	b928      	cbnz	r0, 8028f2a <__i2b+0x1a>
 8028f1e:	4b05      	ldr	r3, [pc, #20]	; (8028f34 <__i2b+0x24>)
 8028f20:	4805      	ldr	r0, [pc, #20]	; (8028f38 <__i2b+0x28>)
 8028f22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8028f26:	f7fe fe63 	bl	8027bf0 <__assert_func>
 8028f2a:	2301      	movs	r3, #1
 8028f2c:	6144      	str	r4, [r0, #20]
 8028f2e:	6103      	str	r3, [r0, #16]
 8028f30:	bd10      	pop	{r4, pc}
 8028f32:	bf00      	nop
 8028f34:	080477ed 	.word	0x080477ed
 8028f38:	080477fe 	.word	0x080477fe

08028f3c <__multiply>:
 8028f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f40:	4691      	mov	r9, r2
 8028f42:	690a      	ldr	r2, [r1, #16]
 8028f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028f48:	429a      	cmp	r2, r3
 8028f4a:	bfb8      	it	lt
 8028f4c:	460b      	movlt	r3, r1
 8028f4e:	460c      	mov	r4, r1
 8028f50:	bfbc      	itt	lt
 8028f52:	464c      	movlt	r4, r9
 8028f54:	4699      	movlt	r9, r3
 8028f56:	6927      	ldr	r7, [r4, #16]
 8028f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8028f5c:	68a3      	ldr	r3, [r4, #8]
 8028f5e:	6861      	ldr	r1, [r4, #4]
 8028f60:	eb07 060a 	add.w	r6, r7, sl
 8028f64:	42b3      	cmp	r3, r6
 8028f66:	b085      	sub	sp, #20
 8028f68:	bfb8      	it	lt
 8028f6a:	3101      	addlt	r1, #1
 8028f6c:	f7ff fed8 	bl	8028d20 <_Balloc>
 8028f70:	b930      	cbnz	r0, 8028f80 <__multiply+0x44>
 8028f72:	4602      	mov	r2, r0
 8028f74:	4b44      	ldr	r3, [pc, #272]	; (8029088 <__multiply+0x14c>)
 8028f76:	4845      	ldr	r0, [pc, #276]	; (802908c <__multiply+0x150>)
 8028f78:	f240 115d 	movw	r1, #349	; 0x15d
 8028f7c:	f7fe fe38 	bl	8027bf0 <__assert_func>
 8028f80:	f100 0514 	add.w	r5, r0, #20
 8028f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8028f88:	462b      	mov	r3, r5
 8028f8a:	2200      	movs	r2, #0
 8028f8c:	4543      	cmp	r3, r8
 8028f8e:	d321      	bcc.n	8028fd4 <__multiply+0x98>
 8028f90:	f104 0314 	add.w	r3, r4, #20
 8028f94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8028f98:	f109 0314 	add.w	r3, r9, #20
 8028f9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8028fa0:	9202      	str	r2, [sp, #8]
 8028fa2:	1b3a      	subs	r2, r7, r4
 8028fa4:	3a15      	subs	r2, #21
 8028fa6:	f022 0203 	bic.w	r2, r2, #3
 8028faa:	3204      	adds	r2, #4
 8028fac:	f104 0115 	add.w	r1, r4, #21
 8028fb0:	428f      	cmp	r7, r1
 8028fb2:	bf38      	it	cc
 8028fb4:	2204      	movcc	r2, #4
 8028fb6:	9201      	str	r2, [sp, #4]
 8028fb8:	9a02      	ldr	r2, [sp, #8]
 8028fba:	9303      	str	r3, [sp, #12]
 8028fbc:	429a      	cmp	r2, r3
 8028fbe:	d80c      	bhi.n	8028fda <__multiply+0x9e>
 8028fc0:	2e00      	cmp	r6, #0
 8028fc2:	dd03      	ble.n	8028fcc <__multiply+0x90>
 8028fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8028fc8:	2b00      	cmp	r3, #0
 8028fca:	d05a      	beq.n	8029082 <__multiply+0x146>
 8028fcc:	6106      	str	r6, [r0, #16]
 8028fce:	b005      	add	sp, #20
 8028fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028fd4:	f843 2b04 	str.w	r2, [r3], #4
 8028fd8:	e7d8      	b.n	8028f8c <__multiply+0x50>
 8028fda:	f8b3 a000 	ldrh.w	sl, [r3]
 8028fde:	f1ba 0f00 	cmp.w	sl, #0
 8028fe2:	d024      	beq.n	802902e <__multiply+0xf2>
 8028fe4:	f104 0e14 	add.w	lr, r4, #20
 8028fe8:	46a9      	mov	r9, r5
 8028fea:	f04f 0c00 	mov.w	ip, #0
 8028fee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8028ff2:	f8d9 1000 	ldr.w	r1, [r9]
 8028ff6:	fa1f fb82 	uxth.w	fp, r2
 8028ffa:	b289      	uxth	r1, r1
 8028ffc:	fb0a 110b 	mla	r1, sl, fp, r1
 8029000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8029004:	f8d9 2000 	ldr.w	r2, [r9]
 8029008:	4461      	add	r1, ip
 802900a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802900e:	fb0a c20b 	mla	r2, sl, fp, ip
 8029012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8029016:	b289      	uxth	r1, r1
 8029018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802901c:	4577      	cmp	r7, lr
 802901e:	f849 1b04 	str.w	r1, [r9], #4
 8029022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029026:	d8e2      	bhi.n	8028fee <__multiply+0xb2>
 8029028:	9a01      	ldr	r2, [sp, #4]
 802902a:	f845 c002 	str.w	ip, [r5, r2]
 802902e:	9a03      	ldr	r2, [sp, #12]
 8029030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8029034:	3304      	adds	r3, #4
 8029036:	f1b9 0f00 	cmp.w	r9, #0
 802903a:	d020      	beq.n	802907e <__multiply+0x142>
 802903c:	6829      	ldr	r1, [r5, #0]
 802903e:	f104 0c14 	add.w	ip, r4, #20
 8029042:	46ae      	mov	lr, r5
 8029044:	f04f 0a00 	mov.w	sl, #0
 8029048:	f8bc b000 	ldrh.w	fp, [ip]
 802904c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029050:	fb09 220b 	mla	r2, r9, fp, r2
 8029054:	4492      	add	sl, r2
 8029056:	b289      	uxth	r1, r1
 8029058:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802905c:	f84e 1b04 	str.w	r1, [lr], #4
 8029060:	f85c 2b04 	ldr.w	r2, [ip], #4
 8029064:	f8be 1000 	ldrh.w	r1, [lr]
 8029068:	0c12      	lsrs	r2, r2, #16
 802906a:	fb09 1102 	mla	r1, r9, r2, r1
 802906e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8029072:	4567      	cmp	r7, ip
 8029074:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8029078:	d8e6      	bhi.n	8029048 <__multiply+0x10c>
 802907a:	9a01      	ldr	r2, [sp, #4]
 802907c:	50a9      	str	r1, [r5, r2]
 802907e:	3504      	adds	r5, #4
 8029080:	e79a      	b.n	8028fb8 <__multiply+0x7c>
 8029082:	3e01      	subs	r6, #1
 8029084:	e79c      	b.n	8028fc0 <__multiply+0x84>
 8029086:	bf00      	nop
 8029088:	080477ed 	.word	0x080477ed
 802908c:	080477fe 	.word	0x080477fe

08029090 <__pow5mult>:
 8029090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029094:	4615      	mov	r5, r2
 8029096:	f012 0203 	ands.w	r2, r2, #3
 802909a:	4606      	mov	r6, r0
 802909c:	460f      	mov	r7, r1
 802909e:	d007      	beq.n	80290b0 <__pow5mult+0x20>
 80290a0:	4c25      	ldr	r4, [pc, #148]	; (8029138 <__pow5mult+0xa8>)
 80290a2:	3a01      	subs	r2, #1
 80290a4:	2300      	movs	r3, #0
 80290a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80290aa:	f7ff fe9b 	bl	8028de4 <__multadd>
 80290ae:	4607      	mov	r7, r0
 80290b0:	10ad      	asrs	r5, r5, #2
 80290b2:	d03d      	beq.n	8029130 <__pow5mult+0xa0>
 80290b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80290b6:	b97c      	cbnz	r4, 80290d8 <__pow5mult+0x48>
 80290b8:	2010      	movs	r0, #16
 80290ba:	f7fc f965 	bl	8025388 <malloc>
 80290be:	4602      	mov	r2, r0
 80290c0:	6270      	str	r0, [r6, #36]	; 0x24
 80290c2:	b928      	cbnz	r0, 80290d0 <__pow5mult+0x40>
 80290c4:	4b1d      	ldr	r3, [pc, #116]	; (802913c <__pow5mult+0xac>)
 80290c6:	481e      	ldr	r0, [pc, #120]	; (8029140 <__pow5mult+0xb0>)
 80290c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80290cc:	f7fe fd90 	bl	8027bf0 <__assert_func>
 80290d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80290d4:	6004      	str	r4, [r0, #0]
 80290d6:	60c4      	str	r4, [r0, #12]
 80290d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80290dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80290e0:	b94c      	cbnz	r4, 80290f6 <__pow5mult+0x66>
 80290e2:	f240 2171 	movw	r1, #625	; 0x271
 80290e6:	4630      	mov	r0, r6
 80290e8:	f7ff ff12 	bl	8028f10 <__i2b>
 80290ec:	2300      	movs	r3, #0
 80290ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80290f2:	4604      	mov	r4, r0
 80290f4:	6003      	str	r3, [r0, #0]
 80290f6:	f04f 0900 	mov.w	r9, #0
 80290fa:	07eb      	lsls	r3, r5, #31
 80290fc:	d50a      	bpl.n	8029114 <__pow5mult+0x84>
 80290fe:	4639      	mov	r1, r7
 8029100:	4622      	mov	r2, r4
 8029102:	4630      	mov	r0, r6
 8029104:	f7ff ff1a 	bl	8028f3c <__multiply>
 8029108:	4639      	mov	r1, r7
 802910a:	4680      	mov	r8, r0
 802910c:	4630      	mov	r0, r6
 802910e:	f7ff fe47 	bl	8028da0 <_Bfree>
 8029112:	4647      	mov	r7, r8
 8029114:	106d      	asrs	r5, r5, #1
 8029116:	d00b      	beq.n	8029130 <__pow5mult+0xa0>
 8029118:	6820      	ldr	r0, [r4, #0]
 802911a:	b938      	cbnz	r0, 802912c <__pow5mult+0x9c>
 802911c:	4622      	mov	r2, r4
 802911e:	4621      	mov	r1, r4
 8029120:	4630      	mov	r0, r6
 8029122:	f7ff ff0b 	bl	8028f3c <__multiply>
 8029126:	6020      	str	r0, [r4, #0]
 8029128:	f8c0 9000 	str.w	r9, [r0]
 802912c:	4604      	mov	r4, r0
 802912e:	e7e4      	b.n	80290fa <__pow5mult+0x6a>
 8029130:	4638      	mov	r0, r7
 8029132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029136:	bf00      	nop
 8029138:	08047950 	.word	0x08047950
 802913c:	08047214 	.word	0x08047214
 8029140:	080477fe 	.word	0x080477fe

08029144 <__lshift>:
 8029144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029148:	460c      	mov	r4, r1
 802914a:	6849      	ldr	r1, [r1, #4]
 802914c:	6923      	ldr	r3, [r4, #16]
 802914e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8029152:	68a3      	ldr	r3, [r4, #8]
 8029154:	4607      	mov	r7, r0
 8029156:	4691      	mov	r9, r2
 8029158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802915c:	f108 0601 	add.w	r6, r8, #1
 8029160:	42b3      	cmp	r3, r6
 8029162:	db0b      	blt.n	802917c <__lshift+0x38>
 8029164:	4638      	mov	r0, r7
 8029166:	f7ff fddb 	bl	8028d20 <_Balloc>
 802916a:	4605      	mov	r5, r0
 802916c:	b948      	cbnz	r0, 8029182 <__lshift+0x3e>
 802916e:	4602      	mov	r2, r0
 8029170:	4b2a      	ldr	r3, [pc, #168]	; (802921c <__lshift+0xd8>)
 8029172:	482b      	ldr	r0, [pc, #172]	; (8029220 <__lshift+0xdc>)
 8029174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029178:	f7fe fd3a 	bl	8027bf0 <__assert_func>
 802917c:	3101      	adds	r1, #1
 802917e:	005b      	lsls	r3, r3, #1
 8029180:	e7ee      	b.n	8029160 <__lshift+0x1c>
 8029182:	2300      	movs	r3, #0
 8029184:	f100 0114 	add.w	r1, r0, #20
 8029188:	f100 0210 	add.w	r2, r0, #16
 802918c:	4618      	mov	r0, r3
 802918e:	4553      	cmp	r3, sl
 8029190:	db37      	blt.n	8029202 <__lshift+0xbe>
 8029192:	6920      	ldr	r0, [r4, #16]
 8029194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029198:	f104 0314 	add.w	r3, r4, #20
 802919c:	f019 091f 	ands.w	r9, r9, #31
 80291a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80291a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80291a8:	d02f      	beq.n	802920a <__lshift+0xc6>
 80291aa:	f1c9 0e20 	rsb	lr, r9, #32
 80291ae:	468a      	mov	sl, r1
 80291b0:	f04f 0c00 	mov.w	ip, #0
 80291b4:	681a      	ldr	r2, [r3, #0]
 80291b6:	fa02 f209 	lsl.w	r2, r2, r9
 80291ba:	ea42 020c 	orr.w	r2, r2, ip
 80291be:	f84a 2b04 	str.w	r2, [sl], #4
 80291c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80291c6:	4298      	cmp	r0, r3
 80291c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80291cc:	d8f2      	bhi.n	80291b4 <__lshift+0x70>
 80291ce:	1b03      	subs	r3, r0, r4
 80291d0:	3b15      	subs	r3, #21
 80291d2:	f023 0303 	bic.w	r3, r3, #3
 80291d6:	3304      	adds	r3, #4
 80291d8:	f104 0215 	add.w	r2, r4, #21
 80291dc:	4290      	cmp	r0, r2
 80291de:	bf38      	it	cc
 80291e0:	2304      	movcc	r3, #4
 80291e2:	f841 c003 	str.w	ip, [r1, r3]
 80291e6:	f1bc 0f00 	cmp.w	ip, #0
 80291ea:	d001      	beq.n	80291f0 <__lshift+0xac>
 80291ec:	f108 0602 	add.w	r6, r8, #2
 80291f0:	3e01      	subs	r6, #1
 80291f2:	4638      	mov	r0, r7
 80291f4:	612e      	str	r6, [r5, #16]
 80291f6:	4621      	mov	r1, r4
 80291f8:	f7ff fdd2 	bl	8028da0 <_Bfree>
 80291fc:	4628      	mov	r0, r5
 80291fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029202:	f842 0f04 	str.w	r0, [r2, #4]!
 8029206:	3301      	adds	r3, #1
 8029208:	e7c1      	b.n	802918e <__lshift+0x4a>
 802920a:	3904      	subs	r1, #4
 802920c:	f853 2b04 	ldr.w	r2, [r3], #4
 8029210:	f841 2f04 	str.w	r2, [r1, #4]!
 8029214:	4298      	cmp	r0, r3
 8029216:	d8f9      	bhi.n	802920c <__lshift+0xc8>
 8029218:	e7ea      	b.n	80291f0 <__lshift+0xac>
 802921a:	bf00      	nop
 802921c:	080477ed 	.word	0x080477ed
 8029220:	080477fe 	.word	0x080477fe

08029224 <__mcmp>:
 8029224:	b530      	push	{r4, r5, lr}
 8029226:	6902      	ldr	r2, [r0, #16]
 8029228:	690c      	ldr	r4, [r1, #16]
 802922a:	1b12      	subs	r2, r2, r4
 802922c:	d10e      	bne.n	802924c <__mcmp+0x28>
 802922e:	f100 0314 	add.w	r3, r0, #20
 8029232:	3114      	adds	r1, #20
 8029234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802923c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8029244:	42a5      	cmp	r5, r4
 8029246:	d003      	beq.n	8029250 <__mcmp+0x2c>
 8029248:	d305      	bcc.n	8029256 <__mcmp+0x32>
 802924a:	2201      	movs	r2, #1
 802924c:	4610      	mov	r0, r2
 802924e:	bd30      	pop	{r4, r5, pc}
 8029250:	4283      	cmp	r3, r0
 8029252:	d3f3      	bcc.n	802923c <__mcmp+0x18>
 8029254:	e7fa      	b.n	802924c <__mcmp+0x28>
 8029256:	f04f 32ff 	mov.w	r2, #4294967295
 802925a:	e7f7      	b.n	802924c <__mcmp+0x28>

0802925c <__mdiff>:
 802925c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029260:	460c      	mov	r4, r1
 8029262:	4606      	mov	r6, r0
 8029264:	4611      	mov	r1, r2
 8029266:	4620      	mov	r0, r4
 8029268:	4690      	mov	r8, r2
 802926a:	f7ff ffdb 	bl	8029224 <__mcmp>
 802926e:	1e05      	subs	r5, r0, #0
 8029270:	d110      	bne.n	8029294 <__mdiff+0x38>
 8029272:	4629      	mov	r1, r5
 8029274:	4630      	mov	r0, r6
 8029276:	f7ff fd53 	bl	8028d20 <_Balloc>
 802927a:	b930      	cbnz	r0, 802928a <__mdiff+0x2e>
 802927c:	4b3a      	ldr	r3, [pc, #232]	; (8029368 <__mdiff+0x10c>)
 802927e:	4602      	mov	r2, r0
 8029280:	f240 2132 	movw	r1, #562	; 0x232
 8029284:	4839      	ldr	r0, [pc, #228]	; (802936c <__mdiff+0x110>)
 8029286:	f7fe fcb3 	bl	8027bf0 <__assert_func>
 802928a:	2301      	movs	r3, #1
 802928c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029294:	bfa4      	itt	ge
 8029296:	4643      	movge	r3, r8
 8029298:	46a0      	movge	r8, r4
 802929a:	4630      	mov	r0, r6
 802929c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80292a0:	bfa6      	itte	ge
 80292a2:	461c      	movge	r4, r3
 80292a4:	2500      	movge	r5, #0
 80292a6:	2501      	movlt	r5, #1
 80292a8:	f7ff fd3a 	bl	8028d20 <_Balloc>
 80292ac:	b920      	cbnz	r0, 80292b8 <__mdiff+0x5c>
 80292ae:	4b2e      	ldr	r3, [pc, #184]	; (8029368 <__mdiff+0x10c>)
 80292b0:	4602      	mov	r2, r0
 80292b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80292b6:	e7e5      	b.n	8029284 <__mdiff+0x28>
 80292b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80292bc:	6926      	ldr	r6, [r4, #16]
 80292be:	60c5      	str	r5, [r0, #12]
 80292c0:	f104 0914 	add.w	r9, r4, #20
 80292c4:	f108 0514 	add.w	r5, r8, #20
 80292c8:	f100 0e14 	add.w	lr, r0, #20
 80292cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80292d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80292d4:	f108 0210 	add.w	r2, r8, #16
 80292d8:	46f2      	mov	sl, lr
 80292da:	2100      	movs	r1, #0
 80292dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80292e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80292e4:	fa1f f883 	uxth.w	r8, r3
 80292e8:	fa11 f18b 	uxtah	r1, r1, fp
 80292ec:	0c1b      	lsrs	r3, r3, #16
 80292ee:	eba1 0808 	sub.w	r8, r1, r8
 80292f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80292f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80292fa:	fa1f f888 	uxth.w	r8, r8
 80292fe:	1419      	asrs	r1, r3, #16
 8029300:	454e      	cmp	r6, r9
 8029302:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8029306:	f84a 3b04 	str.w	r3, [sl], #4
 802930a:	d8e7      	bhi.n	80292dc <__mdiff+0x80>
 802930c:	1b33      	subs	r3, r6, r4
 802930e:	3b15      	subs	r3, #21
 8029310:	f023 0303 	bic.w	r3, r3, #3
 8029314:	3304      	adds	r3, #4
 8029316:	3415      	adds	r4, #21
 8029318:	42a6      	cmp	r6, r4
 802931a:	bf38      	it	cc
 802931c:	2304      	movcc	r3, #4
 802931e:	441d      	add	r5, r3
 8029320:	4473      	add	r3, lr
 8029322:	469e      	mov	lr, r3
 8029324:	462e      	mov	r6, r5
 8029326:	4566      	cmp	r6, ip
 8029328:	d30e      	bcc.n	8029348 <__mdiff+0xec>
 802932a:	f10c 0203 	add.w	r2, ip, #3
 802932e:	1b52      	subs	r2, r2, r5
 8029330:	f022 0203 	bic.w	r2, r2, #3
 8029334:	3d03      	subs	r5, #3
 8029336:	45ac      	cmp	ip, r5
 8029338:	bf38      	it	cc
 802933a:	2200      	movcc	r2, #0
 802933c:	441a      	add	r2, r3
 802933e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8029342:	b17b      	cbz	r3, 8029364 <__mdiff+0x108>
 8029344:	6107      	str	r7, [r0, #16]
 8029346:	e7a3      	b.n	8029290 <__mdiff+0x34>
 8029348:	f856 8b04 	ldr.w	r8, [r6], #4
 802934c:	fa11 f288 	uxtah	r2, r1, r8
 8029350:	1414      	asrs	r4, r2, #16
 8029352:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8029356:	b292      	uxth	r2, r2
 8029358:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802935c:	f84e 2b04 	str.w	r2, [lr], #4
 8029360:	1421      	asrs	r1, r4, #16
 8029362:	e7e0      	b.n	8029326 <__mdiff+0xca>
 8029364:	3f01      	subs	r7, #1
 8029366:	e7ea      	b.n	802933e <__mdiff+0xe2>
 8029368:	080477ed 	.word	0x080477ed
 802936c:	080477fe 	.word	0x080477fe

08029370 <__d2b>:
 8029370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029374:	4689      	mov	r9, r1
 8029376:	2101      	movs	r1, #1
 8029378:	ec57 6b10 	vmov	r6, r7, d0
 802937c:	4690      	mov	r8, r2
 802937e:	f7ff fccf 	bl	8028d20 <_Balloc>
 8029382:	4604      	mov	r4, r0
 8029384:	b930      	cbnz	r0, 8029394 <__d2b+0x24>
 8029386:	4602      	mov	r2, r0
 8029388:	4b25      	ldr	r3, [pc, #148]	; (8029420 <__d2b+0xb0>)
 802938a:	4826      	ldr	r0, [pc, #152]	; (8029424 <__d2b+0xb4>)
 802938c:	f240 310a 	movw	r1, #778	; 0x30a
 8029390:	f7fe fc2e 	bl	8027bf0 <__assert_func>
 8029394:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8029398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802939c:	bb35      	cbnz	r5, 80293ec <__d2b+0x7c>
 802939e:	2e00      	cmp	r6, #0
 80293a0:	9301      	str	r3, [sp, #4]
 80293a2:	d028      	beq.n	80293f6 <__d2b+0x86>
 80293a4:	4668      	mov	r0, sp
 80293a6:	9600      	str	r6, [sp, #0]
 80293a8:	f7ff fd82 	bl	8028eb0 <__lo0bits>
 80293ac:	9900      	ldr	r1, [sp, #0]
 80293ae:	b300      	cbz	r0, 80293f2 <__d2b+0x82>
 80293b0:	9a01      	ldr	r2, [sp, #4]
 80293b2:	f1c0 0320 	rsb	r3, r0, #32
 80293b6:	fa02 f303 	lsl.w	r3, r2, r3
 80293ba:	430b      	orrs	r3, r1
 80293bc:	40c2      	lsrs	r2, r0
 80293be:	6163      	str	r3, [r4, #20]
 80293c0:	9201      	str	r2, [sp, #4]
 80293c2:	9b01      	ldr	r3, [sp, #4]
 80293c4:	61a3      	str	r3, [r4, #24]
 80293c6:	2b00      	cmp	r3, #0
 80293c8:	bf14      	ite	ne
 80293ca:	2202      	movne	r2, #2
 80293cc:	2201      	moveq	r2, #1
 80293ce:	6122      	str	r2, [r4, #16]
 80293d0:	b1d5      	cbz	r5, 8029408 <__d2b+0x98>
 80293d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80293d6:	4405      	add	r5, r0
 80293d8:	f8c9 5000 	str.w	r5, [r9]
 80293dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80293e0:	f8c8 0000 	str.w	r0, [r8]
 80293e4:	4620      	mov	r0, r4
 80293e6:	b003      	add	sp, #12
 80293e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80293ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80293f0:	e7d5      	b.n	802939e <__d2b+0x2e>
 80293f2:	6161      	str	r1, [r4, #20]
 80293f4:	e7e5      	b.n	80293c2 <__d2b+0x52>
 80293f6:	a801      	add	r0, sp, #4
 80293f8:	f7ff fd5a 	bl	8028eb0 <__lo0bits>
 80293fc:	9b01      	ldr	r3, [sp, #4]
 80293fe:	6163      	str	r3, [r4, #20]
 8029400:	2201      	movs	r2, #1
 8029402:	6122      	str	r2, [r4, #16]
 8029404:	3020      	adds	r0, #32
 8029406:	e7e3      	b.n	80293d0 <__d2b+0x60>
 8029408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802940c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8029410:	f8c9 0000 	str.w	r0, [r9]
 8029414:	6918      	ldr	r0, [r3, #16]
 8029416:	f7ff fd2b 	bl	8028e70 <__hi0bits>
 802941a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802941e:	e7df      	b.n	80293e0 <__d2b+0x70>
 8029420:	080477ed 	.word	0x080477ed
 8029424:	080477fe 	.word	0x080477fe

08029428 <_calloc_r>:
 8029428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802942a:	fba1 2402 	umull	r2, r4, r1, r2
 802942e:	b94c      	cbnz	r4, 8029444 <_calloc_r+0x1c>
 8029430:	4611      	mov	r1, r2
 8029432:	9201      	str	r2, [sp, #4]
 8029434:	f7fc fad6 	bl	80259e4 <_malloc_r>
 8029438:	9a01      	ldr	r2, [sp, #4]
 802943a:	4605      	mov	r5, r0
 802943c:	b930      	cbnz	r0, 802944c <_calloc_r+0x24>
 802943e:	4628      	mov	r0, r5
 8029440:	b003      	add	sp, #12
 8029442:	bd30      	pop	{r4, r5, pc}
 8029444:	220c      	movs	r2, #12
 8029446:	6002      	str	r2, [r0, #0]
 8029448:	2500      	movs	r5, #0
 802944a:	e7f8      	b.n	802943e <_calloc_r+0x16>
 802944c:	4621      	mov	r1, r4
 802944e:	f7fb ffe3 	bl	8025418 <memset>
 8029452:	e7f4      	b.n	802943e <_calloc_r+0x16>

08029454 <__ssputs_r>:
 8029454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029458:	688e      	ldr	r6, [r1, #8]
 802945a:	429e      	cmp	r6, r3
 802945c:	4682      	mov	sl, r0
 802945e:	460c      	mov	r4, r1
 8029460:	4690      	mov	r8, r2
 8029462:	461f      	mov	r7, r3
 8029464:	d838      	bhi.n	80294d8 <__ssputs_r+0x84>
 8029466:	898a      	ldrh	r2, [r1, #12]
 8029468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802946c:	d032      	beq.n	80294d4 <__ssputs_r+0x80>
 802946e:	6825      	ldr	r5, [r4, #0]
 8029470:	6909      	ldr	r1, [r1, #16]
 8029472:	eba5 0901 	sub.w	r9, r5, r1
 8029476:	6965      	ldr	r5, [r4, #20]
 8029478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802947c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029480:	3301      	adds	r3, #1
 8029482:	444b      	add	r3, r9
 8029484:	106d      	asrs	r5, r5, #1
 8029486:	429d      	cmp	r5, r3
 8029488:	bf38      	it	cc
 802948a:	461d      	movcc	r5, r3
 802948c:	0553      	lsls	r3, r2, #21
 802948e:	d531      	bpl.n	80294f4 <__ssputs_r+0xa0>
 8029490:	4629      	mov	r1, r5
 8029492:	f7fc faa7 	bl	80259e4 <_malloc_r>
 8029496:	4606      	mov	r6, r0
 8029498:	b950      	cbnz	r0, 80294b0 <__ssputs_r+0x5c>
 802949a:	230c      	movs	r3, #12
 802949c:	f8ca 3000 	str.w	r3, [sl]
 80294a0:	89a3      	ldrh	r3, [r4, #12]
 80294a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80294a6:	81a3      	strh	r3, [r4, #12]
 80294a8:	f04f 30ff 	mov.w	r0, #4294967295
 80294ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80294b0:	6921      	ldr	r1, [r4, #16]
 80294b2:	464a      	mov	r2, r9
 80294b4:	f7fb ff88 	bl	80253c8 <memcpy>
 80294b8:	89a3      	ldrh	r3, [r4, #12]
 80294ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80294be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80294c2:	81a3      	strh	r3, [r4, #12]
 80294c4:	6126      	str	r6, [r4, #16]
 80294c6:	6165      	str	r5, [r4, #20]
 80294c8:	444e      	add	r6, r9
 80294ca:	eba5 0509 	sub.w	r5, r5, r9
 80294ce:	6026      	str	r6, [r4, #0]
 80294d0:	60a5      	str	r5, [r4, #8]
 80294d2:	463e      	mov	r6, r7
 80294d4:	42be      	cmp	r6, r7
 80294d6:	d900      	bls.n	80294da <__ssputs_r+0x86>
 80294d8:	463e      	mov	r6, r7
 80294da:	6820      	ldr	r0, [r4, #0]
 80294dc:	4632      	mov	r2, r6
 80294de:	4641      	mov	r1, r8
 80294e0:	f7fb ff80 	bl	80253e4 <memmove>
 80294e4:	68a3      	ldr	r3, [r4, #8]
 80294e6:	1b9b      	subs	r3, r3, r6
 80294e8:	60a3      	str	r3, [r4, #8]
 80294ea:	6823      	ldr	r3, [r4, #0]
 80294ec:	4433      	add	r3, r6
 80294ee:	6023      	str	r3, [r4, #0]
 80294f0:	2000      	movs	r0, #0
 80294f2:	e7db      	b.n	80294ac <__ssputs_r+0x58>
 80294f4:	462a      	mov	r2, r5
 80294f6:	f000 fec5 	bl	802a284 <_realloc_r>
 80294fa:	4606      	mov	r6, r0
 80294fc:	2800      	cmp	r0, #0
 80294fe:	d1e1      	bne.n	80294c4 <__ssputs_r+0x70>
 8029500:	6921      	ldr	r1, [r4, #16]
 8029502:	4650      	mov	r0, sl
 8029504:	f7fc fa02 	bl	802590c <_free_r>
 8029508:	e7c7      	b.n	802949a <__ssputs_r+0x46>
 802950a:	Address 0x000000000802950a is out of bounds.


0802950c <_svfiprintf_r>:
 802950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029510:	4698      	mov	r8, r3
 8029512:	898b      	ldrh	r3, [r1, #12]
 8029514:	061b      	lsls	r3, r3, #24
 8029516:	b09d      	sub	sp, #116	; 0x74
 8029518:	4607      	mov	r7, r0
 802951a:	460d      	mov	r5, r1
 802951c:	4614      	mov	r4, r2
 802951e:	d50e      	bpl.n	802953e <_svfiprintf_r+0x32>
 8029520:	690b      	ldr	r3, [r1, #16]
 8029522:	b963      	cbnz	r3, 802953e <_svfiprintf_r+0x32>
 8029524:	2140      	movs	r1, #64	; 0x40
 8029526:	f7fc fa5d 	bl	80259e4 <_malloc_r>
 802952a:	6028      	str	r0, [r5, #0]
 802952c:	6128      	str	r0, [r5, #16]
 802952e:	b920      	cbnz	r0, 802953a <_svfiprintf_r+0x2e>
 8029530:	230c      	movs	r3, #12
 8029532:	603b      	str	r3, [r7, #0]
 8029534:	f04f 30ff 	mov.w	r0, #4294967295
 8029538:	e0d1      	b.n	80296de <_svfiprintf_r+0x1d2>
 802953a:	2340      	movs	r3, #64	; 0x40
 802953c:	616b      	str	r3, [r5, #20]
 802953e:	2300      	movs	r3, #0
 8029540:	9309      	str	r3, [sp, #36]	; 0x24
 8029542:	2320      	movs	r3, #32
 8029544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029548:	f8cd 800c 	str.w	r8, [sp, #12]
 802954c:	2330      	movs	r3, #48	; 0x30
 802954e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80296f8 <_svfiprintf_r+0x1ec>
 8029552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029556:	f04f 0901 	mov.w	r9, #1
 802955a:	4623      	mov	r3, r4
 802955c:	469a      	mov	sl, r3
 802955e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029562:	b10a      	cbz	r2, 8029568 <_svfiprintf_r+0x5c>
 8029564:	2a25      	cmp	r2, #37	; 0x25
 8029566:	d1f9      	bne.n	802955c <_svfiprintf_r+0x50>
 8029568:	ebba 0b04 	subs.w	fp, sl, r4
 802956c:	d00b      	beq.n	8029586 <_svfiprintf_r+0x7a>
 802956e:	465b      	mov	r3, fp
 8029570:	4622      	mov	r2, r4
 8029572:	4629      	mov	r1, r5
 8029574:	4638      	mov	r0, r7
 8029576:	f7ff ff6d 	bl	8029454 <__ssputs_r>
 802957a:	3001      	adds	r0, #1
 802957c:	f000 80aa 	beq.w	80296d4 <_svfiprintf_r+0x1c8>
 8029580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029582:	445a      	add	r2, fp
 8029584:	9209      	str	r2, [sp, #36]	; 0x24
 8029586:	f89a 3000 	ldrb.w	r3, [sl]
 802958a:	2b00      	cmp	r3, #0
 802958c:	f000 80a2 	beq.w	80296d4 <_svfiprintf_r+0x1c8>
 8029590:	2300      	movs	r3, #0
 8029592:	f04f 32ff 	mov.w	r2, #4294967295
 8029596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802959a:	f10a 0a01 	add.w	sl, sl, #1
 802959e:	9304      	str	r3, [sp, #16]
 80295a0:	9307      	str	r3, [sp, #28]
 80295a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80295a6:	931a      	str	r3, [sp, #104]	; 0x68
 80295a8:	4654      	mov	r4, sl
 80295aa:	2205      	movs	r2, #5
 80295ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80295b0:	4851      	ldr	r0, [pc, #324]	; (80296f8 <_svfiprintf_r+0x1ec>)
 80295b2:	f7d6 fe5d 	bl	8000270 <memchr>
 80295b6:	9a04      	ldr	r2, [sp, #16]
 80295b8:	b9d8      	cbnz	r0, 80295f2 <_svfiprintf_r+0xe6>
 80295ba:	06d0      	lsls	r0, r2, #27
 80295bc:	bf44      	itt	mi
 80295be:	2320      	movmi	r3, #32
 80295c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80295c4:	0711      	lsls	r1, r2, #28
 80295c6:	bf44      	itt	mi
 80295c8:	232b      	movmi	r3, #43	; 0x2b
 80295ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80295ce:	f89a 3000 	ldrb.w	r3, [sl]
 80295d2:	2b2a      	cmp	r3, #42	; 0x2a
 80295d4:	d015      	beq.n	8029602 <_svfiprintf_r+0xf6>
 80295d6:	9a07      	ldr	r2, [sp, #28]
 80295d8:	4654      	mov	r4, sl
 80295da:	2000      	movs	r0, #0
 80295dc:	f04f 0c0a 	mov.w	ip, #10
 80295e0:	4621      	mov	r1, r4
 80295e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80295e6:	3b30      	subs	r3, #48	; 0x30
 80295e8:	2b09      	cmp	r3, #9
 80295ea:	d94e      	bls.n	802968a <_svfiprintf_r+0x17e>
 80295ec:	b1b0      	cbz	r0, 802961c <_svfiprintf_r+0x110>
 80295ee:	9207      	str	r2, [sp, #28]
 80295f0:	e014      	b.n	802961c <_svfiprintf_r+0x110>
 80295f2:	eba0 0308 	sub.w	r3, r0, r8
 80295f6:	fa09 f303 	lsl.w	r3, r9, r3
 80295fa:	4313      	orrs	r3, r2
 80295fc:	9304      	str	r3, [sp, #16]
 80295fe:	46a2      	mov	sl, r4
 8029600:	e7d2      	b.n	80295a8 <_svfiprintf_r+0x9c>
 8029602:	9b03      	ldr	r3, [sp, #12]
 8029604:	1d19      	adds	r1, r3, #4
 8029606:	681b      	ldr	r3, [r3, #0]
 8029608:	9103      	str	r1, [sp, #12]
 802960a:	2b00      	cmp	r3, #0
 802960c:	bfbb      	ittet	lt
 802960e:	425b      	neglt	r3, r3
 8029610:	f042 0202 	orrlt.w	r2, r2, #2
 8029614:	9307      	strge	r3, [sp, #28]
 8029616:	9307      	strlt	r3, [sp, #28]
 8029618:	bfb8      	it	lt
 802961a:	9204      	strlt	r2, [sp, #16]
 802961c:	7823      	ldrb	r3, [r4, #0]
 802961e:	2b2e      	cmp	r3, #46	; 0x2e
 8029620:	d10c      	bne.n	802963c <_svfiprintf_r+0x130>
 8029622:	7863      	ldrb	r3, [r4, #1]
 8029624:	2b2a      	cmp	r3, #42	; 0x2a
 8029626:	d135      	bne.n	8029694 <_svfiprintf_r+0x188>
 8029628:	9b03      	ldr	r3, [sp, #12]
 802962a:	1d1a      	adds	r2, r3, #4
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	9203      	str	r2, [sp, #12]
 8029630:	2b00      	cmp	r3, #0
 8029632:	bfb8      	it	lt
 8029634:	f04f 33ff 	movlt.w	r3, #4294967295
 8029638:	3402      	adds	r4, #2
 802963a:	9305      	str	r3, [sp, #20]
 802963c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8029708 <_svfiprintf_r+0x1fc>
 8029640:	7821      	ldrb	r1, [r4, #0]
 8029642:	2203      	movs	r2, #3
 8029644:	4650      	mov	r0, sl
 8029646:	f7d6 fe13 	bl	8000270 <memchr>
 802964a:	b140      	cbz	r0, 802965e <_svfiprintf_r+0x152>
 802964c:	2340      	movs	r3, #64	; 0x40
 802964e:	eba0 000a 	sub.w	r0, r0, sl
 8029652:	fa03 f000 	lsl.w	r0, r3, r0
 8029656:	9b04      	ldr	r3, [sp, #16]
 8029658:	4303      	orrs	r3, r0
 802965a:	3401      	adds	r4, #1
 802965c:	9304      	str	r3, [sp, #16]
 802965e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029662:	4826      	ldr	r0, [pc, #152]	; (80296fc <_svfiprintf_r+0x1f0>)
 8029664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029668:	2206      	movs	r2, #6
 802966a:	f7d6 fe01 	bl	8000270 <memchr>
 802966e:	2800      	cmp	r0, #0
 8029670:	d038      	beq.n	80296e4 <_svfiprintf_r+0x1d8>
 8029672:	4b23      	ldr	r3, [pc, #140]	; (8029700 <_svfiprintf_r+0x1f4>)
 8029674:	bb1b      	cbnz	r3, 80296be <_svfiprintf_r+0x1b2>
 8029676:	9b03      	ldr	r3, [sp, #12]
 8029678:	3307      	adds	r3, #7
 802967a:	f023 0307 	bic.w	r3, r3, #7
 802967e:	3308      	adds	r3, #8
 8029680:	9303      	str	r3, [sp, #12]
 8029682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029684:	4433      	add	r3, r6
 8029686:	9309      	str	r3, [sp, #36]	; 0x24
 8029688:	e767      	b.n	802955a <_svfiprintf_r+0x4e>
 802968a:	fb0c 3202 	mla	r2, ip, r2, r3
 802968e:	460c      	mov	r4, r1
 8029690:	2001      	movs	r0, #1
 8029692:	e7a5      	b.n	80295e0 <_svfiprintf_r+0xd4>
 8029694:	2300      	movs	r3, #0
 8029696:	3401      	adds	r4, #1
 8029698:	9305      	str	r3, [sp, #20]
 802969a:	4619      	mov	r1, r3
 802969c:	f04f 0c0a 	mov.w	ip, #10
 80296a0:	4620      	mov	r0, r4
 80296a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80296a6:	3a30      	subs	r2, #48	; 0x30
 80296a8:	2a09      	cmp	r2, #9
 80296aa:	d903      	bls.n	80296b4 <_svfiprintf_r+0x1a8>
 80296ac:	2b00      	cmp	r3, #0
 80296ae:	d0c5      	beq.n	802963c <_svfiprintf_r+0x130>
 80296b0:	9105      	str	r1, [sp, #20]
 80296b2:	e7c3      	b.n	802963c <_svfiprintf_r+0x130>
 80296b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80296b8:	4604      	mov	r4, r0
 80296ba:	2301      	movs	r3, #1
 80296bc:	e7f0      	b.n	80296a0 <_svfiprintf_r+0x194>
 80296be:	ab03      	add	r3, sp, #12
 80296c0:	9300      	str	r3, [sp, #0]
 80296c2:	462a      	mov	r2, r5
 80296c4:	4b0f      	ldr	r3, [pc, #60]	; (8029704 <_svfiprintf_r+0x1f8>)
 80296c6:	a904      	add	r1, sp, #16
 80296c8:	4638      	mov	r0, r7
 80296ca:	f7fc fa91 	bl	8025bf0 <_printf_float>
 80296ce:	1c42      	adds	r2, r0, #1
 80296d0:	4606      	mov	r6, r0
 80296d2:	d1d6      	bne.n	8029682 <_svfiprintf_r+0x176>
 80296d4:	89ab      	ldrh	r3, [r5, #12]
 80296d6:	065b      	lsls	r3, r3, #25
 80296d8:	f53f af2c 	bmi.w	8029534 <_svfiprintf_r+0x28>
 80296dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80296de:	b01d      	add	sp, #116	; 0x74
 80296e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296e4:	ab03      	add	r3, sp, #12
 80296e6:	9300      	str	r3, [sp, #0]
 80296e8:	462a      	mov	r2, r5
 80296ea:	4b06      	ldr	r3, [pc, #24]	; (8029704 <_svfiprintf_r+0x1f8>)
 80296ec:	a904      	add	r1, sp, #16
 80296ee:	4638      	mov	r0, r7
 80296f0:	f7fc fd0a 	bl	8026108 <_printf_i>
 80296f4:	e7eb      	b.n	80296ce <_svfiprintf_r+0x1c2>
 80296f6:	bf00      	nop
 80296f8:	0804795c 	.word	0x0804795c
 80296fc:	08047966 	.word	0x08047966
 8029700:	08025bf1 	.word	0x08025bf1
 8029704:	08029455 	.word	0x08029455
 8029708:	08047962 	.word	0x08047962

0802970c <_sungetc_r>:
 802970c:	b538      	push	{r3, r4, r5, lr}
 802970e:	1c4b      	adds	r3, r1, #1
 8029710:	4614      	mov	r4, r2
 8029712:	d103      	bne.n	802971c <_sungetc_r+0x10>
 8029714:	f04f 35ff 	mov.w	r5, #4294967295
 8029718:	4628      	mov	r0, r5
 802971a:	bd38      	pop	{r3, r4, r5, pc}
 802971c:	8993      	ldrh	r3, [r2, #12]
 802971e:	f023 0320 	bic.w	r3, r3, #32
 8029722:	8193      	strh	r3, [r2, #12]
 8029724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029726:	6852      	ldr	r2, [r2, #4]
 8029728:	b2cd      	uxtb	r5, r1
 802972a:	b18b      	cbz	r3, 8029750 <_sungetc_r+0x44>
 802972c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802972e:	4293      	cmp	r3, r2
 8029730:	dd08      	ble.n	8029744 <_sungetc_r+0x38>
 8029732:	6823      	ldr	r3, [r4, #0]
 8029734:	1e5a      	subs	r2, r3, #1
 8029736:	6022      	str	r2, [r4, #0]
 8029738:	f803 5c01 	strb.w	r5, [r3, #-1]
 802973c:	6863      	ldr	r3, [r4, #4]
 802973e:	3301      	adds	r3, #1
 8029740:	6063      	str	r3, [r4, #4]
 8029742:	e7e9      	b.n	8029718 <_sungetc_r+0xc>
 8029744:	4621      	mov	r1, r4
 8029746:	f000 fd1b 	bl	802a180 <__submore>
 802974a:	2800      	cmp	r0, #0
 802974c:	d0f1      	beq.n	8029732 <_sungetc_r+0x26>
 802974e:	e7e1      	b.n	8029714 <_sungetc_r+0x8>
 8029750:	6921      	ldr	r1, [r4, #16]
 8029752:	6823      	ldr	r3, [r4, #0]
 8029754:	b151      	cbz	r1, 802976c <_sungetc_r+0x60>
 8029756:	4299      	cmp	r1, r3
 8029758:	d208      	bcs.n	802976c <_sungetc_r+0x60>
 802975a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802975e:	42a9      	cmp	r1, r5
 8029760:	d104      	bne.n	802976c <_sungetc_r+0x60>
 8029762:	3b01      	subs	r3, #1
 8029764:	3201      	adds	r2, #1
 8029766:	6023      	str	r3, [r4, #0]
 8029768:	6062      	str	r2, [r4, #4]
 802976a:	e7d5      	b.n	8029718 <_sungetc_r+0xc>
 802976c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029774:	6363      	str	r3, [r4, #52]	; 0x34
 8029776:	2303      	movs	r3, #3
 8029778:	63a3      	str	r3, [r4, #56]	; 0x38
 802977a:	4623      	mov	r3, r4
 802977c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029780:	6023      	str	r3, [r4, #0]
 8029782:	2301      	movs	r3, #1
 8029784:	e7dc      	b.n	8029740 <_sungetc_r+0x34>

08029786 <__ssrefill_r>:
 8029786:	b510      	push	{r4, lr}
 8029788:	460c      	mov	r4, r1
 802978a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802978c:	b169      	cbz	r1, 80297aa <__ssrefill_r+0x24>
 802978e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029792:	4299      	cmp	r1, r3
 8029794:	d001      	beq.n	802979a <__ssrefill_r+0x14>
 8029796:	f7fc f8b9 	bl	802590c <_free_r>
 802979a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802979c:	6063      	str	r3, [r4, #4]
 802979e:	2000      	movs	r0, #0
 80297a0:	6360      	str	r0, [r4, #52]	; 0x34
 80297a2:	b113      	cbz	r3, 80297aa <__ssrefill_r+0x24>
 80297a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80297a6:	6023      	str	r3, [r4, #0]
 80297a8:	bd10      	pop	{r4, pc}
 80297aa:	6923      	ldr	r3, [r4, #16]
 80297ac:	6023      	str	r3, [r4, #0]
 80297ae:	2300      	movs	r3, #0
 80297b0:	6063      	str	r3, [r4, #4]
 80297b2:	89a3      	ldrh	r3, [r4, #12]
 80297b4:	f043 0320 	orr.w	r3, r3, #32
 80297b8:	81a3      	strh	r3, [r4, #12]
 80297ba:	f04f 30ff 	mov.w	r0, #4294967295
 80297be:	e7f3      	b.n	80297a8 <__ssrefill_r+0x22>

080297c0 <__ssvfiscanf_r>:
 80297c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80297c4:	460c      	mov	r4, r1
 80297c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80297ca:	2100      	movs	r1, #0
 80297cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80297d0:	49a6      	ldr	r1, [pc, #664]	; (8029a6c <__ssvfiscanf_r+0x2ac>)
 80297d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80297d4:	f10d 0804 	add.w	r8, sp, #4
 80297d8:	49a5      	ldr	r1, [pc, #660]	; (8029a70 <__ssvfiscanf_r+0x2b0>)
 80297da:	4fa6      	ldr	r7, [pc, #664]	; (8029a74 <__ssvfiscanf_r+0x2b4>)
 80297dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8029a78 <__ssvfiscanf_r+0x2b8>
 80297e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80297e4:	4606      	mov	r6, r0
 80297e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80297e8:	9300      	str	r3, [sp, #0]
 80297ea:	7813      	ldrb	r3, [r2, #0]
 80297ec:	2b00      	cmp	r3, #0
 80297ee:	f000 815a 	beq.w	8029aa6 <__ssvfiscanf_r+0x2e6>
 80297f2:	5dd9      	ldrb	r1, [r3, r7]
 80297f4:	f011 0108 	ands.w	r1, r1, #8
 80297f8:	f102 0501 	add.w	r5, r2, #1
 80297fc:	d019      	beq.n	8029832 <__ssvfiscanf_r+0x72>
 80297fe:	6863      	ldr	r3, [r4, #4]
 8029800:	2b00      	cmp	r3, #0
 8029802:	dd0f      	ble.n	8029824 <__ssvfiscanf_r+0x64>
 8029804:	6823      	ldr	r3, [r4, #0]
 8029806:	781a      	ldrb	r2, [r3, #0]
 8029808:	5cba      	ldrb	r2, [r7, r2]
 802980a:	0712      	lsls	r2, r2, #28
 802980c:	d401      	bmi.n	8029812 <__ssvfiscanf_r+0x52>
 802980e:	462a      	mov	r2, r5
 8029810:	e7eb      	b.n	80297ea <__ssvfiscanf_r+0x2a>
 8029812:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029814:	3201      	adds	r2, #1
 8029816:	9245      	str	r2, [sp, #276]	; 0x114
 8029818:	6862      	ldr	r2, [r4, #4]
 802981a:	3301      	adds	r3, #1
 802981c:	3a01      	subs	r2, #1
 802981e:	6062      	str	r2, [r4, #4]
 8029820:	6023      	str	r3, [r4, #0]
 8029822:	e7ec      	b.n	80297fe <__ssvfiscanf_r+0x3e>
 8029824:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029826:	4621      	mov	r1, r4
 8029828:	4630      	mov	r0, r6
 802982a:	4798      	blx	r3
 802982c:	2800      	cmp	r0, #0
 802982e:	d0e9      	beq.n	8029804 <__ssvfiscanf_r+0x44>
 8029830:	e7ed      	b.n	802980e <__ssvfiscanf_r+0x4e>
 8029832:	2b25      	cmp	r3, #37	; 0x25
 8029834:	d012      	beq.n	802985c <__ssvfiscanf_r+0x9c>
 8029836:	469a      	mov	sl, r3
 8029838:	6863      	ldr	r3, [r4, #4]
 802983a:	2b00      	cmp	r3, #0
 802983c:	f340 8091 	ble.w	8029962 <__ssvfiscanf_r+0x1a2>
 8029840:	6822      	ldr	r2, [r4, #0]
 8029842:	7813      	ldrb	r3, [r2, #0]
 8029844:	4553      	cmp	r3, sl
 8029846:	f040 812e 	bne.w	8029aa6 <__ssvfiscanf_r+0x2e6>
 802984a:	6863      	ldr	r3, [r4, #4]
 802984c:	3b01      	subs	r3, #1
 802984e:	6063      	str	r3, [r4, #4]
 8029850:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8029852:	3201      	adds	r2, #1
 8029854:	3301      	adds	r3, #1
 8029856:	6022      	str	r2, [r4, #0]
 8029858:	9345      	str	r3, [sp, #276]	; 0x114
 802985a:	e7d8      	b.n	802980e <__ssvfiscanf_r+0x4e>
 802985c:	9141      	str	r1, [sp, #260]	; 0x104
 802985e:	9143      	str	r1, [sp, #268]	; 0x10c
 8029860:	7853      	ldrb	r3, [r2, #1]
 8029862:	2b2a      	cmp	r3, #42	; 0x2a
 8029864:	bf02      	ittt	eq
 8029866:	2310      	moveq	r3, #16
 8029868:	1c95      	addeq	r5, r2, #2
 802986a:	9341      	streq	r3, [sp, #260]	; 0x104
 802986c:	220a      	movs	r2, #10
 802986e:	46aa      	mov	sl, r5
 8029870:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8029874:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029878:	2b09      	cmp	r3, #9
 802987a:	d91d      	bls.n	80298b8 <__ssvfiscanf_r+0xf8>
 802987c:	487e      	ldr	r0, [pc, #504]	; (8029a78 <__ssvfiscanf_r+0x2b8>)
 802987e:	2203      	movs	r2, #3
 8029880:	f7d6 fcf6 	bl	8000270 <memchr>
 8029884:	b140      	cbz	r0, 8029898 <__ssvfiscanf_r+0xd8>
 8029886:	2301      	movs	r3, #1
 8029888:	eba0 0009 	sub.w	r0, r0, r9
 802988c:	fa03 f000 	lsl.w	r0, r3, r0
 8029890:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029892:	4318      	orrs	r0, r3
 8029894:	9041      	str	r0, [sp, #260]	; 0x104
 8029896:	4655      	mov	r5, sl
 8029898:	f815 3b01 	ldrb.w	r3, [r5], #1
 802989c:	2b78      	cmp	r3, #120	; 0x78
 802989e:	d806      	bhi.n	80298ae <__ssvfiscanf_r+0xee>
 80298a0:	2b57      	cmp	r3, #87	; 0x57
 80298a2:	d810      	bhi.n	80298c6 <__ssvfiscanf_r+0x106>
 80298a4:	2b25      	cmp	r3, #37	; 0x25
 80298a6:	d0c6      	beq.n	8029836 <__ssvfiscanf_r+0x76>
 80298a8:	d856      	bhi.n	8029958 <__ssvfiscanf_r+0x198>
 80298aa:	2b00      	cmp	r3, #0
 80298ac:	d064      	beq.n	8029978 <__ssvfiscanf_r+0x1b8>
 80298ae:	2303      	movs	r3, #3
 80298b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80298b2:	230a      	movs	r3, #10
 80298b4:	9342      	str	r3, [sp, #264]	; 0x108
 80298b6:	e071      	b.n	802999c <__ssvfiscanf_r+0x1dc>
 80298b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80298ba:	fb02 1103 	mla	r1, r2, r3, r1
 80298be:	3930      	subs	r1, #48	; 0x30
 80298c0:	9143      	str	r1, [sp, #268]	; 0x10c
 80298c2:	4655      	mov	r5, sl
 80298c4:	e7d3      	b.n	802986e <__ssvfiscanf_r+0xae>
 80298c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80298ca:	2a20      	cmp	r2, #32
 80298cc:	d8ef      	bhi.n	80298ae <__ssvfiscanf_r+0xee>
 80298ce:	a101      	add	r1, pc, #4	; (adr r1, 80298d4 <__ssvfiscanf_r+0x114>)
 80298d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80298d4:	08029987 	.word	0x08029987
 80298d8:	080298af 	.word	0x080298af
 80298dc:	080298af 	.word	0x080298af
 80298e0:	080299e5 	.word	0x080299e5
 80298e4:	080298af 	.word	0x080298af
 80298e8:	080298af 	.word	0x080298af
 80298ec:	080298af 	.word	0x080298af
 80298f0:	080298af 	.word	0x080298af
 80298f4:	080298af 	.word	0x080298af
 80298f8:	080298af 	.word	0x080298af
 80298fc:	080298af 	.word	0x080298af
 8029900:	080299fb 	.word	0x080299fb
 8029904:	080299d1 	.word	0x080299d1
 8029908:	0802995f 	.word	0x0802995f
 802990c:	0802995f 	.word	0x0802995f
 8029910:	0802995f 	.word	0x0802995f
 8029914:	080298af 	.word	0x080298af
 8029918:	080299d5 	.word	0x080299d5
 802991c:	080298af 	.word	0x080298af
 8029920:	080298af 	.word	0x080298af
 8029924:	080298af 	.word	0x080298af
 8029928:	080298af 	.word	0x080298af
 802992c:	08029a0b 	.word	0x08029a0b
 8029930:	080299dd 	.word	0x080299dd
 8029934:	0802997f 	.word	0x0802997f
 8029938:	080298af 	.word	0x080298af
 802993c:	080298af 	.word	0x080298af
 8029940:	08029a07 	.word	0x08029a07
 8029944:	080298af 	.word	0x080298af
 8029948:	080299d1 	.word	0x080299d1
 802994c:	080298af 	.word	0x080298af
 8029950:	080298af 	.word	0x080298af
 8029954:	08029987 	.word	0x08029987
 8029958:	3b45      	subs	r3, #69	; 0x45
 802995a:	2b02      	cmp	r3, #2
 802995c:	d8a7      	bhi.n	80298ae <__ssvfiscanf_r+0xee>
 802995e:	2305      	movs	r3, #5
 8029960:	e01b      	b.n	802999a <__ssvfiscanf_r+0x1da>
 8029962:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029964:	4621      	mov	r1, r4
 8029966:	4630      	mov	r0, r6
 8029968:	4798      	blx	r3
 802996a:	2800      	cmp	r0, #0
 802996c:	f43f af68 	beq.w	8029840 <__ssvfiscanf_r+0x80>
 8029970:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029972:	2800      	cmp	r0, #0
 8029974:	f040 808d 	bne.w	8029a92 <__ssvfiscanf_r+0x2d2>
 8029978:	f04f 30ff 	mov.w	r0, #4294967295
 802997c:	e08f      	b.n	8029a9e <__ssvfiscanf_r+0x2de>
 802997e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029980:	f042 0220 	orr.w	r2, r2, #32
 8029984:	9241      	str	r2, [sp, #260]	; 0x104
 8029986:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802998c:	9241      	str	r2, [sp, #260]	; 0x104
 802998e:	2210      	movs	r2, #16
 8029990:	2b6f      	cmp	r3, #111	; 0x6f
 8029992:	9242      	str	r2, [sp, #264]	; 0x108
 8029994:	bf34      	ite	cc
 8029996:	2303      	movcc	r3, #3
 8029998:	2304      	movcs	r3, #4
 802999a:	9347      	str	r3, [sp, #284]	; 0x11c
 802999c:	6863      	ldr	r3, [r4, #4]
 802999e:	2b00      	cmp	r3, #0
 80299a0:	dd42      	ble.n	8029a28 <__ssvfiscanf_r+0x268>
 80299a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80299a4:	0659      	lsls	r1, r3, #25
 80299a6:	d404      	bmi.n	80299b2 <__ssvfiscanf_r+0x1f2>
 80299a8:	6823      	ldr	r3, [r4, #0]
 80299aa:	781a      	ldrb	r2, [r3, #0]
 80299ac:	5cba      	ldrb	r2, [r7, r2]
 80299ae:	0712      	lsls	r2, r2, #28
 80299b0:	d441      	bmi.n	8029a36 <__ssvfiscanf_r+0x276>
 80299b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80299b4:	2b02      	cmp	r3, #2
 80299b6:	dc50      	bgt.n	8029a5a <__ssvfiscanf_r+0x29a>
 80299b8:	466b      	mov	r3, sp
 80299ba:	4622      	mov	r2, r4
 80299bc:	a941      	add	r1, sp, #260	; 0x104
 80299be:	4630      	mov	r0, r6
 80299c0:	f000 f9d0 	bl	8029d64 <_scanf_chars>
 80299c4:	2801      	cmp	r0, #1
 80299c6:	d06e      	beq.n	8029aa6 <__ssvfiscanf_r+0x2e6>
 80299c8:	2802      	cmp	r0, #2
 80299ca:	f47f af20 	bne.w	802980e <__ssvfiscanf_r+0x4e>
 80299ce:	e7cf      	b.n	8029970 <__ssvfiscanf_r+0x1b0>
 80299d0:	220a      	movs	r2, #10
 80299d2:	e7dd      	b.n	8029990 <__ssvfiscanf_r+0x1d0>
 80299d4:	2300      	movs	r3, #0
 80299d6:	9342      	str	r3, [sp, #264]	; 0x108
 80299d8:	2303      	movs	r3, #3
 80299da:	e7de      	b.n	802999a <__ssvfiscanf_r+0x1da>
 80299dc:	2308      	movs	r3, #8
 80299de:	9342      	str	r3, [sp, #264]	; 0x108
 80299e0:	2304      	movs	r3, #4
 80299e2:	e7da      	b.n	802999a <__ssvfiscanf_r+0x1da>
 80299e4:	4629      	mov	r1, r5
 80299e6:	4640      	mov	r0, r8
 80299e8:	f000 fb92 	bl	802a110 <__sccl>
 80299ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80299ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80299f2:	9341      	str	r3, [sp, #260]	; 0x104
 80299f4:	4605      	mov	r5, r0
 80299f6:	2301      	movs	r3, #1
 80299f8:	e7cf      	b.n	802999a <__ssvfiscanf_r+0x1da>
 80299fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80299fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029a00:	9341      	str	r3, [sp, #260]	; 0x104
 8029a02:	2300      	movs	r3, #0
 8029a04:	e7c9      	b.n	802999a <__ssvfiscanf_r+0x1da>
 8029a06:	2302      	movs	r3, #2
 8029a08:	e7c7      	b.n	802999a <__ssvfiscanf_r+0x1da>
 8029a0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029a0c:	06c3      	lsls	r3, r0, #27
 8029a0e:	f53f aefe 	bmi.w	802980e <__ssvfiscanf_r+0x4e>
 8029a12:	9b00      	ldr	r3, [sp, #0]
 8029a14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029a16:	1d19      	adds	r1, r3, #4
 8029a18:	9100      	str	r1, [sp, #0]
 8029a1a:	681b      	ldr	r3, [r3, #0]
 8029a1c:	f010 0f01 	tst.w	r0, #1
 8029a20:	bf14      	ite	ne
 8029a22:	801a      	strhne	r2, [r3, #0]
 8029a24:	601a      	streq	r2, [r3, #0]
 8029a26:	e6f2      	b.n	802980e <__ssvfiscanf_r+0x4e>
 8029a28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029a2a:	4621      	mov	r1, r4
 8029a2c:	4630      	mov	r0, r6
 8029a2e:	4798      	blx	r3
 8029a30:	2800      	cmp	r0, #0
 8029a32:	d0b6      	beq.n	80299a2 <__ssvfiscanf_r+0x1e2>
 8029a34:	e79c      	b.n	8029970 <__ssvfiscanf_r+0x1b0>
 8029a36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029a38:	3201      	adds	r2, #1
 8029a3a:	9245      	str	r2, [sp, #276]	; 0x114
 8029a3c:	6862      	ldr	r2, [r4, #4]
 8029a3e:	3a01      	subs	r2, #1
 8029a40:	2a00      	cmp	r2, #0
 8029a42:	6062      	str	r2, [r4, #4]
 8029a44:	dd02      	ble.n	8029a4c <__ssvfiscanf_r+0x28c>
 8029a46:	3301      	adds	r3, #1
 8029a48:	6023      	str	r3, [r4, #0]
 8029a4a:	e7ad      	b.n	80299a8 <__ssvfiscanf_r+0x1e8>
 8029a4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029a4e:	4621      	mov	r1, r4
 8029a50:	4630      	mov	r0, r6
 8029a52:	4798      	blx	r3
 8029a54:	2800      	cmp	r0, #0
 8029a56:	d0a7      	beq.n	80299a8 <__ssvfiscanf_r+0x1e8>
 8029a58:	e78a      	b.n	8029970 <__ssvfiscanf_r+0x1b0>
 8029a5a:	2b04      	cmp	r3, #4
 8029a5c:	dc0e      	bgt.n	8029a7c <__ssvfiscanf_r+0x2bc>
 8029a5e:	466b      	mov	r3, sp
 8029a60:	4622      	mov	r2, r4
 8029a62:	a941      	add	r1, sp, #260	; 0x104
 8029a64:	4630      	mov	r0, r6
 8029a66:	f000 f9d7 	bl	8029e18 <_scanf_i>
 8029a6a:	e7ab      	b.n	80299c4 <__ssvfiscanf_r+0x204>
 8029a6c:	0802970d 	.word	0x0802970d
 8029a70:	08029787 	.word	0x08029787
 8029a74:	080470ad 	.word	0x080470ad
 8029a78:	08047962 	.word	0x08047962
 8029a7c:	4b0b      	ldr	r3, [pc, #44]	; (8029aac <__ssvfiscanf_r+0x2ec>)
 8029a7e:	2b00      	cmp	r3, #0
 8029a80:	f43f aec5 	beq.w	802980e <__ssvfiscanf_r+0x4e>
 8029a84:	466b      	mov	r3, sp
 8029a86:	4622      	mov	r2, r4
 8029a88:	a941      	add	r1, sp, #260	; 0x104
 8029a8a:	4630      	mov	r0, r6
 8029a8c:	f3af 8000 	nop.w
 8029a90:	e798      	b.n	80299c4 <__ssvfiscanf_r+0x204>
 8029a92:	89a3      	ldrh	r3, [r4, #12]
 8029a94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029a98:	bf18      	it	ne
 8029a9a:	f04f 30ff 	movne.w	r0, #4294967295
 8029a9e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8029aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029aa6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029aa8:	e7f9      	b.n	8029a9e <__ssvfiscanf_r+0x2de>
 8029aaa:	bf00      	nop
 8029aac:	00000000 	.word	0x00000000

08029ab0 <__sfputc_r>:
 8029ab0:	6893      	ldr	r3, [r2, #8]
 8029ab2:	3b01      	subs	r3, #1
 8029ab4:	2b00      	cmp	r3, #0
 8029ab6:	b410      	push	{r4}
 8029ab8:	6093      	str	r3, [r2, #8]
 8029aba:	da08      	bge.n	8029ace <__sfputc_r+0x1e>
 8029abc:	6994      	ldr	r4, [r2, #24]
 8029abe:	42a3      	cmp	r3, r4
 8029ac0:	db01      	blt.n	8029ac6 <__sfputc_r+0x16>
 8029ac2:	290a      	cmp	r1, #10
 8029ac4:	d103      	bne.n	8029ace <__sfputc_r+0x1e>
 8029ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029aca:	f7fd bf73 	b.w	80279b4 <__swbuf_r>
 8029ace:	6813      	ldr	r3, [r2, #0]
 8029ad0:	1c58      	adds	r0, r3, #1
 8029ad2:	6010      	str	r0, [r2, #0]
 8029ad4:	7019      	strb	r1, [r3, #0]
 8029ad6:	4608      	mov	r0, r1
 8029ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029adc:	4770      	bx	lr

08029ade <__sfputs_r>:
 8029ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ae0:	4606      	mov	r6, r0
 8029ae2:	460f      	mov	r7, r1
 8029ae4:	4614      	mov	r4, r2
 8029ae6:	18d5      	adds	r5, r2, r3
 8029ae8:	42ac      	cmp	r4, r5
 8029aea:	d101      	bne.n	8029af0 <__sfputs_r+0x12>
 8029aec:	2000      	movs	r0, #0
 8029aee:	e007      	b.n	8029b00 <__sfputs_r+0x22>
 8029af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029af4:	463a      	mov	r2, r7
 8029af6:	4630      	mov	r0, r6
 8029af8:	f7ff ffda 	bl	8029ab0 <__sfputc_r>
 8029afc:	1c43      	adds	r3, r0, #1
 8029afe:	d1f3      	bne.n	8029ae8 <__sfputs_r+0xa>
 8029b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029b02:	Address 0x0000000008029b02 is out of bounds.


08029b04 <_vfiprintf_r>:
 8029b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b08:	460d      	mov	r5, r1
 8029b0a:	b09d      	sub	sp, #116	; 0x74
 8029b0c:	4614      	mov	r4, r2
 8029b0e:	4698      	mov	r8, r3
 8029b10:	4606      	mov	r6, r0
 8029b12:	b118      	cbz	r0, 8029b1c <_vfiprintf_r+0x18>
 8029b14:	6983      	ldr	r3, [r0, #24]
 8029b16:	b90b      	cbnz	r3, 8029b1c <_vfiprintf_r+0x18>
 8029b18:	f7fb fa5c 	bl	8024fd4 <__sinit>
 8029b1c:	4b89      	ldr	r3, [pc, #548]	; (8029d44 <_vfiprintf_r+0x240>)
 8029b1e:	429d      	cmp	r5, r3
 8029b20:	d11b      	bne.n	8029b5a <_vfiprintf_r+0x56>
 8029b22:	6875      	ldr	r5, [r6, #4]
 8029b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b26:	07d9      	lsls	r1, r3, #31
 8029b28:	d405      	bmi.n	8029b36 <_vfiprintf_r+0x32>
 8029b2a:	89ab      	ldrh	r3, [r5, #12]
 8029b2c:	059a      	lsls	r2, r3, #22
 8029b2e:	d402      	bmi.n	8029b36 <_vfiprintf_r+0x32>
 8029b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b32:	f7fb fc25 	bl	8025380 <__retarget_lock_acquire_recursive>
 8029b36:	89ab      	ldrh	r3, [r5, #12]
 8029b38:	071b      	lsls	r3, r3, #28
 8029b3a:	d501      	bpl.n	8029b40 <_vfiprintf_r+0x3c>
 8029b3c:	692b      	ldr	r3, [r5, #16]
 8029b3e:	b9eb      	cbnz	r3, 8029b7c <_vfiprintf_r+0x78>
 8029b40:	4629      	mov	r1, r5
 8029b42:	4630      	mov	r0, r6
 8029b44:	f7fd ff9a 	bl	8027a7c <__swsetup_r>
 8029b48:	b1c0      	cbz	r0, 8029b7c <_vfiprintf_r+0x78>
 8029b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b4c:	07dc      	lsls	r4, r3, #31
 8029b4e:	d50e      	bpl.n	8029b6e <_vfiprintf_r+0x6a>
 8029b50:	f04f 30ff 	mov.w	r0, #4294967295
 8029b54:	b01d      	add	sp, #116	; 0x74
 8029b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b5a:	4b7b      	ldr	r3, [pc, #492]	; (8029d48 <_vfiprintf_r+0x244>)
 8029b5c:	429d      	cmp	r5, r3
 8029b5e:	d101      	bne.n	8029b64 <_vfiprintf_r+0x60>
 8029b60:	68b5      	ldr	r5, [r6, #8]
 8029b62:	e7df      	b.n	8029b24 <_vfiprintf_r+0x20>
 8029b64:	4b79      	ldr	r3, [pc, #484]	; (8029d4c <_vfiprintf_r+0x248>)
 8029b66:	429d      	cmp	r5, r3
 8029b68:	bf08      	it	eq
 8029b6a:	68f5      	ldreq	r5, [r6, #12]
 8029b6c:	e7da      	b.n	8029b24 <_vfiprintf_r+0x20>
 8029b6e:	89ab      	ldrh	r3, [r5, #12]
 8029b70:	0598      	lsls	r0, r3, #22
 8029b72:	d4ed      	bmi.n	8029b50 <_vfiprintf_r+0x4c>
 8029b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b76:	f7fb fc05 	bl	8025384 <__retarget_lock_release_recursive>
 8029b7a:	e7e9      	b.n	8029b50 <_vfiprintf_r+0x4c>
 8029b7c:	2300      	movs	r3, #0
 8029b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8029b80:	2320      	movs	r3, #32
 8029b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8029b8a:	2330      	movs	r3, #48	; 0x30
 8029b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029d50 <_vfiprintf_r+0x24c>
 8029b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029b94:	f04f 0901 	mov.w	r9, #1
 8029b98:	4623      	mov	r3, r4
 8029b9a:	469a      	mov	sl, r3
 8029b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029ba0:	b10a      	cbz	r2, 8029ba6 <_vfiprintf_r+0xa2>
 8029ba2:	2a25      	cmp	r2, #37	; 0x25
 8029ba4:	d1f9      	bne.n	8029b9a <_vfiprintf_r+0x96>
 8029ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8029baa:	d00b      	beq.n	8029bc4 <_vfiprintf_r+0xc0>
 8029bac:	465b      	mov	r3, fp
 8029bae:	4622      	mov	r2, r4
 8029bb0:	4629      	mov	r1, r5
 8029bb2:	4630      	mov	r0, r6
 8029bb4:	f7ff ff93 	bl	8029ade <__sfputs_r>
 8029bb8:	3001      	adds	r0, #1
 8029bba:	f000 80aa 	beq.w	8029d12 <_vfiprintf_r+0x20e>
 8029bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029bc0:	445a      	add	r2, fp
 8029bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8029bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8029bc8:	2b00      	cmp	r3, #0
 8029bca:	f000 80a2 	beq.w	8029d12 <_vfiprintf_r+0x20e>
 8029bce:	2300      	movs	r3, #0
 8029bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8029bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029bd8:	f10a 0a01 	add.w	sl, sl, #1
 8029bdc:	9304      	str	r3, [sp, #16]
 8029bde:	9307      	str	r3, [sp, #28]
 8029be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029be4:	931a      	str	r3, [sp, #104]	; 0x68
 8029be6:	4654      	mov	r4, sl
 8029be8:	2205      	movs	r2, #5
 8029bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029bee:	4858      	ldr	r0, [pc, #352]	; (8029d50 <_vfiprintf_r+0x24c>)
 8029bf0:	f7d6 fb3e 	bl	8000270 <memchr>
 8029bf4:	9a04      	ldr	r2, [sp, #16]
 8029bf6:	b9d8      	cbnz	r0, 8029c30 <_vfiprintf_r+0x12c>
 8029bf8:	06d1      	lsls	r1, r2, #27
 8029bfa:	bf44      	itt	mi
 8029bfc:	2320      	movmi	r3, #32
 8029bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029c02:	0713      	lsls	r3, r2, #28
 8029c04:	bf44      	itt	mi
 8029c06:	232b      	movmi	r3, #43	; 0x2b
 8029c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8029c10:	2b2a      	cmp	r3, #42	; 0x2a
 8029c12:	d015      	beq.n	8029c40 <_vfiprintf_r+0x13c>
 8029c14:	9a07      	ldr	r2, [sp, #28]
 8029c16:	4654      	mov	r4, sl
 8029c18:	2000      	movs	r0, #0
 8029c1a:	f04f 0c0a 	mov.w	ip, #10
 8029c1e:	4621      	mov	r1, r4
 8029c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029c24:	3b30      	subs	r3, #48	; 0x30
 8029c26:	2b09      	cmp	r3, #9
 8029c28:	d94e      	bls.n	8029cc8 <_vfiprintf_r+0x1c4>
 8029c2a:	b1b0      	cbz	r0, 8029c5a <_vfiprintf_r+0x156>
 8029c2c:	9207      	str	r2, [sp, #28]
 8029c2e:	e014      	b.n	8029c5a <_vfiprintf_r+0x156>
 8029c30:	eba0 0308 	sub.w	r3, r0, r8
 8029c34:	fa09 f303 	lsl.w	r3, r9, r3
 8029c38:	4313      	orrs	r3, r2
 8029c3a:	9304      	str	r3, [sp, #16]
 8029c3c:	46a2      	mov	sl, r4
 8029c3e:	e7d2      	b.n	8029be6 <_vfiprintf_r+0xe2>
 8029c40:	9b03      	ldr	r3, [sp, #12]
 8029c42:	1d19      	adds	r1, r3, #4
 8029c44:	681b      	ldr	r3, [r3, #0]
 8029c46:	9103      	str	r1, [sp, #12]
 8029c48:	2b00      	cmp	r3, #0
 8029c4a:	bfbb      	ittet	lt
 8029c4c:	425b      	neglt	r3, r3
 8029c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8029c52:	9307      	strge	r3, [sp, #28]
 8029c54:	9307      	strlt	r3, [sp, #28]
 8029c56:	bfb8      	it	lt
 8029c58:	9204      	strlt	r2, [sp, #16]
 8029c5a:	7823      	ldrb	r3, [r4, #0]
 8029c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8029c5e:	d10c      	bne.n	8029c7a <_vfiprintf_r+0x176>
 8029c60:	7863      	ldrb	r3, [r4, #1]
 8029c62:	2b2a      	cmp	r3, #42	; 0x2a
 8029c64:	d135      	bne.n	8029cd2 <_vfiprintf_r+0x1ce>
 8029c66:	9b03      	ldr	r3, [sp, #12]
 8029c68:	1d1a      	adds	r2, r3, #4
 8029c6a:	681b      	ldr	r3, [r3, #0]
 8029c6c:	9203      	str	r2, [sp, #12]
 8029c6e:	2b00      	cmp	r3, #0
 8029c70:	bfb8      	it	lt
 8029c72:	f04f 33ff 	movlt.w	r3, #4294967295
 8029c76:	3402      	adds	r4, #2
 8029c78:	9305      	str	r3, [sp, #20]
 8029c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029d60 <_vfiprintf_r+0x25c>
 8029c7e:	7821      	ldrb	r1, [r4, #0]
 8029c80:	2203      	movs	r2, #3
 8029c82:	4650      	mov	r0, sl
 8029c84:	f7d6 faf4 	bl	8000270 <memchr>
 8029c88:	b140      	cbz	r0, 8029c9c <_vfiprintf_r+0x198>
 8029c8a:	2340      	movs	r3, #64	; 0x40
 8029c8c:	eba0 000a 	sub.w	r0, r0, sl
 8029c90:	fa03 f000 	lsl.w	r0, r3, r0
 8029c94:	9b04      	ldr	r3, [sp, #16]
 8029c96:	4303      	orrs	r3, r0
 8029c98:	3401      	adds	r4, #1
 8029c9a:	9304      	str	r3, [sp, #16]
 8029c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ca0:	482c      	ldr	r0, [pc, #176]	; (8029d54 <_vfiprintf_r+0x250>)
 8029ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029ca6:	2206      	movs	r2, #6
 8029ca8:	f7d6 fae2 	bl	8000270 <memchr>
 8029cac:	2800      	cmp	r0, #0
 8029cae:	d03f      	beq.n	8029d30 <_vfiprintf_r+0x22c>
 8029cb0:	4b29      	ldr	r3, [pc, #164]	; (8029d58 <_vfiprintf_r+0x254>)
 8029cb2:	bb1b      	cbnz	r3, 8029cfc <_vfiprintf_r+0x1f8>
 8029cb4:	9b03      	ldr	r3, [sp, #12]
 8029cb6:	3307      	adds	r3, #7
 8029cb8:	f023 0307 	bic.w	r3, r3, #7
 8029cbc:	3308      	adds	r3, #8
 8029cbe:	9303      	str	r3, [sp, #12]
 8029cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029cc2:	443b      	add	r3, r7
 8029cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8029cc6:	e767      	b.n	8029b98 <_vfiprintf_r+0x94>
 8029cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8029ccc:	460c      	mov	r4, r1
 8029cce:	2001      	movs	r0, #1
 8029cd0:	e7a5      	b.n	8029c1e <_vfiprintf_r+0x11a>
 8029cd2:	2300      	movs	r3, #0
 8029cd4:	3401      	adds	r4, #1
 8029cd6:	9305      	str	r3, [sp, #20]
 8029cd8:	4619      	mov	r1, r3
 8029cda:	f04f 0c0a 	mov.w	ip, #10
 8029cde:	4620      	mov	r0, r4
 8029ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029ce4:	3a30      	subs	r2, #48	; 0x30
 8029ce6:	2a09      	cmp	r2, #9
 8029ce8:	d903      	bls.n	8029cf2 <_vfiprintf_r+0x1ee>
 8029cea:	2b00      	cmp	r3, #0
 8029cec:	d0c5      	beq.n	8029c7a <_vfiprintf_r+0x176>
 8029cee:	9105      	str	r1, [sp, #20]
 8029cf0:	e7c3      	b.n	8029c7a <_vfiprintf_r+0x176>
 8029cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8029cf6:	4604      	mov	r4, r0
 8029cf8:	2301      	movs	r3, #1
 8029cfa:	e7f0      	b.n	8029cde <_vfiprintf_r+0x1da>
 8029cfc:	ab03      	add	r3, sp, #12
 8029cfe:	9300      	str	r3, [sp, #0]
 8029d00:	462a      	mov	r2, r5
 8029d02:	4b16      	ldr	r3, [pc, #88]	; (8029d5c <_vfiprintf_r+0x258>)
 8029d04:	a904      	add	r1, sp, #16
 8029d06:	4630      	mov	r0, r6
 8029d08:	f7fb ff72 	bl	8025bf0 <_printf_float>
 8029d0c:	4607      	mov	r7, r0
 8029d0e:	1c78      	adds	r0, r7, #1
 8029d10:	d1d6      	bne.n	8029cc0 <_vfiprintf_r+0x1bc>
 8029d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029d14:	07d9      	lsls	r1, r3, #31
 8029d16:	d405      	bmi.n	8029d24 <_vfiprintf_r+0x220>
 8029d18:	89ab      	ldrh	r3, [r5, #12]
 8029d1a:	059a      	lsls	r2, r3, #22
 8029d1c:	d402      	bmi.n	8029d24 <_vfiprintf_r+0x220>
 8029d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029d20:	f7fb fb30 	bl	8025384 <__retarget_lock_release_recursive>
 8029d24:	89ab      	ldrh	r3, [r5, #12]
 8029d26:	065b      	lsls	r3, r3, #25
 8029d28:	f53f af12 	bmi.w	8029b50 <_vfiprintf_r+0x4c>
 8029d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029d2e:	e711      	b.n	8029b54 <_vfiprintf_r+0x50>
 8029d30:	ab03      	add	r3, sp, #12
 8029d32:	9300      	str	r3, [sp, #0]
 8029d34:	462a      	mov	r2, r5
 8029d36:	4b09      	ldr	r3, [pc, #36]	; (8029d5c <_vfiprintf_r+0x258>)
 8029d38:	a904      	add	r1, sp, #16
 8029d3a:	4630      	mov	r0, r6
 8029d3c:	f7fc f9e4 	bl	8026108 <_printf_i>
 8029d40:	e7e4      	b.n	8029d0c <_vfiprintf_r+0x208>
 8029d42:	bf00      	nop
 8029d44:	080471d0 	.word	0x080471d0
 8029d48:	080471f0 	.word	0x080471f0
 8029d4c:	080471b0 	.word	0x080471b0
 8029d50:	0804795c 	.word	0x0804795c
 8029d54:	08047966 	.word	0x08047966
 8029d58:	08025bf1 	.word	0x08025bf1
 8029d5c:	08029adf 	.word	0x08029adf
 8029d60:	08047962 	.word	0x08047962

08029d64 <_scanf_chars>:
 8029d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d68:	4615      	mov	r5, r2
 8029d6a:	688a      	ldr	r2, [r1, #8]
 8029d6c:	4680      	mov	r8, r0
 8029d6e:	460c      	mov	r4, r1
 8029d70:	b932      	cbnz	r2, 8029d80 <_scanf_chars+0x1c>
 8029d72:	698a      	ldr	r2, [r1, #24]
 8029d74:	2a00      	cmp	r2, #0
 8029d76:	bf0c      	ite	eq
 8029d78:	2201      	moveq	r2, #1
 8029d7a:	f04f 32ff 	movne.w	r2, #4294967295
 8029d7e:	608a      	str	r2, [r1, #8]
 8029d80:	6822      	ldr	r2, [r4, #0]
 8029d82:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8029e14 <_scanf_chars+0xb0>
 8029d86:	06d1      	lsls	r1, r2, #27
 8029d88:	bf5f      	itttt	pl
 8029d8a:	681a      	ldrpl	r2, [r3, #0]
 8029d8c:	1d11      	addpl	r1, r2, #4
 8029d8e:	6019      	strpl	r1, [r3, #0]
 8029d90:	6816      	ldrpl	r6, [r2, #0]
 8029d92:	2700      	movs	r7, #0
 8029d94:	69a0      	ldr	r0, [r4, #24]
 8029d96:	b188      	cbz	r0, 8029dbc <_scanf_chars+0x58>
 8029d98:	2801      	cmp	r0, #1
 8029d9a:	d107      	bne.n	8029dac <_scanf_chars+0x48>
 8029d9c:	682a      	ldr	r2, [r5, #0]
 8029d9e:	7811      	ldrb	r1, [r2, #0]
 8029da0:	6962      	ldr	r2, [r4, #20]
 8029da2:	5c52      	ldrb	r2, [r2, r1]
 8029da4:	b952      	cbnz	r2, 8029dbc <_scanf_chars+0x58>
 8029da6:	2f00      	cmp	r7, #0
 8029da8:	d031      	beq.n	8029e0e <_scanf_chars+0xaa>
 8029daa:	e022      	b.n	8029df2 <_scanf_chars+0x8e>
 8029dac:	2802      	cmp	r0, #2
 8029dae:	d120      	bne.n	8029df2 <_scanf_chars+0x8e>
 8029db0:	682b      	ldr	r3, [r5, #0]
 8029db2:	781b      	ldrb	r3, [r3, #0]
 8029db4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8029db8:	071b      	lsls	r3, r3, #28
 8029dba:	d41a      	bmi.n	8029df2 <_scanf_chars+0x8e>
 8029dbc:	6823      	ldr	r3, [r4, #0]
 8029dbe:	06da      	lsls	r2, r3, #27
 8029dc0:	bf5e      	ittt	pl
 8029dc2:	682b      	ldrpl	r3, [r5, #0]
 8029dc4:	781b      	ldrbpl	r3, [r3, #0]
 8029dc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8029dca:	682a      	ldr	r2, [r5, #0]
 8029dcc:	686b      	ldr	r3, [r5, #4]
 8029dce:	3201      	adds	r2, #1
 8029dd0:	602a      	str	r2, [r5, #0]
 8029dd2:	68a2      	ldr	r2, [r4, #8]
 8029dd4:	3b01      	subs	r3, #1
 8029dd6:	3a01      	subs	r2, #1
 8029dd8:	606b      	str	r3, [r5, #4]
 8029dda:	3701      	adds	r7, #1
 8029ddc:	60a2      	str	r2, [r4, #8]
 8029dde:	b142      	cbz	r2, 8029df2 <_scanf_chars+0x8e>
 8029de0:	2b00      	cmp	r3, #0
 8029de2:	dcd7      	bgt.n	8029d94 <_scanf_chars+0x30>
 8029de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029de8:	4629      	mov	r1, r5
 8029dea:	4640      	mov	r0, r8
 8029dec:	4798      	blx	r3
 8029dee:	2800      	cmp	r0, #0
 8029df0:	d0d0      	beq.n	8029d94 <_scanf_chars+0x30>
 8029df2:	6823      	ldr	r3, [r4, #0]
 8029df4:	f013 0310 	ands.w	r3, r3, #16
 8029df8:	d105      	bne.n	8029e06 <_scanf_chars+0xa2>
 8029dfa:	68e2      	ldr	r2, [r4, #12]
 8029dfc:	3201      	adds	r2, #1
 8029dfe:	60e2      	str	r2, [r4, #12]
 8029e00:	69a2      	ldr	r2, [r4, #24]
 8029e02:	b102      	cbz	r2, 8029e06 <_scanf_chars+0xa2>
 8029e04:	7033      	strb	r3, [r6, #0]
 8029e06:	6923      	ldr	r3, [r4, #16]
 8029e08:	443b      	add	r3, r7
 8029e0a:	6123      	str	r3, [r4, #16]
 8029e0c:	2000      	movs	r0, #0
 8029e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029e12:	bf00      	nop
 8029e14:	080470ad 	.word	0x080470ad

08029e18 <_scanf_i>:
 8029e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e1c:	4698      	mov	r8, r3
 8029e1e:	4b76      	ldr	r3, [pc, #472]	; (8029ff8 <_scanf_i+0x1e0>)
 8029e20:	460c      	mov	r4, r1
 8029e22:	4682      	mov	sl, r0
 8029e24:	4616      	mov	r6, r2
 8029e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029e2a:	b087      	sub	sp, #28
 8029e2c:	ab03      	add	r3, sp, #12
 8029e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029e32:	4b72      	ldr	r3, [pc, #456]	; (8029ffc <_scanf_i+0x1e4>)
 8029e34:	69a1      	ldr	r1, [r4, #24]
 8029e36:	4a72      	ldr	r2, [pc, #456]	; (802a000 <_scanf_i+0x1e8>)
 8029e38:	2903      	cmp	r1, #3
 8029e3a:	bf18      	it	ne
 8029e3c:	461a      	movne	r2, r3
 8029e3e:	68a3      	ldr	r3, [r4, #8]
 8029e40:	9201      	str	r2, [sp, #4]
 8029e42:	1e5a      	subs	r2, r3, #1
 8029e44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8029e48:	bf88      	it	hi
 8029e4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8029e4e:	4627      	mov	r7, r4
 8029e50:	bf82      	ittt	hi
 8029e52:	eb03 0905 	addhi.w	r9, r3, r5
 8029e56:	f240 135d 	movwhi	r3, #349	; 0x15d
 8029e5a:	60a3      	strhi	r3, [r4, #8]
 8029e5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8029e60:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8029e64:	bf98      	it	ls
 8029e66:	f04f 0900 	movls.w	r9, #0
 8029e6a:	6023      	str	r3, [r4, #0]
 8029e6c:	463d      	mov	r5, r7
 8029e6e:	f04f 0b00 	mov.w	fp, #0
 8029e72:	6831      	ldr	r1, [r6, #0]
 8029e74:	ab03      	add	r3, sp, #12
 8029e76:	7809      	ldrb	r1, [r1, #0]
 8029e78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8029e7c:	2202      	movs	r2, #2
 8029e7e:	f7d6 f9f7 	bl	8000270 <memchr>
 8029e82:	b328      	cbz	r0, 8029ed0 <_scanf_i+0xb8>
 8029e84:	f1bb 0f01 	cmp.w	fp, #1
 8029e88:	d159      	bne.n	8029f3e <_scanf_i+0x126>
 8029e8a:	6862      	ldr	r2, [r4, #4]
 8029e8c:	b92a      	cbnz	r2, 8029e9a <_scanf_i+0x82>
 8029e8e:	6822      	ldr	r2, [r4, #0]
 8029e90:	2308      	movs	r3, #8
 8029e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029e96:	6063      	str	r3, [r4, #4]
 8029e98:	6022      	str	r2, [r4, #0]
 8029e9a:	6822      	ldr	r2, [r4, #0]
 8029e9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8029ea0:	6022      	str	r2, [r4, #0]
 8029ea2:	68a2      	ldr	r2, [r4, #8]
 8029ea4:	1e51      	subs	r1, r2, #1
 8029ea6:	60a1      	str	r1, [r4, #8]
 8029ea8:	b192      	cbz	r2, 8029ed0 <_scanf_i+0xb8>
 8029eaa:	6832      	ldr	r2, [r6, #0]
 8029eac:	1c51      	adds	r1, r2, #1
 8029eae:	6031      	str	r1, [r6, #0]
 8029eb0:	7812      	ldrb	r2, [r2, #0]
 8029eb2:	f805 2b01 	strb.w	r2, [r5], #1
 8029eb6:	6872      	ldr	r2, [r6, #4]
 8029eb8:	3a01      	subs	r2, #1
 8029eba:	2a00      	cmp	r2, #0
 8029ebc:	6072      	str	r2, [r6, #4]
 8029ebe:	dc07      	bgt.n	8029ed0 <_scanf_i+0xb8>
 8029ec0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8029ec4:	4631      	mov	r1, r6
 8029ec6:	4650      	mov	r0, sl
 8029ec8:	4790      	blx	r2
 8029eca:	2800      	cmp	r0, #0
 8029ecc:	f040 8085 	bne.w	8029fda <_scanf_i+0x1c2>
 8029ed0:	f10b 0b01 	add.w	fp, fp, #1
 8029ed4:	f1bb 0f03 	cmp.w	fp, #3
 8029ed8:	d1cb      	bne.n	8029e72 <_scanf_i+0x5a>
 8029eda:	6863      	ldr	r3, [r4, #4]
 8029edc:	b90b      	cbnz	r3, 8029ee2 <_scanf_i+0xca>
 8029ede:	230a      	movs	r3, #10
 8029ee0:	6063      	str	r3, [r4, #4]
 8029ee2:	6863      	ldr	r3, [r4, #4]
 8029ee4:	4947      	ldr	r1, [pc, #284]	; (802a004 <_scanf_i+0x1ec>)
 8029ee6:	6960      	ldr	r0, [r4, #20]
 8029ee8:	1ac9      	subs	r1, r1, r3
 8029eea:	f000 f911 	bl	802a110 <__sccl>
 8029eee:	f04f 0b00 	mov.w	fp, #0
 8029ef2:	68a3      	ldr	r3, [r4, #8]
 8029ef4:	6822      	ldr	r2, [r4, #0]
 8029ef6:	2b00      	cmp	r3, #0
 8029ef8:	d03d      	beq.n	8029f76 <_scanf_i+0x15e>
 8029efa:	6831      	ldr	r1, [r6, #0]
 8029efc:	6960      	ldr	r0, [r4, #20]
 8029efe:	f891 c000 	ldrb.w	ip, [r1]
 8029f02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8029f06:	2800      	cmp	r0, #0
 8029f08:	d035      	beq.n	8029f76 <_scanf_i+0x15e>
 8029f0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8029f0e:	d124      	bne.n	8029f5a <_scanf_i+0x142>
 8029f10:	0510      	lsls	r0, r2, #20
 8029f12:	d522      	bpl.n	8029f5a <_scanf_i+0x142>
 8029f14:	f10b 0b01 	add.w	fp, fp, #1
 8029f18:	f1b9 0f00 	cmp.w	r9, #0
 8029f1c:	d003      	beq.n	8029f26 <_scanf_i+0x10e>
 8029f1e:	3301      	adds	r3, #1
 8029f20:	f109 39ff 	add.w	r9, r9, #4294967295
 8029f24:	60a3      	str	r3, [r4, #8]
 8029f26:	6873      	ldr	r3, [r6, #4]
 8029f28:	3b01      	subs	r3, #1
 8029f2a:	2b00      	cmp	r3, #0
 8029f2c:	6073      	str	r3, [r6, #4]
 8029f2e:	dd1b      	ble.n	8029f68 <_scanf_i+0x150>
 8029f30:	6833      	ldr	r3, [r6, #0]
 8029f32:	3301      	adds	r3, #1
 8029f34:	6033      	str	r3, [r6, #0]
 8029f36:	68a3      	ldr	r3, [r4, #8]
 8029f38:	3b01      	subs	r3, #1
 8029f3a:	60a3      	str	r3, [r4, #8]
 8029f3c:	e7d9      	b.n	8029ef2 <_scanf_i+0xda>
 8029f3e:	f1bb 0f02 	cmp.w	fp, #2
 8029f42:	d1ae      	bne.n	8029ea2 <_scanf_i+0x8a>
 8029f44:	6822      	ldr	r2, [r4, #0]
 8029f46:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8029f4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8029f4e:	d1bf      	bne.n	8029ed0 <_scanf_i+0xb8>
 8029f50:	2310      	movs	r3, #16
 8029f52:	6063      	str	r3, [r4, #4]
 8029f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029f58:	e7a2      	b.n	8029ea0 <_scanf_i+0x88>
 8029f5a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8029f5e:	6022      	str	r2, [r4, #0]
 8029f60:	780b      	ldrb	r3, [r1, #0]
 8029f62:	f805 3b01 	strb.w	r3, [r5], #1
 8029f66:	e7de      	b.n	8029f26 <_scanf_i+0x10e>
 8029f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029f6c:	4631      	mov	r1, r6
 8029f6e:	4650      	mov	r0, sl
 8029f70:	4798      	blx	r3
 8029f72:	2800      	cmp	r0, #0
 8029f74:	d0df      	beq.n	8029f36 <_scanf_i+0x11e>
 8029f76:	6823      	ldr	r3, [r4, #0]
 8029f78:	05db      	lsls	r3, r3, #23
 8029f7a:	d50d      	bpl.n	8029f98 <_scanf_i+0x180>
 8029f7c:	42bd      	cmp	r5, r7
 8029f7e:	d909      	bls.n	8029f94 <_scanf_i+0x17c>
 8029f80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029f88:	4632      	mov	r2, r6
 8029f8a:	4650      	mov	r0, sl
 8029f8c:	4798      	blx	r3
 8029f8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8029f92:	464d      	mov	r5, r9
 8029f94:	42bd      	cmp	r5, r7
 8029f96:	d02d      	beq.n	8029ff4 <_scanf_i+0x1dc>
 8029f98:	6822      	ldr	r2, [r4, #0]
 8029f9a:	f012 0210 	ands.w	r2, r2, #16
 8029f9e:	d113      	bne.n	8029fc8 <_scanf_i+0x1b0>
 8029fa0:	702a      	strb	r2, [r5, #0]
 8029fa2:	6863      	ldr	r3, [r4, #4]
 8029fa4:	9e01      	ldr	r6, [sp, #4]
 8029fa6:	4639      	mov	r1, r7
 8029fa8:	4650      	mov	r0, sl
 8029faa:	47b0      	blx	r6
 8029fac:	6821      	ldr	r1, [r4, #0]
 8029fae:	f8d8 3000 	ldr.w	r3, [r8]
 8029fb2:	f011 0f20 	tst.w	r1, #32
 8029fb6:	d013      	beq.n	8029fe0 <_scanf_i+0x1c8>
 8029fb8:	1d1a      	adds	r2, r3, #4
 8029fba:	f8c8 2000 	str.w	r2, [r8]
 8029fbe:	681b      	ldr	r3, [r3, #0]
 8029fc0:	6018      	str	r0, [r3, #0]
 8029fc2:	68e3      	ldr	r3, [r4, #12]
 8029fc4:	3301      	adds	r3, #1
 8029fc6:	60e3      	str	r3, [r4, #12]
 8029fc8:	1bed      	subs	r5, r5, r7
 8029fca:	44ab      	add	fp, r5
 8029fcc:	6925      	ldr	r5, [r4, #16]
 8029fce:	445d      	add	r5, fp
 8029fd0:	6125      	str	r5, [r4, #16]
 8029fd2:	2000      	movs	r0, #0
 8029fd4:	b007      	add	sp, #28
 8029fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029fda:	f04f 0b00 	mov.w	fp, #0
 8029fde:	e7ca      	b.n	8029f76 <_scanf_i+0x15e>
 8029fe0:	1d1a      	adds	r2, r3, #4
 8029fe2:	f8c8 2000 	str.w	r2, [r8]
 8029fe6:	681b      	ldr	r3, [r3, #0]
 8029fe8:	f011 0f01 	tst.w	r1, #1
 8029fec:	bf14      	ite	ne
 8029fee:	8018      	strhne	r0, [r3, #0]
 8029ff0:	6018      	streq	r0, [r3, #0]
 8029ff2:	e7e6      	b.n	8029fc2 <_scanf_i+0x1aa>
 8029ff4:	2001      	movs	r0, #1
 8029ff6:	e7ed      	b.n	8029fd4 <_scanf_i+0x1bc>
 8029ff8:	0802a5d0 	.word	0x0802a5d0
 8029ffc:	08027525 	.word	0x08027525
 802a000:	08027429 	.word	0x08027429
 802a004:	08047986 	.word	0x08047986

0802a008 <_putc_r>:
 802a008:	b570      	push	{r4, r5, r6, lr}
 802a00a:	460d      	mov	r5, r1
 802a00c:	4614      	mov	r4, r2
 802a00e:	4606      	mov	r6, r0
 802a010:	b118      	cbz	r0, 802a01a <_putc_r+0x12>
 802a012:	6983      	ldr	r3, [r0, #24]
 802a014:	b90b      	cbnz	r3, 802a01a <_putc_r+0x12>
 802a016:	f7fa ffdd 	bl	8024fd4 <__sinit>
 802a01a:	4b1c      	ldr	r3, [pc, #112]	; (802a08c <_putc_r+0x84>)
 802a01c:	429c      	cmp	r4, r3
 802a01e:	d124      	bne.n	802a06a <_putc_r+0x62>
 802a020:	6874      	ldr	r4, [r6, #4]
 802a022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a024:	07d8      	lsls	r0, r3, #31
 802a026:	d405      	bmi.n	802a034 <_putc_r+0x2c>
 802a028:	89a3      	ldrh	r3, [r4, #12]
 802a02a:	0599      	lsls	r1, r3, #22
 802a02c:	d402      	bmi.n	802a034 <_putc_r+0x2c>
 802a02e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a030:	f7fb f9a6 	bl	8025380 <__retarget_lock_acquire_recursive>
 802a034:	68a3      	ldr	r3, [r4, #8]
 802a036:	3b01      	subs	r3, #1
 802a038:	2b00      	cmp	r3, #0
 802a03a:	60a3      	str	r3, [r4, #8]
 802a03c:	da05      	bge.n	802a04a <_putc_r+0x42>
 802a03e:	69a2      	ldr	r2, [r4, #24]
 802a040:	4293      	cmp	r3, r2
 802a042:	db1c      	blt.n	802a07e <_putc_r+0x76>
 802a044:	b2eb      	uxtb	r3, r5
 802a046:	2b0a      	cmp	r3, #10
 802a048:	d019      	beq.n	802a07e <_putc_r+0x76>
 802a04a:	6823      	ldr	r3, [r4, #0]
 802a04c:	1c5a      	adds	r2, r3, #1
 802a04e:	6022      	str	r2, [r4, #0]
 802a050:	701d      	strb	r5, [r3, #0]
 802a052:	b2ed      	uxtb	r5, r5
 802a054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a056:	07da      	lsls	r2, r3, #31
 802a058:	d405      	bmi.n	802a066 <_putc_r+0x5e>
 802a05a:	89a3      	ldrh	r3, [r4, #12]
 802a05c:	059b      	lsls	r3, r3, #22
 802a05e:	d402      	bmi.n	802a066 <_putc_r+0x5e>
 802a060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a062:	f7fb f98f 	bl	8025384 <__retarget_lock_release_recursive>
 802a066:	4628      	mov	r0, r5
 802a068:	bd70      	pop	{r4, r5, r6, pc}
 802a06a:	4b09      	ldr	r3, [pc, #36]	; (802a090 <_putc_r+0x88>)
 802a06c:	429c      	cmp	r4, r3
 802a06e:	d101      	bne.n	802a074 <_putc_r+0x6c>
 802a070:	68b4      	ldr	r4, [r6, #8]
 802a072:	e7d6      	b.n	802a022 <_putc_r+0x1a>
 802a074:	4b07      	ldr	r3, [pc, #28]	; (802a094 <_putc_r+0x8c>)
 802a076:	429c      	cmp	r4, r3
 802a078:	bf08      	it	eq
 802a07a:	68f4      	ldreq	r4, [r6, #12]
 802a07c:	e7d1      	b.n	802a022 <_putc_r+0x1a>
 802a07e:	4629      	mov	r1, r5
 802a080:	4622      	mov	r2, r4
 802a082:	4630      	mov	r0, r6
 802a084:	f7fd fc96 	bl	80279b4 <__swbuf_r>
 802a088:	4605      	mov	r5, r0
 802a08a:	e7e3      	b.n	802a054 <_putc_r+0x4c>
 802a08c:	080471d0 	.word	0x080471d0
 802a090:	080471f0 	.word	0x080471f0
 802a094:	080471b0 	.word	0x080471b0

0802a098 <_read_r>:
 802a098:	b538      	push	{r3, r4, r5, lr}
 802a09a:	4d07      	ldr	r5, [pc, #28]	; (802a0b8 <_read_r+0x20>)
 802a09c:	4604      	mov	r4, r0
 802a09e:	4608      	mov	r0, r1
 802a0a0:	4611      	mov	r1, r2
 802a0a2:	2200      	movs	r2, #0
 802a0a4:	602a      	str	r2, [r5, #0]
 802a0a6:	461a      	mov	r2, r3
 802a0a8:	f7de f8de 	bl	8008268 <_read>
 802a0ac:	1c43      	adds	r3, r0, #1
 802a0ae:	d102      	bne.n	802a0b6 <_read_r+0x1e>
 802a0b0:	682b      	ldr	r3, [r5, #0]
 802a0b2:	b103      	cbz	r3, 802a0b6 <_read_r+0x1e>
 802a0b4:	6023      	str	r3, [r4, #0]
 802a0b6:	bd38      	pop	{r3, r4, r5, pc}
 802a0b8:	200300d4 	.word	0x200300d4

0802a0bc <__fpclassifyd>:
 802a0bc:	ec51 0b10 	vmov	r0, r1, d0
 802a0c0:	b510      	push	{r4, lr}
 802a0c2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802a0c6:	460b      	mov	r3, r1
 802a0c8:	d019      	beq.n	802a0fe <__fpclassifyd+0x42>
 802a0ca:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802a0ce:	490e      	ldr	r1, [pc, #56]	; (802a108 <__fpclassifyd+0x4c>)
 802a0d0:	428a      	cmp	r2, r1
 802a0d2:	d90e      	bls.n	802a0f2 <__fpclassifyd+0x36>
 802a0d4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802a0d8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802a0dc:	428a      	cmp	r2, r1
 802a0de:	d908      	bls.n	802a0f2 <__fpclassifyd+0x36>
 802a0e0:	4a0a      	ldr	r2, [pc, #40]	; (802a10c <__fpclassifyd+0x50>)
 802a0e2:	4213      	tst	r3, r2
 802a0e4:	d007      	beq.n	802a0f6 <__fpclassifyd+0x3a>
 802a0e6:	4294      	cmp	r4, r2
 802a0e8:	d107      	bne.n	802a0fa <__fpclassifyd+0x3e>
 802a0ea:	fab0 f080 	clz	r0, r0
 802a0ee:	0940      	lsrs	r0, r0, #5
 802a0f0:	bd10      	pop	{r4, pc}
 802a0f2:	2004      	movs	r0, #4
 802a0f4:	e7fc      	b.n	802a0f0 <__fpclassifyd+0x34>
 802a0f6:	2003      	movs	r0, #3
 802a0f8:	e7fa      	b.n	802a0f0 <__fpclassifyd+0x34>
 802a0fa:	2000      	movs	r0, #0
 802a0fc:	e7f8      	b.n	802a0f0 <__fpclassifyd+0x34>
 802a0fe:	2800      	cmp	r0, #0
 802a100:	d1ee      	bne.n	802a0e0 <__fpclassifyd+0x24>
 802a102:	2002      	movs	r0, #2
 802a104:	e7f4      	b.n	802a0f0 <__fpclassifyd+0x34>
 802a106:	bf00      	nop
 802a108:	7fdfffff 	.word	0x7fdfffff
 802a10c:	7ff00000 	.word	0x7ff00000

0802a110 <__sccl>:
 802a110:	b570      	push	{r4, r5, r6, lr}
 802a112:	780b      	ldrb	r3, [r1, #0]
 802a114:	4604      	mov	r4, r0
 802a116:	2b5e      	cmp	r3, #94	; 0x5e
 802a118:	bf0b      	itete	eq
 802a11a:	784b      	ldrbeq	r3, [r1, #1]
 802a11c:	1c48      	addne	r0, r1, #1
 802a11e:	1c88      	addeq	r0, r1, #2
 802a120:	2200      	movne	r2, #0
 802a122:	bf08      	it	eq
 802a124:	2201      	moveq	r2, #1
 802a126:	1e61      	subs	r1, r4, #1
 802a128:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a12c:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a130:	42a9      	cmp	r1, r5
 802a132:	d1fb      	bne.n	802a12c <__sccl+0x1c>
 802a134:	b90b      	cbnz	r3, 802a13a <__sccl+0x2a>
 802a136:	3801      	subs	r0, #1
 802a138:	bd70      	pop	{r4, r5, r6, pc}
 802a13a:	f082 0201 	eor.w	r2, r2, #1
 802a13e:	54e2      	strb	r2, [r4, r3]
 802a140:	4605      	mov	r5, r0
 802a142:	4628      	mov	r0, r5
 802a144:	f810 1b01 	ldrb.w	r1, [r0], #1
 802a148:	292d      	cmp	r1, #45	; 0x2d
 802a14a:	d006      	beq.n	802a15a <__sccl+0x4a>
 802a14c:	295d      	cmp	r1, #93	; 0x5d
 802a14e:	d0f3      	beq.n	802a138 <__sccl+0x28>
 802a150:	b909      	cbnz	r1, 802a156 <__sccl+0x46>
 802a152:	4628      	mov	r0, r5
 802a154:	e7f0      	b.n	802a138 <__sccl+0x28>
 802a156:	460b      	mov	r3, r1
 802a158:	e7f1      	b.n	802a13e <__sccl+0x2e>
 802a15a:	786e      	ldrb	r6, [r5, #1]
 802a15c:	2e5d      	cmp	r6, #93	; 0x5d
 802a15e:	d0fa      	beq.n	802a156 <__sccl+0x46>
 802a160:	42b3      	cmp	r3, r6
 802a162:	dcf8      	bgt.n	802a156 <__sccl+0x46>
 802a164:	3502      	adds	r5, #2
 802a166:	4619      	mov	r1, r3
 802a168:	3101      	adds	r1, #1
 802a16a:	428e      	cmp	r6, r1
 802a16c:	5462      	strb	r2, [r4, r1]
 802a16e:	dcfb      	bgt.n	802a168 <__sccl+0x58>
 802a170:	1af1      	subs	r1, r6, r3
 802a172:	3901      	subs	r1, #1
 802a174:	1c58      	adds	r0, r3, #1
 802a176:	42b3      	cmp	r3, r6
 802a178:	bfa8      	it	ge
 802a17a:	2100      	movge	r1, #0
 802a17c:	1843      	adds	r3, r0, r1
 802a17e:	e7e0      	b.n	802a142 <__sccl+0x32>

0802a180 <__submore>:
 802a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a184:	460c      	mov	r4, r1
 802a186:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a18c:	4299      	cmp	r1, r3
 802a18e:	d11d      	bne.n	802a1cc <__submore+0x4c>
 802a190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a194:	f7fb fc26 	bl	80259e4 <_malloc_r>
 802a198:	b918      	cbnz	r0, 802a1a2 <__submore+0x22>
 802a19a:	f04f 30ff 	mov.w	r0, #4294967295
 802a19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a1a6:	63a3      	str	r3, [r4, #56]	; 0x38
 802a1a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a1ac:	6360      	str	r0, [r4, #52]	; 0x34
 802a1ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a1b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a1b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a1ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a1be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a1c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a1c6:	6020      	str	r0, [r4, #0]
 802a1c8:	2000      	movs	r0, #0
 802a1ca:	e7e8      	b.n	802a19e <__submore+0x1e>
 802a1cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a1ce:	0077      	lsls	r7, r6, #1
 802a1d0:	463a      	mov	r2, r7
 802a1d2:	f000 f857 	bl	802a284 <_realloc_r>
 802a1d6:	4605      	mov	r5, r0
 802a1d8:	2800      	cmp	r0, #0
 802a1da:	d0de      	beq.n	802a19a <__submore+0x1a>
 802a1dc:	eb00 0806 	add.w	r8, r0, r6
 802a1e0:	4601      	mov	r1, r0
 802a1e2:	4632      	mov	r2, r6
 802a1e4:	4640      	mov	r0, r8
 802a1e6:	f7fb f8ef 	bl	80253c8 <memcpy>
 802a1ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a1ee:	f8c4 8000 	str.w	r8, [r4]
 802a1f2:	e7e9      	b.n	802a1c8 <__submore+0x48>

0802a1f4 <abort>:
 802a1f4:	b508      	push	{r3, lr}
 802a1f6:	2006      	movs	r0, #6
 802a1f8:	f000 f89c 	bl	802a334 <raise>
 802a1fc:	2001      	movs	r0, #1
 802a1fe:	f7de f82d 	bl	800825c <_exit>
 802a202:	Address 0x000000000802a202 is out of bounds.


0802a204 <__env_lock>:
 802a204:	4801      	ldr	r0, [pc, #4]	; (802a20c <__env_lock+0x8>)
 802a206:	f7fb b8bb 	b.w	8025380 <__retarget_lock_acquire_recursive>
 802a20a:	bf00      	nop
 802a20c:	200300c4 	.word	0x200300c4

0802a210 <__env_unlock>:
 802a210:	4801      	ldr	r0, [pc, #4]	; (802a218 <__env_unlock+0x8>)
 802a212:	f7fb b8b7 	b.w	8025384 <__retarget_lock_release_recursive>
 802a216:	bf00      	nop
 802a218:	200300c4 	.word	0x200300c4

0802a21c <_fstat_r>:
 802a21c:	b538      	push	{r3, r4, r5, lr}
 802a21e:	4d07      	ldr	r5, [pc, #28]	; (802a23c <_fstat_r+0x20>)
 802a220:	2300      	movs	r3, #0
 802a222:	4604      	mov	r4, r0
 802a224:	4608      	mov	r0, r1
 802a226:	4611      	mov	r1, r2
 802a228:	602b      	str	r3, [r5, #0]
 802a22a:	f7de f82f 	bl	800828c <_fstat>
 802a22e:	1c43      	adds	r3, r0, #1
 802a230:	d102      	bne.n	802a238 <_fstat_r+0x1c>
 802a232:	682b      	ldr	r3, [r5, #0]
 802a234:	b103      	cbz	r3, 802a238 <_fstat_r+0x1c>
 802a236:	6023      	str	r3, [r4, #0]
 802a238:	bd38      	pop	{r3, r4, r5, pc}
 802a23a:	bf00      	nop
 802a23c:	200300d4 	.word	0x200300d4

0802a240 <_isatty_r>:
 802a240:	b538      	push	{r3, r4, r5, lr}
 802a242:	4d06      	ldr	r5, [pc, #24]	; (802a25c <_isatty_r+0x1c>)
 802a244:	2300      	movs	r3, #0
 802a246:	4604      	mov	r4, r0
 802a248:	4608      	mov	r0, r1
 802a24a:	602b      	str	r3, [r5, #0]
 802a24c:	f7de f824 	bl	8008298 <_isatty>
 802a250:	1c43      	adds	r3, r0, #1
 802a252:	d102      	bne.n	802a25a <_isatty_r+0x1a>
 802a254:	682b      	ldr	r3, [r5, #0]
 802a256:	b103      	cbz	r3, 802a25a <_isatty_r+0x1a>
 802a258:	6023      	str	r3, [r4, #0]
 802a25a:	bd38      	pop	{r3, r4, r5, pc}
 802a25c:	200300d4 	.word	0x200300d4

0802a260 <__ascii_mbtowc>:
 802a260:	b082      	sub	sp, #8
 802a262:	b901      	cbnz	r1, 802a266 <__ascii_mbtowc+0x6>
 802a264:	a901      	add	r1, sp, #4
 802a266:	b142      	cbz	r2, 802a27a <__ascii_mbtowc+0x1a>
 802a268:	b14b      	cbz	r3, 802a27e <__ascii_mbtowc+0x1e>
 802a26a:	7813      	ldrb	r3, [r2, #0]
 802a26c:	600b      	str	r3, [r1, #0]
 802a26e:	7812      	ldrb	r2, [r2, #0]
 802a270:	1e10      	subs	r0, r2, #0
 802a272:	bf18      	it	ne
 802a274:	2001      	movne	r0, #1
 802a276:	b002      	add	sp, #8
 802a278:	4770      	bx	lr
 802a27a:	4610      	mov	r0, r2
 802a27c:	e7fb      	b.n	802a276 <__ascii_mbtowc+0x16>
 802a27e:	f06f 0001 	mvn.w	r0, #1
 802a282:	e7f8      	b.n	802a276 <__ascii_mbtowc+0x16>

0802a284 <_realloc_r>:
 802a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a288:	4680      	mov	r8, r0
 802a28a:	4614      	mov	r4, r2
 802a28c:	460e      	mov	r6, r1
 802a28e:	b921      	cbnz	r1, 802a29a <_realloc_r+0x16>
 802a290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a294:	4611      	mov	r1, r2
 802a296:	f7fb bba5 	b.w	80259e4 <_malloc_r>
 802a29a:	b92a      	cbnz	r2, 802a2a8 <_realloc_r+0x24>
 802a29c:	f7fb fb36 	bl	802590c <_free_r>
 802a2a0:	4625      	mov	r5, r4
 802a2a2:	4628      	mov	r0, r5
 802a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a2a8:	f000 f86d 	bl	802a386 <_malloc_usable_size_r>
 802a2ac:	4284      	cmp	r4, r0
 802a2ae:	4607      	mov	r7, r0
 802a2b0:	d802      	bhi.n	802a2b8 <_realloc_r+0x34>
 802a2b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a2b6:	d812      	bhi.n	802a2de <_realloc_r+0x5a>
 802a2b8:	4621      	mov	r1, r4
 802a2ba:	4640      	mov	r0, r8
 802a2bc:	f7fb fb92 	bl	80259e4 <_malloc_r>
 802a2c0:	4605      	mov	r5, r0
 802a2c2:	2800      	cmp	r0, #0
 802a2c4:	d0ed      	beq.n	802a2a2 <_realloc_r+0x1e>
 802a2c6:	42bc      	cmp	r4, r7
 802a2c8:	4622      	mov	r2, r4
 802a2ca:	4631      	mov	r1, r6
 802a2cc:	bf28      	it	cs
 802a2ce:	463a      	movcs	r2, r7
 802a2d0:	f7fb f87a 	bl	80253c8 <memcpy>
 802a2d4:	4631      	mov	r1, r6
 802a2d6:	4640      	mov	r0, r8
 802a2d8:	f7fb fb18 	bl	802590c <_free_r>
 802a2dc:	e7e1      	b.n	802a2a2 <_realloc_r+0x1e>
 802a2de:	4635      	mov	r5, r6
 802a2e0:	e7df      	b.n	802a2a2 <_realloc_r+0x1e>

0802a2e2 <_raise_r>:
 802a2e2:	291f      	cmp	r1, #31
 802a2e4:	b538      	push	{r3, r4, r5, lr}
 802a2e6:	4604      	mov	r4, r0
 802a2e8:	460d      	mov	r5, r1
 802a2ea:	d904      	bls.n	802a2f6 <_raise_r+0x14>
 802a2ec:	2316      	movs	r3, #22
 802a2ee:	6003      	str	r3, [r0, #0]
 802a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 802a2f4:	bd38      	pop	{r3, r4, r5, pc}
 802a2f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a2f8:	b112      	cbz	r2, 802a300 <_raise_r+0x1e>
 802a2fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a2fe:	b94b      	cbnz	r3, 802a314 <_raise_r+0x32>
 802a300:	4620      	mov	r0, r4
 802a302:	f000 f831 	bl	802a368 <_getpid_r>
 802a306:	462a      	mov	r2, r5
 802a308:	4601      	mov	r1, r0
 802a30a:	4620      	mov	r0, r4
 802a30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a310:	f000 b818 	b.w	802a344 <_kill_r>
 802a314:	2b01      	cmp	r3, #1
 802a316:	d00a      	beq.n	802a32e <_raise_r+0x4c>
 802a318:	1c59      	adds	r1, r3, #1
 802a31a:	d103      	bne.n	802a324 <_raise_r+0x42>
 802a31c:	2316      	movs	r3, #22
 802a31e:	6003      	str	r3, [r0, #0]
 802a320:	2001      	movs	r0, #1
 802a322:	e7e7      	b.n	802a2f4 <_raise_r+0x12>
 802a324:	2400      	movs	r4, #0
 802a326:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a32a:	4628      	mov	r0, r5
 802a32c:	4798      	blx	r3
 802a32e:	2000      	movs	r0, #0
 802a330:	e7e0      	b.n	802a2f4 <_raise_r+0x12>
 802a332:	Address 0x000000000802a332 is out of bounds.


0802a334 <raise>:
 802a334:	4b02      	ldr	r3, [pc, #8]	; (802a340 <raise+0xc>)
 802a336:	4601      	mov	r1, r0
 802a338:	6818      	ldr	r0, [r3, #0]
 802a33a:	f7ff bfd2 	b.w	802a2e2 <_raise_r>
 802a33e:	bf00      	nop
 802a340:	200004a4 	.word	0x200004a4

0802a344 <_kill_r>:
 802a344:	b538      	push	{r3, r4, r5, lr}
 802a346:	4d07      	ldr	r5, [pc, #28]	; (802a364 <_kill_r+0x20>)
 802a348:	2300      	movs	r3, #0
 802a34a:	4604      	mov	r4, r0
 802a34c:	4608      	mov	r0, r1
 802a34e:	4611      	mov	r1, r2
 802a350:	602b      	str	r3, [r5, #0]
 802a352:	f7dd ff7b 	bl	800824c <_kill>
 802a356:	1c43      	adds	r3, r0, #1
 802a358:	d102      	bne.n	802a360 <_kill_r+0x1c>
 802a35a:	682b      	ldr	r3, [r5, #0]
 802a35c:	b103      	cbz	r3, 802a360 <_kill_r+0x1c>
 802a35e:	6023      	str	r3, [r4, #0]
 802a360:	bd38      	pop	{r3, r4, r5, pc}
 802a362:	bf00      	nop
 802a364:	200300d4 	.word	0x200300d4

0802a368 <_getpid_r>:
 802a368:	f7dd bf6e 	b.w	8008248 <_getpid>

0802a36c <__ascii_wctomb>:
 802a36c:	b149      	cbz	r1, 802a382 <__ascii_wctomb+0x16>
 802a36e:	2aff      	cmp	r2, #255	; 0xff
 802a370:	bf85      	ittet	hi
 802a372:	238a      	movhi	r3, #138	; 0x8a
 802a374:	6003      	strhi	r3, [r0, #0]
 802a376:	700a      	strbls	r2, [r1, #0]
 802a378:	f04f 30ff 	movhi.w	r0, #4294967295
 802a37c:	bf98      	it	ls
 802a37e:	2001      	movls	r0, #1
 802a380:	4770      	bx	lr
 802a382:	4608      	mov	r0, r1
 802a384:	4770      	bx	lr

0802a386 <_malloc_usable_size_r>:
 802a386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a38a:	1f18      	subs	r0, r3, #4
 802a38c:	2b00      	cmp	r3, #0
 802a38e:	bfbc      	itt	lt
 802a390:	580b      	ldrlt	r3, [r1, r0]
 802a392:	18c0      	addlt	r0, r0, r3
 802a394:	4770      	bx	lr
 802a396:	Address 0x000000000802a396 is out of bounds.


0802a398 <_init>:
 802a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a39a:	bf00      	nop
 802a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a39e:	bc08      	pop	{r3}
 802a3a0:	469e      	mov	lr, r3
 802a3a2:	4770      	bx	lr

0802a3a4 <_fini>:
 802a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3a6:	bf00      	nop
 802a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a3aa:	bc08      	pop	{r3}
 802a3ac:	469e      	mov	lr, r3
 802a3ae:	4770      	bx	lr

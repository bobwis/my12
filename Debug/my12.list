
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028e5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001cd8c  08029060  08029060  00039060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045dec  08045dec  000606bc  2**0
                  CONTENTS
  4 .ARM          00000008  08045dec  08045dec  00055dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045df4  08045df4  000606bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045df4  08045df4  00055df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045df8  08045df8  00055df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  08045dfc  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f1dc  200006c0  080464b8  000606c0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002f89c  080464b8  0006f89c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d8a1  00000000  00000000  000606ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000135d7  00000000  00000000  000edf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00051a5b  00000000  00000000  00101562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003738  00000000  00000000  00152fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009370  00000000  00000000  001566f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048a52  00000000  00000000  0015fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008fa27  00000000  00000000  001a84ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00139d2e  00000000  00000000  00237ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00371c0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d51c  00000000  00000000  00371c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08029044 	.word	0x08029044

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08029044 	.word	0x08029044

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f0 	.word	0x200006f0
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000076c 	.word	0x2000076c

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f0 	.word	0x200006f0
 8000708:	40000c00 	.word	0x40000c00
 800070c:	2000076c 	.word	0x2000076c

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f024 fcee 	bl	8025104 <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 bda7 	b.w	8008280 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802924c 	.word	0x0802924c

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f003 fd8e 	bl	8004274 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f003 fd82 	bl	8004274 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f008 fe6f 	bl	8009504 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f003 fd0c 	bl	8004274 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08029264 	.word	0x08029264
 800086c:	2000027c 	.word	0x2000027c
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f016 f94f 	bl	8016cd8 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f024 bb4f 	b.w	8025104 <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f0 	.word	0x200006f0
 8000a6c:	200006dc 	.word	0x200006dc
 8000a70:	20002c04 	.word	0x20002c04
 8000a74:	2000074c 	.word	0x2000074c
 8000a78:	200006ec 	.word	0x200006ec
 8000a7c:	2000076c 	.word	0x2000076c
 8000a80:	20000754 	.word	0x20000754
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e0 	.word	0x200006e0
 8000a90:	200007f4 	.word	0x200007f4
 8000a94:	20000770 	.word	0x20000770
 8000a98:	20000748 	.word	0x20000748
 8000a9c:	20000750 	.word	0x20000750
 8000aa0:	20000700 	.word	0x20000700
 8000aa4:	20000760 	.word	0x20000760
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	20000758 	.word	0x20000758
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006f4 	.word	0x200006f4
 8000ab8:	200007fc 	.word	0x200007fc
 8000abc:	2000075c 	.word	0x2000075c
 8000ac0:	200007f8 	.word	0x200007f8
 8000ac4:	0802927c 	.word	0x0802927c
 8000ac8:	20000764 	.word	0x20000764
 8000acc:	20000704 	.word	0x20000704
 8000ad0:	20000774 	.word	0x20000774

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f024 fb0d 	bl	8025104 <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f014 fafe 	bl	80150ec <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f016 fde0 	bl	80176b8 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f023 fac2 	bl	8024094 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f023 fabc 	bl	8024094 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f007 faf1 	bl	8008124 <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f007 faed 	bl	8008124 <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f007 fae9 	bl	8008124 <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f024 fad4 	bl	8025104 <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f024 bacd 	b.w	8025104 <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f024 faca 	bl	8025104 <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f024 fac6 	bl	8025104 <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f024 fac2 	bl	8025104 <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002c04 	.word	0x20002c04
 8000b8c:	08029290 	.word	0x08029290
 8000b90:	2000074c 	.word	0x2000074c
 8000b94:	200006e8 	.word	0x200006e8
 8000b98:	200006e4 	.word	0x200006e4
 8000b9c:	20001da4 	.word	0x20001da4
 8000ba0:	200006ed 	.word	0x200006ed
 8000ba4:	20001e34 	.word	0x20001e34
 8000ba8:	20001dec 	.word	0x20001dec
 8000bac:	080292cc 	.word	0x080292cc
 8000bb0:	0802932c 	.word	0x0802932c
 8000bb4:	08029318 	.word	0x08029318
 8000bb8:	08029304 	.word	0x08029304
 8000bbc:	080292a4 	.word	0x080292a4

08000bc0 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000bc0:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bc2:	b169      	cbz	r1, 8000be0 <xcrc32+0x20>
 8000bc4:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bca:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bce:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bd2:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000bdc:	d1f5      	bne.n	8000bca <xcrc32+0xa>
 8000bde:	4770      	bx	lr
  unsigned int crc = init;
 8000be0:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000be2:	4770      	bx	lr
 8000be4:	08029340 	.word	0x08029340

08000be8 <printflasherr>:
	}
	return (res);
}

// display the error
void printflasherr() {
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		break;
	}
	if (msg == NULL) {
		printf("Flash failed Unknown err 0x%0x\n", err);
	} else {
		printf("Flash operation failed: %s error\n", msg);
 8000bea:	4d1e      	ldr	r5, [pc, #120]	; (8000c64 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000bec:	4f1e      	ldr	r7, [pc, #120]	; (8000c68 <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000bee:	4e1f      	ldr	r6, [pc, #124]	; (8000c6c <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000bf0:	f00a f97a 	bl	800aee8 <HAL_FLASH_GetError>
	switch (err) {
 8000bf4:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000bf6:	4604      	mov	r4, r0
	switch (err) {
 8000bf8:	2b1e      	cmp	r3, #30
 8000bfa:	d811      	bhi.n	8000c20 <printflasherr+0x38>
 8000bfc:	e8df f003 	tbb	[pc, r3]
 8000c00:	102f102b 	.word	0x102f102b
 8000c04:	102d1010 	.word	0x102d1010
 8000c08:	10101010 	.word	0x10101010
 8000c0c:	10291010 	.word	0x10291010
 8000c10:	10101010 	.word	0x10101010
 8000c14:	10101010 	.word	0x10101010
 8000c18:	10101010 	.word	0x10101010
 8000c1c:	1010      	.short	0x1010
 8000c1e:	1d          	.byte	0x1d
 8000c1f:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000c20:	4602      	mov	r2, r0
 8000c22:	4913      	ldr	r1, [pc, #76]	; (8000c70 <printflasherr+0x88>)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f024 fbc3 	bl	80253b0 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <printflasherr+0x8c>)
 8000c2e:	f024 f9cd 	bl	8024fcc <iprintf>
	res = HAL_FLASH_Lock();
 8000c32:	f00a f905 	bl	800ae40 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000c36:	b940      	cbnz	r0, 8000c4a <printflasherr+0x62>
	}
	LockFlash();		// for safety
}
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000c3a:	490f      	ldr	r1, [pc, #60]	; (8000c78 <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f024 f9c5 	bl	8024fcc <iprintf>
	res = HAL_FLASH_Lock();
 8000c42:	f00a f8fd 	bl	800ae40 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d0f6      	beq.n	8000c38 <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <printflasherr+0x94>)
 8000c4c:	f024 fa5a 	bl	8025104 <puts>
		printflasherr();
 8000c50:	e7ce      	b.n	8000bf0 <printflasherr+0x8>
		msg = "Write Protected";
 8000c52:	490b      	ldr	r1, [pc, #44]	; (8000c80 <printflasherr+0x98>)
		break;
 8000c54:	e7f2      	b.n	8000c3c <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000c56:	4631      	mov	r1, r6
 8000c58:	e7f0      	b.n	8000c3c <printflasherr+0x54>
		msg = "Programming alignment";
 8000c5a:	4639      	mov	r1, r7
 8000c5c:	e7ee      	b.n	8000c3c <printflasherr+0x54>
	switch (err) {
 8000c5e:	4909      	ldr	r1, [pc, #36]	; (8000c84 <printflasherr+0x9c>)
 8000c60:	e7ec      	b.n	8000c3c <printflasherr+0x54>
 8000c62:	bf00      	nop
 8000c64:	080297d4 	.word	0x080297d4
 8000c68:	08029760 	.word	0x08029760
 8000c6c:	0802974c 	.word	0x0802974c
 8000c70:	080297a0 	.word	0x080297a0
 8000c74:	080297b4 	.word	0x080297b4
 8000c78:	08029740 	.word	0x08029740
 8000c7c:	080297f8 	.word	0x080297f8
 8000c80:	08029778 	.word	0x08029778
 8000c84:	08029788 	.word	0x08029788

08000c88 <LockFlash>:
HAL_StatusTypeDef LockFlash() {
 8000c88:	b510      	push	{r4, lr}
	res = HAL_FLASH_Lock();
 8000c8a:	f00a f8d9 	bl	800ae40 <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000c8e:	4604      	mov	r4, r0
 8000c90:	b908      	cbnz	r0, 8000c96 <LockFlash+0xe>
}
 8000c92:	4620      	mov	r0, r4
 8000c94:	bd10      	pop	{r4, pc}
		printf("LockFlash: failed to lock\n");
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <LockFlash+0x1c>)
 8000c98:	f024 fa34 	bl	8025104 <puts>
		printflasherr();
 8000c9c:	f7ff ffa4 	bl	8000be8 <printflasherr>
}
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	bd10      	pop	{r4, pc}
 8000ca4:	080297f8 	.word	0x080297f8

08000ca8 <WriteFlashWord.part.0>:
		printf("Flash erase unnecessary\n");
	}
}

// write 32 bits
int WriteFlashWord(uint32_t address, uint32_t data) {
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("WriteFlash: failed address check\n");
		return -1;
	}

	trys = 0;
	__HAL_FLASH_ART_DISABLE();
 8000caa:	4c1a      	ldr	r4, [pc, #104]	; (8000d14 <WriteFlashWord.part.0+0x6c>)
int WriteFlashWord(uint32_t address, uint32_t data) {
 8000cac:	4606      	mov	r6, r0
 8000cae:	460f      	mov	r7, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000cb0:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cb8:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000cba:	460a      	mov	r2, r1
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f00a f944 	bl	800af4c <HAL_FLASH_Program>
 8000cc4:	b998      	cbnz	r0, 8000cee <WriteFlashWord.part.0+0x46>
			__HAL_FLASH_ART_RESET();
			__HAL_FLASH_ART_ENABLE();
			return (res);
		}
	}
	__HAL_FLASH_ART_RESET();
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	4605      	mov	r5, r0
 8000cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cce:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6023      	str	r3, [r4, #0]

	if (*(uint32_t*) address != data) {
 8000cd8:	6833      	ldr	r3, [r6, #0]
 8000cda:	429f      	cmp	r7, r3
 8000cdc:	d100      	bne.n	8000ce0 <WriteFlashWord.part.0+0x38>
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
	}
	return (0);
}
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000ce0:	463a      	mov	r2, r7
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <WriteFlashWord.part.0+0x70>)
 8000ce6:	f024 f971 	bl	8024fcc <iprintf>
	return (0);
 8000cea:	4628      	mov	r0, r5
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printflasherr();		// deleteme
 8000cee:	f7ff ff7b 	bl	8000be8 <printflasherr>
			printflasherr();
 8000cf2:	f7ff ff79 	bl	8000be8 <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <WriteFlashWord.part.0+0x74>)
 8000cfc:	f024 f966 	bl	8024fcc <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d00:	6823      	ldr	r3, [r4, #0]
			return (res);
 8000d02:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d08:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6023      	str	r3, [r4, #0]
}
 8000d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d14:	40023c00 	.word	0x40023c00
 8000d18:	08029868 	.word	0x08029868
 8000d1c:	08029838 	.word	0x08029838

08000d20 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000d20:	b530      	push	{r4, r5, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000d26:	f00a f877 	bl	800ae18 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d13c      	bne.n	8000da8 <EraseFlash+0x88>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000d2e:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
		EraseInitStruct.Sector = FLASH_SECTOR_0;
 8000d32:	4d23      	ldr	r5, [pc, #140]	; (8000dc0 <EraseFlash+0xa0>)
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000d38:	d031      	beq.n	8000d9e <EraseFlash+0x7e>
		EraseInitStruct.NbSectors = 2;
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e9c5 2302 	strd	r2, r3, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000d42:	4920      	ldr	r1, [pc, #128]	; (8000dc4 <EraseFlash+0xa4>)
 8000d44:	1f23      	subs	r3, r4, #4
 8000d46:	4421      	add	r1, r4
 8000d48:	e001      	b.n	8000d4e <EraseFlash+0x2e>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	d01b      	beq.n	8000d86 <EraseFlash+0x66>
		if (*ptr != 0xffffffff) {
 8000d4e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000d52:	3201      	adds	r2, #1
 8000d54:	d0f9      	beq.n	8000d4a <EraseFlash+0x2a>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000d56:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000d5a:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <EraseFlash+0xa8>)
 8000d5c:	f024 f936 	bl	8024fcc <iprintf>
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000d60:	2000      	movs	r0, #0
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000d62:	2201      	movs	r2, #1
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000d64:	2302      	movs	r3, #2
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000d66:	a901      	add	r1, sp, #4
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000d68:	612b      	str	r3, [r5, #16]
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000d6a:	e9c5 0200 	strd	r0, r2, [r5]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <EraseFlash+0xa0>)
 8000d70:	f00a fac0 	bl	800b2f4 <HAL_FLASHEx_Erase>
		if (res != HAL_OK) {
 8000d74:	b168      	cbz	r0, 8000d92 <EraseFlash+0x72>
			printf("EraseFlash: failed\n");
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <EraseFlash+0xac>)
 8000d78:	f024 f9c4 	bl	8025104 <puts>
			printflasherr();
 8000d7c:	f7ff ff34 	bl	8000be8 <printflasherr>
}
 8000d80:	2000      	movs	r0, #0
 8000d82:	b003      	add	sp, #12
 8000d84:	bd30      	pop	{r4, r5, pc}
		printf("Flash erase unnecessary\n");
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <EraseFlash+0xb0>)
 8000d88:	f024 f9bc 	bl	8025104 <puts>
}
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	b003      	add	sp, #12
 8000d90:	bd30      	pop	{r4, r5, pc}
			printf("Flash successfully erased\n");
 8000d92:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <EraseFlash+0xb4>)
 8000d94:	f024 f9b6 	bl	8025104 <puts>
}
 8000d98:	2000      	movs	r0, #0
 8000d9a:	b003      	add	sp, #12
 8000d9c:	bd30      	pop	{r4, r5, pc}
		EraseInitStruct.NbSectors = 5;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2305      	movs	r3, #5
 8000da2:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000da6:	e7cc      	b.n	8000d42 <EraseFlash+0x22>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000da8:	4601      	mov	r1, r0
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <EraseFlash+0xb8>)
 8000dac:	f024 f90e 	bl	8024fcc <iprintf>
		printflasherr();
 8000db0:	f7ff ff1a 	bl	8000be8 <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <EraseFlash+0xbc>)
 8000db6:	f024 f9a5 	bl	8025104 <puts>
		printflasherr();
 8000dba:	f7ff ff15 	bl	8000be8 <printflasherr>
 8000dbe:	e7b6      	b.n	8000d2e <EraseFlash+0xe>
 8000dc0:	20000800 	.word	0x20000800
 8000dc4:	0007fffc 	.word	0x0007fffc
 8000dc8:	080298f4 	.word	0x080298f4
 8000dcc:	080298c4 	.word	0x080298c4
 8000dd0:	0802991c 	.word	0x0802991c
 8000dd4:	080298d8 	.word	0x080298d8
 8000dd8:	08029814 	.word	0x08029814
 8000ddc:	080298a8 	.word	0x080298a8

08000de0 <WriteFlashWord>:
int WriteFlashWord(uint32_t address, uint32_t data) {
 8000de0:	b508      	push	{r3, lr}
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000de2:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8000de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dea:	d203      	bcs.n	8000df4 <WriteFlashWord+0x14>
}
 8000dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000df0:	f7ff bf5a 	b.w	8000ca8 <WriteFlashWord.part.0>
		printf("WriteFlash: failed address check\n");
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <WriteFlashWord+0x20>)
 8000df6:	f024 f985 	bl	8025104 <puts>
}
 8000dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfe:	bd08      	pop	{r3, pc}
 8000e00:	08029934 	.word	0x08029934

08000e04 <fixboot>:
		return (0);
	}
}

/// fix up the boot vectors in the option flash
void fixboot() {
 8000e04:	b500      	push	{lr}
 8000e06:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000e08:	4668      	mov	r0, sp
 8000e0a:	f00a fa07 	bl	800b21c <HAL_FLASHEx_OBGetConfig>

	HAL_FLASH_OB_Unlock();
 8000e0e:	f00a f821 	bl	800ae54 <HAL_FLASH_OB_Unlock>

	OBInitStruct.BootAddr0 = 0x2000;		// corresponds to 0x8000000  (flash)
 8000e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	OBInitStruct.BootAddr1 = 0x2040;		// corresponds to 0x8100000  (flash)
 8000e16:	f44f 5301 	mov.w	r3, #8256	; 0x2040

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000e1a:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = 0x2040;		// corresponds to 0x8100000  (flash)
 8000e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000e20:	f00a f924 	bl	800b06c <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000e24:	b968      	cbnz	r0, 8000e42 <fixboot+0x3e>
		printf("fixboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000e26:	f00a f831 	bl	800ae8c <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000e2a:	b990      	cbnz	r0, 8000e52 <fixboot+0x4e>
		printf("fixboot: failed to OBLaunch %d\n", res);
	}
	printf("fixing boot....\n");
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <fixboot+0x58>)
 8000e2e:	f024 f969 	bl	8025104 <puts>
	HAL_FLASH_OB_Lock();
 8000e32:	f00a f821 	bl	800ae78 <HAL_FLASH_OB_Lock>

	printf("fixboot ran\n");
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <fixboot+0x5c>)
 8000e38:	f024 f964 	bl	8025104 <puts>
}
 8000e3c:	b009      	add	sp, #36	; 0x24
 8000e3e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("fixboot: failed to OBProgram %d\n", res);
 8000e42:	4601      	mov	r1, r0
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <fixboot+0x60>)
 8000e46:	f024 f8c1 	bl	8024fcc <iprintf>
	res = HAL_FLASH_OB_Launch();
 8000e4a:	f00a f81f 	bl	800ae8c <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d0ec      	beq.n	8000e2c <fixboot+0x28>
		printf("fixboot: failed to OBLaunch %d\n", res);
 8000e52:	4601      	mov	r1, r0
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <fixboot+0x64>)
 8000e56:	f024 f8b9 	bl	8024fcc <iprintf>
 8000e5a:	e7e7      	b.n	8000e2c <fixboot+0x28>
 8000e5c:	0802999c 	.word	0x0802999c
 8000e60:	080299ac 	.word	0x080299ac
 8000e64:	08029958 	.word	0x08029958
 8000e68:	0802997c 	.word	0x0802997c

08000e6c <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <vApplicationMallocFailedHook>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <vApplicationGetIdleTaskMemory+0x18>)
{
 8000e7a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e7c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e82:	4c04      	ldr	r4, [pc, #16]	; (8000e94 <vApplicationGetIdleTaskMemory+0x1c>)
 8000e84:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000e86:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000c14 	.word	0x20000c14
 8000e94:	20000814 	.word	0x20000814

08000e98 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <vApplicationGetTimerTaskMemory+0x18>)
{
 8000e9a:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000e9c:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000ea2:	4c04      	ldr	r4, [pc, #16]	; (8000eb4 <vApplicationGetTimerTaskMemory+0x1c>)
 8000ea4:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200014c8 	.word	0x200014c8
 8000eb4:	20000cc8 	.word	0x20000cc8

08000eb8 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000eb8:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000eba:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000ebc:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000ebe:	749a      	strb	r2, [r3, #18]
}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000ec4:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000ecc:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000ece:	b082      	sub	sp, #8
 8000ed0:	4605      	mov	r5, r0
 8000ed2:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000ed4:	4616      	mov	r6, r2
 8000ed6:	b10a      	cbz	r2, 8000edc <hc_recv+0x18>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d15d      	bne.n	8000f98 <hc_recv+0xd4>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000edc:	bb6e      	cbnz	r6, 8000f3a <hc_recv+0x76>
 8000ede:	b363      	cbz	r3, 8000f3a <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000ee0:	8a2b      	ldrh	r3, [r5, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 809f 	beq.w	8001026 <hc_recv+0x162>
 8000ee8:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000eea:	f04f 0804 	mov.w	r8, #4
 8000eee:	68ec      	ldr	r4, [r5, #12]
 8000ef0:	e002      	b.n	8000ef8 <hc_recv+0x34>
		for (i = 0; i < state->Len; i++) {
 8000ef2:	3201      	adds	r2, #1
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	dd0d      	ble.n	8000f14 <hc_recv+0x50>
			if (errormsg == GEN_ERROR) {
 8000ef8:	f1b8 0f04 	cmp.w	r8, #4
 8000efc:	d021      	beq.n	8000f42 <hc_recv+0x7e>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000efe:	5ca6      	ldrb	r6, [r4, r2]
 8000f00:	2e0d      	cmp	r6, #13
 8000f02:	d1f6      	bne.n	8000ef2 <hc_recv+0x2e>
 8000f04:	1c51      	adds	r1, r2, #1
 8000f06:	5c60      	ldrb	r0, [r4, r1]
 8000f08:	280a      	cmp	r0, #10
 8000f0a:	d029      	beq.n	8000f60 <hc_recv+0x9c>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000f0c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000f0e:	3201      	adds	r2, #1
 8000f10:	4293      	cmp	r3, r2
 8000f12:	dcf1      	bgt.n	8000ef8 <hc_recv+0x34>
	char *page = NULL;
 8000f14:	2600      	movs	r6, #0
		if (errormsg == OK) {
 8000f16:	f1b8 0f00 	cmp.w	r8, #0
 8000f1a:	d11a      	bne.n	8000f52 <hc_recv+0x8e>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000f1c:	696c      	ldr	r4, [r5, #20]
 8000f1e:	4632      	mov	r2, r6
 8000f20:	2100      	movs	r1, #0
 8000f22:	7828      	ldrb	r0, [r5, #0]
 8000f24:	47a0      	blx	r4
	if (pcb != NULL) {
 8000f26:	b117      	cbz	r7, 8000f2e <hc_recv+0x6a>
		tcp_close(pcb);
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f01b fc03 	bl	801c734 <tcp_close>
		free(state->RecvData);
 8000f2e:	68e8      	ldr	r0, [r5, #12]
 8000f30:	f023 f870 	bl	8024014 <free>
		free(state);
 8000f34:	4628      	mov	r0, r5
 8000f36:	f023 f86d 	bl	8024014 <free>
}
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	b002      	add	sp, #8
 8000f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000f42:	5ca1      	ldrb	r1, [r4, r2]
 8000f44:	2932      	cmp	r1, #50	; 0x32
 8000f46:	d05e      	beq.n	8001006 <hc_recv+0x142>
				if (*(state->RecvData + i) == '\n')
 8000f48:	290a      	cmp	r1, #10
 8000f4a:	d055      	beq.n	8000ff8 <hc_recv+0x134>
		for (i = 0; i < state->Len; i++) {
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	dcf7      	bgt.n	8000f42 <hc_recv+0x7e>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000f52:	2300      	movs	r3, #0
 8000f54:	696c      	ldr	r4, [r5, #20]
 8000f56:	4641      	mov	r1, r8
 8000f58:	7828      	ldrb	r0, [r5, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	47a0      	blx	r4
 8000f5e:	e7e2      	b.n	8000f26 <hc_recv+0x62>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000f60:	1c91      	adds	r1, r2, #2
 8000f62:	5c60      	ldrb	r0, [r4, r1]
 8000f64:	280d      	cmp	r0, #13
 8000f66:	d1d1      	bne.n	8000f0c <hc_recv+0x48>
 8000f68:	1cd1      	adds	r1, r2, #3
 8000f6a:	5c60      	ldrb	r0, [r4, r1]
 8000f6c:	280a      	cmp	r0, #10
 8000f6e:	d1cd      	bne.n	8000f0c <hc_recv+0x48>
					i++;
 8000f70:	3204      	adds	r2, #4
 8000f72:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000f74:	18a1      	adds	r1, r4, r2
 8000f76:	4608      	mov	r0, r1
 8000f78:	9100      	str	r1, [sp, #0]
 8000f7a:	f7ff f96b 	bl	8000254 <strlen>
 8000f7e:	4606      	mov	r6, r0
 8000f80:	f023 f840 	bl	8024004 <malloc>
					strcpy(page, state->RecvData + i);
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	1c72      	adds	r2, r6, #1
					page = malloc(strlen(state->RecvData + i));
 8000f88:	4606      	mov	r6, r0
					strcpy(page, state->RecvData + i);
 8000f8a:	f023 f85b 	bl	8024044 <memcpy>
					break;
 8000f8e:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000f90:	f1b8 0f00 	cmp.w	r8, #0
 8000f94:	d0c2      	beq.n	8000f1c <hc_recv+0x58>
 8000f96:	e7dc      	b.n	8000f52 <hc_recv+0x8e>
		tcp_recved(pcb, p->tot_len);
 8000f98:	8911      	ldrh	r1, [r2, #8]
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	f01a fbce 	bl	801b73c <tcp_recved>
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000fa0:	4634      	mov	r4, r6
 8000fa2:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000fa4:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000fa6:	8963      	ldrh	r3, [r4, #10]
 8000fa8:	68e8      	ldr	r0, [r5, #12]
 8000faa:	4419      	add	r1, r3
 8000fac:	3101      	adds	r1, #1
 8000fae:	f024 f8ef 	bl	8025190 <realloc>
 8000fb2:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d03b      	beq.n	8001030 <hc_recv+0x16c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000fb8:	8a2b      	ldrh	r3, [r5, #16]
 8000fba:	8962      	ldrh	r2, [r4, #10]
 8000fbc:	6861      	ldr	r1, [r4, #4]
 8000fbe:	4418      	add	r0, r3
 8000fc0:	f024 fff4 	bl	8025fac <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000fc4:	8961      	ldrh	r1, [r4, #10]
 8000fc6:	68eb      	ldr	r3, [r5, #12]
 8000fc8:	8a2a      	ldrh	r2, [r5, #16]
 8000fca:	440b      	add	r3, r1
 8000fcc:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000fce:	8963      	ldrh	r3, [r4, #10]
 8000fd0:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000fd2:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000fd4:	4419      	add	r1, r3
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d1e3      	bne.n	8000fa6 <hc_recv+0xe2>
			temp_p = p->next;
 8000fde:	4630      	mov	r0, r6
 8000fe0:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000fe2:	f016 fd85 	bl	8017af0 <pbuf_free_callback>
		while (p != NULL) {
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d0a7      	beq.n	8000f3a <hc_recv+0x76>
			temp_p = p->next;
 8000fea:	4630      	mov	r0, r6
 8000fec:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000fee:	f016 fd7f 	bl	8017af0 <pbuf_free_callback>
		while (p != NULL) {
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d1f3      	bne.n	8000fde <hc_recv+0x11a>
 8000ff6:	e7a0      	b.n	8000f3a <hc_recv+0x76>
		for (i = 0; i < state->Len; i++) {
 8000ff8:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000ffa:	f04f 0803 	mov.w	r8, #3
		for (i = 0; i < state->Len; i++) {
 8000ffe:	4293      	cmp	r3, r2
 8001000:	f73f af7d 	bgt.w	8000efe <hc_recv+0x3a>
 8001004:	e7a5      	b.n	8000f52 <hc_recv+0x8e>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8001006:	1c50      	adds	r0, r2, #1
 8001008:	5c21      	ldrb	r1, [r4, r0]
 800100a:	2930      	cmp	r1, #48	; 0x30
 800100c:	d001      	beq.n	8001012 <hc_recv+0x14e>
 800100e:	4602      	mov	r2, r0
 8001010:	e79a      	b.n	8000f48 <hc_recv+0x84>
						&& (*(state->RecvData + ++i) == '0'))
 8001012:	1c90      	adds	r0, r2, #2
 8001014:	5c21      	ldrb	r1, [r4, r0]
 8001016:	2930      	cmp	r1, #48	; 0x30
 8001018:	d1f9      	bne.n	800100e <hc_recv+0x14a>
		for (i = 0; i < state->Len; i++) {
 800101a:	3203      	adds	r2, #3
 800101c:	4293      	cmp	r3, r2
 800101e:	dd05      	ble.n	800102c <hc_recv+0x168>
					errormsg = OK;
 8001020:	f04f 0800 	mov.w	r8, #0
 8001024:	e76b      	b.n	8000efe <hc_recv+0x3a>
	hc_errormsg errormsg = GEN_ERROR;
 8001026:	f04f 0804 	mov.w	r8, #4
 800102a:	e792      	b.n	8000f52 <hc_recv+0x8e>
	char *page = NULL;
 800102c:	2600      	movs	r6, #0
 800102e:	e775      	b.n	8000f1c <hc_recv+0x58>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8001030:	4603      	mov	r3, r0
 8001032:	4602      	mov	r2, r0
 8001034:	696c      	ldr	r4, [r5, #20]
 8001036:	2101      	movs	r1, #1
 8001038:	7828      	ldrb	r0, [r5, #0]
 800103a:	47a0      	blx	r4
				return (ERR_OK);
 800103c:	e77d      	b.n	8000f3a <hc_recv+0x76>
 800103e:	bf00      	nop

08001040 <hc_error>:
static void hc_error(void *arg, err_t err) {
 8001040:	b570      	push	{r4, r5, r6, lr}
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8001042:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8001048:	7800      	ldrb	r0, [r0, #0]
 800104a:	2104      	movs	r1, #4
 800104c:	461a      	mov	r2, r3
 800104e:	6966      	ldr	r6, [r4, #20]
 8001050:	47b0      	blx	r6
	free(state->RecvData);
 8001052:	68e0      	ldr	r0, [r4, #12]
 8001054:	f022 ffde 	bl	8024014 <free>
	free(state->PostVars);
 8001058:	68a0      	ldr	r0, [r4, #8]
 800105a:	f022 ffdb 	bl	8024014 <free>
	free(state->Page);
 800105e:	6860      	ldr	r0, [r4, #4]
 8001060:	f022 ffd8 	bl	8024014 <free>
	free(state);
 8001064:	4620      	mov	r0, r4
 8001066:	f022 ffd5 	bl	8024014 <free>
	printf("hc_error: err=%d\n", err);
 800106a:	4629      	mov	r1, r5
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <hc_error+0x38>)
}
 800106e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8001072:	f023 bfab 	b.w	8024fcc <iprintf>
 8001076:	bf00      	nop
 8001078:	080299b8 	.word	0x080299b8

0800107c <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	4605      	mov	r5, r0
 8001080:	b085      	sub	sp, #20
 8001082:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8001084:	2a00      	cmp	r2, #0
 8001086:	d13f      	bne.n	8001108 <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8001088:	6887      	ldr	r7, [r0, #8]
 800108a:	2f00      	cmp	r7, #0
 800108c:	d04f      	beq.n	800112e <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 800108e:	4638      	mov	r0, r7
 8001090:	f7ff f8e0 	bl	8000254 <strlen>
 8001094:	686a      	ldr	r2, [r5, #4]
 8001096:	4606      	mov	r6, r0
 8001098:	4610      	mov	r0, r2
 800109a:	9203      	str	r2, [sp, #12]
 800109c:	f7ff f8da 	bl	8000254 <strlen>
 80010a0:	4430      	add	r0, r6
 80010a2:	3065      	adds	r0, #101	; 0x65
 80010a4:	f022 ffae 	bl	8024004 <malloc>
		sprintf(headers,
 80010a8:	4633      	mov	r3, r6
 80010aa:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 80010ac:	4606      	mov	r6, r0
		sprintf(headers,
 80010ae:	4927      	ldr	r1, [pc, #156]	; (800114c <hc_connected+0xd0>)
 80010b0:	9700      	str	r7, [sp, #0]
 80010b2:	f024 f97d 	bl	80253b0 <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 80010b6:	4926      	ldr	r1, [pc, #152]	; (8001150 <hc_connected+0xd4>)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f01a fc83 	bl	801b9c4 <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 80010be:	4925      	ldr	r1, [pc, #148]	; (8001154 <hc_connected+0xd8>)
 80010c0:	4620      	mov	r0, r4
 80010c2:	f01a fcb7 	bl	801ba34 <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 80010c6:	220a      	movs	r2, #10
 80010c8:	4923      	ldr	r1, [pc, #140]	; (8001158 <hc_connected+0xdc>)
 80010ca:	4620      	mov	r0, r4
 80010cc:	f01a fcd4 	bl	801ba78 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 80010d0:	4922      	ldr	r1, [pc, #136]	; (800115c <hc_connected+0xe0>)
 80010d2:	4620      	mov	r0, r4
 80010d4:	f01a fc92 	bl	801b9fc <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 80010d8:	4630      	mov	r0, r6
 80010da:	f7ff f8bb 	bl	8000254 <strlen>
 80010de:	2301      	movs	r3, #1
 80010e0:	4602      	mov	r2, r0
 80010e2:	4631      	mov	r1, r6
 80010e4:	4620      	mov	r0, r4
 80010e6:	f01d fa41 	bl	801e56c <tcp_write>
	tcp_output(pcb);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f01e f858 	bl	801f1a0 <tcp_output>

	// remove headers
	free(headers);
 80010f0:	4630      	mov	r0, r6
 80010f2:	f022 ff8f 	bl	8024014 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 80010f6:	68a8      	ldr	r0, [r5, #8]
 80010f8:	f022 ff8c 	bl	8024014 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 80010fc:	6868      	ldr	r0, [r5, #4]
 80010fe:	f022 ff89 	bl	8024014 <free>

	return (ERR_OK);
}
 8001102:	2000      	movs	r0, #0
 8001104:	b005      	add	sp, #20
 8001106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 8001108:	b111      	cbz	r1, 8001110 <hc_connected+0x94>
		tcp_close(pcb);
 800110a:	4608      	mov	r0, r1
 800110c:	f01b fb12 	bl	801c734 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8001110:	2300      	movs	r3, #0
 8001112:	2104      	movs	r1, #4
 8001114:	7828      	ldrb	r0, [r5, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	696c      	ldr	r4, [r5, #20]
 800111a:	47a0      	blx	r4
		free(state->RecvData);
 800111c:	68e8      	ldr	r0, [r5, #12]
 800111e:	f022 ff79 	bl	8024014 <free>
		free(state);
 8001122:	4628      	mov	r0, r5
 8001124:	f022 ff76 	bl	8024014 <free>
}
 8001128:	2000      	movs	r0, #0
 800112a:	b005      	add	sp, #20
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 800112e:	6842      	ldr	r2, [r0, #4]
 8001130:	4610      	mov	r0, r2
 8001132:	9203      	str	r2, [sp, #12]
 8001134:	f7ff f88e 	bl	8000254 <strlen>
 8001138:	3013      	adds	r0, #19
 800113a:	f022 ff63 	bl	8024004 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 800113e:	9a03      	ldr	r2, [sp, #12]
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8001142:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8001144:	f024 f934 	bl	80253b0 <siprintf>
 8001148:	e7b5      	b.n	80010b6 <hc_connected+0x3a>
 800114a:	bf00      	nop
 800114c:	080299e4 	.word	0x080299e4
 8001150:	08000ec5 	.word	0x08000ec5
 8001154:	08001041 	.word	0x08001041
 8001158:	08001165 	.word	0x08001165
 800115c:	08000eb9 	.word	0x08000eb9
 8001160:	080299cc 	.word	0x080299cc

08001164 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8001164:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8001166:	7c83      	ldrb	r3, [r0, #18]
 8001168:	3301      	adds	r3, #1
 800116a:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 800116c:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 800116e:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8001170:	d801      	bhi.n	8001176 <hc_poll+0x12>
}
 8001172:	2000      	movs	r0, #0
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8001178:	4608      	mov	r0, r1
 800117a:	f01b f8e3 	bl	801c344 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 800117e:	2300      	movs	r3, #0
 8001180:	7820      	ldrb	r0, [r4, #0]
 8001182:	2102      	movs	r1, #2
 8001184:	6965      	ldr	r5, [r4, #20]
 8001186:	461a      	mov	r2, r3
 8001188:	47a8      	blx	r5
}
 800118a:	2000      	movs	r0, #0
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	b085      	sub	sp, #20
 8001196:	460f      	mov	r7, r1
 8001198:	4614      	mov	r4, r2
 800119a:	4698      	mov	r8, r3
 800119c:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 800119e:	2018      	movs	r0, #24
 80011a0:	f022 ff30 	bl	8024004 <malloc>
 80011a4:	4605      	mov	r5, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 80011a6:	f01b f9ed 	bl	801c584 <tcp_new>
	if (pcb == NULL || state == NULL) {
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d069      	beq.n	8001282 <hc_open+0xf2>
 80011ae:	fab5 f285 	clz	r2, r5
 80011b2:	0952      	lsrs	r2, r2, #5
 80011b4:	2d00      	cmp	r5, #0
 80011b6:	d064      	beq.n	8001282 <hc_open+0xf2>
	num++;
	state->Num = num;
	state->RecvData = NULL;
	state->ConnectionTimeout = 0;
	state->Len = 0;
	state->ReturnPage = returnpage;
 80011b8:	f8c5 8014 	str.w	r8, [r5, #20]
 80011bc:	4606      	mov	r6, r0
	num++;
 80011be:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80012b4 <hc_open+0x124>
	state->RecvData = NULL;
 80011c2:	60ea      	str	r2, [r5, #12]
	num++;
 80011c4:	f898 3000 	ldrb.w	r3, [r8]
	state->ConnectionTimeout = 0;
 80011c8:	74aa      	strb	r2, [r5, #18]
	num++;
 80011ca:	3301      	adds	r3, #1
	state->Len = 0;
 80011cc:	822a      	strh	r2, [r5, #16]
	num++;
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 80011d4:	702b      	strb	r3, [r5, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 80011d6:	b134      	cbz	r4, 80011e6 <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff f83b 	bl	8000254 <strlen>
 80011de:	3001      	adds	r0, #1
 80011e0:	f022 ff10 	bl	8024004 <malloc>
 80011e4:	60a8      	str	r0, [r5, #8]
	state->Page = malloc(strlen(Page) + 1);
 80011e6:	4638      	mov	r0, r7
 80011e8:	f7ff f834 	bl	8000254 <strlen>
 80011ec:	1c42      	adds	r2, r0, #1
 80011ee:	4610      	mov	r0, r2
 80011f0:	9200      	str	r2, [sp, #0]
 80011f2:	f022 ff07 	bl	8024004 <malloc>
 80011f6:	4603      	mov	r3, r0
 80011f8:	6068      	str	r0, [r5, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 80011fa:	b390      	cbz	r0, 8001262 <hc_open+0xd2>
 80011fc:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8001200:	9a00      	ldr	r2, [sp, #0]
 8001202:	f1b9 0f00 	cmp.w	r9, #0
 8001206:	d02b      	beq.n	8001260 <hc_open+0xd0>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8001208:	4639      	mov	r1, r7
 800120a:	f022 ff1b 	bl	8024044 <memcpy>
	if (PostVars != NULL)
 800120e:	2c00      	cmp	r4, #0
 8001210:	d03e      	beq.n	8001290 <hc_open+0x100>
		strcpy(state->PostVars, PostVars);
 8001212:	4621      	mov	r1, r4
 8001214:	4648      	mov	r0, r9
 8001216:	f024 f972 	bl	80254fe <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 800121a:	f641 7490 	movw	r4, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 800121e:	4f21      	ldr	r7, [pc, #132]	; (80012a4 <hc_open+0x114>)
 8001220:	e000      	b.n	8001224 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8001222:	b2a4      	uxth	r4, r4
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8001224:	4622      	mov	r2, r4
 8001226:	4639      	mov	r1, r7
 8001228:	4630      	mov	r0, r6
		port++;
 800122a:	3401      	adds	r4, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 800122c:	f01a f964 	bl	801b4f8 <tcp_bind>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f6      	bne.n	8001222 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8001234:	4629      	mov	r1, r5
 8001236:	4630      	mov	r0, r6
 8001238:	f01a fbc0 	bl	801b9bc <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <hc_open+0x118>)
 800123e:	f641 7290 	movw	r2, #8080	; 0x1f90
 8001242:	a901      	add	r1, sp, #4
 8001244:	4630      	mov	r0, r6
 8001246:	f01a fab3 	bl	801b7b0 <tcp_connect>
 800124a:	b243      	sxtb	r3, r0
 800124c:	f88d 300f 	strb.w	r3, [sp, #15]

	if (err != ERR_OK) {
 8001250:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001254:	b9fb      	cbnz	r3, 8001296 <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8001256:	f898 0000 	ldrb.w	r0, [r8]
}
 800125a:	b005      	add	sp, #20
 800125c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8001260:	b19c      	cbz	r4, 800128a <hc_open+0xfa>
		free(state->Page);
 8001262:	4618      	mov	r0, r3
 8001264:	f022 fed6 	bl	8024014 <free>
		free(state->PostVars);
 8001268:	68a8      	ldr	r0, [r5, #8]
 800126a:	f022 fed3 	bl	8024014 <free>
		free(state);
 800126e:	4628      	mov	r0, r5
 8001270:	f022 fed0 	bl	8024014 <free>
		tcp_close(pcb);
 8001274:	4630      	mov	r0, r6
 8001276:	f01b fa5d 	bl	801c734 <tcp_close>
		return 0;
 800127a:	2000      	movs	r0, #0
}
 800127c:	b005      	add	sp, #20
 800127e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("hc_open: Not enough memory for pcb or state\n");
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <hc_open+0x11c>)
 8001284:	f023 ff3e 	bl	8025104 <puts>
		for (;;)
 8001288:	e7fe      	b.n	8001288 <hc_open+0xf8>
	strcpy(state->Page, Page);
 800128a:	4639      	mov	r1, r7
 800128c:	f022 feda 	bl	8024044 <memcpy>
		state->PostVars = NULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60ab      	str	r3, [r5, #8]
 8001294:	e7c1      	b.n	800121a <hc_open+0x8a>
		printf("hc_open failed with %d\n", err);
 8001296:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <hc_open+0x120>)
 800129c:	b249      	sxtb	r1, r1
 800129e:	f023 fe95 	bl	8024fcc <iprintf>
 80012a2:	e7d8      	b.n	8001256 <hc_open+0xc6>
 80012a4:	080452a8 	.word	0x080452a8
 80012a8:	0800107d 	.word	0x0800107d
 80012ac:	08029a48 	.word	0x08029a48
 80012b0:	08029a74 	.word	0x08029a74
 80012b4:	2000157c 	.word	0x2000157c

080012b8 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 80012b8:	2300      	movs	r3, #0
int wait_armtx(void) {
 80012ba:	b510      	push	{r4, lr}
 80012bc:	b082      	sub	sp, #8
	timeoutcnt = 0;
 80012be:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	2b95      	cmp	r3, #149	; 0x95
 80012c4:	dc0d      	bgt.n	80012e2 <wait_armtx+0x2a>
 80012c6:	4c0e      	ldr	r4, [pc, #56]	; (8001300 <wait_armtx+0x48>)
 80012c8:	e007      	b.n	80012da <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 80012ca:	9b01      	ldr	r3, [sp, #4]
 80012cc:	4403      	add	r3, r0
 80012ce:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 80012d0:	f013 ff0c 	bl	80150ec <osDelay>
	while (timeoutcnt < 150) {
 80012d4:	9b01      	ldr	r3, [sp, #4]
 80012d6:	2b95      	cmp	r3, #149	; 0x95
 80012d8:	dc03      	bgt.n	80012e2 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 80012da:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	4283      	cmp	r3, r0
 80012e0:	d1f3      	bne.n	80012ca <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	2bf9      	cmp	r3, #249	; 0xf9
 80012e6:	dc02      	bgt.n	80012ee <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 80012e8:	2000      	movs	r0, #0
}
 80012ea:	b002      	add	sp, #8
 80012ec:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <wait_armtx+0x4c>)
 80012f0:	f023 ff08 	bl	8025104 <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <wait_armtx+0x48>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	601a      	str	r2, [r3, #0]
		return (-1);
 80012fe:	e7f4      	b.n	80012ea <wait_armtx+0x32>
 8001300:	20001d44 	.word	0x20001d44
 8001304:	08029a8c 	.word	0x08029a8c

08001308 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_UART_TxCpltCallback+0x14>)
 800130e:	6802      	ldr	r2, [r0, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d000      	beq.n	8001316 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001314:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8001316:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_UART_TxCpltCallback+0x18>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40005000 	.word	0x40005000
 8001324:	20001d44 	.word	0x20001d44

08001328 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 800132c:	4c1b      	ldr	r4, [pc, #108]	; (800139c <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 800132e:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001330:	481b      	ldr	r0, [pc, #108]	; (80013a0 <lcd_uart_init+0x78>)
 8001332:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001334:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001336:	f023 fe49 	bl	8024fcc <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 800133c:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 800133e:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001340:	f010 fc8e 	bl	8011c60 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001344:	4620      	mov	r0, r4
 8001346:	f010 fbd9 	bl	8011afc <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 800134c:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800134e:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001350:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001354:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001358:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001360:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001364:	f011 fc76 	bl	8012c54 <HAL_UART_Init>
 8001368:	b958      	cbnz	r0, 8001382 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	490f      	ldr	r1, [pc, #60]	; (80013ac <lcd_uart_init+0x84>)
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <lcd_uart_init+0x74>)
 8001370:	f011 fe60 	bl	8013034 <HAL_UART_Receive_DMA>
 8001374:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001378:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800137c:	b933      	cbnz	r3, 800138c <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 800137e:	b002      	add	sp, #8
 8001380:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8001382:	4631      	mov	r1, r6
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <lcd_uart_init+0x88>)
 8001386:	f023 fe21 	bl	8024fcc <iprintf>
 800138a:	e7ee      	b.n	800136a <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800138c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <lcd_uart_init+0x8c>)
}
 8001392:	b002      	add	sp, #8
 8001394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001398:	f023 be18 	b.w	8024fcc <iprintf>
 800139c:	200027d0 	.word	0x200027d0
 80013a0:	08029aa0 	.word	0x08029aa0
 80013a4:	20001748 	.word	0x20001748
 80013a8:	40005000 	.word	0x40005000
 80013ac:	20001608 	.word	0x20001608
 80013b0:	08029abc 	.word	0x08029abc
 80013b4:	08029aec 	.word	0x08029aec

080013b8 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80013ba:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <lcd_init+0xec>)
void lcd_init(int baud) {
 80013bc:	b08d      	sub	sp, #52	; 0x34
 80013be:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80013c2:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80013c4:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80013c6:	4e39      	ldr	r6, [pc, #228]	; (80014ac <lcd_init+0xf4>)
 80013c8:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80013cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d0:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80013d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d6:	c407      	stmia	r4!, {r0, r1, r2}
 80013d8:	f824 3b02 	strh.w	r3, [r4], #2
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80013e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 80013e8:	4629      	mov	r1, r5
 80013ea:	4831      	ldr	r0, [pc, #196]	; (80014b0 <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80013ec:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 80013f0:	f023 fdec 	bl	8024fcc <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 80013f4:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80013f8:	d008      	beq.n	800140c <lcd_init+0x54>
 80013fa:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 80013fe:	d005      	beq.n	800140c <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001400:	4629      	mov	r1, r5
 8001402:	482c      	ldr	r0, [pc, #176]	; (80014b4 <lcd_init+0xfc>)
 8001404:	f023 fde2 	bl	8024fcc <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 8001408:	b00d      	add	sp, #52	; 0x34
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 800140c:	2300      	movs	r3, #0
 800140e:	4c2a      	ldr	r4, [pc, #168]	; (80014b8 <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001410:	4639      	mov	r1, r7
 8001412:	2207      	movs	r2, #7
 8001414:	4829      	ldr	r0, [pc, #164]	; (80014bc <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 8001416:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001418:	f010 fbcc 	bl	8011bb4 <HAL_UART_Transmit_DMA>
 800141c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001420:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001424:	b14b      	cbz	r3, 800143a <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001426:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800142a:	4825      	ldr	r0, [pc, #148]	; (80014c0 <lcd_init+0x108>)
 800142c:	f023 fdce 	bl	8024fcc <iprintf>
	while (!(txdmadone)) {
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	b92b      	cbnz	r3, 8001440 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001434:	2001      	movs	r0, #1
 8001436:	f013 fe59 	bl	80150ec <osDelay>
	while (!(txdmadone)) {
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f9      	beq.n	8001434 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001440:	2300      	movs	r3, #0
	osDelay(800);
 8001442:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 8001446:	6023      	str	r3, [r4, #0]
	osDelay(800);
 8001448:	f013 fe50 	bl	80150ec <osDelay>
	if (baud == 9600)
 800144c:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8001450:	d017      	beq.n	8001482 <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001452:	220e      	movs	r2, #14
 8001454:	a908      	add	r1, sp, #32
 8001456:	4819      	ldr	r0, [pc, #100]	; (80014bc <lcd_init+0x104>)
 8001458:	f010 fbac 	bl	8011bb4 <HAL_UART_Transmit_DMA>
 800145c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001460:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001464:	b11b      	cbz	r3, 800146e <lcd_init+0xb6>
 8001466:	e017      	b.n	8001498 <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 8001468:	2001      	movs	r0, #1
 800146a:	f013 fe3f 	bl	80150ec <osDelay>
	while (!(txdmadone)) {
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f9      	beq.n	8001468 <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 8001474:	2300      	movs	r3, #0
	osDelay(120);
 8001476:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 8001478:	6023      	str	r3, [r4, #0]
	osDelay(120);
 800147a:	f013 fe37 	bl	80150ec <osDelay>
}
 800147e:	b00d      	add	sp, #52	; 0x34
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 8001482:	220c      	movs	r2, #12
 8001484:	a904      	add	r1, sp, #16
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <lcd_init+0x104>)
 8001488:	f010 fb94 	bl	8011bb4 <HAL_UART_Transmit_DMA>
 800148c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001490:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0ea      	beq.n	800146e <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001498:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <lcd_init+0x108>)
 800149e:	f023 fd95 	bl	8024fcc <iprintf>
 80014a2:	e7e4      	b.n	800146e <lcd_init+0xb6>
 80014a4:	08029b94 	.word	0x08029b94
 80014a8:	08029b9c 	.word	0x08029b9c
 80014ac:	08029bac 	.word	0x08029bac
 80014b0:	08029b1c 	.word	0x08029b1c
 80014b4:	08029b30 	.word	0x08029b30
 80014b8:	20001d44 	.word	0x20001d44
 80014bc:	200027d0 	.word	0x200027d0
 80014c0:	08029b64 	.word	0x08029b64

080014c4 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80014c4:	b530      	push	{r4, r5, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 80014ca:	f7ff fef5 	bl	80012b8 <wait_armtx>
 80014ce:	4605      	mov	r5, r0
 80014d0:	3001      	adds	r0, #1
 80014d2:	d01d      	beq.n	8001510 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <lcd_puts+0x60>)
 80014d8:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	5ce3      	ldrb	r3, [r4, r3]
 80014de:	b153      	cbz	r3, 80014f6 <lcd_puts+0x32>
		buffer[i] = str[i];
 80014e0:	9901      	ldr	r1, [sp, #4]
 80014e2:	9a01      	ldr	r2, [sp, #4]
		i++;
 80014e4:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 80014e6:	5c61      	ldrb	r1, [r4, r1]
		i++;
 80014e8:	3301      	adds	r3, #1
		buffer[i] = str[i];
 80014ea:	5481      	strb	r1, [r0, r2]
		i++;
 80014ec:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	5ce3      	ldrb	r3, [r4, r3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f4      	bne.n	80014e0 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80014f6:	9901      	ldr	r1, [sp, #4]
 80014f8:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80014fa:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <lcd_puts+0x64>)
	buffer[i] = '\0';
 80014fe:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001500:	b292      	uxth	r2, r2
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <lcd_puts+0x60>)
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 8001506:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001508:	f010 fb54 	bl	8011bb4 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800150c:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 800150e:	b910      	cbnz	r0, 8001516 <lcd_puts+0x52>
	}
	return (stat);
}
 8001510:	4628      	mov	r0, r5
 8001512:	b003      	add	sp, #12
 8001514:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001516:	4629      	mov	r1, r5
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <lcd_puts+0x6c>)
 800151a:	f023 fd57 	bl	8024fcc <iprintf>
}
 800151e:	4628      	mov	r0, r5
 8001520:	b003      	add	sp, #12
 8001522:	bd30      	pop	{r4, r5, pc}
 8001524:	200015a8 	.word	0x200015a8
 8001528:	20001d44 	.word	0x20001d44
 800152c:	200027d0 	.word	0x200027d0
 8001530:	08029bbc 	.word	0x08029bbc

08001534 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8001534:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 8001536:	2300      	movs	r3, #0
int lcd_rxdma() {
 8001538:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <lcd_rxdma+0x64>)
	volatile int count = 0;
 800153c:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 800153e:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001540:	6953      	ldr	r3, [r2, #20]
 8001542:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001546:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8001548:	9a01      	ldr	r2, [sp, #4]
 800154a:	2a80      	cmp	r2, #128	; 0x80
 800154c:	d016      	beq.n	800157c <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800154e:	4d13      	ldr	r5, [pc, #76]	; (800159c <lcd_rxdma+0x68>)
 8001550:	9a01      	ldr	r2, [sp, #4]
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	4293      	cmp	r3, r2
 8001556:	d00e      	beq.n	8001576 <lcd_rxdma+0x42>
 8001558:	4c11      	ldr	r4, [pc, #68]	; (80015a0 <lcd_rxdma+0x6c>)
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 800155c:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 800155e:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001560:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8001562:	3301      	adds	r3, #1
		count++;
 8001564:	3201      	adds	r2, #1
		return (0);
 8001566:	2b80      	cmp	r3, #128	; 0x80
		count++;
 8001568:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800156a:	9a01      	ldr	r2, [sp, #4]
		return (0);
 800156c:	bfa8      	it	ge
 800156e:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001570:	429a      	cmp	r2, r3
 8001572:	d1f3      	bne.n	800155c <lcd_rxdma+0x28>
 8001574:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 8001576:	9800      	ldr	r0, [sp, #0]
}
 8001578:	b003      	add	sp, #12
 800157a:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 800157c:	4909      	ldr	r1, [pc, #36]	; (80015a4 <lcd_rxdma+0x70>)
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <lcd_rxdma+0x74>)
 8001580:	f011 fd58 	bl	8013034 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8001584:	b910      	cbnz	r0, 800158c <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 8001586:	2300      	movs	r3, #0
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	e7e0      	b.n	800154e <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800158c:	4601      	mov	r1, r0
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <lcd_rxdma+0x78>)
 8001590:	f023 fd1c 	bl	8024fcc <iprintf>
 8001594:	e7f7      	b.n	8001586 <lcd_rxdma+0x52>
 8001596:	bf00      	nop
 8001598:	40026000 	.word	0x40026000
 800159c:	20001748 	.word	0x20001748
 80015a0:	200016c8 	.word	0x200016c8
 80015a4:	20001608 	.word	0x20001608
 80015a8:	200027d0 	.word	0x200027d0
 80015ac:	08029bec 	.word	0x08029bec

080015b0 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80015b0:	b500      	push	{lr}
 80015b2:	b099      	sub	sp, #100	; 0x64
 80015b4:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80015b6:	4668      	mov	r0, sp
 80015b8:	f023 ff8b 	bl	80254d2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 80015c0:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80015c2:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80015c4:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80015c6:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80015c8:	b92b      	cbnz	r3, 80015d6 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 80015ca:	4668      	mov	r0, sp
 80015cc:	f7ff ff7a 	bl	80014c4 <lcd_puts>
	else
		return (-1);
}
 80015d0:	b019      	add	sp, #100	; 0x64
 80015d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	e7f9      	b.n	80015d0 <writelcdcmd+0x20>
 80015dc:	08029b98 	.word	0x08029b98
 80015e0:	200016c4 	.word	0x200016c4

080015e4 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 80015e4:	b510      	push	{r4, lr}
 80015e6:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 80015e8:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 80015ee:	a802      	add	r0, sp, #8
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <setlcdtext+0x40>)
	volatile int result = 0;
 80015f2:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80015f4:	f023 fedc 	bl	80253b0 <siprintf>
	strcpy(pkt, str);
 80015f8:	a902      	add	r1, sp, #8
 80015fa:	a81a      	add	r0, sp, #104	; 0x68
 80015fc:	f023 ff69 	bl	80254d2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001600:	4909      	ldr	r1, [pc, #36]	; (8001628 <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <setlcdtext+0x48>)
	strcpy(pkt, str);
 8001604:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001606:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001608:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800160a:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800160c:	b933      	cbnz	r3, 800161c <setlcdtext+0x38>
		return (lcd_puts(pkt));
 800160e:	a81a      	add	r0, sp, #104	; 0x68
 8001610:	f7ff ff58 	bl	80014c4 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001614:	9001      	str	r0, [sp, #4]
	return (result);
 8001616:	9801      	ldr	r0, [sp, #4]
}
 8001618:	b032      	add	sp, #200	; 0xc8
 800161a:	bd10      	pop	{r4, pc}
		return (-1);
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	e7f8      	b.n	8001614 <setlcdtext+0x30>
 8001622:	bf00      	nop
 8001624:	08029c1c 	.word	0x08029c1c
 8001628:	08029b98 	.word	0x08029b98
 800162c:	200016c4 	.word	0x200016c4

08001630 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001630:	b500      	push	{lr}
 8001632:	b0a1      	sub	sp, #132	; 0x84
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8001638:	4911      	ldr	r1, [pc, #68]	; (8001680 <setlcdbin+0x50>)
 800163a:	4668      	mov	r0, sp
 800163c:	f023 feb8 	bl	80253b0 <siprintf>
	strcpy(pkt, str);
 8001640:	4669      	mov	r1, sp
 8001642:	a808      	add	r0, sp, #32
 8001644:	f023 ff45 	bl	80254d2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <setlcdbin+0x58>)
	strcpy(pkt, str);
 800164c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800164e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001650:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001652:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001654:	b98b      	cbnz	r3, 800167a <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 8001656:	a808      	add	r0, sp, #32
 8001658:	f7ff ff34 	bl	80014c4 <lcd_puts>
	result = writelcdcmd(buffer);
 800165c:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 800165e:	9b08      	ldr	r3, [sp, #32]
 8001660:	3301      	adds	r3, #1
 8001662:	d003      	beq.n	800166c <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001664:	9808      	ldr	r0, [sp, #32]
}
 8001666:	b021      	add	sp, #132	; 0x84
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <setlcdbin+0x5c>)
 800166e:	f023 fcad 	bl	8024fcc <iprintf>
	return (result);
 8001672:	9808      	ldr	r0, [sp, #32]
}
 8001674:	b021      	add	sp, #132	; 0x84
 8001676:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	e7ed      	b.n	800165c <setlcdbin+0x2c>
 8001680:	08029c24 	.word	0x08029c24
 8001684:	08029b98 	.word	0x08029b98
 8001688:	200016c4 	.word	0x200016c4
 800168c:	08029c2c 	.word	0x08029c2c

08001690 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001690:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001694:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 8001696:	4c2c      	ldr	r4, [pc, #176]	; (8001748 <isnexpkt+0xb8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d04f      	beq.n	8001740 <isnexpkt+0xb0>
	if (++index >= limit)
 80016a0:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 80016a2:	4d2a      	ldr	r5, [pc, #168]	; (800174c <isnexpkt+0xbc>)
		return (0);
 80016a4:	2b80      	cmp	r3, #128	; 0x80
 80016a6:	bfa8      	it	ge
 80016a8:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80016aa:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 80016ac:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80016ae:	4c28      	ldr	r4, [pc, #160]	; (8001750 <isnexpkt+0xc0>)
		rxtimeout = 100;
 80016b0:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 80016b2:	4b28      	ldr	r3, [pc, #160]	; (8001754 <isnexpkt+0xc4>)
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 80016b6:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 80016ba:	7823      	ldrb	r3, [r4, #0]
 80016bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80016c0:	54c2      	strb	r2, [r0, r3]
 80016c2:	3301      	adds	r3, #1
		if (ch == 0xff) {
 80016c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 80016c8:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 80016ca:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 80016cc:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 80016ce:	d021      	beq.n	8001714 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80016d0:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <isnexpkt+0xc8>)
 80016d6:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 80016d8:	2200      	movs	r2, #0
 80016da:	4e20      	ldr	r6, [pc, #128]	; (800175c <isnexpkt+0xcc>)
 80016dc:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 80016de:	428b      	cmp	r3, r1
 80016e0:	d027      	beq.n	8001732 <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	b133      	cbz	r3, 80016f4 <isnexpkt+0x64>
		rxtimeout--;
 80016e6:	3b01      	subs	r3, #1
 80016e8:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 80016ea:	b11b      	cbz	r3, 80016f4 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 80016ec:	f06f 0001 	mvn.w	r0, #1
}
 80016f0:	b002      	add	sp, #8
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 80016f8:	4c15      	ldr	r4, [pc, #84]	; (8001750 <isnexpkt+0xc0>)
		termcnt = 0;
 80016fa:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 80016fc:	7023      	strb	r3, [r4, #0]
 80016fe:	b119      	cbz	r1, 8001708 <isnexpkt+0x78>
 8001700:	460a      	mov	r2, r1
 8001702:	4619      	mov	r1, r3
 8001704:	f022 fcc6 	bl	8024094 <memset>
		i = 0;
 8001708:	2300      	movs	r3, #0
		return (-1);
 800170a:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 800170e:	7023      	strb	r3, [r4, #0]
}
 8001710:	b002      	add	sp, #8
 8001712:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8001714:	4e11      	ldr	r6, [pc, #68]	; (800175c <isnexpkt+0xcc>)
 8001716:	7832      	ldrb	r2, [r6, #0]
 8001718:	3201      	adds	r2, #1
 800171a:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 800171c:	2a03      	cmp	r2, #3
			termcnt++;
 800171e:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8001720:	d1dd      	bne.n	80016de <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <isnexpkt+0xd0>)
 8001724:	f023 fc52 	bl	8024fcc <iprintf>
				i = 0;
 8001728:	2300      	movs	r3, #0
				index = i;
 800172a:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 800172c:	7033      	strb	r3, [r6, #0]
				i = 0;
 800172e:	7023      	strb	r3, [r4, #0]
				return (index);
 8001730:	e7de      	b.n	80016f0 <isnexpkt+0x60>
			i = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8001736:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1d3      	bne.n	80016e6 <isnexpkt+0x56>
 800173e:	e7d9      	b.n	80016f4 <isnexpkt+0x64>
 8001740:	4d02      	ldr	r5, [pc, #8]	; (800174c <isnexpkt+0xbc>)
 8001742:	e7ce      	b.n	80016e2 <isnexpkt+0x52>
 8001744:	20001748 	.word	0x20001748
 8001748:	200016b4 	.word	0x200016b4
 800174c:	20001b2c 	.word	0x20001b2c
 8001750:	200016ac 	.word	0x200016ac
 8001754:	200016c8 	.word	0x200016c8
 8001758:	20001b28 	.word	0x20001b28
 800175c:	20001b30 	.word	0x20001b30
 8001760:	08029c48 	.word	0x08029c48

08001764 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <lcd_time+0x7c>)
 8001766:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <lcd_time+0x80>)
 800176c:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 8001770:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001772:	185b      	adds	r3, r3, r1
void lcd_time() {
 8001774:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 8001776:	4c1c      	ldr	r4, [pc, #112]	; (80017e8 <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001778:	f142 0200 	adc.w	r2, r2, #0
 800177c:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 8001780:	f022 fb28 	bl	8023dd4 <localtime>
 8001784:	4684      	mov	ip, r0
 8001786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800178a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	4623      	mov	r3, r4
 8001794:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <lcd_time+0x88>)
 800179a:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 800179c:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <lcd_time+0x8c>)
 80017a2:	f024 fbed 	bl	8025f80 <strftime>
	setlcdtext("t0.txt", buffer);
 80017a6:	4912      	ldr	r1, [pc, #72]	; (80017f0 <lcd_time+0x8c>)
 80017a8:	4812      	ldr	r0, [pc, #72]	; (80017f4 <lcd_time+0x90>)
 80017aa:	f7ff ff1b 	bl	80015e4 <setlcdtext>

	if (gpslocked) {
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <lcd_time+0x94>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b12b      	cbz	r3, 80017c0 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80017b6:	b004      	add	sp, #16
 80017b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 80017bc:	f7ff bef8 	b.w	80015b0 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <lcd_time+0x9c>)
 80017c2:	4668      	mov	r0, sp
 80017c4:	490f      	ldr	r1, [pc, #60]	; (8001804 <lcd_time+0xa0>)
 80017c6:	7eda      	ldrb	r2, [r3, #27]
 80017c8:	f023 fdf2 	bl	80253b0 <siprintf>
		setlcdtext("t3.txt", str);
 80017cc:	4669      	mov	r1, sp
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <lcd_time+0xa4>)
 80017d0:	f7ff ff08 	bl	80015e4 <setlcdtext>
		writelcdcmd("vis t3,1");
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <lcd_time+0xa8>)
 80017d6:	f7ff feeb 	bl	80015b0 <writelcdcmd>
}
 80017da:	b004      	add	sp, #16
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	bf00      	nop
 80017e0:	20002ab8 	.word	0x20002ab8
 80017e4:	20001758 	.word	0x20001758
 80017e8:	20001b34 	.word	0x20001b34
 80017ec:	08029c4c 	.word	0x08029c4c
 80017f0:	20001580 	.word	0x20001580
 80017f4:	08029c58 	.word	0x08029c58
 80017f8:	20002db0 	.word	0x20002db0
 80017fc:	08029c60 	.word	0x08029c60
 8001800:	20002c04 	.word	0x20002c04
 8001804:	08029c6c 	.word	0x08029c6c
 8001808:	08029c7c 	.word	0x08029c7c
 800180c:	08029c84 	.word	0x08029c84

08001810 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001812:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <lcd_date+0x58>)
void lcd_date() {
 8001818:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 800181a:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 800181c:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 800181e:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <lcd_date+0x5c>)
 8001822:	f024 fbad 	bl	8025f80 <strftime>
	volatile int result = 0;
 8001826:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <lcd_date+0x5c>)
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <lcd_date+0x60>)
 800182c:	4911      	ldr	r1, [pc, #68]	; (8001874 <lcd_date+0x64>)
	volatile int result = 0;
 800182e:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001830:	a802      	add	r0, sp, #8
 8001832:	f023 fdbd 	bl	80253b0 <siprintf>
	strcpy(pkt, str);
 8001836:	a902      	add	r1, sp, #8
 8001838:	a81a      	add	r0, sp, #104	; 0x68
 800183a:	f023 fe4a 	bl	80254d2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <lcd_date+0x6c>)
	strcpy(pkt, str);
 8001842:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001844:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001846:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001848:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800184a:	b933      	cbnz	r3, 800185a <lcd_date+0x4a>
		return (lcd_puts(pkt));
 800184c:	a81a      	add	r0, sp, #104	; 0x68
 800184e:	f7ff fe39 	bl	80014c4 <lcd_puts>
	result = writelcdcmd(str);
 8001852:	9001      	str	r0, [sp, #4]
	return (result);
 8001854:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 8001856:	b032      	add	sp, #200	; 0xc8
 8001858:	bd10      	pop	{r4, pc}
		return (-1);
 800185a:	f04f 30ff 	mov.w	r0, #4294967295
 800185e:	e7f8      	b.n	8001852 <lcd_date+0x42>
 8001860:	20001b34 	.word	0x20001b34
 8001864:	200016b0 	.word	0x200016b0
 8001868:	08029c90 	.word	0x08029c90
 800186c:	20001580 	.word	0x20001580
 8001870:	08029ca0 	.word	0x08029ca0
 8001874:	08029c1c 	.word	0x08029c1c
 8001878:	08029b98 	.word	0x08029b98
 800187c:	200016c4 	.word	0x200016c4

08001880 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8001880:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8001882:	4c62      	ldr	r4, [pc, #392]	; (8001a0c <lcd_showvars+0x18c>)
void lcd_showvars() {
 8001884:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 8001886:	8823      	ldrh	r3, [r4, #0]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d81f      	bhi.n	80018cc <lcd_showvars+0x4c>
 800188c:	e8df f003 	tbb	[pc, r3]
 8001890:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8001894:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <lcd_showvars+0x190>)
 8001896:	495f      	ldr	r1, [pc, #380]	; (8001a14 <lcd_showvars+0x194>)
 8001898:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 800189c:	6808      	ldr	r0, [r1, #0]
 800189e:	9204      	str	r2, [sp, #16]
 80018a0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80018a4:	9203      	str	r2, [sp, #12]
 80018a6:	f242 722b 	movw	r2, #10027	; 0x272b
 80018aa:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80018ae:	230f      	movs	r3, #15
 80018b0:	e9cd 2000 	strd	r2, r0, [sp]
 80018b4:	9102      	str	r1, [sp, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	4957      	ldr	r1, [pc, #348]	; (8001a18 <lcd_showvars+0x198>)
 80018ba:	a806      	add	r0, sp, #24
 80018bc:	f023 fd78 	bl	80253b0 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 80018c0:	a906      	add	r1, sp, #24
 80018c2:	4856      	ldr	r0, [pc, #344]	; (8001a1c <lcd_showvars+0x19c>)
 80018c4:	f7ff fe8e 	bl	80015e4 <setlcdtext>
		toggle = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 80018cc:	b01f      	add	sp, #124	; 0x7c
 80018ce:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80018d0:	4d53      	ldr	r5, [pc, #332]	; (8001a20 <lcd_showvars+0x1a0>)
 80018d2:	a806      	add	r0, sp, #24
 80018d4:	4953      	ldr	r1, [pc, #332]	; (8001a24 <lcd_showvars+0x1a4>)
 80018d6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80018d8:	f023 fd6a 	bl	80253b0 <siprintf>
		setlcdtext("t4.txt", str);
 80018dc:	a906      	add	r1, sp, #24
 80018de:	4852      	ldr	r0, [pc, #328]	; (8001a28 <lcd_showvars+0x1a8>)
 80018e0:	f7ff fe80 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 80018e4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80018e6:	494f      	ldr	r1, [pc, #316]	; (8001a24 <lcd_showvars+0x1a4>)
 80018e8:	a806      	add	r0, sp, #24
 80018ea:	f023 fd61 	bl	80253b0 <siprintf>
		setlcdtext("t5.txt", str);
 80018ee:	a906      	add	r1, sp, #24
 80018f0:	484e      	ldr	r0, [pc, #312]	; (8001a2c <lcd_showvars+0x1ac>)
 80018f2:	f7ff fe77 	bl	80015e4 <setlcdtext>
		toggle = 3;
 80018f6:	2303      	movs	r3, #3
 80018f8:	8023      	strh	r3, [r4, #0]
}
 80018fa:	b01f      	add	sp, #124	; 0x7c
 80018fc:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80018fe:	4d48      	ldr	r5, [pc, #288]	; (8001a20 <lcd_showvars+0x1a0>)
 8001900:	a806      	add	r0, sp, #24
 8001902:	4948      	ldr	r1, [pc, #288]	; (8001a24 <lcd_showvars+0x1a4>)
 8001904:	7eea      	ldrb	r2, [r5, #27]
 8001906:	f023 fd53 	bl	80253b0 <siprintf>
		setlcdtext("t0.txt", str);
 800190a:	a906      	add	r1, sp, #24
 800190c:	4848      	ldr	r0, [pc, #288]	; (8001a30 <lcd_showvars+0x1b0>)
 800190e:	f7ff fe69 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001912:	6a2a      	ldr	r2, [r5, #32]
 8001914:	4943      	ldr	r1, [pc, #268]	; (8001a24 <lcd_showvars+0x1a4>)
 8001916:	a806      	add	r0, sp, #24
 8001918:	f023 fd4a 	bl	80253b0 <siprintf>
		setlcdtext("t1.txt", str);
 800191c:	a906      	add	r1, sp, #24
 800191e:	4845      	ldr	r0, [pc, #276]	; (8001a34 <lcd_showvars+0x1b4>)
 8001920:	f7ff fe60 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8001924:	69ea      	ldr	r2, [r5, #28]
 8001926:	493f      	ldr	r1, [pc, #252]	; (8001a24 <lcd_showvars+0x1a4>)
 8001928:	a806      	add	r0, sp, #24
 800192a:	f023 fd41 	bl	80253b0 <siprintf>
		setlcdtext("t2.txt", str);
 800192e:	a906      	add	r1, sp, #24
 8001930:	4841      	ldr	r0, [pc, #260]	; (8001a38 <lcd_showvars+0x1b8>)
 8001932:	f7ff fe57 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 8001936:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001938:	493a      	ldr	r1, [pc, #232]	; (8001a24 <lcd_showvars+0x1a4>)
 800193a:	a806      	add	r0, sp, #24
 800193c:	f023 fd38 	bl	80253b0 <siprintf>
		setlcdtext("t3.txt", str);
 8001940:	a906      	add	r1, sp, #24
 8001942:	483e      	ldr	r0, [pc, #248]	; (8001a3c <lcd_showvars+0x1bc>)
 8001944:	f7ff fe4e 	bl	80015e4 <setlcdtext>
		toggle = 2;
 8001948:	2302      	movs	r3, #2
 800194a:	8023      	strh	r3, [r4, #0]
}
 800194c:	b01f      	add	sp, #124	; 0x7c
 800194e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <lcd_showvars+0x1c0>)
 8001952:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 8001954:	4d32      	ldr	r5, [pc, #200]	; (8001a20 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	0e11      	lsrs	r1, r2, #24
 800195a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800195e:	e9cd 3100 	strd	r3, r1, [sp]
 8001962:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001966:	4937      	ldr	r1, [pc, #220]	; (8001a44 <lcd_showvars+0x1c4>)
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f023 fd21 	bl	80253b0 <siprintf>
		setlcdtext("t11.txt", str);
 800196e:	a906      	add	r1, sp, #24
 8001970:	4835      	ldr	r0, [pc, #212]	; (8001a48 <lcd_showvars+0x1c8>)
 8001972:	f7ff fe37 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 8001976:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 800197a:	492a      	ldr	r1, [pc, #168]	; (8001a24 <lcd_showvars+0x1a4>)
 800197c:	a806      	add	r0, sp, #24
 800197e:	b292      	uxth	r2, r2
 8001980:	f023 fd16 	bl	80253b0 <siprintf>
		setlcdtext("t10.txt", str);
 8001984:	a906      	add	r1, sp, #24
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <lcd_showvars+0x1cc>)
 8001988:	f7ff fe2c 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 800198c:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8001990:	4924      	ldr	r1, [pc, #144]	; (8001a24 <lcd_showvars+0x1a4>)
 8001992:	a806      	add	r0, sp, #24
 8001994:	b292      	uxth	r2, r2
 8001996:	f023 fd0b 	bl	80253b0 <siprintf>
		setlcdtext("t9.txt", str);
 800199a:	a906      	add	r1, sp, #24
 800199c:	482c      	ldr	r0, [pc, #176]	; (8001a50 <lcd_showvars+0x1d0>)
 800199e:	f7ff fe21 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <lcd_showvars+0x1d4>)
 80019a4:	491f      	ldr	r1, [pc, #124]	; (8001a24 <lcd_showvars+0x1a4>)
 80019a6:	a806      	add	r0, sp, #24
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80019ae:	f023 fcff 	bl	80253b0 <siprintf>
		setlcdtext("t8.txt", str);
 80019b2:	a906      	add	r1, sp, #24
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <lcd_showvars+0x1d8>)
 80019b6:	f7ff fe15 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <lcd_showvars+0x1dc>)
 80019bc:	4919      	ldr	r1, [pc, #100]	; (8001a24 <lcd_showvars+0x1a4>)
 80019be:	a806      	add	r0, sp, #24
 80019c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	bfb8      	it	lt
 80019c8:	4252      	neglt	r2, r2
 80019ca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80019ce:	f023 fcef 	bl	80253b0 <siprintf>
		setlcdtext("t7.txt", str);
 80019d2:	a906      	add	r1, sp, #24
 80019d4:	4822      	ldr	r0, [pc, #136]	; (8001a60 <lcd_showvars+0x1e0>)
 80019d6:	f7ff fe05 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <lcd_showvars+0x1e4>)
 80019dc:	4911      	ldr	r1, [pc, #68]	; (8001a24 <lcd_showvars+0x1a4>)
 80019de:	a806      	add	r0, sp, #24
 80019e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019e4:	f023 fce4 	bl	80253b0 <siprintf>
		setlcdtext("t6.txt", str);
 80019e8:	a906      	add	r1, sp, #24
 80019ea:	481f      	ldr	r0, [pc, #124]	; (8001a68 <lcd_showvars+0x1e8>)
 80019ec:	f7ff fdfa 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 80019f0:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80019f2:	490c      	ldr	r1, [pc, #48]	; (8001a24 <lcd_showvars+0x1a4>)
 80019f4:	a806      	add	r0, sp, #24
 80019f6:	f023 fcdb 	bl	80253b0 <siprintf>
		setlcdtext("t24.txt", str);
 80019fa:	a906      	add	r1, sp, #24
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <lcd_showvars+0x1ec>)
 80019fe:	f7ff fdf1 	bl	80015e4 <setlcdtext>
		toggle = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	8023      	strh	r3, [r4, #0]
}
 8001a06:	b01f      	add	sp, #124	; 0x7c
 8001a08:	bd30      	pop	{r4, r5, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20001b58 	.word	0x20001b58
 8001a10:	1ff0f000 	.word	0x1ff0f000
 8001a14:	20001d4c 	.word	0x20001d4c
 8001a18:	08029d08 	.word	0x08029d08
 8001a1c:	08029d34 	.word	0x08029d34
 8001a20:	20002c04 	.word	0x20002c04
 8001a24:	08029d6c 	.word	0x08029d6c
 8001a28:	08029cf8 	.word	0x08029cf8
 8001a2c:	08029d00 	.word	0x08029d00
 8001a30:	08029c58 	.word	0x08029c58
 8001a34:	08029ca0 	.word	0x08029ca0
 8001a38:	08029cf0 	.word	0x08029cf0
 8001a3c:	08029c7c 	.word	0x08029c7c
 8001a40:	20002a00 	.word	0x20002a00
 8001a44:	08029ca8 	.word	0x08029ca8
 8001a48:	08029cb8 	.word	0x08029cb8
 8001a4c:	08029cc0 	.word	0x08029cc0
 8001a50:	08029cc8 	.word	0x08029cc8
 8001a54:	200006f4 	.word	0x200006f4
 8001a58:	08029cd0 	.word	0x08029cd0
 8001a5c:	20000748 	.word	0x20000748
 8001a60:	08029cd8 	.word	0x08029cd8
 8001a64:	20002d38 	.word	0x20002d38
 8001a68:	08029ce0 	.word	0x08029ce0
 8001a6c:	08029ce8 	.word	0x08029ce8

08001a70 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8001a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 8001a74:	4931      	ldr	r1, [pc, #196]	; (8001b3c <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 8001a76:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8001a78:	4831      	ldr	r0, [pc, #196]	; (8001b40 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8001a7a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 8001a7e:	f7ff fdb1 	bl	80015e4 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 8001a82:	492e      	ldr	r1, [pc, #184]	; (8001b3c <lcd_trigcharts+0xcc>)
 8001a84:	482f      	ldr	r0, [pc, #188]	; (8001b44 <lcd_trigcharts+0xd4>)
 8001a86:	f7ff fdad 	bl	80015e4 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 8001a8a:	492f      	ldr	r1, [pc, #188]	; (8001b48 <lcd_trigcharts+0xd8>)
 8001a8c:	482f      	ldr	r0, [pc, #188]	; (8001b4c <lcd_trigcharts+0xdc>)
 8001a8e:	f7ff fda9 	bl	80015e4 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 8001a92:	492d      	ldr	r1, [pc, #180]	; (8001b48 <lcd_trigcharts+0xd8>)
 8001a94:	482e      	ldr	r0, [pc, #184]	; (8001b50 <lcd_trigcharts+0xe0>)
 8001a96:	f7ff fda5 	bl	80015e4 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <lcd_trigcharts+0xe4>)
 8001a9c:	492e      	ldr	r1, [pc, #184]	; (8001b58 <lcd_trigcharts+0xe8>)
 8001a9e:	4668      	mov	r0, sp
 8001aa0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001aa2:	f023 fc85 	bl	80253b0 <siprintf>
	setlcdtext("t0.txt", str);
 8001aa6:	4669      	mov	r1, sp
 8001aa8:	482c      	ldr	r0, [pc, #176]	; (8001b5c <lcd_trigcharts+0xec>)
 8001aaa:	f7ff fd9b 	bl	80015e4 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <lcd_trigcharts+0xf0>)
 8001ab0:	4929      	ldr	r1, [pc, #164]	; (8001b58 <lcd_trigcharts+0xe8>)
 8001ab2:	4668      	mov	r0, sp
 8001ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ab8:	4f2a      	ldr	r7, [pc, #168]	; (8001b64 <lcd_trigcharts+0xf4>)
 8001aba:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001abc:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001b80 <lcd_trigcharts+0x110>
 8001ac0:	4e29      	ldr	r6, [pc, #164]	; (8001b68 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001ac2:	bfb8      	it	lt
 8001ac4:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001ac6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001b84 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001aca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ace:	f023 fc6f 	bl	80253b0 <siprintf>
	setlcdtext("t2.txt", str);
 8001ad2:	4669      	mov	r1, sp
 8001ad4:	4825      	ldr	r0, [pc, #148]	; (8001b6c <lcd_trigcharts+0xfc>)
 8001ad6:	f7ff fd85 	bl	80015e4 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8001ada:	4825      	ldr	r0, [pc, #148]	; (8001b70 <lcd_trigcharts+0x100>)
 8001adc:	f7ff fd68 	bl	80015b0 <writelcdcmd>
	buffi = trigindex;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <lcd_trigcharts+0x104>)
 8001ae2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8001ae4:	e01c      	b.n	8001b20 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001ae6:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001aea:	f023 fc61 	bl	80253b0 <siprintf>
		writelcdcmd(str);
 8001aee:	4668      	mov	r0, sp
 8001af0:	f7ff fd5e 	bl	80015b0 <writelcdcmd>
		osDelay(15);
 8001af4:	200f      	movs	r0, #15
 8001af6:	f013 faf9 	bl	80150ec <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001afa:	f818 2004 	ldrb.w	r2, [r8, r4]
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <lcd_trigcharts+0x108>)
 8001b00:	4668      	mov	r0, sp
 8001b02:	f023 fc55 	bl	80253b0 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001b06:	3401      	adds	r4, #1
		writelcdcmd(str);
 8001b08:	4668      	mov	r0, sp
 8001b0a:	f7ff fd51 	bl	80015b0 <writelcdcmd>
		osDelay(15);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f013 faec 	bl	80150ec <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001b14:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001b18:	bfc8      	it	gt
 8001b1a:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001b1c:	3d01      	subs	r5, #1
 8001b1e:	d007      	beq.n	8001b30 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8001b20:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001b22:	4631      	mov	r1, r6
 8001b24:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d0dd      	beq.n	8001ae6 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001b2a:	b009      	add	sp, #36	; 0x24
 8001b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001b30:	4812      	ldr	r0, [pc, #72]	; (8001b7c <lcd_trigcharts+0x10c>)
 8001b32:	f7ff fd3d 	bl	80015b0 <writelcdcmd>
}
 8001b36:	b009      	add	sp, #36	; 0x24
 8001b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b3c:	08029d3c 	.word	0x08029d3c
 8001b40:	08029c7c 	.word	0x08029c7c
 8001b44:	08029d48 	.word	0x08029d48
 8001b48:	08029d50 	.word	0x08029d50
 8001b4c:	08029cf8 	.word	0x08029cf8
 8001b50:	08029ca0 	.word	0x08029ca0
 8001b54:	20002c04 	.word	0x20002c04
 8001b58:	08029d6c 	.word	0x08029d6c
 8001b5c:	08029c58 	.word	0x08029c58
 8001b60:	20000748 	.word	0x20000748
 8001b64:	20001940 	.word	0x20001940
 8001b68:	08029d64 	.word	0x08029d64
 8001b6c:	08029cf0 	.word	0x08029cf0
 8001b70:	08029d58 	.word	0x08029d58
 8001b74:	20001b5c 	.word	0x20001b5c
 8001b78:	08029d70 	.word	0x08029d70
 8001b7c:	08029d7c 	.word	0x08029d7c
 8001b80:	20001b60 	.word	0x20001b60
 8001b84:	20001760 	.word	0x20001760

08001b88 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8001b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001b8c:	493a      	ldr	r1, [pc, #232]	; (8001c78 <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 8001b8e:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001b90:	4d3a      	ldr	r5, [pc, #232]	; (8001c7c <lcd_trigplot+0xf4>)
 8001b92:	680b      	ldr	r3, [r1, #0]
 8001b94:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8001b96:	4e3a      	ldr	r6, [pc, #232]	; (8001c80 <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001b98:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001b9a:	483a      	ldr	r0, [pc, #232]	; (8001c84 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 8001b9c:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8001ba0:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8001ba2:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8001ba6:	4c38      	ldr	r4, [pc, #224]	; (8001c88 <lcd_trigplot+0x100>)
 8001ba8:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001baa:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8001bac:	4f37      	ldr	r7, [pc, #220]	; (8001c8c <lcd_trigplot+0x104>)
 8001bae:	bfa8      	it	ge
 8001bb0:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8001bb2:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8001bb4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001cc4 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 8001bb8:	bfb8      	it	lt
 8001bba:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8001bbc:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8001bc0:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8001bc6:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8001bc8:	2b77      	cmp	r3, #119	; 0x77
 8001bca:	bfa8      	it	ge
 8001bcc:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001bce:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8001bd0:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001bd4:	d00c      	beq.n	8001bf0 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8001bd6:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8001bd8:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001bdc:	da03      	bge.n	8001be6 <lcd_trigplot+0x5e>
	trigindex++;
 8001bde:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8001be0:	b008      	add	sp, #32
 8001be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	6023      	str	r3, [r4, #0]
}
 8001bea:	b008      	add	sp, #32
 8001bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8001bf0:	4927      	ldr	r1, [pc, #156]	; (8001c90 <lcd_trigplot+0x108>)
 8001bf2:	4828      	ldr	r0, [pc, #160]	; (8001c94 <lcd_trigplot+0x10c>)
 8001bf4:	f7ff fcf6 	bl	80015e4 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 8001bf8:	4925      	ldr	r1, [pc, #148]	; (8001c90 <lcd_trigplot+0x108>)
 8001bfa:	4827      	ldr	r0, [pc, #156]	; (8001c98 <lcd_trigplot+0x110>)
 8001bfc:	f7ff fcf2 	bl	80015e4 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8001c00:	4926      	ldr	r1, [pc, #152]	; (8001c9c <lcd_trigplot+0x114>)
 8001c02:	4827      	ldr	r0, [pc, #156]	; (8001ca0 <lcd_trigplot+0x118>)
 8001c04:	f7ff fcee 	bl	80015e4 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 8001c08:	4924      	ldr	r1, [pc, #144]	; (8001c9c <lcd_trigplot+0x114>)
 8001c0a:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <lcd_trigplot+0x11c>)
 8001c0c:	f7ff fcea 	bl	80015e4 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	4925      	ldr	r1, [pc, #148]	; (8001ca8 <lcd_trigplot+0x120>)
 8001c14:	4668      	mov	r0, sp
 8001c16:	5cfa      	ldrb	r2, [r7, r3]
 8001c18:	f023 fbca 	bl	80253b0 <siprintf>
		writelcdcmd(str);
 8001c1c:	4668      	mov	r0, sp
 8001c1e:	f7ff fcc7 	bl	80015b0 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	4921      	ldr	r1, [pc, #132]	; (8001cac <lcd_trigplot+0x124>)
 8001c26:	4668      	mov	r0, sp
 8001c28:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001c2c:	f023 fbc0 	bl	80253b0 <siprintf>
		writelcdcmd(str);
 8001c30:	4668      	mov	r0, sp
 8001c32:	f7ff fcbd 	bl	80015b0 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001c36:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001c38:	491d      	ldr	r1, [pc, #116]	; (8001cb0 <lcd_trigplot+0x128>)
 8001c3a:	4668      	mov	r0, sp
 8001c3c:	f023 fbb8 	bl	80253b0 <siprintf>
		setlcdtext("t0.txt", str);
 8001c40:	4669      	mov	r1, sp
 8001c42:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <lcd_trigplot+0x12c>)
 8001c44:	f7ff fcce 	bl	80015e4 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001c48:	f9b6 2000 	ldrsh.w	r2, [r6]
 8001c4c:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <lcd_trigplot+0x128>)
 8001c4e:	4668      	mov	r0, sp
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	bfb8      	it	lt
 8001c54:	4252      	neglt	r2, r2
 8001c56:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001c5a:	f023 fba9 	bl	80253b0 <siprintf>
		setlcdtext("t2.txt", str);
 8001c5e:	4669      	mov	r1, sp
 8001c60:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <lcd_trigplot+0x130>)
 8001c62:	f7ff fcbf 	bl	80015e4 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001c66:	4815      	ldr	r0, [pc, #84]	; (8001cbc <lcd_trigplot+0x134>)
 8001c68:	f7ff fca2 	bl	80015b0 <writelcdcmd>
		writelcdcmd("vis t4,1");
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <lcd_trigplot+0x138>)
 8001c6e:	f7ff fc9f 	bl	80015b0 <writelcdcmd>
	trigindex++;
 8001c72:	6821      	ldr	r1, [r4, #0]
 8001c74:	e7af      	b.n	8001bd6 <lcd_trigplot+0x4e>
 8001c76:	bf00      	nop
 8001c78:	200016b8 	.word	0x200016b8
 8001c7c:	20002c04 	.word	0x20002c04
 8001c80:	20000748 	.word	0x20000748
 8001c84:	20001940 	.word	0x20001940
 8001c88:	20001b5c 	.word	0x20001b5c
 8001c8c:	20001b60 	.word	0x20001b60
 8001c90:	08029d3c 	.word	0x08029d3c
 8001c94:	08029c7c 	.word	0x08029c7c
 8001c98:	08029d48 	.word	0x08029d48
 8001c9c:	08029d50 	.word	0x08029d50
 8001ca0:	08029cf8 	.word	0x08029cf8
 8001ca4:	08029ca0 	.word	0x08029ca0
 8001ca8:	08029d64 	.word	0x08029d64
 8001cac:	08029d70 	.word	0x08029d70
 8001cb0:	08029d6c 	.word	0x08029d6c
 8001cb4:	08029c58 	.word	0x08029c58
 8001cb8:	08029cf0 	.word	0x08029cf0
 8001cbc:	08029c84 	.word	0x08029c84
 8001cc0:	08029d8c 	.word	0x08029d8c
 8001cc4:	20001760 	.word	0x20001760

08001cc8 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8001cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 8001ccc:	4920      	ldr	r1, [pc, #128]	; (8001d50 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 8001cce:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8001cd0:	4820      	ldr	r0, [pc, #128]	; (8001d54 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8001cd2:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8001cd6:	f7ff fc85 	bl	80015e4 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 8001cda:	491d      	ldr	r1, [pc, #116]	; (8001d50 <lcd_presscharts+0x88>)
 8001cdc:	481e      	ldr	r0, [pc, #120]	; (8001d58 <lcd_presscharts+0x90>)
 8001cde:	f7ff fc81 	bl	80015e4 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <lcd_presscharts+0x94>)
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <lcd_presscharts+0x98>)
 8001ce6:	4668      	mov	r0, sp
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	491d      	ldr	r1, [pc, #116]	; (8001d64 <lcd_presscharts+0x9c>)
 8001cf0:	f023 fb5e 	bl	80253b0 <siprintf>
	setlcdtext("t0.txt", str);
 8001cf4:	4669      	mov	r1, sp
 8001cf6:	481c      	ldr	r0, [pc, #112]	; (8001d68 <lcd_presscharts+0xa0>)
 8001cf8:	f7ff fc74 	bl	80015e4 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 8001cfc:	481b      	ldr	r0, [pc, #108]	; (8001d6c <lcd_presscharts+0xa4>)
 8001cfe:	f7ff fc57 	bl	80015b0 <writelcdcmd>
	buffi = pressindex;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <lcd_presscharts+0xa8>)
 8001d04:	4f1b      	ldr	r7, [pc, #108]	; (8001d74 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001d06:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001d80 <lcd_presscharts+0xb8>
	buffi = pressindex;
 8001d0a:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001d0c:	4e1a      	ldr	r6, [pc, #104]	; (8001d78 <lcd_presscharts+0xb0>)
 8001d0e:	e010      	b.n	8001d32 <lcd_presscharts+0x6a>
 8001d10:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001d14:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001d16:	f023 fb4b 	bl	80253b0 <siprintf>
		writelcdcmd(str);
 8001d1a:	4668      	mov	r0, sp
 8001d1c:	f7ff fc48 	bl	80015b0 <writelcdcmd>
		osDelay(15);
 8001d20:	200f      	movs	r0, #15
 8001d22:	f013 f9e3 	bl	80150ec <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001d26:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001d2a:	bfc8      	it	gt
 8001d2c:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001d2e:	3d01      	subs	r5, #1
 8001d30:	d007      	beq.n	8001d42 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8001d32:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001d34:	4631      	mov	r1, r6
 8001d36:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d0e9      	beq.n	8001d10 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001d3c:	b008      	add	sp, #32
 8001d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <lcd_presscharts+0xb4>)
 8001d44:	f7ff fc34 	bl	80015b0 <writelcdcmd>
}
 8001d48:	b008      	add	sp, #32
 8001d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d4e:	bf00      	nop
 8001d50:	08029d98 	.word	0x08029d98
 8001d54:	08029c7c 	.word	0x08029c7c
 8001d58:	08029d48 	.word	0x08029d48
 8001d5c:	20002d3c 	.word	0x20002d3c
 8001d60:	20002d40 	.word	0x20002d40
 8001d64:	08029da4 	.word	0x08029da4
 8001d68:	08029c58 	.word	0x08029c58
 8001d6c:	08029d58 	.word	0x08029d58
 8001d70:	20001944 	.word	0x20001944
 8001d74:	20001940 	.word	0x20001940
 8001d78:	08029d64 	.word	0x08029d64
 8001d7c:	08029d7c 	.word	0x08029d7c
 8001d80:	20001948 	.word	0x20001948

08001d84 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8001d84:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001d86:	4d2c      	ldr	r5, [pc, #176]	; (8001e38 <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 8001d88:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001d8a:	4c2c      	ldr	r4, [pc, #176]	; (8001e3c <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 8001d8c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001d90:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001d92:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001d94:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8001d96:	482a      	ldr	r0, [pc, #168]	; (8001e40 <lcd_pressplot+0xbc>)
	p = pressure;
 8001d98:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001d9a:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001d9c:	9b02      	ldr	r3, [sp, #8]
 8001d9e:	fb06 3301 	mla	r3, r6, r1, r3
 8001da2:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 8001da4:	9b01      	ldr	r3, [sp, #4]
 8001da6:	4283      	cmp	r3, r0
 8001da8:	dc01      	bgt.n	8001dae <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <lcd_pressplot+0xc0>)
 8001dac:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 8001dae:	9a01      	ldr	r2, [sp, #4]
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <lcd_pressplot+0xc4>)
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dd00      	ble.n	8001db8 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8001db6:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001db8:	9901      	ldr	r1, [sp, #4]
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8001dbe:	440b      	add	r3, r1
 8001dc0:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001dc2:	9b01      	ldr	r3, [sp, #4]
 8001dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc8:	17db      	asrs	r3, r3, #31
 8001dca:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001dce:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001dd0:	9b03      	ldr	r3, [sp, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da01      	bge.n	8001dda <lcd_pressplot+0x56>
		val = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	2bef      	cmp	r3, #239	; 0xef
 8001dde:	dd01      	ble.n	8001de4 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8001de0:	23ef      	movs	r3, #239	; 0xef
 8001de2:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001de4:	491b      	ldr	r1, [pc, #108]	; (8001e54 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8001de6:	9a03      	ldr	r2, [sp, #12]
 8001de8:	4e1b      	ldr	r6, [pc, #108]	; (8001e58 <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001dea:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001dec:	6833      	ldr	r3, [r6, #0]
 8001dee:	481b      	ldr	r0, [pc, #108]	; (8001e5c <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001df0:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001df2:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001df4:	d007      	beq.n	8001e06 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001df6:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001df8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001dfc:	bfa8      	it	ge
 8001dfe:	2300      	movge	r3, #0
 8001e00:	6033      	str	r3, [r6, #0]
}
 8001e02:	b00c      	add	sp, #48	; 0x30
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4915      	ldr	r1, [pc, #84]	; (8001e60 <lcd_pressplot+0xdc>)
 8001e0a:	a804      	add	r0, sp, #16
 8001e0c:	f023 fad0 	bl	80253b0 <siprintf>
		writelcdcmd(str);
 8001e10:	a804      	add	r0, sp, #16
 8001e12:	f7ff fbcd 	bl	80015b0 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001e16:	682b      	ldr	r3, [r5, #0]
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	a804      	add	r0, sp, #16
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	4911      	ldr	r1, [pc, #68]	; (8001e64 <lcd_pressplot+0xe0>)
 8001e20:	f023 fac6 	bl	80253b0 <siprintf>
		setlcdtext("t0.txt", str);
 8001e24:	a904      	add	r1, sp, #16
 8001e26:	4810      	ldr	r0, [pc, #64]	; (8001e68 <lcd_pressplot+0xe4>)
 8001e28:	f7ff fbdc 	bl	80015e4 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001e2c:	480f      	ldr	r0, [pc, #60]	; (8001e6c <lcd_pressplot+0xe8>)
 8001e2e:	f7ff fbbf 	bl	80015b0 <writelcdcmd>
	pressindex++;
 8001e32:	6833      	ldr	r3, [r6, #0]
 8001e34:	e7df      	b.n	8001df6 <lcd_pressplot+0x72>
 8001e36:	bf00      	nop
 8001e38:	20002d3c 	.word	0x20002d3c
 8001e3c:	20002d40 	.word	0x20002d40
 8001e40:	00016b47 	.word	0x00016b47
 8001e44:	00016b48 	.word	0x00016b48
 8001e48:	00019258 	.word	0x00019258
 8001e4c:	fffe94b8 	.word	0xfffe94b8
 8001e50:	63e7063f 	.word	0x63e7063f
 8001e54:	20001940 	.word	0x20001940
 8001e58:	20001944 	.word	0x20001944
 8001e5c:	20001948 	.word	0x20001948
 8001e60:	08029d64 	.word	0x08029d64
 8001e64:	08029da4 	.word	0x08029da4
 8001e68:	08029c58 	.word	0x08029c58
 8001e6c:	08029c84 	.word	0x08029c84

08001e70 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8001e70:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001e72:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8001e74:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001e76:	f013 f939 	bl	80150ec <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <lcd_controls+0x48>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d002      	beq.n	8001e88 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8001e82:	b00d      	add	sp, #52	; 0x34
 8001e84:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <lcd_controls+0x4c>)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <lcd_controls+0x50>)
 8001e8c:	f7ff fbaa 	bl	80015e4 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <lcd_controls+0x54>)
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <lcd_controls+0x58>)
 8001e94:	f7ff fba6 	bl	80015e4 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <lcd_controls+0x5c>)
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <lcd_controls+0x60>)
 8001e9c:	f7ff fba2 	bl	80015e4 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <lcd_controls+0x64>)
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <lcd_controls+0x68>)
 8001ea4:	4668      	mov	r0, sp
 8001ea6:	f023 fa83 	bl	80253b0 <siprintf>
		setlcdtext("t3.txt", str);
 8001eaa:	4669      	mov	r1, sp
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <lcd_controls+0x6c>)
 8001eae:	f7ff fb99 	bl	80015e4 <setlcdtext>
}
 8001eb2:	b00d      	add	sp, #52	; 0x34
 8001eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eb8:	20001940 	.word	0x20001940
 8001ebc:	08029db0 	.word	0x08029db0
 8001ec0:	08029c58 	.word	0x08029c58
 8001ec4:	08029db8 	.word	0x08029db8
 8001ec8:	08029ca0 	.word	0x08029ca0
 8001ecc:	08029dc0 	.word	0x08029dc0
 8001ed0:	08029cf0 	.word	0x08029cf0
 8001ed4:	20002e18 	.word	0x20002e18
 8001ed8:	08029dd0 	.word	0x08029dd0
 8001edc:	08029c7c 	.word	0x08029c7c

08001ee0 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001ee0:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001ee2:	4c1b      	ldr	r4, [pc, #108]	; (8001f50 <lcd_pagechange+0x70>)
 8001ee4:	7823      	ldrb	r3, [r4, #0]
 8001ee6:	4283      	cmp	r3, r0
 8001ee8:	d016      	beq.n	8001f18 <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8001eea:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001eec:	2805      	cmp	r0, #5
 8001eee:	d82a      	bhi.n	8001f46 <lcd_pagechange+0x66>
 8001ef0:	e8df f000 	tbb	[pc, r0]
 8001ef4:	241f1a03 	.word	0x241f1a03
 8001ef8:	1215      	.short	0x1215
		lcd_time();
 8001efa:	f7ff fc33 	bl	8001764 <lcd_time>
	lastday = timeinfo.tm_yday;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <lcd_pagechange+0x74>)
 8001f00:	4915      	ldr	r1, [pc, #84]	; (8001f58 <lcd_pagechange+0x78>)
 8001f02:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001f04:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8001f06:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001f08:	2128      	movs	r1, #40	; 0x28
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <lcd_pagechange+0x80>)
 8001f0c:	f024 f838 	bl	8025f80 <strftime>
	setlcdtext("t1.txt", buffer);
 8001f10:	4913      	ldr	r1, [pc, #76]	; (8001f60 <lcd_pagechange+0x80>)
 8001f12:	4814      	ldr	r0, [pc, #80]	; (8001f64 <lcd_pagechange+0x84>)
 8001f14:	f7ff fb66 	bl	80015e4 <setlcdtext>
	return (our_currentpage);
 8001f18:	7820      	ldrb	r0, [r4, #0]
 8001f1a:	b2c0      	uxtb	r0, r0
}
 8001f1c:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001f1e:	f7ff ffa7 	bl	8001e70 <lcd_controls>
	return (our_currentpage);
 8001f22:	7820      	ldrb	r0, [r4, #0]
 8001f24:	b2c0      	uxtb	r0, r0
}
 8001f26:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001f28:	f7ff fcaa 	bl	8001880 <lcd_showvars>
	return (our_currentpage);
 8001f2c:	7820      	ldrb	r0, [r4, #0]
 8001f2e:	b2c0      	uxtb	r0, r0
}
 8001f30:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001f32:	f7ff fd9d 	bl	8001a70 <lcd_trigcharts>
	return (our_currentpage);
 8001f36:	7820      	ldrb	r0, [r4, #0]
 8001f38:	b2c0      	uxtb	r0, r0
}
 8001f3a:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001f3c:	f7ff fec4 	bl	8001cc8 <lcd_presscharts>
	return (our_currentpage);
 8001f40:	7820      	ldrb	r0, [r4, #0]
 8001f42:	b2c0      	uxtb	r0, r0
}
 8001f44:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <lcd_pagechange+0x88>)
 8001f48:	f023 f8dc 	bl	8025104 <puts>
		break;
 8001f4c:	e7e4      	b.n	8001f18 <lcd_pagechange+0x38>
 8001f4e:	bf00      	nop
 8001f50:	20001940 	.word	0x20001940
 8001f54:	20001b34 	.word	0x20001b34
 8001f58:	200016b0 	.word	0x200016b0
 8001f5c:	08029c90 	.word	0x08029c90
 8001f60:	20001580 	.word	0x20001580
 8001f64:	08029ca0 	.word	0x08029ca0
 8001f68:	08029de8 	.word	0x08029de8

08001f6c <lcd_event_process>:
int lcd_event_process(void) {
 8001f6c:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001f6e:	4c8f      	ldr	r4, [pc, #572]	; (80021ac <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8001f70:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001f72:	2120      	movs	r1, #32
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fb8b 	bl	8001690 <isnexpkt>
 8001f7a:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001f7c:	9b01      	ldr	r3, [sp, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dd47      	ble.n	8002012 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8001f82:	7821      	ldrb	r1, [r4, #0]
 8001f84:	4b8a      	ldr	r3, [pc, #552]	; (80021b0 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001f86:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001f88:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001f8a:	d925      	bls.n	8001fd8 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8001f8c:	2965      	cmp	r1, #101	; 0x65
 8001f8e:	d067      	beq.n	8002060 <lcd_event_process+0xf4>
 8001f90:	2966      	cmp	r1, #102	; 0x66
 8001f92:	d046      	beq.n	8002022 <lcd_event_process+0xb6>
 8001f94:	2924      	cmp	r1, #36	; 0x24
 8001f96:	d03f      	beq.n	8002018 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8001f98:	4886      	ldr	r0, [pc, #536]	; (80021b4 <lcd_event_process+0x248>)
 8001f9a:	f023 f817 	bl	8024fcc <iprintf>
				i = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001fa2:	9b00      	ldr	r3, [sp, #0]
 8001fa4:	5ce3      	ldrb	r3, [r4, r3]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d00f      	beq.n	8001fca <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8001faa:	4d83      	ldr	r5, [pc, #524]	; (80021b8 <lcd_event_process+0x24c>)
 8001fac:	e009      	b.n	8001fc2 <lcd_event_process+0x56>
 8001fae:	9b00      	ldr	r3, [sp, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	5ce1      	ldrb	r1, [r4, r3]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	f023 f809 	bl	8024fcc <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001fba:	9b00      	ldr	r3, [sp, #0]
 8001fbc:	5ce3      	ldrb	r3, [r4, r3]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d003      	beq.n	8001fca <lcd_event_process+0x5e>
 8001fc2:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001fc4:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001fc6:	2b1f      	cmp	r3, #31
 8001fc8:	d9f1      	bls.n	8001fae <lcd_event_process+0x42>
				printf("\n");
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f023 f816 	bl	8024ffc <putchar>
				return (-1);
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001fd4:	b003      	add	sp, #12
 8001fd6:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001fd8:	2901      	cmp	r1, #1
 8001fda:	d0fb      	beq.n	8001fd4 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8001fdc:	4877      	ldr	r0, [pc, #476]	; (80021bc <lcd_event_process+0x250>)
 8001fde:	f022 fff5 	bl	8024fcc <iprintf>
				switch (eventbuffer[0]) {
 8001fe2:	7821      	ldrb	r1, [r4, #0]
 8001fe4:	2924      	cmp	r1, #36	; 0x24
 8001fe6:	d846      	bhi.n	8002076 <lcd_event_process+0x10a>
 8001fe8:	e8df f001 	tbb	[pc, r1]
 8001fec:	4582878c 	.word	0x4582878c
 8001ff0:	45454545 	.word	0x45454545
 8001ff4:	45454545 	.word	0x45454545
 8001ff8:	45454545 	.word	0x45454545
 8001ffc:	457a4545 	.word	0x457a4545
 8002000:	45454545 	.word	0x45454545
 8002004:	45724545 	.word	0x45724545
 8002008:	4566456c 	.word	0x4566456c
 800200c:	5a454560 	.word	0x5a454560
 8002010:	54          	.byte	0x54
 8002011:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8002012:	9801      	ldr	r0, [sp, #4]
}
 8002014:	b003      	add	sp, #12
 8002016:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8002018:	4869      	ldr	r0, [pc, #420]	; (80021c0 <lcd_event_process+0x254>)
 800201a:	f023 f873 	bl	8025104 <puts>
				return (1);
 800201e:	2001      	movs	r0, #1
 8002020:	e7d8      	b.n	8001fd4 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8002022:	4968      	ldr	r1, [pc, #416]	; (80021c4 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8002024:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 800202a:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 800202c:	4867      	ldr	r0, [pc, #412]	; (80021cc <lcd_event_process+0x260>)
 800202e:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8002030:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002032:	bf28      	it	cs
 8002034:	2163      	movcs	r1, #99	; 0x63
 8002036:	f7ff fafb 	bl	8001630 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 800203a:	7860      	ldrb	r0, [r4, #1]
 800203c:	f7ff ff50 	bl	8001ee0 <lcd_pagechange>
 8002040:	2800      	cmp	r0, #0
 8002042:	db04      	blt.n	800204e <lcd_event_process+0xe2>
 8002044:	7860      	ldrb	r0, [r4, #1]
 8002046:	f7ff ff4b 	bl	8001ee0 <lcd_pagechange>
 800204a:	2805      	cmp	r0, #5
 800204c:	dd19      	ble.n	8002082 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800204e:	7860      	ldrb	r0, [r4, #1]
 8002050:	f7ff ff46 	bl	8001ee0 <lcd_pagechange>
 8002054:	4601      	mov	r1, r0
 8002056:	485e      	ldr	r0, [pc, #376]	; (80021d0 <lcd_event_process+0x264>)
 8002058:	f022 ffb8 	bl	8024fcc <iprintf>
			return (0);
 800205c:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 800205e:	e7b9      	b.n	8001fd4 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8002060:	78e3      	ldrb	r3, [r4, #3]
 8002062:	78a2      	ldrb	r2, [r4, #2]
 8002064:	7861      	ldrb	r1, [r4, #1]
 8002066:	485b      	ldr	r0, [pc, #364]	; (80021d4 <lcd_event_process+0x268>)
 8002068:	f022 ffb0 	bl	8024fcc <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 800206c:	7863      	ldrb	r3, [r4, #1]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d04e      	beq.n	8002110 <lcd_event_process+0x1a4>
			return (0);
 8002072:	2000      	movs	r0, #0
 8002074:	e7ae      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8002076:	4858      	ldr	r0, [pc, #352]	; (80021d8 <lcd_event_process+0x26c>)
 8002078:	f022 ffa8 	bl	8024fcc <iprintf>
				return (-1);		// some kindof error
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002080:	e7a8      	b.n	8001fd4 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002082:	7860      	ldrb	r0, [r4, #1]
 8002084:	f7ff ff2c 	bl	8001ee0 <lcd_pagechange>
 8002088:	4603      	mov	r3, r0
 800208a:	4a54      	ldr	r2, [pc, #336]	; (80021dc <lcd_event_process+0x270>)
			return (0);
 800208c:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 800208e:	b2db      	uxtb	r3, r3
 8002090:	7013      	strb	r3, [r2, #0]
 8002092:	e79f      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8002094:	4852      	ldr	r0, [pc, #328]	; (80021e0 <lcd_event_process+0x274>)
 8002096:	f023 f835 	bl	8025104 <puts>
				return (-1);		// some kindof error
 800209a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800209e:	e799      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 80020a0:	4850      	ldr	r0, [pc, #320]	; (80021e4 <lcd_event_process+0x278>)
 80020a2:	f023 f82f 	bl	8025104 <puts>
				return (-1);		// some kindof error
 80020a6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020aa:	e793      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 80020ac:	484e      	ldr	r0, [pc, #312]	; (80021e8 <lcd_event_process+0x27c>)
 80020ae:	f023 f829 	bl	8025104 <puts>
				return (-1);		// some kindof error
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020b6:	e78d      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 80020b8:	484c      	ldr	r0, [pc, #304]	; (80021ec <lcd_event_process+0x280>)
 80020ba:	f023 f823 	bl	8025104 <puts>
				return (-1);		// some kindof error
 80020be:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020c2:	e787      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 80020c4:	484a      	ldr	r0, [pc, #296]	; (80021f0 <lcd_event_process+0x284>)
 80020c6:	f023 f81d 	bl	8025104 <puts>
				return (-1);		// some kindof error
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020ce:	e781      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 80020d0:	4848      	ldr	r0, [pc, #288]	; (80021f4 <lcd_event_process+0x288>)
 80020d2:	f023 f817 	bl	8025104 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 80020d6:	f000 f961 	bl	800239c <getlcdpage>
				return (-1);		// some kindof error
 80020da:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020de:	e779      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 80020e0:	4845      	ldr	r0, [pc, #276]	; (80021f8 <lcd_event_process+0x28c>)
 80020e2:	f023 f80f 	bl	8025104 <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 80020e6:	f000 f959 	bl	800239c <getlcdpage>
				return (-1);		// some kindof error
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80020ee:	e771      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 80020f0:	4842      	ldr	r0, [pc, #264]	; (80021fc <lcd_event_process+0x290>)
 80020f2:	f023 f807 	bl	8025104 <puts>
					return (0);
 80020f6:	2000      	movs	r0, #0
 80020f8:	e76c      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Successful execution\n");
 80020fa:	4841      	ldr	r0, [pc, #260]	; (8002200 <lcd_event_process+0x294>)
 80020fc:	f023 f802 	bl	8025104 <puts>
					return (0);
 8002100:	2000      	movs	r0, #0
 8002102:	e767      	b.n	8001fd4 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8002104:	483f      	ldr	r0, [pc, #252]	; (8002204 <lcd_event_process+0x298>)
 8002106:	f022 fffd 	bl	8025104 <puts>
				return (-1);		// some kindof error
 800210a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800210e:	e761      	b.n	8001fd4 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002110:	78a3      	ldrb	r3, [r4, #2]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d012      	beq.n	800213c <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002116:	2b08      	cmp	r3, #8
 8002118:	d039      	beq.n	800218e <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800211a:	2b02      	cmp	r3, #2
 800211c:	d026      	beq.n	800216c <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 800211e:	2b03      	cmp	r3, #3
 8002120:	d1a7      	bne.n	8002072 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8002122:	78e3      	ldrb	r3, [r4, #3]
 8002124:	4a38      	ldr	r2, [pc, #224]	; (8002208 <lcd_event_process+0x29c>)
 8002126:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 800212a:	4838      	ldr	r0, [pc, #224]	; (800220c <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8002134:	f022 ffe6 	bl	8025104 <puts>
			return (0);
 8002138:	2000      	movs	r0, #0
 800213a:	e74b      	b.n	8001fd4 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <lcd_event_process+0x258>)
 800213e:	78e2      	ldrb	r2, [r4, #3]
 8002140:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2a0d      	cmp	r2, #13
 8002146:	dc01      	bgt.n	800214c <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 8002148:	220e      	movs	r2, #14
 800214a:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 800214c:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 800214e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8002154:	2963      	cmp	r1, #99	; 0x63
 8002156:	481d      	ldr	r0, [pc, #116]	; (80021cc <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 8002158:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 800215a:	bf28      	it	cs
 800215c:	2163      	movcs	r1, #99	; 0x63
 800215e:	f7ff fa67 	bl	8001630 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002162:	7863      	ldrb	r3, [r4, #1]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d184      	bne.n	8002072 <lcd_event_process+0x106>
 8002168:	78a3      	ldrb	r3, [r4, #2]
 800216a:	e7d4      	b.n	8002116 <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 800216c:	78e3      	ldrb	r3, [r4, #3]
 800216e:	4a28      	ldr	r2, [pc, #160]	; (8002210 <lcd_event_process+0x2a4>)
 8002170:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002174:	4827      	ldr	r0, [pc, #156]	; (8002214 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 800217e:	f022 ffc1 	bl	8025104 <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002182:	7863      	ldrb	r3, [r4, #1]
 8002184:	2b04      	cmp	r3, #4
 8002186:	f47f af74 	bne.w	8002072 <lcd_event_process+0x106>
 800218a:	78a3      	ldrb	r3, [r4, #2]
 800218c:	e7c7      	b.n	800211e <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 800218e:	4822      	ldr	r0, [pc, #136]	; (8002218 <lcd_event_process+0x2ac>)
 8002190:	f022 ffb8 	bl	8025104 <puts>
					osDelay(100);
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f012 ffa9 	bl	80150ec <osDelay>
					rebootme();
 800219a:	f000 fa93 	bl	80026c4 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800219e:	7863      	ldrb	r3, [r4, #1]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	f47f af66 	bne.w	8002072 <lcd_event_process+0x106>
 80021a6:	78a3      	ldrb	r3, [r4, #2]
 80021a8:	e7b7      	b.n	800211a <lcd_event_process+0x1ae>
 80021aa:	bf00      	nop
 80021ac:	20001688 	.word	0x20001688
 80021b0:	2000174c 	.word	0x2000174c
 80021b4:	08029fac 	.word	0x08029fac
 80021b8:	08029fe0 	.word	0x08029fe0
 80021bc:	08029dfc 	.word	0x08029dfc
 80021c0:	08029f0c 	.word	0x08029f0c
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	20000004 	.word	0x20000004
 80021cc:	08029c44 	.word	0x08029c44
 80021d0:	08029f7c 	.word	0x08029f7c
 80021d4:	08029f24 	.word	0x08029f24
 80021d8:	08029ef4 	.word	0x08029ef4
 80021dc:	200016bc 	.word	0x200016bc
 80021e0:	08029e4c 	.word	0x08029e4c
 80021e4:	08029e34 	.word	0x08029e34
 80021e8:	08029e80 	.word	0x08029e80
 80021ec:	08029e60 	.word	0x08029e60
 80021f0:	08029e94 	.word	0x08029e94
 80021f4:	08029e20 	.word	0x08029e20
 80021f8:	08029eb0 	.word	0x08029eb0
 80021fc:	08029edc 	.word	0x08029edc
 8002200:	08029ec4 	.word	0x08029ec4
 8002204:	08029e10 	.word	0x08029e10
 8002208:	20000270 	.word	0x20000270
 800220c:	08029f70 	.word	0x08029f70
 8002210:	20000276 	.word	0x20000276
 8002214:	08029f64 	.word	0x08029f64
 8002218:	08029f54 	.word	0x08029f54

0800221c <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 800221c:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 800221e:	4d50      	ldr	r5, [pc, #320]	; (8002360 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8002220:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d06d      	beq.n	8002304 <processnex+0xe8>
 8002228:	2b08      	cmp	r3, #8
 800222a:	d066      	beq.n	80022fa <processnex+0xde>
 800222c:	2b02      	cmp	r3, #2
 800222e:	d04b      	beq.n	80022c8 <processnex+0xac>
 8002230:	4c4c      	ldr	r4, [pc, #304]	; (8002364 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002232:	2600      	movs	r6, #0
 8002234:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d04e      	beq.n	80022da <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d07f      	beq.n	8002342 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d069      	beq.n	800231c <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 8002248:	f7ff f974 	bl	8001534 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 800224c:	f7ff fe8e 	bl	8001f6c <lcd_event_process>
	if (dimtimer > 50000) {
 8002250:	4a45      	ldr	r2, [pc, #276]	; (8002368 <processnex+0x14c>)
 8002252:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002256:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	428b      	cmp	r3, r1
 800225c:	d903      	bls.n	8002266 <processnex+0x4a>
		dimtimer--;
 800225e:	3b01      	subs	r3, #1
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	b022      	add	sp, #136	; 0x88
 8002264:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002266:	4841      	ldr	r0, [pc, #260]	; (800236c <processnex+0x150>)
		dimtimer = 60000;
 8002268:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800226c:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 800226e:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002270:	6804      	ldr	r4, [r0, #0]
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	109b      	asrs	r3, r3, #2
 8002278:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800227c:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8002280:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8002282:	2a01      	cmp	r2, #1
 8002284:	dd45      	ble.n	8002312 <processnex+0xf6>
 8002286:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <processnex+0x154>)
 800228a:	4613      	mov	r3, r2
 800228c:	bf28      	it	cs
 800228e:	2363      	movcs	r3, #99	; 0x63
 8002290:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8002292:	4a38      	ldr	r2, [pc, #224]	; (8002374 <processnex+0x158>)
 8002294:	a802      	add	r0, sp, #8
 8002296:	4938      	ldr	r1, [pc, #224]	; (8002378 <processnex+0x15c>)
 8002298:	f023 f88a 	bl	80253b0 <siprintf>
	strcpy(pkt, str);
 800229c:	a902      	add	r1, sp, #8
 800229e:	a80a      	add	r0, sp, #40	; 0x28
 80022a0:	f023 f917 	bl	80254d2 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <processnex+0x160>)
	if (!(lcd_txblocked))
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <processnex+0x164>)
	strcpy(pkt, str);
 80022a8:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80022aa:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80022ac:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80022ae:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d152      	bne.n	800235a <processnex+0x13e>
		return (lcd_puts(pkt));
 80022b4:	a80a      	add	r0, sp, #40	; 0x28
 80022b6:	f7ff f905 	bl	80014c4 <lcd_puts>
	result = writelcdcmd(buffer);
 80022ba:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 80022bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022be:	3301      	adds	r3, #1
 80022c0:	d047      	beq.n	8002352 <processnex+0x136>
	return (result);
 80022c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 80022c4:	b022      	add	sp, #136	; 0x88
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 80022c8:	4c26      	ldr	r4, [pc, #152]	; (8002364 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80022ca:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 80022cc:	482d      	ldr	r0, [pc, #180]	; (8002384 <processnex+0x168>)
 80022ce:	f022 ff19 	bl	8025104 <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 80022d2:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d1b0      	bne.n	800223c <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 80022da:	482b      	ldr	r0, [pc, #172]	; (8002388 <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80022dc:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 80022de:	f022 ff11 	bl	8025104 <puts>
		lcd_uart_init(9600);	// switch us to 9600
 80022e2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80022e6:	f7ff f81f 	bl	8001328 <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 80022ea:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80022ee:	f7ff f863 	bl	80013b8 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 80022f2:	2302      	movs	r3, #2
 80022f4:	6023      	str	r3, [r4, #0]
}
 80022f6:	b022      	add	sp, #136	; 0x88
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 80022fa:	4824      	ldr	r0, [pc, #144]	; (800238c <processnex+0x170>)
 80022fc:	4c19      	ldr	r4, [pc, #100]	; (8002364 <processnex+0x148>)
 80022fe:	f022 ff01 	bl	8025104 <puts>
 8002302:	e796      	b.n	8002232 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002304:	4822      	ldr	r0, [pc, #136]	; (8002390 <processnex+0x174>)
 8002306:	f022 fefd 	bl	8025104 <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 800230a:	4c16      	ldr	r4, [pc, #88]	; (8002364 <processnex+0x148>)
 800230c:	2301      	movs	r3, #1
 800230e:	6023      	str	r3, [r4, #0]
		break;
 8002310:	e78f      	b.n	8002232 <processnex+0x16>
			i = 2;	// prevent black
 8002312:	2202      	movs	r2, #2
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <processnex+0x154>)
 8002316:	4613      	mov	r3, r2
 8002318:	600a      	str	r2, [r1, #0]
 800231a:	e7ba      	b.n	8002292 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 800231c:	481d      	ldr	r0, [pc, #116]	; (8002394 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 800231e:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002320:	f022 fef0 	bl	8025104 <puts>
		lcd_uart_init(230400);
 8002324:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002328:	f7fe fffe 	bl	8001328 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 800232c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002330:	f7ff f842 	bl	80013b8 <lcd_init>
		osDelay(100);
 8002334:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8002336:	6026      	str	r6, [r4, #0]
}
 8002338:	b022      	add	sp, #136	; 0x88
 800233a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 800233e:	f012 bed5 	b.w	80150ec <osDelay>
		osDelay(500);
 8002342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002346:	f012 fed1 	bl	80150ec <osDelay>
		lcd_initflag = 3;
 800234a:	2303      	movs	r3, #3
 800234c:	6023      	str	r3, [r4, #0]
}
 800234e:	b022      	add	sp, #136	; 0x88
 8002350:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002352:	4811      	ldr	r0, [pc, #68]	; (8002398 <processnex+0x17c>)
 8002354:	f022 fe3a 	bl	8024fcc <iprintf>
 8002358:	e7b3      	b.n	80022c2 <processnex+0xa6>
		return (-1);
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	e7ac      	b.n	80022ba <processnex+0x9e>
 8002360:	20001750 	.word	0x20001750
 8002364:	200016c0 	.word	0x200016c0
 8002368:	20000004 	.word	0x20000004
 800236c:	2000000c 	.word	0x2000000c
 8002370:	200016a8 	.word	0x200016a8
 8002374:	08029c44 	.word	0x08029c44
 8002378:	08029c24 	.word	0x08029c24
 800237c:	08029b98 	.word	0x08029b98
 8002380:	200016c4 	.word	0x200016c4
 8002384:	08029fe8 	.word	0x08029fe8
 8002388:	0802a020 	.word	0x0802a020
 800238c:	0802a00c 	.word	0x0802a00c
 8002390:	08029ff8 	.word	0x08029ff8
 8002394:	0802a048 	.word	0x0802a048
 8002398:	08029c2c 	.word	0x08029c2c

0800239c <getlcdpage>:
int getlcdpage(void) {
 800239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 80023a0:	4842      	ldr	r0, [pc, #264]	; (80024ac <getlcdpage+0x110>)
int getlcdpage(void) {
 80023a2:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 80023a4:	f022 feae 	bl	8025104 <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 80023a8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80024c8 <getlcdpage+0x12c>
 80023ac:	2301      	movs	r3, #1
	strcpy(pkt, str);
 80023ae:	4e40      	ldr	r6, [pc, #256]	; (80024b0 <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80023b0:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 80023b2:	4f40      	ldr	r7, [pc, #256]	; (80024b4 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 80023b4:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 80023b8:	f012 fe98 	bl	80150ec <osDelay>
	lcdstatus = 0xff;
 80023bc:	4d3e      	ldr	r5, [pc, #248]	; (80024b8 <getlcdpage+0x11c>)
 80023be:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 80023c0:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 80023c4:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 80023c6:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 80023c8:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 80023ca:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 80023ce:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 80023d2:	a802      	add	r0, sp, #8
 80023d4:	f7ff f876 	bl	80014c4 <lcd_puts>
	result = intwritelcdcmd("sendme");
 80023d8:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	3301      	adds	r3, #1
 80023de:	d060      	beq.n	80024a2 <getlcdpage+0x106>
	processnex();
 80023e0:	f7ff ff1c 	bl	800221c <processnex>
	while (lcdstatus == 0xff) {
 80023e4:	782b      	ldrb	r3, [r5, #0]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d121      	bne.n	800242e <getlcdpage+0x92>
 80023ea:	4c34      	ldr	r4, [pc, #208]	; (80024bc <getlcdpage+0x120>)
 80023ec:	e007      	b.n	80023fe <getlcdpage+0x62>
		trys++;
 80023ee:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80023f0:	f012 fe7c 	bl	80150ec <osDelay>
		processnex();
 80023f4:	f7ff ff12 	bl	800221c <processnex>
	while (lcdstatus == 0xff) {
 80023f8:	782b      	ldrb	r3, [r5, #0]
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d117      	bne.n	800242e <getlcdpage+0x92>
		if (trys > 1000) {
 80023fe:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8002400:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8002406:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800240a:	d9f0      	bls.n	80023ee <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800240c:	482c      	ldr	r0, [pc, #176]	; (80024c0 <getlcdpage+0x124>)
 800240e:	f022 fddd 	bl	8024fcc <iprintf>
			trys = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 8002418:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d00c      	beq.n	800243a <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8002420:	2300      	movs	r3, #0
 8002422:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 8002426:	9801      	ldr	r0, [sp, #4]
}
 8002428:	b01b      	add	sp, #108	; 0x6c
 800242a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 800242e:	782b      	ldrb	r3, [r5, #0]
 8002430:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 8002432:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8002434:	9b01      	ldr	r3, [sp, #4]
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d1f2      	bne.n	8002420 <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 800243a:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 800243c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80024cc <getlcdpage+0x130>
 8002440:	4c1e      	ldr	r4, [pc, #120]	; (80024bc <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 8002442:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 8002446:	e896 0003 	ldmia.w	r6, {r0, r1}
 800244a:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 800244c:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 800244e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 8002452:	f7ff f837 	bl	80014c4 <lcd_puts>
		result = intwritelcdcmd("sendme");
 8002456:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 8002458:	9b01      	ldr	r3, [sp, #4]
 800245a:	3301      	adds	r3, #1
 800245c:	d10a      	bne.n	8002474 <getlcdpage+0xd8>
 800245e:	e01c      	b.n	800249a <getlcdpage+0xfe>
		if (trys > 1000) {
 8002460:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8002462:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8002468:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800246c:	d80e      	bhi.n	800248c <getlcdpage+0xf0>
		trys++;
 800246e:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8002470:	f012 fe3c 	bl	80150ec <osDelay>
		processnex();
 8002474:	f7ff fed2 	bl	800221c <processnex>
	while (lcdstatus == 0xff) {
 8002478:	782b      	ldrb	r3, [r5, #0]
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d0f0      	beq.n	8002460 <getlcdpage+0xc4>
	return (lcdstatus);
 800247e:	782b      	ldrb	r3, [r5, #0]
 8002480:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 8002482:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8002484:	9b01      	ldr	r3, [sp, #4]
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d0db      	beq.n	8002442 <getlcdpage+0xa6>
 800248a:	e7c9      	b.n	8002420 <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <getlcdpage+0x124>)
 800248e:	f022 fd9d 	bl	8024fcc <iprintf>
			trys = 0;
 8002492:	2200      	movs	r2, #0
 8002494:	23ff      	movs	r3, #255	; 0xff
 8002496:	6022      	str	r2, [r4, #0]
			return (-1);
 8002498:	e7f3      	b.n	8002482 <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 800249a:	4648      	mov	r0, r9
 800249c:	f022 fd96 	bl	8024fcc <iprintf>
 80024a0:	e7e8      	b.n	8002474 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <getlcdpage+0x128>)
 80024a4:	f022 fd92 	bl	8024fcc <iprintf>
 80024a8:	e79a      	b.n	80023e0 <getlcdpage+0x44>
 80024aa:	bf00      	nop
 80024ac:	0802a0a4 	.word	0x0802a0a4
 80024b0:	0802a0b0 	.word	0x0802a0b0
 80024b4:	08029b98 	.word	0x08029b98
 80024b8:	2000174c 	.word	0x2000174c
 80024bc:	20001d40 	.word	0x20001d40
 80024c0:	0802a074 	.word	0x0802a074
 80024c4:	0802a0b8 	.word	0x0802a0b8
 80024c8:	200016c4 	.word	0x200016c4
 80024cc:	0802a0d4 	.word	0x0802a0d4

080024d0 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80024d0:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2107      	movs	r1, #7
 80024d6:	2026      	movs	r0, #38	; 0x26
 80024d8:	f006 f8f8 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024dc:	2026      	movs	r0, #38	; 0x26
 80024de:	f006 f93f 	bl	8008760 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2106      	movs	r1, #6
 80024e6:	2047      	movs	r0, #71	; 0x47
 80024e8:	f006 f8f0 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024ec:	2047      	movs	r0, #71	; 0x47
 80024ee:	f006 f937 	bl	8008760 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2106      	movs	r1, #6
 80024f6:	2012      	movs	r0, #18
 80024f8:	f006 f8e8 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024fc:	2012      	movs	r0, #18
 80024fe:	f006 f92f 	bl	8008760 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2106      	movs	r1, #6
 8002506:	2028      	movs	r0, #40	; 0x28
 8002508:	f006 f8e0 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800250c:	2028      	movs	r0, #40	; 0x28
 800250e:	f006 f927 	bl	8008760 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002512:	202d      	movs	r0, #45	; 0x2d
 8002514:	2200      	movs	r2, #0
 8002516:	2101      	movs	r1, #1
 8002518:	f006 f8d8 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800251c:	202d      	movs	r0, #45	; 0x2d
}
 800251e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002522:	f006 b91d 	b.w	8008760 <HAL_NVIC_EnableIRQ>
 8002526:	bf00      	nop

08002528 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8002528:	4801      	ldr	r0, [pc, #4]	; (8002530 <netif_status_callbk_fn+0x8>)
 800252a:	f022 bdeb 	b.w	8025104 <puts>
 800252e:	bf00      	nop
 8002530:	0802a104 	.word	0x0802a104

08002534 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8002534:	4801      	ldr	r0, [pc, #4]	; (800253c <Callback01+0x8>)
 8002536:	f022 bde5 	b.w	8025104 <puts>
 800253a:	bf00      	nop
 800253c:	0802a11c 	.word	0x0802a11c

08002540 <_write>:
	if (file == 1) {
 8002540:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8002542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002544:	460c      	mov	r4, r1
 8002546:	4617      	mov	r7, r2
	if (file == 1) {
 8002548:	d00e      	beq.n	8002568 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800254a:	2a00      	cmp	r2, #0
 800254c:	dd0a      	ble.n	8002564 <_write+0x24>
 800254e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8002550:	4d0b      	ldr	r5, [pc, #44]	; (8002580 <_write+0x40>)
 8002552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002556:	230a      	movs	r3, #10
 8002558:	2201      	movs	r2, #1
 800255a:	4628      	mov	r0, r5
 800255c:	f010 fad2 	bl	8012b04 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002560:	42a6      	cmp	r6, r4
 8002562:	d1f6      	bne.n	8002552 <_write+0x12>
}
 8002564:	4638      	mov	r0, r7
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002568:	2a00      	cmp	r2, #0
 800256a:	ddfb      	ble.n	8002564 <_write+0x24>
 800256c:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 800256e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002572:	f001 fe81 	bl	8004278 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002576:	42ac      	cmp	r4, r5
 8002578:	d1f9      	bne.n	800256e <_write+0x2e>
}
 800257a:	4638      	mov	r0, r7
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800257e:	bf00      	nop
 8002580:	200027d0 	.word	0x200027d0

08002584 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <crc_rom+0x44>)
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8002586:	4811      	ldr	r0, [pc, #68]	; (80025cc <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8002588:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <crc_rom+0x4c>)
 800258e:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <crc_rom+0x50>)
 8002590:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8002592:	bf2c      	ite	cs
 8002594:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8002598:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 800259c:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 800259e:	f04f 32ff 	mov.w	r2, #4294967295
{
 80025a2:	b510      	push	{r4, lr}
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80025a4:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 80025a6:	460c      	mov	r4, r1
{
 80025a8:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 80025aa:	4619      	mov	r1, r3
 80025ac:	4620      	mov	r0, r4
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f7fe fb06 	bl	8000bc0 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 80025b4:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 80025b6:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 80025b8:	4622      	mov	r2, r4
 80025ba:	4807      	ldr	r0, [pc, #28]	; (80025d8 <crc_rom+0x54>)
}
 80025bc:	b002      	add	sp, #8
 80025be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 80025c2:	f022 bd03 	b.w	8024fcc <iprintf>
 80025c6:	bf00      	nop
 80025c8:	080024d1 	.word	0x080024d1
 80025cc:	200006bc 	.word	0x200006bc
 80025d0:	08045dfc 	.word	0x08045dfc
 80025d4:	20000000 	.word	0x20000000
 80025d8:	0802a128 	.word	0x0802a128

080025dc <err_leds>:
err_leds(int why) {
 80025dc:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80025de:	4e37      	ldr	r6, [pc, #220]	; (80026bc <err_leds+0xe0>)
err_leds(int why) {
 80025e0:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 80025e2:	4d37      	ldr	r5, [pc, #220]	; (80026c0 <err_leds+0xe4>)
 80025e4:	1e44      	subs	r4, r0, #1
		switch (why) {
 80025e6:	2c07      	cmp	r4, #7
 80025e8:	d80f      	bhi.n	800260a <err_leds+0x2e>
 80025ea:	e8df f004 	tbb	[pc, r4]
 80025ee:	5c51      	.short	0x5c51
 80025f0:	25303b46 	.word	0x25303b46
 80025f4:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80025f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fa:	4630      	mov	r0, r6
 80025fc:	f009 f9aa 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002604:	4630      	mov	r0, r6
 8002606:	f009 f9a5 	bl	800b954 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	9b01      	ldr	r3, [sp, #4]
 8002610:	42ab      	cmp	r3, r5
 8002612:	dae8      	bge.n	80025e6 <err_leds+0xa>
 8002614:	9b01      	ldr	r3, [sp, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	42ab      	cmp	r3, r5
 800261e:	dbf9      	blt.n	8002614 <err_leds+0x38>
 8002620:	e7e1      	b.n	80025e6 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002622:	4630      	mov	r0, r6
 8002624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002628:	f009 f994 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800262c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002630:	4630      	mov	r0, r6
 8002632:	f009 f98f 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 8002636:	e7e8      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002638:	4630      	mov	r0, r6
 800263a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263e:	f009 f989 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002646:	4630      	mov	r0, r6
 8002648:	f009 f984 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 800264c:	e7dd      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800264e:	4630      	mov	r0, r6
 8002650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002654:	f009 f97e 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800265c:	4630      	mov	r0, r6
 800265e:	f009 f979 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 8002662:	e7d2      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002664:	4630      	mov	r0, r6
 8002666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266a:	f009 f973 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800266e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002672:	4630      	mov	r0, r6
 8002674:	f009 f96e 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 8002678:	e7c7      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800267a:	4630      	mov	r0, r6
 800267c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002680:	f009 f968 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002688:	4630      	mov	r0, r6
 800268a:	f009 f963 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 800268e:	e7bc      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002690:	4630      	mov	r0, r6
 8002692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002696:	f009 f95d 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800269a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269e:	4630      	mov	r0, r6
 80026a0:	f009 f958 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 80026a4:	e7b1      	b.n	800260a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80026a6:	4630      	mov	r0, r6
 80026a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ac:	f009 f952 	bl	800b954 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80026b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b4:	4630      	mov	r0, r6
 80026b6:	f009 f94d 	bl	800b954 <HAL_GPIO_TogglePin>
			break;
 80026ba:	e7a6      	b.n	800260a <err_leds+0x2e>
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	003567e0 	.word	0x003567e0

080026c4 <rebootme>:
void rebootme(int why) {
 80026c4:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c6:	b672      	cpsid	i
		err_leds(why);
 80026c8:	f7ff ff88 	bl	80025dc <err_leds>

080026cc <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 80026cc:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 80026d0:	074a      	lsls	r2, r1, #29
 80026d2:	d502      	bpl.n	80026da <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <netif_link_callbk_fn+0x30>)
 80026d6:	f022 bc79 	b.w	8024fcc <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <netif_link_callbk_fn+0x34>)
 80026e0:	f022 fc74 	bl	8024fcc <iprintf>
		if (!(netif_is_link_up(netif))) {
 80026e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80026e8:	075b      	lsls	r3, r3, #29
 80026ea:	d500      	bpl.n	80026ee <netif_link_callbk_fn+0x22>
}
 80026ec:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <netif_link_callbk_fn+0x38>)
 80026f0:	f022 fd08 	bl	8025104 <puts>
			rebootme(1);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff ffe5 	bl	80026c4 <rebootme>
 80026fa:	bf00      	nop
 80026fc:	0802a14c 	.word	0x0802a14c
 8002700:	0802a16c 	.word	0x0802a16c
 8002704:	0802a18c 	.word	0x0802a18c

08002708 <StarLPTask>:
	char str[82] = { "empty" };
 8002708:	4ba1      	ldr	r3, [pc, #644]	; (8002990 <StarLPTask+0x288>)
 800270a:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8002710:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8002714:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002716:	2400      	movs	r4, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002718:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8002a10 <StarLPTask+0x308>
	char str[82] = { "empty" };
 800271c:	9009      	str	r0, [sp, #36]	; 0x24
 800271e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002722:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8002726:	4621      	mov	r1, r4
 8002728:	f021 fcb4 	bl	8024094 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 800272c:	4b99      	ldr	r3, [pc, #612]	; (8002994 <StarLPTask+0x28c>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800272e:	4622      	mov	r2, r4
 8002730:	2101      	movs	r1, #1
 8002732:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002734:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8002736:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002738:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800273c:	f012 ffce 	bl	80156dc <xQueueGenericCreate>
 8002740:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 8002744:	2800      	cmp	r0, #0
 8002746:	f000 8446 	beq.w	8002fd6 <StarLPTask+0x8ce>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800274a:	2201      	movs	r2, #1
 800274c:	4992      	ldr	r1, [pc, #584]	; (8002998 <StarLPTask+0x290>)
	lcduart_error = HAL_UART_ERROR_NONE;
 800274e:	4f93      	ldr	r7, [pc, #588]	; (800299c <StarLPTask+0x294>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8002750:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002754:	4892      	ldr	r0, [pc, #584]	; (80029a0 <StarLPTask+0x298>)
 8002756:	f010 fbf3 	bl	8012f40 <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800275a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 800275e:	603c      	str	r4, [r7, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002760:	f7fe fe2a 	bl	80013b8 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 8002764:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 8002768:	4d8e      	ldr	r5, [pc, #568]	; (80029a4 <StarLPTask+0x29c>)
	lcd_uart_init(9600); // then change our baud to match
 800276a:	f7fe fddd 	bl	8001328 <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 800276e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002772:	f7fe fe21 	bl	80013b8 <lcd_init>
	osDelay(600);
 8002776:	f44f 7016 	mov.w	r0, #600	; 0x258
 800277a:	f012 fcb7 	bl	80150ec <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 800277e:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002782:	f7fe fe19 	bl	80013b8 <lcd_init>
	osDelay(600);
 8002786:	f44f 7016 	mov.w	r0, #600	; 0x258
 800278a:	f012 fcaf 	bl	80150ec <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 800278e:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002792:	f7fe fdc9 	bl	8001328 <lcd_uart_init>
	osDelay(600);
 8002796:	f44f 7016 	mov.w	r0, #600	; 0x258
 800279a:	f012 fca7 	bl	80150ec <osDelay>
	writelcdcmd("page 0");
 800279e:	4882      	ldr	r0, [pc, #520]	; (80029a8 <StarLPTask+0x2a0>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80027a0:	603c      	str	r4, [r7, #0]
	writelcdcmd("page 0");
 80027a2:	f7fe ff05 	bl	80015b0 <writelcdcmd>
	printf("LCD page 0\n");
 80027a6:	4881      	ldr	r0, [pc, #516]	; (80029ac <StarLPTask+0x2a4>)
 80027a8:	f022 fcac 	bl	8025104 <puts>
	osDelay(600);
 80027ac:	f44f 7016 	mov.w	r0, #600	; 0x258
 80027b0:	f012 fc9c 	bl	80150ec <osDelay>
	writelcdcmd("cls BLACK");
 80027b4:	487e      	ldr	r0, [pc, #504]	; (80029b0 <StarLPTask+0x2a8>)
 80027b6:	f7fe fefb 	bl	80015b0 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80027ba:	f242 732b 	movw	r3, #10027	; 0x272b
 80027be:	4622      	mov	r2, r4
 80027c0:	497c      	ldr	r1, [pc, #496]	; (80029b4 <StarLPTask+0x2ac>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4650      	mov	r0, sl
 80027c6:	230f      	movs	r3, #15
 80027c8:	f022 fdf2 	bl	80253b0 <siprintf>
	writelcdcmd(str);
 80027cc:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 80027ce:	603c      	str	r4, [r7, #0]
	writelcdcmd(str);
 80027d0:	f7fe feee 	bl	80015b0 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 80027d4:	603c      	str	r4, [r7, #0]
	while (main_init_done == 0) { // wait from main to complete the init {
 80027d6:	682c      	ldr	r4, [r5, #0]
 80027d8:	2c00      	cmp	r4, #0
 80027da:	d149      	bne.n	8002870 <StarLPTask+0x168>
 80027dc:	4e76      	ldr	r6, [pc, #472]	; (80029b8 <StarLPTask+0x2b0>)
			writelcdcmd(strcat(str, "...\""));
 80027de:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8002a14 <StarLPTask+0x30c>
 80027e2:	e017      	b.n	8002814 <StarLPTask+0x10c>
		switch (i & 3) {
 80027e4:	f1b8 0f01 	cmp.w	r8, #1
 80027e8:	f000 80a2 	beq.w	8002930 <StarLPTask+0x228>
			writelcdcmd(strcat(str, ".\""));
 80027ec:	4b73      	ldr	r3, [pc, #460]	; (80029bc <StarLPTask+0x2b4>)
 80027ee:	4650      	mov	r0, sl
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	789b      	ldrb	r3, [r3, #2]
 80027f4:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 80027f8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80027fc:	f7fe fed8 	bl	80015b0 <writelcdcmd>
		osDelay(250);
 8002800:	20fa      	movs	r0, #250	; 0xfa
		i++;
 8002802:	3401      	adds	r4, #1
		osDelay(250);
 8002804:	f012 fc72 	bl	80150ec <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8002808:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800280c:	075a      	lsls	r2, r3, #29
 800280e:	d529      	bpl.n	8002864 <StarLPTask+0x15c>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	bb6b      	cbnz	r3, 8002870 <StarLPTask+0x168>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002814:	f8df e200 	ldr.w	lr, [pc, #512]	; 8002a18 <StarLPTask+0x310>
 8002818:	46d4      	mov	ip, sl
		switch (i & 3) {
 800281a:	f004 0803 	and.w	r8, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800281e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002826:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800282a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800282e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 8002832:	f1b8 0f02 	cmp.w	r8, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002836:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800283a:	f82c 3b02 	strh.w	r3, [ip], #2
 800283e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002842:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 8002846:	d07b      	beq.n	8002940 <StarLPTask+0x238>
 8002848:	f1b8 0f03 	cmp.w	r8, #3
 800284c:	d1ca      	bne.n	80027e4 <StarLPTask+0xdc>
			writelcdcmd(strcat(str, "....\""));
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <StarLPTask+0x2b8>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	889b      	ldrh	r3, [r3, #4]
 8002854:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002858:	4650      	mov	r0, sl
 800285a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 800285e:	f7fe fea7 	bl	80015b0 <writelcdcmd>
			break;
 8002862:	e7cd      	b.n	8002800 <StarLPTask+0xf8>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8002864:	4857      	ldr	r0, [pc, #348]	; (80029c4 <StarLPTask+0x2bc>)
 8002866:	f7fe fea3 	bl	80015b0 <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 800286a:	682b      	ldr	r3, [r5, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0d1      	beq.n	8002814 <StarLPTask+0x10c>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002870:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 8002872:	4855      	ldr	r0, [pc, #340]	; (80029c8 <StarLPTask+0x2c0>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002874:	4e55      	ldr	r6, [pc, #340]	; (80029cc <StarLPTask+0x2c4>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002876:	603c      	str	r4, [r7, #0]
	writelcdcmd("ref 0");		// refresh screen
 8002878:	f7fe fe9a 	bl	80015b0 <writelcdcmd>
	writelcdcmd("page 0");
 800287c:	484a      	ldr	r0, [pc, #296]	; (80029a8 <StarLPTask+0x2a0>)
	int last3min = 0;
 800287e:	46a0      	mov	r8, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 8002880:	603c      	str	r4, [r7, #0]
	int last3min = 0;
 8002882:	9407      	str	r4, [sp, #28]
	writelcdcmd("page 0");
 8002884:	f7fe fe94 	bl	80015b0 <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002888:	4b42      	ldr	r3, [pc, #264]	; (8002994 <StarLPTask+0x28c>)
	uint16_t onesectimer = 0;
 800288a:	46c1      	mov	r9, r8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800288c:	4950      	ldr	r1, [pc, #320]	; (80029d0 <StarLPTask+0x2c8>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800288e:	f8b3 005c 	ldrh.w	r0, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002892:	4f50      	ldr	r7, [pc, #320]	; (80029d4 <StarLPTask+0x2cc>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002894:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
 8002898:	b280      	uxth	r0, r0
 800289a:	f893 5071 	ldrb.w	r5, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800289e:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 80028a2:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 80028a6:	9001      	str	r0, [sp, #4]
 80028a8:	484b      	ldr	r0, [pc, #300]	; (80029d8 <StarLPTask+0x2d0>)
 80028aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80028ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80028b2:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
	gainchanged = 0;
 80028b6:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 80028b8:	4d48      	ldr	r5, [pc, #288]	; (80029dc <StarLPTask+0x2d4>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4948      	ldr	r1, [pc, #288]	; (80029e0 <StarLPTask+0x2d8>)
 80028be:	f022 fd77 	bl	80253b0 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80028c2:	4848      	ldr	r0, [pc, #288]	; (80029e4 <StarLPTask+0x2dc>)
 80028c4:	f00c fcaa 	bl	800f21c <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <StarLPTask+0x2e0>)
 80028ca:	2201      	movs	r2, #1
	gainchanged = 0;
 80028cc:	f8cd 8018 	str.w	r8, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 80028d0:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80028d2:	4846      	ldr	r0, [pc, #280]	; (80029ec <StarLPTask+0x2e4>)
		tenmstimer++;
 80028d4:	3701      	adds	r7, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80028d6:	f009 fea7 	bl	800c628 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80028da:	200a      	movs	r0, #10
 80028dc:	f012 fc06 	bl	80150ec <osDelay>
		globaladcnoise = abs(meanwindiff);
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <StarLPTask+0x2e8>)
 80028e2:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <StarLPTask+0x2ec>)
		tenmstimer++;
 80028e4:	b2bf      	uxth	r7, r7
		globaladcnoise = abs(meanwindiff);
 80028e6:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf("AGC is ");
 80028ea:	4e43      	ldr	r6, [pc, #268]	; (80029f8 <StarLPTask+0x2f0>)
		globaladcnoise = abs(meanwindiff);
 80028ec:	2b00      	cmp	r3, #0
					printf("OFF\n");
 80028ee:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002a1c <StarLPTask+0x314>
		globaladcnoise = abs(meanwindiff);
 80028f2:	bfb8      	it	lt
 80028f4:	425b      	neglt	r3, r3
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80028fa:	09db      	lsrs	r3, r3, #7
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <StarLPTask+0x2f4>)
 80028fe:	3304      	adds	r3, #4
 8002900:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8002902:	2200      	movs	r2, #0
 8002904:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8002908:	f8db 0000 	ldr.w	r0, [fp]
 800290c:	f013 f8ea 	bl	8015ae4 <xQueueReceive>
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 8085 	beq.w	8002a20 <StarLPTask+0x318>
			if (inch == 0x03) {		// control C
 8002916:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 800291a:	2803      	cmp	r0, #3
 800291c:	d025      	beq.n	800296a <StarLPTask+0x262>
			if ((isdigit(inch)) && (agc == 0)) {
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <StarLPTask+0x2f8>)
 8002920:	5cc3      	ldrb	r3, [r0, r3]
 8002922:	075b      	lsls	r3, r3, #29
 8002924:	d501      	bpl.n	800292a <StarLPTask+0x222>
 8002926:	882b      	ldrh	r3, [r5, #0]
 8002928:	b1b3      	cbz	r3, 8002958 <StarLPTask+0x250>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 800292a:	f001 fca5 	bl	8004278 <__io_putchar>
 800292e:	e7e8      	b.n	8002902 <StarLPTask+0x1fa>
			writelcdcmd(strcat(str, "..\""));
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <StarLPTask+0x2fc>)
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002938:	4650      	mov	r0, sl
 800293a:	f7fe fe39 	bl	80015b0 <writelcdcmd>
			break;
 800293e:	e75f      	b.n	8002800 <StarLPTask+0xf8>
			writelcdcmd(strcat(str, "...\""));
 8002940:	f8d9 0000 	ldr.w	r0, [r9]
 8002944:	f899 3004 	ldrb.w	r3, [r9, #4]
 8002948:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 800294c:	4650      	mov	r0, sl
 800294e:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8002952:	f7fe fe2d 	bl	80015b0 <writelcdcmd>
			break;
 8002956:	e753      	b.n	8002800 <StarLPTask+0xf8>
				setpgagain(inch - '0');
 8002958:	3830      	subs	r0, #48	; 0x30
 800295a:	f002 f909 	bl	8004b70 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 800295e:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8002962:	4829      	ldr	r0, [pc, #164]	; (8002a08 <StarLPTask+0x300>)
 8002964:	f022 fb32 	bl	8024fcc <iprintf>
 8002968:	e7cb      	b.n	8002902 <StarLPTask+0x1fa>
				agc = (agc) ? 0 : 1;
 800296a:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 800296c:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 8002976:	f022 fb29 	bl	8024fcc <iprintf>
				if (agc)
 800297a:	882b      	ldrh	r3, [r5, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8135 	beq.w	8002bec <StarLPTask+0x4e4>
					printf("ON\n");
 8002982:	4822      	ldr	r0, [pc, #136]	; (8002a0c <StarLPTask+0x304>)
 8002984:	f022 fbbe 	bl	8025104 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002988:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 800298c:	e7c7      	b.n	800291e <StarLPTask+0x216>
 800298e:	bf00      	nop
 8002990:	08029060 	.word	0x08029060
 8002994:	20002c04 	.word	0x20002c04
 8002998:	20001d50 	.word	0x20001d50
 800299c:	20001750 	.word	0x20001750
 80029a0:	20002644 	.word	0x20002644
 80029a4:	200029f0 	.word	0x200029f0
 80029a8:	0802a1f4 	.word	0x0802a1f4
 80029ac:	0802a1f0 	.word	0x0802a1f0
 80029b0:	0802a1fc 	.word	0x0802a1fc
 80029b4:	0802a208 	.word	0x0802a208
 80029b8:	20002ef0 	.word	0x20002ef0
 80029bc:	0802a2c4 	.word	0x0802a2c4
 80029c0:	0802a2d4 	.word	0x0802a2d4
 80029c4:	0802a2dc 	.word	0x0802a2dc
 80029c8:	0802a244 	.word	0x0802a244
 80029cc:	20002e18 	.word	0x20002e18
 80029d0:	1ff0f000 	.word	0x1ff0f000
 80029d4:	20002dbc 	.word	0x20002dbc
 80029d8:	20000084 	.word	0x20000084
 80029dc:	20000010 	.word	0x20000010
 80029e0:	0802a24c 	.word	0x0802a24c
 80029e4:	200025f8 	.word	0x200025f8
 80029e8:	200029ec 	.word	0x200029ec
 80029ec:	20002298 	.word	0x20002298
 80029f0:	20000748 	.word	0x20000748
 80029f4:	200006f8 	.word	0x200006f8
 80029f8:	0802a318 	.word	0x0802a318
 80029fc:	20000000 	.word	0x20000000
 8002a00:	08045505 	.word	0x08045505
 8002a04:	0802a2c8 	.word	0x0802a2c8
 8002a08:	0802a328 	.word	0x0802a328
 8002a0c:	0802a320 	.word	0x0802a320
 8002a10:	20001d54 	.word	0x20001d54
 8002a14:	0802a2cc 	.word	0x0802a2cc
 8002a18:	0802a294 	.word	0x0802a294
 8002a1c:	0802a324 	.word	0x0802a324
		if (!(ledsenabled)) {
 8002a20:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <StarLPTask+0x58c>)
 8002a22:	4604      	mov	r4, r0
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80e6 	beq.w	8002bf8 <StarLPTask+0x4f0>
		} else if (ledhang) {	// trigger led
 8002a2c:	4a9a      	ldr	r2, [pc, #616]	; (8002c98 <StarLPTask+0x590>)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80e1 	beq.w	8002bf8 <StarLPTask+0x4f0>
			ledhang--;
 8002a36:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3c:	4897      	ldr	r0, [pc, #604]	; (8002c9c <StarLPTask+0x594>)
			ledhang--;
 8002a3e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002a40:	2201      	movs	r2, #1
 8002a42:	f008 ff6d 	bl	800b920 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8002a46:	4996      	ldr	r1, [pc, #600]	; (8002ca0 <StarLPTask+0x598>)
 8002a48:	4896      	ldr	r0, [pc, #600]	; (8002ca4 <StarLPTask+0x59c>)
 8002a4a:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 8002a4c:	6803      	ldr	r3, [r0, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	f040 80d9 	bne.w	8002c06 <StarLPTask+0x4fe>
		processnex();		// process Nextion
 8002a54:	f7ff fbe2 	bl	800221c <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8002a58:	4a93      	ldr	r2, [pc, #588]	; (8002ca8 <StarLPTask+0x5a0>)
 8002a5a:	1cfb      	adds	r3, r7, #3
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	4a92      	ldr	r2, [pc, #584]	; (8002cac <StarLPTask+0x5a4>)
 8002a62:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8002a66:	d31e      	bcc.n	8002aa6 <StarLPTask+0x39e>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8002a68:	4b8d      	ldr	r3, [pc, #564]	; (8002ca0 <StarLPTask+0x598>)
 8002a6a:	4c91      	ldr	r4, [pc, #580]	; (8002cb0 <StarLPTask+0x5a8>)
 8002a6c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f103 0219 	add.w	r2, r3, #25
 8002a74:	4291      	cmp	r1, r2
 8002a76:	f200 820c 	bhi.w	8002e92 <StarLPTask+0x78a>
				if (jabbertimeout) {
 8002a7a:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <StarLPTask+0x5ac>)
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	b10b      	cbz	r3, 8002a84 <StarLPTask+0x37c>
					jabbertimeout--;		// de-arm count
 8002a80:	3b01      	subs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8002a84:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <StarLPTask+0x598>)
 8002a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a88:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8002a8a:	9b06      	ldr	r3, [sp, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8221 	beq.w	8002ed4 <StarLPTask+0x7cc>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <StarLPTask+0x5b0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 81d2 	beq.w	8002e40 <StarLPTask+0x738>
 8002a9c:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <StarLPTask+0x5b4>)
			} else if (lcd_currentpage == 1) {
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	f000 8258 	beq.w	8002f56 <StarLPTask+0x84e>
				lcd_showvars();
 8002aa6:	4a86      	ldr	r2, [pc, #536]	; (8002cc0 <StarLPTask+0x5b8>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002aa8:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002ab0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002aba:	f080 80dd 	bcs.w	8002c78 <StarLPTask+0x570>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002abe:	4a81      	ldr	r2, [pc, #516]	; (8002cc4 <StarLPTask+0x5bc>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002ac0:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002ac8:	4a7f      	ldr	r2, [pc, #508]	; (8002cc8 <StarLPTask+0x5c0>)
 8002aca:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8002ace:	d31a      	bcc.n	8002b06 <StarLPTask+0x3fe>
			if (agc) {
 8002ad0:	882b      	ldrh	r3, [r5, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 81b2 	beq.w	8002e3c <StarLPTask+0x734>
				trigsin10sec = trigs - prevtrigs;
 8002ad8:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <StarLPTask+0x59c>)
 8002ada:	4c7c      	ldr	r4, [pc, #496]	; (8002ccc <StarLPTask+0x5c4>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002adc:	4e7c      	ldr	r6, [pc, #496]	; (8002cd0 <StarLPTask+0x5c8>)
				trigsin10sec = trigs - prevtrigs;
 8002ade:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002ae0:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8002d34 <StarLPTask+0x62c>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002ae8:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8002aea:	eba2 0303 	sub.w	r3, r2, r3
 8002aee:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002af2:	d802      	bhi.n	8002afa <StarLPTask+0x3f2>
					if (trigsin10sec < MINTRIGS10S)
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f240 825a 	bls.w	8002fae <StarLPTask+0x8a6>
				if (trigsin10sec > MAXTRIGS10S)
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	f200 822e 	bhi.w	8002f5c <StarLPTask+0x854>
			gainchanged = 0;
 8002b00:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8002b02:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8002b04:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8002b06:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002b0a:	429f      	cmp	r7, r3
 8002b0c:	d94e      	bls.n	8002bac <StarLPTask+0x4a4>
			if (gpsgood == 0) {	// gps is not talking to us
 8002b0e:	4b71      	ldr	r3, [pc, #452]	; (8002cd4 <StarLPTask+0x5cc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 818e 	bne.w	8002e34 <StarLPTask+0x72c>
				printf("GPS serial comms problem?\n");
 8002b18:	486f      	ldr	r0, [pc, #444]	; (8002cd8 <StarLPTask+0x5d0>)
 8002b1a:	f022 faf3 	bl	8025104 <puts>
				if (gpsbadcount++ > 9) {
 8002b1e:	496f      	ldr	r1, [pc, #444]	; (8002cdc <StarLPTask+0x5d4>)
 8002b20:	680b      	ldr	r3, [r1, #0]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	600a      	str	r2, [r1, #0]
 8002b28:	f300 824b 	bgt.w	8002fc2 <StarLPTask+0x8ba>
			if (psensor == MPL115A2) {
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <StarLPTask+0x5d8>)
			gpsgood = 0;			// reset the good flag
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4968      	ldr	r1, [pc, #416]	; (8002cd4 <StarLPTask+0x5cc>)
			if (psensor == MPL115A2) {
 8002b32:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8002b34:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	f000 8204 	beq.w	8002f44 <StarLPTask+0x83c>
			} else if (psensor == MPL3115A2) {
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	f000 8223 	beq.w	8002f88 <StarLPTask+0x880>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002b42:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <StarLPTask+0x5dc>)
			tenmstimer = 0;
 8002b44:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002b46:	4a56      	ldr	r2, [pc, #344]	; (8002ca0 <StarLPTask+0x598>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8002b4e:	0e1a      	lsrs	r2, r3, #24
 8002b50:	4865      	ldr	r0, [pc, #404]	; (8002ce8 <StarLPTask+0x5e0>)
 8002b52:	b289      	uxth	r1, r1
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	9200      	str	r2, [sp, #0]
 8002b64:	f242 722b 	movw	r2, #10027	; 0x272b
 8002b68:	f022 fa30 	bl	8024fcc <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 8002b6c:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <StarLPTask+0x5e4>)
 8002b6e:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <StarLPTask+0x5e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	494c      	ldr	r1, [pc, #304]	; (8002ca4 <StarLPTask+0x59c>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	485e      	ldr	r0, [pc, #376]	; (8002cf4 <StarLPTask+0x5ec>)
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <StarLPTask+0x5f0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	9302      	str	r3, [sp, #8]
 8002b86:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <StarLPTask+0x5f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <StarLPTask+0x5f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <StarLPTask+0x5c8>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <StarLPTask+0x5fc>)
 8002b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <StarLPTask+0x600>)
 8002ba0:	9305      	str	r3, [sp, #20]
 8002ba2:	4b5a      	ldr	r3, [pc, #360]	; (8002d0c <StarLPTask+0x604>)
 8002ba4:	6809      	ldr	r1, [r1, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 fa10 	bl	8024fcc <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8002bac:	f109 0315 	add.w	r3, r9, #21
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <StarLPTask+0x608>)
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <StarLPTask+0x60c>)
 8002bba:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002bbe:	d30b      	bcc.n	8002bd8 <StarLPTask+0x4d0>
 8002bc0:	9b07      	ldr	r3, [sp, #28]
 8002bc2:	4599      	cmp	r9, r3
 8002bc4:	d008      	beq.n	8002bd8 <StarLPTask+0x4d0>
			if (boosttrys > 0)		// timer for boost gain oscillating
 8002bc6:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <StarLPTask+0x610>)
 8002bc8:	8813      	ldrh	r3, [r2, #0]
 8002bca:	b10b      	cbz	r3, 8002bd0 <StarLPTask+0x4c8>
				boosttrys--;
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8002bd0:	f7ff f8d8 	bl	8001d84 <lcd_pressplot>
 8002bd4:	f8cd 901c 	str.w	r9, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8002bd8:	f240 3385 	movw	r3, #901	; 0x385
 8002bdc:	4599      	cmp	r9, r3
 8002bde:	f47f ae78 	bne.w	80028d2 <StarLPTask+0x1ca>
			onesectimer = 0;
 8002be2:	f04f 0900 	mov.w	r9, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 8002be6:	f004 fbcf 	bl	8007388 <requestapisn>
 8002bea:	e672      	b.n	80028d2 <StarLPTask+0x1ca>
					printf("OFF\n");
 8002bec:	4640      	mov	r0, r8
 8002bee:	f022 fa89 	bl	8025104 <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002bf2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002bf6:	e692      	b.n	800291e <StarLPTask+0x216>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bfe:	4827      	ldr	r0, [pc, #156]	; (8002c9c <StarLPTask+0x594>)
 8002c00:	f008 fe8e 	bl	800b920 <HAL_GPIO_WritePin>
 8002c04:	e71f      	b.n	8002a46 <StarLPTask+0x33e>
			if (soundenabled) {
 8002c06:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <StarLPTask+0x614>)
			trigs = statuspkt.trigcount;
 8002c08:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 8002c0a:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8002c0c:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 8173 	bne.w	8002efa <StarLPTask+0x7f2>
 8002c14:	4e42      	ldr	r6, [pc, #264]	; (8002d20 <StarLPTask+0x618>)
				printf("sem wait 1a\n");
 8002c16:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8002d38 <StarLPTask+0x630>
 8002c1a:	e002      	b.n	8002c22 <StarLPTask+0x51a>
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	f022 fa71 	bl	8025104 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002c22:	2101      	movs	r1, #1
 8002c24:	6830      	ldr	r0, [r6, #0]
 8002c26:	f013 f825 	bl	8015c74 <xQueueSemaphoreTake>
 8002c2a:	2801      	cmp	r0, #1
 8002c2c:	d1f6      	bne.n	8002c1c <StarLPTask+0x514>
			strcpy(str, ctime(&epochtime));		// ctime
 8002c2e:	483d      	ldr	r0, [pc, #244]	; (8002d24 <StarLPTask+0x61c>)
 8002c30:	f020 ffae 	bl	8023b90 <ctime>
 8002c34:	4601      	mov	r1, r0
 8002c36:	4650      	mov	r0, sl
 8002c38:	f022 fc4b 	bl	80254d2 <stpcpy>
			i = 0;
 8002c3c:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 8002c3e:	eba0 000a 	sub.w	r0, r0, sl
 8002c42:	4939      	ldr	r1, [pc, #228]	; (8002d28 <StarLPTask+0x620>)
 8002c44:	e008      	b.n	8002c58 <StarLPTask+0x550>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8002c46:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8002c4a:	2a0a      	cmp	r2, #10
 8002c4c:	d003      	beq.n	8002c56 <StarLPTask+0x54e>
 8002c4e:	2a0d      	cmp	r2, #13
 8002c50:	d001      	beq.n	8002c56 <StarLPTask+0x54e>
					trigtimestr[n++] = str[i];
 8002c52:	550a      	strb	r2, [r1, r4]
 8002c54:	3401      	adds	r4, #1
				i++;
 8002c56:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8002c58:	4283      	cmp	r3, r0
 8002c5a:	d3f4      	bcc.n	8002c46 <StarLPTask+0x53e>
			trigtimestr[n] = '\0';
 8002c5c:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002c5e:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 8002c60:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002c62:	461a      	mov	r2, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	f012 fd6b 	bl	8015740 <xQueueGenericSend>
 8002c6a:	2801      	cmp	r0, #1
 8002c6c:	f43f aef2 	beq.w	8002a54 <StarLPTask+0x34c>
				printf("semaphore 1a release failed\n");
 8002c70:	482e      	ldr	r0, [pc, #184]	; (8002d2c <StarLPTask+0x624>)
 8002c72:	f022 fa47 	bl	8025104 <puts>
 8002c76:	e6ed      	b.n	8002a54 <StarLPTask+0x34c>
			if (ledsenabled)
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <StarLPTask+0x58c>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <StarLPTask+0x594>)
			if (ledsenabled)
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	f000 8152 	beq.w	8002f2c <StarLPTask+0x824>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002c88:	f008 fe64 	bl	800b954 <HAL_GPIO_TogglePin>
 8002c8c:	4e24      	ldr	r6, [pc, #144]	; (8002d20 <StarLPTask+0x618>)
				printf("sem wait 1b\n");
 8002c8e:	4c28      	ldr	r4, [pc, #160]	; (8002d30 <StarLPTask+0x628>)
 8002c90:	e057      	b.n	8002d42 <StarLPTask+0x63a>
 8002c92:	bf00      	nop
 8002c94:	20000270 	.word	0x20000270
 8002c98:	20000744 	.word	0x20000744
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	20002c04 	.word	0x20002c04
 8002ca4:	20002a1c 	.word	0x20002a1c
 8002ca8:	cccccccd 	.word	0xcccccccd
 8002cac:	19999999 	.word	0x19999999
 8002cb0:	200029e0 	.word	0x200029e0
 8002cb4:	200006fc 	.word	0x200006fc
 8002cb8:	200016c0 	.word	0x200016c0
 8002cbc:	200016bc 	.word	0x200016bc
 8002cc0:	c28f5c29 	.word	0xc28f5c29
 8002cc4:	26e978d5 	.word	0x26e978d5
 8002cc8:	00418937 	.word	0x00418937
 8002ccc:	20002a0c 	.word	0x20002a0c
 8002cd0:	20000002 	.word	0x20000002
 8002cd4:	20002ac4 	.word	0x20002ac4
 8002cd8:	0802a4dc 	.word	0x0802a4dc
 8002cdc:	20001da0 	.word	0x20001da0
 8002ce0:	20002d44 	.word	0x20002d44
 8002ce4:	20002a00 	.word	0x20002a00
 8002ce8:	0802a538 	.word	0x0802a538
 8002cec:	20002d4c 	.word	0x20002d4c
 8002cf0:	10624dd3 	.word	0x10624dd3
 8002cf4:	0802a554 	.word	0x0802a554
 8002cf8:	20002d3c 	.word	0x20002d3c
 8002cfc:	20002d48 	.word	0x20002d48
 8002d00:	20002d40 	.word	0x20002d40
 8002d04:	20002d38 	.word	0x20002d38
 8002d08:	20000054 	.word	0x20000054
 8002d0c:	200006f8 	.word	0x200006f8
 8002d10:	a4fa4fa5 	.word	0xa4fa4fa5
 8002d14:	016c16c1 	.word	0x016c16c1
 8002d18:	20002cb8 	.word	0x20002cb8
 8002d1c:	20000276 	.word	0x20000276
 8002d20:	20002a14 	.word	0x20002a14
 8002d24:	20002ab8 	.word	0x20002ab8
 8002d28:	2000023c 	.word	0x2000023c
 8002d2c:	0802a358 	.word	0x0802a358
 8002d30:	0802a384 	.word	0x0802a384
 8002d34:	20002a20 	.word	0x20002a20
 8002d38:	0802a34c 	.word	0x0802a34c
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f022 f9e1 	bl	8025104 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002d42:	2101      	movs	r1, #1
 8002d44:	6830      	ldr	r0, [r6, #0]
 8002d46:	f012 ff95 	bl	8015c74 <xQueueSemaphoreTake>
 8002d4a:	2801      	cmp	r0, #1
 8002d4c:	d1f6      	bne.n	8002d3c <StarLPTask+0x634>
			strcpy(str, ctime(&epochtime));
 8002d4e:	48a5      	ldr	r0, [pc, #660]	; (8002fe4 <StarLPTask+0x8dc>)
 8002d50:	f020 ff1e 	bl	8023b90 <ctime>
 8002d54:	4601      	mov	r1, r0
 8002d56:	4650      	mov	r0, sl
			sprintf(statstr,
 8002d58:	4ca3      	ldr	r4, [pc, #652]	; (8002fe8 <StarLPTask+0x8e0>)
			strcpy(str, ctime(&epochtime));
 8002d5a:	f022 fbba 	bl	80254d2 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002d5e:	eba0 000a 	sub.w	r0, r0, sl
 8002d62:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8002d64:	49a1      	ldr	r1, [pc, #644]	; (8002fec <StarLPTask+0x8e4>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002d66:	f100 0378 	add.w	r3, r0, #120	; 0x78
			sprintf(nowtimestr, "\"%s\"", str);
 8002d6a:	48a1      	ldr	r0, [pc, #644]	; (8002ff0 <StarLPTask+0x8e8>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002d6c:	446b      	add	r3, sp
 8002d6e:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8002d72:	4652      	mov	r2, sl
 8002d74:	f022 fb1c 	bl	80253b0 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8002d78:	4b9e      	ldr	r3, [pc, #632]	; (8002ff4 <StarLPTask+0x8ec>)
 8002d7a:	4a9f      	ldr	r2, [pc, #636]	; (8002ff8 <StarLPTask+0x8f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	499e      	ldr	r1, [pc, #632]	; (8002ffc <StarLPTask+0x8f4>)
 8002d82:	489f      	ldr	r0, [pc, #636]	; (8003000 <StarLPTask+0x8f8>)
 8002d84:	f022 fb14 	bl	80253b0 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8002d88:	4b9e      	ldr	r3, [pc, #632]	; (8003004 <StarLPTask+0x8fc>)
 8002d8a:	4a9f      	ldr	r2, [pc, #636]	; (8003008 <StarLPTask+0x900>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	499a      	ldr	r1, [pc, #616]	; (8002ffc <StarLPTask+0x8f4>)
 8002d92:	489e      	ldr	r0, [pc, #632]	; (800300c <StarLPTask+0x904>)
 8002d94:	f022 fb0c 	bl	80253b0 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002d98:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <StarLPTask+0x908>)
			sprintf(statstr,
 8002d9a:	499e      	ldr	r1, [pc, #632]	; (8003014 <StarLPTask+0x90c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8002da0:	489d      	ldr	r0, [pc, #628]	; (8003018 <StarLPTask+0x910>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bfb8      	it	lt
 8002da6:	425b      	neglt	r3, r3
			sprintf(statstr,
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	4b9b      	ldr	r3, [pc, #620]	; (800301c <StarLPTask+0x914>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	4b99      	ldr	r3, [pc, #612]	; (8003020 <StarLPTask+0x918>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002dc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4b97      	ldr	r3, [pc, #604]	; (8003024 <StarLPTask+0x91c>)
 8002dc6:	f022 faf3 	bl	80253b0 <siprintf>
			if (gpslocked) {
 8002dca:	4b97      	ldr	r3, [pc, #604]	; (8003028 <StarLPTask+0x920>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 809d 	beq.w	8002f0e <StarLPTask+0x806>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8002dd4:	7ee2      	ldrb	r2, [r4, #27]
 8002dd6:	69e3      	ldr	r3, [r4, #28]
 8002dd8:	6a21      	ldr	r1, [r4, #32]
 8002dda:	4894      	ldr	r0, [pc, #592]	; (800302c <StarLPTask+0x924>)
 8002ddc:	9100      	str	r1, [sp, #0]
 8002dde:	4994      	ldr	r1, [pc, #592]	; (8003030 <StarLPTask+0x928>)
 8002de0:	f022 fae6 	bl	80253b0 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002de4:	2300      	movs	r3, #0
 8002de6:	6830      	ldr	r0, [r6, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	f012 fca8 	bl	8015740 <xQueueGenericSend>
 8002df0:	2801      	cmp	r0, #1
 8002df2:	d002      	beq.n	8002dfa <StarLPTask+0x6f2>
				printf("semaphore 1b release failed\n");
 8002df4:	488f      	ldr	r0, [pc, #572]	; (8003034 <StarLPTask+0x92c>)
 8002df6:	f022 f985 	bl	8025104 <puts>
			onesectimer++;
 8002dfa:	f109 0901 	add.w	r9, r9, #1
				printf("sem wait 1c\n");
 8002dfe:	4c8e      	ldr	r4, [pc, #568]	; (8003038 <StarLPTask+0x930>)
			onesectimer++;
 8002e00:	fa1f f989 	uxth.w	r9, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002e04:	e002      	b.n	8002e0c <StarLPTask+0x704>
				printf("sem wait 1c\n");
 8002e06:	4620      	mov	r0, r4
 8002e08:	f022 f97c 	bl	8025104 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002e0c:	2119      	movs	r1, #25
 8002e0e:	6830      	ldr	r0, [r6, #0]
 8002e10:	f012 ff30 	bl	8015c74 <xQueueSemaphoreTake>
 8002e14:	2801      	cmp	r0, #1
 8002e16:	d1f6      	bne.n	8002e06 <StarLPTask+0x6fe>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6830      	ldr	r0, [r6, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f012 fc8e 	bl	8015740 <xQueueGenericSend>
 8002e24:	2801      	cmp	r0, #1
 8002e26:	d002      	beq.n	8002e2e <StarLPTask+0x726>
				printf("semaphore 1c release failed\n");
 8002e28:	4884      	ldr	r0, [pc, #528]	; (800303c <StarLPTask+0x934>)
 8002e2a:	f022 f96b 	bl	8025104 <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002e2e:	f7fe feab 	bl	8001b88 <lcd_trigplot>
 8002e32:	e644      	b.n	8002abe <StarLPTask+0x3b6>
				gpsbadcount = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	4a82      	ldr	r2, [pc, #520]	; (8003040 <StarLPTask+0x938>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e677      	b.n	8002b2c <StarLPTask+0x424>
			gainchanged = 0;
 8002e3c:	9306      	str	r3, [sp, #24]
 8002e3e:	e662      	b.n	8002b06 <StarLPTask+0x3fe>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8002e40:	4c80      	ldr	r4, [pc, #512]	; (8003044 <StarLPTask+0x93c>)
 8002e42:	8823      	ldrh	r3, [r4, #0]
 8002e44:	454b      	cmp	r3, r9
 8002e46:	4b80      	ldr	r3, [pc, #512]	; (8003048 <StarLPTask+0x940>)
 8002e48:	f43f ae29 	beq.w	8002a9e <StarLPTask+0x396>
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	f47f ae25 	bne.w	8002a9e <StarLPTask+0x396>
				timeinfo = *localtime(&localepochtime);
 8002e54:	487d      	ldr	r0, [pc, #500]	; (800304c <StarLPTask+0x944>)
 8002e56:	f020 ffbd 	bl	8023dd4 <localtime>
 8002e5a:	4e7d      	ldr	r6, [pc, #500]	; (8003050 <StarLPTask+0x948>)
 8002e5c:	4684      	mov	ip, r0
 8002e5e:	46b6      	mov	lr, r6
 8002e60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002e68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002e70:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8002e74:	f8a4 9000 	strh.w	r9, [r4]
				timeinfo = *localtime(&localepochtime);
 8002e78:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8002e7c:	f7fe fc72 	bl	8001764 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8002e80:	4b74      	ldr	r3, [pc, #464]	; (8003054 <StarLPTask+0x94c>)
 8002e82:	69f2      	ldr	r2, [r6, #28]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f43f ae0d 	beq.w	8002aa6 <StarLPTask+0x39e>
					lcd_date();
 8002e8c:	f7fe fcc0 	bl	8001810 <lcd_date>
 8002e90:	e609      	b.n	8002aa6 <StarLPTask+0x39e>
				statuspkt.jabcnt++;
 8002e92:	4955      	ldr	r1, [pc, #340]	; (8002fe8 <StarLPTask+0x8e0>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002e94:	4870      	ldr	r0, [pc, #448]	; (8003058 <StarLPTask+0x950>)
				statuspkt.jabcnt++;
 8002e96:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8002e9a:	3201      	adds	r2, #1
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8002ea2:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002ea4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8002ea6:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <StarLPTask+0x954>)
 8002eaa:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002eac:	f022 f88e 	bl	8024fcc <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8002eb0:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <StarLPTask+0x958>)
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	b93b      	cbnz	r3, 8002ec8 <StarLPTask+0x7c0>
					if (trigthresh < 4095)
 8002eb8:	4a59      	ldr	r2, [pc, #356]	; (8003020 <StarLPTask+0x918>)
 8002eba:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002ebe:	8813      	ldrh	r3, [r2, #0]
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d801      	bhi.n	8002ec8 <StarLPTask+0x7c0>
						trigthresh++;
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8002ec8:	882b      	ldrh	r3, [r5, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d165      	bne.n	8002f9a <StarLPTask+0x892>
				jabtrigcnt = statuspkt.trigcount;
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <StarLPTask+0x8e0>)
 8002ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed2:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8002ed4:	4b63      	ldr	r3, [pc, #396]	; (8003064 <StarLPTask+0x95c>)
 8002ed6:	4a64      	ldr	r2, [pc, #400]	; (8003068 <StarLPTask+0x960>)
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	dd27      	ble.n	8002f32 <StarLPTask+0x82a>
					if (trigthresh < 4095)
 8002ee2:	484f      	ldr	r0, [pc, #316]	; (8003020 <StarLPTask+0x918>)
 8002ee4:	f640 74fe 	movw	r4, #4094	; 0xffe
 8002ee8:	8803      	ldrh	r3, [r0, #0]
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	d801      	bhi.n	8002ef2 <StarLPTask+0x7ea>
						trigthresh++;
 8002eee:	3301      	adds	r3, #1
 8002ef0:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6011      	str	r1, [r2, #0]
 8002ef6:	9306      	str	r3, [sp, #24]
 8002ef8:	e5cb      	b.n	8002a92 <StarLPTask+0x38a>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002efa:	2308      	movs	r3, #8
 8002efc:	4a5b      	ldr	r2, [pc, #364]	; (800306c <StarLPTask+0x964>)
 8002efe:	2100      	movs	r1, #0
 8002f00:	485b      	ldr	r0, [pc, #364]	; (8003070 <StarLPTask+0x968>)
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f08:	f005 fd38 	bl	800897c <HAL_DAC_Start_DMA>
 8002f0c:	e682      	b.n	8002c14 <StarLPTask+0x50c>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8002f0e:	f8df c178 	ldr.w	ip, [pc, #376]	; 8003088 <StarLPTask+0x980>
 8002f12:	4c46      	ldr	r4, [pc, #280]	; (800302c <StarLPTask+0x924>)
 8002f14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f20:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002f24:	f844 0b04 	str.w	r0, [r4], #4
 8002f28:	8021      	strh	r1, [r4, #0]
 8002f2a:	e75b      	b.n	8002de4 <StarLPTask+0x6dc>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8002f2c:	f008 fcf8 	bl	800b920 <HAL_GPIO_WritePin>
 8002f30:	e6ac      	b.n	8002c8c <StarLPTask+0x584>
				if (n == 0) {		// no triggers in last 100mS
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1dd      	bne.n	8002ef2 <StarLPTask+0x7ea>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8002f36:	483a      	ldr	r0, [pc, #232]	; (8003020 <StarLPTask+0x918>)
 8002f38:	8803      	ldrh	r3, [r0, #0]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d9d9      	bls.n	8002ef2 <StarLPTask+0x7ea>
						trigthresh--;
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	8003      	strh	r3, [r0, #0]
 8002f42:	e7d6      	b.n	8002ef2 <StarLPTask+0x7ea>
				if (getpressure115() != HAL_OK) {
 8002f44:	f001 ff1e 	bl	8004d84 <getpressure115>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	f43f adfa 	beq.w	8002b42 <StarLPTask+0x43a>
					printf("MPL115A2 error\n\r");
 8002f4e:	4849      	ldr	r0, [pc, #292]	; (8003074 <StarLPTask+0x96c>)
 8002f50:	f022 f83c 	bl	8024fcc <iprintf>
 8002f54:	e5f5      	b.n	8002b42 <StarLPTask+0x43a>
				lcd_showvars();
 8002f56:	f7fe fc93 	bl	8001880 <lcd_showvars>
 8002f5a:	e5a4      	b.n	8002aa6 <StarLPTask+0x39e>
					gainchanged = bumppga(-1);
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f001 feca 	bl	8004cf8 <bumppga>
 8002f64:	b203      	sxth	r3, r0
 8002f66:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <StarLPTask+0x970>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8002f6e:	9b06      	ldr	r3, [sp, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f77f adc8 	ble.w	8002b06 <StarLPTask+0x3fe>
					if (trigthresh < (4095 - 10))
 8002f76:	8833      	ldrh	r3, [r6, #0]
 8002f78:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	f63f adc2 	bhi.w	8002b06 <StarLPTask+0x3fe>
						trigthresh += 5;
 8002f82:	3305      	adds	r3, #5
 8002f84:	8033      	strh	r3, [r6, #0]
 8002f86:	e5be      	b.n	8002b06 <StarLPTask+0x3fe>
				if (getpressure3115() != HAL_OK) {
 8002f88:	f001 ffaa 	bl	8004ee0 <getpressure3115>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	f43f add8 	beq.w	8002b42 <StarLPTask+0x43a>
					printf("MPL3115A2 error\n\r");
 8002f92:	483a      	ldr	r0, [pc, #232]	; (800307c <StarLPTask+0x974>)
 8002f94:	f022 f81a 	bl	8024fcc <iprintf>
 8002f98:	e5d3      	b.n	8002b42 <StarLPTask+0x43a>
					gainchanged = bumppga(-1);	// decrease gain
 8002f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9e:	f001 feab 	bl	8004cf8 <bumppga>
 8002fa2:	b203      	sxth	r3, r0
 8002fa4:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <StarLPTask+0x8e0>)
 8002fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	e56d      	b.n	8002a8a <StarLPTask+0x382>
						gainchanged = bumppga(1);
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f001 fea2 	bl	8004cf8 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8002fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb8:	2b0a      	cmp	r3, #10
 8002fba:	d8cf      	bhi.n	8002f5c <StarLPTask+0x854>
						gainchanged = bumppga(1);
 8002fbc:	b203      	sxth	r3, r0
 8002fbe:	9306      	str	r3, [sp, #24]
 8002fc0:	e7d2      	b.n	8002f68 <StarLPTask+0x860>
					printf("GPS bad - rebooting...\n");
 8002fc2:	482f      	ldr	r0, [pc, #188]	; (8003080 <StarLPTask+0x978>)
 8002fc4:	f022 f89e 	bl	8025104 <puts>
					osDelay(3000);
 8002fc8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fcc:	f012 f88e 	bl	80150ec <osDelay>
					rebootme(5);
 8002fd0:	2005      	movs	r0, #5
 8002fd2:	f7ff fb77 	bl	80026c4 <rebootme>
 8002fd6:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8002fd8:	482a      	ldr	r0, [pc, #168]	; (8003084 <StarLPTask+0x97c>)
 8002fda:	f022 f893 	bl	8025104 <puts>
		rebootme(0);
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f7ff fb70 	bl	80026c4 <rebootme>
 8002fe4:	20002ab8 	.word	0x20002ab8
 8002fe8:	20002c04 	.word	0x20002c04
 8002fec:	0802a390 	.word	0x0802a390
 8002ff0:	20000054 	.word	0x20000054
 8002ff4:	20002d4c 	.word	0x20002d4c
 8002ff8:	20002d48 	.word	0x20002d48
 8002ffc:	0802a398 	.word	0x0802a398
 8003000:	20000230 	.word	0x20000230
 8003004:	20002d3c 	.word	0x20002d3c
 8003008:	20002d40 	.word	0x20002d40
 800300c:	20000074 	.word	0x20000074
 8003010:	20000748 	.word	0x20000748
 8003014:	0802a3a0 	.word	0x0802a3a0
 8003018:	20000128 	.word	0x20000128
 800301c:	200006f4 	.word	0x200006f4
 8003020:	20000002 	.word	0x20000002
 8003024:	2000023c 	.word	0x2000023c
 8003028:	20002db0 	.word	0x20002db0
 800302c:	20000014 	.word	0x20000014
 8003030:	0802a448 	.word	0x0802a448
 8003034:	0802a498 	.word	0x0802a498
 8003038:	0802a4b4 	.word	0x0802a4b4
 800303c:	0802a4c0 	.word	0x0802a4c0
 8003040:	20001da0 	.word	0x20001da0
 8003044:	20000008 	.word	0x20000008
 8003048:	200016bc 	.word	0x200016bc
 800304c:	20001758 	.word	0x20001758
 8003050:	20001b34 	.word	0x20001b34
 8003054:	200016b0 	.word	0x200016b0
 8003058:	0802a374 	.word	0x0802a374
 800305c:	200006fc 	.word	0x200006fc
 8003060:	20002d38 	.word	0x20002d38
 8003064:	20000750 	.word	0x20000750
 8003068:	200029e8 	.word	0x200029e8
 800306c:	0802a850 	.word	0x0802a850
 8003070:	20001ea0 	.word	0x20001ea0
 8003074:	0802a510 	.word	0x0802a510
 8003078:	20002a1c 	.word	0x20002a1c
 800307c:	0802a524 	.word	0x0802a524
 8003080:	0802a4f8 	.word	0x0802a4f8
 8003084:	0802a1c0 	.word	0x0802a1c0
 8003088:	0802a470 	.word	0x0802a470

0800308c <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 800308c:	2100      	movs	r1, #0
 800308e:	f005 bd11 	b.w	8008ab4 <HAL_DAC_Stop_DMA>
 8003092:	bf00      	nop

08003094 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8003096:	6803      	ldr	r3, [r0, #0]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 800309e:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_TIM_IC_CaptureCallback+0x78>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02d      	beq.n	8003100 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 80030a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80030a6:	4c1a      	ldr	r4, [pc, #104]	; (8003110 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_TIM_IC_CaptureCallback+0x80>)
 80030aa:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80030ae:	3101      	adds	r1, #1
 80030b0:	481a      	ldr	r0, [pc, #104]	; (800311c <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 80030b2:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80030b4:	fba3 5301 	umull	r5, r3, r3, r1
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80030be:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80030c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 80030c6:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80030c8:	4815      	ldr	r0, [pc, #84]	; (8003120 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 80030ca:	b1b2      	cbz	r2, 80030fa <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80030cc:	f008 fc42 	bl	800b954 <HAL_GPIO_TogglePin>
		diff = lastcap;
 80030d0:	4d14      	ldr	r5, [pc, #80]	; (8003124 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 80030d2:	2100      	movs	r1, #0
		diff = lastcap;
 80030d4:	4e14      	ldr	r6, [pc, #80]	; (8003128 <HAL_TIM_IC_CaptureCallback+0x94>)
 80030d6:	462b      	mov	r3, r5
 80030d8:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80030dc:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 80030e4:	4298      	cmp	r0, r3
		sum += data[i];
 80030e6:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 80030e8:	d1f9      	bne.n	80030de <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 80030ea:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 80030ee:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 80030f0:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80030f2:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 80030f4:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80030f6:	6033      	str	r3, [r6, #0]
}
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80030fa:	f008 fc11 	bl	800b920 <HAL_GPIO_WritePin>
 80030fe:	e7e7      	b.n	80030d0 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8003100:	480b      	ldr	r0, [pc, #44]	; (8003130 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8003102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8003106:	f021 bffd 	b.w	8025104 <puts>
 800310a:	bf00      	nop
 800310c:	40000800 	.word	0x40000800
 8003110:	20002c04 	.word	0x20002c04
 8003114:	88888889 	.word	0x88888889
 8003118:	20000270 	.word	0x20000270
 800311c:	20000754 	.word	0x20000754
 8003120:	40020c00 	.word	0x40020c00
 8003124:	20001d58 	.word	0x20001d58
 8003128:	200029e4 	.word	0x200029e4
 800312c:	20000768 	.word	0x20000768
 8003130:	0802a5b4 	.word	0x0802a5b4

08003134 <getboardpcb>:
void getboardpcb() {
 8003134:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003136:	2101      	movs	r1, #1
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <getboardpcb+0x18>)
 800313a:	f008 fbdf 	bl	800b8fc <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 800313e:	2800      	cmp	r0, #0
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <getboardpcb+0x1c>)
 8003142:	bf0c      	ite	eq
 8003144:	2216      	moveq	r2, #22
 8003146:	220b      	movne	r2, #11
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bd08      	pop	{r3, pc}
 800314c:	40020800 	.word	0x40020800
 8003150:	20001d4c 	.word	0x20001d4c

08003154 <uart2_rxdone>:
void uart2_rxdone() {
 8003154:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 8003156:	4807      	ldr	r0, [pc, #28]	; (8003174 <uart2_rxdone+0x20>)
 8003158:	2300      	movs	r3, #0
 800315a:	4907      	ldr	r1, [pc, #28]	; (8003178 <uart2_rxdone+0x24>)
 800315c:	461a      	mov	r2, r3
 800315e:	6800      	ldr	r0, [r0, #0]
 8003160:	f012 fbee 	bl	8015940 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003164:	2201      	movs	r2, #1
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <uart2_rxdone+0x24>)
 8003168:	4804      	ldr	r0, [pc, #16]	; (800317c <uart2_rxdone+0x28>)
}
 800316a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800316e:	f00f bee7 	b.w	8012f40 <HAL_UART_Receive_IT>
 8003172:	bf00      	nop
 8003174:	20001d54 	.word	0x20001d54
 8003178:	20001d50 	.word	0x20001d50
 800317c:	20002644 	.word	0x20002644

08003180 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	4293      	cmp	r3, r2
 8003186:	d029      	beq.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02d      	beq.n	80031ea <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d02c      	beq.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8003194:	4a22      	ldr	r2, [pc, #136]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d030      	beq.n	80031fc <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800319a:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d005      	beq.n	80031ac <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 80031a0:	4a21      	ldr	r2, [pc, #132]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 80031a6:	4821      	ldr	r0, [pc, #132]	; (800322c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80031a8:	f021 bfac 	b.w	8025104 <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031ac:	b510      	push	{r4, lr}
		t1sec++;
 80031ae:	4920      	ldr	r1, [pc, #128]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 80031b0:	4c20      	ldr	r4, [pc, #128]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 80031b2:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 80031b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 80031b6:	4820      	ldr	r0, [pc, #128]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 80031b8:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 80031ba:	3301      	adds	r3, #1
		if (netup)
 80031bc:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 80031be:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 80031c0:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 80031c2:	b110      	cbz	r0, 80031ca <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 80031c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80031c6:	3301      	adds	r3, #1
 80031c8:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b9c3      	cbnz	r3, 8003202 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 80031d2:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 80031d4:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 80031d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 80031da:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	6013      	str	r3, [r2, #0]
		return;
 80031e4:	4770      	bx	lr
		HAL_IncTick();
 80031e6:	f004 be0d 	b.w	8007e04 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 80031ea:	f7fd bb4f 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80031f2:	4816      	ldr	r0, [pc, #88]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80031f4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	f021 bee8 	b.w	8024fcc <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80031fc:	4814      	ldr	r0, [pc, #80]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80031fe:	f021 bf81 	b.w	8025104 <puts>
			statuspkt.gpsuptime++;
 8003202:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003204:	3301      	adds	r3, #1
 8003206:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8003208:	f001 f854 	bl	80042b4 <calcepoch32>
				epochvalid = 1;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800320e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8003210:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8003214:	701a      	strb	r2, [r3, #0]
}
 8003216:	bd10      	pop	{r4, pc}
 8003218:	40002000 	.word	0x40002000
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40001000 	.word	0x40001000
 8003228:	40001800 	.word	0x40001800
 800322c:	0802a604 	.word	0x0802a604
 8003230:	20002a18 	.word	0x20002a18
 8003234:	20002c04 	.word	0x20002c04
 8003238:	2000074a 	.word	0x2000074a
 800323c:	20002db0 	.word	0x20002db0
 8003240:	20002da8 	.word	0x20002da8
 8003244:	20002a10 	.word	0x20002a10
 8003248:	20000768 	.word	0x20000768
 800324c:	0802a5c4 	.word	0x0802a5c4
 8003250:	0802a5e8 	.word	0x0802a5e8

08003254 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8003254:	4c02      	ldr	r4, [pc, #8]	; (8003260 <Error_Handler+0xc>)
void Error_Handler(void) {
 8003256:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8003258:	4620      	mov	r0, r4
 800325a:	f021 ff53 	bl	8025104 <puts>
	while (1) {
 800325e:	e7fb      	b.n	8003258 <Error_Handler+0x4>
 8003260:	0802a62c 	.word	0x0802a62c

08003264 <SystemClock_Config>:
void SystemClock_Config(void) {
 8003264:	b530      	push	{r4, r5, lr}
 8003266:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003268:	2234      	movs	r2, #52	; 0x34
 800326a:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326c:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800326e:	a807      	add	r0, sp, #28
 8003270:	f020 ff10 	bl	8024094 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003274:	2300      	movs	r3, #0
 8003276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800327a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800327e:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8003280:	f009 ff62 	bl	800d148 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4a20      	ldr	r2, [pc, #128]	; (8003308 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003286:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800328a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800328c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003290:	6411      	str	r1, [r2, #64]	; 0x40
 8003292:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003294:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032a2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80032a4:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a6:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032a8:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032ae:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 80032b0:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b2:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b8:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032ba:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80032be:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80032c4:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 80032c6:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032c8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 80032ca:	23d8      	movs	r3, #216	; 0xd8
 80032cc:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80032d0:	2306      	movs	r3, #6
 80032d2:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80032d4:	f009 ff7a 	bl	800d1cc <HAL_RCC_OscConfig>
 80032d8:	b9a0      	cbnz	r0, 8003304 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80032da:	f009 ff3d 	bl	800d158 <HAL_PWREx_EnableOverDrive>
 80032de:	4603      	mov	r3, r0
 80032e0:	b980      	cbnz	r0, 8003304 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e2:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e4:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80032e8:	a802      	add	r0, sp, #8
 80032ea:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ec:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032f4:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032f8:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80032fa:	f00a fa3d 	bl	800d778 <HAL_RCC_ClockConfig>
 80032fe:	b908      	cbnz	r0, 8003304 <SystemClock_Config+0xa0>
}
 8003300:	b015      	add	sp, #84	; 0x54
 8003302:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8003304:	f7ff ffa6 	bl	8003254 <Error_Handler>
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000

08003310 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8003310:	b510      	push	{r4, lr}
 8003312:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003314:	228c      	movs	r2, #140	; 0x8c
 8003316:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003318:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800331a:	a801      	add	r0, sp, #4
 800331c:	f020 feba 	bl	8024094 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003320:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003322:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003326:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003328:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800332a:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800332c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003330:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003332:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003334:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003336:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003338:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800333a:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800333e:	f00a fb81 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8003342:	b908      	cbnz	r0, 8003348 <PeriphCommonClock_Config+0x38>
}
 8003344:	b024      	add	sp, #144	; 0x90
 8003346:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003348:	f7ff ff84 	bl	8003254 <Error_Handler>

0800334c <main>:
int main(void) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b0dc      	sub	sp, #368	; 0x170
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003354:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003358:	4bc2      	ldr	r3, [pc, #776]	; (8003664 <main+0x318>)
 800335a:	2400      	movs	r4, #0
 800335c:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003364:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800336e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003374:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003378:	4dbb      	ldr	r5, [pc, #748]	; (8003668 <main+0x31c>)
	HAL_Init();
 800337a:	f004 fd31 	bl	8007de0 <HAL_Init>
	SystemClock_Config();
 800337e:	f7ff ff71 	bl	8003264 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003382:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 8003384:	f7ff ffc4 	bl	8003310 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003388:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800338a:	4622      	mov	r2, r4
 800338c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003390:	48b6      	ldr	r0, [pc, #728]	; (800366c <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003392:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003398:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 800339c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033a0:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 80033a4:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80033a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033aa:	f043 0310 	orr.w	r3, r3, #16
 80033ae:	632b      	str	r3, [r5, #48]	; 0x30
 80033b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	632b      	str	r3, [r5, #48]	; 0x30
 80033c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	9304      	str	r3, [sp, #16]
 80033ca:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80033cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033ce:	f043 0320 	orr.w	r3, r3, #32
 80033d2:	632b      	str	r3, [r5, #48]	; 0x30
 80033d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	9305      	str	r3, [sp, #20]
 80033dc:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80033de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	632b      	str	r3, [r5, #48]	; 0x30
 80033e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	9306      	str	r3, [sp, #24]
 80033ee:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	632b      	str	r3, [r5, #48]	; 0x30
 80033f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	9307      	str	r3, [sp, #28]
 8003400:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	632b      	str	r3, [r5, #48]	; 0x30
 800340a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	9308      	str	r3, [sp, #32]
 8003412:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003414:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341a:	632b      	str	r3, [r5, #48]	; 0x30
 800341c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	9309      	str	r3, [sp, #36]	; 0x24
 8003424:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003426:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	632b      	str	r3, [r5, #48]	; 0x30
 800342e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	930a      	str	r3, [sp, #40]	; 0x28
 8003436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8003438:	f008 fa72 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800343c:	4622      	mov	r2, r4
 800343e:	f644 0181 	movw	r1, #18561	; 0x4881
 8003442:	488b      	ldr	r0, [pc, #556]	; (8003670 <main+0x324>)
 8003444:	f008 fa6c 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8003448:	4622      	mov	r2, r4
 800344a:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 800344e:	4889      	ldr	r0, [pc, #548]	; (8003674 <main+0x328>)
 8003450:	f008 fa66 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8003454:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003458:	4887      	ldr	r0, [pc, #540]	; (8003678 <main+0x32c>)
 800345a:	2201      	movs	r2, #1
 800345c:	f008 fa60 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003460:	4622      	mov	r2, r4
 8003462:	2144      	movs	r1, #68	; 0x44
 8003464:	4885      	ldr	r0, [pc, #532]	; (800367c <main+0x330>)
 8003466:	f008 fa5b 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 800346a:	4622      	mov	r2, r4
 800346c:	2102      	movs	r1, #2
 800346e:	4882      	ldr	r0, [pc, #520]	; (8003678 <main+0x32c>)
 8003470:	f008 fa56 	bl	800b920 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8003474:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003478:	a955      	add	r1, sp, #340	; 0x154
 800347a:	487e      	ldr	r0, [pc, #504]	; (8003674 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 800347c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800347e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003482:	f007 ffa1 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800348a:	a955      	add	r1, sp, #340	; 0x154
 800348c:	487c      	ldr	r0, [pc, #496]	; (8003680 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800348e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003490:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003496:	f007 ff97 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 800349a:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800349e:	a955      	add	r1, sp, #340	; 0x154
 80034a0:	4872      	ldr	r0, [pc, #456]	; (800366c <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 80034a2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034a8:	f007 ff8e 	bl	800b3c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80034ac:	a955      	add	r1, sp, #340	; 0x154
 80034ae:	486f      	ldr	r0, [pc, #444]	; (800366c <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 80034b0:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b8:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f007 ff84 	bl	800b3c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c0:	a955      	add	r1, sp, #340	; 0x154
 80034c2:	486f      	ldr	r0, [pc, #444]	; (8003680 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c4:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c6:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ca:	f007 ff7d 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034ce:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	a955      	add	r1, sp, #340	; 0x154
 80034d2:	486c      	ldr	r0, [pc, #432]	; (8003684 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034d4:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f007 ff75 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80034de:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	a955      	add	r1, sp, #340	; 0x154
 80034e4:	4862      	ldr	r0, [pc, #392]	; (8003670 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80034e6:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ee:	f007 ff6b 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80034f2:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f4:	a955      	add	r1, sp, #340	; 0x154
 80034f6:	485e      	ldr	r0, [pc, #376]	; (8003670 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80034f8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f007 ff63 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8003502:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003506:	a955      	add	r1, sp, #340	; 0x154
 8003508:	485c      	ldr	r0, [pc, #368]	; (800367c <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 800350a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003510:	f007 ff5a 	bl	800b3c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	a955      	add	r1, sp, #340	; 0x154
 8003516:	4857      	ldr	r0, [pc, #348]	; (8003674 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800351a:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800351e:	f007 ff53 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8003522:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003526:	a955      	add	r1, sp, #340	; 0x154
 8003528:	4852      	ldr	r0, [pc, #328]	; (8003674 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 800352a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800352c:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003532:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800353a:	f007 ff45 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 800353e:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003542:	a955      	add	r1, sp, #340	; 0x154
 8003544:	484c      	ldr	r0, [pc, #304]	; (8003678 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8003546:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800354c:	f007 ff3c 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003550:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003554:	a955      	add	r1, sp, #340	; 0x154
 8003556:	4848      	ldr	r0, [pc, #288]	; (8003678 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003558:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003560:	f007 ff32 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8003564:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003566:	a955      	add	r1, sp, #340	; 0x154
 8003568:	4844      	ldr	r0, [pc, #272]	; (800367c <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800356a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003572:	f007 ff29 	bl	800b3c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003576:	a955      	add	r1, sp, #340	; 0x154
 8003578:	4840      	ldr	r0, [pc, #256]	; (800367c <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800357a:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003582:	f007 ff21 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003586:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358a:	a955      	add	r1, sp, #340	; 0x154
 800358c:	483c      	ldr	r0, [pc, #240]	; (8003680 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800358e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	f007 ff18 	bl	800b3c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003598:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	a955      	add	r1, sp, #340	; 0x154
 800359e:	4839      	ldr	r0, [pc, #228]	; (8003684 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 80035a4:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	f007 ff0c 	bl	800b3c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80035b0:	a955      	add	r1, sp, #340	; 0x154
 80035b2:	4831      	ldr	r0, [pc, #196]	; (8003678 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b4:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b8:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f007 ff04 	bl	800b3c8 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80035c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80035c2:	4639      	mov	r1, r7
 80035c4:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80035c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80035ca:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80035cc:	632b      	str	r3, [r5, #48]	; 0x30
 80035ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80035d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80035da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035de:	632b      	str	r3, [r5, #48]	; 0x30
 80035e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 80035e2:	4d29      	ldr	r5, [pc, #164]	; (8003688 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80035ec:	f005 f86e 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80035f0:	200b      	movs	r0, #11
 80035f2:	f005 f8b5 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80035f6:	4622      	mov	r2, r4
 80035f8:	2106      	movs	r1, #6
 80035fa:	4650      	mov	r0, sl
 80035fc:	f005 f866 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003600:	4650      	mov	r0, sl
 8003602:	f005 f8ad 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8003606:	4622      	mov	r2, r4
 8003608:	2106      	movs	r1, #6
 800360a:	2010      	movs	r0, #16
 800360c:	f005 f85e 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003610:	2010      	movs	r0, #16
 8003612:	f005 f8a5 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8003616:	4622      	mov	r2, r4
 8003618:	4639      	mov	r1, r7
 800361a:	2011      	movs	r0, #17
 800361c:	f005 f856 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003620:	2011      	movs	r0, #17
 8003622:	f005 f89d 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8003626:	4622      	mov	r2, r4
 8003628:	4639      	mov	r1, r7
 800362a:	202f      	movs	r0, #47	; 0x2f
 800362c:	f005 f84e 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003630:	202f      	movs	r0, #47	; 0x2f
 8003632:	f005 f895 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8003636:	4622      	mov	r2, r4
 8003638:	2106      	movs	r1, #6
 800363a:	2039      	movs	r0, #57	; 0x39
 800363c:	f005 f846 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003640:	2039      	movs	r0, #57	; 0x39
 8003642:	f005 f88d 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8003646:	4622      	mov	r2, r4
 8003648:	4649      	mov	r1, r9
 800364a:	203c      	movs	r0, #60	; 0x3c
 800364c:	f005 f83e 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003650:	203c      	movs	r0, #60	; 0x3c
 8003652:	f005 f885 	bl	8008760 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8003656:	4622      	mov	r2, r4
 8003658:	4639      	mov	r1, r7
 800365a:	2045      	movs	r0, #69	; 0x45
 800365c:	f005 f836 	bl	80086cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003660:	2045      	movs	r0, #69	; 0x45
 8003662:	e013      	b.n	800368c <main+0x340>
 8003664:	e000ed00 	.word	0xe000ed00
 8003668:	40023800 	.word	0x40023800
 800366c:	40021400 	.word	0x40021400
 8003670:	40020400 	.word	0x40020400
 8003674:	40021000 	.word	0x40021000
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021800 	.word	0x40021800
 8003680:	40020800 	.word	0x40020800
 8003684:	40020000 	.word	0x40020000
 8003688:	40004400 	.word	0x40004400
 800368c:	f005 f868 	bl	8008760 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8003690:	48bd      	ldr	r0, [pc, #756]	; (8003988 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8003692:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003696:	4622      	mov	r2, r4
 8003698:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 800369a:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 800369e:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 80036a0:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80036a4:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 80036a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036aa:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ae:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80036b2:	f00f fce7 	bl	8013084 <HAL_RS485Ex_Init>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	f040 8446 	bne.w	8003f48 <main+0xbfc>
	hadc1.Instance = ADC1;
 80036bc:	4cb3      	ldr	r4, [pc, #716]	; (800398c <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036be:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80036c2:	4bb3      	ldr	r3, [pc, #716]	; (8003990 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 80036c4:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80036c6:	9045      	str	r0, [sp, #276]	; 0x114
 80036c8:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036ca:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036cc:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036ce:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036d2:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036d4:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036d6:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80036d8:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 80036da:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80036dc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036e0:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036e4:	4bab      	ldr	r3, [pc, #684]	; (8003994 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 80036e6:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80036ea:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80036ee:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036f0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80036f2:	f004 fbab 	bl	8007e4c <HAL_ADC_Init>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f040 8426 	bne.w	8003f48 <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80036fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8003700:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003702:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003704:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003706:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800370a:	4620      	mov	r0, r4
 800370c:	f004 ff5e 	bl	80085cc <HAL_ADCEx_MultiModeConfigChannel>
 8003710:	2800      	cmp	r0, #0
 8003712:	f040 8419 	bne.w	8003f48 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003716:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003718:	a945      	add	r1, sp, #276	; 0x114
 800371a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800371c:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003720:	f004 fe60 	bl	80083e4 <HAL_ADC_ConfigChannel>
 8003724:	2800      	cmp	r0, #0
 8003726:	f040 840f 	bne.w	8003f48 <main+0xbfc>
	hadc2.Instance = ADC2;
 800372a:	4c9b      	ldr	r4, [pc, #620]	; (8003998 <main+0x64c>)
 800372c:	4b9b      	ldr	r3, [pc, #620]	; (800399c <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800372e:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003730:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003734:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8003736:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800373a:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 800373c:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 800373e:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8003740:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003742:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8003746:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800374a:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800374e:	4620      	mov	r0, r4
 8003750:	f004 fb7c 	bl	8007e4c <HAL_ADC_Init>
 8003754:	2800      	cmp	r0, #0
 8003756:	f040 83f7 	bne.w	8003f48 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800375a:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800375c:	a941      	add	r1, sp, #260	; 0x104
 800375e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003760:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003764:	f004 fe3e 	bl	80083e4 <HAL_ADC_ConfigChannel>
 8003768:	2800      	cmp	r0, #0
 800376a:	f040 83ed 	bne.w	8003f48 <main+0xbfc>
	hadc3.Instance = ADC3;
 800376e:	4c8c      	ldr	r4, [pc, #560]	; (80039a0 <main+0x654>)
 8003770:	4b8c      	ldr	r3, [pc, #560]	; (80039a4 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003772:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003774:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003778:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800377a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800377e:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8003780:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8003782:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8003784:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003786:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 800378a:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800378e:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8003792:	4620      	mov	r0, r4
 8003794:	f004 fb5a 	bl	8007e4c <HAL_ADC_Init>
 8003798:	2800      	cmp	r0, #0
 800379a:	f040 83d5 	bne.w	8003f48 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800379e:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80037a0:	a93d      	add	r1, sp, #244	; 0xf4
 80037a2:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80037a4:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80037a8:	f004 fe1c 	bl	80083e4 <HAL_ADC_ConfigChannel>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	f040 83cb 	bne.w	8003f48 <main+0xbfc>
	hrng.Instance = RNG;
 80037b2:	487d      	ldr	r0, [pc, #500]	; (80039a8 <main+0x65c>)
 80037b4:	4b7d      	ldr	r3, [pc, #500]	; (80039ac <main+0x660>)
 80037b6:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80037b8:	f00a fe24 	bl	800e404 <HAL_RNG_Init>
 80037bc:	2800      	cmp	r0, #0
 80037be:	f040 83c3 	bne.w	8003f48 <main+0xbfc>
	htim6.Instance = TIM6;
 80037c2:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 80037c4:	f642 2230 	movw	r2, #10800	; 0x2a30
 80037c8:	497a      	ldr	r1, [pc, #488]	; (80039b4 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037ca:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037cc:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ce:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 80037d2:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 80037d6:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037da:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80037de:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 80037e0:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80037e2:	f00c fbff 	bl	800ffe4 <HAL_TIM_Base_Init>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	f040 83ae 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80037ec:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80037ee:	a91f      	add	r1, sp, #124	; 0x7c
 80037f0:	486f      	ldr	r0, [pc, #444]	; (80039b0 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80037f2:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80037f8:	f00e f85e 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f040 83a3 	bne.w	8003f48 <main+0xbfc>
	htim3.Instance = TIM3;
 8003802:	4c6d      	ldr	r4, [pc, #436]	; (80039b8 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8003804:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003808:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80039dc <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800380c:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800380e:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003810:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003812:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003814:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003816:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003818:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800381a:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 800381c:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8003820:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003824:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8003828:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 800382c:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003830:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003834:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003838:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 800383a:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800383c:	f00c fbd2 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003840:	2800      	cmp	r0, #0
 8003842:	f040 8381 	bne.w	8003f48 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003846:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800384a:	a939      	add	r1, sp, #228	; 0xe4
 800384c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800384e:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003850:	f00b fe5e 	bl	800f510 <HAL_TIM_ConfigClockSource>
 8003854:	2800      	cmp	r0, #0
 8003856:	f040 8377 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800385a:	4620      	mov	r0, r4
 800385c:	f00c fd5e 	bl	801031c <HAL_TIM_PWM_Init>
 8003860:	2800      	cmp	r0, #0
 8003862:	f040 8371 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003866:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003868:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386a:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800386c:	4620      	mov	r0, r4
 800386e:	f00e f823 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003872:	2800      	cmp	r0, #0
 8003874:	f040 8368 	bne.w	8003f48 <main+0xbfc>
	sConfigOC.Pulse = 10;
 8003878:	230a      	movs	r3, #10
 800387a:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800387e:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003880:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003882:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003884:	a955      	add	r1, sp, #340	; 0x154
 8003886:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8003888:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800388c:	f00d f8c4 	bl	8010a18 <HAL_TIM_PWM_ConfigChannel>
 8003890:	4605      	mov	r5, r0
 8003892:	2800      	cmp	r0, #0
 8003894:	f040 8358 	bne.w	8003f48 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8003898:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 800389a:	4c48      	ldr	r4, [pc, #288]	; (80039bc <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 800389c:	f002 fa10 	bl	8005cc0 <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 80038a0:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80038a2:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a4:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 80038a6:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 80038a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038ac:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 80038ae:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038b4:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80038b8:	f00c fb94 	bl	800ffe4 <HAL_TIM_Base_Init>
 80038bc:	2800      	cmp	r0, #0
 80038be:	f040 8343 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038c2:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c4:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80038c6:	a919      	add	r1, sp, #100	; 0x64
 80038c8:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038ca:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80038cc:	f00d fff4 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	f040 8339 	bne.w	8003f48 <main+0xbfc>
	htim1.Instance = TIM1;
 80038d6:	4c3b      	ldr	r4, [pc, #236]	; (80039c4 <main+0x678>)
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038da:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 80038dc:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 80038de:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038e2:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 80038e4:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80038e6:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 80038ea:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ee:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 80038f2:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80038f6:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80038fa:	4620      	mov	r0, r4
 80038fc:	f00c fb72 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003900:	2800      	cmp	r0, #0
 8003902:	f040 8321 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003906:	a935      	add	r1, sp, #212	; 0xd4
 8003908:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390a:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800390c:	f00b fe00 	bl	800f510 <HAL_TIM_ConfigClockSource>
 8003910:	2800      	cmp	r0, #0
 8003912:	f040 8319 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003916:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003918:	a916      	add	r1, sp, #88	; 0x58
 800391a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391c:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800391e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003922:	f00d ffc9 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2800      	cmp	r0, #0
 800392a:	f040 830d 	bne.w	8003f48 <main+0xbfc>
	hcrc.Instance = CRC;
 800392e:	4827      	ldr	r0, [pc, #156]	; (80039cc <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003930:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003932:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003934:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003936:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <main+0x684>)
 800393c:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800393e:	f004 ff3d 	bl	80087bc <HAL_CRC_Init>
 8003942:	2800      	cmp	r0, #0
 8003944:	f040 8300 	bne.w	8003f48 <main+0xbfc>
	htim2.Instance = TIM2;
 8003948:	4c22      	ldr	r4, [pc, #136]	; (80039d4 <main+0x688>)
 800394a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800394e:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003950:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8003952:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003956:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003958:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800395a:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800395c:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395e:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003960:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003962:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8003964:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003966:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800396a:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 800396e:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003972:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003976:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800397a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800397e:	4620      	mov	r0, r4
 8003980:	f00c fb30 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003984:	e02c      	b.n	80039e0 <main+0x694>
 8003986:	bf00      	nop
 8003988:	20002644 	.word	0x20002644
 800398c:	20001da4 	.word	0x20001da4
 8003990:	40012000 	.word	0x40012000
 8003994:	0f000001 	.word	0x0f000001
 8003998:	20001dec 	.word	0x20001dec
 800399c:	40012100 	.word	0x40012100
 80039a0:	20001e34 	.word	0x20001e34
 80039a4:	40012200 	.word	0x40012200
 80039a8:	200022a8 	.word	0x200022a8
 80039ac:	50060800 	.word	0x50060800
 80039b0:	200025ac 	.word	0x200025ac
 80039b4:	40001000 	.word	0x40001000
 80039b8:	200024c8 	.word	0x200024c8
 80039bc:	200025f8 	.word	0x200025f8
 80039c0:	40001400 	.word	0x40001400
 80039c4:	200023e4 	.word	0x200023e4
 80039c8:	40010000 	.word	0x40010000
 80039cc:	20001e7c 	.word	0x20001e7c
 80039d0:	40023000 	.word	0x40023000
 80039d4:	2000247c 	.word	0x2000247c
 80039d8:	ee6b2800 	.word	0xee6b2800
 80039dc:	40000400 	.word	0x40000400
 80039e0:	2800      	cmp	r0, #0
 80039e2:	f040 82b1 	bne.w	8003f48 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80039ea:	a92d      	add	r1, sp, #180	; 0xb4
 80039ec:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ee:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80039f0:	f00b fd8e 	bl	800f510 <HAL_TIM_ConfigClockSource>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	f040 82a7 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80039fa:	4620      	mov	r0, r4
 80039fc:	f00c fd5c 	bl	80104b8 <HAL_TIM_IC_Init>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f040 82a1 	bne.w	8003f48 <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003a06:	2704      	movs	r7, #4
 8003a08:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a0a:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003a0c:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8003a0e:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003a10:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003a12:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003a16:	f00c f855 	bl	800fac4 <HAL_TIM_SlaveConfigSynchro>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	f040 8294 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a20:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003a22:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a24:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003a26:	4620      	mov	r0, r4
 8003a28:	f00d ff46 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	f040 828a 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003a34:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a36:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8003a3a:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f00d fa0a 	bl	8010e58 <HAL_TIM_IC_ConfigChannel>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f040 827f 	bne.w	8003f48 <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003a4a:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003a4c:	463a      	mov	r2, r7
 8003a4e:	a931      	add	r1, sp, #196	; 0xc4
 8003a50:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003a52:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003a54:	f00d fa00 	bl	8010e58 <HAL_TIM_IC_ConfigChannel>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f040 8275 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003a5e:	a931      	add	r1, sp, #196	; 0xc4
 8003a60:	4620      	mov	r0, r4
 8003a62:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a64:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003a66:	f00d f9f7 	bl	8010e58 <HAL_TIM_IC_ConfigChannel>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	f040 826c 	bne.w	8003f48 <main+0xbfc>
	huart6.Instance = USART6;
 8003a70:	48c1      	ldr	r0, [pc, #772]	; (8003d78 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a72:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8003a74:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003a78:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8003a7a:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a7c:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003a7e:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003a80:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a84:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8003a88:	4bbc      	ldr	r3, [pc, #752]	; (8003d7c <main+0xa30>)
 8003a8a:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003a8e:	2310      	movs	r3, #16
 8003a90:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a96:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003a98:	f00f f8dc 	bl	8012c54 <HAL_UART_Init>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	f040 8253 	bne.w	8003f48 <main+0xbfc>
	hdac.Instance = DAC;
 8003aa2:	4cb7      	ldr	r4, [pc, #732]	; (8003d80 <main+0xa34>)
 8003aa4:	4bb7      	ldr	r3, [pc, #732]	; (8003d84 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8003aa6:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8003aaa:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8003aac:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8003aae:	f004 ff41 	bl	8008934 <HAL_DAC_Init>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f040 8247 	bne.w	8003f48 <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003aba:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8003abc:	4620      	mov	r0, r4
 8003abe:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003ac0:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003ac2:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8003ac4:	f005 f892 	bl	8008bec <HAL_DAC_ConfigChannel>
 8003ac8:	4607      	mov	r7, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	f040 823c 	bne.w	8003f48 <main+0xbfc>
	MX_FATFS_Init();
 8003ad0:	f010 f934 	bl	8013d3c <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8003ad4:	4cac      	ldr	r4, [pc, #688]	; (8003d88 <main+0xa3c>)
 8003ad6:	4bad      	ldr	r3, [pc, #692]	; (8003d8c <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003ad8:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 8003ada:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 8003adc:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 8003ade:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ae2:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8003ae4:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8003ae8:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aea:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 8003aec:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003af0:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003af4:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003af6:	f008 f947 	bl	800bd88 <HAL_I2C_Init>
 8003afa:	4601      	mov	r1, r0
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 8223 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003b02:	4620      	mov	r0, r4
 8003b04:	f008 fc98 	bl	800c438 <HAL_I2CEx_ConfigAnalogFilter>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f040 821c 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003b10:	4620      	mov	r0, r4
 8003b12:	f008 fce3 	bl	800c4dc <HAL_I2CEx_ConfigDigitalFilter>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f040 8215 	bne.w	8003f48 <main+0xbfc>
	huart4.Instance = UART4;
 8003b1e:	489c      	ldr	r0, [pc, #624]	; (8003d90 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8003b20:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003b24:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b28:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003b2a:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003b2c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003b30:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b34:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8003b38:	4b96      	ldr	r3, [pc, #600]	; (8003d94 <main+0xa48>)
 8003b3a:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8003b3e:	f00f f889 	bl	8012c54 <HAL_UART_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f040 81ff 	bne.w	8003f48 <main+0xbfc>
	huart5.Instance = UART5;
 8003b4a:	4893      	ldr	r0, [pc, #588]	; (8003d98 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4c:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003b50:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b54:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b58:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b5c:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8003b5e:	4b8f      	ldr	r3, [pc, #572]	; (8003d9c <main+0xa50>)
 8003b60:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8003b62:	f00f f877 	bl	8012c54 <HAL_UART_Init>
 8003b66:	4602      	mov	r2, r0
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	f040 81ed 	bne.w	8003f48 <main+0xbfc>
	huart3.Instance = USART3;
 8003b6e:	488c      	ldr	r0, [pc, #560]	; (8003da0 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003b70:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8003b72:	4b8c      	ldr	r3, [pc, #560]	; (8003da4 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8003b74:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 8003b76:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003b78:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003b7a:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003b7c:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b84:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003b88:	f00f f912 	bl	8012db0 <HAL_MultiProcessor_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f040 81da 	bne.w	8003f48 <main+0xbfc>
	hspi4.Instance = SPI4;
 8003b94:	4884      	ldr	r0, [pc, #528]	; (8003da8 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003b96:	4a85      	ldr	r2, [pc, #532]	; (8003dac <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b98:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003b9a:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ba2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003baa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003bae:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003bb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bb6:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8003bb8:	2307      	movs	r3, #7
 8003bba:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8003bc0:	f00a fd56 	bl	800e670 <HAL_SPI_Init>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	f040 81bf 	bne.w	8003f48 <main+0xbfc>
	hspi3.Instance = SPI3;
 8003bca:	4879      	ldr	r0, [pc, #484]	; (8003db0 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003bcc:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bce:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd2:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bd4:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8003bd6:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bd8:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 8003bda:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bdc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003be0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be4:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003be8:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 8003bec:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <main+0xa68>)
 8003bee:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8003bf0:	f00a fd3e 	bl	800e670 <HAL_SPI_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f040 81a6 	bne.w	8003f48 <main+0xbfc>
	hspi2.Instance = SPI2;
 8003bfc:	486e      	ldr	r0, [pc, #440]	; (8003db8 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bfe:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003de8 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c02:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c04:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c06:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c08:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 8003c0a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c10:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003c18:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003c1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c20:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c22:	2338      	movs	r3, #56	; 0x38
 8003c24:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c26:	2308      	movs	r3, #8
 8003c28:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003c2a:	f00a fd21 	bl	800e670 <HAL_SPI_Init>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	f040 818a 	bne.w	8003f48 <main+0xbfc>
	hi2c4.Instance = I2C4;
 8003c34:	4c61      	ldr	r4, [pc, #388]	; (8003dbc <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c36:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8003c38:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <main+0xa74>)
 8003c3a:	4f62      	ldr	r7, [pc, #392]	; (8003dc4 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8003c3c:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c3e:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c40:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8003c42:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c46:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003c4a:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8003c4c:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003c50:	f008 f89a 	bl	800bd88 <HAL_I2C_Init>
 8003c54:	4601      	mov	r1, r0
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f040 8176 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f008 fbeb 	bl	800c438 <HAL_I2CEx_ConfigAnalogFilter>
 8003c62:	4601      	mov	r1, r0
 8003c64:	2800      	cmp	r0, #0
 8003c66:	f040 816f 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f008 fc36 	bl	800c4dc <HAL_I2CEx_ConfigDigitalFilter>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f040 8169 	bne.w	8003f48 <main+0xbfc>
	hi2c2.Instance = I2C2;
 8003c76:	4c54      	ldr	r4, [pc, #336]	; (8003dc8 <main+0xa7c>)
 8003c78:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c7a:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8003c7c:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8003c7e:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8003c80:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8003c84:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c88:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f008 f87b 	bl	800bd88 <HAL_I2C_Init>
 8003c92:	4601      	mov	r1, r0
 8003c94:	2800      	cmp	r0, #0
 8003c96:	f040 8157 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f008 fbcc 	bl	800c438 <HAL_I2CEx_ConfigAnalogFilter>
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	f040 8150 	bne.w	8003f48 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f008 fc17 	bl	800c4dc <HAL_I2CEx_ConfigDigitalFilter>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	f040 814a 	bne.w	8003f48 <main+0xbfc>
	htim4.Instance = TIM4;
 8003cb4:	4c46      	ldr	r4, [pc, #280]	; (8003dd0 <main+0xa84>)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003cb8:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 8003cba:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8003cbc:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003cc0:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8003cc2:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cc4:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003cc6:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc8:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cca:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ccc:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003cce:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003cd2:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 8003cd6:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 8003cda:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cde:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ce2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f00c f97c 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	f040 812b 	bne.w	8003f48 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003cf6:	a929      	add	r1, sp, #164	; 0xa4
 8003cf8:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cfa:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003cfc:	f00b fc08 	bl	800f510 <HAL_TIM_ConfigClockSource>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f040 8121 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8003d06:	4620      	mov	r0, r4
 8003d08:	f00c fa3a 	bl	8010180 <HAL_TIM_OC_Init>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	f040 811b 	bne.w	8003f48 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003d12:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d14:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003d16:	a910      	add	r1, sp, #64	; 0x40
 8003d18:	482d      	ldr	r0, [pc, #180]	; (8003dd0 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003d1a:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003d1c:	f00d fdcc 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	f040 8111 	bne.w	8003f48 <main+0xbfc>
	sConfigOC.Pulse = 550;
 8003d26:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2a:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d2c:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003d2e:	2208      	movs	r2, #8
 8003d30:	a94e      	add	r1, sp, #312	; 0x138
 8003d32:	4827      	ldr	r0, [pc, #156]	; (8003dd0 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003d34:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 8003d36:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8003d38:	f00c fcf0 	bl	801071c <HAL_TIM_OC_ConfigChannel>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	f040 8103 	bne.w	8003f48 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 8003d42:	4823      	ldr	r0, [pc, #140]	; (8003dd0 <main+0xa84>)
 8003d44:	f001 ffbc 	bl	8005cc0 <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 8003d48:	4823      	ldr	r0, [pc, #140]	; (8003dd8 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 8003d4a:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003d4e:	4f23      	ldr	r7, [pc, #140]	; (8003ddc <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8003d50:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003d54:	2306      	movs	r3, #6
 8003d56:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8003d5a:	f008 fc0f 	bl	800c57c <HAL_IWDG_Init>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f040 80f1 	bne.w	8003f48 <main+0xbfc>
	htim14.Instance = TIM14;
 8003d66:	481e      	ldr	r0, [pc, #120]	; (8003de0 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d6c:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <main+0xa98>)
 8003d70:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8003d72:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003d76:	e039      	b.n	8003dec <main+0xaa0>
 8003d78:	20002854 	.word	0x20002854
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	20001ea0 	.word	0x20001ea0
 8003d84:	40007400 	.word	0x40007400
 8003d88:	200021b4 	.word	0x200021b4
 8003d8c:	40005400 	.word	0x40005400
 8003d90:	2000274c 	.word	0x2000274c
 8003d94:	40004c00 	.word	0x40004c00
 8003d98:	200027d0 	.word	0x200027d0
 8003d9c:	40005000 	.word	0x40005000
 8003da0:	200026c8 	.word	0x200026c8
 8003da4:	40004800 	.word	0x40004800
 8003da8:	20002380 	.word	0x20002380
 8003dac:	40013400 	.word	0x40013400
 8003db0:	2000231c 	.word	0x2000231c
 8003db4:	40003c00 	.word	0x40003c00
 8003db8:	200022b8 	.word	0x200022b8
 8003dbc:	2000224c 	.word	0x2000224c
 8003dc0:	40006000 	.word	0x40006000
 8003dc4:	20404768 	.word	0x20404768
 8003dc8:	20002200 	.word	0x20002200
 8003dcc:	40005800 	.word	0x40005800
 8003dd0:	20002514 	.word	0x20002514
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	20002298 	.word	0x20002298
 8003ddc:	40003000 	.word	0x40003000
 8003de0:	20002430 	.word	0x20002430
 8003de4:	40002000 	.word	0x40002000
 8003de8:	40003800 	.word	0x40003800
 8003dec:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8003df2:	f00c f8f7 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	f040 80a6 	bne.w	8003f48 <main+0xbfc>
	htim5.Instance = TIM5;
 8003dfc:	4f53      	ldr	r7, [pc, #332]	; (8003f4c <main+0xc00>)
	htim5.Init.Period = 4;
 8003dfe:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8003e00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003f80 <main+0xc34>
	htim5.Init.Period = 4;
 8003e04:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8003e08:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0a:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0c:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e0e:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8003e10:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e14:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8003e18:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e1c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003e20:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8003e22:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003e26:	f00c f8dd 	bl	800ffe4 <HAL_TIM_Base_Init>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	f040 808c 	bne.w	8003f48 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e30:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003e34:	a925      	add	r1, sp, #148	; 0x94
 8003e36:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e38:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003e3a:	f00b fb69 	bl	800f510 <HAL_TIM_ConfigClockSource>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f040 8081 	bne.w	8003f48 <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003e46:	4638      	mov	r0, r7
 8003e48:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e4a:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e4c:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003e4e:	f00d fd33 	bl	80118b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d177      	bne.n	8003f48 <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003e58:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8003e5c:	483c      	ldr	r0, [pc, #240]	; (8003f50 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8003e62:	493c      	ldr	r1, [pc, #240]	; (8003f54 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003e64:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8003e68:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 8003e6a:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003e6e:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8003e70:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e74:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003e78:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8003e7c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003e80:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8003e84:	f00e fee6 	bl	8012c54 <HAL_UART_Init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d15c      	bne.n	8003f48 <main+0xbfc>
	huart7.Instance = UART7;
 8003e8e:	4832      	ldr	r0, [pc, #200]	; (8003f58 <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8003e90:	4a32      	ldr	r2, [pc, #200]	; (8003f5c <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8003e92:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e94:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003e96:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003e98:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 8003e9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e9e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8003ea2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ea6:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8003eae:	f00e fed1 	bl	8012c54 <HAL_UART_Init>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d148      	bne.n	8003f48 <main+0xbfc>
	osMutexDef(myMutex01);
 8003eb6:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8003eb8:	f7fe fb0a 	bl	80024d0 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003ebc:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8003ebe:	4c28      	ldr	r4, [pc, #160]	; (8003f60 <main+0xc14>)
	osMutexDef(myMutex01);
 8003ec0:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003ec4:	f011 f93c 	bl	8015140 <osMutexCreate>
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <main+0xc18>)
 8003eca:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003ecc:	2101      	movs	r1, #1
 8003ece:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003ed0:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003ed4:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8003ed6:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003eda:	f011 f98d 	bl	80151f8 <osSemaphoreCreate>
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <main+0xc1c>)
 8003ee0:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8003ee6:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8003ee8:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003eea:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 8003eec:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <main+0xc20>)
 8003eee:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8003ef0:	f011 f904 	bl	80150fc <osTimerCreate>
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <main+0xc24>)
 8003ef6:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8003ef8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003efc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003f00:	4628      	mov	r0, r5
 8003f02:	4631      	mov	r1, r6
 8003f04:	f011 f9f2 	bl	80152ec <osMessageCreate>
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003f0a:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003f0c:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003f0e:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003f10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f14:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	a84e      	add	r0, sp, #312	; 0x138
 8003f20:	f011 f8b2 	bl	8015088 <osThreadCreate>
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003f26:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f28:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003f32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003f36:	4631      	mov	r1, r6
 8003f38:	a855      	add	r0, sp, #340	; 0x154
 8003f3a:	f011 f8a5 	bl	8015088 <osThreadCreate>
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <main+0xc30>)
 8003f40:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003f42:	f011 f893 	bl	801506c <osKernelStart>
	while (1) {
 8003f46:	e7fe      	b.n	8003f46 <main+0xbfa>
		Error_Handler();
 8003f48:	f7ff f984 	bl	8003254 <Error_Handler>
 8003f4c:	20002560 	.word	0x20002560
 8003f50:	2000295c 	.word	0x2000295c
 8003f54:	40007c00 	.word	0x40007c00
 8003f58:	200028d8 	.word	0x200028d8
 8003f5c:	40007800 	.word	0x40007800
 8003f60:	080290b4 	.word	0x080290b4
 8003f64:	200029f4 	.word	0x200029f4
 8003f68:	20002a14 	.word	0x20002a14
 8003f6c:	08002535 	.word	0x08002535
 8003f70:	200029fc 	.word	0x200029fc
 8003f74:	200029f8 	.word	0x200029f8
 8003f78:	20001d98 	.word	0x20001d98
 8003f7c:	20001d48 	.word	0x20001d48
 8003f80:	40000c00 	.word	0x40000c00

08003f84 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 8003f8a:	f01f fb69 	bl	8023660 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8003f8e:	f00f fef9 	bl	8013d84 <MX_LWIP_Init>
	if ((i=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8003f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f96:	4891      	ldr	r0, [pc, #580]	; (80041dc <StartDefaultTask+0x258>)
 8003f98:	f007 fcb0 	bl	800b8fc <HAL_GPIO_ReadPin>
 8003f9c:	2801      	cmp	r0, #1
 8003f9e:	f000 810c 	beq.w	80041ba <StartDefaultTask+0x236>
	getboardpcb();		// find our daughterboard
 8003fa2:	f7ff f8c7 	bl	8003134 <getboardpcb>
	printf("\n\n----------------------------------------------------------------------------\n");
 8003fa6:	488e      	ldr	r0, [pc, #568]	; (80041e0 <StartDefaultTask+0x25c>)
 8003fa8:	f021 f8ac 	bl	8025104 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003fac:	4f8d      	ldr	r7, [pc, #564]	; (80041e4 <StartDefaultTask+0x260>)
 8003fae:	498e      	ldr	r1, [pc, #568]	; (80041e8 <StartDefaultTask+0x264>)
 8003fb0:	250f      	movs	r5, #15
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f242 762b 	movw	r6, #10027	; 0x272b
 8003fb8:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	c90e      	ldmia	r1, {r1, r2, r3}
 8003fc0:	9003      	str	r0, [sp, #12]
 8003fc2:	9400      	str	r4, [sp, #0]
 8003fc4:	4889      	ldr	r0, [pc, #548]	; (80041ec <StartDefaultTask+0x268>)
 8003fc6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003fca:	f020 ffff 	bl	8024fcc <iprintf>
	crc_rom();
 8003fce:	f7fe fad9 	bl	8002584 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 8003fd2:	4b87      	ldr	r3, [pc, #540]	; (80041f0 <StartDefaultTask+0x26c>)
 8003fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd8:	075b      	lsls	r3, r3, #29
 8003fda:	d41e      	bmi.n	800401a <StartDefaultTask+0x96>
		printf("LAN interface appears disconnected\n\r");
 8003fdc:	4885      	ldr	r0, [pc, #532]	; (80041f4 <StartDefaultTask+0x270>)
 8003fde:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fe0:	4d85      	ldr	r5, [pc, #532]	; (80041f8 <StartDefaultTask+0x274>)
		printf("LAN interface appears disconnected\n\r");
 8003fe2:	f020 fff3 	bl	8024fcc <iprintf>
			osDelay(50);
 8003fe6:	2032      	movs	r0, #50	; 0x32
 8003fe8:	f011 f880 	bl	80150ec <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fec:	2201      	movs	r2, #1
 8003fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f007 fc94 	bl	800b920 <HAL_GPIO_WritePin>
			osDelay(50);
 8003ff8:	2032      	movs	r0, #50	; 0x32
 8003ffa:	f011 f877 	bl	80150ec <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8003ffe:	2200      	movs	r2, #0
 8004000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004004:	4628      	mov	r0, r5
 8004006:	f007 fc8b 	bl	800b920 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 800400a:	3c01      	subs	r4, #1
 800400c:	d1eb      	bne.n	8003fe6 <StartDefaultTask+0x62>
		printf("************* REBOOTING **************\n");
 800400e:	487b      	ldr	r0, [pc, #492]	; (80041fc <StartDefaultTask+0x278>)
 8004010:	f021 f878 	bl	8025104 <puts>
		rebootme(0);
 8004014:	4620      	mov	r0, r4
 8004016:	f7fe fb55 	bl	80026c4 <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 800401a:	4b79      	ldr	r3, [pc, #484]	; (8004200 <StartDefaultTask+0x27c>)
	netif = netif_default;
 800401c:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8004270 <StartDefaultTask+0x2ec>
	globalfreeze = 0;		// Allow UDP streaming
 8004020:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8004022:	4b78      	ldr	r3, [pc, #480]	; (8004204 <StartDefaultTask+0x280>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004024:	4978      	ldr	r1, [pc, #480]	; (8004208 <StartDefaultTask+0x284>)
	netif = netif_default;
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800402c:	f016 fc06 	bl	801a83c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8004030:	4976      	ldr	r1, [pc, #472]	; (800420c <StartDefaultTask+0x288>)
 8004032:	f8d8 0000 	ldr.w	r0, [r8]
 8004036:	f016 fbbd 	bl	801a7b4 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 800403a:	4b75      	ldr	r3, [pc, #468]	; (8004210 <StartDefaultTask+0x28c>)
	statuspkt.adctrigoff = TRIG_THRES;
 800403c:	2264      	movs	r2, #100	; 0x64
	statuspkt.bconf |= (circuitboardpcb << 8);
 800403e:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = BUILDNO;		// 16 bits
 8004040:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8004044:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8004048:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 800404c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 800404e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8004050:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8004052:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8004054:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8004058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 800405c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800405e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8004060:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8004064:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8004068:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800406c:	f041 0101 	orr.w	r1, r1, #1
 8004070:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004074:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004078:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800407c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <StartDefaultTask+0x290>)
 8004082:	4a65      	ldr	r2, [pc, #404]	; (8004218 <StartDefaultTask+0x294>)
 8004084:	601a      	str	r2, [r3, #0]
	initsplat();
 8004086:	f001 f9ab 	bl	80053e0 <initsplat>
	stat = setupneo();
 800408a:	f000 fa47 	bl	800451c <setupneo>
	if (stat != HAL_OK) {
 800408e:	2800      	cmp	r0, #0
 8004090:	f040 8096 	bne.w	80041c0 <StartDefaultTask+0x23c>
	printf("Setting up timers\n");
 8004094:	4861      	ldr	r0, [pc, #388]	; (800421c <StartDefaultTask+0x298>)
 8004096:	f021 f835 	bl	8025104 <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800409a:	2300      	movs	r3, #0
 800409c:	4860      	ldr	r0, [pc, #384]	; (8004220 <StartDefaultTask+0x29c>)
 800409e:	461a      	mov	r2, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	6800      	ldr	r0, [r0, #0]
 80040a4:	f011 fb4c 	bl	8015740 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80040a8:	485e      	ldr	r0, [pc, #376]	; (8004224 <StartDefaultTask+0x2a0>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 80040aa:	4c5f      	ldr	r4, [pc, #380]	; (8004228 <StartDefaultTask+0x2a4>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80040ac:	f00b f96e 	bl	800f38c <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 80040b0:	2200      	movs	r2, #0
 80040b2:	6820      	ldr	r0, [r4, #0]
 80040b4:	4611      	mov	r1, r2
 80040b6:	f00d f893 	bl	80111e0 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 80040ba:	2200      	movs	r2, #0
 80040bc:	2104      	movs	r1, #4
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	f00d f88e 	bl	80111e0 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 80040c4:	2200      	movs	r2, #0
 80040c6:	210c      	movs	r1, #12
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	f00d f889 	bl	80111e0 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80040ce:	2100      	movs	r1, #0
 80040d0:	4620      	mov	r0, r4
 80040d2:	f00d fad3 	bl	801167c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80040d6:	2104      	movs	r1, #4
 80040d8:	4620      	mov	r0, r4
 80040da:	f00d facf 	bl	801167c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80040de:	210c      	movs	r1, #12
 80040e0:	4620      	mov	r0, r4
 80040e2:	f00d facb 	bl	801167c <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80040e6:	2301      	movs	r3, #1
 80040e8:	4a4a      	ldr	r2, [pc, #296]	; (8004214 <StartDefaultTask+0x290>)
 80040ea:	2108      	movs	r1, #8
 80040ec:	4620      	mov	r0, r4
 80040ee:	f00d f8d5 	bl	801129c <HAL_TIM_IC_Start_DMA>
 80040f2:	4605      	mov	r5, r0
 80040f4:	b128      	cbz	r0, 8004102 <StartDefaultTask+0x17e>
		printf("TIM_Base_Start_DMA err %i", err);
 80040f6:	4601      	mov	r1, r0
 80040f8:	484c      	ldr	r0, [pc, #304]	; (800422c <StartDefaultTask+0x2a8>)
 80040fa:	f020 ff67 	bl	8024fcc <iprintf>
		Error_Handler();
 80040fe:	f7ff f8a9 	bl	8003254 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004102:	6820      	ldr	r0, [r4, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	2108      	movs	r1, #8
	myip = ip.addr;
 8004108:	4c49      	ldr	r4, [pc, #292]	; (8004230 <StartDefaultTask+0x2ac>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800410a:	f00d f869 	bl	80111e0 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 800410e:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8004116:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 8004118:	2b00      	cmp	r3, #0
 800411a:	d055      	beq.n	80041c8 <StartDefaultTask+0x244>
	printf("*****************************************\n");
 800411c:	4845      	ldr	r0, [pc, #276]	; (8004234 <StartDefaultTask+0x2b0>)
 800411e:	f020 fff1 	bl	8025104 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004122:	6821      	ldr	r1, [r4, #0]
	uip = locateudp();
 8004124:	4e44      	ldr	r6, [pc, #272]	; (8004238 <StartDefaultTask+0x2b4>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004126:	0e08      	lsrs	r0, r1, #24
 8004128:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800412c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004130:	b2c9      	uxtb	r1, r1
 8004132:	9000      	str	r0, [sp, #0]
 8004134:	4841      	ldr	r0, [pc, #260]	; (800423c <StartDefaultTask+0x2b8>)
 8004136:	f020 ff49 	bl	8024fcc <iprintf>
	printf("*****************************************\n");
 800413a:	483e      	ldr	r0, [pc, #248]	; (8004234 <StartDefaultTask+0x2b0>)
 800413c:	f020 ffe2 	bl	8025104 <puts>
	while (lptask_init_done == 0)
 8004140:	4c3f      	ldr	r4, [pc, #252]	; (8004240 <StartDefaultTask+0x2bc>)
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8004142:	f003 f8c3 	bl	80072cc <initialapisn>
	osDelay(1000);
 8004146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800414a:	f010 ffcf 	bl	80150ec <osDelay>
	printf("Starting httpd web server\n");
 800414e:	483d      	ldr	r0, [pc, #244]	; (8004244 <StartDefaultTask+0x2c0>)
 8004150:	f020 ffd8 	bl	8025104 <puts>
	httpd_init();		// start the www server
 8004154:	f014 fde0 	bl	8018d18 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8004158:	f002 ff12 	bl	8006f80 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 800415c:	483a      	ldr	r0, [pc, #232]	; (8004248 <StartDefaultTask+0x2c4>)
 800415e:	f020 ffd1 	bl	8025104 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004162:	2008      	movs	r0, #8
 8004164:	4a39      	ldr	r2, [pc, #228]	; (800424c <StartDefaultTask+0x2c8>)
 8004166:	4629      	mov	r1, r5
 8004168:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800416c:	9000      	str	r0, [sp, #0]
 800416e:	4838      	ldr	r0, [pc, #224]	; (8004250 <StartDefaultTask+0x2cc>)
 8004170:	f004 fc04 	bl	800897c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8004174:	4837      	ldr	r0, [pc, #220]	; (8004254 <StartDefaultTask+0x2d0>)
 8004176:	f00b f851 	bl	800f21c <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800417a:	f012 fc2d 	bl	80169d8 <xTaskGetCurrentTaskHandle>
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <StartDefaultTask+0x2d4>)
 8004180:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8004182:	f002 fbb1 	bl	80068e8 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8004186:	4b35      	ldr	r3, [pc, #212]	; (800425c <StartDefaultTask+0x2d8>)
 8004188:	2201      	movs	r2, #1
	uip = locateudp();
 800418a:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 800418c:	4834      	ldr	r0, [pc, #208]	; (8004260 <StartDefaultTask+0x2dc>)
	main_init_done = 1; // let lptask now main has initialised
 800418e:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8004190:	f020 ffb8 	bl	8025104 <puts>
	while (lptask_init_done == 0)
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	b92b      	cbnz	r3, 80041a4 <StartDefaultTask+0x220>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8004198:	2064      	movs	r0, #100	; 0x64
 800419a:	f010 ffa7 	bl	80150ec <osDelay>
	while (lptask_init_done == 0)
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f9      	beq.n	8004198 <StartDefaultTask+0x214>
	startadc();		// start the ADC DMA loop
 80041a4:	f7fc fc96 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 80041a8:	6830      	ldr	r0, [r6, #0]
 80041aa:	f002 fbd3 	bl	8006954 <startudp>
		printf("UDP stream exited!!!\n\r");
 80041ae:	482d      	ldr	r0, [pc, #180]	; (8004264 <StartDefaultTask+0x2e0>)
 80041b0:	f020 ff0c 	bl	8024fcc <iprintf>
		rebootme(4);
 80041b4:	2004      	movs	r0, #4
 80041b6:	f7fe fa85 	bl	80026c4 <rebootme>
			fixboot();	// zzz reset the boot vectors
 80041ba:	f7fc fe23 	bl	8000e04 <fixboot>
 80041be:	e6f0      	b.n	8003fa2 <StartDefaultTask+0x1e>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 80041c0:	4829      	ldr	r0, [pc, #164]	; (8004268 <StartDefaultTask+0x2e4>)
 80041c2:	f020 ff03 	bl	8024fcc <iprintf>
 80041c6:	e765      	b.n	8004094 <StartDefaultTask+0x110>
		printf("***** DHCP Failed ******\n");
 80041c8:	4828      	ldr	r0, [pc, #160]	; (800426c <StartDefaultTask+0x2e8>)
 80041ca:	f020 ff9b 	bl	8025104 <puts>
		osDelay(200);
 80041ce:	20c8      	movs	r0, #200	; 0xc8
 80041d0:	f010 ff8c 	bl	80150ec <osDelay>
		rebootme(1);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7fe fa75 	bl	80026c4 <rebootme>
 80041da:	bf00      	nop
 80041dc:	40020800 	.word	0x40020800
 80041e0:	0802a644 	.word	0x0802a644
 80041e4:	20001d4c 	.word	0x20001d4c
 80041e8:	1ff0f000 	.word	0x1ff0f000
 80041ec:	0802a694 	.word	0x0802a694
 80041f0:	20002ef0 	.word	0x20002ef0
 80041f4:	0802a6d4 	.word	0x0802a6d4
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	0802a6fc 	.word	0x0802a6fc
 8004200:	20002dac 	.word	0x20002dac
 8004204:	2002dbc4 	.word	0x2002dbc4
 8004208:	080026cd 	.word	0x080026cd
 800420c:	08002529 	.word	0x08002529
 8004210:	20002c04 	.word	0x20002c04
 8004214:	20000768 	.word	0x20000768
 8004218:	02a62b1c 	.word	0x02a62b1c
 800421c:	0802a744 	.word	0x0802a744
 8004220:	20002a14 	.word	0x20002a14
 8004224:	200025ac 	.word	0x200025ac
 8004228:	2000247c 	.word	0x2000247c
 800422c:	0802a758 	.word	0x0802a758
 8004230:	20002a00 	.word	0x20002a00
 8004234:	0802a790 	.word	0x0802a790
 8004238:	20002a24 	.word	0x20002a24
 800423c:	0802a7bc 	.word	0x0802a7bc
 8004240:	200029ec 	.word	0x200029ec
 8004244:	0802a7e4 	.word	0x0802a7e4
 8004248:	0802a800 	.word	0x0802a800
 800424c:	0802a850 	.word	0x0802a850
 8004250:	20001ea0 	.word	0x20001ea0
 8004254:	200025f8 	.word	0x200025f8
 8004258:	200007fc 	.word	0x200007fc
 800425c:	200029f0 	.word	0x200029f0
 8004260:	0802a81c 	.word	0x0802a81c
 8004264:	0802a838 	.word	0x0802a838
 8004268:	0802a724 	.word	0x0802a724
 800426c:	0802a774 	.word	0x0802a774
 8004270:	20002a04 	.word	0x20002a04

08004274 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004278:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 800427a:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 800427c:	b083      	sub	sp, #12
 800427e:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8004280:	d009      	beq.n	8004296 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8004282:	230a      	movs	r3, #10
 8004284:	2201      	movs	r2, #1
 8004286:	a901      	add	r1, sp, #4
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <__io_putchar+0x34>)
 800428a:	f00e fc3b 	bl	8012b04 <HAL_UART_Transmit>

	return ch;
	}
}
 800428e:	9801      	ldr	r0, [sp, #4]
 8004290:	b003      	add	sp, #12
 8004292:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8004296:	4603      	mov	r3, r0
 8004298:	2202      	movs	r2, #2
 800429a:	4905      	ldr	r1, [pc, #20]	; (80042b0 <__io_putchar+0x38>)
 800429c:	4803      	ldr	r0, [pc, #12]	; (80042ac <__io_putchar+0x34>)
 800429e:	f00e fc31 	bl	8012b04 <HAL_UART_Transmit>
}
 80042a2:	9801      	ldr	r0, [sp, #4]
 80042a4:	b003      	add	sp, #12
 80042a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80042aa:	bf00      	nop
 80042ac:	20002644 	.word	0x20002644
 80042b0:	0802af50 	.word	0x0802af50

080042b4 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <calcepoch32+0x40>)
 80042b6:	4810      	ldr	r0, [pc, #64]	; (80042f8 <calcepoch32+0x44>)
 80042b8:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 80042ba:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80042bc:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80042c0:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80042c2:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80042c4:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80042c6:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80042c8:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80042cc:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80042ce:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80042d0:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80042d2:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 80042d4:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80042d6:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80042d8:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 80042da:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 80042de:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 80042e0:	f01f ffb8 	bl	8024254 <mktime>
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <calcepoch32+0x48>)
 80042e6:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80042e8:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80042ec:	e9c2 3100 	strd	r3, r1, [r2]
}
 80042f0:	4418      	add	r0, r3
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	20002c04 	.word	0x20002c04
 80042f8:	20002bd8 	.word	0x20002bd8
 80042fc:	20002ab8 	.word	0x20002ab8

08004300 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8004300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8004306:	b33a      	cbz	r2, 8004358 <printPacket+0x58>
 8004308:	4607      	mov	r7, r0
 800430a:	4616      	mov	r6, r2
 800430c:	1e4d      	subs	r5, r1, #1
 800430e:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8004310:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004368 <printPacket+0x68>
 8004314:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800436c <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8004318:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004370 <printPacket+0x70>
 800431c:	e013      	b.n	8004346 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 800431e:	f8da 1000 	ldr.w	r1, [sl]
 8004322:	1c4b      	adds	r3, r1, #1
 8004324:	f8ca 3000 	str.w	r3, [sl]
 8004328:	f020 fe50 	bl	8024fcc <iprintf>
	for (byte i = 0; i < len; i++) {
 800432c:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 800432e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004332:	4641      	mov	r1, r8
 8004334:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8004336:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8004338:	f021 f83a 	bl	80253b0 <siprintf>
		printf(temp);
 800433c:	a801      	add	r0, sp, #4
 800433e:	f020 fe45 	bl	8024fcc <iprintf>
	for (byte i = 0; i < len; i++) {
 8004342:	42a6      	cmp	r6, r4
 8004344:	d008      	beq.n	8004358 <printPacket+0x58>
		if (i % 16 == 0) {
 8004346:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 800434a:	463a      	mov	r2, r7
 800434c:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 800434e:	d0e6      	beq.n	800431e <printPacket+0x1e>
			printf(" ");
 8004350:	2020      	movs	r0, #32
 8004352:	f020 fe53 	bl	8024ffc <putchar>
 8004356:	e7e9      	b.n	800432c <printPacket+0x2c>
	}
	printf("\n\r");
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <printPacket+0x64>)
 800435a:	f020 fe37 	bl	8024fcc <iprintf>
}
 800435e:	b002      	add	sp, #8
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	0802a84c 	.word	0x0802a84c
 8004368:	20002aac 	.word	0x20002aac
 800436c:	0802af54 	.word	0x0802af54
 8004370:	0802af60 	.word	0x0802af60

08004374 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8004374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004378:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8004418 <disableNmea+0xa4>
void disableNmea() {
 800437c:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 800437e:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004380:	4f24      	ldr	r7, [pc, #144]	; (8004414 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004382:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8004386:	f10d 0904 	add.w	r9, sp, #4
 800438a:	ad04      	add	r5, sp, #16
 800438c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004390:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004394:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004398:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800439c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80043a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80043a4:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80043a8:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80043ac:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80043b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043b4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 80043b8:	f829 2b02 	strh.w	r2, [r9], #2
 80043bc:	0c12      	lsrs	r2, r2, #16
 80043be:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 80043c2:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 80043c6:	7829      	ldrb	r1, [r5, #0]
 80043c8:	786a      	ldrb	r2, [r5, #1]
 80043ca:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 80043ce:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 80043d0:	f88d 100a 	strb.w	r1, [sp, #10]
 80043d4:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 80043d8:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 80043dc:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 80043e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043e4:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 80043e6:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 80043e8:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 80043ec:	44e6      	add	lr, ip
 80043ee:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 80043f2:	d1f5      	bne.n	80043e0 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80043f4:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80043f6:	2364      	movs	r3, #100	; 0x64
 80043f8:	220b      	movs	r2, #11
 80043fa:	a901      	add	r1, sp, #4
 80043fc:	4638      	mov	r0, r7
 80043fe:	f88d c00d 	strb.w	ip, [sp, #13]
 8004402:	f88d e00e 	strb.w	lr, [sp, #14]
 8004406:	f00e fb7d 	bl	8012b04 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 800440a:	4545      	cmp	r5, r8
 800440c:	d1d9      	bne.n	80043c2 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 800440e:	b00f      	add	sp, #60	; 0x3c
 8004410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004414:	20002b4c 	.word	0x20002b4c
 8004418:	0802911c 	.word	0x0802911c

0800441c <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800441c:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 800441e:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004420:	db1c      	blt.n	800445c <isGoodChecksum+0x40>
 8004422:	4910      	ldr	r1, [pc, #64]	; (8004464 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8004424:	2200      	movs	r2, #0
 8004426:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 800442a:	4613      	mov	r3, r2
 800442c:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 800442e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8004432:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004434:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8004436:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8004438:	441a      	add	r2, r3
 800443a:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800443c:	d1f7      	bne.n	800442e <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800443e:	490a      	ldr	r1, [pc, #40]	; (8004468 <isGoodChecksum+0x4c>)
 8004440:	4408      	add	r0, r1
 8004442:	7981      	ldrb	r1, [r0, #6]
 8004444:	4299      	cmp	r1, r3
 8004446:	d002      	beq.n	800444e <isGoodChecksum+0x32>
 8004448:	2000      	movs	r0, #0
}
 800444a:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800444e:	79c0      	ldrb	r0, [r0, #7]
 8004450:	1a80      	subs	r0, r0, r2
 8004452:	fab0 f080 	clz	r0, r0
 8004456:	0940      	lsrs	r0, r0, #5
}
 8004458:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 800445c:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 800445e:	4613      	mov	r3, r2
 8004460:	e7ed      	b.n	800443e <isGoodChecksum+0x22>
 8004462:	bf00      	nop
 8004464:	20002a2d 	.word	0x20002a2d
 8004468:	20002a2c 	.word	0x20002a2c

0800446c <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 800446c:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 800446e:	4c25      	ldr	r4, [pc, #148]	; (8004504 <IsPacketReady+0x98>)
 8004470:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8004472:	2b03      	cmp	r3, #3
 8004474:	d814      	bhi.n	80044a0 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8004476:	4a24      	ldr	r2, [pc, #144]	; (8004508 <IsPacketReady+0x9c>)
 8004478:	4619      	mov	r1, r3
 800447a:	5cd2      	ldrb	r2, [r2, r3]
 800447c:	4282      	cmp	r2, r0
 800447e:	d00a      	beq.n	8004496 <IsPacketReady+0x2a>
 8004480:	4a22      	ldr	r2, [pc, #136]	; (800450c <IsPacketReady+0xa0>)
 8004482:	5cd2      	ldrb	r2, [r2, r3]
 8004484:	4282      	cmp	r2, r0
 8004486:	d006      	beq.n	8004496 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004488:	2200      	movs	r2, #0
 800448a:	4921      	ldr	r1, [pc, #132]	; (8004510 <IsPacketReady+0xa4>)
			p = 0;
 800448c:	4613      	mov	r3, r2
			len = 0;
 800448e:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8004490:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8004492:	70e3      	strb	r3, [r4, #3]
}
 8004494:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8004496:	3301      	adds	r3, #1
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <IsPacketReady+0xa8>)
 800449a:	b2db      	uxtb	r3, r3
 800449c:	5450      	strb	r0, [r2, r1]
 800449e:	e7f7      	b.n	8004490 <IsPacketReady+0x24>
		if (p < 6) {
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d917      	bls.n	80044d4 <IsPacketReady+0x68>
		if (p == 6) {
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d01b      	beq.n	80044e0 <IsPacketReady+0x74>
 80044a8:	4d19      	ldr	r5, [pc, #100]	; (8004510 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 80044aa:	682a      	ldr	r2, [r5, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	3207      	adds	r2, #7
 80044b0:	429a      	cmp	r2, r3
 80044b2:	dbed      	blt.n	8004490 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80044b4:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 80044b6:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 80044b8:	4e16      	ldr	r6, [pc, #88]	; (8004514 <IsPacketReady+0xa8>)
 80044ba:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 80044bc:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 80044be:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d1e5      	bne.n	8004490 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 80044c4:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 80044c6:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 80044c8:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 80044ca:	f7ff ffa7 	bl	800441c <isGoodChecksum>
 80044ce:	b998      	cbnz	r0, 80044f8 <IsPacketReady+0x8c>
				p = 0;
 80044d0:	4603      	mov	r3, r0
 80044d2:	e7dd      	b.n	8004490 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80044d4:	490f      	ldr	r1, [pc, #60]	; (8004514 <IsPacketReady+0xa8>)
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	54c8      	strb	r0, [r1, r3]
			return (0);
 80044da:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 80044dc:	70e2      	strb	r2, [r4, #3]
}
 80044de:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 80044e0:	490c      	ldr	r1, [pc, #48]	; (8004514 <IsPacketReady+0xa8>)
 80044e2:	794d      	ldrb	r5, [r1, #5]
 80044e4:	790a      	ldrb	r2, [r1, #4]
 80044e6:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80044ea:	4d09      	ldr	r5, [pc, #36]	; (8004510 <IsPacketReady+0xa4>)
 80044ec:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 80044ee:	682a      	ldr	r2, [r5, #0]
 80044f0:	2a7f      	cmp	r2, #127	; 0x7f
 80044f2:	d9da      	bls.n	80044aa <IsPacketReady+0x3e>
				return 0;
 80044f4:	2000      	movs	r0, #0
}
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <IsPacketReady+0xac>)
 80044fa:	2201      	movs	r2, #1
					return len;
 80044fc:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	bd70      	pop	{r4, r5, r6, pc}
 8004502:	bf00      	nop
 8004504:	2000025c 	.word	0x2000025c
 8004508:	0802b150 	.word	0x0802b150
 800450c:	0802b154 	.word	0x0802b154
 8004510:	20002bd0 	.word	0x20002bd0
 8004514:	20002a2c 	.word	0x20002a2c
 8004518:	20002ac4 	.word	0x20002ac4

0800451c <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 800451c:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <setupneo+0x1d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8004522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004524:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8004526:	f000 80ba 	beq.w	800469e <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 800452a:	2284      	movs	r2, #132	; 0x84
 800452c:	4971      	ldr	r1, [pc, #452]	; (80046f4 <setupneo+0x1d8>)
 800452e:	4872      	ldr	r0, [pc, #456]	; (80046f8 <setupneo+0x1dc>)
 8004530:	f01f fd88 	bl	8024044 <memcpy>
		gpsuarttx = huart6;
 8004534:	2284      	movs	r2, #132	; 0x84
 8004536:	496f      	ldr	r1, [pc, #444]	; (80046f4 <setupneo+0x1d8>)
 8004538:	4870      	ldr	r0, [pc, #448]	; (80046fc <setupneo+0x1e0>)
 800453a:	f01f fd83 	bl	8024044 <memcpy>
		GPSUARTRX = USART6;
 800453e:	4b70      	ldr	r3, [pc, #448]	; (8004700 <setupneo+0x1e4>)
 8004540:	4a70      	ldr	r2, [pc, #448]	; (8004704 <setupneo+0x1e8>)
 8004542:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004544:	2201      	movs	r2, #1
 8004546:	4970      	ldr	r1, [pc, #448]	; (8004708 <setupneo+0x1ec>)
 8004548:	486b      	ldr	r0, [pc, #428]	; (80046f8 <setupneo+0x1dc>)
 800454a:	f00e fd73 	bl	8013034 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 800454e:	4607      	mov	r7, r0
 8004550:	2800      	cmp	r0, #0
 8004552:	f040 809d 	bne.w	8004690 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8004556:	f7ff ff0d 	bl	8004374 <disableNmea>
	osDelay(500);
 800455a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800455e:	f010 fdc5 	bl	80150ec <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <setupneo+0x1f0>)
 8004564:	ae01      	add	r6, sp, #4
 8004566:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800456a:	4d69      	ldr	r5, [pc, #420]	; (8004710 <setupneo+0x1f4>)
 800456c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004570:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8004574:	4867      	ldr	r0, [pc, #412]	; (8004714 <setupneo+0x1f8>)
 8004576:	f020 fdc5 	bl	8025104 <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800457a:	2364      	movs	r3, #100	; 0x64
 800457c:	2208      	movs	r2, #8
 800457e:	4631      	mov	r1, r6
 8004580:	485e      	ldr	r0, [pc, #376]	; (80046fc <setupneo+0x1e0>)
 8004582:	f00e fabf 	bl	8012b04 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004586:	e004      	b.n	8004592 <setupneo+0x76>
		i++;
		osDelay(1);
 8004588:	f010 fdb0 	bl	80150ec <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 800458c:	3c01      	subs	r4, #1
 800458e:	f000 80a5 	beq.w	80046dc <setupneo+0x1c0>
 8004592:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8004594:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f6      	beq.n	8004588 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 800459a:	4c5f      	ldr	r4, [pc, #380]	; (8004718 <setupneo+0x1fc>)
 800459c:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 800459e:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80045a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80045a6:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80045aa:	2364      	movs	r3, #100	; 0x64
 80045ac:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80045ae:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80045b2:	4852      	ldr	r0, [pc, #328]	; (80046fc <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80045b4:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80045b8:	4631      	mov	r1, r6
 80045ba:	f00e faa3 	bl	8012b04 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 80045be:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045c2:	f010 fd93 	bl	80150ec <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 80045c6:	4855      	ldr	r0, [pc, #340]	; (800471c <setupneo+0x200>)
 80045c8:	f020 fd00 	bl	8024fcc <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 80045cc:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80045d0:	46b4      	mov	ip, r6
 80045d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045d4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80045d8:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 80045da:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80045de:	220e      	movs	r2, #14
 80045e0:	2364      	movs	r3, #100	; 0x64
 80045e2:	4846      	ldr	r0, [pc, #280]	; (80046fc <setupneo+0x1e0>)
 80045e4:	f00e fa8e 	bl	8012b04 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 80045e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ec:	f010 fd7e 	bl	80150ec <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80045f0:	484b      	ldr	r0, [pc, #300]	; (8004720 <setupneo+0x204>)
 80045f2:	f020 fd87 	bl	8025104 <puts>
	byte packet[] = { 0xB5, // sync char 1
 80045f6:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 80045fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80045fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004606:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800460a:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 800460c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004610:	4631      	mov	r1, r6
 8004612:	222c      	movs	r2, #44	; 0x2c
 8004614:	4839      	ldr	r0, [pc, #228]	; (80046fc <setupneo+0x1e0>)
 8004616:	f00e fa75 	bl	8012b04 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 800461a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800461e:	f010 fd65 	bl	80150ec <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8004622:	4840      	ldr	r0, [pc, #256]	; (8004724 <setupneo+0x208>)
 8004624:	f020 fcd2 	bl	8024fcc <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8004628:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 800462c:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800462e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004630:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8004632:	ca07      	ldmia	r2, {r0, r1, r2}
 8004634:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004638:	f82c 2b02 	strh.w	r2, [ip], #2
 800463c:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800463e:	4631      	mov	r1, r6
 8004640:	482e      	ldr	r0, [pc, #184]	; (80046fc <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8004642:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004646:	220b      	movs	r2, #11
 8004648:	f00e fa5c 	bl	8012b04 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 800464c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004650:	f010 fd4c 	bl	80150ec <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004654:	46b4      	mov	ip, r6
 8004656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800465c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004662:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004666:	2364      	movs	r3, #100	; 0x64
 8004668:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 800466a:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800466e:	4631      	mov	r1, r6
 8004670:	4822      	ldr	r0, [pc, #136]	; (80046fc <setupneo+0x1e0>)
 8004672:	f00e fa47 	bl	8012b04 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8004676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800467a:	f010 fd37 	bl	80150ec <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <setupneo+0x20c>)
 8004680:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8004682:	482a      	ldr	r0, [pc, #168]	; (800472c <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004684:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8004686:	f020 fca1 	bl	8024fcc <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 800468a:	4638      	mov	r0, r7
 800468c:	b00d      	add	sp, #52	; 0x34
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004690:	4601      	mov	r1, r0
 8004692:	4827      	ldr	r0, [pc, #156]	; (8004730 <setupneo+0x214>)
 8004694:	f020 fc9a 	bl	8024fcc <iprintf>
}
 8004698:	4638      	mov	r0, r7
 800469a:	b00d      	add	sp, #52	; 0x34
 800469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 800469e:	4c25      	ldr	r4, [pc, #148]	; (8004734 <setupneo+0x218>)
 80046a0:	4620      	mov	r0, r4
 80046a2:	f00d fbc3 	bl	8011e2c <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f00d fa28 	bl	8011afc <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 80046ac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80046b0:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 80046b2:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80046b4:	f00e face 	bl	8012c54 <HAL_UART_Init>
 80046b8:	b968      	cbnz	r0, 80046d6 <setupneo+0x1ba>
		gpsuartrx = huart8;
 80046ba:	2284      	movs	r2, #132	; 0x84
 80046bc:	491e      	ldr	r1, [pc, #120]	; (8004738 <setupneo+0x21c>)
 80046be:	480e      	ldr	r0, [pc, #56]	; (80046f8 <setupneo+0x1dc>)
 80046c0:	f01f fcc0 	bl	8024044 <memcpy>
		gpsuarttx = huart7;
 80046c4:	2284      	movs	r2, #132	; 0x84
 80046c6:	491b      	ldr	r1, [pc, #108]	; (8004734 <setupneo+0x218>)
 80046c8:	480c      	ldr	r0, [pc, #48]	; (80046fc <setupneo+0x1e0>)
 80046ca:	f01f fcbb 	bl	8024044 <memcpy>
		GPSUARTRX = UART8;
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <setupneo+0x1e4>)
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <setupneo+0x220>)
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e736      	b.n	8004544 <setupneo+0x28>
			Error_Handler();
 80046d6:	f7fe fdbd 	bl	8003254 <Error_Handler>
 80046da:	e7ee      	b.n	80046ba <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 80046dc:	4818      	ldr	r0, [pc, #96]	; (8004740 <setupneo+0x224>)
 80046de:	f020 fd11 	bl	8025104 <puts>
		osDelay(200);
 80046e2:	20c8      	movs	r0, #200	; 0xc8
 80046e4:	f010 fd02 	bl	80150ec <osDelay>
		rebootme(2);
 80046e8:	2002      	movs	r0, #2
 80046ea:	f7fd ffeb 	bl	80026c4 <rebootme>
 80046ee:	e754      	b.n	800459a <setupneo+0x7e>
 80046f0:	20001d4c 	.word	0x20001d4c
 80046f4:	20002854 	.word	0x20002854
 80046f8:	20002ac8 	.word	0x20002ac8
 80046fc:	20002b4c 	.word	0x20002b4c
 8004700:	20002a28 	.word	0x20002a28
 8004704:	40011400 	.word	0x40011400
 8004708:	20002bfc 	.word	0x20002bfc
 800470c:	08029114 	.word	0x08029114
 8004710:	20002bd4 	.word	0x20002bd4
 8004714:	0802af68 	.word	0x0802af68
 8004718:	080290fc 	.word	0x080290fc
 800471c:	0802afa8 	.word	0x0802afa8
 8004720:	0802afd8 	.word	0x0802afd8
 8004724:	0802b000 	.word	0x0802b000
 8004728:	20002c04 	.word	0x20002c04
 800472c:	0802b024 	.word	0x0802b024
 8004730:	0802af80 	.word	0x0802af80
 8004734:	200028d8 	.word	0x200028d8
 8004738:	2000295c 	.word	0x2000295c
 800473c:	40007c00 	.word	0x40007c00
 8004740:	0802b04c 	.word	0x0802b04c

08004744 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004746:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	4293      	cmp	r3, r2
 800474e:	d011      	beq.n	8004774 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004750:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <HAL_UART_RxCpltCallback+0xb0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d024      	beq.n	80047a0 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8004756:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <HAL_UART_RxCpltCallback+0xb4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d025      	beq.n	80047a8 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <HAL_UART_RxCpltCallback+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8004762:	4827      	ldr	r0, [pc, #156]	; (8004800 <HAL_UART_RxCpltCallback+0xbc>)
}
 8004764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8004768:	f020 bccc 	b.w	8025104 <puts>
}
 800476c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8004770:	f7fe bcf0 	b.w	8003154 <uart2_rxdone>
		data = rxdatabuf[0];
 8004774:	4923      	ldr	r1, [pc, #140]	; (8004804 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8004776:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 800477a:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 800477c:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 800477e:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8004780:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8004782:	f7ff fe73 	bl	800446c <IsPacketReady>
 8004786:	2800      	cmp	r0, #0
 8004788:	dd1c      	ble.n	80047c4 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 800478a:	2854      	cmp	r0, #84	; 0x54
 800478c:	d01b      	beq.n	80047c6 <HAL_UART_RxCpltCallback+0x82>
 800478e:	2864      	cmp	r0, #100	; 0x64
 8004790:	d00e      	beq.n	80047b0 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004792:	b2c2      	uxtb	r2, r0
 8004794:	491e      	ldr	r1, [pc, #120]	; (8004810 <HAL_UART_RxCpltCallback+0xcc>)
 8004796:	481f      	ldr	r0, [pc, #124]	; (8004814 <HAL_UART_RxCpltCallback+0xd0>)
}
 8004798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 800479c:	f7ff bdb0 	b.w	8004300 <printPacket>
}
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 80047a4:	f7fc bdb0 	b.w	8001308 <uart5_rxdone>
}
 80047a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 80047ac:	f000 bd0e 	b.w	80051cc <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_UART_RxCpltCallback+0xd4>)
 80047b2:	481a      	ldr	r0, [pc, #104]	; (800481c <HAL_UART_RxCpltCallback+0xd8>)
 80047b4:	f1a3 020a 	sub.w	r2, r3, #10
 80047b8:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80047bc:	f020 fc06 	bl	8024fcc <iprintf>
				neoispresent = 1;
 80047c0:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_UART_RxCpltCallback+0xdc>)
 80047c2:	601c      	str	r4, [r3, #0]
}
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 80047c6:	4d17      	ldr	r5, [pc, #92]	; (8004824 <HAL_UART_RxCpltCallback+0xe0>)
 80047c8:	224e      	movs	r2, #78	; 0x4e
 80047ca:	4917      	ldr	r1, [pc, #92]	; (8004828 <HAL_UART_RxCpltCallback+0xe4>)
 80047cc:	1d28      	adds	r0, r5, #4
 80047ce:	f01f fc39 	bl	8024044 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 80047d2:	f7ff fd6f 	bl	80042b4 <calcepoch32>
 80047d6:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 80047da:	7e6b      	ldrb	r3, [r5, #25]
 80047dc:	f013 0301 	ands.w	r3, r3, #1
 80047e0:	d002      	beq.n	80047e8 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <HAL_UART_RxCpltCallback+0xe8>)
 80047e4:	701c      	strb	r4, [r3, #0]
}
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 80047e8:	4a10      	ldr	r2, [pc, #64]	; (800482c <HAL_UART_RxCpltCallback+0xe8>)
 80047ea:	7013      	strb	r3, [r2, #0]
}
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	20002a28 	.word	0x20002a28
 80047f4:	40005000 	.word	0x40005000
 80047f8:	40011400 	.word	0x40011400
 80047fc:	40004400 	.word	0x40004400
 8004800:	0802b0c0 	.word	0x0802b0c0
 8004804:	20002bfc 	.word	0x20002bfc
 8004808:	20002ab0 	.word	0x20002ab0
 800480c:	20002ac0 	.word	0x20002ac0
 8004810:	20002a2c 	.word	0x20002a2c
 8004814:	0802b0a4 	.word	0x0802b0a4
 8004818:	20002a5a 	.word	0x20002a5a
 800481c:	0802b078 	.word	0x0802b078
 8004820:	20002bd4 	.word	0x20002bd4
 8004824:	20002c04 	.word	0x20002c04
 8004828:	20002a32 	.word	0x20002a32
 800482c:	20002db0 	.word	0x20002db0

08004830 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004830:	4926      	ldr	r1, [pc, #152]	; (80048cc <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004832:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004836:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004838:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 800483a:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800483c:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 800483e:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004840:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004842:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004844:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004846:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004848:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 800484a:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800484c:	d02b      	beq.n	80048a6 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 800484e:	4920      	ldr	r1, [pc, #128]	; (80048d0 <HAL_UART_ErrorCallback+0xa0>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d00f      	beq.n	8004874 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8004854:	491f      	ldr	r1, [pc, #124]	; (80048d4 <HAL_UART_ErrorCallback+0xa4>)
 8004856:	428b      	cmp	r3, r1
 8004858:	d000      	beq.n	800485c <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 800485a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 800485c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004860:	481d      	ldr	r0, [pc, #116]	; (80048d8 <HAL_UART_ErrorCallback+0xa8>)
 8004862:	f020 fbb3 	bl	8024fcc <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	2202      	movs	r2, #2
 800486a:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 800486c:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 800486e:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004870:	621d      	str	r5, [r3, #32]
}
 8004872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8004874:	4a19      	ldr	r2, [pc, #100]	; (80048dc <HAL_UART_ErrorCallback+0xac>)
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	2a00      	cmp	r2, #0
 800487a:	d1ee      	bne.n	800485a <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 800487c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004880:	4a17      	ldr	r2, [pc, #92]	; (80048e0 <HAL_UART_ErrorCallback+0xb0>)
 8004882:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	0710      	lsls	r0, r2, #28
 8004888:	d500      	bpl.n	800488c <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 800488a:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_UART_ErrorCallback+0xa0>)
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	0751      	lsls	r1, r2, #29
 8004892:	d501      	bpl.n	8004898 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8004894:	2204      	movs	r2, #4
 8004896:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_UART_ErrorCallback+0xa0>)
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	0792      	lsls	r2, r2, #30
 800489e:	d5dc      	bpl.n	800485a <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 80048a0:	2202      	movs	r2, #2
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80048a6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80048aa:	480e      	ldr	r0, [pc, #56]	; (80048e4 <HAL_UART_ErrorCallback+0xb4>)
 80048ac:	f020 fb8e 	bl	8024fcc <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 80048b0:	462a      	mov	r2, r5
 80048b2:	490d      	ldr	r1, [pc, #52]	; (80048e8 <HAL_UART_ErrorCallback+0xb8>)
 80048b4:	480d      	ldr	r0, [pc, #52]	; (80048ec <HAL_UART_ErrorCallback+0xbc>)
 80048b6:	f00e fbbd 	bl	8013034 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 80048ba:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80048be:	d0cc      	beq.n	800485a <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 80048c0:	4601      	mov	r1, r0
 80048c2:	480b      	ldr	r0, [pc, #44]	; (80048f0 <HAL_UART_ErrorCallback+0xc0>)
}
 80048c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 80048c8:	f020 bb80 	b.w	8024fcc <iprintf>
 80048cc:	20002a28 	.word	0x20002a28
 80048d0:	40005000 	.word	0x40005000
 80048d4:	40011400 	.word	0x40011400
 80048d8:	0802b124 	.word	0x0802b124
 80048dc:	200016c0 	.word	0x200016c0
 80048e0:	20001750 	.word	0x20001750
 80048e4:	0802b0d8 	.word	0x0802b0d8
 80048e8:	20002bfc 	.word	0x20002bfc
 80048ec:	20002ac8 	.word	0x20002ac8
 80048f0:	0802b0f8 	.word	0x0802b0f8
 80048f4:	ffffffff 	.word	0xffffffff

080048f8 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 80048f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048fc:	ed2d 8b02 	vpush	{d8}
 8004900:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 8004902:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 8004904:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004906:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800490a:	ae0c      	add	r6, sp, #48	; 0x30
 800490c:	4f6e      	ldr	r7, [pc, #440]	; (8004ac8 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800490e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8004af0 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 8004912:	f010 fbeb 	bl	80150ec <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004916:	2301      	movs	r3, #1
 8004918:	9600      	str	r6, [sp, #0]
 800491a:	b2aa      	uxth	r2, r5
 800491c:	21c1      	movs	r1, #193	; 0xc1
 800491e:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8004920:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004922:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8004926:	f007 fc95 	bl	800c254 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800492a:	4604      	mov	r4, r0
 800492c:	2800      	cmp	r0, #0
 800492e:	f040 80a6 	bne.w	8004a7e <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8004932:	3501      	adds	r5, #1
 8004934:	2d04      	cmp	r5, #4
 8004936:	d1ee      	bne.n	8004916 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8004938:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800493c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8004940:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8004944:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8004948:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800494c:	485f      	ldr	r0, [pc, #380]	; (8004acc <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800494e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004952:	495f      	ldr	r1, [pc, #380]	; (8004ad0 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8004954:	0992      	lsrs	r2, r2, #6
	t = tr;
 8004956:	099c      	lsrs	r4, r3, #6
	p = pr;
 8004958:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800495c:	4a5d      	ldr	r2, [pc, #372]	; (8004ad4 <getpressure115.part.0+0x1dc>)
	t = tr;
 800495e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 8004962:	119d      	asrs	r5, r3, #6
	p = pr;
 8004964:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8004968:	2400      	movs	r4, #0
	t = tr;
 800496a:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800496e:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 8004972:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 8004976:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800497a:	ed9d 7b08 	vldr	d7, [sp, #32]
 800497e:	ed91 4b00 	vldr	d4, [r1]
 8004982:	4955      	ldr	r1, [pc, #340]	; (8004ad8 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 8004984:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004986:	eea1 4b07 	vfma.f64	d4, d1, d7
 800498a:	ed91 6b00 	vldr	d6, [r1]
 800498e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004992:	ed92 0b00 	vldr	d0, [r2]
 8004996:	eeb0 7b46 	vmov.f64	d7, d6
 800499a:	ed9d 2b08 	vldr	d2, [sp, #32]
 800499e:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80049a2:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8004a98 <getpressure115.part.0+0x1a0>
 80049a6:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8004aa0 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80049aa:	eea0 7b02 	vfma.f64	d7, d0, d2
 80049ae:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80049b2:	ed9d 6b06 	vldr	d6, [sp, #24]
 80049b6:	eea6 5b03 	vfma.f64	d5, d6, d3
 80049ba:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80049be:	ed9d 0b06 	vldr	d0, [sp, #24]
 80049c2:	f020 fc57 	bl	8025274 <modf>
	t = tr * -0.1706 + 112.27; //C
 80049c6:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80049ca:	4944      	ldr	r1, [pc, #272]	; (8004adc <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80049cc:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 80049d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 80049d4:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 80049d6:	2264      	movs	r2, #100	; 0x64
 80049d8:	4842      	ldr	r0, [pc, #264]	; (8004ae4 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 80049da:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8004aa8 <getpressure115.part.0+0x1b0>
 80049de:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8004ab0 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 80049e2:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 80049e6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80049ea:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8004ab8 <getpressure115.part.0+0x1c0>
 80049ee:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 80049f2:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80049f6:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 80049fa:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80049fe:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8004ac0 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004a02:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 8004a06:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 8004a0c:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004a10:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a14:	4935      	ldr	r1, [pc, #212]	; (8004aec <getpressure115.part.0+0x1f4>)
	temperature = t;
 8004a16:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8004a1a:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a1e:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8004a22:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a26:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a2a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 8004a2e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a32:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8004a36:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a3a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 8004a3e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a42:	feb8 7b47 	vrinta.f64	d7, d7
 8004a46:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 8004a4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004a4e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a52:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8004a56:	ee16 3a10 	vmov	r3, s12
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a60:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 8004a64:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a66:	ee17 2a10 	vmov	r2, s14
}
 8004a6a:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004a6c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a74:	b00f      	add	sp, #60	; 0x3c
 8004a76:	ecbd 8b02 	vpop	{d8}
 8004a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004a7e:	4648      	mov	r0, r9
 8004a80:	4621      	mov	r1, r4
 8004a82:	f020 faa3 	bl	8024fcc <iprintf>
			if (i == 3)
 8004a86:	2d03      	cmp	r5, #3
 8004a88:	f47f af53 	bne.w	8004932 <getpressure115.part.0+0x3a>
}
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	b00f      	add	sp, #60	; 0x3c
 8004a90:	ecbd 8b02 	vpop	{d8}
 8004a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a98:	04411044 	.word	0x04411044
 8004a9c:	3fb04411 	.word	0x3fb04411
 8004aa0:	00000000 	.word	0x00000000
 8004aa4:	40490000 	.word	0x40490000
 8004aa8:	86594af5 	.word	0x86594af5
 8004aac:	bfc5d638 	.word	0xbfc5d638
 8004ab0:	ae147ae1 	.word	0xae147ae1
 8004ab4:	405c1147 	.word	0x405c1147
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	40590000 	.word	0x40590000
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	40af4000 	.word	0x40af4000
 8004ac8:	200021b4 	.word	0x200021b4
 8004acc:	20002cc0 	.word	0x20002cc0
 8004ad0:	20002ca8 	.word	0x20002ca8
 8004ad4:	20002cb0 	.word	0x20002cb0
 8004ad8:	20002ca0 	.word	0x20002ca0
 8004adc:	20002d3c 	.word	0x20002d3c
 8004ae0:	20002d40 	.word	0x20002d40
 8004ae4:	20002d4c 	.word	0x20002d4c
 8004ae8:	20002d48 	.word	0x20002d48
 8004aec:	20002c04 	.word	0x20002c04
 8004af0:	0802b158 	.word	0x0802b158

08004af4 <cycleleds>:
void cycleleds(void) {
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8004af8:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004afa:	4f1c      	ldr	r7, [pc, #112]	; (8004b6c <cycleleds+0x78>)
 8004afc:	ac01      	add	r4, sp, #4
 8004afe:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8004b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b04:	4623      	mov	r3, r4
 8004b06:	4626      	mov	r6, r4
 8004b08:	c303      	stmia	r3!, {r0, r1}
 8004b0a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004b0c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004b10:	4638      	mov	r0, r7
 8004b12:	2200      	movs	r2, #0
 8004b14:	f006 ff04 	bl	800b920 <HAL_GPIO_WritePin>
		osDelay(140);
 8004b18:	208c      	movs	r0, #140	; 0x8c
 8004b1a:	f010 fae7 	bl	80150ec <osDelay>
	for (i = 0; i < 5; i++) {
 8004b1e:	42ae      	cmp	r6, r5
 8004b20:	d1f4      	bne.n	8004b0c <cycleleds+0x18>
	osDelay(600);
 8004b22:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004b26:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004b28:	4f10      	ldr	r7, [pc, #64]	; (8004b6c <cycleleds+0x78>)
	osDelay(600);
 8004b2a:	f010 fadf 	bl	80150ec <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004b2e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004b32:	4638      	mov	r0, r7
 8004b34:	2201      	movs	r2, #1
 8004b36:	f006 fef3 	bl	800b920 <HAL_GPIO_WritePin>
		osDelay(140);
 8004b3a:	208c      	movs	r0, #140	; 0x8c
 8004b3c:	f010 fad6 	bl	80150ec <osDelay>
	for (i = 0; i < 5; i++) {
 8004b40:	42ae      	cmp	r6, r5
 8004b42:	d1f4      	bne.n	8004b2e <cycleleds+0x3a>
	osDelay(500);
 8004b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004b48:	4e08      	ldr	r6, [pc, #32]	; (8004b6c <cycleleds+0x78>)
	osDelay(500);
 8004b4a:	f010 facf 	bl	80150ec <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004b4e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004b52:	4630      	mov	r0, r6
 8004b54:	2200      	movs	r2, #0
 8004b56:	f006 fee3 	bl	800b920 <HAL_GPIO_WritePin>
		osDelay(140);
 8004b5a:	208c      	movs	r0, #140	; 0x8c
 8004b5c:	f010 fac6 	bl	80150ec <osDelay>
	for (i = 0; i < 5; i++) {
 8004b60:	42ac      	cmp	r4, r5
 8004b62:	d1f4      	bne.n	8004b4e <cycleleds+0x5a>
}
 8004b64:	b005      	add	sp, #20
 8004b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b68:	080291dc 	.word	0x080291dc
 8004b6c:	40020c00 	.word	0x40020c00

08004b70 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4604      	mov	r4, r0
 8004b74:	b082      	sub	sp, #8
	osDelay(5);
 8004b76:	2005      	movs	r0, #5
 8004b78:	f010 fab8 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2104      	movs	r1, #4
 8004b80:	482b      	ldr	r0, [pc, #172]	; (8004c30 <setpgagain+0xc0>)
 8004b82:	f006 fecd 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004b86:	2005      	movs	r0, #5
 8004b88:	f010 fab0 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2104      	movs	r1, #4
 8004b90:	4827      	ldr	r0, [pc, #156]	; (8004c30 <setpgagain+0xc0>)
 8004b92:	f006 fec5 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004b96:	2005      	movs	r0, #5
 8004b98:	f010 faa8 	bl	80150ec <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004b9c:	4925      	ldr	r1, [pc, #148]	; (8004c34 <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba2:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004ba4:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004ba6:	4824      	ldr	r0, [pc, #144]	; (8004c38 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004ba8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004bac:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004bb0:	a901      	add	r1, sp, #4
 8004bb2:	f009 febb 	bl	800e92c <HAL_SPI_Transmit>
 8004bb6:	bb70      	cbnz	r0, 8004c16 <setpgagain+0xa6>
	osDelay(5);
 8004bb8:	2005      	movs	r0, #5
 8004bba:	f010 fa97 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2104      	movs	r1, #4
 8004bc2:	481b      	ldr	r0, [pc, #108]	; (8004c30 <setpgagain+0xc0>)
 8004bc4:	f006 feac 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004bc8:	2005      	movs	r0, #5
 8004bca:	f010 fa8f 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	4817      	ldr	r0, [pc, #92]	; (8004c30 <setpgagain+0xc0>)
 8004bd4:	f006 fea4 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004bd8:	2005      	movs	r0, #5
 8004bda:	f010 fa87 	bl	80150ec <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004bde:	2c08      	cmp	r4, #8
 8004be0:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004be8:	bfb8      	it	lt
 8004bea:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004bee:	2201      	movs	r2, #1
 8004bf0:	a901      	add	r1, sp, #4
 8004bf2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004bf6:	4810      	ldr	r0, [pc, #64]	; (8004c38 <setpgagain+0xc8>)
 8004bf8:	f009 fe98 	bl	800e92c <HAL_SPI_Transmit>
 8004bfc:	b990      	cbnz	r0, 8004c24 <setpgagain+0xb4>
	osDelay(5);
 8004bfe:	2005      	movs	r0, #5
 8004c00:	f010 fa74 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004c04:	2201      	movs	r2, #1
 8004c06:	2104      	movs	r1, #4
 8004c08:	4809      	ldr	r0, [pc, #36]	; (8004c30 <setpgagain+0xc0>)
 8004c0a:	f006 fe89 	bl	800b920 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <setpgagain+0xcc>)
 8004c10:	801c      	strh	r4, [r3, #0]
}
 8004c12:	b002      	add	sp, #8
 8004c14:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8004c16:	4601      	mov	r1, r0
 8004c18:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004c1c:	4808      	ldr	r0, [pc, #32]	; (8004c40 <setpgagain+0xd0>)
 8004c1e:	f020 f9d5 	bl	8024fcc <iprintf>
 8004c22:	e7c9      	b.n	8004bb8 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8004c24:	4601      	mov	r1, r0
 8004c26:	4807      	ldr	r0, [pc, #28]	; (8004c44 <setpgagain+0xd4>)
 8004c28:	f020 f9d0 	bl	8024fcc <iprintf>
 8004c2c:	e7e7      	b.n	8004bfe <setpgagain+0x8e>
 8004c2e:	bf00      	nop
 8004c30:	40021800 	.word	0x40021800
 8004c34:	0802b5b4 	.word	0x0802b5b4
 8004c38:	200022b8 	.word	0x200022b8
 8004c3c:	20002d38 	.word	0x20002d38
 8004c40:	0802b17c 	.word	0x0802b17c
 8004c44:	0802b1a8 	.word	0x0802b1a8

08004c48 <initpga>:
int initpga() {
 8004c48:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004c4a:	2201      	movs	r2, #1
int initpga() {
 8004c4c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004c4e:	2104      	movs	r1, #4
 8004c50:	4826      	ldr	r0, [pc, #152]	; (8004cec <initpga+0xa4>)
 8004c52:	f006 fe65 	bl	800b920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8004c56:	2200      	movs	r2, #0
 8004c58:	2104      	movs	r1, #4
 8004c5a:	4824      	ldr	r0, [pc, #144]	; (8004cec <initpga+0xa4>)
 8004c5c:	f006 fe60 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(50);
 8004c60:	2032      	movs	r0, #50	; 0x32
 8004c62:	f010 fa43 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004c66:	2201      	movs	r2, #1
 8004c68:	2104      	movs	r1, #4
 8004c6a:	4820      	ldr	r0, [pc, #128]	; (8004cec <initpga+0xa4>)
 8004c6c:	f006 fe58 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004c70:	2005      	movs	r0, #5
 8004c72:	f010 fa3b 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004c76:	2200      	movs	r2, #0
 8004c78:	2104      	movs	r1, #4
 8004c7a:	481c      	ldr	r0, [pc, #112]	; (8004cec <initpga+0xa4>)
 8004c7c:	f006 fe50 	bl	800b920 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8004c80:	2000      	movs	r0, #0
 8004c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c86:	2201      	movs	r2, #1
 8004c88:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004c8c:	a901      	add	r1, sp, #4
 8004c8e:	4818      	ldr	r0, [pc, #96]	; (8004cf0 <initpga+0xa8>)
 8004c90:	f009 fe4c 	bl	800e92c <HAL_SPI_Transmit>
 8004c94:	4604      	mov	r4, r0
 8004c96:	bb08      	cbnz	r0, 8004cdc <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004c98:	2104      	movs	r1, #4
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4813      	ldr	r0, [pc, #76]	; (8004cec <initpga+0xa4>)
 8004c9e:	f006 fe3f 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(5);
 8004ca2:	2005      	movs	r0, #5
 8004ca4:	f010 fa22 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004ca8:	4622      	mov	r2, r4
 8004caa:	2104      	movs	r1, #4
 8004cac:	480f      	ldr	r0, [pc, #60]	; (8004cec <initpga+0xa4>)
 8004cae:	f006 fe37 	bl	800b920 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004cb2:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8004cb6:	2005      	movs	r0, #5
 8004cb8:	f010 fa18 	bl	80150ec <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	a901      	add	r1, sp, #4
 8004cc4:	480a      	ldr	r0, [pc, #40]	; (8004cf0 <initpga+0xa8>)
 8004cc6:	f8ad 4004 	strh.w	r4, [sp, #4]
 8004cca:	f009 fe2f 	bl	800e92c <HAL_SPI_Transmit>
 8004cce:	4604      	mov	r4, r0
 8004cd0:	b920      	cbnz	r0, 8004cdc <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8004cd2:	f7ff ff4d 	bl	8004b70 <setpgagain>
	return (0);
 8004cd6:	4620      	mov	r0, r4
}
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4805      	ldr	r0, [pc, #20]	; (8004cf4 <initpga+0xac>)
 8004ce0:	f020 f974 	bl	8024fcc <iprintf>
		return (1);
 8004ce4:	2001      	movs	r0, #1
}
 8004ce6:	b002      	add	sp, #8
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	40021800 	.word	0x40021800
 8004cf0:	200022b8 	.word	0x200022b8
 8004cf4:	0802b1c4 	.word	0x0802b1c4

08004cf8 <bumppga>:
int bumppga(int i) {
 8004cf8:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8004cfa:	4d1f      	ldr	r5, [pc, #124]	; (8004d78 <bumppga+0x80>)
int bumppga(int i) {
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	4604      	mov	r4, r0
	gain = pgagain;
 8004d00:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8004d04:	b28b      	uxth	r3, r1
	gain = pgagain;
 8004d06:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	d827      	bhi.n	8004d5c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <bumppga+0x84>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b0b      	cmp	r3, #11
 8004d12:	d00c      	beq.n	8004d2e <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	da01      	bge.n	8004d1e <bumppga+0x26>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd04      	ble.n	8004d28 <bumppga+0x30>
 8004d1e:	2c00      	cmp	r4, #0
 8004d20:	9b01      	ldr	r3, [sp, #4]
 8004d22:	dd12      	ble.n	8004d4a <bumppga+0x52>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	dd10      	ble.n	8004d4a <bumppga+0x52>
	return (0);
 8004d28:	2000      	movs	r0, #0
}
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8004d2e:	2907      	cmp	r1, #7
 8004d30:	dd01      	ble.n	8004d36 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8004d32:	2307      	movs	r3, #7
 8004d34:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8004d36:	2c00      	cmp	r4, #0
 8004d38:	9b01      	ldr	r3, [sp, #4]
 8004d3a:	da01      	bge.n	8004d40 <bumppga+0x48>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	ddf3      	ble.n	8004d28 <bumppga+0x30>
 8004d40:	9b01      	ldr	r3, [sp, #4]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	dd01      	ble.n	8004d4a <bumppga+0x52>
 8004d46:	2c00      	cmp	r4, #0
 8004d48:	dcee      	bgt.n	8004d28 <bumppga+0x30>
			gain = gain + i;
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	4423      	add	r3, r4
 8004d4e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8004d50:	9801      	ldr	r0, [sp, #4]
 8004d52:	f7ff ff0d 	bl	8004b70 <setpgagain>
			return (i);
 8004d56:	4620      	mov	r0, r4
}
 8004d58:	b003      	add	sp, #12
 8004d5a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8004d5c:	4808      	ldr	r0, [pc, #32]	; (8004d80 <bumppga+0x88>)
 8004d5e:	f020 f935 	bl	8024fcc <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <bumppga+0x84>)
		pgagain = 0;
 8004d64:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004d66:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8004d68:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004d6a:	2b0b      	cmp	r3, #11
 8004d6c:	d0e3      	beq.n	8004d36 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004d6e:	2c00      	cmp	r4, #0
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	dbd2      	blt.n	8004d1a <bumppga+0x22>
 8004d74:	e7d3      	b.n	8004d1e <bumppga+0x26>
 8004d76:	bf00      	nop
 8004d78:	20002d38 	.word	0x20002d38
 8004d7c:	20001d4c 	.word	0x20001d4c
 8004d80:	0802b1e0 	.word	0x0802b1e0

08004d84 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8004d84:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d86:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8004d88:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d90:	f88d 000c 	strb.w	r0, [sp, #12]
 8004d94:	2302      	movs	r3, #2
 8004d96:	f88d 100d 	strb.w	r1, [sp, #13]
 8004d9a:	aa03      	add	r2, sp, #12
 8004d9c:	21c0      	movs	r1, #192	; 0xc0
 8004d9e:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <getpressure115+0x40>)
 8004da0:	9400      	str	r4, [sp, #0]
 8004da2:	f007 f8c3 	bl	800bf2c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004da6:	b928      	cbnz	r0, 8004db4 <getpressure115+0x30>
 8004da8:	f7ff fda6 	bl	80048f8 <getpressure115.part.0>
 8004dac:	4604      	mov	r4, r0
}
 8004dae:	4620      	mov	r0, r4
 8004db0:	b004      	add	sp, #16
 8004db2:	bd10      	pop	{r4, pc}
 8004db4:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004db6:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <getpressure115+0x44>)
 8004db8:	f020 f908 	bl	8024fcc <iprintf>
}
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200021b4 	.word	0x200021b4
 8004dc8:	0802b218 	.word	0x0802b218

08004dcc <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8004dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8004dd2:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004dd6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004dda:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8004dde:	ac06      	add	r4, sp, #24
 8004de0:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004de4:	4f36      	ldr	r7, [pc, #216]	; (8004ec0 <initpressure115+0xf4>)
 8004de6:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8004dea:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004dee:	eb09 0204 	add.w	r2, r9, r4
 8004df2:	2301      	movs	r3, #1
 8004df4:	9400      	str	r4, [sp, #0]
 8004df6:	21c0      	movs	r1, #192	; 0xc0
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	441c      	add	r4, r3
 8004dfe:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8004e02:	f007 fa27 	bl	800c254 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004e06:	4605      	mov	r5, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d141      	bne.n	8004e90 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8004e0c:	45a2      	cmp	sl, r4
 8004e0e:	d1ee      	bne.n	8004dee <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8004e10:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004e14:	2b5a      	cmp	r3, #90	; 0x5a
 8004e16:	d04a      	beq.n	8004eae <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8004e18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8004e1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004e20:	badb      	revsh	r3, r3
 8004e22:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8004e26:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004e2a:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8004e2c:	109b      	asrs	r3, r3, #2
 8004e2e:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8004e30:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8004e32:	ee06 2a10 	vmov	s12, r2
 8004e36:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8004e3a:	ee07 3a10 	vmov	s14, r3
 8004e3e:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8004e42:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8004e44:	ee05 1a10 	vmov	s10, r1
 8004e48:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004e4c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8004e4e:	ee04 0a10 	vmov	s8, r0
 8004e52:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8004e58:	481c      	ldr	r0, [pc, #112]	; (8004ecc <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8004e5a:	491d      	ldr	r1, [pc, #116]	; (8004ed0 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004e5c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8004e60:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004e64:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8004e66:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8004e6a:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8004e6e:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004e72:	f88d 2014 	strb.w	r2, [sp, #20]
 8004e76:	2302      	movs	r3, #2
 8004e78:	aa05      	add	r2, sp, #20
 8004e7a:	21c0      	movs	r1, #192	; 0xc0
 8004e7c:	4810      	ldr	r0, [pc, #64]	; (8004ec0 <initpressure115+0xf4>)
 8004e7e:	f007 f855 	bl	800bf2c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004e82:	b968      	cbnz	r0, 8004ea0 <initpressure115+0xd4>
 8004e84:	f7ff fd38 	bl	80048f8 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8004e88:	4628      	mov	r0, r5
 8004e8a:	b008      	add	sp, #32
 8004e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004e90:	4601      	mov	r1, r0
 8004e92:	4810      	ldr	r0, [pc, #64]	; (8004ed4 <initpressure115+0x108>)
 8004e94:	f020 f89a 	bl	8024fcc <iprintf>
}
 8004e98:	4628      	mov	r0, r5
 8004e9a:	b008      	add	sp, #32
 8004e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <initpressure115+0x10c>)
 8004ea2:	f020 f893 	bl	8024fcc <iprintf>
}
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	b008      	add	sp, #32
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004eae:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004eb0:	480a      	ldr	r0, [pc, #40]	; (8004edc <initpressure115+0x110>)
 8004eb2:	f020 f88b 	bl	8024fcc <iprintf>
}
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	b008      	add	sp, #32
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200021b4 	.word	0x200021b4
 8004ec4:	20002cc0 	.word	0x20002cc0
 8004ec8:	20002ca0 	.word	0x20002ca0
 8004ecc:	20002ca8 	.word	0x20002ca8
 8004ed0:	20002cb0 	.word	0x20002cb0
 8004ed4:	0802b23c 	.word	0x0802b23c
 8004ed8:	0802b218 	.word	0x0802b218
 8004edc:	0802b26c 	.word	0x0802b26c

08004ee0 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8004ee6:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8004ee8:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004eea:	4f46      	ldr	r7, [pc, #280]	; (8005004 <getpressure3115+0x124>)
 8004eec:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004eee:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005024 <getpressure3115+0x144>
	data[0] = 0x55;
 8004ef2:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8004ef6:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004ef8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8004efc:	f010 f8f6 	bl	80150ec <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004f00:	2301      	movs	r3, #1
 8004f02:	2200      	movs	r2, #0
 8004f04:	21c0      	movs	r1, #192	; 0xc0
 8004f06:	4638      	mov	r0, r7
 8004f08:	9600      	str	r6, [sp, #0]
 8004f0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f0e:	f007 f9a1 	bl	800c254 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004f12:	4604      	mov	r4, r0
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d163      	bne.n	8004fe0 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8004f18:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8004f1c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8004f1e:	071b      	lsls	r3, r3, #28
 8004f20:	d401      	bmi.n	8004f26 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8004f22:	2d04      	cmp	r5, #4
 8004f24:	d1e7      	bne.n	8004ef6 <getpressure3115+0x16>
 8004f26:	2501      	movs	r5, #1
 8004f28:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004f2a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8004f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005004 <getpressure3115+0x124>
 8004f32:	46a9      	mov	r9, r5
 8004f34:	b2aa      	uxth	r2, r5
 8004f36:	2301      	movs	r3, #1
 8004f38:	21c0      	movs	r1, #192	; 0xc0
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8004f3e:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004f40:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8004f44:	f007 f986 	bl	800c254 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004f48:	4604      	mov	r4, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d152      	bne.n	8004ff4 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8004f4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8004f52:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8004f54:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8004f58:	d1ec      	bne.n	8004f34 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004f5a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8004f5e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004f62:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004f66:	0209      	lsls	r1, r1, #8
 8004f68:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8004f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f74:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004f78:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8004f7a:	4923      	ldr	r1, [pc, #140]	; (8005008 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004f7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004f80:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004f82:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004f84:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004f86:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004f88:	9805      	ldr	r0, [sp, #20]
 8004f8a:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004f8e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004f92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004f96:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	fba3 0202 	umull	r0, r2, r3, r2
 8004fa0:	0a12      	lsrs	r2, r2, #8
 8004fa2:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004fa4:	9a04      	ldr	r2, [sp, #16]
 8004fa6:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004faa:	4819      	ldr	r0, [pc, #100]	; (8005010 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8004fb4:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004fb8:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004fbe:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8004fc0:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004fc2:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004fc4:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8004fc6:	0912      	lsrs	r2, r2, #4
 8004fc8:	4813      	ldr	r0, [pc, #76]	; (8005018 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8004fca:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8004fce:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8004fd0:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <getpressure3115+0x13c>)
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	b00c      	add	sp, #48	; 0x30
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f01f fff2 	bl	8024fcc <iprintf>
			if (trys == 3)
 8004fe8:	2d03      	cmp	r5, #3
 8004fea:	d195      	bne.n	8004f18 <getpressure3115+0x38>
}
 8004fec:	4620      	mov	r0, r4
 8004fee:	b00c      	add	sp, #48	; 0x30
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	480a      	ldr	r0, [pc, #40]	; (8005020 <getpressure3115+0x140>)
 8004ff8:	f01f ffe8 	bl	8024fcc <iprintf>
}
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	b00c      	add	sp, #48	; 0x30
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	200021b4 	.word	0x200021b4
 8005008:	20002c04 	.word	0x20002c04
 800500c:	10624dd3 	.word	0x10624dd3
 8005010:	20002d3c 	.word	0x20002d3c
 8005014:	20002d40 	.word	0x20002d40
 8005018:	20002d48 	.word	0x20002d48
 800501c:	20002d4c 	.word	0x20002d4c
 8005020:	0802b2bc 	.word	0x0802b2bc
 8005024:	0802b294 	.word	0x0802b294

08005028 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 800502c:	2501      	movs	r5, #1
 800502e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005032:	220c      	movs	r2, #12
 8005034:	a908      	add	r1, sp, #32
 8005036:	462b      	mov	r3, r5
 8005038:	4832      	ldr	r0, [pc, #200]	; (8005104 <initpressure3115+0xdc>)
 800503a:	9100      	str	r1, [sp, #0]
 800503c:	21c0      	movs	r1, #192	; 0xc0
 800503e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005042:	f007 f907 	bl	800c254 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005046:	2800      	cmp	r0, #0
 8005048:	d145      	bne.n	80050d6 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 800504a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800504e:	2bc4      	cmp	r3, #196	; 0xc4
 8005050:	d003      	beq.n	800505a <initpressure3115+0x32>
		return (HAL_ERROR);
 8005052:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8005054:	4620      	mov	r0, r4
 8005056:	b00b      	add	sp, #44	; 0x2c
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 800505a:	4f2b      	ldr	r7, [pc, #172]	; (8005108 <initpressure3115+0xe0>)
 800505c:	aa05      	add	r2, sp, #20
 800505e:	21c0      	movs	r1, #192	; 0xc0
 8005060:	4828      	ldr	r0, [pc, #160]	; (8005104 <initpressure3115+0xdc>)
 8005062:	89bb      	ldrh	r3, [r7, #12]
 8005064:	9600      	str	r6, [sp, #0]
 8005066:	f8ad 3014 	strh.w	r3, [sp, #20]
 800506a:	2302      	movs	r3, #2
 800506c:	f006 ff5e 	bl	800bf2c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005070:	4604      	mov	r4, r0
 8005072:	2800      	cmp	r0, #0
 8005074:	d136      	bne.n	80050e4 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8005076:	8a3b      	ldrh	r3, [r7, #16]
 8005078:	aa06      	add	r2, sp, #24
 800507a:	21c0      	movs	r1, #192	; 0xc0
 800507c:	4821      	ldr	r0, [pc, #132]	; (8005104 <initpressure3115+0xdc>)
 800507e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005082:	2302      	movs	r3, #2
 8005084:	9600      	str	r6, [sp, #0]
 8005086:	f006 ff51 	bl	800bf2c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800508a:	4604      	mov	r4, r0
 800508c:	bb70      	cbnz	r0, 80050ec <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 800508e:	8aba      	ldrh	r2, [r7, #20]
 8005090:	2302      	movs	r3, #2
 8005092:	21c0      	movs	r1, #192	; 0xc0
 8005094:	481b      	ldr	r0, [pc, #108]	; (8005104 <initpressure3115+0xdc>)
 8005096:	f8ad 201c 	strh.w	r2, [sp, #28]
 800509a:	aa07      	add	r2, sp, #28
 800509c:	9600      	str	r6, [sp, #0]
 800509e:	f006 ff45 	bl	800bf2c <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80050a2:	4604      	mov	r4, r0
 80050a4:	bb50      	cbnz	r0, 80050fc <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 80050a6:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 80050a8:	2064      	movs	r0, #100	; 0x64
 80050aa:	f010 f81f 	bl	80150ec <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 80050ae:	462b      	mov	r3, r5
 80050b0:	9400      	str	r4, [sp, #0]
 80050b2:	462a      	mov	r2, r5
 80050b4:	21c0      	movs	r1, #192	; 0xc0
 80050b6:	4813      	ldr	r0, [pc, #76]	; (8005104 <initpressure3115+0xdc>)
 80050b8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80050bc:	f007 f8ca 	bl	800c254 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80050c0:	4604      	mov	r4, r0
 80050c2:	b9b8      	cbnz	r0, 80050f4 <initpressure3115+0xcc>
	result = getpressure3115();
 80050c4:	f7ff ff0c 	bl	8004ee0 <getpressure3115>
	if (result != HAL_OK) {
 80050c8:	4604      	mov	r4, r0
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0c2      	beq.n	8005054 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 80050ce:	480f      	ldr	r0, [pc, #60]	; (800510c <initpressure3115+0xe4>)
 80050d0:	f01f ff7c 	bl	8024fcc <iprintf>
 80050d4:	e7be      	b.n	8005054 <initpressure3115+0x2c>
 80050d6:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 80050d8:	480d      	ldr	r0, [pc, #52]	; (8005110 <initpressure3115+0xe8>)
 80050da:	f01f ff77 	bl	8024fcc <iprintf>
}
 80050de:	4620      	mov	r0, r4
 80050e0:	b00b      	add	sp, #44	; 0x2c
 80050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 80050e4:	480b      	ldr	r0, [pc, #44]	; (8005114 <initpressure3115+0xec>)
 80050e6:	f01f ff71 	bl	8024fcc <iprintf>
		return (result);
 80050ea:	e7b3      	b.n	8005054 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 80050ec:	480a      	ldr	r0, [pc, #40]	; (8005118 <initpressure3115+0xf0>)
 80050ee:	f01f ff6d 	bl	8024fcc <iprintf>
		return (result);
 80050f2:	e7af      	b.n	8005054 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 80050f4:	4809      	ldr	r0, [pc, #36]	; (800511c <initpressure3115+0xf4>)
 80050f6:	f01f ff69 	bl	8024fcc <iprintf>
		return (result);
 80050fa:	e7ab      	b.n	8005054 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 80050fc:	4808      	ldr	r0, [pc, #32]	; (8005120 <initpressure3115+0xf8>)
 80050fe:	f01f ff65 	bl	8024fcc <iprintf>
		return (result);
 8005102:	e7a7      	b.n	8005054 <initpressure3115+0x2c>
 8005104:	200021b4 	.word	0x200021b4
 8005108:	080291dc 	.word	0x080291dc
 800510c:	0802b354 	.word	0x0802b354
 8005110:	0802b1fc 	.word	0x0802b1fc
 8005114:	0802b2e4 	.word	0x0802b2e4
 8005118:	0802b300 	.word	0x0802b300
 800511c:	0802b338 	.word	0x0802b338
 8005120:	0802b31c 	.word	0x0802b31c

08005124 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8005124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8005128:	4820      	ldr	r0, [pc, #128]	; (80051ac <init_esp+0x88>)
 800512a:	f01f ffeb 	bl	8025104 <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 800512e:	2201      	movs	r2, #1
 8005130:	491f      	ldr	r1, [pc, #124]	; (80051b0 <init_esp+0x8c>)
 8005132:	4820      	ldr	r0, [pc, #128]	; (80051b4 <init_esp+0x90>)
 8005134:	f00d ff7e 	bl	8013034 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8005138:	bb98      	cbnz	r0, 80051a2 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 800513a:	2200      	movs	r2, #0
 800513c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005140:	481d      	ldr	r0, [pc, #116]	; (80051b8 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005142:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005146:	f006 fbeb 	bl	800b920 <HAL_GPIO_WritePin>
	osDelay(20);
 800514a:	4c1c      	ldr	r4, [pc, #112]	; (80051bc <init_esp+0x98>)
 800514c:	2014      	movs	r0, #20
 800514e:	4d1c      	ldr	r5, [pc, #112]	; (80051c0 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8005150:	4e1c      	ldr	r6, [pc, #112]	; (80051c4 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8005152:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8005156:	f00f ffc9 	bl	80150ec <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 800515a:	2201      	movs	r2, #1
 800515c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005160:	4815      	ldr	r0, [pc, #84]	; (80051b8 <init_esp+0x94>)
 8005162:	f006 fbdd 	bl	800b920 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	e006      	b.n	8005178 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 800516a:	5cf0      	ldrb	r0, [r6, r3]
 800516c:	6021      	str	r1, [r4, #0]
 800516e:	f01f ff45 	bl	8024ffc <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	2b60      	cmp	r3, #96	; 0x60
 8005176:	d810      	bhi.n	800519a <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005178:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 800517a:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 800517c:	429a      	cmp	r2, r3
 800517e:	d1f4      	bne.n	800516a <init_esp+0x46>
		osDelay(1);
 8005180:	2001      	movs	r0, #1
 8005182:	f00f ffb3 	bl	80150ec <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8005186:	3f01      	subs	r7, #1
 8005188:	d1ed      	bne.n	8005166 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 800518a:	20c8      	movs	r0, #200	; 0xc8
 800518c:	f00f ffae 	bl	80150ec <osDelay>
	printf("\n");
 8005190:	200a      	movs	r0, #10
}
 8005192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8005196:	f01f bf31 	b.w	8024ffc <putchar>
			espoutindex = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	f8c4 8000 	str.w	r8, [r4]
 80051a0:	e7ea      	b.n	8005178 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 80051a2:	4809      	ldr	r0, [pc, #36]	; (80051c8 <init_esp+0xa4>)
 80051a4:	f01f ffae 	bl	8025104 <puts>
 80051a8:	e7c7      	b.n	800513a <init_esp+0x16>
 80051aa:	bf00      	nop
 80051ac:	0802b374 	.word	0x0802b374
 80051b0:	20002cc8 	.word	0x20002cc8
 80051b4:	20002854 	.word	0x20002854
 80051b8:	40021000 	.word	0x40021000
 80051bc:	20002ccc 	.word	0x20002ccc
 80051c0:	20002d30 	.word	0x20002d30
 80051c4:	20002cd0 	.word	0x20002cd0
 80051c8:	0802b388 	.word	0x0802b388

080051cc <uart6_rxdone>:
uart6_rxdone() {
 80051cc:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 80051ce:	4c0b      	ldr	r4, [pc, #44]	; (80051fc <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <uart6_rxdone+0x34>)
	i = esprxindex;
 80051d2:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 80051d4:	7819      	ldrb	r1, [r3, #0]
 80051d6:	1c6b      	adds	r3, r5, #1
 80051d8:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 80051da:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 80051dc:	5551      	strb	r1, [r2, r5]
 80051de:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 80051e0:	d902      	bls.n	80051e8 <uart6_rxdone+0x1c>
		esprxindex = 0;
 80051e2:	2200      	movs	r2, #0
 80051e4:	4613      	mov	r3, r2
 80051e6:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 80051e8:	4a07      	ldr	r2, [pc, #28]	; (8005208 <uart6_rxdone+0x3c>)
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d000      	beq.n	80051f2 <uart6_rxdone+0x26>
}
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 80051f2:	4806      	ldr	r0, [pc, #24]	; (800520c <uart6_rxdone+0x40>)
 80051f4:	f01f ff86 	bl	8025104 <puts>
		esprxindex = i;
 80051f8:	6025      	str	r5, [r4, #0]
}
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20002d30 	.word	0x20002d30
 8005200:	20002cc8 	.word	0x20002cc8
 8005204:	20002cd0 	.word	0x20002cd0
 8005208:	20002ccc 	.word	0x20002ccc
 800520c:	0802b3a0 	.word	0x0802b3a0

08005210 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8005210:	b510      	push	{r4, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8005216:	ac02      	add	r4, sp, #8
 8005218:	4620      	mov	r0, r4
 800521a:	f020 f95a 	bl	80254d2 <stpcpy>
	strcat(txbuf, "\r\n");
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <esp_cmd+0x44>)
 8005220:	8819      	ldrh	r1, [r3, #0]
 8005222:	789a      	ldrb	r2, [r3, #2]
 8005224:	1b03      	subs	r3, r0, r4
 8005226:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8005228:	4621      	mov	r1, r4
	len = strlen(txbuf);
 800522a:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 800522c:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 800522e:	480a      	ldr	r0, [pc, #40]	; (8005258 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8005230:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8005232:	f01f fecb 	bl	8024fcc <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8005236:	9a01      	ldr	r2, [sp, #4]
 8005238:	4621      	mov	r1, r4
 800523a:	4808      	ldr	r0, [pc, #32]	; (800525c <esp_cmd+0x4c>)
 800523c:	b292      	uxth	r2, r2
 800523e:	f00c fcb9 	bl	8011bb4 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8005242:	b908      	cbnz	r0, 8005248 <esp_cmd+0x38>
}
 8005244:	b006      	add	sp, #24
 8005246:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005248:	4601      	mov	r1, r0
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <esp_cmd+0x50>)
 800524c:	f01f febe 	bl	8024fcc <iprintf>
}
 8005250:	b006      	add	sp, #24
 8005252:	bd10      	pop	{r4, pc}
 8005254:	0802af50 	.word	0x0802af50
 8005258:	0802b3bc 	.word	0x0802b3bc
 800525c:	20002854 	.word	0x20002854
 8005260:	0802b3d0 	.word	0x0802b3d0

08005264 <test_esp>:
void test_esp() {
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005268:	4813      	ldr	r0, [pc, #76]	; (80052b8 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 800526a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 800526e:	f01f ff49 	bl	8025104 <puts>
	osDelay(200);
 8005272:	4c12      	ldr	r4, [pc, #72]	; (80052bc <test_esp+0x58>)
 8005274:	20c8      	movs	r0, #200	; 0xc8
 8005276:	4d12      	ldr	r5, [pc, #72]	; (80052c0 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005278:	4e12      	ldr	r6, [pc, #72]	; (80052c4 <test_esp+0x60>)
			espoutindex = 0;
 800527a:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 800527e:	f00f ff35 	bl	80150ec <osDelay>
	esp_cmd(getstatus);	// send the command
 8005282:	4811      	ldr	r0, [pc, #68]	; (80052c8 <test_esp+0x64>)
 8005284:	f7ff ffc4 	bl	8005210 <esp_cmd>
	while (espoutindex != esprxindex) {
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	e006      	b.n	800529a <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 800528c:	5cf0      	ldrb	r0, [r6, r3]
 800528e:	6021      	str	r1, [r4, #0]
 8005290:	f01f feb4 	bl	8024ffc <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	2b60      	cmp	r3, #96	; 0x60
 8005298:	d80a      	bhi.n	80052b0 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 800529a:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 800529c:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 800529e:	429a      	cmp	r2, r3
 80052a0:	d1f4      	bne.n	800528c <test_esp+0x28>
		osDelay(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f00f ff22 	bl	80150ec <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 80052a8:	3f01      	subs	r7, #1
 80052aa:	d1ed      	bne.n	8005288 <test_esp+0x24>
}
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c4 8000 	str.w	r8, [r4]
 80052b6:	e7f0      	b.n	800529a <test_esp+0x36>
 80052b8:	0802b3f0 	.word	0x0802b3f0
 80052bc:	20002ccc 	.word	0x20002ccc
 80052c0:	20002d30 	.word	0x20002d30
 80052c4:	20002cd0 	.word	0x20002cd0
 80052c8:	20000268 	.word	0x20000268

080052cc <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 80052cc:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 80052ce:	4818      	ldr	r0, [pc, #96]	; (8005330 <init_ds2485+0x64>)
void init_ds2485(void) {
 80052d0:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 80052d2:	f01f ff17 	bl	8025104 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 80052d6:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80052d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 80052dc:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 80052de:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80052e2:	2303      	movs	r3, #3
 80052e4:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 80052e6:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80052ea:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 80052ec:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80052f0:	aa02      	add	r2, sp, #8
 80052f2:	4810      	ldr	r0, [pc, #64]	; (8005334 <init_ds2485+0x68>)
 80052f4:	f006 fe1a 	bl	800bf2c <HAL_I2C_Master_Transmit>
 80052f8:	b9a8      	cbnz	r0, 8005326 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 80052fa:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80052fc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8005300:	f00f fef4 	bl	80150ec <osDelay>
		data[i] = 0xA5 + i;
 8005304:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005306:	2181      	movs	r1, #129	; 0x81
 8005308:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 800530a:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800530e:	aa02      	add	r2, sp, #8
 8005310:	4808      	ldr	r0, [pc, #32]	; (8005334 <init_ds2485+0x68>)
 8005312:	9400      	str	r4, [sp, #0]
 8005314:	f006 fed2 	bl	800c0bc <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8005318:	4601      	mov	r1, r0
 800531a:	b110      	cbz	r0, 8005322 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800531c:	4806      	ldr	r0, [pc, #24]	; (8005338 <init_ds2485+0x6c>)
 800531e:	f01f fe55 	bl	8024fcc <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8005322:	b006      	add	sp, #24
 8005324:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8005326:	4601      	mov	r1, r0
 8005328:	4803      	ldr	r0, [pc, #12]	; (8005338 <init_ds2485+0x6c>)
 800532a:	f01f fe4f 	bl	8024fcc <iprintf>
 800532e:	e7e4      	b.n	80052fa <init_ds2485+0x2e>
 8005330:	0802b418 	.word	0x0802b418
 8005334:	200021b4 	.word	0x200021b4
 8005338:	0802b424 	.word	0x0802b424

0800533c <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4604      	mov	r4, r0
 8005340:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8005342:	4821      	ldr	r0, [pc, #132]	; (80053c8 <readp_ds2485+0x8c>)
 8005344:	f01f fede 	bl	8025104 <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8005348:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800534a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800534e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8005350:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8005354:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800535a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800535e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8005360:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005364:	aa03      	add	r2, sp, #12
 8005366:	4819      	ldr	r0, [pc, #100]	; (80053cc <readp_ds2485+0x90>)
 8005368:	f006 fde0 	bl	800bf2c <HAL_I2C_Master_Transmit>
 800536c:	bb18      	cbnz	r0, 80053b6 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 800536e:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005370:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8005374:	f00f feba 	bl	80150ec <osDelay>
		data[i] = 0x5A + i;
 8005378:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800537a:	b2a3      	uxth	r3, r4
 800537c:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 800537e:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005382:	2181      	movs	r1, #129	; 0x81
 8005384:	4811      	ldr	r0, [pc, #68]	; (80053cc <readp_ds2485+0x90>)
 8005386:	9500      	str	r5, [sp, #0]
 8005388:	f006 fe98 	bl	800c0bc <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 800538c:	b9b8      	cbnz	r0, 80053be <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 800538e:	4810      	ldr	r0, [pc, #64]	; (80053d0 <readp_ds2485+0x94>)
 8005390:	f10d 040b 	add.w	r4, sp, #11
 8005394:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8005398:	4d0e      	ldr	r5, [pc, #56]	; (80053d4 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 800539a:	f01f fe17 	bl	8024fcc <iprintf>
		printf("0x%02x ", data[i]);
 800539e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80053a2:	4628      	mov	r0, r5
 80053a4:	f01f fe12 	bl	8024fcc <iprintf>
	for (i = 0; i < 8; i++) {
 80053a8:	42b4      	cmp	r4, r6
 80053aa:	d1f8      	bne.n	800539e <readp_ds2485+0x62>
	}
	printf("\n");
 80053ac:	200a      	movs	r0, #10
 80053ae:	f01f fe25 	bl	8024ffc <putchar>
}
 80053b2:	b006      	add	sp, #24
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 80053b6:	4808      	ldr	r0, [pc, #32]	; (80053d8 <readp_ds2485+0x9c>)
 80053b8:	f01f fe08 	bl	8024fcc <iprintf>
 80053bc:	e7d7      	b.n	800536e <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 80053be:	4601      	mov	r1, r0
 80053c0:	4806      	ldr	r0, [pc, #24]	; (80053dc <readp_ds2485+0xa0>)
 80053c2:	f01f fe03 	bl	8024fcc <iprintf>
 80053c6:	e7e2      	b.n	800538e <readp_ds2485+0x52>
 80053c8:	0802b448 	.word	0x0802b448
 80053cc:	200021b4 	.word	0x200021b4
 80053d0:	0802b4a8 	.word	0x0802b4a8
 80053d4:	0802b4d0 	.word	0x0802b4d0
 80053d8:	0802b460 	.word	0x0802b460
 80053dc:	0802b484 	.word	0x0802b484

080053e0 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80053e0:	b530      	push	{r4, r5, lr}
 80053e2:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80053e4:	4c41      	ldr	r4, [pc, #260]	; (80054ec <initsplat+0x10c>)
	cycleleds();
 80053e6:	f7ff fb85 	bl	8004af4 <cycleleds>
	osDelay(500);
 80053ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053ee:	f00f fe7d 	bl	80150ec <osDelay>
	printf("Initsplat: LED cycle\n");
 80053f2:	483f      	ldr	r0, [pc, #252]	; (80054f0 <initsplat+0x110>)
 80053f4:	f01f fe86 	bl	8025104 <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	2b0b      	cmp	r3, #11
 80053fc:	d05d      	beq.n	80054ba <initsplat+0xda>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 80053fe:	483d      	ldr	r0, [pc, #244]	; (80054f4 <initsplat+0x114>)
 8005400:	f01f fe80 	bl	8025104 <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8005404:	4d3c      	ldr	r5, [pc, #240]	; (80054f8 <initsplat+0x118>)
	initpga();
 8005406:	f7ff fc1f 	bl	8004c48 <initpga>
	osDelay(500);
 800540a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800540e:	f00f fe6d 	bl	80150ec <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8005412:	483a      	ldr	r0, [pc, #232]	; (80054fc <initsplat+0x11c>)
 8005414:	f01f fdda 	bl	8024fcc <iprintf>
	psensor = PNONE;
 8005418:	2300      	movs	r3, #0
 800541a:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800541c:	f7ff fe04 	bl	8005028 <initpressure3115>
 8005420:	b9e0      	cbnz	r0, 800545c <initsplat+0x7c>
		printf("MPL3115A2 pressure sensor present\n\r");
 8005422:	4837      	ldr	r0, [pc, #220]	; (8005500 <initsplat+0x120>)
 8005424:	f01f fdd2 	bl	8024fcc <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005428:	4a36      	ldr	r2, [pc, #216]	; (8005504 <initsplat+0x124>)
		psensor = MPL3115A2;
 800542a:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 800542c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8005430:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005432:	f043 0310 	orr.w	r3, r3, #16
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 800543a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800543e:	f00f fe55 	bl	80150ec <osDelay>

	if ((circuitboardpcb == LIGHTNINGBOARD1) || (circuitboardpcb == LIGHTNINGBOARD2)) {
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	3b15      	subs	r3, #21
 8005446:	2b01      	cmp	r3, #1
 8005448:	d91c      	bls.n	8005484 <initsplat+0xa4>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800544a:	2200      	movs	r2, #0
 800544c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005450:	482d      	ldr	r0, [pc, #180]	; (8005508 <initsplat+0x128>)
}
 8005452:	b003      	add	sp, #12
 8005454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005458:	f006 ba62 	b.w	800b920 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 800545c:	f7ff fcb6 	bl	8004dcc <initpressure115>
 8005460:	b960      	cbnz	r0, 800547c <initsplat+0x9c>
			printf("MPL115A2 pressure sensor present\n\r");
 8005462:	482a      	ldr	r0, [pc, #168]	; (800550c <initsplat+0x12c>)
 8005464:	f01f fdb2 	bl	8024fcc <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <initsplat+0x124>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800546a:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 800546c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005470:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8005472:	f043 0308 	orr.w	r3, r3, #8
 8005476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800547a:	e7de      	b.n	800543a <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 800547c:	4824      	ldr	r0, [pc, #144]	; (8005510 <initsplat+0x130>)
 800547e:	f01f fda5 	bl	8024fcc <iprintf>
 8005482:	e7da      	b.n	800543a <initsplat+0x5a>
		huart6.Init.BaudRate = 115200;
 8005484:	4823      	ldr	r0, [pc, #140]	; (8005514 <initsplat+0x134>)
 8005486:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800548a:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 800548c:	f00d fbe2 	bl	8012c54 <HAL_UART_Init>
 8005490:	bb28      	cbnz	r0, 80054de <initsplat+0xfe>
	init_ds2485();
 8005492:	f7ff ff1b 	bl	80052cc <init_ds2485>
	osDelay(80);
 8005496:	2050      	movs	r0, #80	; 0x50
 8005498:	f00f fe28 	bl	80150ec <osDelay>
	readp_ds2485(8);
 800549c:	2008      	movs	r0, #8
 800549e:	f7ff ff4d 	bl	800533c <readp_ds2485>
		init_esp();
 80054a2:	f7ff fe3f 	bl	8005124 <init_esp>
		osDelay(500);
 80054a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054aa:	f00f fe1f 	bl	80150ec <osDelay>
		test_esp();
 80054ae:	f7ff fed9 	bl	8005264 <test_esp>
		osDelay(200);
 80054b2:	20c8      	movs	r0, #200	; 0xc8
 80054b4:	f00f fe1a 	bl	80150ec <osDelay>
 80054b8:	e7c7      	b.n	800544a <initsplat+0x6a>
		printf("Initsplat: Dual Mux\n\r");
 80054ba:	4817      	ldr	r0, [pc, #92]	; (8005518 <initsplat+0x138>)
 80054bc:	f01f fd86 	bl	8024fcc <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80054c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054c4:	2301      	movs	r3, #1
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <initsplat+0x13c>)
 80054c8:	9000      	str	r0, [sp, #0]
 80054ca:	2188      	movs	r1, #136	; 0x88
 80054cc:	4814      	ldr	r0, [pc, #80]	; (8005520 <initsplat+0x140>)
 80054ce:	f006 fd2d 	bl	800bf2c <HAL_I2C_Master_Transmit>
 80054d2:	b938      	cbnz	r0, 80054e4 <initsplat+0x104>
		osDelay(500);
 80054d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054d8:	f00f fe08 	bl	80150ec <osDelay>
 80054dc:	e78f      	b.n	80053fe <initsplat+0x1e>
			Error_Handler();
 80054de:	f7fd feb9 	bl	8003254 <Error_Handler>
 80054e2:	e7d6      	b.n	8005492 <initsplat+0xb2>
		printf("I2C HAL returned error 1\n\r");
 80054e4:	480f      	ldr	r0, [pc, #60]	; (8005524 <initsplat+0x144>)
 80054e6:	f01f fd71 	bl	8024fcc <iprintf>
 80054ea:	e7f3      	b.n	80054d4 <initsplat+0xf4>
 80054ec:	20001d4c 	.word	0x20001d4c
 80054f0:	0802b4d8 	.word	0x0802b4d8
 80054f4:	0802b508 	.word	0x0802b508
 80054f8:	20002d44 	.word	0x20002d44
 80054fc:	0802b52c 	.word	0x0802b52c
 8005500:	0802b54c 	.word	0x0802b54c
 8005504:	20002c04 	.word	0x20002c04
 8005508:	40021000 	.word	0x40021000
 800550c:	0802b570 	.word	0x0802b570
 8005510:	0802b594 	.word	0x0802b594
 8005514:	20002854 	.word	0x20002854
 8005518:	0802b4f0 	.word	0x0802b4f0
 800551c:	20000274 	.word	0x20000274
 8005520:	200021b4 	.word	0x200021b4
 8005524:	0802b1fc 	.word	0x0802b1fc

08005528 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800552a:	2200      	movs	r2, #0
 800552c:	210f      	movs	r1, #15
 800552e:	f06f 0001 	mvn.w	r0, #1
{
 8005532:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005534:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8005536:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005538:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800553c:	641c      	str	r4, [r3, #64]	; 0x40
 800553e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005540:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8005544:	9400      	str	r4, [sp, #0]
 8005546:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005548:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800554a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800554e:	645c      	str	r4, [r3, #68]	; 0x44
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800555a:	f003 f8b7 	bl	80086cc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800555e:	2200      	movs	r2, #0
 8005560:	2106      	movs	r1, #6
 8005562:	2005      	movs	r0, #5
 8005564:	f003 f8b2 	bl	80086cc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005568:	2005      	movs	r0, #5
 800556a:	f003 f8f9 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800556e:	2200      	movs	r2, #0
 8005570:	2106      	movs	r1, #6
 8005572:	2005      	movs	r0, #5
 8005574:	f003 f8aa 	bl	80086cc <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005578:	2005      	movs	r0, #5
 800557a:	f003 f8f1 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 800557e:	2051      	movs	r0, #81	; 0x51
 8005580:	2200      	movs	r2, #0
 8005582:	2106      	movs	r1, #6
 8005584:	f003 f8a2 	bl	80086cc <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005588:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800558a:	b002      	add	sp, #8
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005590:	f003 b8e6 	b.w	8008760 <HAL_NVIC_EnableIRQ>
 8005594:	40023800 	.word	0x40023800

08005598 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005598:	4a49      	ldr	r2, [pc, #292]	; (80056c0 <HAL_ADC_MspInit+0x128>)
 800559a:	6803      	ldr	r3, [r0, #0]
{
 800559c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800559e:	4293      	cmp	r3, r2
{
 80055a0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a2:	f04f 0400 	mov.w	r4, #0
 80055a6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80055aa:	9409      	str	r4, [sp, #36]	; 0x24
 80055ac:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80055b0:	d007      	beq.n	80055c2 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80055b2:	4a44      	ldr	r2, [pc, #272]	; (80056c4 <HAL_ADC_MspInit+0x12c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d045      	beq.n	8005644 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_ADC_MspInit+0x130>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d05f      	beq.n	800567e <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80055be:	b00d      	add	sp, #52	; 0x34
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055c2:	4b42      	ldr	r3, [pc, #264]	; (80056cc <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055c4:	2703      	movs	r7, #3
 80055c6:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c8:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055cc:	4840      	ldr	r0, [pc, #256]	; (80056d0 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 80055d2:	4e40      	ldr	r6, [pc, #256]	; (80056d4 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
 80055d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80055dc:	9201      	str	r2, [sp, #4]
 80055de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055f0:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055f4:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f8:	f005 fee6 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80055fc:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80055fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005602:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8005604:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005606:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800560a:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800560c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005610:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005612:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005616:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005618:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800561a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800561e:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005620:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005622:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800562a:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800562c:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005630:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005634:	f003 fb5c 	bl	8008cf0 <HAL_DMA_Init>
 8005638:	2800      	cmp	r0, #0
 800563a:	d13d      	bne.n	80056b8 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800563c:	63ae      	str	r6, [r5, #56]	; 0x38
 800563e:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8005640:	b00d      	add	sp, #52	; 0x34
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005646:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005648:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564a:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005652:	645a      	str	r2, [r3, #68]	; 0x44
 8005654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005656:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800565a:	9203      	str	r2, [sp, #12]
 800565c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800565e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005668:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800566a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566e:	4818      	ldr	r0, [pc, #96]	; (80056d0 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005670:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	f005 fea7 	bl	800b3c8 <HAL_GPIO_Init>
}
 800567a:	b00d      	add	sp, #52	; 0x34
 800567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005680:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005682:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005684:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
 800568e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005690:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005694:	9205      	str	r2, [sp, #20]
 8005696:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056a2:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a4:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a8:	4809      	ldr	r0, [pc, #36]	; (80056d0 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056aa:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ac:	9306      	str	r3, [sp, #24]
 80056ae:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b0:	f005 fe8a 	bl	800b3c8 <HAL_GPIO_Init>
}
 80056b4:	b00d      	add	sp, #52	; 0x34
 80056b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80056b8:	f7fd fdcc 	bl	8003254 <Error_Handler>
 80056bc:	e7be      	b.n	800563c <HAL_ADC_MspInit+0xa4>
 80056be:	bf00      	nop
 80056c0:	40012000 	.word	0x40012000
 80056c4:	40012100 	.word	0x40012100
 80056c8:	40012200 	.word	0x40012200
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40020000 	.word	0x40020000
 80056d4:	20001eb4 	.word	0x20001eb4
 80056d8:	40026470 	.word	0x40026470

080056dc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <HAL_CRC_MspInit+0x28>)
 80056de:	6802      	ldr	r2, [r0, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d000      	beq.n	80056e6 <HAL_CRC_MspInit+0xa>
 80056e4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056e6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 80056ee:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80056f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005700:	b002      	add	sp, #8
 8005702:	4770      	bx	lr
 8005704:	40023000 	.word	0x40023000

08005708 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_DAC_MspInit+0xb0>)
 800570a:	6802      	ldr	r2, [r0, #0]
{
 800570c:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800570e:	429a      	cmp	r2, r3
{
 8005710:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005712:	f04f 0400 	mov.w	r4, #0
 8005716:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800571a:	9405      	str	r4, [sp, #20]
 800571c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 8005720:	d001      	beq.n	8005726 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005722:	b008      	add	sp, #32
 8005724:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8005726:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800572a:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572c:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800572e:	4e23      	ldr	r6, [pc, #140]	; (80057bc <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8005730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005732:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
 8005738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800573e:	9201      	str	r2, [sp, #4]
 8005740:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800574a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005754:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005756:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005758:	4819      	ldr	r0, [pc, #100]	; (80057c0 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800575a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575e:	f005 fe33 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005762:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005768:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800576a:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 8005770:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005772:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005774:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005776:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005778:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800577a:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800577c:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 800577e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005782:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005784:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005786:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8005788:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800578a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 800578c:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800578e:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005792:	f003 faad 	bl	8008cf0 <HAL_DMA_Init>
 8005796:	b958      	cbnz	r0, 80057b0 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005798:	2200      	movs	r2, #0
 800579a:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800579c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800579e:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80057a0:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80057a2:	f002 ff93 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057a6:	2036      	movs	r0, #54	; 0x36
 80057a8:	f002 ffda 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 80057ac:	b008      	add	sp, #32
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80057b0:	f7fd fd50 	bl	8003254 <Error_Handler>
 80057b4:	e7f0      	b.n	8005798 <HAL_DAC_MspInit+0x90>
 80057b6:	bf00      	nop
 80057b8:	40007400 	.word	0x40007400
 80057bc:	20001f14 	.word	0x20001f14
 80057c0:	40020000 	.word	0x40020000
 80057c4:	40026088 	.word	0x40026088

080057c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80057c8:	b530      	push	{r4, r5, lr}
 80057ca:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	2100      	movs	r1, #0
{
 80057ce:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057d0:	2290      	movs	r2, #144	; 0x90
 80057d2:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80057d6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80057da:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057de:	f01e fc59 	bl	8024094 <memset>
  if(hi2c->Instance==I2C1)
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <HAL_I2C_MspInit+0x148>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80057ea:	4a4a      	ldr	r2, [pc, #296]	; (8005914 <HAL_I2C_MspInit+0x14c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d030      	beq.n	8005852 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80057f0:	4a49      	ldr	r2, [pc, #292]	; (8005918 <HAL_I2C_MspInit+0x150>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d057      	beq.n	80058a6 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80057f6:	b031      	add	sp, #196	; 0xc4
 80057f8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80057fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057fe:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005800:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005802:	f008 f91f 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8005806:	2800      	cmp	r0, #0
 8005808:	d178      	bne.n	80058fc <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800580a:	4c44      	ldr	r4, [pc, #272]	; (800591c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800580c:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005810:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005812:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005814:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005816:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	6323      	str	r3, [r4, #48]	; 0x30
 800581e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005820:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005824:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005828:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800582c:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005830:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005834:	483a      	ldr	r0, [pc, #232]	; (8005920 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005836:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005838:	f005 fdc6 	bl	800b3c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800583c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800583e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005842:	6423      	str	r3, [r4, #64]	; 0x40
 8005844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	9b02      	ldr	r3, [sp, #8]
}
 800584e:	b031      	add	sp, #196	; 0xc4
 8005850:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005856:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005858:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800585a:	f008 f8f3 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 800585e:	2800      	cmp	r0, #0
 8005860:	d14f      	bne.n	8005902 <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005862:	4c2e      	ldr	r4, [pc, #184]	; (800591c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005864:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005866:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005868:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800586a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800586c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800586e:	f043 0320 	orr.w	r3, r3, #32
 8005872:	6323      	str	r3, [r4, #48]	; 0x30
 8005874:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005876:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005878:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800587c:	4829      	ldr	r0, [pc, #164]	; (8005924 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800587e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005880:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005882:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800588a:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800588c:	f005 fd9c 	bl	800b3c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005890:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005896:	6423      	str	r3, [r4, #64]	; 0x40
 8005898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	9b04      	ldr	r3, [sp, #16]
}
 80058a2:	b031      	add	sp, #196	; 0xc4
 80058a4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80058a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058aa:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80058ac:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058ae:	f008 f8c9 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 80058b2:	bb48      	cbnz	r0, 8005908 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058b4:	4c19      	ldr	r4, [pc, #100]	; (800591c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80058b6:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ba:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058bc:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80058c0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058c2:	f043 0320 	orr.w	r3, r3, #32
 80058c6:	6323      	str	r3, [r4, #48]	; 0x30
 80058c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80058ca:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ce:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d2:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80058d6:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80058d8:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058da:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80058de:	4811      	ldr	r0, [pc, #68]	; (8005924 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80058e0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80058e2:	f005 fd71 	bl	800b3c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80058e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ec:	6423      	str	r3, [r4, #64]	; 0x40
 80058ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f4:	9306      	str	r3, [sp, #24]
 80058f6:	9b06      	ldr	r3, [sp, #24]
}
 80058f8:	b031      	add	sp, #196	; 0xc4
 80058fa:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80058fc:	f7fd fcaa 	bl	8003254 <Error_Handler>
 8005900:	e783      	b.n	800580a <HAL_I2C_MspInit+0x42>
      Error_Handler();
 8005902:	f7fd fca7 	bl	8003254 <Error_Handler>
 8005906:	e7ac      	b.n	8005862 <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8005908:	f7fd fca4 	bl	8003254 <Error_Handler>
 800590c:	e7d2      	b.n	80058b4 <HAL_I2C_MspInit+0xec>
 800590e:	bf00      	nop
 8005910:	40005400 	.word	0x40005400
 8005914:	40005800 	.word	0x40005800
 8005918:	40006000 	.word	0x40006000
 800591c:	40023800 	.word	0x40023800
 8005920:	40020400 	.word	0x40020400
 8005924:	40021400 	.word	0x40021400

08005928 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_RNG_MspInit+0x24>)
 800592a:	6802      	ldr	r2, [r0, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d000      	beq.n	8005932 <HAL_RNG_MspInit+0xa>
 8005930:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_RNG_MspInit+0x28>)
{
 8005934:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8005936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593c:	635a      	str	r2, [r3, #52]	; 0x34
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005948:	b002      	add	sp, #8
 800594a:	4770      	bx	lr
 800594c:	50060800 	.word	0x50060800
 8005950:	40023800 	.word	0x40023800

08005954 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8005954:	4a52      	ldr	r2, [pc, #328]	; (8005aa0 <HAL_SPI_MspInit+0x14c>)
 8005956:	6803      	ldr	r3, [r0, #0]
{
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 800595a:	4293      	cmp	r3, r2
{
 800595c:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005966:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800596a:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 800596c:	d007      	beq.n	800597e <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800596e:	4a4d      	ldr	r2, [pc, #308]	; (8005aa4 <HAL_SPI_MspInit+0x150>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d038      	beq.n	80059e6 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8005974:	4a4c      	ldr	r2, [pc, #304]	; (8005aa8 <HAL_SPI_MspInit+0x154>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d071      	beq.n	8005a5e <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800597a:	b00f      	add	sp, #60	; 0x3c
 800597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800597e:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005980:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005982:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005984:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005988:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800598a:	4849      	ldr	r0, [pc, #292]	; (8005ab0 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800598c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
 8005992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005994:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005998:	9201      	str	r2, [sp, #4]
 800599a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	f042 0204 	orr.w	r2, r2, #4
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	f002 0204 	and.w	r2, r2, #4
 80059aa:	9202      	str	r2, [sp, #8]
 80059ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b0:	f042 0208 	orr.w	r2, r2, #8
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80059b8:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ba:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80059be:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c0:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059c6:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ca:	f005 fcfd 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059ce:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059d0:	a909      	add	r1, sp, #36	; 0x24
 80059d2:	4838      	ldr	r0, [pc, #224]	; (8005ab4 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80059d6:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80059da:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059de:	f005 fcf3 	bl	800b3c8 <HAL_GPIO_Init>
}
 80059e2:	b00f      	add	sp, #60	; 0x3c
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059ea:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ec:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059f0:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f2:	4831      	ldr	r0, [pc, #196]	; (8005ab8 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80059f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
 80059fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005a00:	9204      	str	r2, [sp, #16]
 8005a02:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a06:	4332      	orrs	r2, r6
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
 8005a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0c:	4032      	ands	r2, r6
 8005a0e:	9205      	str	r2, [sp, #20]
 8005a10:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a14:	430a      	orrs	r2, r1
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1a:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a1c:	400b      	ands	r3, r1
 8005a1e:	9306      	str	r3, [sp, #24]
 8005a20:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005a22:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a24:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a28:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005a2a:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a2c:	f005 fccc 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a34:	a909      	add	r1, sp, #36	; 0x24
 8005a36:	481e      	ldr	r0, [pc, #120]	; (8005ab0 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a38:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a3e:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a42:	f005 fcc1 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a46:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a48:	a909      	add	r1, sp, #36	; 0x24
 8005a4a:	481b      	ldr	r0, [pc, #108]	; (8005ab8 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a4c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a4e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a50:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a52:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a56:	f005 fcb7 	bl	800b3c8 <HAL_GPIO_Init>
}
 8005a5a:	b00f      	add	sp, #60	; 0x3c
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a60:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005a62:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a64:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a68:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	f042 0210 	orr.w	r2, r2, #16
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005a82:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a88:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a8c:	480b      	ldr	r0, [pc, #44]	; (8005abc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005a8e:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a90:	9308      	str	r3, [sp, #32]
 8005a92:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005a94:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a98:	f005 fc96 	bl	800b3c8 <HAL_GPIO_Init>
}
 8005a9c:	b00f      	add	sp, #60	; 0x3c
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	40003800 	.word	0x40003800
 8005aa4:	40003c00 	.word	0x40003c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40020800 	.word	0x40020800
 8005ab4:	40020c00 	.word	0x40020c00
 8005ab8:	40020400 	.word	0x40020400
 8005abc:	40021000 	.word	0x40021000

08005ac0 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8005ac0:	4a73      	ldr	r2, [pc, #460]	; (8005c90 <HAL_TIM_Base_MspInit+0x1d0>)
 8005ac2:	6803      	ldr	r3, [r0, #0]
{
 8005ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8005ac6:	4293      	cmp	r3, r2
{
 8005ac8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aca:	f04f 0400 	mov.w	r4, #0
 8005ace:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005ad2:	940d      	str	r4, [sp, #52]	; 0x34
 8005ad4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8005ad8:	d021      	beq.n	8005b1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d055      	beq.n	8005b8c <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005ae0:	4a6c      	ldr	r2, [pc, #432]	; (8005c94 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8005ae6:	4a6c      	ldr	r2, [pc, #432]	; (8005c98 <HAL_TIM_Base_MspInit+0x1d8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d043      	beq.n	8005b74 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8005aec:	4a6b      	ldr	r2, [pc, #428]	; (8005c9c <HAL_TIM_Base_MspInit+0x1dc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	f000 80a5 	beq.w	8005c3e <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005af4:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_TIM_Base_MspInit+0x1e0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f000 80b4 	beq.w	8005c64 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005afc:	4a69      	ldr	r2, [pc, #420]	; (8005ca4 <HAL_TIM_Base_MspInit+0x1e4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d02d      	beq.n	8005b5e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005b02:	4a69      	ldr	r2, [pc, #420]	; (8005ca8 <HAL_TIM_Base_MspInit+0x1e8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d114      	bne.n	8005b32 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005b08:	4b68      	ldr	r3, [pc, #416]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
 8005b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	930a      	str	r3, [sp, #40]	; 0x28
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005b1c:	e009      	b.n	8005b32 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b1e:	4b63      	ldr	r3, [pc, #396]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
 8005b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	9b01      	ldr	r3, [sp, #4]
}
 8005b32:	b011      	add	sp, #68	; 0x44
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b36:	4b5d      	ldr	r3, [pc, #372]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005b38:	4622      	mov	r2, r4
 8005b3a:	2106      	movs	r1, #6
 8005b3c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b3e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005b40:	f044 0402 	orr.w	r4, r4, #2
 8005b44:	641c      	str	r4, [r3, #64]	; 0x40
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	9305      	str	r3, [sp, #20]
 8005b4e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005b50:	f002 fdbc 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b54:	201d      	movs	r0, #29
 8005b56:	f002 fe03 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8005b5a:	b011      	add	sp, #68	; 0x44
 8005b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b5e:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
 8005b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b62:	f042 0220 	orr.w	r2, r2, #32
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	e7de      	b.n	8005b32 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
 8005b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b78:	f042 0204 	orr.w	r2, r2, #4
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	9306      	str	r3, [sp, #24]
 8005b86:	9b06      	ldr	r3, [sp, #24]
}
 8005b88:	b011      	add	sp, #68	; 0x44
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b8c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b90:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b92:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b94:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b98:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9a:	4845      	ldr	r0, [pc, #276]	; (8005cb0 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba4:	f002 0201 	and.w	r2, r2, #1
 8005ba8:	9202      	str	r2, [sp, #8]
 8005baa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8005bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb6:	f002 0201 	and.w	r2, r2, #1
 8005bba:	9203      	str	r2, [sp, #12]
 8005bbc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bc0:	f042 0202 	orr.w	r2, r2, #2
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc8:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bca:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005bce:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd6:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd8:	f005 fbf6 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005bdc:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bde:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be2:	4834      	ldr	r0, [pc, #208]	; (8005cb4 <HAL_TIM_Base_MspInit+0x1f4>)
 8005be4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be6:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005be8:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005bea:	4e33      	ldr	r6, [pc, #204]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bec:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf0:	f005 fbea 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005bf8:	4a30      	ldr	r2, [pc, #192]	; (8005cbc <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005bfa:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005bfc:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005bfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005c02:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005c04:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c08:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005c0e:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005c10:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005c12:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c14:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005c16:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c18:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005c1c:	f003 f868 	bl	8008cf0 <HAL_DMA_Init>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d132      	bne.n	8005c8a <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005c24:	2200      	movs	r2, #0
 8005c26:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8005c28:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005c2a:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8005c2c:	62ee      	str	r6, [r5, #44]	; 0x2c
 8005c2e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005c30:	f002 fd4c 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c34:	201c      	movs	r0, #28
 8005c36:	f002 fd93 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8005c3a:	b011      	add	sp, #68	; 0x44
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005c40:	4622      	mov	r2, r4
 8005c42:	2105      	movs	r1, #5
 8005c44:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c46:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005c48:	f044 0408 	orr.w	r4, r4, #8
 8005c4c:	641c      	str	r4, [r3, #64]	; 0x40
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	9307      	str	r3, [sp, #28]
 8005c56:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8005c58:	f002 fd38 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005c5c:	2032      	movs	r0, #50	; 0x32
 8005c5e:	f002 fd7f 	bl	8008760 <HAL_NVIC_EnableIRQ>
 8005c62:	e766      	b.n	8005b32 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005c66:	4622      	mov	r2, r4
 8005c68:	2106      	movs	r1, #6
 8005c6a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c6c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005c6e:	f044 0410 	orr.w	r4, r4, #16
 8005c72:	641c      	str	r4, [r3, #64]	; 0x40
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	9308      	str	r3, [sp, #32]
 8005c7c:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005c7e:	f002 fd25 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c82:	2036      	movs	r0, #54	; 0x36
 8005c84:	f002 fd6c 	bl	8008760 <HAL_NVIC_EnableIRQ>
 8005c88:	e753      	b.n	8005b32 <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8005c8a:	f7fd fae3 	bl	8003254 <Error_Handler>
 8005c8e:	e7c9      	b.n	8005c24 <HAL_TIM_Base_MspInit+0x164>
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40001000 	.word	0x40001000
 8005ca4:	40001400 	.word	0x40001400
 8005ca8:	40002000 	.word	0x40002000
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	20001f74 	.word	0x20001f74
 8005cbc:	40026028 	.word	0x40026028

08005cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005cc0:	491d      	ldr	r1, [pc, #116]	; (8005d38 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc2:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005cc4:	6802      	ldr	r2, [r0, #0]
{
 8005cc6:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8005cc8:	428a      	cmp	r2, r1
{
 8005cca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ccc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005cd0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005cd4:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_TIM_MspPostInit+0x7c>)
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d016      	beq.n	8005d0c <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005cde:	b008      	add	sp, #32
 8005ce0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce2:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005ce4:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ce8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cec:	f042 0204 	orr.w	r2, r2, #4
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005cf4:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cf6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cfa:	4812      	ldr	r0, [pc, #72]	; (8005d44 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfc:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d02:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d04:	f005 fb60 	bl	800b3c8 <HAL_GPIO_Init>
}
 8005d08:	b008      	add	sp, #32
 8005d0a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d12:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d16:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1a:	4322      	orrs	r2, r4
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d20:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d22:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d24:	4808      	ldr	r0, [pc, #32]	; (8005d48 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d26:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d28:	9302      	str	r3, [sp, #8]
 8005d2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d2c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d2e:	f005 fb4b 	bl	800b3c8 <HAL_GPIO_Init>
}
 8005d32:	b008      	add	sp, #32
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40020800 	.word	0x40020800
 8005d48:	40020400 	.word	0x40020400

08005d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d50:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d52:	2100      	movs	r1, #0
{
 8005d54:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d56:	2290      	movs	r2, #144	; 0x90
 8005d58:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d5c:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8005d60:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d64:	f01e f996 	bl	8024094 <memset>
  if(huart->Instance==UART4)
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	4aa2      	ldr	r2, [pc, #648]	; (8005ff4 <HAL_UART_MspInit+0x2a8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d070      	beq.n	8005e52 <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8005d70:	4aa1      	ldr	r2, [pc, #644]	; (8005ff8 <HAL_UART_MspInit+0x2ac>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f000 80c1 	beq.w	8005efa <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005d78:	4aa0      	ldr	r2, [pc, #640]	; (8005ffc <HAL_UART_MspInit+0x2b0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	f000 815e 	beq.w	800603c <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8005d80:	4a9f      	ldr	r2, [pc, #636]	; (8006000 <HAL_UART_MspInit+0x2b4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00e      	beq.n	8005da4 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005d86:	4a9f      	ldr	r2, [pc, #636]	; (8006004 <HAL_UART_MspInit+0x2b8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	f000 818e 	beq.w	80060aa <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005d8e:	4a9e      	ldr	r2, [pc, #632]	; (8006008 <HAL_UART_MspInit+0x2bc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f000 81b4 	beq.w	80060fe <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005d96:	4a9d      	ldr	r2, [pc, #628]	; (800600c <HAL_UART_MspInit+0x2c0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	f000 81df 	beq.w	800615c <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005d9e:	b03c      	add	sp, #240	; 0xf0
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005da8:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005daa:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dac:	f007 fe4a 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f040 8261 	bne.w	8006278 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8005db6:	4b96      	ldr	r3, [pc, #600]	; (8006010 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005db8:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dba:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005dbc:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8005dbe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc0:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005dc2:	4894      	ldr	r0, [pc, #592]	; (8006014 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8005dc4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005dc8:	6419      	str	r1, [r3, #64]	; 0x40
 8005dca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005dd0:	910a      	str	r1, [sp, #40]	; 0x28
 8005dd2:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd6:	f041 0110 	orr.w	r1, r1, #16
 8005dda:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ddc:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005de0:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dea:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005dee:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005df2:	f005 fae9 	bl	800b3c8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005df6:	4887      	ldr	r0, [pc, #540]	; (8006014 <HAL_UART_MspInit+0x2c8>)
 8005df8:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005dfa:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfc:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e00:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e04:	f005 fae0 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005e08:	4d83      	ldr	r5, [pc, #524]	; (8006018 <HAL_UART_MspInit+0x2cc>)
 8005e0a:	4a84      	ldr	r2, [pc, #528]	; (800601c <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005e0c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005e10:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005e12:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005e16:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8005e1e:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e24:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e26:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e2a:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e2e:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005e32:	f002 ff5d 	bl	8008cf0 <HAL_DMA_Init>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f040 8221 	bne.w	800627e <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2103      	movs	r1, #3
 8005e40:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8005e42:	6725      	str	r5, [r4, #112]	; 0x70
 8005e44:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005e46:	f002 fc41 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005e4a:	2053      	movs	r0, #83	; 0x53
 8005e4c:	f002 fc88 	bl	8008760 <HAL_NVIC_EnableIRQ>
 8005e50:	e7a5      	b.n	8005d9e <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005e52:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e56:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005e58:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e5a:	f007 fdf3 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f040 8179 	bne.w	8006156 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005e64:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e66:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6a:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8005e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005e6e:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e70:	a913      	add	r1, sp, #76	; 0x4c
 8005e72:	486b      	ldr	r0, [pc, #428]	; (8006020 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005e74:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
 8005e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005e80:	9201      	str	r2, [sp, #4]
 8005e82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8e:	f002 0201 	and.w	r2, r2, #1
 8005e92:	9202      	str	r2, [sp, #8]
 8005e94:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e98:	433a      	orrs	r2, r7
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e9e:	403a      	ands	r2, r7
 8005ea0:	9203      	str	r2, [sp, #12]
 8005ea2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea6:	f042 0204 	orr.w	r2, r2, #4
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eae:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb0:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005eb4:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005eb8:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ebc:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005ebe:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec0:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ec4:	f005 fa80 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ecc:	a913      	add	r1, sp, #76	; 0x4c
 8005ece:	4855      	ldr	r0, [pc, #340]	; (8006024 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ed0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed2:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ed6:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eda:	f005 fa75 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ee2:	a913      	add	r1, sp, #76	; 0x4c
 8005ee4:	4850      	ldr	r0, [pc, #320]	; (8006028 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ee6:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ee8:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005eea:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eec:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ef0:	f005 fa6a 	bl	800b3c8 <HAL_GPIO_Init>
}
 8005ef4:	b03c      	add	sp, #240	; 0xf0
 8005ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005efe:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005f00:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f02:	f007 fd9f 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f040 81b0 	bne.w	800626c <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005f0c:	4b40      	ldr	r3, [pc, #256]	; (8006010 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f10:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f12:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8005f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f18:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f1c:	a913      	add	r1, sp, #76	; 0x4c
 8005f1e:	4841      	ldr	r0, [pc, #260]	; (8006024 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005f20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
 8005f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f2c:	9205      	str	r2, [sp, #20]
 8005f2e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f32:	4332      	orrs	r2, r6
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
 8005f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f38:	4032      	ands	r2, r6
 8005f3a:	9206      	str	r2, [sp, #24]
 8005f3c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f40:	f042 0204 	orr.w	r2, r2, #4
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f48:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f52:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f54:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f58:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f5c:	f005 fa34 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f60:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f62:	4831      	ldr	r0, [pc, #196]	; (8006028 <HAL_UART_MspInit+0x2dc>)
 8005f64:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f66:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f68:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f6a:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005f6c:	4e2f      	ldr	r6, [pc, #188]	; (800602c <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f6e:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005f70:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f74:	f005 fa28 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005f78:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005f7e:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f80:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005f82:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005f88:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f8e:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f90:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005f94:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f98:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005f9c:	f002 fea8 	bl	8008cf0 <HAL_DMA_Init>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f040 8160 	bne.w	8006266 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005fa6:	4d23      	ldr	r5, [pc, #140]	; (8006034 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005fac:	4922      	ldr	r1, [pc, #136]	; (8006038 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fae:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005fb0:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005fb6:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fb8:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005fba:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005fbc:	6726      	str	r6, [r4, #112]	; 0x70
 8005fbe:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fc0:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fc2:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fc4:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fc6:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fc8:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fca:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fcc:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005fd0:	f002 fe8e 	bl	8008cf0 <HAL_DMA_Init>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 8143 	bne.w	8006260 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2107      	movs	r1, #7
 8005fde:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8005fe0:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005fe2:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005fe4:	f002 fb72 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005fe8:	2035      	movs	r0, #53	; 0x35
 8005fea:	f002 fbb9 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8005fee:	b03c      	add	sp, #240	; 0xf0
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff4:	40004c00 	.word	0x40004c00
 8005ff8:	40005000 	.word	0x40005000
 8005ffc:	40007800 	.word	0x40007800
 8006000:	40007c00 	.word	0x40007c00
 8006004:	40004400 	.word	0x40004400
 8006008:	40004800 	.word	0x40004800
 800600c:	40011400 	.word	0x40011400
 8006010:	40023800 	.word	0x40023800
 8006014:	40021000 	.word	0x40021000
 8006018:	20002094 	.word	0x20002094
 800601c:	400260a0 	.word	0x400260a0
 8006020:	40020000 	.word	0x40020000
 8006024:	40020400 	.word	0x40020400
 8006028:	40020800 	.word	0x40020800
 800602c:	20001fd4 	.word	0x20001fd4
 8006030:	40026010 	.word	0x40026010
 8006034:	20002034 	.word	0x20002034
 8006038:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800603c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006040:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006042:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006044:	f007 fcfe 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 8112 	bne.w	8006272 <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 800604e:	4b8f      	ldr	r3, [pc, #572]	; (800628c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006050:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006052:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006054:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8006056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006058:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800605a:	488d      	ldr	r0, [pc, #564]	; (8006290 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 800605c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
 8006062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006064:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006068:	9208      	str	r2, [sp, #32]
 800606a:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800606c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606e:	f042 0220 	orr.w	r2, r2, #32
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006074:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006078:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800607a:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800607c:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006080:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006082:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006084:	9309      	str	r3, [sp, #36]	; 0x24
 8006086:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006088:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800608c:	f005 f99c 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006090:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006092:	a913      	add	r1, sp, #76	; 0x4c
 8006094:	487e      	ldr	r0, [pc, #504]	; (8006290 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006096:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006098:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800609a:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800609c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060a0:	f005 f992 	bl	800b3c8 <HAL_GPIO_Init>
}
 80060a4:	b03c      	add	sp, #240	; 0xf0
 80060a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80060aa:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060ac:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80060ae:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060b0:	f007 fcc8 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f040 80e5 	bne.w	8006284 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060ba:	4b74      	ldr	r3, [pc, #464]	; (800628c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060bc:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80060be:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c0:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80060c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060c4:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 80060c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40
 80060cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80060d2:	920c      	str	r2, [sp, #48]	; 0x30
 80060d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d8:	f042 0208 	orr.w	r2, r2, #8
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060de:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e2:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e4:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060e8:	486a      	ldr	r0, [pc, #424]	; (8006294 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80060ea:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060ec:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060ee:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060f2:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f4:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060f8:	f005 f966 	bl	800b3c8 <HAL_GPIO_Init>
 80060fc:	e64f      	b.n	8005d9e <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80060fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006102:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006104:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006106:	f007 fc9d 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 800610a:	2800      	cmp	r0, #0
 800610c:	f040 809c 	bne.w	8006248 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006110:	4b5e      	ldr	r3, [pc, #376]	; (800628c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006112:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006114:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006118:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800611a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800611c:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 800611e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
 8006124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006126:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800612a:	920e      	str	r2, [sp, #56]	; 0x38
 800612c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800612e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006130:	f042 0208 	orr.w	r2, r2, #8
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006136:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800613a:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800613c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006140:	4854      	ldr	r0, [pc, #336]	; (8006294 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006142:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006144:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006146:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006148:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800614a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800614c:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006150:	f005 f93a 	bl	800b3c8 <HAL_GPIO_Init>
 8006154:	e623      	b.n	8005d9e <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006156:	f7fd f87d 	bl	8003254 <Error_Handler>
 800615a:	e683      	b.n	8005e64 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800615c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006160:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006162:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006164:	f007 fc6e 	bl	800da44 <HAL_RCCEx_PeriphCLKConfig>
 8006168:	2800      	cmp	r0, #0
 800616a:	d176      	bne.n	800625a <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800616c:	4b47      	ldr	r3, [pc, #284]	; (800628c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800616e:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006170:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8006174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006176:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006178:	4847      	ldr	r0, [pc, #284]	; (8006298 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	645a      	str	r2, [r3, #68]	; 0x44
 8006180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006182:	f002 0220 	and.w	r2, r2, #32
 8006186:	9210      	str	r2, [sp, #64]	; 0x40
 8006188:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800618a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800618c:	f042 0204 	orr.w	r2, r2, #4
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
 8006192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006194:	f002 0204 	and.w	r2, r2, #4
 8006198:	9211      	str	r2, [sp, #68]	; 0x44
 800619a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800619c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619e:	430a      	orrs	r2, r1
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a4:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061a6:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a8:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80061aa:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061ac:	9312      	str	r3, [sp, #72]	; 0x48
 80061ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b0:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061b4:	a913      	add	r1, sp, #76	; 0x4c
 80061b6:	f005 f907 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061ba:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061bc:	4837      	ldr	r0, [pc, #220]	; (800629c <HAL_UART_MspInit+0x550>)
 80061be:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061c0:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c6:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061c8:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80061ca:	4e35      	ldr	r6, [pc, #212]	; (80062a0 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80061cc:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80061d0:	f005 f8fa 	bl	800b3c8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80061d4:	4a33      	ldr	r2, [pc, #204]	; (80062a4 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80061d6:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80061da:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80061dc:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80061e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80061e8:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80061ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061ee:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f2:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80061f6:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80061fa:	f002 fd79 	bl	8008cf0 <HAL_DMA_Init>
 80061fe:	bb48      	cbnz	r0, 8006254 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006200:	4d29      	ldr	r5, [pc, #164]	; (80062a8 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006202:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006206:	4929      	ldr	r1, [pc, #164]	; (80062ac <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006208:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800620a:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800620c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006210:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006212:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006214:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006216:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006218:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800621a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800621e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006220:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006222:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006224:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006226:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006228:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 800622a:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800622c:	6726      	str	r6, [r4, #112]	; 0x70
 800622e:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006230:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006234:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006238:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800623c:	f002 fd58 	bl	8008cf0 <HAL_DMA_Init>
 8006240:	b928      	cbnz	r0, 800624e <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006242:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006244:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8006246:	e5aa      	b.n	8005d9e <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006248:	f7fd f804 	bl	8003254 <Error_Handler>
 800624c:	e760      	b.n	8006110 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800624e:	f7fd f801 	bl	8003254 <Error_Handler>
 8006252:	e7f6      	b.n	8006242 <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8006254:	f7fc fffe 	bl	8003254 <Error_Handler>
 8006258:	e7d2      	b.n	8006200 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 800625a:	f7fc fffb 	bl	8003254 <Error_Handler>
 800625e:	e785      	b.n	800616c <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006260:	f7fc fff8 	bl	8003254 <Error_Handler>
 8006264:	e6b9      	b.n	8005fda <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006266:	f7fc fff5 	bl	8003254 <Error_Handler>
 800626a:	e69c      	b.n	8005fa6 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 800626c:	f7fc fff2 	bl	8003254 <Error_Handler>
 8006270:	e64c      	b.n	8005f0c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8006272:	f7fc ffef 	bl	8003254 <Error_Handler>
 8006276:	e6ea      	b.n	800604e <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006278:	f7fc ffec 	bl	8003254 <Error_Handler>
 800627c:	e59b      	b.n	8005db6 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 800627e:	f7fc ffe9 	bl	8003254 <Error_Handler>
 8006282:	e5db      	b.n	8005e3c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8006284:	f7fc ffe6 	bl	8003254 <Error_Handler>
 8006288:	e717      	b.n	80060ba <HAL_UART_MspInit+0x36e>
 800628a:	bf00      	nop
 800628c:	40023800 	.word	0x40023800
 8006290:	40021400 	.word	0x40021400
 8006294:	40020c00 	.word	0x40020c00
 8006298:	40020800 	.word	0x40020800
 800629c:	40021800 	.word	0x40021800
 80062a0:	200020f4 	.word	0x200020f4
 80062a4:	40026428 	.word	0x40026428
 80062a8:	20002154 	.word	0x20002154
 80062ac:	400264a0 	.word	0x400264a0

080062b0 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 80062b0:	4a4f      	ldr	r2, [pc, #316]	; (80063f0 <HAL_UART_MspDeInit+0x140>)
 80062b2:	6803      	ldr	r3, [r0, #0]
 80062b4:	4293      	cmp	r3, r2
{
 80062b6:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 80062b8:	d025      	beq.n	8006306 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 80062ba:	4a4e      	ldr	r2, [pc, #312]	; (80063f4 <HAL_UART_MspDeInit+0x144>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4293      	cmp	r3, r2
 80062c0:	d038      	beq.n	8006334 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 80062c2:	4a4d      	ldr	r2, [pc, #308]	; (80063f8 <HAL_UART_MspDeInit+0x148>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d050      	beq.n	800636a <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 80062c8:	4a4c      	ldr	r2, [pc, #304]	; (80063fc <HAL_UART_MspDeInit+0x14c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 80062ce:	4a4c      	ldr	r2, [pc, #304]	; (8006400 <HAL_UART_MspDeInit+0x150>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d056      	beq.n	8006382 <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 80062d4:	4a4b      	ldr	r2, [pc, #300]	; (8006404 <HAL_UART_MspDeInit+0x154>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d062      	beq.n	80063a0 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 80062da:	4a4b      	ldr	r2, [pc, #300]	; (8006408 <HAL_UART_MspDeInit+0x158>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d06c      	beq.n	80063ba <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80062e0:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 80062e2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80062e6:	2103      	movs	r1, #3
 80062e8:	4848      	ldr	r0, [pc, #288]	; (800640c <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 80062ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80062ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80062f2:	f005 fa0f 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80062f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80062f8:	f002 fea6 	bl	8009048 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80062fc:	2053      	movs	r0, #83	; 0x53
}
 80062fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8006302:	f002 ba41 	b.w	8008788 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8006306:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 800630a:	f248 0101 	movw	r1, #32769	; 0x8001
 800630e:	4840      	ldr	r0, [pc, #256]	; (8006410 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8006310:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006312:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006316:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8006318:	f005 f9fc 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 800631c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006320:	483c      	ldr	r0, [pc, #240]	; (8006414 <HAL_UART_MspDeInit+0x164>)
 8006322:	f005 f9f7 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8006326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800632a:	483b      	ldr	r0, [pc, #236]	; (8006418 <HAL_UART_MspDeInit+0x168>)
}
 800632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8006330:	f005 b9f0 	b.w	800b714 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8006334:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800633c:	4835      	ldr	r0, [pc, #212]	; (8006414 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 800633e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006340:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006344:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006346:	f005 f9e5 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800634a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800634e:	4832      	ldr	r0, [pc, #200]	; (8006418 <HAL_UART_MspDeInit+0x168>)
 8006350:	f005 f9e0 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006354:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006356:	f002 fe77 	bl	8009048 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800635a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800635c:	f002 fe74 	bl	8009048 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006360:	2035      	movs	r0, #53	; 0x35
}
 8006362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006366:	f002 ba0f 	b.w	8008788 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 800636a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800636e:	21c0      	movs	r1, #192	; 0xc0
 8006370:	482a      	ldr	r0, [pc, #168]	; (800641c <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8006372:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006374:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8006378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 800637c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800637e:	f005 b9c9 	b.w	800b714 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8006382:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006386:	4826      	ldr	r0, [pc, #152]	; (8006420 <HAL_UART_MspDeInit+0x170>)
 8006388:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 800638a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800638c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006392:	f005 f9bf 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006396:	2026      	movs	r0, #38	; 0x26
}
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800639c:	f002 b9f4 	b.w	8008788 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80063a0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80063a4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80063a8:	481d      	ldr	r0, [pc, #116]	; (8006420 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80063aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80063ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 80063b4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80063b6:	f005 b9ad 	b.w	800b714 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 80063ba:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80063be:	2140      	movs	r1, #64	; 0x40
 80063c0:	4815      	ldr	r0, [pc, #84]	; (8006418 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 80063c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80063c4:	f023 0320 	bic.w	r3, r3, #32
 80063c8:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80063ca:	f005 f9a3 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 80063ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063d2:	4814      	ldr	r0, [pc, #80]	; (8006424 <HAL_UART_MspDeInit+0x174>)
 80063d4:	f005 f99e 	bl	800b714 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80063d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80063da:	f002 fe35 	bl	8009048 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80063de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80063e0:	f002 fe32 	bl	8009048 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80063e4:	2047      	movs	r0, #71	; 0x47
}
 80063e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80063ea:	f002 b9cd 	b.w	8008788 <HAL_NVIC_DisableIRQ>
 80063ee:	bf00      	nop
 80063f0:	40004c00 	.word	0x40004c00
 80063f4:	40005000 	.word	0x40005000
 80063f8:	40007800 	.word	0x40007800
 80063fc:	40007c00 	.word	0x40007c00
 8006400:	40004400 	.word	0x40004400
 8006404:	40004800 	.word	0x40004800
 8006408:	40011400 	.word	0x40011400
 800640c:	40021000 	.word	0x40021000
 8006410:	40020000 	.word	0x40020000
 8006414:	40020400 	.word	0x40020400
 8006418:	40020800 	.word	0x40020800
 800641c:	40021400 	.word	0x40021400
 8006420:	40020c00 	.word	0x40020c00
 8006424:	40021800 	.word	0x40021800

08006428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006428:	b530      	push	{r4, r5, lr}
 800642a:	4601      	mov	r1, r0
 800642c:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800642e:	2200      	movs	r2, #0
 8006430:	202b      	movs	r0, #43	; 0x2b
 8006432:	f002 f94b 	bl	80086cc <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006436:	202b      	movs	r0, #43	; 0x2b
 8006438:	f002 f992 	bl	8008760 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800643e:	a901      	add	r1, sp, #4
 8006440:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8006444:	4c14      	ldr	r4, [pc, #80]	; (8006498 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800644a:	4d14      	ldr	r5, [pc, #80]	; (800649c <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800644c:	641a      	str	r2, [r3, #64]	; 0x40
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006458:	f007 fad2 	bl	800da00 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800645c:	f007 fab0 	bl	800d9c0 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8006460:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006462:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8006464:	490e      	ldr	r1, [pc, #56]	; (80064a0 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 8006466:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006468:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800646a:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800646c:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006470:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 8006474:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006476:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006478:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800647a:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 800647c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800647e:	f009 fdb1 	bl	800ffe4 <HAL_TIM_Base_Init>
 8006482:	b110      	cbz	r0, 800648a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8006484:	2001      	movs	r0, #1
}
 8006486:	b009      	add	sp, #36	; 0x24
 8006488:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 800648a:	4620      	mov	r0, r4
 800648c:	f008 ff7e 	bl	800f38c <HAL_TIM_Base_Start_IT>
}
 8006490:	b009      	add	sp, #36	; 0x24
 8006492:	bd30      	pop	{r4, r5, pc}
 8006494:	40023800 	.word	0x40023800
 8006498:	20002d50 	.word	0x20002d50
 800649c:	431bde83 	.word	0x431bde83
 80064a0:	40001800 	.word	0x40001800

080064a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064a8:	e7fe      	b.n	80064a8 <HardFault_Handler>
 80064aa:	bf00      	nop

080064ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064ac:	e7fe      	b.n	80064ac <MemManage_Handler>
 80064ae:	bf00      	nop

080064b0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064b0:	e7fe      	b.n	80064b0 <BusFault_Handler>
 80064b2:	bf00      	nop

080064b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064b4:	e7fe      	b.n	80064b4 <UsageFault_Handler>
 80064b6:	bf00      	nop

080064b8 <RCC_IRQHandler>:
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80064bc:	4801      	ldr	r0, [pc, #4]	; (80064c4 <DMA1_Stream0_IRQHandler+0x8>)
 80064be:	f002 bf2f 	b.w	8009320 <HAL_DMA_IRQHandler>
 80064c2:	bf00      	nop
 80064c4:	20001fd4 	.word	0x20001fd4

080064c8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <DMA1_Stream1_IRQHandler+0x8>)
 80064ca:	f002 bf29 	b.w	8009320 <HAL_DMA_IRQHandler>
 80064ce:	bf00      	nop
 80064d0:	20001f74 	.word	0x20001f74

080064d4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <DMA1_Stream5_IRQHandler+0x8>)
 80064d6:	f002 bf23 	b.w	8009320 <HAL_DMA_IRQHandler>
 80064da:	bf00      	nop
 80064dc:	20001f14 	.word	0x20001f14

080064e0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <DMA1_Stream6_IRQHandler+0x8>)
 80064e2:	f002 bf1d 	b.w	8009320 <HAL_DMA_IRQHandler>
 80064e6:	bf00      	nop
 80064e8:	20002094 	.word	0x20002094

080064ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80064ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80064ee:	4805      	ldr	r0, [pc, #20]	; (8006504 <ADC_IRQHandler+0x18>)
 80064f0:	f001 fec8 	bl	8008284 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80064f4:	4804      	ldr	r0, [pc, #16]	; (8006508 <ADC_IRQHandler+0x1c>)
 80064f6:	f001 fec5 	bl	8008284 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80064fa:	4804      	ldr	r0, [pc, #16]	; (800650c <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80064fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8006500:	f001 bec0 	b.w	8008284 <HAL_ADC_IRQHandler>
 8006504:	20001da4 	.word	0x20001da4
 8006508:	20001dec 	.word	0x20001dec
 800650c:	20001e34 	.word	0x20001e34

08006510 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <TIM2_IRQHandler+0x8>)
 8006512:	f009 bbdf 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 8006516:	bf00      	nop
 8006518:	2000247c 	.word	0x2000247c

0800651c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <TIM3_IRQHandler+0x8>)
 800651e:	f009 bbd9 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 8006522:	bf00      	nop
 8006524:	200024c8 	.word	0x200024c8

08006528 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <USART2_IRQHandler+0x8>)
 800652a:	f00b be57 	b.w	80121dc <HAL_UART_IRQHandler>
 800652e:	bf00      	nop
 8006530:	20002644 	.word	0x20002644

08006534 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006534:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006538:	f005 ba24 	b.w	800b984 <HAL_GPIO_EXTI_IRQHandler>

0800653c <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800653e:	f009 bbc9 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 8006542:	bf00      	nop
 8006544:	20002d50 	.word	0x20002d50

08006548 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800654a:	f009 bbc3 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 800654e:	bf00      	nop
 8006550:	20002430 	.word	0x20002430

08006554 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <DMA1_Stream7_IRQHandler+0x8>)
 8006556:	f002 bee3 	b.w	8009320 <HAL_DMA_IRQHandler>
 800655a:	bf00      	nop
 800655c:	20002034 	.word	0x20002034

08006560 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <TIM5_IRQHandler+0x8>)
 8006562:	f009 bbb7 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 8006566:	bf00      	nop
 8006568:	20002560 	.word	0x20002560

0800656c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <UART5_IRQHandler+0x8>)
 800656e:	f00b be35 	b.w	80121dc <HAL_UART_IRQHandler>
 8006572:	bf00      	nop
 8006574:	200027d0 	.word	0x200027d0

08006578 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006578:	4804      	ldr	r0, [pc, #16]	; (800658c <TIM6_DAC_IRQHandler+0x14>)
{
 800657a:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 800657c:	f002 fb02 	bl	8008b84 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006580:	4803      	ldr	r0, [pc, #12]	; (8006590 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8006586:	f009 bba5 	b.w	800fcd4 <HAL_TIM_IRQHandler>
 800658a:	bf00      	nop
 800658c:	20001ea0 	.word	0x20001ea0
 8006590:	200025ac 	.word	0x200025ac

08006594 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <DMA2_Stream1_IRQHandler+0x8>)
 8006596:	f002 bec3 	b.w	8009320 <HAL_DMA_IRQHandler>
 800659a:	bf00      	nop
 800659c:	200020f4 	.word	0x200020f4

080065a0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <DMA2_Stream4_IRQHandler+0x8>)
 80065a2:	f002 bebd 	b.w	8009320 <HAL_DMA_IRQHandler>
 80065a6:	bf00      	nop
 80065a8:	20001eb4 	.word	0x20001eb4

080065ac <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <ETH_IRQHandler+0x8>)
 80065ae:	f003 be3b 	b.w	800a228 <HAL_ETH_IRQHandler>
 80065b2:	bf00      	nop
 80065b4:	20005fe0 	.word	0x20005fe0

080065b8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <OTG_FS_IRQHandler+0x8>)
 80065ba:	f006 b901 	b.w	800c7c0 <HAL_PCD_IRQHandler>
 80065be:	bf00      	nop
 80065c0:	2002f460 	.word	0x2002f460

080065c4 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <DMA2_Stream6_IRQHandler+0x8>)
 80065c6:	f002 beab 	b.w	8009320 <HAL_DMA_IRQHandler>
 80065ca:	bf00      	nop
 80065cc:	20002154 	.word	0x20002154

080065d0 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <USART6_IRQHandler+0x8>)
 80065d2:	f00b be03 	b.w	80121dc <HAL_UART_IRQHandler>
 80065d6:	bf00      	nop
 80065d8:	20002854 	.word	0x20002854

080065dc <FPU_IRQHandler>:
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop

080065e0 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <UART8_IRQHandler+0x8>)
 80065e2:	f00b bdfb 	b.w	80121dc <HAL_UART_IRQHandler>
 80065e6:	bf00      	nop
 80065e8:	2000295c 	.word	0x2000295c

080065ec <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80065ec:	2001      	movs	r0, #1
 80065ee:	4770      	bx	lr

080065f0 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80065f0:	4b02      	ldr	r3, [pc, #8]	; (80065fc <_kill+0xc>)
 80065f2:	2216      	movs	r2, #22
	return -1;
}
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	4770      	bx	lr
 80065fc:	2002f874 	.word	0x2002f874

08006600 <_exit>:
	errno = EINVAL;
 8006600:	4b01      	ldr	r3, [pc, #4]	; (8006608 <_exit+0x8>)
 8006602:	2216      	movs	r2, #22
 8006604:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8006606:	e7fe      	b.n	8006606 <_exit+0x6>
 8006608:	2002f874 	.word	0x2002f874

0800660c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800660c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800660e:	1e16      	subs	r6, r2, #0
 8006610:	dd07      	ble.n	8006622 <_read+0x16>
 8006612:	460c      	mov	r4, r1
 8006614:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8006616:	f3af 8000 	nop.w
 800661a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800661e:	42a5      	cmp	r5, r4
 8006620:	d1f9      	bne.n	8006616 <_read+0xa>
	}

	return len;
}
 8006622:	4630      	mov	r0, r6
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	bf00      	nop

08006628 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006634:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006636:	604b      	str	r3, [r1, #4]
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <_isatty>:

int _isatty(int file) {
	return 1;
}
 800663c:	2001      	movs	r0, #1
 800663e:	4770      	bx	lr

08006640 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006640:	2000      	movs	r0, #0
 8006642:	4770      	bx	lr

08006644 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006644:	490d      	ldr	r1, [pc, #52]	; (800667c <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8006646:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006648:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 800664a:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 800664c:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800664e:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <_sbrk+0x40>)
 8006650:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8006652:	b170      	cbz	r0, 8006672 <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006654:	4403      	add	r3, r0
 8006656:	4293      	cmp	r3, r2
 8006658:	d803      	bhi.n	8006662 <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 800665a:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 800665e:	600b      	str	r3, [r1, #0]
}
 8006660:	4770      	bx	lr
		errno = ENOMEM;
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <_sbrk+0x44>)
 8006664:	220c      	movs	r2, #12
		return (void*) -1;
 8006666:	f04f 30ff 	mov.w	r0, #4294967295
}
 800666a:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 800666e:	601a      	str	r2, [r3, #0]
}
 8006670:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8006672:	4c06      	ldr	r4, [pc, #24]	; (800668c <_sbrk+0x48>)
 8006674:	4620      	mov	r0, r4
 8006676:	600c      	str	r4, [r1, #0]
 8006678:	e7ec      	b.n	8006654 <_sbrk+0x10>
 800667a:	bf00      	nop
 800667c:	20002da0 	.word	0x20002da0
 8006680:	20080000 	.word	0x20080000
 8006684:	00006800 	.word	0x00006800
 8006688:	2002f874 	.word	0x2002f874
 800668c:	2002f8a0 	.word	0x2002f8a0

08006690 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006690:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006694:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006698:	490f      	ldr	r1, [pc, #60]	; (80066d8 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800669a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 800669e:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066a0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80066a4:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	f040 0001 	orr.w	r0, r0, #1
 80066ac:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80066ae:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80066b4:	4809      	ldr	r0, [pc, #36]	; (80066dc <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80066b6:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80066b8:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80066ba:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066bc:	4808      	ldr	r0, [pc, #32]	; (80066e0 <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80066be:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80066c2:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 80066c4:	60dc      	str	r4, [r3, #12]

#endif
}
 80066c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066ca:	6090      	str	r0, [r2, #8]
}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000ed00 	.word	0xe000ed00
 80066d4:	40023800 	.word	0x40023800
 80066d8:	fef6ffff 	.word	0xfef6ffff
 80066dc:	24003010 	.word	0x24003010
 80066e0:	08000000 	.word	0x08000000

080066e4 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 80066e4:	680b      	ldr	r3, [r1, #0]
 80066e6:	4a03      	ldr	r2, [pc, #12]	; (80066f4 <dnsfound+0x10>)
		ip_ready = -1;
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf08      	it	eq
 80066ec:	f04f 33ff 	moveq.w	r3, #4294967295
 80066f0:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 80066f2:	4770      	bx	lr
 80066f4:	20002db4 	.word	0x20002db4

080066f8 <myreboot>:
void myreboot(char *msg) {
 80066f8:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 80066fa:	480a      	ldr	r0, [pc, #40]	; (8006724 <myreboot+0x2c>)
void myreboot(char *msg) {
 80066fc:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 80066fe:	f01e fc65 	bl	8024fcc <iprintf>
	osDelay(2000);
 8006702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006706:	f00e fcf1 	bl	80150ec <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800670a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800670e:	4906      	ldr	r1, [pc, #24]	; (8006728 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006712:	68ca      	ldr	r2, [r1, #12]
 8006714:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006718:	4313      	orrs	r3, r2
 800671a:	60cb      	str	r3, [r1, #12]
 800671c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006720:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006722:	e7fd      	b.n	8006720 <myreboot+0x28>
 8006724:	0802b5d8 	.word	0x0802b5d8
 8006728:	e000ed00 	.word	0xe000ed00
 800672c:	05fa0004 	.word	0x05fa0004

08006730 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8006730:	b500      	push	{lr}
 8006732:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006734:	f241 3388 	movw	r3, #5000	; 0x1388
 8006738:	4a16      	ldr	r2, [pc, #88]	; (8006794 <sendudp+0x64>)
 800673a:	f019 fbb3 	bl	801fea4 <udp_sendto>
 800673e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006742:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006746:	b943      	cbnz	r3, 800675a <sendudp+0x2a>
 8006748:	b25a      	sxtb	r2, r3
		busycount = 0;
 800674a:	4b13      	ldr	r3, [pc, #76]	; (8006798 <sendudp+0x68>)
 800674c:	601a      	str	r2, [r3, #0]
	return (err);
 800674e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006752:	b240      	sxtb	r0, r0
 8006754:	b003      	add	sp, #12
 8006756:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 800675a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800675e:	480f      	ldr	r0, [pc, #60]	; (800679c <sendudp+0x6c>)
 8006760:	b249      	sxtb	r1, r1
 8006762:	f01e fc33 	bl	8024fcc <iprintf>
		vTaskDelay(100); //some delay!
 8006766:	2064      	movs	r0, #100	; 0x64
 8006768:	f010 f80e 	bl	8016788 <vTaskDelay>
		if (err == ERR_MEM) {
 800676c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006770:	2bff      	cmp	r3, #255	; 0xff
 8006772:	d00c      	beq.n	800678e <sendudp+0x5e>
		if (err == ERR_USE) {
 8006774:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006778:	2bf8      	cmp	r3, #248	; 0xf8
 800677a:	d1e8      	bne.n	800674e <sendudp+0x1e>
			if (busycount++ > 10)
 800677c:	4a06      	ldr	r2, [pc, #24]	; (8006798 <sendudp+0x68>)
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	1c59      	adds	r1, r3, #1
 8006782:	2b0a      	cmp	r3, #10
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	dde2      	ble.n	800674e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8006788:	4805      	ldr	r0, [pc, #20]	; (80067a0 <sendudp+0x70>)
 800678a:	f7ff ffb5 	bl	80066f8 <myreboot>
			myreboot("sendudp: out of mem");
 800678e:	4805      	ldr	r0, [pc, #20]	; (80067a4 <sendudp+0x74>)
 8006790:	f7ff ffb2 	bl	80066f8 <myreboot>
 8006794:	20002dcc 	.word	0x20002dcc
 8006798:	20002da4 	.word	0x20002da4
 800679c:	0802b5ec 	.word	0x0802b5ec
 80067a0:	0802b614 	.word	0x0802b614
 80067a4:	0802b600 	.word	0x0802b600

080067a8 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067a8:	4b25      	ldr	r3, [pc, #148]	; (8006840 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80067aa:	4684      	mov	ip, r0
 80067ac:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067ae:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80067b2:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067b8:	4c22      	ldr	r4, [pc, #136]	; (8006844 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80067ba:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067bc:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067c2:	4c21      	ldr	r4, [pc, #132]	; (8006848 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067c8:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80067cc:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067d0:	4c1e      	ldr	r4, [pc, #120]	; (800684c <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067d2:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067d6:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80067da:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067de:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067e0:	bfc8      	it	gt
 80067e2:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067e6:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 80067ea:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80067ec:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	4d18      	ldr	r5, [pc, #96]	; (8006854 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80067f4:	4a18      	ldr	r2, [pc, #96]	; (8006858 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80067fa:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80067fc:	bfb8      	it	lt
 80067fe:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006800:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8006802:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006804:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006806:	4d15      	ldr	r5, [pc, #84]	; (800685c <sendstatus+0xb4>)
 8006808:	b292      	uxth	r2, r2
 800680a:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800680c:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006810:	432a      	orrs	r2, r5
 8006812:	4d13      	ldr	r5, [pc, #76]	; (8006860 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006814:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006816:	4035      	ands	r5, r6
 8006818:	432a      	orrs	r2, r5
 800681a:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800681c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006820:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006824:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006828:	f241 3388 	movw	r3, #5000	; 0x1388
 800682c:	f7ff ff80 	bl	8006730 <sendudp>
 8006830:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	6023      	str	r3, [r4, #0]
}
 800683a:	b002      	add	sp, #8
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	bf00      	nop
 8006840:	20000748 	.word	0x20000748
 8006844:	200006f4 	.word	0x200006f4
 8006848:	20002d38 	.word	0x20002d38
 800684c:	20002c04 	.word	0x20002c04
 8006850:	20000700 	.word	0x20000700
 8006854:	20000002 	.word	0x20000002
 8006858:	200006fc 	.word	0x200006fc
 800685c:	200006dc 	.word	0x200006dc
 8006860:	ffff0000 	.word	0xffff0000
 8006864:	20002dcc 	.word	0x20002dcc

08006868 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	4604      	mov	r4, r0
 800686c:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 800686e:	4818      	ldr	r0, [pc, #96]	; (80068d0 <dnslookup+0x68>)
 8006870:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 8006872:	4e18      	ldr	r6, [pc, #96]	; (80068d4 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8006874:	f01e fbaa 	bl	8024fcc <iprintf>
	ip_ready = 0;
 8006878:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800687a:	4620      	mov	r0, r4
 800687c:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <dnslookup+0x70>)
 800687e:	4639      	mov	r1, r7
	ip_ready = 0;
 8006880:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006882:	f012 ffdd 	bl	8019840 <dns_gethostbyname>
 8006886:	4604      	mov	r4, r0

	switch (err) {
 8006888:	3005      	adds	r0, #5
 800688a:	d005      	beq.n	8006898 <dnslookup+0x30>
 800688c:	b114      	cbz	r4, 8006894 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 800688e:	4813      	ldr	r0, [pc, #76]	; (80068dc <dnslookup+0x74>)
 8006890:	f01e fb9c 	bl	8024fcc <iprintf>
		break;
	}
	return (err);
}
 8006894:	4620      	mov	r0, r4
 8006896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8006898:	4811      	ldr	r0, [pc, #68]	; (80068e0 <dnslookup+0x78>)
 800689a:	2514      	movs	r5, #20
 800689c:	f01e fb96 	bl	8024fcc <iprintf>
		for (i = 0; i < 20; i++) {
 80068a0:	e001      	b.n	80068a6 <dnslookup+0x3e>
 80068a2:	3d01      	subs	r5, #1
 80068a4:	d0f3      	beq.n	800688e <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80068a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068aa:	f00e fc1f 	bl	80150ec <osDelay>
			printf(".");
 80068ae:	202e      	movs	r0, #46	; 0x2e
 80068b0:	f01e fba4 	bl	8024ffc <putchar>
			if (ip_ready) {
 80068b4:	6833      	ldr	r3, [r6, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f3      	beq.n	80068a2 <dnslookup+0x3a>
				if (ip_ready == -1) {
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	d002      	beq.n	80068c4 <dnslookup+0x5c>
				return (ERR_OK);
 80068be:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 80068c0:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 80068c2:	e7e7      	b.n	8006894 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80068c6:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 80068ca:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80068cc:	e7e2      	b.n	8006894 <dnslookup+0x2c>
 80068ce:	bf00      	nop
 80068d0:	0802b630 	.word	0x0802b630
 80068d4:	20002db4 	.word	0x20002db4
 80068d8:	080066e5 	.word	0x080066e5
 80068dc:	0802b66c 	.word	0x0802b66c
 80068e0:	0802b644 	.word	0x0802b644
 80068e4:	0802b660 	.word	0x0802b660

080068e8 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 80068e8:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 80068ea:	4914      	ldr	r1, [pc, #80]	; (800693c <locateudp+0x54>)
{
 80068ec:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 80068ee:	4814      	ldr	r0, [pc, #80]	; (8006940 <locateudp+0x58>)
 80068f0:	f01e fb6c 	bl	8024fcc <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 80068f4:	4913      	ldr	r1, [pc, #76]	; (8006944 <locateudp+0x5c>)
 80068f6:	4811      	ldr	r0, [pc, #68]	; (800693c <locateudp+0x54>)
 80068f8:	f7ff ffb6 	bl	8006868 <dnslookup>
 80068fc:	b240      	sxtb	r0, r0
 80068fe:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8006902:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006906:	b9a3      	cbnz	r3, 8006932 <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800690a:	490f      	ldr	r1, [pc, #60]	; (8006948 <locateudp+0x60>)
	ip = udpdestip.addr;
 800690c:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800690e:	480f      	ldr	r0, [pc, #60]	; (800694c <locateudp+0x64>)
 8006910:	0e22      	lsrs	r2, r4, #24
 8006912:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006916:	e9cd 3200 	strd	r3, r2, [sp]
 800691a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800691e:	b2e2      	uxtb	r2, r4
 8006920:	f01e fd46 	bl	80253b0 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8006924:	4909      	ldr	r1, [pc, #36]	; (800694c <locateudp+0x64>)
 8006926:	480a      	ldr	r0, [pc, #40]	; (8006950 <locateudp+0x68>)
 8006928:	f01e fb50 	bl	8024fcc <iprintf>
	return (ip);
}
 800692c:	4620      	mov	r0, r4
 800692e:	b004      	add	sp, #16
 8006930:	bd10      	pop	{r4, pc}
		rebootme(3);
 8006932:	2003      	movs	r0, #3
 8006934:	f7fb fec6 	bl	80026c4 <rebootme>
 8006938:	e7e6      	b.n	8006908 <locateudp+0x20>
 800693a:	bf00      	nop
 800693c:	20002e18 	.word	0x20002e18
 8006940:	0802b690 	.word	0x0802b690
 8006944:	20002dcc 	.word	0x20002dcc
 8006948:	0802b6b0 	.word	0x0802b6b0
 800694c:	20002dbc 	.word	0x20002dbc
 8006950:	0802b6c0 	.word	0x0802b6c0

08006954 <startudp>:

void startudp(uint32_t ip) {
 8006954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	ed2d 8b02 	vpush	{d8}
 800695c:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800695e:	f010 f83b 	bl	80169d8 <xTaskGetCurrentTaskHandle>
 8006962:	4b75      	ldr	r3, [pc, #468]	; (8006b38 <startudp+0x1e4>)
 8006964:	4602      	mov	r2, r0
	osDelay(1000);
 8006966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800696a:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 800696c:	f00e fbbe 	bl	80150ec <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8006970:	f019 fb64 	bl	802003c <udp_new>
	if (pcb == NULL) {
 8006974:	2800      	cmp	r0, #0
 8006976:	f000 80ce 	beq.w	8006b16 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	496f      	ldr	r1, [pc, #444]	; (8006b3c <startudp+0x1e8>)
 8006980:	ee08 0a10 	vmov	s16, r0
 8006984:	f019 f90a 	bl	801fb9c <udp_bind>
 8006988:	4605      	mov	r5, r0
 800698a:	2800      	cmp	r0, #0
 800698c:	f040 80bf 	bne.w	8006b0e <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006990:	2241      	movs	r2, #65	; 0x41
 8006992:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8006996:	2036      	movs	r0, #54	; 0x36
 8006998:	f014 f8a8 	bl	801aaec <pbuf_alloc>

	if (p1 == NULL) {
 800699c:	9000      	str	r0, [sp, #0]
 800699e:	2800      	cmp	r0, #0
 80069a0:	f000 80bd 	beq.w	8006b1e <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80069a4:	4c66      	ldr	r4, [pc, #408]	; (8006b40 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80069a6:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80069aa:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80069ac:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80069b2:	2241      	movs	r2, #65	; 0x41
 80069b4:	f014 f89a 	bl	801aaec <pbuf_alloc>
	if (p2 == NULL) {
 80069b8:	9001      	str	r0, [sp, #4]
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f000 80b7 	beq.w	8006b2e <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80069c0:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80069c2:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80069c4:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80069c6:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80069c8:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80069cc:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80069ce:	2201      	movs	r2, #1
 80069d0:	f014 f88c 	bl	801aaec <pbuf_alloc>
	if (ps == NULL) {
 80069d4:	ee08 0a90 	vmov	s17, r0
 80069d8:	2800      	cmp	r0, #0
 80069da:	f000 80aa 	beq.w	8006b32 <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80069de:	4c59      	ldr	r4, [pc, #356]	; (8006b44 <startudp+0x1f0>)
 80069e0:	4f59      	ldr	r7, [pc, #356]	; (8006b48 <startudp+0x1f4>)
 80069e2:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 80069e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80069e8:	f00e fb80 	bl	80150ec <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80069ec:	4b57      	ldr	r3, [pc, #348]	; (8006b4c <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 80069ee:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 80069f0:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 80069f2:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80069f4:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80069f6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80069fa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80069fe:	4b54      	ldr	r3, [pc, #336]	; (8006b50 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006a00:	4854      	ldr	r0, [pc, #336]	; (8006b54 <startudp+0x200>)
 8006a02:	4e55      	ldr	r6, [pc, #340]	; (8006b58 <startudp+0x204>)
 8006a04:	f8df b188 	ldr.w	fp, [pc, #392]	; 8006b90 <startudp+0x23c>
 8006a08:	f8df a188 	ldr.w	sl, [pc, #392]	; 8006b94 <startudp+0x240>
 8006a0c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006b98 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006a10:	4d52      	ldr	r5, [pc, #328]	; (8006b5c <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006a12:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006a14:	f01e fb76 	bl	8025104 <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f010 f923 	bl	8016c68 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d05a      	beq.n	8006adc <startudp+0x188>
			sigsend = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8006a2a:	7833      	ldrb	r3, [r6, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f3      	beq.n	8006a18 <startudp+0xc4>
 8006a30:	f8db 3000 	ldr.w	r3, [fp]
 8006a34:	f8da 2000 	ldr.w	r2, [sl]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d1ed      	bne.n	8006a18 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006a3c:	4a48      	ldr	r2, [pc, #288]	; (8006b60 <startudp+0x20c>)
 8006a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	bf08      	it	eq
 8006a48:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006a4a:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006a4c:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006a4e:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	684b      	ldr	r3, [r1, #4]
 8006a54:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	684a      	ldr	r2, [r1, #4]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	684a      	ldr	r2, [r1, #4]
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8006a66:	7b89      	ldrb	r1, [r1, #14]
 8006a68:	2901      	cmp	r1, #1
 8006a6a:	d006      	beq.n	8006a7a <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f01e faad 	bl	8024fcc <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8006a72:	f899 100e 	ldrb.w	r1, [r9, #14]
 8006a76:	2901      	cmp	r1, #1
 8006a78:	d1f8      	bne.n	8006a6c <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8006a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4a38      	ldr	r2, [pc, #224]	; (8006b64 <startudp+0x210>)
 8006a82:	ee18 0a10 	vmov	r0, s16
 8006a86:	f7ff fe53 	bl	8006730 <sendudp>
 8006a8a:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 8006a8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006a92:	3301      	adds	r3, #1
 8006a94:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8006a98:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8006aaa:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <startudp+0x214>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0b2      	beq.n	8006a18 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8006ab2:	492e      	ldr	r1, [pc, #184]	; (8006b6c <startudp+0x218>)
 8006ab4:	ee18 2a10 	vmov	r2, s16
 8006ab8:	2001      	movs	r0, #1
 8006aba:	780b      	ldrb	r3, [r1, #0]
 8006abc:	ee18 1a90 	vmov	r1, s17
 8006ac0:	f7ff fe72 	bl	80067a8 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006acc:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8006ace:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8006ad2:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006ad4:	f010 f8c8 	bl	8016c68 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d1a4      	bne.n	8006a26 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8006adc:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <startudp+0x21c>)
 8006ade:	f8d8 2000 	ldr.w	r2, [r8]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d097      	beq.n	8006a18 <startudp+0xc4>
 8006ae8:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <startudp+0x220>)
 8006aea:	4923      	ldr	r1, [pc, #140]	; (8006b78 <startudp+0x224>)
 8006aec:	fb02 f203 	mul.w	r2, r2, r3
 8006af0:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8006af4:	d390      	bcc.n	8006a18 <startudp+0xc4>
		talive = t1sec;
 8006af6:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8006afa:	ee18 2a10 	vmov	r2, s16
 8006afe:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <startudp+0x218>)
 8006b00:	ee18 1a90 	vmov	r1, s17
 8006b04:	2002      	movs	r0, #2
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f7ff fe4e 	bl	80067a8 <sendstatus>
 8006b0c:	e784      	b.n	8006a18 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 8006b0e:	481b      	ldr	r0, [pc, #108]	; (8006b7c <startudp+0x228>)
 8006b10:	f01e faf8 	bl	8025104 <puts>
		for (;;)
 8006b14:	e7fe      	b.n	8006b14 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8006b16:	481a      	ldr	r0, [pc, #104]	; (8006b80 <startudp+0x22c>)
 8006b18:	f01e faf4 	bl	8025104 <puts>
		for (;;)
 8006b1c:	e7fe      	b.n	8006b1c <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 8006b1e:	4819      	ldr	r0, [pc, #100]	; (8006b84 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8006b20:	b005      	add	sp, #20
 8006b22:	ecbd 8b02 	vpop	{d8}
 8006b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8006b2a:	f01e baeb 	b.w	8025104 <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 8006b2e:	4816      	ldr	r0, [pc, #88]	; (8006b88 <startudp+0x234>)
 8006b30:	e7f6      	b.n	8006b20 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 8006b32:	4816      	ldr	r0, [pc, #88]	; (8006b8c <startudp+0x238>)
 8006b34:	e7f4      	b.n	8006b20 <startudp+0x1cc>
 8006b36:	bf00      	nop
 8006b38:	200007fc 	.word	0x200007fc
 8006b3c:	080452a8 	.word	0x080452a8
 8006b40:	2000074c 	.word	0x2000074c
 8006b44:	20002c04 	.word	0x20002c04
 8006b48:	20000764 	.word	0x20000764
 8006b4c:	dec0edfe 	.word	0xdec0edfe
 8006b50:	2000074a 	.word	0x2000074a
 8006b54:	0802b76c 	.word	0x0802b76c
 8006b58:	20002db0 	.word	0x20002db0
 8006b5c:	0802b7a0 	.word	0x0802b7a0
 8006b60:	200006f0 	.word	0x200006f0
 8006b64:	20002dcc 	.word	0x20002dcc
 8006b68:	2000075c 	.word	0x2000075c
 8006b6c:	200006dc 	.word	0x200006dc
 8006b70:	20002a18 	.word	0x20002a18
 8006b74:	eeeeeeef 	.word	0xeeeeeeef
 8006b78:	02222222 	.word	0x02222222
 8006b7c:	0802b6f0 	.word	0x0802b6f0
 8006b80:	0802b6d4 	.word	0x0802b6d4
 8006b84:	0802b70c 	.word	0x0802b70c
 8006b88:	0802b72c 	.word	0x0802b72c
 8006b8c:	0802b74c 	.word	0x0802b74c
 8006b90:	20002dac 	.word	0x20002dac
 8006b94:	200006fc 	.word	0x200006fc
 8006b98:	20002db8 	.word	0x20002db8

08006b9c <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8006b9e:	4b52      	ldr	r3, [pc, #328]	; (8006ce8 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006ba4:	4851      	ldr	r0, [pc, #324]	; (8006cec <tag_callback+0x150>)
	if (ledsenabled) {
 8006ba6:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8006bac:	b35a      	cbz	r2, 8006c06 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006bae:	f004 fed1 	bl	800b954 <HAL_GPIO_TogglePin>
 8006bb2:	4c4f      	ldr	r4, [pc, #316]	; (8006cf0 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8006bb4:	4d4f      	ldr	r5, [pc, #316]	; (8006cf4 <tag_callback+0x158>)
 8006bb6:	e001      	b.n	8006bbc <tag_callback+0x20>
 8006bb8:	f01e faa4 	bl	8025104 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	f00f f858 	bl	8015c74 <xQueueSemaphoreTake>
 8006bc4:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8006bc6:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d1f5      	bne.n	8006bb8 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8006bcc:	1f32      	subs	r2, r6, #4
 8006bce:	2a07      	cmp	r2, #7
 8006bd0:	d81c      	bhi.n	8006c0c <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8006bd2:	4949      	ldr	r1, [pc, #292]	; (8006cf8 <tag_callback+0x15c>)
 8006bd4:	4093      	lsls	r3, r2
 8006bd6:	780a      	ldrb	r2, [r1, #0]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	4a48      	ldr	r2, [pc, #288]	; (8006cfc <tag_callback+0x160>)
 8006bdc:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8006bde:	bb5b      	cbnz	r3, 8006c38 <tag_callback+0x9c>
			strcpy(newstring, "0");
 8006be0:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <tag_callback+0x164>)
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8006be6:	2300      	movs	r3, #0
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	f00e fda7 	bl	8015740 <xQueueGenericSend>
 8006bf2:	2801      	cmp	r0, #1
 8006bf4:	d002      	beq.n	8006bfc <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8006bf6:	4843      	ldr	r0, [pc, #268]	; (8006d04 <tag_callback+0x168>)
 8006bf8:	f01e fa84 	bl	8025104 <puts>
	}
	return (strlen(newstring));
 8006bfc:	4638      	mov	r0, r7
}
 8006bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8006c02:	f7f9 bb27 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8006c06:	f004 fe8b 	bl	800b920 <HAL_GPIO_WritePin>
 8006c0a:	e7d2      	b.n	8006bb2 <tag_callback+0x16>
		switch (index) {
 8006c0c:	2e14      	cmp	r6, #20
 8006c0e:	d817      	bhi.n	8006c40 <tag_callback+0xa4>
 8006c10:	e8df f006 	tbb	[pc, r6]
 8006c14:	0b655055 	.word	0x0b655055
 8006c18:	16161616 	.word	0x16161616
 8006c1c:	16161616 	.word	0x16161616
 8006c20:	343d5a61 	.word	0x343d5a61
 8006c24:	464b2429 	.word	0x464b2429
 8006c28:	1c          	.byte	0x1c
 8006c29:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8006c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c2e:	482f      	ldr	r0, [pc, #188]	; (8006cec <tag_callback+0x150>)
 8006c30:	f004 fe64 	bl	800b8fc <HAL_GPIO_ReadPin>
 8006c34:	2801      	cmp	r0, #1
 8006c36:	d1d3      	bne.n	8006be0 <tag_callback+0x44>
			strcpy(newstring, "1");
 8006c38:	4b33      	ldr	r3, [pc, #204]	; (8006d08 <tag_callback+0x16c>)
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	803b      	strh	r3, [r7, #0]
 8006c3e:	e7d2      	b.n	8006be6 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8006c40:	4632      	mov	r2, r6
 8006c42:	4932      	ldr	r1, [pc, #200]	; (8006d0c <tag_callback+0x170>)
 8006c44:	4638      	mov	r0, r7
 8006c46:	f01e fbb3 	bl	80253b0 <siprintf>
			break;
 8006c4a:	e7cc      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8006c4c:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <tag_callback+0x174>)
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bf14      	ite	ne
 8006c54:	2331      	movne	r3, #49	; 0x31
 8006c56:	2330      	moveq	r3, #48	; 0x30
 8006c58:	803b      	strh	r3, [r7, #0]
			break;
 8006c5a:	e7c4      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8006c5c:	492d      	ldr	r1, [pc, #180]	; (8006d14 <tag_callback+0x178>)
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f01e fc4d 	bl	80254fe <strcpy>
			break;
 8006c64:	e7bf      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8006c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c6a:	482b      	ldr	r0, [pc, #172]	; (8006d18 <tag_callback+0x17c>)
 8006c6c:	f004 fe46 	bl	800b8fc <HAL_GPIO_ReadPin>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2330      	movne	r3, #48	; 0x30
 8006c76:	2331      	moveq	r3, #49	; 0x31
 8006c78:	803b      	strh	r3, [r7, #0]
			break;
 8006c7a:	e7b4      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8006c7c:	4b27      	ldr	r3, [pc, #156]	; (8006d1c <tag_callback+0x180>)
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	f013 0f04 	tst.w	r3, #4
 8006c84:	bf14      	ite	ne
 8006c86:	2331      	movne	r3, #49	; 0x31
 8006c88:	2330      	moveq	r3, #48	; 0x30
 8006c8a:	803b      	strh	r3, [r7, #0]
			break;
 8006c8c:	e7ab      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8006c8e:	4b23      	ldr	r3, [pc, #140]	; (8006d1c <tag_callback+0x180>)
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	f013 0f02 	tst.w	r3, #2
 8006c96:	bf14      	ite	ne
 8006c98:	2331      	movne	r3, #49	; 0x31
 8006c9a:	2330      	moveq	r3, #48	; 0x30
 8006c9c:	803b      	strh	r3, [r7, #0]
			break;
 8006c9e:	e7a2      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8006ca0:	491f      	ldr	r1, [pc, #124]	; (8006d20 <tag_callback+0x184>)
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	f01e fc2b 	bl	80254fe <strcpy>
			break;
 8006ca8:	e79d      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8006caa:	491e      	ldr	r1, [pc, #120]	; (8006d24 <tag_callback+0x188>)
 8006cac:	4638      	mov	r0, r7
 8006cae:	f01e fc26 	bl	80254fe <strcpy>
			break;
 8006cb2:	e798      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8006cb4:	491c      	ldr	r1, [pc, #112]	; (8006d28 <tag_callback+0x18c>)
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f01e fc21 	bl	80254fe <strcpy>
			break;
 8006cbc:	e793      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8006cbe:	491b      	ldr	r1, [pc, #108]	; (8006d2c <tag_callback+0x190>)
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f01e fc1c 	bl	80254fe <strcpy>
			break;
 8006cc6:	e78e      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <tag_callback+0x180>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	3330      	adds	r3, #48	; 0x30
 8006cd2:	803b      	strh	r3, [r7, #0]
			break;
 8006cd4:	e787      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <tag_callback+0x194>)
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	803b      	strh	r3, [r7, #0]
			break;
 8006cdc:	e783      	b.n	8006be6 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8006cde:	4915      	ldr	r1, [pc, #84]	; (8006d34 <tag_callback+0x198>)
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f01e fc0c 	bl	80254fe <strcpy>
			break;
 8006ce6:	e77e      	b.n	8006be6 <tag_callback+0x4a>
 8006ce8:	20000270 	.word	0x20000270
 8006cec:	40020c00 	.word	0x40020c00
 8006cf0:	20002a14 	.word	0x20002a14
 8006cf4:	0802b888 	.word	0x0802b888
 8006cf8:	20000274 	.word	0x20000274
 8006cfc:	20002dd0 	.word	0x20002dd0
 8006d00:	08044e84 	.word	0x08044e84
 8006d04:	0802b8b4 	.word	0x0802b8b4
 8006d08:	0802b668 	.word	0x0802b668
 8006d0c:	0802b894 	.word	0x0802b894
 8006d10:	20000010 	.word	0x20000010
 8006d14:	20000084 	.word	0x20000084
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	20002d38 	.word	0x20002d38
 8006d20:	20000014 	.word	0x20000014
 8006d24:	20000128 	.word	0x20000128
 8006d28:	20000074 	.word	0x20000074
 8006d2c:	20000230 	.word	0x20000230
 8006d30:	08043268 	.word	0x08043268
 8006d34:	20000054 	.word	0x20000054

08006d38 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	4615      	mov	r5, r2
 8006d40:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006d42:	220a      	movs	r2, #10
 8006d44:	a903      	add	r1, sp, #12
 8006d46:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8006d48:	4699      	mov	r9, r3
 8006d4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006d4c:	f01f f9c6 	bl	80260dc <strtol>
 8006d50:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8006d52:	4621      	mov	r1, r4
 8006d54:	462a      	mov	r2, r5
 8006d56:	4871      	ldr	r0, [pc, #452]	; (8006f1c <httpd_cgi_handler+0x1e4>)
 8006d58:	4633      	mov	r3, r6
 8006d5a:	f01e f937 	bl	8024fcc <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	dd37      	ble.n	8006dd2 <httpd_cgi_handler+0x9a>
 8006d62:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006d64:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8006f4c <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006d68:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006f50 <httpd_cgi_handler+0x218>
		switch (j) {
 8006d6c:	f1a6 030a 	sub.w	r3, r6, #10
 8006d70:	2b0e      	cmp	r3, #14
 8006d72:	f200 80cc 	bhi.w	8006f0e <httpd_cgi_handler+0x1d6>
 8006d76:	e8df f003 	tbb	[pc, r3]
 8006d7a:	9eb6      	.short	0x9eb6
 8006d7c:	08080808 	.word	0x08080808
 8006d80:	08080808 	.word	0x08080808
 8006d84:	864d6073 	.word	0x864d6073
 8006d88:	3a          	.byte	0x3a
 8006d89:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006d8a:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	f1a6 000c 	sub.w	r0, r6, #12
 8006d92:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006d94:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8006d96:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006d9a:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006d9c:	2a30      	cmp	r2, #48	; 0x30
 8006d9e:	d01b      	beq.n	8006dd8 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	4311      	orrs	r1, r2
 8006da4:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006da6:	f001 0202 	and.w	r2, r1, #2
 8006daa:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006dac:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8006dae:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006db0:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006db4:	f01e f90a 	bl	8024fcc <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8006db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4a58      	ldr	r2, [pc, #352]	; (8006f20 <httpd_cgi_handler+0x1e8>)
 8006dc0:	9100      	str	r1, [sp, #0]
 8006dc2:	2188      	movs	r1, #136	; 0x88
 8006dc4:	4857      	ldr	r0, [pc, #348]	; (8006f24 <httpd_cgi_handler+0x1ec>)
 8006dc6:	f005 f8b1 	bl	800bf2c <HAL_I2C_Master_Transmit>
 8006dca:	b960      	cbnz	r0, 8006de6 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006dcc:	3401      	adds	r4, #1
 8006dce:	42a5      	cmp	r5, r4
 8006dd0:	d1cc      	bne.n	8006d6c <httpd_cgi_handler+0x34>
}
 8006dd2:	b005      	add	sp, #20
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f600 	lsl.w	r6, r1, r0
 8006dde:	7819      	ldrb	r1, [r3, #0]
 8006de0:	ea21 0106 	bic.w	r1, r1, r6
 8006de4:	e7df      	b.n	8006da6 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8006de6:	4850      	ldr	r0, [pc, #320]	; (8006f28 <httpd_cgi_handler+0x1f0>)
 8006de8:	f01e f8f0 	bl	8024fcc <iprintf>
 8006dec:	e7ee      	b.n	8006dcc <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	3c01      	subs	r4, #1
 8006df2:	484e      	ldr	r0, [pc, #312]	; (8006f2c <httpd_cgi_handler+0x1f4>)
 8006df4:	440c      	add	r4, r1
 8006df6:	4623      	mov	r3, r4
 8006df8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006dfc:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006dfe:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e00:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006e04:	bf18      	it	ne
 8006e06:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e08:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006e0a:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e0c:	dcf3      	bgt.n	8006df6 <httpd_cgi_handler+0xbe>
}
 8006e0e:	b005      	add	sp, #20
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	4e46      	ldr	r6, [pc, #280]	; (8006f30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006e1c:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e1e:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006e20:	2b30      	cmp	r3, #48	; 0x30
 8006e22:	bf0c      	ite	eq
 8006e24:	f020 0001 	biceq.w	r0, r0, #1
 8006e28:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8006e2c:	f7fd fea0 	bl	8004b70 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e30:	42a5      	cmp	r5, r4
 8006e32:	dcf0      	bgt.n	8006e16 <httpd_cgi_handler+0xde>
}
 8006e34:	b005      	add	sp, #20
 8006e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3a:	4e3d      	ldr	r6, [pc, #244]	; (8006f30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006e42:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e44:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006e46:	2b30      	cmp	r3, #48	; 0x30
 8006e48:	bf0c      	ite	eq
 8006e4a:	f020 0002 	biceq.w	r0, r0, #2
 8006e4e:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8006e52:	f7fd fe8d 	bl	8004b70 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e56:	42a5      	cmp	r5, r4
 8006e58:	dcf0      	bgt.n	8006e3c <httpd_cgi_handler+0x104>
}
 8006e5a:	b005      	add	sp, #20
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	4e33      	ldr	r6, [pc, #204]	; (8006f30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006e68:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e6a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006e6c:	2b30      	cmp	r3, #48	; 0x30
 8006e6e:	bf0c      	ite	eq
 8006e70:	f020 0004 	biceq.w	r0, r0, #4
 8006e74:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8006e78:	f7fd fe7a 	bl	8004b70 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e7c:	42a5      	cmp	r5, r4
 8006e7e:	dcf0      	bgt.n	8006e62 <httpd_cgi_handler+0x12a>
}
 8006e80:	b005      	add	sp, #20
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006e88:	4e2a      	ldr	r6, [pc, #168]	; (8006f34 <httpd_cgi_handler+0x1fc>)
 8006e8a:	e004      	b.n	8006e96 <httpd_cgi_handler+0x15e>
 8006e8c:	f004 fd48 	bl	800b920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006e90:	42a5      	cmp	r5, r4
 8006e92:	dd9e      	ble.n	8006dd2 <httpd_cgi_handler+0x9a>
 8006e94:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8006e96:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e9e:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8006ea0:	4423      	add	r3, r4
 8006ea2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ea6:	2b31      	cmp	r3, #49	; 0x31
 8006ea8:	d1f0      	bne.n	8006e8c <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f004 fd38 	bl	800b920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006eb0:	42a5      	cmp	r5, r4
 8006eb2:	dcef      	bgt.n	8006e94 <httpd_cgi_handler+0x15c>
 8006eb4:	e78d      	b.n	8006dd2 <httpd_cgi_handler+0x9a>
 8006eb6:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006eb8:	4e1f      	ldr	r6, [pc, #124]	; (8006f38 <httpd_cgi_handler+0x200>)
 8006eba:	e004      	b.n	8006ec6 <httpd_cgi_handler+0x18e>
 8006ebc:	f004 fd30 	bl	800b920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ec0:	42ac      	cmp	r4, r5
 8006ec2:	da86      	bge.n	8006dd2 <httpd_cgi_handler+0x9a>
 8006ec4:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8006ec6:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ece:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8006ed0:	4423      	add	r3, r4
 8006ed2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	d1f0      	bne.n	8006ebc <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006eda:	2200      	movs	r2, #0
 8006edc:	f004 fd20 	bl	800b920 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ee0:	42a5      	cmp	r5, r4
 8006ee2:	dcef      	bgt.n	8006ec4 <httpd_cgi_handler+0x18c>
 8006ee4:	e775      	b.n	8006dd2 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8006ee6:	4815      	ldr	r0, [pc, #84]	; (8006f3c <httpd_cgi_handler+0x204>)
 8006ee8:	f01e f90c 	bl	8025104 <puts>
			osDelay(1000);
 8006eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ef0:	f00e f8fc 	bl	80150ec <osDelay>
 8006ef4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ef8:	4911      	ldr	r1, [pc, #68]	; (8006f40 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006efc:	68ca      	ldr	r2, [r1, #12]
 8006efe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60cb      	str	r3, [r1, #12]
 8006f06:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006f0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006f0c:	e7fd      	b.n	8006f0a <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8006f0e:	f8d9 1000 	ldr.w	r1, [r9]
 8006f12:	480d      	ldr	r0, [pc, #52]	; (8006f48 <httpd_cgi_handler+0x210>)
 8006f14:	f01e f85a 	bl	8024fcc <iprintf>
			break;
 8006f18:	e758      	b.n	8006dcc <httpd_cgi_handler+0x94>
 8006f1a:	bf00      	nop
 8006f1c:	0802b8cc 	.word	0x0802b8cc
 8006f20:	20000274 	.word	0x20000274
 8006f24:	200021b4 	.word	0x200021b4
 8006f28:	0802b1fc 	.word	0x0802b1fc
 8006f2c:	20000010 	.word	0x20000010
 8006f30:	20002d38 	.word	0x20002d38
 8006f34:	40021000 	.word	0x40021000
 8006f38:	40020c00 	.word	0x40020c00
 8006f3c:	0802b8f8 	.word	0x0802b8f8
 8006f40:	e000ed00 	.word	0xe000ed00
 8006f44:	05fa0004 	.word	0x05fa0004
 8006f48:	0802b930 	.word	0x0802b930
 8006f4c:	20002d34 	.word	0x20002d34
 8006f50:	0802b914 	.word	0x0802b914

08006f54 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8006f54:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8006f56:	4802      	ldr	r0, [pc, #8]	; (8006f60 <httpd_post_receive_data+0xc>)
 8006f58:	f01e f8d4 	bl	8025104 <puts>
}
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	bd08      	pop	{r3, pc}
 8006f60:	0802b950 	.word	0x0802b950

08006f64 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8006f64:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8006f66:	4802      	ldr	r0, [pc, #8]	; (8006f70 <httpd_post_begin+0xc>)
 8006f68:	f01e f8cc 	bl	8025104 <puts>
}
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bd08      	pop	{r3, pc}
 8006f70:	0802b96c 	.word	0x0802b96c

08006f74 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <httpd_post_finished+0x8>)
 8006f76:	f01e b8c5 	b.w	8025104 <puts>
 8006f7a:	bf00      	nop
 8006f7c:	0802b980 	.word	0x0802b980

08006f80 <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006f80:	4803      	ldr	r0, [pc, #12]	; (8006f90 <init_httpd_ssi+0x10>)
 8006f82:	2215      	movs	r2, #21
 8006f84:	4903      	ldr	r1, [pc, #12]	; (8006f94 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8006f86:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006f88:	f011 ff0e 	bl	8018da8 <http_set_ssi_handler>
}
 8006f8c:	bd08      	pop	{r3, pc}
 8006f8e:	bf00      	nop
 8006f90:	08006b9d 	.word	0x08006b9d
 8006f94:	20000280 	.word	0x20000280

08006f98 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8006f98:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8006f9a:	7804      	ldrb	r4, [r0, #0]
 8006f9c:	b194      	cbz	r4, 8006fc4 <parsep2+0x2c>
 8006f9e:	2c7d      	cmp	r4, #125	; 0x7d
 8006fa0:	d010      	beq.n	8006fc4 <parsep2+0x2c>
	j = 0;
 8006fa2:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8006fa6:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8006fa8:	f811 600e 	ldrb.w	r6, [r1, lr]
 8006fac:	f105 0c01 	add.w	ip, r5, #1
 8006fb0:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8006fb2:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8006fb6:	d008      	beq.n	8006fca <parsep2+0x32>
 8006fb8:	4665      	mov	r5, ip
			j = 0;
 8006fba:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8006fbe:	b10c      	cbz	r4, 8006fc4 <parsep2+0x2c>
 8006fc0:	2c7d      	cmp	r4, #125	; 0x7d
 8006fc2:	d1f1      	bne.n	8006fa8 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8006fca:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8006fcc:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8006fd0:	d001      	beq.n	8006fd6 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8006fd2:	4665      	mov	r5, ip
 8006fd4:	e7f3      	b.n	8006fbe <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8006fd6:	2a01      	cmp	r2, #1
				i++;
 8006fd8:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8006fdc:	d005      	beq.n	8006fea <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8006fde:	2a02      	cmp	r2, #2
 8006fe0:	d01b      	beq.n	800701a <parsep2+0x82>
				} else if (type == 3) { // uint32_t hex string
 8006fe2:	2a03      	cmp	r2, #3
 8006fe4:	d023      	beq.n	800702e <parsep2+0x96>
	while ((buf[i]) && (buf[i] != '}')) {
 8006fe6:	5d44      	ldrb	r4, [r0, r5]
 8006fe8:	e7e9      	b.n	8006fbe <parsep2+0x26>
					while ((buf[i]) && (isalnum(buf[i]))) {
 8006fea:	5d44      	ldrb	r4, [r0, r5]
 8006fec:	1941      	adds	r1, r0, r5
 8006fee:	b35c      	cbz	r4, 8007048 <parsep2+0xb0>
 8006ff0:	1e5d      	subs	r5, r3, #1
					j = 0;
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4e16      	ldr	r6, [pc, #88]	; (8007050 <parsep2+0xb8>)
 8006ff6:	e005      	b.n	8007004 <parsep2+0x6c>
						pch[j++] = buf[i++];
 8006ff8:	f805 4f01 	strb.w	r4, [r5, #1]!
 8006ffc:	3201      	adds	r2, #1
					while ((buf[i]) && (isalnum(buf[i]))) {
 8006ffe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007002:	b1f4      	cbz	r4, 8007042 <parsep2+0xaa>
 8007004:	5d30      	ldrb	r0, [r6, r4]
 8007006:	0740      	lsls	r0, r0, #29
 8007008:	d1f6      	bne.n	8006ff8 <parsep2+0x60>
					return ((j > 0) ? 0 : -1);
 800700a:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 800700e:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8007010:	0940      	lsrs	r0, r0, #5
 8007012:	4240      	negs	r0, r0
					pch[j] = 0;
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
}
 8007018:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 800701a:	461a      	mov	r2, r3
 800701c:	490d      	ldr	r1, [pc, #52]	; (8007054 <parsep2+0xbc>)
 800701e:	4428      	add	r0, r5
 8007020:	f01e f9e6 	bl	80253f0 <siscanf>
 8007024:	3801      	subs	r0, #1
 8007026:	bf18      	it	ne
 8007028:	f04f 30ff 	movne.w	r0, #4294967295
}
 800702c:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 800702e:	461a      	mov	r2, r3
 8007030:	4909      	ldr	r1, [pc, #36]	; (8007058 <parsep2+0xc0>)
 8007032:	4428      	add	r0, r5
 8007034:	f01e f9dc 	bl	80253f0 <siscanf>
 8007038:	3801      	subs	r0, #1
 800703a:	bf18      	it	ne
 800703c:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007040:	bd70      	pop	{r4, r5, r6, pc}
					pch[j] = 0;
 8007042:	4413      	add	r3, r2
 8007044:	4620      	mov	r0, r4
 8007046:	e7e5      	b.n	8007014 <parsep2+0x7c>
					while ((buf[i]) && (isalnum(buf[i]))) {
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e7e2      	b.n	8007014 <parsep2+0x7c>
 800704e:	bf00      	nop
 8007050:	08045505 	.word	0x08045505
 8007054:	0802b998 	.word	0x0802b998
 8007058:	0802b99c 	.word	0x0802b99c

0800705c <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800705c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800705e:	b0b9      	sub	sp, #228	; 0xe4
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8007060:	4c6e      	ldr	r4, [pc, #440]	; (800721c <returnpage+0x1c0>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8007062:	4696      	mov	lr, r2
 8007064:	f88d 001f 	strb.w	r0, [sp, #31]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8007068:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800706c:	f88d 101e 	strb.w	r1, [sp, #30]
 8007070:	f8ad 301c 	strh.w	r3, [sp, #28]
	volatile uint32_t sn;
	int nconv, res, res2;
	volatile int p1;
	volatile char p2[96];
	volatile char filename[32], s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	930d      	str	r3, [sp, #52]	; 0x34
 8007078:	930e      	str	r3, [sp, #56]	; 0x38

	if (errorm == 0) {
 800707a:	f89d 501e 	ldrb.w	r5, [sp, #30]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800707e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007080:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	f8cc 3000 	str.w	r3, [ip]
	if (errorm == 0) {
 800708a:	b10d      	cbz	r5, 8007090 <returnpage+0x34>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 800708c:	b039      	add	sp, #228	; 0xe4
 800708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8007090:	a920      	add	r1, sp, #128	; 0x80
 8007092:	aa0a      	add	r2, sp, #40	; 0x28
 8007094:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 8007098:	4b61      	ldr	r3, [pc, #388]	; (8007220 <returnpage+0x1c4>)
 800709a:	4670      	mov	r0, lr
		s1[0] = '\0';
 800709c:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
		nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 80070a0:	e9cd 2100 	strd	r2, r1, [sp]
 80070a4:	aa09      	add	r2, sp, #36	; 0x24
 80070a6:	495f      	ldr	r1, [pc, #380]	; (8007224 <returnpage+0x1c8>)
 80070a8:	f01e f9a2 	bl	80253f0 <siscanf>
		if (nconv != EOF) {
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d032      	beq.n	8007116 <returnpage+0xba>
			switch (nconv) {
 80070b0:	1e43      	subs	r3, r0, #1
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	f200 80ad 	bhi.w	8007212 <returnpage+0x1b6>
 80070b8:	e8df f003 	tbb	[pc, r3]
 80070bc:	0206111a 	.word	0x0206111a
				if (p2[0] == '{') {		// its the start of enclosed params
 80070c0:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 80070c4:	2b7b      	cmp	r3, #123	; 0x7b
 80070c6:	d03c      	beq.n	8007142 <returnpage+0xe6>
				if (p1 == 1) {		// reboot
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	f000 8096 	beq.w	80071fc <returnpage+0x1a0>
				if (p1 == 2) {		// freeze the UDP streaming
 80070d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d2:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 80070d4:	4b54      	ldr	r3, [pc, #336]	; (8007228 <returnpage+0x1cc>)
				if (p1 == 2) {		// freeze the UDP streaming
 80070d6:	f000 808b 	beq.w	80071f0 <returnpage+0x194>
					globalfreeze = 0;
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 80070de:	4850      	ldr	r0, [pc, #320]	; (8007220 <returnpage+0x1c4>)
 80070e0:	f7f9 f8b8 	bl	8000254 <strlen>
 80070e4:	2806      	cmp	r0, #6
 80070e6:	d925      	bls.n	8007134 <returnpage+0xd8>
				printf("Server -> Target UDP host: %s\n", udp_target);
 80070e8:	494d      	ldr	r1, [pc, #308]	; (8007220 <returnpage+0x1c4>)
 80070ea:	4850      	ldr	r0, [pc, #320]	; (800722c <returnpage+0x1d0>)
 80070ec:	f01d ff6e 	bl	8024fcc <iprintf>
				if (statuspkt.uid != sn) {
 80070f0:	4a4f      	ldr	r2, [pc, #316]	; (8007230 <returnpage+0x1d4>)
 80070f2:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 80070f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	428b      	cmp	r3, r1
 80070fc:	d0c6      	beq.n	800708c <returnpage+0x30>
					statuspkt.uid = sn;
 80070fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007100:	484c      	ldr	r0, [pc, #304]	; (8007234 <returnpage+0x1d8>)
					statuspkt.uid = sn;
 8007102:	b29b      	uxth	r3, r3
 8007104:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007108:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800710c:	b289      	uxth	r1, r1
 800710e:	f01d ff5d 	bl	8024fcc <iprintf>
}
 8007112:	b039      	add	sp, #228	; 0xe4
 8007114:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8007116:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800711a:	ac38      	add	r4, sp, #224	; 0xe0
 800711c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8007120:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8007124:	4844      	ldr	r0, [pc, #272]	; (8007238 <returnpage+0x1dc>)
 8007126:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800712a:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800712e:	f01d ff4d 	bl	8024fcc <iprintf>
}
 8007132:	e7ab      	b.n	800708c <returnpage+0x30>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8007134:	4d41      	ldr	r5, [pc, #260]	; (800723c <returnpage+0x1e0>)
 8007136:	4c3a      	ldr	r4, [pc, #232]	; (8007220 <returnpage+0x1c4>)
 8007138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800713a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	e7d2      	b.n	80070e8 <returnpage+0x8c>
					res |= parsep2(&p2[1], "fw", 1, filename);
 8007142:	2201      	movs	r2, #1
 8007144:	493e      	ldr	r1, [pc, #248]	; (8007240 <returnpage+0x1e4>)
 8007146:	ab18      	add	r3, sp, #96	; 0x60
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007148:	4f3e      	ldr	r7, [pc, #248]	; (8007244 <returnpage+0x1e8>)
					res |= parsep2(&p2[1], "fw", 1, filename);
 800714a:	f10d 0081 	add.w	r0, sp, #129	; 0x81
					res2 |= parsep2(&p2[1], "s1", 1, s1);
 800714e:	ad0f      	add	r5, sp, #60	; 0x3c
					res |= parsep2(&p2[1], "fw", 1, filename);
 8007150:	f7ff ff22 	bl	8006f98 <parsep2>
 8007154:	4604      	mov	r4, r0
					res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007156:	463b      	mov	r3, r7
 8007158:	2202      	movs	r2, #2
 800715a:	493b      	ldr	r1, [pc, #236]	; (8007248 <returnpage+0x1ec>)
 800715c:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 8007160:	f7ff ff1a 	bl	8006f98 <parsep2>
 8007164:	4304      	orrs	r4, r0
					res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007166:	ab0b      	add	r3, sp, #44	; 0x2c
 8007168:	2203      	movs	r2, #3
 800716a:	4938      	ldr	r1, [pc, #224]	; (800724c <returnpage+0x1f0>)
 800716c:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 8007170:	f7ff ff12 	bl	8006f98 <parsep2>
 8007174:	4304      	orrs	r4, r0
					res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007176:	ab0c      	add	r3, sp, #48	; 0x30
 8007178:	2203      	movs	r2, #3
 800717a:	4935      	ldr	r1, [pc, #212]	; (8007250 <returnpage+0x1f4>)
 800717c:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 8007180:	f7ff ff0a 	bl	8006f98 <parsep2>
					res2 |= parsep2(&p2[1], "n1", 3, &n1);
 8007184:	ab0d      	add	r3, sp, #52	; 0x34
					res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007186:	4304      	orrs	r4, r0
					res2 |= parsep2(&p2[1], "n1", 3, &n1);
 8007188:	2203      	movs	r2, #3
 800718a:	4932      	ldr	r1, [pc, #200]	; (8007254 <returnpage+0x1f8>)
 800718c:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 8007190:	f7ff ff02 	bl	8006f98 <parsep2>
					res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007194:	ab0e      	add	r3, sp, #56	; 0x38
 8007196:	2203      	movs	r2, #3
 8007198:	492f      	ldr	r1, [pc, #188]	; (8007258 <returnpage+0x1fc>)
 800719a:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 800719e:	f7ff fefb 	bl	8006f98 <parsep2>
					res2 |= parsep2(&p2[1], "s1", 1, s1);
 80071a2:	462b      	mov	r3, r5
 80071a4:	2201      	movs	r2, #1
 80071a6:	492d      	ldr	r1, [pc, #180]	; (800725c <returnpage+0x200>)
 80071a8:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 80071ac:	f7ff fef4 	bl	8006f98 <parsep2>
					printf("server filename=%s, build=%d, crc1=0x%08x, crc2=0x%08x, n1=0x%x, n2=0x%x, s1='%s', res=%d\n", filename,
 80071b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071b6:	9200      	str	r2, [sp, #0]
 80071b8:	9101      	str	r1, [sp, #4]
 80071ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	9102      	str	r1, [sp, #8]
 80071c0:	a918      	add	r1, sp, #96	; 0x60
 80071c2:	4827      	ldr	r0, [pc, #156]	; (8007260 <returnpage+0x204>)
 80071c4:	9503      	str	r5, [sp, #12]
 80071c6:	9404      	str	r4, [sp, #16]
 80071c8:	f01d ff00 	bl	8024fcc <iprintf>
					if (!(res)) {		// a valid firmware string received
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	f47f af7b 	bne.w	80070c8 <returnpage+0x6c>
						if (newbuild != BUILDNO) {	// the version advertised is different to this one running now
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	f242 712b 	movw	r1, #10027	; 0x272b
 80071d8:	428a      	cmp	r2, r1
 80071da:	f43f af75 	beq.w	80070c8 <returnpage+0x6c>
							printf("Firmware: this build is %d, the server build is %d\n",
 80071de:	4821      	ldr	r0, [pc, #132]	; (8007264 <returnpage+0x208>)
 80071e0:	f01d fef4 	bl	8024fcc <iprintf>
							tftloader(filename, crc1, crc2);
 80071e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071e6:	a818      	add	r0, sp, #96	; 0x60
 80071e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071ea:	f000 fd8f 	bl	8007d0c <tftloader>
 80071ee:	e76b      	b.n	80070c8 <returnpage+0x6c>
					globalfreeze = 1;
 80071f0:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 80071f2:	481d      	ldr	r0, [pc, #116]	; (8007268 <returnpage+0x20c>)
					globalfreeze = 1;
 80071f4:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 80071f6:	f01d ff85 	bl	8025104 <puts>
 80071fa:	e770      	b.n	80070de <returnpage+0x82>
					printf("Server -> commands a reboot...\n");
 80071fc:	481b      	ldr	r0, [pc, #108]	; (800726c <returnpage+0x210>)
 80071fe:	f01d ff81 	bl	8025104 <puts>
					osDelay(2000);
 8007202:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007206:	f00d ff71 	bl	80150ec <osDelay>
					rebootme(6);
 800720a:	2006      	movs	r0, #6
 800720c:	f7fb fa5a 	bl	80026c4 <rebootme>
 8007210:	e75e      	b.n	80070d0 <returnpage+0x74>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8007212:	4601      	mov	r1, r0
 8007214:	4816      	ldr	r0, [pc, #88]	; (8007270 <returnpage+0x214>)
 8007216:	f01d fed9 	bl	8024fcc <iprintf>
				break;
 800721a:	e737      	b.n	800708c <returnpage+0x30>
 800721c:	080291f4 	.word	0x080291f4
 8007220:	20002e18 	.word	0x20002e18
 8007224:	0802b9a0 	.word	0x0802b9a0
 8007228:	20002dac 	.word	0x20002dac
 800722c:	0802babc 	.word	0x0802babc
 8007230:	20002c04 	.word	0x20002c04
 8007234:	0802badc 	.word	0x0802badc
 8007238:	0802bb28 	.word	0x0802bb28
 800723c:	0802baa8 	.word	0x0802baa8
 8007240:	0802b9ac 	.word	0x0802b9ac
 8007244:	20002a08 	.word	0x20002a08
 8007248:	0802b9b0 	.word	0x0802b9b0
 800724c:	0802b9b4 	.word	0x0802b9b4
 8007250:	0802b9bc 	.word	0x0802b9bc
 8007254:	0802b9c4 	.word	0x0802b9c4
 8007258:	0802b9c8 	.word	0x0802b9c8
 800725c:	0802b9cc 	.word	0x0802b9cc
 8007260:	0802b9d0 	.word	0x0802b9d0
 8007264:	0802ba2c 	.word	0x0802ba2c
 8007268:	0802ba80 	.word	0x0802ba80
 800726c:	0802ba60 	.word	0x0802ba60
 8007270:	0802bafc 	.word	0x0802bafc

08007274 <httpclient>:

void httpclient(char Page[64]) {
 8007274:	b530      	push	{r4, r5, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8007276:	4911      	ldr	r1, [pc, #68]	; (80072bc <httpclient+0x48>)
void httpclient(char Page[64]) {
 8007278:	b085      	sub	sp, #20
 800727a:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 800727c:	4810      	ldr	r0, [pc, #64]	; (80072c0 <httpclient+0x4c>)
 800727e:	f7ff faf3 	bl	8006868 <dnslookup>
	if (err != ERR_OK)
 8007282:	b9b0      	cbnz	r0, 80072b2 <httpclient+0x3e>
		rebootme(7);
	ip = remoteip.addr;
 8007284:	4d0d      	ldr	r5, [pc, #52]	; (80072bc <httpclient+0x48>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8007286:	480f      	ldr	r0, [pc, #60]	; (80072c4 <httpclient+0x50>)
	ip = remoteip.addr;
 8007288:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800728a:	0e11      	lsrs	r1, r2, #24
 800728c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007290:	e9cd 3100 	strd	r3, r1, [sp]
 8007294:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <httpclient+0x4c>)
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	f01d fe96 	bl	8024fcc <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <httpclient+0x54>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	4621      	mov	r1, r4
 80072a6:	6828      	ldr	r0, [r5, #0]
 80072a8:	f7f9 ff72 	bl	8001190 <hc_open>
 80072ac:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 80072ae:	b005      	add	sp, #20
 80072b0:	bd30      	pop	{r4, r5, pc}
		rebootme(7);
 80072b2:	2007      	movs	r0, #7
 80072b4:	f7fb fa06 	bl	80026c4 <rebootme>
 80072b8:	e7e4      	b.n	8007284 <httpclient+0x10>
 80072ba:	bf00      	nop
 80072bc:	20002dd4 	.word	0x20002dd4
 80072c0:	0802baa8 	.word	0x0802baa8
 80072c4:	0802bb64 	.word	0x0802bb64
 80072c8:	0800705d 	.word	0x0800705d

080072cc <initialapisn>:
	httpclient(stmuid);		// get sn and targ
}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 80072cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80072d0:	4e27      	ldr	r6, [pc, #156]	; (8007370 <initialapisn+0xa4>)
 80072d2:	f242 722b 	movw	r2, #10027	; 0x272b
void initialapisn() {
 80072d6:	b083      	sub	sp, #12
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80072d8:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4293      	cmp	r3, r2
 80072e0:	d142      	bne.n	8007368 <initialapisn+0x9c>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80072e2:	4d24      	ldr	r5, [pc, #144]	; (8007374 <initialapisn+0xa8>)
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80072e4:	2101      	movs	r1, #1
 80072e6:	4824      	ldr	r0, [pc, #144]	; (8007378 <initialapisn+0xac>)
		apisn();
		osDelay(5000);

		i++;
 80072e8:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80072ea:	f01d fe6f 	bl	8024fcc <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80072ee:	f8d5 1428 	ldr.w	r1, [r5, #1064]	; 0x428
 80072f2:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 80072f6:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 80072fa:	4820      	ldr	r0, [pc, #128]	; (800737c <initialapisn+0xb0>)
 80072fc:	9100      	str	r1, [sp, #0]
 80072fe:	4920      	ldr	r1, [pc, #128]	; (8007380 <initialapisn+0xb4>)
 8007300:	f01e f856 	bl	80253b0 <siprintf>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8007304:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007378 <initialapisn+0xac>
	httpclient(stmuid);		// get sn and targ
 8007308:	481c      	ldr	r0, [pc, #112]	; (800737c <initialapisn+0xb0>)
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800730a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007380 <initialapisn+0xb4>
	httpclient(stmuid);		// get sn and targ
 800730e:	f7ff ffb1 	bl	8007274 <httpclient>
		osDelay(5000);
 8007312:	f241 3088 	movw	r0, #5000	; 0x1388
 8007316:	f00d fee9 	bl	80150ec <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800731a:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 800731e:	f242 722b 	movw	r2, #10027	; 0x272b
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8007322:	4621      	mov	r1, r4
 8007324:	4648      	mov	r0, r9
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8007326:	b29b      	uxth	r3, r3
		i++;
 8007328:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800732a:	4293      	cmp	r3, r2
 800732c:	d11c      	bne.n	8007368 <initialapisn+0x9c>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800732e:	f01d fe4d 	bl	8024fcc <iprintf>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007332:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
 8007336:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 800733a:	4641      	mov	r1, r8
 800733c:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 8007340:	480e      	ldr	r0, [pc, #56]	; (800737c <initialapisn+0xb0>)
 8007342:	9700      	str	r7, [sp, #0]
 8007344:	f01e f834 	bl	80253b0 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8007348:	480c      	ldr	r0, [pc, #48]	; (800737c <initialapisn+0xb0>)
 800734a:	f7ff ff93 	bl	8007274 <httpclient>
		osDelay(5000);
 800734e:	f241 3088 	movw	r0, #5000	; 0x1388
 8007352:	f00d fecb 	bl	80150ec <osDelay>
		if (i > 10) {
 8007356:	2c0a      	cmp	r4, #10
 8007358:	dddf      	ble.n	800731a <initialapisn+0x4e>
			printf("************* ABORTED **************\n");
 800735a:	480a      	ldr	r0, [pc, #40]	; (8007384 <initialapisn+0xb8>)
 800735c:	f01d fed2 	bl	8025104 <puts>
			rebootme(8);
 8007360:	2008      	movs	r0, #8
 8007362:	f7fb f9af 	bl	80026c4 <rebootme>
 8007366:	e7d8      	b.n	800731a <initialapisn+0x4e>
		}
	}
}
 8007368:	b003      	add	sp, #12
 800736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800736e:	bf00      	nop
 8007370:	20002c04 	.word	0x20002c04
 8007374:	1ff0f000 	.word	0x1ff0f000
 8007378:	0802bba4 	.word	0x0802bba4
 800737c:	20002dd8 	.word	0x20002dd8
 8007380:	0802bb8c 	.word	0x0802bb8c
 8007384:	0802bbd4 	.word	0x0802bbd4

08007388 <requestapisn>:

void requestapisn() {
 8007388:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 800738a:	4804      	ldr	r0, [pc, #16]	; (800739c <requestapisn+0x14>)
 800738c:	f01d feba 	bl	8025104 <puts>
	httpclient(stmuid);		// get sn and targ
 8007390:	4803      	ldr	r0, [pc, #12]	; (80073a0 <requestapisn+0x18>)
}
 8007392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 8007396:	f7ff bf6d 	b.w	8007274 <httpclient>
 800739a:	bf00      	nop
 800739c:	0802bbfc 	.word	0x0802bbfc
 80073a0:	20002dd8 	.word	0x20002dd8

080073a4 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 80073a4:	b538      	push	{r3, r4, r5, lr}
  tftp_state.port = 0;
 80073a6:	4c0a      	ldr	r4, [pc, #40]	; (80073d0 <close_handle+0x2c>)
 80073a8:	2500      	movs	r5, #0
  ip_addr_set_any(0, &tftp_state.addr);

  if (tftp_state.last_data != NULL) {
 80073aa:	68a0      	ldr	r0, [r4, #8]
  tftp_state.port = 0;
 80073ac:	82a5      	strh	r5, [r4, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 80073ae:	6125      	str	r5, [r4, #16]
  if (tftp_state.last_data != NULL) {
 80073b0:	b110      	cbz	r0, 80073b8 <close_handle+0x14>
    pbuf_free(tftp_state.last_data);
 80073b2:	f013 fd51 	bl	801ae58 <pbuf_free>
    tftp_state.last_data = NULL;
 80073b6:	60a5      	str	r5, [r4, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 80073b8:	4806      	ldr	r0, [pc, #24]	; (80073d4 <close_handle+0x30>)
 80073ba:	2100      	movs	r1, #0
 80073bc:	f018 fa8c 	bl	801f8d8 <sys_untimeout>

  if (tftp_state.handle) {
 80073c0:	6860      	ldr	r0, [r4, #4]
 80073c2:	b120      	cbz	r0, 80073ce <close_handle+0x2a>
    tftp_state.ctx->close(tftp_state.handle);
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4798      	blx	r3
    tftp_state.handle = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	6063      	str	r3, [r4, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	20002e58 	.word	0x20002e58
 80073d4:	080074ad 	.word	0x080074ad

080073d8 <send_request>:
  return p;
}

static err_t
send_request(const ip_addr_t *addr, u16_t port, u16_t opcode, const char* fname, const char* mode)
{
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4680      	mov	r8, r0
 80073de:	b083      	sub	sp, #12
  size_t fname_length = strlen(fname)+1;
 80073e0:	4618      	mov	r0, r3
{
 80073e2:	4689      	mov	r9, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	469a      	mov	sl, r3
  size_t fname_length = strlen(fname)+1;
 80073e8:	f7f8 ff34 	bl	8000254 <strlen>
 80073ec:	4605      	mov	r5, r0
  size_t mode_length = strlen(mode)+1;
 80073ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073f0:	f7f8 ff30 	bl	8000254 <strlen>
  size_t fname_length = strlen(fname)+1;
 80073f4:	f105 0b01 	add.w	fp, r5, #1
  size_t mode_length = strlen(mode)+1;
 80073f8:	1c47      	adds	r7, r0, #1
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80073fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80073fe:	2036      	movs	r0, #54	; 0x36
  struct pbuf* p = init_packet(opcode, 0, fname_length + mode_length - 2);
 8007400:	eb0b 0107 	add.w	r1, fp, r7
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007404:	3102      	adds	r1, #2
 8007406:	b289      	uxth	r1, r1
 8007408:	f013 fb70 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 800740c:	b328      	cbz	r0, 800745a <send_request+0x82>
    payload = (u16_t*) p->payload;
 800740e:	6842      	ldr	r2, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 8007410:	0236      	lsls	r6, r6, #8
 8007412:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 8007414:	2000      	movs	r0, #0
    payload[0] = PP_HTONS(opcode);
 8007416:	8016      	strh	r6, [r2, #0]
 8007418:	9201      	str	r2, [sp, #4]
    payload[1] = lwip_htons(extra);
 800741a:	f011 fcfd 	bl	8018e18 <lwip_htons>

  if (p == NULL) {
    return ERR_MEM;
  }

  payload = (char*) p->payload;
 800741e:	6866      	ldr	r6, [r4, #4]
  MEMCPY(payload+2,              fname, fname_length);
 8007420:	4651      	mov	r1, sl
    payload[1] = lwip_htons(extra);
 8007422:	9a01      	ldr	r2, [sp, #4]
 8007424:	8050      	strh	r0, [r2, #2]
  MEMCPY(payload+2,              fname, fname_length);
 8007426:	465a      	mov	r2, fp
 8007428:	1cb0      	adds	r0, r6, #2
 800742a:	f01c fe0b 	bl	8024044 <memcpy>
  MEMCPY(payload+2+fname_length, mode,  mode_length);
 800742e:	1ce8      	adds	r0, r5, #3
 8007430:	463a      	mov	r2, r7
 8007432:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007434:	4430      	add	r0, r6
 8007436:	f01c fe05 	bl	8024044 <memcpy>

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 800743a:	480b      	ldr	r0, [pc, #44]	; (8007468 <send_request+0x90>)
 800743c:	4621      	mov	r1, r4
 800743e:	464b      	mov	r3, r9
 8007440:	4642      	mov	r2, r8
 8007442:	68c0      	ldr	r0, [r0, #12]
 8007444:	f018 fd2e 	bl	801fea4 <udp_sendto>
 8007448:	4603      	mov	r3, r0
  pbuf_free(p);
 800744a:	4620      	mov	r0, r4
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 800744c:	461c      	mov	r4, r3
  pbuf_free(p);
 800744e:	f013 fd03 	bl	801ae58 <pbuf_free>
  return ret;
}
 8007452:	4620      	mov	r0, r4
 8007454:	b003      	add	sp, #12
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_MEM;
 800745a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800745e:	4620      	mov	r0, r4
 8007460:	b003      	add	sp, #12
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	bf00      	nop
 8007468:	20002e58 	.word	0x20002e58

0800746c <resend_data.isra.0>:
  pbuf_free(p);
  return ret;
}

static err_t
resend_data(const ip_addr_t *addr, u16_t port)
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
  err_t ret;
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 800746e:	4f0e      	ldr	r7, [pc, #56]	; (80074a8 <resend_data.isra.0+0x3c>)
resend_data(const ip_addr_t *addr, u16_t port)
 8007470:	4605      	mov	r5, r0
 8007472:	460e      	mov	r6, r1
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8007474:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2036      	movs	r0, #54	; 0x36
 800747c:	8959      	ldrh	r1, [r3, #10]
 800747e:	f013 fb35 	bl	801aaec <pbuf_alloc>
  if (p == NULL) {
 8007482:	b178      	cbz	r0, 80074a4 <resend_data.isra.0+0x38>
    return ERR_MEM;
  }

  ret = pbuf_copy(p, tftp_state.last_data);
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	4604      	mov	r4, r0
 8007488:	f013 fd6e 	bl	801af68 <pbuf_copy>
  if (ret != ERR_OK) {
 800748c:	b928      	cbnz	r0, 800749a <resend_data.isra.0+0x2e>
    pbuf_free(p);
    return ret;
  }

  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 800748e:	4633      	mov	r3, r6
 8007490:	462a      	mov	r2, r5
 8007492:	4621      	mov	r1, r4
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f018 fd05 	bl	801fea4 <udp_sendto>
  pbuf_free(p);
 800749a:	4620      	mov	r0, r4
  return ret;
}
 800749c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_free(p);
 80074a0:	f013 bcda 	b.w	801ae58 <pbuf_free>
}
 80074a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20002e58 	.word	0x20002e58

080074ac <tftp_tmr>:
  pbuf_free(p);
}

static void
tftp_tmr(void *arg)
{
 80074ac:	b510      	push	{r4, lr}
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 80074ae:	4c13      	ldr	r4, [pc, #76]	; (80074fc <tftp_tmr+0x50>)
 80074b0:	69a3      	ldr	r3, [r4, #24]

  if (tftp_state.handle == NULL) {
 80074b2:	6862      	ldr	r2, [r4, #4]
  tftp_state.timer++;
 80074b4:	3301      	adds	r3, #1
 80074b6:	61a3      	str	r3, [r4, #24]
  if (tftp_state.handle == NULL) {
 80074b8:	b1f2      	cbz	r2, 80074f8 <tftp_tmr+0x4c>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 80074ba:	2200      	movs	r2, #0
 80074bc:	4910      	ldr	r1, [pc, #64]	; (8007500 <tftp_tmr+0x54>)
 80074be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074c2:	f018 f9eb 	bl	801f89c <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 80074c6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	2b0a      	cmp	r3, #10
 80074ce:	dd13      	ble.n	80074f8 <tftp_tmr+0x4c>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	b11b      	cbz	r3, 80074dc <tftp_tmr+0x30>
 80074d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d903      	bls.n	80074e4 <tftp_tmr+0x38>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
    }
  }
}
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      close_handle();
 80074e0:	f7ff bf60 	b.w	80073a4 <close_handle>
      resend_data(&tftp_state.addr, tftp_state.port);
 80074e4:	8aa1      	ldrh	r1, [r4, #20]
 80074e6:	f104 0010 	add.w	r0, r4, #16
 80074ea:	f7ff ffbf 	bl	800746c <resend_data.isra.0>
      tftp_state.retries++;
 80074ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80074f2:	3301      	adds	r3, #1
 80074f4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	20002e58 	.word	0x20002e58
 8007500:	080074ad 	.word	0x080074ad

08007504 <send_ack.isra.0>:
send_ack(const ip_addr_t *addr, u16_t port, u16_t blknum)
 8007504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007508:	460f      	mov	r7, r1
 800750a:	4615      	mov	r5, r2
 800750c:	4680      	mov	r8, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 800750e:	2104      	movs	r1, #4
 8007510:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007514:	2036      	movs	r0, #54	; 0x36
 8007516:	f013 fae9 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 800751a:	b1a0      	cbz	r0, 8007546 <send_ack.isra.0+0x42>
    payload = (u16_t*) p->payload;
 800751c:	6846      	ldr	r6, [r0, #4]
    payload[0] = PP_HTONS(opcode);
 800751e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007522:	4604      	mov	r4, r0
    payload[1] = lwip_htons(extra);
 8007524:	4628      	mov	r0, r5
    payload[0] = PP_HTONS(opcode);
 8007526:	8033      	strh	r3, [r6, #0]
    payload[1] = lwip_htons(extra);
 8007528:	f011 fc76 	bl	8018e18 <lwip_htons>
 800752c:	8070      	strh	r0, [r6, #2]
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 800752e:	4807      	ldr	r0, [pc, #28]	; (800754c <send_ack.isra.0+0x48>)
 8007530:	463b      	mov	r3, r7
 8007532:	4642      	mov	r2, r8
 8007534:	4621      	mov	r1, r4
 8007536:	68c0      	ldr	r0, [r0, #12]
 8007538:	f018 fcb4 	bl	801fea4 <udp_sendto>
  pbuf_free(p);
 800753c:	4620      	mov	r0, r4
}
 800753e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  pbuf_free(p);
 8007542:	f013 bc89 	b.w	801ae58 <pbuf_free>
}
 8007546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754a:	bf00      	nop
 800754c:	20002e58 	.word	0x20002e58

08007550 <send_error.isra.0>:
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4606      	mov	r6, r0
  int str_length = strlen(str);
 8007556:	4618      	mov	r0, r3
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
 8007558:	460f      	mov	r7, r1
 800755a:	4690      	mov	r8, r2
 800755c:	461d      	mov	r5, r3
  int str_length = strlen(str);
 800755e:	f7f8 fe79 	bl	8000254 <strlen>
 8007562:	4604      	mov	r4, r0
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 8007564:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007568:	2036      	movs	r0, #54	; 0x36
 800756a:	1d61      	adds	r1, r4, #5
 800756c:	b289      	uxth	r1, r1
 800756e:	f013 fabd 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 8007572:	b308      	cbz	r0, 80075b8 <send_error.isra.0+0x68>
    payload = (u16_t*) p->payload;
 8007574:	f104 0901 	add.w	r9, r4, #1
 8007578:	fa1f f888 	uxth.w	r8, r8
 800757c:	4604      	mov	r4, r0
    payload[0] = PP_HTONS(opcode);
 800757e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    payload[1] = lwip_htons(extra);
 8007582:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 8007584:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 8007588:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 800758c:	f011 fc44 	bl	8018e18 <lwip_htons>
 8007590:	f8a8 0002 	strh.w	r0, [r8, #2]
  MEMCPY(&payload[2], str, str_length + 1);
 8007594:	6860      	ldr	r0, [r4, #4]
 8007596:	464a      	mov	r2, r9
 8007598:	4629      	mov	r1, r5
 800759a:	3004      	adds	r0, #4
 800759c:	f01c fd52 	bl	8024044 <memcpy>
  ret = udp_sendto(tftp_state.upcb, p, addr, port);
 80075a0:	4806      	ldr	r0, [pc, #24]	; (80075bc <send_error.isra.0+0x6c>)
 80075a2:	463b      	mov	r3, r7
 80075a4:	4632      	mov	r2, r6
 80075a6:	4621      	mov	r1, r4
 80075a8:	68c0      	ldr	r0, [r0, #12]
 80075aa:	f018 fc7b 	bl	801fea4 <udp_sendto>
  pbuf_free(p);
 80075ae:	4620      	mov	r0, r4
}
 80075b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80075b4:	f013 bc50 	b.w	801ae58 <pbuf_free>
}
 80075b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075bc:	20002e58 	.word	0x20002e58

080075c0 <send_data>:
{
 80075c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (tftp_state.last_data != NULL) {
 80075c4:	4d20      	ldr	r5, [pc, #128]	; (8007648 <send_data+0x88>)
{
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
  if (tftp_state.last_data != NULL) {
 80075ca:	68ab      	ldr	r3, [r5, #8]
 80075cc:	b113      	cbz	r3, 80075d4 <send_data+0x14>
    pbuf_free(tftp_state.last_data);
 80075ce:	4618      	mov	r0, r3
 80075d0:	f013 fc42 	bl	801ae58 <pbuf_free>
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80075d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80075d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80075dc:	2036      	movs	r0, #54	; 0x36
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 80075de:	f8b5 8020 	ldrh.w	r8, [r5, #32]
  struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + size), PBUF_RAM);
 80075e2:	f013 fa83 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 80075e6:	4604      	mov	r4, r0
 80075e8:	b350      	cbz	r0, 8007640 <send_data+0x80>
    payload[0] = PP_HTONS(opcode);
 80075ea:	f44f 7340 	mov.w	r3, #768	; 0x300
    payload[1] = lwip_htons(extra);
 80075ee:	4640      	mov	r0, r8
    payload = (u16_t*) p->payload;
 80075f0:	f8d4 8004 	ldr.w	r8, [r4, #4]
    payload[0] = PP_HTONS(opcode);
 80075f4:	f8a8 3000 	strh.w	r3, [r8]
    payload[1] = lwip_htons(extra);
 80075f8:	f011 fc0e 	bl	8018e18 <lwip_htons>
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	f44f 7200 	mov.w	r2, #512	; 0x200
    payload[1] = lwip_htons(extra);
 8007604:	f8a8 0002 	strh.w	r0, [r8, #2]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8007608:	3104      	adds	r1, #4
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	6868      	ldr	r0, [r5, #4]
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 800760e:	60ac      	str	r4, [r5, #8]
  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8007610:	4798      	blx	r3
  if (ret < 0) {
 8007612:	1e03      	subs	r3, r0, #0
 8007614:	db0a      	blt.n	800762c <send_data+0x6c>
  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 8007616:	3304      	adds	r3, #4
 8007618:	68a8      	ldr	r0, [r5, #8]
 800761a:	b299      	uxth	r1, r3
 800761c:	f013 fb20 	bl	801ac60 <pbuf_realloc>
  resend_data(addr, port);
 8007620:	4639      	mov	r1, r7
 8007622:	4630      	mov	r0, r6
}
 8007624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  resend_data(addr, port);
 8007628:	f7ff bf20 	b.w	800746c <resend_data.isra.0>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 800762c:	4639      	mov	r1, r7
 800762e:	4630      	mov	r0, r6
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <send_data+0x8c>)
 8007632:	2202      	movs	r2, #2
 8007634:	f7ff ff8c 	bl	8007550 <send_error.isra.0>
}
 8007638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    close_handle();
 800763c:	f7ff beb2 	b.w	80073a4 <close_handle>
  tftp_state.last_data = init_packet(TFTP_DATA, tftp_state.blknum, TFTP_MAX_PAYLOAD_SIZE);
 8007640:	60a8      	str	r0, [r5, #8]
}
 8007642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007646:	bf00      	nop
 8007648:	20002e58 	.word	0x20002e58
 800764c:	0802bc24 	.word	0x0802bc24

08007650 <tftp_recv>:
{
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8007654:	4c9b      	ldr	r4, [pc, #620]	; (80078c4 <tftp_recv+0x274>)
{
 8007656:	b08c      	sub	sp, #48	; 0x30
 8007658:	4615      	mov	r5, r2
 800765a:	461e      	mov	r6, r3
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800765c:	8aa1      	ldrh	r1, [r4, #20]
{
 800765e:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8007662:	b109      	cbz	r1, 8007668 <tftp_recv+0x18>
 8007664:	4541      	cmp	r1, r8
 8007666:	d104      	bne.n	8007672 <tftp_recv+0x22>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8007668:	6923      	ldr	r3, [r4, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800766a:	b173      	cbz	r3, 800768a <tftp_recv+0x3a>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800766c:	6832      	ldr	r2, [r6, #0]
 800766e:	4293      	cmp	r3, r2
 8007670:	d00b      	beq.n	800768a <tftp_recv+0x3a>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8007672:	4b95      	ldr	r3, [pc, #596]	; (80078c8 <tftp_recv+0x278>)
 8007674:	2202      	movs	r2, #2
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8007676:	4641      	mov	r1, r8
 8007678:	4630      	mov	r0, r6
 800767a:	f7ff ff69 	bl	8007550 <send_error.isra.0>
  pbuf_free(p);
 800767e:	4628      	mov	r0, r5
}
 8007680:	b00c      	add	sp, #48	; 0x30
 8007682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8007686:	f013 bbe7 	b.w	801ae58 <pbuf_free>
  u16_t *sbuf = (u16_t *) p->payload;
 800768a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  tftp_state.retries = 0;
 800768e:	2300      	movs	r3, #0
  tftp_state.last_pkt = tftp_state.timer;
 8007690:	69a2      	ldr	r2, [r4, #24]
  opcode = sbuf[0];
 8007692:	f8b9 7000 	ldrh.w	r7, [r9]
  tftp_state.last_pkt = tftp_state.timer;
 8007696:	61e2      	str	r2, [r4, #28]
  switch (opcode) {
 8007698:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
  tftp_state.retries = 0;
 800769c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  switch (opcode) {
 80076a0:	d03f      	beq.n	8007722 <tftp_recv+0xd2>
 80076a2:	d818      	bhi.n	80076d6 <tftp_recv+0x86>
 80076a4:	f5b7 7f40 	cmp.w	r7, #768	; 0x300
 80076a8:	d02d      	beq.n	8007706 <tftp_recv+0xb6>
 80076aa:	d829      	bhi.n	8007700 <tftp_recv+0xb0>
 80076ac:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80076b0:	d002      	beq.n	80076b8 <tftp_recv+0x68>
 80076b2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80076b6:	d123      	bne.n	8007700 <tftp_recv+0xb0>
      const char tftp_null = 0;
 80076b8:	2300      	movs	r3, #0
      if (tftp_state.handle != NULL) {
 80076ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
      const char tftp_null = 0;
 80076be:	f88d 300b 	strb.w	r3, [sp, #11]
      if (tftp_state.handle != NULL) {
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	d046      	beq.n	8007756 <tftp_recv+0x106>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 80076c8:	4b7f      	ldr	r3, [pc, #508]	; (80078c8 <tftp_recv+0x278>)
 80076ca:	2202      	movs	r2, #2
 80076cc:	4641      	mov	r1, r8
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7ff ff3e 	bl	8007550 <send_error.isra.0>
        break;
 80076d4:	e7d3      	b.n	800767e <tftp_recv+0x2e>
  switch (opcode) {
 80076d6:	f5b7 6fa0 	cmp.w	r7, #1280	; 0x500
 80076da:	d111      	bne.n	8007700 <tftp_recv+0xb0>
      if (tftp_state.handle != NULL) {
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0cd      	beq.n	800767e <tftp_recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 80076e2:	2104      	movs	r1, #4
 80076e4:	4628      	mov	r0, r5
 80076e6:	f013 fb47 	bl	801ad78 <pbuf_remove_header>
        tftp_state.ctx->error(tftp_state.handle, sbuf[1], (const char*)p->payload, p->len);
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	6860      	ldr	r0, [r4, #4]
 80076ee:	896b      	ldrh	r3, [r5, #10]
 80076f0:	6914      	ldr	r4, [r2, #16]
 80076f2:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 80076f6:	686a      	ldr	r2, [r5, #4]
 80076f8:	47a0      	blx	r4
        close_handle();
 80076fa:	f7ff fe53 	bl	80073a4 <close_handle>
 80076fe:	e7be      	b.n	800767e <tftp_recv+0x2e>
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8007700:	4b72      	ldr	r3, [pc, #456]	; (80078cc <tftp_recv+0x27c>)
 8007702:	2204      	movs	r2, #4
 8007704:	e7b7      	b.n	8007676 <tftp_recv+0x26>
      if (tftp_state.handle == NULL) {
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d056      	beq.n	80077ba <tftp_recv+0x16a>
      if (tftp_state.mode_write != 1) {
 800770c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007710:	2b01      	cmp	r3, #1
 8007712:	d059      	beq.n	80077c8 <tftp_recv+0x178>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 8007714:	4b6e      	ldr	r3, [pc, #440]	; (80078d0 <tftp_recv+0x280>)
 8007716:	2202      	movs	r2, #2
 8007718:	4641      	mov	r1, r8
 800771a:	4630      	mov	r0, r6
 800771c:	f7ff ff18 	bl	8007550 <send_error.isra.0>
        break;
 8007720:	e7ad      	b.n	800767e <tftp_recv+0x2e>
      if (tftp_state.handle == NULL) {
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d048      	beq.n	80077ba <tftp_recv+0x16a>
      if (tftp_state.mode_write != 0) {
 8007728:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800772c:	bb83      	cbnz	r3, 8007790 <tftp_recv+0x140>
      blknum = lwip_ntohs(sbuf[1]);
 800772e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8007732:	f011 fb71 	bl	8018e18 <lwip_htons>
      if (blknum != tftp_state.blknum) {
 8007736:	8c23      	ldrh	r3, [r4, #32]
 8007738:	4283      	cmp	r3, r0
 800773a:	d137      	bne.n	80077ac <tftp_recv+0x15c>
      if (tftp_state.last_data != NULL) {
 800773c:	68a2      	ldr	r2, [r4, #8]
 800773e:	b11a      	cbz	r2, 8007748 <tftp_recv+0xf8>
      if (!lastpkt) {
 8007740:	8912      	ldrh	r2, [r2, #8]
 8007742:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
 8007746:	d1d8      	bne.n	80076fa <tftp_recv+0xaa>
        tftp_state.blknum++;
 8007748:	3301      	adds	r3, #1
        send_data(addr, port);
 800774a:	4641      	mov	r1, r8
 800774c:	4630      	mov	r0, r6
        tftp_state.blknum++;
 800774e:	8423      	strh	r3, [r4, #32]
        send_data(addr, port);
 8007750:	f7ff ff36 	bl	80075c0 <send_data>
 8007754:	e793      	b.n	800767e <tftp_recv+0x2e>
      if ((tftp_state.tftp_mode & LWIP_TFTP_MODE_SERVER) == 0) {
 8007756:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d51f      	bpl.n	800779e <tftp_recv+0x14e>
      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800775e:	464a      	mov	r2, r9
 8007760:	495c      	ldr	r1, [pc, #368]	; (80078d4 <tftp_recv+0x284>)
 8007762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007766:	f018 f899 	bl	801f89c <sys_timeout>
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800776a:	2201      	movs	r2, #1
 800776c:	2302      	movs	r3, #2
 800776e:	f10d 010b 	add.w	r1, sp, #11
 8007772:	4628      	mov	r0, r5
 8007774:	f013 fd82 	bl	801b27c <pbuf_memfind>
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 8007778:	1e42      	subs	r2, r0, #1
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800777a:	4682      	mov	sl, r0
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800777c:	b292      	uxth	r2, r2
 800777e:	2a15      	cmp	r2, #21
 8007780:	d933      	bls.n	80077ea <tftp_recv+0x19a>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 8007782:	4b55      	ldr	r3, [pc, #340]	; (80078d8 <tftp_recv+0x288>)
 8007784:	2202      	movs	r2, #2
 8007786:	4641      	mov	r1, r8
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff fee1 	bl	8007550 <send_error.isra.0>
        break;
 800778e:	e776      	b.n	800767e <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 8007790:	4b52      	ldr	r3, [pc, #328]	; (80078dc <tftp_recv+0x28c>)
 8007792:	2202      	movs	r2, #2
 8007794:	4641      	mov	r1, r8
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff feda 	bl	8007550 <send_error.isra.0>
        break;
 800779c:	e76f      	b.n	800767e <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "TFTP server not enabled");
 800779e:	4b50      	ldr	r3, [pc, #320]	; (80078e0 <tftp_recv+0x290>)
 80077a0:	2202      	movs	r2, #2
 80077a2:	4641      	mov	r1, r8
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff fed3 	bl	8007550 <send_error.isra.0>
        break;
 80077aa:	e768      	b.n	800767e <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 80077ac:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <tftp_recv+0x294>)
 80077ae:	2205      	movs	r2, #5
 80077b0:	4641      	mov	r1, r8
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff fecc 	bl	8007550 <send_error.isra.0>
 80077b8:	e761      	b.n	800767e <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80077ba:	4b4b      	ldr	r3, [pc, #300]	; (80078e8 <tftp_recv+0x298>)
 80077bc:	2202      	movs	r2, #2
 80077be:	4641      	mov	r1, r8
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff fec5 	bl	8007550 <send_error.isra.0>
        break;
 80077c6:	e75a      	b.n	800767e <tftp_recv+0x2e>
      blknum = lwip_ntohs(sbuf[1]);
 80077c8:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80077cc:	f011 fb24 	bl	8018e18 <lwip_htons>
      if (blknum == tftp_state.blknum) {
 80077d0:	8c27      	ldrh	r7, [r4, #32]
 80077d2:	4287      	cmp	r7, r0
 80077d4:	d046      	beq.n	8007864 <tftp_recv+0x214>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	b29b      	uxth	r3, r3
 80077da:	429f      	cmp	r7, r3
 80077dc:	d1e6      	bne.n	80077ac <tftp_recv+0x15c>
        send_ack(addr, port, blknum);
 80077de:	4602      	mov	r2, r0
 80077e0:	4641      	mov	r1, r8
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff fe8e 	bl	8007504 <send_ack.isra.0>
 80077e8:	e749      	b.n	800767e <tftp_recv+0x2e>
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 80077ea:	2302      	movs	r3, #2
 80077ec:	a906      	add	r1, sp, #24
 80077ee:	4628      	mov	r0, r5
 80077f0:	f013 fbd6 	bl	801afa0 <pbuf_copy_partial>
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 80077f4:	f10a 0301 	add.w	r3, sl, #1
 80077f8:	2201      	movs	r2, #1
 80077fa:	f10d 010b 	add.w	r1, sp, #11
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4628      	mov	r0, r5
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	f013 fd3a 	bl	801b27c <pbuf_memfind>
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 8007808:	eba0 000a 	sub.w	r0, r0, sl
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	b282      	uxth	r2, r0
 8007810:	2a0b      	cmp	r2, #11
 8007812:	d906      	bls.n	8007822 <tftp_recv+0x1d2>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 8007814:	4b35      	ldr	r3, [pc, #212]	; (80078ec <tftp_recv+0x29c>)
 8007816:	2202      	movs	r2, #2
 8007818:	4641      	mov	r1, r8
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff fe98 	bl	8007550 <send_error.isra.0>
        break;
 8007820:	e72d      	b.n	800767e <tftp_recv+0x2e>
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 8007822:	a903      	add	r1, sp, #12
 8007824:	4628      	mov	r0, r5
 8007826:	f013 fbbb 	bl	801afa0 <pbuf_copy_partial>
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 800782a:	f5a7 7200 	sub.w	r2, r7, #512	; 0x200
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	a903      	add	r1, sp, #12
 8007832:	fab2 f282 	clz	r2, r2
 8007836:	a806      	add	r0, sp, #24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	0952      	lsrs	r2, r2, #5
 800783c:	4798      	blx	r3
      tftp_state.blknum = 1;
 800783e:	2201      	movs	r2, #1
      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 8007840:	6060      	str	r0, [r4, #4]
      tftp_state.blknum = 1;
 8007842:	8422      	strh	r2, [r4, #32]
      if (!tftp_state.handle) {
 8007844:	2800      	cmp	r0, #0
 8007846:	d037      	beq.n	80078b8 <tftp_recv+0x268>
      ip_addr_copy(tftp_state.addr, *addr);
 8007848:	6833      	ldr	r3, [r6, #0]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 800784a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
      tftp_state.port = port;
 800784e:	f8a4 8014 	strh.w	r8, [r4, #20]
      ip_addr_copy(tftp_state.addr, *addr);
 8007852:	6123      	str	r3, [r4, #16]
      if (opcode == PP_HTONS(TFTP_WRQ)) {
 8007854:	d028      	beq.n	80078a8 <tftp_recv+0x258>
        send_data(addr, port);
 8007856:	4641      	mov	r1, r8
 8007858:	4630      	mov	r0, r6
        tftp_state.mode_write = 0;
 800785a:	f884 9023 	strb.w	r9, [r4, #35]	; 0x23
        send_data(addr, port);
 800785e:	f7ff feaf 	bl	80075c0 <send_data>
 8007862:	e70c      	b.n	800767e <tftp_recv+0x2e>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8007864:	2104      	movs	r1, #4
 8007866:	4628      	mov	r0, r5
 8007868:	f013 fa86 	bl	801ad78 <pbuf_remove_header>
        ret = tftp_state.ctx->write(tftp_state.handle, p);
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	4629      	mov	r1, r5
 8007870:	6860      	ldr	r0, [r4, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4798      	blx	r3
        if (ret < 0) {
 8007876:	2800      	cmp	r0, #0
 8007878:	db0d      	blt.n	8007896 <tftp_recv+0x246>
          send_ack(addr, port, blknum);
 800787a:	463a      	mov	r2, r7
 800787c:	4641      	mov	r1, r8
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff fe40 	bl	8007504 <send_ack.isra.0>
        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 8007884:	892b      	ldrh	r3, [r5, #8]
 8007886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788a:	f4ff af36 	bcc.w	80076fa <tftp_recv+0xaa>
          tftp_state.blknum++;
 800788e:	8c23      	ldrh	r3, [r4, #32]
 8007890:	3301      	adds	r3, #1
 8007892:	8423      	strh	r3, [r4, #32]
 8007894:	e6f3      	b.n	800767e <tftp_recv+0x2e>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 8007896:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <tftp_recv+0x2a0>)
 8007898:	4641      	mov	r1, r8
 800789a:	4630      	mov	r0, r6
 800789c:	2202      	movs	r2, #2
 800789e:	f7ff fe57 	bl	8007550 <send_error.isra.0>
          close_handle();
 80078a2:	f7ff fd7f 	bl	80073a4 <close_handle>
 80078a6:	e7ed      	b.n	8007884 <tftp_recv+0x234>
        tftp_state.mode_write = 1;
 80078a8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        send_ack(addr, port, 0);
 80078ac:	4641      	mov	r1, r8
 80078ae:	464a      	mov	r2, r9
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff fe27 	bl	8007504 <send_ack.isra.0>
 80078b6:	e6e2      	b.n	800767e <tftp_recv+0x2e>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 80078b8:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <tftp_recv+0x2a4>)
 80078ba:	4641      	mov	r1, r8
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fe47 	bl	8007550 <send_error.isra.0>
        break;
 80078c2:	e6dc      	b.n	800767e <tftp_recv+0x2e>
 80078c4:	20002e58 	.word	0x20002e58
 80078c8:	0802bc4c 	.word	0x0802bc4c
 80078cc:	0802bd64 	.word	0x0802bd64
 80078d0:	0802bd0c 	.word	0x0802bd0c
 80078d4:	080074ad 	.word	0x080074ad
 80078d8:	0802bc90 	.word	0x0802bc90
 80078dc:	0802bd4c 	.word	0x0802bd4c
 80078e0:	0802bc78 	.word	0x0802bc78
 80078e4:	0802bd38 	.word	0x0802bd38
 80078e8:	0802bcfc 	.word	0x0802bcfc
 80078ec:	0802bcb8 	.word	0x0802bcb8
 80078f0:	0802bd24 	.word	0x0802bd24
 80078f4:	0802bcdc 	.word	0x0802bcdc

080078f8 <tftp_init_common>:
 * @param mode TFTP mode (client/server)
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_common(u8_t mode, const struct tftp_context *ctx)
{
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4606      	mov	r6, r0
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80078fc:	202e      	movs	r0, #46	; 0x2e
{
 80078fe:	460f      	mov	r7, r1
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007900:	f018 fbb0 	bl	8020064 <udp_new_ip_type>
  if (pcb == NULL) {
 8007904:	b1d8      	cbz	r0, 800793e <tftp_init_common+0x46>
    return ERR_MEM;
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 8007906:	2245      	movs	r2, #69	; 0x45
 8007908:	490e      	ldr	r1, [pc, #56]	; (8007944 <tftp_init_common+0x4c>)
 800790a:	4605      	mov	r5, r0
 800790c:	f018 f946 	bl	801fb9c <udp_bind>
  if (ret != ERR_OK) {
 8007910:	4604      	mov	r4, r0
 8007912:	b978      	cbnz	r0, 8007934 <tftp_init_common+0x3c>
    udp_remove(pcb);
    return ret;
  }

  tftp_state.handle    = NULL;
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <tftp_init_common+0x50>)
  tftp_state.timer     = 0;
  tftp_state.last_data = NULL;
  tftp_state.upcb      = pcb;
  tftp_state.tftp_mode = mode;

  udp_recv(pcb, tftp_recv, NULL);
 8007916:	4602      	mov	r2, r0
 8007918:	490c      	ldr	r1, [pc, #48]	; (800794c <tftp_init_common+0x54>)
  tftp_state.handle    = NULL;
 800791a:	6058      	str	r0, [r3, #4]
  tftp_state.port      = 0;
 800791c:	8298      	strh	r0, [r3, #20]
  tftp_state.timer     = 0;
 800791e:	6198      	str	r0, [r3, #24]
  tftp_state.ctx       = ctx;
 8007920:	601f      	str	r7, [r3, #0]
  tftp_state.tftp_mode = mode;
 8007922:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
  tftp_state.upcb      = pcb;
 8007926:	e9c3 0502 	strd	r0, r5, [r3, #8]
  udp_recv(pcb, tftp_recv, NULL);
 800792a:	4628      	mov	r0, r5
 800792c:	f018 fb4a 	bl	801ffc4 <udp_recv>

  return ERR_OK;
}
 8007930:	4620      	mov	r0, r4
 8007932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    udp_remove(pcb);
 8007934:	4628      	mov	r0, r5
 8007936:	f018 fb57 	bl	801ffe8 <udp_remove>
}
 800793a:	4620      	mov	r0, r4
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800793e:	f04f 34ff 	mov.w	r4, #4294967295
 8007942:	e7f5      	b.n	8007930 <tftp_init_common+0x38>
 8007944:	080452a8 	.word	0x080452a8
 8007948:	20002e58 	.word	0x20002e58
 800794c:	08007651 	.word	0x08007651

08007950 <tftp_init_client>:
 * Initialize TFTP client.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init_client(const struct tftp_context *ctx)
{
 8007950:	4601      	mov	r1, r0
  return tftp_init_common(LWIP_TFTP_MODE_CLIENT, ctx);
 8007952:	2002      	movs	r0, #2
 8007954:	f7ff bfd0 	b.w	80078f8 <tftp_init_common>

08007958 <tftp_get>:
  }
  return NULL;
}

err_t tftp_get(void* basememptr, const ip_addr_t *addr, u16_t port, const char* fname, enum tftp_transfer_mode mode)
{
 8007958:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 800795a:	4c20      	ldr	r4, [pc, #128]	; (80079dc <tftp_get+0x84>)
{
 800795c:	4605      	mov	r5, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 8007962:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
{
 8007966:	f89d 2010 	ldrb.w	r2, [sp, #16]
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 800796a:	f01c 0f02 	tst.w	ip, #2
 800796e:	d024      	beq.n	80079ba <tftp_get+0x62>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 8007970:	b35b      	cbz	r3, 80079ca <tftp_get+0x72>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 8007972:	2a02      	cmp	r2, #2
 8007974:	d817      	bhi.n	80079a6 <tftp_get+0x4e>

  tftp_state.handle = basememptr;
 8007976:	6065      	str	r5, [r4, #4]
  tftp_state.blknum = 1;
 8007978:	2501      	movs	r5, #1
 800797a:	8425      	strh	r5, [r4, #32]
  tftp_state.mode_write = 1; /* We want to receive data */
 800797c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  if (mode == TFTP_MODE_OCTET) {
 8007980:	b152      	cbz	r2, 8007998 <tftp_get+0x40>
    return "binary";
 8007982:	4d17      	ldr	r5, [pc, #92]	; (80079e0 <tftp_get+0x88>)
 8007984:	4c17      	ldr	r4, [pc, #92]	; (80079e4 <tftp_get+0x8c>)
 8007986:	2a01      	cmp	r2, #1
 8007988:	bf18      	it	ne
 800798a:	462c      	movne	r4, r5
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 800798c:	2201      	movs	r2, #1
 800798e:	9404      	str	r4, [sp, #16]
}
 8007990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 8007994:	f7ff bd20 	b.w	80073d8 <send_request>
    return "octet";
 8007998:	4c13      	ldr	r4, [pc, #76]	; (80079e8 <tftp_get+0x90>)
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 800799a:	2201      	movs	r2, #1
 800799c:	9404      	str	r4, [sp, #16]
}
 800799e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send_request(addr, port, TFTP_RRQ, fname, mode_to_string(mode));
 80079a2:	f7ff bd19 	b.w	80073d8 <send_request>
  LWIP_ERROR("tftp_get: invalid mode", mode <= TFTP_MODE_BINARY, return ERR_VAL);
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <tftp_get+0x94>)
 80079a8:	f240 2216 	movw	r2, #534	; 0x216
 80079ac:	4910      	ldr	r1, [pc, #64]	; (80079f0 <tftp_get+0x98>)
 80079ae:	4811      	ldr	r0, [pc, #68]	; (80079f4 <tftp_get+0x9c>)
 80079b0:	f01d fb0c 	bl	8024fcc <iprintf>
}
 80079b4:	f06f 0005 	mvn.w	r0, #5
 80079b8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("TFTP client is not enabled (tftp_init)", (tftp_state.tftp_mode & LWIP_TFTP_MODE_CLIENT) != 0, return ERR_VAL);
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <tftp_get+0x94>)
 80079bc:	f44f 7205 	mov.w	r2, #532	; 0x214
 80079c0:	490d      	ldr	r1, [pc, #52]	; (80079f8 <tftp_get+0xa0>)
 80079c2:	480c      	ldr	r0, [pc, #48]	; (80079f4 <tftp_get+0x9c>)
 80079c4:	f01d fb02 	bl	8024fcc <iprintf>
 80079c8:	e7f4      	b.n	80079b4 <tftp_get+0x5c>
  LWIP_ERROR("tftp_get: invalid file name", fname != NULL, return ERR_VAL);
 80079ca:	4b08      	ldr	r3, [pc, #32]	; (80079ec <tftp_get+0x94>)
 80079cc:	f240 2215 	movw	r2, #533	; 0x215
 80079d0:	490a      	ldr	r1, [pc, #40]	; (80079fc <tftp_get+0xa4>)
 80079d2:	4808      	ldr	r0, [pc, #32]	; (80079f4 <tftp_get+0x9c>)
 80079d4:	f01d fafa 	bl	8024fcc <iprintf>
 80079d8:	e7ec      	b.n	80079b4 <tftp_get+0x5c>
 80079da:	bf00      	nop
 80079dc:	20002e58 	.word	0x20002e58
 80079e0:	0802bdfc 	.word	0x0802bdfc
 80079e4:	0802bde8 	.word	0x0802bde8
 80079e8:	0802bdf4 	.word	0x0802bdf4
 80079ec:	0802bd78 	.word	0x0802bd78
 80079f0:	0802be48 	.word	0x0802be48
 80079f4:	0802bdc0 	.word	0x0802bdc0
 80079f8:	0802be04 	.word	0x0802be04
 80079fc:	0802be2c 	.word	0x0802be2c

08007a00 <tftp_open_mem>:

static void* tftp_open_mem(const unsigned int memaddress, u8_t is_write) {
	void *basememptr;
	uint32_t myaddr;

	if (is_write) {
 8007a00:	b141      	cbz	r1, 8007a14 <tftp_open_mem+0x14>
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <tftp_open_mem+0x18>)
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 8007a04:	f000 6201 	and.w	r2, r0, #135266304	; 0x8100000
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a08:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
			basememptr = (void*) memaddress;
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bf08      	it	eq
 8007a10:	2000      	moveq	r0, #0
 8007a12:	4770      	bx	lr
			return (basememptr);		// write
		} else
			return (0);
	} else {
		return (0);						// not implemented
 8007a14:	4608      	mov	r0, r1
		//   return (void*)memopen(memptr, 0);		// read
	}
}
 8007a16:	4770      	bx	lr
 8007a18:	08007a01 	.word	0x08007a01

08007a1c <tftp_open>:
	if (is_write) {
 8007a1c:	b142      	cbz	r2, 8007a30 <tftp_open+0x14>
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <tftp_open+0x18>)
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 8007a20:	f000 6201 	and.w	r2, r0, #135266304	; 0x8100000
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007a24:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
			return (basememptr);		// write
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bf08      	it	eq
 8007a2c:	2000      	moveq	r0, #0
 8007a2e:	4770      	bx	lr
		return (0);						// not implemented
 8007a30:	4610      	mov	r0, r2

static void* tftp_open(const char *fname, const char *mode, u8_t is_write) {
	LWIP_UNUSED_ARG(mode);
	return tftp_open_mem(fname, is_write);
}
 8007a32:	4770      	bx	lr
 8007a34:	08007a01 	.word	0x08007a01

08007a38 <tftp_read>:
	ret = memread(buf, 1, bytes, (void*) memptr);
	if (ret <= 0) {
		return -1;
	}
	return ret;
}
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <tftp_error>:
	}
	return 0;
}

/* For TFTP client only */
static void tftp_error(void *memptr, int err, const char *msg, int size) {
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	b09a      	sub	sp, #104	; 0x68
 8007a44:	461e      	mov	r6, r3
 8007a46:	4615      	mov	r5, r2
 8007a48:	460c      	mov	r4, r1
	char message[100];

	LWIP_UNUSED_ARG(memptr);

	memset(message, 0, sizeof(message));
 8007a4a:	2264      	movs	r2, #100	; 0x64
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	a801      	add	r0, sp, #4
 8007a50:	f01c fb20 	bl	8024094 <memset>
	MEMCPY(message, msg, LWIP_MIN(sizeof(message)-1, (size_t)size));
 8007a54:	2e63      	cmp	r6, #99	; 0x63
 8007a56:	4632      	mov	r2, r6
 8007a58:	4629      	mov	r1, r5
 8007a5a:	bf28      	it	cs
 8007a5c:	2263      	movcs	r2, #99	; 0x63
 8007a5e:	a801      	add	r0, sp, #4
 8007a60:	f01c faf0 	bl	8024044 <memcpy>

	printf("TFTP error: %d (%s)", err, message);
 8007a64:	aa01      	add	r2, sp, #4
 8007a66:	4621      	mov	r1, r4
 8007a68:	4803      	ldr	r0, [pc, #12]	; (8007a78 <tftp_error+0x38>)
 8007a6a:	f01d faaf 	bl	8024fcc <iprintf>
	tftabort = 1;
 8007a6e:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <tftp_error+0x3c>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	b01a      	add	sp, #104	; 0x68
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	0802be60 	.word	0x0802be60
 8007a7c:	20002ec0 	.word	0x20002ec0

08007a80 <tftp_write>:
static int tftp_write(void *memptr, struct pbuf *p) {
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	460f      	mov	r7, r1
 8007a86:	b082      	sub	sp, #8
	putchar('.');
 8007a88:	202e      	movs	r0, #46	; 0x2e
 8007a8a:	f01d fab7 	bl	8024ffc <putchar>
	while (p != NULL) {
 8007a8e:	2f00      	cmp	r7, #0
 8007a90:	d03b      	beq.n	8007b0a <tftp_write+0x8a>
 8007a92:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007b40 <tftp_write+0xc0>
		data = 0;
 8007a96:	2600      	movs	r6, #0
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 8007a98:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8007b44 <tftp_write+0xc4>
	filelength += (int) len;
 8007a9c:	f8d8 3000 	ldr.w	r3, [r8]
		if (memwrite(p->payload, 1, p->len, memptr) != (size_t) p->len) {
 8007aa0:	897d      	ldrh	r5, [r7, #10]
 8007aa2:	f8d7 9004 	ldr.w	r9, [r7, #4]
	filelength += (int) len;
 8007aa6:	442b      	add	r3, r5
 8007aa8:	f8c8 3000 	str.w	r3, [r8]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007aac:	b355      	cbz	r5, 8007b04 <tftp_write+0x84>
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 8007aae:	f8da 0000 	ldr.w	r0, [sl]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007ab2:	2400      	movs	r4, #0
		data = 0;
 8007ab4:	f04f 0c04 	mov.w	ip, #4
 8007ab8:	9601      	str	r6, [sp, #4]
			data >>= 8;
 8007aba:	9a01      	ldr	r2, [sp, #4]
			data |= (i < len) ? (buf[i++] << 24) : 0;
 8007abc:	42a5      	cmp	r5, r4
 8007abe:	f04f 0100 	mov.w	r1, #0
			data >>= 8;
 8007ac2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8007ac6:	9201      	str	r2, [sp, #4]
			data |= (i < len) ? (buf[i++] << 24) : 0;
 8007ac8:	d903      	bls.n	8007ad2 <tftp_write+0x52>
 8007aca:	f819 3004 	ldrb.w	r3, [r9, r4]
 8007ace:	3401      	adds	r4, #1
 8007ad0:	0619      	lsls	r1, r3, #24
 8007ad2:	9b01      	ldr	r3, [sp, #4]
		for (j = 0; j < 4; j++) {
 8007ad4:	f1bc 0c01 	subs.w	ip, ip, #1
			data |= (i < len) ? (buf[i++] << 24) : 0;
 8007ad8:	ea43 0301 	orr.w	r3, r3, r1
 8007adc:	9301      	str	r3, [sp, #4]
		for (j = 0; j < 4; j++) {
 8007ade:	d1ec      	bne.n	8007aba <tftp_write+0x3a>
		if ((res = WriteFlashWord(memptr, data)) != 0) {
 8007ae0:	9901      	ldr	r1, [sp, #4]
 8007ae2:	f7f9 f97d 	bl	8000de0 <WriteFlashWord>
 8007ae6:	b9a0      	cbnz	r0, 8007b12 <tftp_write+0x92>
		if (*(uint32_t*) memptr != data) {
 8007ae8:	f8da 0000 	ldr.w	r0, [sl]
 8007aec:	9a01      	ldr	r2, [sp, #4]
 8007aee:	6803      	ldr	r3, [r0, #0]
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d116      	bne.n	8007b22 <tftp_write+0xa2>
		memptr += 4;
 8007af4:	3004      	adds	r0, #4
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007af6:	42a5      	cmp	r5, r4
		memptr += 4;
 8007af8:	f8ca 0000 	str.w	r0, [sl]
	for (i = 0; i < len;) {		// avoid read buffer overflow
 8007afc:	d8da      	bhi.n	8007ab4 <tftp_write+0x34>
		if (memwrite(p->payload, 1, p->len, memptr) != (size_t) p->len) {
 8007afe:	897b      	ldrh	r3, [r7, #10]
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	d115      	bne.n	8007b30 <tftp_write+0xb0>
		p = p->next;
 8007b04:	683f      	ldr	r7, [r7, #0]
	while (p != NULL) {
 8007b06:	2f00      	cmp	r7, #0
 8007b08:	d1c8      	bne.n	8007a9c <tftp_write+0x1c>
	return 0;
 8007b0a:	2000      	movs	r0, #0
}
 8007b0c:	b002      	add	sp, #8
 8007b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("memwrite: WriteFlash error\n");
 8007b12:	4809      	ldr	r0, [pc, #36]	; (8007b38 <tftp_write+0xb8>)
 8007b14:	f01d faf6 	bl	8025104 <puts>
			return -1;
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b1c:	b002      	add	sp, #8
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("memwrite: Readback error at %08x\n", memptr);
 8007b22:	4601      	mov	r1, r0
 8007b24:	4805      	ldr	r0, [pc, #20]	; (8007b3c <tftp_write+0xbc>)
 8007b26:	f01d fa51 	bl	8024fcc <iprintf>
			return -1;
 8007b2a:	f04f 30ff 	mov.w	r0, #4294967295
			return (-1);
 8007b2e:	e7ed      	b.n	8007b0c <tftp_write+0x8c>
			return -1;
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	e7ea      	b.n	8007b0c <tftp_write+0x8c>
 8007b36:	bf00      	nop
 8007b38:	0802be74 	.word	0x0802be74
 8007b3c:	0802be90 	.word	0x0802be90
 8007b40:	20002ea0 	.word	0x20002ea0
 8007b44:	20002ea4 	.word	0x20002ea4

08007b48 <tftp_close>:
static void tftp_close(void *memptr) {
 8007b48:	b538      	push	{r3, r4, r5, lr}
	if (tftabort) {
 8007b4a:	4b30      	ldr	r3, [pc, #192]	; (8007c0c <tftp_close+0xc4>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	b112      	cbz	r2, 8007b56 <tftp_close+0xe>
		tftabort = 0;
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
	printf("tftp memclose: filelength=%d, memptr=0x%0x\n", filelength, (unsigned int) memptr);
 8007b56:	4d2e      	ldr	r5, [pc, #184]	; (8007c10 <tftp_close+0xc8>)
 8007b58:	4c2e      	ldr	r4, [pc, #184]	; (8007c14 <tftp_close+0xcc>)
 8007b5a:	682a      	ldr	r2, [r5, #0]
 8007b5c:	6821      	ldr	r1, [r4, #0]
 8007b5e:	482e      	ldr	r0, [pc, #184]	; (8007c18 <tftp_close+0xd0>)
 8007b60:	f01d fa34 	bl	8024fcc <iprintf>
	osDelay(1000);
 8007b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b68:	f00d fac0 	bl	80150ec <osDelay>
	if (LockFlash() != HAL_OK) {
 8007b6c:	f7f9 f88c 	bl	8000c88 <LockFlash>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d13b      	bne.n	8007bec <tftp_close+0xa4>
	xcrc = findcrc(memptr - filelength, filelength);
 8007b74:	6821      	ldr	r1, [r4, #0]
	crc = xcrc32(base, length, xinit);
 8007b76:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = findcrc(memptr - filelength, filelength);
 8007b7a:	6828      	ldr	r0, [r5, #0]
	crc = xcrc32(base, length, xinit);
 8007b7c:	1a40      	subs	r0, r0, r1
 8007b7e:	f7f9 f81f 	bl	8000bc0 <xcrc32>
	if ((filecrc != xcrc) && (filecrc != 0xffffffff)) {
 8007b82:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <tftp_close+0xd4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4298      	cmp	r0, r3
 8007b88:	d007      	beq.n	8007b9a <tftp_close+0x52>
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	d005      	beq.n	8007b9a <tftp_close+0x52>
		printf("****************** Downloaded file/ROM CRC check failed crc=0x%x **********\n", xcrc);
 8007b8e:	4601      	mov	r1, r0
 8007b90:	4823      	ldr	r0, [pc, #140]	; (8007c20 <tftp_close+0xd8>)
}
 8007b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("****************** Downloaded file/ROM CRC check failed crc=0x%x **********\n", xcrc);
 8007b96:	f01d ba19 	b.w	8024fcc <iprintf>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8007b9a:	4822      	ldr	r0, [pc, #136]	; (8007c24 <tftp_close+0xdc>)
 8007b9c:	f003 fb3e 	bl	800b21c <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8007ba0:	f003 f958 	bl	800ae54 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = ((memptr - filelength) == 0x8000000) ? 0x2000 : 0x2040;
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	481e      	ldr	r0, [pc, #120]	; (8007c24 <tftp_close+0xdc>)
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bb0:	bf0b      	itete	eq
 8007bb2:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8007bb6:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 8007bba:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 8007bbe:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = ((memptr - filelength) == 0x8000000) ? 0x2040 : 0x2000;
 8007bc2:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8007bc6:	f003 fa51 	bl	800b06c <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8007bca:	b9c8      	cbnz	r0, 8007c00 <tftp_close+0xb8>
		res = HAL_FLASH_OB_Launch();
 8007bcc:	f003 f95e 	bl	800ae8c <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8007bd0:	b988      	cbnz	r0, 8007bf6 <tftp_close+0xae>
		HAL_FLASH_OB_Lock();
 8007bd2:	f003 f951 	bl	800ae78 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait...\n");
 8007bd6:	4814      	ldr	r0, [pc, #80]	; (8007c28 <tftp_close+0xe0>)
 8007bd8:	f01d fa94 	bl	8025104 <puts>
		osDelay(50);
 8007bdc:	2032      	movs	r0, #50	; 0x32
 8007bde:	f00d fa85 	bl	80150ec <osDelay>
		rebootme(0);
 8007be2:	2000      	movs	r0, #0
}
 8007be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rebootme(0);
 8007be8:	f7fa bd6c 	b.w	80026c4 <rebootme>
		printf("tftp: flash2 failed\n");
 8007bec:	480f      	ldr	r0, [pc, #60]	; (8007c2c <tftp_close+0xe4>)
}
 8007bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("tftp: flash2 failed\n");
 8007bf2:	f01d ba87 	b.w	8025104 <puts>
			printf("memclose: failed to OBLaunch %d\n", res);
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	480d      	ldr	r0, [pc, #52]	; (8007c30 <tftp_close+0xe8>)
 8007bfa:	f01d f9e7 	bl	8024fcc <iprintf>
 8007bfe:	e7e8      	b.n	8007bd2 <tftp_close+0x8a>
			printf("memclose: failed to OBProgram %d\n", res);
 8007c00:	4601      	mov	r1, r0
 8007c02:	480c      	ldr	r0, [pc, #48]	; (8007c34 <tftp_close+0xec>)
 8007c04:	f01d f9e2 	bl	8024fcc <iprintf>
 8007c08:	e7e0      	b.n	8007bcc <tftp_close+0x84>
 8007c0a:	bf00      	nop
 8007c0c:	20002ec0 	.word	0x20002ec0
 8007c10:	20002ea4 	.word	0x20002ea4
 8007c14:	20002ea0 	.word	0x20002ea0
 8007c18:	0802beb4 	.word	0x0802beb4
 8007c1c:	20001d9c 	.word	0x20001d9c
 8007c20:	0802bef4 	.word	0x0802bef4
 8007c24:	20002e80 	.word	0x20002e80
 8007c28:	0802bf8c 	.word	0x0802bf8c
 8007c2c:	0802bee0 	.word	0x0802bee0
 8007c30:	0802bf68 	.word	0x0802bf68
 8007c34:	0802bf44 	.word	0x0802bf44

08007c38 <tftp_client>:
// unused
void tftp_example_init_server(void) {
	tftp_init_server(&tftp);
}

void tftp_client(char *filename) {
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	b084      	sub	sp, #16
	err_t err;
	ip_addr_t srv;

//	printf("+++++++++++++ tftp_init_client: start\n");

	tftabort = 0;
 8007c3c:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <tftp_client+0xa0>)
 8007c3e:	2200      	movs	r2, #0
void tftp_client(char *filename) {
 8007c40:	4605      	mov	r5, r0
	int ret = ipaddr_aton(LWIP_TFTP_EXAMPLE_CLIENT_REMOTEIP, &srv);
 8007c42:	a903      	add	r1, sp, #12
 8007c44:	4825      	ldr	r0, [pc, #148]	; (8007cdc <tftp_client+0xa4>)
	tftabort = 0;
 8007c46:	601a      	str	r2, [r3, #0]
	int ret = ipaddr_aton(LWIP_TFTP_EXAMPLE_CLIENT_REMOTEIP, &srv);
 8007c48:	f01a feee 	bl	8022a28 <ip4addr_aton>
	LWIP_ASSERT("ipaddr_aton failed", ret == 1);
 8007c4c:	2801      	cmp	r0, #1
 8007c4e:	d006      	beq.n	8007c5e <tftp_client+0x26>
 8007c50:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <tftp_client+0xa8>)
 8007c52:	f240 1213 	movw	r2, #275	; 0x113
 8007c56:	4923      	ldr	r1, [pc, #140]	; (8007ce4 <tftp_client+0xac>)
 8007c58:	4823      	ldr	r0, [pc, #140]	; (8007ce8 <tftp_client+0xb0>)
 8007c5a:	f01d f9b7 	bl	8024fcc <iprintf>

	err = tftp_init_client(&tftp);
 8007c5e:	4823      	ldr	r0, [pc, #140]	; (8007cec <tftp_client+0xb4>)
 8007c60:	f7ff fe76 	bl	8007950 <tftp_init_client>
	if ((err != ERR_OK) && (err != ERR_USE))		// ERR_USE might be subsequent call
 8007c64:	b108      	cbz	r0, 8007c6a <tftp_client+0x32>
 8007c66:	3008      	adds	r0, #8
 8007c68:	d11b      	bne.n	8007ca2 <tftp_client+0x6a>
		LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);

	mptr = tftp_open_mem(load_address, 1);
 8007c6a:	4a21      	ldr	r2, [pc, #132]	; (8007cf0 <tftp_client+0xb8>)
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007c6c:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <tftp_client+0xbc>)
	mptr = tftp_open_mem(load_address, 1);
 8007c6e:	6814      	ldr	r4, [r2, #0]
		myaddr = (uint32_t) tftp_open_mem & 0x8100000;				// find which 1M segment we are now running in
 8007c70:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
		if ((memaddress & 0x8100000) != myaddr) {	// dont allow write to this segment!
 8007c74:	f004 6201 	and.w	r2, r4, #135266304	; 0x8100000
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d01a      	beq.n	8007cb2 <tftp_client+0x7a>
	LWIP_ASSERT("failed to create memory", mptr != NULL);
 8007c7c:	b1cc      	cbz	r4, 8007cb2 <tftp_client+0x7a>

	memptr = mptr;
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <tftp_client+0xc0>)
	filelength = 0;
 8007c80:	2600      	movs	r6, #0

	EraseFlash(memptr);
 8007c82:	4620      	mov	r0, r4
	memptr = mptr;
 8007c84:	601c      	str	r4, [r3, #0]
	filelength = 0;
 8007c86:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <tftp_client+0xc4>)
 8007c88:	601e      	str	r6, [r3, #0]
	EraseFlash(memptr);
 8007c8a:	f7f9 f849 	bl	8000d20 <EraseFlash>
	err = tftp_get(mptr, &srv, TFTP_PORT, filename, TFTP_MODE_OCTET);
 8007c8e:	462b      	mov	r3, r5
 8007c90:	2245      	movs	r2, #69	; 0x45
 8007c92:	a903      	add	r1, sp, #12
 8007c94:	4620      	mov	r0, r4
 8007c96:	9600      	str	r6, [sp, #0]
 8007c98:	f7ff fe5e 	bl	8007958 <tftp_get>
	LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 8007c9c:	b990      	cbnz	r0, 8007cc4 <tftp_client+0x8c>

//	printf("+++++++++++++ tftp_init_client: end\n");
}
 8007c9e:	b004      	add	sp, #16
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
		LWIP_ASSERT("tftp_init_client failed", err == ERR_OK);
 8007ca2:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <tftp_client+0xa8>)
 8007ca4:	f240 1217 	movw	r2, #279	; 0x117
 8007ca8:	4915      	ldr	r1, [pc, #84]	; (8007d00 <tftp_client+0xc8>)
 8007caa:	480f      	ldr	r0, [pc, #60]	; (8007ce8 <tftp_client+0xb0>)
 8007cac:	f01d f98e 	bl	8024fcc <iprintf>
 8007cb0:	e7db      	b.n	8007c6a <tftp_client+0x32>
	LWIP_ASSERT("failed to create memory", mptr != NULL);
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <tftp_client+0xa8>)
 8007cb4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007cb8:	4912      	ldr	r1, [pc, #72]	; (8007d04 <tftp_client+0xcc>)
 8007cba:	2400      	movs	r4, #0
 8007cbc:	480a      	ldr	r0, [pc, #40]	; (8007ce8 <tftp_client+0xb0>)
 8007cbe:	f01d f985 	bl	8024fcc <iprintf>
 8007cc2:	e7dc      	b.n	8007c7e <tftp_client+0x46>
	LWIP_ASSERT("tftp_get failed", err == ERR_OK);
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <tftp_client+0xa8>)
 8007cc6:	f240 1221 	movw	r2, #289	; 0x121
 8007cca:	490f      	ldr	r1, [pc, #60]	; (8007d08 <tftp_client+0xd0>)
 8007ccc:	4806      	ldr	r0, [pc, #24]	; (8007ce8 <tftp_client+0xb0>)
 8007cce:	f01d f97d 	bl	8024fcc <iprintf>
}
 8007cd2:	b004      	add	sp, #16
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20002ec0 	.word	0x20002ec0
 8007cdc:	0802bfc0 	.word	0x0802bfc0
 8007ce0:	0802bfd0 	.word	0x0802bfd0
 8007ce4:	0802bff0 	.word	0x0802bff0
 8007ce8:	0802bdc0 	.word	0x0802bdc0
 8007cec:	0802c09c 	.word	0x0802c09c
 8007cf0:	200002d8 	.word	0x200002d8
 8007cf4:	08007a01 	.word	0x08007a01
 8007cf8:	20002ea4 	.word	0x20002ea4
 8007cfc:	20002ea0 	.word	0x20002ea0
 8007d00:	0802c004 	.word	0x0802c004
 8007d04:	0802c01c 	.word	0x0802c01c
 8007d08:	0802c034 	.word	0x0802c034

08007d0c <tftloader>:
	volatile uint32_t addr;
	char segment;

	filecrc = 0;

	addr = (uint32_t)tftloader & 0x8100000; 	// where are we running this code?
 8007d0c:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <tftloader+0x60>)
void tftloader(char filename[], uint32_t crc1, uint32_t crc2) {
 8007d0e:	b570      	push	{r4, r5, r6, lr}
	addr = (uint32_t)tftloader & 0x8100000; 	// where are we running this code?
 8007d10:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
void tftloader(char filename[], uint32_t crc1, uint32_t crc2) {
 8007d14:	b084      	sub	sp, #16
	filecrc = 0;
 8007d16:	4d16      	ldr	r5, [pc, #88]	; (8007d70 <tftloader+0x64>)
 8007d18:	2600      	movs	r6, #0
	addr = (uint32_t)tftloader & 0x8100000; 	// where are we running this code?
 8007d1a:	9303      	str	r3, [sp, #12]
void tftloader(char filename[], uint32_t crc1, uint32_t crc2) {
 8007d1c:	4614      	mov	r4, r2
	load_address = (addr == TFTP_BASE_MEM1) ? TFTP_BASE_MEM2 : TFTP_BASE_MEM1; // find the other segment
 8007d1e:	9b03      	ldr	r3, [sp, #12]
void tftloader(char filename[], uint32_t crc1, uint32_t crc2) {
 8007d20:	4602      	mov	r2, r0
	filecrc = 0;
 8007d22:	602e      	str	r6, [r5, #0]
	load_address = (addr == TFTP_BASE_MEM1) ? TFTP_BASE_MEM2 : TFTP_BASE_MEM1; // find the other segment
 8007d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d28:	d019      	beq.n	8007d5e <tftloader+0x52>
 8007d2a:	4812      	ldr	r0, [pc, #72]	; (8007d74 <tftloader+0x68>)
 8007d2c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000

	switch (load_address) {		// assign a code letter for the load address filename
	case 0x8000000:
		segment = 'A';
		filecrc = crc1;
		break;
 8007d30:	2341      	movs	r3, #65	; 0x41
		filecrc = crc1;
 8007d32:	6029      	str	r1, [r5, #0]
	load_address = (addr == TFTP_BASE_MEM1) ? TFTP_BASE_MEM2 : TFTP_BASE_MEM1; // find the other segment
 8007d34:	6004      	str	r4, [r0, #0]
	default:
		printf("tftloader: bad load address\n");
		return;
	}

	sprintf(newfilename, "%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8007d36:	4910      	ldr	r1, [pc, #64]	; (8007d78 <tftloader+0x6c>)
 8007d38:	4c10      	ldr	r4, [pc, #64]	; (8007d7c <tftloader+0x70>)
 8007d3a:	6808      	ldr	r0, [r1, #0]
 8007d3c:	6824      	ldr	r4, [r4, #0]
 8007d3e:	4910      	ldr	r1, [pc, #64]	; (8007d80 <tftloader+0x74>)
 8007d40:	e9cd 0400 	strd	r0, r4, [sp]
 8007d44:	480f      	ldr	r0, [pc, #60]	; (8007d84 <tftloader+0x78>)
 8007d46:	f01d fb33 	bl	80253b0 <siprintf>
	printf("*** Attempting to download new firmware %s : do not switch off ***\n", newfilename);
 8007d4a:	490e      	ldr	r1, [pc, #56]	; (8007d84 <tftloader+0x78>)
 8007d4c:	480e      	ldr	r0, [pc, #56]	; (8007d88 <tftloader+0x7c>)
 8007d4e:	f01d f93d 	bl	8024fcc <iprintf>

	tftp_client(newfilename);
 8007d52:	480c      	ldr	r0, [pc, #48]	; (8007d84 <tftloader+0x78>)
}
 8007d54:	b004      	add	sp, #16
 8007d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tftp_client(newfilename);
 8007d5a:	f7ff bf6d 	b.w	8007c38 <tftp_client>
	load_address = (addr == TFTP_BASE_MEM1) ? TFTP_BASE_MEM2 : TFTP_BASE_MEM1; // find the other segment
 8007d5e:	4905      	ldr	r1, [pc, #20]	; (8007d74 <tftloader+0x68>)
 8007d60:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
		break;
 8007d64:	2349      	movs	r3, #73	; 0x49
		filecrc = crc2;
 8007d66:	602c      	str	r4, [r5, #0]
	load_address = (addr == TFTP_BASE_MEM1) ? TFTP_BASE_MEM2 : TFTP_BASE_MEM1; // find the other segment
 8007d68:	6008      	str	r0, [r1, #0]
		break;
 8007d6a:	e7e4      	b.n	8007d36 <tftloader+0x2a>
 8007d6c:	08007d0d 	.word	0x08007d0d
 8007d70:	20001d9c 	.word	0x20001d9c
 8007d74:	200002d8 	.word	0x200002d8
 8007d78:	20001d4c 	.word	0x20001d4c
 8007d7c:	20002a08 	.word	0x20002a08
 8007d80:	0802c044 	.word	0x0802c044
 8007d84:	20002ea8 	.word	0x20002ea8
 8007d88:	0802c058 	.word	0x0802c058

08007d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8007d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d92:	e003      	b.n	8007d9c <LoopCopyDataInit>

08007d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d9a:	3104      	adds	r1, #4

08007d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007d9c:	480b      	ldr	r0, [pc, #44]	; (8007dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007da4:	d3f6      	bcc.n	8007d94 <CopyDataInit>
  ldr  r2, =_sbss
 8007da6:	4a0b      	ldr	r2, [pc, #44]	; (8007dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007da8:	e002      	b.n	8007db0 <LoopFillZerobss>

08007daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007dac:	f842 3b04 	str.w	r3, [r2], #4

08007db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007db0:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007db4:	d3f9      	bcc.n	8007daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007db6:	f7fe fc6b 	bl	8006690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dba:	f01b ffe7 	bl	8023d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dbe:	f7fb fac5 	bl	800334c <main>
  bx  lr    
 8007dc2:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8007dc4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007dc8:	08045dfc 	.word	0x08045dfc
  ldr  r0, =_sdata
 8007dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007dd0:	200006bc 	.word	0x200006bc
  ldr  r2, =_sbss
 8007dd4:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 8007dd8:	2002f89c 	.word	0x2002f89c

08007ddc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ddc:	e7fe      	b.n	8007ddc <CAN1_RX0_IRQHandler>
 8007dde:	Address 0x0000000008007dde is out of bounds.


08007de0 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007de0:	4a07      	ldr	r2, [pc, #28]	; (8007e00 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007de2:	2003      	movs	r0, #3
{
 8007de4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dee:	f000 fc4f 	bl	8008690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7fe fb18 	bl	8006428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007df8:	f7fd fb96 	bl	8005528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	bd08      	pop	{r3, pc}
 8007e00:	40023c00 	.word	0x40023c00

08007e04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007e04:	4a03      	ldr	r2, [pc, #12]	; (8007e14 <HAL_IncTick+0x10>)
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <HAL_IncTick+0x14>)
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	6013      	str	r3, [r2, #0]
}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20002ec4 	.word	0x20002ec4
 8007e18:	200002dc 	.word	0x200002dc

08007e1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007e1c:	4b01      	ldr	r3, [pc, #4]	; (8007e24 <HAL_GetTick+0x8>)
 8007e1e:	6818      	ldr	r0, [r3, #0]
}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20002ec4 	.word	0x20002ec4

08007e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e2c:	f7ff fff6 	bl	8007e1c <HAL_GetTick>
 8007e30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e32:	1c63      	adds	r3, r4, #1
 8007e34:	d002      	beq.n	8007e3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <HAL_Delay+0x20>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e3c:	f7ff ffee 	bl	8007e1c <HAL_GetTick>
 8007e40:	1b43      	subs	r3, r0, r5
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	d3fa      	bcc.n	8007e3c <HAL_Delay+0x14>
  {
  }
}
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	200002dc 	.word	0x200002dc

08007e4c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f000 8144 	beq.w	80080da <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	49a7      	ldr	r1, [pc, #668]	; (80080f4 <HAL_ADC_Init+0x2a8>)
 8007e56:	4aa8      	ldr	r2, [pc, #672]	; (80080f8 <HAL_ADC_Init+0x2ac>)
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf18      	it	ne
 8007e5c:	4293      	cmpne	r3, r2
{
 8007e5e:	b570      	push	{r4, r5, r6, lr}
 8007e60:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007e62:	d003      	beq.n	8007e6c <HAL_ADC_Init+0x20>
 8007e64:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d177      	bne.n	8007f5c <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007e72:	d17c      	bne.n	8007f6e <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007e74:	68a3      	ldr	r3, [r4, #8]
 8007e76:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007e7a:	f040 8082 	bne.w	8007f82 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d84e      	bhi.n	8007f22 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007e84:	69a3      	ldr	r3, [r4, #24]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d845      	bhi.n	8007f16 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007e8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007e8c:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007e90:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8007e94:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007e98:	bf18      	it	ne
 8007e9a:	2900      	cmpne	r1, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	f003 0301 	andne.w	r3, r3, #1
 8007eae:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2300      	moveq	r3, #0
 8007eb6:	f003 0301 	andne.w	r3, r3, #1
 8007eba:	b123      	cbz	r3, 8007ec6 <HAL_ADC_Init+0x7a>
 8007ebc:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	f200 8111 	bhi.w	80080e8 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007ecc:	d165      	bne.n	8007f9a <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007ece:	69e3      	ldr	r3, [r4, #28]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d85b      	bhi.n	8007f8e <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007ed6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d830      	bhi.n	8007f40 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007ede:	6963      	ldr	r3, [r4, #20]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d835      	bhi.n	8007f50 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007ee4:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d823      	bhi.n	8007f34 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007eec:	4b83      	ldr	r3, [pc, #524]	; (80080fc <HAL_ADC_Init+0x2b0>)
 8007eee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d004      	beq.n	8007efe <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ef6:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007efa:	f040 80e8 	bne.w	80080ce <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007efe:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	f000 80d4 	beq.w	80080ae <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f08:	06db      	lsls	r3, r3, #27
 8007f0a:	d54c      	bpl.n	8007fa6 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f0c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8007f0e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007f10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007f16:	f240 1151 	movw	r1, #337	; 0x151
 8007f1a:	4879      	ldr	r0, [pc, #484]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f1c:	f7fc f9aa 	bl	8004274 <assert_failed>
 8007f20:	e7b3      	b.n	8007e8a <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007f22:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007f26:	4876      	ldr	r0, [pc, #472]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f28:	f7fc f9a4 	bl	8004274 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007f2c:	69a3      	ldr	r3, [r4, #24]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d9ab      	bls.n	8007e8a <HAL_ADC_Init+0x3e>
 8007f32:	e7f0      	b.n	8007f16 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007f34:	f240 1157 	movw	r1, #343	; 0x157
 8007f38:	4871      	ldr	r0, [pc, #452]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f3a:	f7fc f99b 	bl	8004274 <assert_failed>
 8007f3e:	e7d5      	b.n	8007eec <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007f40:	f240 1155 	movw	r1, #341	; 0x155
 8007f44:	486e      	ldr	r0, [pc, #440]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f46:	f7fc f995 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d9c9      	bls.n	8007ee4 <HAL_ADC_Init+0x98>
 8007f50:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8007f54:	486a      	ldr	r0, [pc, #424]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f56:	f7fc f98d 	bl	8004274 <assert_failed>
 8007f5a:	e7c3      	b.n	8007ee4 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007f5c:	f240 114d 	movw	r1, #333	; 0x14d
 8007f60:	4867      	ldr	r0, [pc, #412]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f62:	f7fc f987 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007f6c:	d082      	beq.n	8007e74 <HAL_ADC_Init+0x28>
 8007f6e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007f72:	4863      	ldr	r0, [pc, #396]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f74:	f7fc f97e 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007f78:	68a3      	ldr	r3, [r4, #8]
 8007f7a:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007f7e:	f43f af7e 	beq.w	8007e7e <HAL_ADC_Init+0x32>
 8007f82:	f240 114f 	movw	r1, #335	; 0x14f
 8007f86:	485e      	ldr	r0, [pc, #376]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f88:	f7fc f974 	bl	8004274 <assert_failed>
 8007f8c:	e777      	b.n	8007e7e <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007f8e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007f92:	485b      	ldr	r0, [pc, #364]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007f94:	f7fc f96e 	bl	8004274 <assert_failed>
 8007f98:	e79d      	b.n	8007ed6 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007f9a:	f240 1153 	movw	r1, #339	; 0x153
 8007f9e:	4858      	ldr	r0, [pc, #352]	; (8008100 <HAL_ADC_Init+0x2b4>)
 8007fa0:	f7fc f968 	bl	8004274 <assert_failed>
 8007fa4:	e793      	b.n	8007ece <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8007fa6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fa8:	4b56      	ldr	r3, [pc, #344]	; (8008104 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007faa:	4a57      	ldr	r2, [pc, #348]	; (8008108 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8007fac:	400b      	ands	r3, r1
 8007fae:	f043 0302 	orr.w	r3, r3, #2
 8007fb2:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007fb4:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007fb6:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007fb8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8007fbc:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007fbe:	6851      	ldr	r1, [r2, #4]
 8007fc0:	6860      	ldr	r0, [r4, #4]
 8007fc2:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007fc4:	484d      	ldr	r0, [pc, #308]	; (80080fc <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007fc6:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007fc8:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007fca:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007fcc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007fd0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fd8:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007fda:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fe2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fe4:	6859      	ldr	r1, [r3, #4]
 8007fe6:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fe8:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fea:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007fec:	6899      	ldr	r1, [r3, #8]
 8007fee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007ff2:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007ff6:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff8:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007ffa:	ea42 0205 	orr.w	r2, r2, r5
 8007ffe:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008000:	d05c      	beq.n	80080bc <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008002:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008004:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008006:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800800a:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	4311      	orrs	r1, r2
 8008010:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008012:	6899      	ldr	r1, [r3, #8]
 8008014:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8008018:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	432a      	orrs	r2, r5
 800801e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008020:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008022:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008024:	f021 0102 	bic.w	r1, r1, #2
 8008028:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8008030:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008032:	f894 2020 	ldrb.w	r2, [r4, #32]
 8008036:	2a00      	cmp	r2, #0
 8008038:	d051      	beq.n	80080de <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800803a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800803c:	3a01      	subs	r2, #1
 800803e:	2a07      	cmp	r2, #7
 8008040:	d864      	bhi.n	800810c <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008042:	6859      	ldr	r1, [r3, #4]
 8008044:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008048:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800804a:	6859      	ldr	r1, [r3, #4]
 800804c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8008050:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008052:	6859      	ldr	r1, [r3, #4]
 8008054:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8008058:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 800805c:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800805e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008060:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008064:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008066:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008068:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800806a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800806c:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008070:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008072:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800807a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800807c:	6899      	ldr	r1, [r3, #8]
 800807e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8008082:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8008086:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008088:	6899      	ldr	r1, [r3, #8]
 800808a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800808e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8008096:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8008098:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800809a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80080a6:	2300      	movs	r3, #0
 80080a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7fd fa72 	bl	8005598 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80080b4:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80080b6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 80080ba:	e724      	b.n	8007f06 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80080ca:	609a      	str	r2, [r3, #8]
 80080cc:	e7a8      	b.n	8008020 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80080ce:	f240 115b 	movw	r1, #347	; 0x15b
 80080d2:	480b      	ldr	r0, [pc, #44]	; (8008100 <HAL_ADC_Init+0x2b4>)
 80080d4:	f7fc f8ce 	bl	8004274 <assert_failed>
 80080d8:	e711      	b.n	8007efe <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 80080da:	2001      	movs	r0, #1
}
 80080dc:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080e4:	605a      	str	r2, [r3, #4]
 80080e6:	e7b8      	b.n	800805a <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80080e8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80080ec:	4804      	ldr	r0, [pc, #16]	; (8008100 <HAL_ADC_Init+0x2b4>)
 80080ee:	f7fc f8c1 	bl	8004274 <assert_failed>
 80080f2:	e6e8      	b.n	8007ec6 <HAL_ADC_Init+0x7a>
 80080f4:	40012000 	.word	0x40012000
 80080f8:	40012100 	.word	0x40012100
 80080fc:	0f000001 	.word	0x0f000001
 8008100:	0802c0b0 	.word	0x0802c0b0
 8008104:	ffffeefd 	.word	0xffffeefd
 8008108:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800810c:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8008110:	4803      	ldr	r0, [pc, #12]	; (8008120 <HAL_ADC_Init+0x2d4>)
 8008112:	f7fc f8af 	bl	8004274 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008116:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008118:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800811a:	3a01      	subs	r2, #1
 800811c:	e791      	b.n	8008042 <HAL_ADC_Init+0x1f6>
 800811e:	bf00      	nop
 8008120:	0802c0b0 	.word	0x0802c0b0

08008124 <HAL_ADC_Start>:
{
 8008124:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8008126:	2300      	movs	r3, #0
{
 8008128:	b082      	sub	sp, #8
 800812a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800812c:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800812e:	6983      	ldr	r3, [r0, #24]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d904      	bls.n	800813e <HAL_ADC_Start+0x1a>
 8008134:	f240 21df 	movw	r1, #735	; 0x2df
 8008138:	4848      	ldr	r0, [pc, #288]	; (800825c <HAL_ADC_Start+0x138>)
 800813a:	f7fc f89b 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800813e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008140:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8008144:	d174      	bne.n	8008230 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 8008146:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800814a:	2b01      	cmp	r3, #1
 800814c:	d079      	beq.n	8008242 <HAL_ADC_Start+0x11e>
 800814e:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008150:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8008152:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008156:	6893      	ldr	r3, [r2, #8]
 8008158:	07d8      	lsls	r0, r3, #31
 800815a:	d414      	bmi.n	8008186 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800815c:	4b40      	ldr	r3, [pc, #256]	; (8008260 <HAL_ADC_Start+0x13c>)
 800815e:	4841      	ldr	r0, [pc, #260]	; (8008264 <HAL_ADC_Start+0x140>)
 8008160:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8008162:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008164:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8008168:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800816c:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800816e:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008174:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	b12b      	cbz	r3, 8008186 <HAL_ADC_Start+0x62>
      counter--;
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f9      	bne.n	800817a <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008186:	6890      	ldr	r0, [r2, #8]
 8008188:	f010 0001 	ands.w	r0, r0, #1
 800818c:	d02c      	beq.n	80081e8 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 800818e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008190:	4b35      	ldr	r3, [pc, #212]	; (8008268 <HAL_ADC_Start+0x144>)
 8008192:	400b      	ands	r3, r1
 8008194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008198:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800819a:	6853      	ldr	r3, [r2, #4]
 800819c:	0559      	lsls	r1, r3, #21
 800819e:	d505      	bpl.n	80081ac <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081aa:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ae:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80081b2:	d02f      	beq.n	8008214 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80081b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081b6:	f023 0306 	bic.w	r3, r3, #6
 80081ba:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80081bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80081c0:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80081c2:	4b2a      	ldr	r3, [pc, #168]	; (800826c <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 80081c4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80081c8:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80081ca:	6858      	ldr	r0, [r3, #4]
 80081cc:	f010 001f 	ands.w	r0, r0, #31
 80081d0:	d114      	bne.n	80081fc <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80081d2:	6893      	ldr	r3, [r2, #8]
 80081d4:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80081d8:	d10e      	bne.n	80081f8 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081da:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 80081dc:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80081e2:	6091      	str	r1, [r2, #8]
}
 80081e4:	b002      	add	sp, #8
 80081e6:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ea:	f043 0310 	orr.w	r3, r3, #16
 80081ee:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80081f8:	b002      	add	sp, #8
 80081fa:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80081fc:	481c      	ldr	r0, [pc, #112]	; (8008270 <HAL_ADC_Start+0x14c>)
 80081fe:	4282      	cmp	r2, r0
 8008200:	d00a      	beq.n	8008218 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008202:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008204:	06db      	lsls	r3, r3, #27
 8008206:	d402      	bmi.n	800820e <HAL_ADC_Start+0xea>
 8008208:	4c1a      	ldr	r4, [pc, #104]	; (8008274 <HAL_ADC_Start+0x150>)
 800820a:	42a2      	cmp	r2, r4
 800820c:	d01c      	beq.n	8008248 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800820e:	2000      	movs	r0, #0
}
 8008210:	b002      	add	sp, #8
 8008212:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8008214:	6463      	str	r3, [r4, #68]	; 0x44
 8008216:	e7d1      	b.n	80081bc <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008218:	6893      	ldr	r3, [r2, #8]
 800821a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800821e:	d103      	bne.n	8008228 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008220:	6893      	ldr	r3, [r2, #8]
 8008222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008226:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008228:	4b10      	ldr	r3, [pc, #64]	; (800826c <HAL_ADC_Start+0x148>)
  return HAL_OK;
 800822a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800822c:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800822e:	e7e3      	b.n	80081f8 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8008230:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8008234:	4809      	ldr	r0, [pc, #36]	; (800825c <HAL_ADC_Start+0x138>)
 8008236:	f7fc f81d 	bl	8004274 <assert_failed>
  __HAL_LOCK(hadc);
 800823a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d185      	bne.n	800814e <HAL_ADC_Start+0x2a>
 8008242:	2002      	movs	r0, #2
}
 8008244:	b002      	add	sp, #8
 8008246:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008248:	68a0      	ldr	r0, [r4, #8]
 800824a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800824e:	d1de      	bne.n	800820e <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008250:	68a3      	ldr	r3, [r4, #8]
 8008252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	e7ce      	b.n	80081f8 <HAL_ADC_Start+0xd4>
 800825a:	bf00      	nop
 800825c:	0802c0b0 	.word	0x0802c0b0
 8008260:	2000027c 	.word	0x2000027c
 8008264:	431bde83 	.word	0x431bde83
 8008268:	fffff8fe 	.word	0xfffff8fe
 800826c:	40012300 	.word	0x40012300
 8008270:	40012000 	.word	0x40012000
 8008274:	40012200 	.word	0x40012200

08008278 <HAL_ADC_ConvCpltCallback>:
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <HAL_ADC_LevelOutOfWindowCallback>:
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <HAL_ADC_ErrorCallback>:
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008284:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008286:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008288:	2a01      	cmp	r2, #1
{
 800828a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800828c:	681d      	ldr	r5, [r3, #0]
{
 800828e:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008290:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008292:	d904      	bls.n	800829e <HAL_ADC_IRQHandler+0x1a>
 8008294:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8008298:	4851      	ldr	r0, [pc, #324]	; (80083e0 <HAL_ADC_IRQHandler+0x15c>)
 800829a:	f7fb ffeb 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800829e:	69e3      	ldr	r3, [r4, #28]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	f200 8086 	bhi.w	80083b4 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80082a8:	6963      	ldr	r3, [r4, #20]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d87c      	bhi.n	80083a8 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80082ae:	07ab      	lsls	r3, r5, #30
 80082b0:	d52c      	bpl.n	800830c <HAL_ADC_IRQHandler+0x88>
 80082b2:	06b0      	lsls	r0, r6, #26
 80082b4:	d52a      	bpl.n	800830c <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80082b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082b8:	06d9      	lsls	r1, r3, #27
 80082ba:	d403      	bmi.n	80082c4 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80082bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082c2:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80082cc:	d117      	bne.n	80082fe <HAL_ADC_IRQHandler+0x7a>
 80082ce:	69a2      	ldr	r2, [r4, #24]
 80082d0:	b9aa      	cbnz	r2, 80082fe <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80082d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80082d4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80082d8:	d002      	beq.n	80082e0 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80082da:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80082dc:	0552      	lsls	r2, r2, #21
 80082de:	d40e      	bmi.n	80082fe <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	f022 0220 	bic.w	r2, r2, #32
 80082e6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80082e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082ee:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80082f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f2:	04d8      	lsls	r0, r3, #19
 80082f4:	d403      	bmi.n	80082fe <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff ffba 	bl	8008278 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	f06f 0212 	mvn.w	r2, #18
 800830a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800830c:	0769      	lsls	r1, r5, #29
 800830e:	d530      	bpl.n	8008372 <HAL_ADC_IRQHandler+0xee>
 8008310:	0632      	lsls	r2, r6, #24
 8008312:	d52e      	bpl.n	8008372 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008316:	06db      	lsls	r3, r3, #27
 8008318:	d403      	bmi.n	8008322 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800831a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800831c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008320:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800832a:	d11b      	bne.n	8008364 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800832c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800832e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008332:	d151      	bne.n	80083d8 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008334:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008336:	0551      	lsls	r1, r2, #21
 8008338:	d414      	bmi.n	8008364 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800833a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800833c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008340:	d110      	bne.n	8008364 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008342:	69a2      	ldr	r2, [r4, #24]
 8008344:	b972      	cbnz	r2, 8008364 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800834c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800834e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008354:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008358:	05da      	lsls	r2, r3, #23
 800835a:	d403      	bmi.n	8008364 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800835c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008364:	4620      	mov	r0, r4
 8008366:	f000 f92f 	bl	80085c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	f06f 020c 	mvn.w	r2, #12
 8008370:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008372:	0673      	lsls	r3, r6, #25
 8008374:	d505      	bpl.n	8008382 <HAL_ADC_IRQHandler+0xfe>
 8008376:	07e8      	lsls	r0, r5, #31
 8008378:	d503      	bpl.n	8008382 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	07d9      	lsls	r1, r3, #31
 8008380:	d41e      	bmi.n	80083c0 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8008382:	06aa      	lsls	r2, r5, #26
 8008384:	d501      	bpl.n	800838a <HAL_ADC_IRQHandler+0x106>
 8008386:	0173      	lsls	r3, r6, #5
 8008388:	d400      	bmi.n	800838c <HAL_ADC_IRQHandler+0x108>
}
 800838a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800838c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800838e:	f06f 0520 	mvn.w	r5, #32
 8008392:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008394:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008396:	f043 0302 	orr.w	r3, r3, #2
 800839a:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800839c:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800839e:	f7ff ff6f 	bl	8008280 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	601d      	str	r5, [r3, #0]
}
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80083a8:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80083ac:	480c      	ldr	r0, [pc, #48]	; (80083e0 <HAL_ADC_IRQHandler+0x15c>)
 80083ae:	f7fb ff61 	bl	8004274 <assert_failed>
 80083b2:	e77c      	b.n	80082ae <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80083b4:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80083b8:	4809      	ldr	r0, [pc, #36]	; (80083e0 <HAL_ADC_IRQHandler+0x15c>)
 80083ba:	f7fb ff5b 	bl	8004274 <assert_failed>
 80083be:	e773      	b.n	80082a8 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80083c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80083c2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80083c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80083ca:	f7ff ff57 	bl	800827c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	f06f 0201 	mvn.w	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	e7d4      	b.n	8008382 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80083d8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80083da:	0550      	lsls	r0, r2, #21
 80083dc:	d4c2      	bmi.n	8008364 <HAL_ADC_IRQHandler+0xe0>
 80083de:	e7a9      	b.n	8008334 <HAL_ADC_IRQHandler+0xb0>
 80083e0:	0802c0b0 	.word	0x0802c0b0

080083e4 <HAL_ADC_ConfigChannel>:
{
 80083e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80083e6:	2300      	movs	r3, #0
{
 80083e8:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80083ea:	4a71      	ldr	r2, [pc, #452]	; (80085b0 <HAL_ADC_ConfigChannel+0x1cc>)
{
 80083ec:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 80083ee:	9301      	str	r3, [sp, #4]
{
 80083f0:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80083f2:	680b      	ldr	r3, [r1, #0]
 80083f4:	4293      	cmp	r3, r2
 80083f6:	bf18      	it	ne
 80083f8:	2b12      	cmpne	r3, #18
 80083fa:	d902      	bls.n	8008402 <HAL_ADC_ConfigChannel+0x1e>
 80083fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008400:	d142      	bne.n	8008488 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008402:	6863      	ldr	r3, [r4, #4]
 8008404:	3b01      	subs	r3, #1
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d847      	bhi.n	800849a <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	2b07      	cmp	r3, #7
 800840e:	d84c      	bhi.n	80084aa <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8008410:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d051      	beq.n	80084bc <HAL_ADC_ConfigChannel+0xd8>
 8008418:	2301      	movs	r3, #1
 800841a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800841e:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008420:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008422:	2809      	cmp	r0, #9
 8008424:	d94d      	bls.n	80084c2 <HAL_ADC_ConfigChannel+0xde>
 8008426:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800842a:	d04a      	beq.n	80084c2 <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800842c:	b281      	uxth	r1, r0
 800842e:	f04f 0c07 	mov.w	ip, #7
 8008432:	68de      	ldr	r6, [r3, #12]
 8008434:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008438:	4f5d      	ldr	r7, [pc, #372]	; (80085b0 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800843a:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800843c:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800843e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008442:	ea26 060c 	bic.w	r6, r6, ip
 8008446:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008448:	f000 8083 	beq.w	8008552 <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800844c:	68a6      	ldr	r6, [r4, #8]
 800844e:	4096      	lsls	r6, r2
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	4316      	orrs	r6, r2
 8008454:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8008456:	6862      	ldr	r2, [r4, #4]
 8008458:	2a06      	cmp	r2, #6
 800845a:	d846      	bhi.n	80084ea <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800845c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008460:	241f      	movs	r4, #31
 8008462:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008464:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008466:	4094      	lsls	r4, r2
 8008468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800846a:	ea22 0204 	bic.w	r2, r2, r4
 800846e:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008472:	4311      	orrs	r1, r2
 8008474:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008476:	4a4f      	ldr	r2, [pc, #316]	; (80085b4 <HAL_ADC_ConfigChannel+0x1d0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d048      	beq.n	800850e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 800847c:	2300      	movs	r3, #0
  return HAL_OK;
 800847e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8008480:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8008484:	b003      	add	sp, #12
 8008486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008488:	f240 618b 	movw	r1, #1675	; 0x68b
 800848c:	484a      	ldr	r0, [pc, #296]	; (80085b8 <HAL_ADC_ConfigChannel+0x1d4>)
 800848e:	f7fb fef1 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	3b01      	subs	r3, #1
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d9b7      	bls.n	800840a <HAL_ADC_ConfigChannel+0x26>
 800849a:	f240 618c 	movw	r1, #1676	; 0x68c
 800849e:	4846      	ldr	r0, [pc, #280]	; (80085b8 <HAL_ADC_ConfigChannel+0x1d4>)
 80084a0:	f7fb fee8 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	d9b2      	bls.n	8008410 <HAL_ADC_ConfigChannel+0x2c>
 80084aa:	f240 618d 	movw	r1, #1677	; 0x68d
 80084ae:	4842      	ldr	r0, [pc, #264]	; (80085b8 <HAL_ADC_ConfigChannel+0x1d4>)
 80084b0:	f7fb fee0 	bl	8004274 <assert_failed>
  __HAL_LOCK(hadc);
 80084b4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d1ad      	bne.n	8008418 <HAL_ADC_ConfigChannel+0x34>
 80084bc:	2002      	movs	r0, #2
}
 80084be:	b003      	add	sp, #12
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80084c2:	b281      	uxth	r1, r0
 80084c4:	f04f 0c07 	mov.w	ip, #7
 80084c8:	691e      	ldr	r6, [r3, #16]
 80084ca:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80084ce:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80084d0:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80084d4:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80084d8:	ea26 060c 	bic.w	r6, r6, ip
 80084dc:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80084de:	691e      	ldr	r6, [r3, #16]
 80084e0:	4332      	orrs	r2, r6
 80084e2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	2a06      	cmp	r2, #6
 80084e8:	d9b8      	bls.n	800845c <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 80084ea:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 80084f0:	d81c      	bhi.n	800852c <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084f2:	3a23      	subs	r2, #35	; 0x23
 80084f4:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80084f6:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084f8:	4094      	lsls	r4, r2
 80084fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fc:	ea22 0204 	bic.w	r2, r2, r4
 8008500:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008504:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008506:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <HAL_ADC_ConfigChannel+0x1d0>)
 8008508:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800850a:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800850c:	d1b6      	bne.n	800847c <HAL_ADC_ConfigChannel+0x98>
 800850e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008512:	d017      	beq.n	8008544 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008514:	2812      	cmp	r0, #18
 8008516:	d123      	bne.n	8008560 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008518:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_ADC_ConfigChannel+0x1d8>)
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008520:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008528:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800852a:	e7a7      	b.n	800847c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800852c:	3a41      	subs	r2, #65	; 0x41
 800852e:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008530:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008532:	4094      	lsls	r4, r2
 8008534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008536:	ea22 0204 	bic.w	r2, r2, r4
 800853a:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800853c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853e:	4311      	orrs	r1, r2
 8008540:	62d9      	str	r1, [r3, #44]	; 0x2c
 8008542:	e798      	b.n	8008476 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008544:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8008548:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800854c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008550:	e794      	b.n	800847c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008552:	68a1      	ldr	r1, [r4, #8]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800855a:	2112      	movs	r1, #18
 800855c:	60da      	str	r2, [r3, #12]
 800855e:	e77a      	b.n	8008456 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008560:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <HAL_ADC_ConfigChannel+0x1cc>)
 8008562:	4298      	cmp	r0, r3
 8008564:	d001      	beq.n	800856a <HAL_ADC_ConfigChannel+0x186>
 8008566:	2811      	cmp	r0, #17
 8008568:	d188      	bne.n	800847c <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800856c:	4910      	ldr	r1, [pc, #64]	; (80085b0 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 800856e:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008570:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008572:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8008576:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800857e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008580:	f47f af7c 	bne.w	800847c <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <HAL_ADC_ConfigChannel+0x1dc>)
 8008586:	4a0f      	ldr	r2, [pc, #60]	; (80085c4 <HAL_ADC_ConfigChannel+0x1e0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	0c9b      	lsrs	r3, r3, #18
 8008590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f43f af6e 	beq.w	800847c <HAL_ADC_ConfigChannel+0x98>
        counter--;
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f9      	bne.n	80085a0 <HAL_ADC_ConfigChannel+0x1bc>
 80085ac:	e766      	b.n	800847c <HAL_ADC_ConfigChannel+0x98>
 80085ae:	bf00      	nop
 80085b0:	10000012 	.word	0x10000012
 80085b4:	40012000 	.word	0x40012000
 80085b8:	0802c0b0 	.word	0x0802c0b0
 80085bc:	40012300 	.word	0x40012300
 80085c0:	2000027c 	.word	0x2000027c
 80085c4:	431bde83 	.word	0x431bde83

080085c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop

080085cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80085cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 80085ce:	680b      	ldr	r3, [r1, #0]
{
 80085d0:	460c      	mov	r4, r1
 80085d2:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 80085d4:	2b19      	cmp	r3, #25
 80085d6:	d93e      	bls.n	8008656 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80085d8:	f240 31af 	movw	r1, #943	; 0x3af
 80085dc:	4829      	ldr	r0, [pc, #164]	; (8008684 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80085de:	f7fb fe49 	bl	8004274 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80085e8:	d13e      	bne.n	8008668 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085f4:	bf18      	it	ne
 80085f6:	2b00      	cmpne	r3, #0
 80085f8:	bf14      	ite	ne
 80085fa:	2201      	movne	r2, #1
 80085fc:	2200      	moveq	r2, #0
 80085fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008602:	bf0c      	ite	eq
 8008604:	2200      	moveq	r2, #0
 8008606:	f002 0201 	andne.w	r2, r2, #1
 800860a:	b112      	cbz	r2, 8008612 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800860c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008610:	d132      	bne.n	8008678 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008612:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d02c      	beq.n	8008674 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	f022 021f 	bic.w	r2, r2, #31
 8008622:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008632:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	6861      	ldr	r1, [r4, #4]
 8008638:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800863a:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 800863c:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008644:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8008646:	68a0      	ldr	r0, [r4, #8]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 800864c:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 800864e:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8008650:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8008654:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008656:	4a0d      	ldr	r2, [pc, #52]	; (800868c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
 800865c:	07db      	lsls	r3, r3, #31
 800865e:	d5bb      	bpl.n	80085d8 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008666:	d0c0      	beq.n	80085ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008668:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800866c:	4805      	ldr	r0, [pc, #20]	; (8008684 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800866e:	f7fb fe01 	bl	8004274 <assert_failed>
 8008672:	e7ba      	b.n	80085ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8008674:	2002      	movs	r0, #2
}
 8008676:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8008678:	f240 31b1 	movw	r1, #945	; 0x3b1
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800867e:	f7fb fdf9 	bl	8004274 <assert_failed>
 8008682:	e7c6      	b.n	8008612 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008684:	0802c0e8 	.word	0x0802c0e8
 8008688:	40012300 	.word	0x40012300
 800868c:	02e602e7 	.word	0x02e602e7

08008690 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008690:	1ec3      	subs	r3, r0, #3
 8008692:	2b04      	cmp	r3, #4
{
 8008694:	b510      	push	{r4, lr}
 8008696:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008698:	d80c      	bhi.n	80086b4 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800869a:	4909      	ldr	r1, [pc, #36]	; (80086c0 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800869c:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800869e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086a6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086aa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086ac:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 80086ae:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80086b0:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80086b2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80086b4:	2191      	movs	r1, #145	; 0x91
 80086b6:	4804      	ldr	r0, [pc, #16]	; (80086c8 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80086b8:	f7fb fddc 	bl	8004274 <assert_failed>
 80086bc:	e7ed      	b.n	800869a <HAL_NVIC_SetPriorityGrouping+0xa>
 80086be:	bf00      	nop
 80086c0:	e000ed00 	.word	0xe000ed00
 80086c4:	05fa0000 	.word	0x05fa0000
 80086c8:	0802c124 	.word	0x0802c124

080086cc <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80086cc:	2a0f      	cmp	r2, #15
{ 
 80086ce:	b570      	push	{r4, r5, r6, lr}
 80086d0:	4616      	mov	r6, r2
 80086d2:	4605      	mov	r5, r0
 80086d4:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80086d6:	d836      	bhi.n	8008746 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80086d8:	2c0f      	cmp	r4, #15
 80086da:	d82f      	bhi.n	800873c <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086dc:	4b1c      	ldr	r3, [pc, #112]	; (8008750 <HAL_NVIC_SetPriority+0x84>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086e4:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086e8:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086ea:	2804      	cmp	r0, #4
 80086ec:	bf28      	it	cs
 80086ee:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086f0:	2a06      	cmp	r2, #6
 80086f2:	d918      	bls.n	8008726 <HAL_NVIC_SetPriority+0x5a>
 80086f4:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	409a      	lsls	r2, r3
 80086fc:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008700:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008704:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008706:	fa01 f100 	lsl.w	r1, r1, r0
 800870a:	ea24 0401 	bic.w	r4, r4, r1
 800870e:	fa04 f403 	lsl.w	r4, r4, r3
 8008712:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8008716:	db09      	blt.n	800872c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008718:	0124      	lsls	r4, r4, #4
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <HAL_NVIC_SetPriority+0x88>)
 800871c:	b2e4      	uxtb	r4, r4
 800871e:	442b      	add	r3, r5
 8008720:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008728:	4633      	mov	r3, r6
 800872a:	e7e9      	b.n	8008700 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800872c:	f005 050f 	and.w	r5, r5, #15
 8008730:	0124      	lsls	r4, r4, #4
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <HAL_NVIC_SetPriority+0x8c>)
 8008734:	b2e4      	uxtb	r4, r4
 8008736:	442b      	add	r3, r5
 8008738:	761c      	strb	r4, [r3, #24]
 800873a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800873c:	21aa      	movs	r1, #170	; 0xaa
 800873e:	4807      	ldr	r0, [pc, #28]	; (800875c <HAL_NVIC_SetPriority+0x90>)
 8008740:	f7fb fd98 	bl	8004274 <assert_failed>
 8008744:	e7ca      	b.n	80086dc <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008746:	21a9      	movs	r1, #169	; 0xa9
 8008748:	4804      	ldr	r0, [pc, #16]	; (800875c <HAL_NVIC_SetPriority+0x90>)
 800874a:	f7fb fd93 	bl	8004274 <assert_failed>
 800874e:	e7c3      	b.n	80086d8 <HAL_NVIC_SetPriority+0xc>
 8008750:	e000ed00 	.word	0xe000ed00
 8008754:	e000e100 	.word	0xe000e100
 8008758:	e000ecfc 	.word	0xe000ecfc
 800875c:	0802c124 	.word	0x0802c124

08008760 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008760:	2800      	cmp	r0, #0
 8008762:	db08      	blt.n	8008776 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008764:	f000 011f 	and.w	r1, r0, #31
 8008768:	2301      	movs	r3, #1
 800876a:	0940      	lsrs	r0, r0, #5
 800876c:	4a04      	ldr	r2, [pc, #16]	; (8008780 <HAL_NVIC_EnableIRQ+0x20>)
 800876e:	408b      	lsls	r3, r1
 8008770:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008774:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008776:	21bd      	movs	r1, #189	; 0xbd
 8008778:	4802      	ldr	r0, [pc, #8]	; (8008784 <HAL_NVIC_EnableIRQ+0x24>)
 800877a:	f7fb bd7b 	b.w	8004274 <assert_failed>
 800877e:	bf00      	nop
 8008780:	e000e100 	.word	0xe000e100
 8008784:	0802c124 	.word	0x0802c124

08008788 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008788:	2800      	cmp	r0, #0
 800878a:	db0e      	blt.n	80087aa <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800878c:	0943      	lsrs	r3, r0, #5
 800878e:	2201      	movs	r2, #1
 8008790:	f000 001f 	and.w	r0, r0, #31
 8008794:	4907      	ldr	r1, [pc, #28]	; (80087b4 <HAL_NVIC_DisableIRQ+0x2c>)
 8008796:	3320      	adds	r3, #32
 8008798:	fa02 f000 	lsl.w	r0, r2, r0
 800879c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80087a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80087a4:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80087a8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80087aa:	21cd      	movs	r1, #205	; 0xcd
 80087ac:	4802      	ldr	r0, [pc, #8]	; (80087b8 <HAL_NVIC_DisableIRQ+0x30>)
 80087ae:	f7fb bd61 	b.w	8004274 <assert_failed>
 80087b2:	bf00      	nop
 80087b4:	e000e100 	.word	0xe000e100
 80087b8:	0802c124 	.word	0x0802c124

080087bc <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80087bc:	2800      	cmp	r0, #0
 80087be:	d075      	beq.n	80088ac <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80087c0:	4b3b      	ldr	r3, [pc, #236]	; (80088b0 <HAL_CRC_Init+0xf4>)
 80087c2:	6802      	ldr	r2, [r0, #0]
 80087c4:	429a      	cmp	r2, r3
{
 80087c6:	b510      	push	{r4, lr}
 80087c8:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80087ca:	d003      	beq.n	80087d4 <HAL_CRC_Init+0x18>
 80087cc:	2170      	movs	r1, #112	; 0x70
 80087ce:	4839      	ldr	r0, [pc, #228]	; (80088b4 <HAL_CRC_Init+0xf8>)
 80087d0:	f7fb fd50 	bl	8004274 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80087d4:	7f63      	ldrb	r3, [r4, #29]
 80087d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d055      	beq.n	800888a <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80087de:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80087e0:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80087e2:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 80087e4:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80087e6:	d838      	bhi.n	800885a <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d13d      	bne.n	8008868 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <HAL_CRC_Init+0xfc>)
 80087f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	f022 0218 	bic.w	r2, r2, #24
 80087f8:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80087fa:	7963      	ldrb	r3, [r4, #5]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d83c      	bhi.n	800887a <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008800:	b1e3      	cbz	r3, 800883c <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008808:	6962      	ldr	r2, [r4, #20]
 800880a:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 800880e:	d11d      	bne.n	800884c <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008810:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008812:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008814:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8008818:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800881a:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800881e:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008820:	d13d      	bne.n	800889e <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008822:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008824:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800882a:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800882c:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800882e:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008830:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008832:	d82f      	bhi.n	8008894 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008834:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8008836:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8008838:	7763      	strb	r3, [r4, #29]
}
 800883a:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800883c:	f04f 32ff 	mov.w	r2, #4294967295
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008844:	6962      	ldr	r2, [r4, #20]
 8008846:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 800884a:	d0e1      	beq.n	8008810 <HAL_CRC_Init+0x54>
 800884c:	219c      	movs	r1, #156	; 0x9c
 800884e:	4819      	ldr	r0, [pc, #100]	; (80088b4 <HAL_CRC_Init+0xf8>)
 8008850:	f7fb fd10 	bl	8004274 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008854:	6962      	ldr	r2, [r4, #20]
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	e7da      	b.n	8008810 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800885a:	217e      	movs	r1, #126	; 0x7e
 800885c:	4815      	ldr	r0, [pc, #84]	; (80088b4 <HAL_CRC_Init+0xf8>)
 800885e:	f7fb fd09 	bl	8004274 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008862:	7923      	ldrb	r3, [r4, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0c1      	beq.n	80087ec <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008868:	4620      	mov	r0, r4
 800886a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800886e:	f000 f825 	bl	80088bc <HAL_CRCEx_Polynomial_Set>
 8008872:	2800      	cmp	r0, #0
 8008874:	d0c1      	beq.n	80087fa <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8008876:	2001      	movs	r0, #1
}
 8008878:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 800887a:	2190      	movs	r1, #144	; 0x90
 800887c:	480d      	ldr	r0, [pc, #52]	; (80088b4 <HAL_CRC_Init+0xf8>)
 800887e:	f7fb fcf9 	bl	8004274 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008882:	7963      	ldrb	r3, [r4, #5]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1bc      	bne.n	8008802 <HAL_CRC_Init+0x46>
 8008888:	e7d8      	b.n	800883c <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 800888a:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 800888c:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 800888e:	f7fc ff25 	bl	80056dc <HAL_CRC_MspInit>
 8008892:	e7a4      	b.n	80087de <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008894:	21a5      	movs	r1, #165	; 0xa5
 8008896:	4807      	ldr	r0, [pc, #28]	; (80088b4 <HAL_CRC_Init+0xf8>)
 8008898:	f7fb fcec 	bl	8004274 <assert_failed>
 800889c:	e7ca      	b.n	8008834 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800889e:	4805      	ldr	r0, [pc, #20]	; (80088b4 <HAL_CRC_Init+0xf8>)
 80088a0:	21a0      	movs	r1, #160	; 0xa0
 80088a2:	f7fb fce7 	bl	8004274 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	69a0      	ldr	r0, [r4, #24]
 80088aa:	e7ba      	b.n	8008822 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 80088ac:	2001      	movs	r0, #1
}
 80088ae:	4770      	bx	lr
 80088b0:	40023000 	.word	0x40023000
 80088b4:	0802c160 	.word	0x0802c160
 80088b8:	04c11db7 	.word	0x04c11db7

080088bc <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80088bc:	f032 0318 	bics.w	r3, r2, #24
{
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4616      	mov	r6, r2
 80088c4:	4605      	mov	r5, r0
 80088c6:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80088c8:	d003      	beq.n	80088d2 <HAL_CRCEx_Polynomial_Set+0x16>
 80088ca:	215f      	movs	r1, #95	; 0x5f
 80088cc:	4818      	ldr	r0, [pc, #96]	; (8008930 <HAL_CRCEx_Polynomial_Set+0x74>)
 80088ce:	f7fb fcd1 	bl	8004274 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80088d2:	231e      	movs	r3, #30
 80088d4:	e001      	b.n	80088da <HAL_CRCEx_Polynomial_Set+0x1e>
 80088d6:	3b01      	subs	r3, #1
 80088d8:	d315      	bcc.n	8008906 <HAL_CRCEx_Polynomial_Set+0x4a>
 80088da:	fa24 fc03 	lsr.w	ip, r4, r3
 80088de:	f01c 0f01 	tst.w	ip, #1
 80088e2:	d0f8      	beq.n	80088d6 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80088e4:	2e18      	cmp	r6, #24
 80088e6:	d80f      	bhi.n	8008908 <HAL_CRCEx_Polynomial_Set+0x4c>
 80088e8:	e8df f006 	tbb	[pc, r6]
 80088ec:	0e0e0e12 	.word	0x0e0e0e12
 80088f0:	0e0e0e0e 	.word	0x0e0e0e0e
 80088f4:	0e0e0e1b 	.word	0x0e0e0e1b
 80088f8:	0e0e0e0e 	.word	0x0e0e0e0e
 80088fc:	0e0e0e1e 	.word	0x0e0e0e1e
 8008900:	0e0e0e0e 	.word	0x0e0e0e0e
 8008904:	10          	.byte	0x10
 8008905:	00          	.byte	0x00
 8008906:	b11e      	cbz	r6, 8008910 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008908:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800890a:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800890c:	2b06      	cmp	r3, #6
 800890e:	d8fb      	bhi.n	8008908 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008910:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008912:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008914:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008916:	688b      	ldr	r3, [r1, #8]
 8008918:	f023 0318 	bic.w	r3, r3, #24
 800891c:	4333      	orrs	r3, r6
 800891e:	608b      	str	r3, [r1, #8]
}
 8008920:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d9f4      	bls.n	8008910 <HAL_CRCEx_Polynomial_Set+0x54>
 8008926:	e7ef      	b.n	8008908 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8008928:	2b07      	cmp	r3, #7
 800892a:	d9f1      	bls.n	8008910 <HAL_CRCEx_Polynomial_Set+0x54>
 800892c:	e7ec      	b.n	8008908 <HAL_CRCEx_Polynomial_Set+0x4c>
 800892e:	bf00      	nop
 8008930:	0802c198 	.word	0x0802c198

08008934 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008934:	b1d8      	cbz	r0, 800896e <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <HAL_DAC_Init+0x40>)
 8008938:	6802      	ldr	r2, [r0, #0]
 800893a:	429a      	cmp	r2, r3
{
 800893c:	b510      	push	{r4, lr}
 800893e:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008940:	d004      	beq.n	800894c <HAL_DAC_Init+0x18>
 8008942:	f240 1115 	movw	r1, #277	; 0x115
 8008946:	480c      	ldr	r0, [pc, #48]	; (8008978 <HAL_DAC_Init+0x44>)
 8008948:	f7fb fc94 	bl	8004274 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 800894c:	7923      	ldrb	r3, [r4, #4]
 800894e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008952:	b13b      	cbz	r3, 8008964 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008954:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008956:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008958:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800895a:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800895c:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800895e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008960:	7122      	strb	r2, [r4, #4]
}
 8008962:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8008964:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8008966:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8008968:	f7fc fece 	bl	8005708 <HAL_DAC_MspInit>
 800896c:	e7f2      	b.n	8008954 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 800896e:	2001      	movs	r0, #1
}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	40007400 	.word	0x40007400
 8008978:	0802c1d4 	.word	0x0802c1d4

0800897c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008982:	f031 0310 	bics.w	r3, r1, #16
{
 8008986:	460d      	mov	r5, r1
 8008988:	4604      	mov	r4, r0
 800898a:	4617      	mov	r7, r2
 800898c:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 800898e:	d16b      	bne.n	8008a68 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008990:	f036 0304 	bics.w	r3, r6, #4
 8008994:	d001      	beq.n	800899a <HAL_DAC_Start_DMA+0x1e>
 8008996:	2e08      	cmp	r6, #8
 8008998:	d15b      	bne.n	8008a52 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 800899a:	7962      	ldrb	r2, [r4, #5]
 800899c:	2a01      	cmp	r2, #1
 800899e:	d060      	beq.n	8008a62 <HAL_DAC_Start_DMA+0xe6>
 80089a0:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80089a2:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 80089a6:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80089a8:	2302      	movs	r3, #2
 80089aa:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80089ac:	bb35      	cbnz	r5, 80089fc <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80089ae:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 80089b0:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80089b2:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80089b4:	4a39      	ldr	r2, [pc, #228]	; (8008a9c <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80089b6:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80089b8:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80089bc:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80089be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80089c2:	4a37      	ldr	r2, [pc, #220]	; (8008aa0 <HAL_DAC_Start_DMA+0x124>)
 80089c4:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80089c6:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 80089ca:	d059      	beq.n	8008a80 <HAL_DAC_Start_DMA+0x104>
 80089cc:	2e08      	cmp	r6, #8
 80089ce:	d054      	beq.n	8008a7a <HAL_DAC_Start_DMA+0xfe>
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	d04f      	beq.n	8008a74 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80089d4:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80089d6:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80089da:	4643      	mov	r3, r8
 80089dc:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80089de:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 80089e2:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80089e6:	f000 fbe3 	bl	80091b0 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80089ea:	2300      	movs	r3, #0
 80089ec:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80089ee:	b330      	cbz	r0, 8008a3e <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	f043 0304 	orr.w	r3, r3, #4
 80089f6:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80089fc:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80089fe:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a00:	4b28      	ldr	r3, [pc, #160]	; (8008aa4 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008a02:	4a29      	ldr	r2, [pc, #164]	; (8008aa8 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a04:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a06:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008a0a:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008a10:	4a26      	ldr	r2, [pc, #152]	; (8008aac <HAL_DAC_Start_DMA+0x130>)
 8008a12:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008a14:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008a18:	d03b      	beq.n	8008a92 <HAL_DAC_Start_DMA+0x116>
 8008a1a:	2e08      	cmp	r6, #8
 8008a1c:	d036      	beq.n	8008a8c <HAL_DAC_Start_DMA+0x110>
 8008a1e:	b396      	cbz	r6, 8008a86 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008a20:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008a22:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008a26:	4643      	mov	r3, r8
 8008a28:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008a2a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008a2e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008a32:	f000 fbbd 	bl	80091b0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008a36:	2300      	movs	r3, #0
 8008a38:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1d8      	bne.n	80089f0 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f005 0110 	and.w	r1, r5, #16
 8008a44:	2501      	movs	r5, #1
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	408d      	lsls	r5, r1
 8008a4a:	4315      	orrs	r5, r2
 8008a4c:	601d      	str	r5, [r3, #0]
}
 8008a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8008a52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008a56:	4816      	ldr	r0, [pc, #88]	; (8008ab0 <HAL_DAC_Start_DMA+0x134>)
 8008a58:	f7fb fc0c 	bl	8004274 <assert_failed>
  __HAL_LOCK(hdac);
 8008a5c:	7962      	ldrb	r2, [r4, #5]
 8008a5e:	2a01      	cmp	r2, #1
 8008a60:	d19e      	bne.n	80089a0 <HAL_DAC_Start_DMA+0x24>
 8008a62:	2002      	movs	r0, #2
}
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008a68:	f240 210f 	movw	r1, #527	; 0x20f
 8008a6c:	4810      	ldr	r0, [pc, #64]	; (8008ab0 <HAL_DAC_Start_DMA+0x134>)
 8008a6e:	f7fb fc01 	bl	8004274 <assert_failed>
 8008a72:	e78d      	b.n	8008990 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008a74:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008a78:	e7ad      	b.n	80089d6 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008a7a:	f10c 0210 	add.w	r2, ip, #16
        break;
 8008a7e:	e7aa      	b.n	80089d6 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008a80:	f10c 020c 	add.w	r2, ip, #12
        break;
 8008a84:	e7a7      	b.n	80089d6 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008a86:	f10c 0214 	add.w	r2, ip, #20
        break;
 8008a8a:	e7ca      	b.n	8008a22 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008a8c:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008a90:	e7c7      	b.n	8008a22 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008a92:	f10c 0218 	add.w	r2, ip, #24
        break;
 8008a96:	e7c4      	b.n	8008a22 <HAL_DAC_Start_DMA+0xa6>
 8008a98:	08008b45 	.word	0x08008b45
 8008a9c:	08008b59 	.word	0x08008b59
 8008aa0:	08008b69 	.word	0x08008b69
 8008aa4:	08008cbd 	.word	0x08008cbd
 8008aa8:	08008ccd 	.word	0x08008ccd
 8008aac:	08008cd9 	.word	0x08008cd9
 8008ab0:	0802c1d4 	.word	0x0802c1d4

08008ab4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008ab4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008ab6:	f031 0310 	bics.w	r3, r1, #16
{
 8008aba:	460d      	mov	r5, r1
 8008abc:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8008abe:	d11e      	bne.n	8008afe <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008ac0:	6803      	ldr	r3, [r0, #0]
 8008ac2:	f001 0e10 	and.w	lr, r1, #16
 8008ac6:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008aca:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8008ad2:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008ad6:	ea20 000c 	bic.w	r0, r0, ip
 8008ada:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	ea22 0201 	bic.w	r2, r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008ae4:	bb05      	cbnz	r5, 8008b28 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008ae6:	68a0      	ldr	r0, [r4, #8]
 8008ae8:	f000 fbbe 	bl	8009268 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008aec:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008aee:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008af0:	6813      	ldr	r3, [r2, #0]
 8008af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af6:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008af8:	2301      	movs	r3, #1
 8008afa:	7123      	strb	r3, [r4, #4]
}
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008afe:	f240 218f 	movw	r1, #655	; 0x28f
 8008b02:	480f      	ldr	r0, [pc, #60]	; (8008b40 <HAL_DAC_Stop_DMA+0x8c>)
 8008b04:	f7fb fbb6 	bl	8004274 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008b08:	f005 0510 	and.w	r5, r5, #16
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8008b12:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8008b18:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008b1a:	ea22 0200 	bic.w	r2, r2, r0
 8008b1e:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008b20:	681d      	ldr	r5, [r3, #0]
 8008b22:	ea25 0501 	bic.w	r5, r5, r1
 8008b26:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008b28:	68e0      	ldr	r0, [r4, #12]
 8008b2a:	f000 fb9d 	bl	8009268 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008b2e:	6822      	ldr	r2, [r4, #0]
}
 8008b30:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008b32:	6813      	ldr	r3, [r2, #0]
 8008b34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b38:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	7123      	strb	r3, [r4, #4]
}
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	0802c1d4 	.word	0x0802c1d4

08008b44 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b44:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b46:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f7fa fa9f 	bl	800308c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	7123      	strb	r3, [r4, #4]
}
 8008b52:	bd10      	pop	{r4, pc}

08008b54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop

08008b58 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008b58:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008b5a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008b5c:	f7ff fffa 	bl	8008b54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008b60:	bd08      	pop	{r3, pc}
 8008b62:	bf00      	nop

08008b64 <HAL_DAC_ErrorCallbackCh1>:
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop

08008b68 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008b68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b6a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b6c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008b6e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b70:	f043 0304 	orr.w	r3, r3, #4
 8008b74:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008b76:	f7ff fff5 	bl	8008b64 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	7123      	strb	r3, [r4, #4]
}
 8008b7e:	bd10      	pop	{r4, pc}

08008b80 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008b84:	6803      	ldr	r3, [r0, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	0491      	lsls	r1, r2, #18
{
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008b8e:	d502      	bpl.n	8008b96 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b92:	0492      	lsls	r2, r2, #18
 8008b94:	d418      	bmi.n	8008bc8 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	0091      	lsls	r1, r2, #2
 8008b9a:	d502      	bpl.n	8008ba2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	d400      	bmi.n	8008ba4 <HAL_DAC_IRQHandler+0x20>
}
 8008ba2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008ba4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008ba6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008baa:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008bac:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008bae:	6922      	ldr	r2, [r4, #16]
 8008bb0:	f042 0202 	orr.w	r2, r2, #2
 8008bb4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008bb6:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008bc2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008bc4:	f000 b878 	b.w	8008cb8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008bc8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008bce:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008bd0:	6902      	ldr	r2, [r0, #16]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008bd8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008be0:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008be2:	f7ff ffcd 	bl	8008b80 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	e7d5      	b.n	8008b96 <HAL_DAC_IRQHandler+0x12>
 8008bea:	bf00      	nop

08008bec <HAL_DAC_ConfigChannel>:
{
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008bf0:	6808      	ldr	r0, [r1, #0]
{
 8008bf2:	4616      	mov	r6, r2
 8008bf4:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008bf6:	f020 0308 	bic.w	r3, r0, #8
 8008bfa:	f020 0204 	bic.w	r2, r0, #4
 8008bfe:	2b24      	cmp	r3, #36	; 0x24
 8008c00:	bf18      	it	ne
 8008c02:	2a00      	cmpne	r2, #0
 8008c04:	f020 0210 	bic.w	r2, r0, #16
 8008c08:	bf14      	ite	ne
 8008c0a:	2301      	movne	r3, #1
 8008c0c:	2300      	moveq	r3, #0
 8008c0e:	283c      	cmp	r0, #60	; 0x3c
 8008c10:	bf0c      	ite	eq
 8008c12:	2300      	moveq	r3, #0
 8008c14:	f003 0301 	andne.w	r3, r3, #1
 8008c18:	2a0c      	cmp	r2, #12
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2300      	moveq	r3, #0
 8008c1e:	f003 0301 	andne.w	r3, r3, #1
 8008c22:	b11b      	cbz	r3, 8008c2c <HAL_DAC_ConfigChannel+0x40>
 8008c24:	f020 0020 	bic.w	r0, r0, #32
 8008c28:	2814      	cmp	r0, #20
 8008c2a:	d137      	bne.n	8008c9c <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008c2c:	686b      	ldr	r3, [r5, #4]
 8008c2e:	f033 0302 	bics.w	r3, r3, #2
 8008c32:	d12d      	bne.n	8008c90 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8008c34:	f036 0310 	bics.w	r3, r6, #16
 8008c38:	d120      	bne.n	8008c7c <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8008c3a:	7963      	ldrb	r3, [r4, #5]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d025      	beq.n	8008c8c <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008c40:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008c44:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008c46:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8008c4a:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008c4c:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008c4e:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008c52:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8008c56:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008c58:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008c5a:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c5c:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008c5e:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8008c62:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c64:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c66:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008c68:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c6a:	4082      	lsls	r2, r0
 8008c6c:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8008c6e:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c70:	ea23 0302 	bic.w	r3, r3, r2
 8008c74:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008c76:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008c78:	7165      	strb	r5, [r4, #5]
}
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008c7c:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008c80:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <HAL_DAC_ConfigChannel+0xbc>)
 8008c82:	f7fb faf7 	bl	8004274 <assert_failed>
  __HAL_LOCK(hdac);
 8008c86:	7963      	ldrb	r3, [r4, #5]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d1d9      	bne.n	8008c40 <HAL_DAC_ConfigChannel+0x54>
 8008c8c:	2002      	movs	r0, #2
}
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008c90:	f240 31a5 	movw	r1, #933	; 0x3a5
 8008c94:	4804      	ldr	r0, [pc, #16]	; (8008ca8 <HAL_DAC_ConfigChannel+0xbc>)
 8008c96:	f7fb faed 	bl	8004274 <assert_failed>
 8008c9a:	e7cb      	b.n	8008c34 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008c9c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <HAL_DAC_ConfigChannel+0xbc>)
 8008ca2:	f7fb fae7 	bl	8004274 <assert_failed>
 8008ca6:	e7c1      	b.n	8008c2c <HAL_DAC_ConfigChannel+0x40>
 8008ca8:	0802c1d4 	.word	0x0802c1d4

08008cac <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop

08008cb4 <HAL_DACEx_ErrorCallbackCh2>:
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop

08008cb8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop

08008cbc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008cbc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbe:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7ff fff3 	bl	8008cac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	7123      	strb	r3, [r4, #4]
}
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008ccc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008cce:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008cd0:	f7ff ffee 	bl	8008cb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008cd4:	bd08      	pop	{r3, pc}
 8008cd6:	bf00      	nop

08008cd8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008cd8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cda:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008cdc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008cde:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ce0:	f043 0304 	orr.w	r3, r3, #4
 8008ce4:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008ce6:	f7ff ffe5 	bl	8008cb4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cea:	2301      	movs	r3, #1
 8008cec:	7123      	strb	r3, [r4, #4]
}
 8008cee:	bd10      	pop	{r4, pc}

08008cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8008cf4:	f7ff f892 	bl	8007e1c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	f000 8156 	beq.w	8008faa <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	4605      	mov	r5, r0
 8008d02:	4bad      	ldr	r3, [pc, #692]	; (8008fb8 <HAL_DMA_Init+0x2c8>)
 8008d04:	49ad      	ldr	r1, [pc, #692]	; (8008fbc <HAL_DMA_Init+0x2cc>)
 8008d06:	429a      	cmp	r2, r3
 8008d08:	bf18      	it	ne
 8008d0a:	428a      	cmpne	r2, r1
 8008d0c:	f101 0118 	add.w	r1, r1, #24
 8008d10:	bf14      	ite	ne
 8008d12:	2301      	movne	r3, #1
 8008d14:	2300      	moveq	r3, #0
 8008d16:	428a      	cmp	r2, r1
 8008d18:	bf0c      	ite	eq
 8008d1a:	2300      	moveq	r3, #0
 8008d1c:	f003 0301 	andne.w	r3, r3, #1
 8008d20:	3118      	adds	r1, #24
 8008d22:	428a      	cmp	r2, r1
 8008d24:	bf0c      	ite	eq
 8008d26:	2300      	moveq	r3, #0
 8008d28:	f003 0301 	andne.w	r3, r3, #1
 8008d2c:	3118      	adds	r1, #24
 8008d2e:	428a      	cmp	r2, r1
 8008d30:	bf0c      	ite	eq
 8008d32:	2300      	moveq	r3, #0
 8008d34:	f003 0301 	andne.w	r3, r3, #1
 8008d38:	3118      	adds	r1, #24
 8008d3a:	428a      	cmp	r2, r1
 8008d3c:	bf0c      	ite	eq
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	f003 0301 	andne.w	r3, r3, #1
 8008d44:	3118      	adds	r1, #24
 8008d46:	428a      	cmp	r2, r1
 8008d48:	bf0c      	ite	eq
 8008d4a:	2300      	moveq	r3, #0
 8008d4c:	f003 0301 	andne.w	r3, r3, #1
 8008d50:	3118      	adds	r1, #24
 8008d52:	428a      	cmp	r2, r1
 8008d54:	bf0c      	ite	eq
 8008d56:	2300      	moveq	r3, #0
 8008d58:	f003 0301 	andne.w	r3, r3, #1
 8008d5c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8008d60:	428a      	cmp	r2, r1
 8008d62:	bf0c      	ite	eq
 8008d64:	2300      	moveq	r3, #0
 8008d66:	f003 0301 	andne.w	r3, r3, #1
 8008d6a:	3118      	adds	r1, #24
 8008d6c:	428a      	cmp	r2, r1
 8008d6e:	bf0c      	ite	eq
 8008d70:	2300      	moveq	r3, #0
 8008d72:	f003 0301 	andne.w	r3, r3, #1
 8008d76:	3118      	adds	r1, #24
 8008d78:	428a      	cmp	r2, r1
 8008d7a:	bf0c      	ite	eq
 8008d7c:	2300      	moveq	r3, #0
 8008d7e:	f003 0301 	andne.w	r3, r3, #1
 8008d82:	3118      	adds	r1, #24
 8008d84:	428a      	cmp	r2, r1
 8008d86:	bf0c      	ite	eq
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	f003 0301 	andne.w	r3, r3, #1
 8008d8e:	3118      	adds	r1, #24
 8008d90:	428a      	cmp	r2, r1
 8008d92:	bf0c      	ite	eq
 8008d94:	2300      	moveq	r3, #0
 8008d96:	f003 0301 	andne.w	r3, r3, #1
 8008d9a:	3118      	adds	r1, #24
 8008d9c:	428a      	cmp	r2, r1
 8008d9e:	bf0c      	ite	eq
 8008da0:	2300      	moveq	r3, #0
 8008da2:	f003 0301 	andne.w	r3, r3, #1
 8008da6:	3118      	adds	r1, #24
 8008da8:	428a      	cmp	r2, r1
 8008daa:	bf0c      	ite	eq
 8008dac:	2300      	moveq	r3, #0
 8008dae:	f003 0301 	andne.w	r3, r3, #1
 8008db2:	b11b      	cbz	r3, 8008dbc <HAL_DMA_Init+0xcc>
 8008db4:	4b82      	ldr	r3, [pc, #520]	; (8008fc0 <HAL_DMA_Init+0x2d0>)
 8008db6:	429a      	cmp	r2, r3
 8008db8:	f040 8139 	bne.w	800902e <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc6:	bf18      	it	ne
 8008dc8:	2b00      	cmpne	r3, #0
 8008dca:	bf14      	ite	ne
 8008dcc:	2201      	movne	r2, #1
 8008dce:	2200      	moveq	r2, #0
 8008dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dd4:	bf0c      	ite	eq
 8008dd6:	2200      	moveq	r2, #0
 8008dd8:	f002 0201 	andne.w	r2, r2, #1
 8008ddc:	b11a      	cbz	r2, 8008de6 <HAL_DMA_Init+0xf6>
 8008dde:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008de2:	f040 8129 	bne.w	8009038 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008dec:	d002      	beq.n	8008df4 <HAL_DMA_Init+0x104>
 8008dee:	2b80      	cmp	r3, #128	; 0x80
 8008df0:	f040 80a8 	bne.w	8008f44 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008df4:	68e3      	ldr	r3, [r4, #12]
 8008df6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008dfa:	f040 80ac 	bne.w	8008f56 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008e04:	f040 80b0 	bne.w	8008f68 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008e08:	6963      	ldr	r3, [r4, #20]
 8008e0a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008e0e:	d003      	beq.n	8008e18 <HAL_DMA_Init+0x128>
 8008e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e14:	f040 8091 	bne.w	8008f3a <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008e18:	69a3      	ldr	r3, [r4, #24]
 8008e1a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8008e1e:	d003      	beq.n	8008e28 <HAL_DMA_Init+0x138>
 8008e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e24:	f040 8084 	bne.w	8008f30 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008e28:	69e3      	ldr	r3, [r4, #28]
 8008e2a:	f033 0220 	bics.w	r2, r3, #32
 8008e2e:	d002      	beq.n	8008e36 <HAL_DMA_Init+0x146>
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e34:	d16f      	bne.n	8008f16 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008e36:	6a23      	ldr	r3, [r4, #32]
 8008e38:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008e3c:	d173      	bne.n	8008f26 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e40:	f033 0204 	bics.w	r2, r3, #4
 8008e44:	d15f      	bne.n	8008f06 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d14d      	bne.n	8008ee6 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e4a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8008e4c:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e4e:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 8008e50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e54:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e60:	e006      	b.n	8008e70 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e62:	f7fe ffdb 	bl	8007e1c <HAL_GetTick>
 8008e66:	1b40      	subs	r0, r0, r5
 8008e68:	2805      	cmp	r0, #5
 8008e6a:	f200 8082 	bhi.w	8008f72 <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	07d1      	lsls	r1, r2, #31
 8008e74:	d4f5      	bmi.n	8008e62 <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e76:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8008e7a:	68e1      	ldr	r1, [r4, #12]
 8008e7c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e7e:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8008e80:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e82:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e84:	6921      	ldr	r1, [r4, #16]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	6961      	ldr	r1, [r4, #20]
 8008e8a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e8c:	69e1      	ldr	r1, [r4, #28]
 8008e8e:	4302      	orrs	r2, r0
 8008e90:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008e92:	494c      	ldr	r1, [pc, #304]	; (8008fc4 <HAL_DMA_Init+0x2d4>)
 8008e94:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e96:	6a25      	ldr	r5, [r4, #32]
 8008e98:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e9a:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e9e:	2904      	cmp	r1, #4
 8008ea0:	d06e      	beq.n	8008f80 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ea4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ea6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008eaa:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008eac:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8008eae:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008eb0:	4945      	ldr	r1, [pc, #276]	; (8008fc8 <HAL_DMA_Init+0x2d8>)
 8008eb2:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008eb4:	4845      	ldr	r0, [pc, #276]	; (8008fcc <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008eb6:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8008eba:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ebc:	4a44      	ldr	r2, [pc, #272]	; (8008fd0 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ebe:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ec2:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ec6:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008eca:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ecc:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ed0:	bf88      	it	hi
 8008ed2:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ed4:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ed6:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ed8:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008eda:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8008edc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ede:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008ee0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d860      	bhi.n	8008fae <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eee:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8008ef2:	d171      	bne.n	8008fd8 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8008ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ef6:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008efa:	d0a6      	beq.n	8008e4a <HAL_DMA_Init+0x15a>
 8008efc:	21c8      	movs	r1, #200	; 0xc8
 8008efe:	4835      	ldr	r0, [pc, #212]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f00:	f7fb f9b8 	bl	8004274 <assert_failed>
 8008f04:	e7a1      	b.n	8008e4a <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008f06:	21c1      	movs	r1, #193	; 0xc1
 8008f08:	4832      	ldr	r0, [pc, #200]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f0a:	f7fb f9b3 	bl	8004274 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d09a      	beq.n	8008e4a <HAL_DMA_Init+0x15a>
 8008f14:	e7e7      	b.n	8008ee6 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008f16:	21bf      	movs	r1, #191	; 0xbf
 8008f18:	482e      	ldr	r0, [pc, #184]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f1a:	f7fb f9ab 	bl	8004274 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008f1e:	6a23      	ldr	r3, [r4, #32]
 8008f20:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008f24:	d08b      	beq.n	8008e3e <HAL_DMA_Init+0x14e>
 8008f26:	21c0      	movs	r1, #192	; 0xc0
 8008f28:	482a      	ldr	r0, [pc, #168]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f2a:	f7fb f9a3 	bl	8004274 <assert_failed>
 8008f2e:	e786      	b.n	8008e3e <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008f30:	21be      	movs	r1, #190	; 0xbe
 8008f32:	4828      	ldr	r0, [pc, #160]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f34:	f7fb f99e 	bl	8004274 <assert_failed>
 8008f38:	e776      	b.n	8008e28 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008f3a:	21bd      	movs	r1, #189	; 0xbd
 8008f3c:	4825      	ldr	r0, [pc, #148]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f3e:	f7fb f999 	bl	8004274 <assert_failed>
 8008f42:	e769      	b.n	8008e18 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008f44:	21ba      	movs	r1, #186	; 0xba
 8008f46:	4823      	ldr	r0, [pc, #140]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f48:	f7fb f994 	bl	8004274 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008f4c:	68e3      	ldr	r3, [r4, #12]
 8008f4e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008f52:	f43f af54 	beq.w	8008dfe <HAL_DMA_Init+0x10e>
 8008f56:	21bb      	movs	r1, #187	; 0xbb
 8008f58:	481e      	ldr	r0, [pc, #120]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f5a:	f7fb f98b 	bl	8004274 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008f64:	f43f af50 	beq.w	8008e08 <HAL_DMA_Init+0x118>
 8008f68:	21bc      	movs	r1, #188	; 0xbc
 8008f6a:	481a      	ldr	r0, [pc, #104]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008f6c:	f7fb f982 	bl	8004274 <assert_failed>
 8008f70:	e74a      	b.n	8008e08 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f74:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008f76:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f78:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008f7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f80:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8008f84:	4329      	orrs	r1, r5
 8008f86:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8008f88:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008f8a:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008f8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f8e:	f021 0107 	bic.w	r1, r1, #7
 8008f92:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8008f94:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	d087      	beq.n	8008eac <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f9c:	bb08      	cbnz	r0, 8008fe2 <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8008f9e:	2a01      	cmp	r2, #1
 8008fa0:	d040      	beq.n	8009024 <HAL_DMA_Init+0x334>
 8008fa2:	f032 0202 	bics.w	r2, r2, #2
 8008fa6:	d181      	bne.n	8008eac <HAL_DMA_Init+0x1bc>
 8008fa8:	e023      	b.n	8008ff2 <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 8008faa:	2001      	movs	r0, #1
}
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008fae:	21c6      	movs	r1, #198	; 0xc6
 8008fb0:	4808      	ldr	r0, [pc, #32]	; (8008fd4 <HAL_DMA_Init+0x2e4>)
 8008fb2:	f7fb f95f 	bl	8004274 <assert_failed>
 8008fb6:	e799      	b.n	8008eec <HAL_DMA_Init+0x1fc>
 8008fb8:	40026010 	.word	0x40026010
 8008fbc:	40026028 	.word	0x40026028
 8008fc0:	400264b8 	.word	0x400264b8
 8008fc4:	e010803f 	.word	0xe010803f
 8008fc8:	aaaaaaab 	.word	0xaaaaaaab
 8008fcc:	0802c244 	.word	0x0802c244
 8008fd0:	fffffc00 	.word	0xfffffc00
 8008fd4:	0802c20c 	.word	0x0802c20c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008fd8:	21c7      	movs	r1, #199	; 0xc7
 8008fda:	481a      	ldr	r0, [pc, #104]	; (8009044 <HAL_DMA_Init+0x354>)
 8008fdc:	f7fb f94a 	bl	8004274 <assert_failed>
 8008fe0:	e788      	b.n	8008ef4 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fe2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008fe6:	d00e      	beq.n	8009006 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008fe8:	2a02      	cmp	r2, #2
 8008fea:	d905      	bls.n	8008ff8 <HAL_DMA_Init+0x308>
 8008fec:	2a03      	cmp	r2, #3
 8008fee:	f47f af5d 	bne.w	8008eac <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ff2:	01ea      	lsls	r2, r5, #7
 8008ff4:	f57f af5a 	bpl.w	8008eac <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 8008ff8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ffa:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8008ffc:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ffe:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8009000:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009004:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8009006:	2a03      	cmp	r2, #3
 8009008:	f63f af50 	bhi.w	8008eac <HAL_DMA_Init+0x1bc>
 800900c:	a001      	add	r0, pc, #4	; (adr r0, 8009014 <HAL_DMA_Init+0x324>)
 800900e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8009012:	bf00      	nop
 8009014:	08008ff9 	.word	0x08008ff9
 8009018:	08008ff3 	.word	0x08008ff3
 800901c:	08008ff9 	.word	0x08008ff9
 8009020:	08009025 	.word	0x08009025
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009024:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8009028:	f47f af40 	bne.w	8008eac <HAL_DMA_Init+0x1bc>
 800902c:	e7e4      	b.n	8008ff8 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800902e:	21b8      	movs	r1, #184	; 0xb8
 8009030:	4804      	ldr	r0, [pc, #16]	; (8009044 <HAL_DMA_Init+0x354>)
 8009032:	f7fb f91f 	bl	8004274 <assert_failed>
 8009036:	e6c1      	b.n	8008dbc <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8009038:	21b9      	movs	r1, #185	; 0xb9
 800903a:	4802      	ldr	r0, [pc, #8]	; (8009044 <HAL_DMA_Init+0x354>)
 800903c:	f7fb f91a 	bl	8004274 <assert_failed>
 8009040:	e6d1      	b.n	8008de6 <HAL_DMA_Init+0xf6>
 8009042:	bf00      	nop
 8009044:	0802c20c 	.word	0x0802c20c

08009048 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8009048:	2800      	cmp	r0, #0
 800904a:	f000 8097 	beq.w	800917c <HAL_DMA_DeInit+0x134>
{
 800904e:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8009050:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009054:	4604      	mov	r4, r0
 8009056:	2b02      	cmp	r3, #2
 8009058:	b2d8      	uxtb	r0, r3
 800905a:	f000 808e 	beq.w	800917a <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	4b4b      	ldr	r3, [pc, #300]	; (8009190 <HAL_DMA_DeInit+0x148>)
 8009062:	484c      	ldr	r0, [pc, #304]	; (8009194 <HAL_DMA_DeInit+0x14c>)
 8009064:	494c      	ldr	r1, [pc, #304]	; (8009198 <HAL_DMA_DeInit+0x150>)
 8009066:	429a      	cmp	r2, r3
 8009068:	bf18      	it	ne
 800906a:	4282      	cmpne	r2, r0
 800906c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009070:	bf14      	ite	ne
 8009072:	2301      	movne	r3, #1
 8009074:	2300      	moveq	r3, #0
 8009076:	428a      	cmp	r2, r1
 8009078:	bf0c      	ite	eq
 800907a:	2300      	moveq	r3, #0
 800907c:	f003 0301 	andne.w	r3, r3, #1
 8009080:	3130      	adds	r1, #48	; 0x30
 8009082:	4282      	cmp	r2, r0
 8009084:	bf0c      	ite	eq
 8009086:	2300      	moveq	r3, #0
 8009088:	f003 0301 	andne.w	r3, r3, #1
 800908c:	3030      	adds	r0, #48	; 0x30
 800908e:	428a      	cmp	r2, r1
 8009090:	bf0c      	ite	eq
 8009092:	2300      	moveq	r3, #0
 8009094:	f003 0301 	andne.w	r3, r3, #1
 8009098:	3130      	adds	r1, #48	; 0x30
 800909a:	4282      	cmp	r2, r0
 800909c:	bf0c      	ite	eq
 800909e:	2300      	moveq	r3, #0
 80090a0:	f003 0301 	andne.w	r3, r3, #1
 80090a4:	3030      	adds	r0, #48	; 0x30
 80090a6:	428a      	cmp	r2, r1
 80090a8:	bf0c      	ite	eq
 80090aa:	2300      	moveq	r3, #0
 80090ac:	f003 0301 	andne.w	r3, r3, #1
 80090b0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80090b4:	4282      	cmp	r2, r0
 80090b6:	bf0c      	ite	eq
 80090b8:	2300      	moveq	r3, #0
 80090ba:	f003 0301 	andne.w	r3, r3, #1
 80090be:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80090c2:	428a      	cmp	r2, r1
 80090c4:	bf0c      	ite	eq
 80090c6:	2300      	moveq	r3, #0
 80090c8:	f003 0301 	andne.w	r3, r3, #1
 80090cc:	3130      	adds	r1, #48	; 0x30
 80090ce:	4282      	cmp	r2, r0
 80090d0:	bf0c      	ite	eq
 80090d2:	2300      	moveq	r3, #0
 80090d4:	f003 0301 	andne.w	r3, r3, #1
 80090d8:	3030      	adds	r0, #48	; 0x30
 80090da:	428a      	cmp	r2, r1
 80090dc:	bf0c      	ite	eq
 80090de:	2300      	moveq	r3, #0
 80090e0:	f003 0301 	andne.w	r3, r3, #1
 80090e4:	3130      	adds	r1, #48	; 0x30
 80090e6:	4282      	cmp	r2, r0
 80090e8:	bf0c      	ite	eq
 80090ea:	2300      	moveq	r3, #0
 80090ec:	f003 0301 	andne.w	r3, r3, #1
 80090f0:	3030      	adds	r0, #48	; 0x30
 80090f2:	428a      	cmp	r2, r1
 80090f4:	bf0c      	ite	eq
 80090f6:	2300      	moveq	r3, #0
 80090f8:	f003 0301 	andne.w	r3, r3, #1
 80090fc:	3130      	adds	r1, #48	; 0x30
 80090fe:	4282      	cmp	r2, r0
 8009100:	bf0c      	ite	eq
 8009102:	2300      	moveq	r3, #0
 8009104:	f003 0301 	andne.w	r3, r3, #1
 8009108:	428a      	cmp	r2, r1
 800910a:	bf0c      	ite	eq
 800910c:	2300      	moveq	r3, #0
 800910e:	f003 0301 	andne.w	r3, r3, #1
 8009112:	b113      	cbz	r3, 800911a <HAL_DMA_DeInit+0xd2>
 8009114:	4b21      	ldr	r3, [pc, #132]	; (800919c <HAL_DMA_DeInit+0x154>)
 8009116:	429a      	cmp	r2, r3
 8009118:	d132      	bne.n	8009180 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 800911a:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800911c:	b2d3      	uxtb	r3, r2
 800911e:	4920      	ldr	r1, [pc, #128]	; (80091a0 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 8009120:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009124:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8009126:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 8009128:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800912a:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800912e:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 8009130:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 8009132:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 8009136:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009138:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 800913c:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 800913e:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8009140:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8009142:	f04f 0021 	mov.w	r0, #33	; 0x21
 8009146:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009148:	4816      	ldr	r0, [pc, #88]	; (80091a4 <HAL_DMA_DeInit+0x15c>)
 800914a:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800914c:	4916      	ldr	r1, [pc, #88]	; (80091a8 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800914e:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009150:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009154:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009158:	bf88      	it	hi
 800915a:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800915c:	4082      	lsls	r2, r0
  return HAL_OK;
 800915e:	4618      	mov	r0, r3
 8009160:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009162:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009164:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8009166:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800916a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800916e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8009172:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8009176:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800917a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800917c:	2001      	movs	r0, #1
}
 800917e:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8009180:	f240 1149 	movw	r1, #329	; 0x149
 8009184:	4809      	ldr	r0, [pc, #36]	; (80091ac <HAL_DMA_DeInit+0x164>)
 8009186:	f7fb f875 	bl	8004274 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	e7c5      	b.n	800911a <HAL_DMA_DeInit+0xd2>
 800918e:	bf00      	nop
 8009190:	40026010 	.word	0x40026010
 8009194:	40026028 	.word	0x40026028
 8009198:	40026040 	.word	0x40026040
 800919c:	400264b8 	.word	0x400264b8
 80091a0:	aaaaaaab 	.word	0xaaaaaaab
 80091a4:	0802c244 	.word	0x0802c244
 80091a8:	fffffc00 	.word	0xfffffc00
 80091ac:	0802c20c 	.word	0x0802c20c

080091b0 <HAL_DMA_Start_IT>:
{
 80091b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	461e      	mov	r6, r3
 80091b6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091b8:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80091bc:	1e58      	subs	r0, r3, #1
 80091be:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 80091c2:	4688      	mov	r8, r1
 80091c4:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80091c6:	4298      	cmp	r0, r3
 80091c8:	d83b      	bhi.n	8009242 <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 80091ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d040      	beq.n	8009254 <HAL_DMA_Start_IT+0xa4>
 80091d2:	2301      	movs	r3, #1
 80091d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80091d8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d005      	beq.n	80091ec <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80091e0:	2300      	movs	r3, #0
    status = HAL_BUSY;
 80091e2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80091e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80091e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80091ec:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80091ee:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80091f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091fe:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009200:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 8009202:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009204:	2b40      	cmp	r3, #64	; 0x40
 8009206:	d028      	beq.n	800925a <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8009208:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 800920c:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800920e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009210:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8009212:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009214:	408b      	lsls	r3, r1
 8009216:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	f043 0316 	orr.w	r3, r3, #22
 8009220:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009222:	696b      	ldr	r3, [r5, #20]
 8009224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009228:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800922a:	b11a      	cbz	r2, 8009234 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	f043 0308 	orr.w	r3, r3, #8
 8009232:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8009234:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009236:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	602b      	str	r3, [r5, #0]
}
 800923e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009242:	f240 11cd 	movw	r1, #461	; 0x1cd
 8009246:	4807      	ldr	r0, [pc, #28]	; (8009264 <HAL_DMA_Start_IT+0xb4>)
 8009248:	f7fb f814 	bl	8004274 <assert_failed>
  __HAL_LOCK(hdma);
 800924c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009250:	2b01      	cmp	r3, #1
 8009252:	d1be      	bne.n	80091d2 <HAL_DMA_Start_IT+0x22>
 8009254:	2002      	movs	r0, #2
}
 8009256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800925a:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800925c:	f8c5 800c 	str.w	r8, [r5, #12]
 8009260:	e7d5      	b.n	800920e <HAL_DMA_Start_IT+0x5e>
 8009262:	bf00      	nop
 8009264:	0802c20c 	.word	0x0802c20c

08009268 <HAL_DMA_Abort>:
{
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800926c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800926e:	f7fe fdd5 	bl	8007e1c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009272:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009276:	2b02      	cmp	r3, #2
 8009278:	d006      	beq.n	8009288 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800927a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800927c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800927e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009280:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009282:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009286:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	f022 0216 	bic.w	r2, r2, #22
 8009292:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009294:	695a      	ldr	r2, [r3, #20]
 8009296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800929a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800929c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800929e:	b33a      	cbz	r2, 80092f0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	f022 0208 	bic.w	r2, r2, #8
 80092a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092b0:	e005      	b.n	80092be <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092b2:	f7fe fdb3 	bl	8007e1c <HAL_GetTick>
 80092b6:	1b43      	subs	r3, r0, r5
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d80f      	bhi.n	80092dc <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f013 0301 	ands.w	r3, r3, #1
 80092c4:	d1f5      	bne.n	80092b2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80092c8:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80092ca:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092cc:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80092ce:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092d0:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80092d2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80092d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80092da:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092de:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80092e0:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092e2:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80092e4:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80092ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80092f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1d4      	bne.n	80092a0 <HAL_DMA_Abort+0x38>
 80092f6:	e7d7      	b.n	80092a8 <HAL_DMA_Abort+0x40>

080092f8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092f8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80092fc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092fe:	2a02      	cmp	r2, #2
 8009300:	d003      	beq.n	800930a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009302:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009304:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009308:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800930a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800930c:	2105      	movs	r1, #5
  return HAL_OK;
 800930e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8009310:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8009314:	6813      	ldr	r3, [r2, #0]
 8009316:	f023 0301 	bic.w	r3, r3, #1
 800931a:	6013      	str	r3, [r2, #0]
}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop

08009320 <HAL_DMA_IRQHandler>:
{
 8009320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8009324:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8009326:	4b74      	ldr	r3, [pc, #464]	; (80094f8 <HAL_DMA_IRQHandler+0x1d8>)
{
 8009328:	b082      	sub	sp, #8
 800932a:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800932c:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800932e:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009330:	2208      	movs	r2, #8
 8009332:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8009336:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009338:	409a      	lsls	r2, r3
 800933a:	4222      	tst	r2, r4
 800933c:	d004      	beq.n	8009348 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800933e:	6801      	ldr	r1, [r0, #0]
 8009340:	680f      	ldr	r7, [r1, #0]
 8009342:	0778      	lsls	r0, r7, #29
 8009344:	f100 80ab 	bmi.w	800949e <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009348:	2201      	movs	r2, #1
 800934a:	409a      	lsls	r2, r3
 800934c:	4222      	tst	r2, r4
 800934e:	d005      	beq.n	800935c <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009350:	f8d8 1000 	ldr.w	r1, [r8]
 8009354:	6949      	ldr	r1, [r1, #20]
 8009356:	0609      	lsls	r1, r1, #24
 8009358:	f100 8099 	bmi.w	800948e <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800935c:	2204      	movs	r2, #4
 800935e:	409a      	lsls	r2, r3
 8009360:	4222      	tst	r2, r4
 8009362:	d005      	beq.n	8009370 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009364:	f8d8 1000 	ldr.w	r1, [r8]
 8009368:	6809      	ldr	r1, [r1, #0]
 800936a:	078f      	lsls	r7, r1, #30
 800936c:	f100 8087 	bmi.w	800947e <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009370:	2210      	movs	r2, #16
 8009372:	409a      	lsls	r2, r3
 8009374:	4222      	tst	r2, r4
 8009376:	d004      	beq.n	8009382 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009378:	f8d8 1000 	ldr.w	r1, [r8]
 800937c:	680f      	ldr	r7, [r1, #0]
 800937e:	0738      	lsls	r0, r7, #28
 8009380:	d468      	bmi.n	8009454 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009382:	2220      	movs	r2, #32
 8009384:	409a      	lsls	r2, r3
 8009386:	4222      	tst	r2, r4
 8009388:	d017      	beq.n	80093ba <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800938a:	f8d8 1000 	ldr.w	r1, [r8]
 800938e:	680c      	ldr	r4, [r1, #0]
 8009390:	06e0      	lsls	r0, r4, #27
 8009392:	d512      	bpl.n	80093ba <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009394:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009396:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800939a:	2a05      	cmp	r2, #5
 800939c:	d039      	beq.n	8009412 <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800939e:	680b      	ldr	r3, [r1, #0]
 80093a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80093a4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80093a6:	f000 808d 	beq.w	80094c4 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80093aa:	0319      	lsls	r1, r3, #12
 80093ac:	f140 8098 	bpl.w	80094e0 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 80093b0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80093b4:	b10b      	cbz	r3, 80093ba <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 80093b6:	4640      	mov	r0, r8
 80093b8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093ba:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d045      	beq.n	800944e <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80093c2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80093c6:	07da      	lsls	r2, r3, #31
 80093c8:	d51b      	bpl.n	8009402 <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 80093ca:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 80093ce:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80093d0:	494a      	ldr	r1, [pc, #296]	; (80094fc <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80093d2:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80093d6:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80093d8:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80093dc:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80093e0:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	e002      	b.n	80093ec <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80093e6:	6813      	ldr	r3, [r2, #0]
 80093e8:	07db      	lsls	r3, r3, #31
 80093ea:	d504      	bpl.n	80093f6 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	3301      	adds	r3, #1
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	d9f7      	bls.n	80093e6 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 80093f6:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80093f8:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80093fa:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80093fe:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8009402:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009406:	b313      	cbz	r3, 800944e <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 8009408:	4640      	mov	r0, r8
}
 800940a:	b002      	add	sp, #8
 800940c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8009410:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009412:	680a      	ldr	r2, [r1, #0]
 8009414:	f022 0216 	bic.w	r2, r2, #22
 8009418:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800941a:	694a      	ldr	r2, [r1, #20]
 800941c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009420:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009422:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009426:	2a00      	cmp	r2, #0
 8009428:	d060      	beq.n	80094ec <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800942a:	680a      	ldr	r2, [r1, #0]
 800942c:	f022 0208 	bic.w	r2, r2, #8
 8009430:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009432:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8009434:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800943a:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800943c:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800943e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8009442:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009446:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1dc      	bne.n	8009408 <HAL_DMA_IRQHandler+0xe8>
}
 800944e:	b002      	add	sp, #8
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009454:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009456:	680a      	ldr	r2, [r1, #0]
 8009458:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800945c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800945e:	d12a      	bne.n	80094b6 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009460:	05d7      	lsls	r7, r2, #23
 8009462:	d403      	bmi.n	800946c <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009464:	680a      	ldr	r2, [r1, #0]
 8009466:	f022 0208 	bic.w	r2, r2, #8
 800946a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800946c:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009470:	2a00      	cmp	r2, #0
 8009472:	d086      	beq.n	8009382 <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8009474:	4640      	mov	r0, r8
 8009476:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009478:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800947c:	e781      	b.n	8009382 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800947e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009480:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009484:	f042 0204 	orr.w	r2, r2, #4
 8009488:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800948c:	e770      	b.n	8009370 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800948e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009490:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009494:	f042 0202 	orr.w	r2, r2, #2
 8009498:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800949c:	e75e      	b.n	800935c <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800949e:	680f      	ldr	r7, [r1, #0]
 80094a0:	f027 0704 	bic.w	r7, r7, #4
 80094a4:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80094a6:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094a8:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80094b4:	e748      	b.n	8009348 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80094b6:	0312      	lsls	r2, r2, #12
 80094b8:	d5d8      	bpl.n	800946c <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094ba:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80094be:	2a00      	cmp	r2, #0
 80094c0:	d1d8      	bne.n	8009474 <HAL_DMA_IRQHandler+0x154>
 80094c2:	e75e      	b.n	8009382 <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80094c4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80094c8:	f47f af72 	bne.w	80093b0 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80094cc:	680a      	ldr	r2, [r1, #0]
 80094ce:	f022 0210 	bic.w	r2, r2, #16
 80094d2:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80094d4:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 80094d6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80094da:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80094de:	e767      	b.n	80093b0 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 80094e0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f47f af66 	bne.w	80093b6 <HAL_DMA_IRQHandler+0x96>
 80094ea:	e766      	b.n	80093ba <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80094ec:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d19a      	bne.n	800942a <HAL_DMA_IRQHandler+0x10a>
 80094f4:	e79d      	b.n	8009432 <HAL_DMA_IRQHandler+0x112>
 80094f6:	bf00      	nop
 80094f8:	2000027c 	.word	0x2000027c
 80094fc:	1b4e81b5 	.word	0x1b4e81b5

08009500 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8009500:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8009502:	4770      	bx	lr

08009504 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8009504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009508:	9f08      	ldr	r7, [sp, #32]
 800950a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800950c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 8009510:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009512:	1e7d      	subs	r5, r7, #1
{
 8009514:	4691      	mov	r9, r2
 8009516:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009518:	4285      	cmp	r5, r0
 800951a:	d85f      	bhi.n	80095dc <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800951c:	68a0      	ldr	r0, [r4, #8]
 800951e:	2880      	cmp	r0, #128	; 0x80
 8009520:	d063      	beq.n	80095ea <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8009522:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009526:	2b01      	cmp	r3, #1
 8009528:	f000 8090 	beq.w	800964c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800952c:	2301      	movs	r3, #1
 800952e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009532:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009536:	2b01      	cmp	r3, #1
 8009538:	d005      	beq.n	8009546 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800953a:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 800953c:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800953e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 8009542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009546:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8009548:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800954a:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800954c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009550:	f04f 0300 	mov.w	r3, #0
 8009554:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800955c:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800955e:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 8009560:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009562:	d06a      	beq.n	800963a <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8009564:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8009568:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800956c:	4b93      	ldr	r3, [pc, #588]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800956e:	429d      	cmp	r5, r3
 8009570:	d941      	bls.n	80095f6 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 8009572:	3b48      	subs	r3, #72	; 0x48
 8009574:	4992      	ldr	r1, [pc, #584]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8009576:	4a93      	ldr	r2, [pc, #588]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009578:	429d      	cmp	r5, r3
 800957a:	bf18      	it	ne
 800957c:	428d      	cmpne	r5, r1
 800957e:	bf14      	ite	ne
 8009580:	2301      	movne	r3, #1
 8009582:	2300      	moveq	r3, #0
 8009584:	4295      	cmp	r5, r2
 8009586:	bf0c      	ite	eq
 8009588:	2300      	moveq	r3, #0
 800958a:	f003 0301 	andne.w	r3, r3, #1
 800958e:	b11b      	cbz	r3, 8009598 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 8009590:	4b8d      	ldr	r3, [pc, #564]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009592:	429d      	cmp	r5, r3
 8009594:	f040 812e 	bne.w	80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8009598:	4b8c      	ldr	r3, [pc, #560]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800959a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800959c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800959e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095a0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80095a2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095a4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095a6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095a8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095aa:	2201      	movs	r2, #1
 80095ac:	4b87      	ldr	r3, [pc, #540]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80095ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80095b0:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80095b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80095b4:	f043 0316 	orr.w	r3, r3, #22
 80095b8:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80095ba:	696b      	ldr	r3, [r5, #20]
 80095bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c0:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d03e      	beq.n	8009644 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	f043 0308 	orr.w	r3, r3, #8
 80095cc:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 80095ce:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095d0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	602b      	str	r3, [r5, #0]
}
 80095d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80095dc:	487c      	ldr	r0, [pc, #496]	; (80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80095de:	21a1      	movs	r1, #161	; 0xa1
 80095e0:	f7fa fe48 	bl	8004274 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80095e4:	68a0      	ldr	r0, [r4, #8]
 80095e6:	2880      	cmp	r0, #128	; 0x80
 80095e8:	d19b      	bne.n	8009522 <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80095ea:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 80095ee:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80095f0:	6563      	str	r3, [r4, #84]	; 0x54
}
 80095f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80095f6:	4b77      	ldr	r3, [pc, #476]	; (80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80095f8:	429d      	cmp	r5, r3
 80095fa:	d929      	bls.n	8009650 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80095fc:	3ba8      	subs	r3, #168	; 0xa8
 80095fe:	4976      	ldr	r1, [pc, #472]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009600:	4a70      	ldr	r2, [pc, #448]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009602:	429d      	cmp	r5, r3
 8009604:	bf18      	it	ne
 8009606:	428d      	cmpne	r5, r1
 8009608:	bf14      	ite	ne
 800960a:	2301      	movne	r3, #1
 800960c:	2300      	moveq	r3, #0
 800960e:	4295      	cmp	r5, r2
 8009610:	bf0c      	ite	eq
 8009612:	2300      	moveq	r3, #0
 8009614:	f003 0301 	andne.w	r3, r3, #1
 8009618:	b113      	cbz	r3, 8009620 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800961a:	4b6b      	ldr	r3, [pc, #428]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800961c:	429d      	cmp	r5, r3
 800961e:	d15a      	bne.n	80096d6 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 8009620:	4b6a      	ldr	r3, [pc, #424]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009622:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009624:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009626:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009628:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800962a:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800962c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800962e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009630:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009632:	2301      	movs	r3, #1
 8009634:	4a65      	ldr	r2, [pc, #404]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009636:	6093      	str	r3, [r2, #8]
 8009638:	e7ba      	b.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 800963a:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800963e:	f8c5 800c 	str.w	r8, [r5, #12]
 8009642:	e793      	b.n	800956c <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1bd      	bne.n	80095c6 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 800964a:	e7c0      	b.n	80095ce <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 800964c:	2002      	movs	r0, #2
 800964e:	e778      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009650:	4b62      	ldr	r3, [pc, #392]	; (80097dc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8009652:	429d      	cmp	r5, r3
 8009654:	d91f      	bls.n	8009696 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 8009656:	3b48      	subs	r3, #72	; 0x48
 8009658:	495f      	ldr	r1, [pc, #380]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800965a:	4a5a      	ldr	r2, [pc, #360]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800965c:	429d      	cmp	r5, r3
 800965e:	bf18      	it	ne
 8009660:	428d      	cmpne	r5, r1
 8009662:	bf14      	ite	ne
 8009664:	2301      	movne	r3, #1
 8009666:	2300      	moveq	r3, #0
 8009668:	4295      	cmp	r5, r2
 800966a:	bf0c      	ite	eq
 800966c:	2300      	moveq	r3, #0
 800966e:	f003 0301 	andne.w	r3, r3, #1
 8009672:	b11b      	cbz	r3, 800967c <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8009674:	4b54      	ldr	r3, [pc, #336]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009676:	429d      	cmp	r5, r3
 8009678:	f040 8152 	bne.w	8009920 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800967c:	4b58      	ldr	r3, [pc, #352]	; (80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800967e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009680:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009682:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009684:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009686:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009688:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800968a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800968c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800968e:	2301      	movs	r3, #1
 8009690:	4a53      	ldr	r2, [pc, #332]	; (80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009692:	60d3      	str	r3, [r2, #12]
 8009694:	e78c      	b.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009696:	4b50      	ldr	r3, [pc, #320]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009698:	4949      	ldr	r1, [pc, #292]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800969a:	4a4a      	ldr	r2, [pc, #296]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800969c:	429d      	cmp	r5, r3
 800969e:	bf18      	it	ne
 80096a0:	428d      	cmpne	r5, r1
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	4295      	cmp	r5, r2
 80096aa:	bf0c      	ite	eq
 80096ac:	2300      	moveq	r3, #0
 80096ae:	f003 0301 	andne.w	r3, r3, #1
 80096b2:	b11b      	cbz	r3, 80096bc <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 80096b4:	4b44      	ldr	r3, [pc, #272]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80096b6:	429d      	cmp	r5, r3
 80096b8:	f040 80be 	bne.w	8009838 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 80096bc:	4b48      	ldr	r3, [pc, #288]	; (80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80096be:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096c0:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096c2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096c4:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096c6:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096c8:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096ca:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096cc:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80096ce:	2301      	movs	r3, #1
 80096d0:	4a43      	ldr	r2, [pc, #268]	; (80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80096d2:	6093      	str	r3, [r2, #8]
 80096d4:	e76c      	b.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096d6:	3b48      	subs	r3, #72	; 0x48
 80096d8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80096dc:	3218      	adds	r2, #24
 80096de:	429d      	cmp	r5, r3
 80096e0:	bf18      	it	ne
 80096e2:	428d      	cmpne	r5, r1
 80096e4:	bf14      	ite	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	2300      	moveq	r3, #0
 80096ea:	4295      	cmp	r5, r2
 80096ec:	bf0c      	ite	eq
 80096ee:	2300      	moveq	r3, #0
 80096f0:	f003 0301 	andne.w	r3, r3, #1
 80096f4:	b11b      	cbz	r3, 80096fe <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 80096f6:	4b3b      	ldr	r3, [pc, #236]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80096f8:	429d      	cmp	r5, r3
 80096fa:	f040 8210 	bne.w	8009b1e <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 80096fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009702:	4b39      	ldr	r3, [pc, #228]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009704:	4839      	ldr	r0, [pc, #228]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009706:	4a31      	ldr	r2, [pc, #196]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009708:	429d      	cmp	r5, r3
 800970a:	bf18      	it	ne
 800970c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800970e:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009710:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8009714:	bf14      	ite	ne
 8009716:	2301      	movne	r3, #1
 8009718:	2300      	moveq	r3, #0
 800971a:	4295      	cmp	r5, r2
 800971c:	bf0c      	ite	eq
 800971e:	2300      	moveq	r3, #0
 8009720:	f003 0301 	andne.w	r3, r3, #1
 8009724:	b11b      	cbz	r3, 800972e <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8009726:	4b2f      	ldr	r3, [pc, #188]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009728:	429d      	cmp	r5, r3
 800972a:	f040 8212 	bne.w	8009b52 <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800972e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009732:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009734:	482d      	ldr	r0, [pc, #180]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009736:	4925      	ldr	r1, [pc, #148]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009738:	429d      	cmp	r5, r3
 800973a:	bf18      	it	ne
 800973c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800973e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009740:	bf14      	ite	ne
 8009742:	2301      	movne	r3, #1
 8009744:	2300      	moveq	r3, #0
 8009746:	4a2a      	ldr	r2, [pc, #168]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009748:	4295      	cmp	r5, r2
 800974a:	bf0c      	ite	eq
 800974c:	2300      	moveq	r3, #0
 800974e:	f003 0301 	andne.w	r3, r3, #1
 8009752:	b11b      	cbz	r3, 800975c <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8009754:	4b23      	ldr	r3, [pc, #140]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009756:	429d      	cmp	r5, r3
 8009758:	f040 822b 	bne.w	8009bb2 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800975c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009760:	4b22      	ldr	r3, [pc, #136]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009762:	4821      	ldr	r0, [pc, #132]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009764:	4919      	ldr	r1, [pc, #100]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009766:	429d      	cmp	r5, r3
 8009768:	bf18      	it	ne
 800976a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800976c:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800976e:	bf14      	ite	ne
 8009770:	2301      	movne	r3, #1
 8009772:	2300      	moveq	r3, #0
 8009774:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009776:	4295      	cmp	r5, r2
 8009778:	bf0c      	ite	eq
 800977a:	2300      	moveq	r3, #0
 800977c:	f003 0301 	andne.w	r3, r3, #1
 8009780:	b11b      	cbz	r3, 800978a <HAL_DMAEx_MultiBufferStart_IT+0x286>
 8009782:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009784:	429d      	cmp	r5, r3
 8009786:	f040 81fc 	bne.w	8009b82 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800978a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800978e:	4b17      	ldr	r3, [pc, #92]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009790:	4815      	ldr	r0, [pc, #84]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009792:	490e      	ldr	r1, [pc, #56]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009794:	429d      	cmp	r5, r3
 8009796:	bf18      	it	ne
 8009798:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800979a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800979c:	bf14      	ite	ne
 800979e:	2301      	movne	r3, #1
 80097a0:	2300      	moveq	r3, #0
 80097a2:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80097a4:	4295      	cmp	r5, r2
 80097a6:	bf0c      	ite	eq
 80097a8:	2300      	moveq	r3, #0
 80097aa:	f003 0301 	andne.w	r3, r3, #1
 80097ae:	b11b      	cbz	r3, 80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80097b2:	429d      	cmp	r5, r3
 80097b4:	f040 8215 	bne.w	8009be2 <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	e73b      	b.n	8009634 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 80097bc:	40026458 	.word	0x40026458
 80097c0:	40026010 	.word	0x40026010
 80097c4:	40026070 	.word	0x40026070
 80097c8:	40026470 	.word	0x40026470
 80097cc:	40026400 	.word	0x40026400
 80097d0:	0802c24c 	.word	0x0802c24c
 80097d4:	400260b8 	.word	0x400260b8
 80097d8:	40026410 	.word	0x40026410
 80097dc:	40026058 	.word	0x40026058
 80097e0:	40026000 	.word	0x40026000
 80097e4:	40026488 	.word	0x40026488
 80097e8:	40026028 	.word	0x40026028
 80097ec:	40026428 	.word	0x40026428
 80097f0:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80097f4:	3b48      	subs	r3, #72	; 0x48
 80097f6:	3118      	adds	r1, #24
 80097f8:	3218      	adds	r2, #24
 80097fa:	429d      	cmp	r5, r3
 80097fc:	bf18      	it	ne
 80097fe:	428d      	cmpne	r5, r1
 8009800:	bf14      	ite	ne
 8009802:	2301      	movne	r3, #1
 8009804:	2300      	moveq	r3, #0
 8009806:	4295      	cmp	r5, r2
 8009808:	bf0c      	ite	eq
 800980a:	2300      	moveq	r3, #0
 800980c:	f003 0301 	andne.w	r3, r3, #1
 8009810:	b11b      	cbz	r3, 800981a <HAL_DMAEx_MultiBufferStart_IT+0x316>
 8009812:	4b7d      	ldr	r3, [pc, #500]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009814:	429d      	cmp	r5, r3
 8009816:	f040 8103 	bne.w	8009a20 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 800981a:	4b7c      	ldr	r3, [pc, #496]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800981c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009820:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009824:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009826:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800982a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800982c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009830:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009832:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009834:	2240      	movs	r2, #64	; 0x40
 8009836:	e6b9      	b.n	80095ac <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009838:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800983c:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009840:	3218      	adds	r2, #24
 8009842:	429d      	cmp	r5, r3
 8009844:	bf18      	it	ne
 8009846:	428d      	cmpne	r5, r1
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	4295      	cmp	r5, r2
 8009850:	bf0c      	ite	eq
 8009852:	2300      	moveq	r3, #0
 8009854:	f003 0301 	andne.w	r3, r3, #1
 8009858:	b11b      	cbz	r3, 8009862 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800985a:	4b6b      	ldr	r3, [pc, #428]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800985c:	429d      	cmp	r5, r3
 800985e:	f040 81d8 	bne.w	8009c12 <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8009862:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009866:	4b6a      	ldr	r3, [pc, #424]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009868:	486a      	ldr	r0, [pc, #424]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800986a:	4a6b      	ldr	r2, [pc, #428]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800986c:	429d      	cmp	r5, r3
 800986e:	bf18      	it	ne
 8009870:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009872:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009874:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009878:	bf14      	ite	ne
 800987a:	2301      	movne	r3, #1
 800987c:	2300      	moveq	r3, #0
 800987e:	4295      	cmp	r5, r2
 8009880:	bf0c      	ite	eq
 8009882:	2300      	moveq	r3, #0
 8009884:	f003 0301 	andne.w	r3, r3, #1
 8009888:	b11b      	cbz	r3, 8009892 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800988a:	4b5f      	ldr	r3, [pc, #380]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800988c:	429d      	cmp	r5, r3
 800988e:	f040 81d9 	bne.w	8009c44 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8009892:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009896:	4b5e      	ldr	r3, [pc, #376]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009898:	485e      	ldr	r0, [pc, #376]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800989a:	495f      	ldr	r1, [pc, #380]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800989c:	429d      	cmp	r5, r3
 800989e:	bf18      	it	ne
 80098a0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80098a2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098a4:	bf14      	ite	ne
 80098a6:	2301      	movne	r3, #1
 80098a8:	2300      	moveq	r3, #0
 80098aa:	4a5c      	ldr	r2, [pc, #368]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80098ac:	4295      	cmp	r5, r2
 80098ae:	bf0c      	ite	eq
 80098b0:	2300      	moveq	r3, #0
 80098b2:	f003 0301 	andne.w	r3, r3, #1
 80098b6:	b11b      	cbz	r3, 80098c0 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 80098b8:	4b53      	ldr	r3, [pc, #332]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80098ba:	429d      	cmp	r5, r3
 80098bc:	f040 822c 	bne.w	8009d18 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80098c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098c4:	4b53      	ldr	r3, [pc, #332]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80098c6:	4852      	ldr	r0, [pc, #328]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098c8:	4953      	ldr	r1, [pc, #332]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098ca:	429d      	cmp	r5, r3
 80098cc:	bf18      	it	ne
 80098ce:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098d0:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	4a50      	ldr	r2, [pc, #320]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80098da:	4295      	cmp	r5, r2
 80098dc:	bf0c      	ite	eq
 80098de:	2300      	moveq	r3, #0
 80098e0:	f003 0301 	andne.w	r3, r3, #1
 80098e4:	b11b      	cbz	r3, 80098ee <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80098e6:	4b48      	ldr	r3, [pc, #288]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80098e8:	429d      	cmp	r5, r3
 80098ea:	f040 81db 	bne.w	8009ca4 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 80098ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80098f2:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80098f4:	4847      	ldr	r0, [pc, #284]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098f6:	4948      	ldr	r1, [pc, #288]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80098f8:	429d      	cmp	r5, r3
 80098fa:	bf18      	it	ne
 80098fc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098fe:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009900:	bf14      	ite	ne
 8009902:	2301      	movne	r3, #1
 8009904:	2300      	moveq	r3, #0
 8009906:	4a45      	ldr	r2, [pc, #276]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009908:	4295      	cmp	r5, r2
 800990a:	bf0c      	ite	eq
 800990c:	2300      	moveq	r3, #0
 800990e:	f003 0301 	andne.w	r3, r3, #1
 8009912:	b11b      	cbz	r3, 800991c <HAL_DMAEx_MultiBufferStart_IT+0x418>
 8009914:	4b3c      	ldr	r3, [pc, #240]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009916:	429d      	cmp	r5, r3
 8009918:	f040 822d 	bne.w	8009d76 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	e6d7      	b.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009920:	3b48      	subs	r3, #72	; 0x48
 8009922:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009926:	3218      	adds	r2, #24
 8009928:	429d      	cmp	r5, r3
 800992a:	bf18      	it	ne
 800992c:	428d      	cmpne	r5, r1
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	4295      	cmp	r5, r2
 8009936:	bf0c      	ite	eq
 8009938:	2300      	moveq	r3, #0
 800993a:	f003 0301 	andne.w	r3, r3, #1
 800993e:	b11b      	cbz	r3, 8009948 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8009940:	4b31      	ldr	r3, [pc, #196]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009942:	429d      	cmp	r5, r3
 8009944:	f040 81d0 	bne.w	8009ce8 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8009948:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800994c:	4b31      	ldr	r3, [pc, #196]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800994e:	4830      	ldr	r0, [pc, #192]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009950:	4a31      	ldr	r2, [pc, #196]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009952:	429d      	cmp	r5, r3
 8009954:	bf18      	it	ne
 8009956:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009958:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800995a:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800995e:	bf14      	ite	ne
 8009960:	2301      	movne	r3, #1
 8009962:	2300      	moveq	r3, #0
 8009964:	4295      	cmp	r5, r2
 8009966:	bf0c      	ite	eq
 8009968:	2300      	moveq	r3, #0
 800996a:	f003 0301 	andne.w	r3, r3, #1
 800996e:	b11b      	cbz	r3, 8009978 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8009970:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009972:	429d      	cmp	r5, r3
 8009974:	f040 817e 	bne.w	8009c74 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009978:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800997c:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800997e:	4825      	ldr	r0, [pc, #148]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009980:	4925      	ldr	r1, [pc, #148]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009982:	429d      	cmp	r5, r3
 8009984:	bf18      	it	ne
 8009986:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009988:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009992:	4295      	cmp	r5, r2
 8009994:	bf0c      	ite	eq
 8009996:	2300      	moveq	r3, #0
 8009998:	f003 0301 	andne.w	r3, r3, #1
 800999c:	b11b      	cbz	r3, 80099a6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800999e:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80099a0:	429d      	cmp	r5, r3
 80099a2:	f040 81fe 	bne.w	8009da2 <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 80099a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099aa:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80099ac:	4818      	ldr	r0, [pc, #96]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099ae:	491a      	ldr	r1, [pc, #104]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099b0:	429d      	cmp	r5, r3
 80099b2:	bf18      	it	ne
 80099b4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099b6:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099b8:	bf14      	ite	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	2300      	moveq	r3, #0
 80099be:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80099c0:	4295      	cmp	r5, r2
 80099c2:	bf0c      	ite	eq
 80099c4:	2300      	moveq	r3, #0
 80099c6:	f003 0301 	andne.w	r3, r3, #1
 80099ca:	b11b      	cbz	r3, 80099d4 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80099ce:	429d      	cmp	r5, r3
 80099d0:	f040 81ba 	bne.w	8009d48 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 80099d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80099d8:	4b0e      	ldr	r3, [pc, #56]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80099da:	480d      	ldr	r0, [pc, #52]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099dc:	490e      	ldr	r1, [pc, #56]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80099de:	429d      	cmp	r5, r3
 80099e0:	bf18      	it	ne
 80099e2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099e4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80099e6:	bf14      	ite	ne
 80099e8:	2301      	movne	r3, #1
 80099ea:	2300      	moveq	r3, #0
 80099ec:	4a0b      	ldr	r2, [pc, #44]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80099ee:	4295      	cmp	r5, r2
 80099f0:	bf0c      	ite	eq
 80099f2:	2300      	moveq	r3, #0
 80099f4:	f003 0301 	andne.w	r3, r3, #1
 80099f8:	b11b      	cbz	r3, 8009a02 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80099fa:	4b03      	ldr	r3, [pc, #12]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80099fc:	429d      	cmp	r5, r3
 80099fe:	f040 81e6 	bne.w	8009dce <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	e644      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009a06:	bf00      	nop
 8009a08:	40026488 	.word	0x40026488
 8009a0c:	40026400 	.word	0x40026400
 8009a10:	40026428 	.word	0x40026428
 8009a14:	40026028 	.word	0x40026028
 8009a18:	40026000 	.word	0x40026000
 8009a1c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a20:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009a24:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009a28:	3218      	adds	r2, #24
 8009a2a:	429d      	cmp	r5, r3
 8009a2c:	bf18      	it	ne
 8009a2e:	428d      	cmpne	r5, r1
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	4295      	cmp	r5, r2
 8009a38:	bf0c      	ite	eq
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	f003 0301 	andne.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 81e6 	beq.w	8009e12 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009a46:	4ba3      	ldr	r3, [pc, #652]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a48:	429d      	cmp	r5, r3
 8009a4a:	f000 81e2 	beq.w	8009e12 <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009a4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a52:	4ba1      	ldr	r3, [pc, #644]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a54:	48a1      	ldr	r0, [pc, #644]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a56:	4aa2      	ldr	r2, [pc, #648]	; (8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a58:	429d      	cmp	r5, r3
 8009a5a:	bf18      	it	ne
 8009a5c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a5e:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a60:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	4295      	cmp	r5, r2
 8009a6c:	bf0c      	ite	eq
 8009a6e:	2300      	moveq	r3, #0
 8009a70:	f003 0301 	andne.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 81c9 	beq.w	8009e0c <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009a7a:	4b96      	ldr	r3, [pc, #600]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a7c:	429d      	cmp	r5, r3
 8009a7e:	f000 81c5 	beq.w	8009e0c <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009a82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a86:	4b94      	ldr	r3, [pc, #592]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a88:	4894      	ldr	r0, [pc, #592]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a8a:	4995      	ldr	r1, [pc, #596]	; (8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a8c:	429d      	cmp	r5, r3
 8009a8e:	bf18      	it	ne
 8009a90:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a92:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a94:	bf14      	ite	ne
 8009a96:	2301      	movne	r3, #1
 8009a98:	2300      	moveq	r3, #0
 8009a9a:	4a92      	ldr	r2, [pc, #584]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009a9c:	4295      	cmp	r5, r2
 8009a9e:	bf0c      	ite	eq
 8009aa0:	2300      	moveq	r3, #0
 8009aa2:	f003 0301 	andne.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 81ad 	beq.w	8009e06 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009aac:	4b89      	ldr	r3, [pc, #548]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009aae:	429d      	cmp	r5, r3
 8009ab0:	f000 81a9 	beq.w	8009e06 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ab8:	4b87      	ldr	r3, [pc, #540]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009aba:	4888      	ldr	r0, [pc, #544]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009abc:	4988      	ldr	r1, [pc, #544]	; (8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	bf18      	it	ne
 8009ac2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ac4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ac6:	bf14      	ite	ne
 8009ac8:	2301      	movne	r3, #1
 8009aca:	2300      	moveq	r3, #0
 8009acc:	4a85      	ldr	r2, [pc, #532]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009ace:	4295      	cmp	r5, r2
 8009ad0:	bf0c      	ite	eq
 8009ad2:	2300      	moveq	r3, #0
 8009ad4:	f003 0301 	andne.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8191 	beq.w	8009e00 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009ade:	4b7d      	ldr	r3, [pc, #500]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ae0:	429d      	cmp	r5, r3
 8009ae2:	f000 818d 	beq.w	8009e00 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009aea:	4b7b      	ldr	r3, [pc, #492]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009aec:	487b      	ldr	r0, [pc, #492]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009aee:	497c      	ldr	r1, [pc, #496]	; (8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009af0:	429d      	cmp	r5, r3
 8009af2:	bf18      	it	ne
 8009af4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009af6:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009af8:	bf14      	ite	ne
 8009afa:	2301      	movne	r3, #1
 8009afc:	2300      	moveq	r3, #0
 8009afe:	4a79      	ldr	r2, [pc, #484]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009b00:	4295      	cmp	r5, r2
 8009b02:	bf0c      	ite	eq
 8009b04:	2300      	moveq	r3, #0
 8009b06:	f003 0301 	andne.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8174 	beq.w	8009df8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009b10:	4b70      	ldr	r3, [pc, #448]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009b12:	429d      	cmp	r5, r3
 8009b14:	f000 8170 	beq.w	8009df8 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009b18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009b1c:	e546      	b.n	80095ac <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009b1e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009b22:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009b26:	3218      	adds	r2, #24
 8009b28:	429d      	cmp	r5, r3
 8009b2a:	bf18      	it	ne
 8009b2c:	428d      	cmpne	r5, r1
 8009b2e:	bf14      	ite	ne
 8009b30:	2301      	movne	r3, #1
 8009b32:	2300      	moveq	r3, #0
 8009b34:	4295      	cmp	r5, r2
 8009b36:	bf0c      	ite	eq
 8009b38:	2300      	moveq	r3, #0
 8009b3a:	f003 0301 	andne.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 816d 	beq.w	8009e1e <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009b44:	4b63      	ldr	r3, [pc, #396]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009b46:	429d      	cmp	r5, r3
 8009b48:	f000 8169 	beq.w	8009e1e <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009b4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009b50:	e5d7      	b.n	8009702 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009b52:	4b62      	ldr	r3, [pc, #392]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009b54:	4960      	ldr	r1, [pc, #384]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009b56:	4a63      	ldr	r2, [pc, #396]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009b58:	429d      	cmp	r5, r3
 8009b5a:	bf18      	it	ne
 8009b5c:	428d      	cmpne	r5, r1
 8009b5e:	bf14      	ite	ne
 8009b60:	2301      	movne	r3, #1
 8009b62:	2300      	moveq	r3, #0
 8009b64:	4295      	cmp	r5, r2
 8009b66:	bf0c      	ite	eq
 8009b68:	2300      	moveq	r3, #0
 8009b6a:	f003 0301 	andne.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 815b 	beq.w	8009e2a <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009b74:	4b57      	ldr	r3, [pc, #348]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009b76:	429d      	cmp	r5, r3
 8009b78:	f000 8157 	beq.w	8009e2a <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009b7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009b80:	e5d7      	b.n	8009732 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b82:	4b55      	ldr	r3, [pc, #340]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009b84:	4955      	ldr	r1, [pc, #340]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009b86:	4a57      	ldr	r2, [pc, #348]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009b88:	429d      	cmp	r5, r3
 8009b8a:	bf18      	it	ne
 8009b8c:	428d      	cmpne	r5, r1
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	4295      	cmp	r5, r2
 8009b96:	bf0c      	ite	eq
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	f003 0301 	andne.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 8140 	beq.w	8009e24 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009ba4:	4b4b      	ldr	r3, [pc, #300]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ba6:	429d      	cmp	r5, r3
 8009ba8:	f000 813c 	beq.w	8009e24 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bb0:	e5ed      	b.n	800978e <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bb2:	4b49      	ldr	r3, [pc, #292]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009bb4:	4949      	ldr	r1, [pc, #292]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009bb6:	4a4b      	ldr	r2, [pc, #300]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	bf18      	it	ne
 8009bbc:	428d      	cmpne	r5, r1
 8009bbe:	bf14      	ite	ne
 8009bc0:	2301      	movne	r3, #1
 8009bc2:	2300      	moveq	r3, #0
 8009bc4:	4295      	cmp	r5, r2
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	f003 0301 	andne.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 812e 	beq.w	8009e30 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009bd4:	4b3f      	ldr	r3, [pc, #252]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	f000 812a 	beq.w	8009e30 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009be0:	e5be      	b.n	8009760 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009be2:	4b3d      	ldr	r3, [pc, #244]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009be4:	493d      	ldr	r1, [pc, #244]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009be6:	4a3f      	ldr	r2, [pc, #252]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009be8:	429d      	cmp	r5, r3
 8009bea:	bf18      	it	ne
 8009bec:	428d      	cmpne	r5, r1
 8009bee:	bf14      	ite	ne
 8009bf0:	2301      	movne	r3, #1
 8009bf2:	2300      	moveq	r3, #0
 8009bf4:	4295      	cmp	r5, r2
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2300      	moveq	r3, #0
 8009bfa:	f003 0301 	andne.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 810a 	beq.w	8009e18 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009c04:	4b33      	ldr	r3, [pc, #204]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009c06:	429d      	cmp	r5, r3
 8009c08:	f000 8106 	beq.w	8009e18 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009c0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c10:	e510      	b.n	8009634 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c12:	3b48      	subs	r3, #72	; 0x48
 8009c14:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009c18:	3218      	adds	r2, #24
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	bf18      	it	ne
 8009c1e:	428d      	cmpne	r5, r1
 8009c20:	bf14      	ite	ne
 8009c22:	2301      	movne	r3, #1
 8009c24:	2300      	moveq	r3, #0
 8009c26:	4295      	cmp	r5, r2
 8009c28:	bf0c      	ite	eq
 8009c2a:	2300      	moveq	r3, #0
 8009c2c:	f003 0301 	andne.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8112 	beq.w	8009e5a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009c36:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009c38:	429d      	cmp	r5, r3
 8009c3a:	f000 810e 	beq.w	8009e5a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009c3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009c42:	e610      	b.n	8009866 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c44:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009c46:	4925      	ldr	r1, [pc, #148]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009c48:	4a26      	ldr	r2, [pc, #152]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009c4a:	429d      	cmp	r5, r3
 8009c4c:	bf18      	it	ne
 8009c4e:	428d      	cmpne	r5, r1
 8009c50:	bf14      	ite	ne
 8009c52:	2301      	movne	r3, #1
 8009c54:	2300      	moveq	r3, #0
 8009c56:	4295      	cmp	r5, r2
 8009c58:	bf0c      	ite	eq
 8009c5a:	2300      	moveq	r3, #0
 8009c5c:	f003 0301 	andne.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 80ee 	beq.w	8009e42 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009c66:	4b1b      	ldr	r3, [pc, #108]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009c68:	429d      	cmp	r5, r3
 8009c6a:	f000 80ea 	beq.w	8009e42 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c72:	e610      	b.n	8009896 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009c76:	4918      	ldr	r1, [pc, #96]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009c78:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009c7a:	429d      	cmp	r5, r3
 8009c7c:	bf18      	it	ne
 8009c7e:	428d      	cmpne	r5, r1
 8009c80:	bf14      	ite	ne
 8009c82:	2301      	movne	r3, #1
 8009c84:	2300      	moveq	r3, #0
 8009c86:	4295      	cmp	r5, r2
 8009c88:	bf0c      	ite	eq
 8009c8a:	2300      	moveq	r3, #0
 8009c8c:	f003 0301 	andne.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80e8 	beq.w	8009e66 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009c98:	429d      	cmp	r5, r3
 8009c9a:	f000 80e4 	beq.w	8009e66 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009ca2:	e66b      	b.n	800997c <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ca4:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ca6:	490c      	ldr	r1, [pc, #48]	; (8009cd8 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009ca8:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	bf18      	it	ne
 8009cae:	428d      	cmpne	r5, r1
 8009cb0:	bf14      	ite	ne
 8009cb2:	2301      	movne	r3, #1
 8009cb4:	2300      	moveq	r3, #0
 8009cb6:	4295      	cmp	r5, r2
 8009cb8:	bf0c      	ite	eq
 8009cba:	2300      	moveq	r3, #0
 8009cbc:	f003 0301 	andne.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80bb 	beq.w	8009e3c <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009cc6:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009cc8:	429d      	cmp	r5, r3
 8009cca:	f000 80b7 	beq.w	8009e3c <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009cce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cd2:	e60e      	b.n	80098f2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8009cd4:	400264a0 	.word	0x400264a0
 8009cd8:	40026040 	.word	0x40026040
 8009cdc:	40026440 	.word	0x40026440
 8009ce0:	40026400 	.word	0x40026400
 8009ce4:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009ce8:	3b48      	subs	r3, #72	; 0x48
 8009cea:	3118      	adds	r1, #24
 8009cec:	3218      	adds	r2, #24
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	bf18      	it	ne
 8009cf2:	428d      	cmpne	r5, r1
 8009cf4:	bf14      	ite	ne
 8009cf6:	2301      	movne	r3, #1
 8009cf8:	2300      	moveq	r3, #0
 8009cfa:	4295      	cmp	r5, r2
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	f003 0301 	andne.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 80ab 	beq.w	8009e60 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009d0a:	4b5a      	ldr	r3, [pc, #360]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	f000 80a7 	beq.w	8009e60 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009d12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009d16:	e619      	b.n	800994c <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d18:	4b57      	ldr	r3, [pc, #348]	; (8009e78 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009d1a:	4958      	ldr	r1, [pc, #352]	; (8009e7c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009d1c:	4a58      	ldr	r2, [pc, #352]	; (8009e80 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009d1e:	429d      	cmp	r5, r3
 8009d20:	bf18      	it	ne
 8009d22:	428d      	cmpne	r5, r1
 8009d24:	bf14      	ite	ne
 8009d26:	2301      	movne	r3, #1
 8009d28:	2300      	moveq	r3, #0
 8009d2a:	4295      	cmp	r5, r2
 8009d2c:	bf0c      	ite	eq
 8009d2e:	2300      	moveq	r3, #0
 8009d30:	f003 0301 	andne.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 808a 	beq.w	8009e4e <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009d3a:	4b4e      	ldr	r3, [pc, #312]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	f000 8086 	beq.w	8009e4e <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d46:	e5bd      	b.n	80098c4 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d48:	4b4c      	ldr	r3, [pc, #304]	; (8009e7c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009d4a:	494b      	ldr	r1, [pc, #300]	; (8009e78 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009d4c:	4a4c      	ldr	r2, [pc, #304]	; (8009e80 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009d4e:	429d      	cmp	r5, r3
 8009d50:	bf18      	it	ne
 8009d52:	428d      	cmpne	r5, r1
 8009d54:	bf14      	ite	ne
 8009d56:	2301      	movne	r3, #1
 8009d58:	2300      	moveq	r3, #0
 8009d5a:	4295      	cmp	r5, r2
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	f003 0301 	andne.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8081 	beq.w	8009e6c <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009d6a:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	d07d      	beq.n	8009e6c <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d74:	e630      	b.n	80099d8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d76:	4b40      	ldr	r3, [pc, #256]	; (8009e78 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009d78:	4940      	ldr	r1, [pc, #256]	; (8009e7c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009d7a:	4a41      	ldr	r2, [pc, #260]	; (8009e80 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009d7c:	429d      	cmp	r5, r3
 8009d7e:	bf18      	it	ne
 8009d80:	428d      	cmpne	r5, r1
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	4295      	cmp	r5, r2
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2300      	moveq	r3, #0
 8009d8e:	f003 0301 	andne.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d058      	beq.n	8009e48 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009d98:	429d      	cmp	r5, r3
 8009d9a:	d055      	beq.n	8009e48 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009d9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009da0:	e496      	b.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009da2:	4b35      	ldr	r3, [pc, #212]	; (8009e78 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009da4:	4935      	ldr	r1, [pc, #212]	; (8009e7c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009da6:	4a36      	ldr	r2, [pc, #216]	; (8009e80 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009da8:	429d      	cmp	r5, r3
 8009daa:	bf18      	it	ne
 8009dac:	428d      	cmpne	r5, r1
 8009dae:	bf14      	ite	ne
 8009db0:	2301      	movne	r3, #1
 8009db2:	2300      	moveq	r3, #0
 8009db4:	4295      	cmp	r5, r2
 8009db6:	bf0c      	ite	eq
 8009db8:	2300      	moveq	r3, #0
 8009dba:	f003 0301 	andne.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d048      	beq.n	8009e54 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009dc2:	4b2c      	ldr	r3, [pc, #176]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	d045      	beq.n	8009e54 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dcc:	e5ed      	b.n	80099aa <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009dce:	4b2a      	ldr	r3, [pc, #168]	; (8009e78 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009dd0:	492a      	ldr	r1, [pc, #168]	; (8009e7c <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009dd2:	4a2b      	ldr	r2, [pc, #172]	; (8009e80 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009dd4:	429d      	cmp	r5, r3
 8009dd6:	bf18      	it	ne
 8009dd8:	428d      	cmpne	r5, r1
 8009dda:	bf14      	ite	ne
 8009ddc:	2301      	movne	r3, #1
 8009dde:	2300      	moveq	r3, #0
 8009de0:	4295      	cmp	r5, r2
 8009de2:	bf0c      	ite	eq
 8009de4:	2300      	moveq	r3, #0
 8009de6:	f003 0301 	andne.w	r3, r3, #1
 8009dea:	b323      	cbz	r3, 8009e36 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009dec:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009dee:	429d      	cmp	r5, r3
 8009df0:	d021      	beq.n	8009e36 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009df6:	e44b      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009dfc:	f7ff bbd6 	b.w	80095ac <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009e04:	e671      	b.n	8009aea <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e0a:	e655      	b.n	8009ab8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e10:	e639      	b.n	8009a86 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e16:	e61c      	b.n	8009a52 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e1c:	e40a      	b.n	8009634 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e22:	e46e      	b.n	8009702 <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009e28:	e4b1      	b.n	800978e <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e2e:	e480      	b.n	8009732 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e34:	e494      	b.n	8009760 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e3a:	e429      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009e40:	e557      	b.n	80098f2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e46:	e526      	b.n	8009896 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e4c:	e440      	b.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e52:	e537      	b.n	80098c4 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8009e54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e58:	e5a7      	b.n	80099aa <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e5e:	e502      	b.n	8009866 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8009e60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e64:	e572      	b.n	800994c <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e6a:	e587      	b.n	800997c <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009e70:	e5b2      	b.n	80099d8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8009e72:	bf00      	nop
 8009e74:	400264a0 	.word	0x400264a0
 8009e78:	40026040 	.word	0x40026040
 8009e7c:	40026440 	.word	0x40026440
 8009e80:	400260a0 	.word	0x400260a0

08009e84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	d15b      	bne.n	8009f44 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8009e8c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8009e90:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009e92:	69e3      	ldr	r3, [r4, #28]
 8009e94:	b90b      	cbnz	r3, 8009e9a <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 8009e96:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8009e9a:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e9c:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	; (8009f58 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 8009ea0:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009ea2:	402b      	ands	r3, r5
 8009ea4:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009eaa:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009eac:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009eae:	f7fd ffbb 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009eb2:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009eb4:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009eb6:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8009eb8:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009eba:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ebc:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8009ebe:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ec0:	f7fd ffb2 	bl	8007e28 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009ec4:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009ec6:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009eca:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8009ecc:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009ece:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009ed0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8009ed2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009ed4:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009eda:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8009edc:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ede:	f7fd ffa3 	bl	8007e28 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8009ee2:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ee4:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8009ee6:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009ee8:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8009eea:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009eec:	f7fd ff9c 	bl	8007e28 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009ef0:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009ef2:	491a      	ldr	r1, [pc, #104]	; (8009f5c <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009ef4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 8009ef8:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009efa:	4a19      	ldr	r2, [pc, #100]	; (8009f60 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009efc:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009efe:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f00:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009f02:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009f04:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 8009f06:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f08:	f7fd ff8e 	bl	8007e28 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009f0c:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f0e:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009f10:	4a14      	ldr	r2, [pc, #80]	; (8009f64 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 8009f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f16:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009f18:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8009f1a:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f1c:	f7fd ff84 	bl	8007e28 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8009f20:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009f22:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8009f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009f28:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8009f2a:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009f2c:	d103      	bne.n	8009f36 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009f2e:	69d9      	ldr	r1, [r3, #28]
 8009f30:	4a0d      	ldr	r2, [pc, #52]	; (8009f68 <ETH_MACDMAConfig+0xe4>)
 8009f32:	430a      	orrs	r2, r1
 8009f34:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009f36:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8009f3a:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009f3c:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8009f3e:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8009f40:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8009f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f4c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8009f50:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8009f54:	e79d      	b.n	8009e92 <ETH_MACDMAConfig+0xe>
 8009f56:	bf00      	nop
 8009f58:	ff20810f 	.word	0xff20810f
 8009f5c:	f8de3f23 	.word	0xf8de3f23
 8009f60:	02200004 	.word	0x02200004
 8009f64:	02c12080 	.word	0x02c12080
 8009f68:	00010040 	.word	0x00010040
 8009f6c:	40028000 	.word	0x40028000

08009f70 <HAL_ETH_DMATxDescListInit>:
{
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 8009f76:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009f7a:	2801      	cmp	r0, #1
 8009f7c:	d03b      	beq.n	8009ff6 <HAL_ETH_DMATxDescListInit+0x86>
 8009f7e:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009f82:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 8009f84:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8009f88:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009f8c:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8009f90:	b31b      	cbz	r3, 8009fda <HAL_ETH_DMATxDescListInit+0x6a>
 8009f92:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009f94:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 8009f98:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009f9c:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009f9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 8009fa2:	f10c 36ff 	add.w	r6, ip, #4294967295
 8009fa6:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009faa:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009fac:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8009fae:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009fb0:	f1ba 0f00 	cmp.w	sl, #0
 8009fb4:	d103      	bne.n	8009fbe <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8009fb6:	6817      	ldr	r7, [r2, #0]
 8009fb8:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8009fbc:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 8009fbe:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 8009fc0:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 8009fc4:	bf34      	ite	cc
 8009fc6:	4675      	movcc	r5, lr
 8009fc8:	f102 0e20 	addcs.w	lr, r2, #32
 8009fcc:	4563      	cmp	r3, ip
 8009fce:	60d5      	str	r5, [r2, #12]
 8009fd0:	f10c 0501 	add.w	r5, ip, #1
 8009fd4:	4672      	mov	r2, lr
 8009fd6:	46ac      	mov	ip, r5
 8009fd8:	d8e3      	bhi.n	8009fa2 <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009fda:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 8009fde:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009fe0:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe6:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 8009fe8:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 8009fec:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009fee:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 8009ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 8009ff6:	2002      	movs	r0, #2
}
 8009ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ffc <HAL_ETH_DMARxDescListInit>:
{
 8009ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a000:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800a002:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800a006:	2801      	cmp	r0, #1
 800a008:	d033      	beq.n	800a072 <HAL_ETH_DMARxDescListInit+0x76>
 800a00a:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a00e:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800a010:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800a012:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a016:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800a01a:	b1eb      	cbz	r3, 800a058 <HAL_ETH_DMARxDescListInit+0x5c>
 800a01c:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800a01e:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a022:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a024:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a028:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800a02c:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800a030:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800a032:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800a034:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800a038:	45c6      	cmp	lr, r8
 800a03a:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a03e:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a040:	bf34      	ite	cc
 800a042:	4675      	movcc	r5, lr
 800a044:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800a048:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a04a:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800a04c:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800a04e:	f10c 0501 	add.w	r5, ip, #1
 800a052:	4672      	mov	r2, lr
 800a054:	46ac      	mov	ip, r5
 800a056:	d8e9      	bhi.n	800a02c <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a058:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800a05a:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800a05c:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a062:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800a064:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800a068:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800a06a:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800a072:	2002      	movs	r0, #2
}
 800a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a078 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800a078:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d078      	beq.n	800a172 <HAL_ETH_TransmitFrame+0xfa>
 800a080:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a084:	2302      	movs	r3, #2
 800a086:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800a088:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a08c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800a090:	2900      	cmp	r1, #0
 800a092:	d03c      	beq.n	800a10e <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a094:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	2800      	cmp	r0, #0
 800a09a:	db60      	blt.n	800a15e <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a09c:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800a0a0:	4281      	cmp	r1, r0
{
 800a0a2:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a0a4:	d93c      	bls.n	800a120 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800a0a6:	4c34      	ldr	r4, [pc, #208]	; (800a178 <HAL_ETH_TransmitFrame+0x100>)
 800a0a8:	fba4 4c01 	umull	r4, ip, r4, r1
 800a0ac:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800a0b0:	fb00 101c 	mls	r0, r0, ip, r1
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d030      	beq.n	800a11a <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800a0b8:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a0bc:	482f      	ldr	r0, [pc, #188]	; (800a17c <HAL_ETH_TransmitFrame+0x104>)
 800a0be:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800a0c2:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a0c4:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a0c8:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800a0cc:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a0d0:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800a0d4:	e00f      	b.n	800a0f6 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800a0d6:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a0d8:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800a0da:	d104      	bne.n	800a0e6 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a0dc:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a0de:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a0e0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800a0e4:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a0e6:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800a0e8:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a0ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800a0ee:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a0f0:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a0f2:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800a0f4:	d03b      	beq.n	800a16e <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800a0fc:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	d1e9      	bne.n	800a0d6 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a102:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a104:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a106:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800a10a:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800a10c:	e7eb      	b.n	800a0e6 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800a10e:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800a110:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a114:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800a118:	4770      	bx	lr
  if (bufcount == 1)
 800a11a:	f1bc 0f01 	cmp.w	ip, #1
 800a11e:	d1cd      	bne.n	800a0bc <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a120:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a122:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a126:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a128:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a12c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a12e:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a130:	6819      	ldr	r1, [r3, #0]
 800a132:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a136:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a138:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a13a:	6813      	ldr	r3, [r2, #0]
 800a13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a140:	6959      	ldr	r1, [r3, #20]
 800a142:	0749      	lsls	r1, r1, #29
 800a144:	d503      	bpl.n	800a14e <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a146:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800a148:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a14a:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800a14c:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800a14e:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800a150:	2101      	movs	r1, #1
  return HAL_OK;
 800a152:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a154:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a158:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800a15c:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a15e:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800a160:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a162:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a164:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a168:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800a16c:	4770      	bx	lr
 800a16e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a170:	e7e3      	b.n	800a13a <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800a172:	2002      	movs	r0, #2
}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	ac02b00b 	.word	0xac02b00b
 800a17c:	fffffa0c 	.word	0xfffffa0c

0800a180 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800a180:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a184:	2b01      	cmp	r3, #1
 800a186:	d02f      	beq.n	800a1e8 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800a188:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a18a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a18c:	4602      	mov	r2, r0
{
 800a18e:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800a190:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a192:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a196:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a19a:	6819      	ldr	r1, [r3, #0]
 800a19c:	2900      	cmp	r1, #0
 800a19e:	db15      	blt.n	800a1cc <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800a1a0:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a1a2:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800a1a4:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a1a6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800a1aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1ae:	d016      	beq.n	800a1de <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800a1b6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a1b8:	d118      	bne.n	800a1ec <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a1ba:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800a1bc:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a1be:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800a1c0:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	db01      	blt.n	800a1cc <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800a1c8:	2804      	cmp	r0, #4
 800a1ca:	d1ea      	bne.n	800a1a2 <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800a1cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800a1ce:	2100      	movs	r1, #0
  return HAL_ERROR;
 800a1d0:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a1d2:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a1d6:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800a1da:	bc30      	pop	{r4, r5}
 800a1dc:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a1de:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a1e0:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800a1e2:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a1e4:	6293      	str	r3, [r2, #40]	; 0x28
 800a1e6:	e7ec      	b.n	800a1c2 <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800a1e8:	2002      	movs	r0, #2
}
 800a1ea:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800a1ec:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a1ee:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a1f0:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800a1f2:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a1f4:	d011      	beq.n	800a21a <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a1f6:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a1f8:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800a1fa:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a1fc:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a1fe:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a200:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800a204:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a206:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a208:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a20a:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800a20c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800a210:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a212:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800a214:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800a218:	e7df      	b.n	800a1da <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a21a:	4618      	mov	r0, r3
 800a21c:	6313      	str	r3, [r2, #48]	; 0x30
 800a21e:	e7eb      	b.n	800a1f8 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800a220 <HAL_ETH_TxCpltCallback>:
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop

0800a224 <HAL_ETH_ErrorCallback>:
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop

0800a228 <HAL_ETH_IRQHandler>:
{
 800a228:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a22a:	6803      	ldr	r3, [r0, #0]
{
 800a22c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	695d      	ldr	r5, [r3, #20]
 800a234:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800a238:	d125      	bne.n	800a286 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800a23a:	695a      	ldr	r2, [r3, #20]
 800a23c:	07d2      	lsls	r2, r2, #31
 800a23e:	d416      	bmi.n	800a26e <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800a240:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a244:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	041b      	lsls	r3, r3, #16
 800a24a:	d400      	bmi.n	800a24e <HAL_ETH_IRQHandler+0x26>
}
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800a24e:	4620      	mov	r0, r4
 800a250:	f7ff ffe8 	bl	800a224 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800a25a:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a260:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a262:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a264:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a268:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800a26e:	f7ff ffd7 	bl	800a220 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	2201      	movs	r2, #1
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a27c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a280:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a284:	e7dc      	b.n	800a240 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800a286:	f009 ff4f 	bl	8014128 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800a28e:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a294:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a296:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a298:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a29c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a2a0:	e7ce      	b.n	800a240 <HAL_ETH_IRQHandler+0x18>
 800a2a2:	bf00      	nop

0800a2a4 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a2a4:	8a03      	ldrh	r3, [r0, #16]
 800a2a6:	2b20      	cmp	r3, #32
{
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	460e      	mov	r6, r1
 800a2ae:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a2b0:	d834      	bhi.n	800a31c <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a2b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a2b6:	2b82      	cmp	r3, #130	; 0x82
 800a2b8:	d039      	beq.n	800a32e <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a2ba:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800a2bc:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a2be:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a2c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a2c4:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a2c6:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a2ca:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a2cc:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a2ce:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a2d2:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800a2d8:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800a2dc:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a2de:	f7fd fd9d 	bl	8007e1c <HAL_GetTick>
 800a2e2:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a2e4:	e004      	b.n	800a2f0 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800a2e6:	6821      	ldr	r1, [r4, #0]
 800a2e8:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a2ea:	f013 0301 	ands.w	r3, r3, #1
 800a2ee:	d00d      	beq.n	800a30c <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a2f0:	f7fd fd94 	bl	8007e1c <HAL_GetTick>
 800a2f4:	1b83      	subs	r3, r0, r6
 800a2f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2fa:	d3f4      	bcc.n	800a2e6 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800a2fc:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a2fe:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a300:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a302:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a30c:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800a30e:	2101      	movs	r1, #1
  return HAL_OK;
 800a310:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a312:	b292      	uxth	r2, r2
 800a314:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a316:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a31c:	f240 5116 	movw	r1, #1302	; 0x516
 800a320:	4804      	ldr	r0, [pc, #16]	; (800a334 <HAL_ETH_ReadPHYRegister+0x90>)
 800a322:	f7f9 ffa7 	bl	8004274 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a326:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a32a:	2b82      	cmp	r3, #130	; 0x82
 800a32c:	d1c5      	bne.n	800a2ba <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800a32e:	2002      	movs	r0, #2
}
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	bf00      	nop
 800a334:	0802c288 	.word	0x0802c288

0800a338 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a338:	8a03      	ldrh	r3, [r0, #16]
 800a33a:	2b20      	cmp	r3, #32
{
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a344:	d833      	bhi.n	800a3ae <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a346:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a34a:	2b42      	cmp	r3, #66	; 0x42
 800a34c:	d038      	beq.n	800a3c0 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a34e:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800a350:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a352:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a354:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800a358:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a35a:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a35c:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a360:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a362:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a364:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a366:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a36a:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a36c:	430b      	orrs	r3, r1
 800a36e:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800a370:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800a374:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a376:	f7fd fd51 	bl	8007e1c <HAL_GetTick>
 800a37a:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a37c:	e004      	b.n	800a388 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a382:	f013 0301 	ands.w	r3, r3, #1
 800a386:	d00d      	beq.n	800a3a4 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a388:	f7fd fd48 	bl	8007e1c <HAL_GetTick>
 800a38c:	1b43      	subs	r3, r0, r5
 800a38e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a392:	d3f4      	bcc.n	800a37e <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800a394:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a396:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a398:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a39a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a39e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800a3a4:	2201      	movs	r2, #1
  return HAL_OK; 
 800a3a6:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a3a8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a3ae:	f240 515e 	movw	r1, #1374	; 0x55e
 800a3b2:	4804      	ldr	r0, [pc, #16]	; (800a3c4 <HAL_ETH_WritePHYRegister+0x8c>)
 800a3b4:	f7f9 ff5e 	bl	8004274 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a3b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3bc:	2b42      	cmp	r3, #66	; 0x42
 800a3be:	d1c6      	bne.n	800a34e <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800a3c0:	2002      	movs	r0, #2
}
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	0802c288 	.word	0x0802c288

0800a3c8 <HAL_ETH_Init>:
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800a3ca:	2300      	movs	r3, #0
{
 800a3cc:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800a3ce:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	f000 80f5 	beq.w	800a5c0 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a3d6:	6843      	ldr	r3, [r0, #4]
 800a3d8:	4604      	mov	r4, r0
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	f200 809c 	bhi.w	800a518 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a3e0:	69a3      	ldr	r3, [r4, #24]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	f200 808f 	bhi.w	800a506 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a3e8:	69e3      	ldr	r3, [r4, #28]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d873      	bhi.n	800a4d6 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a3ee:	6a23      	ldr	r3, [r4, #32]
 800a3f0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a3f4:	d177      	bne.n	800a4e6 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a3f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d07b      	beq.n	800a4fa <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a402:	4b91      	ldr	r3, [pc, #580]	; (800a648 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a404:	4a91      	ldr	r2, [pc, #580]	; (800a64c <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a406:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a408:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a40c:	6459      	str	r1, [r3, #68]	; 0x44
 800a40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a418:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a41a:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a41c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a424:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a426:	6851      	ldr	r1, [r2, #4]
 800a428:	6a20      	ldr	r0, [r4, #32]
 800a42a:	4301      	orrs	r1, r0
 800a42c:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	f042 0201 	orr.w	r2, r2, #1
 800a434:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a436:	f7fd fcf1 	bl	8007e1c <HAL_GetTick>
 800a43a:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a43c:	e005      	b.n	800a44a <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a43e:	f7fd fced 	bl	8007e1c <HAL_GetTick>
 800a442:	1b43      	subs	r3, r0, r5
 800a444:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a448:	d86f      	bhi.n	800a52a <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	07d0      	lsls	r0, r2, #31
 800a454:	d4f3      	bmi.n	800a43e <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800a456:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800a458:	f003 faac 	bl	800d9b4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a45c:	4b7c      	ldr	r3, [pc, #496]	; (800a650 <HAL_ETH_Init+0x288>)
 800a45e:	4a7d      	ldr	r2, [pc, #500]	; (800a654 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a460:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a464:	4403      	add	r3, r0
 800a466:	4293      	cmp	r3, r2
 800a468:	d274      	bcs.n	800a554 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a46a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a46e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a474:	2100      	movs	r1, #0
 800a476:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a478:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a47a:	f7ff ff5d 	bl	800a338 <HAL_ETH_WritePHYRegister>
 800a47e:	4605      	mov	r5, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	d15c      	bne.n	800a53e <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800a484:	20ff      	movs	r0, #255	; 0xff
 800a486:	f7fd fccf 	bl	8007e28 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a48a:	6863      	ldr	r3, [r4, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d178      	bne.n	800a582 <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a496:	f040 809e 	bne.w	800a5d6 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a49a:	68e3      	ldr	r3, [r4, #12]
 800a49c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a4a0:	f040 8092 	bne.w	800a5c8 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a4a4:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a4a6:	08db      	lsrs	r3, r3, #3
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	f7ff ff41 	bl	800a338 <HAL_ETH_WritePHYRegister>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d141      	bne.n	800a53e <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800a4ba:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a4be:	f7fd fcb3 	bl	8007e28 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	f7ff fcdd 	bl	8009e84 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800a4ca:	2301      	movs	r3, #1
}
 800a4cc:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800a4ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a4d2:	b003      	add	sp, #12
 800a4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a4d6:	21e0      	movs	r1, #224	; 0xe0
 800a4d8:	485f      	ldr	r0, [pc, #380]	; (800a658 <HAL_ETH_Init+0x290>)
 800a4da:	f7f9 fecb 	bl	8004274 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a4de:	6a23      	ldr	r3, [r4, #32]
 800a4e0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a4e4:	d087      	beq.n	800a3f6 <HAL_ETH_Init+0x2e>
 800a4e6:	21e1      	movs	r1, #225	; 0xe1
 800a4e8:	485b      	ldr	r0, [pc, #364]	; (800a658 <HAL_ETH_Init+0x290>)
 800a4ea:	f7f9 fec3 	bl	8004274 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a4ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a4f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d183      	bne.n	800a402 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800a4fa:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800a4fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800a500:	f009 fd84 	bl	801400c <HAL_ETH_MspInit>
 800a504:	e77d      	b.n	800a402 <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a506:	21df      	movs	r1, #223	; 0xdf
 800a508:	4853      	ldr	r0, [pc, #332]	; (800a658 <HAL_ETH_Init+0x290>)
 800a50a:	f7f9 feb3 	bl	8004274 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a50e:	69e3      	ldr	r3, [r4, #28]
 800a510:	2b01      	cmp	r3, #1
 800a512:	f67f af6c 	bls.w	800a3ee <HAL_ETH_Init+0x26>
 800a516:	e7de      	b.n	800a4d6 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a518:	21de      	movs	r1, #222	; 0xde
 800a51a:	484f      	ldr	r0, [pc, #316]	; (800a658 <HAL_ETH_Init+0x290>)
 800a51c:	f7f9 feaa 	bl	8004274 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a520:	69a3      	ldr	r3, [r4, #24]
 800a522:	2b01      	cmp	r3, #1
 800a524:	f67f af60 	bls.w	800a3e8 <HAL_ETH_Init+0x20>
 800a528:	e7ed      	b.n	800a506 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800a52c:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800a52e:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a530:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a534:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a538:	4628      	mov	r0, r5
 800a53a:	b003      	add	sp, #12
 800a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800a53e:	4620      	mov	r0, r4
 800a540:	2101      	movs	r1, #1
 800a542:	f7ff fc9f 	bl	8009e84 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800a546:	2301      	movs	r3, #1
      return HAL_ERROR;
 800a548:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800a54a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a54e:	4628      	mov	r0, r5
 800a550:	b003      	add	sp, #12
 800a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a554:	4b41      	ldr	r3, [pc, #260]	; (800a65c <HAL_ETH_Init+0x294>)
 800a556:	4a42      	ldr	r2, [pc, #264]	; (800a660 <HAL_ETH_Init+0x298>)
 800a558:	4403      	add	r3, r0
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d90e      	bls.n	800a57c <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a55e:	4b41      	ldr	r3, [pc, #260]	; (800a664 <HAL_ETH_Init+0x29c>)
 800a560:	4a41      	ldr	r2, [pc, #260]	; (800a668 <HAL_ETH_Init+0x2a0>)
 800a562:	4403      	add	r3, r0
 800a564:	4293      	cmp	r3, r2
 800a566:	d382      	bcc.n	800a46e <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a568:	4b40      	ldr	r3, [pc, #256]	; (800a66c <HAL_ETH_Init+0x2a4>)
 800a56a:	4a41      	ldr	r2, [pc, #260]	; (800a670 <HAL_ETH_Init+0x2a8>)
 800a56c:	4403      	add	r3, r0
 800a56e:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a570:	bf94      	ite	ls
 800a572:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a576:	f045 0510 	orrhi.w	r5, r5, #16
 800a57a:	e778      	b.n	800a46e <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a57c:	f045 050c 	orr.w	r5, r5, #12
 800a580:	e775      	b.n	800a46e <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800a582:	f7fd fc4b 	bl	8007e1c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a586:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a58a:	4606      	mov	r6, r0
 800a58c:	e002      	b.n	800a594 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	0759      	lsls	r1, r3, #29
 800a592:	d426      	bmi.n	800a5e2 <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a594:	466a      	mov	r2, sp
 800a596:	2101      	movs	r1, #1
 800a598:	4620      	mov	r0, r4
 800a59a:	f7ff fe83 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a59e:	f7fd fc3d 	bl	8007e1c <HAL_GetTick>
 800a5a2:	1b80      	subs	r0, r0, r6
 800a5a4:	42b8      	cmp	r0, r7
 800a5a6:	d9f2      	bls.n	800a58e <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff fc6a 	bl	8009e84 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800a5b0:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800a5b2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a5b4:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800a5b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800a5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800a5be:	e7bb      	b.n	800a538 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800a5c0:	2501      	movs	r5, #1
}
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a5c8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800a5cc:	4822      	ldr	r0, [pc, #136]	; (800a658 <HAL_ETH_Init+0x290>)
 800a5ce:	f7f9 fe51 	bl	8004274 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a5d2:	68e3      	ldr	r3, [r4, #12]
 800a5d4:	e766      	b.n	800a4a4 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a5d6:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a5da:	481f      	ldr	r0, [pc, #124]	; (800a658 <HAL_ETH_Init+0x290>)
 800a5dc:	f7f9 fe4a 	bl	8004274 <assert_failed>
 800a5e0:	e75b      	b.n	800a49a <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a5e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f7ff fea5 	bl	800a338 <HAL_ETH_WritePHYRegister>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d1a5      	bne.n	800a53e <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800a5f2:	f7fd fc13 	bl	8007e1c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a5f6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	e002      	b.n	800a604 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a5fe:	9b00      	ldr	r3, [sp, #0]
 800a600:	069a      	lsls	r2, r3, #26
 800a602:	d40a      	bmi.n	800a61a <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a604:	466a      	mov	r2, sp
 800a606:	2101      	movs	r1, #1
 800a608:	4620      	mov	r0, r4
 800a60a:	f7ff fe4b 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a60e:	f7fd fc05 	bl	8007e1c <HAL_GetTick>
 800a612:	1b80      	subs	r0, r0, r6
 800a614:	42b8      	cmp	r0, r7
 800a616:	d9f2      	bls.n	800a5fe <HAL_ETH_Init+0x236>
 800a618:	e7c6      	b.n	800a5a8 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a61a:	466a      	mov	r2, sp
 800a61c:	2110      	movs	r1, #16
 800a61e:	4620      	mov	r0, r4
 800a620:	f7ff fe40 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
 800a624:	2800      	cmp	r0, #0
 800a626:	d18a      	bne.n	800a53e <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a628:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a62a:	f013 0204 	ands.w	r2, r3, #4
 800a62e:	bf18      	it	ne
 800a630:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a634:	079b      	lsls	r3, r3, #30
 800a636:	60e2      	str	r2, [r4, #12]
 800a638:	d501      	bpl.n	800a63e <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a63a:	60a0      	str	r0, [r4, #8]
 800a63c:	e741      	b.n	800a4c2 <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800a63e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	e73d      	b.n	800a4c2 <HAL_ETH_Init+0xfa>
 800a646:	bf00      	nop
 800a648:	40023800 	.word	0x40023800
 800a64c:	40013800 	.word	0x40013800
 800a650:	feced300 	.word	0xfeced300
 800a654:	00e4e1c0 	.word	0x00e4e1c0
 800a658:	0802c288 	.word	0x0802c288
 800a65c:	fde9f140 	.word	0xfde9f140
 800a660:	017d783f 	.word	0x017d783f
 800a664:	fc6c7900 	.word	0xfc6c7900
 800a668:	02625a00 	.word	0x02625a00
 800a66c:	fa0a1f00 	.word	0xfa0a1f00
 800a670:	02faf07f 	.word	0x02faf07f

0800a674 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800a674:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d044      	beq.n	800a706 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a67c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a67e:	2202      	movs	r2, #2
{  
 800a680:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800a682:	2601      	movs	r6, #1
{  
 800a684:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800a686:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800a688:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a68c:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800a690:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800a692:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a694:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	f042 0208 	orr.w	r2, r2, #8
 800a69c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6a2:	f7fd fbc1 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a6a6:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6a8:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800a6ae:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	f042 0204 	orr.w	r2, r2, #4
 800a6b6:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6bc:	f7fd fbb4 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a6c0:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6c2:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a6cc:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a6ce:	699a      	ldr	r2, [r3, #24]
 800a6d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a6d4:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6da:	f7fd fba5 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a6de:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800a6e0:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800a6e2:	9a01      	ldr	r2, [sp, #4]
 800a6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e8:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6f0:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	f042 0202 	orr.w	r2, r2, #2
 800a6f8:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800a6fa:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a6fe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a702:	b004      	add	sp, #16
 800a704:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a706:	2002      	movs	r0, #2
}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop

0800a70c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800a70c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a710:	2b01      	cmp	r3, #1
 800a712:	d046      	beq.n	800a7a2 <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a714:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a716:	2102      	movs	r1, #2
{  
 800a718:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a71a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800a71e:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a720:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800a724:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800a726:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800a72a:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a72c:	6991      	ldr	r1, [r2, #24]
 800a72e:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a730:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a732:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a736:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800a738:	6991      	ldr	r1, [r2, #24]
 800a73a:	f021 0102 	bic.w	r1, r1, #2
 800a73e:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a740:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	f022 0204 	bic.w	r2, r2, #4
 800a748:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a74e:	f7fd fb6b 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a752:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a754:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a75e:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a766:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a76c:	f7fd fb5c 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a770:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a772:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800a774:	9902      	ldr	r1, [sp, #8]
 800a776:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a77a:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a77c:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	f022 0208 	bic.w	r2, r2, #8
 800a784:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a78a:	f7fd fb4d 	bl	8007e28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a78e:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800a790:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a796:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a79a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a79e:	b004      	add	sp, #16
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a7a2:	2002      	movs	r0, #2
}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop

0800a7a8 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800a7a8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	f000 8249 	beq.w	800ac44 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a7b2:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800a7b4:	2202      	movs	r2, #2
{
 800a7b6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a7b8:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a7bc:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800a7be:	f04f 0101 	mov.w	r1, #1
 800a7c2:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800a7c4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a7c8:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a7cc:	f040 8207 	bne.w	800abde <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a7d0:	68eb      	ldr	r3, [r5, #12]
 800a7d2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a7d6:	f040 8114 	bne.w	800aa02 <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800a7da:	2c00      	cmp	r4, #0
 800a7dc:	f000 8119 	beq.w	800aa12 <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a7e6:	f040 8139 	bne.w	800aa5c <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a7f0:	f040 816b 	bne.w	800aaca <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a7fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7fe:	d002      	beq.n	800a806 <HAL_ETH_ConfigMAC+0x5e>
 800a800:	2b00      	cmp	r3, #0
 800a802:	f040 8221 	bne.w	800ac48 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a80c:	f040 8152 	bne.w	800aab4 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a816:	f040 8142 	bne.w	800aa9e <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a820:	f040 8132 	bne.w	800aa88 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a824:	69a3      	ldr	r3, [r4, #24]
 800a826:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a82a:	f040 8122 	bne.w	800aa72 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a82e:	69e3      	ldr	r3, [r4, #28]
 800a830:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a834:	f040 81a3 	bne.w	800ab7e <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a838:	6a23      	ldr	r3, [r4, #32]
 800a83a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a83e:	f040 818e 	bne.w	800ab5e <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a844:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a848:	f040 8193 	bne.w	800ab72 <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a84c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a84e:	f033 0310 	bics.w	r3, r3, #16
 800a852:	f040 8179 	bne.w	800ab48 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a858:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a85c:	f040 819a 	bne.w	800ab94 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a860:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a862:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a866:	d003      	beq.n	800a870 <HAL_ETH_ConfigMAC+0xc8>
 800a868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a86c:	f040 81d8 	bne.w	800ac20 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a876:	2a40      	cmp	r2, #64	; 0x40
 800a878:	d002      	beq.n	800a880 <HAL_ETH_ConfigMAC+0xd8>
 800a87a:	2b80      	cmp	r3, #128	; 0x80
 800a87c:	f040 81ba 	bne.w	800abf4 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a882:	f033 0320 	bics.w	r3, r3, #32
 800a886:	f040 80de 	bne.w	800aa46 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a88a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a88c:	f033 0308 	bics.w	r3, r3, #8
 800a890:	f040 80cf 	bne.w	800aa32 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a896:	2b01      	cmp	r3, #1
 800a898:	f200 80a5 	bhi.w	800a9e6 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a89c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a89e:	f240 4204 	movw	r2, #1028	; 0x404
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	bf18      	it	ne
 800a8a6:	2b10      	cmpne	r3, #16
 800a8a8:	d003      	beq.n	800a8b2 <HAL_ETH_ConfigMAC+0x10a>
 800a8aa:	f033 0304 	bics.w	r3, r3, #4
 800a8ae:	f040 81c3 	bne.w	800ac38 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a8b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a8b4:	f033 0202 	bics.w	r2, r3, #2
 800a8b8:	d004      	beq.n	800a8c4 <HAL_ETH_ConfigMAC+0x11c>
 800a8ba:	f240 4202 	movw	r2, #1026	; 0x402
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	f040 81a3 	bne.w	800ac0a <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a8c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ca:	f080 816e 	bcs.w	800abaa <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a8ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8d0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a8d4:	f040 8173 	bne.w	800abbe <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a8d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a8da:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a8de:	f040 8178 	bne.w	800abd2 <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a8e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a8e4:	f033 0308 	bics.w	r3, r3, #8
 800a8e8:	f040 8123 	bne.w	800ab32 <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a8ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ee:	f033 0304 	bics.w	r3, r3, #4
 800a8f2:	f040 8113 	bne.w	800ab1c <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a8f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a8f8:	f033 0302 	bics.w	r3, r3, #2
 800a8fc:	f040 8103 	bne.w	800ab06 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a900:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a902:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a906:	f040 80f3 	bne.w	800aaf0 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a90a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a910:	f080 80e8 	bcs.w	800aae4 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800a914:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a916:	49b5      	ldr	r1, [pc, #724]	; (800abec <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800a918:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800a91a:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a91c:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800a91e:	6860      	ldr	r0, [r4, #4]
 800a920:	4303      	orrs	r3, r0
 800a922:	68a0      	ldr	r0, [r4, #8]
 800a924:	4303      	orrs	r3, r0
 800a926:	68e0      	ldr	r0, [r4, #12]
 800a928:	4303      	orrs	r3, r0
 800a92a:	6920      	ldr	r0, [r4, #16]
 800a92c:	4303      	orrs	r3, r0
 800a92e:	6960      	ldr	r0, [r4, #20]
 800a930:	4303      	orrs	r3, r0
 800a932:	69a0      	ldr	r0, [r4, #24]
 800a934:	4303      	orrs	r3, r0
 800a936:	69e0      	ldr	r0, [r4, #28]
 800a938:	4303      	orrs	r3, r0
 800a93a:	6a20      	ldr	r0, [r4, #32]
 800a93c:	4303      	orrs	r3, r0
 800a93e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a940:	4303      	orrs	r3, r0
 800a942:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a944:	4303      	orrs	r3, r0
 800a946:	68a8      	ldr	r0, [r5, #8]
 800a948:	4303      	orrs	r3, r0
 800a94a:	68e8      	ldr	r0, [r5, #12]
 800a94c:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a94e:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800a950:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a952:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a954:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a956:	f7fd fa67 	bl	8007e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800a95a:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a95c:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a95e:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800a962:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a964:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800a966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a968:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800a96a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a96c:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800a96e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a970:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800a972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a974:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800a976:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a978:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800a97a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a97c:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a97e:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800a980:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a982:	f7fd fa51 	bl	8007e28 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800a986:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a98a:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800a98c:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a98e:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a990:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a994:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800a996:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a998:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800a99a:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800a99e:	4303      	orrs	r3, r0
 800a9a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a9a2:	4303      	orrs	r3, r0
 800a9a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a9a6:	4303      	orrs	r3, r0
 800a9a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a9aa:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a9ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800a9ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9b2:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a9b4:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a9b6:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800a9b8:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9ba:	f7fd fa35 	bl	8007e28 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800a9be:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9c0:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a9c2:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800a9c6:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800a9cc:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9ce:	f7fd fa2b 	bl	8007e28 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800a9d2:	682b      	ldr	r3, [r5, #0]
 800a9d4:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800a9d6:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800a9d8:	2201      	movs	r2, #1
  return HAL_OK;  
 800a9da:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800a9dc:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a9e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a9e6:	f240 6123 	movw	r1, #1571	; 0x623
 800a9ea:	4881      	ldr	r0, [pc, #516]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800a9ec:	f7f9 fc42 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a9f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a9f2:	f240 4204 	movw	r2, #1028	; 0x404
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	bf18      	it	ne
 800a9fa:	2b10      	cmpne	r3, #16
 800a9fc:	f47f af55 	bne.w	800a8aa <HAL_ETH_ConfigMAC+0x102>
 800aa00:	e757      	b.n	800a8b2 <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800aa02:	f240 610e 	movw	r1, #1550	; 0x60e
 800aa06:	487a      	ldr	r0, [pc, #488]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa08:	f7f9 fc34 	bl	8004274 <assert_failed>
  if (macconf != NULL)
 800aa0c:	2c00      	cmp	r4, #0
 800aa0e:	f47f aee7 	bne.w	800a7e0 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800aa12:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa14:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800aa16:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800aa1a:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800aa1c:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800aa1e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800aa22:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800aa24:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800aa26:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa28:	f7fd f9fe 	bl	8007e28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	601c      	str	r4, [r3, #0]
 800aa30:	e7d1      	b.n	800a9d6 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800aa32:	f240 6122 	movw	r1, #1570	; 0x622
 800aa36:	486e      	ldr	r0, [pc, #440]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa38:	f7f9 fc1c 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800aa3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	f67f af2c 	bls.w	800a89c <HAL_ETH_ConfigMAC+0xf4>
 800aa44:	e7cf      	b.n	800a9e6 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800aa46:	f240 6121 	movw	r1, #1569	; 0x621
 800aa4a:	4869      	ldr	r0, [pc, #420]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa4c:	f7f9 fc12 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800aa50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa52:	f033 0308 	bics.w	r3, r3, #8
 800aa56:	f43f af1d 	beq.w	800a894 <HAL_ETH_ConfigMAC+0xec>
 800aa5a:	e7ea      	b.n	800aa32 <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800aa5c:	f240 6113 	movw	r1, #1555	; 0x613
 800aa60:	4863      	ldr	r0, [pc, #396]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa62:	f7f9 fc07 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800aa6c:	f43f aec2 	beq.w	800a7f4 <HAL_ETH_ConfigMAC+0x4c>
 800aa70:	e02b      	b.n	800aaca <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800aa72:	f240 6119 	movw	r1, #1561	; 0x619
 800aa76:	485e      	ldr	r0, [pc, #376]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa78:	f7f9 fbfc 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800aa7c:	69e3      	ldr	r3, [r4, #28]
 800aa7e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800aa82:	f43f aed9 	beq.w	800a838 <HAL_ETH_ConfigMAC+0x90>
 800aa86:	e07a      	b.n	800ab7e <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800aa88:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800aa8c:	4858      	ldr	r0, [pc, #352]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aa8e:	f7f9 fbf1 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800aa92:	69a3      	ldr	r3, [r4, #24]
 800aa94:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800aa98:	f43f aec9 	beq.w	800a82e <HAL_ETH_ConfigMAC+0x86>
 800aa9c:	e7e9      	b.n	800aa72 <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800aa9e:	f240 6117 	movw	r1, #1559	; 0x617
 800aaa2:	4853      	ldr	r0, [pc, #332]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aaa4:	f7f9 fbe6 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800aaa8:	6963      	ldr	r3, [r4, #20]
 800aaaa:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800aaae:	f43f aeb9 	beq.w	800a824 <HAL_ETH_ConfigMAC+0x7c>
 800aab2:	e7e9      	b.n	800aa88 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800aab4:	f240 6116 	movw	r1, #1558	; 0x616
 800aab8:	484d      	ldr	r0, [pc, #308]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aaba:	f7f9 fbdb 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800aac4:	f43f aea9 	beq.w	800a81a <HAL_ETH_ConfigMAC+0x72>
 800aac8:	e7e9      	b.n	800aa9e <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800aaca:	f240 6114 	movw	r1, #1556	; 0x614
 800aace:	4848      	ldr	r0, [pc, #288]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aad0:	f7f9 fbd0 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800aad4:	68a3      	ldr	r3, [r4, #8]
 800aad6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800aada:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aade:	f47f ae8f 	bne.w	800a800 <HAL_ETH_ConfigMAC+0x58>
 800aae2:	e690      	b.n	800a806 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800aae4:	f240 612d 	movw	r1, #1581	; 0x62d
 800aae8:	4841      	ldr	r0, [pc, #260]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aaea:	f7f9 fbc3 	bl	8004274 <assert_failed>
 800aaee:	e711      	b.n	800a914 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800aaf0:	f240 612c 	movw	r1, #1580	; 0x62c
 800aaf4:	483e      	ldr	r0, [pc, #248]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800aaf6:	f7f9 fbbd 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800aafa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab00:	f4ff af08 	bcc.w	800a914 <HAL_ETH_ConfigMAC+0x16c>
 800ab04:	e7ee      	b.n	800aae4 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ab06:	f240 612b 	movw	r1, #1579	; 0x62b
 800ab0a:	4839      	ldr	r0, [pc, #228]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab0c:	f7f9 fbb2 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ab10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab12:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ab16:	f43f aef8 	beq.w	800a90a <HAL_ETH_ConfigMAC+0x162>
 800ab1a:	e7e9      	b.n	800aaf0 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800ab1c:	f240 612a 	movw	r1, #1578	; 0x62a
 800ab20:	4833      	ldr	r0, [pc, #204]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab22:	f7f9 fba7 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ab26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ab28:	f033 0302 	bics.w	r3, r3, #2
 800ab2c:	f43f aee8 	beq.w	800a900 <HAL_ETH_ConfigMAC+0x158>
 800ab30:	e7e9      	b.n	800ab06 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800ab32:	f240 6129 	movw	r1, #1577	; 0x629
 800ab36:	482e      	ldr	r0, [pc, #184]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab38:	f7f9 fb9c 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800ab3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab3e:	f033 0304 	bics.w	r3, r3, #4
 800ab42:	f43f aed8 	beq.w	800a8f6 <HAL_ETH_ConfigMAC+0x14e>
 800ab46:	e7e9      	b.n	800ab1c <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800ab48:	f240 611d 	movw	r1, #1565	; 0x61d
 800ab4c:	4828      	ldr	r0, [pc, #160]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab4e:	f7f9 fb91 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800ab52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab54:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800ab58:	f43f ae82 	beq.w	800a860 <HAL_ETH_ConfigMAC+0xb8>
 800ab5c:	e01a      	b.n	800ab94 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800ab5e:	f240 611b 	movw	r1, #1563	; 0x61b
 800ab62:	4823      	ldr	r0, [pc, #140]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab64:	f7f9 fb86 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800ab68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab6a:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800ab6e:	f43f ae6d 	beq.w	800a84c <HAL_ETH_ConfigMAC+0xa4>
 800ab72:	f240 611c 	movw	r1, #1564	; 0x61c
 800ab76:	481e      	ldr	r0, [pc, #120]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab78:	f7f9 fb7c 	bl	8004274 <assert_failed>
 800ab7c:	e666      	b.n	800a84c <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800ab7e:	f240 611a 	movw	r1, #1562	; 0x61a
 800ab82:	481b      	ldr	r0, [pc, #108]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab84:	f7f9 fb76 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800ab88:	6a23      	ldr	r3, [r4, #32]
 800ab8a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ab8e:	f43f ae58 	beq.w	800a842 <HAL_ETH_ConfigMAC+0x9a>
 800ab92:	e7e4      	b.n	800ab5e <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800ab94:	f240 611e 	movw	r1, #1566	; 0x61e
 800ab98:	4815      	ldr	r0, [pc, #84]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800ab9a:	f7f9 fb6b 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800ab9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aba0:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800aba4:	f47f ae60 	bne.w	800a868 <HAL_ETH_ConfigMAC+0xc0>
 800aba8:	e662      	b.n	800a870 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800abaa:	f240 6126 	movw	r1, #1574	; 0x626
 800abae:	4810      	ldr	r0, [pc, #64]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800abb0:	f7f9 fb60 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800abb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abb6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800abba:	f43f ae8d 	beq.w	800a8d8 <HAL_ETH_ConfigMAC+0x130>
 800abbe:	f240 6127 	movw	r1, #1575	; 0x627
 800abc2:	480b      	ldr	r0, [pc, #44]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800abc4:	f7f9 fb56 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800abc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800abca:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800abce:	f43f ae88 	beq.w	800a8e2 <HAL_ETH_ConfigMAC+0x13a>
 800abd2:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800abd6:	4806      	ldr	r0, [pc, #24]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800abd8:	f7f9 fb4c 	bl	8004274 <assert_failed>
 800abdc:	e681      	b.n	800a8e2 <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800abde:	f240 610d 	movw	r1, #1549	; 0x60d
 800abe2:	4803      	ldr	r0, [pc, #12]	; (800abf0 <HAL_ETH_ConfigMAC+0x448>)
 800abe4:	f7f9 fb46 	bl	8004274 <assert_failed>
 800abe8:	e5f2      	b.n	800a7d0 <HAL_ETH_ConfigMAC+0x28>
 800abea:	bf00      	nop
 800abec:	ff20810f 	.word	0xff20810f
 800abf0:	0802c288 	.word	0x0802c288
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800abf4:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800abf8:	4816      	ldr	r0, [pc, #88]	; (800ac54 <HAL_ETH_ConfigMAC+0x4ac>)
 800abfa:	f7f9 fb3b 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800abfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac00:	f033 0320 	bics.w	r3, r3, #32
 800ac04:	f43f ae41 	beq.w	800a88a <HAL_ETH_ConfigMAC+0xe2>
 800ac08:	e71d      	b.n	800aa46 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800ac0a:	f240 6125 	movw	r1, #1573	; 0x625
 800ac0e:	4811      	ldr	r0, [pc, #68]	; (800ac54 <HAL_ETH_ConfigMAC+0x4ac>)
 800ac10:	f7f9 fb30 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800ac14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1a:	f4ff ae58 	bcc.w	800a8ce <HAL_ETH_ConfigMAC+0x126>
 800ac1e:	e7c4      	b.n	800abaa <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800ac20:	f240 611f 	movw	r1, #1567	; 0x61f
 800ac24:	480b      	ldr	r0, [pc, #44]	; (800ac54 <HAL_ETH_ConfigMAC+0x4ac>)
 800ac26:	f7f9 fb25 	bl	8004274 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800ac2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac30:	2a40      	cmp	r2, #64	; 0x40
 800ac32:	f47f ae22 	bne.w	800a87a <HAL_ETH_ConfigMAC+0xd2>
 800ac36:	e623      	b.n	800a880 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800ac38:	f240 6124 	movw	r1, #1572	; 0x624
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <HAL_ETH_ConfigMAC+0x4ac>)
 800ac3e:	f7f9 fb19 	bl	8004274 <assert_failed>
 800ac42:	e636      	b.n	800a8b2 <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800ac44:	2002      	movs	r0, #2
}
 800ac46:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800ac48:	f240 6115 	movw	r1, #1557	; 0x615
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <HAL_ETH_ConfigMAC+0x4ac>)
 800ac4e:	f7f9 fb11 	bl	8004274 <assert_failed>
 800ac52:	e5d8      	b.n	800a806 <HAL_ETH_ConfigMAC+0x5e>
 800ac54:	0802c288 	.word	0x0802c288

0800ac58 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ac58:	4b18      	ldr	r3, [pc, #96]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	079b      	lsls	r3, r3, #30
 800ac5e:	d504      	bpl.n	800ac6a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ac60:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <FLASH_SetErrorCode+0x68>)
 800ac62:	6993      	ldr	r3, [r2, #24]
 800ac64:	f043 0320 	orr.w	r3, r3, #32
 800ac68:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ac6a:	4b14      	ldr	r3, [pc, #80]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	06d8      	lsls	r0, r3, #27
 800ac70:	d504      	bpl.n	800ac7c <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ac72:	4a13      	ldr	r2, [pc, #76]	; (800acc0 <FLASH_SetErrorCode+0x68>)
 800ac74:	6993      	ldr	r3, [r2, #24]
 800ac76:	f043 0310 	orr.w	r3, r3, #16
 800ac7a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	0699      	lsls	r1, r3, #26
 800ac82:	d504      	bpl.n	800ac8e <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ac84:	4a0e      	ldr	r2, [pc, #56]	; (800acc0 <FLASH_SetErrorCode+0x68>)
 800ac86:	6993      	ldr	r3, [r2, #24]
 800ac88:	f043 0308 	orr.w	r3, r3, #8
 800ac8c:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	065a      	lsls	r2, r3, #25
 800ac94:	d504      	bpl.n	800aca0 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ac96:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <FLASH_SetErrorCode+0x68>)
 800ac98:	6993      	ldr	r3, [r2, #24]
 800ac9a:	f043 0304 	orr.w	r3, r3, #4
 800ac9e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800aca0:	4b06      	ldr	r3, [pc, #24]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	061b      	lsls	r3, r3, #24
 800aca6:	d504      	bpl.n	800acb2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800aca8:	4a05      	ldr	r2, [pc, #20]	; (800acc0 <FLASH_SetErrorCode+0x68>)
 800acaa:	6993      	ldr	r3, [r2, #24]
 800acac:	f043 0302 	orr.w	r3, r3, #2
 800acb0:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800acb2:	4b02      	ldr	r3, [pc, #8]	; (800acbc <FLASH_SetErrorCode+0x64>)
 800acb4:	22f2      	movs	r2, #242	; 0xf2
 800acb6:	60da      	str	r2, [r3, #12]
}
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40023c00 	.word	0x40023c00
 800acc0:	20002ec8 	.word	0x20002ec8

0800acc4 <FLASH_Program_Byte>:
{
 800acc4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800acc6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800acce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acd2:	d304      	bcc.n	800acde <FLASH_Program_Byte+0x1a>
 800acd4:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <FLASH_Program_Byte+0x44>)
 800acd6:	4403      	add	r3, r0
 800acd8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800acdc:	d20e      	bcs.n	800acfc <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800acde:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <FLASH_Program_Byte+0x48>)
 800ace0:	691a      	ldr	r2, [r3, #16]
 800ace2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ace6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ace8:	691a      	ldr	r2, [r3, #16]
 800acea:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acec:	691a      	ldr	r2, [r3, #16]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800acf4:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800acf6:	f3bf 8f4f 	dsb	sy
}
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800acfc:	f240 21ee 	movw	r1, #750	; 0x2ee
 800ad00:	4803      	ldr	r0, [pc, #12]	; (800ad10 <FLASH_Program_Byte+0x4c>)
 800ad02:	f7f9 fab7 	bl	8004274 <assert_failed>
 800ad06:	e7ea      	b.n	800acde <FLASH_Program_Byte+0x1a>
 800ad08:	e00f1000 	.word	0xe00f1000
 800ad0c:	40023c00 	.word	0x40023c00
 800ad10:	0802c2c0 	.word	0x0802c2c0

0800ad14 <FLASH_Program_HalfWord>:
{
 800ad14:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ad16:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800ad1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad22:	d304      	bcc.n	800ad2e <FLASH_Program_HalfWord+0x1a>
 800ad24:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <FLASH_Program_HalfWord+0x48>)
 800ad26:	4403      	add	r3, r0
 800ad28:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ad2c:	d210      	bcs.n	800ad50 <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <FLASH_Program_HalfWord+0x4c>)
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad36:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ad38:	691a      	ldr	r2, [r3, #16]
 800ad3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad3e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	f042 0201 	orr.w	r2, r2, #1
 800ad46:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800ad48:	8025      	strh	r5, [r4, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
}
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ad50:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800ad54:	4803      	ldr	r0, [pc, #12]	; (800ad64 <FLASH_Program_HalfWord+0x50>)
 800ad56:	f7f9 fa8d 	bl	8004274 <assert_failed>
 800ad5a:	e7e8      	b.n	800ad2e <FLASH_Program_HalfWord+0x1a>
 800ad5c:	e00f1000 	.word	0xe00f1000
 800ad60:	40023c00 	.word	0x40023c00
 800ad64:	0802c2c0 	.word	0x0802c2c0

0800ad68 <FLASH_Program_Word>:
{
 800ad68:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ad6a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ad6e:	4604      	mov	r4, r0
 800ad70:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800ad72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad76:	d304      	bcc.n	800ad82 <FLASH_Program_Word+0x1a>
 800ad78:	4b0d      	ldr	r3, [pc, #52]	; (800adb0 <FLASH_Program_Word+0x48>)
 800ad7a:	4403      	add	r3, r0
 800ad7c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ad80:	d210      	bcs.n	800ada4 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800ad82:	4b0c      	ldr	r3, [pc, #48]	; (800adb4 <FLASH_Program_Word+0x4c>)
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad8a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad92:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad94:	691a      	ldr	r2, [r3, #16]
 800ad96:	f042 0201 	orr.w	r2, r2, #1
 800ad9a:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800ad9c:	6025      	str	r5, [r4, #0]
 800ad9e:	f3bf 8f4f 	dsb	sy
}
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ada4:	f240 21b3 	movw	r1, #691	; 0x2b3
 800ada8:	4803      	ldr	r0, [pc, #12]	; (800adb8 <FLASH_Program_Word+0x50>)
 800adaa:	f7f9 fa63 	bl	8004274 <assert_failed>
 800adae:	e7e8      	b.n	800ad82 <FLASH_Program_Word+0x1a>
 800adb0:	e00f1000 	.word	0xe00f1000
 800adb4:	40023c00 	.word	0x40023c00
 800adb8:	0802c2c0 	.word	0x0802c2c0

0800adbc <FLASH_Program_DoubleWord>:
{
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800adc0:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800adc4:	4604      	mov	r4, r0
 800adc6:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800adc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adcc:	d304      	bcc.n	800add8 <FLASH_Program_DoubleWord+0x1c>
 800adce:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <FLASH_Program_DoubleWord+0x50>)
 800add0:	4403      	add	r3, r0
 800add2:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800add6:	d213      	bcs.n	800ae00 <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800add8:	490d      	ldr	r1, [pc, #52]	; (800ae10 <FLASH_Program_DoubleWord+0x54>)
 800adda:	690b      	ldr	r3, [r1, #16]
 800addc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ade0:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ade2:	690b      	ldr	r3, [r1, #16]
 800ade4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ade8:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	f043 0301 	orr.w	r3, r3, #1
 800adf0:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800adf2:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800adf4:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800adf8:	6065      	str	r5, [r4, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800adfa:	f3bf 8f4f 	dsb	sy
}
 800adfe:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ae00:	f240 218e 	movw	r1, #654	; 0x28e
 800ae04:	4803      	ldr	r0, [pc, #12]	; (800ae14 <FLASH_Program_DoubleWord+0x58>)
 800ae06:	f7f9 fa35 	bl	8004274 <assert_failed>
 800ae0a:	e7e5      	b.n	800add8 <FLASH_Program_DoubleWord+0x1c>
 800ae0c:	e00f1000 	.word	0xe00f1000
 800ae10:	40023c00 	.word	0x40023c00
 800ae14:	0802c2c0 	.word	0x0802c2c0

0800ae18 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae18:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <HAL_FLASH_Unlock+0x1c>)
 800ae1a:	691a      	ldr	r2, [r3, #16]
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	db01      	blt.n	800ae24 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800ae20:	2000      	movs	r0, #0
}
 800ae22:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae24:	4904      	ldr	r1, [pc, #16]	; (800ae38 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae26:	4a05      	ldr	r2, [pc, #20]	; (800ae3c <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae28:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae2a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae2c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800ae2e:	0fc0      	lsrs	r0, r0, #31
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40023c00 	.word	0x40023c00
 800ae38:	45670123 	.word	0x45670123
 800ae3c:	cdef89ab 	.word	0xcdef89ab

0800ae40 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800ae40:	4a03      	ldr	r2, [pc, #12]	; (800ae50 <HAL_FLASH_Lock+0x10>)
}
 800ae42:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800ae44:	6913      	ldr	r3, [r2, #16]
 800ae46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae4a:	6113      	str	r3, [r2, #16]
}
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40023c00 	.word	0x40023c00

0800ae54 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <HAL_FLASH_OB_Unlock+0x18>)
 800ae56:	695a      	ldr	r2, [r3, #20]
 800ae58:	07d2      	lsls	r2, r2, #31
 800ae5a:	d505      	bpl.n	800ae68 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800ae5c:	4904      	ldr	r1, [pc, #16]	; (800ae70 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800ae5e:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800ae60:	4a04      	ldr	r2, [pc, #16]	; (800ae74 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800ae62:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800ae64:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800ae66:	4770      	bx	lr
    return HAL_ERROR;
 800ae68:	2001      	movs	r0, #1
}
 800ae6a:	4770      	bx	lr
 800ae6c:	40023c00 	.word	0x40023c00
 800ae70:	08192a3b 	.word	0x08192a3b
 800ae74:	4c5d6e7f 	.word	0x4c5d6e7f

0800ae78 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800ae78:	4a03      	ldr	r2, [pc, #12]	; (800ae88 <HAL_FLASH_OB_Lock+0x10>)
}
 800ae7a:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800ae7c:	6953      	ldr	r3, [r2, #20]
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	6153      	str	r3, [r2, #20]
}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	40023c00 	.word	0x40023c00

0800ae8c <HAL_FLASH_OB_Launch>:
{
 800ae8c:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800ae8e:	4c14      	ldr	r4, [pc, #80]	; (800aee0 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ae90:	2100      	movs	r1, #0
 800ae92:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800ae94:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800ae98:	6963      	ldr	r3, [r4, #20]
 800ae9a:	f043 0302 	orr.w	r3, r3, #2
 800ae9e:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aea0:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800aea2:	f7fc ffbb 	bl	8007e1c <HAL_GetTick>
 800aea6:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800aea8:	e004      	b.n	800aeb4 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800aeaa:	f7fc ffb7 	bl	8007e1c <HAL_GetTick>
 800aeae:	1b40      	subs	r0, r0, r5
 800aeb0:	42b0      	cmp	r0, r6
 800aeb2:	d80e      	bhi.n	800aed2 <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800aeb4:	68e3      	ldr	r3, [r4, #12]
 800aeb6:	03db      	lsls	r3, r3, #15
 800aeb8:	d4f7      	bmi.n	800aeaa <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800aeba:	68e2      	ldr	r2, [r4, #12]
 800aebc:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800aec0:	d109      	bne.n	800aed6 <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800aec2:	68e0      	ldr	r0, [r4, #12]
 800aec4:	f010 0001 	ands.w	r0, r0, #1
 800aec8:	d002      	beq.n	800aed0 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800aeca:	2301      	movs	r3, #1
  return HAL_OK;
 800aecc:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800aece:	60e3      	str	r3, [r4, #12]
}
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800aed2:	2003      	movs	r0, #3
}
 800aed4:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800aed6:	f7ff febf 	bl	800ac58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800aeda:	2001      	movs	r0, #1
}
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
 800aede:	bf00      	nop
 800aee0:	40023c00 	.word	0x40023c00
 800aee4:	20002ec8 	.word	0x20002ec8

0800aee8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800aee8:	4b01      	ldr	r3, [pc, #4]	; (800aef0 <HAL_FLASH_GetError+0x8>)
 800aeea:	6998      	ldr	r0, [r3, #24]
}  
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	20002ec8 	.word	0x20002ec8

0800aef4 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aef4:	4b13      	ldr	r3, [pc, #76]	; (800af44 <FLASH_WaitForLastOperation+0x50>)
 800aef6:	2200      	movs	r2, #0
{ 
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aefc:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800aefe:	4d12      	ldr	r5, [pc, #72]	; (800af48 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800af00:	f7fc ff8c 	bl	8007e1c <HAL_GetTick>
 800af04:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800af06:	e001      	b.n	800af0c <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800af08:	1c62      	adds	r2, r4, #1
 800af0a:	d10e      	bne.n	800af2a <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800af0c:	68eb      	ldr	r3, [r5, #12]
 800af0e:	03db      	lsls	r3, r3, #15
 800af10:	d4fa      	bmi.n	800af08 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800af12:	68ea      	ldr	r2, [r5, #12]
 800af14:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800af18:	d10f      	bne.n	800af3a <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800af1a:	68e8      	ldr	r0, [r5, #12]
 800af1c:	f010 0001 	ands.w	r0, r0, #1
 800af20:	d002      	beq.n	800af28 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800af22:	2301      	movs	r3, #1
  return HAL_OK;
 800af24:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800af26:	60eb      	str	r3, [r5, #12]
}  
 800af28:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800af2a:	b124      	cbz	r4, 800af36 <FLASH_WaitForLastOperation+0x42>
 800af2c:	f7fc ff76 	bl	8007e1c <HAL_GetTick>
 800af30:	1b80      	subs	r0, r0, r6
 800af32:	42a0      	cmp	r0, r4
 800af34:	d9ea      	bls.n	800af0c <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800af36:	2003      	movs	r0, #3
}  
 800af38:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800af3a:	f7ff fe8d 	bl	800ac58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800af3e:	2001      	movs	r0, #1
}  
 800af40:	bd70      	pop	{r4, r5, r6, pc}
 800af42:	bf00      	nop
 800af44:	20002ec8 	.word	0x20002ec8
 800af48:	40023c00 	.word	0x40023c00

0800af4c <HAL_FLASH_Program>:
{
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800af50:	4d23      	ldr	r5, [pc, #140]	; (800afe0 <HAL_FLASH_Program+0x94>)
{
 800af52:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800af54:	7d2a      	ldrb	r2, [r5, #20]
 800af56:	2a01      	cmp	r2, #1
 800af58:	d03a      	beq.n	800afd0 <HAL_FLASH_Program+0x84>
 800af5a:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800af5c:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800af5e:	f04f 0301 	mov.w	r3, #1
 800af62:	4604      	mov	r4, r0
 800af64:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800af66:	d81d      	bhi.n	800afa4 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af68:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af6c:	460e      	mov	r6, r1
 800af6e:	f7ff ffc1 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800af72:	b998      	cbnz	r0, 800af9c <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800af74:	3c01      	subs	r4, #1
 800af76:	2c02      	cmp	r4, #2
 800af78:	d82d      	bhi.n	800afd6 <HAL_FLASH_Program+0x8a>
 800af7a:	e8df f004 	tbb	[pc, r4]
 800af7e:	1e02      	.short	0x1e02
 800af80:	23          	.byte	0x23
 800af81:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800af82:	b2b9      	uxth	r1, r7
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff fec5 	bl	800ad14 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af8e:	f7ff ffb1 	bl	800aef4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800af92:	4a14      	ldr	r2, [pc, #80]	; (800afe4 <HAL_FLASH_Program+0x98>)
 800af94:	6913      	ldr	r3, [r2, #16]
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800af9c:	2300      	movs	r3, #0
 800af9e:	752b      	strb	r3, [r5, #20]
}
 800afa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800afa4:	4810      	ldr	r0, [pc, #64]	; (800afe8 <HAL_FLASH_Program+0x9c>)
 800afa6:	21aa      	movs	r1, #170	; 0xaa
 800afa8:	f7f9 f964 	bl	8004274 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800afb0:	f7ff ffa0 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d1f1      	bne.n	800af9c <HAL_FLASH_Program+0x50>
 800afb8:	e7e7      	b.n	800af8a <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800afba:	4639      	mov	r1, r7
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7ff fed3 	bl	800ad68 <FLASH_Program_Word>
        break;
 800afc2:	e7e2      	b.n	800af8a <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800afc4:	463a      	mov	r2, r7
 800afc6:	4643      	mov	r3, r8
 800afc8:	4630      	mov	r0, r6
 800afca:	f7ff fef7 	bl	800adbc <FLASH_Program_DoubleWord>
        break;
 800afce:	e7dc      	b.n	800af8a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800afd0:	2002      	movs	r0, #2
}
 800afd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800afd6:	b2f9      	uxtb	r1, r7
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff fe73 	bl	800acc4 <FLASH_Program_Byte>
        break;
 800afde:	e7d4      	b.n	800af8a <HAL_FLASH_Program+0x3e>
 800afe0:	20002ec8 	.word	0x20002ec8
 800afe4:	40023c00 	.word	0x40023c00
 800afe8:	0802c2c0 	.word	0x0802c2c0

0800afec <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800afec:	2803      	cmp	r0, #3
{
 800afee:	b538      	push	{r3, r4, r5, lr}
 800aff0:	4604      	mov	r4, r0
 800aff2:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800aff4:	d82f      	bhi.n	800b056 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800aff6:	1e6b      	subs	r3, r5, #1
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d81c      	bhi.n	800b036 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800affc:	4b19      	ldr	r3, [pc, #100]	; (800b064 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800affe:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800b000:	691a      	ldr	r2, [r3, #16]
 800b002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b006:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800b008:	d10e      	bne.n	800b028 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800b00a:	6919      	ldr	r1, [r3, #16]
 800b00c:	f248 0204 	movw	r2, #32772	; 0x8004
 800b010:	430a      	orrs	r2, r1
 800b012:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800b014:	4a13      	ldr	r2, [pc, #76]	; (800b064 <FLASH_MassErase+0x78>)
 800b016:	6910      	ldr	r0, [r2, #16]
 800b018:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800b01c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b020:	6110      	str	r0, [r2, #16]
 800b022:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800b026:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800b028:	2d02      	cmp	r5, #2
 800b02a:	d10e      	bne.n	800b04a <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800b02c:	691a      	ldr	r2, [r3, #16]
 800b02e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b032:	611a      	str	r2, [r3, #16]
 800b034:	e7ee      	b.n	800b014 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800b036:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b03a:	480b      	ldr	r0, [pc, #44]	; (800b068 <FLASH_MassErase+0x7c>)
 800b03c:	f7f9 f91a 	bl	8004274 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800b040:	4a08      	ldr	r2, [pc, #32]	; (800b064 <FLASH_MassErase+0x78>)
 800b042:	6913      	ldr	r3, [r2, #16]
 800b044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b048:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800b04a:	4a06      	ldr	r2, [pc, #24]	; (800b064 <FLASH_MassErase+0x78>)
 800b04c:	6913      	ldr	r3, [r2, #16]
 800b04e:	f043 0304 	orr.w	r3, r3, #4
 800b052:	6113      	str	r3, [r2, #16]
 800b054:	e7de      	b.n	800b014 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b056:	f240 11bb 	movw	r1, #443	; 0x1bb
 800b05a:	4803      	ldr	r0, [pc, #12]	; (800b068 <FLASH_MassErase+0x7c>)
 800b05c:	f7f9 f90a 	bl	8004274 <assert_failed>
 800b060:	e7c9      	b.n	800aff6 <FLASH_MassErase+0xa>
 800b062:	bf00      	nop
 800b064:	40023c00 	.word	0x40023c00
 800b068:	0802c2fc 	.word	0x0802c2fc

0800b06c <HAL_FLASHEx_OBProgram>:
{
 800b06c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800b06e:	4d64      	ldr	r5, [pc, #400]	; (800b200 <HAL_FLASHEx_OBProgram+0x194>)
 800b070:	7d2b      	ldrb	r3, [r5, #20]
 800b072:	2b01      	cmp	r3, #1
 800b074:	f000 80bb 	beq.w	800b1ee <HAL_FLASHEx_OBProgram+0x182>
 800b078:	2301      	movs	r3, #1
 800b07a:	4604      	mov	r4, r0
 800b07c:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b07e:	6803      	ldr	r3, [r0, #0]
 800b080:	2b3f      	cmp	r3, #63	; 0x3f
 800b082:	f200 808c 	bhi.w	800b19e <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b086:	07d9      	lsls	r1, r3, #31
 800b088:	d40d      	bmi.n	800b0a6 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b08a:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b08c:	079a      	lsls	r2, r3, #30
 800b08e:	d42c      	bmi.n	800b0ea <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b090:	075e      	lsls	r6, r3, #29
 800b092:	d440      	bmi.n	800b116 <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b094:	0719      	lsls	r1, r3, #28
 800b096:	d44f      	bmi.n	800b138 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b098:	06da      	lsls	r2, r3, #27
 800b09a:	d45b      	bmi.n	800b154 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b09c:	069b      	lsls	r3, r3, #26
 800b09e:	d46c      	bmi.n	800b17a <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	752b      	strb	r3, [r5, #20]
}
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d905      	bls.n	800b0b8 <HAL_FLASHEx_OBProgram+0x4c>
 800b0ac:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800b0b0:	4854      	ldr	r0, [pc, #336]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b0b2:	f7f9 f8df 	bl	8004274 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b0b6:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800b0b8:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b0ba:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b0bc:	4b52      	ldr	r3, [pc, #328]	; (800b208 <HAL_FLASHEx_OBProgram+0x19c>)
 800b0be:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b0c2:	d07f      	beq.n	800b1c4 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b0c4:	b903      	cbnz	r3, 800b0c8 <HAL_FLASHEx_OBProgram+0x5c>
 800b0c6:	b926      	cbnz	r6, 800b0d2 <HAL_FLASHEx_OBProgram+0x66>
 800b0c8:	f240 314f 	movw	r1, #847	; 0x34f
 800b0cc:	484d      	ldr	r0, [pc, #308]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b0ce:	f7f9 f8d1 	bl	8004274 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b0d6:	f7ff ff0d 	bl	800aef4 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b0da:	b918      	cbnz	r0, 800b0e4 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800b0dc:	4b4b      	ldr	r3, [pc, #300]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b0de:	695a      	ldr	r2, [r3, #20]
 800b0e0:	4316      	orrs	r6, r2
 800b0e2:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	079a      	lsls	r2, r3, #30
 800b0e8:	d5d2      	bpl.n	800b090 <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800b0ea:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800b0ec:	2eaa      	cmp	r6, #170	; 0xaa
 800b0ee:	bf18      	it	ne
 800b0f0:	2e55      	cmpne	r6, #85	; 0x55
 800b0f2:	d006      	beq.n	800b102 <HAL_FLASHEx_OBProgram+0x96>
 800b0f4:	2ecc      	cmp	r6, #204	; 0xcc
 800b0f6:	d004      	beq.n	800b102 <HAL_FLASHEx_OBProgram+0x96>
 800b0f8:	f240 316e 	movw	r1, #878	; 0x36e
 800b0fc:	4841      	ldr	r0, [pc, #260]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b0fe:	f7f9 f8b9 	bl	8004274 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b102:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b106:	f7ff fef5 	bl	800aef4 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b10a:	b908      	cbnz	r0, 800b110 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800b10c:	4b3f      	ldr	r3, [pc, #252]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b10e:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	075e      	lsls	r6, r3, #29
 800b114:	d5be      	bpl.n	800b094 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b116:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800b11a:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b11c:	f7ff feea 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b120:	b938      	cbnz	r0, 800b132 <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b122:	493a      	ldr	r1, [pc, #232]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b124:	4b3a      	ldr	r3, [pc, #232]	; (800b210 <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b126:	4a3b      	ldr	r2, [pc, #236]	; (800b214 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b128:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b12a:	694e      	ldr	r6, [r1, #20]
 800b12c:	4032      	ands	r2, r6
 800b12e:	4313      	orrs	r3, r2
 800b130:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	0719      	lsls	r1, r3, #28
 800b136:	d5af      	bpl.n	800b098 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b138:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b13a:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800b13e:	d158      	bne.n	800b1f2 <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b140:	4932      	ldr	r1, [pc, #200]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b142:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b144:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b146:	694a      	ldr	r2, [r1, #20]
 800b148:	f022 020c 	bic.w	r2, r2, #12
 800b14c:	4332      	orrs	r2, r6
 800b14e:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b150:	06da      	lsls	r2, r3, #27
 800b152:	d5a3      	bpl.n	800b09c <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800b154:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b156:	f248 0313 	movw	r3, #32787	; 0x8013
 800b15a:	429e      	cmp	r6, r3
 800b15c:	d826      	bhi.n	800b1ac <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b15e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b162:	f7ff fec7 	bl	800aef4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800b166:	b928      	cbnz	r0, 800b174 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800b168:	4a28      	ldr	r2, [pc, #160]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b16a:	4b2b      	ldr	r3, [pc, #172]	; (800b218 <HAL_FLASHEx_OBProgram+0x1ac>)
 800b16c:	6991      	ldr	r1, [r2, #24]
 800b16e:	400b      	ands	r3, r1
 800b170:	4333      	orrs	r3, r6
 800b172:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	069b      	lsls	r3, r3, #26
 800b178:	d592      	bpl.n	800b0a0 <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800b17a:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b17c:	f248 0313 	movw	r3, #32787	; 0x8013
 800b180:	429c      	cmp	r4, r3
 800b182:	d819      	bhi.n	800b1b8 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b184:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b188:	f7ff feb4 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d187      	bne.n	800b0a0 <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800b190:	4a1e      	ldr	r2, [pc, #120]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b192:	6993      	ldr	r3, [r2, #24]
 800b194:	b29b      	uxth	r3, r3
 800b196:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b19a:	6193      	str	r3, [r2, #24]
 800b19c:	e780      	b.n	800b0a0 <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b19e:	f240 1125 	movw	r1, #293	; 0x125
 800b1a2:	4818      	ldr	r0, [pc, #96]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b1a4:	f7f9 f866 	bl	8004274 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	e76c      	b.n	800b086 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b1ac:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b1b0:	4814      	ldr	r0, [pc, #80]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b1b2:	f7f9 f85f 	bl	8004274 <assert_failed>
 800b1b6:	e7d2      	b.n	800b15e <HAL_FLASHEx_OBProgram+0xf2>
 800b1b8:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b1bc:	4811      	ldr	r0, [pc, #68]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b1be:	f7f9 f859 	bl	8004274 <assert_failed>
 800b1c2:	e7df      	b.n	800b184 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b1c4:	b96b      	cbnz	r3, 800b1e2 <HAL_FLASHEx_OBProgram+0x176>
 800b1c6:	b166      	cbz	r6, 800b1e2 <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b1c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1cc:	f7ff fe92 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d187      	bne.n	800b0e4 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800b1d4:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <HAL_FLASHEx_OBProgram+0x1a0>)
 800b1d6:	6953      	ldr	r3, [r2, #20]
 800b1d8:	ea23 0606 	bic.w	r6, r3, r6
 800b1dc:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	e754      	b.n	800b08c <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b1e2:	f240 312b 	movw	r1, #811	; 0x32b
 800b1e6:	4807      	ldr	r0, [pc, #28]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b1e8:	f7f9 f844 	bl	8004274 <assert_failed>
 800b1ec:	e7ec      	b.n	800b1c8 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800b1ee:	2002      	movs	r0, #2
}
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b1f2:	f44f 7162 	mov.w	r1, #904	; 0x388
 800b1f6:	4803      	ldr	r0, [pc, #12]	; (800b204 <HAL_FLASHEx_OBProgram+0x198>)
 800b1f8:	f7f9 f83c 	bl	8004274 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	e79f      	b.n	800b140 <HAL_FLASHEx_OBProgram+0xd4>
 800b200:	20002ec8 	.word	0x20002ec8
 800b204:	0802c2fc 	.word	0x0802c2fc
 800b208:	f000ffff 	.word	0xf000ffff
 800b20c:	40023c00 	.word	0x40023c00
 800b210:	f00000f0 	.word	0xf00000f0
 800b214:	0fffff0f 	.word	0x0fffff0f
 800b218:	ffff0000 	.word	0xffff0000

0800b21c <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b21c:	4a11      	ldr	r2, [pc, #68]	; (800b264 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b21e:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b220:	4b11      	ldr	r3, [pc, #68]	; (800b268 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b222:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b224:	6951      	ldr	r1, [r2, #20]
 800b226:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800b228:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800b22a:	7d51      	ldrb	r1, [r2, #21]
 800b22c:	29aa      	cmp	r1, #170	; 0xaa
 800b22e:	b2cb      	uxtb	r3, r1
 800b230:	d015      	beq.n	800b25e <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800b232:	7d53      	ldrb	r3, [r2, #21]
 800b234:	2bcc      	cmp	r3, #204	; 0xcc
 800b236:	bf0c      	ite	eq
 800b238:	22cc      	moveq	r2, #204	; 0xcc
 800b23a:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b23c:	4b09      	ldr	r3, [pc, #36]	; (800b264 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800b23e:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b240:	4a0a      	ldr	r2, [pc, #40]	; (800b26c <HAL_FLASHEx_OBGetConfig+0x50>)
 800b242:	6959      	ldr	r1, [r3, #20]
 800b244:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800b246:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800b248:	695a      	ldr	r2, [r3, #20]
 800b24a:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800b24e:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800b254:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800b25a:	61c3      	str	r3, [r0, #28]
}
 800b25c:	4770      	bx	lr
 800b25e:	461a      	mov	r2, r3
 800b260:	e7ec      	b.n	800b23c <HAL_FLASHEx_OBGetConfig+0x20>
 800b262:	bf00      	nop
 800b264:	40023c00 	.word	0x40023c00
 800b268:	0fff0000 	.word	0x0fff0000
 800b26c:	f00000f0 	.word	0xf00000f0

0800b270 <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800b270:	2817      	cmp	r0, #23
{
 800b272:	b538      	push	{r3, r4, r5, lr}
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800b278:	d82b      	bhi.n	800b2d2 <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b27a:	2c03      	cmp	r4, #3
 800b27c:	d821      	bhi.n	800b2c2 <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b27e:	b9dc      	cbnz	r4, 800b2b8 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800b280:	4b1a      	ldr	r3, [pc, #104]	; (800b2ec <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800b282:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800b284:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800b286:	bf88      	it	hi
 800b288:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800b28a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b28e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800b290:	6919      	ldr	r1, [r3, #16]
 800b292:	430c      	orrs	r4, r1
 800b294:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b29c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b29e:	6918      	ldr	r0, [r3, #16]
 800b2a0:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800b2a4:	f045 0502 	orr.w	r5, r5, #2
 800b2a8:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b2aa:	691a      	ldr	r2, [r3, #16]
 800b2ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b2b0:	611a      	str	r2, [r3, #16]
 800b2b2:	f3bf 8f4f 	dsb	sy
}
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b2b8:	2c01      	cmp	r4, #1
 800b2ba:	d110      	bne.n	800b2de <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b2bc:	f44f 7480 	mov.w	r4, #256	; 0x100
 800b2c0:	e7de      	b.n	800b280 <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b2c2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800b2c6:	480a      	ldr	r0, [pc, #40]	; (800b2f0 <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b2c8:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b2cc:	f7f8 ffd2 	bl	8004274 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b2d0:	e7d6      	b.n	800b280 <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800b2d2:	f240 11eb 	movw	r1, #491	; 0x1eb
 800b2d6:	4806      	ldr	r0, [pc, #24]	; (800b2f0 <FLASH_Erase_Sector+0x80>)
 800b2d8:	f7f8 ffcc 	bl	8004274 <assert_failed>
 800b2dc:	e7cd      	b.n	800b27a <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b2de:	2c02      	cmp	r4, #2
 800b2e0:	bf0c      	ite	eq
 800b2e2:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800b2e6:	f44f 7440 	movne.w	r4, #768	; 0x300
 800b2ea:	e7c9      	b.n	800b280 <FLASH_Erase_Sector+0x10>
 800b2ec:	40023c00 	.word	0x40023c00
 800b2f0:	0802c2fc 	.word	0x0802c2fc

0800b2f4 <HAL_FLASHEx_Erase>:
{
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b2f8:	4f2f      	ldr	r7, [pc, #188]	; (800b3b8 <HAL_FLASHEx_Erase+0xc4>)
 800b2fa:	7d3b      	ldrb	r3, [r7, #20]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d040      	beq.n	800b382 <HAL_FLASHEx_Erase+0x8e>
 800b300:	2301      	movs	r3, #1
 800b302:	4604      	mov	r4, r0
 800b304:	4688      	mov	r8, r1
 800b306:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800b308:	6803      	ldr	r3, [r0, #0]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d903      	bls.n	800b316 <HAL_FLASHEx_Erase+0x22>
 800b30e:	21a5      	movs	r1, #165	; 0xa5
 800b310:	482a      	ldr	r0, [pc, #168]	; (800b3bc <HAL_FLASHEx_Erase+0xc8>)
 800b312:	f7f8 ffaf 	bl	8004274 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b316:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b31a:	f7ff fdeb 	bl	800aef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b31e:	4606      	mov	r6, r0
 800b320:	bb50      	cbnz	r0, 800b378 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d034      	beq.n	800b39a <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b330:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b334:	442b      	add	r3, r5
 800b336:	1e5a      	subs	r2, r3, #1
 800b338:	2a17      	cmp	r2, #23
 800b33a:	d826      	bhi.n	800b38a <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b33c:	429d      	cmp	r5, r3
 800b33e:	d21b      	bcs.n	800b378 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b340:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800b3c0 <HAL_FLASHEx_Erase+0xcc>
 800b344:	e005      	b.n	800b352 <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b346:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800b34a:	3501      	adds	r5, #1
 800b34c:	4413      	add	r3, r2
 800b34e:	42ab      	cmp	r3, r5
 800b350:	d912      	bls.n	800b378 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b352:	4628      	mov	r0, r5
 800b354:	7c21      	ldrb	r1, [r4, #16]
 800b356:	f7ff ff8b 	bl	800b270 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b35a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b35e:	f7ff fdc9 	bl	800aef4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b366:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800b36a:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800b36e:	2800      	cmp	r0, #0
 800b370:	d0e9      	beq.n	800b346 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b372:	4606      	mov	r6, r0
          *SectorError = index;
 800b374:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800b37c:	753b      	strb	r3, [r7, #20]
}
 800b37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800b382:	2602      	movs	r6, #2
}
 800b384:	4630      	mov	r0, r6
 800b386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b38a:	21c1      	movs	r1, #193	; 0xc1
 800b38c:	480b      	ldr	r0, [pc, #44]	; (800b3bc <HAL_FLASHEx_Erase+0xc8>)
 800b38e:	f7f8 ff71 	bl	8004274 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b392:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b396:	442b      	add	r3, r5
 800b398:	e7d0      	b.n	800b33c <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b39a:	6861      	ldr	r1, [r4, #4]
 800b39c:	7c20      	ldrb	r0, [r4, #16]
 800b39e:	f7ff fe25 	bl	800afec <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b3a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b3a6:	f7ff fda5 	bl	800aef4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800b3aa:	4a05      	ldr	r2, [pc, #20]	; (800b3c0 <HAL_FLASHEx_Erase+0xcc>)
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b3ae:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800b3b0:	6911      	ldr	r1, [r2, #16]
 800b3b2:	400b      	ands	r3, r1
 800b3b4:	6113      	str	r3, [r2, #16]
 800b3b6:	e7df      	b.n	800b378 <HAL_FLASHEx_Erase+0x84>
 800b3b8:	20002ec8 	.word	0x20002ec8
 800b3bc:	0802c2fc 	.word	0x0802c2fc
 800b3c0:	40023c00 	.word	0x40023c00
 800b3c4:	ffff7ffb 	.word	0xffff7ffb

0800b3c8 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b3c8:	4bb9      	ldr	r3, [pc, #740]	; (800b6b0 <HAL_GPIO_Init+0x2e8>)
 800b3ca:	4aba      	ldr	r2, [pc, #744]	; (800b6b4 <HAL_GPIO_Init+0x2ec>)
 800b3cc:	4290      	cmp	r0, r2
 800b3ce:	bf18      	it	ne
 800b3d0:	4298      	cmpne	r0, r3
{
 800b3d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b3d6:	bf18      	it	ne
 800b3d8:	2301      	movne	r3, #1
{
 800b3da:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b3dc:	bf08      	it	eq
 800b3de:	2300      	moveq	r3, #0
{
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	d026      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b3e8:	4bb3      	ldr	r3, [pc, #716]	; (800b6b8 <HAL_GPIO_Init+0x2f0>)
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	d023      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b3ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3f2:	4298      	cmp	r0, r3
 800b3f4:	d01f      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d01b      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b3fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b402:	4298      	cmp	r0, r3
 800b404:	d017      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b40a:	4298      	cmp	r0, r3
 800b40c:	d013      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b412:	4298      	cmp	r0, r3
 800b414:	d00f      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b416:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41e:	4290      	cmp	r0, r2
 800b420:	bf18      	it	ne
 800b422:	4298      	cmpne	r0, r3
 800b424:	d007      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b42a:	4298      	cmp	r0, r3
 800b42c:	d003      	beq.n	800b436 <HAL_GPIO_Init+0x6e>
 800b42e:	21aa      	movs	r1, #170	; 0xaa
 800b430:	48a2      	ldr	r0, [pc, #648]	; (800b6bc <HAL_GPIO_Init+0x2f4>)
 800b432:	f7f8 ff1f 	bl	8004274 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b436:	883b      	ldrh	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 811a 	beq.w	800b672 <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800b444:	bf18      	it	ne
 800b446:	2a03      	cmpne	r2, #3
 800b448:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800b44c:	bf8c      	ite	hi
 800b44e:	2301      	movhi	r3, #1
 800b450:	2300      	movls	r3, #0
 800b452:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800b456:	bf0c      	ite	eq
 800b458:	2300      	moveq	r3, #0
 800b45a:	f003 0301 	andne.w	r3, r3, #1
 800b45e:	3a11      	subs	r2, #17
 800b460:	2a01      	cmp	r2, #1
 800b462:	bf94      	ite	ls
 800b464:	2300      	movls	r3, #0
 800b466:	f003 0301 	andhi.w	r3, r3, #1
 800b46a:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800b46e:	bf0c      	ite	eq
 800b470:	2300      	moveq	r3, #0
 800b472:	f003 0301 	andne.w	r3, r3, #1
 800b476:	b11b      	cbz	r3, 800b480 <HAL_GPIO_Init+0xb8>
 800b478:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800b47c:	f040 813e 	bne.w	800b6fc <HAL_GPIO_Init+0x334>
{
 800b480:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b482:	f8df a260 	ldr.w	sl, [pc, #608]	; 800b6e4 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b486:	46b8      	mov	r8, r7
 800b488:	e003      	b.n	800b492 <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b48a:	3501      	adds	r5, #1
 800b48c:	2d10      	cmp	r5, #16
 800b48e:	f000 80b3 	beq.w	800b5f8 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800b492:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b494:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800b498:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b49a:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800b49e:	ea34 0303 	bics.w	r3, r4, r3
 800b4a2:	d1f2      	bne.n	800b48a <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4a8:	f001 0303 	and.w	r3, r1, #3
 800b4ac:	1e5a      	subs	r2, r3, #1
 800b4ae:	2a01      	cmp	r2, #1
 800b4b0:	f240 80a5 	bls.w	800b5fe <HAL_GPIO_Init+0x236>
 800b4b4:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4b6:	f04f 0b03 	mov.w	fp, #3
 800b4ba:	fa0b fb07 	lsl.w	fp, fp, r7
 800b4be:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d025      	beq.n	800b512 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b4c6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b4ca:	2802      	cmp	r0, #2
 800b4cc:	f200 80b3 	bhi.w	800b636 <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800b4d0:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b4d2:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4d4:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b4d6:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b4da:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800b4de:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4e0:	d117      	bne.n	800b512 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b4e2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b4e6:	280f      	cmp	r0, #15
 800b4e8:	f200 80c8 	bhi.w	800b67c <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800b4ec:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b4ee:	f005 0e07 	and.w	lr, r5, #7
 800b4f2:	f04f 0c0f 	mov.w	ip, #15
 800b4f6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b4fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b4fe:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b500:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b504:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b508:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b50c:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800b510:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800b512:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b514:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b516:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b51a:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b51e:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800b522:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b524:	d0b1      	beq.n	800b48a <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b526:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b52a:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b52e:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b536:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b538:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800b53c:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b540:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b544:	9203      	str	r2, [sp, #12]
 800b546:	4a5e      	ldr	r2, [pc, #376]	; (800b6c0 <HAL_GPIO_Init+0x2f8>)
 800b548:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800b54a:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b54c:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800b54e:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b550:	40a3      	lsls	r3, r4
 800b552:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b556:	4857      	ldr	r0, [pc, #348]	; (800b6b4 <HAL_GPIO_Init+0x2ec>)
 800b558:	4286      	cmp	r6, r0
 800b55a:	d025      	beq.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b55c:	9801      	ldr	r0, [sp, #4]
 800b55e:	2800      	cmp	r0, #0
 800b560:	d07d      	beq.n	800b65e <HAL_GPIO_Init+0x296>
 800b562:	4855      	ldr	r0, [pc, #340]	; (800b6b8 <HAL_GPIO_Init+0x2f0>)
 800b564:	4286      	cmp	r6, r0
 800b566:	d07f      	beq.n	800b668 <HAL_GPIO_Init+0x2a0>
 800b568:	4856      	ldr	r0, [pc, #344]	; (800b6c4 <HAL_GPIO_Init+0x2fc>)
 800b56a:	4286      	cmp	r6, r0
 800b56c:	f000 8091 	beq.w	800b692 <HAL_GPIO_Init+0x2ca>
 800b570:	4855      	ldr	r0, [pc, #340]	; (800b6c8 <HAL_GPIO_Init+0x300>)
 800b572:	4286      	cmp	r6, r0
 800b574:	f000 8092 	beq.w	800b69c <HAL_GPIO_Init+0x2d4>
 800b578:	4854      	ldr	r0, [pc, #336]	; (800b6cc <HAL_GPIO_Init+0x304>)
 800b57a:	4286      	cmp	r6, r0
 800b57c:	f000 80b4 	beq.w	800b6e8 <HAL_GPIO_Init+0x320>
 800b580:	4853      	ldr	r0, [pc, #332]	; (800b6d0 <HAL_GPIO_Init+0x308>)
 800b582:	4286      	cmp	r6, r0
 800b584:	f000 80b5 	beq.w	800b6f2 <HAL_GPIO_Init+0x32a>
 800b588:	4852      	ldr	r0, [pc, #328]	; (800b6d4 <HAL_GPIO_Init+0x30c>)
 800b58a:	4286      	cmp	r6, r0
 800b58c:	f000 808b 	beq.w	800b6a6 <HAL_GPIO_Init+0x2de>
 800b590:	4851      	ldr	r0, [pc, #324]	; (800b6d8 <HAL_GPIO_Init+0x310>)
 800b592:	4286      	cmp	r6, r0
 800b594:	f000 80b7 	beq.w	800b706 <HAL_GPIO_Init+0x33e>
 800b598:	4850      	ldr	r0, [pc, #320]	; (800b6dc <HAL_GPIO_Init+0x314>)
 800b59a:	4286      	cmp	r6, r0
 800b59c:	bf0c      	ite	eq
 800b59e:	2009      	moveq	r0, #9
 800b5a0:	200a      	movne	r0, #10
 800b5a2:	fa00 f404 	lsl.w	r4, r0, r4
 800b5a6:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800b5a8:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800b5aa:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800b5ae:	4b4c      	ldr	r3, [pc, #304]	; (800b6e0 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800b5b0:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800b5b2:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b5b4:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	; (800b6e0 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b5b8:	bf54      	ite	pl
 800b5ba:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b5bc:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b5c0:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800b5c2:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800b5c4:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800b5c6:	4b46      	ldr	r3, [pc, #280]	; (800b6e0 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b5c8:	bf54      	ite	pl
 800b5ca:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b5cc:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b5d0:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800b5d2:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800b5d4:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800b5d6:	4b42      	ldr	r3, [pc, #264]	; (800b6e0 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b5d8:	bf54      	ite	pl
 800b5da:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b5dc:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800b5e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b5e2:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800b5e4:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800b5e6:	4a3e      	ldr	r2, [pc, #248]	; (800b6e0 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b5e8:	bf54      	ite	pl
 800b5ea:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800b5ec:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b5f0:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800b5f2:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b5f4:	f47f af4d 	bne.w	800b492 <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800b5f8:	b005      	add	sp, #20
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b5fe:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b602:	2803      	cmp	r0, #3
 800b604:	d820      	bhi.n	800b648 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800b606:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b608:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800b60c:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b610:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800b614:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b616:	ea20 000b 	bic.w	r0, r0, fp
 800b61a:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800b61e:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800b622:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800b624:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b626:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b62a:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800b62e:	40ac      	lsls	r4, r5
 800b630:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800b632:	6074      	str	r4, [r6, #4]
 800b634:	e745      	b.n	800b4c2 <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b636:	21ce      	movs	r1, #206	; 0xce
 800b638:	4820      	ldr	r0, [pc, #128]	; (800b6bc <HAL_GPIO_Init+0x2f4>)
 800b63a:	f7f8 fe1b 	bl	8004274 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b63e:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b642:	f001 0303 	and.w	r3, r1, #3
 800b646:	e743      	b.n	800b4d0 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b648:	21bd      	movs	r1, #189	; 0xbd
 800b64a:	481c      	ldr	r0, [pc, #112]	; (800b6bc <HAL_GPIO_Init+0x2f4>)
 800b64c:	f7f8 fe12 	bl	8004274 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b650:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b654:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b658:	f001 0303 	and.w	r3, r1, #3
 800b65c:	e7d3      	b.n	800b606 <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b65e:	2001      	movs	r0, #1
 800b660:	fa00 f404 	lsl.w	r4, r0, r4
 800b664:	4323      	orrs	r3, r4
 800b666:	e79f      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b668:	2002      	movs	r0, #2
 800b66a:	fa00 f404 	lsl.w	r4, r0, r4
 800b66e:	4323      	orrs	r3, r4
 800b670:	e79a      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b672:	21ab      	movs	r1, #171	; 0xab
 800b674:	4811      	ldr	r0, [pc, #68]	; (800b6bc <HAL_GPIO_Init+0x2f4>)
 800b676:	f7f8 fdfd 	bl	8004274 <assert_failed>
 800b67a:	e6e0      	b.n	800b43e <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b67c:	21db      	movs	r1, #219	; 0xdb
 800b67e:	480f      	ldr	r0, [pc, #60]	; (800b6bc <HAL_GPIO_Init+0x2f4>)
 800b680:	f7f8 fdf8 	bl	8004274 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b684:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b688:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b68c:	f001 0303 	and.w	r3, r1, #3
 800b690:	e72c      	b.n	800b4ec <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b692:	2003      	movs	r0, #3
 800b694:	fa00 f404 	lsl.w	r4, r0, r4
 800b698:	4323      	orrs	r3, r4
 800b69a:	e785      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b69c:	2004      	movs	r0, #4
 800b69e:	fa00 f404 	lsl.w	r4, r0, r4
 800b6a2:	4323      	orrs	r3, r4
 800b6a4:	e780      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b6a6:	2007      	movs	r0, #7
 800b6a8:	fa00 f404 	lsl.w	r4, r0, r4
 800b6ac:	4323      	orrs	r3, r4
 800b6ae:	e77b      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b6b0:	40020400 	.word	0x40020400
 800b6b4:	40020000 	.word	0x40020000
 800b6b8:	40020800 	.word	0x40020800
 800b6bc:	0802c33c 	.word	0x0802c33c
 800b6c0:	40013800 	.word	0x40013800
 800b6c4:	40020c00 	.word	0x40020c00
 800b6c8:	40021000 	.word	0x40021000
 800b6cc:	40021400 	.word	0x40021400
 800b6d0:	40021800 	.word	0x40021800
 800b6d4:	40021c00 	.word	0x40021c00
 800b6d8:	40022000 	.word	0x40022000
 800b6dc:	40022400 	.word	0x40022400
 800b6e0:	40013c00 	.word	0x40013c00
 800b6e4:	40023800 	.word	0x40023800
 800b6e8:	2005      	movs	r0, #5
 800b6ea:	fa00 f404 	lsl.w	r4, r0, r4
 800b6ee:	4323      	orrs	r3, r4
 800b6f0:	e75a      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b6f2:	2006      	movs	r0, #6
 800b6f4:	fa00 f404 	lsl.w	r4, r0, r4
 800b6f8:	4323      	orrs	r3, r4
 800b6fa:	e755      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b6fc:	21ac      	movs	r1, #172	; 0xac
 800b6fe:	4804      	ldr	r0, [pc, #16]	; (800b710 <HAL_GPIO_Init+0x348>)
 800b700:	f7f8 fdb8 	bl	8004274 <assert_failed>
 800b704:	e6bc      	b.n	800b480 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b706:	2008      	movs	r0, #8
 800b708:	fa00 f404 	lsl.w	r4, r0, r4
 800b70c:	4323      	orrs	r3, r4
 800b70e:	e74b      	b.n	800b5a8 <HAL_GPIO_Init+0x1e0>
 800b710:	0802c33c 	.word	0x0802c33c

0800b714 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b718:	4f6b      	ldr	r7, [pc, #428]	; (800b8c8 <HAL_GPIO_DeInit+0x1b4>)
{
 800b71a:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b71c:	4b6b      	ldr	r3, [pc, #428]	; (800b8cc <HAL_GPIO_DeInit+0x1b8>)
{
 800b71e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b720:	42b8      	cmp	r0, r7
 800b722:	bf18      	it	ne
 800b724:	4298      	cmpne	r0, r3
 800b726:	bf14      	ite	ne
 800b728:	2701      	movne	r7, #1
 800b72a:	2700      	moveq	r7, #0
 800b72c:	d027      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b72e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b732:	4298      	cmp	r0, r3
 800b734:	d023      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b73a:	4298      	cmp	r0, r3
 800b73c:	d01f      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b73e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b742:	4298      	cmp	r0, r3
 800b744:	d01b      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b74a:	4298      	cmp	r0, r3
 800b74c:	d017      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b752:	4298      	cmp	r0, r3
 800b754:	d013      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b75a:	4298      	cmp	r0, r3
 800b75c:	d00f      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b75e:	4a5c      	ldr	r2, [pc, #368]	; (800b8d0 <HAL_GPIO_DeInit+0x1bc>)
 800b760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b764:	4290      	cmp	r0, r2
 800b766:	bf18      	it	ne
 800b768:	4298      	cmpne	r0, r3
 800b76a:	d008      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b770:	4298      	cmp	r0, r3
 800b772:	d004      	beq.n	800b77e <HAL_GPIO_DeInit+0x6a>
 800b774:	f240 112b 	movw	r1, #299	; 0x12b
 800b778:	4856      	ldr	r0, [pc, #344]	; (800b8d4 <HAL_GPIO_DeInit+0x1c0>)
 800b77a:	f7f8 fd7b 	bl	8004274 <assert_failed>
{
 800b77e:	2300      	movs	r3, #0
 800b780:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b8f4 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b784:	f8df a140 	ldr.w	sl, [pc, #320]	; 800b8c8 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b788:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800b8f8 <HAL_GPIO_DeInit+0x1e4>
 800b78c:	e002      	b.n	800b794 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b78e:	3301      	adds	r3, #1
 800b790:	2b10      	cmp	r3, #16
 800b792:	d07b      	beq.n	800b88c <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800b794:	2001      	movs	r0, #1
 800b796:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800b79a:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800b79e:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800b7a2:	d1f4      	bne.n	800b78e <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800b7a4:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7a8:	f003 0103 	and.w	r1, r3, #3
 800b7ac:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b7b0:	4554      	cmp	r4, sl
 800b7b2:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7b4:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800b7b8:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7bc:	fa0c fc01 	lsl.w	ip, ip, r1
 800b7c0:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b7c4:	d01e      	beq.n	800b804 <HAL_GPIO_DeInit+0xf0>
 800b7c6:	2f00      	cmp	r7, #0
 800b7c8:	d063      	beq.n	800b892 <HAL_GPIO_DeInit+0x17e>
 800b7ca:	4843      	ldr	r0, [pc, #268]	; (800b8d8 <HAL_GPIO_DeInit+0x1c4>)
 800b7cc:	4284      	cmp	r4, r0
 800b7ce:	d063      	beq.n	800b898 <HAL_GPIO_DeInit+0x184>
 800b7d0:	4842      	ldr	r0, [pc, #264]	; (800b8dc <HAL_GPIO_DeInit+0x1c8>)
 800b7d2:	4284      	cmp	r4, r0
 800b7d4:	d064      	beq.n	800b8a0 <HAL_GPIO_DeInit+0x18c>
 800b7d6:	4842      	ldr	r0, [pc, #264]	; (800b8e0 <HAL_GPIO_DeInit+0x1cc>)
 800b7d8:	4284      	cmp	r4, r0
 800b7da:	d065      	beq.n	800b8a8 <HAL_GPIO_DeInit+0x194>
 800b7dc:	4841      	ldr	r0, [pc, #260]	; (800b8e4 <HAL_GPIO_DeInit+0x1d0>)
 800b7de:	4284      	cmp	r4, r0
 800b7e0:	d066      	beq.n	800b8b0 <HAL_GPIO_DeInit+0x19c>
 800b7e2:	4841      	ldr	r0, [pc, #260]	; (800b8e8 <HAL_GPIO_DeInit+0x1d4>)
 800b7e4:	4284      	cmp	r4, r0
 800b7e6:	d053      	beq.n	800b890 <HAL_GPIO_DeInit+0x17c>
 800b7e8:	4840      	ldr	r0, [pc, #256]	; (800b8ec <HAL_GPIO_DeInit+0x1d8>)
 800b7ea:	4284      	cmp	r4, r0
 800b7ec:	d064      	beq.n	800b8b8 <HAL_GPIO_DeInit+0x1a4>
 800b7ee:	4838      	ldr	r0, [pc, #224]	; (800b8d0 <HAL_GPIO_DeInit+0x1bc>)
 800b7f0:	4284      	cmp	r4, r0
 800b7f2:	d065      	beq.n	800b8c0 <HAL_GPIO_DeInit+0x1ac>
 800b7f4:	483e      	ldr	r0, [pc, #248]	; (800b8f0 <HAL_GPIO_DeInit+0x1dc>)
 800b7f6:	4284      	cmp	r4, r0
 800b7f8:	bf14      	ite	ne
 800b7fa:	200a      	movne	r0, #10
 800b7fc:	2009      	moveq	r0, #9
 800b7fe:	fa00 f101 	lsl.w	r1, r0, r1
 800b802:	e000      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b804:	2100      	movs	r1, #0
 800b806:	4588      	cmp	r8, r1
 800b808:	d11b      	bne.n	800b842 <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b80a:	f8d9 1000 	ldr.w	r1, [r9]
 800b80e:	ea21 010e 	bic.w	r1, r1, lr
 800b812:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b816:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b81a:	ea21 010e 	bic.w	r1, r1, lr
 800b81e:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b822:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b826:	ea21 010e 	bic.w	r1, r1, lr
 800b82a:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b82e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b832:	ea21 010e 	bic.w	r1, r1, lr
 800b836:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b83a:	68b1      	ldr	r1, [r6, #8]
 800b83c:	ea21 010c 	bic.w	r1, r1, ip
 800b840:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b842:	0059      	lsls	r1, r3, #1
 800b844:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b846:	f003 0c07 	and.w	ip, r3, #7
 800b84a:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b84c:	fa00 f101 	lsl.w	r1, r0, r1
 800b850:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b852:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b856:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b85a:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b85e:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b860:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b862:	3301      	adds	r3, #1
 800b864:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800b868:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b86a:	6a06      	ldr	r6, [r0, #32]
 800b86c:	ea26 060c 	bic.w	r6, r6, ip
 800b870:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b872:	68e0      	ldr	r0, [r4, #12]
 800b874:	ea20 0001 	bic.w	r0, r0, r1
 800b878:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b87a:	6860      	ldr	r0, [r4, #4]
 800b87c:	ea20 0202 	bic.w	r2, r0, r2
 800b880:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b882:	68a2      	ldr	r2, [r4, #8]
 800b884:	ea22 0101 	bic.w	r1, r2, r1
 800b888:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b88a:	d183      	bne.n	800b794 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800b88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b890:	2006      	movs	r0, #6
 800b892:	fa00 f101 	lsl.w	r1, r0, r1
 800b896:	e7b6      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b898:	2002      	movs	r0, #2
 800b89a:	fa00 f101 	lsl.w	r1, r0, r1
 800b89e:	e7b2      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8a0:	2003      	movs	r0, #3
 800b8a2:	fa00 f101 	lsl.w	r1, r0, r1
 800b8a6:	e7ae      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8a8:	2004      	movs	r0, #4
 800b8aa:	fa00 f101 	lsl.w	r1, r0, r1
 800b8ae:	e7aa      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8b0:	2005      	movs	r0, #5
 800b8b2:	fa00 f101 	lsl.w	r1, r0, r1
 800b8b6:	e7a6      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8b8:	2007      	movs	r0, #7
 800b8ba:	fa00 f101 	lsl.w	r1, r0, r1
 800b8be:	e7a2      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8c0:	2008      	movs	r0, #8
 800b8c2:	fa00 f101 	lsl.w	r1, r0, r1
 800b8c6:	e79e      	b.n	800b806 <HAL_GPIO_DeInit+0xf2>
 800b8c8:	40020000 	.word	0x40020000
 800b8cc:	40020400 	.word	0x40020400
 800b8d0:	40022000 	.word	0x40022000
 800b8d4:	0802c33c 	.word	0x0802c33c
 800b8d8:	40020800 	.word	0x40020800
 800b8dc:	40020c00 	.word	0x40020c00
 800b8e0:	40021000 	.word	0x40021000
 800b8e4:	40021400 	.word	0x40021400
 800b8e8:	40021800 	.word	0x40021800
 800b8ec:	40021c00 	.word	0x40021c00
 800b8f0:	40022400 	.word	0x40022400
 800b8f4:	40013800 	.word	0x40013800
 800b8f8:	40013c00 	.word	0x40013c00

0800b8fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b900:	460c      	mov	r4, r1
 800b902:	b129      	cbz	r1, 800b910 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b904:	692b      	ldr	r3, [r5, #16]
 800b906:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b908:	bf14      	ite	ne
 800b90a:	2001      	movne	r0, #1
 800b90c:	2000      	moveq	r0, #0
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b910:	f240 1177 	movw	r1, #375	; 0x177
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <HAL_GPIO_ReadPin+0x20>)
 800b916:	f7f8 fcad 	bl	8004274 <assert_failed>
 800b91a:	e7f3      	b.n	800b904 <HAL_GPIO_ReadPin+0x8>
 800b91c:	0802c33c 	.word	0x0802c33c

0800b920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b924:	460c      	mov	r4, r1
{
 800b926:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b928:	b161      	cbz	r1, 800b944 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b92a:	2d01      	cmp	r5, #1
 800b92c:	d803      	bhi.n	800b936 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800b92e:	b905      	cbnz	r5, 800b932 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b930:	0424      	lsls	r4, r4, #16
 800b932:	61b4      	str	r4, [r6, #24]
  }
}
 800b934:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b936:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800b93a:	4805      	ldr	r0, [pc, #20]	; (800b950 <HAL_GPIO_WritePin+0x30>)
 800b93c:	f7f8 fc9a 	bl	8004274 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b940:	61b4      	str	r4, [r6, #24]
}
 800b942:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b944:	f240 1197 	movw	r1, #407	; 0x197
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <HAL_GPIO_WritePin+0x30>)
 800b94a:	f7f8 fc93 	bl	8004274 <assert_failed>
 800b94e:	e7ec      	b.n	800b92a <HAL_GPIO_WritePin+0xa>
 800b950:	0802c33c 	.word	0x0802c33c

0800b954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b958:	460c      	mov	r4, r1
 800b95a:	b141      	cbz	r1, 800b96e <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b95c:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b95e:	ea04 0301 	and.w	r3, r4, r1
 800b962:	ea24 0401 	bic.w	r4, r4, r1
 800b966:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b96a:	61ac      	str	r4, [r5, #24]
}
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b96e:	f240 11af 	movw	r1, #431	; 0x1af
 800b972:	4802      	ldr	r0, [pc, #8]	; (800b97c <HAL_GPIO_TogglePin+0x28>)
 800b974:	f7f8 fc7e 	bl	8004274 <assert_failed>
 800b978:	e7f0      	b.n	800b95c <HAL_GPIO_TogglePin+0x8>
 800b97a:	bf00      	nop
 800b97c:	0802c33c 	.word	0x0802c33c

0800b980 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop

0800b984 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b984:	4a04      	ldr	r2, [pc, #16]	; (800b998 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b986:	6951      	ldr	r1, [r2, #20]
 800b988:	4201      	tst	r1, r0
 800b98a:	d100      	bne.n	800b98e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800b98c:	4770      	bx	lr
{
 800b98e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b990:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b992:	f7ff fff5 	bl	800b980 <HAL_GPIO_EXTI_Callback>
}
 800b996:	bd08      	pop	{r3, pc}
 800b998:	40013c00 	.word	0x40013c00

0800b99c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b9a4:	4926      	ldr	r1, [pc, #152]	; (800ba40 <I2C_TransferConfig+0xa4>)
{
 800b9a6:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b9a8:	4a26      	ldr	r2, [pc, #152]	; (800ba44 <I2C_TransferConfig+0xa8>)
{
 800b9aa:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b9ac:	6803      	ldr	r3, [r0, #0]
{
 800b9ae:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	bf18      	it	ne
 800b9b4:	428b      	cmpne	r3, r1
 800b9b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9ba:	bf14      	ite	ne
 800b9bc:	2201      	movne	r2, #1
 800b9be:	2200      	moveq	r2, #0
 800b9c0:	428b      	cmp	r3, r1
 800b9c2:	bf0c      	ite	eq
 800b9c4:	2200      	moveq	r2, #0
 800b9c6:	f002 0201 	andne.w	r2, r2, #1
 800b9ca:	b112      	cbz	r2, 800b9d2 <I2C_TransferConfig+0x36>
 800b9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <I2C_TransferConfig+0xac>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d123      	bne.n	800ba1a <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800b9d2:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b9d6:	d002      	beq.n	800b9de <I2C_TransferConfig+0x42>
 800b9d8:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b9dc:	d129      	bne.n	800ba32 <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800b9de:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <I2C_TransferConfig+0xb0>)
 800b9e0:	429f      	cmp	r7, r3
 800b9e2:	d005      	beq.n	800b9f0 <I2C_TransferConfig+0x54>
 800b9e4:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <I2C_TransferConfig+0xb4>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d000      	beq.n	800b9f0 <I2C_TransferConfig+0x54>
 800b9ee:	b9d7      	cbnz	r7, 800ba26 <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b9f0:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b9f4:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b9f8:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800b9fc:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba00:	4a14      	ldr	r2, [pc, #80]	; (800ba54 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba02:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba04:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800ba08:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba0e:	ea27 0702 	bic.w	r7, r7, r2
 800ba12:	433b      	orrs	r3, r7
 800ba14:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ba1a:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800ba1e:	480e      	ldr	r0, [pc, #56]	; (800ba58 <I2C_TransferConfig+0xbc>)
 800ba20:	f7f8 fc28 	bl	8004274 <assert_failed>
 800ba24:	e7d5      	b.n	800b9d2 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800ba26:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800ba2a:	480b      	ldr	r0, [pc, #44]	; (800ba58 <I2C_TransferConfig+0xbc>)
 800ba2c:	f7f8 fc22 	bl	8004274 <assert_failed>
 800ba30:	e7de      	b.n	800b9f0 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ba32:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800ba36:	4808      	ldr	r0, [pc, #32]	; (800ba58 <I2C_TransferConfig+0xbc>)
 800ba38:	f7f8 fc1c 	bl	8004274 <assert_failed>
 800ba3c:	e7cf      	b.n	800b9de <I2C_TransferConfig+0x42>
 800ba3e:	bf00      	nop
 800ba40:	40005800 	.word	0x40005800
 800ba44:	40005400 	.word	0x40005400
 800ba48:	40006000 	.word	0x40006000
 800ba4c:	80004000 	.word	0x80004000
 800ba50:	80002000 	.word	0x80002000
 800ba54:	03ff63ff 	.word	0x03ff63ff
 800ba58:	0802c378 	.word	0x0802c378

0800ba5c <I2C_IsErrorOccurred>:
{
 800ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba60:	6803      	ldr	r3, [r0, #0]
{
 800ba62:	460d      	mov	r5, r1
 800ba64:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800ba66:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ba68:	f011 0110 	ands.w	r1, r1, #16
 800ba6c:	d045      	beq.n	800bafa <I2C_IsErrorOccurred+0x9e>
 800ba6e:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800ba70:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba74:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800ba76:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba7a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba7c:	699a      	ldr	r2, [r3, #24]
 800ba7e:	0696      	lsls	r6, r2, #26
 800ba80:	f100 808d 	bmi.w	800bb9e <I2C_IsErrorOccurred+0x142>
 800ba84:	f1b9 0f00 	cmp.w	r9, #0
 800ba88:	f040 808d 	bne.w	800bba6 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800ba8c:	1c6a      	adds	r2, r5, #1
 800ba8e:	d152      	bne.n	800bb36 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba90:	699a      	ldr	r2, [r3, #24]
 800ba92:	0697      	lsls	r7, r2, #26
 800ba94:	d5fc      	bpl.n	800ba90 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba96:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800ba98:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800ba9a:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba9e:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800baa0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800baa2:	05d5      	lsls	r5, r2, #23
 800baa4:	d42d      	bmi.n	800bb02 <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800baa6:	0557      	lsls	r7, r2, #21
 800baa8:	d53d      	bpl.n	800bb26 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800baaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800baae:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bab2:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bab4:	0596      	lsls	r6, r2, #22
 800bab6:	d504      	bpl.n	800bac2 <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bab8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800babc:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bac0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bac2:	699a      	ldr	r2, [r3, #24]
 800bac4:	0790      	lsls	r0, r2, #30
 800bac6:	d501      	bpl.n	800bacc <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800bac8:	2200      	movs	r2, #0
 800baca:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bacc:	699a      	ldr	r2, [r3, #24]
 800bace:	07d2      	lsls	r2, r2, #31
 800bad0:	d524      	bpl.n	800bb1c <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800bad2:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bad4:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800bad6:	4835      	ldr	r0, [pc, #212]	; (800bbac <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800bad8:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800badc:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bade:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800bae0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800bae2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800bae4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800bae8:	4319      	orrs	r1, r3
 800baea:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800baec:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800baf4:	4648      	mov	r0, r9
 800baf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800bafa:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800bafc:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bafe:	05d5      	lsls	r5, r2, #23
 800bb00:	d5d1      	bpl.n	800baa6 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb02:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800bb06:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb0a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bb0c:	0550      	lsls	r0, r2, #21
 800bb0e:	d5d1      	bpl.n	800bab4 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bb10:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800bb14:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bb18:	61d8      	str	r0, [r3, #28]
 800bb1a:	e7cb      	b.n	800bab4 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	f042 0201 	orr.w	r2, r2, #1
 800bb22:	619a      	str	r2, [r3, #24]
 800bb24:	e7d5      	b.n	800bad2 <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bb26:	0595      	lsls	r5, r2, #22
 800bb28:	d4c6      	bmi.n	800bab8 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	d1c8      	bne.n	800bac2 <I2C_IsErrorOccurred+0x66>
}
 800bb30:	4648      	mov	r0, r9
 800bb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb36:	f7fc f971 	bl	8007e1c <HAL_GetTick>
 800bb3a:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb3c:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb3e:	42a8      	cmp	r0, r5
 800bb40:	d801      	bhi.n	800bb46 <I2C_IsErrorOccurred+0xea>
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	d19a      	bne.n	800ba7c <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb46:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800bb48:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb4c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800bb4e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb50:	040e      	lsls	r6, r1, #16
 800bb52:	d50d      	bpl.n	800bb70 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800bb54:	0441      	lsls	r1, r0, #17
 800bb56:	d40b      	bmi.n	800bb70 <I2C_IsErrorOccurred+0x114>
 800bb58:	2a20      	cmp	r2, #32
 800bb5a:	d009      	beq.n	800bb70 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb62:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bb64:	f7fc f95a 	bl	8007e1c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb68:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	e000      	b.n	800bb70 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	699e      	ldr	r6, [r3, #24]
 800bb72:	f016 0620 	ands.w	r6, r6, #32
 800bb76:	d181      	bne.n	800ba7c <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bb78:	f7fc f950 	bl	8007e1c <HAL_GetTick>
 800bb7c:	1bc0      	subs	r0, r0, r7
 800bb7e:	2819      	cmp	r0, #25
 800bb80:	d9f5      	bls.n	800bb6e <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb82:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800bb84:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800bb88:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb8c:	f043 0320 	orr.w	r3, r3, #32
 800bb90:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800bb92:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb96:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb98:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800bb9c:	e7e8      	b.n	800bb70 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800bb9e:	f1b9 0f00 	cmp.w	r9, #0
 800bba2:	f43f af78 	beq.w	800ba96 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800bba6:	2104      	movs	r1, #4
 800bba8:	e7a8      	b.n	800bafc <I2C_IsErrorOccurred+0xa0>
 800bbaa:	bf00      	nop
 800bbac:	fe00e800 	.word	0xfe00e800

0800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbb8:	e004      	b.n	800bbc4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbba:	f7ff ff4f 	bl	800ba5c <I2C_IsErrorOccurred>
 800bbbe:	b950      	cbnz	r0, 800bbd6 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800bbc0:	1c6a      	adds	r2, r5, #1
 800bbc2:	d10a      	bne.n	800bbda <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbc4:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	079b      	lsls	r3, r3, #30
 800bbd0:	d5f3      	bpl.n	800bbba <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800bbd2:	2000      	movs	r0, #0
}
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bbd6:	2001      	movs	r0, #1
}
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbda:	f7fc f91f 	bl	8007e1c <HAL_GetTick>
 800bbde:	1b80      	subs	r0, r0, r6
 800bbe0:	42a8      	cmp	r0, r5
 800bbe2:	d801      	bhi.n	800bbe8 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	d1ed      	bne.n	800bbc4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbea:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbec:	2200      	movs	r2, #0
        return HAL_ERROR;
 800bbee:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbf0:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bbf2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbf6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbf8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbfc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bc00:	bd70      	pop	{r4, r5, r6, pc}
 800bc02:	bf00      	nop

0800bc04 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	4605      	mov	r5, r0
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc0c:	e008      	b.n	800bc20 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc0e:	f7ff ff25 	bl	800ba5c <I2C_IsErrorOccurred>
 800bc12:	b9d8      	cbnz	r0, 800bc4c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc14:	f7fc f902 	bl	8007e1c <HAL_GetTick>
 800bc18:	1b80      	subs	r0, r0, r6
 800bc1a:	42a0      	cmp	r0, r4
 800bc1c:	d809      	bhi.n	800bc32 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800bc1e:	b144      	cbz	r4, 800bc32 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc20:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc22:	4632      	mov	r2, r6
 800bc24:	4621      	mov	r1, r4
 800bc26:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	069b      	lsls	r3, r3, #26
 800bc2c:	d5ef      	bpl.n	800bc0e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800bc2e:	2000      	movs	r0, #0
}
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc34:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc36:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800bc38:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc3a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bc3c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc40:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc42:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc46:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bc4c:	2001      	movs	r0, #1
}
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}

0800bc50 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800bc50:	b570      	push	{r4, r5, r6, lr}
 800bc52:	4604      	mov	r4, r0
 800bc54:	460d      	mov	r5, r1
 800bc56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc58:	e00c      	b.n	800bc74 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc5a:	f7ff feff 	bl	800ba5c <I2C_IsErrorOccurred>
 800bc5e:	b9e8      	cbnz	r0, 800bc9c <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	699a      	ldr	r2, [r3, #24]
 800bc64:	0691      	lsls	r1, r2, #26
 800bc66:	d41b      	bmi.n	800bca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc68:	f7fc f8d8 	bl	8007e1c <HAL_GetTick>
 800bc6c:	1b80      	subs	r0, r0, r6
 800bc6e:	42a8      	cmp	r0, r5
 800bc70:	d809      	bhi.n	800bc86 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800bc72:	b145      	cbz	r5, 800bc86 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc74:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc76:	4632      	mov	r2, r6
 800bc78:	4629      	mov	r1, r5
 800bc7a:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	075b      	lsls	r3, r3, #29
 800bc80:	d5eb      	bpl.n	800bc5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800bc82:	2000      	movs	r0, #0
}
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc86:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc88:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800bc8a:	2100      	movs	r1, #0
      return HAL_ERROR;
 800bc8c:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc8e:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800bc90:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc94:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bc96:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bc9c:	2001      	movs	r0, #1
}
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	0752      	lsls	r2, r2, #29
 800bca4:	d502      	bpl.n	800bcac <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800bca6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	d1ea      	bne.n	800bc82 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bcac:	699a      	ldr	r2, [r3, #24]
 800bcae:	f012 0210 	ands.w	r2, r2, #16
 800bcb2:	d012      	beq.n	800bcda <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcb4:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bcb6:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcb8:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bcba:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcbc:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800bcbe:	4808      	ldr	r0, [pc, #32]	; (800bce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcc0:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcc2:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	4002      	ands	r2, r0
        return HAL_ERROR;
 800bcc8:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800bcca:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800bccc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800bcd0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800bcd8:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcda:	6462      	str	r2, [r4, #68]	; 0x44
 800bcdc:	e7ee      	b.n	800bcbc <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800bcde:	bf00      	nop
 800bce0:	fe00e800 	.word	0xfe00e800

0800bce4 <I2C_RequestMemoryRead>:
{
 800bce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bce8:	4c26      	ldr	r4, [pc, #152]	; (800bd84 <I2C_RequestMemoryRead+0xa0>)
{
 800bcea:	b083      	sub	sp, #12
 800bcec:	4698      	mov	r8, r3
 800bcee:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bcf0:	9400      	str	r4, [sp, #0]
{
 800bcf2:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	fa5f f288 	uxtb.w	r2, r8
{
 800bcfa:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bcfe:	f7ff fe4d 	bl	800b99c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd02:	4628      	mov	r0, r5
 800bd04:	463a      	mov	r2, r7
 800bd06:	4621      	mov	r1, r4
 800bd08:	f7ff ff52 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd0c:	b9e0      	cbnz	r0, 800bd48 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd0e:	f1b8 0f01 	cmp.w	r8, #1
 800bd12:	4606      	mov	r6, r0
 800bd14:	d10d      	bne.n	800bd32 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd16:	fa5f f389 	uxtb.w	r3, r9
 800bd1a:	682a      	ldr	r2, [r5, #0]
 800bd1c:	6293      	str	r3, [r2, #40]	; 0x28
 800bd1e:	e001      	b.n	800bd24 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800bd20:	1c61      	adds	r1, r4, #1
 800bd22:	d116      	bne.n	800bd52 <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd24:	6993      	ldr	r3, [r2, #24]
 800bd26:	065b      	lsls	r3, r3, #25
 800bd28:	d5fa      	bpl.n	800bd20 <I2C_RequestMemoryRead+0x3c>
}
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	b003      	add	sp, #12
 800bd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd32:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800bd36:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd3e:	463a      	mov	r2, r7
 800bd40:	f7ff ff36 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0e6      	beq.n	800bd16 <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800bd48:	2601      	movs	r6, #1
}
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	b003      	add	sp, #12
 800bd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd52:	f7fc f863 	bl	8007e1c <HAL_GetTick>
 800bd56:	1bc0      	subs	r0, r0, r7
 800bd58:	4284      	cmp	r4, r0
 800bd5a:	d302      	bcc.n	800bd62 <I2C_RequestMemoryRead+0x7e>
 800bd5c:	b10c      	cbz	r4, 800bd62 <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd5e:	682a      	ldr	r2, [r5, #0]
 800bd60:	e7e0      	b.n	800bd24 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd62:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd64:	2120      	movs	r1, #32
    return HAL_ERROR;
 800bd66:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd68:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd6a:	430b      	orrs	r3, r1
}
 800bd6c:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800bd6e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd72:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd74:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd78:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bd7c:	b003      	add	sp, #12
 800bd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd82:	bf00      	nop
 800bd84:	80002000 	.word	0x80002000

0800bd88 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	f000 80c1 	beq.w	800bf10 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd8e:	4b61      	ldr	r3, [pc, #388]	; (800bf14 <HAL_I2C_Init+0x18c>)
 800bd90:	6802      	ldr	r2, [r0, #0]
 800bd92:	4961      	ldr	r1, [pc, #388]	; (800bf18 <HAL_I2C_Init+0x190>)
{
 800bd94:	b510      	push	{r4, lr}
 800bd96:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd98:	4860      	ldr	r0, [pc, #384]	; (800bf1c <HAL_I2C_Init+0x194>)
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	bf18      	it	ne
 800bd9e:	4282      	cmpne	r2, r0
 800bda0:	bf14      	ite	ne
 800bda2:	2301      	movne	r3, #1
 800bda4:	2300      	moveq	r3, #0
 800bda6:	428a      	cmp	r2, r1
 800bda8:	bf0c      	ite	eq
 800bdaa:	2300      	moveq	r3, #0
 800bdac:	f003 0301 	andne.w	r3, r3, #1
 800bdb0:	b11b      	cbz	r3, 800bdba <HAL_I2C_Init+0x32>
 800bdb2:	4b5b      	ldr	r3, [pc, #364]	; (800bf20 <HAL_I2C_Init+0x198>)
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	f040 80a5 	bne.w	800bf04 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc0:	f080 809a 	bcs.w	800bef8 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800bdc4:	68e3      	ldr	r3, [r4, #12]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d855      	bhi.n	800be78 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800bdd2:	d15a      	bne.n	800be8a <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800bdd4:	6963      	ldr	r3, [r4, #20]
 800bdd6:	2bff      	cmp	r3, #255	; 0xff
 800bdd8:	d85f      	bhi.n	800be9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800bdda:	69a3      	ldr	r3, [r4, #24]
 800bddc:	2b07      	cmp	r3, #7
 800bdde:	d864      	bhi.n	800beaa <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800bde0:	69e3      	ldr	r3, [r4, #28]
 800bde2:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800bde6:	d169      	bne.n	800bebc <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800bde8:	6a23      	ldr	r3, [r4, #32]
 800bdea:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800bdee:	d16e      	bne.n	800bece <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bdf0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800bdf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d073      	beq.n	800bee4 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800bdfc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bdfe:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be00:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800be02:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800be06:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be0c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800be0e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be12:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800be14:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be16:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be1e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be20:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be22:	d065      	beq.n	800bef0 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be24:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be28:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be2a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be2c:	d102      	bne.n	800be34 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800be2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be32:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be34:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800be36:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be3a:	493a      	ldr	r1, [pc, #232]	; (800bf24 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be3c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be3e:	4301      	orrs	r1, r0
 800be40:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be42:	68d9      	ldr	r1, [r3, #12]
 800be44:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800be48:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be4a:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be4e:	4302      	orrs	r2, r0
 800be50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be54:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be58:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be5a:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be5c:	4301      	orrs	r1, r0
  return HAL_OK;
 800be5e:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be60:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800be62:	6819      	ldr	r1, [r3, #0]
 800be64:	f041 0101 	orr.w	r1, r1, #1
 800be68:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be6a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be6c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be70:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be72:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800be76:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800be78:	f240 2117 	movw	r1, #535	; 0x217
 800be7c:	482a      	ldr	r0, [pc, #168]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800be7e:	f7f8 f9f9 	bl	8004274 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800be88:	d0a4      	beq.n	800bdd4 <HAL_I2C_Init+0x4c>
 800be8a:	f44f 7106 	mov.w	r1, #536	; 0x218
 800be8e:	4826      	ldr	r0, [pc, #152]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800be90:	f7f8 f9f0 	bl	8004274 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800be94:	6963      	ldr	r3, [r4, #20]
 800be96:	2bff      	cmp	r3, #255	; 0xff
 800be98:	d99f      	bls.n	800bdda <HAL_I2C_Init+0x52>
 800be9a:	f240 2119 	movw	r1, #537	; 0x219
 800be9e:	4822      	ldr	r0, [pc, #136]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800bea0:	f7f8 f9e8 	bl	8004274 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800bea4:	69a3      	ldr	r3, [r4, #24]
 800bea6:	2b07      	cmp	r3, #7
 800bea8:	d99a      	bls.n	800bde0 <HAL_I2C_Init+0x58>
 800beaa:	f240 211a 	movw	r1, #538	; 0x21a
 800beae:	481e      	ldr	r0, [pc, #120]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800beb0:	f7f8 f9e0 	bl	8004274 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800beb4:	69e3      	ldr	r3, [r4, #28]
 800beb6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800beba:	d095      	beq.n	800bde8 <HAL_I2C_Init+0x60>
 800bebc:	f240 211b 	movw	r1, #539	; 0x21b
 800bec0:	4819      	ldr	r0, [pc, #100]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800bec2:	f7f8 f9d7 	bl	8004274 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800bec6:	6a23      	ldr	r3, [r4, #32]
 800bec8:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800becc:	d090      	beq.n	800bdf0 <HAL_I2C_Init+0x68>
 800bece:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800bed2:	4815      	ldr	r0, [pc, #84]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800bed4:	f7f8 f9ce 	bl	8004274 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bed8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800bedc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d18b      	bne.n	800bdfc <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800bee4:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800bee6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800beea:	f7f9 fc6d 	bl	80057c8 <HAL_I2C_MspInit>
 800beee:	e785      	b.n	800bdfc <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bef4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bef6:	e79d      	b.n	800be34 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800bef8:	f240 2116 	movw	r1, #534	; 0x216
 800befc:	480a      	ldr	r0, [pc, #40]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800befe:	f7f8 f9b9 	bl	8004274 <assert_failed>
 800bf02:	e75f      	b.n	800bdc4 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bf04:	f240 2115 	movw	r1, #533	; 0x215
 800bf08:	4807      	ldr	r0, [pc, #28]	; (800bf28 <HAL_I2C_Init+0x1a0>)
 800bf0a:	f7f8 f9b3 	bl	8004274 <assert_failed>
 800bf0e:	e754      	b.n	800bdba <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800bf10:	2001      	movs	r0, #1
}
 800bf12:	4770      	bx	lr
 800bf14:	40005400 	.word	0x40005400
 800bf18:	40005c00 	.word	0x40005c00
 800bf1c:	40005800 	.word	0x40005800
 800bf20:	40006000 	.word	0x40006000
 800bf24:	02008000 	.word	0x02008000
 800bf28:	0802c378 	.word	0x0802c378

0800bf2c <HAL_I2C_Master_Transmit>:
{
 800bf2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf30:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bf36:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf38:	2b20      	cmp	r3, #32
{
 800bf3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf3c:	d16d      	bne.n	800c01a <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800bf3e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf42:	4604      	mov	r4, r0
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d068      	beq.n	800c01a <HAL_I2C_Master_Transmit+0xee>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	4691      	mov	r9, r2
 800bf4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bf52:	f7fb ff63 	bl	8007e1c <HAL_GetTick>
 800bf56:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf58:	e004      	b.n	800bf64 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5a:	f7fb ff5f 	bl	8007e1c <HAL_GetTick>
 800bf5e:	1b80      	subs	r0, r0, r6
 800bf60:	2819      	cmp	r0, #25
 800bf62:	d85e      	bhi.n	800c022 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	6999      	ldr	r1, [r3, #24]
 800bf68:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800bf6c:	d1f5      	bne.n	800bf5a <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf6e:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800bf70:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800bf74:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf7a:	2310      	movs	r3, #16
 800bf7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf80:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bf82:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	2bff      	cmp	r3, #255	; 0xff
 800bf8c:	d86d      	bhi.n	800c06a <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800bf8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf90:	4639      	mov	r1, r7
 800bf92:	4b48      	ldr	r3, [pc, #288]	; (800c0b4 <HAL_I2C_Master_Transmit+0x188>)
 800bf94:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800bf96:	b292      	uxth	r2, r2
 800bf98:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfa2:	f7ff fcfb 	bl	800b99c <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfa6:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfaa:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bfae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	b1eb      	cbz	r3, 800bff6 <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfba:	f7ff fdf9 	bl	800bbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d174      	bne.n	800c0ac <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfc4:	6821      	ldr	r1, [r4, #0]
 800bfc6:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800bfca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfcc:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800bfce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bfd0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800bfd2:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bfd4:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800bfd6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800bfd8:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800bfda:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bfdc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bfe0:	b292      	uxth	r2, r2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1e3      	bne.n	800bfae <HAL_I2C_Master_Transmit+0x82>
 800bfe6:	bb6a      	cbnz	r2, 800c044 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800bfe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfea:	4632      	mov	r2, r6
 800bfec:	4629      	mov	r1, r5
 800bfee:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1e1      	bne.n	800bfba <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bff6:	f7ff fe05 	bl	800bc04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d156      	bne.n	800c0ac <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c002:	4d2d      	ldr	r5, [pc, #180]	; (800c0b8 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c004:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c006:	685a      	ldr	r2, [r3, #4]
 800c008:	402a      	ands	r2, r5
 800c00a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c00c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c010:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c014:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c018:	e000      	b.n	800c01c <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800c01a:	2002      	movs	r0, #2
}
 800c01c:	b003      	add	sp, #12
 800c01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c022:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c024:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c026:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c028:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c02a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c02c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c030:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c032:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c036:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c03a:	b003      	add	sp, #12
 800c03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c040:	1c6a      	adds	r2, r5, #1
 800c042:	d11d      	bne.n	800c080 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c044:	698b      	ldr	r3, [r1, #24]
 800c046:	061b      	lsls	r3, r3, #24
 800c048:	d5fa      	bpl.n	800c040 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c04a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	2bff      	cmp	r3, #255	; 0xff
 800c050:	d91f      	bls.n	800c092 <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c052:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c05a:	22ff      	movs	r2, #255	; 0xff
 800c05c:	4639      	mov	r1, r7
 800c05e:	4620      	mov	r0, r4
 800c060:	f8cd 8000 	str.w	r8, [sp]
 800c064:	f7ff fc9a 	bl	800b99c <I2C_TransferConfig>
 800c068:	e7a1      	b.n	800bfae <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c06a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <HAL_I2C_Master_Transmit+0x188>)
 800c06e:	4639      	mov	r1, r7
 800c070:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c072:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c07a:	f7ff fc8f 	bl	800b99c <I2C_TransferConfig>
 800c07e:	e792      	b.n	800bfa6 <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c080:	f7fb fecc 	bl	8007e1c <HAL_GetTick>
 800c084:	1b80      	subs	r0, r0, r6
 800c086:	4285      	cmp	r5, r0
 800c088:	d3cb      	bcc.n	800c022 <HAL_I2C_Master_Transmit+0xf6>
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	d0c9      	beq.n	800c022 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c08e:	6821      	ldr	r1, [r4, #0]
 800c090:	e7d8      	b.n	800c044 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c092:	f8cd 8000 	str.w	r8, [sp]
 800c096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c09a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c09c:	4639      	mov	r1, r7
 800c09e:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c0a0:	b292      	uxth	r2, r2
 800c0a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	f7ff fc79 	bl	800b99c <I2C_TransferConfig>
 800c0aa:	e780      	b.n	800bfae <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800c0ac:	2001      	movs	r0, #1
}
 800c0ae:	b003      	add	sp, #12
 800c0b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b4:	80002000 	.word	0x80002000
 800c0b8:	fe00e800 	.word	0xfe00e800

0800c0bc <HAL_I2C_Master_Receive>:
{
 800c0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c0c6:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0c8:	2b20      	cmp	r3, #32
{
 800c0ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0cc:	f040 8088 	bne.w	800c1e0 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800c0d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	f000 8082 	beq.w	800c1e0 <HAL_I2C_Master_Receive+0x124>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	460f      	mov	r7, r1
 800c0e0:	4691      	mov	r9, r2
 800c0e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c0e6:	f7fb fe99 	bl	8007e1c <HAL_GetTick>
 800c0ea:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0ec:	e004      	b.n	800c0f8 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ee:	f7fb fe95 	bl	8007e1c <HAL_GetTick>
 800c0f2:	1b80      	subs	r0, r0, r6
 800c0f4:	2819      	cmp	r0, #25
 800c0f6:	d87e      	bhi.n	800c1f6 <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	6999      	ldr	r1, [r3, #24]
 800c0fc:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800c100:	d1f5      	bne.n	800c0ee <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c102:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800c104:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800c108:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c10a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c10e:	2310      	movs	r3, #16
 800c110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c114:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c116:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c11a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2bff      	cmp	r3, #255	; 0xff
 800c120:	d878      	bhi.n	800c214 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800c122:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c124:	4639      	mov	r1, r7
 800c126:	4b49      	ldr	r3, [pc, #292]	; (800c24c <HAL_I2C_Master_Receive+0x190>)
 800c128:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800c12a:	b292      	uxth	r2, r2
 800c12c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c136:	f7ff fc31 	bl	800b99c <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c13a:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c13e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c142:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c144:	4632      	mov	r2, r6
 800c146:	4629      	mov	r1, r5
 800c148:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d035      	beq.n	800c1bc <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c150:	f7ff fd7e 	bl	800bc50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c154:	2800      	cmp	r0, #0
 800c156:	d175      	bne.n	800c244 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c15c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c15e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c160:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c162:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c164:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c166:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c168:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c16a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c16c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c16e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c170:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c172:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c174:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c176:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c178:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e1      	bne.n	800c142 <HAL_I2C_Master_Receive+0x86>
 800c17e:	2a00      	cmp	r2, #0
 800c180:	d0df      	beq.n	800c142 <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c182:	6822      	ldr	r2, [r4, #0]
 800c184:	e001      	b.n	800c18a <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800c186:	1c69      	adds	r1, r5, #1
 800c188:	d12e      	bne.n	800c1e8 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c18a:	6993      	ldr	r3, [r2, #24]
 800c18c:	061b      	lsls	r3, r3, #24
 800c18e:	d5fa      	bpl.n	800c186 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c192:	b29b      	uxth	r3, r3
 800c194:	2bff      	cmp	r3, #255	; 0xff
 800c196:	d948      	bls.n	800c22a <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c19c:	22ff      	movs	r2, #255	; 0xff
 800c19e:	4639      	mov	r1, r7
 800c1a0:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1a2:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c1a6:	f8cd 8000 	str.w	r8, [sp]
 800c1aa:	f7ff fbf7 	bl	800b99c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c1ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800c1b4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1b6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1c9      	bne.n	800c150 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1bc:	f7ff fd22 	bl	800bc04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d13f      	bne.n	800c244 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c1c8:	4d21      	ldr	r5, [pc, #132]	; (800c250 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	402a      	ands	r2, r5
 800c1d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c1d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c1d6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c1da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c1de:	e000      	b.n	800c1e2 <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800c1e0:	2002      	movs	r0, #2
}
 800c1e2:	b003      	add	sp, #12
 800c1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1e8:	f7fb fe18 	bl	8007e1c <HAL_GetTick>
 800c1ec:	1b80      	subs	r0, r0, r6
 800c1ee:	4285      	cmp	r5, r0
 800c1f0:	d301      	bcc.n	800c1f6 <HAL_I2C_Master_Receive+0x13a>
 800c1f2:	2d00      	cmp	r5, #0
 800c1f4:	d1c5      	bne.n	800c182 <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1f8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1fa:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c1fc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1fe:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c200:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c204:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c206:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c20a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c20e:	b003      	add	sp, #12
 800c210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c214:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c216:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <HAL_I2C_Master_Receive+0x190>)
 800c218:	4639      	mov	r1, r7
 800c21a:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c21c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c224:	f7ff fbba 	bl	800b99c <I2C_TransferConfig>
 800c228:	e787      	b.n	800c13a <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c22a:	f8cd 8000 	str.w	r8, [sp]
 800c22e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c232:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c234:	4639      	mov	r1, r7
 800c236:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c238:	b292      	uxth	r2, r2
 800c23a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c23c:	b2d2      	uxtb	r2, r2
 800c23e:	f7ff fbad 	bl	800b99c <I2C_TransferConfig>
 800c242:	e77e      	b.n	800c142 <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800c244:	2001      	movs	r0, #1
}
 800c246:	b003      	add	sp, #12
 800c248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c24c:	80002400 	.word	0x80002400
 800c250:	fe00e800 	.word	0xfe00e800

0800c254 <HAL_I2C_Mem_Read>:
{
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c25a:	3b01      	subs	r3, #1
{
 800c25c:	b083      	sub	sp, #12
 800c25e:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c260:	2b01      	cmp	r3, #1
{
 800c262:	4688      	mov	r8, r1
 800c264:	4691      	mov	r9, r2
 800c266:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c26a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c26c:	d904      	bls.n	800c278 <HAL_I2C_Mem_Read+0x24>
 800c26e:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800c272:	486e      	ldr	r0, [pc, #440]	; (800c42c <HAL_I2C_Mem_Read+0x1d8>)
 800c274:	f7f7 fffe 	bl	8004274 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c278:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800c27c:	2b20      	cmp	r3, #32
 800c27e:	d17f      	bne.n	800c380 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800c280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c282:	2b00      	cmp	r3, #0
 800c284:	d075      	beq.n	800c372 <HAL_I2C_Mem_Read+0x11e>
 800c286:	f1ba 0f00 	cmp.w	sl, #0
 800c28a:	d072      	beq.n	800c372 <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800c28c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800c290:	2b01      	cmp	r3, #1
 800c292:	d075      	beq.n	800c380 <HAL_I2C_Mem_Read+0x12c>
 800c294:	2301      	movs	r3, #1
 800c296:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c29a:	f7fb fdbf 	bl	8007e1c <HAL_GetTick>
 800c29e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2a0:	e004      	b.n	800c2ac <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2a2:	f7fb fdbb 	bl	8007e1c <HAL_GetTick>
 800c2a6:	1b80      	subs	r0, r0, r6
 800c2a8:	2819      	cmp	r0, #25
 800c2aa:	d874      	bhi.n	800c396 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800c2b4:	d1f5      	bne.n	800c2a2 <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800c2b6:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2b8:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800c2ba:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2be:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800c2c0:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2c2:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2ca:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c2ce:	2140      	movs	r1, #64	; 0x40
 800c2d0:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2d4:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2d6:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800c2da:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c2de:	f7ff fd01 	bl	800bce4 <I2C_RequestMemoryRead>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f040 8083 	bne.w	800c3ee <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2e8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	2bff      	cmp	r3, #255	; 0xff
 800c2ee:	f240 808e 	bls.w	800c40e <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c2f2:	4b4f      	ldr	r3, [pc, #316]	; (800c430 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2f4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2fa:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c302:	f7ff fb4b 	bl	800b99c <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c306:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c308:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c30c:	682a      	ldr	r2, [r5, #0]
 800c30e:	e001      	b.n	800c314 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800c310:	1c63      	adds	r3, r4, #1
 800c312:	d139      	bne.n	800c388 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c314:	6993      	ldr	r3, [r2, #24]
 800c316:	0758      	lsls	r0, r3, #29
 800c318:	d5fa      	bpl.n	800c310 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c31a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c31c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c31e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c320:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800c322:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800c324:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c326:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800c328:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c32a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c32c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c32e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c330:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c332:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c334:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c336:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c338:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c33a:	b90b      	cbnz	r3, 800c340 <HAL_I2C_Mem_Read+0xec>
 800c33c:	2a00      	cmp	r2, #0
 800c33e:	d140      	bne.n	800c3c2 <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800c340:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c342:	b29b      	uxth	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e1      	bne.n	800c30c <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c348:	4632      	mov	r2, r6
 800c34a:	4621      	mov	r1, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	f7ff fc59 	bl	800bc04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c352:	2800      	cmp	r0, #0
 800c354:	d168      	bne.n	800c428 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c35a:	4c36      	ldr	r4, [pc, #216]	; (800c434 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c35c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	4022      	ands	r2, r4
 800c362:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c364:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c368:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c36c:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800c370:	e003      	b.n	800c37a <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c372:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c376:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c378:	646b      	str	r3, [r5, #68]	; 0x44
}
 800c37a:	b003      	add	sp, #12
 800c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800c380:	2002      	movs	r0, #2
}
 800c382:	b003      	add	sp, #12
 800c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c388:	f7fb fd48 	bl	8007e1c <HAL_GetTick>
 800c38c:	1b80      	subs	r0, r0, r6
 800c38e:	4284      	cmp	r4, r0
 800c390:	d301      	bcc.n	800c396 <HAL_I2C_Mem_Read+0x142>
 800c392:	2c00      	cmp	r4, #0
 800c394:	d1ba      	bne.n	800c30c <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c396:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c398:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c39a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c39c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c39e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c3a0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3a4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3a6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3aa:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3b4:	f7fb fd32 	bl	8007e1c <HAL_GetTick>
 800c3b8:	1b80      	subs	r0, r0, r6
 800c3ba:	4284      	cmp	r4, r0
 800c3bc:	d3eb      	bcc.n	800c396 <HAL_I2C_Mem_Read+0x142>
 800c3be:	2c00      	cmp	r4, #0
 800c3c0:	d0e9      	beq.n	800c396 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3c2:	682a      	ldr	r2, [r5, #0]
 800c3c4:	e001      	b.n	800c3ca <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800c3c6:	1c61      	adds	r1, r4, #1
 800c3c8:	d1f4      	bne.n	800c3b4 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3ca:	6993      	ldr	r3, [r2, #24]
 800c3cc:	061b      	lsls	r3, r3, #24
 800c3ce:	d5fa      	bpl.n	800c3c6 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3d0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	2bff      	cmp	r3, #255	; 0xff
 800c3d6:	d90e      	bls.n	800c3f6 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3d8:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c3dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3e0:	22ff      	movs	r2, #255	; 0xff
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	9700      	str	r7, [sp, #0]
 800c3e8:	f7ff fad8 	bl	800b99c <I2C_TransferConfig>
 800c3ec:	e7a8      	b.n	800c340 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800c3ee:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c3f0:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800c3f4:	e7c1      	b.n	800c37a <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3f6:	9700      	str	r7, [sp, #0]
 800c3f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c3fc:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3fe:	4641      	mov	r1, r8
 800c400:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800c402:	b292      	uxth	r2, r2
 800c404:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c406:	b2d2      	uxtb	r2, r2
 800c408:	f7ff fac8 	bl	800b99c <I2C_TransferConfig>
 800c40c:	e798      	b.n	800c340 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800c40e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c410:	4641      	mov	r1, r8
 800c412:	4b07      	ldr	r3, [pc, #28]	; (800c430 <HAL_I2C_Mem_Read+0x1dc>)
 800c414:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800c416:	b292      	uxth	r2, r2
 800c418:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c422:	f7ff fabb 	bl	800b99c <I2C_TransferConfig>
 800c426:	e76e      	b.n	800c306 <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800c428:	2001      	movs	r0, #1
 800c42a:	e7a6      	b.n	800c37a <HAL_I2C_Mem_Read+0x126>
 800c42c:	0802c378 	.word	0x0802c378
 800c430:	80002400 	.word	0x80002400
 800c434:	fe00e800 	.word	0xfe00e800

0800c438 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c438:	4b23      	ldr	r3, [pc, #140]	; (800c4c8 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800c43a:	6802      	ldr	r2, [r0, #0]
{
 800c43c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c43e:	4d23      	ldr	r5, [pc, #140]	; (800c4cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800c440:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c442:	4e23      	ldr	r6, [pc, #140]	; (800c4d0 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800c444:	429a      	cmp	r2, r3
 800c446:	bf18      	it	ne
 800c448:	42aa      	cmpne	r2, r5
{
 800c44a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c44c:	bf14      	ite	ne
 800c44e:	2301      	movne	r3, #1
 800c450:	2300      	moveq	r3, #0
 800c452:	42b2      	cmp	r2, r6
 800c454:	bf0c      	ite	eq
 800c456:	2300      	moveq	r3, #0
 800c458:	f003 0301 	andne.w	r3, r3, #1
 800c45c:	b113      	cbz	r3, 800c464 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c45e:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800c460:	429a      	cmp	r2, r3
 800c462:	d12c      	bne.n	800c4be <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c464:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800c468:	d124      	bne.n	800c4b4 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c46a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c46e:	2b20      	cmp	r3, #32
 800c470:	b2de      	uxtb	r6, r3
 800c472:	d11d      	bne.n	800c4b0 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c474:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d019      	beq.n	800c4b0 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c47c:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c47e:	2224      	movs	r2, #36	; 0x24
 800c480:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	f022 0201 	bic.w	r2, r2, #1
 800c48a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c492:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c498:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c49a:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c49c:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	f042 0201 	orr.w	r2, r2, #1
 800c4a4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c4a6:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c4aa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c4b0:	2002      	movs	r0, #2
}
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c4b4:	215f      	movs	r1, #95	; 0x5f
 800c4b6:	4808      	ldr	r0, [pc, #32]	; (800c4d8 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c4b8:	f7f7 fedc 	bl	8004274 <assert_failed>
 800c4bc:	e7d5      	b.n	800c46a <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4be:	215e      	movs	r1, #94	; 0x5e
 800c4c0:	4805      	ldr	r0, [pc, #20]	; (800c4d8 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c4c2:	f7f7 fed7 	bl	8004274 <assert_failed>
 800c4c6:	e7cd      	b.n	800c464 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c4c8:	40005400 	.word	0x40005400
 800c4cc:	40005800 	.word	0x40005800
 800c4d0:	40005c00 	.word	0x40005c00
 800c4d4:	40006000 	.word	0x40006000
 800c4d8:	0802c3b0 	.word	0x0802c3b0

0800c4dc <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4dc:	4b22      	ldr	r3, [pc, #136]	; (800c568 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800c4de:	6802      	ldr	r2, [r0, #0]
{
 800c4e0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4e2:	4d22      	ldr	r5, [pc, #136]	; (800c56c <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800c4e4:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4e6:	4e22      	ldr	r6, [pc, #136]	; (800c570 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	bf18      	it	ne
 800c4ec:	42aa      	cmpne	r2, r5
{
 800c4ee:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c4f0:	bf14      	ite	ne
 800c4f2:	2301      	movne	r3, #1
 800c4f4:	2300      	moveq	r3, #0
 800c4f6:	42b2      	cmp	r2, r6
 800c4f8:	bf0c      	ite	eq
 800c4fa:	2300      	moveq	r3, #0
 800c4fc:	f003 0301 	andne.w	r3, r3, #1
 800c500:	b113      	cbz	r3, 800c508 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c502:	4b1c      	ldr	r3, [pc, #112]	; (800c574 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800c504:	429a      	cmp	r2, r3
 800c506:	d12a      	bne.n	800c55e <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c508:	2d0f      	cmp	r5, #15
 800c50a:	d823      	bhi.n	800c554 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c50c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c510:	2b20      	cmp	r3, #32
 800c512:	b2de      	uxtb	r6, r3
 800c514:	d11c      	bne.n	800c550 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c516:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d018      	beq.n	800c550 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c51e:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c520:	2224      	movs	r2, #36	; 0x24
 800c522:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	f022 0201 	bic.w	r2, r2, #1
 800c52c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c52e:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c530:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c534:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c538:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800c53a:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c53c:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c546:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c54a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c54e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c550:	2002      	movs	r0, #2
}
 800c552:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c554:	218d      	movs	r1, #141	; 0x8d
 800c556:	4808      	ldr	r0, [pc, #32]	; (800c578 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c558:	f7f7 fe8c 	bl	8004274 <assert_failed>
 800c55c:	e7d6      	b.n	800c50c <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c55e:	218c      	movs	r1, #140	; 0x8c
 800c560:	4805      	ldr	r0, [pc, #20]	; (800c578 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c562:	f7f7 fe87 	bl	8004274 <assert_failed>
 800c566:	e7cf      	b.n	800c508 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c568:	40005400 	.word	0x40005400
 800c56c:	40005800 	.word	0x40005800
 800c570:	40005c00 	.word	0x40005c00
 800c574:	40006000 	.word	0x40006000
 800c578:	0802c3b0 	.word	0x0802c3b0

0800c57c <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d04c      	beq.n	800c61a <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c580:	6802      	ldr	r2, [r0, #0]
{
 800c582:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c584:	4b26      	ldr	r3, [pc, #152]	; (800c620 <HAL_IWDG_Init+0xa4>)
 800c586:	4604      	mov	r4, r0
 800c588:	429a      	cmp	r2, r3
 800c58a:	d003      	beq.n	800c594 <HAL_IWDG_Init+0x18>
 800c58c:	21b5      	movs	r1, #181	; 0xb5
 800c58e:	4825      	ldr	r0, [pc, #148]	; (800c624 <HAL_IWDG_Init+0xa8>)
 800c590:	f7f7 fe70 	bl	8004274 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c594:	6863      	ldr	r3, [r4, #4]
 800c596:	2b06      	cmp	r3, #6
 800c598:	d835      	bhi.n	800c606 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c59a:	68a3      	ldr	r3, [r4, #8]
 800c59c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5a0:	d22c      	bcs.n	800c5fc <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c5a2:	68e3      	ldr	r3, [r4, #12]
 800c5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5a8:	d223      	bcs.n	800c5f2 <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c5aa:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c5ae:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c5b0:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800c5b4:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c5b6:	f245 5055 	movw	r0, #21845	; 0x5555
 800c5ba:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c5bc:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c5be:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c5c0:	f7fb fc2c 	bl	8007e1c <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c5c4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c5c6:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	0751      	lsls	r1, r2, #29
 800c5cc:	d00a      	beq.n	800c5e4 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c5ce:	f7fb fc25 	bl	8007e1c <HAL_GetTick>
 800c5d2:	1b43      	subs	r3, r0, r5
 800c5d4:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c5d6:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c5d8:	d9f6      	bls.n	800c5c8 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c5da:	68da      	ldr	r2, [r3, #12]
 800c5dc:	0752      	lsls	r2, r2, #29
 800c5de:	d0f3      	beq.n	800c5c8 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800c5e0:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c5e4:	6919      	ldr	r1, [r3, #16]
 800c5e6:	68e2      	ldr	r2, [r4, #12]
 800c5e8:	4291      	cmp	r1, r2
 800c5ea:	d011      	beq.n	800c610 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800c5ec:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c5ee:	611a      	str	r2, [r3, #16]
}
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c5f2:	21b8      	movs	r1, #184	; 0xb8
 800c5f4:	480b      	ldr	r0, [pc, #44]	; (800c624 <HAL_IWDG_Init+0xa8>)
 800c5f6:	f7f7 fe3d 	bl	8004274 <assert_failed>
 800c5fa:	e7d6      	b.n	800c5aa <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c5fc:	21b7      	movs	r1, #183	; 0xb7
 800c5fe:	4809      	ldr	r0, [pc, #36]	; (800c624 <HAL_IWDG_Init+0xa8>)
 800c600:	f7f7 fe38 	bl	8004274 <assert_failed>
 800c604:	e7cd      	b.n	800c5a2 <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c606:	21b6      	movs	r1, #182	; 0xb6
 800c608:	4806      	ldr	r0, [pc, #24]	; (800c624 <HAL_IWDG_Init+0xa8>)
 800c60a:	f7f7 fe33 	bl	8004274 <assert_failed>
 800c60e:	e7c4      	b.n	800c59a <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c610:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800c614:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c616:	601a      	str	r2, [r3, #0]
}
 800c618:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c61a:	2001      	movs	r0, #1
}
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	40003000 	.word	0x40003000
 800c624:	0802c3ec 	.word	0x0802c3ec

0800c628 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c628:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c62a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800c62e:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	601a      	str	r2, [r3, #0]
}
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop

0800c638 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c63a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f000 809d 	beq.w	800c77c <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c642:	6804      	ldr	r4, [r0, #0]
 800c644:	4605      	mov	r5, r0
 800c646:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800c64a:	d003      	beq.n	800c654 <HAL_PCD_Init+0x1c>
 800c64c:	4b4f      	ldr	r3, [pc, #316]	; (800c78c <HAL_PCD_Init+0x154>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	f040 8081 	bne.w	800c756 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c654:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800c658:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 8086 	beq.w	800c76e <HAL_PCD_Init+0x136>
 800c662:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c664:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c666:	462e      	mov	r6, r5
 800c668:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800c66a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c66e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c670:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c672:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800c676:	bf08      	it	eq
 800c678:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800c67a:	f006 fe87 	bl	801338c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c67e:	f856 eb10 	ldr.w	lr, [r6], #16
 800c682:	46b4      	mov	ip, r6
 800c684:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c68a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c68e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c690:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800c694:	e884 0003 	stmia.w	r4, {r0, r1}
 800c698:	4670      	mov	r0, lr
 800c69a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c69e:	f006 fdb5 	bl	801320c <USB_CoreInit>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	b130      	cbz	r0, 800c6b4 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800c6a6:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6a8:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800c6aa:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6ac:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800c6b0:	b00b      	add	sp, #44	; 0x2c
 800c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	6828      	ldr	r0, [r5, #0]
 800c6b8:	f006 fe70 	bl	801339c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6bc:	6868      	ldr	r0, [r5, #4]
 800c6be:	b358      	cbz	r0, 800c718 <HAL_PCD_Init+0xe0>
 800c6c0:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c6c2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c6c6:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c6c8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6cc:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800c6d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800c6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c6d8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6dc:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800c6e0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6e4:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c6e6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800c6ea:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c6ec:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6f0:	d3ea      	bcc.n	800c6c8 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6f8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800c6fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800c6fe:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c702:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800c704:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c708:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c70a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c70e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c712:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c716:	d3ed      	bcc.n	800c6f4 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c718:	466c      	mov	r4, sp
 800c71a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c71c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c71e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c722:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c726:	e884 0003 	stmia.w	r4, {r0, r1}
 800c72a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c72e:	6828      	ldr	r0, [r5, #0]
 800c730:	f006 feb8 	bl	80134a4 <USB_DevInit>
 800c734:	4604      	mov	r4, r0
 800c736:	2800      	cmp	r0, #0
 800c738:	d1b5      	bne.n	800c6a6 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800c73a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800c73c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800c73e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800c742:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800c744:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800c748:	d01c      	beq.n	800c784 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800c74a:	6828      	ldr	r0, [r5, #0]
 800c74c:	f007 fa72 	bl	8013c34 <USB_DevDisconnect>
}
 800c750:	4620      	mov	r0, r4
 800c752:	b00b      	add	sp, #44	; 0x2c
 800c754:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c756:	2187      	movs	r1, #135	; 0x87
 800c758:	480d      	ldr	r0, [pc, #52]	; (800c790 <HAL_PCD_Init+0x158>)
 800c75a:	f7f7 fd8b 	bl	8004274 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c75e:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800c762:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f47f af7a 	bne.w	800c662 <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800c76e:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800c770:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800c774:	f017 f868 	bl	8023848 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800c778:	6828      	ldr	r0, [r5, #0]
 800c77a:	e773      	b.n	800c664 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800c77c:	2401      	movs	r4, #1
}
 800c77e:	4620      	mov	r0, r4
 800c780:	b00b      	add	sp, #44	; 0x2c
 800c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c784:	4628      	mov	r0, r5
 800c786:	f000 fcc7 	bl	800d118 <HAL_PCDEx_ActivateLPM>
 800c78a:	e7de      	b.n	800c74a <HAL_PCD_Init+0x112>
 800c78c:	40040000 	.word	0x40040000
 800c790:	0802c428 	.word	0x0802c428

0800c794 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800c794:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d00f      	beq.n	800c7bc <HAL_PCD_Start+0x28>
 800c79c:	2301      	movs	r3, #1
{
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800c7a2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800c7a4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800c7a8:	f006 fde8 	bl	801337c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	f007 fa31 	bl	8013c14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c7b2:	2300      	movs	r3, #0

  return HAL_OK;
 800c7b4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c7b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c7ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c7bc:	2002      	movs	r0, #2
}
 800c7be:	4770      	bx	lr

0800c7c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7c4:	6807      	ldr	r7, [r0, #0]
{
 800c7c6:	b089      	sub	sp, #36	; 0x24
 800c7c8:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	f007 fa70 	bl	8013cb0 <USB_GetMode>
 800c7d0:	b110      	cbz	r0, 800c7d8 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800c7d2:	b009      	add	sp, #36	; 0x24
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c7d8:	4683      	mov	fp, r0
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	f007 fa3a 	bl	8013c54 <USB_ReadInterrupts>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d0f6      	beq.n	800c7d2 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	f007 fa35 	bl	8013c54 <USB_ReadInterrupts>
 800c7ea:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c7ee:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c7f0:	d003      	beq.n	800c7fa <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c7f2:	6943      	ldr	r3, [r0, #20]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c7fa:	f007 fa2b 	bl	8013c54 <USB_ReadInterrupts>
 800c7fe:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c802:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c804:	d012      	beq.n	800c82c <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c806:	6983      	ldr	r3, [r0, #24]
 800c808:	f023 0310 	bic.w	r3, r3, #16
 800c80c:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800c80e:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c810:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c814:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c818:	2b02      	cmp	r3, #2
 800c81a:	f000 8253 	beq.w	800ccc4 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c81e:	2b06      	cmp	r3, #6
 800c820:	f000 81b1 	beq.w	800cb86 <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c824:	6983      	ldr	r3, [r0, #24]
 800c826:	f043 0310 	orr.w	r3, r3, #16
 800c82a:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c82c:	f007 fa12 	bl	8013c54 <USB_ReadInterrupts>
 800c830:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c834:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c836:	f040 80cf 	bne.w	800c9d8 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c83a:	f007 fa0b 	bl	8013c54 <USB_ReadInterrupts>
 800c83e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c842:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c844:	d175      	bne.n	800c932 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c846:	f007 fa05 	bl	8013c54 <USB_ReadInterrupts>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	db5d      	blt.n	800c90a <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c84e:	6820      	ldr	r0, [r4, #0]
 800c850:	f007 fa00 	bl	8013c54 <USB_ReadInterrupts>
 800c854:	0500      	lsls	r0, r0, #20
 800c856:	d44d      	bmi.n	800c8f4 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	f007 f9fb 	bl	8013c54 <USB_ReadInterrupts>
 800c85e:	0102      	lsls	r2, r0, #4
 800c860:	d514      	bpl.n	800c88c <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c862:	6822      	ldr	r2, [r4, #0]
 800c864:	6953      	ldr	r3, [r2, #20]
 800c866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c86a:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800c86c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 8172 	bne.w	800cb5a <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800c876:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c878:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800c87a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c87e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c880:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800c884:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c888:	f017 f94c 	bl	8023b24 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	f007 f9e1 	bl	8013c54 <USB_ReadInterrupts>
 800c892:	04c3      	lsls	r3, r0, #19
 800c894:	f100 8116 	bmi.w	800cac4 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c898:	6820      	ldr	r0, [r4, #0]
 800c89a:	f007 f9db 	bl	8013c54 <USB_ReadInterrupts>
 800c89e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800c8a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c8a4:	f040 80f7 	bne.w	800ca96 <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c8a8:	f007 f9d4 	bl	8013c54 <USB_ReadInterrupts>
 800c8ac:	0707      	lsls	r7, r0, #28
 800c8ae:	f100 80e9 	bmi.w	800ca84 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c8b2:	6820      	ldr	r0, [r4, #0]
 800c8b4:	f007 f9ce 	bl	8013c54 <USB_ReadInterrupts>
 800c8b8:	02c6      	lsls	r6, r0, #11
 800c8ba:	f100 80d9 	bmi.w	800ca70 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c8be:	6820      	ldr	r0, [r4, #0]
 800c8c0:	f007 f9c8 	bl	8013c54 <USB_ReadInterrupts>
 800c8c4:	0285      	lsls	r5, r0, #10
 800c8c6:	f100 80c9 	bmi.w	800ca5c <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	f007 f9c2 	bl	8013c54 <USB_ReadInterrupts>
 800c8d0:	0040      	lsls	r0, r0, #1
 800c8d2:	f100 80ba 	bmi.w	800ca4a <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c8d6:	6820      	ldr	r0, [r4, #0]
 800c8d8:	f007 f9bc 	bl	8013c54 <USB_ReadInterrupts>
 800c8dc:	0741      	lsls	r1, r0, #29
 800c8de:	f57f af78 	bpl.w	800c7d2 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c8e6:	076a      	lsls	r2, r5, #29
 800c8e8:	f100 820d 	bmi.w	800cd06 <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	432a      	orrs	r2, r5
 800c8f0:	605a      	str	r2, [r3, #4]
 800c8f2:	e76e      	b.n	800c7d2 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c8f4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800c8f8:	07d9      	lsls	r1, r3, #31
 800c8fa:	f100 8200 	bmi.w	800ccfe <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c8fe:	6820      	ldr	r0, [r4, #0]
 800c900:	6943      	ldr	r3, [r0, #20]
 800c902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c906:	6143      	str	r3, [r0, #20]
 800c908:	e7a7      	b.n	800c85a <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c90a:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800c90e:	f022 0201 	bic.w	r2, r2, #1
 800c912:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800c916:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	f000 812c 	beq.w	800cb78 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800c920:	4620      	mov	r0, r4
 800c922:	f017 f82d 	bl	8023980 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	6943      	ldr	r3, [r0, #20]
 800c92a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c92e:	6143      	str	r3, [r0, #20]
 800c930:	e78e      	b.n	800c850 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c932:	f007 f99b 	bl	8013c6c <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800c936:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c938:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c93a:	f1b8 0f00 	cmp.w	r8, #0
 800c93e:	d082      	beq.n	800c846 <HAL_PCD_IRQHandler+0x86>
 800c940:	4626      	mov	r6, r4
 800c942:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800c946:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c94a:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800c94e:	e009      	b.n	800c964 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800c950:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800c954:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800c958:	f106 061c 	add.w	r6, r6, #28
 800c95c:	f109 0920 	add.w	r9, r9, #32
 800c960:	f000 8126 	beq.w	800cbb0 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c964:	f018 0f01 	tst.w	r8, #1
 800c968:	d0f2      	beq.n	800c950 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c96a:	fa5f f78a 	uxtb.w	r7, sl
 800c96e:	4639      	mov	r1, r7
 800c970:	f007 f98e 	bl	8013c90 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c974:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c976:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c978:	d515      	bpl.n	800c9a6 <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c97a:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c97c:	f00a 030f 	and.w	r3, sl, #15
 800c980:	2201      	movs	r2, #1
 800c982:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c984:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800c988:	ea23 0302 	bic.w	r3, r3, r2
 800c98c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c990:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800c992:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c994:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800c998:	4299      	cmp	r1, r3
 800c99a:	f000 81b9 	beq.w	800cd10 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c99e:	4639      	mov	r1, r7
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f016 ffb1 	bl	8023908 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c9a6:	0728      	lsls	r0, r5, #28
 800c9a8:	d502      	bpl.n	800c9b0 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c9b0:	06e9      	lsls	r1, r5, #27
 800c9b2:	d502      	bpl.n	800c9ba <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c9ba:	066a      	lsls	r2, r5, #25
 800c9bc:	d502      	bpl.n	800c9c4 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c9be:	2340      	movs	r3, #64	; 0x40
 800c9c0:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c9c4:	07ab      	lsls	r3, r5, #30
 800c9c6:	d502      	bpl.n	800c9ce <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c9ce:	062d      	lsls	r5, r5, #24
 800c9d0:	f100 80f1 	bmi.w	800cbb6 <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	e7bb      	b.n	800c950 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c9d8:	f007 f940 	bl	8013c5c <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800c9dc:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c9de:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	f43f af2a 	beq.w	800c83a <HAL_PCD_IRQHandler+0x7a>
 800c9e6:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800c9ea:	46a2      	mov	sl, r4
      epnum = 0U;
 800c9ec:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c9f0:	9703      	str	r7, [sp, #12]
 800c9f2:	e008      	b.n	800ca06 <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800c9f4:	086d      	lsrs	r5, r5, #1
        epnum++;
 800c9f6:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800c9fa:	f106 0620 	add.w	r6, r6, #32
 800c9fe:	f10a 0a1c 	add.w	sl, sl, #28
 800ca02:	f000 80d3 	beq.w	800cbac <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800ca06:	07ef      	lsls	r7, r5, #31
 800ca08:	d5f4      	bpl.n	800c9f4 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ca0a:	fa5f f788 	uxtb.w	r7, r8
 800ca0e:	4639      	mov	r1, r7
 800ca10:	f007 f934 	bl	8013c7c <USB_ReadDevOutEPInterrupt>
 800ca14:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ca16:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ca18:	f019 0f01 	tst.w	r9, #1
 800ca1c:	f040 8135 	bne.w	800cc8a <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ca20:	f019 0f08 	tst.w	r9, #8
 800ca24:	f040 8119 	bne.w	800cc5a <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ca28:	f019 0f10 	tst.w	r9, #16
 800ca2c:	d001      	beq.n	800ca32 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ca2e:	2310      	movs	r3, #16
 800ca30:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ca32:	f019 0f20 	tst.w	r9, #32
 800ca36:	d001      	beq.n	800ca3c <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ca38:	2320      	movs	r3, #32
 800ca3a:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ca3c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800ca40:	d0d8      	beq.n	800c9f4 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ca42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca46:	60b3      	str	r3, [r6, #8]
 800ca48:	e7d4      	b.n	800c9f4 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f016 ffa4 	bl	8023998 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca50:	6820      	ldr	r0, [r4, #0]
 800ca52:	6943      	ldr	r3, [r0, #20]
 800ca54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca58:	6143      	str	r3, [r0, #20]
 800ca5a:	e73d      	b.n	800c8d8 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f016 ff92 	bl	8023988 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ca64:	6820      	ldr	r0, [r4, #0]
 800ca66:	6943      	ldr	r3, [r0, #20]
 800ca68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca6c:	6143      	str	r3, [r0, #20]
 800ca6e:	e72d      	b.n	800c8cc <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca70:	4620      	mov	r0, r4
 800ca72:	2100      	movs	r1, #0
 800ca74:	f016 ff8c 	bl	8023990 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ca78:	6820      	ldr	r0, [r4, #0]
 800ca7a:	6943      	ldr	r3, [r0, #20]
 800ca7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca80:	6143      	str	r3, [r0, #20]
 800ca82:	e71d      	b.n	800c8c0 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800ca84:	4620      	mov	r0, r4
 800ca86:	f016 ff49 	bl	802391c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ca8a:	6820      	ldr	r0, [r4, #0]
 800ca8c:	6943      	ldr	r3, [r0, #20]
 800ca8e:	f003 0308 	and.w	r3, r3, #8
 800ca92:	6143      	str	r3, [r0, #20]
 800ca94:	e70e      	b.n	800c8b4 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800ca96:	f007 f90f 	bl	8013cb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ca9a:	6820      	ldr	r0, [r4, #0]
 800ca9c:	f006 fdc0 	bl	8013620 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800caa0:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800caa2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800caa4:	f000 ff86 	bl	800d9b4 <HAL_RCC_GetHCLKFreq>
 800caa8:	7b22      	ldrb	r2, [r4, #12]
 800caaa:	4601      	mov	r1, r0
 800caac:	4628      	mov	r0, r5
 800caae:	f006 fbeb 	bl	8013288 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800cab2:	4620      	mov	r0, r4
 800cab4:	f016 ff36 	bl	8023924 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cab8:	6820      	ldr	r0, [r4, #0]
 800caba:	6943      	ldr	r3, [r0, #20]
 800cabc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cac0:	6143      	str	r3, [r0, #20]
 800cac2:	e6f1      	b.n	800c8a8 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cac4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800cac8:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cacc:	2110      	movs	r1, #16
 800cace:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cad0:	f023 0301 	bic.w	r3, r3, #1
 800cad4:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cad6:	f006 fc97 	bl	8013408 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cada:	6860      	ldr	r0, [r4, #4]
 800cadc:	b1e0      	cbz	r0, 800cb18 <HAL_PCD_IRQHandler+0x358>
 800cade:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cae2:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800cae6:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cae8:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800caec:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caee:	3320      	adds	r3, #32
 800caf0:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800caf2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800caf6:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cafa:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cafe:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800cb02:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800cb06:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cb0a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800cb0e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cb12:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb16:	d1e6      	bne.n	800cae6 <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cb18:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cb1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cb1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800cb20:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cb22:	b9f2      	cbnz	r2, 800cb62 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cb24:	696a      	ldr	r2, [r5, #20]
 800cb26:	f242 032b 	movw	r3, #8235	; 0x202b
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cb2e:	692b      	ldr	r3, [r5, #16]
 800cb30:	f043 030b 	orr.w	r3, r3, #11
 800cb34:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cb36:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cb3a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cb3e:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cb40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cb44:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cb46:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cb4a:	f007 f8cb 	bl	8013ce4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	6943      	ldr	r3, [r0, #20]
 800cb52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb56:	6143      	str	r3, [r0, #20]
 800cb58:	e69f      	b.n	800c89a <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f016 fef8 	bl	8023950 <HAL_PCD_SuspendCallback>
 800cb60:	e694      	b.n	800c88c <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cb62:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800cb66:	f043 030b 	orr.w	r3, r3, #11
 800cb6a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cb6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cb70:	f043 030b 	orr.w	r3, r3, #11
 800cb74:	646b      	str	r3, [r5, #68]	; 0x44
 800cb76:	e7de      	b.n	800cb36 <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800cb78:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cb7a:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800cb7c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cb80:	f016 ffd0 	bl	8023b24 <HAL_PCDEx_LPM_Callback>
 800cb84:	e6cf      	b.n	800c926 <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cb86:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cb8a:	2208      	movs	r2, #8
 800cb8c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800cb90:	4638      	mov	r0, r7
 800cb92:	f006 ffa9 	bl	8013ae8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cb96:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800cb9a:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb9e:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cba0:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800cba4:	440b      	add	r3, r1
 800cba6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800cbaa:	e63b      	b.n	800c824 <HAL_PCD_IRQHandler+0x64>
 800cbac:	9f03      	ldr	r7, [sp, #12]
 800cbae:	e644      	b.n	800c83a <HAL_PCD_IRQHandler+0x7a>
 800cbb0:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800cbb4:	e647      	b.n	800c846 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800cbb6:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cbba:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800cbbe:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cbc0:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800cbc2:	f63f aec5 	bhi.w	800c950 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbc6:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800cbca:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbcc:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbd0:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800cbd4:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800cbd6:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800cbd8:	428a      	cmp	r2, r1
 800cbda:	bf28      	it	cs
 800cbdc:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbde:	9905      	ldr	r1, [sp, #20]
 800cbe0:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800cbe2:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cbe4:	b289      	uxth	r1, r1
 800cbe6:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800cbea:	f0c0 80bc 	bcc.w	800cd66 <HAL_PCD_IRQHandler+0x5a6>
 800cbee:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbf2:	46a0      	mov	r8, r4
 800cbf4:	9c05      	ldr	r4, [sp, #20]
 800cbf6:	e01a      	b.n	800cc2e <HAL_PCD_IRQHandler+0x46e>
 800cbf8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cbfa:	463a      	mov	r2, r7
 800cbfc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800cbfe:	4658      	mov	r0, fp
 800cc00:	429d      	cmp	r5, r3
 800cc02:	bf28      	it	cs
 800cc04:	461d      	movcs	r5, r3
 800cc06:	f898 3010 	ldrb.w	r3, [r8, #16]
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	b2ab      	uxth	r3, r5
 800cc0e:	f006 ff55 	bl	8013abc <USB_WritePacket>
    ep->xfer_buff  += len;
 800cc12:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc14:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800cc16:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc18:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800cc1a:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800cc1c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800cc1e:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800cc20:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc22:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800cc26:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc28:	f0c0 8096 	bcc.w	800cd58 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc2c:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800cc2e:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800cc30:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cc34:	d3e0      	bcc.n	800cbf8 <HAL_PCD_IRQHandler+0x438>
 800cc36:	4644      	mov	r4, r8
 800cc38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cc3c:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc40:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc42:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cc44:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc46:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cc4a:	f00a 030f 	and.w	r3, sl, #15
 800cc4e:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cc50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800cc52:	ea23 0302 	bic.w	r3, r3, r2
 800cc56:	634b      	str	r3, [r1, #52]	; 0x34
 800cc58:	e67a      	b.n	800c950 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cc5a:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc5c:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cc60:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc66:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cc68:	485f      	ldr	r0, [pc, #380]	; (800cde8 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc6a:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cc6c:	4282      	cmp	r2, r0
 800cc6e:	d961      	bls.n	800cd34 <HAL_PCD_IRQHandler+0x574>
 800cc70:	040a      	lsls	r2, r1, #16
 800cc72:	d502      	bpl.n	800cc7a <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cc74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cc78:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f016 fe34 	bl	80238e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cc80:	6921      	ldr	r1, [r4, #16]
 800cc82:	2901      	cmp	r1, #1
 800cc84:	d07f      	beq.n	800cd86 <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cc86:	6820      	ldr	r0, [r4, #0]
 800cc88:	e6ce      	b.n	800ca28 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cc8a:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800cc8c:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cc8e:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc90:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800cc94:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc96:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cc9a:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800cc9e:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800cca0:	d04d      	beq.n	800cd3e <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cca2:	4952      	ldr	r1, [pc, #328]	; (800cdec <HAL_PCD_IRQHandler+0x62c>)
 800cca4:	458c      	cmp	ip, r1
 800cca6:	d062      	beq.n	800cd6e <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cca8:	f1b8 0f00 	cmp.w	r8, #0
 800ccac:	d104      	bne.n	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
 800ccae:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800ccb2:	2a00      	cmp	r2, #0
 800ccb4:	f000 8092 	beq.w	800cddc <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f016 fe1a 	bl	80238f4 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ccc0:	6820      	ldr	r0, [r4, #0]
 800ccc2:	e6ad      	b.n	800ca20 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ccc4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ccc8:	421d      	tst	r5, r3
 800ccca:	f43f adab 	beq.w	800c824 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ccce:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800ccd2:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ccdc:	4615      	mov	r5, r2
 800ccde:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800cce2:	f006 ff01 	bl	8013ae8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cce6:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ccea:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ccec:	442b      	add	r3, r5
 800ccee:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ccf2:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800ccf6:	442b      	add	r3, r5
 800ccf8:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800ccfc:	e592      	b.n	800c824 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f016 fe26 	bl	8023950 <HAL_PCD_SuspendCallback>
 800cd04:	e5fb      	b.n	800c8fe <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800cd06:	4620      	mov	r0, r4
 800cd08:	f016 fe4a 	bl	80239a0 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	e5ed      	b.n	800c8ec <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cd10:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800cd14:	4413      	add	r3, r2
 800cd16:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cd18:	f1ba 0f00 	cmp.w	sl, #0
 800cd1c:	f47f ae3f 	bne.w	800c99e <HAL_PCD_IRQHandler+0x1de>
 800cd20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f47f ae3b 	bne.w	800c99e <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cd28:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	f006 ffd9 	bl	8013ce4 <USB_EP0_OutStart>
 800cd32:	e634      	b.n	800c99e <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800cd34:	4620      	mov	r0, r4
 800cd36:	f016 fdd7 	bl	80238e8 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cd3a:	6820      	ldr	r0, [r4, #0]
 800cd3c:	e674      	b.n	800ca28 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cd3e:	0719      	lsls	r1, r3, #28
 800cd40:	d51c      	bpl.n	800cd7c <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd42:	4929      	ldr	r1, [pc, #164]	; (800cde8 <HAL_PCD_IRQHandler+0x628>)
 800cd44:	458c      	cmp	ip, r1
 800cd46:	f67f ae6b 	bls.w	800ca20 <HAL_PCD_IRQHandler+0x260>
 800cd4a:	041f      	lsls	r7, r3, #16
 800cd4c:	f57f ae68 	bpl.w	800ca20 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd54:	6093      	str	r3, [r2, #8]
 800cd56:	e663      	b.n	800ca20 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd58:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800cd5a:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd5c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cd60:	f8d4 b000 	ldr.w	fp, [r4]
 800cd64:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800cd66:	42ab      	cmp	r3, r5
 800cd68:	f4ff adf2 	bcc.w	800c950 <HAL_PCD_IRQHandler+0x190>
 800cd6c:	e768      	b.n	800cc40 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cd6e:	0419      	lsls	r1, r3, #16
 800cd70:	d4ee      	bmi.n	800cd50 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cd72:	0699      	lsls	r1, r3, #26
 800cd74:	d5a0      	bpl.n	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd76:	2120      	movs	r1, #32
 800cd78:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd7a:	e79d      	b.n	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cd7c:	0699      	lsls	r1, r3, #26
 800cd7e:	d508      	bpl.n	800cd92 <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd80:	2320      	movs	r3, #32
 800cd82:	6093      	str	r3, [r2, #8]
 800cd84:	e64c      	b.n	800ca20 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cd86:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cd8a:	6820      	ldr	r0, [r4, #0]
 800cd8c:	f006 ffaa 	bl	8013ce4 <USB_EP0_OutStart>
 800cd90:	e779      	b.n	800cc86 <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cd92:	f013 0f28 	tst.w	r3, #40	; 0x28
 800cd96:	f47f ae43 	bne.w	800ca20 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd9a:	4913      	ldr	r1, [pc, #76]	; (800cde8 <HAL_PCD_IRQHandler+0x628>)
 800cd9c:	458c      	cmp	ip, r1
 800cd9e:	d901      	bls.n	800cda4 <HAL_PCD_IRQHandler+0x5e4>
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	d4d5      	bmi.n	800cd50 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cda4:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800cda6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdaa:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800cdae:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800cdb0:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800cdb4:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800cdb8:	440a      	add	r2, r1
 800cdba:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cdbe:	f1b8 0f00 	cmp.w	r8, #0
 800cdc2:	f47f af79 	bne.w	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
 800cdc6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	f47f af74 	bne.w	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cdd0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	f006 ff85 	bl	8013ce4 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cdda:	e76d      	b.n	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cddc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cde0:	4641      	mov	r1, r8
 800cde2:	f006 ff7f 	bl	8013ce4 <USB_EP0_OutStart>
 800cde6:	e767      	b.n	800ccb8 <HAL_PCD_IRQHandler+0x4f8>
 800cde8:	4f54300a 	.word	0x4f54300a
 800cdec:	4f54310a 	.word	0x4f54310a

0800cdf0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800cdf0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800cdf4:	2a01      	cmp	r2, #1
 800cdf6:	d00e      	beq.n	800ce16 <HAL_PCD_SetAddress+0x26>
 800cdf8:	2201      	movs	r2, #1
{
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cdfe:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800ce00:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800ce04:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ce08:	f006 fef2 	bl	8013bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ce0c:	2300      	movs	r3, #0
  return HAL_OK;
 800ce0e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ce10:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800ce14:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800ce16:	2002      	movs	r0, #2
}
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop

0800ce1c <HAL_PCD_EP_Open>:
{
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800ce22:	0609      	lsls	r1, r1, #24
{
 800ce24:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800ce26:	d427      	bmi.n	800ce78 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce28:	f04f 0c1c 	mov.w	ip, #28
 800ce2c:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800ce30:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800ce34:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800ce38:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800ce42:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800ce44:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce46:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800ce4a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800ce4c:	b10a      	cbz	r2, 800ce52 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800ce4e:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d101      	bne.n	800ce5a <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800ce56:	2300      	movs	r3, #0
 800ce58:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800ce5a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d018      	beq.n	800ce94 <HAL_PCD_EP_Open+0x78>
 800ce62:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ce64:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ce66:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ce6a:	f006 fbe5 	bl	8013638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ce6e:	2300      	movs	r3, #0
  return ret;
 800ce70:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ce72:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800ce76:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce78:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800ce7a:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce7e:	fb00 400e 	mla	r0, r0, lr, r4
 800ce82:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800ce86:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800ce8a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800ce8e:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800ce92:	e7d6      	b.n	800ce42 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800ce94:	2002      	movs	r0, #2
}
 800ce96:	bd10      	pop	{r4, pc}

0800ce98 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800ce98:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ce9c:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cea0:	f04f 011c 	mov.w	r1, #28
{
 800cea4:	b510      	push	{r4, lr}
 800cea6:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800cea8:	d11a      	bne.n	800cee0 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceaa:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ceae:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800ceb2:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceb4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800ceb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cebc:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cec0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800cec2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d019      	beq.n	800cefe <HAL_PCD_EP_Close+0x66>
 800ceca:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cecc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cece:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ced2:	f006 fbf9 	bl	80136c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ced6:	2300      	movs	r3, #0
  return HAL_OK;
 800ced8:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ceda:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cede:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cee0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800cee4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800cee8:	2001      	movs	r0, #1
 800ceea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ceee:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800cef0:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cef4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800cef6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d1e5      	bne.n	800ceca <HAL_PCD_EP_Close+0x32>
 800cefe:	2002      	movs	r0, #2
}
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	bf00      	nop

0800cf04 <HAL_PCD_EP_Receive>:
{
 800cf04:	b510      	push	{r4, lr}
 800cf06:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf0a:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800cf0c:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf10:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800cf14:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf18:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800cf1c:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800cf20:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800cf22:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf26:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800cf2a:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800cf2e:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800cf32:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf34:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800cf36:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800cf38:	bf08      	it	eq
 800cf3a:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf3e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cf40:	b91c      	cbnz	r4, 800cf4a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf42:	f006 fd37 	bl	80139b4 <USB_EP0StartXfer>
}
 800cf46:	2000      	movs	r0, #0
 800cf48:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf4a:	f006 fc1b 	bl	8013784 <USB_EPStartXfer>
}
 800cf4e:	2000      	movs	r0, #0
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	bf00      	nop

0800cf54 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cf54:	f001 010f 	and.w	r1, r1, #15
 800cf58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cf5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800cf60:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop

0800cf68 <HAL_PCD_EP_Transmit>:
{
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf6e:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800cf70:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf74:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800cf78:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf7c:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800cf7e:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800cf82:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800cf84:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800cf88:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800cf8c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf8e:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800cf92:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800cf96:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cf98:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800cf9a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800cf9c:	bf08      	it	eq
 800cf9e:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cfa2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfa4:	b91c      	cbnz	r4, 800cfae <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cfa6:	f006 fd05 	bl	80139b4 <USB_EP0StartXfer>
}
 800cfaa:	2000      	movs	r0, #0
 800cfac:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cfae:	f006 fbe9 	bl	8013784 <USB_EPStartXfer>
}
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	bf00      	nop

0800cfb8 <HAL_PCD_EP_SetStall>:
{
 800cfb8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cfba:	6843      	ldr	r3, [r0, #4]
 800cfbc:	f001 050f 	and.w	r5, r1, #15
 800cfc0:	429d      	cmp	r5, r3
 800cfc2:	d834      	bhi.n	800d02e <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800cfc4:	060b      	lsls	r3, r1, #24
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	d41d      	bmi.n	800d006 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800cfca:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800cfcc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800cfd0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800cfd4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cfd8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800cfda:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800cfde:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800cfe2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfe4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800cfe6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800cfe8:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d01c      	beq.n	800d02a <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cff0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cff2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cff6:	f006 fd9b 	bl	8013b30 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cffa:	b1d5      	cbz	r5, 800d032 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800cffc:	2300      	movs	r3, #0
  return HAL_OK;
 800cffe:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d000:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d004:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d006:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800d008:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800d00c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d00e:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800d012:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d016:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800d01c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d01e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d020:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d022:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d026:	429a      	cmp	r2, r3
 800d028:	d1e2      	bne.n	800cff0 <HAL_PCD_EP_SetStall+0x38>
 800d02a:	2002      	movs	r0, #2
}
 800d02c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d02e:	2001      	movs	r0, #1
}
 800d030:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d032:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d036:	7c21      	ldrb	r1, [r4, #16]
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	f006 fe53 	bl	8013ce4 <USB_EP0_OutStart>
 800d03e:	e7dd      	b.n	800cffc <HAL_PCD_EP_SetStall+0x44>

0800d040 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d040:	6842      	ldr	r2, [r0, #4]
{
 800d042:	b538      	push	{r3, r4, r5, lr}
 800d044:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d832      	bhi.n	800d0b2 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800d04c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d050:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d052:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800d056:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800d05a:	d119      	bne.n	800d090 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d05c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d060:	2000      	movs	r0, #0
 800d062:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d066:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d068:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d06c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800d070:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d072:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d074:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d018      	beq.n	800d0ae <HAL_PCD_EP_ClrStall+0x6e>
 800d07c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d07e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d080:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d084:	f006 fd88 	bl	8013b98 <USB_EPClearStall>
  return HAL_OK;
 800d088:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800d08a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d090:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d094:	2001      	movs	r0, #1
 800d096:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d09a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d09c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d09e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0a2:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d0a4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d0a6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d1e6      	bne.n	800d07c <HAL_PCD_EP_ClrStall+0x3c>
 800d0ae:	2002      	movs	r0, #2
}
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d0b2:	2001      	movs	r0, #1
}
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop

0800d0b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d0b8:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d0ba:	6804      	ldr	r4, [r0, #0]
 800d0bc:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800d0be:	b931      	cbnz	r1, 800d0ce <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d0c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d0c4:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0cc:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d0ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800d0d0:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d0d4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d0d8:	d00b      	beq.n	800d0f2 <HAL_PCDEx_SetTxFiFo+0x3a>
 800d0da:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800d0e0:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800d0e6:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0e8:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0ea:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0ec:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d0f0:	d3f4      	bcc.n	800d0dc <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d0f2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d0f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d0fa:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800d0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d102:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800d106:	2000      	movs	r0, #0
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d10c:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800d10e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6259      	str	r1, [r3, #36]	; 0x24
}
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop

0800d118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d118:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800d11a:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d11e:	4909      	ldr	r1, [pc, #36]	; (800d144 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d120:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800d122:	4660      	mov	r0, ip
{
 800d124:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800d126:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800d128:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800d12c:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d130:	6993      	ldr	r3, [r2, #24]
}
 800d132:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d13a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d13c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d13e:	4319      	orrs	r1, r3
 800d140:	6551      	str	r1, [r2, #84]	; 0x54
}
 800d142:	4770      	bx	lr
 800d144:	10000003 	.word	0x10000003

0800d148 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d148:	4a02      	ldr	r2, [pc, #8]	; (800d154 <HAL_PWR_EnableBkUpAccess+0xc>)
 800d14a:	6813      	ldr	r3, [r2, #0]
 800d14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d150:	6013      	str	r3, [r2, #0]
}
 800d152:	4770      	bx	lr
 800d154:	40007000 	.word	0x40007000

0800d158 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800d158:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <HAL_PWREx_EnableOverDrive+0x6c>)
 800d15a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d15c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800d160:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800d162:	641a      	str	r2, [r3, #64]	; 0x40
{
 800d164:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800d166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d168:	4c17      	ldr	r4, [pc, #92]	; (800d1c8 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d16a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d178:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d17a:	f7fa fe4f 	bl	8007e1c <HAL_GetTick>
 800d17e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d180:	e005      	b.n	800d18e <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d182:	f7fa fe4b 	bl	8007e1c <HAL_GetTick>
 800d186:	1b40      	subs	r0, r0, r5
 800d188:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d18c:	d817      	bhi.n	800d1be <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d18e:	6863      	ldr	r3, [r4, #4]
 800d190:	03da      	lsls	r2, r3, #15
 800d192:	d5f6      	bpl.n	800d182 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d194:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d196:	4d0c      	ldr	r5, [pc, #48]	; (800d1c8 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d19c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d19e:	f7fa fe3d 	bl	8007e1c <HAL_GetTick>
 800d1a2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d1a4:	e005      	b.n	800d1b2 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d1a6:	f7fa fe39 	bl	8007e1c <HAL_GetTick>
 800d1aa:	1b00      	subs	r0, r0, r4
 800d1ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d1b0:	d805      	bhi.n	800d1be <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d1b2:	686b      	ldr	r3, [r5, #4]
 800d1b4:	039b      	lsls	r3, r3, #14
 800d1b6:	d5f6      	bpl.n	800d1a6 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800d1b8:	2000      	movs	r0, #0
}
 800d1ba:	b003      	add	sp, #12
 800d1bc:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800d1be:	2003      	movs	r0, #3
}
 800d1c0:	b003      	add	sp, #12
 800d1c2:	bd30      	pop	{r4, r5, pc}
 800d1c4:	40023800 	.word	0x40023800
 800d1c8:	40007000 	.word	0x40007000

0800d1cc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f000 828c 	beq.w	800d6ea <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d1d2:	6803      	ldr	r3, [r0, #0]
 800d1d4:	2b0f      	cmp	r3, #15
{
 800d1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1da:	4604      	mov	r4, r0
 800d1dc:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d1de:	f200 8123 	bhi.w	800d428 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1e2:	07dd      	lsls	r5, r3, #31
 800d1e4:	d534      	bpl.n	800d250 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d1e6:	6863      	ldr	r3, [r4, #4]
 800d1e8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800d1ec:	d003      	beq.n	800d1f6 <HAL_RCC_OscConfig+0x2a>
 800d1ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d1f2:	f040 8175 	bne.w	800d4e0 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d1f6:	4aa3      	ldr	r2, [pc, #652]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d1f8:	6893      	ldr	r3, [r2, #8]
 800d1fa:	f003 030c 	and.w	r3, r3, #12
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d01d      	beq.n	800d23e <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d202:	6893      	ldr	r3, [r2, #8]
 800d204:	f003 030c 	and.w	r3, r3, #12
 800d208:	2b08      	cmp	r3, #8
 800d20a:	d015      	beq.n	800d238 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d20c:	6863      	ldr	r3, [r4, #4]
 800d20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d212:	f000 816b 	beq.w	800d4ec <HAL_RCC_OscConfig+0x320>
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 819c 	beq.w	800d554 <HAL_RCC_OscConfig+0x388>
 800d21c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d220:	4b98      	ldr	r3, [pc, #608]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	f000 822d 	beq.w	800d682 <HAL_RCC_OscConfig+0x4b6>
 800d228:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	e15e      	b.n	800d4f6 <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d238:	6853      	ldr	r3, [r2, #4]
 800d23a:	0258      	lsls	r0, r3, #9
 800d23c:	d5e6      	bpl.n	800d20c <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d23e:	4b91      	ldr	r3, [pc, #580]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	0399      	lsls	r1, r3, #14
 800d244:	d503      	bpl.n	800d24e <HAL_RCC_OscConfig+0x82>
 800d246:	6863      	ldr	r3, [r4, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80ff 	beq.w	800d44c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	079f      	lsls	r7, r3, #30
 800d252:	d531      	bpl.n	800d2b8 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d254:	68e3      	ldr	r3, [r4, #12]
 800d256:	2b01      	cmp	r3, #1
 800d258:	f200 80fc 	bhi.w	800d454 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	2b1f      	cmp	r3, #31
 800d260:	f200 8101 	bhi.w	800d466 <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d264:	4b87      	ldr	r3, [pc, #540]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	f012 0f0c 	tst.w	r2, #12
 800d26c:	f000 80e7 	beq.w	800d43e <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d270:	689a      	ldr	r2, [r3, #8]
 800d272:	f002 020c 	and.w	r2, r2, #12
 800d276:	2a08      	cmp	r2, #8
 800d278:	f000 80dd 	beq.w	800d436 <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d27c:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d27e:	4d81      	ldr	r5, [pc, #516]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 819d 	beq.w	800d5c0 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800d286:	682b      	ldr	r3, [r5, #0]
 800d288:	f043 0301 	orr.w	r3, r3, #1
 800d28c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d28e:	f7fa fdc5 	bl	8007e1c <HAL_GetTick>
 800d292:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d294:	e005      	b.n	800d2a2 <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d296:	f7fa fdc1 	bl	8007e1c <HAL_GetTick>
 800d29a:	1b80      	subs	r0, r0, r6
 800d29c:	2802      	cmp	r0, #2
 800d29e:	f200 8155 	bhi.w	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	0798      	lsls	r0, r3, #30
 800d2a6:	d5f6      	bpl.n	800d296 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	6922      	ldr	r2, [r4, #16]
 800d2ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d2b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d2b4:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	071a      	lsls	r2, r3, #28
 800d2ba:	d42a      	bmi.n	800d312 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d2bc:	075e      	lsls	r6, r3, #29
 800d2be:	d544      	bpl.n	800d34a <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d2c0:	68a3      	ldr	r3, [r4, #8]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d906      	bls.n	800d2d4 <HAL_RCC_OscConfig+0x108>
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	d004      	beq.n	800d2d4 <HAL_RCC_OscConfig+0x108>
 800d2ca:	f240 2106 	movw	r1, #518	; 0x206
 800d2ce:	486e      	ldr	r0, [pc, #440]	; (800d488 <HAL_RCC_OscConfig+0x2bc>)
 800d2d0:	f7f6 ffd0 	bl	8004274 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d2d4:	4b6b      	ldr	r3, [pc, #428]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2d8:	00d5      	lsls	r5, r2, #3
 800d2da:	f140 80ec 	bpl.w	800d4b6 <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800d2de:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2e0:	4e6a      	ldr	r6, [pc, #424]	; (800d48c <HAL_RCC_OscConfig+0x2c0>)
 800d2e2:	6833      	ldr	r3, [r6, #0]
 800d2e4:	05d8      	lsls	r0, r3, #23
 800d2e6:	f140 8121 	bpl.w	800d52c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2ea:	68a3      	ldr	r3, [r4, #8]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	f000 8179 	beq.w	800d5e4 <HAL_RCC_OscConfig+0x418>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 8144 	beq.w	800d580 <HAL_RCC_OscConfig+0x3b4>
 800d2f8:	2b05      	cmp	r3, #5
 800d2fa:	4b62      	ldr	r3, [pc, #392]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d2fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d2fe:	f000 81c8 	beq.w	800d692 <HAL_RCC_OscConfig+0x4c6>
 800d302:	f022 0201 	bic.w	r2, r2, #1
 800d306:	671a      	str	r2, [r3, #112]	; 0x70
 800d308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d30a:	f022 0204 	bic.w	r2, r2, #4
 800d30e:	671a      	str	r2, [r3, #112]	; 0x70
 800d310:	e16d      	b.n	800d5ee <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d312:	6963      	ldr	r3, [r4, #20]
 800d314:	2b01      	cmp	r3, #1
 800d316:	f200 80c4 	bhi.w	800d4a2 <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800d31a:	4d5a      	ldr	r5, [pc, #360]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 80a8 	beq.w	800d472 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800d322:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d324:	f043 0301 	orr.w	r3, r3, #1
 800d328:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d32a:	f7fa fd77 	bl	8007e1c <HAL_GetTick>
 800d32e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d330:	e005      	b.n	800d33e <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d332:	f7fa fd73 	bl	8007e1c <HAL_GetTick>
 800d336:	1b80      	subs	r0, r0, r6
 800d338:	2802      	cmp	r0, #2
 800d33a:	f200 8107 	bhi.w	800d54c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d33e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d340:	079b      	lsls	r3, r3, #30
 800d342:	d5f6      	bpl.n	800d332 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	075e      	lsls	r6, r3, #29
 800d348:	d4ba      	bmi.n	800d2c0 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d34a:	69a0      	ldr	r0, [r4, #24]
 800d34c:	2802      	cmp	r0, #2
 800d34e:	f200 80bd 	bhi.w	800d4cc <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d352:	2800      	cmp	r0, #0
 800d354:	d064      	beq.n	800d420 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d356:	4d4b      	ldr	r5, [pc, #300]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d358:	68ab      	ldr	r3, [r5, #8]
 800d35a:	f003 030c 	and.w	r3, r3, #12
 800d35e:	2b08      	cmp	r3, #8
 800d360:	f000 8158 	beq.w	800d614 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d364:	2802      	cmp	r0, #2
 800d366:	f040 81ae 	bne.w	800d6c6 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d36a:	69e3      	ldr	r3, [r4, #28]
 800d36c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800d370:	f040 81a3 	bne.w	800d6ba <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d374:	6a23      	ldr	r3, [r4, #32]
 800d376:	3b02      	subs	r3, #2
 800d378:	2b3d      	cmp	r3, #61	; 0x3d
 800d37a:	f200 8198 	bhi.w	800d6ae <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d380:	3b32      	subs	r3, #50	; 0x32
 800d382:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d386:	f200 818c 	bhi.w	800d6a2 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d38a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	f200 8172 	bhi.w	800d676 <HAL_RCC_OscConfig+0x4aa>
 800d392:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800d396:	fa22 f303 	lsr.w	r3, r2, r3
 800d39a:	07d8      	lsls	r0, r3, #31
 800d39c:	f140 816b 	bpl.w	800d676 <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d3a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3a2:	3b02      	subs	r3, #2
 800d3a4:	2b0d      	cmp	r3, #13
 800d3a6:	f200 81a8 	bhi.w	800d6fa <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d3aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d3ac:	3b02      	subs	r3, #2
 800d3ae:	2b05      	cmp	r3, #5
 800d3b0:	f200 819d 	bhi.w	800d6ee <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3b4:	4d33      	ldr	r5, [pc, #204]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3bc:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3be:	f7fa fd2d 	bl	8007e1c <HAL_GetTick>
 800d3c2:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3c4:	e005      	b.n	800d3d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3c6:	f7fa fd29 	bl	8007e1c <HAL_GetTick>
 800d3ca:	1b80      	subs	r0, r0, r6
 800d3cc:	2802      	cmp	r0, #2
 800d3ce:	f200 80bd 	bhi.w	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3d2:	682b      	ldr	r3, [r5, #0]
 800d3d4:	0199      	lsls	r1, r3, #6
 800d3d6:	d4f6      	bmi.n	800d3c6 <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3d8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800d3dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3e2:	4e28      	ldr	r6, [pc, #160]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d3e8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800d3ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d3f0:	0852      	lsrs	r2, r2, #1
 800d3f2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d3f6:	3a01      	subs	r2, #1
 800d3f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d3fe:	682b      	ldr	r3, [r5, #0]
 800d400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d404:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d406:	f7fa fd09 	bl	8007e1c <HAL_GetTick>
 800d40a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d40c:	e005      	b.n	800d41a <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d40e:	f7fa fd05 	bl	8007e1c <HAL_GetTick>
 800d412:	1b00      	subs	r0, r0, r4
 800d414:	2802      	cmp	r0, #2
 800d416:	f200 8099 	bhi.w	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d41a:	6833      	ldr	r3, [r6, #0]
 800d41c:	019a      	lsls	r2, r3, #6
 800d41e:	d5f6      	bpl.n	800d40e <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800d420:	2000      	movs	r0, #0
}
 800d422:	b002      	add	sp, #8
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d428:	f240 1163 	movw	r1, #355	; 0x163
 800d42c:	4816      	ldr	r0, [pc, #88]	; (800d488 <HAL_RCC_OscConfig+0x2bc>)
 800d42e:	f7f6 ff21 	bl	8004274 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	e6d5      	b.n	800d1e2 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	025e      	lsls	r6, r3, #9
 800d43a:	f53f af1f 	bmi.w	800d27c <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d43e:	4b11      	ldr	r3, [pc, #68]	; (800d484 <HAL_RCC_OscConfig+0x2b8>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	079d      	lsls	r5, r3, #30
 800d444:	d565      	bpl.n	800d512 <HAL_RCC_OscConfig+0x346>
 800d446:	68e3      	ldr	r3, [r4, #12]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d062      	beq.n	800d512 <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800d44c:	2001      	movs	r0, #1
}
 800d44e:	b002      	add	sp, #8
 800d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d454:	f240 119b 	movw	r1, #411	; 0x19b
 800d458:	480b      	ldr	r0, [pc, #44]	; (800d488 <HAL_RCC_OscConfig+0x2bc>)
 800d45a:	f7f6 ff0b 	bl	8004274 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d45e:	6923      	ldr	r3, [r4, #16]
 800d460:	2b1f      	cmp	r3, #31
 800d462:	f67f aeff 	bls.w	800d264 <HAL_RCC_OscConfig+0x98>
 800d466:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d46a:	4807      	ldr	r0, [pc, #28]	; (800d488 <HAL_RCC_OscConfig+0x2bc>)
 800d46c:	f7f6 ff02 	bl	8004274 <assert_failed>
 800d470:	e6f8      	b.n	800d264 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800d472:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d474:	f023 0301 	bic.w	r3, r3, #1
 800d478:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d47a:	f7fa fccf 	bl	8007e1c <HAL_GetTick>
 800d47e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d480:	e00b      	b.n	800d49a <HAL_RCC_OscConfig+0x2ce>
 800d482:	bf00      	nop
 800d484:	40023800 	.word	0x40023800
 800d488:	0802c460 	.word	0x0802c460
 800d48c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d490:	f7fa fcc4 	bl	8007e1c <HAL_GetTick>
 800d494:	1b80      	subs	r0, r0, r6
 800d496:	2802      	cmp	r0, #2
 800d498:	d858      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d49a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d49c:	079f      	lsls	r7, r3, #30
 800d49e:	d4f7      	bmi.n	800d490 <HAL_RCC_OscConfig+0x2c4>
 800d4a0:	e750      	b.n	800d344 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d4a2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800d4a6:	4898      	ldr	r0, [pc, #608]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d4a8:	f7f6 fee4 	bl	8004274 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d4ac:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d4ae:	4d97      	ldr	r5, [pc, #604]	; (800d70c <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0de      	beq.n	800d472 <HAL_RCC_OscConfig+0x2a6>
 800d4b4:	e735      	b.n	800d322 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800d4b8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d4be:	641a      	str	r2, [r3, #64]	; 0x40
 800d4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d4ca:	e709      	b.n	800d2e0 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d4cc:	488e      	ldr	r0, [pc, #568]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d4ce:	f240 214a 	movw	r1, #586	; 0x24a
 800d4d2:	f7f6 fecf 	bl	8004274 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d4d6:	69a0      	ldr	r0, [r4, #24]
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f47f af3c 	bne.w	800d356 <HAL_RCC_OscConfig+0x18a>
 800d4de:	e79f      	b.n	800d420 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d4e0:	f240 1169 	movw	r1, #361	; 0x169
 800d4e4:	4888      	ldr	r0, [pc, #544]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d4e6:	f7f6 fec5 	bl	8004274 <assert_failed>
 800d4ea:	e684      	b.n	800d1f6 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4ec:	4a87      	ldr	r2, [pc, #540]	; (800d70c <HAL_RCC_OscConfig+0x540>)
 800d4ee:	6813      	ldr	r3, [r2, #0]
 800d4f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d4f6:	f7fa fc91 	bl	8007e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4fa:	4e84      	ldr	r6, [pc, #528]	; (800d70c <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800d4fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4fe:	e004      	b.n	800d50a <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d500:	f7fa fc8c 	bl	8007e1c <HAL_GetTick>
 800d504:	1b40      	subs	r0, r0, r5
 800d506:	2864      	cmp	r0, #100	; 0x64
 800d508:	d820      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d50a:	6833      	ldr	r3, [r6, #0]
 800d50c:	039a      	lsls	r2, r3, #14
 800d50e:	d5f7      	bpl.n	800d500 <HAL_RCC_OscConfig+0x334>
 800d510:	e69d      	b.n	800d24e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d512:	4a7e      	ldr	r2, [pc, #504]	; (800d70c <HAL_RCC_OscConfig+0x540>)
 800d514:	6921      	ldr	r1, [r4, #16]
 800d516:	6813      	ldr	r3, [r2, #0]
 800d518:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d51c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d520:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	071a      	lsls	r2, r3, #28
 800d526:	f57f aec9 	bpl.w	800d2bc <HAL_RCC_OscConfig+0xf0>
 800d52a:	e6f2      	b.n	800d312 <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800d52c:	6833      	ldr	r3, [r6, #0]
 800d52e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d532:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d534:	f7fa fc72 	bl	8007e1c <HAL_GetTick>
 800d538:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d53a:	6833      	ldr	r3, [r6, #0]
 800d53c:	05d9      	lsls	r1, r3, #23
 800d53e:	f53f aed4 	bmi.w	800d2ea <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d542:	f7fa fc6b 	bl	8007e1c <HAL_GetTick>
 800d546:	1bc0      	subs	r0, r0, r7
 800d548:	2864      	cmp	r0, #100	; 0x64
 800d54a:	d9f6      	bls.n	800d53a <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800d54c:	2003      	movs	r0, #3
}
 800d54e:	b002      	add	sp, #8
 800d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d554:	4d6d      	ldr	r5, [pc, #436]	; (800d70c <HAL_RCC_OscConfig+0x540>)
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d55c:	602b      	str	r3, [r5, #0]
 800d55e:	682b      	ldr	r3, [r5, #0]
 800d560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d564:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d566:	f7fa fc59 	bl	8007e1c <HAL_GetTick>
 800d56a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d56c:	e004      	b.n	800d578 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d56e:	f7fa fc55 	bl	8007e1c <HAL_GetTick>
 800d572:	1b80      	subs	r0, r0, r6
 800d574:	2864      	cmp	r0, #100	; 0x64
 800d576:	d8e9      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	039b      	lsls	r3, r3, #14
 800d57c:	d4f7      	bmi.n	800d56e <HAL_RCC_OscConfig+0x3a2>
 800d57e:	e666      	b.n	800d24e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d580:	4e62      	ldr	r6, [pc, #392]	; (800d70c <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d582:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d586:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d588:	f023 0301 	bic.w	r3, r3, #1
 800d58c:	6733      	str	r3, [r6, #112]	; 0x70
 800d58e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d590:	f023 0304 	bic.w	r3, r3, #4
 800d594:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d596:	f7fa fc41 	bl	8007e1c <HAL_GetTick>
 800d59a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d59c:	e004      	b.n	800d5a8 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d59e:	f7fa fc3d 	bl	8007e1c <HAL_GetTick>
 800d5a2:	1bc0      	subs	r0, r0, r7
 800d5a4:	4540      	cmp	r0, r8
 800d5a6:	d8d1      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d5a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d5aa:	079b      	lsls	r3, r3, #30
 800d5ac:	d4f7      	bmi.n	800d59e <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	f43f aecb 	beq.w	800d34a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5b4:	4a55      	ldr	r2, [pc, #340]	; (800d70c <HAL_RCC_OscConfig+0x540>)
 800d5b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d5b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5bc:	6413      	str	r3, [r2, #64]	; 0x40
 800d5be:	e6c4      	b.n	800d34a <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	f023 0301 	bic.w	r3, r3, #1
 800d5c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d5c8:	f7fa fc28 	bl	8007e1c <HAL_GetTick>
 800d5cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5ce:	e004      	b.n	800d5da <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d5d0:	f7fa fc24 	bl	8007e1c <HAL_GetTick>
 800d5d4:	1b80      	subs	r0, r0, r6
 800d5d6:	2802      	cmp	r0, #2
 800d5d8:	d8b8      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	0799      	lsls	r1, r3, #30
 800d5de:	d4f7      	bmi.n	800d5d0 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	e669      	b.n	800d2b8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d5e4:	4a49      	ldr	r2, [pc, #292]	; (800d70c <HAL_RCC_OscConfig+0x540>)
 800d5e6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d5e8:	f043 0301 	orr.w	r3, r3, #1
 800d5ec:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d5ee:	f7fa fc15 	bl	8007e1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5f2:	4f46      	ldr	r7, [pc, #280]	; (800d70c <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5f4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d5f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5fa:	e004      	b.n	800d606 <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5fc:	f7fa fc0e 	bl	8007e1c <HAL_GetTick>
 800d600:	1b80      	subs	r0, r0, r6
 800d602:	4540      	cmp	r0, r8
 800d604:	d8a2      	bhi.n	800d54c <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d608:	079a      	lsls	r2, r3, #30
 800d60a:	d5f7      	bpl.n	800d5fc <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	f43f ae9c 	beq.w	800d34a <HAL_RCC_OscConfig+0x17e>
 800d612:	e7cf      	b.n	800d5b4 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d614:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800d616:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d618:	f43f af03 	beq.w	800d422 <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d61c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d620:	69e1      	ldr	r1, [r4, #28]
 800d622:	428b      	cmp	r3, r1
 800d624:	f47f af12 	bne.w	800d44c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d628:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d62c:	6a21      	ldr	r1, [r4, #32]
 800d62e:	428b      	cmp	r3, r1
 800d630:	f47f af0c 	bne.w	800d44c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d638:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d63a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d63c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800d640:	f47f af04 	bne.w	800d44c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d646:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800d64a:	085b      	lsrs	r3, r3, #1
 800d64c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d64e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800d652:	f47f aefb 	bne.w	800d44c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d656:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800d65a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d65c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800d660:	f47f aef4 	bne.w	800d44c <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d666:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d66a:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800d66e:	bf14      	ite	ne
 800d670:	2001      	movne	r0, #1
 800d672:	2000      	moveq	r0, #0
 800d674:	e6d5      	b.n	800d422 <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d676:	f240 2156 	movw	r1, #598	; 0x256
 800d67a:	4823      	ldr	r0, [pc, #140]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d67c:	f7f6 fdfa 	bl	8004274 <assert_failed>
 800d680:	e68e      	b.n	800d3a0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d682:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	e731      	b.n	800d4f6 <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d692:	f042 0204 	orr.w	r2, r2, #4
 800d696:	671a      	str	r2, [r3, #112]	; 0x70
 800d698:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d69a:	f042 0201 	orr.w	r2, r2, #1
 800d69e:	671a      	str	r2, [r3, #112]	; 0x70
 800d6a0:	e7a5      	b.n	800d5ee <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d6a2:	f240 2155 	movw	r1, #597	; 0x255
 800d6a6:	4818      	ldr	r0, [pc, #96]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d6a8:	f7f6 fde4 	bl	8004274 <assert_failed>
 800d6ac:	e66d      	b.n	800d38a <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d6ae:	f44f 7115 	mov.w	r1, #596	; 0x254
 800d6b2:	4815      	ldr	r0, [pc, #84]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d6b4:	f7f6 fdde 	bl	8004274 <assert_failed>
 800d6b8:	e661      	b.n	800d37e <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d6ba:	f240 2153 	movw	r1, #595	; 0x253
 800d6be:	4812      	ldr	r0, [pc, #72]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d6c0:	f7f6 fdd8 	bl	8004274 <assert_failed>
 800d6c4:	e656      	b.n	800d374 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800d6c6:	682b      	ldr	r3, [r5, #0]
 800d6c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d6ce:	f7fa fba5 	bl	8007e1c <HAL_GetTick>
 800d6d2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6d4:	e005      	b.n	800d6e2 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6d6:	f7fa fba1 	bl	8007e1c <HAL_GetTick>
 800d6da:	1b00      	subs	r0, r0, r4
 800d6dc:	2802      	cmp	r0, #2
 800d6de:	f63f af35 	bhi.w	800d54c <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	019b      	lsls	r3, r3, #6
 800d6e6:	d4f6      	bmi.n	800d6d6 <HAL_RCC_OscConfig+0x50a>
 800d6e8:	e69a      	b.n	800d420 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800d6ea:	2001      	movs	r0, #1
}
 800d6ec:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d6ee:	f240 2159 	movw	r1, #601	; 0x259
 800d6f2:	4805      	ldr	r0, [pc, #20]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d6f4:	f7f6 fdbe 	bl	8004274 <assert_failed>
 800d6f8:	e65c      	b.n	800d3b4 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d6fa:	f240 2157 	movw	r1, #599	; 0x257
 800d6fe:	4802      	ldr	r0, [pc, #8]	; (800d708 <HAL_RCC_OscConfig+0x53c>)
 800d700:	f7f6 fdb8 	bl	8004274 <assert_failed>
 800d704:	e651      	b.n	800d3aa <HAL_RCC_OscConfig+0x1de>
 800d706:	bf00      	nop
 800d708:	0802c460 	.word	0x0802c460
 800d70c:	40023800 	.word	0x40023800

0800d710 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d710:	4916      	ldr	r1, [pc, #88]	; (800d76c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800d712:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d714:	688b      	ldr	r3, [r1, #8]
 800d716:	f003 030c 	and.w	r3, r3, #12
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d01b      	beq.n	800d756 <HAL_RCC_GetSysClockFreq+0x46>
 800d71e:	2b08      	cmp	r3, #8
 800d720:	d117      	bne.n	800d752 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d722:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d724:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d726:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d72a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d72c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800d730:	d113      	bne.n	800d75a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d732:	480f      	ldr	r0, [pc, #60]	; (800d770 <HAL_RCC_GetSysClockFreq+0x60>)
 800d734:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d738:	fba1 0100 	umull	r0, r1, r1, r0
 800d73c:	f7f2 fe38 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d740:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <HAL_RCC_GetSysClockFreq+0x5c>)
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d748:	3301      	adds	r3, #1
 800d74a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800d74c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d750:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800d752:	4807      	ldr	r0, [pc, #28]	; (800d770 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800d754:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d756:	4807      	ldr	r0, [pc, #28]	; (800d774 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800d758:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d75a:	4806      	ldr	r0, [pc, #24]	; (800d774 <HAL_RCC_GetSysClockFreq+0x64>)
 800d75c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d760:	2300      	movs	r3, #0
 800d762:	fba1 0100 	umull	r0, r1, r1, r0
 800d766:	f7f2 fe23 	bl	80003b0 <__aeabi_uldivmod>
 800d76a:	e7e9      	b.n	800d740 <HAL_RCC_GetSysClockFreq+0x30>
 800d76c:	40023800 	.word	0x40023800
 800d770:	00f42400 	.word	0x00f42400
 800d774:	007a1200 	.word	0x007a1200

0800d778 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800d778:	2800      	cmp	r0, #0
 800d77a:	f000 80f6 	beq.w	800d96a <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d77e:	6803      	ldr	r3, [r0, #0]
 800d780:	3b01      	subs	r3, #1
 800d782:	2b0e      	cmp	r3, #14
{
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	4604      	mov	r4, r0
 800d78a:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d78c:	f200 80d6 	bhi.w	800d93c <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d790:	2d0f      	cmp	r5, #15
 800d792:	f200 80c3 	bhi.w	800d91c <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d796:	4a81      	ldr	r2, [pc, #516]	; (800d99c <HAL_RCC_ClockConfig+0x224>)
 800d798:	6813      	ldr	r3, [r2, #0]
 800d79a:	f003 030f 	and.w	r3, r3, #15
 800d79e:	42ab      	cmp	r3, r5
 800d7a0:	d36f      	bcc.n	800d882 <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	0798      	lsls	r0, r3, #30
 800d7a6:	d530      	bpl.n	800d80a <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7a8:	0759      	lsls	r1, r3, #29
 800d7aa:	d504      	bpl.n	800d7b6 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d7ac:	497c      	ldr	r1, [pc, #496]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d7ae:	688a      	ldr	r2, [r1, #8]
 800d7b0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800d7b4:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7b6:	071a      	lsls	r2, r3, #28
 800d7b8:	d504      	bpl.n	800d7c4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d7ba:	4979      	ldr	r1, [pc, #484]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d7bc:	688a      	ldr	r2, [r1, #8]
 800d7be:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800d7c2:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d7c4:	68a1      	ldr	r1, [r4, #8]
 800d7c6:	f021 0220 	bic.w	r2, r1, #32
 800d7ca:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800d7ce:	2a90      	cmp	r2, #144	; 0x90
 800d7d0:	bf18      	it	ne
 800d7d2:	2800      	cmpne	r0, #0
 800d7d4:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800d7d8:	bf14      	ite	ne
 800d7da:	2201      	movne	r2, #1
 800d7dc:	2200      	moveq	r2, #0
 800d7de:	29f0      	cmp	r1, #240	; 0xf0
 800d7e0:	bf0c      	ite	eq
 800d7e2:	2200      	moveq	r2, #0
 800d7e4:	f002 0201 	andne.w	r2, r2, #1
 800d7e8:	28a0      	cmp	r0, #160	; 0xa0
 800d7ea:	bf0c      	ite	eq
 800d7ec:	2200      	moveq	r2, #0
 800d7ee:	f002 0201 	andne.w	r2, r2, #1
 800d7f2:	b122      	cbz	r2, 800d7fe <HAL_RCC_ClockConfig+0x86>
 800d7f4:	f021 0210 	bic.w	r2, r1, #16
 800d7f8:	2ac0      	cmp	r2, #192	; 0xc0
 800d7fa:	f040 80b8 	bne.w	800d96e <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7fe:	4868      	ldr	r0, [pc, #416]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d800:	6882      	ldr	r2, [r0, #8]
 800d802:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800d806:	4311      	orrs	r1, r2
 800d808:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d80a:	07df      	lsls	r7, r3, #31
 800d80c:	d526      	bpl.n	800d85c <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d80e:	6863      	ldr	r3, [r4, #4]
 800d810:	2b02      	cmp	r3, #2
 800d812:	f200 80a1 	bhi.w	800d958 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d816:	4a62      	ldr	r2, [pc, #392]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d818:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d81a:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d81c:	f000 8098 	beq.w	800d950 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d820:	2b02      	cmp	r3, #2
 800d822:	f000 8091 	beq.w	800d948 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d826:	0791      	lsls	r1, r2, #30
 800d828:	d528      	bpl.n	800d87c <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d82a:	4e5d      	ldr	r6, [pc, #372]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d82c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d830:	68b2      	ldr	r2, [r6, #8]
 800d832:	f022 0203 	bic.w	r2, r2, #3
 800d836:	4313      	orrs	r3, r2
 800d838:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800d83a:	f7fa faef 	bl	8007e1c <HAL_GetTick>
 800d83e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d840:	e005      	b.n	800d84e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d842:	f7fa faeb 	bl	8007e1c <HAL_GetTick>
 800d846:	1bc0      	subs	r0, r0, r7
 800d848:	4540      	cmp	r0, r8
 800d84a:	f200 808c 	bhi.w	800d966 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d84e:	68b3      	ldr	r3, [r6, #8]
 800d850:	6862      	ldr	r2, [r4, #4]
 800d852:	f003 030c 	and.w	r3, r3, #12
 800d856:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d85a:	d1f2      	bne.n	800d842 <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d85c:	4a4f      	ldr	r2, [pc, #316]	; (800d99c <HAL_RCC_ClockConfig+0x224>)
 800d85e:	6813      	ldr	r3, [r2, #0]
 800d860:	f003 030f 	and.w	r3, r3, #15
 800d864:	42ab      	cmp	r3, r5
 800d866:	d91a      	bls.n	800d89e <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d868:	6813      	ldr	r3, [r2, #0]
 800d86a:	f023 030f 	bic.w	r3, r3, #15
 800d86e:	432b      	orrs	r3, r5
 800d870:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d872:	6813      	ldr	r3, [r2, #0]
 800d874:	f003 030f 	and.w	r3, r3, #15
 800d878:	42ab      	cmp	r3, r5
 800d87a:	d010      	beq.n	800d89e <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800d87c:	2001      	movs	r0, #1
}
 800d87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	f023 030f 	bic.w	r3, r3, #15
 800d888:	432b      	orrs	r3, r5
 800d88a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d88c:	6813      	ldr	r3, [r2, #0]
 800d88e:	f003 030f 	and.w	r3, r3, #15
 800d892:	42ab      	cmp	r3, r5
 800d894:	d1f2      	bne.n	800d87c <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	0798      	lsls	r0, r3, #30
 800d89a:	d485      	bmi.n	800d7a8 <HAL_RCC_ClockConfig+0x30>
 800d89c:	e7b5      	b.n	800d80a <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	075a      	lsls	r2, r3, #29
 800d8a2:	d512      	bpl.n	800d8ca <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d8a4:	68e1      	ldr	r1, [r4, #12]
 800d8a6:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800d8aa:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800d8ae:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800d8b2:	bf18      	it	ne
 800d8b4:	2a00      	cmpne	r2, #0
 800d8b6:	d002      	beq.n	800d8be <HAL_RCC_ClockConfig+0x146>
 800d8b8:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800d8bc:	d15f      	bne.n	800d97e <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d8be:	4838      	ldr	r0, [pc, #224]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d8c0:	6882      	ldr	r2, [r0, #8]
 800d8c2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800d8c6:	430a      	orrs	r2, r1
 800d8c8:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8ca:	071b      	lsls	r3, r3, #28
 800d8cc:	d513      	bpl.n	800d8f6 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d8ce:	6922      	ldr	r2, [r4, #16]
 800d8d0:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800d8d4:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800d8d8:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800d8dc:	bf18      	it	ne
 800d8de:	2b00      	cmpne	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <HAL_RCC_ClockConfig+0x170>
 800d8e2:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800d8e6:	d152      	bne.n	800d98e <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d8e8:	492d      	ldr	r1, [pc, #180]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d8ea:	688b      	ldr	r3, [r1, #8]
 800d8ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d8f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d8f4:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d8f6:	f7ff ff0b 	bl	800d710 <HAL_RCC_GetSysClockFreq>
 800d8fa:	4a29      	ldr	r2, [pc, #164]	; (800d9a0 <HAL_RCC_ClockConfig+0x228>)
 800d8fc:	4c29      	ldr	r4, [pc, #164]	; (800d9a4 <HAL_RCC_ClockConfig+0x22c>)
 800d8fe:	4603      	mov	r3, r0
 800d900:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800d902:	4829      	ldr	r0, [pc, #164]	; (800d9a8 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d904:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800d908:	4928      	ldr	r1, [pc, #160]	; (800d9ac <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800d90a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d90c:	5ca2      	ldrb	r2, [r4, r2]
 800d90e:	40d3      	lsrs	r3, r2
 800d910:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800d912:	f7f8 fd89 	bl	8006428 <HAL_InitTick>
  return HAL_OK;
 800d916:	2000      	movs	r0, #0
}
 800d918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d91c:	f240 21de 	movw	r1, #734	; 0x2de
 800d920:	4823      	ldr	r0, [pc, #140]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d922:	f7f6 fca7 	bl	8004274 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d926:	4b1d      	ldr	r3, [pc, #116]	; (800d99c <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800d928:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d92a:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d92c:	6819      	ldr	r1, [r3, #0]
 800d92e:	f021 010f 	bic.w	r1, r1, #15
 800d932:	430d      	orrs	r5, r1
 800d934:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d936:	681b      	ldr	r3, [r3, #0]
}
 800d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d93c:	f240 21dd 	movw	r1, #733	; 0x2dd
 800d940:	481b      	ldr	r0, [pc, #108]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d942:	f7f6 fc97 	bl	8004274 <assert_failed>
 800d946:	e723      	b.n	800d790 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d948:	0190      	lsls	r0, r2, #6
 800d94a:	f53f af6e 	bmi.w	800d82a <HAL_RCC_ClockConfig+0xb2>
 800d94e:	e795      	b.n	800d87c <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d950:	0396      	lsls	r6, r2, #14
 800d952:	f53f af6a 	bmi.w	800d82a <HAL_RCC_ClockConfig+0xb2>
 800d956:	e791      	b.n	800d87c <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d958:	f240 3109 	movw	r1, #777	; 0x309
 800d95c:	4814      	ldr	r0, [pc, #80]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d95e:	f7f6 fc89 	bl	8004274 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d962:	6863      	ldr	r3, [r4, #4]
 800d964:	e757      	b.n	800d816 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800d966:	2003      	movs	r0, #3
 800d968:	e789      	b.n	800d87e <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800d96a:	2001      	movs	r0, #1
}
 800d96c:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d96e:	f240 3102 	movw	r1, #770	; 0x302
 800d972:	480f      	ldr	r0, [pc, #60]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d974:	f7f6 fc7e 	bl	8004274 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d978:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	e73f      	b.n	800d7fe <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d97e:	f240 3146 	movw	r1, #838	; 0x346
 800d982:	480b      	ldr	r0, [pc, #44]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d984:	f7f6 fc76 	bl	8004274 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d988:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	e797      	b.n	800d8be <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d98e:	f240 314d 	movw	r1, #845	; 0x34d
 800d992:	4807      	ldr	r0, [pc, #28]	; (800d9b0 <HAL_RCC_ClockConfig+0x238>)
 800d994:	f7f6 fc6e 	bl	8004274 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d998:	6922      	ldr	r2, [r4, #16]
 800d99a:	e7a5      	b.n	800d8e8 <HAL_RCC_ClockConfig+0x170>
 800d99c:	40023c00 	.word	0x40023c00
 800d9a0:	40023800 	.word	0x40023800
 800d9a4:	0802b5c0 	.word	0x0802b5c0
 800d9a8:	200002e0 	.word	0x200002e0
 800d9ac:	2000027c 	.word	0x2000027c
 800d9b0:	0802c460 	.word	0x0802c460

0800d9b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800d9b4:	4b01      	ldr	r3, [pc, #4]	; (800d9bc <HAL_RCC_GetHCLKFreq+0x8>)
}
 800d9b6:	6818      	ldr	r0, [r3, #0]
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	2000027c 	.word	0x2000027c

0800d9c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d9c0:	4b04      	ldr	r3, [pc, #16]	; (800d9d4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800d9c2:	4905      	ldr	r1, [pc, #20]	; (800d9d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	4a05      	ldr	r2, [pc, #20]	; (800d9dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d9c8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d9cc:	6808      	ldr	r0, [r1, #0]
 800d9ce:	5cd3      	ldrb	r3, [r2, r3]
}
 800d9d0:	40d8      	lsrs	r0, r3
 800d9d2:	4770      	bx	lr
 800d9d4:	40023800 	.word	0x40023800
 800d9d8:	2000027c 	.word	0x2000027c
 800d9dc:	0802b5d0 	.word	0x0802b5d0

0800d9e0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d9e0:	4b04      	ldr	r3, [pc, #16]	; (800d9f4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800d9e2:	4905      	ldr	r1, [pc, #20]	; (800d9f8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	4a05      	ldr	r2, [pc, #20]	; (800d9fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d9e8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d9ec:	6808      	ldr	r0, [r1, #0]
 800d9ee:	5cd3      	ldrb	r3, [r2, r3]
}
 800d9f0:	40d8      	lsrs	r0, r3
 800d9f2:	4770      	bx	lr
 800d9f4:	40023800 	.word	0x40023800
 800d9f8:	2000027c 	.word	0x2000027c
 800d9fc:	0802b5d0 	.word	0x0802b5d0

0800da00 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800da00:	4b0e      	ldr	r3, [pc, #56]	; (800da3c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800da02:	220f      	movs	r2, #15
 800da04:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800da06:	689a      	ldr	r2, [r3, #8]
 800da08:	f002 0203 	and.w	r2, r2, #3
 800da0c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800da0e:	689a      	ldr	r2, [r3, #8]
 800da10:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800da14:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800da16:	689a      	ldr	r2, [r3, #8]
 800da18:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800da1c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	08db      	lsrs	r3, r3, #3
{
 800da22:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800da24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800da28:	4c05      	ldr	r4, [pc, #20]	; (800da40 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800da2a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800da2c:	6823      	ldr	r3, [r4, #0]
}
 800da2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	600b      	str	r3, [r1, #0]
}
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	40023800 	.word	0x40023800
 800da40:	40023c00 	.word	0x40023c00

0800da44 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800da44:	4a56      	ldr	r2, [pc, #344]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800da46:	6803      	ldr	r3, [r0, #0]
 800da48:	401a      	ands	r2, r3
{
 800da4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da4e:	4604      	mov	r4, r0
 800da50:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800da52:	2a00      	cmp	r2, #0
 800da54:	f000 833f 	beq.w	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800da58:	f013 0601 	ands.w	r6, r3, #1
 800da5c:	d00f      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800da5e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800da60:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800da64:	f040 8342 	bne.w	800e0ec <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800da68:	4a4e      	ldr	r2, [pc, #312]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800da6a:	6891      	ldr	r1, [r2, #8]
 800da6c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800da70:	6091      	str	r1, [r2, #8]
 800da72:	6891      	ldr	r1, [r2, #8]
 800da74:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800da76:	fab6 f686 	clz	r6, r6
 800da7a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800da7c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800da7e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800da82:	d014      	beq.n	800daae <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800da84:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800da86:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800da8a:	f040 838d 	bne.w	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da8e:	4945      	ldr	r1, [pc, #276]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800da90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da94:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800da98:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800da9c:	ea42 0205 	orr.w	r2, r2, r5
 800daa0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800daa4:	f000 831f 	beq.w	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800daa8:	fab5 f585 	clz	r5, r5
 800daac:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800daae:	02d9      	lsls	r1, r3, #11
 800dab0:	d514      	bpl.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800dab2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dab4:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800dab8:	f040 837d 	bne.w	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dabc:	4839      	ldr	r0, [pc, #228]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800dabe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dac2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800dac6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800daca:	ea42 0201 	orr.w	r2, r2, r1
 800dace:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800dad2:	f000 8306 	beq.w	800e0e2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800dad6:	2900      	cmp	r1, #0
 800dad8:	bf08      	it	eq
 800dada:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800dadc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800dae0:	bf18      	it	ne
 800dae2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dae4:	069a      	lsls	r2, r3, #26
 800dae6:	f140 8099 	bpl.w	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800daea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800daec:	482e      	ldr	r0, [pc, #184]	; (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800daee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800daf2:	bf18      	it	ne
 800daf4:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800daf8:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800dafc:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800db00:	bf14      	ite	ne
 800db02:	2301      	movne	r3, #1
 800db04:	2300      	moveq	r3, #0
 800db06:	4287      	cmp	r7, r0
 800db08:	bf0c      	ite	eq
 800db0a:	2300      	moveq	r3, #0
 800db0c:	f003 0301 	andne.w	r3, r3, #1
 800db10:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800db14:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800db18:	4287      	cmp	r7, r0
 800db1a:	bf0c      	ite	eq
 800db1c:	2300      	moveq	r3, #0
 800db1e:	f003 0301 	andne.w	r3, r3, #1
 800db22:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800db26:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800db2a:	4281      	cmp	r1, r0
 800db2c:	bf0c      	ite	eq
 800db2e:	2300      	moveq	r3, #0
 800db30:	f003 0301 	andne.w	r3, r3, #1
 800db34:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800db38:	4287      	cmp	r7, r0
 800db3a:	bf0c      	ite	eq
 800db3c:	2300      	moveq	r3, #0
 800db3e:	f003 0301 	andne.w	r3, r3, #1
 800db42:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800db46:	4281      	cmp	r1, r0
 800db48:	bf0c      	ite	eq
 800db4a:	2300      	moveq	r3, #0
 800db4c:	f003 0301 	andne.w	r3, r3, #1
 800db50:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800db54:	4281      	cmp	r1, r0
 800db56:	bf0c      	ite	eq
 800db58:	2300      	moveq	r3, #0
 800db5a:	f003 0301 	andne.w	r3, r3, #1
 800db5e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800db62:	4281      	cmp	r1, r0
 800db64:	bf0c      	ite	eq
 800db66:	2300      	moveq	r3, #0
 800db68:	f003 0301 	andne.w	r3, r3, #1
 800db6c:	b12b      	cbz	r3, 800db7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800db6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800db72:	4b0e      	ldr	r3, [pc, #56]	; (800dbac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800db74:	429a      	cmp	r2, r3
 800db76:	f040 8438 	bne.w	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800db7a:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800db7c:	4f0c      	ldr	r7, [pc, #48]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800db7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800db84:	641a      	str	r2, [r3, #64]	; 0x40
 800db86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db96:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db98:	f7fa f940 	bl	8007e1c <HAL_GetTick>
 800db9c:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800db9e:	e010      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800dba0:	1dfffff9 	.word	0x1dfffff9
 800dba4:	40023800 	.word	0x40023800
 800dba8:	00020300 	.word	0x00020300
 800dbac:	001c0300 	.word	0x001c0300
 800dbb0:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbb4:	f7fa f932 	bl	8007e1c <HAL_GetTick>
 800dbb8:	eba0 0008 	sub.w	r0, r0, r8
 800dbbc:	2864      	cmp	r0, #100	; 0x64
 800dbbe:	f200 8286 	bhi.w	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	05db      	lsls	r3, r3, #23
 800dbc6:	d5f5      	bpl.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dbc8:	4fb0      	ldr	r7, [pc, #704]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dbca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dbcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dbce:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800dbd2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800dbd6:	d011      	beq.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800dbd8:	4291      	cmp	r1, r2
 800dbda:	d00f      	beq.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dbdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dbde:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dbe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800dbe4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800dbe8:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dbea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800dbec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800dbf0:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800dbf2:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800dbf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dbf6:	07d0      	lsls	r0, r2, #31
 800dbf8:	f100 836c 	bmi.w	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dbfc:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800dc00:	f000 82c9 	beq.w	800e196 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800dc04:	49a1      	ldr	r1, [pc, #644]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc06:	688a      	ldr	r2, [r1, #8]
 800dc08:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800dc0c:	608a      	str	r2, [r1, #8]
 800dc0e:	4a9f      	ldr	r2, [pc, #636]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc14:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800dc16:	430b      	orrs	r3, r1
 800dc18:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	06da      	lsls	r2, r3, #27
 800dc1e:	d510      	bpl.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800dc20:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800dc22:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800dc26:	f040 82db 	bne.w	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dc2a:	4a98      	ldr	r2, [pc, #608]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc2c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800dc30:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800dc34:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800dc38:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800dc3c:	4339      	orrs	r1, r7
 800dc3e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc42:	045f      	lsls	r7, r3, #17
 800dc44:	d50f      	bpl.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dc46:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800dc48:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800dc4c:	d003      	beq.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800dc4e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800dc52:	f040 8299 	bne.w	800e188 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dc56:	488d      	ldr	r0, [pc, #564]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800dc60:	430a      	orrs	r2, r1
 800dc62:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dc66:	0418      	lsls	r0, r3, #16
 800dc68:	d50f      	bpl.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800dc6a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800dc6c:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800dc70:	d003      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x236>
 800dc72:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800dc76:	f040 826a 	bne.w	800e14e <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dc7a:	4884      	ldr	r0, [pc, #528]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc80:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800dc84:	430a      	orrs	r2, r1
 800dc86:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dc8a:	03d9      	lsls	r1, r3, #15
 800dc8c:	d50f      	bpl.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800dc8e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800dc90:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800dc94:	d003      	beq.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800dc96:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800dc9a:	f040 8260 	bne.w	800e15e <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dc9e:	487b      	ldr	r0, [pc, #492]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dca0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dca4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dcae:	039a      	lsls	r2, r3, #14
 800dcb0:	d50f      	bpl.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800dcb2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800dcb4:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800dcb8:	d003      	beq.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800dcba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800dcbe:	f040 825b 	bne.w	800e178 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dcc2:	4872      	ldr	r0, [pc, #456]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dcc4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dcc8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800dccc:	430a      	orrs	r2, r1
 800dcce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dcd2:	065f      	lsls	r7, r3, #25
 800dcd4:	d50b      	bpl.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800dcd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dcd8:	2903      	cmp	r1, #3
 800dcda:	f200 82b3 	bhi.w	800e244 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dcde:	486b      	ldr	r0, [pc, #428]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dce0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dce4:	f022 0203 	bic.w	r2, r2, #3
 800dce8:	430a      	orrs	r2, r1
 800dcea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dcee:	0618      	lsls	r0, r3, #24
 800dcf0:	d50c      	bpl.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800dcf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dcf4:	f031 020c 	bics.w	r2, r1, #12
 800dcf8:	f040 82b4 	bne.w	800e264 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dcfc:	4863      	ldr	r0, [pc, #396]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dcfe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd02:	f022 020c 	bic.w	r2, r2, #12
 800dd06:	430a      	orrs	r2, r1
 800dd08:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd0c:	05d9      	lsls	r1, r3, #23
 800dd0e:	d50c      	bpl.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800dd10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dd12:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800dd16:	f040 82ad 	bne.w	800e274 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd1a:	485c      	ldr	r0, [pc, #368]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dd1c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800dd24:	430a      	orrs	r2, r1
 800dd26:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd2a:	059a      	lsls	r2, r3, #22
 800dd2c:	d50c      	bpl.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800dd2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800dd30:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800dd34:	f040 82a6 	bne.w	800e284 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dd38:	4854      	ldr	r0, [pc, #336]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dd3a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800dd42:	430a      	orrs	r2, r1
 800dd44:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dd48:	055f      	lsls	r7, r3, #21
 800dd4a:	d50c      	bpl.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800dd4c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800dd4e:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800dd52:	f040 829f 	bne.w	800e294 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dd56:	484d      	ldr	r0, [pc, #308]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dd58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800dd60:	430a      	orrs	r2, r1
 800dd62:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dd66:	0518      	lsls	r0, r3, #20
 800dd68:	d50c      	bpl.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800dd6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dd6c:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800dd70:	f040 8298 	bne.w	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800dd74:	4845      	ldr	r0, [pc, #276]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dd76:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800dd84:	04d9      	lsls	r1, r3, #19
 800dd86:	d50c      	bpl.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800dd88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dd8a:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800dd8e:	f040 8291 	bne.w	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800dd92:	483e      	ldr	r0, [pc, #248]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dd94:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dd98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dd9c:	430a      	orrs	r2, r1
 800dd9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800dda2:	049a      	lsls	r2, r3, #18
 800dda4:	d50c      	bpl.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800dda6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800dda8:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800ddac:	f040 828a 	bne.w	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ddb0:	4836      	ldr	r0, [pc, #216]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ddb2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ddb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ddc0:	025f      	lsls	r7, r3, #9
 800ddc2:	d50c      	bpl.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800ddc4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ddc6:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800ddca:	f040 8222 	bne.w	800e212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ddce:	482f      	ldr	r0, [pc, #188]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ddd0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800ddd4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ddde:	0298      	lsls	r0, r3, #10
 800dde0:	d510      	bpl.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800dde2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800dde4:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800dde8:	f040 821b 	bne.w	800e222 <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ddec:	4827      	ldr	r0, [pc, #156]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800ddee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ddf2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800ddf6:	bf08      	it	eq
 800ddf8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ddfa:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800ddfe:	430a      	orrs	r2, r1
 800de00:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800de04:	f013 0f08 	tst.w	r3, #8
 800de08:	bf18      	it	ne
 800de0a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800de0c:	0359      	lsls	r1, r3, #13
 800de0e:	d50c      	bpl.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800de10:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800de12:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800de16:	f040 821d 	bne.w	800e254 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800de1a:	481c      	ldr	r0, [pc, #112]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800de1c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800de20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800de24:	430a      	orrs	r2, r1
 800de26:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800de2a:	021a      	lsls	r2, r3, #8
 800de2c:	d50d      	bpl.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800de2e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800de32:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800de36:	f040 81fc 	bne.w	800e232 <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800de3a:	4814      	ldr	r0, [pc, #80]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800de3c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800de40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800de44:	430a      	orrs	r2, r1
 800de46:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800de4a:	015f      	lsls	r7, r3, #5
 800de4c:	d50d      	bpl.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800de4e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800de52:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800de56:	f040 81ca 	bne.w	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800de5a:	480c      	ldr	r0, [pc, #48]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800de5c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800de60:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800de64:	430a      	orrs	r2, r1
 800de66:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800de6a:	0118      	lsls	r0, r3, #4
 800de6c:	d510      	bpl.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800de6e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800de72:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800de76:	f040 81c3 	bne.w	800e200 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800de7a:	4804      	ldr	r0, [pc, #16]	; (800de8c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800de7c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800de80:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800de84:	430a      	orrs	r2, r1
 800de86:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800de8a:	e001      	b.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800de8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800de90:	00d9      	lsls	r1, r3, #3
 800de92:	d50d      	bpl.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800de94:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800de98:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800de9c:	f040 8198 	bne.w	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dea0:	49b3      	ldr	r1, [pc, #716]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dea2:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800dea6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800deaa:	4313      	orrs	r3, r2
 800deac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800deb0:	2e01      	cmp	r6, #1
 800deb2:	d003      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	019a      	lsls	r2, r3, #6
 800deb8:	f140 8083 	bpl.w	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800debc:	4eac      	ldr	r6, [pc, #688]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800debe:	6833      	ldr	r3, [r6, #0]
 800dec0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dec4:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dec6:	f7f9 ffa9 	bl	8007e1c <HAL_GetTick>
 800deca:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800decc:	e005      	b.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dece:	f7f9 ffa5 	bl	8007e1c <HAL_GetTick>
 800ded2:	1bc0      	subs	r0, r0, r7
 800ded4:	2864      	cmp	r0, #100	; 0x64
 800ded6:	f200 80fa 	bhi.w	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800deda:	6833      	ldr	r3, [r6, #0]
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	d4f6      	bmi.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800dee0:	6863      	ldr	r3, [r4, #4]
 800dee2:	3b32      	subs	r3, #50	; 0x32
 800dee4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800dee8:	f200 816c 	bhi.w	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	07df      	lsls	r7, r3, #31
 800def0:	d517      	bpl.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800def2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800def4:	b9aa      	cbnz	r2, 800df22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800def6:	68a7      	ldr	r7, [r4, #8]
 800def8:	1eba      	subs	r2, r7, #2
 800defa:	2a05      	cmp	r2, #5
 800defc:	f200 820c 	bhi.w	800e318 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800df00:	499b      	ldr	r1, [pc, #620]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800df02:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800df04:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800df08:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800df0c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800df10:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800df14:	4332      	orrs	r2, r6
 800df16:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800df1a:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800df1e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800df22:	031e      	lsls	r6, r3, #12
 800df24:	f100 80e9 	bmi.w	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800df28:	02d8      	lsls	r0, r3, #11
 800df2a:	d504      	bpl.n	800df36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800df2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800df2e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800df32:	f000 80e7 	beq.w	800e104 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df36:	01d9      	lsls	r1, r3, #7
 800df38:	d514      	bpl.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800df3a:	6927      	ldr	r7, [r4, #16]
 800df3c:	2f03      	cmp	r7, #3
 800df3e:	f200 81f9 	bhi.w	800e334 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800df42:	498b      	ldr	r1, [pc, #556]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800df44:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800df46:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800df4a:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800df4e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800df52:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800df56:	4332      	orrs	r2, r6
 800df58:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800df5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800df60:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800df64:	019a      	lsls	r2, r3, #6
 800df66:	d51a      	bpl.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	f200 81dc 	bhi.w	800e328 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	3b02      	subs	r3, #2
 800df74:	2b05      	cmp	r3, #5
 800df76:	f200 81ec 	bhi.w	800e352 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800df7a:	68e2      	ldr	r2, [r4, #12]
 800df7c:	1e93      	subs	r3, r2, #2
 800df7e:	2b0d      	cmp	r3, #13
 800df80:	f200 81e0 	bhi.w	800e344 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800df84:	6923      	ldr	r3, [r4, #16]
 800df86:	6861      	ldr	r1, [r4, #4]
 800df88:	041b      	lsls	r3, r3, #16
 800df8a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800df8e:	68a1      	ldr	r1, [r4, #8]
 800df90:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800df94:	4976      	ldr	r1, [pc, #472]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800df96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800df9e:	4e74      	ldr	r6, [pc, #464]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dfa0:	6833      	ldr	r3, [r6, #0]
 800dfa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dfa6:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfa8:	f7f9 ff38 	bl	8007e1c <HAL_GetTick>
 800dfac:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dfae:	e005      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dfb0:	f7f9 ff34 	bl	8007e1c <HAL_GetTick>
 800dfb4:	1bc0      	subs	r0, r0, r7
 800dfb6:	2864      	cmp	r0, #100	; 0x64
 800dfb8:	f200 8089 	bhi.w	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dfbc:	6833      	ldr	r3, [r6, #0]
 800dfbe:	011b      	lsls	r3, r3, #4
 800dfc0:	d5f6      	bpl.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dfc2:	2d01      	cmp	r5, #1
 800dfc4:	d003      	beq.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800dfc6:	2000      	movs	r0, #0
}
 800dfc8:	b003      	add	sp, #12
 800dfca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800dfce:	4d68      	ldr	r5, [pc, #416]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dfd0:	682b      	ldr	r3, [r5, #0]
 800dfd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfd6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800dfd8:	f7f9 ff20 	bl	8007e1c <HAL_GetTick>
 800dfdc:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfde:	e004      	b.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dfe0:	f7f9 ff1c 	bl	8007e1c <HAL_GetTick>
 800dfe4:	1b80      	subs	r0, r0, r6
 800dfe6:	2864      	cmp	r0, #100	; 0x64
 800dfe8:	d871      	bhi.n	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	009f      	lsls	r7, r3, #2
 800dfee:	d4f7      	bmi.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800dff0:	6963      	ldr	r3, [r4, #20]
 800dff2:	3b32      	subs	r3, #50	; 0x32
 800dff4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800dff8:	f200 81b9 	bhi.w	800e36e <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	031d      	lsls	r5, r3, #12
 800e000:	f140 81ad 	bpl.w	800e35e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800e004:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e006:	2a00      	cmp	r2, #0
 800e008:	f040 81a9 	bne.w	800e35e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e00c:	69a3      	ldr	r3, [r4, #24]
 800e00e:	3b02      	subs	r3, #2
 800e010:	2b0d      	cmp	r3, #13
 800e012:	f200 81d5 	bhi.w	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e018:	1e59      	subs	r1, r3, #1
 800e01a:	291f      	cmp	r1, #31
 800e01c:	f200 81c8 	bhi.w	800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e020:	4a53      	ldr	r2, [pc, #332]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e022:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e026:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e02a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e02e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e032:	4303      	orrs	r3, r0
 800e034:	6960      	ldr	r0, [r4, #20]
 800e036:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e03a:	69a0      	ldr	r0, [r4, #24]
 800e03c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e044:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e048:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e04c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e050:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	0299      	lsls	r1, r3, #10
 800e058:	d504      	bpl.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800e05a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e05c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800e060:	f000 818b 	beq.w	800e37a <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e064:	071a      	lsls	r2, r3, #28
 800e066:	d522      	bpl.n	800e0ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e068:	69e3      	ldr	r3, [r4, #28]
 800e06a:	3b02      	subs	r3, #2
 800e06c:	2b05      	cmp	r3, #5
 800e06e:	f200 8199 	bhi.w	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e072:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e074:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800e078:	f040 81a8 	bne.w	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e07c:	4a3c      	ldr	r2, [pc, #240]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e07e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e080:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e084:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e088:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800e08c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e090:	430b      	orrs	r3, r1
 800e092:	69e1      	ldr	r1, [r4, #28]
 800e094:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800e098:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e09c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e0a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e0a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e0a8:	4303      	orrs	r3, r0
 800e0aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800e0ae:	4c30      	ldr	r4, [pc, #192]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0b6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800e0b8:	f7f9 feb0 	bl	8007e1c <HAL_GetTick>
 800e0bc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	d480      	bmi.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e0c4:	f7f9 feaa 	bl	8007e1c <HAL_GetTick>
 800e0c8:	1b40      	subs	r0, r0, r5
 800e0ca:	2864      	cmp	r0, #100	; 0x64
 800e0cc:	d9f7      	bls.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800e0ce:	2003      	movs	r0, #3
}
 800e0d0:	b003      	add	sp, #12
 800e0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800e0d6:	2172      	movs	r1, #114	; 0x72
 800e0d8:	4826      	ldr	r0, [pc, #152]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e0da:	f7f6 f8cb 	bl	8004274 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	e4ba      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800e0e2:	2601      	movs	r6, #1
 800e0e4:	e4fa      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800e0e6:	2500      	movs	r5, #0
      plli2sused = 1;
 800e0e8:	2601      	movs	r6, #1
 800e0ea:	e4e0      	b.n	800daae <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800e0ec:	2178      	movs	r1, #120	; 0x78
 800e0ee:	4821      	ldr	r0, [pc, #132]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e0f0:	f7f6 f8c0 	bl	8004274 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e0f4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	e4b6      	b.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e0fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e0fc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e100:	f47f af12 	bne.w	800df28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e104:	68e3      	ldr	r3, [r4, #12]
 800e106:	3b02      	subs	r3, #2
 800e108:	2b0d      	cmp	r3, #13
 800e10a:	f200 80f7 	bhi.w	800e2fc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e10e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e110:	1e59      	subs	r1, r3, #1
 800e112:	291f      	cmp	r1, #31
 800e114:	f200 80f8 	bhi.w	800e308 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e118:	4a15      	ldr	r2, [pc, #84]	; (800e170 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e11a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e11e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e126:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e12a:	4303      	orrs	r3, r0
 800e12c:	6860      	ldr	r0, [r4, #4]
 800e12e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e132:	68e0      	ldr	r0, [r4, #12]
 800e134:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e138:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e13c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e140:	f023 031f 	bic.w	r3, r3, #31
 800e144:	430b      	orrs	r3, r1
 800e146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	e6f3      	b.n	800df36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800e14e:	f240 1105 	movw	r1, #261	; 0x105
 800e152:	4808      	ldr	r0, [pc, #32]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e154:	f7f6 f88e 	bl	8004274 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e158:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	e58d      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800e15e:	f240 110f 	movw	r1, #271	; 0x10f
 800e162:	4804      	ldr	r0, [pc, #16]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e164:	f7f6 f886 	bl	8004274 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e168:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	e597      	b.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e16e:	bf00      	nop
 800e170:	40023800 	.word	0x40023800
 800e174:	0802c498 	.word	0x0802c498
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800e178:	f240 1119 	movw	r1, #281	; 0x119
 800e17c:	489e      	ldr	r0, [pc, #632]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e17e:	f7f6 f879 	bl	8004274 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e182:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e184:	6823      	ldr	r3, [r4, #0]
 800e186:	e59c      	b.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800e188:	21fb      	movs	r1, #251	; 0xfb
 800e18a:	489b      	ldr	r0, [pc, #620]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e18c:	f7f6 f872 	bl	8004274 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e190:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	e55f      	b.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e196:	4899      	ldr	r0, [pc, #612]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e198:	4999      	ldr	r1, [pc, #612]	; (800e400 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800e19a:	6882      	ldr	r2, [r0, #8]
 800e19c:	4019      	ands	r1, r3
 800e19e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800e1a2:	430a      	orrs	r2, r1
 800e1a4:	6082      	str	r2, [r0, #8]
 800e1a6:	e532      	b.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800e1a8:	2188      	movs	r1, #136	; 0x88
 800e1aa:	4893      	ldr	r0, [pc, #588]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1ac:	f7f6 f862 	bl	8004274 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e1b0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	e46b      	b.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800e1b6:	219c      	movs	r1, #156	; 0x9c
 800e1b8:	488f      	ldr	r0, [pc, #572]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1ba:	f7f6 f85b 	bl	8004274 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e1be:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e1c0:	6823      	ldr	r3, [r4, #0]
 800e1c2:	e47b      	b.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e1c4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800e1c8:	488b      	ldr	r0, [pc, #556]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1ca:	f7f6 f853 	bl	8004274 <assert_failed>
 800e1ce:	e68d      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e1d0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800e1d4:	4888      	ldr	r0, [pc, #544]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1d6:	f7f6 f84d 	bl	8004274 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e1da:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e1de:	e65f      	b.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800e1e0:	21f1      	movs	r1, #241	; 0xf1
 800e1e2:	4885      	ldr	r0, [pc, #532]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1e4:	f7f6 f846 	bl	8004274 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e1e8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	e51d      	b.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e1ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e1f2:	4881      	ldr	r0, [pc, #516]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1f4:	f7f6 f83e 	bl	8004274 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e1f8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	e62c      	b.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e200:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e204:	487c      	ldr	r0, [pc, #496]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e206:	f7f6 f835 	bl	8004274 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e20a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	e633      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e212:	f240 1173 	movw	r1, #371	; 0x173
 800e216:	4878      	ldr	r0, [pc, #480]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e218:	f7f6 f82c 	bl	8004274 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e21c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	e5d5      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e222:	f240 117d 	movw	r1, #381	; 0x17d
 800e226:	4874      	ldr	r0, [pc, #464]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e228:	f7f6 f824 	bl	8004274 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e22c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	e5dc      	b.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e232:	f240 119f 	movw	r1, #415	; 0x19f
 800e236:	4870      	ldr	r0, [pc, #448]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e238:	f7f6 f81c 	bl	8004274 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e23c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	e5fa      	b.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e244:	f240 1123 	movw	r1, #291	; 0x123
 800e248:	486b      	ldr	r0, [pc, #428]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e24a:	f7f6 f813 	bl	8004274 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e24e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	e544      	b.n	800dcde <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e254:	f240 1195 	movw	r1, #405	; 0x195
 800e258:	4867      	ldr	r0, [pc, #412]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e25a:	f7f6 f80b 	bl	8004274 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e25e:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	e5da      	b.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e264:	f240 112d 	movw	r1, #301	; 0x12d
 800e268:	4863      	ldr	r0, [pc, #396]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e26a:	f7f6 f803 	bl	8004274 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e26e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	e543      	b.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e274:	f240 1137 	movw	r1, #311	; 0x137
 800e278:	485f      	ldr	r0, [pc, #380]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e27a:	f7f5 fffb 	bl	8004274 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e27e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	e54a      	b.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e284:	f240 1141 	movw	r1, #321	; 0x141
 800e288:	485b      	ldr	r0, [pc, #364]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e28a:	f7f5 fff3 	bl	8004274 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e28e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	e551      	b.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e294:	f240 114b 	movw	r1, #331	; 0x14b
 800e298:	4857      	ldr	r0, [pc, #348]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e29a:	f7f5 ffeb 	bl	8004274 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e29e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	e558      	b.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e2a4:	f240 1155 	movw	r1, #341	; 0x155
 800e2a8:	4853      	ldr	r0, [pc, #332]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e2aa:	f7f5 ffe3 	bl	8004274 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e2ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	e55f      	b.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e2b4:	f240 115f 	movw	r1, #351	; 0x15f
 800e2b8:	484f      	ldr	r0, [pc, #316]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e2ba:	f7f5 ffdb 	bl	8004274 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e2be:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	e566      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e2c4:	f240 1169 	movw	r1, #361	; 0x169
 800e2c8:	484b      	ldr	r0, [pc, #300]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e2ca:	f7f5 ffd3 	bl	8004274 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e2ce:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	e56d      	b.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800e2d4:	f7f9 fda2 	bl	8007e1c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2d8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e2dc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2de:	e006      	b.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2e0:	f7f9 fd9c 	bl	8007e1c <HAL_GetTick>
 800e2e4:	eba0 0008 	sub.w	r0, r0, r8
 800e2e8:	4548      	cmp	r0, r9
 800e2ea:	f63f aef0 	bhi.w	800e0ce <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2f0:	0799      	lsls	r1, r3, #30
 800e2f2:	d5f5      	bpl.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2f6:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800e2fa:	e47f      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e2fc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800e300:	483d      	ldr	r0, [pc, #244]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e302:	f7f5 ffb7 	bl	8004274 <assert_failed>
 800e306:	e702      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e308:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800e30c:	483a      	ldr	r0, [pc, #232]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e30e:	f7f5 ffb1 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e314:	1e59      	subs	r1, r3, #1
 800e316:	e6ff      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e318:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e31c:	4836      	ldr	r0, [pc, #216]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e31e:	f7f5 ffa9 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e322:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	e5eb      	b.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e328:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e32c:	4832      	ldr	r0, [pc, #200]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e32e:	f7f5 ffa1 	bl	8004274 <assert_failed>
 800e332:	e61d      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e334:	f240 2105 	movw	r1, #517	; 0x205
 800e338:	482f      	ldr	r0, [pc, #188]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e33a:	f7f5 ff9b 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e33e:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	e5fe      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e344:	f240 2116 	movw	r1, #534	; 0x216
 800e348:	482b      	ldr	r0, [pc, #172]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e34a:	f7f5 ff93 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e34e:	68e2      	ldr	r2, [r4, #12]
 800e350:	e618      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e352:	f240 2115 	movw	r1, #533	; 0x215
 800e356:	4828      	ldr	r0, [pc, #160]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e358:	f7f5 ff8c 	bl	8004274 <assert_failed>
 800e35c:	e60d      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e35e:	02d8      	lsls	r0, r3, #11
 800e360:	f57f ae79 	bpl.w	800e056 <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e364:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e366:	2a00      	cmp	r2, #0
 800e368:	f47f ae75 	bne.w	800e056 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e36c:	e64e      	b.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e36e:	f44f 7111 	mov.w	r1, #580	; 0x244
 800e372:	4821      	ldr	r0, [pc, #132]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e374:	f7f5 ff7e 	bl	8004274 <assert_failed>
 800e378:	e640      	b.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e37a:	6a20      	ldr	r0, [r4, #32]
 800e37c:	2803      	cmp	r0, #3
 800e37e:	d82c      	bhi.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e380:	491e      	ldr	r1, [pc, #120]	; (800e3fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e382:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e386:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e38a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e38e:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800e392:	432a      	orrs	r2, r5
 800e394:	6965      	ldr	r5, [r4, #20]
 800e396:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800e39a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e39e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800e3a2:	e65f      	b.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e3a4:	f240 216f 	movw	r1, #623	; 0x26f
 800e3a8:	4813      	ldr	r0, [pc, #76]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3aa:	f7f5 ff63 	bl	8004274 <assert_failed>
 800e3ae:	e660      	b.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e3b0:	f240 214d 	movw	r1, #589	; 0x24d
 800e3b4:	4810      	ldr	r0, [pc, #64]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3b6:	f7f5 ff5d 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e3ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e3bc:	1e59      	subs	r1, r3, #1
 800e3be:	e62f      	b.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e3c0:	f240 214b 	movw	r1, #587	; 0x24b
 800e3c4:	480c      	ldr	r0, [pc, #48]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3c6:	f7f5 ff55 	bl	8004274 <assert_failed>
 800e3ca:	e624      	b.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e3cc:	480a      	ldr	r0, [pc, #40]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3ce:	f44f 711c 	mov.w	r1, #624	; 0x270
 800e3d2:	f7f5 ff4f 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e3d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e3d8:	e650      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e3da:	4807      	ldr	r0, [pc, #28]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3dc:	f44f 7118 	mov.w	r1, #608	; 0x260
 800e3e0:	f7f5 ff48 	bl	8004274 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e3e4:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e3e6:	6823      	ldr	r3, [r4, #0]
 800e3e8:	e7ca      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e3ea:	21b7      	movs	r1, #183	; 0xb7
 800e3ec:	4802      	ldr	r0, [pc, #8]	; (800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e3ee:	f7f5 ff41 	bl	8004274 <assert_failed>
 800e3f2:	f7ff bbc2 	b.w	800db7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e3f6:	bf00      	nop
 800e3f8:	0802c498 	.word	0x0802c498
 800e3fc:	40023800 	.word	0x40023800
 800e400:	0ffffcff 	.word	0x0ffffcff

0800e404 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e404:	b308      	cbz	r0, 800e44a <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e406:	4b12      	ldr	r3, [pc, #72]	; (800e450 <HAL_RNG_Init+0x4c>)
 800e408:	6802      	ldr	r2, [r0, #0]
 800e40a:	429a      	cmp	r2, r3
{
 800e40c:	b510      	push	{r4, lr}
 800e40e:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e410:	d003      	beq.n	800e41a <HAL_RNG_Init+0x16>
 800e412:	21a3      	movs	r1, #163	; 0xa3
 800e414:	480f      	ldr	r0, [pc, #60]	; (800e454 <HAL_RNG_Init+0x50>)
 800e416:	f7f5 ff2d 	bl	8004274 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e41a:	7963      	ldrb	r3, [r4, #5]
 800e41c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e420:	b173      	cbz	r3, 800e440 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e422:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800e424:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e426:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800e428:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800e42c:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800e42e:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800e430:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800e432:	f043 0304 	orr.w	r3, r3, #4
 800e436:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800e438:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e43c:	60a2      	str	r2, [r4, #8]
}
 800e43e:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800e440:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800e442:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800e444:	f7f7 fa70 	bl	8005928 <HAL_RNG_MspInit>
 800e448:	e7eb      	b.n	800e422 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800e44a:	2001      	movs	r0, #1
}
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	50060800 	.word	0x50060800
 800e454:	0802c4d4 	.word	0x0802c4d4

0800e458 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800e458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45a:	460c      	mov	r4, r1
 800e45c:	4615      	mov	r5, r2
 800e45e:	b083      	sub	sp, #12
 800e460:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e462:	4425      	add	r5, r4
 800e464:	f7f9 fcda 	bl	8007e1c <HAL_GetTick>
 800e468:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800e46a:	f7f9 fcd7 	bl	8007e1c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e46e:	4b25      	ldr	r3, [pc, #148]	; (800e504 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800e470:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800e478:	fb05 f303 	mul.w	r3, r5, r3
 800e47c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e47e:	6832      	ldr	r2, [r6, #0]
 800e480:	e001      	b.n	800e486 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e482:	1c63      	adds	r3, r4, #1
 800e484:	d106      	bne.n	800e494 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e486:	6893      	ldr	r3, [r2, #8]
 800e488:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e48c:	d1f9      	bne.n	800e482 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800e48e:	4618      	mov	r0, r3
}
 800e490:	b003      	add	sp, #12
 800e492:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e494:	f7f9 fcc2 	bl	8007e1c <HAL_GetTick>
 800e498:	1bc0      	subs	r0, r0, r7
 800e49a:	42a8      	cmp	r0, r5
 800e49c:	d208      	bcs.n	800e4b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800e49e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800e4a0:	2b00      	cmp	r3, #0
      count--;
 800e4a2:	9b01      	ldr	r3, [sp, #4]
 800e4a4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e4a8:	bf08      	it	eq
 800e4aa:	2500      	moveq	r5, #0
      count--;
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	e7e6      	b.n	800e47e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4b0:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e4b4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4b6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e4ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e4be:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4c0:	d014      	beq.n	800e4ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e4c2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e4c4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e4c8:	d007      	beq.n	800e4da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800e4ca:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e4cc:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e4ce:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e4d0:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e4d4:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e4d8:	e7da      	b.n	800e490 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e4e0:	601a      	str	r2, [r3, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4e8:	601a      	str	r2, [r3, #0]
 800e4ea:	e7ee      	b.n	800e4ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4ec:	68b2      	ldr	r2, [r6, #8]
 800e4ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e4f2:	d002      	beq.n	800e4fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800e4f4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e4f8:	d1e3      	bne.n	800e4c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	e7de      	b.n	800e4c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800e504:	2000027c 	.word	0x2000027c

0800e508 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e50c:	4615      	mov	r5, r2
 800e50e:	4698      	mov	r8, r3
 800e510:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e512:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e514:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e516:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800e518:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e51c:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e51e:	f7f9 fc7d 	bl	8007e1c <HAL_GetTick>
 800e522:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800e526:	f7f9 fc79 	bl	8007e1c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e52a:	4b2e      	ldr	r3, [pc, #184]	; (800e5e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e52c:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800e530:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e532:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800e534:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e53a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e53e:	0d1b      	lsrs	r3, r3, #20
 800e540:	fb07 f303 	mul.w	r3, r7, r3
 800e544:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e546:	e00b      	b.n	800e560 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e548:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800e54c:	d106      	bne.n	800e55c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e54e:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e558:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e55c:	1c6b      	adds	r3, r5, #1
 800e55e:	d106      	bne.n	800e56e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800e560:	6893      	ldr	r3, [r2, #8]
 800e562:	4023      	ands	r3, r4
 800e564:	d1f0      	bne.n	800e548 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800e566:	4618      	mov	r0, r3
}
 800e568:	b003      	add	sp, #12
 800e56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e56e:	f7f9 fc55 	bl	8007e1c <HAL_GetTick>
 800e572:	eba0 0008 	sub.w	r0, r0, r8
 800e576:	42b8      	cmp	r0, r7
 800e578:	d209      	bcs.n	800e58e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800e57a:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e57c:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800e57e:	2b00      	cmp	r3, #0
      count--;
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e586:	bf08      	it	eq
 800e588:	2700      	moveq	r7, #0
      count--;
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	e7e8      	b.n	800e560 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e58e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e592:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e594:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e59c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e59e:	d014      	beq.n	800e5ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e5a0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e5a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e5a6:	d007      	beq.n	800e5b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800e5a8:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e5aa:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e5ac:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e5ae:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e5b2:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e5b6:	e7d7      	b.n	800e568 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	e7ee      	b.n	800e5a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5ca:	68b2      	ldr	r2, [r6, #8]
 800e5cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e5d0:	d002      	beq.n	800e5d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800e5d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e5d6:	d1e3      	bne.n	800e5a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	e7de      	b.n	800e5a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800e5e2:	bf00      	nop
 800e5e4:	2000027c 	.word	0x2000027c

0800e5e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	460e      	mov	r6, r1
 800e5f0:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e5f2:	9201      	str	r2, [sp, #4]
 800e5f4:	460a      	mov	r2, r1
 800e5f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e5fa:	f7ff ff85 	bl	800e508 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e5fe:	9b01      	ldr	r3, [sp, #4]
 800e600:	bb58      	cbnz	r0, 800e65a <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e602:	4919      	ldr	r1, [pc, #100]	; (800e668 <SPI_EndRxTxTransaction+0x80>)
 800e604:	4a19      	ldr	r2, [pc, #100]	; (800e66c <SPI_EndRxTxTransaction+0x84>)
 800e606:	6808      	ldr	r0, [r1, #0]
 800e608:	fba2 2000 	umull	r2, r0, r2, r0
 800e60c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e610:	0d40      	lsrs	r0, r0, #21
 800e612:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e616:	686a      	ldr	r2, [r5, #4]
 800e618:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e61c:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e61e:	d107      	bne.n	800e630 <SPI_EndRxTxTransaction+0x48>
 800e620:	e012      	b.n	800e648 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800e622:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e624:	682a      	ldr	r2, [r5, #0]
      count--;
 800e626:	3c01      	subs	r4, #1
 800e628:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e62a:	6894      	ldr	r4, [r2, #8]
 800e62c:	0622      	lsls	r2, r4, #24
 800e62e:	d502      	bpl.n	800e636 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800e630:	9c03      	ldr	r4, [sp, #12]
 800e632:	2c00      	cmp	r4, #0
 800e634:	d1f5      	bne.n	800e622 <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e636:	4632      	mov	r2, r6
 800e638:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e63c:	4628      	mov	r0, r5
 800e63e:	f7ff ff63 	bl	800e508 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e642:	b950      	cbnz	r0, 800e65a <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800e644:	b004      	add	sp, #16
 800e646:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e648:	461a      	mov	r2, r3
 800e64a:	4631      	mov	r1, r6
 800e64c:	4628      	mov	r0, r5
 800e64e:	9301      	str	r3, [sp, #4]
 800e650:	f7ff ff02 	bl	800e458 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	2800      	cmp	r0, #0
 800e658:	d0ed      	beq.n	800e636 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e65a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800e65c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e65e:	f043 0320 	orr.w	r3, r3, #32
 800e662:	662b      	str	r3, [r5, #96]	; 0x60
}
 800e664:	b004      	add	sp, #16
 800e666:	bd70      	pop	{r4, r5, r6, pc}
 800e668:	2000027c 	.word	0x2000027c
 800e66c:	165e9f81 	.word	0x165e9f81

0800e670 <HAL_SPI_Init>:
  if (hspi == NULL)
 800e670:	2800      	cmp	r0, #0
 800e672:	f000 8128 	beq.w	800e8c6 <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e676:	6802      	ldr	r2, [r0, #0]
 800e678:	4ba7      	ldr	r3, [pc, #668]	; (800e918 <HAL_SPI_Init+0x2a8>)
 800e67a:	49a8      	ldr	r1, [pc, #672]	; (800e91c <HAL_SPI_Init+0x2ac>)
{
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e680:	48a7      	ldr	r0, [pc, #668]	; (800e920 <HAL_SPI_Init+0x2b0>)
 800e682:	429a      	cmp	r2, r3
 800e684:	bf18      	it	ne
 800e686:	4282      	cmpne	r2, r0
 800e688:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800e68c:	bf14      	ite	ne
 800e68e:	2301      	movne	r3, #1
 800e690:	2300      	moveq	r3, #0
 800e692:	428a      	cmp	r2, r1
 800e694:	bf0c      	ite	eq
 800e696:	2300      	moveq	r3, #0
 800e698:	f003 0301 	andne.w	r3, r3, #1
 800e69c:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800e6a0:	4282      	cmp	r2, r0
 800e6a2:	bf0c      	ite	eq
 800e6a4:	2300      	moveq	r3, #0
 800e6a6:	f003 0301 	andne.w	r3, r3, #1
 800e6aa:	428a      	cmp	r2, r1
 800e6ac:	bf0c      	ite	eq
 800e6ae:	2300      	moveq	r3, #0
 800e6b0:	f003 0301 	andne.w	r3, r3, #1
 800e6b4:	b11b      	cbz	r3, 800e6be <HAL_SPI_Init+0x4e>
 800e6b6:	4b9b      	ldr	r3, [pc, #620]	; (800e924 <HAL_SPI_Init+0x2b4>)
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	f040 80fe 	bne.w	800e8ba <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	b11b      	cbz	r3, 800e6ca <HAL_SPI_Init+0x5a>
 800e6c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6c6:	f040 80cd 	bne.w	800e864 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e6ca:	68a3      	ldr	r3, [r4, #8]
 800e6cc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800e6d0:	d003      	beq.n	800e6da <HAL_SPI_Init+0x6a>
 800e6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d6:	f040 80db 	bne.w	800e890 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e6da:	68e2      	ldr	r2, [r4, #12]
 800e6dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800e6e0:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800e6e4:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800e6e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e6ec:	bf18      	it	ne
 800e6ee:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800e6f2:	bf14      	ite	ne
 800e6f4:	2301      	movne	r3, #1
 800e6f6:	2300      	moveq	r3, #0
 800e6f8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800e6fc:	bf0c      	ite	eq
 800e6fe:	2300      	moveq	r3, #0
 800e700:	f003 0301 	andne.w	r3, r3, #1
 800e704:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e708:	bf0c      	ite	eq
 800e70a:	2300      	moveq	r3, #0
 800e70c:	f003 0301 	andne.w	r3, r3, #1
 800e710:	b12b      	cbz	r3, 800e71e <HAL_SPI_Init+0xae>
 800e712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e716:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e71a:	f040 80f7 	bne.w	800e90c <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e71e:	69a3      	ldr	r3, [r4, #24]
 800e720:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800e724:	d003      	beq.n	800e72e <HAL_SPI_Init+0xbe>
 800e726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e72a:	f040 80a1 	bne.w	800e870 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e72e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e730:	f033 0308 	bics.w	r3, r3, #8
 800e734:	f040 80a6 	bne.w	800e884 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e738:	69e3      	ldr	r3, [r4, #28]
 800e73a:	f023 0318 	bic.w	r3, r3, #24
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d002      	beq.n	800e748 <HAL_SPI_Init+0xd8>
 800e742:	2b00      	cmp	r3, #0
 800e744:	f040 80d6 	bne.w	800e8f4 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e748:	6a23      	ldr	r3, [r4, #32]
 800e74a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e74e:	f040 80a8 	bne.w	800e8a2 <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e754:	f033 0210 	bics.w	r2, r3, #16
 800e758:	d17b      	bne.n	800e852 <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d16e      	bne.n	800e83c <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	f033 0302 	bics.w	r3, r3, #2
 800e764:	f040 80c0 	bne.w	800e8e8 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e768:	6963      	ldr	r3, [r4, #20]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d904      	bls.n	800e778 <HAL_SPI_Init+0x108>
 800e76e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e772:	486d      	ldr	r0, [pc, #436]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e774:	f7f5 fd7e 	bl	8004274 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e778:	6863      	ldr	r3, [r4, #4]
 800e77a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e77e:	f000 80a4 	beq.w	800e8ca <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e782:	2300      	movs	r3, #0
 800e784:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e786:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e788:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e78c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e78e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 808b 	beq.w	800e8ae <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800e798:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e79a:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e79c:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e79e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800e7a2:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e7a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800e7a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e7ac:	bf8c      	ite	hi
 800e7ae:	f04f 0c00 	movhi.w	ip, #0
 800e7b2:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800e7b6:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e7b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e7bc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800e7c0:	d16c      	bne.n	800e89c <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e7c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e7c4:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800e7c8:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e7ca:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800e7d4:	68a1      	ldr	r1, [r4, #8]
 800e7d6:	f003 0302 	and.w	r3, r3, #2
 800e7da:	69a6      	ldr	r6, [r4, #24]
 800e7dc:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800e7e0:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e7e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e7e4:	431a      	orrs	r2, r3
 800e7e6:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e7e8:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7f4:	f003 0310 	and.w	r3, r3, #16
 800e7f8:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e7fa:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e7fc:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e800:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800e804:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e808:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e80a:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e80e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e812:	430a      	orrs	r2, r1
 800e814:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e816:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e818:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e81c:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e820:	430a      	orrs	r2, r1
 800e822:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e824:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e826:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800e828:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e82a:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e82c:	69eb      	ldr	r3, [r5, #28]
 800e82e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e832:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e834:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e836:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800e83a:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e83c:	69e3      	ldr	r3, [r4, #28]
 800e83e:	f023 0318 	bic.w	r3, r3, #24
 800e842:	2b20      	cmp	r3, #32
 800e844:	d001      	beq.n	800e84a <HAL_SPI_Init+0x1da>
 800e846:	2b00      	cmp	r3, #0
 800e848:	d15a      	bne.n	800e900 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e84a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e84c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800e850:	e799      	b.n	800e786 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e852:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800e856:	4834      	ldr	r0, [pc, #208]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e858:	f7f5 fd0c 	bl	8004274 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e85c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1ec      	bne.n	800e83c <HAL_SPI_Init+0x1cc>
 800e862:	e77c      	b.n	800e75e <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e864:	f240 1147 	movw	r1, #327	; 0x147
 800e868:	482f      	ldr	r0, [pc, #188]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e86a:	f7f5 fd03 	bl	8004274 <assert_failed>
 800e86e:	e72c      	b.n	800e6ca <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e870:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e874:	482c      	ldr	r0, [pc, #176]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e876:	f7f5 fcfd 	bl	8004274 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e87a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e87c:	f033 0308 	bics.w	r3, r3, #8
 800e880:	f43f af5a 	beq.w	800e738 <HAL_SPI_Init+0xc8>
 800e884:	f240 114b 	movw	r1, #331	; 0x14b
 800e888:	4827      	ldr	r0, [pc, #156]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e88a:	f7f5 fcf3 	bl	8004274 <assert_failed>
 800e88e:	e753      	b.n	800e738 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e890:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800e894:	4824      	ldr	r0, [pc, #144]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e896:	f7f5 fced 	bl	8004274 <assert_failed>
 800e89a:	e71e      	b.n	800e6da <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e89c:	2000      	movs	r0, #0
 800e89e:	62a0      	str	r0, [r4, #40]	; 0x28
 800e8a0:	e792      	b.n	800e7c8 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e8a2:	f240 114d 	movw	r1, #333	; 0x14d
 800e8a6:	4820      	ldr	r0, [pc, #128]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e8a8:	f7f5 fce4 	bl	8004274 <assert_failed>
 800e8ac:	e751      	b.n	800e752 <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800e8ae:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800e8b0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800e8b4:	f7f7 f84e 	bl	8005954 <HAL_SPI_MspInit>
 800e8b8:	e76e      	b.n	800e798 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e8ba:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800e8be:	481a      	ldr	r0, [pc, #104]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e8c0:	f7f5 fcd8 	bl	8004274 <assert_failed>
 800e8c4:	e6fb      	b.n	800e6be <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800e8c6:	2001      	movs	r0, #1
}
 800e8c8:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e8ca:	69e3      	ldr	r3, [r4, #28]
 800e8cc:	f023 0318 	bic.w	r3, r3, #24
 800e8d0:	2b20      	cmp	r3, #32
 800e8d2:	f43f af58 	beq.w	800e786 <HAL_SPI_Init+0x116>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f43f af55 	beq.w	800e786 <HAL_SPI_Init+0x116>
 800e8dc:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800e8e0:	4811      	ldr	r0, [pc, #68]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e8e2:	f7f5 fcc7 	bl	8004274 <assert_failed>
 800e8e6:	e74e      	b.n	800e786 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e8e8:	f240 1151 	movw	r1, #337	; 0x151
 800e8ec:	480e      	ldr	r0, [pc, #56]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e8ee:	f7f5 fcc1 	bl	8004274 <assert_failed>
 800e8f2:	e739      	b.n	800e768 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e8f4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e8f8:	480b      	ldr	r0, [pc, #44]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e8fa:	f7f5 fcbb 	bl	8004274 <assert_failed>
 800e8fe:	e723      	b.n	800e748 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e900:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e904:	4808      	ldr	r0, [pc, #32]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e906:	f7f5 fcb5 	bl	8004274 <assert_failed>
 800e90a:	e79e      	b.n	800e84a <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e90c:	f240 1149 	movw	r1, #329	; 0x149
 800e910:	4805      	ldr	r0, [pc, #20]	; (800e928 <HAL_SPI_Init+0x2b8>)
 800e912:	f7f5 fcaf 	bl	8004274 <assert_failed>
 800e916:	e702      	b.n	800e71e <HAL_SPI_Init+0xae>
 800e918:	40013000 	.word	0x40013000
 800e91c:	40003c00 	.word	0x40003c00
 800e920:	40003800 	.word	0x40003800
 800e924:	40015400 	.word	0x40015400
 800e928:	0802c50c 	.word	0x0802c50c

0800e92c <HAL_SPI_Transmit>:
{
 800e92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e930:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e932:	6883      	ldr	r3, [r0, #8]
{
 800e934:	b082      	sub	sp, #8
 800e936:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e938:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800e93c:	460f      	mov	r7, r1
 800e93e:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e940:	d171      	bne.n	800ea26 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800e942:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e946:	2b01      	cmp	r3, #1
 800e948:	d076      	beq.n	800ea38 <HAL_SPI_Transmit+0x10c>
 800e94a:	2301      	movs	r3, #1
 800e94c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800e950:	f7f9 fa64 	bl	8007e1c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e954:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800e958:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	b2d8      	uxtb	r0, r3
 800e95e:	d009      	beq.n	800e974 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800e960:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800e962:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800e964:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800e966:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e96a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800e96e:	b002      	add	sp, #8
 800e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800e974:	2f00      	cmp	r7, #0
 800e976:	d0f4      	beq.n	800e962 <HAL_SPI_Transmit+0x36>
 800e978:	fab8 f388 	clz	r3, r8
 800e97c:	095b      	lsrs	r3, r3, #5
 800e97e:	f1b8 0f00 	cmp.w	r8, #0
 800e982:	d0ee      	beq.n	800e962 <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e984:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e986:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e988:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e98c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e990:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e992:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800e996:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e99a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e99c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800e9a0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9a4:	68a3      	ldr	r3, [r4, #8]
 800e9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800e9aa:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9ac:	d07a      	beq.n	800eaa4 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	0652      	lsls	r2, r2, #25
 800e9b2:	d403      	bmi.n	800e9bc <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9ba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9bc:	68e2      	ldr	r2, [r4, #12]
 800e9be:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9c2:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9c4:	d93c      	bls.n	800ea40 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9c6:	b112      	cbz	r2, 800e9ce <HAL_SPI_Transmit+0xa2>
 800e9c8:	f1b8 0f01 	cmp.w	r8, #1
 800e9cc:	d107      	bne.n	800e9de <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9ce:	f837 2b02 	ldrh.w	r2, [r7], #2
 800e9d2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800e9d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9d6:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800e9d8:	3a01      	subs	r2, #1
 800e9da:	b292      	uxth	r2, r2
 800e9dc:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e9de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e9e0:	b292      	uxth	r2, r2
 800e9e2:	b992      	cbnz	r2, 800ea0a <HAL_SPI_Transmit+0xde>
 800e9e4:	e072      	b.n	800eacc <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e9e8:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e9ec:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800e9ee:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9f2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e9f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e9f8:	fa1f fc8c 	uxth.w	ip, ip
 800e9fc:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ea00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d061      	beq.n	800eacc <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	689a      	ldr	r2, [r3, #8]
 800ea0c:	0797      	lsls	r7, r2, #30
 800ea0e:	d4ea      	bmi.n	800e9e6 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea10:	f7f9 fa04 	bl	8007e1c <HAL_GetTick>
 800ea14:	1b80      	subs	r0, r0, r6
 800ea16:	42a8      	cmp	r0, r5
 800ea18:	d301      	bcc.n	800ea1e <HAL_SPI_Transmit+0xf2>
 800ea1a:	1c68      	adds	r0, r5, #1
 800ea1c:	d101      	bne.n	800ea22 <HAL_SPI_Transmit+0xf6>
 800ea1e:	2d00      	cmp	r5, #0
 800ea20:	d1ee      	bne.n	800ea00 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800ea22:	2003      	movs	r0, #3
 800ea24:	e79d      	b.n	800e962 <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ea26:	f240 313d 	movw	r1, #829	; 0x33d
 800ea2a:	4838      	ldr	r0, [pc, #224]	; (800eb0c <HAL_SPI_Transmit+0x1e0>)
 800ea2c:	f7f5 fc22 	bl	8004274 <assert_failed>
  __HAL_LOCK(hspi);
 800ea30:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d188      	bne.n	800e94a <HAL_SPI_Transmit+0x1e>
 800ea38:	2002      	movs	r0, #2
}
 800ea3a:	b002      	add	sp, #8
 800ea3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea40:	b112      	cbz	r2, 800ea48 <HAL_SPI_Transmit+0x11c>
 800ea42:	f1b8 0f01 	cmp.w	r8, #1
 800ea46:	d10b      	bne.n	800ea60 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800ea48:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ea4a:	b292      	uxth	r2, r2
 800ea4c:	2a01      	cmp	r2, #1
 800ea4e:	d953      	bls.n	800eaf8 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea50:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ea54:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800ea56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea58:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ea5a:	3b02      	subs	r3, #2
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ea60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	b983      	cbnz	r3, 800ea88 <HAL_SPI_Transmit+0x15c>
 800ea66:	e031      	b.n	800eacc <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800ea68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d922      	bls.n	800eab6 <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea72:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ea76:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ea78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea7a:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ea7c:	3b02      	subs	r3, #2
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ea82:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800ea84:	b289      	uxth	r1, r1
 800ea86:	b309      	cbz	r1, 800eacc <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea88:	6822      	ldr	r2, [r4, #0]
 800ea8a:	6893      	ldr	r3, [r2, #8]
 800ea8c:	0799      	lsls	r1, r3, #30
 800ea8e:	d4eb      	bmi.n	800ea68 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea90:	f7f9 f9c4 	bl	8007e1c <HAL_GetTick>
 800ea94:	1b80      	subs	r0, r0, r6
 800ea96:	42a8      	cmp	r0, r5
 800ea98:	d301      	bcc.n	800ea9e <HAL_SPI_Transmit+0x172>
 800ea9a:	1c6b      	adds	r3, r5, #1
 800ea9c:	d1c1      	bne.n	800ea22 <HAL_SPI_Transmit+0xf6>
 800ea9e:	2d00      	cmp	r5, #0
 800eaa0:	d1ef      	bne.n	800ea82 <HAL_SPI_Transmit+0x156>
 800eaa2:	e7be      	b.n	800ea22 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e77b      	b.n	800e9ae <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800eabc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800eabe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800eac0:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800eac2:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800eac4:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800eac6:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800eac8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800eaca:	e7da      	b.n	800ea82 <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eacc:	4632      	mov	r2, r6
 800eace:	4629      	mov	r1, r5
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff fd89 	bl	800e5e8 <SPI_EndRxTxTransaction>
 800ead6:	b108      	cbz	r0, 800eadc <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ead8:	2320      	movs	r3, #32
 800eada:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	b933      	cbnz	r3, 800eaee <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eae0:	6822      	ldr	r2, [r4, #0]
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	68d3      	ldr	r3, [r2, #12]
 800eae6:	9301      	str	r3, [sp, #4]
 800eae8:	6893      	ldr	r3, [r2, #8]
 800eaea:	9301      	str	r3, [sp, #4]
 800eaec:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaee:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800eaf0:	3800      	subs	r0, #0
 800eaf2:	bf18      	it	ne
 800eaf4:	2001      	movne	r0, #1
error:
 800eaf6:	e734      	b.n	800e962 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eaf8:	783a      	ldrb	r2, [r7, #0]
 800eafa:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800eafc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800eafe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800eb00:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800eb02:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800eb04:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800eb06:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800eb08:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800eb0a:	e7a9      	b.n	800ea60 <HAL_SPI_Transmit+0x134>
 800eb0c:	0802c50c 	.word	0x0802c50c

0800eb10 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb10:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb12:	4a12      	ldr	r2, [pc, #72]	; (800eb5c <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800eb18:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb1a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800eb1c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800eb1e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800eb20:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb26:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800eb28:	680d      	ldr	r5, [r1, #0]
 800eb2a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb2c:	688d      	ldr	r5, [r1, #8]
 800eb2e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb32:	4d0b      	ldr	r5, [pc, #44]	; (800eb60 <TIM_OC5_SetConfig+0x50>)
 800eb34:	42a8      	cmp	r0, r5
 800eb36:	d00a      	beq.n	800eb4e <TIM_OC5_SetConfig+0x3e>
 800eb38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800eb3c:	42a8      	cmp	r0, r5
 800eb3e:	d006      	beq.n	800eb4e <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb40:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800eb42:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800eb44:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800eb46:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb48:	6203      	str	r3, [r0, #32]
}
 800eb4a:	bc30      	pop	{r4, r5}
 800eb4c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb4e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb52:	694d      	ldr	r5, [r1, #20]
 800eb54:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800eb58:	e7f2      	b.n	800eb40 <TIM_OC5_SetConfig+0x30>
 800eb5a:	bf00      	nop
 800eb5c:	fffeff8f 	.word	0xfffeff8f
 800eb60:	40010000 	.word	0x40010000

0800eb64 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb64:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb66:	4a12      	ldr	r2, [pc, #72]	; (800ebb0 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800eb6c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb6e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800eb70:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800eb72:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800eb74:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb7a:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb7c:	680d      	ldr	r5, [r1, #0]
 800eb7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb82:	688d      	ldr	r5, [r1, #8]
 800eb84:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb88:	4d0a      	ldr	r5, [pc, #40]	; (800ebb4 <TIM_OC6_SetConfig+0x50>)
 800eb8a:	42a8      	cmp	r0, r5
 800eb8c:	d00a      	beq.n	800eba4 <TIM_OC6_SetConfig+0x40>
 800eb8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800eb92:	42a8      	cmp	r0, r5
 800eb94:	d006      	beq.n	800eba4 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb96:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800eb98:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800eb9a:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800eb9c:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb9e:	6203      	str	r3, [r0, #32]
}
 800eba0:	bc30      	pop	{r4, r5}
 800eba2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eba4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eba8:	694d      	ldr	r5, [r1, #20]
 800ebaa:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800ebae:	e7f2      	b.n	800eb96 <TIM_OC6_SetConfig+0x32>
 800ebb0:	feff8fff 	.word	0xfeff8fff
 800ebb4:	40010000 	.word	0x40010000

0800ebb8 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebb8:	6a03      	ldr	r3, [r0, #32]
 800ebba:	f023 0301 	bic.w	r3, r3, #1
{
 800ebbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebc2:	6203      	str	r3, [r0, #32]
{
 800ebc4:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ebc6:	6a05      	ldr	r5, [r0, #32]
{
 800ebc8:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ebca:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ebce:	4b27      	ldr	r3, [pc, #156]	; (800ec6c <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800ebd0:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800ebd4:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800ebd6:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ebd8:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ebda:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800ebdc:	688b      	ldr	r3, [r1, #8]
 800ebde:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ebe0:	4b23      	ldr	r3, [pc, #140]	; (800ec70 <TIM_OC1_SetConfig+0xb8>)
 800ebe2:	4298      	cmp	r0, r3
 800ebe4:	d00b      	beq.n	800ebfe <TIM_OC1_SetConfig+0x46>
 800ebe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebea:	4298      	cmp	r0, r3
 800ebec:	d007      	beq.n	800ebfe <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ebee:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ebf0:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ebf4:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ebf6:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ebf8:	6225      	str	r5, [r4, #32]
}
 800ebfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ebfe:	68f3      	ldr	r3, [r6, #12]
 800ec00:	f033 0208 	bics.w	r2, r3, #8
 800ec04:	d120      	bne.n	800ec48 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec06:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ec0a:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ec0c:	69b3      	ldr	r3, [r6, #24]
 800ec0e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec12:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ec16:	d11e      	bne.n	800ec56 <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ec18:	6973      	ldr	r3, [r6, #20]
 800ec1a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ec1e:	d106      	bne.n	800ec2e <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec20:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ec24:	69b1      	ldr	r1, [r6, #24]
 800ec26:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800ec28:	ea42 0803 	orr.w	r8, r2, r3
 800ec2c:	e7df      	b.n	800ebee <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ec2e:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800ec32:	4810      	ldr	r0, [pc, #64]	; (800ec74 <TIM_OC1_SetConfig+0xbc>)
 800ec34:	f7f5 fb1e 	bl	8004274 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec38:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ec3c:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800ec3e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800ec40:	430a      	orrs	r2, r1
 800ec42:	ea42 0803 	orr.w	r8, r2, r3
 800ec46:	e7d2      	b.n	800ebee <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ec48:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800ec4c:	4809      	ldr	r0, [pc, #36]	; (800ec74 <TIM_OC1_SetConfig+0xbc>)
 800ec4e:	f7f5 fb11 	bl	8004274 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800ec52:	68f3      	ldr	r3, [r6, #12]
 800ec54:	e7d7      	b.n	800ec06 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ec56:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800ec5a:	4806      	ldr	r0, [pc, #24]	; (800ec74 <TIM_OC1_SetConfig+0xbc>)
 800ec5c:	f7f5 fb0a 	bl	8004274 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ec60:	6973      	ldr	r3, [r6, #20]
 800ec62:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ec66:	d0db      	beq.n	800ec20 <TIM_OC1_SetConfig+0x68>
 800ec68:	e7e1      	b.n	800ec2e <TIM_OC1_SetConfig+0x76>
 800ec6a:	bf00      	nop
 800ec6c:	fffeff8c 	.word	0xfffeff8c
 800ec70:	40010000 	.word	0x40010000
 800ec74:	0802c544 	.word	0x0802c544

0800ec78 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec78:	6a03      	ldr	r3, [r0, #32]
 800ec7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800ec7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec82:	6203      	str	r3, [r0, #32]
{
 800ec84:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ec86:	6a05      	ldr	r5, [r0, #32]
{
 800ec88:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ec8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec8e:	4b29      	ldr	r3, [pc, #164]	; (800ed34 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800ec90:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800ec94:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800ec96:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec98:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ec9a:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec9c:	688b      	ldr	r3, [r1, #8]
 800ec9e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eca2:	4b25      	ldr	r3, [pc, #148]	; (800ed38 <TIM_OC3_SetConfig+0xc0>)
 800eca4:	4298      	cmp	r0, r3
 800eca6:	d00b      	beq.n	800ecc0 <TIM_OC3_SetConfig+0x48>
 800eca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ecac:	4298      	cmp	r0, r3
 800ecae:	d007      	beq.n	800ecc0 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800ecb0:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ecb2:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800ecb6:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800ecb8:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800ecba:	6225      	str	r5, [r4, #32]
}
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ecc0:	68f3      	ldr	r3, [r6, #12]
 800ecc2:	f033 0208 	bics.w	r2, r3, #8
 800ecc6:	d123      	bne.n	800ed10 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800ecc8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eccc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ecd0:	69b3      	ldr	r3, [r6, #24]
 800ecd2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecd6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ecda:	d120      	bne.n	800ed1e <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ecdc:	6973      	ldr	r3, [r6, #20]
 800ecde:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ece2:	d107      	bne.n	800ecf4 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ece4:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ece8:	69b1      	ldr	r1, [r6, #24]
 800ecea:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ecee:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800ecf2:	e7dd      	b.n	800ecb0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ecf4:	f641 4103 	movw	r1, #7171	; 0x1c03
 800ecf8:	4810      	ldr	r0, [pc, #64]	; (800ed3c <TIM_OC3_SetConfig+0xc4>)
 800ecfa:	f7f5 fabb 	bl	8004274 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecfe:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed02:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed04:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed06:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ed0a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800ed0e:	e7cf      	b.n	800ecb0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ed10:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800ed14:	4809      	ldr	r0, [pc, #36]	; (800ed3c <TIM_OC3_SetConfig+0xc4>)
 800ed16:	f7f5 faad 	bl	8004274 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ed1a:	68f3      	ldr	r3, [r6, #12]
 800ed1c:	e7d4      	b.n	800ecc8 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ed1e:	f641 4102 	movw	r1, #7170	; 0x1c02
 800ed22:	4806      	ldr	r0, [pc, #24]	; (800ed3c <TIM_OC3_SetConfig+0xc4>)
 800ed24:	f7f5 faa6 	bl	8004274 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ed28:	6973      	ldr	r3, [r6, #20]
 800ed2a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ed2e:	d0d9      	beq.n	800ece4 <TIM_OC3_SetConfig+0x6c>
 800ed30:	e7e0      	b.n	800ecf4 <TIM_OC3_SetConfig+0x7c>
 800ed32:	bf00      	nop
 800ed34:	fffeff8c 	.word	0xfffeff8c
 800ed38:	40010000 	.word	0x40010000
 800ed3c:	0802c544 	.word	0x0802c544

0800ed40 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed40:	6a03      	ldr	r3, [r0, #32]
 800ed42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800ed46:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed48:	6203      	str	r3, [r0, #32]
{
 800ed4a:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800ed4c:	6a06      	ldr	r6, [r0, #32]
{
 800ed4e:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800ed50:	6842      	ldr	r2, [r0, #4]
{
 800ed52:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800ed54:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800ed56:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed5a:	4b16      	ldr	r3, [pc, #88]	; (800edb4 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed5c:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed5e:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed60:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed64:	68ab      	ldr	r3, [r5, #8]
 800ed66:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed6a:	4b13      	ldr	r3, [pc, #76]	; (800edb8 <TIM_OC4_SetConfig+0x78>)
 800ed6c:	4298      	cmp	r0, r3
 800ed6e:	d00a      	beq.n	800ed86 <TIM_OC4_SetConfig+0x46>
 800ed70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed74:	4298      	cmp	r0, r3
 800ed76:	d006      	beq.n	800ed86 <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800ed78:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800ed7a:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800ed7c:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800ed7e:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800ed80:	6226      	str	r6, [r4, #32]
}
 800ed82:	b003      	add	sp, #12
 800ed84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ed86:	696b      	ldr	r3, [r5, #20]
 800ed88:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800ed8c:	d104      	bne.n	800ed98 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed92:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800ed96:	e7ef      	b.n	800ed78 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ed98:	f641 4141 	movw	r1, #7233	; 0x1c41
 800ed9c:	4807      	ldr	r0, [pc, #28]	; (800edbc <TIM_OC4_SetConfig+0x7c>)
 800ed9e:	9201      	str	r2, [sp, #4]
 800eda0:	f7f5 fa68 	bl	8004274 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eda8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800edac:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800edb0:	e7e2      	b.n	800ed78 <TIM_OC4_SetConfig+0x38>
 800edb2:	bf00      	nop
 800edb4:	feff8cff 	.word	0xfeff8cff
 800edb8:	40010000 	.word	0x40010000
 800edbc:	0802c544 	.word	0x0802c544

0800edc0 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edc0:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800edc2:	684a      	ldr	r2, [r1, #4]
{
 800edc4:	b570      	push	{r4, r5, r6, lr}
 800edc6:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800edc8:	6899      	ldr	r1, [r3, #8]
{
 800edca:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800edcc:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800edce:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800edd2:	4980      	ldr	r1, [pc, #512]	; (800efd4 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800edd4:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800edd6:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800edda:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800edde:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800ede2:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800ede4:	f000 8104 	beq.w	800eff0 <TIM_SlaveTimer_SetConfig+0x230>
 800ede8:	d953      	bls.n	800ee92 <TIM_SlaveTimer_SetConfig+0xd2>
 800edea:	2a60      	cmp	r2, #96	; 0x60
 800edec:	f000 816b 	beq.w	800f0c6 <TIM_SlaveTimer_SetConfig+0x306>
 800edf0:	2a70      	cmp	r2, #112	; 0x70
 800edf2:	d151      	bne.n	800ee98 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800edf4:	4a78      	ldr	r2, [pc, #480]	; (800efd8 <TIM_SlaveTimer_SetConfig+0x218>)
 800edf6:	4979      	ldr	r1, [pc, #484]	; (800efdc <TIM_SlaveTimer_SetConfig+0x21c>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	bf18      	it	ne
 800edfc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ee00:	bf14      	ite	ne
 800ee02:	2201      	movne	r2, #1
 800ee04:	2200      	moveq	r2, #0
 800ee06:	428b      	cmp	r3, r1
 800ee08:	bf0c      	ite	eq
 800ee0a:	2200      	moveq	r2, #0
 800ee0c:	f002 0201 	andne.w	r2, r2, #1
 800ee10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee14:	428b      	cmp	r3, r1
 800ee16:	bf0c      	ite	eq
 800ee18:	2200      	moveq	r2, #0
 800ee1a:	f002 0201 	andne.w	r2, r2, #1
 800ee1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee22:	428b      	cmp	r3, r1
 800ee24:	bf0c      	ite	eq
 800ee26:	2200      	moveq	r2, #0
 800ee28:	f002 0201 	andne.w	r2, r2, #1
 800ee2c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ee30:	428b      	cmp	r3, r1
 800ee32:	bf0c      	ite	eq
 800ee34:	2200      	moveq	r2, #0
 800ee36:	f002 0201 	andne.w	r2, r2, #1
 800ee3a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ee3e:	428b      	cmp	r3, r1
 800ee40:	bf0c      	ite	eq
 800ee42:	2200      	moveq	r2, #0
 800ee44:	f002 0201 	andne.w	r2, r2, #1
 800ee48:	b11a      	cbz	r2, 800ee52 <TIM_SlaveTimer_SetConfig+0x92>
 800ee4a:	4a65      	ldr	r2, [pc, #404]	; (800efe0 <TIM_SlaveTimer_SetConfig+0x220>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	f040 81bb 	bne.w	800f1c8 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800ee52:	68e3      	ldr	r3, [r4, #12]
 800ee54:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ee58:	f040 819e 	bne.w	800f198 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee62:	bf18      	it	ne
 800ee64:	2b0a      	cmpne	r3, #10
 800ee66:	d003      	beq.n	800ee70 <TIM_SlaveTimer_SetConfig+0xb0>
 800ee68:	f033 0302 	bics.w	r3, r3, #2
 800ee6c:	f040 81a6 	bne.w	800f1bc <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ee70:	6921      	ldr	r1, [r4, #16]
 800ee72:	290f      	cmp	r1, #15
 800ee74:	f200 8175 	bhi.w	800f162 <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee78:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee7a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800ee7e:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee80:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ee82:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ee88:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee8e:	60ab      	str	r3, [r5, #8]
}
 800ee90:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ee92:	2a40      	cmp	r2, #64	; 0x40
 800ee94:	d03a      	beq.n	800ef0c <TIM_SlaveTimer_SetConfig+0x14c>
 800ee96:	d901      	bls.n	800ee9c <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800ee98:	2001      	movs	r0, #1
}
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ee9c:	2a20      	cmp	r2, #32
 800ee9e:	d002      	beq.n	800eea6 <TIM_SlaveTimer_SetConfig+0xe6>
 800eea0:	d930      	bls.n	800ef04 <TIM_SlaveTimer_SetConfig+0x144>
 800eea2:	2a30      	cmp	r2, #48	; 0x30
 800eea4:	d1f8      	bne.n	800ee98 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800eea6:	4a4c      	ldr	r2, [pc, #304]	; (800efd8 <TIM_SlaveTimer_SetConfig+0x218>)
 800eea8:	484c      	ldr	r0, [pc, #304]	; (800efdc <TIM_SlaveTimer_SetConfig+0x21c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	bf18      	it	ne
 800eeae:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800eeb2:	494c      	ldr	r1, [pc, #304]	; (800efe4 <TIM_SlaveTimer_SetConfig+0x224>)
 800eeb4:	4c4c      	ldr	r4, [pc, #304]	; (800efe8 <TIM_SlaveTimer_SetConfig+0x228>)
 800eeb6:	bf14      	ite	ne
 800eeb8:	2201      	movne	r2, #1
 800eeba:	2200      	moveq	r2, #0
 800eebc:	4283      	cmp	r3, r0
 800eebe:	bf0c      	ite	eq
 800eec0:	2200      	moveq	r2, #0
 800eec2:	f002 0201 	andne.w	r2, r2, #1
 800eec6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800eeca:	428b      	cmp	r3, r1
 800eecc:	bf0c      	ite	eq
 800eece:	2200      	moveq	r2, #0
 800eed0:	f002 0201 	andne.w	r2, r2, #1
 800eed4:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	bf0c      	ite	eq
 800eedc:	2200      	moveq	r2, #0
 800eede:	f002 0201 	andne.w	r2, r2, #1
 800eee2:	4283      	cmp	r3, r0
 800eee4:	bf0c      	ite	eq
 800eee6:	2200      	moveq	r2, #0
 800eee8:	f002 0201 	andne.w	r2, r2, #1
 800eeec:	428b      	cmp	r3, r1
 800eeee:	bf0c      	ite	eq
 800eef0:	2200      	moveq	r2, #0
 800eef2:	f002 0201 	andne.w	r2, r2, #1
 800eef6:	b11a      	cbz	r2, 800ef00 <TIM_SlaveTimer_SetConfig+0x140>
 800eef8:	4a39      	ldr	r2, [pc, #228]	; (800efe0 <TIM_SlaveTimer_SetConfig+0x220>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	f040 816a 	bne.w	800f1d4 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800ef00:	2000      	movs	r0, #0
}
 800ef02:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ef04:	f032 0210 	bics.w	r2, r2, #16
 800ef08:	d1c6      	bne.n	800ee98 <TIM_SlaveTimer_SetConfig+0xd8>
 800ef0a:	e7cc      	b.n	800eea6 <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ef0c:	4a32      	ldr	r2, [pc, #200]	; (800efd8 <TIM_SlaveTimer_SetConfig+0x218>)
 800ef0e:	4933      	ldr	r1, [pc, #204]	; (800efdc <TIM_SlaveTimer_SetConfig+0x21c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	bf18      	it	ne
 800ef14:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ef18:	bf14      	ite	ne
 800ef1a:	2201      	movne	r2, #1
 800ef1c:	2200      	moveq	r2, #0
 800ef1e:	428b      	cmp	r3, r1
 800ef20:	bf0c      	ite	eq
 800ef22:	2200      	moveq	r2, #0
 800ef24:	f002 0201 	andne.w	r2, r2, #1
 800ef28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef2c:	428b      	cmp	r3, r1
 800ef2e:	bf0c      	ite	eq
 800ef30:	2200      	moveq	r2, #0
 800ef32:	f002 0201 	andne.w	r2, r2, #1
 800ef36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef3a:	428b      	cmp	r3, r1
 800ef3c:	bf0c      	ite	eq
 800ef3e:	2200      	moveq	r2, #0
 800ef40:	f002 0201 	andne.w	r2, r2, #1
 800ef44:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	bf0c      	ite	eq
 800ef4c:	2200      	moveq	r2, #0
 800ef4e:	f002 0201 	andne.w	r2, r2, #1
 800ef52:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ef56:	428b      	cmp	r3, r1
 800ef58:	bf0c      	ite	eq
 800ef5a:	2200      	moveq	r2, #0
 800ef5c:	f002 0201 	andne.w	r2, r2, #1
 800ef60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef64:	428b      	cmp	r3, r1
 800ef66:	bf0c      	ite	eq
 800ef68:	2200      	moveq	r2, #0
 800ef6a:	f002 0201 	andne.w	r2, r2, #1
 800ef6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef72:	428b      	cmp	r3, r1
 800ef74:	bf0c      	ite	eq
 800ef76:	2200      	moveq	r2, #0
 800ef78:	f002 0201 	andne.w	r2, r2, #1
 800ef7c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800ef80:	428b      	cmp	r3, r1
 800ef82:	bf0c      	ite	eq
 800ef84:	2200      	moveq	r2, #0
 800ef86:	f002 0201 	andne.w	r2, r2, #1
 800ef8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef8e:	428b      	cmp	r3, r1
 800ef90:	bf0c      	ite	eq
 800ef92:	2200      	moveq	r2, #0
 800ef94:	f002 0201 	andne.w	r2, r2, #1
 800ef98:	b11a      	cbz	r2, 800efa2 <TIM_SlaveTimer_SetConfig+0x1e2>
 800ef9a:	4a14      	ldr	r2, [pc, #80]	; (800efec <TIM_SlaveTimer_SetConfig+0x22c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	f040 8126 	bne.w	800f1ee <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	2b0f      	cmp	r3, #15
 800efa6:	f200 80ea 	bhi.w	800f17e <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	2b05      	cmp	r3, #5
 800efae:	f43f af73 	beq.w	800ee98 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800efb2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efb4:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800efb6:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800efb8:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800efba:	6a19      	ldr	r1, [r3, #32]
 800efbc:	f021 0101 	bic.w	r1, r1, #1
 800efc0:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800efc2:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efc4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800efc8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800efcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800efce:	621c      	str	r4, [r3, #32]
}
 800efd0:	bd70      	pop	{r4, r5, r6, pc}
 800efd2:	bf00      	nop
 800efd4:	fffefff8 	.word	0xfffefff8
 800efd8:	40010000 	.word	0x40010000
 800efdc:	40000400 	.word	0x40000400
 800efe0:	40001800 	.word	0x40001800
 800efe4:	40000800 	.word	0x40000800
 800efe8:	40000c00 	.word	0x40000c00
 800efec:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800eff0:	4a85      	ldr	r2, [pc, #532]	; (800f208 <TIM_SlaveTimer_SetConfig+0x448>)
 800eff2:	4986      	ldr	r1, [pc, #536]	; (800f20c <TIM_SlaveTimer_SetConfig+0x44c>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	bf18      	it	ne
 800eff8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800effc:	bf14      	ite	ne
 800effe:	2201      	movne	r2, #1
 800f000:	2200      	moveq	r2, #0
 800f002:	428b      	cmp	r3, r1
 800f004:	bf0c      	ite	eq
 800f006:	2200      	moveq	r2, #0
 800f008:	f002 0201 	andne.w	r2, r2, #1
 800f00c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f010:	428b      	cmp	r3, r1
 800f012:	bf0c      	ite	eq
 800f014:	2200      	moveq	r2, #0
 800f016:	f002 0201 	andne.w	r2, r2, #1
 800f01a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f01e:	428b      	cmp	r3, r1
 800f020:	bf0c      	ite	eq
 800f022:	2200      	moveq	r2, #0
 800f024:	f002 0201 	andne.w	r2, r2, #1
 800f028:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f02c:	428b      	cmp	r3, r1
 800f02e:	bf0c      	ite	eq
 800f030:	2200      	moveq	r2, #0
 800f032:	f002 0201 	andne.w	r2, r2, #1
 800f036:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f03a:	428b      	cmp	r3, r1
 800f03c:	bf0c      	ite	eq
 800f03e:	2200      	moveq	r2, #0
 800f040:	f002 0201 	andne.w	r2, r2, #1
 800f044:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f048:	428b      	cmp	r3, r1
 800f04a:	bf0c      	ite	eq
 800f04c:	2200      	moveq	r2, #0
 800f04e:	f002 0201 	andne.w	r2, r2, #1
 800f052:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f056:	428b      	cmp	r3, r1
 800f058:	bf0c      	ite	eq
 800f05a:	2200      	moveq	r2, #0
 800f05c:	f002 0201 	andne.w	r2, r2, #1
 800f060:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800f064:	428b      	cmp	r3, r1
 800f066:	bf0c      	ite	eq
 800f068:	2200      	moveq	r2, #0
 800f06a:	f002 0201 	andne.w	r2, r2, #1
 800f06e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f072:	428b      	cmp	r3, r1
 800f074:	bf0c      	ite	eq
 800f076:	2200      	moveq	r2, #0
 800f078:	f002 0201 	andne.w	r2, r2, #1
 800f07c:	b11a      	cbz	r2, 800f086 <TIM_SlaveTimer_SetConfig+0x2c6>
 800f07e:	4a64      	ldr	r2, [pc, #400]	; (800f210 <TIM_SlaveTimer_SetConfig+0x450>)
 800f080:	4293      	cmp	r3, r2
 800f082:	f040 80ba 	bne.w	800f1fa <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f086:	68a3      	ldr	r3, [r4, #8]
 800f088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f08c:	bf18      	it	ne
 800f08e:	2b0a      	cmpne	r3, #10
 800f090:	d003      	beq.n	800f09a <TIM_SlaveTimer_SetConfig+0x2da>
 800f092:	f033 0302 	bics.w	r3, r3, #2
 800f096:	f040 808b 	bne.w	800f1b0 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f09a:	6926      	ldr	r6, [r4, #16]
 800f09c:	2e0f      	cmp	r6, #15
 800f09e:	d874      	bhi.n	800f18a <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800f0a4:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0a6:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f0a8:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0ac:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800f0b0:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f0b2:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0b4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0b6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f0b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f0bc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f0c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0c2:	6219      	str	r1, [r3, #32]
}
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f0c6:	4a50      	ldr	r2, [pc, #320]	; (800f208 <TIM_SlaveTimer_SetConfig+0x448>)
 800f0c8:	4950      	ldr	r1, [pc, #320]	; (800f20c <TIM_SlaveTimer_SetConfig+0x44c>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	bf18      	it	ne
 800f0ce:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f0d2:	bf14      	ite	ne
 800f0d4:	2201      	movne	r2, #1
 800f0d6:	2200      	moveq	r2, #0
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	bf0c      	ite	eq
 800f0dc:	2200      	moveq	r2, #0
 800f0de:	f002 0201 	andne.w	r2, r2, #1
 800f0e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0e6:	428b      	cmp	r3, r1
 800f0e8:	bf0c      	ite	eq
 800f0ea:	2200      	moveq	r2, #0
 800f0ec:	f002 0201 	andne.w	r2, r2, #1
 800f0f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0f4:	428b      	cmp	r3, r1
 800f0f6:	bf0c      	ite	eq
 800f0f8:	2200      	moveq	r2, #0
 800f0fa:	f002 0201 	andne.w	r2, r2, #1
 800f0fe:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f102:	428b      	cmp	r3, r1
 800f104:	bf0c      	ite	eq
 800f106:	2200      	moveq	r2, #0
 800f108:	f002 0201 	andne.w	r2, r2, #1
 800f10c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f110:	428b      	cmp	r3, r1
 800f112:	bf0c      	ite	eq
 800f114:	2200      	moveq	r2, #0
 800f116:	f002 0201 	andne.w	r2, r2, #1
 800f11a:	b112      	cbz	r2, 800f122 <TIM_SlaveTimer_SetConfig+0x362>
 800f11c:	4a3d      	ldr	r2, [pc, #244]	; (800f214 <TIM_SlaveTimer_SetConfig+0x454>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d15f      	bne.n	800f1e2 <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f122:	68a3      	ldr	r3, [r4, #8]
 800f124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f128:	bf18      	it	ne
 800f12a:	2b0a      	cmpne	r3, #10
 800f12c:	d002      	beq.n	800f134 <TIM_SlaveTimer_SetConfig+0x374>
 800f12e:	f033 0302 	bics.w	r3, r3, #2
 800f132:	d137      	bne.n	800f1a4 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f134:	6926      	ldr	r6, [r4, #16]
 800f136:	2e0f      	cmp	r6, #15
 800f138:	d81a      	bhi.n	800f170 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f13a:	682b      	ldr	r3, [r5, #0]
 800f13c:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f13e:	6a18      	ldr	r0, [r3, #32]
 800f140:	f020 0010 	bic.w	r0, r0, #16
 800f144:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f146:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f148:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f14a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f14c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f154:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f158:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f15c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f15e:	621a      	str	r2, [r3, #32]
}
 800f160:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f162:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800f166:	482c      	ldr	r0, [pc, #176]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f168:	f7f5 f884 	bl	8004274 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f16c:	6921      	ldr	r1, [r4, #16]
 800f16e:	e683      	b.n	800ee78 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f170:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800f174:	4828      	ldr	r0, [pc, #160]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f176:	f7f5 f87d 	bl	8004274 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f17a:	6926      	ldr	r6, [r4, #16]
 800f17c:	e7dd      	b.n	800f13a <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f17e:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800f182:	4825      	ldr	r0, [pc, #148]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f184:	f7f5 f876 	bl	8004274 <assert_failed>
 800f188:	e70f      	b.n	800efaa <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f18a:	f641 5111 	movw	r1, #7441	; 0x1d11
 800f18e:	4822      	ldr	r0, [pc, #136]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f190:	f7f5 f870 	bl	8004274 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f194:	6926      	ldr	r6, [r4, #16]
 800f196:	e783      	b.n	800f0a0 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800f198:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800f19c:	481e      	ldr	r0, [pc, #120]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f19e:	f7f5 f869 	bl	8004274 <assert_failed>
 800f1a2:	e65b      	b.n	800ee5c <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f1a4:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800f1a8:	481b      	ldr	r0, [pc, #108]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1aa:	f7f5 f863 	bl	8004274 <assert_failed>
 800f1ae:	e7c1      	b.n	800f134 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f1b0:	f641 5110 	movw	r1, #7440	; 0x1d10
 800f1b4:	4818      	ldr	r0, [pc, #96]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1b6:	f7f5 f85d 	bl	8004274 <assert_failed>
 800f1ba:	e76e      	b.n	800f09a <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f1bc:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800f1c0:	4815      	ldr	r0, [pc, #84]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1c2:	f7f5 f857 	bl	8004274 <assert_failed>
 800f1c6:	e653      	b.n	800ee70 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f1c8:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800f1cc:	4812      	ldr	r0, [pc, #72]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1ce:	f7f5 f851 	bl	8004274 <assert_failed>
 800f1d2:	e63e      	b.n	800ee52 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f1d4:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800f1d8:	480f      	ldr	r0, [pc, #60]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1da:	f7f5 f84b 	bl	8004274 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f1de:	2000      	movs	r0, #0
}
 800f1e0:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f1e2:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800f1e6:	480c      	ldr	r0, [pc, #48]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1e8:	f7f5 f844 	bl	8004274 <assert_failed>
 800f1ec:	e799      	b.n	800f122 <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f1ee:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800f1f2:	4809      	ldr	r0, [pc, #36]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f1f4:	f7f5 f83e 	bl	8004274 <assert_failed>
 800f1f8:	e6d3      	b.n	800efa2 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f1fa:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800f1fe:	4806      	ldr	r0, [pc, #24]	; (800f218 <TIM_SlaveTimer_SetConfig+0x458>)
 800f200:	f7f5 f838 	bl	8004274 <assert_failed>
 800f204:	e73f      	b.n	800f086 <TIM_SlaveTimer_SetConfig+0x2c6>
 800f206:	bf00      	nop
 800f208:	40010000 	.word	0x40010000
 800f20c:	40000400 	.word	0x40000400
 800f210:	40002000 	.word	0x40002000
 800f214:	40001800 	.word	0x40001800
 800f218:	0802c544 	.word	0x0802c544

0800f21c <HAL_TIM_Base_Start>:
{
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f220:	4b52      	ldr	r3, [pc, #328]	; (800f36c <HAL_TIM_Base_Start+0x150>)
 800f222:	4d53      	ldr	r5, [pc, #332]	; (800f370 <HAL_TIM_Base_Start+0x154>)
 800f224:	6822      	ldr	r2, [r4, #0]
 800f226:	4953      	ldr	r1, [pc, #332]	; (800f374 <HAL_TIM_Base_Start+0x158>)
 800f228:	429a      	cmp	r2, r3
 800f22a:	bf18      	it	ne
 800f22c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f230:	4851      	ldr	r0, [pc, #324]	; (800f378 <HAL_TIM_Base_Start+0x15c>)
 800f232:	bf14      	ite	ne
 800f234:	2301      	movne	r3, #1
 800f236:	2300      	moveq	r3, #0
 800f238:	42aa      	cmp	r2, r5
 800f23a:	bf0c      	ite	eq
 800f23c:	2300      	moveq	r3, #0
 800f23e:	f003 0301 	andne.w	r3, r3, #1
 800f242:	428a      	cmp	r2, r1
 800f244:	bf0c      	ite	eq
 800f246:	2300      	moveq	r3, #0
 800f248:	f003 0301 	andne.w	r3, r3, #1
 800f24c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f250:	4282      	cmp	r2, r0
 800f252:	bf0c      	ite	eq
 800f254:	2300      	moveq	r3, #0
 800f256:	f003 0301 	andne.w	r3, r3, #1
 800f25a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f25e:	428a      	cmp	r2, r1
 800f260:	bf0c      	ite	eq
 800f262:	2300      	moveq	r3, #0
 800f264:	f003 0301 	andne.w	r3, r3, #1
 800f268:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f26c:	4282      	cmp	r2, r0
 800f26e:	bf0c      	ite	eq
 800f270:	2300      	moveq	r3, #0
 800f272:	f003 0301 	andne.w	r3, r3, #1
 800f276:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f27a:	428a      	cmp	r2, r1
 800f27c:	bf0c      	ite	eq
 800f27e:	2300      	moveq	r3, #0
 800f280:	f003 0301 	andne.w	r3, r3, #1
 800f284:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f288:	4282      	cmp	r2, r0
 800f28a:	bf0c      	ite	eq
 800f28c:	2300      	moveq	r3, #0
 800f28e:	f003 0301 	andne.w	r3, r3, #1
 800f292:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f296:	428a      	cmp	r2, r1
 800f298:	bf0c      	ite	eq
 800f29a:	2300      	moveq	r3, #0
 800f29c:	f003 0301 	andne.w	r3, r3, #1
 800f2a0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f2a4:	4282      	cmp	r2, r0
 800f2a6:	bf0c      	ite	eq
 800f2a8:	2300      	moveq	r3, #0
 800f2aa:	f003 0301 	andne.w	r3, r3, #1
 800f2ae:	428a      	cmp	r2, r1
 800f2b0:	bf0c      	ite	eq
 800f2b2:	2300      	moveq	r3, #0
 800f2b4:	f003 0301 	andne.w	r3, r3, #1
 800f2b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2bc:	428a      	cmp	r2, r1
 800f2be:	bf0c      	ite	eq
 800f2c0:	2300      	moveq	r3, #0
 800f2c2:	f003 0301 	andne.w	r3, r3, #1
 800f2c6:	b113      	cbz	r3, 800f2ce <HAL_TIM_Base_Start+0xb2>
 800f2c8:	4b2c      	ldr	r3, [pc, #176]	; (800f37c <HAL_TIM_Base_Start+0x160>)
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d143      	bne.n	800f356 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800f2ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d13b      	bne.n	800f34e <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2d6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d8:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2da:	4b24      	ldr	r3, [pc, #144]	; (800f36c <HAL_TIM_Base_Start+0x150>)
 800f2dc:	4d24      	ldr	r5, [pc, #144]	; (800f370 <HAL_TIM_Base_Start+0x154>)
 800f2de:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f2e2:	bf18      	it	ne
 800f2e4:	429a      	cmpne	r2, r3
 800f2e6:	4923      	ldr	r1, [pc, #140]	; (800f374 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f2e8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2ec:	bf0c      	ite	eq
 800f2ee:	2301      	moveq	r3, #1
 800f2f0:	2300      	movne	r3, #0
 800f2f2:	4c21      	ldr	r4, [pc, #132]	; (800f378 <HAL_TIM_Base_Start+0x15c>)
 800f2f4:	42aa      	cmp	r2, r5
 800f2f6:	bf08      	it	eq
 800f2f8:	f043 0301 	orreq.w	r3, r3, #1
 800f2fc:	4820      	ldr	r0, [pc, #128]	; (800f380 <HAL_TIM_Base_Start+0x164>)
 800f2fe:	428a      	cmp	r2, r1
 800f300:	bf08      	it	eq
 800f302:	f043 0301 	orreq.w	r3, r3, #1
 800f306:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f30a:	42a2      	cmp	r2, r4
 800f30c:	bf08      	it	eq
 800f30e:	f043 0301 	orreq.w	r3, r3, #1
 800f312:	4282      	cmp	r2, r0
 800f314:	bf08      	it	eq
 800f316:	f043 0301 	orreq.w	r3, r3, #1
 800f31a:	428a      	cmp	r2, r1
 800f31c:	bf08      	it	eq
 800f31e:	f043 0301 	orreq.w	r3, r3, #1
 800f322:	b933      	cbnz	r3, 800f332 <HAL_TIM_Base_Start+0x116>
 800f324:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f328:	1a10      	subs	r0, r2, r0
 800f32a:	fab0 f080 	clz	r0, r0
 800f32e:	0940      	lsrs	r0, r0, #5
 800f330:	b1b8      	cbz	r0, 800f362 <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f332:	6891      	ldr	r1, [r2, #8]
 800f334:	4b13      	ldr	r3, [pc, #76]	; (800f384 <HAL_TIM_Base_Start+0x168>)
 800f336:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f338:	2b06      	cmp	r3, #6
 800f33a:	d00a      	beq.n	800f352 <HAL_TIM_Base_Start+0x136>
 800f33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f340:	d007      	beq.n	800f352 <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800f342:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f344:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f346:	f043 0301 	orr.w	r3, r3, #1
 800f34a:	6013      	str	r3, [r2, #0]
}
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f34e:	2001      	movs	r0, #1
}
 800f350:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f352:	2000      	movs	r0, #0
}
 800f354:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f356:	f240 1197 	movw	r1, #407	; 0x197
 800f35a:	480b      	ldr	r0, [pc, #44]	; (800f388 <HAL_TIM_Base_Start+0x16c>)
 800f35c:	f7f4 ff8a 	bl	8004274 <assert_failed>
 800f360:	e7b5      	b.n	800f2ce <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f362:	6813      	ldr	r3, [r2, #0]
 800f364:	f043 0301 	orr.w	r3, r3, #1
 800f368:	6013      	str	r3, [r2, #0]
}
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	40010000 	.word	0x40010000
 800f370:	40000400 	.word	0x40000400
 800f374:	40000800 	.word	0x40000800
 800f378:	40000c00 	.word	0x40000c00
 800f37c:	40002000 	.word	0x40002000
 800f380:	40010400 	.word	0x40010400
 800f384:	00010007 	.word	0x00010007
 800f388:	0802c544 	.word	0x0802c544

0800f38c <HAL_TIM_Base_Start_IT>:
{
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f390:	4b54      	ldr	r3, [pc, #336]	; (800f4e4 <HAL_TIM_Base_Start_IT+0x158>)
 800f392:	4d55      	ldr	r5, [pc, #340]	; (800f4e8 <HAL_TIM_Base_Start_IT+0x15c>)
 800f394:	6822      	ldr	r2, [r4, #0]
 800f396:	4955      	ldr	r1, [pc, #340]	; (800f4ec <HAL_TIM_Base_Start_IT+0x160>)
 800f398:	429a      	cmp	r2, r3
 800f39a:	bf18      	it	ne
 800f39c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f3a0:	4853      	ldr	r0, [pc, #332]	; (800f4f0 <HAL_TIM_Base_Start_IT+0x164>)
 800f3a2:	bf14      	ite	ne
 800f3a4:	2301      	movne	r3, #1
 800f3a6:	2300      	moveq	r3, #0
 800f3a8:	42aa      	cmp	r2, r5
 800f3aa:	bf0c      	ite	eq
 800f3ac:	2300      	moveq	r3, #0
 800f3ae:	f003 0301 	andne.w	r3, r3, #1
 800f3b2:	428a      	cmp	r2, r1
 800f3b4:	bf0c      	ite	eq
 800f3b6:	2300      	moveq	r3, #0
 800f3b8:	f003 0301 	andne.w	r3, r3, #1
 800f3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3c0:	4282      	cmp	r2, r0
 800f3c2:	bf0c      	ite	eq
 800f3c4:	2300      	moveq	r3, #0
 800f3c6:	f003 0301 	andne.w	r3, r3, #1
 800f3ca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f3ce:	428a      	cmp	r2, r1
 800f3d0:	bf0c      	ite	eq
 800f3d2:	2300      	moveq	r3, #0
 800f3d4:	f003 0301 	andne.w	r3, r3, #1
 800f3d8:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f3dc:	4282      	cmp	r2, r0
 800f3de:	bf0c      	ite	eq
 800f3e0:	2300      	moveq	r3, #0
 800f3e2:	f003 0301 	andne.w	r3, r3, #1
 800f3e6:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f3ea:	428a      	cmp	r2, r1
 800f3ec:	bf0c      	ite	eq
 800f3ee:	2300      	moveq	r3, #0
 800f3f0:	f003 0301 	andne.w	r3, r3, #1
 800f3f4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f3f8:	4282      	cmp	r2, r0
 800f3fa:	bf0c      	ite	eq
 800f3fc:	2300      	moveq	r3, #0
 800f3fe:	f003 0301 	andne.w	r3, r3, #1
 800f402:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f406:	428a      	cmp	r2, r1
 800f408:	bf0c      	ite	eq
 800f40a:	2300      	moveq	r3, #0
 800f40c:	f003 0301 	andne.w	r3, r3, #1
 800f410:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f414:	4282      	cmp	r2, r0
 800f416:	bf0c      	ite	eq
 800f418:	2300      	moveq	r3, #0
 800f41a:	f003 0301 	andne.w	r3, r3, #1
 800f41e:	428a      	cmp	r2, r1
 800f420:	bf0c      	ite	eq
 800f422:	2300      	moveq	r3, #0
 800f424:	f003 0301 	andne.w	r3, r3, #1
 800f428:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f42c:	428a      	cmp	r2, r1
 800f42e:	bf0c      	ite	eq
 800f430:	2300      	moveq	r3, #0
 800f432:	f003 0301 	andne.w	r3, r3, #1
 800f436:	b113      	cbz	r3, 800f43e <HAL_TIM_Base_Start_IT+0xb2>
 800f438:	4b2e      	ldr	r3, [pc, #184]	; (800f4f4 <HAL_TIM_Base_Start_IT+0x168>)
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d147      	bne.n	800f4ce <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800f43e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f442:	2b01      	cmp	r3, #1
 800f444:	d13f      	bne.n	800f4c6 <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f446:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f448:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f44a:	4b26      	ldr	r3, [pc, #152]	; (800f4e4 <HAL_TIM_Base_Start_IT+0x158>)
 800f44c:	4d26      	ldr	r5, [pc, #152]	; (800f4e8 <HAL_TIM_Base_Start_IT+0x15c>)
 800f44e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f452:	bf18      	it	ne
 800f454:	429a      	cmpne	r2, r3
 800f456:	4825      	ldr	r0, [pc, #148]	; (800f4ec <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f458:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f45c:	bf0c      	ite	eq
 800f45e:	2301      	moveq	r3, #1
 800f460:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f462:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f464:	42aa      	cmp	r2, r5
 800f466:	bf08      	it	eq
 800f468:	f043 0301 	orreq.w	r3, r3, #1
 800f46c:	4c20      	ldr	r4, [pc, #128]	; (800f4f0 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f46e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f472:	4282      	cmp	r2, r0
 800f474:	bf08      	it	eq
 800f476:	f043 0301 	orreq.w	r3, r3, #1
 800f47a:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f47e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f480:	42a2      	cmp	r2, r4
 800f482:	bf08      	it	eq
 800f484:	f043 0301 	orreq.w	r3, r3, #1
 800f488:	491b      	ldr	r1, [pc, #108]	; (800f4f8 <HAL_TIM_Base_Start_IT+0x16c>)
 800f48a:	4282      	cmp	r2, r0
 800f48c:	bf08      	it	eq
 800f48e:	f043 0301 	orreq.w	r3, r3, #1
 800f492:	428a      	cmp	r2, r1
 800f494:	bf08      	it	eq
 800f496:	f043 0301 	orreq.w	r3, r3, #1
 800f49a:	b933      	cbnz	r3, 800f4aa <HAL_TIM_Base_Start_IT+0x11e>
 800f49c:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f4a0:	1a10      	subs	r0, r2, r0
 800f4a2:	fab0 f080 	clz	r0, r0
 800f4a6:	0940      	lsrs	r0, r0, #5
 800f4a8:	b1b8      	cbz	r0, 800f4da <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4aa:	6891      	ldr	r1, [r2, #8]
 800f4ac:	4b13      	ldr	r3, [pc, #76]	; (800f4fc <HAL_TIM_Base_Start_IT+0x170>)
 800f4ae:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4b0:	2b06      	cmp	r3, #6
 800f4b2:	d00a      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x13e>
 800f4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4b8:	d007      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800f4ba:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f4bc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f4be:	f043 0301 	orr.w	r3, r3, #1
 800f4c2:	6013      	str	r3, [r2, #0]
}
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f4c6:	2001      	movs	r0, #1
}
 800f4c8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f4ca:	2000      	movs	r0, #0
}
 800f4cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f4ce:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800f4d2:	480b      	ldr	r0, [pc, #44]	; (800f500 <HAL_TIM_Base_Start_IT+0x174>)
 800f4d4:	f7f4 fece 	bl	8004274 <assert_failed>
 800f4d8:	e7b1      	b.n	800f43e <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f4da:	6813      	ldr	r3, [r2, #0]
 800f4dc:	f043 0301 	orr.w	r3, r3, #1
 800f4e0:	6013      	str	r3, [r2, #0]
}
 800f4e2:	bd38      	pop	{r3, r4, r5, pc}
 800f4e4:	40010000 	.word	0x40010000
 800f4e8:	40000400 	.word	0x40000400
 800f4ec:	40000800 	.word	0x40000800
 800f4f0:	40000c00 	.word	0x40000c00
 800f4f4:	40002000 	.word	0x40002000
 800f4f8:	40014000 	.word	0x40014000
 800f4fc:	00010007 	.word	0x00010007
 800f500:	0802c544 	.word	0x0802c544

0800f504 <HAL_TIM_OC_MspInit>:
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop

0800f508 <HAL_TIM_PWM_MspInit>:
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop

0800f50c <HAL_TIM_IC_MspInit>:
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop

0800f510 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f510:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f514:	2b01      	cmp	r3, #1
 800f516:	f000 8151 	beq.w	800f7bc <HAL_TIM_ConfigClockSource+0x2ac>
 800f51a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f51c:	2302      	movs	r3, #2
{
 800f51e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800f520:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f524:	460d      	mov	r5, r1
 800f526:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f52a:	4604      	mov	r4, r0
 800f52c:	680b      	ldr	r3, [r1, #0]
 800f52e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f532:	bf18      	it	ne
 800f534:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800f538:	bf14      	ite	ne
 800f53a:	2201      	movne	r2, #1
 800f53c:	2200      	moveq	r2, #0
 800f53e:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800f542:	f002 0201 	and.w	r2, r2, #1
 800f546:	bf08      	it	eq
 800f548:	2200      	moveq	r2, #0
 800f54a:	b112      	cbz	r2, 800f552 <HAL_TIM_ConfigClockSource+0x42>
 800f54c:	2940      	cmp	r1, #64	; 0x40
 800f54e:	f040 8267 	bne.w	800fa20 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800f552:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800f554:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f556:	499a      	ldr	r1, [pc, #616]	; (800f7c0 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800f558:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f55a:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f55e:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f560:	f000 8138 	beq.w	800f7d4 <HAL_TIM_ConfigClockSource+0x2c4>
 800f564:	d84f      	bhi.n	800f606 <HAL_TIM_ConfigClockSource+0xf6>
 800f566:	2b40      	cmp	r3, #64	; 0x40
 800f568:	f000 81d7 	beq.w	800f91a <HAL_TIM_ConfigClockSource+0x40a>
 800f56c:	f240 80a2 	bls.w	800f6b4 <HAL_TIM_ConfigClockSource+0x1a4>
 800f570:	2b50      	cmp	r3, #80	; 0x50
 800f572:	f040 8097 	bne.w	800f6a4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f576:	4b93      	ldr	r3, [pc, #588]	; (800f7c4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f578:	4993      	ldr	r1, [pc, #588]	; (800f7c8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f57a:	429a      	cmp	r2, r3
 800f57c:	bf18      	it	ne
 800f57e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f582:	bf14      	ite	ne
 800f584:	2301      	movne	r3, #1
 800f586:	2300      	moveq	r3, #0
 800f588:	428a      	cmp	r2, r1
 800f58a:	bf0c      	ite	eq
 800f58c:	2300      	moveq	r3, #0
 800f58e:	f003 0301 	andne.w	r3, r3, #1
 800f592:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f596:	428a      	cmp	r2, r1
 800f598:	bf0c      	ite	eq
 800f59a:	2300      	moveq	r3, #0
 800f59c:	f003 0301 	andne.w	r3, r3, #1
 800f5a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f5a4:	428a      	cmp	r2, r1
 800f5a6:	bf0c      	ite	eq
 800f5a8:	2300      	moveq	r3, #0
 800f5aa:	f003 0301 	andne.w	r3, r3, #1
 800f5ae:	b11b      	cbz	r3, 800f5b8 <HAL_TIM_ConfigClockSource+0xa8>
 800f5b0:	4b86      	ldr	r3, [pc, #536]	; (800f7cc <HAL_TIM_ConfigClockSource+0x2bc>)
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	f040 8222 	bne.w	800f9fc <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f5b8:	686b      	ldr	r3, [r5, #4]
 800f5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5be:	bf18      	it	ne
 800f5c0:	2b0a      	cmpne	r3, #10
 800f5c2:	d003      	beq.n	800f5cc <HAL_TIM_ConfigClockSource+0xbc>
 800f5c4:	f033 0302 	bics.w	r3, r3, #2
 800f5c8:	f040 81fe 	bne.w	800f9c8 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f5cc:	68ee      	ldr	r6, [r5, #12]
 800f5ce:	2e0f      	cmp	r6, #15
 800f5d0:	f200 8242 	bhi.w	800fa58 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f5d8:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5da:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5dc:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e0:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f5e4:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f5e6:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ea:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f5f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5f6:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f5f8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f5fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f5fe:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f602:	609a      	str	r2, [r3, #8]
}
 800f604:	e04f      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f60a:	f000 812c 	beq.w	800f866 <HAL_TIM_ConfigClockSource+0x356>
 800f60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f612:	d17e      	bne.n	800f712 <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f614:	4b6b      	ldr	r3, [pc, #428]	; (800f7c4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f616:	496c      	ldr	r1, [pc, #432]	; (800f7c8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f618:	429a      	cmp	r2, r3
 800f61a:	bf18      	it	ne
 800f61c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f620:	bf14      	ite	ne
 800f622:	2301      	movne	r3, #1
 800f624:	2300      	moveq	r3, #0
 800f626:	428a      	cmp	r2, r1
 800f628:	bf0c      	ite	eq
 800f62a:	2300      	moveq	r3, #0
 800f62c:	f003 0301 	andne.w	r3, r3, #1
 800f630:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f634:	428a      	cmp	r2, r1
 800f636:	bf0c      	ite	eq
 800f638:	2300      	moveq	r3, #0
 800f63a:	f003 0301 	andne.w	r3, r3, #1
 800f63e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f642:	428a      	cmp	r2, r1
 800f644:	bf0c      	ite	eq
 800f646:	2300      	moveq	r3, #0
 800f648:	f003 0301 	andne.w	r3, r3, #1
 800f64c:	b11b      	cbz	r3, 800f656 <HAL_TIM_ConfigClockSource+0x146>
 800f64e:	4b5f      	ldr	r3, [pc, #380]	; (800f7cc <HAL_TIM_ConfigClockSource+0x2bc>)
 800f650:	429a      	cmp	r2, r3
 800f652:	f040 81c5 	bne.w	800f9e0 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f656:	68ab      	ldr	r3, [r5, #8]
 800f658:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f65c:	f040 8210 	bne.w	800fa80 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f660:	686b      	ldr	r3, [r5, #4]
 800f662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f666:	bf18      	it	ne
 800f668:	2b0a      	cmpne	r3, #10
 800f66a:	d003      	beq.n	800f674 <HAL_TIM_ConfigClockSource+0x164>
 800f66c:	f033 0302 	bics.w	r3, r3, #2
 800f670:	f040 81a4 	bne.w	800f9bc <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f674:	68ee      	ldr	r6, [r5, #12]
 800f676:	2e0f      	cmp	r6, #15
 800f678:	f200 81d9 	bhi.w	800fa2e <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800f67c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f67e:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f682:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f684:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f686:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f688:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f68c:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f68e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f692:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f694:	6893      	ldr	r3, [r2, #8]
 800f696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f69a:	6093      	str	r3, [r2, #8]
      break;
 800f69c:	e003      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f69e:	f033 0110 	bics.w	r1, r3, #16
 800f6a2:	d00c      	beq.n	800f6be <HAL_TIM_ConfigClockSource+0x1ae>
 800f6a4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800f6a6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800f6a8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800f6aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f6ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800f6b4:	2b20      	cmp	r3, #32
 800f6b6:	d002      	beq.n	800f6be <HAL_TIM_ConfigClockSource+0x1ae>
 800f6b8:	d9f1      	bls.n	800f69e <HAL_TIM_ConfigClockSource+0x18e>
 800f6ba:	2b30      	cmp	r3, #48	; 0x30
 800f6bc:	d1f2      	bne.n	800f6a4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f6be:	4941      	ldr	r1, [pc, #260]	; (800f7c4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f6c0:	4841      	ldr	r0, [pc, #260]	; (800f7c8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f6c2:	428a      	cmp	r2, r1
 800f6c4:	bf18      	it	ne
 800f6c6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f6ca:	bf14      	ite	ne
 800f6cc:	2101      	movne	r1, #1
 800f6ce:	2100      	moveq	r1, #0
 800f6d0:	4282      	cmp	r2, r0
 800f6d2:	bf0c      	ite	eq
 800f6d4:	2100      	moveq	r1, #0
 800f6d6:	f001 0101 	andne.w	r1, r1, #1
 800f6da:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f6de:	4282      	cmp	r2, r0
 800f6e0:	bf0c      	ite	eq
 800f6e2:	2100      	moveq	r1, #0
 800f6e4:	f001 0101 	andne.w	r1, r1, #1
 800f6e8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f6ec:	4282      	cmp	r2, r0
 800f6ee:	bf0c      	ite	eq
 800f6f0:	2100      	moveq	r1, #0
 800f6f2:	f001 0101 	andne.w	r1, r1, #1
 800f6f6:	b119      	cbz	r1, 800f700 <HAL_TIM_ConfigClockSource+0x1f0>
 800f6f8:	4934      	ldr	r1, [pc, #208]	; (800f7cc <HAL_TIM_ConfigClockSource+0x2bc>)
 800f6fa:	428a      	cmp	r2, r1
 800f6fc:	f040 8176 	bne.w	800f9ec <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800f700:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f702:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800f704:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f708:	430b      	orrs	r3, r1
 800f70a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800f70e:	6093      	str	r3, [r2, #8]
}
 800f710:	e7c9      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f712:	2b70      	cmp	r3, #112	; 0x70
 800f714:	d1c6      	bne.n	800f6a4 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f716:	4b2b      	ldr	r3, [pc, #172]	; (800f7c4 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f718:	492b      	ldr	r1, [pc, #172]	; (800f7c8 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f71a:	429a      	cmp	r2, r3
 800f71c:	bf18      	it	ne
 800f71e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f722:	bf14      	ite	ne
 800f724:	2301      	movne	r3, #1
 800f726:	2300      	moveq	r3, #0
 800f728:	428a      	cmp	r2, r1
 800f72a:	bf0c      	ite	eq
 800f72c:	2300      	moveq	r3, #0
 800f72e:	f003 0301 	andne.w	r3, r3, #1
 800f732:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f736:	428a      	cmp	r2, r1
 800f738:	bf0c      	ite	eq
 800f73a:	2300      	moveq	r3, #0
 800f73c:	f003 0301 	andne.w	r3, r3, #1
 800f740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f744:	428a      	cmp	r2, r1
 800f746:	bf0c      	ite	eq
 800f748:	2300      	moveq	r3, #0
 800f74a:	f003 0301 	andne.w	r3, r3, #1
 800f74e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f752:	428a      	cmp	r2, r1
 800f754:	bf0c      	ite	eq
 800f756:	2300      	moveq	r3, #0
 800f758:	f003 0301 	andne.w	r3, r3, #1
 800f75c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f760:	428a      	cmp	r2, r1
 800f762:	bf0c      	ite	eq
 800f764:	2300      	moveq	r3, #0
 800f766:	f003 0301 	andne.w	r3, r3, #1
 800f76a:	b11b      	cbz	r3, 800f774 <HAL_TIM_ConfigClockSource+0x264>
 800f76c:	4b18      	ldr	r3, [pc, #96]	; (800f7d0 <HAL_TIM_ConfigClockSource+0x2c0>)
 800f76e:	429a      	cmp	r2, r3
 800f770:	f040 818c 	bne.w	800fa8c <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f774:	68ab      	ldr	r3, [r5, #8]
 800f776:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f77a:	f040 817b 	bne.w	800fa74 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f77e:	686b      	ldr	r3, [r5, #4]
 800f780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f784:	bf18      	it	ne
 800f786:	2b0a      	cmpne	r3, #10
 800f788:	d003      	beq.n	800f792 <HAL_TIM_ConfigClockSource+0x282>
 800f78a:	f033 0302 	bics.w	r3, r3, #2
 800f78e:	f040 8121 	bne.w	800f9d4 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f792:	68ee      	ldr	r6, [r5, #12]
 800f794:	2e0f      	cmp	r6, #15
 800f796:	f200 8166 	bhi.w	800fa66 <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800f79a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f79c:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f7a0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7a2:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f7a4:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7a6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f7aa:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7ac:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f7b0:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800f7b2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f7b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800f7b8:	6093      	str	r3, [r2, #8]
      break;
 800f7ba:	e774      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800f7bc:	2002      	movs	r0, #2
}
 800f7be:	4770      	bx	lr
 800f7c0:	fffe0088 	.word	0xfffe0088
 800f7c4:	40010000 	.word	0x40010000
 800f7c8:	40000400 	.word	0x40000400
 800f7cc:	40010400 	.word	0x40010400
 800f7d0:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f7d4:	4bb0      	ldr	r3, [pc, #704]	; (800fa98 <HAL_TIM_ConfigClockSource+0x588>)
 800f7d6:	49b1      	ldr	r1, [pc, #708]	; (800fa9c <HAL_TIM_ConfigClockSource+0x58c>)
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	bf18      	it	ne
 800f7dc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f7e0:	bf14      	ite	ne
 800f7e2:	2301      	movne	r3, #1
 800f7e4:	2300      	moveq	r3, #0
 800f7e6:	428a      	cmp	r2, r1
 800f7e8:	bf0c      	ite	eq
 800f7ea:	2300      	moveq	r3, #0
 800f7ec:	f003 0301 	andne.w	r3, r3, #1
 800f7f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f7f4:	428a      	cmp	r2, r1
 800f7f6:	bf0c      	ite	eq
 800f7f8:	2300      	moveq	r3, #0
 800f7fa:	f003 0301 	andne.w	r3, r3, #1
 800f7fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f802:	428a      	cmp	r2, r1
 800f804:	bf0c      	ite	eq
 800f806:	2300      	moveq	r3, #0
 800f808:	f003 0301 	andne.w	r3, r3, #1
 800f80c:	b11b      	cbz	r3, 800f816 <HAL_TIM_ConfigClockSource+0x306>
 800f80e:	4ba4      	ldr	r3, [pc, #656]	; (800faa0 <HAL_TIM_ConfigClockSource+0x590>)
 800f810:	429a      	cmp	r2, r3
 800f812:	f040 80ff 	bne.w	800fa14 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f816:	686b      	ldr	r3, [r5, #4]
 800f818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f81c:	bf18      	it	ne
 800f81e:	2b0a      	cmpne	r3, #10
 800f820:	d003      	beq.n	800f82a <HAL_TIM_ConfigClockSource+0x31a>
 800f822:	f033 0302 	bics.w	r3, r3, #2
 800f826:	f040 80c3 	bne.w	800f9b0 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f82a:	68ee      	ldr	r6, [r5, #12]
 800f82c:	2e0f      	cmp	r6, #15
 800f82e:	f200 810c 	bhi.w	800fa4a <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f836:	6a18      	ldr	r0, [r3, #32]
 800f838:	f020 0010 	bic.w	r0, r0, #16
 800f83c:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f83e:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f840:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f842:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f844:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f848:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f84c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f850:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f854:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f856:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f858:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f85a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f85e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800f862:	609a      	str	r2, [r3, #8]
}
 800f864:	e71f      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f866:	4b8c      	ldr	r3, [pc, #560]	; (800fa98 <HAL_TIM_ConfigClockSource+0x588>)
 800f868:	488c      	ldr	r0, [pc, #560]	; (800fa9c <HAL_TIM_ConfigClockSource+0x58c>)
 800f86a:	429a      	cmp	r2, r3
 800f86c:	bf18      	it	ne
 800f86e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f872:	498c      	ldr	r1, [pc, #560]	; (800faa4 <HAL_TIM_ConfigClockSource+0x594>)
 800f874:	bf14      	ite	ne
 800f876:	2301      	movne	r3, #1
 800f878:	2300      	moveq	r3, #0
 800f87a:	4282      	cmp	r2, r0
 800f87c:	bf0c      	ite	eq
 800f87e:	2300      	moveq	r3, #0
 800f880:	f003 0301 	andne.w	r3, r3, #1
 800f884:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f888:	428a      	cmp	r2, r1
 800f88a:	bf0c      	ite	eq
 800f88c:	2300      	moveq	r3, #0
 800f88e:	f003 0301 	andne.w	r3, r3, #1
 800f892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f896:	4282      	cmp	r2, r0
 800f898:	bf0c      	ite	eq
 800f89a:	2300      	moveq	r3, #0
 800f89c:	f003 0301 	andne.w	r3, r3, #1
 800f8a0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f8a4:	428a      	cmp	r2, r1
 800f8a6:	bf0c      	ite	eq
 800f8a8:	2300      	moveq	r3, #0
 800f8aa:	f003 0301 	andne.w	r3, r3, #1
 800f8ae:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f8b2:	4282      	cmp	r2, r0
 800f8b4:	bf0c      	ite	eq
 800f8b6:	2300      	moveq	r3, #0
 800f8b8:	f003 0301 	andne.w	r3, r3, #1
 800f8bc:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f8c0:	428a      	cmp	r2, r1
 800f8c2:	bf0c      	ite	eq
 800f8c4:	2300      	moveq	r3, #0
 800f8c6:	f003 0301 	andne.w	r3, r3, #1
 800f8ca:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f8ce:	4282      	cmp	r2, r0
 800f8d0:	bf0c      	ite	eq
 800f8d2:	2300      	moveq	r3, #0
 800f8d4:	f003 0301 	andne.w	r3, r3, #1
 800f8d8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f8dc:	428a      	cmp	r2, r1
 800f8de:	bf0c      	ite	eq
 800f8e0:	2300      	moveq	r3, #0
 800f8e2:	f003 0301 	andne.w	r3, r3, #1
 800f8e6:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f8ea:	4282      	cmp	r2, r0
 800f8ec:	bf0c      	ite	eq
 800f8ee:	2300      	moveq	r3, #0
 800f8f0:	f003 0301 	andne.w	r3, r3, #1
 800f8f4:	428a      	cmp	r2, r1
 800f8f6:	bf0c      	ite	eq
 800f8f8:	2300      	moveq	r3, #0
 800f8fa:	f003 0301 	andne.w	r3, r3, #1
 800f8fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f902:	428a      	cmp	r2, r1
 800f904:	bf0c      	ite	eq
 800f906:	2300      	moveq	r3, #0
 800f908:	f003 0301 	andne.w	r3, r3, #1
 800f90c:	b11b      	cbz	r3, 800f916 <HAL_TIM_ConfigClockSource+0x406>
 800f90e:	4b66      	ldr	r3, [pc, #408]	; (800faa8 <HAL_TIM_ConfigClockSource+0x598>)
 800f910:	429a      	cmp	r2, r3
 800f912:	f040 80cd 	bne.w	800fab0 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800f916:	2000      	movs	r0, #0
 800f918:	e6c5      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f91a:	4b5f      	ldr	r3, [pc, #380]	; (800fa98 <HAL_TIM_ConfigClockSource+0x588>)
 800f91c:	495f      	ldr	r1, [pc, #380]	; (800fa9c <HAL_TIM_ConfigClockSource+0x58c>)
 800f91e:	429a      	cmp	r2, r3
 800f920:	bf18      	it	ne
 800f922:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f926:	bf14      	ite	ne
 800f928:	2301      	movne	r3, #1
 800f92a:	2300      	moveq	r3, #0
 800f92c:	428a      	cmp	r2, r1
 800f92e:	bf0c      	ite	eq
 800f930:	2300      	moveq	r3, #0
 800f932:	f003 0301 	andne.w	r3, r3, #1
 800f936:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f93a:	428a      	cmp	r2, r1
 800f93c:	bf0c      	ite	eq
 800f93e:	2300      	moveq	r3, #0
 800f940:	f003 0301 	andne.w	r3, r3, #1
 800f944:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f948:	428a      	cmp	r2, r1
 800f94a:	bf0c      	ite	eq
 800f94c:	2300      	moveq	r3, #0
 800f94e:	f003 0301 	andne.w	r3, r3, #1
 800f952:	b113      	cbz	r3, 800f95a <HAL_TIM_ConfigClockSource+0x44a>
 800f954:	4b52      	ldr	r3, [pc, #328]	; (800faa0 <HAL_TIM_ConfigClockSource+0x590>)
 800f956:	429a      	cmp	r2, r3
 800f958:	d156      	bne.n	800fa08 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f95a:	686b      	ldr	r3, [r5, #4]
 800f95c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f960:	bf18      	it	ne
 800f962:	2b0a      	cmpne	r3, #10
 800f964:	d002      	beq.n	800f96c <HAL_TIM_ConfigClockSource+0x45c>
 800f966:	f033 0302 	bics.w	r3, r3, #2
 800f96a:	d11b      	bne.n	800f9a4 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f96c:	68ee      	ldr	r6, [r5, #12]
 800f96e:	2e0f      	cmp	r6, #15
 800f970:	d864      	bhi.n	800fa3c <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f976:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f978:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f97a:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f97e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f982:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f984:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f986:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f988:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f98a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f98e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f994:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f996:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f998:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f99c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800f9a0:	609a      	str	r2, [r3, #8]
}
 800f9a2:	e680      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9a4:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800f9a8:	4840      	ldr	r0, [pc, #256]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9aa:	f7f4 fc63 	bl	8004274 <assert_failed>
 800f9ae:	e7dd      	b.n	800f96c <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9b0:	f241 5196 	movw	r1, #5526	; 0x1596
 800f9b4:	483d      	ldr	r0, [pc, #244]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9b6:	f7f4 fc5d 	bl	8004274 <assert_failed>
 800f9ba:	e736      	b.n	800f82a <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9bc:	f241 5173 	movw	r1, #5491	; 0x1573
 800f9c0:	483a      	ldr	r0, [pc, #232]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9c2:	f7f4 fc57 	bl	8004274 <assert_failed>
 800f9c6:	e655      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9c8:	f241 5186 	movw	r1, #5510	; 0x1586
 800f9cc:	4837      	ldr	r0, [pc, #220]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9ce:	f7f4 fc51 	bl	8004274 <assert_failed>
 800f9d2:	e5fb      	b.n	800f5cc <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9d4:	f241 515b 	movw	r1, #5467	; 0x155b
 800f9d8:	4834      	ldr	r0, [pc, #208]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9da:	f7f4 fc4b 	bl	8004274 <assert_failed>
 800f9de:	e6d8      	b.n	800f792 <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f9e0:	f241 516f 	movw	r1, #5487	; 0x156f
 800f9e4:	4831      	ldr	r0, [pc, #196]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9e6:	f7f4 fc45 	bl	8004274 <assert_failed>
 800f9ea:	e634      	b.n	800f656 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f9ec:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800f9f0:	482e      	ldr	r0, [pc, #184]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800f9f2:	f7f4 fc3f 	bl	8004274 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f9f6:	6822      	ldr	r2, [r4, #0]
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	e681      	b.n	800f700 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f9fc:	f241 5183 	movw	r1, #5507	; 0x1583
 800fa00:	482a      	ldr	r0, [pc, #168]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa02:	f7f4 fc37 	bl	8004274 <assert_failed>
 800fa06:	e5d7      	b.n	800f5b8 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fa08:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800fa0c:	4827      	ldr	r0, [pc, #156]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa0e:	f7f4 fc31 	bl	8004274 <assert_failed>
 800fa12:	e7a2      	b.n	800f95a <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fa14:	f241 5193 	movw	r1, #5523	; 0x1593
 800fa18:	4824      	ldr	r0, [pc, #144]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa1a:	f7f4 fc2b 	bl	8004274 <assert_failed>
 800fa1e:	e6fa      	b.n	800f816 <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fa20:	f241 5144 	movw	r1, #5444	; 0x1544
 800fa24:	4821      	ldr	r0, [pc, #132]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa26:	f7f4 fc25 	bl	8004274 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800fa2a:	682b      	ldr	r3, [r5, #0]
 800fa2c:	e591      	b.n	800f552 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa2e:	f241 5174 	movw	r1, #5492	; 0x1574
 800fa32:	481e      	ldr	r0, [pc, #120]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa34:	f7f4 fc1e 	bl	8004274 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fa38:	68ee      	ldr	r6, [r5, #12]
 800fa3a:	e61f      	b.n	800f67c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa3c:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800fa40:	481a      	ldr	r0, [pc, #104]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa42:	f7f4 fc17 	bl	8004274 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa46:	68ee      	ldr	r6, [r5, #12]
 800fa48:	e793      	b.n	800f972 <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa4a:	f241 5197 	movw	r1, #5527	; 0x1597
 800fa4e:	4817      	ldr	r0, [pc, #92]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa50:	f7f4 fc10 	bl	8004274 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa54:	68ee      	ldr	r6, [r5, #12]
 800fa56:	e6ec      	b.n	800f832 <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa58:	f241 5187 	movw	r1, #5511	; 0x1587
 800fa5c:	4813      	ldr	r0, [pc, #76]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa5e:	f7f4 fc09 	bl	8004274 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa62:	68ee      	ldr	r6, [r5, #12]
 800fa64:	e5b6      	b.n	800f5d4 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fa66:	f241 515c 	movw	r1, #5468	; 0x155c
 800fa6a:	4810      	ldr	r0, [pc, #64]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa6c:	f7f4 fc02 	bl	8004274 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fa70:	68ee      	ldr	r6, [r5, #12]
 800fa72:	e692      	b.n	800f79a <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fa74:	f241 515a 	movw	r1, #5466	; 0x155a
 800fa78:	480c      	ldr	r0, [pc, #48]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa7a:	f7f4 fbfb 	bl	8004274 <assert_failed>
 800fa7e:	e67e      	b.n	800f77e <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fa80:	f241 5172 	movw	r1, #5490	; 0x1572
 800fa84:	4809      	ldr	r0, [pc, #36]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa86:	f7f4 fbf5 	bl	8004274 <assert_failed>
 800fa8a:	e5e9      	b.n	800f660 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fa8c:	f241 5157 	movw	r1, #5463	; 0x1557
 800fa90:	4806      	ldr	r0, [pc, #24]	; (800faac <HAL_TIM_ConfigClockSource+0x59c>)
 800fa92:	f7f4 fbef 	bl	8004274 <assert_failed>
 800fa96:	e66d      	b.n	800f774 <HAL_TIM_ConfigClockSource+0x264>
 800fa98:	40010000 	.word	0x40010000
 800fa9c:	40000400 	.word	0x40000400
 800faa0:	40010400 	.word	0x40010400
 800faa4:	40000800 	.word	0x40000800
 800faa8:	40002000 	.word	0x40002000
 800faac:	0802c544 	.word	0x0802c544
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fab0:	4803      	ldr	r0, [pc, #12]	; (800fac0 <HAL_TIM_ConfigClockSource+0x5b0>)
 800fab2:	f241 5150 	movw	r1, #5456	; 0x1550
 800fab6:	f7f4 fbdd 	bl	8004274 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800faba:	2000      	movs	r0, #0
 800fabc:	e5f3      	b.n	800f6a6 <HAL_TIM_ConfigClockSource+0x196>
 800fabe:	bf00      	nop
 800fac0:	0802c544 	.word	0x0802c544

0800fac4 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fac4:	6802      	ldr	r2, [r0, #0]
{
 800fac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fac8:	4b39      	ldr	r3, [pc, #228]	; (800fbb0 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800faca:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800facc:	4f39      	ldr	r7, [pc, #228]	; (800fbb4 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800face:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fad0:	429a      	cmp	r2, r3
 800fad2:	bf18      	it	ne
 800fad4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fad8:	4e37      	ldr	r6, [pc, #220]	; (800fbb8 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800fada:	4938      	ldr	r1, [pc, #224]	; (800fbbc <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800fadc:	bf14      	ite	ne
 800fade:	2301      	movne	r3, #1
 800fae0:	2300      	moveq	r3, #0
 800fae2:	42ba      	cmp	r2, r7
 800fae4:	bf0c      	ite	eq
 800fae6:	2300      	moveq	r3, #0
 800fae8:	f003 0301 	andne.w	r3, r3, #1
 800faec:	42b2      	cmp	r2, r6
 800faee:	bf0c      	ite	eq
 800faf0:	2300      	moveq	r3, #0
 800faf2:	f003 0301 	andne.w	r3, r3, #1
 800faf6:	428a      	cmp	r2, r1
 800faf8:	bf0c      	ite	eq
 800fafa:	2300      	moveq	r3, #0
 800fafc:	f003 0301 	andne.w	r3, r3, #1
 800fb00:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800fb04:	428a      	cmp	r2, r1
 800fb06:	bf0c      	ite	eq
 800fb08:	2300      	moveq	r3, #0
 800fb0a:	f003 0301 	andne.w	r3, r3, #1
 800fb0e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800fb12:	428a      	cmp	r2, r1
 800fb14:	bf0c      	ite	eq
 800fb16:	2300      	moveq	r3, #0
 800fb18:	f003 0301 	andne.w	r3, r3, #1
 800fb1c:	b113      	cbz	r3, 800fb24 <HAL_TIM_SlaveConfigSynchro+0x60>
 800fb1e:	4b28      	ldr	r3, [pc, #160]	; (800fbc0 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d138      	bne.n	800fb96 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	1f1a      	subs	r2, r3, #4
 800fb28:	2a03      	cmp	r2, #3
 800fb2a:	d902      	bls.n	800fb32 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800fb2c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800fb30:	d12b      	bne.n	800fb8a <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800fb32:	686b      	ldr	r3, [r5, #4]
 800fb34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800fb38:	2b40      	cmp	r3, #64	; 0x40
 800fb3a:	d000      	beq.n	800fb3e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800fb3c:	bb8b      	cbnz	r3, 800fba2 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800fb3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d01f      	beq.n	800fb86 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800fb46:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800fb48:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800fb4e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800fb52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fb56:	f7ff f933 	bl	800edc0 <TIM_SlaveTimer_SetConfig>
 800fb5a:	b968      	cbnz	r0, 800fb78 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	68da      	ldr	r2, [r3, #12]
 800fb60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb64:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fb66:	68da      	ldr	r2, [r3, #12]
 800fb68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fb6c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800fb6e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fb72:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800fb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800fb78:	2300      	movs	r3, #0
    return HAL_ERROR;
 800fb7a:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800fb7c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fb80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800fb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800fb86:	2002      	movs	r0, #2
}
 800fb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800fb8a:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800fb8e:	480d      	ldr	r0, [pc, #52]	; (800fbc4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800fb90:	f7f4 fb70 	bl	8004274 <assert_failed>
 800fb94:	e7cd      	b.n	800fb32 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fb96:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800fb9a:	480a      	ldr	r0, [pc, #40]	; (800fbc4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800fb9c:	f7f4 fb6a 	bl	8004274 <assert_failed>
 800fba0:	e7c0      	b.n	800fb24 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800fba2:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800fba6:	4807      	ldr	r0, [pc, #28]	; (800fbc4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800fba8:	f7f4 fb64 	bl	8004274 <assert_failed>
 800fbac:	e7c7      	b.n	800fb3e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800fbae:	bf00      	nop
 800fbb0:	40010000 	.word	0x40010000
 800fbb4:	40000400 	.word	0x40000400
 800fbb8:	40000800 	.word	0x40000800
 800fbbc:	40000c00 	.word	0x40000c00
 800fbc0:	40001800 	.word	0x40001800
 800fbc4:	0802c544 	.word	0x0802c544

0800fbc8 <HAL_TIM_OC_DelayElapsedCallback>:
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <TIM_DMACaptureCplt>:
{
 800fbcc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fbd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbd2:	4283      	cmp	r3, r0
 800fbd4:	d01e      	beq.n	800fc14 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fbd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbd8:	4283      	cmp	r3, r0
 800fbda:	d00b      	beq.n	800fbf4 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fbdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbde:	4283      	cmp	r3, r0
 800fbe0:	d027      	beq.n	800fc32 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fbe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	d02f      	beq.n	800fc48 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f7f3 fa53 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	7723      	strb	r3, [r4, #28]
}
 800fbf2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbf4:	2202      	movs	r2, #2
 800fbf6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1f4      	bne.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fbfe:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800fc00:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fc06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800fc0a:	f7f3 fa43 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	7723      	strb	r3, [r4, #28]
}
 800fc12:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc14:	2201      	movs	r2, #1
 800fc16:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fc18:	69db      	ldr	r3, [r3, #28]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1e4      	bne.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc1e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800fc22:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fc24:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800fc28:	f7f3 fa34 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	7723      	strb	r3, [r4, #28]
}
 800fc30:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc32:	2204      	movs	r2, #4
 800fc34:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1d5      	bne.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fc42:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fc46:	e7cf      	b.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc48:	2208      	movs	r2, #8
 800fc4a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fc4c:	69db      	ldr	r3, [r3, #28]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1ca      	bne.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fc52:	2301      	movs	r3, #1
 800fc54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fc58:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fc5c:	e7c4      	b.n	800fbe8 <TIM_DMACaptureCplt+0x1c>
 800fc5e:	bf00      	nop

0800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop

0800fc64 <TIM_DMACaptureHalfCplt>:
{
 800fc64:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc66:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc6a:	4283      	cmp	r3, r0
 800fc6c:	d016      	beq.n	800fc9c <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fc6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc70:	4283      	cmp	r3, r0
 800fc72:	d00b      	beq.n	800fc8c <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fc74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc76:	4283      	cmp	r3, r0
 800fc78:	d018      	beq.n	800fcac <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fc7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc7c:	4283      	cmp	r3, r0
 800fc7e:	d01d      	beq.n	800fcbc <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fc80:	4620      	mov	r0, r4
 800fc82:	f7ff ffed 	bl	800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc86:	2300      	movs	r3, #0
 800fc88:	7723      	strb	r3, [r4, #28]
}
 800fc8a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc8c:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fc8e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc90:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fc92:	f7ff ffe5 	bl	800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc96:	2300      	movs	r3, #0
 800fc98:	7723      	strb	r3, [r4, #28]
}
 800fc9a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc9c:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fc9e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fca0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fca2:	f7ff ffdd 	bl	800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fca6:	2300      	movs	r3, #0
 800fca8:	7723      	strb	r3, [r4, #28]
}
 800fcaa:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcac:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fcae:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcb0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fcb2:	f7ff ffd5 	bl	800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	7723      	strb	r3, [r4, #28]
}
 800fcba:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcbc:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fcbe:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcc0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fcc2:	f7ff ffcd 	bl	800fc60 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	7723      	strb	r3, [r4, #28]
}
 800fcca:	bd10      	pop	{r4, pc}

0800fccc <HAL_TIM_PWM_PulseFinishedCallback>:
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop

0800fcd0 <HAL_TIM_TriggerCallback>:
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop

0800fcd4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fcd4:	6803      	ldr	r3, [r0, #0]
 800fcd6:	691a      	ldr	r2, [r3, #16]
 800fcd8:	0791      	lsls	r1, r2, #30
{
 800fcda:	b510      	push	{r4, lr}
 800fcdc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fcde:	d502      	bpl.n	800fce6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	0792      	lsls	r2, r2, #30
 800fce4:	d468      	bmi.n	800fdb8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fce6:	691a      	ldr	r2, [r3, #16]
 800fce8:	0752      	lsls	r2, r2, #29
 800fcea:	d502      	bpl.n	800fcf2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fcec:	68da      	ldr	r2, [r3, #12]
 800fcee:	0750      	lsls	r0, r2, #29
 800fcf0:	d44f      	bmi.n	800fd92 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcf2:	691a      	ldr	r2, [r3, #16]
 800fcf4:	0711      	lsls	r1, r2, #28
 800fcf6:	d502      	bpl.n	800fcfe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fcf8:	68da      	ldr	r2, [r3, #12]
 800fcfa:	0712      	lsls	r2, r2, #28
 800fcfc:	d437      	bmi.n	800fd6e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fcfe:	691a      	ldr	r2, [r3, #16]
 800fd00:	06d0      	lsls	r0, r2, #27
 800fd02:	d502      	bpl.n	800fd0a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd04:	68da      	ldr	r2, [r3, #12]
 800fd06:	06d1      	lsls	r1, r2, #27
 800fd08:	d41e      	bmi.n	800fd48 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd0a:	691a      	ldr	r2, [r3, #16]
 800fd0c:	07d2      	lsls	r2, r2, #31
 800fd0e:	d502      	bpl.n	800fd16 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd10:	68da      	ldr	r2, [r3, #12]
 800fd12:	07d0      	lsls	r0, r2, #31
 800fd14:	d469      	bmi.n	800fdea <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd16:	691a      	ldr	r2, [r3, #16]
 800fd18:	0611      	lsls	r1, r2, #24
 800fd1a:	d502      	bpl.n	800fd22 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd1c:	68da      	ldr	r2, [r3, #12]
 800fd1e:	0612      	lsls	r2, r2, #24
 800fd20:	d46b      	bmi.n	800fdfa <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd22:	691a      	ldr	r2, [r3, #16]
 800fd24:	05d0      	lsls	r0, r2, #23
 800fd26:	d502      	bpl.n	800fd2e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	0611      	lsls	r1, r2, #24
 800fd2c:	d46d      	bmi.n	800fe0a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd2e:	691a      	ldr	r2, [r3, #16]
 800fd30:	0652      	lsls	r2, r2, #25
 800fd32:	d502      	bpl.n	800fd3a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	0650      	lsls	r0, r2, #25
 800fd38:	d46f      	bmi.n	800fe1a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd3a:	691a      	ldr	r2, [r3, #16]
 800fd3c:	0691      	lsls	r1, r2, #26
 800fd3e:	d502      	bpl.n	800fd46 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd40:	68da      	ldr	r2, [r3, #12]
 800fd42:	0692      	lsls	r2, r2, #26
 800fd44:	d449      	bmi.n	800fdda <HAL_TIM_IRQHandler+0x106>
}
 800fd46:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd48:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd4c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800fd4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd50:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	f413 7f40 	tst.w	r3, #768	; 0x300
 800fd5a:	d16f      	bne.n	800fe3c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd5c:	f7ff ff34 	bl	800fbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd60:	4620      	mov	r0, r4
 800fd62:	f7ff ffb3 	bl	800fccc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd66:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd68:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd6a:	7722      	strb	r2, [r4, #28]
 800fd6c:	e7cd      	b.n	800fd0a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd6e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd72:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800fd74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd76:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd7a:	69db      	ldr	r3, [r3, #28]
 800fd7c:	079b      	lsls	r3, r3, #30
 800fd7e:	d15a      	bne.n	800fe36 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd80:	f7ff ff22 	bl	800fbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7ff ffa1 	bl	800fccc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd8a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd8c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd8e:	7722      	strb	r2, [r4, #28]
 800fd90:	e7b5      	b.n	800fcfe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd92:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd96:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800fd98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd9a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd9c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	f413 7f40 	tst.w	r3, #768	; 0x300
 800fda4:	d144      	bne.n	800fe30 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fda6:	f7ff ff0f 	bl	800fbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f7ff ff8e 	bl	800fccc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdb0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fdb2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdb4:	7722      	strb	r2, [r4, #28]
 800fdb6:	e79c      	b.n	800fcf2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdb8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdbc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdbe:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdc0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	0799      	lsls	r1, r3, #30
 800fdc6:	d130      	bne.n	800fe2a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdc8:	f7ff fefe 	bl	800fbc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f7ff ff7d 	bl	800fccc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdd2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fdd4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdd6:	7722      	strb	r2, [r4, #28]
 800fdd8:	e785      	b.n	800fce6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fdda:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800fdde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fde0:	611a      	str	r2, [r3, #16]
}
 800fde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800fde6:	f001 be53 	b.w	8011a90 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fdea:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fdf0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdf2:	f7f3 f9c5 	bl	8003180 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fdf6:	6823      	ldr	r3, [r4, #0]
 800fdf8:	e78d      	b.n	800fd16 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800fdfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800fe02:	f001 fe47 	bl	8011a94 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fe06:	6823      	ldr	r3, [r4, #0]
 800fe08:	e78b      	b.n	800fd22 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800fe0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800fe12:	f001 fe41 	bl	8011a98 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	e789      	b.n	800fd2e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800fe1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe20:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800fe22:	f7ff ff55 	bl	800fcd0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	e787      	b.n	800fd3a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800fe2a:	f7f3 f933 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 800fe2e:	e7d0      	b.n	800fdd2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800fe30:	f7f3 f930 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 800fe34:	e7bc      	b.n	800fdb0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800fe36:	f7f3 f92d 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 800fe3a:	e7a6      	b.n	800fd8a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800fe3c:	f7f3 f92a 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 800fe40:	e791      	b.n	800fd66 <HAL_TIM_IRQHandler+0x92>
 800fe42:	bf00      	nop

0800fe44 <HAL_TIM_ErrorCallback>:
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop

0800fe48 <TIM_DMAError>:
{
 800fe48:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4e:	4283      	cmp	r3, r0
 800fe50:	d01c      	beq.n	800fe8c <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fe54:	4283      	cmp	r3, r0
 800fe56:	d00e      	beq.n	800fe76 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fe5a:	4283      	cmp	r3, r0
 800fe5c:	d020      	beq.n	800fea0 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe60:	4283      	cmp	r3, r0
 800fe62:	d028      	beq.n	800feb6 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800fe64:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800fe66:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800fe68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800fe6c:	f7ff ffea 	bl	800fe44 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe70:	2300      	movs	r3, #0
 800fe72:	7723      	strb	r3, [r4, #28]
}
 800fe74:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe76:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe78:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800fe7a:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe7c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe80:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800fe82:	f7ff ffdf 	bl	800fe44 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe86:	2300      	movs	r3, #0
 800fe88:	7723      	strb	r3, [r4, #28]
}
 800fe8a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe8c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800fe8e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe90:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fe92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800fe96:	f7ff ffd5 	bl	800fe44 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	7723      	strb	r3, [r4, #28]
}
 800fe9e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fea0:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fea2:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800fea4:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fea6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800feaa:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800feac:	f7ff ffca 	bl	800fe44 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800feb0:	2300      	movs	r3, #0
 800feb2:	7723      	strb	r3, [r4, #28]
}
 800feb4:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800feb6:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800feb8:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800feba:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800febc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fec0:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800fec2:	f7ff ffbf 	bl	800fe44 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fec6:	2300      	movs	r3, #0
 800fec8:	7723      	strb	r3, [r4, #28]
}
 800feca:	bd10      	pop	{r4, pc}

0800fecc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fecc:	4a3c      	ldr	r2, [pc, #240]	; (800ffc0 <TIM_Base_SetConfig+0xf4>)
 800fece:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800fed2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fed4:	eba0 0202 	sub.w	r2, r0, r2
 800fed8:	fab2 f282 	clz	r2, r2
{
 800fedc:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fede:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800fee2:	d010      	beq.n	800ff06 <TIM_Base_SetConfig+0x3a>
 800fee4:	b97a      	cbnz	r2, 800ff06 <TIM_Base_SetConfig+0x3a>
 800fee6:	4d37      	ldr	r5, [pc, #220]	; (800ffc4 <TIM_Base_SetConfig+0xf8>)
 800fee8:	4c37      	ldr	r4, [pc, #220]	; (800ffc8 <TIM_Base_SetConfig+0xfc>)
 800feea:	42a0      	cmp	r0, r4
 800feec:	bf18      	it	ne
 800feee:	42a8      	cmpne	r0, r5
 800fef0:	d12b      	bne.n	800ff4a <TIM_Base_SetConfig+0x7e>
 800fef2:	4c36      	ldr	r4, [pc, #216]	; (800ffcc <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800fef8:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fefa:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800fefc:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fefe:	fab4 f484 	clz	r4, r4
 800ff02:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff04:	e008      	b.n	800ff18 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800ff06:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ff0c:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff0e:	4c2f      	ldr	r4, [pc, #188]	; (800ffcc <TIM_Base_SetConfig+0x100>)
 800ff10:	1b04      	subs	r4, r0, r4
 800ff12:	fab4 f484 	clz	r4, r4
 800ff16:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff18:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff1e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff20:	694d      	ldr	r5, [r1, #20]
 800ff22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff26:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ff28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff2a:	688b      	ldr	r3, [r1, #8]
 800ff2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ff2e:	680b      	ldr	r3, [r1, #0]
 800ff30:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff32:	b922      	cbnz	r2, 800ff3e <TIM_Base_SetConfig+0x72>
 800ff34:	b91c      	cbnz	r4, 800ff3e <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 800ff36:	2301      	movs	r3, #1
}
 800ff38:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800ff3a:	6143      	str	r3, [r0, #20]
}
 800ff3c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800ff3e:	690b      	ldr	r3, [r1, #16]
 800ff40:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ff42:	2301      	movs	r3, #1
}
 800ff44:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800ff46:	6143      	str	r3, [r0, #20]
}
 800ff48:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ff4e:	42a0      	cmp	r0, r4
 800ff50:	d024      	beq.n	800ff9c <TIM_Base_SetConfig+0xd0>
 800ff52:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800ff56:	42a0      	cmp	r0, r4
 800ff58:	d020      	beq.n	800ff9c <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff5a:	4c1d      	ldr	r4, [pc, #116]	; (800ffd0 <TIM_Base_SetConfig+0x104>)
 800ff5c:	4d1d      	ldr	r5, [pc, #116]	; (800ffd4 <TIM_Base_SetConfig+0x108>)
 800ff5e:	42a0      	cmp	r0, r4
 800ff60:	bf18      	it	ne
 800ff62:	42a8      	cmpne	r0, r5
 800ff64:	bf0c      	ite	eq
 800ff66:	2401      	moveq	r4, #1
 800ff68:	2400      	movne	r4, #0
 800ff6a:	d027      	beq.n	800ffbc <TIM_Base_SetConfig+0xf0>
 800ff6c:	4e1a      	ldr	r6, [pc, #104]	; (800ffd8 <TIM_Base_SetConfig+0x10c>)
 800ff6e:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800ff72:	42a8      	cmp	r0, r5
 800ff74:	bf18      	it	ne
 800ff76:	42b0      	cmpne	r0, r6
 800ff78:	d0ce      	beq.n	800ff18 <TIM_Base_SetConfig+0x4c>
 800ff7a:	4c18      	ldr	r4, [pc, #96]	; (800ffdc <TIM_Base_SetConfig+0x110>)
 800ff7c:	42a0      	cmp	r0, r4
 800ff7e:	d01d      	beq.n	800ffbc <TIM_Base_SetConfig+0xf0>
 800ff80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ff84:	42a0      	cmp	r0, r4
 800ff86:	d019      	beq.n	800ffbc <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff88:	694d      	ldr	r5, [r1, #20]
 800ff8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff8e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800ff90:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff92:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ff94:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff96:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ff98:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff9a:	e7cc      	b.n	800ff36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800ff9c:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffa2:	4c0a      	ldr	r4, [pc, #40]	; (800ffcc <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 800ffa4:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffa6:	4d0e      	ldr	r5, [pc, #56]	; (800ffe0 <TIM_Base_SetConfig+0x114>)
 800ffa8:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ffaa:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffac:	fab4 f484 	clz	r4, r4
 800ffb0:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ffb4:	d0b0      	beq.n	800ff18 <TIM_Base_SetConfig+0x4c>
 800ffb6:	2c00      	cmp	r4, #0
 800ffb8:	d1ae      	bne.n	800ff18 <TIM_Base_SetConfig+0x4c>
 800ffba:	e7ce      	b.n	800ff5a <TIM_Base_SetConfig+0x8e>
 800ffbc:	2400      	movs	r4, #0
 800ffbe:	e7ab      	b.n	800ff18 <TIM_Base_SetConfig+0x4c>
 800ffc0:	40010000 	.word	0x40010000
 800ffc4:	40000400 	.word	0x40000400
 800ffc8:	40000800 	.word	0x40000800
 800ffcc:	40010400 	.word	0x40010400
 800ffd0:	40014400 	.word	0x40014400
 800ffd4:	40014000 	.word	0x40014000
 800ffd8:	40014800 	.word	0x40014800
 800ffdc:	40001c00 	.word	0x40001c00
 800ffe0:	40000c00 	.word	0x40000c00

0800ffe4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	f000 80b8 	beq.w	801015a <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffea:	6802      	ldr	r2, [r0, #0]
 800ffec:	4b5f      	ldr	r3, [pc, #380]	; (801016c <HAL_TIM_Base_Init+0x188>)
 800ffee:	4960      	ldr	r1, [pc, #384]	; (8010170 <HAL_TIM_Base_Init+0x18c>)
 800fff0:	429a      	cmp	r2, r3
 800fff2:	bf18      	it	ne
 800fff4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800fff8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fffa:	bf14      	ite	ne
 800fffc:	2301      	movne	r3, #1
 800fffe:	2300      	moveq	r3, #0
 8010000:	4604      	mov	r4, r0
 8010002:	485c      	ldr	r0, [pc, #368]	; (8010174 <HAL_TIM_Base_Init+0x190>)
 8010004:	4282      	cmp	r2, r0
 8010006:	bf0c      	ite	eq
 8010008:	2300      	moveq	r3, #0
 801000a:	f003 0301 	andne.w	r3, r3, #1
 801000e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010012:	428a      	cmp	r2, r1
 8010014:	bf0c      	ite	eq
 8010016:	2300      	moveq	r3, #0
 8010018:	f003 0301 	andne.w	r3, r3, #1
 801001c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010020:	4282      	cmp	r2, r0
 8010022:	bf0c      	ite	eq
 8010024:	2300      	moveq	r3, #0
 8010026:	f003 0301 	andne.w	r3, r3, #1
 801002a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801002e:	428a      	cmp	r2, r1
 8010030:	bf0c      	ite	eq
 8010032:	2300      	moveq	r3, #0
 8010034:	f003 0301 	andne.w	r3, r3, #1
 8010038:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801003c:	4282      	cmp	r2, r0
 801003e:	bf0c      	ite	eq
 8010040:	2300      	moveq	r3, #0
 8010042:	f003 0301 	andne.w	r3, r3, #1
 8010046:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801004a:	428a      	cmp	r2, r1
 801004c:	bf0c      	ite	eq
 801004e:	2300      	moveq	r3, #0
 8010050:	f003 0301 	andne.w	r3, r3, #1
 8010054:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010058:	4282      	cmp	r2, r0
 801005a:	bf0c      	ite	eq
 801005c:	2300      	moveq	r3, #0
 801005e:	f003 0301 	andne.w	r3, r3, #1
 8010062:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010066:	428a      	cmp	r2, r1
 8010068:	bf0c      	ite	eq
 801006a:	2300      	moveq	r3, #0
 801006c:	f003 0301 	andne.w	r3, r3, #1
 8010070:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010074:	4282      	cmp	r2, r0
 8010076:	bf0c      	ite	eq
 8010078:	2300      	moveq	r3, #0
 801007a:	f003 0301 	andne.w	r3, r3, #1
 801007e:	428a      	cmp	r2, r1
 8010080:	bf0c      	ite	eq
 8010082:	2300      	moveq	r3, #0
 8010084:	f003 0301 	andne.w	r3, r3, #1
 8010088:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801008c:	428a      	cmp	r2, r1
 801008e:	bf0c      	ite	eq
 8010090:	2300      	moveq	r3, #0
 8010092:	f003 0301 	andne.w	r3, r3, #1
 8010096:	b113      	cbz	r3, 801009e <HAL_TIM_Base_Init+0xba>
 8010098:	4b37      	ldr	r3, [pc, #220]	; (8010178 <HAL_TIM_Base_Init+0x194>)
 801009a:	429a      	cmp	r2, r3
 801009c:	d15f      	bne.n	801015e <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801009e:	68a3      	ldr	r3, [r4, #8]
 80100a0:	f023 0210 	bic.w	r2, r3, #16
 80100a4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80100a8:	2920      	cmp	r1, #32
 80100aa:	bf18      	it	ne
 80100ac:	2a00      	cmpne	r2, #0
 80100ae:	d001      	beq.n	80100b4 <HAL_TIM_Base_Init+0xd0>
 80100b0:	2b40      	cmp	r3, #64	; 0x40
 80100b2:	d14c      	bne.n	801014e <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80100b4:	6923      	ldr	r3, [r4, #16]
 80100b6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80100ba:	d002      	beq.n	80100c2 <HAL_TIM_Base_Init+0xde>
 80100bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100c0:	d12b      	bne.n	801011a <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80100c2:	69a3      	ldr	r3, [r4, #24]
 80100c4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80100c8:	d130      	bne.n	801012c <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80100ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80100ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80100d2:	b3b3      	cbz	r3, 8010142 <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100d4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80100d6:	2302      	movs	r3, #2
 80100d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80100e0:	f7ff fef4 	bl	800fecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100e4:	2301      	movs	r3, #1
  return HAL_OK;
 80100e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100e8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80100f0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80100f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80100f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80100fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010104:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801010c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010110:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010118:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801011a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801011e:	4817      	ldr	r0, [pc, #92]	; (801017c <HAL_TIM_Base_Init+0x198>)
 8010120:	f7f4 f8a8 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010124:	69a3      	ldr	r3, [r4, #24]
 8010126:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801012a:	d0ce      	beq.n	80100ca <HAL_TIM_Base_Init+0xe6>
 801012c:	f240 1119 	movw	r1, #281	; 0x119
 8010130:	4812      	ldr	r0, [pc, #72]	; (801017c <HAL_TIM_Base_Init+0x198>)
 8010132:	f7f4 f89f 	bl	8004274 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010136:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801013a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1c8      	bne.n	80100d4 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 8010142:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010144:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010148:	f7f5 fcba 	bl	8005ac0 <HAL_TIM_Base_MspInit>
 801014c:	e7c2      	b.n	80100d4 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801014e:	f240 1117 	movw	r1, #279	; 0x117
 8010152:	480a      	ldr	r0, [pc, #40]	; (801017c <HAL_TIM_Base_Init+0x198>)
 8010154:	f7f4 f88e 	bl	8004274 <assert_failed>
 8010158:	e7ac      	b.n	80100b4 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 801015a:	2001      	movs	r0, #1
}
 801015c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801015e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8010162:	4806      	ldr	r0, [pc, #24]	; (801017c <HAL_TIM_Base_Init+0x198>)
 8010164:	f7f4 f886 	bl	8004274 <assert_failed>
 8010168:	e799      	b.n	801009e <HAL_TIM_Base_Init+0xba>
 801016a:	bf00      	nop
 801016c:	40010000 	.word	0x40010000
 8010170:	40000800 	.word	0x40000800
 8010174:	40000400 	.word	0x40000400
 8010178:	40002000 	.word	0x40002000
 801017c:	0802c544 	.word	0x0802c544

08010180 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8010180:	2800      	cmp	r0, #0
 8010182:	f000 80b8 	beq.w	80102f6 <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010186:	6802      	ldr	r2, [r0, #0]
 8010188:	4b5f      	ldr	r3, [pc, #380]	; (8010308 <HAL_TIM_OC_Init+0x188>)
 801018a:	4960      	ldr	r1, [pc, #384]	; (801030c <HAL_TIM_OC_Init+0x18c>)
 801018c:	429a      	cmp	r2, r3
 801018e:	bf18      	it	ne
 8010190:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010194:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010196:	bf14      	ite	ne
 8010198:	2301      	movne	r3, #1
 801019a:	2300      	moveq	r3, #0
 801019c:	4604      	mov	r4, r0
 801019e:	485c      	ldr	r0, [pc, #368]	; (8010310 <HAL_TIM_OC_Init+0x190>)
 80101a0:	4282      	cmp	r2, r0
 80101a2:	bf0c      	ite	eq
 80101a4:	2300      	moveq	r3, #0
 80101a6:	f003 0301 	andne.w	r3, r3, #1
 80101aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80101ae:	428a      	cmp	r2, r1
 80101b0:	bf0c      	ite	eq
 80101b2:	2300      	moveq	r3, #0
 80101b4:	f003 0301 	andne.w	r3, r3, #1
 80101b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101bc:	4282      	cmp	r2, r0
 80101be:	bf0c      	ite	eq
 80101c0:	2300      	moveq	r3, #0
 80101c2:	f003 0301 	andne.w	r3, r3, #1
 80101c6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80101ca:	428a      	cmp	r2, r1
 80101cc:	bf0c      	ite	eq
 80101ce:	2300      	moveq	r3, #0
 80101d0:	f003 0301 	andne.w	r3, r3, #1
 80101d4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80101d8:	4282      	cmp	r2, r0
 80101da:	bf0c      	ite	eq
 80101dc:	2300      	moveq	r3, #0
 80101de:	f003 0301 	andne.w	r3, r3, #1
 80101e2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80101e6:	428a      	cmp	r2, r1
 80101e8:	bf0c      	ite	eq
 80101ea:	2300      	moveq	r3, #0
 80101ec:	f003 0301 	andne.w	r3, r3, #1
 80101f0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80101f4:	4282      	cmp	r2, r0
 80101f6:	bf0c      	ite	eq
 80101f8:	2300      	moveq	r3, #0
 80101fa:	f003 0301 	andne.w	r3, r3, #1
 80101fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010202:	428a      	cmp	r2, r1
 8010204:	bf0c      	ite	eq
 8010206:	2300      	moveq	r3, #0
 8010208:	f003 0301 	andne.w	r3, r3, #1
 801020c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010210:	4282      	cmp	r2, r0
 8010212:	bf0c      	ite	eq
 8010214:	2300      	moveq	r3, #0
 8010216:	f003 0301 	andne.w	r3, r3, #1
 801021a:	428a      	cmp	r2, r1
 801021c:	bf0c      	ite	eq
 801021e:	2300      	moveq	r3, #0
 8010220:	f003 0301 	andne.w	r3, r3, #1
 8010224:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010228:	428a      	cmp	r2, r1
 801022a:	bf0c      	ite	eq
 801022c:	2300      	moveq	r3, #0
 801022e:	f003 0301 	andne.w	r3, r3, #1
 8010232:	b113      	cbz	r3, 801023a <HAL_TIM_OC_Init+0xba>
 8010234:	4b37      	ldr	r3, [pc, #220]	; (8010314 <HAL_TIM_OC_Init+0x194>)
 8010236:	429a      	cmp	r2, r3
 8010238:	d15f      	bne.n	80102fa <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	f023 0210 	bic.w	r2, r3, #16
 8010240:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010244:	2920      	cmp	r1, #32
 8010246:	bf18      	it	ne
 8010248:	2a00      	cmpne	r2, #0
 801024a:	d001      	beq.n	8010250 <HAL_TIM_OC_Init+0xd0>
 801024c:	2b40      	cmp	r3, #64	; 0x40
 801024e:	d14c      	bne.n	80102ea <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010250:	6923      	ldr	r3, [r4, #16]
 8010252:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010256:	d002      	beq.n	801025e <HAL_TIM_OC_Init+0xde>
 8010258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801025c:	d12b      	bne.n	80102b6 <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801025e:	69a3      	ldr	r3, [r4, #24]
 8010260:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010264:	d130      	bne.n	80102c8 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010266:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801026a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801026e:	b3b3      	cbz	r3, 80102de <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010270:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8010272:	2302      	movs	r3, #2
 8010274:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010278:	f851 0b04 	ldr.w	r0, [r1], #4
 801027c:	f7ff fe26 	bl	800fecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010280:	2301      	movs	r3, #1
  return HAL_OK;
 8010282:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010284:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010288:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801028c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010290:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801029c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80102a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102a8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80102ac:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80102b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80102b4:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80102b6:	f240 2197 	movw	r1, #663	; 0x297
 80102ba:	4817      	ldr	r0, [pc, #92]	; (8010318 <HAL_TIM_OC_Init+0x198>)
 80102bc:	f7f3 ffda 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80102c0:	69a3      	ldr	r3, [r4, #24]
 80102c2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80102c6:	d0ce      	beq.n	8010266 <HAL_TIM_OC_Init+0xe6>
 80102c8:	f44f 7126 	mov.w	r1, #664	; 0x298
 80102cc:	4812      	ldr	r0, [pc, #72]	; (8010318 <HAL_TIM_OC_Init+0x198>)
 80102ce:	f7f3 ffd1 	bl	8004274 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80102d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80102d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1c8      	bne.n	8010270 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 80102de:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80102e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80102e4:	f7ff f90e 	bl	800f504 <HAL_TIM_OC_MspInit>
 80102e8:	e7c2      	b.n	8010270 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80102ea:	f240 2196 	movw	r1, #662	; 0x296
 80102ee:	480a      	ldr	r0, [pc, #40]	; (8010318 <HAL_TIM_OC_Init+0x198>)
 80102f0:	f7f3 ffc0 	bl	8004274 <assert_failed>
 80102f4:	e7ac      	b.n	8010250 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 80102f6:	2001      	movs	r0, #1
}
 80102f8:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80102fa:	f240 2195 	movw	r1, #661	; 0x295
 80102fe:	4806      	ldr	r0, [pc, #24]	; (8010318 <HAL_TIM_OC_Init+0x198>)
 8010300:	f7f3 ffb8 	bl	8004274 <assert_failed>
 8010304:	e799      	b.n	801023a <HAL_TIM_OC_Init+0xba>
 8010306:	bf00      	nop
 8010308:	40010000 	.word	0x40010000
 801030c:	40000800 	.word	0x40000800
 8010310:	40000400 	.word	0x40000400
 8010314:	40002000 	.word	0x40002000
 8010318:	0802c544 	.word	0x0802c544

0801031c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 801031c:	2800      	cmp	r0, #0
 801031e:	f000 80b8 	beq.w	8010492 <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010322:	6802      	ldr	r2, [r0, #0]
 8010324:	4b5f      	ldr	r3, [pc, #380]	; (80104a4 <HAL_TIM_PWM_Init+0x188>)
 8010326:	4960      	ldr	r1, [pc, #384]	; (80104a8 <HAL_TIM_PWM_Init+0x18c>)
 8010328:	429a      	cmp	r2, r3
 801032a:	bf18      	it	ne
 801032c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010330:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010332:	bf14      	ite	ne
 8010334:	2301      	movne	r3, #1
 8010336:	2300      	moveq	r3, #0
 8010338:	4604      	mov	r4, r0
 801033a:	485c      	ldr	r0, [pc, #368]	; (80104ac <HAL_TIM_PWM_Init+0x190>)
 801033c:	4282      	cmp	r2, r0
 801033e:	bf0c      	ite	eq
 8010340:	2300      	moveq	r3, #0
 8010342:	f003 0301 	andne.w	r3, r3, #1
 8010346:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801034a:	428a      	cmp	r2, r1
 801034c:	bf0c      	ite	eq
 801034e:	2300      	moveq	r3, #0
 8010350:	f003 0301 	andne.w	r3, r3, #1
 8010354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010358:	4282      	cmp	r2, r0
 801035a:	bf0c      	ite	eq
 801035c:	2300      	moveq	r3, #0
 801035e:	f003 0301 	andne.w	r3, r3, #1
 8010362:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010366:	428a      	cmp	r2, r1
 8010368:	bf0c      	ite	eq
 801036a:	2300      	moveq	r3, #0
 801036c:	f003 0301 	andne.w	r3, r3, #1
 8010370:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010374:	4282      	cmp	r2, r0
 8010376:	bf0c      	ite	eq
 8010378:	2300      	moveq	r3, #0
 801037a:	f003 0301 	andne.w	r3, r3, #1
 801037e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010382:	428a      	cmp	r2, r1
 8010384:	bf0c      	ite	eq
 8010386:	2300      	moveq	r3, #0
 8010388:	f003 0301 	andne.w	r3, r3, #1
 801038c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010390:	4282      	cmp	r2, r0
 8010392:	bf0c      	ite	eq
 8010394:	2300      	moveq	r3, #0
 8010396:	f003 0301 	andne.w	r3, r3, #1
 801039a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801039e:	428a      	cmp	r2, r1
 80103a0:	bf0c      	ite	eq
 80103a2:	2300      	moveq	r3, #0
 80103a4:	f003 0301 	andne.w	r3, r3, #1
 80103a8:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80103ac:	4282      	cmp	r2, r0
 80103ae:	bf0c      	ite	eq
 80103b0:	2300      	moveq	r3, #0
 80103b2:	f003 0301 	andne.w	r3, r3, #1
 80103b6:	428a      	cmp	r2, r1
 80103b8:	bf0c      	ite	eq
 80103ba:	2300      	moveq	r3, #0
 80103bc:	f003 0301 	andne.w	r3, r3, #1
 80103c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80103c4:	428a      	cmp	r2, r1
 80103c6:	bf0c      	ite	eq
 80103c8:	2300      	moveq	r3, #0
 80103ca:	f003 0301 	andne.w	r3, r3, #1
 80103ce:	b113      	cbz	r3, 80103d6 <HAL_TIM_PWM_Init+0xba>
 80103d0:	4b37      	ldr	r3, [pc, #220]	; (80104b0 <HAL_TIM_PWM_Init+0x194>)
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d15f      	bne.n	8010496 <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80103d6:	68a3      	ldr	r3, [r4, #8]
 80103d8:	f023 0210 	bic.w	r2, r3, #16
 80103dc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80103e0:	2920      	cmp	r1, #32
 80103e2:	bf18      	it	ne
 80103e4:	2a00      	cmpne	r2, #0
 80103e6:	d001      	beq.n	80103ec <HAL_TIM_PWM_Init+0xd0>
 80103e8:	2b40      	cmp	r3, #64	; 0x40
 80103ea:	d14c      	bne.n	8010486 <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80103ec:	6923      	ldr	r3, [r4, #16]
 80103ee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80103f2:	d002      	beq.n	80103fa <HAL_TIM_PWM_Init+0xde>
 80103f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103f8:	d12b      	bne.n	8010452 <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80103fa:	69a3      	ldr	r3, [r4, #24]
 80103fc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010400:	d130      	bne.n	8010464 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010402:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010406:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801040a:	b3b3      	cbz	r3, 801047a <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801040c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801040e:	2302      	movs	r3, #2
 8010410:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010414:	f851 0b04 	ldr.w	r0, [r1], #4
 8010418:	f7ff fd58 	bl	800fecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801041c:	2301      	movs	r3, #1
  return HAL_OK;
 801041e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010420:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010424:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010428:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801042c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010430:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801043c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010444:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010448:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801044c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010450:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010452:	f240 5132 	movw	r1, #1330	; 0x532
 8010456:	4817      	ldr	r0, [pc, #92]	; (80104b4 <HAL_TIM_PWM_Init+0x198>)
 8010458:	f7f3 ff0c 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801045c:	69a3      	ldr	r3, [r4, #24]
 801045e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010462:	d0ce      	beq.n	8010402 <HAL_TIM_PWM_Init+0xe6>
 8010464:	f240 5133 	movw	r1, #1331	; 0x533
 8010468:	4812      	ldr	r0, [pc, #72]	; (80104b4 <HAL_TIM_PWM_Init+0x198>)
 801046a:	f7f3 ff03 	bl	8004274 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801046e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010472:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1c8      	bne.n	801040c <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 801047a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801047c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010480:	f7ff f842 	bl	800f508 <HAL_TIM_PWM_MspInit>
 8010484:	e7c2      	b.n	801040c <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010486:	f240 5131 	movw	r1, #1329	; 0x531
 801048a:	480a      	ldr	r0, [pc, #40]	; (80104b4 <HAL_TIM_PWM_Init+0x198>)
 801048c:	f7f3 fef2 	bl	8004274 <assert_failed>
 8010490:	e7ac      	b.n	80103ec <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 8010492:	2001      	movs	r0, #1
}
 8010494:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010496:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 801049a:	4806      	ldr	r0, [pc, #24]	; (80104b4 <HAL_TIM_PWM_Init+0x198>)
 801049c:	f7f3 feea 	bl	8004274 <assert_failed>
 80104a0:	e799      	b.n	80103d6 <HAL_TIM_PWM_Init+0xba>
 80104a2:	bf00      	nop
 80104a4:	40010000 	.word	0x40010000
 80104a8:	40000800 	.word	0x40000800
 80104ac:	40000400 	.word	0x40000400
 80104b0:	40002000 	.word	0x40002000
 80104b4:	0802c544 	.word	0x0802c544

080104b8 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80104b8:	2800      	cmp	r0, #0
 80104ba:	f000 80b8 	beq.w	801062e <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80104be:	6802      	ldr	r2, [r0, #0]
 80104c0:	4b5f      	ldr	r3, [pc, #380]	; (8010640 <HAL_TIM_IC_Init+0x188>)
 80104c2:	4960      	ldr	r1, [pc, #384]	; (8010644 <HAL_TIM_IC_Init+0x18c>)
 80104c4:	429a      	cmp	r2, r3
 80104c6:	bf18      	it	ne
 80104c8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 80104cc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80104ce:	bf14      	ite	ne
 80104d0:	2301      	movne	r3, #1
 80104d2:	2300      	moveq	r3, #0
 80104d4:	4604      	mov	r4, r0
 80104d6:	485c      	ldr	r0, [pc, #368]	; (8010648 <HAL_TIM_IC_Init+0x190>)
 80104d8:	4282      	cmp	r2, r0
 80104da:	bf0c      	ite	eq
 80104dc:	2300      	moveq	r3, #0
 80104de:	f003 0301 	andne.w	r3, r3, #1
 80104e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80104e6:	428a      	cmp	r2, r1
 80104e8:	bf0c      	ite	eq
 80104ea:	2300      	moveq	r3, #0
 80104ec:	f003 0301 	andne.w	r3, r3, #1
 80104f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104f4:	4282      	cmp	r2, r0
 80104f6:	bf0c      	ite	eq
 80104f8:	2300      	moveq	r3, #0
 80104fa:	f003 0301 	andne.w	r3, r3, #1
 80104fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010502:	428a      	cmp	r2, r1
 8010504:	bf0c      	ite	eq
 8010506:	2300      	moveq	r3, #0
 8010508:	f003 0301 	andne.w	r3, r3, #1
 801050c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010510:	4282      	cmp	r2, r0
 8010512:	bf0c      	ite	eq
 8010514:	2300      	moveq	r3, #0
 8010516:	f003 0301 	andne.w	r3, r3, #1
 801051a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801051e:	428a      	cmp	r2, r1
 8010520:	bf0c      	ite	eq
 8010522:	2300      	moveq	r3, #0
 8010524:	f003 0301 	andne.w	r3, r3, #1
 8010528:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 801052c:	4282      	cmp	r2, r0
 801052e:	bf0c      	ite	eq
 8010530:	2300      	moveq	r3, #0
 8010532:	f003 0301 	andne.w	r3, r3, #1
 8010536:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801053a:	428a      	cmp	r2, r1
 801053c:	bf0c      	ite	eq
 801053e:	2300      	moveq	r3, #0
 8010540:	f003 0301 	andne.w	r3, r3, #1
 8010544:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010548:	4282      	cmp	r2, r0
 801054a:	bf0c      	ite	eq
 801054c:	2300      	moveq	r3, #0
 801054e:	f003 0301 	andne.w	r3, r3, #1
 8010552:	428a      	cmp	r2, r1
 8010554:	bf0c      	ite	eq
 8010556:	2300      	moveq	r3, #0
 8010558:	f003 0301 	andne.w	r3, r3, #1
 801055c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010560:	428a      	cmp	r2, r1
 8010562:	bf0c      	ite	eq
 8010564:	2300      	moveq	r3, #0
 8010566:	f003 0301 	andne.w	r3, r3, #1
 801056a:	b113      	cbz	r3, 8010572 <HAL_TIM_IC_Init+0xba>
 801056c:	4b37      	ldr	r3, [pc, #220]	; (801064c <HAL_TIM_IC_Init+0x194>)
 801056e:	429a      	cmp	r2, r3
 8010570:	d15f      	bne.n	8010632 <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010572:	68a3      	ldr	r3, [r4, #8]
 8010574:	f023 0210 	bic.w	r2, r3, #16
 8010578:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801057c:	2920      	cmp	r1, #32
 801057e:	bf18      	it	ne
 8010580:	2a00      	cmpne	r2, #0
 8010582:	d001      	beq.n	8010588 <HAL_TIM_IC_Init+0xd0>
 8010584:	2b40      	cmp	r3, #64	; 0x40
 8010586:	d14c      	bne.n	8010622 <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010588:	6923      	ldr	r3, [r4, #16]
 801058a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801058e:	d002      	beq.n	8010596 <HAL_TIM_IC_Init+0xde>
 8010590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010594:	d12b      	bne.n	80105ee <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010596:	69a3      	ldr	r3, [r4, #24]
 8010598:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801059c:	d130      	bne.n	8010600 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801059e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80105a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80105a6:	b3b3      	cbz	r3, 8010616 <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105a8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80105aa:	2302      	movs	r3, #2
 80105ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80105b4:	f7ff fc8a 	bl	800fecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105b8:	2301      	movs	r3, #1
  return HAL_OK;
 80105ba:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105bc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80105c4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80105c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80105cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80105d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80105dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105e0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80105e4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80105e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80105ec:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80105ee:	f240 71cc 	movw	r1, #1996	; 0x7cc
 80105f2:	4817      	ldr	r0, [pc, #92]	; (8010650 <HAL_TIM_IC_Init+0x198>)
 80105f4:	f7f3 fe3e 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80105f8:	69a3      	ldr	r3, [r4, #24]
 80105fa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80105fe:	d0ce      	beq.n	801059e <HAL_TIM_IC_Init+0xe6>
 8010600:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8010604:	4812      	ldr	r0, [pc, #72]	; (8010650 <HAL_TIM_IC_Init+0x198>)
 8010606:	f7f3 fe35 	bl	8004274 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801060a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801060e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1c8      	bne.n	80105a8 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8010616:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010618:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 801061c:	f7fe ff76 	bl	800f50c <HAL_TIM_IC_MspInit>
 8010620:	e7c2      	b.n	80105a8 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010622:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8010626:	480a      	ldr	r0, [pc, #40]	; (8010650 <HAL_TIM_IC_Init+0x198>)
 8010628:	f7f3 fe24 	bl	8004274 <assert_failed>
 801062c:	e7ac      	b.n	8010588 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 801062e:	2001      	movs	r0, #1
}
 8010630:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010632:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8010636:	4806      	ldr	r0, [pc, #24]	; (8010650 <HAL_TIM_IC_Init+0x198>)
 8010638:	f7f3 fe1c 	bl	8004274 <assert_failed>
 801063c:	e799      	b.n	8010572 <HAL_TIM_IC_Init+0xba>
 801063e:	bf00      	nop
 8010640:	40010000 	.word	0x40010000
 8010644:	40000800 	.word	0x40000800
 8010648:	40000400 	.word	0x40000400
 801064c:	40002000 	.word	0x40002000
 8010650:	0802c544 	.word	0x0802c544

08010654 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010654:	6a03      	ldr	r3, [r0, #32]
 8010656:	f023 0310 	bic.w	r3, r3, #16
{
 801065a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801065e:	6203      	str	r3, [r0, #32]
{
 8010660:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8010662:	6a05      	ldr	r5, [r0, #32]
{
 8010664:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8010666:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801066a:	4b29      	ldr	r3, [pc, #164]	; (8010710 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 801066c:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8010670:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010672:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010674:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010676:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801067a:	688b      	ldr	r3, [r1, #8]
 801067c:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010680:	4b24      	ldr	r3, [pc, #144]	; (8010714 <TIM_OC2_SetConfig+0xc0>)
 8010682:	4298      	cmp	r0, r3
 8010684:	d00b      	beq.n	801069e <TIM_OC2_SetConfig+0x4a>
 8010686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801068a:	4298      	cmp	r0, r3
 801068c:	d007      	beq.n	801069e <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 801068e:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8010690:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010694:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8010696:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8010698:	6225      	str	r5, [r4, #32]
}
 801069a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801069e:	68f3      	ldr	r3, [r6, #12]
 80106a0:	f033 0208 	bics.w	r2, r3, #8
 80106a4:	d123      	bne.n	80106ee <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80106a6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80106aa:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80106ae:	69b3      	ldr	r3, [r6, #24]
 80106b0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 80106b4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80106b8:	d120      	bne.n	80106fc <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80106ba:	6973      	ldr	r3, [r6, #20]
 80106bc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80106c0:	d107      	bne.n	80106d2 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80106c2:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106c6:	69b1      	ldr	r1, [r6, #24]
 80106c8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80106cc:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 80106d0:	e7dd      	b.n	801068e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80106d2:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 80106d6:	4810      	ldr	r0, [pc, #64]	; (8010718 <TIM_OC2_SetConfig+0xc4>)
 80106d8:	f7f3 fdcc 	bl	8004274 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80106dc:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106e0:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80106e2:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106e4:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80106e8:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 80106ec:	e7cf      	b.n	801068e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80106ee:	f641 31aa 	movw	r1, #7082	; 0x1baa
 80106f2:	4809      	ldr	r0, [pc, #36]	; (8010718 <TIM_OC2_SetConfig+0xc4>)
 80106f4:	f7f3 fdbe 	bl	8004274 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80106f8:	68f3      	ldr	r3, [r6, #12]
 80106fa:	e7d4      	b.n	80106a6 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80106fc:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8010700:	4805      	ldr	r0, [pc, #20]	; (8010718 <TIM_OC2_SetConfig+0xc4>)
 8010702:	f7f3 fdb7 	bl	8004274 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010706:	6973      	ldr	r3, [r6, #20]
 8010708:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801070c:	d0d9      	beq.n	80106c2 <TIM_OC2_SetConfig+0x6e>
 801070e:	e7e0      	b.n	80106d2 <TIM_OC2_SetConfig+0x7e>
 8010710:	feff8cff 	.word	0xfeff8cff
 8010714:	40010000 	.word	0x40010000
 8010718:	0802c544 	.word	0x0802c544

0801071c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 801071c:	2a14      	cmp	r2, #20
{
 801071e:	b570      	push	{r4, r5, r6, lr}
 8010720:	4614      	mov	r4, r2
 8010722:	4605      	mov	r5, r0
 8010724:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010726:	d937      	bls.n	8010798 <HAL_TIM_OC_ConfigChannel+0x7c>
 8010728:	2a3c      	cmp	r2, #60	; 0x3c
 801072a:	d139      	bne.n	80107a0 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 801072c:	6833      	ldr	r3, [r6, #0]
 801072e:	f023 0210 	bic.w	r2, r3, #16
 8010732:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010736:	2a40      	cmp	r2, #64	; 0x40
 8010738:	bf18      	it	ne
 801073a:	2b00      	cmpne	r3, #0
 801073c:	d003      	beq.n	8010746 <HAL_TIM_OC_ConfigChannel+0x2a>
 801073e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010742:	f040 8138 	bne.w	80109b6 <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010746:	68b3      	ldr	r3, [r6, #8]
 8010748:	f033 0302 	bics.w	r3, r3, #2
 801074c:	d12e      	bne.n	80107ac <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 801074e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010752:	2b01      	cmp	r3, #1
 8010754:	d033      	beq.n	80107be <HAL_TIM_OC_ConfigChannel+0xa2>
 8010756:	2301      	movs	r3, #1
 8010758:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 801075c:	2c14      	cmp	r4, #20
 801075e:	d816      	bhi.n	801078e <HAL_TIM_OC_ConfigChannel+0x72>
 8010760:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010764:	0015002f 	.word	0x0015002f
 8010768:	00150015 	.word	0x00150015
 801076c:	00150080 	.word	0x00150080
 8010770:	00150015 	.word	0x00150015
 8010774:	001500b5 	.word	0x001500b5
 8010778:	00150015 	.word	0x00150015
 801077c:	001500db 	.word	0x001500db
 8010780:	00150015 	.word	0x00150015
 8010784:	00150101 	.word	0x00150101
 8010788:	00150015 	.word	0x00150015
 801078c:	010e      	.short	0x010e
 801078e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010790:	2300      	movs	r3, #0
 8010792:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010796:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8010798:	4b98      	ldr	r3, [pc, #608]	; (80109fc <HAL_TIM_OC_ConfigChannel+0x2e0>)
 801079a:	40d3      	lsrs	r3, r2
 801079c:	07db      	lsls	r3, r3, #31
 801079e:	d4c5      	bmi.n	801072c <HAL_TIM_OC_ConfigChannel+0x10>
 80107a0:	f640 71df 	movw	r1, #4063	; 0xfdf
 80107a4:	4896      	ldr	r0, [pc, #600]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80107a6:	f7f3 fd65 	bl	8004274 <assert_failed>
 80107aa:	e7bf      	b.n	801072c <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80107ac:	f640 71e1 	movw	r1, #4065	; 0xfe1
 80107b0:	4893      	ldr	r0, [pc, #588]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80107b2:	f7f3 fd5f 	bl	8004274 <assert_failed>
  __HAL_LOCK(htim);
 80107b6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d1cb      	bne.n	8010756 <HAL_TIM_OC_ConfigChannel+0x3a>
 80107be:	2002      	movs	r0, #2
}
 80107c0:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80107c2:	6828      	ldr	r0, [r5, #0]
 80107c4:	4b8f      	ldr	r3, [pc, #572]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80107c6:	4a90      	ldr	r2, [pc, #576]	; (8010a08 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 80107c8:	4298      	cmp	r0, r3
 80107ca:	bf18      	it	ne
 80107cc:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80107d0:	bf14      	ite	ne
 80107d2:	2301      	movne	r3, #1
 80107d4:	2300      	moveq	r3, #0
 80107d6:	4290      	cmp	r0, r2
 80107d8:	bf0c      	ite	eq
 80107da:	2300      	moveq	r3, #0
 80107dc:	f003 0301 	andne.w	r3, r3, #1
 80107e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80107e4:	4290      	cmp	r0, r2
 80107e6:	bf0c      	ite	eq
 80107e8:	2300      	moveq	r3, #0
 80107ea:	f003 0301 	andne.w	r3, r3, #1
 80107ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80107f2:	4290      	cmp	r0, r2
 80107f4:	bf0c      	ite	eq
 80107f6:	2300      	moveq	r3, #0
 80107f8:	f003 0301 	andne.w	r3, r3, #1
 80107fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010800:	4290      	cmp	r0, r2
 8010802:	bf0c      	ite	eq
 8010804:	2300      	moveq	r3, #0
 8010806:	f003 0301 	andne.w	r3, r3, #1
 801080a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801080e:	4290      	cmp	r0, r2
 8010810:	bf0c      	ite	eq
 8010812:	2300      	moveq	r3, #0
 8010814:	f003 0301 	andne.w	r3, r3, #1
 8010818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801081c:	4290      	cmp	r0, r2
 801081e:	bf0c      	ite	eq
 8010820:	2300      	moveq	r3, #0
 8010822:	f003 0301 	andne.w	r3, r3, #1
 8010826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801082a:	4290      	cmp	r0, r2
 801082c:	bf0c      	ite	eq
 801082e:	2300      	moveq	r3, #0
 8010830:	f003 0301 	andne.w	r3, r3, #1
 8010834:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010838:	4290      	cmp	r0, r2
 801083a:	bf0c      	ite	eq
 801083c:	2300      	moveq	r3, #0
 801083e:	f003 0301 	andne.w	r3, r3, #1
 8010842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010846:	4290      	cmp	r0, r2
 8010848:	bf0c      	ite	eq
 801084a:	2300      	moveq	r3, #0
 801084c:	f003 0301 	andne.w	r3, r3, #1
 8010850:	b11b      	cbz	r3, 801085a <HAL_TIM_OC_ConfigChannel+0x13e>
 8010852:	4b6e      	ldr	r3, [pc, #440]	; (8010a0c <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8010854:	4298      	cmp	r0, r3
 8010856:	f040 80c9 	bne.w	80109ec <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801085a:	4631      	mov	r1, r6
 801085c:	f7fe f9ac 	bl	800ebb8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010860:	2000      	movs	r0, #0
      break;
 8010862:	e795      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010864:	6828      	ldr	r0, [r5, #0]
 8010866:	4b67      	ldr	r3, [pc, #412]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010868:	4a67      	ldr	r2, [pc, #412]	; (8010a08 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 801086a:	4298      	cmp	r0, r3
 801086c:	bf18      	it	ne
 801086e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010872:	bf14      	ite	ne
 8010874:	2301      	movne	r3, #1
 8010876:	2300      	moveq	r3, #0
 8010878:	4290      	cmp	r0, r2
 801087a:	bf0c      	ite	eq
 801087c:	2300      	moveq	r3, #0
 801087e:	f003 0301 	andne.w	r3, r3, #1
 8010882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010886:	4290      	cmp	r0, r2
 8010888:	bf0c      	ite	eq
 801088a:	2300      	moveq	r3, #0
 801088c:	f003 0301 	andne.w	r3, r3, #1
 8010890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010894:	4290      	cmp	r0, r2
 8010896:	bf0c      	ite	eq
 8010898:	2300      	moveq	r3, #0
 801089a:	f003 0301 	andne.w	r3, r3, #1
 801089e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80108a2:	4290      	cmp	r0, r2
 80108a4:	bf0c      	ite	eq
 80108a6:	2300      	moveq	r3, #0
 80108a8:	f003 0301 	andne.w	r3, r3, #1
 80108ac:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80108b0:	4290      	cmp	r0, r2
 80108b2:	bf0c      	ite	eq
 80108b4:	2300      	moveq	r3, #0
 80108b6:	f003 0301 	andne.w	r3, r3, #1
 80108ba:	b11b      	cbz	r3, 80108c4 <HAL_TIM_OC_ConfigChannel+0x1a8>
 80108bc:	4b54      	ldr	r3, [pc, #336]	; (8010a10 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 80108be:	4298      	cmp	r0, r3
 80108c0:	f040 808d 	bne.w	80109de <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108c4:	4631      	mov	r1, r6
 80108c6:	f7ff fec5 	bl	8010654 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80108ca:	2000      	movs	r0, #0
      break;
 80108cc:	e760      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80108ce:	6828      	ldr	r0, [r5, #0]
 80108d0:	4b4c      	ldr	r3, [pc, #304]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80108d2:	4a4d      	ldr	r2, [pc, #308]	; (8010a08 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 80108d4:	4298      	cmp	r0, r3
 80108d6:	bf18      	it	ne
 80108d8:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80108dc:	bf14      	ite	ne
 80108de:	2301      	movne	r3, #1
 80108e0:	2300      	moveq	r3, #0
 80108e2:	4290      	cmp	r0, r2
 80108e4:	bf0c      	ite	eq
 80108e6:	2300      	moveq	r3, #0
 80108e8:	f003 0301 	andne.w	r3, r3, #1
 80108ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80108f0:	4290      	cmp	r0, r2
 80108f2:	bf0c      	ite	eq
 80108f4:	2300      	moveq	r3, #0
 80108f6:	f003 0301 	andne.w	r3, r3, #1
 80108fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80108fe:	4290      	cmp	r0, r2
 8010900:	bf0c      	ite	eq
 8010902:	2300      	moveq	r3, #0
 8010904:	f003 0301 	andne.w	r3, r3, #1
 8010908:	b113      	cbz	r3, 8010910 <HAL_TIM_OC_ConfigChannel+0x1f4>
 801090a:	4b42      	ldr	r3, [pc, #264]	; (8010a14 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 801090c:	4298      	cmp	r0, r3
 801090e:	d15f      	bne.n	80109d0 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010910:	4631      	mov	r1, r6
 8010912:	f7fe f9b1 	bl	800ec78 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010916:	2000      	movs	r0, #0
      break;
 8010918:	e73a      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801091a:	6828      	ldr	r0, [r5, #0]
 801091c:	4b39      	ldr	r3, [pc, #228]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 801091e:	4a3a      	ldr	r2, [pc, #232]	; (8010a08 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010920:	4298      	cmp	r0, r3
 8010922:	bf18      	it	ne
 8010924:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010928:	bf14      	ite	ne
 801092a:	2301      	movne	r3, #1
 801092c:	2300      	moveq	r3, #0
 801092e:	4290      	cmp	r0, r2
 8010930:	bf0c      	ite	eq
 8010932:	2300      	moveq	r3, #0
 8010934:	f003 0301 	andne.w	r3, r3, #1
 8010938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801093c:	4290      	cmp	r0, r2
 801093e:	bf0c      	ite	eq
 8010940:	2300      	moveq	r3, #0
 8010942:	f003 0301 	andne.w	r3, r3, #1
 8010946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801094a:	4290      	cmp	r0, r2
 801094c:	bf0c      	ite	eq
 801094e:	2300      	moveq	r3, #0
 8010950:	f003 0301 	andne.w	r3, r3, #1
 8010954:	b113      	cbz	r3, 801095c <HAL_TIM_OC_ConfigChannel+0x240>
 8010956:	4b2f      	ldr	r3, [pc, #188]	; (8010a14 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010958:	4298      	cmp	r0, r3
 801095a:	d132      	bne.n	80109c2 <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801095c:	4631      	mov	r1, r6
 801095e:	f7fe f9ef 	bl	800ed40 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010962:	2000      	movs	r0, #0
      break;
 8010964:	e714      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010966:	6828      	ldr	r0, [r5, #0]
 8010968:	4b26      	ldr	r3, [pc, #152]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 801096a:	4298      	cmp	r0, r3
 801096c:	d003      	beq.n	8010976 <HAL_TIM_OC_ConfigChannel+0x25a>
 801096e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010972:	4298      	cmp	r0, r3
 8010974:	d118      	bne.n	80109a8 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010976:	4631      	mov	r1, r6
 8010978:	f7fe f8ca 	bl	800eb10 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 801097c:	2000      	movs	r0, #0
      break;
 801097e:	e707      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010980:	6828      	ldr	r0, [r5, #0]
 8010982:	4b20      	ldr	r3, [pc, #128]	; (8010a04 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010984:	4298      	cmp	r0, r3
 8010986:	d003      	beq.n	8010990 <HAL_TIM_OC_ConfigChannel+0x274>
 8010988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801098c:	4298      	cmp	r0, r3
 801098e:	d104      	bne.n	801099a <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010990:	4631      	mov	r1, r6
 8010992:	f7fe f8e7 	bl	800eb64 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010996:	2000      	movs	r0, #0
      break;
 8010998:	e6fa      	b.n	8010790 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 801099a:	4819      	ldr	r0, [pc, #100]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 801099c:	f241 011d 	movw	r1, #4125	; 0x101d
 80109a0:	f7f3 fc68 	bl	8004274 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80109a4:	6828      	ldr	r0, [r5, #0]
 80109a6:	e7f3      	b.n	8010990 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80109a8:	4815      	ldr	r0, [pc, #84]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109aa:	f241 0113 	movw	r1, #4115	; 0x1013
 80109ae:	f7f3 fc61 	bl	8004274 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80109b2:	6828      	ldr	r0, [r5, #0]
 80109b4:	e7df      	b.n	8010976 <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80109b6:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80109ba:	4811      	ldr	r0, [pc, #68]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109bc:	f7f3 fc5a 	bl	8004274 <assert_failed>
 80109c0:	e6c1      	b.n	8010746 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80109c2:	480f      	ldr	r0, [pc, #60]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109c4:	f241 0109 	movw	r1, #4105	; 0x1009
 80109c8:	f7f3 fc54 	bl	8004274 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80109cc:	6828      	ldr	r0, [r5, #0]
 80109ce:	e7c5      	b.n	801095c <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80109d0:	480b      	ldr	r0, [pc, #44]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109d2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80109d6:	f7f3 fc4d 	bl	8004274 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109da:	6828      	ldr	r0, [r5, #0]
 80109dc:	e798      	b.n	8010910 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80109de:	4808      	ldr	r0, [pc, #32]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109e0:	f640 71f5 	movw	r1, #4085	; 0xff5
 80109e4:	f7f3 fc46 	bl	8004274 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80109e8:	6828      	ldr	r0, [r5, #0]
 80109ea:	e76b      	b.n	80108c4 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80109ec:	4804      	ldr	r0, [pc, #16]	; (8010a00 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80109ee:	f640 71eb 	movw	r1, #4075	; 0xfeb
 80109f2:	f7f3 fc3f 	bl	8004274 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80109f6:	6828      	ldr	r0, [r5, #0]
 80109f8:	e72f      	b.n	801085a <HAL_TIM_OC_ConfigChannel+0x13e>
 80109fa:	bf00      	nop
 80109fc:	00111111 	.word	0x00111111
 8010a00:	0802c544 	.word	0x0802c544
 8010a04:	40010000 	.word	0x40010000
 8010a08:	40000400 	.word	0x40000400
 8010a0c:	40002000 	.word	0x40002000
 8010a10:	40001800 	.word	0x40001800
 8010a14:	40010400 	.word	0x40010400

08010a18 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010a18:	2a14      	cmp	r2, #20
{
 8010a1a:	b570      	push	{r4, r5, r6, lr}
 8010a1c:	4616      	mov	r6, r2
 8010a1e:	4605      	mov	r5, r0
 8010a20:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010a22:	d933      	bls.n	8010a8c <HAL_TIM_PWM_ConfigChannel+0x74>
 8010a24:	2a3c      	cmp	r2, #60	; 0x3c
 8010a26:	d135      	bne.n	8010a94 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	4b90      	ldr	r3, [pc, #576]	; (8010c6c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8010a2c:	4013      	ands	r3, r2
 8010a2e:	2b60      	cmp	r3, #96	; 0x60
 8010a30:	d004      	beq.n	8010a3c <HAL_TIM_PWM_ConfigChannel+0x24>
 8010a32:	f022 0210 	bic.w	r2, r2, #16
 8010a36:	4b8e      	ldr	r3, [pc, #568]	; (8010c70 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d147      	bne.n	8010acc <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010a3c:	68a3      	ldr	r3, [r4, #8]
 8010a3e:	f033 0302 	bics.w	r3, r3, #2
 8010a42:	d13d      	bne.n	8010ac0 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	f033 0304 	bics.w	r3, r3, #4
 8010a4a:	d12e      	bne.n	8010aaa <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8010a4c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d033      	beq.n	8010abc <HAL_TIM_PWM_ConfigChannel+0xa4>
 8010a54:	2301      	movs	r3, #1
 8010a56:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010a5a:	2e14      	cmp	r6, #20
 8010a5c:	d820      	bhi.n	8010aa0 <HAL_TIM_PWM_ConfigChannel+0x88>
 8010a5e:	e8df f016 	tbh	[pc, r6, lsl #1]
 8010a62:	00a7      	.short	0x00a7
 8010a64:	001f001f 	.word	0x001f001f
 8010a68:	0115001f 	.word	0x0115001f
 8010a6c:	001f001f 	.word	0x001f001f
 8010a70:	0157001f 	.word	0x0157001f
 8010a74:	001f001f 	.word	0x001f001f
 8010a78:	0057001f 	.word	0x0057001f
 8010a7c:	001f001f 	.word	0x001f001f
 8010a80:	008c001f 	.word	0x008c001f
 8010a84:	001f001f 	.word	0x001f001f
 8010a88:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8010a8c:	4b79      	ldr	r3, [pc, #484]	; (8010c74 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8010a8e:	40d3      	lsrs	r3, r2
 8010a90:	07db      	lsls	r3, r3, #31
 8010a92:	d4c9      	bmi.n	8010a28 <HAL_TIM_PWM_ConfigChannel+0x10>
 8010a94:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8010a98:	4877      	ldr	r0, [pc, #476]	; (8010c78 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010a9a:	f7f3 fbeb 	bl	8004274 <assert_failed>
 8010a9e:	e7c3      	b.n	8010a28 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8010aa0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010aa8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010aaa:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8010aae:	4872      	ldr	r0, [pc, #456]	; (8010c78 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010ab0:	f7f3 fbe0 	bl	8004274 <assert_failed>
  __HAL_LOCK(htim);
 8010ab4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d1cb      	bne.n	8010a54 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8010abc:	2002      	movs	r0, #2
}
 8010abe:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010ac0:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8010ac4:	486c      	ldr	r0, [pc, #432]	; (8010c78 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010ac6:	f7f3 fbd5 	bl	8004274 <assert_failed>
 8010aca:	e7bb      	b.n	8010a44 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010acc:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8010ad0:	4869      	ldr	r0, [pc, #420]	; (8010c78 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010ad2:	f7f3 fbcf 	bl	8004274 <assert_failed>
 8010ad6:	e7b1      	b.n	8010a3c <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010ad8:	6828      	ldr	r0, [r5, #0]
 8010ada:	4b68      	ldr	r3, [pc, #416]	; (8010c7c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010adc:	4298      	cmp	r0, r3
 8010ade:	d004      	beq.n	8010aea <HAL_TIM_PWM_ConfigChannel+0xd2>
 8010ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ae4:	4298      	cmp	r0, r3
 8010ae6:	f040 814d 	bne.w	8010d84 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010aea:	4621      	mov	r1, r4
 8010aec:	f7fe f83a 	bl	800eb64 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010af0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010af2:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010af6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010afa:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010afe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010b02:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010b0a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010b0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010b0e:	e7c8      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010b10:	6828      	ldr	r0, [r5, #0]
 8010b12:	4b5a      	ldr	r3, [pc, #360]	; (8010c7c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010b14:	4a5a      	ldr	r2, [pc, #360]	; (8010c80 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010b16:	4298      	cmp	r0, r3
 8010b18:	bf18      	it	ne
 8010b1a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010b1e:	bf14      	ite	ne
 8010b20:	2301      	movne	r3, #1
 8010b22:	2300      	moveq	r3, #0
 8010b24:	4290      	cmp	r0, r2
 8010b26:	bf0c      	ite	eq
 8010b28:	2300      	moveq	r3, #0
 8010b2a:	f003 0301 	andne.w	r3, r3, #1
 8010b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b32:	4290      	cmp	r0, r2
 8010b34:	bf0c      	ite	eq
 8010b36:	2300      	moveq	r3, #0
 8010b38:	f003 0301 	andne.w	r3, r3, #1
 8010b3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b40:	4290      	cmp	r0, r2
 8010b42:	bf0c      	ite	eq
 8010b44:	2300      	moveq	r3, #0
 8010b46:	f003 0301 	andne.w	r3, r3, #1
 8010b4a:	b11b      	cbz	r3, 8010b54 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8010b4c:	4b4d      	ldr	r3, [pc, #308]	; (8010c84 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8010b4e:	4298      	cmp	r0, r3
 8010b50:	f040 811f 	bne.w	8010d92 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010b54:	4621      	mov	r1, r4
 8010b56:	f7fe f8f3 	bl	800ed40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010b5a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b5c:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010b5e:	69d9      	ldr	r1, [r3, #28]
 8010b60:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010b64:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010b66:	69d9      	ldr	r1, [r3, #28]
 8010b68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010b6c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b6e:	69da      	ldr	r2, [r3, #28]
 8010b70:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010b74:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b76:	61da      	str	r2, [r3, #28]
      break;
 8010b78:	e793      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010b7a:	6828      	ldr	r0, [r5, #0]
 8010b7c:	4b3f      	ldr	r3, [pc, #252]	; (8010c7c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010b7e:	4298      	cmp	r0, r3
 8010b80:	d004      	beq.n	8010b8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8010b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010b86:	4298      	cmp	r0, r3
 8010b88:	f040 80f5 	bne.w	8010d76 <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	f7fd ffbf 	bl	800eb10 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010b92:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010b94:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010b96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010b98:	f041 0108 	orr.w	r1, r1, #8
 8010b9c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010b9e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ba0:	f021 0104 	bic.w	r1, r1, #4
 8010ba4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010ba6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ba8:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010baa:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010bac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010bae:	e778      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010bb0:	6828      	ldr	r0, [r5, #0]
 8010bb2:	4b32      	ldr	r3, [pc, #200]	; (8010c7c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010bb4:	4a32      	ldr	r2, [pc, #200]	; (8010c80 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010bb6:	4298      	cmp	r0, r3
 8010bb8:	bf18      	it	ne
 8010bba:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010bbe:	bf14      	ite	ne
 8010bc0:	2301      	movne	r3, #1
 8010bc2:	2300      	moveq	r3, #0
 8010bc4:	4290      	cmp	r0, r2
 8010bc6:	bf0c      	ite	eq
 8010bc8:	2300      	moveq	r3, #0
 8010bca:	f003 0301 	andne.w	r3, r3, #1
 8010bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bd2:	4290      	cmp	r0, r2
 8010bd4:	bf0c      	ite	eq
 8010bd6:	2300      	moveq	r3, #0
 8010bd8:	f003 0301 	andne.w	r3, r3, #1
 8010bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010be0:	4290      	cmp	r0, r2
 8010be2:	bf0c      	ite	eq
 8010be4:	2300      	moveq	r3, #0
 8010be6:	f003 0301 	andne.w	r3, r3, #1
 8010bea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010bee:	4290      	cmp	r0, r2
 8010bf0:	bf0c      	ite	eq
 8010bf2:	2300      	moveq	r3, #0
 8010bf4:	f003 0301 	andne.w	r3, r3, #1
 8010bf8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010bfc:	4290      	cmp	r0, r2
 8010bfe:	bf0c      	ite	eq
 8010c00:	2300      	moveq	r3, #0
 8010c02:	f003 0301 	andne.w	r3, r3, #1
 8010c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c0a:	4290      	cmp	r0, r2
 8010c0c:	bf0c      	ite	eq
 8010c0e:	2300      	moveq	r3, #0
 8010c10:	f003 0301 	andne.w	r3, r3, #1
 8010c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c18:	4290      	cmp	r0, r2
 8010c1a:	bf0c      	ite	eq
 8010c1c:	2300      	moveq	r3, #0
 8010c1e:	f003 0301 	andne.w	r3, r3, #1
 8010c22:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010c26:	4290      	cmp	r0, r2
 8010c28:	bf0c      	ite	eq
 8010c2a:	2300      	moveq	r3, #0
 8010c2c:	f003 0301 	andne.w	r3, r3, #1
 8010c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c34:	4290      	cmp	r0, r2
 8010c36:	bf0c      	ite	eq
 8010c38:	2300      	moveq	r3, #0
 8010c3a:	f003 0301 	andne.w	r3, r3, #1
 8010c3e:	b11b      	cbz	r3, 8010c48 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010c40:	4b11      	ldr	r3, [pc, #68]	; (8010c88 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8010c42:	4298      	cmp	r0, r3
 8010c44:	f040 80ba 	bne.w	8010dbc <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010c48:	4621      	mov	r1, r4
 8010c4a:	f7fd ffb5 	bl	800ebb8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010c4e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010c50:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010c52:	6999      	ldr	r1, [r3, #24]
 8010c54:	f041 0108 	orr.w	r1, r1, #8
 8010c58:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010c5a:	6999      	ldr	r1, [r3, #24]
 8010c5c:	f021 0104 	bic.w	r1, r1, #4
 8010c60:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010c62:	699a      	ldr	r2, [r3, #24]
 8010c64:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010c66:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010c68:	619a      	str	r2, [r3, #24]
      break;
 8010c6a:	e71a      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8010c6c:	fffeffef 	.word	0xfffeffef
 8010c70:	00010040 	.word	0x00010040
 8010c74:	00111111 	.word	0x00111111
 8010c78:	0802c544 	.word	0x0802c544
 8010c7c:	40010000 	.word	0x40010000
 8010c80:	40000400 	.word	0x40000400
 8010c84:	40010400 	.word	0x40010400
 8010c88:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010c8c:	6828      	ldr	r0, [r5, #0]
 8010c8e:	4b4f      	ldr	r3, [pc, #316]	; (8010dcc <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8010c90:	4a4f      	ldr	r2, [pc, #316]	; (8010dd0 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8010c92:	4298      	cmp	r0, r3
 8010c94:	bf18      	it	ne
 8010c96:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010c9a:	bf14      	ite	ne
 8010c9c:	2301      	movne	r3, #1
 8010c9e:	2300      	moveq	r3, #0
 8010ca0:	4290      	cmp	r0, r2
 8010ca2:	bf0c      	ite	eq
 8010ca4:	2300      	moveq	r3, #0
 8010ca6:	f003 0301 	andne.w	r3, r3, #1
 8010caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cae:	4290      	cmp	r0, r2
 8010cb0:	bf0c      	ite	eq
 8010cb2:	2300      	moveq	r3, #0
 8010cb4:	f003 0301 	andne.w	r3, r3, #1
 8010cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cbc:	4290      	cmp	r0, r2
 8010cbe:	bf0c      	ite	eq
 8010cc0:	2300      	moveq	r3, #0
 8010cc2:	f003 0301 	andne.w	r3, r3, #1
 8010cc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010cca:	4290      	cmp	r0, r2
 8010ccc:	bf0c      	ite	eq
 8010cce:	2300      	moveq	r3, #0
 8010cd0:	f003 0301 	andne.w	r3, r3, #1
 8010cd4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010cd8:	4290      	cmp	r0, r2
 8010cda:	bf0c      	ite	eq
 8010cdc:	2300      	moveq	r3, #0
 8010cde:	f003 0301 	andne.w	r3, r3, #1
 8010ce2:	b113      	cbz	r3, 8010cea <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8010ce4:	4b3b      	ldr	r3, [pc, #236]	; (8010dd4 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8010ce6:	4298      	cmp	r0, r3
 8010ce8:	d161      	bne.n	8010dae <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010cea:	4621      	mov	r1, r4
 8010cec:	f7ff fcb2 	bl	8010654 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010cf0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010cf2:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010cf4:	6999      	ldr	r1, [r3, #24]
 8010cf6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010cfa:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010cfc:	6999      	ldr	r1, [r3, #24]
 8010cfe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010d02:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d04:	699a      	ldr	r2, [r3, #24]
 8010d06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010d0a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d0c:	619a      	str	r2, [r3, #24]
      break;
 8010d0e:	e6c8      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010d10:	6828      	ldr	r0, [r5, #0]
 8010d12:	4b2e      	ldr	r3, [pc, #184]	; (8010dcc <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8010d14:	4a2e      	ldr	r2, [pc, #184]	; (8010dd0 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8010d16:	4298      	cmp	r0, r3
 8010d18:	bf18      	it	ne
 8010d1a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010d1e:	bf14      	ite	ne
 8010d20:	2301      	movne	r3, #1
 8010d22:	2300      	moveq	r3, #0
 8010d24:	4290      	cmp	r0, r2
 8010d26:	bf0c      	ite	eq
 8010d28:	2300      	moveq	r3, #0
 8010d2a:	f003 0301 	andne.w	r3, r3, #1
 8010d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d32:	4290      	cmp	r0, r2
 8010d34:	bf0c      	ite	eq
 8010d36:	2300      	moveq	r3, #0
 8010d38:	f003 0301 	andne.w	r3, r3, #1
 8010d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d40:	4290      	cmp	r0, r2
 8010d42:	bf0c      	ite	eq
 8010d44:	2300      	moveq	r3, #0
 8010d46:	f003 0301 	andne.w	r3, r3, #1
 8010d4a:	b113      	cbz	r3, 8010d52 <HAL_TIM_PWM_ConfigChannel+0x33a>
 8010d4c:	4b22      	ldr	r3, [pc, #136]	; (8010dd8 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8010d4e:	4298      	cmp	r0, r3
 8010d50:	d126      	bne.n	8010da0 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d52:	4621      	mov	r1, r4
 8010d54:	f7fd ff90 	bl	800ec78 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d58:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d5a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d5c:	69d9      	ldr	r1, [r3, #28]
 8010d5e:	f041 0108 	orr.w	r1, r1, #8
 8010d62:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010d64:	69d9      	ldr	r1, [r3, #28]
 8010d66:	f021 0104 	bic.w	r1, r1, #4
 8010d6a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d6c:	69da      	ldr	r2, [r3, #28]
 8010d6e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010d70:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d72:	61da      	str	r2, [r3, #28]
      break;
 8010d74:	e695      	b.n	8010aa2 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010d76:	4819      	ldr	r0, [pc, #100]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010d78:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8010d7c:	f7f3 fa7a 	bl	8004274 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010d80:	6828      	ldr	r0, [r5, #0]
 8010d82:	e703      	b.n	8010b8c <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010d84:	4815      	ldr	r0, [pc, #84]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010d86:	f241 1109 	movw	r1, #4361	; 0x1109
 8010d8a:	f7f3 fa73 	bl	8004274 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010d8e:	6828      	ldr	r0, [r5, #0]
 8010d90:	e6ab      	b.n	8010aea <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010d92:	4812      	ldr	r0, [pc, #72]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010d94:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8010d98:	f7f3 fa6c 	bl	8004274 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d9c:	6828      	ldr	r0, [r5, #0]
 8010d9e:	e6d9      	b.n	8010b54 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010da0:	480e      	ldr	r0, [pc, #56]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010da2:	f241 01d6 	movw	r1, #4310	; 0x10d6
 8010da6:	f7f3 fa65 	bl	8004274 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010daa:	6828      	ldr	r0, [r5, #0]
 8010dac:	e7d1      	b.n	8010d52 <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010dae:	480b      	ldr	r0, [pc, #44]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010db0:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8010db4:	f7f3 fa5e 	bl	8004274 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010db8:	6828      	ldr	r0, [r5, #0]
 8010dba:	e796      	b.n	8010cea <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010dbc:	4807      	ldr	r0, [pc, #28]	; (8010ddc <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010dbe:	f241 01b4 	movw	r1, #4276	; 0x10b4
 8010dc2:	f7f3 fa57 	bl	8004274 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010dc6:	6828      	ldr	r0, [r5, #0]
 8010dc8:	e73e      	b.n	8010c48 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010dca:	bf00      	nop
 8010dcc:	40010000 	.word	0x40010000
 8010dd0:	40000400 	.word	0x40000400
 8010dd4:	40001800 	.word	0x40001800
 8010dd8:	40010400 	.word	0x40010400
 8010ddc:	0802c544 	.word	0x0802c544

08010de0 <TIM_TI1_SetConfig>:
{
 8010de0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010de2:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010de4:	4e1b      	ldr	r6, [pc, #108]	; (8010e54 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010de6:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010dea:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010dec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010dee:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8010df0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010df2:	d01d      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010df4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010df8:	d01a      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010dfa:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010dfe:	42b0      	cmp	r0, r6
 8010e00:	d016      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010e02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e06:	42b0      	cmp	r0, r6
 8010e08:	d012      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010e0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e0e:	42b0      	cmp	r0, r6
 8010e10:	d00e      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010e12:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010e16:	42b0      	cmp	r0, r6
 8010e18:	d00a      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010e1a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010e1e:	42b0      	cmp	r0, r6
 8010e20:	d006      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
 8010e22:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8010e26:	42b0      	cmp	r0, r6
 8010e28:	d002      	beq.n	8010e30 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010e2a:	f044 0201 	orr.w	r2, r4, #1
 8010e2e:	e002      	b.n	8010e36 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010e30:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8010e34:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010e36:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e38:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010e3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010e40:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010e44:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010e46:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010e48:	4313      	orrs	r3, r2
}
 8010e4a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8010e4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8010e4e:	6201      	str	r1, [r0, #32]
}
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	40010000 	.word	0x40010000

08010e58 <HAL_TIM_IC_ConfigChannel>:
{
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010e5a:	4ba8      	ldr	r3, [pc, #672]	; (80110fc <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8010e5c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010e5e:	6801      	ldr	r1, [r0, #0]
{
 8010e60:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010e62:	4fa7      	ldr	r7, [pc, #668]	; (8011100 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 8010e64:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010e66:	4299      	cmp	r1, r3
 8010e68:	bf18      	it	ne
 8010e6a:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8010e6e:	4aa5      	ldr	r2, [pc, #660]	; (8011104 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8010e70:	bf14      	ite	ne
 8010e72:	2301      	movne	r3, #1
 8010e74:	2300      	moveq	r3, #0
 8010e76:	42b9      	cmp	r1, r7
 8010e78:	bf0c      	ite	eq
 8010e7a:	2300      	moveq	r3, #0
 8010e7c:	f003 0301 	andne.w	r3, r3, #1
 8010e80:	4291      	cmp	r1, r2
 8010e82:	bf0c      	ite	eq
 8010e84:	2300      	moveq	r3, #0
 8010e86:	f003 0301 	andne.w	r3, r3, #1
 8010e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010e8e:	4291      	cmp	r1, r2
 8010e90:	bf0c      	ite	eq
 8010e92:	2300      	moveq	r3, #0
 8010e94:	f003 0301 	andne.w	r3, r3, #1
 8010e98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010e9c:	4291      	cmp	r1, r2
 8010e9e:	bf0c      	ite	eq
 8010ea0:	2300      	moveq	r3, #0
 8010ea2:	f003 0301 	andne.w	r3, r3, #1
 8010ea6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010eaa:	4291      	cmp	r1, r2
 8010eac:	bf0c      	ite	eq
 8010eae:	2300      	moveq	r3, #0
 8010eb0:	f003 0301 	andne.w	r3, r3, #1
 8010eb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010eb8:	4291      	cmp	r1, r2
 8010eba:	bf0c      	ite	eq
 8010ebc:	2300      	moveq	r3, #0
 8010ebe:	f003 0301 	andne.w	r3, r3, #1
 8010ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ec6:	4291      	cmp	r1, r2
 8010ec8:	bf0c      	ite	eq
 8010eca:	2300      	moveq	r3, #0
 8010ecc:	f003 0301 	andne.w	r3, r3, #1
 8010ed0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010ed4:	4291      	cmp	r1, r2
 8010ed6:	bf0c      	ite	eq
 8010ed8:	2300      	moveq	r3, #0
 8010eda:	f003 0301 	andne.w	r3, r3, #1
 8010ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ee2:	4291      	cmp	r1, r2
 8010ee4:	bf0c      	ite	eq
 8010ee6:	2300      	moveq	r3, #0
 8010ee8:	f003 0301 	andne.w	r3, r3, #1
 8010eec:	b11b      	cbz	r3, 8010ef6 <HAL_TIM_IC_ConfigChannel+0x9e>
 8010eee:	4b86      	ldr	r3, [pc, #536]	; (8011108 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8010ef0:	4299      	cmp	r1, r3
 8010ef2:	f040 8158 	bne.w	80111a6 <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	f033 0202 	bics.w	r2, r3, #2
 8010efc:	d001      	beq.n	8010f02 <HAL_TIM_IC_ConfigChannel+0xaa>
 8010efe:	2b0a      	cmp	r3, #10
 8010f00:	d11e      	bne.n	8010f40 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010f02:	6863      	ldr	r3, [r4, #4]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d823      	bhi.n	8010f52 <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010f0a:	68a3      	ldr	r3, [r4, #8]
 8010f0c:	f033 030c 	bics.w	r3, r3, #12
 8010f10:	d128      	bne.n	8010f64 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010f12:	68e3      	ldr	r3, [r4, #12]
 8010f14:	2b0f      	cmp	r3, #15
 8010f16:	d82d      	bhi.n	8010f74 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8010f18:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d032      	beq.n	8010f86 <HAL_TIM_IC_ConfigChannel+0x12e>
 8010f20:	2001      	movs	r0, #1
 8010f22:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8010f26:	b386      	cbz	r6, 8010f8a <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8010f28:	2e04      	cmp	r6, #4
 8010f2a:	d042      	beq.n	8010fb2 <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8010f2c:	2e08      	cmp	r6, #8
 8010f2e:	f000 80f3 	beq.w	8011118 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 8010f32:	2e0c      	cmp	r6, #12
 8010f34:	f000 8095 	beq.w	8011062 <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8010f38:	2300      	movs	r3, #0
 8010f3a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010f40:	f241 0141 	movw	r1, #4161	; 0x1041
 8010f44:	4871      	ldr	r0, [pc, #452]	; (801110c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010f46:	f7f3 f995 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	3b01      	subs	r3, #1
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	d9db      	bls.n	8010f0a <HAL_TIM_IC_ConfigChannel+0xb2>
 8010f52:	f241 0142 	movw	r1, #4162	; 0x1042
 8010f56:	486d      	ldr	r0, [pc, #436]	; (801110c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010f58:	f7f3 f98c 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010f5c:	68a3      	ldr	r3, [r4, #8]
 8010f5e:	f033 030c 	bics.w	r3, r3, #12
 8010f62:	d0d6      	beq.n	8010f12 <HAL_TIM_IC_ConfigChannel+0xba>
 8010f64:	f241 0143 	movw	r1, #4163	; 0x1043
 8010f68:	4868      	ldr	r0, [pc, #416]	; (801110c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010f6a:	f7f3 f983 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010f6e:	68e3      	ldr	r3, [r4, #12]
 8010f70:	2b0f      	cmp	r3, #15
 8010f72:	d9d1      	bls.n	8010f18 <HAL_TIM_IC_ConfigChannel+0xc0>
 8010f74:	f241 0144 	movw	r1, #4164	; 0x1044
 8010f78:	4864      	ldr	r0, [pc, #400]	; (801110c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010f7a:	f7f3 f97b 	bl	8004274 <assert_failed>
  __HAL_LOCK(htim);
 8010f7e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d1cc      	bne.n	8010f20 <HAL_TIM_IC_ConfigChannel+0xc8>
 8010f86:	2002      	movs	r0, #2
}
 8010f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8010f8a:	e9d4 1200 	ldrd	r1, r2, [r4]
 8010f8e:	68e3      	ldr	r3, [r4, #12]
 8010f90:	6828      	ldr	r0, [r5, #0]
 8010f92:	f7ff ff25 	bl	8010de0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010f96:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010f98:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010f9a:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010f9c:	6999      	ldr	r1, [r3, #24]
 8010f9e:	f021 010c 	bic.w	r1, r1, #12
 8010fa2:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010fa4:	699a      	ldr	r2, [r3, #24]
 8010fa6:	4322      	orrs	r2, r4
 8010fa8:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8010faa:	2300      	movs	r3, #0
 8010fac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010fb0:	e7c5      	b.n	8010f3e <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010fb2:	682a      	ldr	r2, [r5, #0]
 8010fb4:	4b51      	ldr	r3, [pc, #324]	; (80110fc <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8010fb6:	4952      	ldr	r1, [pc, #328]	; (8011100 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	bf18      	it	ne
 8010fbc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010fc0:	bf14      	ite	ne
 8010fc2:	2301      	movne	r3, #1
 8010fc4:	2300      	moveq	r3, #0
 8010fc6:	428a      	cmp	r2, r1
 8010fc8:	bf0c      	ite	eq
 8010fca:	2300      	moveq	r3, #0
 8010fcc:	f003 0301 	andne.w	r3, r3, #1
 8010fd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010fd4:	428a      	cmp	r2, r1
 8010fd6:	bf0c      	ite	eq
 8010fd8:	2300      	moveq	r3, #0
 8010fda:	f003 0301 	andne.w	r3, r3, #1
 8010fde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010fe2:	428a      	cmp	r2, r1
 8010fe4:	bf0c      	ite	eq
 8010fe6:	2300      	moveq	r3, #0
 8010fe8:	f003 0301 	andne.w	r3, r3, #1
 8010fec:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010ff0:	428a      	cmp	r2, r1
 8010ff2:	bf0c      	ite	eq
 8010ff4:	2300      	moveq	r3, #0
 8010ff6:	f003 0301 	andne.w	r3, r3, #1
 8010ffa:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010ffe:	428a      	cmp	r2, r1
 8011000:	bf0c      	ite	eq
 8011002:	2300      	moveq	r3, #0
 8011004:	f003 0301 	andne.w	r3, r3, #1
 8011008:	b11b      	cbz	r3, 8011012 <HAL_TIM_IC_ConfigChannel+0x1ba>
 801100a:	4b41      	ldr	r3, [pc, #260]	; (8011110 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 801100c:	429a      	cmp	r2, r3
 801100e:	f040 80d7 	bne.w	80111c0 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011012:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8011014:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011016:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801101a:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 801101c:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011020:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011022:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8011024:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011026:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011028:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801102a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801102e:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011032:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011036:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801103a:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 801103c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 801103e:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011040:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011044:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011046:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8011048:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801104a:	6991      	ldr	r1, [r2, #24]
 801104c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8011050:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011052:	6993      	ldr	r3, [r2, #24]
 8011054:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8011058:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 801105a:	2300      	movs	r3, #0
 801105c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8011060:	e76d      	b.n	8010f3e <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011062:	682b      	ldr	r3, [r5, #0]
 8011064:	4a25      	ldr	r2, [pc, #148]	; (80110fc <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8011066:	4926      	ldr	r1, [pc, #152]	; (8011100 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8011068:	4293      	cmp	r3, r2
 801106a:	bf18      	it	ne
 801106c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011070:	bf14      	ite	ne
 8011072:	2201      	movne	r2, #1
 8011074:	2200      	moveq	r2, #0
 8011076:	428b      	cmp	r3, r1
 8011078:	bf0c      	ite	eq
 801107a:	2200      	moveq	r2, #0
 801107c:	f002 0201 	andne.w	r2, r2, #1
 8011080:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011084:	428b      	cmp	r3, r1
 8011086:	bf0c      	ite	eq
 8011088:	2200      	moveq	r2, #0
 801108a:	f002 0201 	andne.w	r2, r2, #1
 801108e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011092:	428b      	cmp	r3, r1
 8011094:	bf0c      	ite	eq
 8011096:	2200      	moveq	r2, #0
 8011098:	f002 0201 	andne.w	r2, r2, #1
 801109c:	b142      	cbz	r2, 80110b0 <HAL_TIM_IC_ConfigChannel+0x258>
 801109e:	4a1d      	ldr	r2, [pc, #116]	; (8011114 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d005      	beq.n	80110b0 <HAL_TIM_IC_ConfigChannel+0x258>
 80110a4:	f241 017a 	movw	r1, #4218	; 0x107a
 80110a8:	4818      	ldr	r0, [pc, #96]	; (801110c <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80110aa:	f7f3 f8e3 	bl	8004274 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 80110ae:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110b0:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 80110b2:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110b4:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80110b8:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 80110ba:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110be:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80110c0:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80110c2:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80110c4:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80110c6:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80110c8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80110cc:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80110d0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80110d4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80110d8:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80110da:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 80110dc:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80110de:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80110e2:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80110e4:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 80110e6:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80110e8:	69d9      	ldr	r1, [r3, #28]
 80110ea:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80110ee:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80110f0:	69da      	ldr	r2, [r3, #28]
 80110f2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80110f6:	61da      	str	r2, [r3, #28]
 80110f8:	e71e      	b.n	8010f38 <HAL_TIM_IC_ConfigChannel+0xe0>
 80110fa:	bf00      	nop
 80110fc:	40010000 	.word	0x40010000
 8011100:	40000400 	.word	0x40000400
 8011104:	40000800 	.word	0x40000800
 8011108:	40002000 	.word	0x40002000
 801110c:	0802c544 	.word	0x0802c544
 8011110:	40001800 	.word	0x40001800
 8011114:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011118:	682b      	ldr	r3, [r5, #0]
 801111a:	4a2d      	ldr	r2, [pc, #180]	; (80111d0 <HAL_TIM_IC_ConfigChannel+0x378>)
 801111c:	492d      	ldr	r1, [pc, #180]	; (80111d4 <HAL_TIM_IC_ConfigChannel+0x37c>)
 801111e:	4293      	cmp	r3, r2
 8011120:	bf18      	it	ne
 8011122:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011126:	bf14      	ite	ne
 8011128:	2201      	movne	r2, #1
 801112a:	2200      	moveq	r2, #0
 801112c:	428b      	cmp	r3, r1
 801112e:	bf0c      	ite	eq
 8011130:	2200      	moveq	r2, #0
 8011132:	f002 0201 	andne.w	r2, r2, #1
 8011136:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801113a:	428b      	cmp	r3, r1
 801113c:	bf0c      	ite	eq
 801113e:	2200      	moveq	r2, #0
 8011140:	f002 0201 	andne.w	r2, r2, #1
 8011144:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011148:	428b      	cmp	r3, r1
 801114a:	bf0c      	ite	eq
 801114c:	2200      	moveq	r2, #0
 801114e:	f002 0201 	andne.w	r2, r2, #1
 8011152:	b112      	cbz	r2, 801115a <HAL_TIM_IC_ConfigChannel+0x302>
 8011154:	4a20      	ldr	r2, [pc, #128]	; (80111d8 <HAL_TIM_IC_ConfigChannel+0x380>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d12b      	bne.n	80111b2 <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801115a:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 801115c:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801115e:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011162:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 8011164:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011168:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801116a:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 801116c:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801116e:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011170:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011172:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011176:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 801117a:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801117c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011180:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8011182:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011184:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 8011188:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801118a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 801118c:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 801118e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8011190:	69d9      	ldr	r1, [r3, #28]
 8011192:	f021 010c 	bic.w	r1, r1, #12
 8011196:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011198:	69da      	ldr	r2, [r3, #28]
 801119a:	4322      	orrs	r2, r4
 801119c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 801119e:	2300      	movs	r3, #0
 80111a0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80111a4:	e6cb      	b.n	8010f3e <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80111aa:	480c      	ldr	r0, [pc, #48]	; (80111dc <HAL_TIM_IC_ConfigChannel+0x384>)
 80111ac:	f7f3 f862 	bl	8004274 <assert_failed>
 80111b0:	e6a1      	b.n	8010ef6 <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80111b2:	f241 016a 	movw	r1, #4202	; 0x106a
 80111b6:	4809      	ldr	r0, [pc, #36]	; (80111dc <HAL_TIM_IC_ConfigChannel+0x384>)
 80111b8:	f7f3 f85c 	bl	8004274 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	e7cc      	b.n	801115a <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80111c0:	f241 015a 	movw	r1, #4186	; 0x105a
 80111c4:	4805      	ldr	r0, [pc, #20]	; (80111dc <HAL_TIM_IC_ConfigChannel+0x384>)
 80111c6:	f7f3 f855 	bl	8004274 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80111ca:	682a      	ldr	r2, [r5, #0]
 80111cc:	e721      	b.n	8011012 <HAL_TIM_IC_ConfigChannel+0x1ba>
 80111ce:	bf00      	nop
 80111d0:	40010000 	.word	0x40010000
 80111d4:	40000400 	.word	0x40000400
 80111d8:	40010400 	.word	0x40010400
 80111dc:	0802c544 	.word	0x0802c544

080111e0 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80111e0:	4b2b      	ldr	r3, [pc, #172]	; (8011290 <TIM_CCxChannelCmd+0xb0>)
 80111e2:	4298      	cmp	r0, r3
{
 80111e4:	b530      	push	{r4, r5, lr}
 80111e6:	4604      	mov	r4, r0
 80111e8:	b083      	sub	sp, #12
 80111ea:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80111ec:	d031      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 80111ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80111f2:	d02e      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 80111f4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80111f8:	4298      	cmp	r0, r3
 80111fa:	d02a      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 80111fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011200:	4298      	cmp	r0, r3
 8011202:	d026      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 8011204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011208:	4298      	cmp	r0, r3
 801120a:	d022      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 801120c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011210:	4298      	cmp	r0, r3
 8011212:	d01e      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 8011214:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8011218:	4298      	cmp	r0, r3
 801121a:	d01a      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 801121c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011220:	4298      	cmp	r0, r3
 8011222:	d016      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 8011224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011228:	4298      	cmp	r0, r3
 801122a:	d012      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 801122c:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8011230:	4298      	cmp	r0, r3
 8011232:	d00e      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 8011234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011238:	4298      	cmp	r0, r3
 801123a:	d00a      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 801123c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011240:	4298      	cmp	r0, r3
 8011242:	d006      	beq.n	8011252 <TIM_CCxChannelCmd+0x72>
 8011244:	f641 6199 	movw	r1, #7833	; 0x1e99
 8011248:	4812      	ldr	r0, [pc, #72]	; (8011294 <TIM_CCxChannelCmd+0xb4>)
 801124a:	9201      	str	r2, [sp, #4]
 801124c:	f7f3 f812 	bl	8004274 <assert_failed>
 8011250:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 8011252:	2d14      	cmp	r5, #20
 8011254:	d90f      	bls.n	8011276 <TIM_CCxChannelCmd+0x96>
 8011256:	2d3c      	cmp	r5, #60	; 0x3c
 8011258:	d111      	bne.n	801127e <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801125a:	f005 051f 	and.w	r5, r5, #31
 801125e:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011260:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011262:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011264:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 8011266:	ea23 0301 	bic.w	r3, r3, r1
 801126a:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801126c:	6a25      	ldr	r5, [r4, #32]
 801126e:	4315      	orrs	r5, r2
 8011270:	6225      	str	r5, [r4, #32]
}
 8011272:	b003      	add	sp, #12
 8011274:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8011276:	4b08      	ldr	r3, [pc, #32]	; (8011298 <TIM_CCxChannelCmd+0xb8>)
 8011278:	40eb      	lsrs	r3, r5
 801127a:	07db      	lsls	r3, r3, #31
 801127c:	d4ed      	bmi.n	801125a <TIM_CCxChannelCmd+0x7a>
 801127e:	f641 619a 	movw	r1, #7834	; 0x1e9a
 8011282:	4804      	ldr	r0, [pc, #16]	; (8011294 <TIM_CCxChannelCmd+0xb4>)
 8011284:	9201      	str	r2, [sp, #4]
 8011286:	f7f2 fff5 	bl	8004274 <assert_failed>
 801128a:	9a01      	ldr	r2, [sp, #4]
 801128c:	e7e5      	b.n	801125a <TIM_CCxChannelCmd+0x7a>
 801128e:	bf00      	nop
 8011290:	40010000 	.word	0x40010000
 8011294:	0802c544 	.word	0x0802c544
 8011298:	00111111 	.word	0x00111111

0801129c <HAL_TIM_IC_Start_DMA>:
{
 801129c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80112a2:	460d      	mov	r5, r1
{
 80112a4:	4617      	mov	r7, r2
 80112a6:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80112a8:	2900      	cmp	r1, #0
 80112aa:	f040 8087 	bne.w	80113bc <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80112ae:	6803      	ldr	r3, [r0, #0]
 80112b0:	4aa4      	ldr	r2, [pc, #656]	; (8011544 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80112b2:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80112b6:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80112b8:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80112bc:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80112be:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80112c2:	d037      	beq.n	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 80112c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112c8:	d034      	beq.n	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 80112ca:	4a9f      	ldr	r2, [pc, #636]	; (8011548 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d031      	beq.n	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 80112d0:	4a9e      	ldr	r2, [pc, #632]	; (801154c <HAL_TIM_IC_Start_DMA+0x2b0>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d066      	beq.n	80113a4 <HAL_TIM_IC_Start_DMA+0x108>
 80112d6:	4a9e      	ldr	r2, [pc, #632]	; (8011550 <HAL_TIM_IC_Start_DMA+0x2b4>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d063      	beq.n	80113a4 <HAL_TIM_IC_Start_DMA+0x108>
 80112dc:	4a9d      	ldr	r2, [pc, #628]	; (8011554 <HAL_TIM_IC_Start_DMA+0x2b8>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	f040 80f7 	bne.w	80114d2 <HAL_TIM_IC_Start_DMA+0x236>
 80112e4:	2d14      	cmp	r5, #20
 80112e6:	d862      	bhi.n	80113ae <HAL_TIM_IC_Start_DMA+0x112>
 80112e8:	4a9b      	ldr	r2, [pc, #620]	; (8011558 <HAL_TIM_IC_Start_DMA+0x2bc>)
 80112ea:	40ea      	lsrs	r2, r5
 80112ec:	07d2      	lsls	r2, r2, #31
 80112ee:	d55e      	bpl.n	80113ae <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80112f0:	4994      	ldr	r1, [pc, #592]	; (8011544 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80112f2:	4a95      	ldr	r2, [pc, #596]	; (8011548 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80112f4:	428b      	cmp	r3, r1
 80112f6:	bf18      	it	ne
 80112f8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80112fc:	bf14      	ite	ne
 80112fe:	2101      	movne	r1, #1
 8011300:	2100      	moveq	r1, #0
 8011302:	4293      	cmp	r3, r2
 8011304:	bf0c      	ite	eq
 8011306:	2100      	moveq	r1, #0
 8011308:	f001 0101 	andne.w	r1, r1, #1
 801130c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011310:	4293      	cmp	r3, r2
 8011312:	bf0c      	ite	eq
 8011314:	2100      	moveq	r1, #0
 8011316:	f001 0101 	andne.w	r1, r1, #1
 801131a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801131e:	4293      	cmp	r3, r2
 8011320:	bf0c      	ite	eq
 8011322:	2100      	moveq	r1, #0
 8011324:	f001 0101 	andne.w	r1, r1, #1
 8011328:	b121      	cbz	r1, 8011334 <HAL_TIM_IC_Start_DMA+0x98>
 801132a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801132e:	4293      	cmp	r3, r2
 8011330:	f040 80c5 	bne.w	80114be <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011334:	2e02      	cmp	r6, #2
 8011336:	d06a      	beq.n	801140e <HAL_TIM_IC_Start_DMA+0x172>
 8011338:	f1b9 0f02 	cmp.w	r9, #2
 801133c:	d067      	beq.n	801140e <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 801133e:	2e01      	cmp	r6, #1
 8011340:	d106      	bne.n	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
 8011342:	f1b9 0f01 	cmp.w	r9, #1
 8011346:	d103      	bne.n	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8011348:	b92f      	cbnz	r7, 8011356 <HAL_TIM_IC_Start_DMA+0xba>
 801134a:	f1b8 0f00 	cmp.w	r8, #0
 801134e:	d002      	beq.n	8011356 <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8011350:	2001      	movs	r0, #1
}
 8011352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011356:	2302      	movs	r3, #2
 8011358:	2d00      	cmp	r5, #0
 801135a:	d05b      	beq.n	8011414 <HAL_TIM_IC_Start_DMA+0x178>
 801135c:	2d04      	cmp	r5, #4
 801135e:	f000 8119 	beq.w	8011594 <HAL_TIM_IC_Start_DMA+0x2f8>
 8011362:	2d08      	cmp	r5, #8
 8011364:	f000 8141 	beq.w	80115ea <HAL_TIM_IC_Start_DMA+0x34e>
 8011368:	2d0c      	cmp	r5, #12
 801136a:	f000 815d 	beq.w	8011628 <HAL_TIM_IC_Start_DMA+0x38c>
 801136e:	2d10      	cmp	r5, #16
 8011370:	f000 812f 	beq.w	80115d2 <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011374:	4629      	mov	r1, r5
  switch (Channel)
 8011376:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801137c:	2201      	movs	r2, #1
 801137e:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011380:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011384:	f7ff ff2c 	bl	80111e0 <TIM_CCxChannelCmd>
  switch (Channel)
 8011388:	2d08      	cmp	r5, #8
 801138a:	f200 812b 	bhi.w	80115e4 <HAL_TIM_IC_Start_DMA+0x348>
 801138e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8011392:	010a      	.short	0x010a
 8011394:	01290129 	.word	0x01290129
 8011398:	01350129 	.word	0x01350129
 801139c:	01290129 	.word	0x01290129
 80113a0:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80113a4:	f035 0204 	bics.w	r2, r5, #4
 80113a8:	d0a2      	beq.n	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
 80113aa:	2a08      	cmp	r2, #8
 80113ac:	d0a0      	beq.n	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
 80113ae:	f640 114a 	movw	r1, #2378	; 0x94a
 80113b2:	486a      	ldr	r0, [pc, #424]	; (801155c <HAL_TIM_IC_Start_DMA+0x2c0>)
 80113b4:	f7f2 ff5e 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80113b8:	6823      	ldr	r3, [r4, #0]
 80113ba:	e799      	b.n	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80113bc:	2904      	cmp	r1, #4
 80113be:	f000 8090 	beq.w	80114e2 <HAL_TIM_IC_Start_DMA+0x246>
 80113c2:	2908      	cmp	r1, #8
 80113c4:	f000 80e0 	beq.w	8011588 <HAL_TIM_IC_Start_DMA+0x2ec>
 80113c8:	290c      	cmp	r1, #12
 80113ca:	d07e      	beq.n	80114ca <HAL_TIM_IC_Start_DMA+0x22e>
 80113cc:	2910      	cmp	r1, #16
 80113ce:	f000 814a 	beq.w	8011666 <HAL_TIM_IC_Start_DMA+0x3ca>
 80113d2:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80113d6:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	4a5a      	ldr	r2, [pc, #360]	; (8011544 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80113dc:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80113e0:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80113e2:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80113e6:	f000 8098 	beq.w	801151a <HAL_TIM_IC_Start_DMA+0x27e>
 80113ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113ee:	f000 8088 	beq.w	8011502 <HAL_TIM_IC_Start_DMA+0x266>
 80113f2:	4a55      	ldr	r2, [pc, #340]	; (8011548 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	f47f af6b 	bne.w	80112d0 <HAL_TIM_IC_Start_DMA+0x34>
 80113fa:	f035 020c 	bics.w	r2, r5, #12
 80113fe:	d099      	beq.n	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 8011400:	4a57      	ldr	r2, [pc, #348]	; (8011560 <HAL_TIM_IC_Start_DMA+0x2c4>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d1d3      	bne.n	80113ae <HAL_TIM_IC_Start_DMA+0x112>
 8011406:	2d00      	cmp	r5, #0
 8011408:	f43f af72 	beq.w	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
 801140c:	e7cf      	b.n	80113ae <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 801140e:	2002      	movs	r0, #2
}
 8011410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011414:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011418:	4629      	mov	r1, r5
 801141a:	2201      	movs	r2, #1
 801141c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801141e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011422:	f7ff fedd 	bl	80111e0 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8011426:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011428:	494e      	ldr	r1, [pc, #312]	; (8011564 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 801142a:	4643      	mov	r3, r8
 801142c:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801142e:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011430:	494d      	ldr	r1, [pc, #308]	; (8011568 <HAL_TIM_IC_Start_DMA+0x2cc>)
 8011432:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011434:	494d      	ldr	r1, [pc, #308]	; (801156c <HAL_TIM_IC_Start_DMA+0x2d0>)
 8011436:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8011438:	6821      	ldr	r1, [r4, #0]
 801143a:	3134      	adds	r1, #52	; 0x34
 801143c:	f7f7 feb8 	bl	80091b0 <HAL_DMA_Start_IT>
 8011440:	2800      	cmp	r0, #0
 8011442:	d185      	bne.n	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011444:	6822      	ldr	r2, [r4, #0]
 8011446:	68d3      	ldr	r3, [r2, #12]
 8011448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801144c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801144e:	4b3d      	ldr	r3, [pc, #244]	; (8011544 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8011450:	4c3d      	ldr	r4, [pc, #244]	; (8011548 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011452:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011456:	bf18      	it	ne
 8011458:	429a      	cmpne	r2, r3
 801145a:	493c      	ldr	r1, [pc, #240]	; (801154c <HAL_TIM_IC_Start_DMA+0x2b0>)
 801145c:	bf0c      	ite	eq
 801145e:	2301      	moveq	r3, #1
 8011460:	2300      	movne	r3, #0
 8011462:	42a2      	cmp	r2, r4
 8011464:	bf08      	it	eq
 8011466:	f043 0301 	orreq.w	r3, r3, #1
 801146a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 801146e:	428a      	cmp	r2, r1
 8011470:	bf08      	it	eq
 8011472:	f043 0301 	orreq.w	r3, r3, #1
 8011476:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 801147a:	42a2      	cmp	r2, r4
 801147c:	bf08      	it	eq
 801147e:	f043 0301 	orreq.w	r3, r3, #1
 8011482:	428a      	cmp	r2, r1
 8011484:	bf08      	it	eq
 8011486:	f043 0301 	orreq.w	r3, r3, #1
 801148a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801148e:	428a      	cmp	r2, r1
 8011490:	bf08      	it	eq
 8011492:	f043 0301 	orreq.w	r3, r3, #1
 8011496:	b913      	cbnz	r3, 801149e <HAL_TIM_IC_Start_DMA+0x202>
 8011498:	4b35      	ldr	r3, [pc, #212]	; (8011570 <HAL_TIM_IC_Start_DMA+0x2d4>)
 801149a:	429a      	cmp	r2, r3
 801149c:	d109      	bne.n	80114b2 <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801149e:	6891      	ldr	r1, [r2, #8]
 80114a0:	4b34      	ldr	r3, [pc, #208]	; (8011574 <HAL_TIM_IC_Start_DMA+0x2d8>)
 80114a2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114a4:	2b06      	cmp	r3, #6
 80114a6:	f43f af54 	beq.w	8011352 <HAL_TIM_IC_Start_DMA+0xb6>
 80114aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114ae:	f43f af50 	beq.w	8011352 <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 80114b2:	6813      	ldr	r3, [r2, #0]
 80114b4:	f043 0301 	orr.w	r3, r3, #1
 80114b8:	6013      	str	r3, [r2, #0]
}
 80114ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80114be:	f640 114b 	movw	r1, #2379	; 0x94b
 80114c2:	4826      	ldr	r0, [pc, #152]	; (801155c <HAL_TIM_IC_Start_DMA+0x2c0>)
 80114c4:	f7f2 fed6 	bl	8004274 <assert_failed>
 80114c8:	e734      	b.n	8011334 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80114ca:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 80114ce:	b2f6      	uxtb	r6, r6
 80114d0:	e782      	b.n	80113d8 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114d2:	4a29      	ldr	r2, [pc, #164]	; (8011578 <HAL_TIM_IC_Start_DMA+0x2dc>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d128      	bne.n	801152a <HAL_TIM_IC_Start_DMA+0x28e>
 80114d8:	f035 0204 	bics.w	r2, r5, #4
 80114dc:	f47f af67 	bne.w	80113ae <HAL_TIM_IC_Start_DMA+0x112>
 80114e0:	e706      	b.n	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80114e2:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80114e6:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80114ea:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114ec:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80114ee:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114f2:	4a14      	ldr	r2, [pc, #80]	; (8011544 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	f43f af1d 	beq.w	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 80114fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114fe:	f47f af78 	bne.w	80113f2 <HAL_TIM_IC_Start_DMA+0x156>
 8011502:	f035 020c 	bics.w	r2, r5, #12
 8011506:	f43f af15 	beq.w	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 801150a:	4a1c      	ldr	r2, [pc, #112]	; (801157c <HAL_TIM_IC_Start_DMA+0x2e0>)
 801150c:	4293      	cmp	r3, r2
 801150e:	f47f af77 	bne.w	8011400 <HAL_TIM_IC_Start_DMA+0x164>
 8011512:	2d00      	cmp	r5, #0
 8011514:	f43f aeec 	beq.w	80112f0 <HAL_TIM_IC_Start_DMA+0x54>
 8011518:	e749      	b.n	80113ae <HAL_TIM_IC_Start_DMA+0x112>
 801151a:	f025 0204 	bic.w	r2, r5, #4
 801151e:	2a08      	cmp	r2, #8
 8011520:	f43f af08 	beq.w	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 8011524:	2a10      	cmp	r2, #16
 8011526:	f43f af05 	beq.w	8011334 <HAL_TIM_IC_Start_DMA+0x98>
 801152a:	4a15      	ldr	r2, [pc, #84]	; (8011580 <HAL_TIM_IC_Start_DMA+0x2e4>)
 801152c:	4293      	cmp	r3, r2
 801152e:	f43f af6a 	beq.w	8011406 <HAL_TIM_IC_Start_DMA+0x16a>
 8011532:	4a14      	ldr	r2, [pc, #80]	; (8011584 <HAL_TIM_IC_Start_DMA+0x2e8>)
 8011534:	4293      	cmp	r3, r2
 8011536:	f43f af66 	beq.w	8011406 <HAL_TIM_IC_Start_DMA+0x16a>
 801153a:	4a0d      	ldr	r2, [pc, #52]	; (8011570 <HAL_TIM_IC_Start_DMA+0x2d4>)
 801153c:	4293      	cmp	r3, r2
 801153e:	d0cb      	beq.n	80114d8 <HAL_TIM_IC_Start_DMA+0x23c>
 8011540:	e7e3      	b.n	801150a <HAL_TIM_IC_Start_DMA+0x26e>
 8011542:	bf00      	nop
 8011544:	40010000 	.word	0x40010000
 8011548:	40000400 	.word	0x40000400
 801154c:	40000800 	.word	0x40000800
 8011550:	40000c00 	.word	0x40000c00
 8011554:	40010400 	.word	0x40010400
 8011558:	00111111 	.word	0x00111111
 801155c:	0802c544 	.word	0x0802c544
 8011560:	40002000 	.word	0x40002000
 8011564:	0800fbcd 	.word	0x0800fbcd
 8011568:	0800fc65 	.word	0x0800fc65
 801156c:	0800fe49 	.word	0x0800fe49
 8011570:	40001800 	.word	0x40001800
 8011574:	00010007 	.word	0x00010007
 8011578:	40014000 	.word	0x40014000
 801157c:	40001c00 	.word	0x40001c00
 8011580:	40014400 	.word	0x40014400
 8011584:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011588:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801158c:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011590:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011592:	e7ab      	b.n	80114ec <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011594:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011598:	4629      	mov	r1, r5
 801159a:	2201      	movs	r2, #1
 801159c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801159e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80115a2:	f7ff fe1d 	bl	80111e0 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80115a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80115a8:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80115aa:	4931      	ldr	r1, [pc, #196]	; (8011670 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80115ac:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80115ae:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80115b0:	4930      	ldr	r1, [pc, #192]	; (8011674 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80115b2:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80115b4:	4930      	ldr	r1, [pc, #192]	; (8011678 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80115b6:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80115b8:	6821      	ldr	r1, [r4, #0]
 80115ba:	3138      	adds	r1, #56	; 0x38
 80115bc:	f7f7 fdf8 	bl	80091b0 <HAL_DMA_Start_IT>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	f47f aec5 	bne.w	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80115c6:	6822      	ldr	r2, [r4, #0]
 80115c8:	68d3      	ldr	r3, [r2, #12]
 80115ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80115ce:	60d3      	str	r3, [r2, #12]
      break;
 80115d0:	e73d      	b.n	801144e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80115d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80115d6:	2201      	movs	r2, #1
 80115d8:	4629      	mov	r1, r5
 80115da:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80115dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80115e0:	f7ff fdfe 	bl	80111e0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115e4:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 80115e6:	2001      	movs	r0, #1
 80115e8:	e731      	b.n	801144e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80115ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80115ee:	4629      	mov	r1, r5
 80115f0:	2201      	movs	r2, #1
 80115f2:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80115f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80115f8:	f7ff fdf2 	bl	80111e0 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80115fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80115fe:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011600:	491b      	ldr	r1, [pc, #108]	; (8011670 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8011602:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011604:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011606:	491b      	ldr	r1, [pc, #108]	; (8011674 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011608:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801160a:	491b      	ldr	r1, [pc, #108]	; (8011678 <HAL_TIM_IC_Start_DMA+0x3dc>)
 801160c:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801160e:	6821      	ldr	r1, [r4, #0]
 8011610:	313c      	adds	r1, #60	; 0x3c
 8011612:	f7f7 fdcd 	bl	80091b0 <HAL_DMA_Start_IT>
 8011616:	2800      	cmp	r0, #0
 8011618:	f47f ae9a 	bne.w	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801161c:	6822      	ldr	r2, [r4, #0]
 801161e:	68d3      	ldr	r3, [r2, #12]
 8011620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011624:	60d3      	str	r3, [r2, #12]
      break;
 8011626:	e712      	b.n	801144e <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011628:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801162c:	4629      	mov	r1, r5
 801162e:	2201      	movs	r2, #1
 8011630:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011632:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011636:	f7ff fdd3 	bl	80111e0 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801163a:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 801163c:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801163e:	490c      	ldr	r1, [pc, #48]	; (8011670 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011640:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8011642:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011644:	490b      	ldr	r1, [pc, #44]	; (8011674 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011646:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011648:	490b      	ldr	r1, [pc, #44]	; (8011678 <HAL_TIM_IC_Start_DMA+0x3dc>)
 801164a:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 801164c:	6821      	ldr	r1, [r4, #0]
 801164e:	3140      	adds	r1, #64	; 0x40
 8011650:	f7f7 fdae 	bl	80091b0 <HAL_DMA_Start_IT>
 8011654:	2800      	cmp	r0, #0
 8011656:	f47f ae7b 	bne.w	8011350 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801165a:	6822      	ldr	r2, [r4, #0]
 801165c:	68d3      	ldr	r3, [r2, #12]
 801165e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011662:	60d3      	str	r3, [r2, #12]
      break;
 8011664:	e6f3      	b.n	801144e <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011666:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 801166a:	b2f6      	uxtb	r6, r6
 801166c:	e6b4      	b.n	80113d8 <HAL_TIM_IC_Start_DMA+0x13c>
 801166e:	bf00      	nop
 8011670:	0800fbcd 	.word	0x0800fbcd
 8011674:	0800fc65 	.word	0x0800fc65
 8011678:	0800fe49 	.word	0x0800fe49

0801167c <HAL_TIM_IC_Stop_DMA>:
{
 801167c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801167e:	4b82      	ldr	r3, [pc, #520]	; (8011888 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8011680:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011682:	6800      	ldr	r0, [r0, #0]
{
 8011684:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011686:	4298      	cmp	r0, r3
 8011688:	f000 80cc 	beq.w	8011824 <HAL_TIM_IC_Stop_DMA+0x1a8>
 801168c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011690:	d056      	beq.n	8011740 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011692:	4b7e      	ldr	r3, [pc, #504]	; (801188c <HAL_TIM_IC_Stop_DMA+0x210>)
 8011694:	4298      	cmp	r0, r3
 8011696:	d053      	beq.n	8011740 <HAL_TIM_IC_Stop_DMA+0xc4>
 8011698:	4b7d      	ldr	r3, [pc, #500]	; (8011890 <HAL_TIM_IC_Stop_DMA+0x214>)
 801169a:	4298      	cmp	r0, r3
 801169c:	d050      	beq.n	8011740 <HAL_TIM_IC_Stop_DMA+0xc4>
 801169e:	4b7d      	ldr	r3, [pc, #500]	; (8011894 <HAL_TIM_IC_Stop_DMA+0x218>)
 80116a0:	4298      	cmp	r0, r3
 80116a2:	d04d      	beq.n	8011740 <HAL_TIM_IC_Stop_DMA+0xc4>
 80116a4:	4b7c      	ldr	r3, [pc, #496]	; (8011898 <HAL_TIM_IC_Stop_DMA+0x21c>)
 80116a6:	4298      	cmp	r0, r3
 80116a8:	f000 80bc 	beq.w	8011824 <HAL_TIM_IC_Stop_DMA+0x1a8>
 80116ac:	4b7b      	ldr	r3, [pc, #492]	; (801189c <HAL_TIM_IC_Stop_DMA+0x220>)
 80116ae:	4298      	cmp	r0, r3
 80116b0:	d00c      	beq.n	80116cc <HAL_TIM_IC_Stop_DMA+0x50>
 80116b2:	4b7b      	ldr	r3, [pc, #492]	; (80118a0 <HAL_TIM_IC_Stop_DMA+0x224>)
 80116b4:	4298      	cmp	r0, r3
 80116b6:	f000 80d9 	beq.w	801186c <HAL_TIM_IC_Stop_DMA+0x1f0>
 80116ba:	4b7a      	ldr	r3, [pc, #488]	; (80118a4 <HAL_TIM_IC_Stop_DMA+0x228>)
 80116bc:	4298      	cmp	r0, r3
 80116be:	f000 80d5 	beq.w	801186c <HAL_TIM_IC_Stop_DMA+0x1f0>
 80116c2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80116c6:	4298      	cmp	r0, r3
 80116c8:	f040 80c9 	bne.w	801185e <HAL_TIM_IC_Stop_DMA+0x1e2>
 80116cc:	f035 0304 	bics.w	r3, r5, #4
 80116d0:	f000 80cf 	beq.w	8011872 <HAL_TIM_IC_Stop_DMA+0x1f6>
 80116d4:	4874      	ldr	r0, [pc, #464]	; (80118a8 <HAL_TIM_IC_Stop_DMA+0x22c>)
 80116d6:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80116da:	f7f2 fdcb 	bl	8004274 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80116de:	6820      	ldr	r0, [r4, #0]
 80116e0:	4b69      	ldr	r3, [pc, #420]	; (8011888 <HAL_TIM_IC_Stop_DMA+0x20c>)
 80116e2:	4a6a      	ldr	r2, [pc, #424]	; (801188c <HAL_TIM_IC_Stop_DMA+0x210>)
 80116e4:	4298      	cmp	r0, r3
 80116e6:	bf18      	it	ne
 80116e8:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80116ec:	bf14      	ite	ne
 80116ee:	2301      	movne	r3, #1
 80116f0:	2300      	moveq	r3, #0
 80116f2:	4290      	cmp	r0, r2
 80116f4:	bf0c      	ite	eq
 80116f6:	2300      	moveq	r3, #0
 80116f8:	f003 0301 	andne.w	r3, r3, #1
 80116fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011700:	4290      	cmp	r0, r2
 8011702:	bf0c      	ite	eq
 8011704:	2300      	moveq	r3, #0
 8011706:	f003 0301 	andne.w	r3, r3, #1
 801170a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801170e:	4290      	cmp	r0, r2
 8011710:	bf0c      	ite	eq
 8011712:	2300      	moveq	r3, #0
 8011714:	f003 0301 	andne.w	r3, r3, #1
 8011718:	b11b      	cbz	r3, 8011722 <HAL_TIM_IC_Stop_DMA+0xa6>
 801171a:	4b5f      	ldr	r3, [pc, #380]	; (8011898 <HAL_TIM_IC_Stop_DMA+0x21c>)
 801171c:	4298      	cmp	r0, r3
 801171e:	f040 80a8 	bne.w	8011872 <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011722:	2200      	movs	r2, #0
 8011724:	4629      	mov	r1, r5
 8011726:	f7ff fd5b 	bl	80111e0 <TIM_CCxChannelCmd>
  switch (Channel)
 801172a:	2d0c      	cmp	r5, #12
 801172c:	d80c      	bhi.n	8011748 <HAL_TIM_IC_Stop_DMA+0xcc>
 801172e:	e8df f005 	tbb	[pc, r5]
 8011732:	0b0d      	.short	0x0b0d
 8011734:	0b640b0b 	.word	0x0b640b0b
 8011738:	0b4a0b0b 	.word	0x0b4a0b0b
 801173c:	0b0b      	.short	0x0b0b
 801173e:	22          	.byte	0x22
 801173f:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011740:	f035 030c 	bics.w	r3, r5, #12
 8011744:	d1c6      	bne.n	80116d4 <HAL_TIM_IC_Stop_DMA+0x58>
 8011746:	e7ec      	b.n	8011722 <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8011748:	2001      	movs	r0, #1
}
 801174a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 801174c:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801174e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011750:	68d3      	ldr	r3, [r2, #12]
 8011752:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011756:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011758:	f7f7 fdce 	bl	80092f8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 801175c:	6823      	ldr	r3, [r4, #0]
 801175e:	f241 1211 	movw	r2, #4369	; 0x1111
 8011762:	6a19      	ldr	r1, [r3, #32]
 8011764:	4211      	tst	r1, r2
 8011766:	d06c      	beq.n	8011842 <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011768:	2301      	movs	r3, #1
 801176a:	2000      	movs	r0, #0
 801176c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011770:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8011774:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011776:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011778:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801177a:	68d3      	ldr	r3, [r2, #12]
 801177c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011780:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011782:	f7f7 fdb9 	bl	80092f8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	f241 1211 	movw	r2, #4369	; 0x1111
 801178c:	6a19      	ldr	r1, [r3, #32]
 801178e:	4211      	tst	r1, r2
 8011790:	d161      	bne.n	8011856 <HAL_TIM_IC_Stop_DMA+0x1da>
 8011792:	6a19      	ldr	r1, [r3, #32]
 8011794:	f240 4244 	movw	r2, #1092	; 0x444
 8011798:	4211      	tst	r1, r2
 801179a:	d15c      	bne.n	8011856 <HAL_TIM_IC_Stop_DMA+0x1da>
 801179c:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801179e:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 80117a0:	f022 0201 	bic.w	r2, r2, #1
 80117a4:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80117a6:	d036      	beq.n	8011816 <HAL_TIM_IC_Stop_DMA+0x19a>
 80117a8:	2d08      	cmp	r5, #8
 80117aa:	d01f      	beq.n	80117ec <HAL_TIM_IC_Stop_DMA+0x170>
 80117ac:	2d0c      	cmp	r5, #12
 80117ae:	d052      	beq.n	8011856 <HAL_TIM_IC_Stop_DMA+0x1da>
 80117b0:	2d10      	cmp	r5, #16
 80117b2:	f04f 0301 	mov.w	r3, #1
 80117b6:	d063      	beq.n	8011880 <HAL_TIM_IC_Stop_DMA+0x204>
 80117b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80117bc:	2301      	movs	r3, #1
 80117be:	2000      	movs	r0, #0
 80117c0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 80117c4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80117c6:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80117c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80117ca:	68d3      	ldr	r3, [r2, #12]
 80117cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117d0:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80117d2:	f7f7 fd91 	bl	80092f8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80117d6:	6823      	ldr	r3, [r4, #0]
 80117d8:	f241 1211 	movw	r2, #4369	; 0x1111
 80117dc:	6a19      	ldr	r1, [r3, #32]
 80117de:	4211      	tst	r1, r2
 80117e0:	d104      	bne.n	80117ec <HAL_TIM_IC_Stop_DMA+0x170>
 80117e2:	6a19      	ldr	r1, [r3, #32]
 80117e4:	f240 4244 	movw	r2, #1092	; 0x444
 80117e8:	4211      	tst	r1, r2
 80117ea:	d0d7      	beq.n	801179c <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80117ec:	2301      	movs	r3, #1
 80117ee:	2000      	movs	r0, #0
 80117f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80117f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 80117f8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80117fa:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80117fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80117fe:	68d3      	ldr	r3, [r2, #12]
 8011800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011804:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011806:	f7f7 fd77 	bl	80092f8 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 801180a:	6823      	ldr	r3, [r4, #0]
 801180c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011810:	6a19      	ldr	r1, [r3, #32]
 8011812:	4211      	tst	r1, r2
 8011814:	d00f      	beq.n	8011836 <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011816:	2301      	movs	r3, #1
 8011818:	2000      	movs	r0, #0
 801181a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801181e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8011822:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011824:	2d14      	cmp	r5, #20
 8011826:	f63f af55 	bhi.w	80116d4 <HAL_TIM_IC_Stop_DMA+0x58>
 801182a:	4b20      	ldr	r3, [pc, #128]	; (80118ac <HAL_TIM_IC_Stop_DMA+0x230>)
 801182c:	40eb      	lsrs	r3, r5
 801182e:	07db      	lsls	r3, r3, #31
 8011830:	f53f af77 	bmi.w	8011722 <HAL_TIM_IC_Stop_DMA+0xa6>
 8011834:	e74e      	b.n	80116d4 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8011836:	6a19      	ldr	r1, [r3, #32]
 8011838:	f240 4244 	movw	r2, #1092	; 0x444
 801183c:	4211      	tst	r1, r2
 801183e:	d0ad      	beq.n	801179c <HAL_TIM_IC_Stop_DMA+0x120>
 8011840:	e7e9      	b.n	8011816 <HAL_TIM_IC_Stop_DMA+0x19a>
 8011842:	6a19      	ldr	r1, [r3, #32]
 8011844:	f240 4244 	movw	r2, #1092	; 0x444
 8011848:	4211      	tst	r1, r2
 801184a:	d18d      	bne.n	8011768 <HAL_TIM_IC_Stop_DMA+0xec>
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	f022 0201 	bic.w	r2, r2, #1
 8011852:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011854:	e788      	b.n	8011768 <HAL_TIM_IC_Stop_DMA+0xec>
 8011856:	2301      	movs	r3, #1
 8011858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801185c:	e7ae      	b.n	80117bc <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801185e:	4b14      	ldr	r3, [pc, #80]	; (80118b0 <HAL_TIM_IC_Stop_DMA+0x234>)
 8011860:	4298      	cmp	r0, r3
 8011862:	d003      	beq.n	801186c <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011864:	4b13      	ldr	r3, [pc, #76]	; (80118b4 <HAL_TIM_IC_Stop_DMA+0x238>)
 8011866:	4298      	cmp	r0, r3
 8011868:	f47f af34 	bne.w	80116d4 <HAL_TIM_IC_Stop_DMA+0x58>
 801186c:	2d00      	cmp	r5, #0
 801186e:	f47f af31 	bne.w	80116d4 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011872:	480d      	ldr	r0, [pc, #52]	; (80118a8 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011874:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8011878:	f7f2 fcfc 	bl	8004274 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801187c:	6820      	ldr	r0, [r4, #0]
 801187e:	e750      	b.n	8011722 <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011884:	e79a      	b.n	80117bc <HAL_TIM_IC_Stop_DMA+0x140>
 8011886:	bf00      	nop
 8011888:	40010000 	.word	0x40010000
 801188c:	40000400 	.word	0x40000400
 8011890:	40000800 	.word	0x40000800
 8011894:	40000c00 	.word	0x40000c00
 8011898:	40010400 	.word	0x40010400
 801189c:	40014000 	.word	0x40014000
 80118a0:	40014400 	.word	0x40014400
 80118a4:	40014800 	.word	0x40014800
 80118a8:	0802c544 	.word	0x0802c544
 80118ac:	00111111 	.word	0x00111111
 80118b0:	40001c00 	.word	0x40001c00
 80118b4:	40002000 	.word	0x40002000

080118b8 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80118b8:	6802      	ldr	r2, [r0, #0]
{
 80118ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80118be:	4b6d      	ldr	r3, [pc, #436]	; (8011a74 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 80118c0:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80118c2:	4f6d      	ldr	r7, [pc, #436]	; (8011a78 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 80118c4:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80118c6:	429a      	cmp	r2, r3
 80118c8:	bf18      	it	ne
 80118ca:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80118ce:	4e6b      	ldr	r6, [pc, #428]	; (8011a7c <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 80118d0:	496b      	ldr	r1, [pc, #428]	; (8011a80 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 80118d2:	bf14      	ite	ne
 80118d4:	2301      	movne	r3, #1
 80118d6:	2300      	moveq	r3, #0
 80118d8:	42ba      	cmp	r2, r7
 80118da:	bf0c      	ite	eq
 80118dc:	2300      	moveq	r3, #0
 80118de:	f003 0301 	andne.w	r3, r3, #1
 80118e2:	42b2      	cmp	r2, r6
 80118e4:	bf0c      	ite	eq
 80118e6:	2300      	moveq	r3, #0
 80118e8:	f003 0301 	andne.w	r3, r3, #1
 80118ec:	428a      	cmp	r2, r1
 80118ee:	bf0c      	ite	eq
 80118f0:	2300      	moveq	r3, #0
 80118f2:	f003 0301 	andne.w	r3, r3, #1
 80118f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80118fa:	428a      	cmp	r2, r1
 80118fc:	bf0c      	ite	eq
 80118fe:	2300      	moveq	r3, #0
 8011900:	f003 0301 	andne.w	r3, r3, #1
 8011904:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011908:	428a      	cmp	r2, r1
 801190a:	bf0c      	ite	eq
 801190c:	2300      	moveq	r3, #0
 801190e:	f003 0301 	andne.w	r3, r3, #1
 8011912:	b11b      	cbz	r3, 801191c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011914:	4b5b      	ldr	r3, [pc, #364]	; (8011a84 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8011916:	429a      	cmp	r2, r3
 8011918:	f040 808c 	bne.w	8011a34 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011922:	2b40      	cmp	r3, #64	; 0x40
 8011924:	d002      	beq.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8011926:	2b00      	cmp	r3, #0
 8011928:	f040 808a 	bne.w	8011a40 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 801192c:	68ab      	ldr	r3, [r5, #8]
 801192e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011932:	d173      	bne.n	8011a1c <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8011934:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011938:	2b01      	cmp	r3, #1
 801193a:	d078      	beq.n	8011a2e <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801193c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 801193e:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011940:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8011a74 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8011944:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011946:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8011a84 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 801194a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801194e:	eba2 0009 	sub.w	r0, r2, r9
 8011952:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8011956:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801195a:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 801195e:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011960:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8011964:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011966:	0940      	lsrs	r0, r0, #5
 8011968:	0949      	lsrs	r1, r1, #5
 801196a:	ea50 0301 	orrs.w	r3, r0, r1
 801196e:	d135      	bne.n	80119dc <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8011970:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011972:	430b      	orrs	r3, r1
 8011974:	4940      	ldr	r1, [pc, #256]	; (8011a78 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8011976:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801197a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801197e:	bf08      	it	eq
 8011980:	f043 0301 	orreq.w	r3, r3, #1
 8011984:	428a      	cmp	r2, r1
 8011986:	bf08      	it	eq
 8011988:	f043 0301 	orreq.w	r3, r3, #1
 801198c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011990:	428a      	cmp	r2, r1
 8011992:	bf08      	it	eq
 8011994:	f043 0301 	orreq.w	r3, r3, #1
 8011998:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801199c:	428a      	cmp	r2, r1
 801199e:	bf08      	it	eq
 80119a0:	f043 0301 	orreq.w	r3, r3, #1
 80119a4:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80119a8:	428a      	cmp	r2, r1
 80119aa:	bf08      	it	eq
 80119ac:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80119b0:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119b2:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80119b4:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 80119b6:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119b8:	b913      	cbnz	r3, 80119c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80119ba:	4b33      	ldr	r3, [pc, #204]	; (8011a88 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 80119bc:	429a      	cmp	r2, r3
 80119be:	d104      	bne.n	80119ca <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119c0:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80119c2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119c6:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80119c8:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80119ca:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80119cc:	2201      	movs	r2, #1

  return HAL_OK;
 80119ce:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80119d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80119d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80119d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80119dc:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80119e0:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 80119e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119e8:	bf18      	it	ne
 80119ea:	2b00      	cmpne	r3, #0
 80119ec:	bf14      	ite	ne
 80119ee:	f04f 0c01 	movne.w	ip, #1
 80119f2:	f04f 0c00 	moveq.w	ip, #0
 80119f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80119fa:	bf0c      	ite	eq
 80119fc:	f04f 0c00 	moveq.w	ip, #0
 8011a00:	f00c 0c01 	andne.w	ip, ip, #1
 8011a04:	f1bc 0f00 	cmp.w	ip, #0
 8011a08:	d002      	beq.n	8011a10 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011a0e:	d11d      	bne.n	8011a4c <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011a10:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a14:	4603      	mov	r3, r0
 8011a16:	ea47 070e 	orr.w	r7, r7, lr
 8011a1a:	e7aa      	b.n	8011972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011a1c:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8011a20:	481a      	ldr	r0, [pc, #104]	; (8011a8c <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011a22:	f7f2 fc27 	bl	8004274 <assert_failed>
  __HAL_LOCK(htim);
 8011a26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d186      	bne.n	801193c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8011a2e:	2002      	movs	r0, #2
}
 8011a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011a34:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8011a38:	4814      	ldr	r0, [pc, #80]	; (8011a8c <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011a3a:	f7f2 fc1b 	bl	8004274 <assert_failed>
 8011a3e:	e76d      	b.n	801191c <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011a40:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8011a44:	4811      	ldr	r0, [pc, #68]	; (8011a8c <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011a46:	f7f2 fc15 	bl	8004274 <assert_failed>
 8011a4a:	e76f      	b.n	801192c <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011a4c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8011a50:	480e      	ldr	r0, [pc, #56]	; (8011a8c <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011a52:	f7f2 fc0f 	bl	8004274 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8011a56:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a58:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a5c:	eba2 0309 	sub.w	r3, r2, r9
 8011a60:	eba2 0c08 	sub.w	ip, r2, r8
 8011a64:	4258      	negs	r0, r3
 8011a66:	4158      	adcs	r0, r3
 8011a68:	f1dc 0100 	rsbs	r1, ip, #0
 8011a6c:	eb41 010c 	adc.w	r1, r1, ip
 8011a70:	e7ce      	b.n	8011a10 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011a72:	bf00      	nop
 8011a74:	40010000 	.word	0x40010000
 8011a78:	40000400 	.word	0x40000400
 8011a7c:	40000800 	.word	0x40000800
 8011a80:	40000c00 	.word	0x40000c00
 8011a84:	40010400 	.word	0x40010400
 8011a88:	40001800 	.word	0x40001800
 8011a8c:	0802c57c 	.word	0x0802c57c

08011a90 <HAL_TIMEx_CommutCallback>:
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop

08011a94 <HAL_TIMEx_BreakCallback>:
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop

08011a98 <HAL_TIMEx_Break2Callback>:
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop

08011a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a9c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a9e:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa6:	e842 3100 	strex	r1, r3, [r2]
 8011aaa:	2900      	cmp	r1, #0
 8011aac:	d1f7      	bne.n	8011a9e <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	f102 0308 	add.w	r3, r2, #8
 8011ab2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ab6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aba:	f102 0c08 	add.w	ip, r2, #8
 8011abe:	e84c 3100 	strex	r1, r3, [ip]
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	d1f3      	bne.n	8011aae <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ac6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d005      	beq.n	8011ad8 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011acc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8011ace:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ad0:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8011ad2:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ad4:	6603      	str	r3, [r0, #96]	; 0x60
}
 8011ad6:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad8:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011adc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae0:	e842 3100 	strex	r1, r3, [r2]
 8011ae4:	2900      	cmp	r1, #0
 8011ae6:	d0f1      	beq.n	8011acc <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae8:	e852 3f00 	ldrex	r3, [r2]
 8011aec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af0:	e842 3100 	strex	r1, r3, [r2]
 8011af4:	2900      	cmp	r1, #0
 8011af6:	d1ef      	bne.n	8011ad8 <UART_EndRxTransfer+0x3c>
 8011af8:	e7e8      	b.n	8011acc <UART_EndRxTransfer+0x30>
 8011afa:	bf00      	nop

08011afc <HAL_UART_DeInit>:
  if (huart == NULL)
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d046      	beq.n	8011b8e <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011b00:	6802      	ldr	r2, [r0, #0]
 8011b02:	4927      	ldr	r1, [pc, #156]	; (8011ba0 <HAL_UART_DeInit+0xa4>)
{
 8011b04:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011b06:	4b27      	ldr	r3, [pc, #156]	; (8011ba4 <HAL_UART_DeInit+0xa8>)
 8011b08:	4604      	mov	r4, r0
 8011b0a:	4827      	ldr	r0, [pc, #156]	; (8011ba8 <HAL_UART_DeInit+0xac>)
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	bf18      	it	ne
 8011b10:	4282      	cmpne	r2, r0
 8011b12:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011b16:	bf14      	ite	ne
 8011b18:	2301      	movne	r3, #1
 8011b1a:	2300      	moveq	r3, #0
 8011b1c:	428a      	cmp	r2, r1
 8011b1e:	bf0c      	ite	eq
 8011b20:	2300      	moveq	r3, #0
 8011b22:	f003 0301 	andne.w	r3, r3, #1
 8011b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b2a:	4282      	cmp	r2, r0
 8011b2c:	bf0c      	ite	eq
 8011b2e:	2300      	moveq	r3, #0
 8011b30:	f003 0301 	andne.w	r3, r3, #1
 8011b34:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011b38:	428a      	cmp	r2, r1
 8011b3a:	bf0c      	ite	eq
 8011b3c:	2300      	moveq	r3, #0
 8011b3e:	f003 0301 	andne.w	r3, r3, #1
 8011b42:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011b46:	4282      	cmp	r2, r0
 8011b48:	bf0c      	ite	eq
 8011b4a:	2300      	moveq	r3, #0
 8011b4c:	f003 0301 	andne.w	r3, r3, #1
 8011b50:	428a      	cmp	r2, r1
 8011b52:	bf0c      	ite	eq
 8011b54:	2300      	moveq	r3, #0
 8011b56:	f003 0301 	andne.w	r3, r3, #1
 8011b5a:	b113      	cbz	r3, 8011b62 <HAL_UART_DeInit+0x66>
 8011b5c:	4b13      	ldr	r3, [pc, #76]	; (8011bac <HAL_UART_DeInit+0xb0>)
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d117      	bne.n	8011b92 <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8011b62:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8011b64:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8011b66:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011b68:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011b6a:	6813      	ldr	r3, [r2, #0]
 8011b6c:	f023 0301 	bic.w	r3, r3, #1
 8011b70:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8011b72:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8011b74:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8011b76:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8011b78:	f7f4 fb9a 	bl	80062b0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b7c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8011b80:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8011b82:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011b84:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8011b88:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b8a:	6625      	str	r5, [r4, #96]	; 0x60
}
 8011b8c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011b8e:	2001      	movs	r0, #1
}
 8011b90:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011b92:	f240 2167 	movw	r1, #615	; 0x267
 8011b96:	4806      	ldr	r0, [pc, #24]	; (8011bb0 <HAL_UART_DeInit+0xb4>)
 8011b98:	f7f2 fb6c 	bl	8004274 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8011b9c:	6822      	ldr	r2, [r4, #0]
 8011b9e:	e7e0      	b.n	8011b62 <HAL_UART_DeInit+0x66>
 8011ba0:	40004800 	.word	0x40004800
 8011ba4:	40011000 	.word	0x40011000
 8011ba8:	40004400 	.word	0x40004400
 8011bac:	40007c00 	.word	0x40007c00
 8011bb0:	0802c5b8 	.word	0x0802c5b8

08011bb4 <HAL_UART_Transmit_DMA>:
{
 8011bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8011bb6:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8011bb8:	2f20      	cmp	r7, #32
 8011bba:	d141      	bne.n	8011c40 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8011bbc:	2900      	cmp	r1, #0
 8011bbe:	d03d      	beq.n	8011c3c <HAL_UART_Transmit_DMA+0x88>
 8011bc0:	fab2 f682 	clz	r6, r2
 8011bc4:	0976      	lsrs	r6, r6, #5
 8011bc6:	2a00      	cmp	r2, #0
 8011bc8:	d038      	beq.n	8011c3c <HAL_UART_Transmit_DMA+0x88>
 8011bca:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8011bcc:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8011bd0:	2801      	cmp	r0, #1
 8011bd2:	d035      	beq.n	8011c40 <HAL_UART_Transmit_DMA+0x8c>
 8011bd4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bd6:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8011bd8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8011bda:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8011bde:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011be0:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8011be4:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8011be8:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bec:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8011bee:	b190      	cbz	r0, 8011c16 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011bf0:	f8df c060 	ldr.w	ip, [pc, #96]	; 8011c54 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011bf8:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011bfc:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011c58 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011c00:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8011c02:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011c04:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011c08:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011c5c <HAL_UART_Transmit_DMA+0xa8>
 8011c0c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011c10:	f7f7 face 	bl	80091b0 <HAL_DMA_Start_IT>
 8011c14:	b9b0      	cbnz	r0, 8011c44 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8011c1a:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011c1c:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8011c1e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c22:	f102 0308 	add.w	r3, r2, #8
 8011c26:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2e:	f102 0108 	add.w	r1, r2, #8
 8011c32:	e841 3000 	strex	r0, r3, [r1]
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d1f3      	bne.n	8011c22 <HAL_UART_Transmit_DMA+0x6e>
}
 8011c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011c3c:	2001      	movs	r0, #1
}
 8011c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011c40:	2002      	movs	r0, #2
}
 8011c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c44:	2310      	movs	r3, #16
        return HAL_ERROR;
 8011c46:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011c48:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011c50:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8011c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c54:	08011d65 	.word	0x08011d65
 8011c58:	08011dad 	.word	0x08011dad
 8011c5c:	08011dbd 	.word	0x08011dbd

08011c60 <HAL_UART_Abort>:
{
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4604      	mov	r4, r0
 8011c64:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c66:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c6a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c6e:	e843 2100 	strex	r1, r2, [r3]
 8011c72:	2900      	cmp	r1, #0
 8011c74:	d1f7      	bne.n	8011c66 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c76:	f103 0208 	add.w	r2, r3, #8
 8011c7a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c7e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c82:	f103 0008 	add.w	r0, r3, #8
 8011c86:	e840 2100 	strex	r1, r2, [r0]
 8011c8a:	2900      	cmp	r1, #0
 8011c8c:	d1f3      	bne.n	8011c76 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c8e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011c90:	2a01      	cmp	r2, #1
 8011c92:	d043      	beq.n	8011d1c <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011c94:	6899      	ldr	r1, [r3, #8]
 8011c96:	461a      	mov	r2, r3
 8011c98:	0608      	lsls	r0, r1, #24
 8011c9a:	d42a      	bmi.n	8011cf2 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c9c:	6899      	ldr	r1, [r3, #8]
 8011c9e:	0649      	lsls	r1, r1, #25
 8011ca0:	d514      	bpl.n	8011ccc <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca2:	f103 0208 	add.w	r2, r3, #8
 8011ca6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cae:	f103 0008 	add.w	r0, r3, #8
 8011cb2:	e840 2100 	strex	r1, r2, [r0]
 8011cb6:	2900      	cmp	r1, #0
 8011cb8:	d1f3      	bne.n	8011ca2 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8011cba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d03e      	beq.n	8011d3e <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8011cc0:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011cc2:	f7f7 fad1 	bl	8009268 <HAL_DMA_Abort>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d145      	bne.n	8011d56 <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011cca:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8011ccc:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011cce:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8011cd0:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8011cd2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8011cd6:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8011cd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011cdc:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011cde:	6991      	ldr	r1, [r2, #24]
 8011ce0:	f041 0108 	orr.w	r1, r1, #8
 8011ce4:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011ce6:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011ce8:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cea:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011cf0:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf2:	f103 0208 	add.w	r2, r3, #8
 8011cf6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfe:	f103 0008 	add.w	r0, r3, #8
 8011d02:	e840 2100 	strex	r1, r2, [r0]
 8011d06:	2900      	cmp	r1, #0
 8011d08:	d1f3      	bne.n	8011cf2 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8011d0a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011d0c:	b120      	cbz	r0, 8011d18 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8011d0e:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011d10:	f7f7 faaa 	bl	8009268 <HAL_DMA_Abort>
 8011d14:	b9a8      	cbnz	r0, 8011d42 <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d16:	6823      	ldr	r3, [r4, #0]
 8011d18:	461a      	mov	r2, r3
 8011d1a:	e7bf      	b.n	8011c9c <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d1c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011d20:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d24:	e843 2100 	strex	r1, r2, [r3]
 8011d28:	2900      	cmp	r1, #0
 8011d2a:	d0b3      	beq.n	8011c94 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d2c:	e853 2f00 	ldrex	r2, [r3]
 8011d30:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d34:	e843 2100 	strex	r1, r2, [r3]
 8011d38:	2900      	cmp	r1, #0
 8011d3a:	d1ef      	bne.n	8011d1c <HAL_UART_Abort+0xbc>
 8011d3c:	e7aa      	b.n	8011c94 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011d3e:	461a      	mov	r2, r3
 8011d40:	e7c4      	b.n	8011ccc <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011d42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011d44:	f7f7 fbdc 	bl	8009500 <HAL_DMA_GetError>
 8011d48:	2820      	cmp	r0, #32
 8011d4a:	d1e4      	bne.n	8011d16 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011d4c:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8011d4e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011d50:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011d54:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011d56:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011d58:	f7f7 fbd2 	bl	8009500 <HAL_DMA_GetError>
 8011d5c:	2820      	cmp	r0, #32
 8011d5e:	d1b4      	bne.n	8011cca <HAL_UART_Abort+0x6a>
 8011d60:	e7f4      	b.n	8011d4c <HAL_UART_Abort+0xec>
 8011d62:	bf00      	nop

08011d64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011d64:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011d66:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d68:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d6e:	d018      	beq.n	8011da2 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8011d70:	2300      	movs	r3, #0
 8011d72:	6802      	ldr	r2, [r0, #0]
 8011d74:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d78:	f102 0308 	add.w	r3, r2, #8
 8011d7c:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d84:	f102 0008 	add.w	r0, r2, #8
 8011d88:	e840 3100 	strex	r1, r3, [r0]
 8011d8c:	2900      	cmp	r1, #0
 8011d8e:	d1f3      	bne.n	8011d78 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d90:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d98:	e842 3100 	strex	r1, r3, [r2]
 8011d9c:	2900      	cmp	r1, #0
 8011d9e:	d1f7      	bne.n	8011d90 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011da0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011da2:	f7ef fab3 	bl	800130c <HAL_UART_TxCpltCallback>
}
 8011da6:	bd08      	pop	{r3, pc}

08011da8 <HAL_UART_TxHalfCpltCallback>:
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop

08011dac <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011dac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011dae:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011db0:	f7ff fffa 	bl	8011da8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011db4:	bd08      	pop	{r3, pc}
 8011db6:	bf00      	nop

08011db8 <HAL_UART_RxHalfCpltCallback>:
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop

08011dbc <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dbc:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011dbe:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011dc0:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8011dc2:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011dc4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011dc6:	6893      	ldr	r3, [r2, #8]
 8011dc8:	061b      	lsls	r3, r3, #24
 8011dca:	d501      	bpl.n	8011dd0 <UART_DMAError+0x14>
 8011dcc:	2921      	cmp	r1, #33	; 0x21
 8011dce:	d00d      	beq.n	8011dec <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011dd0:	6893      	ldr	r3, [r2, #8]
 8011dd2:	065b      	lsls	r3, r3, #25
 8011dd4:	d501      	bpl.n	8011dda <UART_DMAError+0x1e>
 8011dd6:	2c22      	cmp	r4, #34	; 0x22
 8011dd8:	d016      	beq.n	8011e08 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011dda:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8011dde:	f043 0310 	orr.w	r3, r3, #16
 8011de2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011de6:	f7f2 fd23 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dea:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8011dec:	2300      	movs	r3, #0
 8011dee:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011df6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfa:	e842 3100 	strex	r1, r3, [r2]
 8011dfe:	2900      	cmp	r1, #0
 8011e00:	d1f7      	bne.n	8011df2 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8011e02:	2320      	movs	r3, #32
 8011e04:	6783      	str	r3, [r0, #120]	; 0x78
}
 8011e06:	e7e3      	b.n	8011dd0 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8011e08:	2300      	movs	r3, #0
 8011e0a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011e0e:	f7ff fe45 	bl	8011a9c <UART_EndRxTransfer>
 8011e12:	e7e2      	b.n	8011dda <UART_DMAError+0x1e>

08011e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011e14:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e16:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011e1e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011e22:	f7f2 fd05 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e26:	bd08      	pop	{r3, pc}

08011e28 <HAL_UART_AbortCpltCallback>:
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop

08011e2c <HAL_UART_Abort_IT>:
{
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e32:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011e36:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e3a:	e843 2100 	strex	r1, r2, [r3]
 8011e3e:	2900      	cmp	r1, #0
 8011e40:	d1f7      	bne.n	8011e32 <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e42:	f103 0208 	add.w	r2, r3, #8
 8011e46:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e4a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e4e:	f103 0008 	add.w	r0, r3, #8
 8011e52:	e840 2100 	strex	r1, r2, [r0]
 8011e56:	2900      	cmp	r1, #0
 8011e58:	d1f3      	bne.n	8011e42 <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e5a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8011e5c:	2a01      	cmp	r2, #1
 8011e5e:	d05e      	beq.n	8011f1e <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8011e60:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d071      	beq.n	8011f4a <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011e66:	689a      	ldr	r2, [r3, #8]
 8011e68:	461c      	mov	r4, r3
 8011e6a:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8011e6e:	bf18      	it	ne
 8011e70:	4a3b      	ldrne	r2, [pc, #236]	; (8011f60 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8011e72:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011e74:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011e76:	b129      	cbz	r1, 8011e84 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e78:	689a      	ldr	r2, [r3, #8]
 8011e7a:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8011e7e:	bf18      	it	ne
 8011e80:	4a38      	ldrne	r2, [pc, #224]	; (8011f64 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8011e82:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011e84:	689a      	ldr	r2, [r3, #8]
 8011e86:	0612      	lsls	r2, r2, #24
 8011e88:	d430      	bmi.n	8011eec <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e8a:	689a      	ldr	r2, [r3, #8]
 8011e8c:	0656      	lsls	r6, r2, #25
 8011e8e:	d515      	bpl.n	8011ebc <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011e90:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e92:	f103 0208 	add.w	r2, r3, #8
 8011e96:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e9e:	f103 0008 	add.w	r0, r3, #8
 8011ea2:	e840 2600 	strex	r6, r2, [r0]
 8011ea6:	2e00      	cmp	r6, #0
 8011ea8:	d1f3      	bne.n	8011e92 <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8011eaa:	2900      	cmp	r1, #0
 8011eac:	d04f      	beq.n	8011f4e <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011eae:	4608      	mov	r0, r1
 8011eb0:	f7f7 fa22 	bl	80092f8 <HAL_DMA_Abort_IT>
 8011eb4:	b1c0      	cbz	r0, 8011ee8 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8011eb6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011eb8:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 8011eba:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8011ebc:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011ebe:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8011ec0:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8011ec2:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8011ec4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8011ec8:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 8011eca:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 8011ece:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ed0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011ed4:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ed6:	69a2      	ldr	r2, [r4, #24]
 8011ed8:	f042 0208 	orr.w	r2, r2, #8
 8011edc:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8011ede:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8011ee0:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ee2:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8011ee4:	f7ff ffa0 	bl	8011e28 <HAL_UART_AbortCpltCallback>
}
 8011ee8:	2000      	movs	r0, #0
 8011eea:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eec:	f103 0208 	add.w	r2, r3, #8
 8011ef0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ef8:	f103 0608 	add.w	r6, r3, #8
 8011efc:	e846 2400 	strex	r4, r2, [r6]
 8011f00:	2c00      	cmp	r4, #0
 8011f02:	d1f3      	bne.n	8011eec <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8011f04:	b1e0      	cbz	r0, 8011f40 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011f06:	f7f7 f9f7 	bl	80092f8 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f0a:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011f0c:	b318      	cbz	r0, 8011f56 <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 8011f0e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f10:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 8011f12:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f14:	461c      	mov	r4, r3
 8011f16:	0651      	lsls	r1, r2, #25
 8011f18:	d5d0      	bpl.n	8011ebc <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011f1a:	2401      	movs	r4, #1
 8011f1c:	e01e      	b.n	8011f5c <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f1e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011f22:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f26:	e843 2100 	strex	r1, r2, [r3]
 8011f2a:	2900      	cmp	r1, #0
 8011f2c:	d098      	beq.n	8011e60 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f2e:	e853 2f00 	ldrex	r2, [r3]
 8011f32:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f36:	e843 2100 	strex	r1, r2, [r3]
 8011f3a:	2900      	cmp	r1, #0
 8011f3c:	d1ef      	bne.n	8011f1e <HAL_UART_Abort_IT+0xf2>
 8011f3e:	e78f      	b.n	8011e60 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f40:	689a      	ldr	r2, [r3, #8]
 8011f42:	461c      	mov	r4, r3
 8011f44:	0652      	lsls	r2, r2, #25
 8011f46:	d5b9      	bpl.n	8011ebc <HAL_UART_Abort_IT+0x90>
 8011f48:	e7a2      	b.n	8011e90 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011f4a:	461c      	mov	r4, r3
 8011f4c:	e792      	b.n	8011e74 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8011f4e:	2c01      	cmp	r4, #1
 8011f50:	d1ca      	bne.n	8011ee8 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011f52:	461c      	mov	r4, r3
 8011f54:	e7b2      	b.n	8011ebc <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f56:	689a      	ldr	r2, [r3, #8]
 8011f58:	0650      	lsls	r0, r2, #25
 8011f5a:	d5c5      	bpl.n	8011ee8 <HAL_UART_Abort_IT+0xbc>
 8011f5c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011f5e:	e798      	b.n	8011e92 <HAL_UART_Abort_IT+0x66>
 8011f60:	08011fa9 	.word	0x08011fa9
 8011f64:	08011f69 	.word	0x08011f69

08011f68 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f68:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8011f6a:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011f6c:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8011f70:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8011f72:	b113      	cbz	r3, 8011f7a <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f76:	b103      	cbz	r3, 8011f7a <UART_DMARxAbortCallback+0x12>
 8011f78:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011f7a:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011f7c:	6802      	ldr	r2, [r0, #0]
 8011f7e:	210f      	movs	r1, #15
{
 8011f80:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011f82:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011f86:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 8011f88:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011f90:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f92:	6991      	ldr	r1, [r2, #24]
 8011f94:	f041 0108 	orr.w	r1, r1, #8
 8011f98:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011f9a:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011f9c:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f9e:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011fa0:	f7ff ff42 	bl	8011e28 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fa4:	bd10      	pop	{r4, pc}
 8011fa6:	bf00      	nop

08011fa8 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8011faa:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8011fac:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8011fb0:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011fb2:	b113      	cbz	r3, 8011fba <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fb6:	b103      	cbz	r3, 8011fba <UART_DMATxAbortCallback+0x12>
 8011fb8:	4770      	bx	lr
{
 8011fba:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011fbc:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8011fbe:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011fc0:	6801      	ldr	r1, [r0, #0]
 8011fc2:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8011fc4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8011fc8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fcc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011fd0:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8011fd2:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011fd4:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd6:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8011fd8:	f7ff ff26 	bl	8011e28 <HAL_UART_AbortCpltCallback>
}
 8011fdc:	bd10      	pop	{r4, pc}
 8011fde:	bf00      	nop

08011fe0 <HAL_UARTEx_RxEventCallback>:
}
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop

08011fe4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011fe4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fe6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011fe8:	2b22      	cmp	r3, #34	; 0x22
 8011fea:	d005      	beq.n	8011ff8 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011fec:	6802      	ldr	r2, [r0, #0]
 8011fee:	6993      	ldr	r3, [r2, #24]
 8011ff0:	f043 0308 	orr.w	r3, r3, #8
 8011ff4:	6193      	str	r3, [r2, #24]
  }
}
 8011ff6:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ff8:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ffa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012000:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012002:	400b      	ands	r3, r1
 8012004:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8012006:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 801200a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801200c:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 801200e:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8012010:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8012012:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8012014:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8012018:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 801201c:	b29b      	uxth	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1e9      	bne.n	8011ff6 <UART_RxISR_8BIT+0x12>
 8012022:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012024:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	e843 2100 	strex	r1, r2, [r3]
 8012030:	2900      	cmp	r1, #0
 8012032:	d1f7      	bne.n	8012024 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012034:	f103 0208 	add.w	r2, r3, #8
 8012038:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801203c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012040:	f103 0c08 	add.w	ip, r3, #8
 8012044:	e84c 2100 	strex	r1, r2, [ip]
 8012048:	2900      	cmp	r1, #0
 801204a:	d1f3      	bne.n	8012034 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 801204c:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 801204e:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8012050:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012052:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012054:	2a01      	cmp	r2, #1
 8012056:	d112      	bne.n	801207e <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012058:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801205e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012062:	e843 2100 	strex	r1, r2, [r3]
 8012066:	2900      	cmp	r1, #0
 8012068:	d1f7      	bne.n	801205a <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801206a:	69da      	ldr	r2, [r3, #28]
 801206c:	06d2      	lsls	r2, r2, #27
 801206e:	d501      	bpl.n	8012074 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012070:	2210      	movs	r2, #16
 8012072:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012074:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8012078:	f7ff ffb2 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
}
 801207c:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 801207e:	f7f2 fb61 	bl	8004744 <HAL_UART_RxCpltCallback>
}
 8012082:	bd08      	pop	{r3, pc}

08012084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012084:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012086:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012088:	2b22      	cmp	r3, #34	; 0x22
 801208a:	d005      	beq.n	8012098 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801208c:	6802      	ldr	r2, [r0, #0]
 801208e:	6993      	ldr	r3, [r2, #24]
 8012090:	f043 0308 	orr.w	r3, r3, #8
 8012094:	6193      	str	r3, [r2, #24]
  }
}
 8012096:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012098:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 801209a:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801209e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80120a0:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80120a2:	ea02 020c 	and.w	r2, r2, ip
 80120a6:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80120aa:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80120ae:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80120b0:	3a01      	subs	r2, #1
 80120b2:	b292      	uxth	r2, r2
 80120b4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80120b8:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80120bc:	b292      	uxth	r2, r2
 80120be:	2a00      	cmp	r2, #0
 80120c0:	d1e9      	bne.n	8012096 <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80120c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ca:	e843 2100 	strex	r1, r2, [r3]
 80120ce:	2900      	cmp	r1, #0
 80120d0:	d1f7      	bne.n	80120c2 <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d2:	f103 0208 	add.w	r2, r3, #8
 80120d6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120de:	f103 0c08 	add.w	ip, r3, #8
 80120e2:	e84c 2100 	strex	r1, r2, [ip]
 80120e6:	2900      	cmp	r1, #0
 80120e8:	d1f3      	bne.n	80120d2 <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 80120ea:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80120ec:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80120ee:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120f0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80120f2:	2a01      	cmp	r2, #1
 80120f4:	d112      	bne.n	801211c <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120f6:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012100:	e843 2100 	strex	r1, r2, [r3]
 8012104:	2900      	cmp	r1, #0
 8012106:	d1f7      	bne.n	80120f8 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012108:	69da      	ldr	r2, [r3, #28]
 801210a:	06d2      	lsls	r2, r2, #27
 801210c:	d501      	bpl.n	8012112 <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801210e:	2210      	movs	r2, #16
 8012110:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012112:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8012116:	f7ff ff63 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
}
 801211a:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 801211c:	f7f2 fb12 	bl	8004744 <HAL_UART_RxCpltCallback>
}
 8012120:	bd08      	pop	{r3, pc}
 8012122:	bf00      	nop

08012124 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012124:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8012126:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012128:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801212a:	2b01      	cmp	r3, #1
 801212c:	d002      	beq.n	8012134 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 801212e:	f7ff fe43 	bl	8011db8 <HAL_UART_RxHalfCpltCallback>
}
 8012132:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012134:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8012138:	0849      	lsrs	r1, r1, #1
 801213a:	f7ff ff51 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
}
 801213e:	bd08      	pop	{r3, pc}

08012140 <UART_DMAReceiveCplt>:
{
 8012140:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012142:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012144:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801214a:	d028      	beq.n	801219e <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 801214c:	2200      	movs	r2, #0
 801214e:	6803      	ldr	r3, [r0, #0]
 8012150:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012154:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215c:	e843 2100 	strex	r1, r2, [r3]
 8012160:	2900      	cmp	r1, #0
 8012162:	d1f7      	bne.n	8012154 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012164:	f103 0208 	add.w	r2, r3, #8
 8012168:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801216c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012170:	f103 0c08 	add.w	ip, r3, #8
 8012174:	e84c 2100 	strex	r1, r2, [ip]
 8012178:	2900      	cmp	r1, #0
 801217a:	d1f3      	bne.n	8012164 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217c:	f103 0208 	add.w	r2, r3, #8
 8012180:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012188:	f103 0c08 	add.w	ip, r3, #8
 801218c:	e84c 2100 	strex	r1, r2, [ip]
 8012190:	2900      	cmp	r1, #0
 8012192:	d1f3      	bne.n	801217c <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8012194:	2220      	movs	r2, #32
 8012196:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012198:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801219a:	2a01      	cmp	r2, #1
 801219c:	d005      	beq.n	80121aa <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801219e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d013      	beq.n	80121cc <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80121a4:	f7f2 face 	bl	8004744 <HAL_UART_RxCpltCallback>
}
 80121a8:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121aa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b2:	e843 2100 	strex	r1, r2, [r3]
 80121b6:	2900      	cmp	r1, #0
 80121b8:	d0f1      	beq.n	801219e <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ba:	e853 2f00 	ldrex	r2, [r3]
 80121be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c2:	e843 2100 	strex	r1, r2, [r3]
 80121c6:	2900      	cmp	r1, #0
 80121c8:	d1ef      	bne.n	80121aa <UART_DMAReceiveCplt+0x6a>
 80121ca:	e7e8      	b.n	801219e <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121cc:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80121d0:	f7ff ff06 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
}
 80121d4:	bd08      	pop	{r3, pc}
 80121d6:	bf00      	nop

080121d8 <HAL_UARTEx_WakeupCallback>:
}
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop

080121dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80121dc:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80121de:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80121e2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80121e4:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 80121e6:	ea12 0f0c 	tst.w	r2, ip
{
 80121ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ee:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80121f0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80121f2:	d17d      	bne.n	80122f0 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80121f4:	0697      	lsls	r7, r2, #26
 80121f6:	d502      	bpl.n	80121fe <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80121f8:	068e      	lsls	r6, r1, #26
 80121fa:	f100 80f4 	bmi.w	80123e6 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012200:	2801      	cmp	r0, #1
 8012202:	d024      	beq.n	801224e <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012204:	02d0      	lsls	r0, r2, #11
 8012206:	d502      	bpl.n	801220e <HAL_UART_IRQHandler+0x32>
 8012208:	026f      	lsls	r7, r5, #9
 801220a:	f100 80f1 	bmi.w	80123f0 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 801220e:	0616      	lsls	r6, r2, #24
 8012210:	d414      	bmi.n	801223c <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012212:	0650      	lsls	r0, r2, #25
 8012214:	d501      	bpl.n	801221a <HAL_UART_IRQHandler+0x3e>
 8012216:	064a      	lsls	r2, r1, #25
 8012218:	d401      	bmi.n	801221e <HAL_UART_IRQHandler+0x42>
}
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801221e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012226:	e843 2100 	strex	r1, r2, [r3]
 801222a:	2900      	cmp	r1, #0
 801222c:	d1f7      	bne.n	801221e <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 801222e:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8012230:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8012232:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8012234:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8012236:	f7ef f869 	bl	800130c <HAL_UART_TxCpltCallback>
}
 801223a:	e7ee      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801223c:	060d      	lsls	r5, r1, #24
 801223e:	d5e8      	bpl.n	8012212 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8012240:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012242:	2b00      	cmp	r3, #0
 8012244:	d0e9      	beq.n	801221a <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8012246:	4620      	mov	r0, r4
}
 8012248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 801224c:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801224e:	06d7      	lsls	r7, r2, #27
 8012250:	d5d8      	bpl.n	8012204 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012252:	06ce      	lsls	r6, r1, #27
 8012254:	d5d6      	bpl.n	8012204 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012256:	2210      	movs	r2, #16
 8012258:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801225a:	689a      	ldr	r2, [r3, #8]
 801225c:	0655      	lsls	r5, r2, #25
 801225e:	f140 80d9 	bpl.w	8012414 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012262:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8012264:	6802      	ldr	r2, [r0, #0]
 8012266:	6852      	ldr	r2, [r2, #4]
 8012268:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 801226a:	2a00      	cmp	r2, #0
 801226c:	d0d5      	beq.n	801221a <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801226e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8012272:	4291      	cmp	r1, r2
 8012274:	d9d1      	bls.n	801221a <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 8012276:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801227a:	69c2      	ldr	r2, [r0, #28]
 801227c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012280:	d02e      	beq.n	80122e0 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012282:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228a:	e843 2100 	strex	r1, r2, [r3]
 801228e:	2900      	cmp	r1, #0
 8012290:	d1f7      	bne.n	8012282 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012292:	f103 0208 	add.w	r2, r3, #8
 8012296:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801229a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229e:	f103 0508 	add.w	r5, r3, #8
 80122a2:	e845 2100 	strex	r1, r2, [r5]
 80122a6:	2900      	cmp	r1, #0
 80122a8:	d1f3      	bne.n	8012292 <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122aa:	f103 0208 	add.w	r2, r3, #8
 80122ae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80122b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b6:	f103 0508 	add.w	r5, r3, #8
 80122ba:	e845 2100 	strex	r1, r2, [r5]
 80122be:	2900      	cmp	r1, #0
 80122c0:	d1f3      	bne.n	80122aa <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80122c2:	2220      	movs	r2, #32
 80122c4:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122c6:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d0:	e843 2100 	strex	r1, r2, [r3]
 80122d4:	2900      	cmp	r1, #0
 80122d6:	d1f7      	bne.n	80122c8 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80122d8:	f7f6 ffc6 	bl	8009268 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80122dc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80122e0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80122e4:	4620      	mov	r0, r4
 80122e6:	1ac9      	subs	r1, r1, r3
 80122e8:	b289      	uxth	r1, r1
 80122ea:	f7ff fe79 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
 80122ee:	e794      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80122f0:	4864      	ldr	r0, [pc, #400]	; (8012484 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80122f2:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80122f6:	4008      	ands	r0, r1
 80122f8:	4330      	orrs	r0, r6
 80122fa:	d080      	beq.n	80121fe <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80122fc:	07d5      	lsls	r5, r2, #31
 80122fe:	461f      	mov	r7, r3
 8012300:	d509      	bpl.n	8012316 <HAL_UART_IRQHandler+0x13a>
 8012302:	05c8      	lsls	r0, r1, #23
 8012304:	d507      	bpl.n	8012316 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012306:	2001      	movs	r0, #1
 8012308:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801230a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801230e:	f040 0001 	orr.w	r0, r0, #1
 8012312:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012316:	0795      	lsls	r5, r2, #30
 8012318:	d560      	bpl.n	80123dc <HAL_UART_IRQHandler+0x200>
 801231a:	b18e      	cbz	r6, 8012340 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801231c:	2002      	movs	r0, #2
 801231e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012320:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012324:	f040 0004 	orr.w	r0, r0, #4
 8012328:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801232c:	0750      	lsls	r0, r2, #29
 801232e:	d507      	bpl.n	8012340 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012330:	2004      	movs	r0, #4
 8012332:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012334:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012338:	f040 0002 	orr.w	r0, r0, #2
 801233c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012340:	0710      	lsls	r0, r2, #28
 8012342:	d50b      	bpl.n	801235c <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012344:	f001 0020 	and.w	r0, r1, #32
 8012348:	4330      	orrs	r0, r6
 801234a:	d007      	beq.n	801235c <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801234c:	2008      	movs	r0, #8
 801234e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012350:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012354:	f040 0008 	orr.w	r0, r0, #8
 8012358:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801235c:	0516      	lsls	r6, r2, #20
 801235e:	d50a      	bpl.n	8012376 <HAL_UART_IRQHandler+0x19a>
 8012360:	014d      	lsls	r5, r1, #5
 8012362:	d508      	bpl.n	8012376 <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012364:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012368:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801236a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801236e:	f043 0320 	orr.w	r3, r3, #32
 8012372:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012376:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801237a:	2b00      	cmp	r3, #0
 801237c:	f43f af4d 	beq.w	801221a <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012380:	0690      	lsls	r0, r2, #26
 8012382:	d501      	bpl.n	8012388 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012384:	0689      	lsls	r1, r1, #26
 8012386:	d43e      	bmi.n	8012406 <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 8012388:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 801238c:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801238e:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012390:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012398:	431d      	orrs	r5, r3
 801239a:	d06e      	beq.n	801247a <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 801239c:	f7ff fb7e 	bl	8011a9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123a0:	6823      	ldr	r3, [r4, #0]
 80123a2:	689a      	ldr	r2, [r3, #8]
 80123a4:	0652      	lsls	r2, r2, #25
 80123a6:	d52a      	bpl.n	80123fe <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a8:	f103 0208 	add.w	r2, r3, #8
 80123ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b4:	f103 0008 	add.w	r0, r3, #8
 80123b8:	e840 2100 	strex	r1, r2, [r0]
 80123bc:	2900      	cmp	r1, #0
 80123be:	d1f3      	bne.n	80123a8 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80123c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80123c2:	b1e0      	cbz	r0, 80123fe <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80123c4:	4b30      	ldr	r3, [pc, #192]	; (8012488 <HAL_UART_IRQHandler+0x2ac>)
 80123c6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80123c8:	f7f6 ff96 	bl	80092f8 <HAL_DMA_Abort_IT>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	f43f af24 	beq.w	801221a <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80123d2:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80123d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80123d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80123da:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123dc:	0755      	lsls	r5, r2, #29
 80123de:	d5af      	bpl.n	8012340 <HAL_UART_IRQHandler+0x164>
 80123e0:	2e00      	cmp	r6, #0
 80123e2:	d1a5      	bne.n	8012330 <HAL_UART_IRQHandler+0x154>
 80123e4:	e7ac      	b.n	8012340 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 80123e6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f47f af2d 	bne.w	8012248 <HAL_UART_IRQHandler+0x6c>
 80123ee:	e714      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80123f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80123f4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80123f6:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80123f8:	f7ff feee 	bl	80121d8 <HAL_UARTEx_WakeupCallback>
    return;
 80123fc:	e70d      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 80123fe:	4620      	mov	r0, r4
 8012400:	f7f2 fa16 	bl	8004830 <HAL_UART_ErrorCallback>
 8012404:	e709      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8012406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012408:	2b00      	cmp	r3, #0
 801240a:	d0bd      	beq.n	8012388 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 801240c:	4620      	mov	r0, r4
 801240e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012410:	6827      	ldr	r7, [r4, #0]
 8012412:	e7b9      	b.n	8012388 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012414:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8012418:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 801241c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012420:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8012422:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012424:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8012426:	2900      	cmp	r1, #0
 8012428:	f43f aef7 	beq.w	801221a <HAL_UART_IRQHandler+0x3e>
 801242c:	2a00      	cmp	r2, #0
 801242e:	f43f aef4 	beq.w	801221a <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012432:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	e843 2000 	strex	r0, r2, [r3]
 801243e:	2800      	cmp	r0, #0
 8012440:	d1f7      	bne.n	8012432 <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012442:	f103 0208 	add.w	r2, r3, #8
 8012446:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801244a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244e:	f103 0508 	add.w	r5, r3, #8
 8012452:	e845 2000 	strex	r0, r2, [r5]
 8012456:	2800      	cmp	r0, #0
 8012458:	d1f3      	bne.n	8012442 <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 801245a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 801245c:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 801245e:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012460:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012462:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012466:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246a:	e843 2000 	strex	r0, r2, [r3]
 801246e:	2800      	cmp	r0, #0
 8012470:	d1f7      	bne.n	8012462 <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012472:	4620      	mov	r0, r4
 8012474:	f7ff fdb4 	bl	8011fe0 <HAL_UARTEx_RxEventCallback>
 8012478:	e6cf      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 801247a:	f7f2 f9d9 	bl	8004830 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801247e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8012482:	e6ca      	b.n	801221a <HAL_UART_IRQHandler+0x3e>
 8012484:	04000120 	.word	0x04000120
 8012488:	08011e15 	.word	0x08011e15

0801248c <UART_SetConfig>:
{
 801248c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 801248e:	6842      	ldr	r2, [r0, #4]
{
 8012490:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012492:	4bac      	ldr	r3, [pc, #688]	; (8012744 <UART_SetConfig+0x2b8>)
 8012494:	429a      	cmp	r2, r3
 8012496:	f200 80bb 	bhi.w	8012610 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 801249a:	68a3      	ldr	r3, [r4, #8]
 801249c:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80124a0:	d002      	beq.n	80124a8 <UART_SetConfig+0x1c>
 80124a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80124a6:	d179      	bne.n	801259c <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80124a8:	68e3      	ldr	r3, [r4, #12]
 80124aa:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80124ae:	d17e      	bne.n	80125ae <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80124b0:	6a23      	ldr	r3, [r4, #32]
 80124b2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80124b6:	f040 8084 	bne.w	80125c2 <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80124ba:	6923      	ldr	r3, [r4, #16]
 80124bc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80124c0:	d002      	beq.n	80124c8 <UART_SetConfig+0x3c>
 80124c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80124c6:	d163      	bne.n	8012590 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80124c8:	6963      	ldr	r3, [r4, #20]
 80124ca:	f033 020c 	bics.w	r2, r3, #12
 80124ce:	d146      	bne.n	801255e <UART_SetConfig+0xd2>
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d044      	beq.n	801255e <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80124d4:	69a3      	ldr	r3, [r4, #24]
 80124d6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80124da:	d149      	bne.n	8012570 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80124dc:	69e0      	ldr	r0, [r4, #28]
 80124de:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80124e2:	d14e      	bne.n	8012582 <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80124e4:	6921      	ldr	r1, [r4, #16]
 80124e6:	68a2      	ldr	r2, [r4, #8]
 80124e8:	6823      	ldr	r3, [r4, #0]
 80124ea:	430a      	orrs	r2, r1
 80124ec:	6961      	ldr	r1, [r4, #20]
 80124ee:	681d      	ldr	r5, [r3, #0]
 80124f0:	430a      	orrs	r2, r1
 80124f2:	4995      	ldr	r1, [pc, #596]	; (8012748 <UART_SetConfig+0x2bc>)
 80124f4:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80124f6:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80124f8:	430a      	orrs	r2, r1
 80124fa:	4302      	orrs	r2, r0
 80124fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80124fe:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012500:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012502:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8012506:	4329      	orrs	r1, r5
 8012508:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 801250a:	6a21      	ldr	r1, [r4, #32]
 801250c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801250e:	6899      	ldr	r1, [r3, #8]
 8012510:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8012514:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012516:	498d      	ldr	r1, [pc, #564]	; (801274c <UART_SetConfig+0x2c0>)
 8012518:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801251a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801251c:	d07e      	beq.n	801261c <UART_SetConfig+0x190>
 801251e:	4a8c      	ldr	r2, [pc, #560]	; (8012750 <UART_SetConfig+0x2c4>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d054      	beq.n	80125ce <UART_SetConfig+0x142>
 8012524:	4a8b      	ldr	r2, [pc, #556]	; (8012754 <UART_SetConfig+0x2c8>)
 8012526:	4293      	cmp	r3, r2
 8012528:	f000 812a 	beq.w	8012780 <UART_SetConfig+0x2f4>
 801252c:	4a8a      	ldr	r2, [pc, #552]	; (8012758 <UART_SetConfig+0x2cc>)
 801252e:	4293      	cmp	r3, r2
 8012530:	f000 8137 	beq.w	80127a2 <UART_SetConfig+0x316>
 8012534:	4a89      	ldr	r2, [pc, #548]	; (801275c <UART_SetConfig+0x2d0>)
 8012536:	4293      	cmp	r3, r2
 8012538:	f000 809e 	beq.w	8012678 <UART_SetConfig+0x1ec>
 801253c:	4a88      	ldr	r2, [pc, #544]	; (8012760 <UART_SetConfig+0x2d4>)
 801253e:	4293      	cmp	r3, r2
 8012540:	f000 80d1 	beq.w	80126e6 <UART_SetConfig+0x25a>
 8012544:	4a87      	ldr	r2, [pc, #540]	; (8012764 <UART_SetConfig+0x2d8>)
 8012546:	4293      	cmp	r3, r2
 8012548:	f000 8151 	beq.w	80127ee <UART_SetConfig+0x362>
 801254c:	4a86      	ldr	r2, [pc, #536]	; (8012768 <UART_SetConfig+0x2dc>)
 801254e:	4293      	cmp	r3, r2
 8012550:	f000 8164 	beq.w	801281c <UART_SetConfig+0x390>
    switch (clocksource)
 8012554:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8012556:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8012558:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801255c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 801255e:	f640 3176 	movw	r1, #2934	; 0xb76
 8012562:	4882      	ldr	r0, [pc, #520]	; (801276c <UART_SetConfig+0x2e0>)
 8012564:	f7f1 fe86 	bl	8004274 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012568:	69a3      	ldr	r3, [r4, #24]
 801256a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 801256e:	d0b5      	beq.n	80124dc <UART_SetConfig+0x50>
 8012570:	487e      	ldr	r0, [pc, #504]	; (801276c <UART_SetConfig+0x2e0>)
 8012572:	f640 3177 	movw	r1, #2935	; 0xb77
 8012576:	f7f1 fe7d 	bl	8004274 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 801257a:	69e0      	ldr	r0, [r4, #28]
 801257c:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8012580:	d0b0      	beq.n	80124e4 <UART_SetConfig+0x58>
 8012582:	487a      	ldr	r0, [pc, #488]	; (801276c <UART_SetConfig+0x2e0>)
 8012584:	f640 3178 	movw	r1, #2936	; 0xb78
 8012588:	f7f1 fe74 	bl	8004274 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801258c:	69e0      	ldr	r0, [r4, #28]
 801258e:	e7a9      	b.n	80124e4 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8012590:	f640 3175 	movw	r1, #2933	; 0xb75
 8012594:	4875      	ldr	r0, [pc, #468]	; (801276c <UART_SetConfig+0x2e0>)
 8012596:	f7f1 fe6d 	bl	8004274 <assert_failed>
 801259a:	e795      	b.n	80124c8 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 801259c:	f640 3171 	movw	r1, #2929	; 0xb71
 80125a0:	4872      	ldr	r0, [pc, #456]	; (801276c <UART_SetConfig+0x2e0>)
 80125a2:	f7f1 fe67 	bl	8004274 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80125a6:	68e3      	ldr	r3, [r4, #12]
 80125a8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80125ac:	d080      	beq.n	80124b0 <UART_SetConfig+0x24>
 80125ae:	f640 3172 	movw	r1, #2930	; 0xb72
 80125b2:	486e      	ldr	r0, [pc, #440]	; (801276c <UART_SetConfig+0x2e0>)
 80125b4:	f7f1 fe5e 	bl	8004274 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80125b8:	6a23      	ldr	r3, [r4, #32]
 80125ba:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80125be:	f43f af7c 	beq.w	80124ba <UART_SetConfig+0x2e>
 80125c2:	f640 3173 	movw	r1, #2931	; 0xb73
 80125c6:	4869      	ldr	r0, [pc, #420]	; (801276c <UART_SetConfig+0x2e0>)
 80125c8:	f7f1 fe54 	bl	8004274 <assert_failed>
 80125cc:	e775      	b.n	80124ba <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125ce:	4b68      	ldr	r3, [pc, #416]	; (8012770 <UART_SetConfig+0x2e4>)
 80125d0:	4a68      	ldr	r2, [pc, #416]	; (8012774 <UART_SetConfig+0x2e8>)
 80125d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125d6:	f003 030c 	and.w	r3, r3, #12
 80125da:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80125dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80125e0:	d033      	beq.n	801264a <UART_SetConfig+0x1be>
    switch (clocksource)
 80125e2:	2b08      	cmp	r3, #8
 80125e4:	d8b6      	bhi.n	8012554 <UART_SetConfig+0xc8>
 80125e6:	a201      	add	r2, pc, #4	; (adr r2, 80125ec <UART_SetConfig+0x160>)
 80125e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ec:	080126a7 	.word	0x080126a7
 80125f0:	08012633 	.word	0x08012633
 80125f4:	080126fd 	.word	0x080126fd
 80125f8:	08012555 	.word	0x08012555
 80125fc:	0801269b 	.word	0x0801269b
 8012600:	08012555 	.word	0x08012555
 8012604:	08012555 	.word	0x08012555
 8012608:	08012555 	.word	0x08012555
 801260c:	080126bd 	.word	0x080126bd
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8012610:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8012614:	4855      	ldr	r0, [pc, #340]	; (801276c <UART_SetConfig+0x2e0>)
 8012616:	f7f1 fe2d 	bl	8004274 <assert_failed>
 801261a:	e73e      	b.n	801249a <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801261c:	4b54      	ldr	r3, [pc, #336]	; (8012770 <UART_SetConfig+0x2e4>)
 801261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012622:	f003 0303 	and.w	r3, r3, #3
 8012626:	3b01      	subs	r3, #1
 8012628:	2b02      	cmp	r3, #2
 801262a:	d90b      	bls.n	8012644 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801262c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012630:	d066      	beq.n	8012700 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012632:	f7fb f9d5 	bl	800d9e0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012636:	2800      	cmp	r0, #0
 8012638:	d142      	bne.n	80126c0 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 801263a:	2300      	movs	r3, #0
 801263c:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 801263e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012642:	bd38      	pop	{r3, r4, r5, pc}
 8012644:	4a4c      	ldr	r2, [pc, #304]	; (8012778 <UART_SetConfig+0x2ec>)
 8012646:	5cd3      	ldrb	r3, [r2, r3]
 8012648:	e7c8      	b.n	80125dc <UART_SetConfig+0x150>
    switch (clocksource)
 801264a:	2b08      	cmp	r3, #8
 801264c:	d882      	bhi.n	8012554 <UART_SetConfig+0xc8>
 801264e:	a201      	add	r2, pc, #4	; (adr r2, 8012654 <UART_SetConfig+0x1c8>)
 8012650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012654:	0801273d 	.word	0x0801273d
 8012658:	08012701 	.word	0x08012701
 801265c:	080127e5 	.word	0x080127e5
 8012660:	08012555 	.word	0x08012555
 8012664:	08012737 	.word	0x08012737
 8012668:	08012555 	.word	0x08012555
 801266c:	08012555 	.word	0x08012555
 8012670:	08012555 	.word	0x08012555
 8012674:	080127e9 	.word	0x080127e9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012678:	4b3d      	ldr	r3, [pc, #244]	; (8012770 <UART_SetConfig+0x2e4>)
 801267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012686:	d036      	beq.n	80126f6 <UART_SetConfig+0x26a>
 8012688:	d810      	bhi.n	80126ac <UART_SetConfig+0x220>
 801268a:	b14b      	cbz	r3, 80126a0 <UART_SetConfig+0x214>
 801268c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012690:	f47f af60 	bne.w	8012554 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012694:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012698:	d04d      	beq.n	8012736 <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 801269a:	f7fb f839 	bl	800d710 <HAL_RCC_GetSysClockFreq>
        break;
 801269e:	e7ca      	b.n	8012636 <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80126a4:	d04a      	beq.n	801273c <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80126a6:	f7fb f98b 	bl	800d9c0 <HAL_RCC_GetPCLK1Freq>
        break;
 80126aa:	e7c4      	b.n	8012636 <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80126ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126b0:	f47f af50 	bne.w	8012554 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80126b8:	f000 8096 	beq.w	80127e8 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80126bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80126c0:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80126c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80126ca:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126ce:	f1a3 0110 	sub.w	r1, r3, #16
 80126d2:	4291      	cmp	r1, r2
 80126d4:	f63f af3e 	bhi.w	8012554 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80126d8:	6822      	ldr	r2, [r4, #0]
 80126da:	2000      	movs	r0, #0
 80126dc:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80126de:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80126e0:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80126e4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80126e6:	4b22      	ldr	r3, [pc, #136]	; (8012770 <UART_SetConfig+0x2e4>)
 80126e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80126f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80126f4:	d168      	bne.n	80127c8 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80126fa:	d073      	beq.n	80127e4 <UART_SetConfig+0x358>
    switch (clocksource)
 80126fc:	481f      	ldr	r0, [pc, #124]	; (801277c <UART_SetConfig+0x2f0>)
 80126fe:	e7df      	b.n	80126c0 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012700:	f7fb f96e 	bl	800d9e0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012704:	2800      	cmp	r0, #0
 8012706:	d098      	beq.n	801263a <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012708:	0043      	lsls	r3, r0, #1
 801270a:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801270c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012710:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012714:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012718:	f1a3 0210 	sub.w	r2, r3, #16
 801271c:	428a      	cmp	r2, r1
 801271e:	f63f af19 	bhi.w	8012554 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012722:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012726:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 801272a:	6821      	ldr	r1, [r4, #0]
 801272c:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801272e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8012730:	4313      	orrs	r3, r2
 8012732:	60cb      	str	r3, [r1, #12]
 8012734:	e70f      	b.n	8012556 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8012736:	f7fa ffeb 	bl	800d710 <HAL_RCC_GetSysClockFreq>
        break;
 801273a:	e7e3      	b.n	8012704 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 801273c:	f7fb f940 	bl	800d9c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8012740:	e7e0      	b.n	8012704 <UART_SetConfig+0x278>
 8012742:	bf00      	nop
 8012744:	019bfcc0 	.word	0x019bfcc0
 8012748:	efff69f3 	.word	0xefff69f3
 801274c:	40011000 	.word	0x40011000
 8012750:	40004400 	.word	0x40004400
 8012754:	40004800 	.word	0x40004800
 8012758:	40004c00 	.word	0x40004c00
 801275c:	40005000 	.word	0x40005000
 8012760:	40011400 	.word	0x40011400
 8012764:	40007800 	.word	0x40007800
 8012768:	40007c00 	.word	0x40007c00
 801276c:	0802c5b8 	.word	0x0802c5b8
 8012770:	40023800 	.word	0x40023800
 8012774:	0802c5f8 	.word	0x0802c5f8
 8012778:	0802c5f4 	.word	0x0802c5f4
 801277c:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012780:	4b32      	ldr	r3, [pc, #200]	; (801284c <UART_SetConfig+0x3c0>)
 8012782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012786:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801278a:	2b20      	cmp	r3, #32
 801278c:	d0b3      	beq.n	80126f6 <UART_SetConfig+0x26a>
 801278e:	d805      	bhi.n	801279c <UART_SetConfig+0x310>
 8012790:	2b00      	cmp	r3, #0
 8012792:	d085      	beq.n	80126a0 <UART_SetConfig+0x214>
 8012794:	2b10      	cmp	r3, #16
 8012796:	f43f af7d 	beq.w	8012694 <UART_SetConfig+0x208>
 801279a:	e6db      	b.n	8012554 <UART_SetConfig+0xc8>
 801279c:	2b30      	cmp	r3, #48	; 0x30
 801279e:	d089      	beq.n	80126b4 <UART_SetConfig+0x228>
 80127a0:	e6d8      	b.n	8012554 <UART_SetConfig+0xc8>
 80127a2:	4b2a      	ldr	r3, [pc, #168]	; (801284c <UART_SetConfig+0x3c0>)
 80127a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80127ac:	2b80      	cmp	r3, #128	; 0x80
 80127ae:	d0a2      	beq.n	80126f6 <UART_SetConfig+0x26a>
 80127b0:	d806      	bhi.n	80127c0 <UART_SetConfig+0x334>
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f43f af74 	beq.w	80126a0 <UART_SetConfig+0x214>
 80127b8:	2b40      	cmp	r3, #64	; 0x40
 80127ba:	f43f af6b 	beq.w	8012694 <UART_SetConfig+0x208>
 80127be:	e6c9      	b.n	8012554 <UART_SetConfig+0xc8>
 80127c0:	2bc0      	cmp	r3, #192	; 0xc0
 80127c2:	f43f af77 	beq.w	80126b4 <UART_SetConfig+0x228>
 80127c6:	e6c5      	b.n	8012554 <UART_SetConfig+0xc8>
 80127c8:	d807      	bhi.n	80127da <UART_SetConfig+0x34e>
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f43f af2e 	beq.w	801262c <UART_SetConfig+0x1a0>
 80127d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127d4:	f43f af5e 	beq.w	8012694 <UART_SetConfig+0x208>
 80127d8:	e6bc      	b.n	8012554 <UART_SetConfig+0xc8>
 80127da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80127de:	f43f af69 	beq.w	80126b4 <UART_SetConfig+0x228>
 80127e2:	e6b7      	b.n	8012554 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80127e4:	4b1a      	ldr	r3, [pc, #104]	; (8012850 <UART_SetConfig+0x3c4>)
 80127e6:	e790      	b.n	801270a <UART_SetConfig+0x27e>
    switch (clocksource)
 80127e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80127ec:	e78d      	b.n	801270a <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80127ee:	4b17      	ldr	r3, [pc, #92]	; (801284c <UART_SetConfig+0x3c0>)
 80127f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80127f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80127fc:	f43f af7b 	beq.w	80126f6 <UART_SetConfig+0x26a>
 8012800:	d807      	bhi.n	8012812 <UART_SetConfig+0x386>
 8012802:	2b00      	cmp	r3, #0
 8012804:	f43f af4c 	beq.w	80126a0 <UART_SetConfig+0x214>
 8012808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801280c:	f43f af42 	beq.w	8012694 <UART_SetConfig+0x208>
 8012810:	e6a0      	b.n	8012554 <UART_SetConfig+0xc8>
 8012812:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012816:	f43f af4d 	beq.w	80126b4 <UART_SetConfig+0x228>
 801281a:	e69b      	b.n	8012554 <UART_SetConfig+0xc8>
 801281c:	4b0b      	ldr	r3, [pc, #44]	; (801284c <UART_SetConfig+0x3c0>)
 801281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801282a:	f43f af64 	beq.w	80126f6 <UART_SetConfig+0x26a>
 801282e:	d807      	bhi.n	8012840 <UART_SetConfig+0x3b4>
 8012830:	2b00      	cmp	r3, #0
 8012832:	f43f af35 	beq.w	80126a0 <UART_SetConfig+0x214>
 8012836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801283a:	f43f af2b 	beq.w	8012694 <UART_SetConfig+0x208>
 801283e:	e689      	b.n	8012554 <UART_SetConfig+0xc8>
 8012840:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012844:	f43f af36 	beq.w	80126b4 <UART_SetConfig+0x228>
 8012848:	e684      	b.n	8012554 <UART_SetConfig+0xc8>
 801284a:	bf00      	nop
 801284c:	40023800 	.word	0x40023800
 8012850:	01e84800 	.word	0x01e84800

08012854 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012854:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012856:	2bff      	cmp	r3, #255	; 0xff
{
 8012858:	b510      	push	{r4, lr}
 801285a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 801285c:	d87b      	bhi.n	8012956 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801285e:	07da      	lsls	r2, r3, #31
 8012860:	d50a      	bpl.n	8012878 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012862:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012864:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8012868:	f040 808e 	bne.w	8012988 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801286c:	6820      	ldr	r0, [r4, #0]
 801286e:	6842      	ldr	r2, [r0, #4]
 8012870:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012874:	430a      	orrs	r2, r1
 8012876:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012878:	0798      	lsls	r0, r3, #30
 801287a:	d50a      	bpl.n	8012892 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 801287c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801287e:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8012882:	f040 8089 	bne.w	8012998 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012886:	6820      	ldr	r0, [r4, #0]
 8012888:	6842      	ldr	r2, [r0, #4]
 801288a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801288e:	430a      	orrs	r2, r1
 8012890:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012892:	0759      	lsls	r1, r3, #29
 8012894:	d50a      	bpl.n	80128ac <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8012896:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012898:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 801289c:	f040 8084 	bne.w	80129a8 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80128a0:	6820      	ldr	r0, [r4, #0]
 80128a2:	6842      	ldr	r2, [r0, #4]
 80128a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80128a8:	430a      	orrs	r2, r1
 80128aa:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80128ac:	071a      	lsls	r2, r3, #28
 80128ae:	d509      	bpl.n	80128c4 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80128b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128b2:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 80128b6:	d17f      	bne.n	80129b8 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80128b8:	6820      	ldr	r0, [r4, #0]
 80128ba:	6842      	ldr	r2, [r0, #4]
 80128bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80128c0:	430a      	orrs	r2, r1
 80128c2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80128c4:	06d8      	lsls	r0, r3, #27
 80128c6:	d509      	bpl.n	80128dc <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80128c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80128ca:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80128ce:	d17b      	bne.n	80129c8 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80128d0:	6820      	ldr	r0, [r4, #0]
 80128d2:	6882      	ldr	r2, [r0, #8]
 80128d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80128d8:	430a      	orrs	r2, r1
 80128da:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80128dc:	0699      	lsls	r1, r3, #26
 80128de:	d509      	bpl.n	80128f4 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80128e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80128e2:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 80128e6:	d177      	bne.n	80129d8 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128e8:	6820      	ldr	r0, [r4, #0]
 80128ea:	6882      	ldr	r2, [r0, #8]
 80128ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80128f0:	430a      	orrs	r2, r1
 80128f2:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128f4:	065a      	lsls	r2, r3, #25
 80128f6:	d521      	bpl.n	801293c <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80128f8:	4b46      	ldr	r3, [pc, #280]	; (8012a14 <UART_AdvFeatureConfig+0x1c0>)
 80128fa:	6822      	ldr	r2, [r4, #0]
 80128fc:	4846      	ldr	r0, [pc, #280]	; (8012a18 <UART_AdvFeatureConfig+0x1c4>)
 80128fe:	4947      	ldr	r1, [pc, #284]	; (8012a1c <UART_AdvFeatureConfig+0x1c8>)
 8012900:	429a      	cmp	r2, r3
 8012902:	bf18      	it	ne
 8012904:	4282      	cmpne	r2, r0
 8012906:	bf14      	ite	ne
 8012908:	2301      	movne	r3, #1
 801290a:	2300      	moveq	r3, #0
 801290c:	428a      	cmp	r2, r1
 801290e:	bf0c      	ite	eq
 8012910:	2300      	moveq	r3, #0
 8012912:	f003 0301 	andne.w	r3, r3, #1
 8012916:	b113      	cbz	r3, 801291e <UART_AdvFeatureConfig+0xca>
 8012918:	4b41      	ldr	r3, [pc, #260]	; (8012a20 <UART_AdvFeatureConfig+0x1cc>)
 801291a:	429a      	cmp	r2, r3
 801291c:	d16b      	bne.n	80129f6 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 801291e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012920:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8012924:	d160      	bne.n	80129e8 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012926:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012928:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801292c:	684b      	ldr	r3, [r1, #4]
 801292e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012932:	ea43 0302 	orr.w	r3, r3, r2
 8012936:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012938:	d014      	beq.n	8012964 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801293a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801293c:	061b      	lsls	r3, r3, #24
 801293e:	d509      	bpl.n	8012954 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012940:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012942:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8012946:	d118      	bne.n	801297a <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012948:	6821      	ldr	r1, [r4, #0]
 801294a:	684b      	ldr	r3, [r1, #4]
 801294c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012950:	4313      	orrs	r3, r2
 8012952:	604b      	str	r3, [r1, #4]
}
 8012954:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012956:	f640 31f9 	movw	r1, #3065	; 0xbf9
 801295a:	4832      	ldr	r0, [pc, #200]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 801295c:	f7f1 fc8a 	bl	8004274 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012962:	e77c      	b.n	801285e <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012964:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012966:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 801296a:	d14a      	bne.n	8012a02 <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801296c:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801296e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012970:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8012974:	4302      	orrs	r2, r0
 8012976:	604a      	str	r2, [r1, #4]
 8012978:	e7e0      	b.n	801293c <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 801297a:	f640 4136 	movw	r1, #3126	; 0xc36
 801297e:	4829      	ldr	r0, [pc, #164]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 8012980:	f7f1 fc78 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012984:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012986:	e7df      	b.n	8012948 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012988:	f640 31fe 	movw	r1, #3070	; 0xbfe
 801298c:	4825      	ldr	r0, [pc, #148]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 801298e:	f7f1 fc71 	bl	8004274 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012992:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8012996:	e769      	b.n	801286c <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012998:	f640 4105 	movw	r1, #3077	; 0xc05
 801299c:	4821      	ldr	r0, [pc, #132]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 801299e:	f7f1 fc69 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80129a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80129a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129a6:	e76e      	b.n	8012886 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80129a8:	f640 410c 	movw	r1, #3084	; 0xc0c
 80129ac:	481d      	ldr	r0, [pc, #116]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129ae:	f7f1 fc61 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80129b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80129b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129b6:	e773      	b.n	80128a0 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80129b8:	f640 4113 	movw	r1, #3091	; 0xc13
 80129bc:	4819      	ldr	r0, [pc, #100]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129be:	f7f1 fc59 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80129c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80129c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129c6:	e777      	b.n	80128b8 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80129c8:	f640 411a 	movw	r1, #3098	; 0xc1a
 80129cc:	4815      	ldr	r0, [pc, #84]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129ce:	f7f1 fc51 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80129d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80129d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129d6:	e77b      	b.n	80128d0 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80129d8:	f640 4121 	movw	r1, #3105	; 0xc21
 80129dc:	4811      	ldr	r0, [pc, #68]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129de:	f7f1 fc49 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80129e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80129e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129e6:	e77f      	b.n	80128e8 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80129e8:	f640 4129 	movw	r1, #3113	; 0xc29
 80129ec:	480d      	ldr	r0, [pc, #52]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129ee:	f7f1 fc41 	bl	8004274 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80129f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80129f4:	e797      	b.n	8012926 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80129f6:	f640 4128 	movw	r1, #3112	; 0xc28
 80129fa:	480a      	ldr	r0, [pc, #40]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 80129fc:	f7f1 fc3a 	bl	8004274 <assert_failed>
 8012a00:	e78d      	b.n	801291e <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012a02:	f640 412e 	movw	r1, #3118	; 0xc2e
 8012a06:	4807      	ldr	r0, [pc, #28]	; (8012a24 <UART_AdvFeatureConfig+0x1d0>)
 8012a08:	f7f1 fc34 	bl	8004274 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012a0c:	6821      	ldr	r1, [r4, #0]
 8012a0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012a10:	e7ac      	b.n	801296c <UART_AdvFeatureConfig+0x118>
 8012a12:	bf00      	nop
 8012a14:	40011000 	.word	0x40011000
 8012a18:	40004400 	.word	0x40004400
 8012a1c:	40004800 	.word	0x40004800
 8012a20:	40011400 	.word	0x40011400
 8012a24:	0802c5b8 	.word	0x0802c5b8

08012a28 <UART_WaitOnFlagUntilTimeout>:
{
 8012a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a30:	4681      	mov	r9, r0
 8012a32:	460f      	mov	r7, r1
 8012a34:	4616      	mov	r6, r2
 8012a36:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a38:	6805      	ldr	r5, [r0, #0]
 8012a3a:	e002      	b.n	8012a42 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8012a3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012a40:	d10c      	bne.n	8012a5c <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a42:	69ec      	ldr	r4, [r5, #28]
 8012a44:	ea37 0304 	bics.w	r3, r7, r4
 8012a48:	bf0c      	ite	eq
 8012a4a:	f04f 0c01 	moveq.w	ip, #1
 8012a4e:	f04f 0c00 	movne.w	ip, #0
 8012a52:	45b4      	cmp	ip, r6
 8012a54:	d0f2      	beq.n	8012a3c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8012a56:	2000      	movs	r0, #0
}
 8012a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012a5c:	f7f5 f9de 	bl	8007e1c <HAL_GetTick>
 8012a60:	eba0 000a 	sub.w	r0, r0, sl
 8012a64:	4540      	cmp	r0, r8
 8012a66:	d82d      	bhi.n	8012ac4 <UART_WaitOnFlagUntilTimeout+0x9c>
 8012a68:	f1b8 0f00 	cmp.w	r8, #0
 8012a6c:	d02a      	beq.n	8012ac4 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012a6e:	f8d9 5000 	ldr.w	r5, [r9]
 8012a72:	682b      	ldr	r3, [r5, #0]
 8012a74:	462a      	mov	r2, r5
 8012a76:	0759      	lsls	r1, r3, #29
 8012a78:	d5e3      	bpl.n	8012a42 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a7a:	69eb      	ldr	r3, [r5, #28]
 8012a7c:	051b      	lsls	r3, r3, #20
 8012a7e:	d5e0      	bpl.n	8012a42 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a84:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a86:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a8e:	e842 3100 	strex	r1, r3, [r2]
 8012a92:	2900      	cmp	r1, #0
 8012a94:	d1f7      	bne.n	8012a86 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a96:	f102 0308 	add.w	r3, r2, #8
 8012a9a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aa2:	f102 0008 	add.w	r0, r2, #8
 8012aa6:	e840 3100 	strex	r1, r3, [r0]
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	d1f3      	bne.n	8012a96 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8012aae:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8012ab0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8012ab2:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8012ab6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012aba:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012abe:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8012ac2:	e7c9      	b.n	8012a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8012ac4:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ad0:	e842 3100 	strex	r1, r3, [r2]
 8012ad4:	2900      	cmp	r1, #0
 8012ad6:	d1f7      	bne.n	8012ac8 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad8:	f102 0308 	add.w	r3, r2, #8
 8012adc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ae0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae4:	f102 0008 	add.w	r0, r2, #8
 8012ae8:	e840 3100 	strex	r1, r3, [r0]
 8012aec:	2900      	cmp	r1, #0
 8012aee:	d1f3      	bne.n	8012ad8 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8012af0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8012af2:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8012af4:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8012af8:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012afc:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8012b00:	e7aa      	b.n	8012a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8012b02:	bf00      	nop

08012b04 <HAL_UART_Transmit>:
{
 8012b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b08:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8012b0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8012b0c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8012b0e:	2b20      	cmp	r3, #32
 8012b10:	d14b      	bne.n	8012baa <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8012b12:	460d      	mov	r5, r1
 8012b14:	2900      	cmp	r1, #0
 8012b16:	d044      	beq.n	8012ba2 <HAL_UART_Transmit+0x9e>
 8012b18:	fab2 f982 	clz	r9, r2
 8012b1c:	4617      	mov	r7, r2
 8012b1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	d03d      	beq.n	8012ba2 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8012b26:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d03c      	beq.n	8012baa <HAL_UART_Transmit+0xa6>
 8012b30:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b32:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8012b36:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b3a:	2321      	movs	r3, #33	; 0x21
 8012b3c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8012b3e:	f7f5 f96d 	bl	8007e1c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b42:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8012b44:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8012b46:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8012b4e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b52:	d040      	beq.n	8012bd6 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8012b54:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8012b58:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8012b5a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8012b5c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8012b60:	b973      	cbnz	r3, 8012b80 <HAL_UART_Transmit+0x7c>
 8012b62:	e02a      	b.n	8012bba <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012b64:	f815 2b01 	ldrb.w	r2, [r5], #1
 8012b68:	6823      	ldr	r3, [r4, #0]
 8012b6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8012b6c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012b70:	3a01      	subs	r2, #1
 8012b72:	b292      	uxth	r2, r2
 8012b74:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012b78:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012b7c:	b292      	uxth	r2, r2
 8012b7e:	b1e2      	cbz	r2, 8012bba <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b80:	4643      	mov	r3, r8
 8012b82:	2200      	movs	r2, #0
 8012b84:	2180      	movs	r1, #128	; 0x80
 8012b86:	4620      	mov	r0, r4
 8012b88:	9600      	str	r6, [sp, #0]
 8012b8a:	f7ff ff4d 	bl	8012a28 <UART_WaitOnFlagUntilTimeout>
 8012b8e:	b980      	cbnz	r0, 8012bb2 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8012b90:	2d00      	cmp	r5, #0
 8012b92:	d1e7      	bne.n	8012b64 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012b94:	f839 3b02 	ldrh.w	r3, [r9], #2
 8012b98:	6822      	ldr	r2, [r4, #0]
 8012b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b9e:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8012ba0:	e7e4      	b.n	8012b6c <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8012ba2:	2001      	movs	r0, #1
}
 8012ba4:	b003      	add	sp, #12
 8012ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8012baa:	2002      	movs	r0, #2
}
 8012bac:	b003      	add	sp, #12
 8012bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8012bb2:	2003      	movs	r0, #3
}
 8012bb4:	b003      	add	sp, #12
 8012bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012bba:	4643      	mov	r3, r8
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	2140      	movs	r1, #64	; 0x40
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	9600      	str	r6, [sp, #0]
 8012bc4:	f7ff ff30 	bl	8012a28 <UART_WaitOnFlagUntilTimeout>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d1f2      	bne.n	8012bb2 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8012bcc:	2320      	movs	r3, #32
 8012bce:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8012bd0:	b003      	add	sp, #12
 8012bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012bd6:	6923      	ldr	r3, [r4, #16]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1bb      	bne.n	8012b54 <HAL_UART_Transmit+0x50>
 8012bdc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8012bde:	461d      	mov	r5, r3
 8012be0:	e7b8      	b.n	8012b54 <HAL_UART_Transmit+0x50>
 8012be2:	bf00      	nop

08012be4 <UART_CheckIdleState>:
{
 8012be4:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012be6:	2600      	movs	r6, #0
{
 8012be8:	4604      	mov	r4, r0
 8012bea:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bec:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8012bf0:	f7f5 f914 	bl	8007e1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012bf4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012bf6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	0712      	lsls	r2, r2, #28
 8012bfc:	d40c      	bmi.n	8012c18 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	075b      	lsls	r3, r3, #29
 8012c02:	d418      	bmi.n	8012c36 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c04:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012c06:	2220      	movs	r2, #32
  return HAL_OK;
 8012c08:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012c0a:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012c0c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012c10:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c12:	6623      	str	r3, [r4, #96]	; 0x60
}
 8012c14:	b002      	add	sp, #8
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012c18:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	4632      	mov	r2, r6
 8012c20:	4620      	mov	r0, r4
 8012c22:	9100      	str	r1, [sp, #0]
 8012c24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012c28:	f7ff fefe 	bl	8012a28 <UART_WaitOnFlagUntilTimeout>
 8012c2c:	b978      	cbnz	r0, 8012c4e <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	075b      	lsls	r3, r3, #29
 8012c34:	d5e6      	bpl.n	8012c04 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012c36:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8012c3a:	462b      	mov	r3, r5
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012c42:	9000      	str	r0, [sp, #0]
 8012c44:	4620      	mov	r0, r4
 8012c46:	f7ff feef 	bl	8012a28 <UART_WaitOnFlagUntilTimeout>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d0da      	beq.n	8012c04 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8012c4e:	2003      	movs	r0, #3
}
 8012c50:	b002      	add	sp, #8
 8012c52:	bd70      	pop	{r4, r5, r6, pc}

08012c54 <HAL_UART_Init>:
  if (huart == NULL)
 8012c54:	2800      	cmp	r0, #0
 8012c56:	f000 8099 	beq.w	8012d8c <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012c5a:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012c5c:	6802      	ldr	r2, [r0, #0]
{
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d051      	beq.n	8012d0a <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012c66:	4b4d      	ldr	r3, [pc, #308]	; (8012d9c <HAL_UART_Init+0x148>)
 8012c68:	484d      	ldr	r0, [pc, #308]	; (8012da0 <HAL_UART_Init+0x14c>)
 8012c6a:	494e      	ldr	r1, [pc, #312]	; (8012da4 <HAL_UART_Init+0x150>)
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	bf18      	it	ne
 8012c70:	4282      	cmpne	r2, r0
 8012c72:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012c76:	bf14      	ite	ne
 8012c78:	2301      	movne	r3, #1
 8012c7a:	2300      	moveq	r3, #0
 8012c7c:	428a      	cmp	r2, r1
 8012c7e:	bf0c      	ite	eq
 8012c80:	2300      	moveq	r3, #0
 8012c82:	f003 0301 	andne.w	r3, r3, #1
 8012c86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c8a:	4282      	cmp	r2, r0
 8012c8c:	bf0c      	ite	eq
 8012c8e:	2300      	moveq	r3, #0
 8012c90:	f003 0301 	andne.w	r3, r3, #1
 8012c94:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012c98:	428a      	cmp	r2, r1
 8012c9a:	bf0c      	ite	eq
 8012c9c:	2300      	moveq	r3, #0
 8012c9e:	f003 0301 	andne.w	r3, r3, #1
 8012ca2:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012ca6:	4282      	cmp	r2, r0
 8012ca8:	bf0c      	ite	eq
 8012caa:	2300      	moveq	r3, #0
 8012cac:	f003 0301 	andne.w	r3, r3, #1
 8012cb0:	428a      	cmp	r2, r1
 8012cb2:	bf0c      	ite	eq
 8012cb4:	2300      	moveq	r3, #0
 8012cb6:	f003 0301 	andne.w	r3, r3, #1
 8012cba:	b113      	cbz	r3, 8012cc2 <HAL_UART_Init+0x6e>
 8012cbc:	4b3a      	ldr	r3, [pc, #232]	; (8012da8 <HAL_UART_Init+0x154>)
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d166      	bne.n	8012d90 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8012cc2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d057      	beq.n	8012d78 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8012cc8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012cca:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012ccc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8012cce:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012cd0:	6813      	ldr	r3, [r2, #0]
 8012cd2:	f023 0301 	bic.w	r3, r3, #1
 8012cd6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012cd8:	f7ff fbd8 	bl	801248c <UART_SetConfig>
 8012cdc:	2801      	cmp	r0, #1
 8012cde:	d049      	beq.n	8012d74 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d14e      	bne.n	8012d84 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ce6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8012ce8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012cea:	685a      	ldr	r2, [r3, #4]
 8012cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012cf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012cf2:	689a      	ldr	r2, [r3, #8]
 8012cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012cf8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	f042 0201 	orr.w	r2, r2, #1
}
 8012d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8012d04:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012d06:	f7ff bf6d 	b.w	8012be4 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8012d0a:	4b24      	ldr	r3, [pc, #144]	; (8012d9c <HAL_UART_Init+0x148>)
 8012d0c:	4824      	ldr	r0, [pc, #144]	; (8012da0 <HAL_UART_Init+0x14c>)
 8012d0e:	4925      	ldr	r1, [pc, #148]	; (8012da4 <HAL_UART_Init+0x150>)
 8012d10:	429a      	cmp	r2, r3
 8012d12:	bf18      	it	ne
 8012d14:	4282      	cmpne	r2, r0
 8012d16:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012d1a:	bf14      	ite	ne
 8012d1c:	2301      	movne	r3, #1
 8012d1e:	2300      	moveq	r3, #0
 8012d20:	428a      	cmp	r2, r1
 8012d22:	bf0c      	ite	eq
 8012d24:	2300      	moveq	r3, #0
 8012d26:	f003 0301 	andne.w	r3, r3, #1
 8012d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d2e:	4282      	cmp	r2, r0
 8012d30:	bf0c      	ite	eq
 8012d32:	2300      	moveq	r3, #0
 8012d34:	f003 0301 	andne.w	r3, r3, #1
 8012d38:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012d3c:	428a      	cmp	r2, r1
 8012d3e:	bf0c      	ite	eq
 8012d40:	2300      	moveq	r3, #0
 8012d42:	f003 0301 	andne.w	r3, r3, #1
 8012d46:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012d4a:	4282      	cmp	r2, r0
 8012d4c:	bf0c      	ite	eq
 8012d4e:	2300      	moveq	r3, #0
 8012d50:	f003 0301 	andne.w	r3, r3, #1
 8012d54:	428a      	cmp	r2, r1
 8012d56:	bf0c      	ite	eq
 8012d58:	2300      	moveq	r3, #0
 8012d5a:	f003 0301 	andne.w	r3, r3, #1
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d0af      	beq.n	8012cc2 <HAL_UART_Init+0x6e>
 8012d62:	4b11      	ldr	r3, [pc, #68]	; (8012da8 <HAL_UART_Init+0x154>)
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d0ac      	beq.n	8012cc2 <HAL_UART_Init+0x6e>
 8012d68:	f240 1131 	movw	r1, #305	; 0x131
 8012d6c:	480f      	ldr	r0, [pc, #60]	; (8012dac <HAL_UART_Init+0x158>)
 8012d6e:	f7f1 fa81 	bl	8004274 <assert_failed>
 8012d72:	e7a6      	b.n	8012cc2 <HAL_UART_Init+0x6e>
}
 8012d74:	2001      	movs	r0, #1
 8012d76:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 8012d78:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012d7a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012d7e:	f7f2 ffe5 	bl	8005d4c <HAL_UART_MspInit>
 8012d82:	e7a1      	b.n	8012cc8 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 8012d84:	4620      	mov	r0, r4
 8012d86:	f7ff fd65 	bl	8012854 <UART_AdvFeatureConfig>
 8012d8a:	e7ac      	b.n	8012ce6 <HAL_UART_Init+0x92>
}
 8012d8c:	2001      	movs	r0, #1
 8012d8e:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012d90:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012d94:	4805      	ldr	r0, [pc, #20]	; (8012dac <HAL_UART_Init+0x158>)
 8012d96:	f7f1 fa6d 	bl	8004274 <assert_failed>
 8012d9a:	e792      	b.n	8012cc2 <HAL_UART_Init+0x6e>
 8012d9c:	40011000 	.word	0x40011000
 8012da0:	40004400 	.word	0x40004400
 8012da4:	40004800 	.word	0x40004800
 8012da8:	40007c00 	.word	0x40007c00
 8012dac:	0802c5b8 	.word	0x0802c5b8

08012db0 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d04a      	beq.n	8012e4a <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012db4:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8012db8:	b570      	push	{r4, r5, r6, lr}
 8012dba:	460e      	mov	r6, r1
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012dc0:	d13d      	bne.n	8012e3e <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8012dc2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d034      	beq.n	8012e32 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8012dc8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012dca:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012dcc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8012dce:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012dd0:	6813      	ldr	r3, [r2, #0]
 8012dd2:	f023 0301 	bic.w	r3, r3, #1
 8012dd6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012dd8:	f7ff fb58 	bl	801248c <UART_SetConfig>
 8012ddc:	2801      	cmp	r0, #1
 8012dde:	d026      	beq.n	8012e2e <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012de2:	bb03      	cbnz	r3, 8012e26 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012de4:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012de6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012dea:	685a      	ldr	r2, [r3, #4]
 8012dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012df0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012df2:	689a      	ldr	r2, [r3, #8]
 8012df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012df8:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012dfa:	d00d      	beq.n	8012e18 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012dfc:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012dfe:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012e04:	4315      	orrs	r5, r2
 8012e06:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	f042 0201 	orr.w	r2, r2, #1
}
 8012e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 8012e12:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012e14:	f7ff bee6 	b.w	8012be4 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8012e18:	6859      	ldr	r1, [r3, #4]
 8012e1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012e1e:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8012e22:	605e      	str	r6, [r3, #4]
 8012e24:	e7ea      	b.n	8012dfc <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8012e26:	4620      	mov	r0, r4
 8012e28:	f7ff fd14 	bl	8012854 <UART_AdvFeatureConfig>
 8012e2c:	e7da      	b.n	8012de4 <HAL_MultiProcessor_Init+0x34>
}
 8012e2e:	2001      	movs	r0, #1
 8012e30:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8012e32:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012e34:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012e38:	f7f2 ff88 	bl	8005d4c <HAL_UART_MspInit>
 8012e3c:	e7c4      	b.n	8012dc8 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012e3e:	f240 211d 	movw	r1, #541	; 0x21d
 8012e42:	4803      	ldr	r0, [pc, #12]	; (8012e50 <HAL_MultiProcessor_Init+0xa0>)
 8012e44:	f7f1 fa16 	bl	8004274 <assert_failed>
 8012e48:	e7bb      	b.n	8012dc2 <HAL_MultiProcessor_Init+0x12>
}
 8012e4a:	2001      	movs	r0, #1
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	0802c5b8 	.word	0x0802c5b8

08012e54 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8012e54:	6883      	ldr	r3, [r0, #8]
{
 8012e56:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8012e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8012e5c:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8012e60:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8012e62:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8012e66:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8012e6a:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8012e6c:	d04f      	beq.n	8012f0e <UART_Start_Receive_IT+0xba>
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d043      	beq.n	8012efa <UART_Start_Receive_IT+0xa6>
 8012e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012e76:	d057      	beq.n	8012f28 <UART_Start_Receive_IT+0xd4>
 8012e78:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e7c:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012e7e:	2322      	movs	r3, #34	; 0x22
 8012e80:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e82:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012e86:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e88:	f102 0308 	add.w	r3, r2, #8
 8012e8c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e90:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e94:	f102 0408 	add.w	r4, r2, #8
 8012e98:	e844 3100 	strex	r1, r3, [r4]
 8012e9c:	2900      	cmp	r1, #0
 8012e9e:	d1f3      	bne.n	8012e88 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ea0:	6883      	ldr	r3, [r0, #8]
 8012ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ea6:	d011      	beq.n	8012ecc <UART_Start_Receive_IT+0x78>
 8012ea8:	4c23      	ldr	r4, [pc, #140]	; (8012f38 <UART_Start_Receive_IT+0xe4>)
 8012eaa:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8012eac:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012eb0:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012eb2:	b18b      	cbz	r3, 8012ed8 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eb4:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012eb8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ebc:	e842 3100 	strex	r1, r3, [r2]
 8012ec0:	2900      	cmp	r1, #0
 8012ec2:	d1f7      	bne.n	8012eb4 <UART_Start_Receive_IT+0x60>
}
 8012ec4:	2000      	movs	r0, #0
 8012ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012eca:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ecc:	6903      	ldr	r3, [r0, #16]
 8012ece:	bb33      	cbnz	r3, 8012f1e <UART_Start_Receive_IT+0xca>
 8012ed0:	491a      	ldr	r1, [pc, #104]	; (8012f3c <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 8012ed2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8012ed6:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ed8:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8012edc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ee0:	e842 3100 	strex	r1, r3, [r2]
 8012ee4:	2900      	cmp	r1, #0
 8012ee6:	d0ed      	beq.n	8012ec4 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ee8:	e852 3f00 	ldrex	r3, [r2]
 8012eec:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ef0:	e842 3100 	strex	r1, r3, [r2]
 8012ef4:	2900      	cmp	r1, #0
 8012ef6:	d1ef      	bne.n	8012ed8 <UART_Start_Receive_IT+0x84>
 8012ef8:	e7e4      	b.n	8012ec4 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8012efa:	6903      	ldr	r3, [r0, #16]
 8012efc:	b91b      	cbnz	r3, 8012f06 <UART_Start_Receive_IT+0xb2>
 8012efe:	23ff      	movs	r3, #255	; 0xff
 8012f00:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012f04:	e7ba      	b.n	8012e7c <UART_Start_Receive_IT+0x28>
 8012f06:	237f      	movs	r3, #127	; 0x7f
 8012f08:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012f0c:	e7b6      	b.n	8012e7c <UART_Start_Receive_IT+0x28>
 8012f0e:	6903      	ldr	r3, [r0, #16]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1f4      	bne.n	8012efe <UART_Start_Receive_IT+0xaa>
 8012f14:	f240 13ff 	movw	r3, #511	; 0x1ff
 8012f18:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012f1c:	e7ae      	b.n	8012e7c <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8012f1e:	4b06      	ldr	r3, [pc, #24]	; (8012f38 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8012f20:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012f24:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012f26:	e7c5      	b.n	8012eb4 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8012f28:	6903      	ldr	r3, [r0, #16]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d0eb      	beq.n	8012f06 <UART_Start_Receive_IT+0xb2>
 8012f2e:	233f      	movs	r3, #63	; 0x3f
 8012f30:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012f34:	e7a2      	b.n	8012e7c <UART_Start_Receive_IT+0x28>
 8012f36:	bf00      	nop
 8012f38:	08011fe5 	.word	0x08011fe5
 8012f3c:	08012085 	.word	0x08012085

08012f40 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012f40:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012f42:	2b20      	cmp	r3, #32
 8012f44:	d11e      	bne.n	8012f84 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012f46:	b1d9      	cbz	r1, 8012f80 <HAL_UART_Receive_IT+0x40>
 8012f48:	fab2 f382 	clz	r3, r2
 8012f4c:	095b      	lsrs	r3, r3, #5
 8012f4e:	b1ba      	cbz	r2, 8012f80 <HAL_UART_Receive_IT+0x40>
{
 8012f50:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012f52:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012f56:	2c01      	cmp	r4, #1
 8012f58:	d016      	beq.n	8012f88 <HAL_UART_Receive_IT+0x48>
 8012f5a:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f5c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f5e:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012f60:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f64:	6863      	ldr	r3, [r4, #4]
 8012f66:	021b      	lsls	r3, r3, #8
 8012f68:	d507      	bpl.n	8012f7a <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f6a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f72:	e844 3500 	strex	r5, r3, [r4]
 8012f76:	2d00      	cmp	r5, #0
 8012f78:	d1f7      	bne.n	8012f6a <HAL_UART_Receive_IT+0x2a>
}
 8012f7a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8012f7c:	f7ff bf6a 	b.w	8012e54 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8012f80:	2001      	movs	r0, #1
}
 8012f82:	4770      	bx	lr
    return HAL_BUSY;
 8012f84:	2002      	movs	r0, #2
 8012f86:	4770      	bx	lr
 8012f88:	2002      	movs	r0, #2
}
 8012f8a:	bc30      	pop	{r4, r5}
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop

08012f90 <UART_Start_Receive_DMA>:
{
 8012f90:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f92:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f94:	2500      	movs	r5, #0
{
 8012f96:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8012f98:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f9a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8012f9e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012fa2:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8012fa4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012fa6:	b168      	cbz	r0, 8012fc4 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012fa8:	4e1f      	ldr	r6, [pc, #124]	; (8013028 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012faa:	4613      	mov	r3, r2
 8012fac:	460a      	mov	r2, r1
 8012fae:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012fb0:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012fb2:	4e1e      	ldr	r6, [pc, #120]	; (801302c <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012fb4:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8012fb6:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012fb8:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012fba:	4e1d      	ldr	r6, [pc, #116]	; (8013030 <UART_Start_Receive_DMA+0xa0>)
 8012fbc:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012fbe:	f7f6 f8f7 	bl	80091b0 <HAL_DMA_Start_IT>
 8012fc2:	bb40      	cbnz	r0, 8013016 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8012fc4:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012fc6:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8012fc8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012fcc:	b14b      	cbz	r3, 8012fe2 <UART_Start_Receive_DMA+0x52>
 8012fce:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd8:	e843 2100 	strex	r1, r2, [r3]
 8012fdc:	2900      	cmp	r1, #0
 8012fde:	d1f7      	bne.n	8012fd0 <UART_Start_Receive_DMA+0x40>
 8012fe0:	e000      	b.n	8012fe4 <UART_Start_Receive_DMA+0x54>
 8012fe2:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fe4:	f103 0208 	add.w	r2, r3, #8
 8012fe8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fec:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff0:	f103 0008 	add.w	r0, r3, #8
 8012ff4:	e840 2100 	strex	r1, r2, [r0]
 8012ff8:	2900      	cmp	r1, #0
 8012ffa:	d1f3      	bne.n	8012fe4 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ffc:	f103 0208 	add.w	r2, r3, #8
 8013000:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013008:	f103 0108 	add.w	r1, r3, #8
 801300c:	e841 2000 	strex	r0, r2, [r1]
 8013010:	2800      	cmp	r0, #0
 8013012:	d1f3      	bne.n	8012ffc <UART_Start_Receive_DMA+0x6c>
}
 8013014:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013016:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8013018:	2320      	movs	r3, #32
      return HAL_ERROR;
 801301a:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 801301c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013020:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8013024:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8013026:	bd70      	pop	{r4, r5, r6, pc}
 8013028:	08012141 	.word	0x08012141
 801302c:	08012125 	.word	0x08012125
 8013030:	08011dbd 	.word	0x08011dbd

08013034 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8013034:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8013036:	2b20      	cmp	r3, #32
 8013038:	d11e      	bne.n	8013078 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 801303a:	b1d9      	cbz	r1, 8013074 <HAL_UART_Receive_DMA+0x40>
 801303c:	fab2 f382 	clz	r3, r2
 8013040:	095b      	lsrs	r3, r3, #5
 8013042:	b1ba      	cbz	r2, 8013074 <HAL_UART_Receive_DMA+0x40>
{
 8013044:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8013046:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801304a:	2c01      	cmp	r4, #1
 801304c:	d016      	beq.n	801307c <HAL_UART_Receive_DMA+0x48>
 801304e:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013050:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013052:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8013054:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013058:	6863      	ldr	r3, [r4, #4]
 801305a:	021b      	lsls	r3, r3, #8
 801305c:	d507      	bpl.n	801306e <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801305e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013066:	e844 3500 	strex	r5, r3, [r4]
 801306a:	2d00      	cmp	r5, #0
 801306c:	d1f7      	bne.n	801305e <HAL_UART_Receive_DMA+0x2a>
}
 801306e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013070:	f7ff bf8e 	b.w	8012f90 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8013074:	2001      	movs	r0, #1
}
 8013076:	4770      	bx	lr
    return HAL_BUSY;
 8013078:	2002      	movs	r0, #2
 801307a:	4770      	bx	lr
 801307c:	2002      	movs	r0, #2
}
 801307e:	bc30      	pop	{r4, r5}
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop

08013084 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8013084:	2800      	cmp	r0, #0
 8013086:	f000 808a 	beq.w	801319e <HAL_RS485Ex_Init+0x11a>
{
 801308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 801308e:	4c47      	ldr	r4, [pc, #284]	; (80131ac <HAL_RS485Ex_Init+0x128>)
 8013090:	4617      	mov	r7, r2
 8013092:	461d      	mov	r5, r3
 8013094:	4a46      	ldr	r2, [pc, #280]	; (80131b0 <HAL_RS485Ex_Init+0x12c>)
 8013096:	6803      	ldr	r3, [r0, #0]
 8013098:	460e      	mov	r6, r1
 801309a:	4680      	mov	r8, r0
 801309c:	42a3      	cmp	r3, r4
 801309e:	bf18      	it	ne
 80130a0:	4293      	cmpne	r3, r2
 80130a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130a6:	bf14      	ite	ne
 80130a8:	2401      	movne	r4, #1
 80130aa:	2400      	moveq	r4, #0
 80130ac:	4293      	cmp	r3, r2
 80130ae:	bf0c      	ite	eq
 80130b0:	2400      	moveq	r4, #0
 80130b2:	f004 0401 	andne.w	r4, r4, #1
 80130b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130ba:	4293      	cmp	r3, r2
 80130bc:	bf0c      	ite	eq
 80130be:	2400      	moveq	r4, #0
 80130c0:	f004 0401 	andne.w	r4, r4, #1
 80130c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130c8:	4293      	cmp	r3, r2
 80130ca:	bf0c      	ite	eq
 80130cc:	2400      	moveq	r4, #0
 80130ce:	f004 0401 	andne.w	r4, r4, #1
 80130d2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80130d6:	4293      	cmp	r3, r2
 80130d8:	bf0c      	ite	eq
 80130da:	2400      	moveq	r4, #0
 80130dc:	f004 0401 	andne.w	r4, r4, #1
 80130e0:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80130e4:	4293      	cmp	r3, r2
 80130e6:	bf0c      	ite	eq
 80130e8:	2400      	moveq	r4, #0
 80130ea:	f004 0401 	andne.w	r4, r4, #1
 80130ee:	b11c      	cbz	r4, 80130f8 <HAL_RS485Ex_Init+0x74>
 80130f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d154      	bne.n	80131a2 <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80130f8:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 80130fc:	d14a      	bne.n	8013194 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80130fe:	2f1f      	cmp	r7, #31
 8013100:	d843      	bhi.n	801318a <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8013102:	2d1f      	cmp	r5, #31
 8013104:	d83c      	bhi.n	8013180 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8013106:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 801310a:	b39b      	cbz	r3, 8013174 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801310c:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8013110:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013112:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8013114:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013118:	6813      	ldr	r3, [r2, #0]
 801311a:	f023 0301 	bic.w	r3, r3, #1
 801311e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013120:	f7ff f9b4 	bl	801248c <UART_SetConfig>
 8013124:	2801      	cmp	r0, #1
 8013126:	d022      	beq.n	801316e <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013128:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801312c:	b9db      	cbnz	r3, 8013166 <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801312e:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8013132:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013134:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8013136:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8013138:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801313c:	4d1d      	ldr	r5, [pc, #116]	; (80131b4 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801313e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013142:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8013144:	6899      	ldr	r1, [r3, #8]
 8013146:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801314a:	430e      	orrs	r6, r1
 801314c:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	4015      	ands	r5, r2
 8013152:	432f      	orrs	r7, r5
 8013154:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	f042 0201 	orr.w	r2, r2, #1
}
 801315c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8013160:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013162:	f7ff bd3f 	b.w	8012be4 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8013166:	4640      	mov	r0, r8
 8013168:	f7ff fb74 	bl	8012854 <UART_AdvFeatureConfig>
 801316c:	e7df      	b.n	801312e <HAL_RS485Ex_Init+0xaa>
}
 801316e:	2001      	movs	r0, #1
 8013170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8013174:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 8013176:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 801317a:	f7f2 fde7 	bl	8005d4c <HAL_UART_MspInit>
 801317e:	e7c5      	b.n	801310c <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8013180:	21aa      	movs	r1, #170	; 0xaa
 8013182:	480d      	ldr	r0, [pc, #52]	; (80131b8 <HAL_RS485Ex_Init+0x134>)
 8013184:	f7f1 f876 	bl	8004274 <assert_failed>
 8013188:	e7bd      	b.n	8013106 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801318a:	21a7      	movs	r1, #167	; 0xa7
 801318c:	480a      	ldr	r0, [pc, #40]	; (80131b8 <HAL_RS485Ex_Init+0x134>)
 801318e:	f7f1 f871 	bl	8004274 <assert_failed>
 8013192:	e7b6      	b.n	8013102 <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8013194:	21a4      	movs	r1, #164	; 0xa4
 8013196:	4808      	ldr	r0, [pc, #32]	; (80131b8 <HAL_RS485Ex_Init+0x134>)
 8013198:	f7f1 f86c 	bl	8004274 <assert_failed>
 801319c:	e7af      	b.n	80130fe <HAL_RS485Ex_Init+0x7a>
}
 801319e:	2001      	movs	r0, #1
 80131a0:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80131a2:	21a1      	movs	r1, #161	; 0xa1
 80131a4:	4804      	ldr	r0, [pc, #16]	; (80131b8 <HAL_RS485Ex_Init+0x134>)
 80131a6:	f7f1 f865 	bl	8004274 <assert_failed>
 80131aa:	e7a5      	b.n	80130f8 <HAL_RS485Ex_Init+0x74>
 80131ac:	40011000 	.word	0x40011000
 80131b0:	40004400 	.word	0x40004400
 80131b4:	fc00ffff 	.word	0xfc00ffff
 80131b8:	0802c608 	.word	0x0802c608

080131bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80131bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80131be:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80131c0:	4a11      	ldr	r2, [pc, #68]	; (8013208 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80131c2:	9301      	str	r3, [sp, #4]
 80131c4:	e002      	b.n	80131cc <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131c6:	6903      	ldr	r3, [r0, #16]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	db07      	blt.n	80131dc <USB_CoreReset+0x20>
    if (++count > 200000U)
 80131cc:	9b01      	ldr	r3, [sp, #4]
 80131ce:	3301      	adds	r3, #1
 80131d0:	4293      	cmp	r3, r2
 80131d2:	9301      	str	r3, [sp, #4]
 80131d4:	d9f7      	bls.n	80131c6 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 80131d6:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 80131d8:	b002      	add	sp, #8
 80131da:	4770      	bx	lr
  count = 0U;
 80131dc:	2300      	movs	r3, #0
    if (++count > 200000U)
 80131de:	4a0a      	ldr	r2, [pc, #40]	; (8013208 <USB_CoreReset+0x4c>)
  count = 0U;
 80131e0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131e2:	6903      	ldr	r3, [r0, #16]
 80131e4:	f043 0301 	orr.w	r3, r3, #1
 80131e8:	6103      	str	r3, [r0, #16]
 80131ea:	e003      	b.n	80131f4 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131ec:	6903      	ldr	r3, [r0, #16]
 80131ee:	f013 0301 	ands.w	r3, r3, #1
 80131f2:	d005      	beq.n	8013200 <USB_CoreReset+0x44>
    if (++count > 200000U)
 80131f4:	9b01      	ldr	r3, [sp, #4]
 80131f6:	3301      	adds	r3, #1
 80131f8:	4293      	cmp	r3, r2
 80131fa:	9301      	str	r3, [sp, #4]
 80131fc:	d9f6      	bls.n	80131ec <USB_CoreReset+0x30>
 80131fe:	e7ea      	b.n	80131d6 <USB_CoreReset+0x1a>
  return HAL_OK;
 8013200:	4618      	mov	r0, r3
}
 8013202:	b002      	add	sp, #8
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	00030d40 	.word	0x00030d40

0801320c <USB_CoreInit>:
{
 801320c:	b084      	sub	sp, #16
 801320e:	b510      	push	{r4, lr}
 8013210:	f10d 0c0c 	add.w	ip, sp, #12
 8013214:	4604      	mov	r4, r0
 8013216:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801321a:	9b08      	ldr	r3, [sp, #32]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d122      	bne.n	8013266 <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013220:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013222:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8013226:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013228:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 801322c:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801322e:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013230:	68c2      	ldr	r2, [r0, #12]
 8013232:	ea03 0302 	and.w	r3, r3, r2
 8013236:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013238:	68c3      	ldr	r3, [r0, #12]
 801323a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801323e:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8013240:	d01c      	beq.n	801327c <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 8013242:	4620      	mov	r0, r4
 8013244:	f7ff ffba 	bl	80131bc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8013248:	9b06      	ldr	r3, [sp, #24]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d107      	bne.n	801325e <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801324e:	68a3      	ldr	r3, [r4, #8]
 8013250:	f043 0306 	orr.w	r3, r3, #6
 8013254:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013256:	68a3      	ldr	r3, [r4, #8]
 8013258:	f043 0320 	orr.w	r3, r3, #32
 801325c:	60a3      	str	r3, [r4, #8]
}
 801325e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013262:	b004      	add	sp, #16
 8013264:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013266:	68c3      	ldr	r3, [r0, #12]
 8013268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801326c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 801326e:	f7ff ffa5 	bl	80131bc <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013278:	63a3      	str	r3, [r4, #56]	; 0x38
 801327a:	e7e5      	b.n	8013248 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801327c:	68c3      	ldr	r3, [r0, #12]
 801327e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013282:	60c3      	str	r3, [r0, #12]
 8013284:	e7dd      	b.n	8013242 <USB_CoreInit+0x36>
 8013286:	bf00      	nop

08013288 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8013288:	2a02      	cmp	r2, #2
{
 801328a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 801328c:	d00b      	beq.n	80132a6 <USB_SetTurnaroundTime+0x1e>
 801328e:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013292:	68d9      	ldr	r1, [r3, #12]
}
 8013294:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013296:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 801329a:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801329c:	68da      	ldr	r2, [r3, #12]
 801329e:	ea42 020c 	orr.w	r2, r2, ip
 80132a2:	60da      	str	r2, [r3, #12]
}
 80132a4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80132a6:	4a23      	ldr	r2, [pc, #140]	; (8013334 <USB_SetTurnaroundTime+0xac>)
 80132a8:	4823      	ldr	r0, [pc, #140]	; (8013338 <USB_SetTurnaroundTime+0xb0>)
 80132aa:	440a      	add	r2, r1
 80132ac:	4282      	cmp	r2, r0
 80132ae:	d92c      	bls.n	801330a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80132b0:	4a22      	ldr	r2, [pc, #136]	; (801333c <USB_SetTurnaroundTime+0xb4>)
 80132b2:	4823      	ldr	r0, [pc, #140]	; (8013340 <USB_SetTurnaroundTime+0xb8>)
 80132b4:	440a      	add	r2, r1
 80132b6:	4282      	cmp	r2, r0
 80132b8:	d92a      	bls.n	8013310 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80132ba:	4a22      	ldr	r2, [pc, #136]	; (8013344 <USB_SetTurnaroundTime+0xbc>)
 80132bc:	4822      	ldr	r0, [pc, #136]	; (8013348 <USB_SetTurnaroundTime+0xc0>)
 80132be:	440a      	add	r2, r1
 80132c0:	4282      	cmp	r2, r0
 80132c2:	d928      	bls.n	8013316 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80132c4:	4a21      	ldr	r2, [pc, #132]	; (801334c <USB_SetTurnaroundTime+0xc4>)
 80132c6:	4822      	ldr	r0, [pc, #136]	; (8013350 <USB_SetTurnaroundTime+0xc8>)
 80132c8:	440a      	add	r2, r1
 80132ca:	4282      	cmp	r2, r0
 80132cc:	d326      	bcc.n	801331c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80132ce:	4a21      	ldr	r2, [pc, #132]	; (8013354 <USB_SetTurnaroundTime+0xcc>)
 80132d0:	4821      	ldr	r0, [pc, #132]	; (8013358 <USB_SetTurnaroundTime+0xd0>)
 80132d2:	440a      	add	r2, r1
 80132d4:	4282      	cmp	r2, r0
 80132d6:	d924      	bls.n	8013322 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80132d8:	4a20      	ldr	r2, [pc, #128]	; (801335c <USB_SetTurnaroundTime+0xd4>)
 80132da:	4821      	ldr	r0, [pc, #132]	; (8013360 <USB_SetTurnaroundTime+0xd8>)
 80132dc:	440a      	add	r2, r1
 80132de:	4282      	cmp	r2, r0
 80132e0:	d322      	bcc.n	8013328 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80132e2:	4a20      	ldr	r2, [pc, #128]	; (8013364 <USB_SetTurnaroundTime+0xdc>)
 80132e4:	4820      	ldr	r0, [pc, #128]	; (8013368 <USB_SetTurnaroundTime+0xe0>)
 80132e6:	440a      	add	r2, r1
 80132e8:	4282      	cmp	r2, r0
 80132ea:	d3d0      	bcc.n	801328e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80132ec:	4a1f      	ldr	r2, [pc, #124]	; (801336c <USB_SetTurnaroundTime+0xe4>)
 80132ee:	4820      	ldr	r0, [pc, #128]	; (8013370 <USB_SetTurnaroundTime+0xe8>)
 80132f0:	440a      	add	r2, r1
 80132f2:	4282      	cmp	r2, r0
 80132f4:	d31b      	bcc.n	801332e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80132f6:	4a1f      	ldr	r2, [pc, #124]	; (8013374 <USB_SetTurnaroundTime+0xec>)
 80132f8:	481f      	ldr	r0, [pc, #124]	; (8013378 <USB_SetTurnaroundTime+0xf0>)
 80132fa:	440a      	add	r2, r1
 80132fc:	4282      	cmp	r2, r0
 80132fe:	bf34      	ite	cc
 8013300:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8013304:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8013308:	e7c3      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 801330a:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 801330e:	e7c0      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 8013310:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8013314:	e7bd      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 8013316:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 801331a:	e7ba      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 801331c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8013320:	e7b7      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 8013322:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8013326:	e7b4      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 8013328:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 801332c:	e7b1      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 801332e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8013332:	e7ae      	b.n	8013292 <USB_SetTurnaroundTime+0xa>
 8013334:	ff275340 	.word	0xff275340
 8013338:	000c34ff 	.word	0x000c34ff
 801333c:	ff1b1e40 	.word	0xff1b1e40
 8013340:	000f423f 	.word	0x000f423f
 8013344:	ff0bdc00 	.word	0xff0bdc00
 8013348:	00124f7f 	.word	0x00124f7f
 801334c:	fef98c80 	.word	0xfef98c80
 8013350:	0013d620 	.word	0x0013d620
 8013354:	fee5b660 	.word	0xfee5b660
 8013358:	0016e35f 	.word	0x0016e35f
 801335c:	feced300 	.word	0xfeced300
 8013360:	001b7740 	.word	0x001b7740
 8013364:	feb35bc0 	.word	0xfeb35bc0
 8013368:	002191c0 	.word	0x002191c0
 801336c:	fe91ca00 	.word	0xfe91ca00
 8013370:	00387520 	.word	0x00387520
 8013374:	fe5954e0 	.word	0xfe5954e0
 8013378:	00419ce0 	.word	0x00419ce0

0801337c <USB_EnableGlobalInt>:
{
 801337c:	4603      	mov	r3, r0
}
 801337e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013380:	689a      	ldr	r2, [r3, #8]
 8013382:	f042 0201 	orr.w	r2, r2, #1
 8013386:	609a      	str	r2, [r3, #8]
}
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop

0801338c <USB_DisableGlobalInt>:
{
 801338c:	4603      	mov	r3, r0
}
 801338e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013390:	689a      	ldr	r2, [r3, #8]
 8013392:	f022 0201 	bic.w	r2, r2, #1
 8013396:	609a      	str	r2, [r3, #8]
}
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop

0801339c <USB_SetCurrentMode>:
{
 801339c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801339e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80133a0:	2901      	cmp	r1, #1
{
 80133a2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80133a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80133a8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80133aa:	d017      	beq.n	80133dc <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80133ac:	b9a1      	cbnz	r1, 80133d8 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80133ae:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80133b0:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80133b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133b6:	60c3      	str	r3, [r0, #12]
 80133b8:	e001      	b.n	80133be <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80133ba:	2c32      	cmp	r4, #50	; 0x32
 80133bc:	d00c      	beq.n	80133d8 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80133be:	2001      	movs	r0, #1
      ms++;
 80133c0:	4404      	add	r4, r0
      HAL_Delay(1U);
 80133c2:	f7f4 fd31 	bl	8007e28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80133c6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80133c8:	07db      	lsls	r3, r3, #31
 80133ca:	d4f6      	bmi.n	80133ba <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80133cc:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80133d0:	fab0 f080 	clz	r0, r0
 80133d4:	0940      	lsrs	r0, r0, #5
}
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80133d8:	2001      	movs	r0, #1
}
 80133da:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80133dc:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80133de:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80133e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133e4:	60c3      	str	r3, [r0, #12]
 80133e6:	e001      	b.n	80133ec <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80133e8:	2c32      	cmp	r4, #50	; 0x32
 80133ea:	d0f5      	beq.n	80133d8 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80133ec:	2001      	movs	r0, #1
      ms++;
 80133ee:	4404      	add	r4, r0
      HAL_Delay(1U);
 80133f0:	f7f4 fd1a 	bl	8007e28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80133f4:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80133f6:	07da      	lsls	r2, r3, #31
 80133f8:	d5f6      	bpl.n	80133e8 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 80133fa:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80133fe:	fab0 f080 	clz	r0, r0
 8013402:	0940      	lsrs	r0, r0, #5
 8013404:	e7e7      	b.n	80133d6 <USB_SetCurrentMode+0x3a>
 8013406:	bf00      	nop

08013408 <USB_FlushTxFifo>:
{
 8013408:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801340a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801340c:	4a11      	ldr	r2, [pc, #68]	; (8013454 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801340e:	9301      	str	r3, [sp, #4]
 8013410:	e002      	b.n	8013418 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013412:	6903      	ldr	r3, [r0, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	db07      	blt.n	8013428 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8013418:	9b01      	ldr	r3, [sp, #4]
 801341a:	3301      	adds	r3, #1
 801341c:	4293      	cmp	r3, r2
 801341e:	9301      	str	r3, [sp, #4]
 8013420:	d9f7      	bls.n	8013412 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8013422:	2003      	movs	r0, #3
}
 8013424:	b002      	add	sp, #8
 8013426:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013428:	0189      	lsls	r1, r1, #6
  count = 0U;
 801342a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801342c:	4a09      	ldr	r2, [pc, #36]	; (8013454 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801342e:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8013432:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013434:	6101      	str	r1, [r0, #16]
 8013436:	e003      	b.n	8013440 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013438:	6903      	ldr	r3, [r0, #16]
 801343a:	f013 0320 	ands.w	r3, r3, #32
 801343e:	d005      	beq.n	801344c <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	3301      	adds	r3, #1
 8013444:	4293      	cmp	r3, r2
 8013446:	9301      	str	r3, [sp, #4]
 8013448:	d9f6      	bls.n	8013438 <USB_FlushTxFifo+0x30>
 801344a:	e7ea      	b.n	8013422 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 801344c:	4618      	mov	r0, r3
}
 801344e:	b002      	add	sp, #8
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	00030d40 	.word	0x00030d40

08013458 <USB_FlushRxFifo>:
{
 8013458:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801345a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801345c:	4a10      	ldr	r2, [pc, #64]	; (80134a0 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 801345e:	9301      	str	r3, [sp, #4]
 8013460:	e002      	b.n	8013468 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013462:	6903      	ldr	r3, [r0, #16]
 8013464:	2b00      	cmp	r3, #0
 8013466:	db07      	blt.n	8013478 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8013468:	9b01      	ldr	r3, [sp, #4]
 801346a:	3301      	adds	r3, #1
 801346c:	4293      	cmp	r3, r2
 801346e:	9301      	str	r3, [sp, #4]
 8013470:	d9f7      	bls.n	8013462 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 8013472:	2003      	movs	r0, #3
}
 8013474:	b002      	add	sp, #8
 8013476:	4770      	bx	lr
  count = 0U;
 8013478:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801347a:	2310      	movs	r3, #16
    if (++count > 200000U)
 801347c:	4a08      	ldr	r2, [pc, #32]	; (80134a0 <USB_FlushRxFifo+0x48>)
  count = 0U;
 801347e:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013480:	6103      	str	r3, [r0, #16]
 8013482:	e003      	b.n	801348c <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013484:	6903      	ldr	r3, [r0, #16]
 8013486:	f013 0310 	ands.w	r3, r3, #16
 801348a:	d005      	beq.n	8013498 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 801348c:	9b01      	ldr	r3, [sp, #4]
 801348e:	3301      	adds	r3, #1
 8013490:	4293      	cmp	r3, r2
 8013492:	9301      	str	r3, [sp, #4]
 8013494:	d9f6      	bls.n	8013484 <USB_FlushRxFifo+0x2c>
 8013496:	e7ec      	b.n	8013472 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8013498:	4618      	mov	r0, r3
}
 801349a:	b002      	add	sp, #8
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop
 80134a0:	00030d40 	.word	0x00030d40

080134a4 <USB_DevInit>:
{
 80134a4:	b084      	sub	sp, #16
 80134a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134aa:	ad09      	add	r5, sp, #36	; 0x24
 80134ac:	4604      	mov	r4, r0
 80134ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80134b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80134b4:	2300      	movs	r3, #0
 80134b6:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 80134b8:	4619      	mov	r1, r3
 80134ba:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80134be:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80134c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80134c4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80134c6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80134c8:	d1f7      	bne.n	80134ba <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80134ca:	2e00      	cmp	r6, #0
 80134cc:	f040 8092 	bne.w	80135f4 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80134d0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80134d4:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 80134d8:	f043 0302 	orr.w	r3, r3, #2
 80134dc:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80134de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80134e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80134e4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ec:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80134ee:	6823      	ldr	r3, [r4, #0]
 80134f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134f4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80134f6:	2300      	movs	r3, #0
 80134f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013502:	2b01      	cmp	r3, #1
 8013504:	d07d      	beq.n	8013602 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	f043 0303 	orr.w	r3, r3, #3
 801350c:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801350e:	2110      	movs	r1, #16
 8013510:	4620      	mov	r0, r4
 8013512:	f7ff ff79 	bl	8013408 <USB_FlushTxFifo>
 8013516:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013518:	4620      	mov	r0, r4
 801351a:	f7ff ff9d 	bl	8013458 <USB_FlushRxFifo>
 801351e:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8013522:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013524:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8013526:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8013528:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 801352a:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801352c:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 801352e:	bf18      	it	ne
 8013530:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013532:	b1ed      	cbz	r5, 8013570 <USB_DevInit+0xcc>
 8013534:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013538:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801353c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8013540:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013542:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8013546:	e009      	b.n	801355c <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8013548:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801354c:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 801354e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013552:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013556:	3320      	adds	r3, #32
 8013558:	4295      	cmp	r5, r2
 801355a:	d02c      	beq.n	80135b6 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801355c:	6819      	ldr	r1, [r3, #0]
 801355e:	2900      	cmp	r1, #0
 8013560:	daf2      	bge.n	8013548 <USB_DevInit+0xa4>
      if (i == 0U)
 8013562:	b112      	cbz	r2, 801356a <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013564:	f8c3 8000 	str.w	r8, [r3]
 8013568:	e7f0      	b.n	801354c <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801356a:	f8c3 9000 	str.w	r9, [r3]
 801356e:	e7ed      	b.n	801354c <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013570:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8013572:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013578:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 801357a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 801357e:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013580:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8013582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013584:	b91b      	cbnz	r3, 801358e <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013586:	69a3      	ldr	r3, [r4, #24]
 8013588:	f043 0310 	orr.w	r3, r3, #16
 801358c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801358e:	69a2      	ldr	r2, [r4, #24]
 8013590:	4b21      	ldr	r3, [pc, #132]	; (8013618 <USB_DevInit+0x174>)
 8013592:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8013594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013596:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8013598:	b11a      	cbz	r2, 80135a2 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801359a:	69a3      	ldr	r3, [r4, #24]
 801359c:	f043 0308 	orr.w	r3, r3, #8
 80135a0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80135a2:	2e01      	cmp	r6, #1
 80135a4:	d103      	bne.n	80135ae <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80135a6:	69a2      	ldr	r2, [r4, #24]
 80135a8:	4b1c      	ldr	r3, [pc, #112]	; (801361c <USB_DevInit+0x178>)
 80135aa:	4313      	orrs	r3, r2
 80135ac:	61a3      	str	r3, [r4, #24]
}
 80135ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b2:	b004      	add	sp, #16
 80135b4:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135b6:	2200      	movs	r2, #0
 80135b8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80135bc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80135c0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80135c4:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80135c6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80135ca:	e009      	b.n	80135e0 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80135cc:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135d0:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80135d2:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80135d6:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135da:	3320      	adds	r3, #32
 80135dc:	4295      	cmp	r5, r2
 80135de:	d0c7      	beq.n	8013570 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80135e0:	6819      	ldr	r1, [r3, #0]
 80135e2:	2900      	cmp	r1, #0
 80135e4:	daf2      	bge.n	80135cc <USB_DevInit+0x128>
      if (i == 0U)
 80135e6:	b112      	cbz	r2, 80135ee <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80135e8:	f8c3 8000 	str.w	r8, [r3]
 80135ec:	e7f0      	b.n	80135d0 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80135ee:	f8c3 9000 	str.w	r9, [r3]
 80135f2:	e7ed      	b.n	80135d0 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80135f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80135f6:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80135fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80135fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8013600:	e779      	b.n	80134f6 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8013602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013604:	b913      	cbnz	r3, 801360c <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 801360a:	e780      	b.n	801350e <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	f043 0301 	orr.w	r3, r3, #1
 8013612:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013614:	e77b      	b.n	801350e <USB_DevInit+0x6a>
 8013616:	bf00      	nop
 8013618:	803c3800 	.word	0x803c3800
 801361c:	40000004 	.word	0x40000004

08013620 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013620:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013624:	f013 0006 	ands.w	r0, r3, #6
 8013628:	d004      	beq.n	8013634 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 801362a:	f013 0f02 	tst.w	r3, #2
 801362e:	bf14      	ite	ne
 8013630:	2002      	movne	r0, #2
 8013632:	200f      	moveq	r0, #15
}
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop

08013638 <USB_ActivateEndpoint>:
{
 8013638:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 801363a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801363c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 801363e:	2b01      	cmp	r3, #1
 8013640:	d020      	beq.n	8013684 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013642:	f002 0c0f 	and.w	ip, r2, #15
 8013646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801364a:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801364e:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013652:	fa03 f30c 	lsl.w	r3, r3, ip
 8013656:	4323      	orrs	r3, r4
 8013658:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801365c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8013660:	041b      	lsls	r3, r3, #16
 8013662:	d40c      	bmi.n	801367e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013664:	688b      	ldr	r3, [r1, #8]
 8013666:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 801366a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801366e:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013670:	4914      	ldr	r1, [pc, #80]	; (80136c4 <USB_ActivateEndpoint+0x8c>)
 8013672:	4323      	orrs	r3, r4
 8013674:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8013678:	4319      	orrs	r1, r3
 801367a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 801367e:	2000      	movs	r0, #0
 8013680:	bc30      	pop	{r4, r5}
 8013682:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013684:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8013688:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801368c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013690:	40ab      	lsls	r3, r5
 8013692:	69e5      	ldr	r5, [r4, #28]
 8013694:	432b      	orrs	r3, r5
 8013696:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013698:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801369c:	041c      	lsls	r4, r3, #16
 801369e:	d4ee      	bmi.n	801367e <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80136a0:	688b      	ldr	r3, [r1, #8]
 80136a2:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80136a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80136aa:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80136ac:	4905      	ldr	r1, [pc, #20]	; (80136c4 <USB_ActivateEndpoint+0x8c>)
 80136ae:	432b      	orrs	r3, r5
 80136b0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80136b4:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 80136b8:	4311      	orrs	r1, r2
}
 80136ba:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80136bc:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80136c0:	2000      	movs	r0, #0
 80136c2:	4770      	bx	lr
 80136c4:	10008000 	.word	0x10008000

080136c8 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 80136c8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80136ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80136cc:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80136ce:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80136d2:	d02a      	beq.n	801372a <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136d4:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80136d8:	2a00      	cmp	r2, #0
 80136da:	db19      	blt.n	8013710 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80136e0:	f003 030f 	and.w	r3, r3, #15
 80136e4:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80136e8:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80136ec:	4a23      	ldr	r2, [pc, #140]	; (801377c <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136ee:	ea21 0103 	bic.w	r1, r1, r3
 80136f2:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80136f6:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80136fa:	ea21 0303 	bic.w	r3, r1, r3
 80136fe:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013702:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013704:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013708:	401a      	ands	r2, r3
 801370a:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 801370e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013710:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013714:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013718:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801371c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013720:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013724:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8013728:	e7d8      	b.n	80136dc <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801372a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801372e:	2a00      	cmp	r2, #0
 8013730:	da0b      	bge.n	801374a <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013732:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013736:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801373a:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801373e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013742:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013746:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801374a:	f003 020f 	and.w	r2, r3, #15
 801374e:	2301      	movs	r3, #1
 8013750:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013754:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013756:	4a0a      	ldr	r2, [pc, #40]	; (8013780 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013758:	ea21 0103 	bic.w	r1, r1, r3
 801375c:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013760:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013764:	ea21 0303 	bic.w	r3, r1, r3
 8013768:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 801376c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801376e:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8013772:	401a      	ands	r2, r3
 8013774:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop
 801377c:	eff37800 	.word	0xeff37800
 8013780:	ec337800 	.word	0xec337800

08013784 <USB_EPStartXfer>:
{
 8013784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8013788:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801378a:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 801378e:	2b01      	cmp	r3, #1
 8013790:	d051      	beq.n	8013836 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013792:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8013796:	4c84      	ldr	r4, [pc, #528]	; (80139a8 <USB_EPStartXfer+0x224>)
 8013798:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 801379c:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 80137a0:	402c      	ands	r4, r5
 80137a2:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137a4:	4c81      	ldr	r4, [pc, #516]	; (80139ac <USB_EPStartXfer+0x228>)
 80137a6:	691d      	ldr	r5, [r3, #16]
 80137a8:	402c      	ands	r4, r5
 80137aa:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 80137ac:	694c      	ldr	r4, [r1, #20]
 80137ae:	b384      	cbz	r4, 8013812 <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137b0:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 80137b2:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137b4:	4e7e      	ldr	r6, [pc, #504]	; (80139b0 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137b6:	442c      	add	r4, r5
 80137b8:	f104 34ff 	add.w	r4, r4, #4294967295
 80137bc:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137c0:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 80137c4:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80137c6:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137ca:	691d      	ldr	r5, [r3, #16]
 80137cc:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80137d0:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137d4:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80137d6:	691d      	ldr	r5, [r3, #16]
 80137d8:	ea44 0405 	orr.w	r4, r4, r5
 80137dc:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80137de:	d025      	beq.n	801382c <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 80137e0:	78cb      	ldrb	r3, [r1, #3]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d10c      	bne.n	8013800 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80137e6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80137ea:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80137ee:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 80137f2:	bf0c      	ite	eq
 80137f4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80137f8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80137fc:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013800:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013804:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013808:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 801380c:	2000      	movs	r0, #0
 801380e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013812:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8013814:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013816:	691d      	ldr	r5, [r3, #16]
 8013818:	f3c4 0412 	ubfx	r4, r4, #0, #19
 801381c:	ea44 0405 	orr.w	r4, r4, r5
 8013820:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013822:	691c      	ldr	r4, [r3, #16]
 8013824:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013828:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 801382a:	d1d9      	bne.n	80137e0 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 801382c:	68ca      	ldr	r2, [r1, #12]
 801382e:	2a00      	cmp	r2, #0
 8013830:	d0d6      	beq.n	80137e0 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013832:	615a      	str	r2, [r3, #20]
 8013834:	e7d4      	b.n	80137e0 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8013836:	694d      	ldr	r5, [r1, #20]
 8013838:	2d00      	cmp	r5, #0
 801383a:	d03d      	beq.n	80138b8 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801383c:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8013840:	4e59      	ldr	r6, [pc, #356]	; (80139a8 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013842:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013846:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801384a:	4f58      	ldr	r7, [pc, #352]	; (80139ac <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801384c:	ea08 0606 	and.w	r6, r8, r6
 8013850:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013854:	eb05 060e 	add.w	r6, r5, lr
 8013858:	3e01      	subs	r6, #1
 801385a:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801385e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8013862:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013864:	4e52      	ldr	r6, [pc, #328]	; (80139b0 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013866:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801386a:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 801386e:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013872:	433e      	orrs	r6, r7
 8013874:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013878:	f3c5 0612 	ubfx	r6, r5, #0, #19
 801387c:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013880:	433e      	orrs	r6, r7
 8013882:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013886:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 801388a:	f891 e003 	ldrb.w	lr, [r1, #3]
 801388e:	f1be 0f01 	cmp.w	lr, #1
 8013892:	d057      	beq.n	8013944 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8013894:	2a01      	cmp	r2, #1
 8013896:	d072      	beq.n	801397e <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013898:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801389c:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138a0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80138a4:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138a8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80138ac:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80138b0:	4313      	orrs	r3, r2
 80138b2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 80138b6:	e7a9      	b.n	801380c <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138b8:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 80138bc:	4e3b      	ldr	r6, [pc, #236]	; (80139ac <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138be:	4c3a      	ldr	r4, [pc, #232]	; (80139a8 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 80138c0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138c2:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 80138c6:	ea06 0607 	and.w	r6, r6, r7
 80138ca:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80138ce:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80138d2:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80138d6:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138da:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 80138de:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138e2:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138e6:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 80138ea:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 80138ee:	d03a      	beq.n	8013966 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138f0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80138f4:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138f8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80138fc:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013900:	d184      	bne.n	801380c <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013902:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013906:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801390a:	6833      	ldr	r3, [r6, #0]
 801390c:	bf0c      	ite	eq
 801390e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013912:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013916:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8013918:	2a00      	cmp	r2, #0
 801391a:	f47f af77 	bne.w	801380c <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 801391e:	b2ad      	uxth	r5, r5
 8013920:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8013922:	08ad      	lsrs	r5, r5, #2
 8013924:	f43f af72 	beq.w	801380c <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013928:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801392a:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 801392e:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8013932:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8013936:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 801393a:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801393c:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8013940:	d1f9      	bne.n	8013936 <USB_EPStartXfer+0x1b2>
 8013942:	e763      	b.n	801380c <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013944:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8013946:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013948:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801394c:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801394e:	6933      	ldr	r3, [r6, #16]
 8013950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013954:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8013956:	d017      	beq.n	8013988 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013958:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 801395c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013960:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013964:	e7cd      	b.n	8013902 <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8013966:	690b      	ldr	r3, [r1, #16]
 8013968:	b963      	cbnz	r3, 8013984 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 801396a:	f1be 0f01 	cmp.w	lr, #1
 801396e:	d00e      	beq.n	801398e <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013970:	6833      	ldr	r3, [r6, #0]
}
 8013972:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013978:	6033      	str	r3, [r6, #0]
}
 801397a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 801397e:	690b      	ldr	r3, [r1, #16]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d0f5      	beq.n	8013970 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013984:	6173      	str	r3, [r6, #20]
 8013986:	e7f0      	b.n	801396a <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8013988:	690b      	ldr	r3, [r1, #16]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1fa      	bne.n	8013984 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801398e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013992:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013996:	6833      	ldr	r3, [r6, #0]
 8013998:	bf0c      	ite	eq
 801399a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801399e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80139a2:	6033      	str	r3, [r6, #0]
 80139a4:	e7e4      	b.n	8013970 <USB_EPStartXfer+0x1ec>
 80139a6:	bf00      	nop
 80139a8:	fff80000 	.word	0xfff80000
 80139ac:	e007ffff 	.word	0xe007ffff
 80139b0:	1ff80000 	.word	0x1ff80000

080139b4 <USB_EP0StartXfer>:
{
 80139b4:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 80139b6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80139b8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	d027      	beq.n	8013a0e <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80139be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80139c2:	4c3c      	ldr	r4, [pc, #240]	; (8013ab4 <USB_EP0StartXfer+0x100>)
 80139c4:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 80139c8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80139cc:	402c      	ands	r4, r5
 80139ce:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80139d0:	4c39      	ldr	r4, [pc, #228]	; (8013ab8 <USB_EP0StartXfer+0x104>)
 80139d2:	691d      	ldr	r5, [r3, #16]
 80139d4:	402c      	ands	r4, r5
 80139d6:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 80139d8:	694c      	ldr	r4, [r1, #20]
 80139da:	b9ac      	cbnz	r4, 8013a08 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 80139dc:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80139de:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80139e0:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 80139e4:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80139e6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80139ea:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80139ec:	691d      	ldr	r5, [r3, #16]
 80139ee:	ea44 0405 	orr.w	r4, r4, r5
 80139f2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80139f4:	d03e      	beq.n	8013a74 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80139f6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80139fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139fe:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013a02:	2000      	movs	r0, #0
 8013a04:	bcf0      	pop	{r4, r5, r6, r7}
 8013a06:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8013a08:	688c      	ldr	r4, [r1, #8]
 8013a0a:	614c      	str	r4, [r1, #20]
 8013a0c:	e7e7      	b.n	80139de <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a0e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8013a12:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8013a18:	2d00      	cmp	r5, #0
 8013a1a:	d030      	beq.n	8013a7e <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013a1c:	691f      	ldr	r7, [r3, #16]
 8013a1e:	4e25      	ldr	r6, [pc, #148]	; (8013ab4 <USB_EP0StartXfer+0x100>)
 8013a20:	403e      	ands	r6, r7
 8013a22:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a24:	4e24      	ldr	r6, [pc, #144]	; (8013ab8 <USB_EP0StartXfer+0x104>)
 8013a26:	691f      	ldr	r7, [r3, #16]
 8013a28:	403e      	ands	r6, r7
 8013a2a:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8013a2c:	688e      	ldr	r6, [r1, #8]
 8013a2e:	42b5      	cmp	r5, r6
 8013a30:	d901      	bls.n	8013a36 <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8013a32:	4635      	mov	r5, r6
 8013a34:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013a36:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013a38:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8013a3c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013a3e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013a42:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013a44:	691e      	ldr	r6, [r3, #16]
 8013a46:	ea45 0506 	orr.w	r5, r5, r6
 8013a4a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013a4c:	d027      	beq.n	8013a9e <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a4e:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013a50:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013a56:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	d0d2      	beq.n	8013a02 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013a5c:	f004 020f 	and.w	r2, r4, #15
 8013a60:	2401      	movs	r4, #1
 8013a62:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8013a66:	4094      	lsls	r4, r2
 8013a68:	431c      	orrs	r4, r3
 8013a6a:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8013a6e:	2000      	movs	r0, #0
 8013a70:	bcf0      	pop	{r4, r5, r6, r7}
 8013a72:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8013a74:	68ca      	ldr	r2, [r1, #12]
 8013a76:	2a00      	cmp	r2, #0
 8013a78:	d0bd      	beq.n	80139f6 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013a7a:	615a      	str	r2, [r3, #20]
 8013a7c:	e7bb      	b.n	80139f6 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a7e:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8013a80:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a82:	4d0d      	ldr	r5, [pc, #52]	; (8013ab8 <USB_EP0StartXfer+0x104>)
 8013a84:	ea05 0506 	and.w	r5, r5, r6
 8013a88:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013a8a:	691d      	ldr	r5, [r3, #16]
 8013a8c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013a90:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013a92:	4d08      	ldr	r5, [pc, #32]	; (8013ab4 <USB_EP0StartXfer+0x100>)
 8013a94:	691e      	ldr	r6, [r3, #16]
 8013a96:	ea05 0506 	and.w	r5, r5, r6
 8013a9a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013a9c:	d1d7      	bne.n	8013a4e <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8013a9e:	690a      	ldr	r2, [r1, #16]
 8013aa0:	b102      	cbz	r2, 8013aa4 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013aa2:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013aa4:	681a      	ldr	r2, [r3, #0]
}
 8013aa6:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013aa8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8013aac:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013aae:	601a      	str	r2, [r3, #0]
}
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	fff80000 	.word	0xfff80000
 8013ab8:	e007ffff 	.word	0xe007ffff

08013abc <USB_WritePacket>:
{
 8013abc:	b410      	push	{r4}
 8013abe:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8013ac2:	b964      	cbnz	r4, 8013ade <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013ac4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8013ac6:	089b      	lsrs	r3, r3, #2
 8013ac8:	d009      	beq.n	8013ade <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013aca:	3201      	adds	r2, #1
 8013acc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013ad0:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8013ad4:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8013ad8:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013ada:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8013adc:	d1fa      	bne.n	8013ad4 <USB_WritePacket+0x18>
}
 8013ade:	2000      	movs	r0, #0
 8013ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop

08013ae8 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8013ae8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8013aec:	b570      	push	{r4, r5, r6, lr}
 8013aee:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8013af0:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8013af4:	d01a      	beq.n	8013b2c <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013af6:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8013afa:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8013afc:	2300      	movs	r3, #0
 8013afe:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b00:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8013b04:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b06:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8013b0a:	d1f8      	bne.n	8013afe <USB_ReadPacket+0x16>
    pDest++;
 8013b0c:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8013b10:	b15e      	cbz	r6, 8013b2a <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013b12:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8013b16:	4406      	add	r6, r0
 8013b18:	2200      	movs	r2, #0
 8013b1a:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013b1c:	fa21 f302 	lsr.w	r3, r1, r2
 8013b20:	3208      	adds	r2, #8
 8013b22:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8013b26:	42b0      	cmp	r0, r6
 8013b28:	d1f8      	bne.n	8013b1c <USB_ReadPacket+0x34>
}
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8013b2c:	4608      	mov	r0, r1
 8013b2e:	e7ef      	b.n	8013b10 <USB_ReadPacket+0x28>

08013b30 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8013b30:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013b32:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013b34:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b36:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013b3a:	d00c      	beq.n	8013b56 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b3c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013b40:	b10b      	cbz	r3, 8013b46 <USB_EPSetStall+0x16>
 8013b42:	2a00      	cmp	r2, #0
 8013b44:	da14      	bge.n	8013b70 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013b46:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b4e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013b52:	2000      	movs	r0, #0
 8013b54:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b56:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013b5a:	2a00      	cmp	r2, #0
 8013b5c:	db00      	blt.n	8013b60 <USB_EPSetStall+0x30>
 8013b5e:	b973      	cbnz	r3, 8013b7e <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013b60:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b68:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013b70:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b78:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013b7c:	e7e3      	b.n	8013b46 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013b7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b86:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013b8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013b96:	e7e9      	b.n	8013b6c <USB_EPSetStall+0x3c>

08013b98 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8013b98:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013b9a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013b9c:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b9e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013ba2:	d013      	beq.n	8013bcc <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ba4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bb0:	78cb      	ldrb	r3, [r1, #3]
 8013bb2:	3b02      	subs	r3, #2
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d901      	bls.n	8013bbc <USB_EPClearStall+0x24>
}
 8013bb8:	2000      	movs	r0, #0
 8013bba:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013bbc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bc4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013bc8:	2000      	movs	r0, #0
 8013bca:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013bcc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bd4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bd8:	78cb      	ldrb	r3, [r1, #3]
 8013bda:	3b02      	subs	r3, #2
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d8eb      	bhi.n	8013bb8 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013be0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013be8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013bec:	2000      	movs	r0, #0
 8013bee:	4770      	bx	lr

08013bf0 <USB_SetDevAddress>:
{
 8013bf0:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013bf2:	0109      	lsls	r1, r1, #4
}
 8013bf4:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013bf6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013bfa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013bfe:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8013c02:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013c06:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013c0a:	4311      	orrs	r1, r2
 8013c0c:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop

08013c14 <USB_DevConnect>:
{
 8013c14:	4603      	mov	r3, r0
}
 8013c16:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c18:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013c1c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c20:	f022 0203 	bic.w	r2, r2, #3
 8013c24:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013c28:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013c2c:	f023 0302 	bic.w	r3, r3, #2
 8013c30:	604b      	str	r3, [r1, #4]
}
 8013c32:	4770      	bx	lr

08013c34 <USB_DevDisconnect>:
{
 8013c34:	4603      	mov	r3, r0
}
 8013c36:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c38:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c3c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c40:	f022 0203 	bic.w	r2, r2, #3
 8013c44:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c48:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013c4c:	f043 0302 	orr.w	r3, r3, #2
 8013c50:	604b      	str	r3, [r1, #4]
}
 8013c52:	4770      	bx	lr

08013c54 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8013c54:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8013c56:	6980      	ldr	r0, [r0, #24]
}
 8013c58:	4010      	ands	r0, r2
 8013c5a:	4770      	bx	lr

08013c5c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013c5c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013c60:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013c64:	4018      	ands	r0, r3
}
 8013c66:	0c00      	lsrs	r0, r0, #16
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop

08013c6c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013c6c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013c70:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013c74:	4018      	ands	r0, r3
}
 8013c76:	b280      	uxth	r0, r0
 8013c78:	4770      	bx	lr
 8013c7a:	bf00      	nop

08013c7c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013c7c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013c80:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013c84:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013c88:	6940      	ldr	r0, [r0, #20]
}
 8013c8a:	4010      	ands	r0, r2
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop

08013c90 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8013c90:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013c94:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013c98:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013c9c:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ca0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013ca4:	40cb      	lsrs	r3, r1
 8013ca6:	01db      	lsls	r3, r3, #7
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	4313      	orrs	r3, r2
}
 8013cac:	4018      	ands	r0, r3
 8013cae:	4770      	bx	lr

08013cb0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8013cb0:	6940      	ldr	r0, [r0, #20]
}
 8013cb2:	f000 0001 	and.w	r0, r0, #1
 8013cb6:	4770      	bx	lr

08013cb8 <USB_ActivateSetup>:
{
 8013cb8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013cba:	4a09      	ldr	r2, [pc, #36]	; (8013ce0 <USB_ActivateSetup+0x28>)
}
 8013cbc:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013cbe:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8013cc2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013cc4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8013cc8:	4022      	ands	r2, r4
}
 8013cca:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013cce:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013cd2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013cda:	604b      	str	r3, [r1, #4]
}
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	fffff800 	.word	0xfffff800

08013ce4 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ce4:	4b14      	ldr	r3, [pc, #80]	; (8013d38 <USB_EP0_OutStart+0x54>)
{
 8013ce6:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013ce8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013cea:	429c      	cmp	r4, r3
 8013cec:	d81a      	bhi.n	8013d24 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cee:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013cf2:	2300      	movs	r3, #0
  if (dma == 1U)
 8013cf4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013cf6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013cf8:	6903      	ldr	r3, [r0, #16]
 8013cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013cfe:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013d00:	6903      	ldr	r3, [r0, #16]
 8013d02:	f043 0318 	orr.w	r3, r3, #24
 8013d06:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013d08:	6903      	ldr	r3, [r0, #16]
 8013d0a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013d0e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8013d10:	d104      	bne.n	8013d1c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013d12:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013d14:	6803      	ldr	r3, [r0, #0]
 8013d16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013d1a:	6003      	str	r3, [r0, #0]
}
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d22:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d24:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013d28:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	dae0      	bge.n	8013cf2 <USB_EP0_OutStart+0xe>
}
 8013d30:	2000      	movs	r0, #0
 8013d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d36:	4770      	bx	lr
 8013d38:	4f54300a 	.word	0x4f54300a

08013d3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013d3c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8013d3e:	4903      	ldr	r1, [pc, #12]	; (8013d4c <MX_FATFS_Init+0x10>)
 8013d40:	4803      	ldr	r0, [pc, #12]	; (8013d50 <MX_FATFS_Init+0x14>)
 8013d42:	f001 f96f 	bl	8015024 <FATFS_LinkDriver>
 8013d46:	4b03      	ldr	r3, [pc, #12]	; (8013d54 <MX_FATFS_Init+0x18>)
 8013d48:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013d4a:	bd08      	pop	{r3, pc}
 8013d4c:	20002ee4 	.word	0x20002ee4
 8013d50:	200002e8 	.word	0x200002e8
 8013d54:	20002ee8 	.word	0x20002ee8

08013d58 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8013d58:	4b02      	ldr	r3, [pc, #8]	; (8013d64 <USER_initialize+0xc>)
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	701a      	strb	r2, [r3, #0]
    return Stat;
 8013d5e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	200002e4 	.word	0x200002e4

08013d68 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8013d68:	2000      	movs	r0, #0
 8013d6a:	4770      	bx	lr

08013d6c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8013d6c:	2001      	movs	r0, #1
 8013d6e:	4770      	bx	lr

08013d70 <USER_write>:
 8013d70:	2000      	movs	r0, #0
 8013d72:	4770      	bx	lr

08013d74 <USER_status>:
 8013d74:	4b02      	ldr	r3, [pc, #8]	; (8013d80 <USER_status+0xc>)
 8013d76:	2201      	movs	r2, #1
 8013d78:	701a      	strb	r2, [r3, #0]
 8013d7a:	7818      	ldrb	r0, [r3, #0]
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	200002e4 	.word	0x200002e4

08013d84 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013d84:	2100      	movs	r1, #0
{
 8013d86:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 8013d88:	4608      	mov	r0, r1
{
 8013d8a:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8013d8c:	f003 fe6a 	bl	8017a64 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8013d90:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8013d92:	4b1f      	ldr	r3, [pc, #124]	; (8013e10 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8013d94:	491f      	ldr	r1, [pc, #124]	; (8013e14 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8013d96:	4a20      	ldr	r2, [pc, #128]	; (8013e18 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013d98:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8013d9a:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8013d9c:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8013d9e:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013da0:	481e      	ldr	r0, [pc, #120]	; (8013e1c <MX_LWIP_Init+0x98>)
 8013da2:	4d1f      	ldr	r5, [pc, #124]	; (8013e20 <MX_LWIP_Init+0x9c>)
 8013da4:	9002      	str	r0, [sp, #8]
 8013da6:	481f      	ldr	r0, [pc, #124]	; (8013e24 <MX_LWIP_Init+0xa0>)
 8013da8:	9001      	str	r0, [sp, #4]
 8013daa:	4628      	mov	r0, r5
 8013dac:	f006 fc08 	bl	801a5c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013db0:	4628      	mov	r0, r5
 8013db2:	f006 fcb3 	bl	801a71c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013db6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013dba:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8013dbc:	075b      	lsls	r3, r3, #29
 8013dbe:	d524      	bpl.n	8013e0a <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 8013dc0:	f006 fcb2 	bl	801a728 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8013dc4:	4918      	ldr	r1, [pc, #96]	; (8013e28 <MX_LWIP_Init+0xa4>)
 8013dc6:	4816      	ldr	r0, [pc, #88]	; (8013e20 <MX_LWIP_Init+0x9c>)
 8013dc8:	f006 fd38 	bl	801a83c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8013dcc:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013dce:	2101      	movs	r1, #1
 8013dd0:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 8013dd2:	4e16      	ldr	r6, [pc, #88]	; (8013e2c <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013dd4:	4c16      	ldr	r4, [pc, #88]	; (8013e30 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8013dd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013dda:	f001 fa0d 	bl	80151f8 <osSemaphoreCreate>
 8013dde:	4b15      	ldr	r3, [pc, #84]	; (8013e34 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8013de0:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013de2:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013de6:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8013de8:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013df0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013df4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8013df8:	4631      	mov	r1, r6
 8013dfa:	a807      	add	r0, sp, #28
 8013dfc:	f001 f944 	bl	8015088 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8013e00:	4807      	ldr	r0, [pc, #28]	; (8013e20 <MX_LWIP_Init+0x9c>)
 8013e02:	f00d fc7b 	bl	80216fc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013e06:	b00e      	add	sp, #56	; 0x38
 8013e08:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8013e0a:	f006 fcaf 	bl	801a76c <netif_set_down>
 8013e0e:	e7d9      	b.n	8013dc4 <MX_LWIP_Init+0x40>
 8013e10:	20002f2c 	.word	0x20002f2c
 8013e14:	20002f30 	.word	0x20002f30
 8013e18:	20002f3c 	.word	0x20002f3c
 8013e1c:	080179dd 	.word	0x080179dd
 8013e20:	20002ef0 	.word	0x20002ef0
 8013e24:	08014135 	.word	0x08014135
 8013e28:	08014315 	.word	0x08014315
 8013e2c:	20002f34 	.word	0x20002f34
 8013e30:	08029208 	.word	0x08029208
 8013e34:	20002eec 	.word	0x20002eec

08013e38 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013e38:	4b2c      	ldr	r3, [pc, #176]	; (8013eec <low_level_output+0xb4>)
{
 8013e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013e3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8013e40:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8013e42:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013e44:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8013e46:	2900      	cmp	r1, #0
 8013e48:	d04d      	beq.n	8013ee6 <low_level_output+0xae>
  bufferoffset = 0;
 8013e4a:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013e4c:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8013e50:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013e52:	6822      	ldr	r2, [r4, #0]
 8013e54:	2a00      	cmp	r2, #0
 8013e56:	db1b      	blt.n	8013e90 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8013e58:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013e5c:	1995      	adds	r5, r2, r6
 8013e5e:	454d      	cmp	r5, r9
 8013e60:	d93c      	bls.n	8013edc <low_level_output+0xa4>
      payloadoffset = 0;
 8013e62:	2700      	movs	r7, #0
 8013e64:	e002      	b.n	8013e6c <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013e66:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8013e68:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013e6a:	d921      	bls.n	8013eb0 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013e6c:	eba9 0a06 	sub.w	sl, r9, r6
 8013e70:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013e74:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8013e76:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013e78:	4439      	add	r1, r7
 8013e7a:	4652      	mov	r2, sl
 8013e7c:	f010 f8e2 	bl	8024044 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8013e80:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8013e82:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8013e86:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013e88:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8013e8a:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013e8c:	42b3      	cmp	r3, r6
 8013e8e:	daea      	bge.n	8013e66 <low_level_output+0x2e>
        errval = ERR_USE;
 8013e90:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013e94:	4b15      	ldr	r3, [pc, #84]	; (8013eec <low_level_output+0xb4>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e9c:	695a      	ldr	r2, [r3, #20]
 8013e9e:	0692      	lsls	r2, r2, #26
 8013ea0:	d503      	bpl.n	8013eaa <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013ea2:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8013ea4:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013ea6:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8013ea8:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8013eaa:	b003      	add	sp, #12
 8013eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013eb4:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013eb8:	462a      	mov	r2, r5
 8013eba:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8013ebc:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013ebe:	4439      	add	r1, r7
 8013ec0:	f010 f8c0 	bl	8024044 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8013ec4:	f8db b000 	ldr.w	fp, [fp]
 8013ec8:	9b01      	ldr	r3, [sp, #4]
 8013eca:	f1bb 0f00 	cmp.w	fp, #0
 8013ece:	d1c0      	bne.n	8013e52 <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8013ed0:	4641      	mov	r1, r8
 8013ed2:	4806      	ldr	r0, [pc, #24]	; (8013eec <low_level_output+0xb4>)
 8013ed4:	f7f6 f8d0 	bl	800a078 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8013ed8:	2000      	movs	r0, #0
 8013eda:	e7db      	b.n	8013e94 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013edc:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 8013ede:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013ee0:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 8013ee2:	4615      	mov	r5, r2
 8013ee4:	e7e6      	b.n	8013eb4 <low_level_output+0x7c>
  uint32_t framelength = 0;
 8013ee6:	4688      	mov	r8, r1
 8013ee8:	e7f2      	b.n	8013ed0 <low_level_output+0x98>
 8013eea:	bf00      	nop
 8013eec:	20005fe0 	.word	0x20005fe0

08013ef0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8013ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef4:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8014008 <ethernetif_input+0x118>
 8013ef8:	b083      	sub	sp, #12
 8013efa:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013efc:	4b40      	ldr	r3, [pc, #256]	; (8014000 <ethernetif_input+0x110>)
 8013efe:	f04f 31ff 	mov.w	r1, #4294967295
 8013f02:	6818      	ldr	r0, [r3, #0]
 8013f04:	f001 f99e 	bl	8015244 <osSemaphoreWait>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d1f7      	bne.n	8013efc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8013f0c:	483d      	ldr	r0, [pc, #244]	; (8014004 <ethernetif_input+0x114>)
 8013f0e:	f00f fb89 	bl	8023624 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8013f12:	483d      	ldr	r0, [pc, #244]	; (8014008 <ethernetif_input+0x118>)
 8013f14:	f7f6 f934 	bl	800a180 <HAL_ETH_GetReceivedFrame_IT>
 8013f18:	4604      	mov	r4, r0
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	d168      	bne.n	8013ff0 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8013f1e:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8013f22:	bb51      	cbnz	r1, 8013f7a <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8013f24:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013f28:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013f2c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013f30:	b140      	cbz	r0, 8013f44 <ethernetif_input+0x54>
 8013f32:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013f34:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013f36:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013f38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013f3c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013f3e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013f40:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013f42:	d1f7      	bne.n	8013f34 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013f44:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8013f48:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8013f4e:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013f52:	695a      	ldr	r2, [r3, #20]
 8013f54:	0612      	lsls	r2, r2, #24
 8013f56:	d503      	bpl.n	8013f60 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013f58:	2280      	movs	r2, #128	; 0x80
 8013f5a:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8013f60:	f1ba 0f00 	cmp.w	sl, #0
 8013f64:	d044      	beq.n	8013ff0 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013f66:	9901      	ldr	r1, [sp, #4]
 8013f68:	4650      	mov	r0, sl
 8013f6a:	690b      	ldr	r3, [r1, #16]
 8013f6c:	4798      	blx	r3
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d142      	bne.n	8013ff8 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8013f72:	4824      	ldr	r0, [pc, #144]	; (8014004 <ethernetif_input+0x114>)
 8013f74:	f00f fb5c 	bl	8023630 <sys_mutex_unlock>
      } while(p!=NULL);
 8013f78:	e7c8      	b.n	8013f0c <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013f7a:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013f7e:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013f82:	f006 fdb3 	bl	801aaec <pbuf_alloc>
  if (p != NULL)
 8013f86:	4682      	mov	sl, r0
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0cb      	beq.n	8013f24 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013f8c:	4683      	mov	fp, r0
    bufferoffset = 0;
 8013f8e:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013f90:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013f94:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8013f98:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013f9c:	1854      	adds	r4, r2, r1
 8013f9e:	4544      	cmp	r4, r8
 8013fa0:	d923      	bls.n	8013fea <ethernetif_input+0xfa>
      payloadoffset = 0;
 8013fa2:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013fa4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013fa8:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013fac:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013fb0:	4439      	add	r1, r7
 8013fb2:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013fb4:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013fb6:	f010 f845 	bl	8024044 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013fba:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013fbc:	4544      	cmp	r4, r8
        bufferoffset = 0;
 8013fbe:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013fc2:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013fc4:	d8ee      	bhi.n	8013fa4 <ethernetif_input+0xb4>
 8013fc6:	4639      	mov	r1, r7
 8013fc8:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013fca:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013fce:	4428      	add	r0, r5
 8013fd0:	f010 f838 	bl	8024044 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8013fd4:	f8db b000 	ldr.w	fp, [fp]
 8013fd8:	f1bb 0f00 	cmp.w	fp, #0
 8013fdc:	d0a4      	beq.n	8013f28 <ethernetif_input+0x38>
 8013fde:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8013fe0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013fe4:	1854      	adds	r4, r2, r1
 8013fe6:	4544      	cmp	r4, r8
 8013fe8:	d8db      	bhi.n	8013fa2 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013fea:	4439      	add	r1, r7
      payloadoffset = 0;
 8013fec:	2500      	movs	r5, #0
 8013fee:	e7ec      	b.n	8013fca <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8013ff0:	4804      	ldr	r0, [pc, #16]	; (8014004 <ethernetif_input+0x114>)
 8013ff2:	f00f fb1d 	bl	8023630 <sys_mutex_unlock>
      } while(p!=NULL);
 8013ff6:	e781      	b.n	8013efc <ethernetif_input+0xc>
            pbuf_free(p);
 8013ff8:	4650      	mov	r0, sl
 8013ffa:	f006 ff2d 	bl	801ae58 <pbuf_free>
 8013ffe:	e7b8      	b.n	8013f72 <ethernetif_input+0x82>
 8014000:	20006028 	.word	0x20006028
 8014004:	2001e2e8 	.word	0x2001e2e8
 8014008:	20005fe0 	.word	0x20005fe0

0801400c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 801400c:	4b41      	ldr	r3, [pc, #260]	; (8014114 <HAL_ETH_MspInit+0x108>)
 801400e:	6802      	ldr	r2, [r0, #0]
{
 8014010:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8014012:	429a      	cmp	r2, r3
{
 8014014:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014016:	f04f 0400 	mov.w	r4, #0
 801401a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801401e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8014022:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8014024:	d001      	beq.n	801402a <HAL_ETH_MspInit+0x1e>
}
 8014026:	b00d      	add	sp, #52	; 0x34
 8014028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 801402a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801402e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8014030:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014032:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8014034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014036:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014038:	4837      	ldr	r0, [pc, #220]	; (8014118 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 801403a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801403e:	631a      	str	r2, [r3, #48]	; 0x30
 8014040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014042:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8014046:	9200      	str	r2, [sp, #0]
 8014048:	9a00      	ldr	r2, [sp, #0]
 801404a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801404c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014050:	631a      	str	r2, [r3, #48]	; 0x30
 8014052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014054:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8014058:	9201      	str	r2, [sp, #4]
 801405a:	9a01      	ldr	r2, [sp, #4]
 801405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801405e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014062:	631a      	str	r2, [r3, #48]	; 0x30
 8014064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014066:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801406a:	9202      	str	r2, [sp, #8]
 801406c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801406e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014070:	f042 0204 	orr.w	r2, r2, #4
 8014074:	631a      	str	r2, [r3, #48]	; 0x30
 8014076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014078:	f002 0204 	and.w	r2, r2, #4
 801407c:	9203      	str	r2, [sp, #12]
 801407e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014082:	f042 0201 	orr.w	r2, r2, #1
 8014086:	631a      	str	r2, [r3, #48]	; 0x30
 8014088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801408a:	f002 0201 	and.w	r2, r2, #1
 801408e:	9204      	str	r2, [sp, #16]
 8014090:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014094:	433a      	orrs	r2, r7
 8014096:	631a      	str	r2, [r3, #48]	; 0x30
 8014098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801409a:	403a      	ands	r2, r7
 801409c:	9205      	str	r2, [sp, #20]
 801409e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80140a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140a6:	631a      	str	r2, [r3, #48]	; 0x30
 80140a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80140aa:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80140ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80140b0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80140b2:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80140b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80140b8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80140ba:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80140bc:	f7f7 f984 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80140c0:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80140c2:	a907      	add	r1, sp, #28
 80140c4:	4815      	ldr	r0, [pc, #84]	; (801411c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80140c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80140c8:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80140cc:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80140d0:	f7f7 f97a 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80140d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80140d8:	a907      	add	r1, sp, #28
 80140da:	4811      	ldr	r0, [pc, #68]	; (8014120 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80140dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80140de:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80140e2:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80140e6:	f7f7 f96f 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80140ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80140ee:	a907      	add	r1, sp, #28
 80140f0:	480c      	ldr	r0, [pc, #48]	; (8014124 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80140f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80140f4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80140f6:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80140f8:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80140fc:	f7f7 f964 	bl	800b3c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8014100:	4622      	mov	r2, r4
 8014102:	2106      	movs	r1, #6
 8014104:	203d      	movs	r0, #61	; 0x3d
 8014106:	f7f4 fae1 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801410a:	203d      	movs	r0, #61	; 0x3d
 801410c:	f7f4 fb28 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8014110:	b00d      	add	sp, #52	; 0x34
 8014112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014114:	40028000 	.word	0x40028000
 8014118:	40020800 	.word	0x40020800
 801411c:	40020000 	.word	0x40020000
 8014120:	40020400 	.word	0x40020400
 8014124:	40021800 	.word	0x40021800

08014128 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8014128:	4b01      	ldr	r3, [pc, #4]	; (8014130 <HAL_ETH_RxCpltCallback+0x8>)
 801412a:	6818      	ldr	r0, [r3, #0]
 801412c:	f001 b8b6 	b.w	801529c <osSemaphoreRelease>
 8014130:	20006028 	.word	0x20006028

08014134 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8014134:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8014136:	4604      	mov	r4, r0
{
 8014138:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801413a:	2800      	cmp	r0, #0
 801413c:	f000 809e 	beq.w	801427c <ethernetif_init+0x148>
  heth.Instance = ETH;
 8014140:	4d52      	ldr	r5, [pc, #328]	; (801428c <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 8014142:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8014144:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8014148:	4b51      	ldr	r3, [pc, #324]	; (8014290 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 801414a:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 801414c:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 801414e:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 8014152:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8014156:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8014158:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 801415a:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 801415c:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8014160:	494c      	ldr	r1, [pc, #304]	; (8014294 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 8014162:	4a4d      	ldr	r2, [pc, #308]	; (8014298 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8014164:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 8014166:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8014168:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801416a:	494c      	ldr	r1, [pc, #304]	; (801429c <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 801416c:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8014170:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 8014172:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014174:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8014178:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801417c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8014180:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014184:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8014186:	4042      	eors	r2, r0
 8014188:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 801418c:	404a      	eors	r2, r1
 801418e:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8014192:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8014196:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 801419a:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 801419e:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80141a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80141a6:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80141a8:	404b      	eors	r3, r1
 80141aa:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80141ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80141b2:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 80141b6:	ab01      	add	r3, sp, #4
 80141b8:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80141ba:	f7f6 f905 	bl	800a3c8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80141be:	b928      	cbnz	r0, 80141cc <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80141c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80141c4:	f043 0304 	orr.w	r3, r3, #4
 80141c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80141cc:	2304      	movs	r3, #4
 80141ce:	4a34      	ldr	r2, [pc, #208]	; (80142a0 <ethernetif_init+0x16c>)
 80141d0:	4934      	ldr	r1, [pc, #208]	; (80142a4 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 80141d2:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80141d4:	482d      	ldr	r0, [pc, #180]	; (801428c <ethernetif_init+0x158>)
 80141d6:	f7f5 fecb 	bl	8009f70 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80141da:	2304      	movs	r3, #4
 80141dc:	4a32      	ldr	r2, [pc, #200]	; (80142a8 <ethernetif_init+0x174>)
 80141de:	4933      	ldr	r1, [pc, #204]	; (80142ac <ethernetif_init+0x178>)
 80141e0:	482a      	ldr	r0, [pc, #168]	; (801428c <ethernetif_init+0x158>)
 80141e2:	f7f5 ff0b 	bl	8009ffc <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80141e6:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80141e8:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80141ea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 80141ee:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80141f2:	4e2f      	ldr	r6, [pc, #188]	; (80142b0 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80141f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80141f8:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80141fc:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80141fe:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014200:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014204:	7858      	ldrb	r0, [r3, #1]
 8014206:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801420a:	7898      	ldrb	r0, [r3, #2]
 801420c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8014210:	78d8      	ldrb	r0, [r3, #3]
 8014212:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014216:	7918      	ldrb	r0, [r3, #4]
 8014218:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801421c:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801421e:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8014220:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8014222:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8014224:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014228:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 801422c:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8014230:	f000 ffe2 	bl	80151f8 <osSemaphoreCreate>
 8014234:	4b1f      	ldr	r3, [pc, #124]	; (80142b4 <ethernetif_init+0x180>)
 8014236:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8014238:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801423c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014240:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8014244:	4621      	mov	r1, r4
 8014246:	a805      	add	r0, sp, #20
 8014248:	f000 ff1e 	bl	8015088 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801424c:	480f      	ldr	r0, [pc, #60]	; (801428c <ethernetif_init+0x158>)
 801424e:	f7f6 fa11 	bl	800a674 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8014252:	466a      	mov	r2, sp
 8014254:	211d      	movs	r1, #29
 8014256:	480d      	ldr	r0, [pc, #52]	; (801428c <ethernetif_init+0x158>)
 8014258:	f7f6 f824 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801425c:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801425e:	211d      	movs	r1, #29
 8014260:	480a      	ldr	r0, [pc, #40]	; (801428c <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 8014262:	f042 020b 	orr.w	r2, r2, #11
 8014266:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8014268:	f7f6 f866 	bl	800a338 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801426c:	466a      	mov	r2, sp
 801426e:	211d      	movs	r1, #29
 8014270:	4806      	ldr	r0, [pc, #24]	; (801428c <ethernetif_init+0x158>)
 8014272:	f7f6 f817 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8014276:	4638      	mov	r0, r7
 8014278:	b00d      	add	sp, #52	; 0x34
 801427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801427c:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <ethernetif_init+0x184>)
 801427e:	f240 223a 	movw	r2, #570	; 0x23a
 8014282:	490e      	ldr	r1, [pc, #56]	; (80142bc <ethernetif_init+0x188>)
 8014284:	480e      	ldr	r0, [pc, #56]	; (80142c0 <ethernetif_init+0x18c>)
 8014286:	f010 fea1 	bl	8024fcc <iprintf>
 801428a:	e759      	b.n	8014140 <ethernetif_init+0xc>
 801428c:	20005fe0 	.word	0x20005fe0
 8014290:	1ff0f000 	.word	0x1ff0f000
 8014294:	0802227d 	.word	0x0802227d
 8014298:	40028000 	.word	0x40028000
 801429c:	08013e39 	.word	0x08013e39
 80142a0:	20004810 	.word	0x20004810
 80142a4:	20002fc0 	.word	0x20002fc0
 80142a8:	20003040 	.word	0x20003040
 80142ac:	20002f40 	.word	0x20002f40
 80142b0:	08029224 	.word	0x08029224
 80142b4:	20006028 	.word	0x20006028
 80142b8:	0802c654 	.word	0x0802c654
 80142bc:	0802c670 	.word	0x0802c670
 80142c0:	0802bdc0 	.word	0x0802bdc0

080142c4 <sys_now>:
 80142c4:	f7f3 bdaa 	b.w	8007e1c <HAL_GetTick>

080142c8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80142c8:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 80142ca:	2300      	movs	r3, #0
{
 80142cc:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80142ce:	4d0f      	ldr	r5, [pc, #60]	; (801430c <ethernetif_set_link+0x44>)
{
 80142d0:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80142d2:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 80142d4:	e003      	b.n	80142de <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80142d6:	b1b3      	cbz	r3, 8014306 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80142d8:	20c8      	movs	r0, #200	; 0xc8
 80142da:	f000 ff07 	bl	80150ec <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80142de:	aa01      	add	r2, sp, #4
 80142e0:	2101      	movs	r1, #1
 80142e2:	4628      	mov	r0, r5
 80142e4:	f7f5 ffde 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80142e8:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 80142ea:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80142ec:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 80142f0:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80142f4:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80142f6:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80142f8:	d4ed      	bmi.n	80142d6 <ethernetif_set_link+0xe>
 80142fa:	b113      	cbz	r3, 8014302 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 80142fc:	f006 fa5e 	bl	801a7bc <netif_set_link_up>
 8014300:	e7ea      	b.n	80142d8 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8014302:	0753      	lsls	r3, r2, #29
 8014304:	d5e8      	bpl.n	80142d8 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8014306:	f006 fa7f 	bl	801a808 <netif_set_link_down>
 801430a:	e7e5      	b.n	80142d8 <ethernetif_set_link+0x10>
 801430c:	20005fe0 	.word	0x20005fe0

08014310 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop

08014314 <ethernetif_update_config>:
{
 8014314:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8014316:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 801431a:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 801431c:	2100      	movs	r1, #0
{
 801431e:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8014320:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8014322:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8014324:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8014326:	d538      	bpl.n	801439a <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8014328:	4c32      	ldr	r4, [pc, #200]	; (80143f4 <ethernetif_update_config+0xe0>)
 801432a:	6863      	ldr	r3, [r4, #4]
 801432c:	b9e3      	cbnz	r3, 8014368 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801432e:	68a3      	ldr	r3, [r4, #8]
 8014330:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8014334:	d140      	bne.n	80143b8 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8014336:	68e2      	ldr	r2, [r4, #12]
 8014338:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 801433c:	d135      	bne.n	80143aa <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801433e:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8014340:	08d2      	lsrs	r2, r2, #3
 8014342:	2100      	movs	r1, #0
 8014344:	482b      	ldr	r0, [pc, #172]	; (80143f4 <ethernetif_update_config+0xe0>)
 8014346:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 801434a:	b292      	uxth	r2, r2
 801434c:	f7f5 fff4 	bl	800a338 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8014350:	2100      	movs	r1, #0
 8014352:	4828      	ldr	r0, [pc, #160]	; (80143f4 <ethernetif_update_config+0xe0>)
 8014354:	f7f6 fa28 	bl	800a7a8 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8014358:	4826      	ldr	r0, [pc, #152]	; (80143f4 <ethernetif_update_config+0xe0>)
 801435a:	f7f6 f98b 	bl	800a674 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 801435e:	4628      	mov	r0, r5
 8014360:	f7ff ffd6 	bl	8014310 <ethernetif_notify_conn_changed>
}
 8014364:	b003      	add	sp, #12
 8014366:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8014368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801436c:	4620      	mov	r0, r4
 801436e:	f7f5 ffe3 	bl	800a338 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8014372:	f7f3 fd53 	bl	8007e1c <HAL_GetTick>
 8014376:	9000      	str	r0, [sp, #0]
 8014378:	e002      	b.n	8014380 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801437a:	9b01      	ldr	r3, [sp, #4]
 801437c:	069a      	lsls	r2, r3, #26
 801437e:	d425      	bmi.n	80143cc <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8014380:	aa01      	add	r2, sp, #4
 8014382:	2101      	movs	r1, #1
 8014384:	4620      	mov	r0, r4
 8014386:	f7f5 ff8d 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 801438a:	f7f3 fd47 	bl	8007e1c <HAL_GetTick>
 801438e:	9b00      	ldr	r3, [sp, #0]
 8014390:	1ac3      	subs	r3, r0, r3
 8014392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014396:	d9f0      	bls.n	801437a <ethernetif_update_config+0x66>
 8014398:	e7c9      	b.n	801432e <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 801439a:	4816      	ldr	r0, [pc, #88]	; (80143f4 <ethernetif_update_config+0xe0>)
 801439c:	f7f6 f9b6 	bl	800a70c <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80143a0:	4628      	mov	r0, r5
 80143a2:	f7ff ffb5 	bl	8014310 <ethernetif_notify_conn_changed>
}
 80143a6:	b003      	add	sp, #12
 80143a8:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80143aa:	f240 21e3 	movw	r1, #739	; 0x2e3
 80143ae:	4812      	ldr	r0, [pc, #72]	; (80143f8 <ethernetif_update_config+0xe4>)
 80143b0:	f7ef ff60 	bl	8004274 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80143b4:	68e2      	ldr	r2, [r4, #12]
 80143b6:	e7c2      	b.n	801433e <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80143b8:	f240 21e2 	movw	r1, #738	; 0x2e2
 80143bc:	480e      	ldr	r0, [pc, #56]	; (80143f8 <ethernetif_update_config+0xe4>)
 80143be:	f7ef ff59 	bl	8004274 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80143c2:	68e2      	ldr	r2, [r4, #12]
 80143c4:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80143c8:	d0b9      	beq.n	801433e <ethernetif_update_config+0x2a>
 80143ca:	e7ee      	b.n	80143aa <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80143cc:	aa01      	add	r2, sp, #4
 80143ce:	2110      	movs	r1, #16
 80143d0:	4808      	ldr	r0, [pc, #32]	; (80143f4 <ethernetif_update_config+0xe0>)
 80143d2:	f7f5 ff67 	bl	800a2a4 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80143d6:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80143d8:	f013 0204 	ands.w	r2, r3, #4
 80143dc:	bf18      	it	ne
 80143de:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80143e2:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 80143e4:	bf4c      	ite	mi
 80143e6:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 80143e8:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 80143ec:	60e2      	str	r2, [r4, #12]
 80143ee:	60a3      	str	r3, [r4, #8]
 80143f0:	e7ae      	b.n	8014350 <ethernetif_update_config+0x3c>
 80143f2:	bf00      	nop
 80143f4:	20005fe0 	.word	0x20005fe0
 80143f8:	0802c654 	.word	0x0802c654

080143fc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80143fc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014400:	b183      	cbz	r3, 8014424 <USBD_CDC_EP0_RxReady+0x28>
{
 8014402:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014404:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014408:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 801440c:	28ff      	cmp	r0, #255	; 0xff
 801440e:	d007      	beq.n	8014420 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014410:	689b      	ldr	r3, [r3, #8]
 8014412:	4621      	mov	r1, r4
 8014414:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8014418:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 801441a:	23ff      	movs	r3, #255	; 0xff
 801441c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8014420:	2000      	movs	r0, #0
 8014422:	bd10      	pop	{r4, pc}
 8014424:	2000      	movs	r0, #0
 8014426:	4770      	bx	lr

08014428 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014428:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801442a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 801442c:	4801      	ldr	r0, [pc, #4]	; (8014434 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801442e:	801a      	strh	r2, [r3, #0]
}
 8014430:	4770      	bx	lr
 8014432:	bf00      	nop
 8014434:	20000334 	.word	0x20000334

08014438 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014438:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801443a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 801443c:	4801      	ldr	r0, [pc, #4]	; (8014444 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801443e:	801a      	strh	r2, [r3, #0]
}
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	20000378 	.word	0x20000378

08014448 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014448:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801444a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 801444c:	4801      	ldr	r0, [pc, #4]	; (8014454 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801444e:	801a      	strh	r2, [r3, #0]
}
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop
 8014454:	200003c8 	.word	0x200003c8

08014458 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014458:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801445a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 801445c:	4801      	ldr	r0, [pc, #4]	; (8014464 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801445e:	801a      	strh	r2, [r3, #0]
}
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	200003bc 	.word	0x200003bc

08014468 <USBD_CDC_DataOut>:
{
 8014468:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801446a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 801446e:	b17d      	cbz	r5, 8014490 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014470:	4604      	mov	r4, r0
 8014472:	f00f fb53 	bl	8023b1c <USBD_LL_GetRxDataSize>
 8014476:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014478:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 801447c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8014480:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8014484:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014486:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801448a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 801448c:	2000      	movs	r0, #0
}
 801448e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8014490:	2003      	movs	r0, #3
}
 8014492:	bd38      	pop	{r3, r4, r5, pc}

08014494 <USBD_CDC_DataIn>:
{
 8014494:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8014496:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 801449a:	b34d      	cbz	r5, 80144f0 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801449c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80144a0:	4686      	mov	lr, r0
 80144a2:	460a      	mov	r2, r1
 80144a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80144a8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80144ac:	b15b      	cbz	r3, 80144c6 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80144ae:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80144b2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80144b6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80144ba:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80144bc:	fbb3 f6f4 	udiv	r6, r3, r4
 80144c0:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80144c4:	b164      	cbz	r4, 80144e0 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80144c6:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80144ca:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80144cc:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80144d0:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80144d4:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80144d6:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80144da:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80144dc:	4620      	mov	r0, r4
}
 80144de:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80144e0:	4623      	mov	r3, r4
 80144e2:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 80144e4:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80144e8:	f00f fafc 	bl	8023ae4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80144ec:	4620      	mov	r0, r4
}
 80144ee:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 80144f0:	2003      	movs	r0, #3
}
 80144f2:	bd70      	pop	{r4, r5, r6, pc}

080144f4 <USBD_CDC_Setup>:
{
 80144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144f6:	f891 c000 	ldrb.w	ip, [r1]
{
 80144fa:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 80144fc:	2300      	movs	r3, #0
{
 80144fe:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014500:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8014504:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014506:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 801450a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 801450e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014512:	d01c      	beq.n	801454e <USBD_CDC_Setup+0x5a>
 8014514:	2e20      	cmp	r6, #32
 8014516:	d112      	bne.n	801453e <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8014518:	88ca      	ldrh	r2, [r1, #6]
 801451a:	2a00      	cmp	r2, #0
 801451c:	d036      	beq.n	801458c <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 801451e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8014522:	d055      	beq.n	80145d0 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8014524:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014526:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801452a:	4639      	mov	r1, r7
 801452c:	7860      	ldrb	r0, [r4, #1]
 801452e:	689b      	ldr	r3, [r3, #8]
 8014530:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014532:	88e2      	ldrh	r2, [r4, #6]
 8014534:	4639      	mov	r1, r7
 8014536:	4628      	mov	r0, r5
 8014538:	f000 fd2c 	bl	8014f94 <USBD_CtlSendData>
 801453c:	e004      	b.n	8014548 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 801453e:	4621      	mov	r1, r4
 8014540:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8014542:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8014544:	f000 fcf0 	bl	8014f28 <USBD_CtlError>
}
 8014548:	4630      	mov	r0, r6
 801454a:	b003      	add	sp, #12
 801454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 801454e:	784b      	ldrb	r3, [r1, #1]
 8014550:	2b0b      	cmp	r3, #11
 8014552:	d8f4      	bhi.n	801453e <USBD_CDC_Setup+0x4a>
 8014554:	a201      	add	r2, pc, #4	; (adr r2, 801455c <USBD_CDC_Setup+0x68>)
 8014556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801455a:	bf00      	nop
 801455c:	0801459f 	.word	0x0801459f
 8014560:	08014549 	.word	0x08014549
 8014564:	0801453f 	.word	0x0801453f
 8014568:	0801453f 	.word	0x0801453f
 801456c:	0801453f 	.word	0x0801453f
 8014570:	0801453f 	.word	0x0801453f
 8014574:	0801453f 	.word	0x0801453f
 8014578:	0801453f 	.word	0x0801453f
 801457c:	0801453f 	.word	0x0801453f
 8014580:	0801453f 	.word	0x0801453f
 8014584:	080145bd 	.word	0x080145bd
 8014588:	080145b3 	.word	0x080145b3
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801458c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8014590:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014592:	7848      	ldrb	r0, [r1, #1]
 8014594:	689b      	ldr	r3, [r3, #8]
 8014596:	4798      	blx	r3
}
 8014598:	4630      	mov	r0, r6
 801459a:	b003      	add	sp, #12
 801459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801459e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80145a2:	2a03      	cmp	r2, #3
 80145a4:	d01e      	beq.n	80145e4 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 80145a6:	4621      	mov	r1, r4
 80145a8:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80145aa:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80145ac:	f000 fcbc 	bl	8014f28 <USBD_CtlError>
        ret = USBD_FAIL;
 80145b0:	e7ca      	b.n	8014548 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80145b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80145b6:	2b03      	cmp	r3, #3
 80145b8:	d0c6      	beq.n	8014548 <USBD_CDC_Setup+0x54>
 80145ba:	e7f4      	b.n	80145a6 <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80145c0:	2b03      	cmp	r3, #3
 80145c2:	d1f0      	bne.n	80145a6 <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80145c4:	2201      	movs	r2, #1
 80145c6:	f10d 0105 	add.w	r1, sp, #5
 80145ca:	f000 fce3 	bl	8014f94 <USBD_CtlSendData>
 80145ce:	e7bb      	b.n	8014548 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80145d0:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 80145d2:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 80145d4:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 80145d8:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80145dc:	4639      	mov	r1, r7
 80145de:	f000 fcf1 	bl	8014fc4 <USBD_CtlPrepareRx>
 80145e2:	e7b1      	b.n	8014548 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145e4:	2202      	movs	r2, #2
 80145e6:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 80145ea:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145ec:	f000 fcd2 	bl	8014f94 <USBD_CtlSendData>
 80145f0:	e7aa      	b.n	8014548 <USBD_CDC_Setup+0x54>
 80145f2:	bf00      	nop

080145f4 <USBD_CDC_DeInit>:
{
 80145f4:	b538      	push	{r3, r4, r5, lr}
 80145f6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80145f8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80145fa:	2181      	movs	r1, #129	; 0x81
 80145fc:	f00f fa26 	bl	8023a4c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014600:	2101      	movs	r1, #1
 8014602:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014604:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014606:	f00f fa21 	bl	8023a4c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801460a:	2182      	movs	r1, #130	; 0x82
 801460c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801460e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014612:	f00f fa1b 	bl	8023a4c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8014616:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801461a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 801461c:	b14b      	cbz	r3, 8014632 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801461e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014626:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 801462a:	f00f fcf3 	bl	8024014 <free>
    pdev->pClassData = NULL;
 801462e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8014632:	2000      	movs	r0, #0
 8014634:	bd38      	pop	{r3, r4, r5, pc}
 8014636:	bf00      	nop

08014638 <USBD_CDC_Init>:
{
 8014638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801463e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014642:	f00f fcdf 	bl	8024004 <malloc>
  if (hcdc == NULL)
 8014646:	4605      	mov	r5, r0
 8014648:	2800      	cmp	r0, #0
 801464a:	d04c      	beq.n	80146e6 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801464c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 801464e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014652:	b393      	cbz	r3, 80146ba <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014654:	2340      	movs	r3, #64	; 0x40
 8014656:	2202      	movs	r2, #2
 8014658:	2181      	movs	r1, #129	; 0x81
 801465a:	4620      	mov	r0, r4
 801465c:	f00f f9e4 	bl	8023a28 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014660:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014662:	2340      	movs	r3, #64	; 0x40
 8014664:	4631      	mov	r1, r6
 8014666:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014668:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801466a:	4620      	mov	r0, r4
 801466c:	f00f f9dc 	bl	8023a28 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014670:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014672:	2203      	movs	r2, #3
 8014674:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014676:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801467a:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801467c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014680:	2308      	movs	r3, #8
 8014682:	f00f f9d1 	bl	8023a28 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014686:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801468a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 801468e:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014690:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014698:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 801469a:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 801469e:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146a2:	b9ae      	cbnz	r6, 80146d0 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80146a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146a8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80146ac:	4641      	mov	r1, r8
 80146ae:	4620      	mov	r0, r4
 80146b0:	f00f fa26 	bl	8023b00 <USBD_LL_PrepareReceive>
}
 80146b4:	4630      	mov	r0, r6
 80146b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80146ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146be:	2202      	movs	r2, #2
 80146c0:	2181      	movs	r1, #129	; 0x81
 80146c2:	4620      	mov	r0, r4
 80146c4:	f00f f9b0 	bl	8023a28 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80146c8:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80146ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146ce:	e7c9      	b.n	8014664 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 80146d0:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80146d2:	2340      	movs	r3, #64	; 0x40
 80146d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80146d8:	4641      	mov	r1, r8
 80146da:	4620      	mov	r0, r4
 80146dc:	f00f fa10 	bl	8023b00 <USBD_LL_PrepareReceive>
}
 80146e0:	4630      	mov	r0, r6
 80146e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 80146e6:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 80146e8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80146ec:	e7e2      	b.n	80146b4 <USBD_CDC_Init+0x7c>
 80146ee:	bf00      	nop

080146f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80146f0:	4603      	mov	r3, r0
  if (fops == NULL)
 80146f2:	b119      	cbz	r1, 80146fc <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 80146f4:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 80146f6:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 80146fa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80146fc:	2003      	movs	r0, #3
}
 80146fe:	4770      	bx	lr

08014700 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014700:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8014702:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8014708:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801470c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop

08014714 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014714:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8014716:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8014718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801471c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop

08014724 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014724:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8014728:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 801472a:	b19a      	cbz	r2, 8014754 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801472c:	7c04      	ldrb	r4, [r0, #16]
 801472e:	b144      	cbz	r4, 8014742 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014730:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014732:	2340      	movs	r3, #64	; 0x40
 8014734:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014738:	2101      	movs	r1, #1
 801473a:	f00f f9e1 	bl	8023b00 <USBD_LL_PrepareReceive>
}
 801473e:	4620      	mov	r0, r4
 8014740:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014746:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 801474a:	2101      	movs	r1, #1
 801474c:	f00f f9d8 	bl	8023b00 <USBD_LL_PrepareReceive>
}
 8014750:	4620      	mov	r0, r4
 8014752:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8014754:	2403      	movs	r4, #3
}
 8014756:	4620      	mov	r0, r4
 8014758:	bd10      	pop	{r4, pc}
 801475a:	bf00      	nop

0801475c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801475c:	b1a0      	cbz	r0, 8014788 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801475e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014762:	b113      	cbz	r3, 801476a <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8014764:	2300      	movs	r3, #0
 8014766:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801476a:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 801476e:	b113      	cbz	r3, 8014776 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8014770:	2300      	movs	r3, #0
 8014772:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014776:	b109      	cbz	r1, 801477c <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8014778:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801477c:	2301      	movs	r3, #1
  pdev->id = id;
 801477e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014780:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014784:	f00f b910 	b.w	80239a8 <USBD_LL_Init>

  return ret;
}
 8014788:	2003      	movs	r0, #3
 801478a:	4770      	bx	lr

0801478c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801478c:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 801478e:	2400      	movs	r4, #0
{
 8014790:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8014792:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8014796:	b159      	cbz	r1, 80147b0 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014798:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801479a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801479c:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 80147a0:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80147a4:	4798      	blx	r3
 80147a6:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80147aa:	4620      	mov	r0, r4
 80147ac:	b003      	add	sp, #12
 80147ae:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80147b0:	2403      	movs	r4, #3
}
 80147b2:	4620      	mov	r0, r4
 80147b4:	b003      	add	sp, #12
 80147b6:	bd30      	pop	{r4, r5, pc}

080147b8 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80147b8:	f00f b928 	b.w	8023a0c <USBD_LL_Start>

080147bc <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80147bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80147c0:	b10b      	cbz	r3, 80147c6 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4718      	bx	r3
  }

  return ret;
}
 80147c6:	2003      	movs	r0, #3
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop

080147cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147cc:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80147ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80147d2:	b10b      	cbz	r3, 80147d8 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80147d8:	2000      	movs	r0, #0
 80147da:	bd08      	pop	{r3, pc}

080147dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80147dc:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80147de:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 80147e2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80147e4:	4628      	mov	r0, r5
 80147e6:	f000 fb93 	bl	8014f10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80147ea:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 80147ec:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 80147f0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 80147f4:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80147f8:	f001 031f 	and.w	r3, r1, #31
 80147fc:	4293      	cmp	r3, r2
 80147fe:	d009      	beq.n	8014814 <USBD_LL_SetupStage+0x38>
 8014800:	2b02      	cmp	r3, #2
 8014802:	d013      	beq.n	801482c <USBD_LL_SetupStage+0x50>
 8014804:	b163      	cbz	r3, 8014820 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014806:	4620      	mov	r0, r4
 8014808:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 801480c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014810:	f00f b92a 	b.w	8023a68 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014814:	4629      	mov	r1, r5
 8014816:	4620      	mov	r0, r4
}
 8014818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801481c:	f000 ba9e 	b.w	8014d5c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014820:	4629      	mov	r1, r5
 8014822:	4620      	mov	r0, r4
}
 8014824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014828:	f000 b8fa 	b.w	8014a20 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801482c:	4629      	mov	r1, r5
 801482e:	4620      	mov	r0, r4
}
 8014830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014834:	f000 baca 	b.w	8014dcc <USBD_StdEPReq>

08014838 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014838:	b570      	push	{r4, r5, r6, lr}
 801483a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801483c:	b939      	cbnz	r1, 801484e <USBD_LL_DataOutStage+0x16>
 801483e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014840:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8014844:	460c      	mov	r4, r1
 8014846:	2a03      	cmp	r2, #3
 8014848:	d00e      	beq.n	8014868 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 801484a:	2000      	movs	r0, #0
}
 801484c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 801484e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014852:	699b      	ldr	r3, [r3, #24]
 8014854:	b133      	cbz	r3, 8014864 <USBD_LL_DataOutStage+0x2c>
 8014856:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801485a:	2a03      	cmp	r2, #3
 801485c:	d102      	bne.n	8014864 <USBD_LL_DataOutStage+0x2c>
}
 801485e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014862:	4718      	bx	r3
    return USBD_FAIL;
 8014864:	2003      	movs	r0, #3
}
 8014866:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014868:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 801486c:	4291      	cmp	r1, r2
 801486e:	d80d      	bhi.n	801488c <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014870:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014874:	691b      	ldr	r3, [r3, #16]
 8014876:	b123      	cbz	r3, 8014882 <USBD_LL_DataOutStage+0x4a>
 8014878:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801487c:	2a03      	cmp	r2, #3
 801487e:	d100      	bne.n	8014882 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8014880:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8014882:	4628      	mov	r0, r5
 8014884:	f000 fbb6 	bl	8014ff4 <USBD_CtlSendStatus>
  return USBD_OK;
 8014888:	2000      	movs	r0, #0
 801488a:	e7df      	b.n	801484c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 801488c:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801488e:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8014890:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014894:	bf28      	it	cs
 8014896:	460a      	movcs	r2, r1
 8014898:	4619      	mov	r1, r3
 801489a:	f000 fba1 	bl	8014fe0 <USBD_CtlContinueRx>
  return USBD_OK;
 801489e:	4620      	mov	r0, r4
}
 80148a0:	bd70      	pop	{r4, r5, r6, pc}
 80148a2:	bf00      	nop

080148a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80148a4:	b570      	push	{r4, r5, r6, lr}
 80148a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80148a8:	b949      	cbnz	r1, 80148be <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80148aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80148ae:	2b02      	cmp	r3, #2
 80148b0:	d012      	beq.n	80148d8 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80148b2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d027      	beq.n	801490a <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80148ba:	2000      	movs	r0, #0
}
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80148be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80148c2:	695b      	ldr	r3, [r3, #20]
 80148c4:	b133      	cbz	r3, 80148d4 <USBD_LL_DataInStage+0x30>
 80148c6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80148ca:	2a03      	cmp	r2, #3
 80148cc:	d102      	bne.n	80148d4 <USBD_LL_DataInStage+0x30>
}
 80148ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80148d2:	4718      	bx	r3
    return USBD_FAIL;
 80148d4:	2003      	movs	r0, #3
}
 80148d6:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80148d8:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 80148dc:	460d      	mov	r5, r1
 80148de:	42b3      	cmp	r3, r6
 80148e0:	d818      	bhi.n	8014914 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 80148e2:	d027      	beq.n	8014934 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80148e4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	b11b      	cbz	r3, 80148f4 <USBD_LL_DataInStage+0x50>
 80148ec:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80148f0:	2a03      	cmp	r2, #3
 80148f2:	d01c      	beq.n	801492e <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80148f4:	2180      	movs	r1, #128	; 0x80
 80148f6:	4620      	mov	r0, r4
 80148f8:	f00f f8b6 	bl	8023a68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80148fc:	4620      	mov	r0, r4
 80148fe:	f000 fb85 	bl	801500c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8014902:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014906:	2b01      	cmp	r3, #1
 8014908:	d1d7      	bne.n	80148ba <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 801490a:	2300      	movs	r3, #0
  return USBD_OK;
 801490c:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 801490e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8014912:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8014914:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014916:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8014918:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801491a:	461a      	mov	r2, r3
 801491c:	f000 fb48 	bl	8014fb0 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014920:	462b      	mov	r3, r5
 8014922:	462a      	mov	r2, r5
 8014924:	4629      	mov	r1, r5
 8014926:	4620      	mov	r0, r4
 8014928:	f00f f8ea 	bl	8023b00 <USBD_LL_PrepareReceive>
 801492c:	e7c1      	b.n	80148b2 <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 801492e:	4620      	mov	r0, r4
 8014930:	4798      	blx	r3
 8014932:	e7df      	b.n	80148f4 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8014934:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8014936:	4293      	cmp	r3, r2
 8014938:	d8d4      	bhi.n	80148e4 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 801493a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801493e:	429a      	cmp	r2, r3
 8014940:	d2d0      	bcs.n	80148e4 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014942:	460a      	mov	r2, r1
 8014944:	f000 fb34 	bl	8014fb0 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014948:	462b      	mov	r3, r5
 801494a:	462a      	mov	r2, r5
 801494c:	4629      	mov	r1, r5
 801494e:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8014950:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014954:	f00f f8d4 	bl	8023b00 <USBD_LL_PrepareReceive>
 8014958:	e7ab      	b.n	80148b2 <USBD_LL_DataInStage+0xe>
 801495a:	bf00      	nop

0801495c <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 801495c:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801495e:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8014960:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8014964:	b570      	push	{r4, r5, r6, lr}
 8014966:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014968:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801496c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8014970:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8014972:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8014976:	b11b      	cbz	r3, 8014980 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014978:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801497c:	685b      	ldr	r3, [r3, #4]
 801497e:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014980:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014982:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014984:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014986:	4620      	mov	r0, r4
 8014988:	462b      	mov	r3, r5
 801498a:	4611      	mov	r1, r2
 801498c:	f00f f84c 	bl	8023a28 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014990:	462b      	mov	r3, r5
 8014992:	2200      	movs	r2, #0
 8014994:	2180      	movs	r1, #128	; 0x80
 8014996:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014998:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801499c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80149a0:	f00f f842 	bl	8023a28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80149a4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80149a6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80149a8:	6225      	str	r5, [r4, #32]
}
 80149aa:	bd70      	pop	{r4, r5, r6, pc}

080149ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80149ac:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80149ae:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80149b0:	7419      	strb	r1, [r3, #16]
}
 80149b2:	4770      	bx	lr

080149b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80149b4:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80149b6:	2104      	movs	r1, #4

  return USBD_OK;
}
 80149b8:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80149ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80149be:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80149c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80149c6:	4770      	bx	lr

080149c8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80149c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80149cc:	2b04      	cmp	r3, #4
 80149ce:	d103      	bne.n	80149d8 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80149d0:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80149d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80149d8:	2000      	movs	r0, #0
 80149da:	4770      	bx	lr

080149dc <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80149e0:	2a03      	cmp	r2, #3
 80149e2:	d001      	beq.n	80149e8 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80149e4:	2000      	movs	r0, #0
 80149e6:	4770      	bx	lr
{
 80149e8:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80149ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80149ee:	69db      	ldr	r3, [r3, #28]
 80149f0:	b103      	cbz	r3, 80149f4 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80149f2:	4798      	blx	r3
}
 80149f4:	2000      	movs	r0, #0
 80149f6:	bd08      	pop	{r3, pc}

080149f8 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80149f8:	2000      	movs	r0, #0
 80149fa:	4770      	bx	lr

080149fc <USBD_LL_IsoOUTIncomplete>:
 80149fc:	2000      	movs	r0, #0
 80149fe:	4770      	bx	lr

08014a00 <USBD_LL_DevConnected>:
 8014a00:	2000      	movs	r0, #0
 8014a02:	4770      	bx	lr

08014a04 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a04:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8014a06:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a0a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8014a0e:	b12a      	cbz	r2, 8014a1c <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014a10:	6852      	ldr	r2, [r2, #4]
 8014a12:	7901      	ldrb	r1, [r0, #4]
{
 8014a14:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014a16:	4790      	blx	r2
  }

  return USBD_OK;
}
 8014a18:	2000      	movs	r0, #0
 8014a1a:	bd08      	pop	{r3, pc}
 8014a1c:	2000      	movs	r0, #0
 8014a1e:	4770      	bx	lr

08014a20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a20:	b570      	push	{r4, r5, r6, lr}
 8014a22:	780c      	ldrb	r4, [r1, #0]
 8014a24:	b082      	sub	sp, #8
 8014a26:	460e      	mov	r6, r1
 8014a28:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a2a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8014a2e:	2c20      	cmp	r4, #32
 8014a30:	d00e      	beq.n	8014a50 <USBD_StdDevReq+0x30>
 8014a32:	2c40      	cmp	r4, #64	; 0x40
 8014a34:	d00c      	beq.n	8014a50 <USBD_StdDevReq+0x30>
 8014a36:	b1a4      	cbz	r4, 8014a62 <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a38:	2180      	movs	r1, #128	; 0x80
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	f00f f814 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a40:	2100      	movs	r1, #0
 8014a42:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014a44:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a46:	f00f f80f 	bl	8023a68 <USBD_LL_StallEP>
}
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	b002      	add	sp, #8
 8014a4e:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a50:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8014a54:	4631      	mov	r1, r6
 8014a56:	4628      	mov	r0, r5
 8014a58:	689b      	ldr	r3, [r3, #8]
}
 8014a5a:	b002      	add	sp, #8
 8014a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a60:	4718      	bx	r3
    switch (req->bRequest)
 8014a62:	784b      	ldrb	r3, [r1, #1]
 8014a64:	2b09      	cmp	r3, #9
 8014a66:	d8e7      	bhi.n	8014a38 <USBD_StdDevReq+0x18>
 8014a68:	a201      	add	r2, pc, #4	; (adr r2, 8014a70 <USBD_StdDevReq+0x50>)
 8014a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a6e:	bf00      	nop
 8014a70:	08014acf 	.word	0x08014acf
 8014a74:	08014afd 	.word	0x08014afd
 8014a78:	08014a39 	.word	0x08014a39
 8014a7c:	08014b1b 	.word	0x08014b1b
 8014a80:	08014a39 	.word	0x08014a39
 8014a84:	08014b23 	.word	0x08014b23
 8014a88:	08014b5b 	.word	0x08014b5b
 8014a8c:	08014a39 	.word	0x08014a39
 8014a90:	08014b7f 	.word	0x08014b7f
 8014a94:	08014a99 	.word	0x08014a99
  cfgidx = (uint8_t)(req->wValue);
 8014a98:	7889      	ldrb	r1, [r1, #2]
 8014a9a:	4eaa      	ldr	r6, [pc, #680]	; (8014d44 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014a9c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8014a9e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014aa0:	f200 8146 	bhi.w	8014d30 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8014aa4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014aa8:	2b02      	cmp	r3, #2
 8014aaa:	f000 8130 	beq.w	8014d0e <USBD_StdDevReq+0x2ee>
 8014aae:	2b03      	cmp	r3, #3
 8014ab0:	f000 810c 	beq.w	8014ccc <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ab4:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8014ab6:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ab8:	f00e ffd6 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014abc:	2100      	movs	r1, #0
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f00e ffd2 	bl	8023a68 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ac4:	7831      	ldrb	r1, [r6, #0]
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	f7ff fe80 	bl	80147cc <USBD_ClrClassConfig>
    break;
 8014acc:	e7bd      	b.n	8014a4a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014ace:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014ad2:	3a01      	subs	r2, #1
 8014ad4:	2a02      	cmp	r2, #2
 8014ad6:	d868      	bhi.n	8014baa <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8014ad8:	88ca      	ldrh	r2, [r1, #6]
 8014ada:	2a02      	cmp	r2, #2
 8014adc:	d165      	bne.n	8014baa <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ade:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8014ae0:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ae4:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8014ae6:	b10a      	cbz	r2, 8014aec <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ae8:	2203      	movs	r2, #3
 8014aea:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014aec:	2202      	movs	r2, #2
 8014aee:	f105 010c 	add.w	r1, r5, #12
 8014af2:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014af4:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014af6:	f000 fa4d 	bl	8014f94 <USBD_CtlSendData>
    break;
 8014afa:	e7a6      	b.n	8014a4a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014afc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014b00:	3b01      	subs	r3, #1
 8014b02:	2b02      	cmp	r3, #2
 8014b04:	d851      	bhi.n	8014baa <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b06:	884b      	ldrh	r3, [r1, #2]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d19e      	bne.n	8014a4a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8014b0c:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8014b0e:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8014b10:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b14:	f000 fa6e 	bl	8014ff4 <USBD_CtlSendStatus>
 8014b18:	e797      	b.n	8014a4a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b1a:	884b      	ldrh	r3, [r1, #2]
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d194      	bne.n	8014a4a <USBD_StdDevReq+0x2a>
 8014b20:	e7f5      	b.n	8014b0e <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014b22:	888b      	ldrh	r3, [r1, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d140      	bne.n	8014baa <USBD_StdDevReq+0x18a>
 8014b28:	88cb      	ldrh	r3, [r1, #6]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d13d      	bne.n	8014baa <USBD_StdDevReq+0x18a>
 8014b2e:	884e      	ldrh	r6, [r1, #2]
 8014b30:	2e7f      	cmp	r6, #127	; 0x7f
 8014b32:	d83a      	bhi.n	8014baa <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014b38:	2b03      	cmp	r3, #3
 8014b3a:	d036      	beq.n	8014baa <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014b3c:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8014b3e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014b42:	f00e ffc1 	bl	8023ac8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014b46:	4628      	mov	r0, r5
 8014b48:	f000 fa54 	bl	8014ff4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8014b4c:	2e00      	cmp	r6, #0
 8014b4e:	f040 80da 	bne.w	8014d06 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014b52:	2301      	movs	r3, #1
 8014b54:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014b58:	e777      	b.n	8014a4a <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8014b5a:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8014b5c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8014b5e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8014b62:	0a13      	lsrs	r3, r2, #8
 8014b64:	3b01      	subs	r3, #1
 8014b66:	2b0e      	cmp	r3, #14
 8014b68:	d81f      	bhi.n	8014baa <USBD_StdDevReq+0x18a>
 8014b6a:	e8df f003 	tbb	[pc, r3]
 8014b6e:	6b77      	.short	0x6b77
 8014b70:	4f1e1e59 	.word	0x4f1e1e59
 8014b74:	1e1e1e43 	.word	0x1e1e1e43
 8014b78:	1e1e1e1e 	.word	0x1e1e1e1e
 8014b7c:	29          	.byte	0x29
 8014b7d:	00          	.byte	0x00
  if (req->wLength != 1U)
 8014b7e:	88ca      	ldrh	r2, [r1, #6]
 8014b80:	2a01      	cmp	r2, #1
 8014b82:	d112      	bne.n	8014baa <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8014b84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014b88:	2b02      	cmp	r3, #2
 8014b8a:	f200 8098 	bhi.w	8014cbe <USBD_StdDevReq+0x29e>
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	f43f af52 	beq.w	8014a38 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8014b94:	4601      	mov	r1, r0
 8014b96:	2300      	movs	r3, #0
 8014b98:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b9c:	f000 f9fa 	bl	8014f94 <USBD_CtlSendData>
      break;
 8014ba0:	e753      	b.n	8014a4a <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ba2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ba6:	699b      	ldr	r3, [r3, #24]
 8014ba8:	b97b      	cbnz	r3, 8014bca <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014baa:	2180      	movs	r1, #128	; 0x80
 8014bac:	4628      	mov	r0, r5
 8014bae:	f00e ff5b 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	f00e ff57 	bl	8023a68 <USBD_LL_StallEP>
}
 8014bba:	4620      	mov	r0, r4
 8014bbc:	b002      	add	sp, #8
 8014bbe:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014bc0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014bc4:	69db      	ldr	r3, [r3, #28]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d0ef      	beq.n	8014baa <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014bca:	f10d 0106 	add.w	r1, sp, #6
 8014bce:	7c28      	ldrb	r0, [r5, #16]
 8014bd0:	4798      	blx	r3
    if (req->wLength != 0U)
 8014bd2:	88f2      	ldrh	r2, [r6, #6]
 8014bd4:	2a00      	cmp	r2, #0
 8014bd6:	d06e      	beq.n	8014cb6 <USBD_StdDevReq+0x296>
      if (len != 0U)
 8014bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d0e4      	beq.n	8014baa <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8014be0:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014be2:	4601      	mov	r1, r0
 8014be4:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8014be6:	bf28      	it	cs
 8014be8:	461a      	movcs	r2, r3
 8014bea:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014bee:	f000 f9d1 	bl	8014f94 <USBD_CtlSendData>
 8014bf2:	e72a      	b.n	8014a4a <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bf4:	7c03      	ldrb	r3, [r0, #16]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d1d7      	bne.n	8014baa <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014bfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014bfe:	f10d 0006 	add.w	r0, sp, #6
 8014c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c04:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014c06:	2307      	movs	r3, #7
 8014c08:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014c0a:	e7e2      	b.n	8014bd2 <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c0c:	7c03      	ldrb	r3, [r0, #16]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1cb      	bne.n	8014baa <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014c12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014c16:	f10d 0006 	add.w	r0, sp, #6
 8014c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c1c:	4798      	blx	r3
  if (err != 0U)
 8014c1e:	e7d8      	b.n	8014bd2 <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8014c20:	b2d2      	uxtb	r2, r2
 8014c22:	2a05      	cmp	r2, #5
 8014c24:	d8c1      	bhi.n	8014baa <USBD_StdDevReq+0x18a>
 8014c26:	a301      	add	r3, pc, #4	; (adr r3, 8014c2c <USBD_StdDevReq+0x20c>)
 8014c28:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014c2c:	08014c9d 	.word	0x08014c9d
 8014c30:	08014c91 	.word	0x08014c91
 8014c34:	08014c85 	.word	0x08014c85
 8014c38:	08014c79 	.word	0x08014c79
 8014c3c:	08014c6d 	.word	0x08014c6d
 8014c40:	08014ba3 	.word	0x08014ba3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c44:	7c03      	ldrb	r3, [r0, #16]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d17e      	bne.n	8014d48 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014c4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014c4e:	f10d 0006 	add.w	r0, sp, #6
 8014c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c54:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c56:	2302      	movs	r3, #2
 8014c58:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014c5a:	e7ba      	b.n	8014bd2 <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014c5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014c60:	f10d 0106 	add.w	r1, sp, #6
 8014c64:	7c00      	ldrb	r0, [r0, #16]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4798      	blx	r3
  if (err != 0U)
 8014c6a:	e7b2      	b.n	8014bd2 <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014c6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014c70:	695b      	ldr	r3, [r3, #20]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d1a9      	bne.n	8014bca <USBD_StdDevReq+0x1aa>
 8014c76:	e798      	b.n	8014baa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c78:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014c7c:	691b      	ldr	r3, [r3, #16]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d1a3      	bne.n	8014bca <USBD_StdDevReq+0x1aa>
 8014c82:	e792      	b.n	8014baa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c84:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d19d      	bne.n	8014bca <USBD_StdDevReq+0x1aa>
 8014c8e:	e78c      	b.n	8014baa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c90:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014c94:	689b      	ldr	r3, [r3, #8]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d197      	bne.n	8014bca <USBD_StdDevReq+0x1aa>
 8014c9a:	e786      	b.n	8014baa <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d191      	bne.n	8014bca <USBD_StdDevReq+0x1aa>
 8014ca6:	e780      	b.n	8014baa <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ca8:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8014caa:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cac:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014cb2:	f7ff fd8b 	bl	80147cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	f000 f99c 	bl	8014ff4 <USBD_CtlSendStatus>
 8014cbc:	e6c5      	b.n	8014a4a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8014cbe:	2b03      	cmp	r3, #3
 8014cc0:	f47f aeba 	bne.w	8014a38 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014cc4:	1d01      	adds	r1, r0, #4
 8014cc6:	f000 f965 	bl	8014f94 <USBD_CtlSendData>
      break;
 8014cca:	e6be      	b.n	8014a4a <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d0eb      	beq.n	8014ca8 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8014cd0:	6841      	ldr	r1, [r0, #4]
 8014cd2:	2901      	cmp	r1, #1
 8014cd4:	d0ef      	beq.n	8014cb6 <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014cd6:	b2c9      	uxtb	r1, r1
 8014cd8:	f7ff fd78 	bl	80147cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8014cdc:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cde:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8014ce0:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014ce2:	f7ff fd6b 	bl	80147bc <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	d0e4      	beq.n	8014cb6 <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014cec:	2180      	movs	r1, #128	; 0x80
 8014cee:	4628      	mov	r0, r5
 8014cf0:	f00e feba 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	4634      	mov	r4, r6
 8014cfa:	f00e feb5 	bl	8023a68 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014cfe:	7929      	ldrb	r1, [r5, #4]
 8014d00:	4628      	mov	r0, r5
 8014d02:	f7ff fd63 	bl	80147cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d06:	2302      	movs	r3, #2
 8014d08:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014d0c:	e69d      	b.n	8014a4a <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8014d0e:	2900      	cmp	r1, #0
 8014d10:	d0d1      	beq.n	8014cb6 <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 8014d12:	2101      	movs	r1, #1
 8014d14:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014d16:	f7ff fd51 	bl	80147bc <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	f47f af44 	bne.w	8014baa <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 8014d22:	4628      	mov	r0, r5
 8014d24:	f000 f966 	bl	8014ff4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014d28:	2303      	movs	r3, #3
 8014d2a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014d2e:	e68c      	b.n	8014a4a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d30:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8014d32:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d34:	f00e fe98 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014d38:	2100      	movs	r1, #0
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f00e fe94 	bl	8023a68 <USBD_LL_StallEP>
}
 8014d40:	e683      	b.n	8014a4a <USBD_StdDevReq+0x2a>
 8014d42:	bf00      	nop
 8014d44:	2000602c 	.word	0x2000602c
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014d48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014d4c:	f10d 0006 	add.w	r0, sp, #6
 8014d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d52:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014d54:	2302      	movs	r3, #2
 8014d56:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014d58:	e73b      	b.n	8014bd2 <USBD_StdDevReq+0x1b2>
 8014d5a:	bf00      	nop

08014d5c <USBD_StdItfReq>:
{
 8014d5c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d5e:	780b      	ldrb	r3, [r1, #0]
{
 8014d60:	460d      	mov	r5, r1
 8014d62:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d64:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014d68:	2a40      	cmp	r2, #64	; 0x40
 8014d6a:	d00b      	beq.n	8014d84 <USBD_StdItfReq+0x28>
 8014d6c:	065b      	lsls	r3, r3, #25
 8014d6e:	d509      	bpl.n	8014d84 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8014d70:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d72:	2180      	movs	r1, #128	; 0x80
 8014d74:	f00e fe78 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014d78:	4620      	mov	r0, r4
 8014d7a:	4629      	mov	r1, r5
 8014d7c:	f00e fe74 	bl	8023a68 <USBD_LL_StallEP>
}
 8014d80:	4628      	mov	r0, r5
 8014d82:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8014d84:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8014d88:	3b01      	subs	r3, #1
 8014d8a:	2b02      	cmp	r3, #2
 8014d8c:	d812      	bhi.n	8014db4 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014d8e:	792b      	ldrb	r3, [r5, #4]
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d80f      	bhi.n	8014db4 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014d94:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	689b      	ldr	r3, [r3, #8]
 8014d9e:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014da0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014da2:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d1eb      	bne.n	8014d80 <USBD_StdItfReq+0x24>
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d1e9      	bne.n	8014d80 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8014dac:	4620      	mov	r0, r4
 8014dae:	f000 f921 	bl	8014ff4 <USBD_CtlSendStatus>
 8014db2:	e7e5      	b.n	8014d80 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014db4:	2180      	movs	r1, #128	; 0x80
 8014db6:	4620      	mov	r0, r4
 8014db8:	f00e fe56 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dbc:	2100      	movs	r1, #0
 8014dbe:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8014dc0:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dc2:	f00e fe51 	bl	8023a68 <USBD_LL_StallEP>
}
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	bd38      	pop	{r3, r4, r5, pc}
 8014dca:	bf00      	nop

08014dcc <USBD_StdEPReq>:
{
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	780b      	ldrb	r3, [r1, #0]
 8014dd0:	460d      	mov	r5, r1
 8014dd2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014dd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014dd8:	2b20      	cmp	r3, #32
 8014dda:	d00c      	beq.n	8014df6 <USBD_StdEPReq+0x2a>
 8014ddc:	2b40      	cmp	r3, #64	; 0x40
 8014dde:	d00a      	beq.n	8014df6 <USBD_StdEPReq+0x2a>
 8014de0:	b18b      	cbz	r3, 8014e06 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014de2:	2180      	movs	r1, #128	; 0x80
 8014de4:	4620      	mov	r0, r4
 8014de6:	f00e fe3f 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dea:	2100      	movs	r1, #0
 8014dec:	4620      	mov	r0, r4
 8014dee:	f00e fe3b 	bl	8023a68 <USBD_LL_StallEP>
}
 8014df2:	2000      	movs	r0, #0
 8014df4:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014df6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	689b      	ldr	r3, [r3, #8]
}
 8014e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014e04:	4718      	bx	r3
    switch (req->bRequest)
 8014e06:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8014e08:	888a      	ldrh	r2, [r1, #4]
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8014e0e:	d036      	beq.n	8014e7e <USBD_StdEPReq+0xb2>
 8014e10:	2b03      	cmp	r3, #3
 8014e12:	d023      	beq.n	8014e5c <USBD_StdEPReq+0x90>
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1e4      	bne.n	8014de2 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8014e18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	d04c      	beq.n	8014eba <USBD_StdEPReq+0xee>
 8014e20:	2b03      	cmp	r3, #3
 8014e22:	d1de      	bne.n	8014de2 <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014e24:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8014e28:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014e2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8014e32:	d453      	bmi.n	8014edc <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014e34:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d0d2      	beq.n	8014de2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e3c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014e40:	2514      	movs	r5, #20
 8014e42:	fb05 0503 	mla	r5, r5, r3, r0
 8014e46:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d152      	bne.n	8014ef4 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8014e4e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e50:	2202      	movs	r2, #2
 8014e52:	4629      	mov	r1, r5
 8014e54:	4620      	mov	r0, r4
 8014e56:	f000 f89d 	bl	8014f94 <USBD_CtlSendData>
          break;
 8014e5a:	e7ca      	b.n	8014df2 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014e5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e60:	2b02      	cmp	r3, #2
 8014e62:	d021      	beq.n	8014ea8 <USBD_StdEPReq+0xdc>
 8014e64:	2b03      	cmp	r3, #3
 8014e66:	d1bc      	bne.n	8014de2 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014e68:	886b      	ldrh	r3, [r5, #2]
 8014e6a:	b923      	cbnz	r3, 8014e76 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014e6c:	064a      	lsls	r2, r1, #25
 8014e6e:	d002      	beq.n	8014e76 <USBD_StdEPReq+0xaa>
 8014e70:	88eb      	ldrh	r3, [r5, #6]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d049      	beq.n	8014f0a <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 8014e76:	4620      	mov	r0, r4
 8014e78:	f000 f8bc 	bl	8014ff4 <USBD_CtlSendStatus>
        break;
 8014e7c:	e7b9      	b.n	8014df2 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014e7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e82:	2b02      	cmp	r3, #2
 8014e84:	d010      	beq.n	8014ea8 <USBD_StdEPReq+0xdc>
 8014e86:	2b03      	cmp	r3, #3
 8014e88:	d1ab      	bne.n	8014de2 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014e8a:	886b      	ldrh	r3, [r5, #2]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d1b0      	bne.n	8014df2 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8014e90:	064e      	lsls	r6, r1, #25
 8014e92:	d135      	bne.n	8014f00 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8014e94:	4620      	mov	r0, r4
 8014e96:	f000 f8ad 	bl	8014ff4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014e9a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014e9e:	4629      	mov	r1, r5
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	689b      	ldr	r3, [r3, #8]
 8014ea4:	4798      	blx	r3
 8014ea6:	e7a4      	b.n	8014df2 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ea8:	064b      	lsls	r3, r1, #25
 8014eaa:	d09a      	beq.n	8014de2 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014eac:	f00e fddc 	bl	8023a68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014eb0:	2180      	movs	r1, #128	; 0x80
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f00e fdd8 	bl	8023a68 <USBD_LL_StallEP>
 8014eb8:	e79b      	b.n	8014df2 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014eba:	0648      	lsls	r0, r1, #25
 8014ebc:	d191      	bne.n	8014de2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ebe:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8014ec0:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ec4:	f04f 0202 	mov.w	r2, #2
 8014ec8:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014eca:	bf4c      	ite	mi
 8014ecc:	f104 0114 	addmi.w	r1, r4, #20
 8014ed0:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8014ed4:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ed6:	f000 f85d 	bl	8014f94 <USBD_CtlSendData>
        break;
 8014eda:	e78a      	b.n	8014df2 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014edc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	f43f af7f 	beq.w	8014de2 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ee4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014ee8:	1c5d      	adds	r5, r3, #1
 8014eea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014eee:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8014ef2:	e7aa      	b.n	8014e4a <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f00e fdd3 	bl	8023aa0 <USBD_LL_IsStallEP>
 8014efa:	b120      	cbz	r0, 8014f06 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8014efc:	2301      	movs	r3, #1
 8014efe:	e7a6      	b.n	8014e4e <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014f00:	f00e fdc0 	bl	8023a84 <USBD_LL_ClearStallEP>
 8014f04:	e7c6      	b.n	8014e94 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8014f06:	6028      	str	r0, [r5, #0]
 8014f08:	e7a2      	b.n	8014e50 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014f0a:	f00e fdad 	bl	8023a68 <USBD_LL_StallEP>
 8014f0e:	e7b2      	b.n	8014e76 <USBD_StdEPReq+0xaa>

08014f10 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8014f10:	780b      	ldrb	r3, [r1, #0]
 8014f12:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8014f14:	784b      	ldrb	r3, [r1, #1]
 8014f16:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8014f18:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8014f1a:	8043      	strh	r3, [r0, #2]
 8014f1c:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8014f1e:	8083      	strh	r3, [r0, #4]
 8014f20:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8014f22:	80c3      	strh	r3, [r0, #6]
}
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop

08014f28 <USBD_CtlError>:
{
 8014f28:	b510      	push	{r4, lr}
 8014f2a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f2c:	2180      	movs	r1, #128	; 0x80
 8014f2e:	f00e fd9b 	bl	8023a68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f32:	2100      	movs	r1, #0
 8014f34:	4620      	mov	r0, r4
}
 8014f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f3a:	f00e bd95 	b.w	8023a68 <USBD_LL_StallEP>
 8014f3e:	bf00      	nop

08014f40 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8014f40:	b318      	cbz	r0, 8014f8a <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8014f42:	7803      	ldrb	r3, [r0, #0]
{
 8014f44:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8014f46:	b30b      	cbz	r3, 8014f8c <USBD_GetString+0x4c>
 8014f48:	4604      	mov	r4, r0
 8014f4a:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8014f4e:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8014f52:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2d00      	cmp	r5, #0
 8014f5a:	d1f8      	bne.n	8014f4e <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	005b      	lsls	r3, r3, #1
 8014f60:	b2dc      	uxtb	r4, r3
 8014f62:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014f64:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8014f66:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014f68:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8014f6a:	7804      	ldrb	r4, [r0, #0]
 8014f6c:	b15c      	cbz	r4, 8014f86 <USBD_GetString+0x46>
  idx++;
 8014f6e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8014f70:	2500      	movs	r5, #0
    idx++;
 8014f72:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8014f74:	54cc      	strb	r4, [r1, r3]
    idx++;
 8014f76:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8014f78:	b2d2      	uxtb	r2, r2
    idx++;
 8014f7a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8014f7c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8014f7e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014f82:	2c00      	cmp	r4, #0
 8014f84:	d1f5      	bne.n	8014f72 <USBD_GetString+0x32>
}
 8014f86:	bc30      	pop	{r4, r5}
 8014f88:	4770      	bx	lr
 8014f8a:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8014f8c:	2402      	movs	r4, #2
 8014f8e:	4623      	mov	r3, r4
 8014f90:	e7e7      	b.n	8014f62 <USBD_GetString+0x22>
 8014f92:	bf00      	nop

08014f94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014f94:	b510      	push	{r4, lr}
 8014f96:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f98:	2402      	movs	r4, #2
{
 8014f9a:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f9c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f9e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8014fa2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014fa6:	f00e fd9d 	bl	8023ae4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014faa:	2000      	movs	r0, #0
 8014fac:	bd10      	pop	{r4, pc}
 8014fae:	bf00      	nop

08014fb0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014fb0:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014fb2:	2100      	movs	r1, #0
{
 8014fb4:	b508      	push	{r3, lr}
 8014fb6:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014fb8:	4662      	mov	r2, ip
 8014fba:	f00e fd93 	bl	8023ae4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	bd08      	pop	{r3, pc}
 8014fc2:	bf00      	nop

08014fc4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014fc8:	2403      	movs	r4, #3
{
 8014fca:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fcc:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014fce:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8014fd2:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fd6:	f00e fd93 	bl	8023b00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014fda:	2000      	movs	r0, #0
 8014fdc:	bd10      	pop	{r4, pc}
 8014fde:	bf00      	nop

08014fe0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014fe0:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fe2:	2100      	movs	r1, #0
{
 8014fe4:	b508      	push	{r3, lr}
 8014fe6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fe8:	4662      	mov	r2, ip
 8014fea:	f00e fd89 	bl	8023b00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014fee:	2000      	movs	r0, #0
 8014ff0:	bd08      	pop	{r3, pc}
 8014ff2:	bf00      	nop

08014ff4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014ff4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014ff6:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ff8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014ffa:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ffe:	461a      	mov	r2, r3
 8015000:	4619      	mov	r1, r3
 8015002:	f00e fd6f 	bl	8023ae4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8015006:	2000      	movs	r0, #0
 8015008:	bd08      	pop	{r3, pc}
 801500a:	bf00      	nop

0801500c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801500c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801500e:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015010:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015012:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015016:	461a      	mov	r2, r3
 8015018:	4619      	mov	r1, r3
 801501a:	f00e fd71 	bl	8023b00 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801501e:	2000      	movs	r0, #0
 8015020:	bd08      	pop	{r3, pc}
 8015022:	bf00      	nop

08015024 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8015024:	4b10      	ldr	r3, [pc, #64]	; (8015068 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015026:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8015028:	7a5c      	ldrb	r4, [r3, #9]
 801502a:	b9cc      	cbnz	r4, 8015060 <FATFS_LinkDriver+0x3c>
 801502c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 801502e:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8015032:	7a5c      	ldrb	r4, [r3, #9]
 8015034:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8015036:	7a5c      	ldrb	r4, [r3, #9]
 8015038:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801503c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 801503e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8015040:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8015042:	441c      	add	r4, r3
 8015044:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8015046:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8015048:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801504a:	b2e4      	uxtb	r4, r4
 801504c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 801504e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8015050:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8015052:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8015054:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8015056:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8015058:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 801505c:	708b      	strb	r3, [r1, #2]
}
 801505e:	4770      	bx	lr
  uint8_t ret = 1;
 8015060:	2001      	movs	r0, #1
}
 8015062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015066:	4770      	bx	lr
 8015068:	20006030 	.word	0x20006030

0801506c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801506c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 801506e:	f001 f9c9 	bl	8016404 <vTaskStartScheduler>
  
  return osOK;
}
 8015072:	2000      	movs	r0, #0
 8015074:	bd08      	pop	{r3, pc}
 8015076:	bf00      	nop

08015078 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015078:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 801507c:	b10b      	cbz	r3, 8015082 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 801507e:	f001 ba23 	b.w	80164c8 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8015082:	f001 ba1b 	b.w	80164bc <xTaskGetTickCount>
 8015086:	bf00      	nop

08015088 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015088:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801508a:	6944      	ldr	r4, [r0, #20]
{
 801508c:	b086      	sub	sp, #24
 801508e:	4684      	mov	ip, r0
 8015090:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015092:	b1ac      	cbz	r4, 80150c0 <osThreadCreate+0x38>
 8015094:	6986      	ldr	r6, [r0, #24]
 8015096:	b19e      	cbz	r6, 80150c0 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015098:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801509c:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 80150a0:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150a4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80150a8:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 80150aa:	bf14      	ite	ne
 80150ac:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80150b0:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150b2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80150b6:	9500      	str	r5, [sp, #0]
 80150b8:	f001 f932 	bl	8016320 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80150bc:	b006      	add	sp, #24
 80150be:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150c0:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 80150c4:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 80150c8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80150ca:	bf14      	ite	ne
 80150cc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80150ce:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80150d0:	e9dc 1000 	ldrd	r1, r0, [ip]
 80150d4:	9400      	str	r4, [sp, #0]
 80150d6:	ac05      	add	r4, sp, #20
 80150d8:	9401      	str	r4, [sp, #4]
 80150da:	f001 f961 	bl	80163a0 <xTaskCreate>
 80150de:	2801      	cmp	r0, #1
  return handle;
 80150e0:	bf0c      	ite	eq
 80150e2:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80150e4:	2000      	movne	r0, #0
}
 80150e6:	b006      	add	sp, #24
 80150e8:	bd70      	pop	{r4, r5, r6, pc}
 80150ea:	bf00      	nop

080150ec <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80150ec:	2801      	cmp	r0, #1
{
 80150ee:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80150f0:	bf38      	it	cc
 80150f2:	2001      	movcc	r0, #1
 80150f4:	f001 fb48 	bl	8016788 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80150f8:	2000      	movs	r0, #0
 80150fa:	bd08      	pop	{r3, pc}

080150fc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80150fc:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80150fe:	6844      	ldr	r4, [r0, #4]
{
 8015100:	b082      	sub	sp, #8
 8015102:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8015104:	b16c      	cbz	r4, 8015122 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8015106:	f1a1 0201 	sub.w	r2, r1, #1
 801510a:	6800      	ldr	r0, [r0, #0]
 801510c:	2101      	movs	r1, #1
 801510e:	fab2 f282 	clz	r2, r2
 8015112:	0952      	lsrs	r2, r2, #5
 8015114:	e9cd 0400 	strd	r0, r4, [sp]
 8015118:	4808      	ldr	r0, [pc, #32]	; (801513c <osTimerCreate+0x40>)
 801511a:	f001 fee9 	bl	8016ef0 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 801511e:	b002      	add	sp, #8
 8015120:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8015122:	f1a1 0201 	sub.w	r2, r1, #1
 8015126:	6804      	ldr	r4, [r0, #0]
 8015128:	2101      	movs	r1, #1
 801512a:	4804      	ldr	r0, [pc, #16]	; (801513c <osTimerCreate+0x40>)
 801512c:	fab2 f282 	clz	r2, r2
 8015130:	9400      	str	r4, [sp, #0]
 8015132:	0952      	lsrs	r2, r2, #5
 8015134:	f001 feac 	bl	8016e90 <xTimerCreate>
}
 8015138:	b002      	add	sp, #8
 801513a:	bd10      	pop	{r4, pc}
 801513c:	080299e0 	.word	0x080299e0

08015140 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8015140:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8015142:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8015144:	b109      	cbz	r1, 801514a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8015146:	f000 bbc9 	b.w	80158dc <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801514a:	f000 bbdf 	b.w	801590c <xQueueCreateMutex>
 801514e:	bf00      	nop

08015150 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8015150:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015152:	2400      	movs	r4, #0
{
 8015154:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8015156:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8015158:	b310      	cbz	r0, 80151a0 <osMutexWait+0x50>
 801515a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801515e:	b933      	cbnz	r3, 801516e <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8015160:	f000 fd88 	bl	8015c74 <xQueueSemaphoreTake>
 8015164:	2801      	cmp	r0, #1
 8015166:	d118      	bne.n	801519a <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8015168:	2000      	movs	r0, #0
}
 801516a:	b002      	add	sp, #8
 801516c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801516e:	aa01      	add	r2, sp, #4
 8015170:	4621      	mov	r1, r4
 8015172:	f000 fe63 	bl	8015e3c <xQueueReceiveFromISR>
 8015176:	2801      	cmp	r0, #1
 8015178:	d10f      	bne.n	801519a <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 801517a:	9b01      	ldr	r3, [sp, #4]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d0f3      	beq.n	8015168 <osMutexWait+0x18>
 8015180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015188:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801518c:	f3bf 8f4f 	dsb	sy
 8015190:	f3bf 8f6f 	isb	sy
  return osOK;
 8015194:	4620      	mov	r0, r4
}
 8015196:	b002      	add	sp, #8
 8015198:	bd10      	pop	{r4, pc}
    return osErrorOS;
 801519a:	20ff      	movs	r0, #255	; 0xff
}
 801519c:	b002      	add	sp, #8
 801519e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80151a0:	2080      	movs	r0, #128	; 0x80
}
 80151a2:	b002      	add	sp, #8
 80151a4:	bd10      	pop	{r4, pc}
 80151a6:	bf00      	nop

080151a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80151a8:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80151aa:	2400      	movs	r4, #0
{
 80151ac:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80151ae:	9401      	str	r4, [sp, #4]
 80151b0:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80151b4:	b19b      	cbz	r3, 80151de <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80151b6:	a901      	add	r1, sp, #4
 80151b8:	f000 fc34 	bl	8015a24 <xQueueGiveFromISR>
 80151bc:	2801      	cmp	r0, #1
 80151be:	d114      	bne.n	80151ea <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80151c0:	9b01      	ldr	r3, [sp, #4]
 80151c2:	b1ab      	cbz	r3, 80151f0 <osMutexRelease+0x48>
 80151c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80151c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80151d0:	f3bf 8f4f 	dsb	sy
 80151d4:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80151d8:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80151da:	b002      	add	sp, #8
 80151dc:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80151de:	461a      	mov	r2, r3
 80151e0:	4619      	mov	r1, r3
 80151e2:	f000 faad 	bl	8015740 <xQueueGenericSend>
 80151e6:	2801      	cmp	r0, #1
 80151e8:	d002      	beq.n	80151f0 <osMutexRelease+0x48>
    result = osErrorOS;
 80151ea:	20ff      	movs	r0, #255	; 0xff
}
 80151ec:	b002      	add	sp, #8
 80151ee:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 80151f0:	2000      	movs	r0, #0
}
 80151f2:	b002      	add	sp, #8
 80151f4:	bd10      	pop	{r4, pc}
 80151f6:	bf00      	nop

080151f8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80151f8:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80151fa:	6844      	ldr	r4, [r0, #4]
{ 
 80151fc:	b083      	sub	sp, #12
 80151fe:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8015200:	b184      	cbz	r4, 8015224 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8015202:	2901      	cmp	r1, #1
 8015204:	d003      	beq.n	801520e <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8015206:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8015208:	4620      	mov	r0, r4
 801520a:	b003      	add	sp, #12
 801520c:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801520e:	2200      	movs	r2, #0
 8015210:	2503      	movs	r5, #3
 8015212:	4623      	mov	r3, r4
 8015214:	4611      	mov	r1, r2
 8015216:	9500      	str	r5, [sp, #0]
 8015218:	f000 fa08 	bl	801562c <xQueueGenericCreateStatic>
 801521c:	4604      	mov	r4, r0
}
 801521e:	4620      	mov	r0, r4
 8015220:	b003      	add	sp, #12
 8015222:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8015224:	2901      	cmp	r1, #1
 8015226:	d1ef      	bne.n	8015208 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8015228:	4621      	mov	r1, r4
 801522a:	2203      	movs	r2, #3
 801522c:	f000 fa56 	bl	80156dc <xQueueGenericCreate>
 8015230:	4604      	mov	r4, r0
 8015232:	2800      	cmp	r0, #0
 8015234:	d0e8      	beq.n	8015208 <osSemaphoreCreate+0x10>
 8015236:	2300      	movs	r3, #0
 8015238:	461a      	mov	r2, r3
 801523a:	4619      	mov	r1, r3
 801523c:	f000 fa80 	bl	8015740 <xQueueGenericSend>
 8015240:	e7e2      	b.n	8015208 <osSemaphoreCreate+0x10>
 8015242:	bf00      	nop

08015244 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8015244:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015246:	2400      	movs	r4, #0
{
 8015248:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801524a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 801524c:	b310      	cbz	r0, 8015294 <osSemaphoreWait+0x50>
 801524e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8015252:	b933      	cbnz	r3, 8015262 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8015254:	f000 fd0e 	bl	8015c74 <xQueueSemaphoreTake>
 8015258:	2801      	cmp	r0, #1
 801525a:	d118      	bne.n	801528e <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 801525c:	2000      	movs	r0, #0
}
 801525e:	b002      	add	sp, #8
 8015260:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8015262:	aa01      	add	r2, sp, #4
 8015264:	4621      	mov	r1, r4
 8015266:	f000 fde9 	bl	8015e3c <xQueueReceiveFromISR>
 801526a:	2801      	cmp	r0, #1
 801526c:	d10f      	bne.n	801528e <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 801526e:	9b01      	ldr	r3, [sp, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d0f3      	beq.n	801525c <osSemaphoreWait+0x18>
 8015274:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801527c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015280:	f3bf 8f4f 	dsb	sy
 8015284:	f3bf 8f6f 	isb	sy
  return osOK;
 8015288:	4620      	mov	r0, r4
}
 801528a:	b002      	add	sp, #8
 801528c:	bd10      	pop	{r4, pc}
    return osErrorOS;
 801528e:	20ff      	movs	r0, #255	; 0xff
}
 8015290:	b002      	add	sp, #8
 8015292:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8015294:	2080      	movs	r0, #128	; 0x80
}
 8015296:	b002      	add	sp, #8
 8015298:	bd10      	pop	{r4, pc}
 801529a:	bf00      	nop

0801529c <osSemaphoreRelease>:
 801529c:	b510      	push	{r4, lr}
 801529e:	2400      	movs	r4, #0
 80152a0:	b082      	sub	sp, #8
 80152a2:	9401      	str	r4, [sp, #4]
 80152a4:	f3ef 8305 	mrs	r3, IPSR
 80152a8:	b19b      	cbz	r3, 80152d2 <osSemaphoreRelease+0x36>
 80152aa:	a901      	add	r1, sp, #4
 80152ac:	f000 fbba 	bl	8015a24 <xQueueGiveFromISR>
 80152b0:	2801      	cmp	r0, #1
 80152b2:	d114      	bne.n	80152de <osSemaphoreRelease+0x42>
 80152b4:	9b01      	ldr	r3, [sp, #4]
 80152b6:	b1ab      	cbz	r3, 80152e4 <osSemaphoreRelease+0x48>
 80152b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80152bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	f3bf 8f6f 	isb	sy
 80152cc:	4620      	mov	r0, r4
 80152ce:	b002      	add	sp, #8
 80152d0:	bd10      	pop	{r4, pc}
 80152d2:	461a      	mov	r2, r3
 80152d4:	4619      	mov	r1, r3
 80152d6:	f000 fa33 	bl	8015740 <xQueueGenericSend>
 80152da:	2801      	cmp	r0, #1
 80152dc:	d002      	beq.n	80152e4 <osSemaphoreRelease+0x48>
 80152de:	20ff      	movs	r0, #255	; 0xff
 80152e0:	b002      	add	sp, #8
 80152e2:	bd10      	pop	{r4, pc}
 80152e4:	2000      	movs	r0, #0
 80152e6:	b002      	add	sp, #8
 80152e8:	bd10      	pop	{r4, pc}
 80152ea:	bf00      	nop

080152ec <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80152ec:	6882      	ldr	r2, [r0, #8]
 80152ee:	b15a      	cbz	r2, 8015308 <osMessageCreate+0x1c>
 80152f0:	68c3      	ldr	r3, [r0, #12]
 80152f2:	b14b      	cbz	r3, 8015308 <osMessageCreate+0x1c>
{
 80152f4:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80152f6:	2400      	movs	r4, #0
{
 80152f8:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80152fa:	e9d0 0100 	ldrd	r0, r1, [r0]
 80152fe:	9400      	str	r4, [sp, #0]
 8015300:	f000 f994 	bl	801562c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015304:	b002      	add	sp, #8
 8015306:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015308:	2200      	movs	r2, #0
 801530a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801530e:	f000 b9e5 	b.w	80156dc <xQueueGenericCreate>
 8015312:	bf00      	nop

08015314 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8015314:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8015316:	2400      	movs	r4, #0
{
 8015318:	b084      	sub	sp, #16
 801531a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801531c:	9403      	str	r4, [sp, #12]
 801531e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8015322:	b15b      	cbz	r3, 801533c <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015324:	4623      	mov	r3, r4
 8015326:	aa03      	add	r2, sp, #12
 8015328:	a901      	add	r1, sp, #4
 801532a:	f000 fb09 	bl	8015940 <xQueueGenericSendFromISR>
 801532e:	2801      	cmp	r0, #1
 8015330:	d10c      	bne.n	801534c <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015332:	9b03      	ldr	r3, [sp, #12]
 8015334:	b96b      	cbnz	r3, 8015352 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8015336:	2000      	movs	r0, #0
}
 8015338:	b004      	add	sp, #16
 801533a:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801533c:	2a01      	cmp	r2, #1
 801533e:	a901      	add	r1, sp, #4
 8015340:	bf38      	it	cc
 8015342:	2201      	movcc	r2, #1
 8015344:	f000 f9fc 	bl	8015740 <xQueueGenericSend>
 8015348:	2801      	cmp	r0, #1
 801534a:	d0f4      	beq.n	8015336 <osMessagePut+0x22>
      return osErrorOS;
 801534c:	20ff      	movs	r0, #255	; 0xff
}
 801534e:	b004      	add	sp, #16
 8015350:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8015352:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801535a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801535e:	f3bf 8f4f 	dsb	sy
 8015362:	f3bf 8f6f 	isb	sy
  return osOK;
 8015366:	4620      	mov	r0, r4
}
 8015368:	b004      	add	sp, #16
 801536a:	bd10      	pop	{r4, pc}

0801536c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801536c:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 801536e:	2600      	movs	r6, #0
{
 8015370:	b084      	sub	sp, #16
 8015372:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8015374:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8015378:	b379      	cbz	r1, 80153da <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801537a:	460b      	mov	r3, r1
 801537c:	9600      	str	r6, [sp, #0]
 801537e:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8015382:	b991      	cbnz	r1, 80153aa <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015384:	a902      	add	r1, sp, #8
 8015386:	4618      	mov	r0, r3
 8015388:	4615      	mov	r5, r2
 801538a:	f000 fbab 	bl	8015ae4 <xQueueReceive>
 801538e:	2801      	cmp	r0, #1
 8015390:	d02d      	beq.n	80153ee <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015392:	2d00      	cmp	r5, #0
 8015394:	bf18      	it	ne
 8015396:	2540      	movne	r5, #64	; 0x40
 8015398:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 801539a:	ab04      	add	r3, sp, #16
 801539c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80153a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80153a4:	4620      	mov	r0, r4
 80153a6:	b004      	add	sp, #16
 80153a8:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80153aa:	466a      	mov	r2, sp
 80153ac:	4618      	mov	r0, r3
 80153ae:	a902      	add	r1, sp, #8
 80153b0:	f000 fd44 	bl	8015e3c <xQueueReceiveFromISR>
      event.status = osOK;
 80153b4:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 80153b6:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80153b8:	bf0c      	ite	eq
 80153ba:	2210      	moveq	r2, #16
 80153bc:	2200      	movne	r2, #0
 80153be:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d0ea      	beq.n	801539a <osMessageGet+0x2e>
 80153c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80153c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80153d0:	f3bf 8f4f 	dsb	sy
 80153d4:	f3bf 8f6f 	isb	sy
 80153d8:	e7df      	b.n	801539a <osMessageGet+0x2e>
    event.status = osErrorParameter;
 80153da:	2380      	movs	r3, #128	; 0x80
 80153dc:	9301      	str	r3, [sp, #4]
    return event;
 80153de:	ab04      	add	r3, sp, #16
 80153e0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80153e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80153e8:	4620      	mov	r0, r4
 80153ea:	b004      	add	sp, #16
 80153ec:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80153ee:	2310      	movs	r3, #16
 80153f0:	9301      	str	r3, [sp, #4]
 80153f2:	e7d2      	b.n	801539a <osMessageGet+0x2e>

080153f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80153f4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80153f8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80153fc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80153fe:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015400:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015402:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015404:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015408:	4770      	bx	lr
 801540a:	bf00      	nop

0801540c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801540c:	2300      	movs	r3, #0
 801540e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop

08015414 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8015414:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8015416:	6802      	ldr	r2, [r0, #0]
{
 8015418:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801541a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 801541c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 801541e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015420:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015422:	689c      	ldr	r4, [r3, #8]
 8015424:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015426:	6099      	str	r1, [r3, #8]
}
 8015428:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 801542c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801542e:	6002      	str	r2, [r0, #0]
}
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop

08015434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015434:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015436:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015438:	1c6b      	adds	r3, r5, #1
 801543a:	d010      	beq.n	801545e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801543c:	f100 0308 	add.w	r3, r0, #8
 8015440:	461c      	mov	r4, r3
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	42aa      	cmp	r2, r5
 8015448:	d9fa      	bls.n	8015440 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801544a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801544c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801544e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015450:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015452:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8015454:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8015456:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8015458:	6002      	str	r2, [r0, #0]
}
 801545a:	bc30      	pop	{r4, r5}
 801545c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801545e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8015460:	6863      	ldr	r3, [r4, #4]
 8015462:	e7f2      	b.n	801544a <vListInsert+0x16>

08015464 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015464:	6903      	ldr	r3, [r0, #16]
{
 8015466:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015468:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801546a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 801546e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8015470:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015474:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015476:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8015478:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801547c:	bf08      	it	eq
 801547e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8015480:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8015482:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8015484:	3a01      	subs	r2, #1
 8015486:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8015488:	6818      	ldr	r0, [r3, #0]
}
 801548a:	4770      	bx	lr

0801548c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801548c:	b570      	push	{r4, r5, r6, lr}
 801548e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015490:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8015492:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015494:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015496:	b92a      	cbnz	r2, 80154a4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015498:	6805      	ldr	r5, [r0, #0]
 801549a:	b365      	cbz	r5, 80154f6 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801549c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801549e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154a0:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80154a2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80154a4:	b97d      	cbnz	r5, 80154c6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80154a6:	6840      	ldr	r0, [r0, #4]
 80154a8:	f00e fdcc 	bl	8024044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80154ac:	6863      	ldr	r3, [r4, #4]
 80154ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80154b0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154b2:	68a2      	ldr	r2, [r4, #8]
 80154b4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80154b6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154b8:	d319      	bcc.n	80154ee <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80154ba:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154bc:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80154be:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80154c0:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154c2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80154c4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80154c6:	68c0      	ldr	r0, [r0, #12]
 80154c8:	f00e fdbc 	bl	8024044 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80154cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80154ce:	68e3      	ldr	r3, [r4, #12]
 80154d0:	4251      	negs	r1, r2
 80154d2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154d4:	6822      	ldr	r2, [r4, #0]
 80154d6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80154d8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154da:	d202      	bcs.n	80154e2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80154dc:	68a3      	ldr	r3, [r4, #8]
 80154de:	440b      	add	r3, r1
 80154e0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80154e2:	2d02      	cmp	r5, #2
 80154e4:	d00d      	beq.n	8015502 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154e6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80154e8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154ea:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154ee:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80154f0:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154f2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80154f4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80154f6:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80154f8:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80154fa:	f001 fadb 	bl	8016ab4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80154fe:	60a5      	str	r5, [r4, #8]
 8015500:	e7ce      	b.n	80154a0 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015502:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8015504:	f04f 0000 	mov.w	r0, #0
 8015508:	bf38      	it	cc
 801550a:	2601      	movcc	r6, #1
 801550c:	e7c8      	b.n	80154a0 <prvCopyDataToQueue+0x14>
 801550e:	bf00      	nop

08015510 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015510:	b570      	push	{r4, r5, r6, lr}
 8015512:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015514:	f001 ff66 	bl	80173e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015518:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 801551c:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801551e:	2c00      	cmp	r4, #0
 8015520:	dd14      	ble.n	801554c <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015522:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8015526:	e003      	b.n	8015530 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015528:	1e63      	subs	r3, r4, #1
 801552a:	b2da      	uxtb	r2, r3
 801552c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801552e:	b16a      	cbz	r2, 801554c <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015530:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015532:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015534:	b153      	cbz	r3, 801554c <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015536:	f001 f9a5 	bl	8016884 <xTaskRemoveFromEventList>
 801553a:	2800      	cmp	r0, #0
 801553c:	d0f4      	beq.n	8015528 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 801553e:	f001 fa45 	bl	80169cc <vTaskMissedYield>
			--cTxLock;
 8015542:	1e63      	subs	r3, r4, #1
 8015544:	b2da      	uxtb	r2, r3
 8015546:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015548:	2a00      	cmp	r2, #0
 801554a:	d1f1      	bne.n	8015530 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801554c:	23ff      	movs	r3, #255	; 0xff
 801554e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015552:	f001 ff6d 	bl	8017430 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015556:	f001 ff45 	bl	80173e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801555a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 801555e:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015560:	2c00      	cmp	r4, #0
 8015562:	dd14      	ble.n	801558e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015564:	f105 0610 	add.w	r6, r5, #16
 8015568:	e003      	b.n	8015572 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801556a:	1e63      	subs	r3, r4, #1
 801556c:	b2da      	uxtb	r2, r3
 801556e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015570:	b16a      	cbz	r2, 801558e <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015572:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015574:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015576:	b153      	cbz	r3, 801558e <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015578:	f001 f984 	bl	8016884 <xTaskRemoveFromEventList>
 801557c:	2800      	cmp	r0, #0
 801557e:	d0f4      	beq.n	801556a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8015580:	f001 fa24 	bl	80169cc <vTaskMissedYield>
				--cRxLock;
 8015584:	1e63      	subs	r3, r4, #1
 8015586:	b2da      	uxtb	r2, r3
 8015588:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801558a:	2a00      	cmp	r2, #0
 801558c:	d1f1      	bne.n	8015572 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801558e:	23ff      	movs	r3, #255	; 0xff
 8015590:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8015594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8015598:	f001 bf4a 	b.w	8017430 <vPortExitCritical>

0801559c <xQueueGenericReset>:
{
 801559c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801559e:	b1e0      	cbz	r0, 80155da <xQueueGenericReset+0x3e>
 80155a0:	4604      	mov	r4, r0
 80155a2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80155a4:	f001 ff1e 	bl	80173e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155a8:	6822      	ldr	r2, [r4, #0]
 80155aa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80155ae:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155b0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155b4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155b6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155b8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155ba:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80155bc:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80155be:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80155c0:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80155c2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80155c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80155c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80155cc:	b985      	cbnz	r5, 80155f0 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155ce:	6923      	ldr	r3, [r4, #16]
 80155d0:	b9d3      	cbnz	r3, 8015608 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 80155d2:	f001 ff2d 	bl	8017430 <vPortExitCritical>
}
 80155d6:	2001      	movs	r0, #1
 80155d8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80155da:	f04f 0330 	mov.w	r3, #48	; 0x30
 80155de:	b672      	cpsid	i
 80155e0:	f383 8811 	msr	BASEPRI, r3
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	b662      	cpsie	i
	configASSERT( pxQueue );
 80155ee:	e7fe      	b.n	80155ee <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80155f0:	f104 0010 	add.w	r0, r4, #16
 80155f4:	f7ff fefe 	bl	80153f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80155f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80155fc:	f7ff fefa 	bl	80153f4 <vListInitialise>
	taskEXIT_CRITICAL();
 8015600:	f001 ff16 	bl	8017430 <vPortExitCritical>
}
 8015604:	2001      	movs	r0, #1
 8015606:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015608:	f104 0010 	add.w	r0, r4, #16
 801560c:	f001 f93a 	bl	8016884 <xTaskRemoveFromEventList>
 8015610:	2800      	cmp	r0, #0
 8015612:	d0de      	beq.n	80155d2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8015614:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801561c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	e7d3      	b.n	80155d2 <xQueueGenericReset+0x36>
 801562a:	bf00      	nop

0801562c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801562c:	b950      	cbnz	r0, 8015644 <xQueueGenericCreateStatic+0x18>
 801562e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015632:	b672      	cpsid	i
 8015634:	f383 8811 	msr	BASEPRI, r3
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	b662      	cpsie	i
 8015642:	e7fe      	b.n	8015642 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8015644:	b17b      	cbz	r3, 8015666 <xQueueGenericCreateStatic+0x3a>
	{
 8015646:	b510      	push	{r4, lr}
 8015648:	460c      	mov	r4, r1
 801564a:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801564c:	b33a      	cbz	r2, 801569e <xQueueGenericCreateStatic+0x72>
 801564e:	b9a9      	cbnz	r1, 801567c <xQueueGenericCreateStatic+0x50>
 8015650:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015654:	b672      	cpsid	i
 8015656:	f383 8811 	msr	BASEPRI, r3
 801565a:	f3bf 8f6f 	isb	sy
 801565e:	f3bf 8f4f 	dsb	sy
 8015662:	b662      	cpsie	i
 8015664:	e7fe      	b.n	8015664 <xQueueGenericCreateStatic+0x38>
 8015666:	f04f 0330 	mov.w	r3, #48	; 0x30
 801566a:	b672      	cpsid	i
 801566c:	f383 8811 	msr	BASEPRI, r3
 8015670:	f3bf 8f6f 	isb	sy
 8015674:	f3bf 8f4f 	dsb	sy
 8015678:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 801567a:	e7fe      	b.n	801567a <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801567c:	b17a      	cbz	r2, 801569e <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 801567e:	2148      	movs	r1, #72	; 0x48
 8015680:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015682:	9903      	ldr	r1, [sp, #12]
 8015684:	2948      	cmp	r1, #72	; 0x48
 8015686:	d017      	beq.n	80156b8 <xQueueGenericCreateStatic+0x8c>
 8015688:	f04f 0330 	mov.w	r3, #48	; 0x30
 801568c:	b672      	cpsid	i
 801568e:	f383 8811 	msr	BASEPRI, r3
 8015692:	f3bf 8f6f 	isb	sy
 8015696:	f3bf 8f4f 	dsb	sy
 801569a:	b662      	cpsie	i
 801569c:	e7fe      	b.n	801569c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801569e:	2c00      	cmp	r4, #0
 80156a0:	d0ed      	beq.n	801567e <xQueueGenericCreateStatic+0x52>
 80156a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156a6:	b672      	cpsid	i
 80156a8:	f383 8811 	msr	BASEPRI, r3
 80156ac:	f3bf 8f6f 	isb	sy
 80156b0:	f3bf 8f4f 	dsb	sy
 80156b4:	b662      	cpsie	i
 80156b6:	e7fe      	b.n	80156b6 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80156b8:	2c00      	cmp	r4, #0
 80156ba:	bf08      	it	eq
 80156bc:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80156be:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80156c0:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80156c2:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80156c4:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80156c8:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80156ca:	641c      	str	r4, [r3, #64]	; 0x40
 80156cc:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80156ce:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80156d0:	f7ff ff64 	bl	801559c <xQueueGenericReset>
	}
 80156d4:	9b01      	ldr	r3, [sp, #4]
 80156d6:	4618      	mov	r0, r3
 80156d8:	b004      	add	sp, #16
 80156da:	bd10      	pop	{r4, pc}

080156dc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80156dc:	b950      	cbnz	r0, 80156f4 <xQueueGenericCreate+0x18>
 80156de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156e2:	b672      	cpsid	i
 80156e4:	f383 8811 	msr	BASEPRI, r3
 80156e8:	f3bf 8f6f 	isb	sy
 80156ec:	f3bf 8f4f 	dsb	sy
 80156f0:	b662      	cpsie	i
 80156f2:	e7fe      	b.n	80156f2 <xQueueGenericCreate+0x16>
	{
 80156f4:	b570      	push	{r4, r5, r6, lr}
 80156f6:	4605      	mov	r5, r0
 80156f8:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80156fa:	b979      	cbnz	r1, 801571c <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80156fc:	2048      	movs	r0, #72	; 0x48
 80156fe:	f001 ffdb 	bl	80176b8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015702:	4604      	mov	r4, r0
 8015704:	b1c0      	cbz	r0, 8015738 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015706:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801570a:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801570c:	2101      	movs	r1, #1
 801570e:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8015710:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015714:	f7ff ff42 	bl	801559c <xQueueGenericReset>
	}
 8015718:	4620      	mov	r0, r4
 801571a:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801571c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015720:	3048      	adds	r0, #72	; 0x48
 8015722:	f001 ffc9 	bl	80176b8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015726:	4604      	mov	r4, r0
 8015728:	b130      	cbz	r0, 8015738 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801572a:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801572c:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015730:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015734:	6003      	str	r3, [r0, #0]
 8015736:	e7e9      	b.n	801570c <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015738:	2400      	movs	r4, #0
	}
 801573a:	4620      	mov	r0, r4
 801573c:	bd70      	pop	{r4, r5, r6, pc}
 801573e:	bf00      	nop

08015740 <xQueueGenericSend>:
{
 8015740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015744:	b085      	sub	sp, #20
 8015746:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8015748:	2800      	cmp	r0, #0
 801574a:	f000 8083 	beq.w	8015854 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801574e:	460f      	mov	r7, r1
 8015750:	4604      	mov	r4, r0
 8015752:	461e      	mov	r6, r3
 8015754:	2900      	cmp	r1, #0
 8015756:	d06b      	beq.n	8015830 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015758:	2e02      	cmp	r6, #2
 801575a:	d10d      	bne.n	8015778 <xQueueGenericSend+0x38>
 801575c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801575e:	2b01      	cmp	r3, #1
 8015760:	d00a      	beq.n	8015778 <xQueueGenericSend+0x38>
 8015762:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015766:	b672      	cpsid	i
 8015768:	f383 8811 	msr	BASEPRI, r3
 801576c:	f3bf 8f6f 	isb	sy
 8015770:	f3bf 8f4f 	dsb	sy
 8015774:	b662      	cpsie	i
 8015776:	e7fe      	b.n	8015776 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015778:	f001 f934 	bl	80169e4 <xTaskGetSchedulerState>
 801577c:	2800      	cmp	r0, #0
 801577e:	d074      	beq.n	801586a <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015780:	f1a6 0802 	sub.w	r8, r6, #2
 8015784:	2500      	movs	r5, #0
 8015786:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 801578a:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801578c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015790:	e007      	b.n	80157a2 <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8015792:	f001 fe4d 	bl	8017430 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015796:	4620      	mov	r0, r4
 8015798:	f7ff feba 	bl	8015510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801579c:	f000 ffe2 	bl	8016764 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157a0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80157a2:	f001 fe1f 	bl	80173e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80157a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80157aa:	4290      	cmp	r0, r2
 80157ac:	d36b      	bcc.n	8015886 <xQueueGenericSend+0x146>
 80157ae:	f1b8 0f00 	cmp.w	r8, #0
 80157b2:	d168      	bne.n	8015886 <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 80157b4:	9b01      	ldr	r3, [sp, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d07d      	beq.n	80158b6 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 80157ba:	2d00      	cmp	r5, #0
 80157bc:	d046      	beq.n	801584c <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 80157be:	f001 fe37 	bl	8017430 <vPortExitCritical>
		vTaskSuspendAll();
 80157c2:	f000 fe73 	bl	80164ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80157c6:	f001 fe0d 	bl	80173e4 <vPortEnterCritical>
 80157ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80157ce:	2bff      	cmp	r3, #255	; 0xff
 80157d0:	d101      	bne.n	80157d6 <xQueueGenericSend+0x96>
 80157d2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80157d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80157da:	2bff      	cmp	r3, #255	; 0xff
 80157dc:	d101      	bne.n	80157e2 <xQueueGenericSend+0xa2>
 80157de:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80157e2:	f001 fe25 	bl	8017430 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80157e6:	a901      	add	r1, sp, #4
 80157e8:	a802      	add	r0, sp, #8
 80157ea:	f001 f8a3 	bl	8016934 <xTaskCheckForTimeOut>
 80157ee:	2800      	cmp	r0, #0
 80157f0:	d165      	bne.n	80158be <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 80157f2:	f001 fdf7 	bl	80173e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80157f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80157f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d1c9      	bne.n	8015792 <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 80157fe:	f001 fe17 	bl	8017430 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015802:	9901      	ldr	r1, [sp, #4]
 8015804:	f104 0010 	add.w	r0, r4, #16
 8015808:	f001 f800 	bl	801680c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801580c:	4620      	mov	r0, r4
 801580e:	f7ff fe7f 	bl	8015510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015812:	f000 ffa7 	bl	8016764 <xTaskResumeAll>
 8015816:	2800      	cmp	r0, #0
 8015818:	d1c2      	bne.n	80157a0 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 801581a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015822:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	f3bf 8f6f 	isb	sy
 801582e:	e7b7      	b.n	80157a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015830:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015832:	2b00      	cmp	r3, #0
 8015834:	d090      	beq.n	8015758 <xQueueGenericSend+0x18>
 8015836:	f04f 0330 	mov.w	r3, #48	; 0x30
 801583a:	b672      	cpsid	i
 801583c:	f383 8811 	msr	BASEPRI, r3
 8015840:	f3bf 8f6f 	isb	sy
 8015844:	f3bf 8f4f 	dsb	sy
 8015848:	b662      	cpsie	i
 801584a:	e7fe      	b.n	801584a <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801584c:	a802      	add	r0, sp, #8
 801584e:	f001 f865 	bl	801691c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015852:	e7b4      	b.n	80157be <xQueueGenericSend+0x7e>
 8015854:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015858:	b672      	cpsid	i
 801585a:	f383 8811 	msr	BASEPRI, r3
 801585e:	f3bf 8f6f 	isb	sy
 8015862:	f3bf 8f4f 	dsb	sy
 8015866:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015868:	e7fe      	b.n	8015868 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801586a:	9b01      	ldr	r3, [sp, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d087      	beq.n	8015780 <xQueueGenericSend+0x40>
 8015870:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015874:	b672      	cpsid	i
 8015876:	f383 8811 	msr	BASEPRI, r3
 801587a:	f3bf 8f6f 	isb	sy
 801587e:	f3bf 8f4f 	dsb	sy
 8015882:	b662      	cpsie	i
 8015884:	e7fe      	b.n	8015884 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015886:	4632      	mov	r2, r6
 8015888:	4639      	mov	r1, r7
 801588a:	4620      	mov	r0, r4
 801588c:	f7ff fdfe 	bl	801548c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015892:	b9db      	cbnz	r3, 80158cc <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8015894:	b148      	cbz	r0, 80158aa <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8015896:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801589a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801589e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80158a2:	f3bf 8f4f 	dsb	sy
 80158a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80158aa:	f001 fdc1 	bl	8017430 <vPortExitCritical>
				return pdPASS;
 80158ae:	2001      	movs	r0, #1
}
 80158b0:	b005      	add	sp, #20
 80158b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80158b6:	f001 fdbb 	bl	8017430 <vPortExitCritical>
					return errQUEUE_FULL;
 80158ba:	4640      	mov	r0, r8
 80158bc:	e7f8      	b.n	80158b0 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80158be:	4620      	mov	r0, r4
 80158c0:	f7ff fe26 	bl	8015510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158c4:	f000 ff4e 	bl	8016764 <xTaskResumeAll>
			return errQUEUE_FULL;
 80158c8:	2000      	movs	r0, #0
 80158ca:	e7f1      	b.n	80158b0 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80158d0:	f000 ffd8 	bl	8016884 <xTaskRemoveFromEventList>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d0e8      	beq.n	80158aa <xQueueGenericSend+0x16a>
 80158d8:	e7dd      	b.n	8015896 <xQueueGenericSend+0x156>
 80158da:	bf00      	nop

080158dc <xQueueCreateMutexStatic>:
	{
 80158dc:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80158de:	2200      	movs	r2, #0
	{
 80158e0:	4604      	mov	r4, r0
 80158e2:	b082      	sub	sp, #8
 80158e4:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80158e6:	2001      	movs	r0, #1
 80158e8:	4611      	mov	r1, r2
 80158ea:	9400      	str	r4, [sp, #0]
 80158ec:	f7ff fe9e 	bl	801562c <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80158f0:	4604      	mov	r4, r0
 80158f2:	b138      	cbz	r0, 8015904 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80158f4:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80158f6:	461a      	mov	r2, r3
 80158f8:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80158fa:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80158fc:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80158fe:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015900:	f7ff ff1e 	bl	8015740 <xQueueGenericSend>
	}
 8015904:	4620      	mov	r0, r4
 8015906:	b002      	add	sp, #8
 8015908:	bd10      	pop	{r4, pc}
 801590a:	bf00      	nop

0801590c <xQueueCreateMutex>:
	{
 801590c:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801590e:	2048      	movs	r0, #72	; 0x48
 8015910:	f001 fed2 	bl	80176b8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015914:	4604      	mov	r4, r0
 8015916:	b188      	cbz	r0, 801593c <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015918:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 801591a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801591c:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801591e:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8015922:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015926:	f7ff fe39 	bl	801559c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801592a:	462b      	mov	r3, r5
 801592c:	462a      	mov	r2, r5
 801592e:	4629      	mov	r1, r5
 8015930:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015932:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015934:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015936:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015938:	f7ff ff02 	bl	8015740 <xQueueGenericSend>
	}
 801593c:	4620      	mov	r0, r4
 801593e:	bd38      	pop	{r3, r4, r5, pc}

08015940 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8015940:	2800      	cmp	r0, #0
 8015942:	d053      	beq.n	80159ec <xQueueGenericSendFromISR+0xac>
{
 8015944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015948:	460e      	mov	r6, r1
 801594a:	4604      	mov	r4, r0
 801594c:	4617      	mov	r7, r2
 801594e:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015950:	b359      	cbz	r1, 80159aa <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015952:	2d02      	cmp	r5, #2
 8015954:	d10d      	bne.n	8015972 <xQueueGenericSendFromISR+0x32>
 8015956:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015958:	2b01      	cmp	r3, #1
 801595a:	d00a      	beq.n	8015972 <xQueueGenericSendFromISR+0x32>
 801595c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015960:	b672      	cpsid	i
 8015962:	f383 8811 	msr	BASEPRI, r3
 8015966:	f3bf 8f6f 	isb	sy
 801596a:	f3bf 8f4f 	dsb	sy
 801596e:	b662      	cpsie	i
 8015970:	e7fe      	b.n	8015970 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015972:	f001 fe3d 	bl	80175f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015976:	f3ef 8811 	mrs	r8, BASEPRI
 801597a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801597e:	b672      	cpsid	i
 8015980:	f383 8811 	msr	BASEPRI, r3
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801598e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015992:	429a      	cmp	r2, r3
 8015994:	d317      	bcc.n	80159c6 <xQueueGenericSendFromISR+0x86>
 8015996:	f1a5 0002 	sub.w	r0, r5, #2
 801599a:	fab0 f080 	clz	r0, r0
 801599e:	0940      	lsrs	r0, r0, #5
 80159a0:	b988      	cbnz	r0, 80159c6 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80159a2:	f388 8811 	msr	BASEPRI, r8
}
 80159a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d0d0      	beq.n	8015952 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80159b0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159b4:	b672      	cpsid	i
 80159b6:	f383 8811 	msr	BASEPRI, r3
 80159ba:	f3bf 8f6f 	isb	sy
 80159be:	f3bf 8f4f 	dsb	sy
 80159c2:	b662      	cpsie	i
 80159c4:	e7fe      	b.n	80159c4 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80159c6:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80159c8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80159cc:	4631      	mov	r1, r6
 80159ce:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80159d0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80159d2:	f7ff fd5b 	bl	801548c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80159d6:	1c6b      	adds	r3, r5, #1
 80159d8:	d013      	beq.n	8015a02 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159da:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80159dc:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159de:	b25b      	sxtb	r3, r3
 80159e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80159e4:	f388 8811 	msr	BASEPRI, r8
}
 80159e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 80159ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159f0:	b672      	cpsid	i
 80159f2:	f383 8811 	msr	BASEPRI, r3
 80159f6:	f3bf 8f6f 	isb	sy
 80159fa:	f3bf 8f4f 	dsb	sy
 80159fe:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015a00:	e7fe      	b.n	8015a00 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a04:	b90b      	cbnz	r3, 8015a0a <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8015a06:	2001      	movs	r0, #1
 8015a08:	e7cb      	b.n	80159a2 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015a0e:	f000 ff39 	bl	8016884 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0f7      	beq.n	8015a06 <xQueueGenericSendFromISR+0xc6>
 8015a16:	2f00      	cmp	r7, #0
 8015a18:	d0f5      	beq.n	8015a06 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a1a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015a1c:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a1e:	603b      	str	r3, [r7, #0]
 8015a20:	e7bf      	b.n	80159a2 <xQueueGenericSendFromISR+0x62>
 8015a22:	bf00      	nop

08015a24 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8015a24:	b380      	cbz	r0, 8015a88 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015a26:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8015a28:	b570      	push	{r4, r5, r6, lr}
 8015a2a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015a2c:	b153      	cbz	r3, 8015a44 <xQueueGiveFromISR+0x20>
 8015a2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a32:	b672      	cpsid	i
 8015a34:	f383 8811 	msr	BASEPRI, r3
 8015a38:	f3bf 8f6f 	isb	sy
 8015a3c:	f3bf 8f4f 	dsb	sy
 8015a40:	b662      	cpsie	i
 8015a42:	e7fe      	b.n	8015a42 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015a44:	6803      	ldr	r3, [r0, #0]
 8015a46:	460d      	mov	r5, r1
 8015a48:	b34b      	cbz	r3, 8015a9e <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a4a:	f001 fdd1 	bl	80175f0 <vPortValidateInterruptPriority>
	__asm volatile
 8015a4e:	f3ef 8611 	mrs	r6, BASEPRI
 8015a52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a56:	b672      	cpsid	i
 8015a58:	f383 8811 	msr	BASEPRI, r3
 8015a5c:	f3bf 8f6f 	isb	sy
 8015a60:	f3bf 8f4f 	dsb	sy
 8015a64:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015a68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d925      	bls.n	8015aba <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a6e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015a72:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8015a74:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015a76:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a78:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8015a7a:	d022      	beq.n	8015ac2 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a7c:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8015a7e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a80:	b25b      	sxtb	r3, r3
 8015a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a86:	e019      	b.n	8015abc <xQueueGiveFromISR+0x98>
	__asm volatile
 8015a88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a8c:	b672      	cpsid	i
 8015a8e:	f383 8811 	msr	BASEPRI, r3
 8015a92:	f3bf 8f6f 	isb	sy
 8015a96:	f3bf 8f4f 	dsb	sy
 8015a9a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015a9c:	e7fe      	b.n	8015a9c <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015a9e:	6883      	ldr	r3, [r0, #8]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d0d2      	beq.n	8015a4a <xQueueGiveFromISR+0x26>
 8015aa4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015aa8:	b672      	cpsid	i
 8015aaa:	f383 8811 	msr	BASEPRI, r3
 8015aae:	f3bf 8f6f 	isb	sy
 8015ab2:	f3bf 8f4f 	dsb	sy
 8015ab6:	b662      	cpsie	i
 8015ab8:	e7fe      	b.n	8015ab8 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8015aba:	2000      	movs	r0, #0
	__asm volatile
 8015abc:	f386 8811 	msr	BASEPRI, r6
}
 8015ac0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ac4:	b90b      	cbnz	r3, 8015aca <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8015ac6:	2001      	movs	r0, #1
 8015ac8:	e7f8      	b.n	8015abc <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015aca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015ace:	f000 fed9 	bl	8016884 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015ad2:	2d00      	cmp	r5, #0
 8015ad4:	d0f7      	beq.n	8015ac6 <xQueueGiveFromISR+0xa2>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d0f5      	beq.n	8015ac6 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015ada:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015adc:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015ade:	602b      	str	r3, [r5, #0]
 8015ae0:	e7ec      	b.n	8015abc <xQueueGiveFromISR+0x98>
 8015ae2:	bf00      	nop

08015ae4 <xQueueReceive>:
{
 8015ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ae8:	b085      	sub	sp, #20
 8015aea:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015aec:	2800      	cmp	r0, #0
 8015aee:	f000 80a4 	beq.w	8015c3a <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015af2:	460d      	mov	r5, r1
 8015af4:	4604      	mov	r4, r0
 8015af6:	2900      	cmp	r1, #0
 8015af8:	d047      	beq.n	8015b8a <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015afa:	f000 ff73 	bl	80169e4 <xTaskGetSchedulerState>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d051      	beq.n	8015ba6 <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8015b02:	f001 fc6f 	bl	80173e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b08:	2e00      	cmp	r6, #0
 8015b0a:	d16b      	bne.n	8015be4 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b0c:	9b01      	ldr	r3, [sp, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d035      	beq.n	8015b7e <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8015b12:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b14:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8015b18:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b1c:	a802      	add	r0, sp, #8
 8015b1e:	f000 fefd 	bl	801691c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8015b22:	f001 fc85 	bl	8017430 <vPortExitCritical>
		vTaskSuspendAll();
 8015b26:	f000 fcc1 	bl	80164ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b2a:	f001 fc5b 	bl	80173e4 <vPortEnterCritical>
 8015b2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b32:	2bff      	cmp	r3, #255	; 0xff
 8015b34:	d101      	bne.n	8015b3a <xQueueReceive+0x56>
 8015b36:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015b3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015b3e:	2bff      	cmp	r3, #255	; 0xff
 8015b40:	d101      	bne.n	8015b46 <xQueueReceive+0x62>
 8015b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015b46:	f001 fc73 	bl	8017430 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b4a:	a901      	add	r1, sp, #4
 8015b4c:	a802      	add	r0, sp, #8
 8015b4e:	f000 fef1 	bl	8016934 <xTaskCheckForTimeOut>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d135      	bne.n	8015bc2 <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8015b56:	f001 fc45 	bl	80173e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d056      	beq.n	8015c0e <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8015b60:	f001 fc66 	bl	8017430 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015b64:	4620      	mov	r0, r4
 8015b66:	f7ff fcd3 	bl	8015510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b6a:	f000 fdfb 	bl	8016764 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015b6e:	f001 fc39 	bl	80173e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b72:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b74:	2e00      	cmp	r6, #0
 8015b76:	d135      	bne.n	8015be4 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b78:	9b01      	ldr	r3, [sp, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d1d1      	bne.n	8015b22 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8015b7e:	f001 fc57 	bl	8017430 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8015b82:	2000      	movs	r0, #0
}
 8015b84:	b005      	add	sp, #20
 8015b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d0b4      	beq.n	8015afa <xQueueReceive+0x16>
	__asm volatile
 8015b90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b94:	b672      	cpsid	i
 8015b96:	f383 8811 	msr	BASEPRI, r3
 8015b9a:	f3bf 8f6f 	isb	sy
 8015b9e:	f3bf 8f4f 	dsb	sy
 8015ba2:	b662      	cpsie	i
 8015ba4:	e7fe      	b.n	8015ba4 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ba6:	9b01      	ldr	r3, [sp, #4]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d0aa      	beq.n	8015b02 <xQueueReceive+0x1e>
 8015bac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bb0:	b672      	cpsid	i
 8015bb2:	f383 8811 	msr	BASEPRI, r3
 8015bb6:	f3bf 8f6f 	isb	sy
 8015bba:	f3bf 8f4f 	dsb	sy
 8015bbe:	b662      	cpsie	i
 8015bc0:	e7fe      	b.n	8015bc0 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f7ff fca4 	bl	8015510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bc8:	f000 fdcc 	bl	8016764 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015bcc:	f001 fc0a 	bl	80173e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015bd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d0d3      	beq.n	8015b7e <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8015bd6:	f001 fc2b 	bl	8017430 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015bda:	f001 fc03 	bl	80173e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015bde:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015be0:	2e00      	cmp	r6, #0
 8015be2:	d0c9      	beq.n	8015b78 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015be4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015be6:	b152      	cbz	r2, 8015bfe <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015be8:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015bea:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015bec:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015bee:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015bf0:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015bf2:	d301      	bcc.n	8015bf8 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015bf4:	6821      	ldr	r1, [r4, #0]
 8015bf6:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	f00e fa23 	bl	8024044 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015bfe:	3e01      	subs	r6, #1
 8015c00:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c02:	6923      	ldr	r3, [r4, #16]
 8015c04:	bb23      	cbnz	r3, 8015c50 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8015c06:	f001 fc13 	bl	8017430 <vPortExitCritical>
				return pdPASS;
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	e7ba      	b.n	8015b84 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8015c0e:	f001 fc0f 	bl	8017430 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015c12:	9901      	ldr	r1, [sp, #4]
 8015c14:	4640      	mov	r0, r8
 8015c16:	f000 fdf9 	bl	801680c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f7ff fc78 	bl	8015510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015c20:	f000 fda0 	bl	8016764 <xTaskResumeAll>
 8015c24:	2800      	cmp	r0, #0
 8015c26:	d1d8      	bne.n	8015bda <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8015c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015c2c:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8015c30:	f3bf 8f4f 	dsb	sy
 8015c34:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8015c38:	e7cf      	b.n	8015bda <xQueueReceive+0xf6>
 8015c3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c3e:	b672      	cpsid	i
 8015c40:	f383 8811 	msr	BASEPRI, r3
 8015c44:	f3bf 8f6f 	isb	sy
 8015c48:	f3bf 8f4f 	dsb	sy
 8015c4c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015c4e:	e7fe      	b.n	8015c4e <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c50:	f104 0010 	add.w	r0, r4, #16
 8015c54:	f000 fe16 	bl	8016884 <xTaskRemoveFromEventList>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d0d4      	beq.n	8015c06 <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8015c5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015c68:	f3bf 8f4f 	dsb	sy
 8015c6c:	f3bf 8f6f 	isb	sy
 8015c70:	e7c9      	b.n	8015c06 <xQueueReceive+0x122>
 8015c72:	bf00      	nop

08015c74 <xQueueSemaphoreTake>:
{
 8015c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c76:	b085      	sub	sp, #20
 8015c78:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d057      	beq.n	8015d2e <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015c7e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8015c80:	4604      	mov	r4, r0
 8015c82:	b156      	cbz	r6, 8015c9a <xQueueSemaphoreTake+0x26>
 8015c84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c88:	b672      	cpsid	i
 8015c8a:	f383 8811 	msr	BASEPRI, r3
 8015c8e:	f3bf 8f6f 	isb	sy
 8015c92:	f3bf 8f4f 	dsb	sy
 8015c96:	b662      	cpsie	i
 8015c98:	e7fe      	b.n	8015c98 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c9a:	f000 fea3 	bl	80169e4 <xTaskGetSchedulerState>
 8015c9e:	4605      	mov	r5, r0
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d04f      	beq.n	8015d44 <xQueueSemaphoreTake+0xd0>
 8015ca4:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8015ca6:	f001 fb9d 	bl	80173e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8015cac:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015cae:	bb8b      	cbnz	r3, 8015d14 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015cb0:	9b01      	ldr	r3, [sp, #4]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	f000 809f 	beq.w	8015df6 <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	d05d      	beq.n	8015d78 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8015cbc:	f001 fbb8 	bl	8017430 <vPortExitCritical>
		vTaskSuspendAll();
 8015cc0:	f000 fbf4 	bl	80164ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cc4:	f001 fb8e 	bl	80173e4 <vPortEnterCritical>
 8015cc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015ccc:	2bff      	cmp	r3, #255	; 0xff
 8015cce:	d101      	bne.n	8015cd4 <xQueueSemaphoreTake+0x60>
 8015cd0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015cd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015cd8:	2bff      	cmp	r3, #255	; 0xff
 8015cda:	d101      	bne.n	8015ce0 <xQueueSemaphoreTake+0x6c>
 8015cdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ce0:	f001 fba6 	bl	8017430 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ce4:	a901      	add	r1, sp, #4
 8015ce6:	a802      	add	r0, sp, #8
 8015ce8:	f000 fe24 	bl	8016934 <xTaskCheckForTimeOut>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	d137      	bne.n	8015d60 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8015cf0:	f001 fb78 	bl	80173e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d042      	beq.n	8015d80 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8015cfa:	f001 fb99 	bl	8017430 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015cfe:	4620      	mov	r0, r4
 8015d00:	f7ff fc06 	bl	8015510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015d04:	f000 fd2e 	bl	8016764 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015d08:	f001 fb6c 	bl	80173e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015d0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015d0e:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d0cd      	beq.n	8015cb0 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015d14:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d16:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015d18:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d1a:	2a00      	cmp	r2, #0
 8015d1c:	f000 8089 	beq.w	8015e32 <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d20:	6923      	ldr	r3, [r4, #16]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d174      	bne.n	8015e10 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8015d26:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8015d28:	f001 fb82 	bl	8017430 <vPortExitCritical>
				return pdPASS;
 8015d2c:	e046      	b.n	8015dbc <xQueueSemaphoreTake+0x148>
 8015d2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d32:	b672      	cpsid	i
 8015d34:	f383 8811 	msr	BASEPRI, r3
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015d42:	e7fe      	b.n	8015d42 <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d44:	9b01      	ldr	r3, [sp, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d03b      	beq.n	8015dc2 <xQueueSemaphoreTake+0x14e>
 8015d4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d4e:	b672      	cpsid	i
 8015d50:	f383 8811 	msr	BASEPRI, r3
 8015d54:	f3bf 8f6f 	isb	sy
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	b662      	cpsie	i
 8015d5e:	e7fe      	b.n	8015d5e <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8015d60:	4620      	mov	r0, r4
 8015d62:	f7ff fbd5 	bl	8015510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d66:	f000 fcfd 	bl	8016764 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015d6a:	f001 fb3b 	bl	80173e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015d70:	b30b      	cbz	r3, 8015db6 <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 8015d72:	f001 fb5d 	bl	8017430 <vPortExitCritical>
	return xReturn;
 8015d76:	e7c7      	b.n	8015d08 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d78:	a802      	add	r0, sp, #8
 8015d7a:	f000 fdcf 	bl	801691c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d7e:	e79d      	b.n	8015cbc <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8015d80:	f001 fb56 	bl	8017430 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	b36b      	cbz	r3, 8015de4 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015d8e:	f000 fd3d 	bl	801680c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d92:	4620      	mov	r0, r4
 8015d94:	f7ff fbbc 	bl	8015510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d98:	f000 fce4 	bl	8016764 <xTaskResumeAll>
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	d1b3      	bne.n	8015d08 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8015da0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015da8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015dac:	f3bf 8f4f 	dsb	sy
 8015db0:	f3bf 8f6f 	isb	sy
 8015db4:	e7a8      	b.n	8015d08 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8015db6:	f001 fb3b 	bl	8017430 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8015dba:	b926      	cbnz	r6, 8015dc6 <xQueueSemaphoreTake+0x152>
}
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	b005      	add	sp, #20
 8015dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dc2:	4606      	mov	r6, r0
 8015dc4:	e76f      	b.n	8015ca6 <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8015dc6:	f001 fb0d 	bl	80173e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015dca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015dcc:	b119      	cbz	r1, 8015dd6 <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015dce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015dd0:	6819      	ldr	r1, [r3, #0]
 8015dd2:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015dd6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8015dd8:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015dda:	f000 fecb 	bl	8016b74 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8015dde:	f001 fb27 	bl	8017430 <vPortExitCritical>
 8015de2:	e7eb      	b.n	8015dbc <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8015de4:	f001 fafe 	bl	80173e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015de8:	68a0      	ldr	r0, [r4, #8]
 8015dea:	f000 fe0b 	bl	8016a04 <xTaskPriorityInherit>
 8015dee:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8015df0:	f001 fb1e 	bl	8017430 <vPortExitCritical>
 8015df4:	e7c8      	b.n	8015d88 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015df6:	2e00      	cmp	r6, #0
 8015df8:	d0f1      	beq.n	8015dde <xQueueSemaphoreTake+0x16a>
 8015dfa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dfe:	b672      	cpsid	i
 8015e00:	f383 8811 	msr	BASEPRI, r3
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	b662      	cpsie	i
 8015e0e:	e7fe      	b.n	8015e0e <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e10:	f104 0010 	add.w	r0, r4, #16
 8015e14:	f000 fd36 	bl	8016884 <xTaskRemoveFromEventList>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d084      	beq.n	8015d26 <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8015e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	e779      	b.n	8015d26 <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015e32:	f000 ff0d 	bl	8016c50 <pvTaskIncrementMutexHeldCount>
 8015e36:	60a0      	str	r0, [r4, #8]
 8015e38:	e772      	b.n	8015d20 <xQueueSemaphoreTake+0xac>
 8015e3a:	bf00      	nop

08015e3c <xQueueReceiveFromISR>:
{
 8015e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8015e40:	b330      	cbz	r0, 8015e90 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e42:	460e      	mov	r6, r1
 8015e44:	4604      	mov	r4, r0
 8015e46:	4617      	mov	r7, r2
 8015e48:	b1a1      	cbz	r1, 8015e74 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e4a:	f001 fbd1 	bl	80175f0 <vPortValidateInterruptPriority>
	__asm volatile
 8015e4e:	f3ef 8911 	mrs	r9, BASEPRI
 8015e52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e56:	b672      	cpsid	i
 8015e58:	f383 8811 	msr	BASEPRI, r3
 8015e5c:	f3bf 8f6f 	isb	sy
 8015e60:	f3bf 8f4f 	dsb	sy
 8015e64:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e68:	b9ed      	cbnz	r5, 8015ea6 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8015e6a:	4628      	mov	r0, r5
	__asm volatile
 8015e6c:	f389 8811 	msr	BASEPRI, r9
}
 8015e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d0e7      	beq.n	8015e4a <xQueueReceiveFromISR+0xe>
	__asm volatile
 8015e7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e7e:	b672      	cpsid	i
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	b662      	cpsie	i
 8015e8e:	e7fe      	b.n	8015e8e <xQueueReceiveFromISR+0x52>
 8015e90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e94:	b672      	cpsid	i
 8015e96:	f383 8811 	msr	BASEPRI, r3
 8015e9a:	f3bf 8f6f 	isb	sy
 8015e9e:	f3bf 8f4f 	dsb	sy
 8015ea2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015ea4:	e7fe      	b.n	8015ea4 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8015ea6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015eaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8015eac:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015eb0:	b142      	cbz	r2, 8015ec4 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015eb2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015eb4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015eb6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015eb8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015eba:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015ebc:	d215      	bcs.n	8015eea <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	f00e f8c0 	bl	8024044 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ec4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8015ec6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015eca:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8015ecc:	d009      	beq.n	8015ee2 <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015ece:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8015ed2:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015ed4:	b25b      	sxtb	r3, r3
 8015ed6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8015eda:	f389 8811 	msr	BASEPRI, r9
}
 8015ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ee2:	6923      	ldr	r3, [r4, #16]
 8015ee4:	b923      	cbnz	r3, 8015ef0 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	e7c0      	b.n	8015e6c <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015eea:	6821      	ldr	r1, [r4, #0]
 8015eec:	60e1      	str	r1, [r4, #12]
 8015eee:	e7e6      	b.n	8015ebe <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ef0:	f104 0010 	add.w	r0, r4, #16
 8015ef4:	f000 fcc6 	bl	8016884 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8015ef8:	2f00      	cmp	r7, #0
 8015efa:	d0f4      	beq.n	8015ee6 <xQueueReceiveFromISR+0xaa>
 8015efc:	2800      	cmp	r0, #0
 8015efe:	d0f2      	beq.n	8015ee6 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015f00:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015f02:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015f04:	603b      	str	r3, [r7, #0]
 8015f06:	e7b1      	b.n	8015e6c <xQueueReceiveFromISR+0x30>

08015f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015f08:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	4c08      	ldr	r4, [pc, #32]	; (8015f30 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015f0e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8015f12:	b12a      	cbz	r2, 8015f20 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f14:	3301      	adds	r3, #1
 8015f16:	2b08      	cmp	r3, #8
 8015f18:	d1f9      	bne.n	8015f0e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f1e:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015f20:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015f24:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8015f28:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015f2c:	6050      	str	r0, [r2, #4]
	}
 8015f2e:	4770      	bx	lr
 8015f30:	2000603c 	.word	0x2000603c

08015f34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	4604      	mov	r4, r0
 8015f38:	460e      	mov	r6, r1
 8015f3a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015f3c:	f001 fa52 	bl	80173e4 <vPortEnterCritical>
 8015f40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015f44:	2bff      	cmp	r3, #255	; 0xff
 8015f46:	d102      	bne.n	8015f4e <vQueueWaitForMessageRestricted+0x1a>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015f4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015f52:	2bff      	cmp	r3, #255	; 0xff
 8015f54:	d102      	bne.n	8015f5c <vQueueWaitForMessageRestricted+0x28>
 8015f56:	2300      	movs	r3, #0
 8015f58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f5c:	f001 fa68 	bl	8017430 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f62:	b123      	cbz	r3, 8015f6e <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015f64:	4620      	mov	r0, r4
	}
 8015f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015f6a:	f7ff bad1 	b.w	8015510 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015f6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015f72:	462a      	mov	r2, r5
 8015f74:	4631      	mov	r1, r6
 8015f76:	f000 fc65 	bl	8016844 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8015f7a:	4620      	mov	r0, r4
	}
 8015f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015f80:	f7ff bac6 	b.w	8015510 <prvUnlockQueue>

08015f84 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f88:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015f8a:	f001 fa2b 	bl	80173e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015f8e:	4a35      	ldr	r2, [pc, #212]	; (8016064 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8015f90:	4d35      	ldr	r5, [pc, #212]	; (8016068 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8015f92:	6813      	ldr	r3, [r2, #0]
 8015f94:	3301      	adds	r3, #1
 8015f96:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015f98:	682b      	ldr	r3, [r5, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d034      	beq.n	8016008 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015f9e:	4e33      	ldr	r6, [pc, #204]	; (801606c <prvAddNewTaskToReadyList+0xe8>)
 8015fa0:	6833      	ldr	r3, [r6, #0]
 8015fa2:	b343      	cbz	r3, 8015ff6 <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015fa6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8016090 <prvAddNewTaskToReadyList+0x10c>
 8015faa:	2201      	movs	r2, #1
		uxTaskNumber++;
 8015fac:	4f30      	ldr	r7, [pc, #192]	; (8016070 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8015fae:	4931      	ldr	r1, [pc, #196]	; (8016074 <prvAddNewTaskToReadyList+0xf0>)
 8015fb0:	409a      	lsls	r2, r3
 8015fb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015fb6:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015fc0:	680b      	ldr	r3, [r1, #0]
 8015fc2:	431a      	orrs	r2, r3
 8015fc4:	600a      	str	r2, [r1, #0]
 8015fc6:	1d21      	adds	r1, r4, #4
 8015fc8:	f7ff fa24 	bl	8015414 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015fcc:	f001 fa30 	bl	8017430 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015fd0:	6833      	ldr	r3, [r6, #0]
 8015fd2:	b173      	cbz	r3, 8015ff2 <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015fd4:	682a      	ldr	r2, [r5, #0]
 8015fd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d209      	bcs.n	8015ff2 <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015fde:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fe6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015ff6:	682a      	ldr	r2, [r5, #0]
 8015ff8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015ffa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015ffc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8016090 <prvAddNewTaskToReadyList+0x10c>
 8016000:	429a      	cmp	r2, r3
 8016002:	d8d2      	bhi.n	8015faa <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8016004:	602c      	str	r4, [r5, #0]
 8016006:	e7d0      	b.n	8015faa <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8016008:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801600a:	6813      	ldr	r3, [r2, #0]
 801600c:	2b01      	cmp	r3, #1
 801600e:	d004      	beq.n	801601a <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8016010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016012:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8016090 <prvAddNewTaskToReadyList+0x10c>
 8016016:	4e15      	ldr	r6, [pc, #84]	; (801606c <prvAddNewTaskToReadyList+0xe8>)
 8016018:	e7c7      	b.n	8015faa <prvAddNewTaskToReadyList+0x26>
 801601a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8016090 <prvAddNewTaskToReadyList+0x10c>
 801601e:	4646      	mov	r6, r8
 8016020:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016024:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016026:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016028:	f7ff f9e4 	bl	80153f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801602c:	42b7      	cmp	r7, r6
 801602e:	d1f9      	bne.n	8016024 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016030:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8016094 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8016034:	4f10      	ldr	r7, [pc, #64]	; (8016078 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8016036:	4648      	mov	r0, r9
 8016038:	4e0c      	ldr	r6, [pc, #48]	; (801606c <prvAddNewTaskToReadyList+0xe8>)
 801603a:	f7ff f9db 	bl	80153f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801603e:	4638      	mov	r0, r7
 8016040:	f7ff f9d8 	bl	80153f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016044:	480d      	ldr	r0, [pc, #52]	; (801607c <prvAddNewTaskToReadyList+0xf8>)
 8016046:	f7ff f9d5 	bl	80153f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801604a:	480d      	ldr	r0, [pc, #52]	; (8016080 <prvAddNewTaskToReadyList+0xfc>)
 801604c:	f7ff f9d2 	bl	80153f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016050:	480c      	ldr	r0, [pc, #48]	; (8016084 <prvAddNewTaskToReadyList+0x100>)
 8016052:	f7ff f9cf 	bl	80153f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016056:	4b0c      	ldr	r3, [pc, #48]	; (8016088 <prvAddNewTaskToReadyList+0x104>)
 8016058:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801605c:	4b0b      	ldr	r3, [pc, #44]	; (801608c <prvAddNewTaskToReadyList+0x108>)
 801605e:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8016060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8016062:	e7a2      	b.n	8015faa <prvAddNewTaskToReadyList+0x26>
 8016064:	20006114 	.word	0x20006114
 8016068:	2000607c 	.word	0x2000607c
 801606c:	20006170 	.word	0x20006170
 8016070:	20006124 	.word	0x20006124
 8016074:	20006128 	.word	0x20006128
 8016078:	20006140 	.word	0x20006140
 801607c:	2000615c 	.word	0x2000615c
 8016080:	20006188 	.word	0x20006188
 8016084:	20006174 	.word	0x20006174
 8016088:	20006080 	.word	0x20006080
 801608c:	20006084 	.word	0x20006084
 8016090:	20006088 	.word	0x20006088
 8016094:	2000612c 	.word	0x2000612c

08016098 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801609a:	4b1b      	ldr	r3, [pc, #108]	; (8016108 <prvAddCurrentTaskToDelayedList+0x70>)
{
 801609c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801609e:	4e1b      	ldr	r6, [pc, #108]	; (801610c <prvAddCurrentTaskToDelayedList+0x74>)
{
 80160a0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80160a2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160a4:	6833      	ldr	r3, [r6, #0]
 80160a6:	1d18      	adds	r0, r3, #4
 80160a8:	f7ff f9dc 	bl	8015464 <uxListRemove>
 80160ac:	b948      	cbnz	r0, 80160c2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80160ae:	6833      	ldr	r3, [r6, #0]
 80160b0:	4917      	ldr	r1, [pc, #92]	; (8016110 <prvAddCurrentTaskToDelayedList+0x78>)
 80160b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160b4:	2301      	movs	r3, #1
 80160b6:	fa03 f202 	lsl.w	r2, r3, r2
 80160ba:	680b      	ldr	r3, [r1, #0]
 80160bc:	ea23 0302 	bic.w	r3, r3, r2
 80160c0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80160c2:	1c63      	adds	r3, r4, #1
 80160c4:	d100      	bne.n	80160c8 <prvAddCurrentTaskToDelayedList+0x30>
 80160c6:	b9bf      	cbnz	r7, 80160f8 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80160c8:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80160ca:	6833      	ldr	r3, [r6, #0]
 80160cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80160ce:	d307      	bcc.n	80160e0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80160d0:	4b10      	ldr	r3, [pc, #64]	; (8016114 <prvAddCurrentTaskToDelayedList+0x7c>)
 80160d2:	6818      	ldr	r0, [r3, #0]
 80160d4:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80160d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80160da:	3104      	adds	r1, #4
 80160dc:	f7ff b9aa 	b.w	8015434 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80160e0:	4b0d      	ldr	r3, [pc, #52]	; (8016118 <prvAddCurrentTaskToDelayedList+0x80>)
 80160e2:	6818      	ldr	r0, [r3, #0]
 80160e4:	6831      	ldr	r1, [r6, #0]
 80160e6:	3104      	adds	r1, #4
 80160e8:	f7ff f9a4 	bl	8015434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80160ec:	4b0b      	ldr	r3, [pc, #44]	; (801611c <prvAddCurrentTaskToDelayedList+0x84>)
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	42a2      	cmp	r2, r4
 80160f2:	d900      	bls.n	80160f6 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 80160f4:	601c      	str	r4, [r3, #0]
}
 80160f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80160f8:	6831      	ldr	r1, [r6, #0]
 80160fa:	4809      	ldr	r0, [pc, #36]	; (8016120 <prvAddCurrentTaskToDelayedList+0x88>)
 80160fc:	3104      	adds	r1, #4
}
 80160fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016102:	f7ff b987 	b.w	8015414 <vListInsertEnd>
 8016106:	bf00      	nop
 8016108:	2000619c 	.word	0x2000619c
 801610c:	2000607c 	.word	0x2000607c
 8016110:	20006128 	.word	0x20006128
 8016114:	20006084 	.word	0x20006084
 8016118:	20006080 	.word	0x20006080
 801611c:	20006154 	.word	0x20006154
 8016120:	20006174 	.word	0x20006174

08016124 <prvDeleteTCB>:
	{
 8016124:	b510      	push	{r4, lr}
 8016126:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016128:	304c      	adds	r0, #76	; 0x4c
 801612a:	f00f f847 	bl	80251bc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801612e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8016132:	b173      	cbz	r3, 8016152 <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016134:	2b01      	cmp	r3, #1
 8016136:	d015      	beq.n	8016164 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016138:	2b02      	cmp	r3, #2
 801613a:	d012      	beq.n	8016162 <prvDeleteTCB+0x3e>
	__asm volatile
 801613c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016140:	b672      	cpsid	i
 8016142:	f383 8811 	msr	BASEPRI, r3
 8016146:	f3bf 8f6f 	isb	sy
 801614a:	f3bf 8f4f 	dsb	sy
 801614e:	b662      	cpsie	i
 8016150:	e7fe      	b.n	8016150 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 8016152:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016154:	f001 fb4c 	bl	80177f0 <vPortFree>
				vPortFree( pxTCB );
 8016158:	4620      	mov	r0, r4
	}
 801615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801615e:	f001 bb47 	b.w	80177f0 <vPortFree>
	}
 8016162:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8016164:	4620      	mov	r0, r4
	}
 8016166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801616a:	f001 bb41 	b.w	80177f0 <vPortFree>
 801616e:	bf00      	nop

08016170 <prvIdleTask>:
{
 8016170:	4c16      	ldr	r4, [pc, #88]	; (80161cc <prvIdleTask+0x5c>)
				taskYIELD();
 8016172:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8016176:	4e16      	ldr	r6, [pc, #88]	; (80161d0 <prvIdleTask+0x60>)
 8016178:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 801617c:	4d15      	ldr	r5, [pc, #84]	; (80161d4 <prvIdleTask+0x64>)
 801617e:	f8df a058 	ldr.w	sl, [pc, #88]	; 80161d8 <prvIdleTask+0x68>
{
 8016182:	b580      	push	{r7, lr}
 8016184:	e011      	b.n	80161aa <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8016186:	f001 f92d 	bl	80173e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801618a:	68f3      	ldr	r3, [r6, #12]
 801618c:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801618e:	1d38      	adds	r0, r7, #4
 8016190:	f7ff f968 	bl	8015464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016194:	682b      	ldr	r3, [r5, #0]
 8016196:	3b01      	subs	r3, #1
 8016198:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801619a:	6823      	ldr	r3, [r4, #0]
 801619c:	3b01      	subs	r3, #1
 801619e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80161a0:	f001 f946 	bl	8017430 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80161a4:	4638      	mov	r0, r7
 80161a6:	f7ff ffbd 	bl	8016124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161aa:	6823      	ldr	r3, [r4, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d1ea      	bne.n	8016186 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80161b0:	f8da 3000 	ldr.w	r3, [sl]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d905      	bls.n	80161c4 <prvIdleTask+0x54>
				taskYIELD();
 80161b8:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80161c4:	f7ea fe52 	bl	8000e6c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80161c8:	e7ef      	b.n	80161aa <prvIdleTask+0x3a>
 80161ca:	bf00      	nop
 80161cc:	20006118 	.word	0x20006118
 80161d0:	20006188 	.word	0x20006188
 80161d4:	20006114 	.word	0x20006114
 80161d8:	20006088 	.word	0x20006088

080161dc <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 80161dc:	4b1d      	ldr	r3, [pc, #116]	; (8016254 <vTaskSwitchContext.part.0+0x78>)
 80161de:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 80161e0:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 80161e2:	4c1d      	ldr	r4, [pc, #116]	; (8016258 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 80161e4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80161e6:	6822      	ldr	r2, [r4, #0]
 80161e8:	6823      	ldr	r3, [r4, #0]
 80161ea:	6812      	ldr	r2, [r2, #0]
 80161ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d927      	bls.n	8016242 <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161f2:	4b1a      	ldr	r3, [pc, #104]	; (801625c <vTaskSwitchContext.part.0+0x80>)
 80161f4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80161f6:	fab3 f383 	clz	r3, r3
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	4a18      	ldr	r2, [pc, #96]	; (8016260 <vTaskSwitchContext.part.0+0x84>)
 80161fe:	f1c3 031f 	rsb	r3, r3, #31
 8016202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016206:	0099      	lsls	r1, r3, #2
 8016208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801620c:	5850      	ldr	r0, [r2, r1]
 801620e:	b950      	cbnz	r0, 8016226 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 8016210:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016214:	b672      	cpsid	i
 8016216:	f383 8811 	msr	BASEPRI, r3
 801621a:	f3bf 8f6f 	isb	sy
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	b662      	cpsie	i
 8016224:	e7fe      	b.n	8016224 <vTaskSwitchContext.part.0+0x48>
 8016226:	6858      	ldr	r0, [r3, #4]
 8016228:	3108      	adds	r1, #8
 801622a:	6840      	ldr	r0, [r0, #4]
 801622c:	440a      	add	r2, r1
 801622e:	4290      	cmp	r0, r2
 8016230:	6058      	str	r0, [r3, #4]
 8016232:	d00c      	beq.n	801624e <vTaskSwitchContext.part.0+0x72>
 8016234:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016236:	4a0b      	ldr	r2, [pc, #44]	; (8016264 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016238:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801623a:	6823      	ldr	r3, [r4, #0]
 801623c:	334c      	adds	r3, #76	; 0x4c
 801623e:	6013      	str	r3, [r2, #0]
}
 8016240:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8016242:	6820      	ldr	r0, [r4, #0]
 8016244:	6821      	ldr	r1, [r4, #0]
 8016246:	3134      	adds	r1, #52	; 0x34
 8016248:	f7ea fe12 	bl	8000e70 <vApplicationStackOverflowHook>
 801624c:	e7d1      	b.n	80161f2 <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801624e:	6840      	ldr	r0, [r0, #4]
 8016250:	6058      	str	r0, [r3, #4]
 8016252:	e7ef      	b.n	8016234 <vTaskSwitchContext.part.0+0x58>
 8016254:	200061a0 	.word	0x200061a0
 8016258:	2000607c 	.word	0x2000607c
 801625c:	20006128 	.word	0x20006128
 8016260:	20006088 	.word	0x20006088
 8016264:	2000048c 	.word	0x2000048c

08016268 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8016268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801626c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801626e:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016270:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8016274:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016276:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8016278:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801627a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801627e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016282:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8016286:	2900      	cmp	r1, #0
 8016288:	d041      	beq.n	801630e <prvInitialiseNewTask.constprop.0+0xa6>
 801628a:	f101 3cff 	add.w	ip, r1, #4294967295
 801628e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8016292:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016294:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8016298:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801629c:	b10d      	cbz	r5, 80162a2 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801629e:	458c      	cmp	ip, r1
 80162a0:	d1f8      	bne.n	8016294 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80162a2:	2300      	movs	r3, #0
 80162a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80162a8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80162aa:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80162ae:	1d20      	adds	r0, r4, #4
 80162b0:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80162b2:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80162b6:	bf28      	it	cs
 80162b8:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80162ba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80162bc:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162be:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80162c2:	f7ff f8a3 	bl	801540c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80162c6:	f104 0018 	add.w	r0, r4, #24
 80162ca:	f7ff f89f 	bl	801540c <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162ce:	4651      	mov	r1, sl
 80162d0:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 80162d2:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162d6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162da:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80162dc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80162de:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80162e0:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162e4:	f00d fed6 	bl	8024094 <memset>
 80162e8:	4b0a      	ldr	r3, [pc, #40]	; (8016314 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80162ea:	464a      	mov	r2, r9
 80162ec:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162ee:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80162f0:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162f2:	4b09      	ldr	r3, [pc, #36]	; (8016318 <prvInitialiseNewTask.constprop.0+0xb0>)
 80162f4:	6563      	str	r3, [r4, #84]	; 0x54
 80162f6:	4b09      	ldr	r3, [pc, #36]	; (801631c <prvInitialiseNewTask.constprop.0+0xb4>)
 80162f8:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80162fa:	f001 f847 	bl	801738c <pxPortInitialiseStack>
 80162fe:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8016300:	f1b8 0f00 	cmp.w	r8, #0
 8016304:	d001      	beq.n	801630a <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016306:	f8c8 4000 	str.w	r4, [r8]
}
 801630a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801630e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8016312:	e7c9      	b.n	80162a8 <prvInitialiseNewTask.constprop.0+0x40>
 8016314:	08045628 	.word	0x08045628
 8016318:	08045648 	.word	0x08045648
 801631c:	08045608 	.word	0x08045608

08016320 <xTaskCreateStatic>:
	{
 8016320:	b530      	push	{r4, r5, lr}
 8016322:	b087      	sub	sp, #28
 8016324:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8016326:	b1e4      	cbz	r4, 8016362 <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8016328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801632a:	b17d      	cbz	r5, 801634c <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 801632c:	25b4      	movs	r5, #180	; 0xb4
 801632e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016330:	9d05      	ldr	r5, [sp, #20]
 8016332:	2db4      	cmp	r5, #180	; 0xb4
 8016334:	d020      	beq.n	8016378 <xTaskCreateStatic+0x58>
 8016336:	f04f 0330 	mov.w	r3, #48	; 0x30
 801633a:	b672      	cpsid	i
 801633c:	f383 8811 	msr	BASEPRI, r3
 8016340:	f3bf 8f6f 	isb	sy
 8016344:	f3bf 8f4f 	dsb	sy
 8016348:	b662      	cpsie	i
 801634a:	e7fe      	b.n	801634a <xTaskCreateStatic+0x2a>
 801634c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016350:	b672      	cpsid	i
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8016360:	e7fe      	b.n	8016360 <xTaskCreateStatic+0x40>
 8016362:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016366:	b672      	cpsid	i
 8016368:	f383 8811 	msr	BASEPRI, r3
 801636c:	f3bf 8f6f 	isb	sy
 8016370:	f3bf 8f4f 	dsb	sy
 8016374:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8016376:	e7fe      	b.n	8016376 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801637a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801637c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801637e:	9502      	str	r5, [sp, #8]
 8016380:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016382:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016384:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016386:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801638a:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801638c:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801638e:	9401      	str	r4, [sp, #4]
 8016390:	f7ff ff6a 	bl	8016268 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016394:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016396:	f7ff fdf5 	bl	8015f84 <prvAddNewTaskToReadyList>
	}
 801639a:	9804      	ldr	r0, [sp, #16]
 801639c:	b007      	add	sp, #28
 801639e:	bd30      	pop	{r4, r5, pc}

080163a0 <xTaskCreate>:
	{
 80163a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163a4:	4607      	mov	r7, r0
 80163a6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80163a8:	0090      	lsls	r0, r2, #2
	{
 80163aa:	4615      	mov	r5, r2
 80163ac:	4688      	mov	r8, r1
 80163ae:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80163b0:	f001 f982 	bl	80176b8 <pvPortMalloc>
			if( pxStack != NULL )
 80163b4:	b1d8      	cbz	r0, 80163ee <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80163b6:	4604      	mov	r4, r0
 80163b8:	20b4      	movs	r0, #180	; 0xb4
 80163ba:	f001 f97d 	bl	80176b8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80163be:	4606      	mov	r6, r0
 80163c0:	b1d0      	cbz	r0, 80163f8 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80163c2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80163c4:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80163c6:	464b      	mov	r3, r9
 80163c8:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80163ca:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80163ce:	4641      	mov	r1, r8
 80163d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80163d2:	4638      	mov	r0, r7
 80163d4:	9602      	str	r6, [sp, #8]
 80163d6:	9401      	str	r4, [sp, #4]
 80163d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80163da:	9400      	str	r4, [sp, #0]
 80163dc:	f7ff ff44 	bl	8016268 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80163e0:	4630      	mov	r0, r6
 80163e2:	f7ff fdcf 	bl	8015f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80163e6:	2001      	movs	r0, #1
	}
 80163e8:	b005      	add	sp, #20
 80163ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80163ee:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80163f2:	b005      	add	sp, #20
 80163f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80163f8:	4620      	mov	r0, r4
 80163fa:	f001 f9f9 	bl	80177f0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80163fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016402:	e7f1      	b.n	80163e8 <xTaskCreate+0x48>

08016404 <vTaskStartScheduler>:
{
 8016404:	b510      	push	{r4, lr}
 8016406:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016408:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801640a:	aa07      	add	r2, sp, #28
 801640c:	a906      	add	r1, sp, #24
 801640e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016410:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016414:	f7ea fd30 	bl	8000e78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016418:	4623      	mov	r3, r4
 801641a:	9a07      	ldr	r2, [sp, #28]
 801641c:	9400      	str	r4, [sp, #0]
 801641e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8016422:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016426:	491a      	ldr	r1, [pc, #104]	; (8016490 <vTaskStartScheduler+0x8c>)
 8016428:	481a      	ldr	r0, [pc, #104]	; (8016494 <vTaskStartScheduler+0x90>)
 801642a:	f7ff ff79 	bl	8016320 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801642e:	b1f8      	cbz	r0, 8016470 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8016430:	f000 fcfa 	bl	8016e28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8016434:	2801      	cmp	r0, #1
 8016436:	d11d      	bne.n	8016474 <vTaskStartScheduler+0x70>
 8016438:	f04f 0330 	mov.w	r3, #48	; 0x30
 801643c:	b672      	cpsid	i
 801643e:	f383 8811 	msr	BASEPRI, r3
 8016442:	f3bf 8f6f 	isb	sy
 8016446:	f3bf 8f4f 	dsb	sy
 801644a:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801644c:	4b12      	ldr	r3, [pc, #72]	; (8016498 <vTaskStartScheduler+0x94>)
 801644e:	4a13      	ldr	r2, [pc, #76]	; (801649c <vTaskStartScheduler+0x98>)
 8016450:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8016452:	4913      	ldr	r1, [pc, #76]	; (80164a0 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016454:	334c      	adds	r3, #76	; 0x4c
 8016456:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8016458:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 801645c:	4a11      	ldr	r2, [pc, #68]	; (80164a4 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 801645e:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016460:	4b11      	ldr	r3, [pc, #68]	; (80164a8 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8016462:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016464:	601c      	str	r4, [r3, #0]
}
 8016466:	b008      	add	sp, #32
 8016468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 801646c:	f001 b856 	b.w	801751c <xPortStartScheduler>
}
 8016470:	b008      	add	sp, #32
 8016472:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016474:	3001      	adds	r0, #1
 8016476:	d1fb      	bne.n	8016470 <vTaskStartScheduler+0x6c>
 8016478:	f04f 0330 	mov.w	r3, #48	; 0x30
 801647c:	b672      	cpsid	i
 801647e:	f383 8811 	msr	BASEPRI, r3
 8016482:	f3bf 8f6f 	isb	sy
 8016486:	f3bf 8f4f 	dsb	sy
 801648a:	b662      	cpsie	i
 801648c:	e7fe      	b.n	801648c <vTaskStartScheduler+0x88>
 801648e:	bf00      	nop
 8016490:	0802c680 	.word	0x0802c680
 8016494:	08016171 	.word	0x08016171
 8016498:	2000607c 	.word	0x2000607c
 801649c:	2000048c 	.word	0x2000048c
 80164a0:	20006154 	.word	0x20006154
 80164a4:	20006170 	.word	0x20006170
 80164a8:	2000619c 	.word	0x2000619c

080164ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80164ac:	4a02      	ldr	r2, [pc, #8]	; (80164b8 <vTaskSuspendAll+0xc>)
 80164ae:	6813      	ldr	r3, [r2, #0]
 80164b0:	3301      	adds	r3, #1
 80164b2:	6013      	str	r3, [r2, #0]
}
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop
 80164b8:	20006120 	.word	0x20006120

080164bc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80164bc:	4b01      	ldr	r3, [pc, #4]	; (80164c4 <xTaskGetTickCount+0x8>)
 80164be:	6818      	ldr	r0, [r3, #0]
}
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop
 80164c4:	2000619c 	.word	0x2000619c

080164c8 <xTaskGetTickCountFromISR>:
{
 80164c8:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80164ca:	f001 f891 	bl	80175f0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80164ce:	4b01      	ldr	r3, [pc, #4]	; (80164d4 <xTaskGetTickCountFromISR+0xc>)
 80164d0:	6818      	ldr	r0, [r3, #0]
}
 80164d2:	bd08      	pop	{r3, pc}
 80164d4:	2000619c 	.word	0x2000619c

080164d8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164d8:	4b52      	ldr	r3, [pc, #328]	; (8016624 <xTaskIncrementTick+0x14c>)
 80164da:	681b      	ldr	r3, [r3, #0]
{
 80164dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e0:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d14c      	bne.n	8016580 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80164e6:	4b50      	ldr	r3, [pc, #320]	; (8016628 <xTaskIncrementTick+0x150>)
 80164e8:	681d      	ldr	r5, [r3, #0]
 80164ea:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80164ec:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80164ee:	2d00      	cmp	r5, #0
 80164f0:	d054      	beq.n	801659c <xTaskIncrementTick+0xc4>
 80164f2:	4b4e      	ldr	r3, [pc, #312]	; (801662c <xTaskIncrementTick+0x154>)
 80164f4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80164f6:	9b01      	ldr	r3, [sp, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	42ab      	cmp	r3, r5
 80164fc:	d85d      	bhi.n	80165ba <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80164fe:	4e4c      	ldr	r6, [pc, #304]	; (8016630 <xTaskIncrementTick+0x158>)
 8016500:	6833      	ldr	r3, [r6, #0]
 8016502:	681c      	ldr	r4, [r3, #0]
 8016504:	2c00      	cmp	r4, #0
 8016506:	d07c      	beq.n	8016602 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8016508:	2400      	movs	r4, #0
 801650a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8016648 <xTaskIncrementTick+0x170>
 801650e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801664c <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 8016512:	f04f 0a01 	mov.w	sl, #1
 8016516:	4f47      	ldr	r7, [pc, #284]	; (8016634 <xTaskIncrementTick+0x15c>)
 8016518:	e024      	b.n	8016564 <xTaskIncrementTick+0x8c>
 801651a:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801651c:	f7fe ffa2 	bl	8015464 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016520:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016524:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016528:	9900      	ldr	r1, [sp, #0]
 801652a:	b112      	cbz	r2, 8016532 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801652c:	f7fe ff9a 	bl	8015464 <uxListRemove>
 8016530:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8016532:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	fa0a f200 	lsl.w	r2, sl, r0
 801653c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016540:	431a      	orrs	r2, r3
 8016542:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016546:	603a      	str	r2, [r7, #0]
 8016548:	f7fe ff64 	bl	8015414 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801654c:	f8d9 3000 	ldr.w	r3, [r9]
 8016550:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8016554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8016556:	429a      	cmp	r2, r3
 8016558:	bf28      	it	cs
 801655a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801655c:	6833      	ldr	r3, [r6, #0]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d052      	beq.n	801660a <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016564:	6833      	ldr	r3, [r6, #0]
 8016566:	68db      	ldr	r3, [r3, #12]
 8016568:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801656c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016570:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8016574:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016576:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8016578:	d2cf      	bcs.n	801651a <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 801657a:	9b01      	ldr	r3, [sp, #4]
 801657c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801657e:	e021      	b.n	80165c4 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8016580:	4a2d      	ldr	r2, [pc, #180]	; (8016638 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8016582:	2400      	movs	r4, #0
		++uxPendedTicks;
 8016584:	6813      	ldr	r3, [r2, #0]
 8016586:	3301      	adds	r3, #1
 8016588:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 801658a:	4b2c      	ldr	r3, [pc, #176]	; (801663c <xTaskIncrementTick+0x164>)
 801658c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801658e:	2b00      	cmp	r3, #0
}
 8016590:	bf0c      	ite	eq
 8016592:	4620      	moveq	r0, r4
 8016594:	2001      	movne	r0, #1
 8016596:	b003      	add	sp, #12
 8016598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 801659c:	4b24      	ldr	r3, [pc, #144]	; (8016630 <xTaskIncrementTick+0x158>)
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	6812      	ldr	r2, [r2, #0]
 80165a2:	b1da      	cbz	r2, 80165dc <xTaskIncrementTick+0x104>
 80165a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165a8:	b672      	cpsid	i
 80165aa:	f383 8811 	msr	BASEPRI, r3
 80165ae:	f3bf 8f6f 	isb	sy
 80165b2:	f3bf 8f4f 	dsb	sy
 80165b6:	b662      	cpsie	i
 80165b8:	e7fe      	b.n	80165b8 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 80165ba:	2400      	movs	r4, #0
 80165bc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8016648 <xTaskIncrementTick+0x170>
 80165c0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801664c <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80165c4:	f8d9 3000 	ldr.w	r3, [r9]
 80165c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 80165d4:	2b02      	cmp	r3, #2
 80165d6:	bf28      	it	cs
 80165d8:	2401      	movcs	r4, #1
 80165da:	e7d6      	b.n	801658a <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 80165dc:	4a18      	ldr	r2, [pc, #96]	; (8016640 <xTaskIncrementTick+0x168>)
 80165de:	6818      	ldr	r0, [r3, #0]
 80165e0:	6811      	ldr	r1, [r2, #0]
 80165e2:	6019      	str	r1, [r3, #0]
 80165e4:	4917      	ldr	r1, [pc, #92]	; (8016644 <xTaskIncrementTick+0x16c>)
 80165e6:	6010      	str	r0, [r2, #0]
 80165e8:	680a      	ldr	r2, [r1, #0]
 80165ea:	3201      	adds	r2, #1
 80165ec:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	6812      	ldr	r2, [r2, #0]
 80165f2:	b97a      	cbnz	r2, 8016614 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <xTaskIncrementTick+0x154>)
 80165f6:	461a      	mov	r2, r3
 80165f8:	9301      	str	r3, [sp, #4]
 80165fa:	f04f 33ff 	mov.w	r3, #4294967295
 80165fe:	6013      	str	r3, [r2, #0]
 8016600:	e779      	b.n	80164f6 <xTaskIncrementTick+0x1e>
 8016602:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8016648 <xTaskIncrementTick+0x170>
 8016606:	f8df 9044 	ldr.w	r9, [pc, #68]	; 801664c <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801660a:	f04f 33ff 	mov.w	r3, #4294967295
 801660e:	9a01      	ldr	r2, [sp, #4]
 8016610:	6013      	str	r3, [r2, #0]
					break;
 8016612:	e7d7      	b.n	80165c4 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016614:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016616:	4a05      	ldr	r2, [pc, #20]	; (801662c <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016618:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801661a:	9201      	str	r2, [sp, #4]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	685b      	ldr	r3, [r3, #4]
 8016620:	6013      	str	r3, [r2, #0]
}
 8016622:	e768      	b.n	80164f6 <xTaskIncrementTick+0x1e>
 8016624:	20006120 	.word	0x20006120
 8016628:	2000619c 	.word	0x2000619c
 801662c:	20006154 	.word	0x20006154
 8016630:	20006080 	.word	0x20006080
 8016634:	20006128 	.word	0x20006128
 8016638:	2000611c 	.word	0x2000611c
 801663c:	200061a0 	.word	0x200061a0
 8016640:	20006084 	.word	0x20006084
 8016644:	20006158 	.word	0x20006158
 8016648:	20006088 	.word	0x20006088
 801664c:	2000607c 	.word	0x2000607c

08016650 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8016650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016654:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8016656:	f000 fec5 	bl	80173e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801665a:	4b38      	ldr	r3, [pc, #224]	; (801673c <xTaskResumeAll.part.0+0xec>)
 801665c:	681a      	ldr	r2, [r3, #0]
 801665e:	3a01      	subs	r2, #1
 8016660:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d159      	bne.n	801671c <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016668:	4b35      	ldr	r3, [pc, #212]	; (8016740 <xTaskResumeAll.part.0+0xf0>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d055      	beq.n	801671c <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016670:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016758 <xTaskResumeAll.part.0+0x108>
 8016674:	f8da 3000 	ldr.w	r3, [sl]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d05c      	beq.n	8016736 <xTaskResumeAll.part.0+0xe6>
 801667c:	4d31      	ldr	r5, [pc, #196]	; (8016744 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 801667e:	2601      	movs	r6, #1
 8016680:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 801675c <xTaskResumeAll.part.0+0x10c>
 8016684:	4f30      	ldr	r7, [pc, #192]	; (8016748 <xTaskResumeAll.part.0+0xf8>)
 8016686:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8016760 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801668a:	f8da 300c 	ldr.w	r3, [sl, #12]
 801668e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016690:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016694:	f104 0018 	add.w	r0, r4, #24
 8016698:	f7fe fee4 	bl	8015464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801669c:	4658      	mov	r0, fp
 801669e:	f7fe fee1 	bl	8015464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80166a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80166a4:	682a      	ldr	r2, [r5, #0]
 80166a6:	4659      	mov	r1, fp
 80166a8:	fa06 f300 	lsl.w	r3, r6, r0
 80166ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80166b0:	4313      	orrs	r3, r2
 80166b2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80166b6:	602b      	str	r3, [r5, #0]
 80166b8:	f7fe feac 	bl	8015414 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80166c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d301      	bcc.n	80166ca <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 80166c6:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166ca:	f8da 3000 	ldr.w	r3, [sl]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1db      	bne.n	801668a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166d2:	4b1e      	ldr	r3, [pc, #120]	; (801674c <xTaskResumeAll.part.0+0xfc>)
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	6812      	ldr	r2, [r2, #0]
 80166d8:	b342      	cbz	r2, 801672c <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166da:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80166dc:	4b1c      	ldr	r3, [pc, #112]	; (8016750 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166de:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80166e0:	68d2      	ldr	r2, [r2, #12]
 80166e2:	6852      	ldr	r2, [r2, #4]
 80166e4:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80166e6:	4e1b      	ldr	r6, [pc, #108]	; (8016754 <xTaskResumeAll.part.0+0x104>)
 80166e8:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80166ea:	b144      	cbz	r4, 80166fe <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 80166ec:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80166ee:	f7ff fef3 	bl	80164d8 <xTaskIncrementTick>
 80166f2:	b108      	cbz	r0, 80166f8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 80166f4:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80166f8:	3c01      	subs	r4, #1
 80166fa:	d1f8      	bne.n	80166ee <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 80166fc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80166fe:	f8d9 3000 	ldr.w	r3, [r9]
 8016702:	b15b      	cbz	r3, 801671c <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8016704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801670c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016710:	f3bf 8f4f 	dsb	sy
 8016714:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8016718:	2001      	movs	r0, #1
 801671a:	e000      	b.n	801671e <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 801671c:	2000      	movs	r0, #0
 801671e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016720:	f000 fe86 	bl	8017430 <vPortExitCritical>
}
 8016724:	9801      	ldr	r0, [sp, #4]
 8016726:	b003      	add	sp, #12
 8016728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 801672c:	4b08      	ldr	r3, [pc, #32]	; (8016750 <xTaskResumeAll.part.0+0x100>)
 801672e:	f04f 32ff 	mov.w	r2, #4294967295
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	e7d7      	b.n	80166e6 <xTaskResumeAll.part.0+0x96>
 8016736:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8016760 <xTaskResumeAll.part.0+0x110>
 801673a:	e7d4      	b.n	80166e6 <xTaskResumeAll.part.0+0x96>
 801673c:	20006120 	.word	0x20006120
 8016740:	20006114 	.word	0x20006114
 8016744:	20006128 	.word	0x20006128
 8016748:	2000607c 	.word	0x2000607c
 801674c:	20006080 	.word	0x20006080
 8016750:	20006154 	.word	0x20006154
 8016754:	2000611c 	.word	0x2000611c
 8016758:	2000615c 	.word	0x2000615c
 801675c:	20006088 	.word	0x20006088
 8016760:	200061a0 	.word	0x200061a0

08016764 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8016764:	4b07      	ldr	r3, [pc, #28]	; (8016784 <xTaskResumeAll+0x20>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	b953      	cbnz	r3, 8016780 <xTaskResumeAll+0x1c>
 801676a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801676e:	b672      	cpsid	i
 8016770:	f383 8811 	msr	BASEPRI, r3
 8016774:	f3bf 8f6f 	isb	sy
 8016778:	f3bf 8f4f 	dsb	sy
 801677c:	b662      	cpsie	i
 801677e:	e7fe      	b.n	801677e <xTaskResumeAll+0x1a>
 8016780:	f7ff bf66 	b.w	8016650 <xTaskResumeAll.part.0>
 8016784:	20006120 	.word	0x20006120

08016788 <vTaskDelay>:
	{
 8016788:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801678a:	b950      	cbnz	r0, 80167a2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801678c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016794:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016798:	f3bf 8f4f 	dsb	sy
 801679c:	f3bf 8f6f 	isb	sy
	}
 80167a0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80167a2:	4c12      	ldr	r4, [pc, #72]	; (80167ec <vTaskDelay+0x64>)
 80167a4:	6821      	ldr	r1, [r4, #0]
 80167a6:	b151      	cbz	r1, 80167be <vTaskDelay+0x36>
 80167a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167ac:	b672      	cpsid	i
 80167ae:	f383 8811 	msr	BASEPRI, r3
 80167b2:	f3bf 8f6f 	isb	sy
 80167b6:	f3bf 8f4f 	dsb	sy
 80167ba:	b662      	cpsie	i
 80167bc:	e7fe      	b.n	80167bc <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 80167be:	6823      	ldr	r3, [r4, #0]
 80167c0:	3301      	adds	r3, #1
 80167c2:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80167c4:	f7ff fc68 	bl	8016098 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80167c8:	6823      	ldr	r3, [r4, #0]
 80167ca:	b953      	cbnz	r3, 80167e2 <vTaskDelay+0x5a>
 80167cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167d0:	b672      	cpsid	i
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	b662      	cpsie	i
 80167e0:	e7fe      	b.n	80167e0 <vTaskDelay+0x58>
 80167e2:	f7ff ff35 	bl	8016650 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d0d0      	beq.n	801678c <vTaskDelay+0x4>
	}
 80167ea:	bd10      	pop	{r4, pc}
 80167ec:	20006120 	.word	0x20006120

080167f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80167f0:	4b04      	ldr	r3, [pc, #16]	; (8016804 <vTaskSwitchContext+0x14>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	b11b      	cbz	r3, 80167fe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80167f6:	4b04      	ldr	r3, [pc, #16]	; (8016808 <vTaskSwitchContext+0x18>)
 80167f8:	2201      	movs	r2, #1
 80167fa:	601a      	str	r2, [r3, #0]
}
 80167fc:	4770      	bx	lr
 80167fe:	f7ff bced 	b.w	80161dc <vTaskSwitchContext.part.0>
 8016802:	bf00      	nop
 8016804:	20006120 	.word	0x20006120
 8016808:	200061a0 	.word	0x200061a0

0801680c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 801680c:	b160      	cbz	r0, 8016828 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801680e:	4b0c      	ldr	r3, [pc, #48]	; (8016840 <vTaskPlaceOnEventList+0x34>)
{
 8016810:	b510      	push	{r4, lr}
 8016812:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016814:	6819      	ldr	r1, [r3, #0]
 8016816:	3118      	adds	r1, #24
 8016818:	f7fe fe0c 	bl	8015434 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801681c:	4620      	mov	r0, r4
 801681e:	2101      	movs	r1, #1
}
 8016820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016824:	f7ff bc38 	b.w	8016098 <prvAddCurrentTaskToDelayedList>
 8016828:	f04f 0330 	mov.w	r3, #48	; 0x30
 801682c:	b672      	cpsid	i
 801682e:	f383 8811 	msr	BASEPRI, r3
 8016832:	f3bf 8f6f 	isb	sy
 8016836:	f3bf 8f4f 	dsb	sy
 801683a:	b662      	cpsie	i
	configASSERT( pxEventList );
 801683c:	e7fe      	b.n	801683c <vTaskPlaceOnEventList+0x30>
 801683e:	bf00      	nop
 8016840:	2000607c 	.word	0x2000607c

08016844 <vTaskPlaceOnEventListRestricted>:
	{
 8016844:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8016846:	b180      	cbz	r0, 801686a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016848:	4b0d      	ldr	r3, [pc, #52]	; (8016880 <vTaskPlaceOnEventListRestricted+0x3c>)
 801684a:	460d      	mov	r5, r1
 801684c:	4614      	mov	r4, r2
 801684e:	6819      	ldr	r1, [r3, #0]
 8016850:	3118      	adds	r1, #24
 8016852:	f7fe fddf 	bl	8015414 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8016856:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016858:	4621      	mov	r1, r4
 801685a:	bf0c      	ite	eq
 801685c:	4628      	moveq	r0, r5
 801685e:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8016862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016866:	f7ff bc17 	b.w	8016098 <prvAddCurrentTaskToDelayedList>
 801686a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801686e:	b672      	cpsid	i
 8016870:	f383 8811 	msr	BASEPRI, r3
 8016874:	f3bf 8f6f 	isb	sy
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	b662      	cpsie	i
		configASSERT( pxEventList );
 801687e:	e7fe      	b.n	801687e <vTaskPlaceOnEventListRestricted+0x3a>
 8016880:	2000607c 	.word	0x2000607c

08016884 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016884:	68c3      	ldr	r3, [r0, #12]
{
 8016886:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016888:	68dc      	ldr	r4, [r3, #12]
{
 801688a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 801688c:	b364      	cbz	r4, 80168e8 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801688e:	f104 0518 	add.w	r5, r4, #24
 8016892:	4628      	mov	r0, r5
 8016894:	f7fe fde6 	bl	8015464 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016898:	4b1a      	ldr	r3, [pc, #104]	; (8016904 <xTaskRemoveFromEventList+0x80>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	b17b      	cbz	r3, 80168be <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801689e:	4629      	mov	r1, r5
 80168a0:	4819      	ldr	r0, [pc, #100]	; (8016908 <xTaskRemoveFromEventList+0x84>)
 80168a2:	f7fe fdb7 	bl	8015414 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80168a6:	4b19      	ldr	r3, [pc, #100]	; (801690c <xTaskRemoveFromEventList+0x88>)
 80168a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d925      	bls.n	80168fe <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 80168b2:	2301      	movs	r3, #1
 80168b4:	4a16      	ldr	r2, [pc, #88]	; (8016910 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 80168b6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80168b8:	6013      	str	r3, [r2, #0]
}
 80168ba:	b003      	add	sp, #12
 80168bc:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168be:	1d21      	adds	r1, r4, #4
 80168c0:	4608      	mov	r0, r1
 80168c2:	9101      	str	r1, [sp, #4]
 80168c4:	f7fe fdce 	bl	8015464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80168c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168ca:	4a12      	ldr	r2, [pc, #72]	; (8016914 <xTaskRemoveFromEventList+0x90>)
 80168cc:	2301      	movs	r3, #1
 80168ce:	9901      	ldr	r1, [sp, #4]
 80168d0:	6815      	ldr	r5, [r2, #0]
 80168d2:	4083      	lsls	r3, r0
 80168d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80168d8:	432b      	orrs	r3, r5
 80168da:	6013      	str	r3, [r2, #0]
 80168dc:	4b0e      	ldr	r3, [pc, #56]	; (8016918 <xTaskRemoveFromEventList+0x94>)
 80168de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80168e2:	f7fe fd97 	bl	8015414 <vListInsertEnd>
 80168e6:	e7de      	b.n	80168a6 <xTaskRemoveFromEventList+0x22>
 80168e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80168ec:	b672      	cpsid	i
 80168ee:	f383 8811 	msr	BASEPRI, r3
 80168f2:	f3bf 8f6f 	isb	sy
 80168f6:	f3bf 8f4f 	dsb	sy
 80168fa:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80168fc:	e7fe      	b.n	80168fc <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 80168fe:	2000      	movs	r0, #0
}
 8016900:	b003      	add	sp, #12
 8016902:	bd30      	pop	{r4, r5, pc}
 8016904:	20006120 	.word	0x20006120
 8016908:	2000615c 	.word	0x2000615c
 801690c:	2000607c 	.word	0x2000607c
 8016910:	200061a0 	.word	0x200061a0
 8016914:	20006128 	.word	0x20006128
 8016918:	20006088 	.word	0x20006088

0801691c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801691c:	4a03      	ldr	r2, [pc, #12]	; (801692c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 801691e:	4b04      	ldr	r3, [pc, #16]	; (8016930 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016920:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	e9c0 2300 	strd	r2, r3, [r0]
}
 8016928:	4770      	bx	lr
 801692a:	bf00      	nop
 801692c:	20006158 	.word	0x20006158
 8016930:	2000619c 	.word	0x2000619c

08016934 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8016934:	b338      	cbz	r0, 8016986 <xTaskCheckForTimeOut+0x52>
{
 8016936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016938:	460d      	mov	r5, r1
 801693a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 801693c:	b1c1      	cbz	r1, 8016970 <xTaskCheckForTimeOut+0x3c>
 801693e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8016940:	f000 fd50 	bl	80173e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8016944:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8016946:	4a1f      	ldr	r2, [pc, #124]	; (80169c4 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8016948:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 801694a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801694c:	d034      	beq.n	80169b8 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801694e:	f8df c078 	ldr.w	ip, [pc, #120]	; 80169c8 <xTaskCheckForTimeOut+0x94>
 8016952:	6826      	ldr	r6, [r4, #0]
 8016954:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016958:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801695a:	42be      	cmp	r6, r7
 801695c:	d01e      	beq.n	801699c <xTaskCheckForTimeOut+0x68>
 801695e:	4288      	cmp	r0, r1
 8016960:	d81c      	bhi.n	801699c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8016962:	2001      	movs	r0, #1
 8016964:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016966:	f000 fd63 	bl	8017430 <vPortExitCritical>
}
 801696a:	9801      	ldr	r0, [sp, #4]
 801696c:	b003      	add	sp, #12
 801696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016970:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016974:	b672      	cpsid	i
 8016976:	f383 8811 	msr	BASEPRI, r3
 801697a:	f3bf 8f6f 	isb	sy
 801697e:	f3bf 8f4f 	dsb	sy
 8016982:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8016984:	e7fe      	b.n	8016984 <xTaskCheckForTimeOut+0x50>
 8016986:	f04f 0330 	mov.w	r3, #48	; 0x30
 801698a:	b672      	cpsid	i
 801698c:	f383 8811 	msr	BASEPRI, r3
 8016990:	f3bf 8f6f 	isb	sy
 8016994:	f3bf 8f4f 	dsb	sy
 8016998:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 801699a:	e7fe      	b.n	801699a <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801699c:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80169a0:	4573      	cmp	r3, lr
 80169a2:	d90b      	bls.n	80169bc <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 80169a4:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80169a6:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80169aa:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80169ac:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80169ae:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80169b0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80169b2:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80169b6:	e7d5      	b.n	8016964 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80169b8:	2000      	movs	r0, #0
 80169ba:	e7d3      	b.n	8016964 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80169bc:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80169be:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80169c0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80169c2:	e7cf      	b.n	8016964 <xTaskCheckForTimeOut+0x30>
 80169c4:	2000619c 	.word	0x2000619c
 80169c8:	20006158 	.word	0x20006158

080169cc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80169cc:	4b01      	ldr	r3, [pc, #4]	; (80169d4 <vTaskMissedYield+0x8>)
 80169ce:	2201      	movs	r2, #1
 80169d0:	601a      	str	r2, [r3, #0]
}
 80169d2:	4770      	bx	lr
 80169d4:	200061a0 	.word	0x200061a0

080169d8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80169d8:	4b01      	ldr	r3, [pc, #4]	; (80169e0 <xTaskGetCurrentTaskHandle+0x8>)
 80169da:	6818      	ldr	r0, [r3, #0]
	}
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	2000607c 	.word	0x2000607c

080169e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80169e4:	4b05      	ldr	r3, [pc, #20]	; (80169fc <xTaskGetSchedulerState+0x18>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	b133      	cbz	r3, 80169f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169ea:	4b05      	ldr	r3, [pc, #20]	; (8016a00 <xTaskGetSchedulerState+0x1c>)
 80169ec:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	bf0c      	ite	eq
 80169f2:	2002      	moveq	r0, #2
 80169f4:	2000      	movne	r0, #0
 80169f6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80169f8:	2001      	movs	r0, #1
	}
 80169fa:	4770      	bx	lr
 80169fc:	20006170 	.word	0x20006170
 8016a00:	20006120 	.word	0x20006120

08016a04 <xTaskPriorityInherit>:
	{
 8016a04:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8016a06:	4604      	mov	r4, r0
	{
 8016a08:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8016a0a:	b1c8      	cbz	r0, 8016a40 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016a0c:	4d26      	ldr	r5, [pc, #152]	; (8016aa8 <xTaskPriorityInherit+0xa4>)
 8016a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016a10:	682a      	ldr	r2, [r5, #0]
 8016a12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d215      	bcs.n	8016a44 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016a18:	6982      	ldr	r2, [r0, #24]
 8016a1a:	2a00      	cmp	r2, #0
 8016a1c:	db04      	blt.n	8016a28 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a1e:	682a      	ldr	r2, [r5, #0]
 8016a20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016a22:	f1c2 0207 	rsb	r2, r2, #7
 8016a26:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016a28:	4e20      	ldr	r6, [pc, #128]	; (8016aac <xTaskPriorityInherit+0xa8>)
 8016a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016a2e:	6962      	ldr	r2, [r4, #20]
 8016a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d00e      	beq.n	8016a56 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a38:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8016a3a:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8016a40:	b002      	add	sp, #8
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016a44:	682b      	ldr	r3, [r5, #0]
 8016a46:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a4a:	4298      	cmp	r0, r3
 8016a4c:	bf2c      	ite	cs
 8016a4e:	2000      	movcs	r0, #0
 8016a50:	2001      	movcc	r0, #1
	}
 8016a52:	b002      	add	sp, #8
 8016a54:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a56:	1d21      	adds	r1, r4, #4
 8016a58:	4608      	mov	r0, r1
 8016a5a:	9101      	str	r1, [sp, #4]
 8016a5c:	f7fe fd02 	bl	8015464 <uxListRemove>
 8016a60:	9901      	ldr	r1, [sp, #4]
 8016a62:	b970      	cbnz	r0, 8016a82 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016a64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016a66:	4a12      	ldr	r2, [pc, #72]	; (8016ab0 <xTaskPriorityInherit+0xac>)
 8016a68:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	58f3      	ldr	r3, [r6, r3]
 8016a70:	b943      	cbnz	r3, 8016a84 <xTaskPriorityInherit+0x80>
 8016a72:	2301      	movs	r3, #1
 8016a74:	fa03 f000 	lsl.w	r0, r3, r0
 8016a78:	6813      	ldr	r3, [r2, #0]
 8016a7a:	ea23 0300 	bic.w	r3, r3, r0
 8016a7e:	6013      	str	r3, [r2, #0]
 8016a80:	e000      	b.n	8016a84 <xTaskPriorityInherit+0x80>
 8016a82:	4a0b      	ldr	r2, [pc, #44]	; (8016ab0 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a84:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016a86:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016a8c:	2401      	movs	r4, #1
 8016a8e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8016a92:	fa04 f303 	lsl.w	r3, r4, r3
 8016a96:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8016a9a:	432b      	orrs	r3, r5
 8016a9c:	6013      	str	r3, [r2, #0]
 8016a9e:	f7fe fcb9 	bl	8015414 <vListInsertEnd>
				xReturn = pdTRUE;
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	e7cc      	b.n	8016a40 <xTaskPriorityInherit+0x3c>
 8016aa6:	bf00      	nop
 8016aa8:	2000607c 	.word	0x2000607c
 8016aac:	20006088 	.word	0x20006088
 8016ab0:	20006128 	.word	0x20006128

08016ab4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8016ab4:	b340      	cbz	r0, 8016b08 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8016ab6:	4b2c      	ldr	r3, [pc, #176]	; (8016b68 <xTaskPriorityDisinherit+0xb4>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4283      	cmp	r3, r0
	{
 8016abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8016ac2:	d00a      	beq.n	8016ada <xTaskPriorityDisinherit+0x26>
 8016ac4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ac8:	b672      	cpsid	i
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	b662      	cpsie	i
 8016ad8:	e7fe      	b.n	8016ad8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016adc:	b14b      	cbz	r3, 8016af2 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016ade:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8016ae0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016ae2:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8016ae4:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016ae6:	4291      	cmp	r1, r2
 8016ae8:	d000      	beq.n	8016aec <xTaskPriorityDisinherit+0x38>
 8016aea:	b17b      	cbz	r3, 8016b0c <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8016aec:	2000      	movs	r0, #0
	}
 8016aee:	b003      	add	sp, #12
 8016af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016af6:	b672      	cpsid	i
 8016af8:	f383 8811 	msr	BASEPRI, r3
 8016afc:	f3bf 8f6f 	isb	sy
 8016b00:	f3bf 8f4f 	dsb	sy
 8016b04:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016b06:	e7fe      	b.n	8016b06 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8016b08:	2000      	movs	r0, #0
	}
 8016b0a:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b0c:	1d01      	adds	r1, r0, #4
 8016b0e:	4608      	mov	r0, r1
 8016b10:	9101      	str	r1, [sp, #4]
 8016b12:	f7fe fca7 	bl	8015464 <uxListRemove>
 8016b16:	9901      	ldr	r1, [sp, #4]
 8016b18:	b1a0      	cbz	r0, 8016b44 <xTaskPriorityDisinherit+0x90>
 8016b1a:	4814      	ldr	r0, [pc, #80]	; (8016b6c <xTaskPriorityDisinherit+0xb8>)
 8016b1c:	4a14      	ldr	r2, [pc, #80]	; (8016b70 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8016b20:	2501      	movs	r5, #1
 8016b22:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b24:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b28:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b2a:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b2c:	fa05 f403 	lsl.w	r4, r5, r3
 8016b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016b34:	4334      	orrs	r4, r6
 8016b36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016b3a:	6014      	str	r4, [r2, #0]
 8016b3c:	f7fe fc6a 	bl	8015414 <vListInsertEnd>
					xReturn = pdTRUE;
 8016b40:	4628      	mov	r0, r5
		return xReturn;
 8016b42:	e7d4      	b.n	8016aee <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016b44:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8016b46:	4809      	ldr	r0, [pc, #36]	; (8016b6c <xTaskPriorityDisinherit+0xb8>)
 8016b48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8016b4c:	4a08      	ldr	r2, [pc, #32]	; (8016b70 <xTaskPriorityDisinherit+0xbc>)
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	58c3      	ldr	r3, [r0, r3]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d1e3      	bne.n	8016b1e <xTaskPriorityDisinherit+0x6a>
 8016b56:	2301      	movs	r3, #1
 8016b58:	fa03 f505 	lsl.w	r5, r3, r5
 8016b5c:	6813      	ldr	r3, [r2, #0]
 8016b5e:	ea23 0305 	bic.w	r3, r3, r5
 8016b62:	6013      	str	r3, [r2, #0]
 8016b64:	e7db      	b.n	8016b1e <xTaskPriorityDisinherit+0x6a>
 8016b66:	bf00      	nop
 8016b68:	2000607c 	.word	0x2000607c
 8016b6c:	20006088 	.word	0x20006088
 8016b70:	20006128 	.word	0x20006128

08016b74 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8016b74:	2800      	cmp	r0, #0
 8016b76:	d044      	beq.n	8016c02 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8016b78:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8016b7a:	b530      	push	{r4, r5, lr}
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8016b80:	b153      	cbz	r3, 8016b98 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016b82:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016b86:	4281      	cmp	r1, r0
 8016b88:	bf38      	it	cc
 8016b8a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016b8c:	428a      	cmp	r2, r1
 8016b8e:	d001      	beq.n	8016b94 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d00c      	beq.n	8016bae <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8016b94:	b003      	add	sp, #12
 8016b96:	bd30      	pop	{r4, r5, pc}
 8016b98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b9c:	b672      	cpsid	i
 8016b9e:	f383 8811 	msr	BASEPRI, r3
 8016ba2:	f3bf 8f6f 	isb	sy
 8016ba6:	f3bf 8f4f 	dsb	sy
 8016baa:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016bac:	e7fe      	b.n	8016bac <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8016bae:	4b25      	ldr	r3, [pc, #148]	; (8016c44 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	42a3      	cmp	r3, r4
 8016bb4:	d026      	beq.n	8016c04 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016bb6:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8016bb8:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	db02      	blt.n	8016bc4 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016bbe:	f1c1 0107 	rsb	r1, r1, #7
 8016bc2:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016bc4:	4d20      	ldr	r5, [pc, #128]	; (8016c48 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8016bc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016bca:	6961      	ldr	r1, [r4, #20]
 8016bcc:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8016bd0:	4299      	cmp	r1, r3
 8016bd2:	d1df      	bne.n	8016b94 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016bd4:	1d21      	adds	r1, r4, #4
 8016bd6:	4608      	mov	r0, r1
 8016bd8:	9101      	str	r1, [sp, #4]
 8016bda:	f7fe fc43 	bl	8015464 <uxListRemove>
 8016bde:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016be0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016be2:	b1d0      	cbz	r0, 8016c1a <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016be4:	2301      	movs	r3, #1
 8016be6:	0090      	lsls	r0, r2, #2
 8016be8:	4c18      	ldr	r4, [pc, #96]	; (8016c4c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016bea:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8016bec:	4410      	add	r0, r2
 8016bee:	6822      	ldr	r2, [r4, #0]
 8016bf0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8016bf4:	4313      	orrs	r3, r2
 8016bf6:	6023      	str	r3, [r4, #0]
	}
 8016bf8:	b003      	add	sp, #12
 8016bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8016bfe:	f7fe bc09 	b.w	8015414 <vListInsertEnd>
 8016c02:	4770      	bx	lr
 8016c04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c08:	b672      	cpsid	i
 8016c0a:	f383 8811 	msr	BASEPRI, r3
 8016c0e:	f3bf 8f6f 	isb	sy
 8016c12:	f3bf 8f4f 	dsb	sy
 8016c16:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8016c18:	e7fe      	b.n	8016c18 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016c1a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8016c1e:	0090      	lsls	r0, r2, #2
 8016c20:	009b      	lsls	r3, r3, #2
 8016c22:	58eb      	ldr	r3, [r5, r3]
 8016c24:	b11b      	cbz	r3, 8016c2e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8016c26:	2301      	movs	r3, #1
 8016c28:	4c08      	ldr	r4, [pc, #32]	; (8016c4c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016c2a:	4093      	lsls	r3, r2
 8016c2c:	e7de      	b.n	8016bec <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016c2e:	4c07      	ldr	r4, [pc, #28]	; (8016c4c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016c30:	2301      	movs	r3, #1
 8016c32:	f8d4 c000 	ldr.w	ip, [r4]
 8016c36:	4093      	lsls	r3, r2
 8016c38:	ea2c 0c03 	bic.w	ip, ip, r3
 8016c3c:	f8c4 c000 	str.w	ip, [r4]
 8016c40:	e7d4      	b.n	8016bec <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016c42:	bf00      	nop
 8016c44:	2000607c 	.word	0x2000607c
 8016c48:	20006088 	.word	0x20006088
 8016c4c:	20006128 	.word	0x20006128

08016c50 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016c50:	4b04      	ldr	r3, [pc, #16]	; (8016c64 <pvTaskIncrementMutexHeldCount+0x14>)
 8016c52:	681a      	ldr	r2, [r3, #0]
 8016c54:	b11a      	cbz	r2, 8016c5e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8016c56:	6819      	ldr	r1, [r3, #0]
 8016c58:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016c5a:	3201      	adds	r2, #1
 8016c5c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8016c5e:	6818      	ldr	r0, [r3, #0]
	}
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop
 8016c64:	2000607c 	.word	0x2000607c

08016c68 <ulTaskNotifyTake>:
	{
 8016c68:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016c6a:	4c1a      	ldr	r4, [pc, #104]	; (8016cd4 <ulTaskNotifyTake+0x6c>)
	{
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8016c70:	f000 fbb8 	bl	80173e4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016c74:	6823      	ldr	r3, [r4, #0]
 8016c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016c7a:	b923      	cbnz	r3, 8016c86 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016c7c:	6823      	ldr	r3, [r4, #0]
 8016c7e:	2101      	movs	r1, #1
 8016c80:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8016c84:	b9c5      	cbnz	r5, 8016cb8 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8016c86:	f000 fbd3 	bl	8017430 <vPortExitCritical>
		taskENTER_CRITICAL();
 8016c8a:	f000 fbab 	bl	80173e4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8016c94:	b125      	cbz	r5, 8016ca0 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016c96:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8016c98:	b156      	cbz	r6, 8016cb0 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016ca0:	6823      	ldr	r3, [r4, #0]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8016ca8:	f000 fbc2 	bl	8017430 <vPortExitCritical>
	}
 8016cac:	4628      	mov	r0, r5
 8016cae:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8016cb0:	1e6a      	subs	r2, r5, #1
 8016cb2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8016cb6:	e7f3      	b.n	8016ca0 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016cb8:	4628      	mov	r0, r5
 8016cba:	f7ff f9ed 	bl	8016098 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8016cbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016cca:	f3bf 8f4f 	dsb	sy
 8016cce:	f3bf 8f6f 	isb	sy
 8016cd2:	e7d8      	b.n	8016c86 <ulTaskNotifyTake+0x1e>
 8016cd4:	2000607c 	.word	0x2000607c

08016cd8 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8016cd8:	b318      	cbz	r0, 8016d22 <vTaskNotifyGiveFromISR+0x4a>
	{
 8016cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cdc:	b083      	sub	sp, #12
 8016cde:	4604      	mov	r4, r0
 8016ce0:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ce2:	f000 fc85 	bl	80175f0 <vPortValidateInterruptPriority>
	__asm volatile
 8016ce6:	f3ef 8611 	mrs	r6, BASEPRI
 8016cea:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016cee:	b672      	cpsid	i
 8016cf0:	f383 8811 	msr	BASEPRI, r3
 8016cf4:	f3bf 8f6f 	isb	sy
 8016cf8:	f3bf 8f4f 	dsb	sy
 8016cfc:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016cfe:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016d00:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016d04:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016d08:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8016d0a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016d0e:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8016d10:	f103 0301 	add.w	r3, r3, #1
 8016d14:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016d18:	d00e      	beq.n	8016d38 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8016d1a:	f386 8811 	msr	BASEPRI, r6
	}
 8016d1e:	b003      	add	sp, #12
 8016d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8016d22:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d26:	b672      	cpsid	i
 8016d28:	f383 8811 	msr	BASEPRI, r3
 8016d2c:	f3bf 8f6f 	isb	sy
 8016d30:	f3bf 8f4f 	dsb	sy
 8016d34:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8016d36:	e7fe      	b.n	8016d36 <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d3a:	b153      	cbz	r3, 8016d52 <vTaskNotifyGiveFromISR+0x7a>
 8016d3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d40:	b672      	cpsid	i
 8016d42:	f383 8811 	msr	BASEPRI, r3
 8016d46:	f3bf 8f6f 	isb	sy
 8016d4a:	f3bf 8f4f 	dsb	sy
 8016d4e:	b662      	cpsie	i
 8016d50:	e7fe      	b.n	8016d50 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d52:	4b14      	ldr	r3, [pc, #80]	; (8016da4 <vTaskNotifyGiveFromISR+0xcc>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	b18b      	cbz	r3, 8016d7c <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016d58:	f104 0118 	add.w	r1, r4, #24
 8016d5c:	4812      	ldr	r0, [pc, #72]	; (8016da8 <vTaskNotifyGiveFromISR+0xd0>)
 8016d5e:	f7fe fb59 	bl	8015414 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016d62:	4b12      	ldr	r3, [pc, #72]	; (8016dac <vTaskNotifyGiveFromISR+0xd4>)
 8016d64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d9d5      	bls.n	8016d1a <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8016d6e:	b10d      	cbz	r5, 8016d74 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016d70:	2301      	movs	r3, #1
 8016d72:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8016d74:	4b0e      	ldr	r3, [pc, #56]	; (8016db0 <vTaskNotifyGiveFromISR+0xd8>)
 8016d76:	2201      	movs	r2, #1
 8016d78:	601a      	str	r2, [r3, #0]
 8016d7a:	e7ce      	b.n	8016d1a <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d7c:	1d21      	adds	r1, r4, #4
 8016d7e:	4608      	mov	r0, r1
 8016d80:	9101      	str	r1, [sp, #4]
 8016d82:	f7fe fb6f 	bl	8015464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016d86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016d88:	4b0a      	ldr	r3, [pc, #40]	; (8016db4 <vTaskNotifyGiveFromISR+0xdc>)
 8016d8a:	4087      	lsls	r7, r0
 8016d8c:	4a0a      	ldr	r2, [pc, #40]	; (8016db8 <vTaskNotifyGiveFromISR+0xe0>)
 8016d8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016d92:	9901      	ldr	r1, [sp, #4]
 8016d94:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	4317      	orrs	r7, r2
 8016d9c:	601f      	str	r7, [r3, #0]
 8016d9e:	f7fe fb39 	bl	8015414 <vListInsertEnd>
 8016da2:	e7de      	b.n	8016d62 <vTaskNotifyGiveFromISR+0x8a>
 8016da4:	20006120 	.word	0x20006120
 8016da8:	2000615c 	.word	0x2000615c
 8016dac:	2000607c 	.word	0x2000607c
 8016db0:	200061a0 	.word	0x200061a0
 8016db4:	20006128 	.word	0x20006128
 8016db8:	20006088 	.word	0x20006088

08016dbc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8016dbe:	4c12      	ldr	r4, [pc, #72]	; (8016e08 <prvCheckForValidListAndQueue+0x4c>)
{
 8016dc0:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8016dc2:	f000 fb0f 	bl	80173e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8016dc6:	6825      	ldr	r5, [r4, #0]
 8016dc8:	b125      	cbz	r5, 8016dd4 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8016dca:	b003      	add	sp, #12
 8016dcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8016dd0:	f000 bb2e 	b.w	8017430 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8016dd4:	4f0d      	ldr	r7, [pc, #52]	; (8016e0c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8016dd6:	4e0e      	ldr	r6, [pc, #56]	; (8016e10 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8016dd8:	4638      	mov	r0, r7
 8016dda:	f7fe fb0b 	bl	80153f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016dde:	4630      	mov	r0, r6
 8016de0:	f7fe fb08 	bl	80153f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016de4:	4a0b      	ldr	r2, [pc, #44]	; (8016e14 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016de6:	9500      	str	r5, [sp, #0]
 8016de8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8016dea:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016dec:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8016dee:	4a0a      	ldr	r2, [pc, #40]	; (8016e18 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016df0:	4b0a      	ldr	r3, [pc, #40]	; (8016e1c <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8016df2:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016df4:	4a0a      	ldr	r2, [pc, #40]	; (8016e20 <prvCheckForValidListAndQueue+0x64>)
 8016df6:	f7fe fc19 	bl	801562c <xQueueGenericCreateStatic>
 8016dfa:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d0e4      	beq.n	8016dca <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016e00:	4908      	ldr	r1, [pc, #32]	; (8016e24 <prvCheckForValidListAndQueue+0x68>)
 8016e02:	f7ff f881 	bl	8015f08 <vQueueAddToRegistry>
 8016e06:	e7e0      	b.n	8016dca <prvCheckForValidListAndQueue+0xe>
 8016e08:	200062c0 	.word	0x200062c0
 8016e0c:	2000624c 	.word	0x2000624c
 8016e10:	20006260 	.word	0x20006260
 8016e14:	200061a4 	.word	0x200061a4
 8016e18:	200061a8 	.word	0x200061a8
 8016e1c:	20006278 	.word	0x20006278
 8016e20:	200061ac 	.word	0x200061ac
 8016e24:	0802c688 	.word	0x0802c688

08016e28 <xTimerCreateTimerTask>:
{
 8016e28:	b530      	push	{r4, r5, lr}
 8016e2a:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8016e2c:	f7ff ffc6 	bl	8016dbc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8016e30:	4b13      	ldr	r3, [pc, #76]	; (8016e80 <xTimerCreateTimerTask+0x58>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	b1cb      	cbz	r3, 8016e6a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016e36:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016e38:	aa07      	add	r2, sp, #28
 8016e3a:	a906      	add	r1, sp, #24
 8016e3c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016e3e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016e40:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016e44:	f7ea f828 	bl	8000e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016e48:	4623      	mov	r3, r4
 8016e4a:	9a07      	ldr	r2, [sp, #28]
 8016e4c:	9500      	str	r5, [sp, #0]
 8016e4e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8016e52:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016e56:	490b      	ldr	r1, [pc, #44]	; (8016e84 <xTimerCreateTimerTask+0x5c>)
 8016e58:	480b      	ldr	r0, [pc, #44]	; (8016e88 <xTimerCreateTimerTask+0x60>)
 8016e5a:	f7ff fa61 	bl	8016320 <xTaskCreateStatic>
 8016e5e:	4b0b      	ldr	r3, [pc, #44]	; (8016e8c <xTimerCreateTimerTask+0x64>)
 8016e60:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8016e62:	b110      	cbz	r0, 8016e6a <xTimerCreateTimerTask+0x42>
}
 8016e64:	2001      	movs	r0, #1
 8016e66:	b009      	add	sp, #36	; 0x24
 8016e68:	bd30      	pop	{r4, r5, pc}
 8016e6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e6e:	b672      	cpsid	i
 8016e70:	f383 8811 	msr	BASEPRI, r3
 8016e74:	f3bf 8f6f 	isb	sy
 8016e78:	f3bf 8f4f 	dsb	sy
 8016e7c:	b662      	cpsie	i
	configASSERT( xReturn );
 8016e7e:	e7fe      	b.n	8016e7e <xTimerCreateTimerTask+0x56>
 8016e80:	200062c0 	.word	0x200062c0
 8016e84:	0802c690 	.word	0x0802c690
 8016e88:	08017089 	.word	0x08017089
 8016e8c:	200062c4 	.word	0x200062c4

08016e90 <xTimerCreate>:
	{
 8016e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e94:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016e96:	2028      	movs	r0, #40	; 0x28
	{
 8016e98:	4688      	mov	r8, r1
 8016e9a:	4615      	mov	r5, r2
 8016e9c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016e9e:	f000 fc0b 	bl	80176b8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	b1b0      	cbz	r0, 8016ed4 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016eac:	f1b8 0f00 	cmp.w	r8, #0
 8016eb0:	d013      	beq.n	8016eda <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8016eb2:	f7ff ff83 	bl	8016dbc <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016eb6:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016eb8:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8016eba:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016ebc:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8016ebe:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016ec2:	f7fe faa3 	bl	801540c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016ec6:	b12d      	cbz	r5, 8016ed4 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016ec8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8016ecc:	f043 0304 	orr.w	r3, r3, #4
 8016ed0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eda:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ede:	b672      	cpsid	i
 8016ee0:	f383 8811 	msr	BASEPRI, r3
 8016ee4:	f3bf 8f6f 	isb	sy
 8016ee8:	f3bf 8f4f 	dsb	sy
 8016eec:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016eee:	e7fe      	b.n	8016eee <xTimerCreate+0x5e>

08016ef0 <xTimerCreateStatic>:
	{
 8016ef0:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016ef2:	2428      	movs	r4, #40	; 0x28
	{
 8016ef4:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016ef6:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8016ef8:	9d05      	ldr	r5, [sp, #20]
 8016efa:	2d28      	cmp	r5, #40	; 0x28
 8016efc:	d00a      	beq.n	8016f14 <xTimerCreateStatic+0x24>
 8016efe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f02:	b672      	cpsid	i
 8016f04:	f383 8811 	msr	BASEPRI, r3
 8016f08:	f3bf 8f6f 	isb	sy
 8016f0c:	f3bf 8f4f 	dsb	sy
 8016f10:	b662      	cpsie	i
 8016f12:	e7fe      	b.n	8016f12 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016f14:	4604      	mov	r4, r0
 8016f16:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8016f18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016f1a:	b318      	cbz	r0, 8016f64 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8016f1c:	2002      	movs	r0, #2
 8016f1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016f20:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016f24:	b349      	cbz	r1, 8016f7a <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 8016f26:	9101      	str	r1, [sp, #4]
 8016f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016f2c:	f7ff ff46 	bl	8016dbc <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016f32:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8016f34:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 8016f36:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016f38:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016f3a:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8016f3c:	9b03      	ldr	r3, [sp, #12]
 8016f3e:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016f40:	4613      	mov	r3, r2
 8016f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f44:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016f46:	f7fe fa61 	bl	801540c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016f4a:	9a02      	ldr	r2, [sp, #8]
 8016f4c:	b13a      	cbz	r2, 8016f5e <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016f56:	f043 0304 	orr.w	r3, r3, #4
 8016f5a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8016f5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016f60:	b007      	add	sp, #28
 8016f62:	bd30      	pop	{r4, r5, pc}
 8016f64:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f68:	b672      	cpsid	i
 8016f6a:	f383 8811 	msr	BASEPRI, r3
 8016f6e:	f3bf 8f6f 	isb	sy
 8016f72:	f3bf 8f4f 	dsb	sy
 8016f76:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8016f78:	e7fe      	b.n	8016f78 <xTimerCreateStatic+0x88>
 8016f7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f7e:	b672      	cpsid	i
 8016f80:	f383 8811 	msr	BASEPRI, r3
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	f3bf 8f4f 	dsb	sy
 8016f8c:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016f8e:	e7fe      	b.n	8016f8e <xTimerCreateStatic+0x9e>

08016f90 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016f90:	b1c8      	cbz	r0, 8016fc6 <xTimerGenericCommand+0x36>
{
 8016f92:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8016f94:	4d19      	ldr	r5, [pc, #100]	; (8016ffc <xTimerGenericCommand+0x6c>)
{
 8016f96:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8016f98:	682c      	ldr	r4, [r5, #0]
 8016f9a:	b18c      	cbz	r4, 8016fc0 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016f9c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016f9e:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8016fa0:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016fa4:	dc1a      	bgt.n	8016fdc <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016fa6:	f7ff fd1d 	bl	80169e4 <xTaskGetSchedulerState>
 8016faa:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016fac:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016fb0:	d01d      	beq.n	8016fee <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016fb2:	4669      	mov	r1, sp
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	6828      	ldr	r0, [r5, #0]
 8016fb8:	f7fe fbc2 	bl	8015740 <xQueueGenericSend>
}
 8016fbc:	b005      	add	sp, #20
 8016fbe:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8016fc0:	4620      	mov	r0, r4
}
 8016fc2:	b005      	add	sp, #20
 8016fc4:	bd30      	pop	{r4, r5, pc}
 8016fc6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fca:	b672      	cpsid	i
 8016fcc:	f383 8811 	msr	BASEPRI, r3
 8016fd0:	f3bf 8f6f 	isb	sy
 8016fd4:	f3bf 8f4f 	dsb	sy
 8016fd8:	b662      	cpsie	i
	configASSERT( xTimer );
 8016fda:	e7fe      	b.n	8016fda <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016fdc:	469c      	mov	ip, r3
 8016fde:	4669      	mov	r1, sp
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	4662      	mov	r2, ip
 8016fe6:	f7fe fcab 	bl	8015940 <xQueueGenericSendFromISR>
}
 8016fea:	b005      	add	sp, #20
 8016fec:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016fee:	9a08      	ldr	r2, [sp, #32]
 8016ff0:	4669      	mov	r1, sp
 8016ff2:	6828      	ldr	r0, [r5, #0]
 8016ff4:	f7fe fba4 	bl	8015740 <xQueueGenericSend>
 8016ff8:	e7e3      	b.n	8016fc2 <xTimerGenericCommand+0x32>
 8016ffa:	bf00      	nop
 8016ffc:	200062c0 	.word	0x200062c0

08017000 <prvSwitchTimerLists>:
{
 8017000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017004:	4e1e      	ldr	r6, [pc, #120]	; (8017080 <prvSwitchTimerLists+0x80>)
 8017006:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017008:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801700c:	e00d      	b.n	801702a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801700e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017010:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017012:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017014:	1d25      	adds	r5, r4, #4
 8017016:	4628      	mov	r0, r5
 8017018:	f7fe fa24 	bl	8015464 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801701c:	6a23      	ldr	r3, [r4, #32]
 801701e:	4620      	mov	r0, r4
 8017020:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017022:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8017026:	075b      	lsls	r3, r3, #29
 8017028:	d40a      	bmi.n	8017040 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801702a:	6833      	ldr	r3, [r6, #0]
 801702c:	681a      	ldr	r2, [r3, #0]
 801702e:	2a00      	cmp	r2, #0
 8017030:	d1ed      	bne.n	801700e <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8017032:	4a14      	ldr	r2, [pc, #80]	; (8017084 <prvSwitchTimerLists+0x84>)
 8017034:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017036:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8017038:	6031      	str	r1, [r6, #0]
}
 801703a:	b002      	add	sp, #8
 801703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017040:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017042:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017044:	2300      	movs	r3, #0
 8017046:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017048:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801704a:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 801704c:	42af      	cmp	r7, r5
 801704e:	d205      	bcs.n	801705c <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017050:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017052:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017054:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017056:	f7fe f9ed 	bl	8015434 <vListInsert>
 801705a:	e7e6      	b.n	801702a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801705c:	4619      	mov	r1, r3
 801705e:	f8cd 8000 	str.w	r8, [sp]
 8017062:	f7ff ff95 	bl	8016f90 <xTimerGenericCommand>
				configASSERT( xResult );
 8017066:	2800      	cmp	r0, #0
 8017068:	d1df      	bne.n	801702a <prvSwitchTimerLists+0x2a>
 801706a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801706e:	b672      	cpsid	i
 8017070:	f383 8811 	msr	BASEPRI, r3
 8017074:	f3bf 8f6f 	isb	sy
 8017078:	f3bf 8f4f 	dsb	sy
 801707c:	b662      	cpsie	i
 801707e:	e7fe      	b.n	801707e <prvSwitchTimerLists+0x7e>
 8017080:	200061a4 	.word	0x200061a4
 8017084:	200061a8 	.word	0x200061a8

08017088 <prvTimerTask>:
{
 8017088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801708c:	4e9a      	ldr	r6, [pc, #616]	; (80172f8 <prvTimerTask+0x270>)
 801708e:	b087      	sub	sp, #28
 8017090:	4d9a      	ldr	r5, [pc, #616]	; (80172fc <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8017092:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8017096:	4c9a      	ldr	r4, [pc, #616]	; (8017300 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017098:	6833      	ldr	r3, [r6, #0]
 801709a:	681f      	ldr	r7, [r3, #0]
 801709c:	2f00      	cmp	r7, #0
 801709e:	f000 80ac 	beq.w	80171fa <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80170a6:	f7ff fa01 	bl	80164ac <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80170aa:	f7ff fa07 	bl	80164bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80170ae:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80170b0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80170b2:	4290      	cmp	r0, r2
 80170b4:	f0c0 80a9 	bcc.w	801720a <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80170b8:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80170ba:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80170bc:	f200 80ca 	bhi.w	8017254 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 80170c0:	f7ff fb50 	bl	8016764 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170c4:	6832      	ldr	r2, [r6, #0]
 80170c6:	68d2      	ldr	r2, [r2, #12]
 80170c8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80170cc:	f10b 0804 	add.w	r8, fp, #4
 80170d0:	4640      	mov	r0, r8
 80170d2:	f7fe f9c7 	bl	8015464 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80170d6:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 80170da:	0743      	lsls	r3, r0, #29
 80170dc:	f100 80ca 	bmi.w	8017274 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80170e0:	f020 0001 	bic.w	r0, r0, #1
 80170e4:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80170e8:	f8db 3020 	ldr.w	r3, [fp, #32]
 80170ec:	4658      	mov	r0, fp
 80170ee:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80170f0:	2200      	movs	r2, #0
 80170f2:	a902      	add	r1, sp, #8
 80170f4:	6820      	ldr	r0, [r4, #0]
 80170f6:	f7fe fcf5 	bl	8015ae4 <xQueueReceive>
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d0cc      	beq.n	8017098 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80170fe:	9b02      	ldr	r3, [sp, #8]
 8017100:	2b00      	cmp	r3, #0
 8017102:	db71      	blt.n	80171e8 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017104:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	b113      	cbz	r3, 8017110 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801710a:	1d38      	adds	r0, r7, #4
 801710c:	f7fe f9aa 	bl	8015464 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8017110:	f7ff f9d4 	bl	80164bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8017114:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017116:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8017118:	4298      	cmp	r0, r3
 801711a:	d37d      	bcc.n	8017218 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 801711c:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 801711e:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8017122:	2b09      	cmp	r3, #9
 8017124:	d8e4      	bhi.n	80170f0 <prvTimerTask+0x68>
 8017126:	e8df f003 	tbb	[pc, r3]
 801712a:	0505      	.short	0x0505
 801712c:	56394f05 	.word	0x56394f05
 8017130:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017134:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017138:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801713a:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801713e:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017140:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017142:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017146:	185a      	adds	r2, r3, r1
 8017148:	bf2c      	ite	cs
 801714a:	2001      	movcs	r0, #1
 801714c:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 801714e:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017150:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8017152:	f200 8081 	bhi.w	8017258 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017156:	eba8 0303 	sub.w	r3, r8, r3
 801715a:	4299      	cmp	r1, r3
 801715c:	f200 80b5 	bhi.w	80172ca <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	4638      	mov	r0, r7
 8017164:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801716a:	0759      	lsls	r1, r3, #29
 801716c:	d5c0      	bpl.n	80170f0 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801716e:	2200      	movs	r2, #0
 8017170:	69bb      	ldr	r3, [r7, #24]
 8017172:	4638      	mov	r0, r7
 8017174:	9200      	str	r2, [sp, #0]
 8017176:	9a03      	ldr	r2, [sp, #12]
 8017178:	441a      	add	r2, r3
 801717a:	2300      	movs	r3, #0
 801717c:	4619      	mov	r1, r3
 801717e:	f7ff ff07 	bl	8016f90 <xTimerGenericCommand>
							configASSERT( xResult );
 8017182:	2800      	cmp	r0, #0
 8017184:	d1b4      	bne.n	80170f0 <prvTimerTask+0x68>
 8017186:	f04f 0330 	mov.w	r3, #48	; 0x30
 801718a:	b672      	cpsid	i
 801718c:	f383 8811 	msr	BASEPRI, r3
 8017190:	f3bf 8f6f 	isb	sy
 8017194:	f3bf 8f4f 	dsb	sy
 8017198:	b662      	cpsie	i
 801719a:	e7fe      	b.n	801719a <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801719c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80171a0:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80171a2:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80171a6:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80171a8:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f000 8098 	beq.w	80172e2 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80171b2:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80171b4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80171b6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80171b8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80171ba:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80171bc:	d856      	bhi.n	801726c <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80171be:	4b51      	ldr	r3, [pc, #324]	; (8017304 <prvTimerTask+0x27c>)
 80171c0:	6818      	ldr	r0, [r3, #0]
 80171c2:	f7fe f937 	bl	8015434 <vListInsert>
	return xProcessTimerNow;
 80171c6:	e793      	b.n	80170f0 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80171c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80171cc:	f023 0301 	bic.w	r3, r3, #1
 80171d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 80171d4:	e78c      	b.n	80170f0 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80171d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80171da:	079a      	lsls	r2, r3, #30
 80171dc:	d56c      	bpl.n	80172b8 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80171de:	f023 0301 	bic.w	r3, r3, #1
 80171e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80171e6:	e783      	b.n	80170f0 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80171e8:	9b03      	ldr	r3, [sp, #12]
 80171ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80171ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80171f0:	9b02      	ldr	r3, [sp, #8]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f6ff af7c 	blt.w	80170f0 <prvTimerTask+0x68>
 80171f8:	e784      	b.n	8017104 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80171fa:	f7ff f957 	bl	80164ac <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80171fe:	f7ff f95d 	bl	80164bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8017202:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017204:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8017206:	4282      	cmp	r2, r0
 8017208:	d909      	bls.n	801721e <prvTimerTask+0x196>
		prvSwitchTimerLists();
 801720a:	f7ff fef9 	bl	8017000 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801720e:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8017212:	f7ff faa7 	bl	8016764 <xTaskResumeAll>
 8017216:	e76b      	b.n	80170f0 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8017218:	f7ff fef2 	bl	8017000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801721c:	e77e      	b.n	801711c <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801721e:	4b39      	ldr	r3, [pc, #228]	; (8017304 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8017220:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017224:	681a      	ldr	r2, [r3, #0]
 8017226:	6812      	ldr	r2, [r2, #0]
 8017228:	fab2 f282 	clz	r2, r2
 801722c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801722e:	eba7 010a 	sub.w	r1, r7, sl
 8017232:	6820      	ldr	r0, [r4, #0]
 8017234:	f7fe fe7e 	bl	8015f34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017238:	f7ff fa94 	bl	8016764 <xTaskResumeAll>
 801723c:	2800      	cmp	r0, #0
 801723e:	f47f af57 	bne.w	80170f0 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8017242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017246:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	f3bf 8f6f 	isb	sy
 8017252:	e74d      	b.n	80170f0 <prvTimerTask+0x68>
 8017254:	2200      	movs	r2, #0
 8017256:	e7ea      	b.n	801722e <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017258:	4543      	cmp	r3, r8
 801725a:	d902      	bls.n	8017262 <prvTimerTask+0x1da>
 801725c:	2800      	cmp	r0, #0
 801725e:	f43f af7f 	beq.w	8017160 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017262:	1d39      	adds	r1, r7, #4
 8017264:	6830      	ldr	r0, [r6, #0]
 8017266:	f7fe f8e5 	bl	8015434 <vListInsert>
	return xProcessTimerNow;
 801726a:	e741      	b.n	80170f0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801726c:	6830      	ldr	r0, [r6, #0]
 801726e:	f7fe f8e1 	bl	8015434 <vListInsert>
 8017272:	e73d      	b.n	80170f0 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017274:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017278:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801727c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 801727e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017280:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8017284:	d31c      	bcc.n	80172c0 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017286:	ebaa 0307 	sub.w	r3, sl, r7
 801728a:	429a      	cmp	r2, r3
 801728c:	d823      	bhi.n	80172d6 <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801728e:	2300      	movs	r3, #0
 8017290:	463a      	mov	r2, r7
 8017292:	4658      	mov	r0, fp
 8017294:	4619      	mov	r1, r3
 8017296:	9300      	str	r3, [sp, #0]
 8017298:	f7ff fe7a 	bl	8016f90 <xTimerGenericCommand>
			configASSERT( xResult );
 801729c:	2800      	cmp	r0, #0
 801729e:	f47f af23 	bne.w	80170e8 <prvTimerTask+0x60>
 80172a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172a6:	b672      	cpsid	i
 80172a8:	f383 8811 	msr	BASEPRI, r3
 80172ac:	f3bf 8f6f 	isb	sy
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	b662      	cpsie	i
 80172b6:	e7fe      	b.n	80172b6 <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 80172b8:	4638      	mov	r0, r7
 80172ba:	f000 fa99 	bl	80177f0 <vPortFree>
 80172be:	e717      	b.n	80170f0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80172c0:	4641      	mov	r1, r8
 80172c2:	6830      	ldr	r0, [r6, #0]
 80172c4:	f7fe f8b6 	bl	8015434 <vListInsert>
	return xProcessTimerNow;
 80172c8:	e70e      	b.n	80170e8 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80172ca:	4b0e      	ldr	r3, [pc, #56]	; (8017304 <prvTimerTask+0x27c>)
 80172cc:	1d39      	adds	r1, r7, #4
 80172ce:	6818      	ldr	r0, [r3, #0]
 80172d0:	f7fe f8b0 	bl	8015434 <vListInsert>
	return xProcessTimerNow;
 80172d4:	e70c      	b.n	80170f0 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80172d6:	4b0b      	ldr	r3, [pc, #44]	; (8017304 <prvTimerTask+0x27c>)
 80172d8:	4641      	mov	r1, r8
 80172da:	6818      	ldr	r0, [r3, #0]
 80172dc:	f7fe f8aa 	bl	8015434 <vListInsert>
	return xProcessTimerNow;
 80172e0:	e702      	b.n	80170e8 <prvTimerTask+0x60>
 80172e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172e6:	b672      	cpsid	i
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80172f6:	e7fe      	b.n	80172f6 <prvTimerTask+0x26e>
 80172f8:	200061a4 	.word	0x200061a4
 80172fc:	20006274 	.word	0x20006274
 8017300:	200062c0 	.word	0x200062c0
 8017304:	200061a8 	.word	0x200061a8

08017308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017308:	4808      	ldr	r0, [pc, #32]	; (801732c <prvPortStartFirstTask+0x24>)
 801730a:	6800      	ldr	r0, [r0, #0]
 801730c:	6800      	ldr	r0, [r0, #0]
 801730e:	f380 8808 	msr	MSP, r0
 8017312:	f04f 0000 	mov.w	r0, #0
 8017316:	f380 8814 	msr	CONTROL, r0
 801731a:	b662      	cpsie	i
 801731c:	b661      	cpsie	f
 801731e:	f3bf 8f4f 	dsb	sy
 8017322:	f3bf 8f6f 	isb	sy
 8017326:	df00      	svc	0
 8017328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801732a:	0000      	.short	0x0000
 801732c:	e000ed08 	.word	0xe000ed08

08017330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017340 <vPortEnableVFP+0x10>
 8017334:	6801      	ldr	r1, [r0, #0]
 8017336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801733a:	6001      	str	r1, [r0, #0]
 801733c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801733e:	0000      	.short	0x0000
 8017340:	e000ed88 	.word	0xe000ed88

08017344 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8017344:	4b10      	ldr	r3, [pc, #64]	; (8017388 <prvTaskExitError+0x44>)
{
 8017346:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8017348:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801734a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 801734c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801734e:	3301      	adds	r3, #1
 8017350:	d00a      	beq.n	8017368 <prvTaskExitError+0x24>
 8017352:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017356:	b672      	cpsid	i
 8017358:	f383 8811 	msr	BASEPRI, r3
 801735c:	f3bf 8f6f 	isb	sy
 8017360:	f3bf 8f4f 	dsb	sy
 8017364:	b662      	cpsie	i
 8017366:	e7fe      	b.n	8017366 <prvTaskExitError+0x22>
 8017368:	f04f 0330 	mov.w	r3, #48	; 0x30
 801736c:	b672      	cpsid	i
 801736e:	f383 8811 	msr	BASEPRI, r3
 8017372:	f3bf 8f6f 	isb	sy
 8017376:	f3bf 8f4f 	dsb	sy
 801737a:	b662      	cpsie	i
	while( ulDummy == 0 )
 801737c:	9b01      	ldr	r3, [sp, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d0fc      	beq.n	801737c <prvTaskExitError+0x38>
}
 8017382:	b002      	add	sp, #8
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop
 8017388:	2000040c 	.word	0x2000040c

0801738c <pxPortInitialiseStack>:
{
 801738c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801738e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017392:	4809      	ldr	r0, [pc, #36]	; (80173b8 <pxPortInitialiseStack+0x2c>)
{
 8017394:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017396:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801739a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801739e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80173a2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80173a6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80173aa:	f06f 0102 	mvn.w	r1, #2
}
 80173ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80173b2:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80173b6:	4770      	bx	lr
 80173b8:	08017345 	.word	0x08017345
 80173bc:	ffffffff 	.word	0xffffffff

080173c0 <SVC_Handler>:
	__asm volatile (
 80173c0:	4b07      	ldr	r3, [pc, #28]	; (80173e0 <pxCurrentTCBConst2>)
 80173c2:	6819      	ldr	r1, [r3, #0]
 80173c4:	6808      	ldr	r0, [r1, #0]
 80173c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ca:	f380 8809 	msr	PSP, r0
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	f04f 0000 	mov.w	r0, #0
 80173d6:	f380 8811 	msr	BASEPRI, r0
 80173da:	4770      	bx	lr
 80173dc:	f3af 8000 	nop.w

080173e0 <pxCurrentTCBConst2>:
 80173e0:	2000607c 	.word	0x2000607c

080173e4 <vPortEnterCritical>:
 80173e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173e8:	b672      	cpsid	i
 80173ea:	f383 8811 	msr	BASEPRI, r3
 80173ee:	f3bf 8f6f 	isb	sy
 80173f2:	f3bf 8f4f 	dsb	sy
 80173f6:	b662      	cpsie	i
	uxCriticalNesting++;
 80173f8:	4a0c      	ldr	r2, [pc, #48]	; (801742c <vPortEnterCritical+0x48>)
 80173fa:	6813      	ldr	r3, [r2, #0]
 80173fc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80173fe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8017400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8017402:	d000      	beq.n	8017406 <vPortEnterCritical+0x22>
}
 8017404:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017406:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801740a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801740e:	b2db      	uxtb	r3, r3
 8017410:	2b00      	cmp	r3, #0
 8017412:	d0f7      	beq.n	8017404 <vPortEnterCritical+0x20>
 8017414:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017418:	b672      	cpsid	i
 801741a:	f383 8811 	msr	BASEPRI, r3
 801741e:	f3bf 8f6f 	isb	sy
 8017422:	f3bf 8f4f 	dsb	sy
 8017426:	b662      	cpsie	i
 8017428:	e7fe      	b.n	8017428 <vPortEnterCritical+0x44>
 801742a:	bf00      	nop
 801742c:	2000040c 	.word	0x2000040c

08017430 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8017430:	4a09      	ldr	r2, [pc, #36]	; (8017458 <vPortExitCritical+0x28>)
 8017432:	6813      	ldr	r3, [r2, #0]
 8017434:	b953      	cbnz	r3, 801744c <vPortExitCritical+0x1c>
 8017436:	f04f 0330 	mov.w	r3, #48	; 0x30
 801743a:	b672      	cpsid	i
 801743c:	f383 8811 	msr	BASEPRI, r3
 8017440:	f3bf 8f6f 	isb	sy
 8017444:	f3bf 8f4f 	dsb	sy
 8017448:	b662      	cpsie	i
 801744a:	e7fe      	b.n	801744a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801744c:	3b01      	subs	r3, #1
 801744e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017450:	b90b      	cbnz	r3, 8017456 <vPortExitCritical+0x26>
	__asm volatile
 8017452:	f383 8811 	msr	BASEPRI, r3
}
 8017456:	4770      	bx	lr
 8017458:	2000040c 	.word	0x2000040c
 801745c:	ffffffff 	.word	0xffffffff

08017460 <PendSV_Handler>:
	__asm volatile
 8017460:	f3ef 8009 	mrs	r0, PSP
 8017464:	f3bf 8f6f 	isb	sy
 8017468:	4b15      	ldr	r3, [pc, #84]	; (80174c0 <pxCurrentTCBConst>)
 801746a:	681a      	ldr	r2, [r3, #0]
 801746c:	f01e 0f10 	tst.w	lr, #16
 8017470:	bf08      	it	eq
 8017472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747a:	6010      	str	r0, [r2, #0]
 801747c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017480:	f04f 0030 	mov.w	r0, #48	; 0x30
 8017484:	b672      	cpsid	i
 8017486:	f380 8811 	msr	BASEPRI, r0
 801748a:	f3bf 8f4f 	dsb	sy
 801748e:	f3bf 8f6f 	isb	sy
 8017492:	b662      	cpsie	i
 8017494:	f7ff f9ac 	bl	80167f0 <vTaskSwitchContext>
 8017498:	f04f 0000 	mov.w	r0, #0
 801749c:	f380 8811 	msr	BASEPRI, r0
 80174a0:	bc09      	pop	{r0, r3}
 80174a2:	6819      	ldr	r1, [r3, #0]
 80174a4:	6808      	ldr	r0, [r1, #0]
 80174a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174aa:	f01e 0f10 	tst.w	lr, #16
 80174ae:	bf08      	it	eq
 80174b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80174b4:	f380 8809 	msr	PSP, r0
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	4770      	bx	lr
 80174be:	bf00      	nop

080174c0 <pxCurrentTCBConst>:
 80174c0:	2000607c 	.word	0x2000607c

080174c4 <SysTick_Handler>:
{
 80174c4:	b508      	push	{r3, lr}
	__asm volatile
 80174c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80174ca:	b672      	cpsid	i
 80174cc:	f383 8811 	msr	BASEPRI, r3
 80174d0:	f3bf 8f6f 	isb	sy
 80174d4:	f3bf 8f4f 	dsb	sy
 80174d8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80174da:	f7fe fffd 	bl	80164d8 <xTaskIncrementTick>
 80174de:	b128      	cbz	r0, 80174ec <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80174e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80174e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80174ec:	2300      	movs	r3, #0
 80174ee:	f383 8811 	msr	BASEPRI, r3
}
 80174f2:	bd08      	pop	{r3, pc}

080174f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80174f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80174f8:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80174fa:	4b06      	ldr	r3, [pc, #24]	; (8017514 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80174fc:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80174fe:	4806      	ldr	r0, [pc, #24]	; (8017518 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017500:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017502:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	fba0 0303 	umull	r0, r3, r0, r3
 801750a:	099b      	lsrs	r3, r3, #6
 801750c:	3b01      	subs	r3, #1
 801750e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017510:	6111      	str	r1, [r2, #16]
}
 8017512:	4770      	bx	lr
 8017514:	2000027c 	.word	0x2000027c
 8017518:	10624dd3 	.word	0x10624dd3

0801751c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801751c:	4b30      	ldr	r3, [pc, #192]	; (80175e0 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801751e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017522:	4830      	ldr	r0, [pc, #192]	; (80175e4 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017524:	4930      	ldr	r1, [pc, #192]	; (80175e8 <xPortStartScheduler+0xcc>)
{
 8017526:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017528:	781a      	ldrb	r2, [r3, #0]
{
 801752a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801752c:	b2d2      	uxtb	r2, r2
 801752e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017530:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017532:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017536:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017538:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801753a:	b2db      	uxtb	r3, r3
 801753c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017540:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017544:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017548:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801754c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801754e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017550:	d50f      	bpl.n	8017572 <xPortStartScheduler+0x56>
 8017552:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017554:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017558:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801755a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801755c:	005b      	lsls	r3, r3, #1
 801755e:	b2db      	uxtb	r3, r3
 8017560:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017564:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017568:	061b      	lsls	r3, r3, #24
 801756a:	d4f3      	bmi.n	8017554 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801756c:	2903      	cmp	r1, #3
 801756e:	d00b      	beq.n	8017588 <xPortStartScheduler+0x6c>
 8017570:	6001      	str	r1, [r0, #0]
	__asm volatile
 8017572:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017576:	b672      	cpsid	i
 8017578:	f383 8811 	msr	BASEPRI, r3
 801757c:	f3bf 8f6f 	isb	sy
 8017580:	f3bf 8f4f 	dsb	sy
 8017584:	b662      	cpsie	i
 8017586:	e7fe      	b.n	8017586 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017588:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801758a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801758e:	4a14      	ldr	r2, [pc, #80]	; (80175e0 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017590:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017594:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8017596:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017598:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801759a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801759c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80175a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80175a4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80175a8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80175ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80175b0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80175b4:	f7ff ff9e 	bl	80174f4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80175b8:	4b0c      	ldr	r3, [pc, #48]	; (80175ec <xPortStartScheduler+0xd0>)
 80175ba:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80175bc:	f7ff feb8 	bl	8017330 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80175c0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80175c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80175c8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80175cc:	f7ff fe9c 	bl	8017308 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80175d0:	f7ff f90e 	bl	80167f0 <vTaskSwitchContext>
}
 80175d4:	4628      	mov	r0, r5
	prvTaskExitError();
 80175d6:	f7ff feb5 	bl	8017344 <prvTaskExitError>
}
 80175da:	b003      	add	sp, #12
 80175dc:	bd30      	pop	{r4, r5, pc}
 80175de:	bf00      	nop
 80175e0:	e000e400 	.word	0xe000e400
 80175e4:	200062cc 	.word	0x200062cc
 80175e8:	200062c8 	.word	0x200062c8
 80175ec:	2000040c 	.word	0x2000040c

080175f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80175f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80175f4:	2b0f      	cmp	r3, #15
 80175f6:	d910      	bls.n	801761a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80175f8:	4913      	ldr	r1, [pc, #76]	; (8017648 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80175fa:	4a14      	ldr	r2, [pc, #80]	; (801764c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80175fc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80175fe:	7812      	ldrb	r2, [r2, #0]
 8017600:	429a      	cmp	r2, r3
 8017602:	d90a      	bls.n	801761a <vPortValidateInterruptPriority+0x2a>
 8017604:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017608:	b672      	cpsid	i
 801760a:	f383 8811 	msr	BASEPRI, r3
 801760e:	f3bf 8f6f 	isb	sy
 8017612:	f3bf 8f4f 	dsb	sy
 8017616:	b662      	cpsie	i
 8017618:	e7fe      	b.n	8017618 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801761a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801761e:	4a0c      	ldr	r2, [pc, #48]	; (8017650 <vPortValidateInterruptPriority+0x60>)
 8017620:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8017624:	6812      	ldr	r2, [r2, #0]
 8017626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801762a:	4293      	cmp	r3, r2
 801762c:	d90a      	bls.n	8017644 <vPortValidateInterruptPriority+0x54>
 801762e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017632:	b672      	cpsid	i
 8017634:	f383 8811 	msr	BASEPRI, r3
 8017638:	f3bf 8f6f 	isb	sy
 801763c:	f3bf 8f4f 	dsb	sy
 8017640:	b662      	cpsie	i
 8017642:	e7fe      	b.n	8017642 <vPortValidateInterruptPriority+0x52>
	}
 8017644:	4770      	bx	lr
 8017646:	bf00      	nop
 8017648:	e000e3f0 	.word	0xe000e3f0
 801764c:	200062c8 	.word	0x200062c8
 8017650:	200062cc 	.word	0x200062cc

08017654 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017654:	4b16      	ldr	r3, [pc, #88]	; (80176b0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8017656:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017658:	461a      	mov	r2, r3
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	4283      	cmp	r3, r0
 801765e:	d3fb      	bcc.n	8017658 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017660:	6851      	ldr	r1, [r2, #4]
 8017662:	eb02 0c01 	add.w	ip, r2, r1
 8017666:	4560      	cmp	r0, ip
 8017668:	d00b      	beq.n	8017682 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801766a:	6841      	ldr	r1, [r0, #4]
 801766c:	eb00 0c01 	add.w	ip, r0, r1
 8017670:	4563      	cmp	r3, ip
 8017672:	d00e      	beq.n	8017692 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017674:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017676:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017678:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801767c:	bf18      	it	ne
 801767e:	6010      	strne	r0, [r2, #0]
}
 8017680:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017682:	6844      	ldr	r4, [r0, #4]
 8017684:	4610      	mov	r0, r2
 8017686:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017688:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801768c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801768e:	4563      	cmp	r3, ip
 8017690:	d1f0      	bne.n	8017674 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017692:	4c08      	ldr	r4, [pc, #32]	; (80176b4 <prvInsertBlockIntoFreeList+0x60>)
 8017694:	6824      	ldr	r4, [r4, #0]
 8017696:	42a3      	cmp	r3, r4
 8017698:	d0ec      	beq.n	8017674 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 801769a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801769c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80176a0:	4421      	add	r1, r4
}
 80176a2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80176a6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80176aa:	bf18      	it	ne
 80176ac:	6010      	strne	r0, [r2, #0]
}
 80176ae:	4770      	bx	lr
 80176b0:	2001e2e0 	.word	0x2001e2e0
 80176b4:	200062d0 	.word	0x200062d0

080176b8 <pvPortMalloc>:
{
 80176b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176bc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80176be:	f7fe fef5 	bl	80164ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 80176c2:	f8df c128 	ldr.w	ip, [pc, #296]	; 80177ec <pvPortMalloc+0x134>
 80176c6:	f8dc 3000 	ldr.w	r3, [ip]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d05d      	beq.n	801778a <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80176ce:	4b42      	ldr	r3, [pc, #264]	; (80177d8 <pvPortMalloc+0x120>)
 80176d0:	681d      	ldr	r5, [r3, #0]
 80176d2:	422c      	tst	r4, r5
 80176d4:	d130      	bne.n	8017738 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 80176d6:	b37c      	cbz	r4, 8017738 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80176d8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80176da:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80176de:	d002      	beq.n	80176e6 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80176e0:	f021 0107 	bic.w	r1, r1, #7
 80176e4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80176e6:	b339      	cbz	r1, 8017738 <pvPortMalloc+0x80>
 80176e8:	4f3c      	ldr	r7, [pc, #240]	; (80177dc <pvPortMalloc+0x124>)
 80176ea:	683e      	ldr	r6, [r7, #0]
 80176ec:	428e      	cmp	r6, r1
 80176ee:	d323      	bcc.n	8017738 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 80176f0:	483b      	ldr	r0, [pc, #236]	; (80177e0 <pvPortMalloc+0x128>)
 80176f2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80176f4:	e003      	b.n	80176fe <pvPortMalloc+0x46>
 80176f6:	6823      	ldr	r3, [r4, #0]
 80176f8:	b123      	cbz	r3, 8017704 <pvPortMalloc+0x4c>
 80176fa:	4620      	mov	r0, r4
 80176fc:	461c      	mov	r4, r3
 80176fe:	6862      	ldr	r2, [r4, #4]
 8017700:	428a      	cmp	r2, r1
 8017702:	d3f8      	bcc.n	80176f6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8017704:	f8dc 3000 	ldr.w	r3, [ip]
 8017708:	42a3      	cmp	r3, r4
 801770a:	d015      	beq.n	8017738 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801770c:	6803      	ldr	r3, [r0, #0]
 801770e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017712:	6823      	ldr	r3, [r4, #0]
 8017714:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017716:	1a53      	subs	r3, r2, r1
 8017718:	2b10      	cmp	r3, #16
 801771a:	d91b      	bls.n	8017754 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801771c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801771e:	0742      	lsls	r2, r0, #29
 8017720:	d013      	beq.n	801774a <pvPortMalloc+0x92>
 8017722:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017726:	b672      	cpsid	i
 8017728:	f383 8811 	msr	BASEPRI, r3
 801772c:	f3bf 8f6f 	isb	sy
 8017730:	f3bf 8f4f 	dsb	sy
 8017734:	b662      	cpsie	i
 8017736:	e7fe      	b.n	8017736 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8017738:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 801773c:	f7ff f812 	bl	8016764 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8017740:	f7e9 fb98 	bl	8000e74 <vApplicationMallocFailedHook>
}
 8017744:	4640      	mov	r0, r8
 8017746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801774a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801774c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801774e:	f7ff ff81 	bl	8017654 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017752:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017754:	4b23      	ldr	r3, [pc, #140]	; (80177e4 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017756:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017758:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801775a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801775c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801775e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017760:	bf38      	it	cc
 8017762:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8017764:	2300      	movs	r3, #0
 8017766:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 801776a:	f7fe fffb 	bl	8016764 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801776e:	f018 0f07 	tst.w	r8, #7
 8017772:	d0e7      	beq.n	8017744 <pvPortMalloc+0x8c>
 8017774:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017778:	b672      	cpsid	i
 801777a:	f383 8811 	msr	BASEPRI, r3
 801777e:	f3bf 8f6f 	isb	sy
 8017782:	f3bf 8f4f 	dsb	sy
 8017786:	b662      	cpsie	i
 8017788:	e7fe      	b.n	8017788 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 801778a:	4b17      	ldr	r3, [pc, #92]	; (80177e8 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801778c:	075d      	lsls	r5, r3, #29
 801778e:	d11b      	bne.n	80177c8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017790:	461a      	mov	r2, r3
 8017792:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8017796:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8017798:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 801779a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801779c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80177a0:	f023 0307 	bic.w	r3, r3, #7
}
 80177a4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80177a6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 80177a8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 80177ac:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80177b0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80177b4:	4b0a      	ldr	r3, [pc, #40]	; (80177e0 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 80177b6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177ba:	4b0a      	ldr	r3, [pc, #40]	; (80177e4 <pvPortMalloc+0x12c>)
 80177bc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177be:	4b07      	ldr	r3, [pc, #28]	; (80177dc <pvPortMalloc+0x124>)
 80177c0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80177c2:	4b05      	ldr	r3, [pc, #20]	; (80177d8 <pvPortMalloc+0x120>)
 80177c4:	601e      	str	r6, [r3, #0]
}
 80177c6:	e784      	b.n	80176d2 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80177c8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80177ca:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80177ce:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80177d2:	4610      	mov	r0, r2
 80177d4:	e7e0      	b.n	8017798 <pvPortMalloc+0xe0>
 80177d6:	bf00      	nop
 80177d8:	2001e2d4 	.word	0x2001e2d4
 80177dc:	2001e2d8 	.word	0x2001e2d8
 80177e0:	2001e2e0 	.word	0x2001e2e0
 80177e4:	2001e2dc 	.word	0x2001e2dc
 80177e8:	200062d4 	.word	0x200062d4
 80177ec:	200062d0 	.word	0x200062d0

080177f0 <vPortFree>:
	if( pv != NULL )
 80177f0:	b1f0      	cbz	r0, 8017830 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80177f2:	4a1c      	ldr	r2, [pc, #112]	; (8017864 <vPortFree+0x74>)
 80177f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80177f8:	6812      	ldr	r2, [r2, #0]
 80177fa:	4213      	tst	r3, r2
 80177fc:	d00d      	beq.n	801781a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80177fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017802:	b1b1      	cbz	r1, 8017832 <vPortFree+0x42>
 8017804:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017808:	b672      	cpsid	i
 801780a:	f383 8811 	msr	BASEPRI, r3
 801780e:	f3bf 8f6f 	isb	sy
 8017812:	f3bf 8f4f 	dsb	sy
 8017816:	b662      	cpsie	i
 8017818:	e7fe      	b.n	8017818 <vPortFree+0x28>
 801781a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801781e:	b672      	cpsid	i
 8017820:	f383 8811 	msr	BASEPRI, r3
 8017824:	f3bf 8f6f 	isb	sy
 8017828:	f3bf 8f4f 	dsb	sy
 801782c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801782e:	e7fe      	b.n	801782e <vPortFree+0x3e>
 8017830:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017832:	ea23 0302 	bic.w	r3, r3, r2
{
 8017836:	b500      	push	{lr}
 8017838:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801783a:	f840 3c04 	str.w	r3, [r0, #-4]
 801783e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8017840:	f7fe fe34 	bl	80164ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017844:	4a08      	ldr	r2, [pc, #32]	; (8017868 <vPortFree+0x78>)
 8017846:	9801      	ldr	r0, [sp, #4]
 8017848:	6811      	ldr	r1, [r2, #0]
 801784a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801784e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017850:	440b      	add	r3, r1
 8017852:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017854:	f7ff fefe 	bl	8017654 <prvInsertBlockIntoFreeList>
}
 8017858:	b003      	add	sp, #12
 801785a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 801785e:	f7fe bf81 	b.w	8016764 <xTaskResumeAll>
 8017862:	bf00      	nop
 8017864:	2001e2d4 	.word	0x2001e2d4
 8017868:	2001e2d8 	.word	0x2001e2d8

0801786c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 801786c:	f003 baf4 	b.w	801ae58 <pbuf_free>

08017870 <tcpip_thread>:
{
 8017870:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8017872:	4839      	ldr	r0, [pc, #228]	; (8017958 <tcpip_thread+0xe8>)
{
 8017874:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8017876:	f00b fed5 	bl	8023624 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801787a:	4b38      	ldr	r3, [pc, #224]	; (801795c <tcpip_thread+0xec>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	b113      	cbz	r3, 8017886 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8017880:	4a37      	ldr	r2, [pc, #220]	; (8017960 <tcpip_thread+0xf0>)
 8017882:	6810      	ldr	r0, [r2, #0]
 8017884:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017886:	4d34      	ldr	r5, [pc, #208]	; (8017958 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017888:	4e36      	ldr	r6, [pc, #216]	; (8017964 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801788a:	4f37      	ldr	r7, [pc, #220]	; (8017968 <tcpip_thread+0xf8>)
 801788c:	e010      	b.n	80178b0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 801788e:	b168      	cbz	r0, 80178ac <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8017890:	4628      	mov	r0, r5
 8017892:	f00b fecd 	bl	8023630 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017896:	4622      	mov	r2, r4
 8017898:	a901      	add	r1, sp, #4
 801789a:	4630      	mov	r0, r6
 801789c:	f00b fe7e 	bl	802359c <sys_arch_mbox_fetch>
 80178a0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80178a2:	4628      	mov	r0, r5
 80178a4:	f00b febe 	bl	8023624 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80178a8:	3401      	adds	r4, #1
 80178aa:	d111      	bne.n	80178d0 <tcpip_thread+0x60>
    sys_check_timeouts();
 80178ac:	f008 f832 	bl	801f914 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80178b0:	f008 f858 	bl	801f964 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80178b4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80178b6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80178b8:	d1e9      	bne.n	801788e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80178ba:	4628      	mov	r0, r5
 80178bc:	f00b feb8 	bl	8023630 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80178c0:	2200      	movs	r2, #0
 80178c2:	a901      	add	r1, sp, #4
 80178c4:	4630      	mov	r0, r6
 80178c6:	f00b fe69 	bl	802359c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80178ca:	4628      	mov	r0, r5
 80178cc:	f00b feaa 	bl	8023624 <sys_mutex_lock>
    if (msg == NULL) {
 80178d0:	9c01      	ldr	r4, [sp, #4]
 80178d2:	b37c      	cbz	r4, 8017934 <tcpip_thread+0xc4>
  switch (msg->type) {
 80178d4:	7823      	ldrb	r3, [r4, #0]
 80178d6:	2b04      	cmp	r3, #4
 80178d8:	d837      	bhi.n	801794a <tcpip_thread+0xda>
 80178da:	e8df f003 	tbb	[pc, r3]
 80178de:	1821      	.short	0x1821
 80178e0:	070f      	.short	0x070f
 80178e2:	03          	.byte	0x03
 80178e3:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 80178e4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80178e8:	4798      	blx	r3
      break;
 80178ea:	e7e1      	b.n	80178b0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80178ec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80178f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80178f2:	4621      	mov	r1, r4
 80178f4:	2009      	movs	r0, #9
 80178f6:	f002 fdb3 	bl	801a460 <memp_free>
      break;
 80178fa:	e7d9      	b.n	80178b0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 80178fc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8017900:	f007 ffea 	bl	801f8d8 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017904:	4621      	mov	r1, r4
 8017906:	2009      	movs	r0, #9
 8017908:	f002 fdaa 	bl	801a460 <memp_free>
      break;
 801790c:	e7d0      	b.n	80178b0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801790e:	1d20      	adds	r0, r4, #4
 8017910:	c807      	ldmia	r0, {r0, r1, r2}
 8017912:	f007 ffc3 	bl	801f89c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017916:	4621      	mov	r1, r4
 8017918:	2009      	movs	r0, #9
 801791a:	f002 fda1 	bl	801a460 <memp_free>
      break;
 801791e:	e7c7      	b.n	80178b0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017920:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017924:	6860      	ldr	r0, [r4, #4]
 8017926:	4798      	blx	r3
 8017928:	b958      	cbnz	r0, 8017942 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801792a:	4621      	mov	r1, r4
 801792c:	200a      	movs	r0, #10
 801792e:	f002 fd97 	bl	801a460 <memp_free>
      break;
 8017932:	e7bd      	b.n	80178b0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017934:	463b      	mov	r3, r7
 8017936:	2291      	movs	r2, #145	; 0x91
 8017938:	490c      	ldr	r1, [pc, #48]	; (801796c <tcpip_thread+0xfc>)
 801793a:	480d      	ldr	r0, [pc, #52]	; (8017970 <tcpip_thread+0x100>)
 801793c:	f00d fb46 	bl	8024fcc <iprintf>
      continue;
 8017940:	e7b6      	b.n	80178b0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8017942:	6860      	ldr	r0, [r4, #4]
 8017944:	f003 fa88 	bl	801ae58 <pbuf_free>
 8017948:	e7ef      	b.n	801792a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801794a:	463b      	mov	r3, r7
 801794c:	22cf      	movs	r2, #207	; 0xcf
 801794e:	4907      	ldr	r1, [pc, #28]	; (801796c <tcpip_thread+0xfc>)
 8017950:	4807      	ldr	r0, [pc, #28]	; (8017970 <tcpip_thread+0x100>)
 8017952:	f00d fb3b 	bl	8024fcc <iprintf>
      break;
 8017956:	e7ab      	b.n	80178b0 <tcpip_thread+0x40>
 8017958:	2001e2e8 	.word	0x2001e2e8
 801795c:	2001e2ec 	.word	0x2001e2ec
 8017960:	2001e2f0 	.word	0x2001e2f0
 8017964:	2001e2f4 	.word	0x2001e2f4
 8017968:	0802c698 	.word	0x0802c698
 801796c:	0802c6c8 	.word	0x0802c6c8
 8017970:	0802bdc0 	.word	0x0802bdc0

08017974 <tcpip_inpkt>:
{
 8017974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017976:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017978:	4814      	ldr	r0, [pc, #80]	; (80179cc <tcpip_inpkt+0x58>)
{
 801797a:	460e      	mov	r6, r1
 801797c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801797e:	f00b fe2f 	bl	80235e0 <sys_mbox_valid>
 8017982:	b188      	cbz	r0, 80179a8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017984:	22fe      	movs	r2, #254	; 0xfe
 8017986:	4912      	ldr	r1, [pc, #72]	; (80179d0 <tcpip_inpkt+0x5c>)
 8017988:	200a      	movs	r0, #10
 801798a:	f002 fd33 	bl	801a3f4 <memp_malloc_fn>
  if (msg == NULL) {
 801798e:	4604      	mov	r4, r0
 8017990:	b1c0      	cbz	r0, 80179c4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8017992:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8017994:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8017996:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017998:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 801799a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801799c:	480b      	ldr	r0, [pc, #44]	; (80179cc <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 801799e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80179a0:	f00b fdf2 	bl	8023588 <sys_mbox_trypost>
 80179a4:	b938      	cbnz	r0, 80179b6 <tcpip_inpkt+0x42>
}
 80179a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80179a8:	4b09      	ldr	r3, [pc, #36]	; (80179d0 <tcpip_inpkt+0x5c>)
 80179aa:	22fc      	movs	r2, #252	; 0xfc
 80179ac:	4909      	ldr	r1, [pc, #36]	; (80179d4 <tcpip_inpkt+0x60>)
 80179ae:	480a      	ldr	r0, [pc, #40]	; (80179d8 <tcpip_inpkt+0x64>)
 80179b0:	f00d fb0c 	bl	8024fcc <iprintf>
 80179b4:	e7e6      	b.n	8017984 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80179b6:	4621      	mov	r1, r4
 80179b8:	200a      	movs	r0, #10
 80179ba:	f002 fd51 	bl	801a460 <memp_free>
    return ERR_MEM;
 80179be:	f04f 30ff 	mov.w	r0, #4294967295
}
 80179c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80179c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179ca:	bf00      	nop
 80179cc:	2001e2f4 	.word	0x2001e2f4
 80179d0:	0802c698 	.word	0x0802c698
 80179d4:	0802c6e8 	.word	0x0802c6e8
 80179d8:	0802bdc0 	.word	0x0802bdc0

080179dc <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80179dc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80179e0:	f013 0f18 	tst.w	r3, #24
 80179e4:	d002      	beq.n	80179ec <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 80179e6:	4a03      	ldr	r2, [pc, #12]	; (80179f4 <tcpip_input+0x18>)
 80179e8:	f7ff bfc4 	b.w	8017974 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 80179ec:	4a02      	ldr	r2, [pc, #8]	; (80179f8 <tcpip_input+0x1c>)
 80179ee:	f7ff bfc1 	b.w	8017974 <tcpip_inpkt>
 80179f2:	bf00      	nop
 80179f4:	08023449 	.word	0x08023449
 80179f8:	080226a5 	.word	0x080226a5

080179fc <tcpip_try_callback>:
{
 80179fc:	b570      	push	{r4, r5, r6, lr}
 80179fe:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017a00:	4814      	ldr	r0, [pc, #80]	; (8017a54 <tcpip_try_callback+0x58>)
{
 8017a02:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017a04:	f00b fdec 	bl	80235e0 <sys_mbox_valid>
 8017a08:	b188      	cbz	r0, 8017a2e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017a0a:	f240 125f 	movw	r2, #351	; 0x15f
 8017a0e:	4912      	ldr	r1, [pc, #72]	; (8017a58 <tcpip_try_callback+0x5c>)
 8017a10:	2009      	movs	r0, #9
 8017a12:	f002 fcef 	bl	801a3f4 <memp_malloc_fn>
  if (msg == NULL) {
 8017a16:	4604      	mov	r4, r0
 8017a18:	b1c0      	cbz	r0, 8017a4c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8017a1a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017a1c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8017a1e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017a22:	480c      	ldr	r0, [pc, #48]	; (8017a54 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8017a24:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017a26:	f00b fdaf 	bl	8023588 <sys_mbox_trypost>
 8017a2a:	b940      	cbnz	r0, 8017a3e <tcpip_try_callback+0x42>
}
 8017a2c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017a2e:	4b0a      	ldr	r3, [pc, #40]	; (8017a58 <tcpip_try_callback+0x5c>)
 8017a30:	f240 125d 	movw	r2, #349	; 0x15d
 8017a34:	4909      	ldr	r1, [pc, #36]	; (8017a5c <tcpip_try_callback+0x60>)
 8017a36:	480a      	ldr	r0, [pc, #40]	; (8017a60 <tcpip_try_callback+0x64>)
 8017a38:	f00d fac8 	bl	8024fcc <iprintf>
 8017a3c:	e7e5      	b.n	8017a0a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017a3e:	4621      	mov	r1, r4
 8017a40:	2009      	movs	r0, #9
 8017a42:	f002 fd0d 	bl	801a460 <memp_free>
    return ERR_MEM;
 8017a46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017a4a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017a4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017a50:	bd70      	pop	{r4, r5, r6, pc}
 8017a52:	bf00      	nop
 8017a54:	2001e2f4 	.word	0x2001e2f4
 8017a58:	0802c698 	.word	0x0802c698
 8017a5c:	0802c6e8 	.word	0x0802c6e8
 8017a60:	0802bdc0 	.word	0x0802bdc0

08017a64 <tcpip_init>:
{
 8017a64:	b530      	push	{r4, r5, lr}
 8017a66:	b083      	sub	sp, #12
 8017a68:	4605      	mov	r5, r0
 8017a6a:	460c      	mov	r4, r1
  lwip_init();
 8017a6c:	f001 ffae 	bl	80199cc <lwip_init>
  tcpip_init_done = initfunc;
 8017a70:	4a15      	ldr	r2, [pc, #84]	; (8017ac8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017a72:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8017a74:	4b15      	ldr	r3, [pc, #84]	; (8017acc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017a76:	4816      	ldr	r0, [pc, #88]	; (8017ad0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8017a78:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8017a7a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017a7c:	f00b fd6e 	bl	802355c <sys_mbox_new>
 8017a80:	b968      	cbnz	r0, 8017a9e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017a82:	4814      	ldr	r0, [pc, #80]	; (8017ad4 <tcpip_init+0x70>)
 8017a84:	f00b fdbe 	bl	8023604 <sys_mutex_new>
 8017a88:	b9a8      	cbnz	r0, 8017ab6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a90:	4911      	ldr	r1, [pc, #68]	; (8017ad8 <tcpip_init+0x74>)
 8017a92:	9200      	str	r2, [sp, #0]
 8017a94:	4811      	ldr	r0, [pc, #68]	; (8017adc <tcpip_init+0x78>)
 8017a96:	f00b fdcf 	bl	8023638 <sys_thread_new>
}
 8017a9a:	b003      	add	sp, #12
 8017a9c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017a9e:	4b10      	ldr	r3, [pc, #64]	; (8017ae0 <tcpip_init+0x7c>)
 8017aa0:	f240 2261 	movw	r2, #609	; 0x261
 8017aa4:	490f      	ldr	r1, [pc, #60]	; (8017ae4 <tcpip_init+0x80>)
 8017aa6:	4810      	ldr	r0, [pc, #64]	; (8017ae8 <tcpip_init+0x84>)
 8017aa8:	f00d fa90 	bl	8024fcc <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017aac:	4809      	ldr	r0, [pc, #36]	; (8017ad4 <tcpip_init+0x70>)
 8017aae:	f00b fda9 	bl	8023604 <sys_mutex_new>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d0e9      	beq.n	8017a8a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017ab6:	4b0a      	ldr	r3, [pc, #40]	; (8017ae0 <tcpip_init+0x7c>)
 8017ab8:	f240 2265 	movw	r2, #613	; 0x265
 8017abc:	490b      	ldr	r1, [pc, #44]	; (8017aec <tcpip_init+0x88>)
 8017abe:	480a      	ldr	r0, [pc, #40]	; (8017ae8 <tcpip_init+0x84>)
 8017ac0:	f00d fa84 	bl	8024fcc <iprintf>
 8017ac4:	e7e1      	b.n	8017a8a <tcpip_init+0x26>
 8017ac6:	bf00      	nop
 8017ac8:	2001e2ec 	.word	0x2001e2ec
 8017acc:	2001e2f0 	.word	0x2001e2f0
 8017ad0:	2001e2f4 	.word	0x2001e2f4
 8017ad4:	2001e2e8 	.word	0x2001e2e8
 8017ad8:	08017871 	.word	0x08017871
 8017adc:	0802c740 	.word	0x0802c740
 8017ae0:	0802c698 	.word	0x0802c698
 8017ae4:	0802c6f8 	.word	0x0802c6f8
 8017ae8:	0802bdc0 	.word	0x0802bdc0
 8017aec:	0802c71c 	.word	0x0802c71c

08017af0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8017af0:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8017af2:	4801      	ldr	r0, [pc, #4]	; (8017af8 <pbuf_free_callback+0x8>)
 8017af4:	f7ff bf82 	b.w	80179fc <tcpip_try_callback>
 8017af8:	0801786d 	.word	0x0801786d

08017afc <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8017afc:	b1e8      	cbz	r0, 8017b3a <fs_open+0x3e>
{
 8017afe:	b570      	push	{r4, r5, r6, lr}
 8017b00:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8017b02:	b1b9      	cbz	r1, 8017b34 <fs_open+0x38>
 8017b04:	4606      	mov	r6, r0
 8017b06:	490e      	ldr	r1, [pc, #56]	; (8017b40 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017b08:	4c0e      	ldr	r4, [pc, #56]	; (8017b44 <fs_open+0x48>)
 8017b0a:	e000      	b.n	8017b0e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8017b0c:	6861      	ldr	r1, [r4, #4]
 8017b0e:	4628      	mov	r0, r5
 8017b10:	f7e8 fb96 	bl	8000240 <strcmp>
 8017b14:	b128      	cbz	r0, 8017b22 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017b16:	6824      	ldr	r4, [r4, #0]
 8017b18:	2c00      	cmp	r4, #0
 8017b1a:	d1f7      	bne.n	8017b0c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8017b1c:	f06f 0005 	mvn.w	r0, #5
}
 8017b20:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8017b22:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8017b26:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8017b28:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8017b2a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8017b2e:	7c23      	ldrb	r3, [r4, #16]
 8017b30:	7433      	strb	r3, [r6, #16]
}
 8017b32:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017b34:	f06f 000f 	mvn.w	r0, #15
}
 8017b38:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017b3a:	f06f 000f 	mvn.w	r0, #15
}
 8017b3e:	4770      	bx	lr
 8017b40:	080375d4 	.word	0x080375d4
 8017b44:	08042740 	.word	0x08042740

08017b48 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8017b48:	4770      	bx	lr
 8017b4a:	bf00      	nop

08017b4c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8017b4c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8017b50:	1a10      	subs	r0, r2, r0
 8017b52:	4770      	bx	lr

08017b54 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8017b58:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8017b5a:	b374      	cbz	r4, 8017bba <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8017b5c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8017b60:	4617      	mov	r7, r2
 8017b62:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8017b66:	4605      	mov	r5, r0
 8017b68:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8017b6c:	460e      	mov	r6, r1
 8017b6e:	4698      	mov	r8, r3
 8017b70:	fa1f fc8c 	uxth.w	ip, ip
 8017b74:	4594      	cmp	ip, r2
 8017b76:	bf28      	it	cs
 8017b78:	4694      	movcs	ip, r2
 8017b7a:	4564      	cmp	r4, ip
 8017b7c:	bf28      	it	cs
 8017b7e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8017b80:	4643      	mov	r3, r8
 8017b82:	4622      	mov	r2, r4
 8017b84:	4631      	mov	r1, r6
 8017b86:	4628      	mov	r0, r5
 8017b88:	f006 fcf0 	bl	801e56c <tcp_write>
    if (err == ERR_MEM) {
 8017b8c:	1c43      	adds	r3, r0, #1
 8017b8e:	d007      	beq.n	8017ba0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8017b90:	b970      	cbnz	r0, 8017bb0 <http_write+0x5c>
 8017b92:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8017b94:	8b6b      	ldrh	r3, [r5, #26]
 8017b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017b9a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8017b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8017ba0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8017ba4:	b123      	cbz	r3, 8017bb0 <http_write+0x5c>
 8017ba6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8017baa:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8017bac:	2b08      	cmp	r3, #8
 8017bae:	d901      	bls.n	8017bb4 <http_write+0x60>
    *length = 0;
 8017bb0:	2400      	movs	r4, #0
 8017bb2:	e7ee      	b.n	8017b92 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8017bb4:	2c01      	cmp	r4, #1
 8017bb6:	d8e3      	bhi.n	8017b80 <http_write+0x2c>
 8017bb8:	e7fa      	b.n	8017bb0 <http_write+0x5c>
    return ERR_OK;
 8017bba:	4620      	mov	r0, r4
}
 8017bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017bc0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8017bc0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8017bc2:	4b0e      	ldr	r3, [pc, #56]	; (8017bfc <http_get_404_file+0x3c>)
{
 8017bc4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	4619      	mov	r1, r3
  *uri = "/404.html";
 8017bca:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8017bcc:	f7ff ff96 	bl	8017afc <fs_open>
  if (err != ERR_OK) {
 8017bd0:	b908      	cbnz	r0, 8017bd6 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8017bd6:	490a      	ldr	r1, [pc, #40]	; (8017c00 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8017bd8:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8017bda:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8017bdc:	f7ff ff8e 	bl	8017afc <fs_open>
    if (err != ERR_OK) {
 8017be0:	2800      	cmp	r0, #0
 8017be2:	d0f6      	beq.n	8017bd2 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8017be4:	4907      	ldr	r1, [pc, #28]	; (8017c04 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8017be6:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8017be8:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8017bea:	f7ff ff87 	bl	8017afc <fs_open>
      if (err != ERR_OK) {
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d0ef      	beq.n	8017bd2 <http_get_404_file+0x12>
        *uri = NULL;
 8017bf2:	2300      	movs	r3, #0
        return NULL;
 8017bf4:	461c      	mov	r4, r3
        *uri = NULL;
 8017bf6:	602b      	str	r3, [r5, #0]
        return NULL;
 8017bf8:	e7eb      	b.n	8017bd2 <http_get_404_file+0x12>
 8017bfa:	bf00      	nop
 8017bfc:	08042754 	.word	0x08042754
 8017c00:	08042760 	.word	0x08042760
 8017c04:	0804276c 	.word	0x0804276c

08017c08 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8017c08:	bb82      	cbnz	r2, 8017c6c <http_accept+0x64>
{
 8017c0a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8017c0c:	fab1 f581 	clz	r5, r1
 8017c10:	460c      	mov	r4, r1
 8017c12:	096d      	lsrs	r5, r5, #5
 8017c14:	b339      	cbz	r1, 8017c66 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017c16:	2101      	movs	r1, #1
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f003 fe99 	bl	801b950 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8017c1e:	2034      	movs	r0, #52	; 0x34
 8017c20:	f002 fa46 	bl	801a0b0 <mem_malloc>
  if (ret != NULL) {
 8017c24:	4606      	mov	r6, r0
 8017c26:	b1d8      	cbz	r0, 8017c60 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8017c28:	2234      	movs	r2, #52	; 0x34
 8017c2a:	4629      	mov	r1, r5
 8017c2c:	f00c fa32 	bl	8024094 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8017c30:	4631      	mov	r1, r6
 8017c32:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8017c34:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8017c36:	f003 fec1 	bl	801b9bc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	490d      	ldr	r1, [pc, #52]	; (8017c74 <http_accept+0x6c>)
 8017c3e:	f003 fec1 	bl	801b9c4 <tcp_recv>
  altcp_err(pcb, http_err);
 8017c42:	4620      	mov	r0, r4
 8017c44:	490c      	ldr	r1, [pc, #48]	; (8017c78 <http_accept+0x70>)
 8017c46:	f003 fef5 	bl	801ba34 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017c4a:	2204      	movs	r2, #4
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	490b      	ldr	r1, [pc, #44]	; (8017c7c <http_accept+0x74>)
 8017c50:	f003 ff12 	bl	801ba78 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8017c54:	4620      	mov	r0, r4
 8017c56:	490a      	ldr	r1, [pc, #40]	; (8017c80 <http_accept+0x78>)
 8017c58:	f003 fed0 	bl	801b9fc <tcp_sent>

  return ERR_OK;
 8017c5c:	4628      	mov	r0, r5
}
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017c60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017c64:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017c66:	f06f 0005 	mvn.w	r0, #5
}
 8017c6a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017c6c:	f06f 0005 	mvn.w	r0, #5
}
 8017c70:	4770      	bx	lr
 8017c72:	bf00      	nop
 8017c74:	080188e1 	.word	0x080188e1
 8017c78:	080181c9 	.word	0x080181c9
 8017c7c:	08018889 	.word	0x08018889
 8017c80:	08018871 	.word	0x08018871

08017c84 <http_init_file>:
{
 8017c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c88:	b087      	sub	sp, #28
 8017c8a:	4604      	mov	r4, r0
  if (file != NULL) {
 8017c8c:	460e      	mov	r6, r1
{
 8017c8e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017c92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8017c98:	2900      	cmp	r1, #0
 8017c9a:	f000 80aa 	beq.w	8017df2 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8017c9e:	680b      	ldr	r3, [r1, #0]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	f000 80ac 	beq.w	8017dfe <http_init_file+0x17a>
    if (tag_check) {
 8017ca6:	2f00      	cmp	r7, #0
 8017ca8:	d16f      	bne.n	8017d8a <http_init_file+0x106>
    hs->handle = file;
 8017caa:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8017cac:	2d00      	cmp	r5, #0
 8017cae:	d04f      	beq.n	8017d50 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8017cb0:	782b      	ldrb	r3, [r5, #0]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	f000 80c0 	beq.w	8017e38 <http_init_file+0x1b4>
 8017cb8:	4b61      	ldr	r3, [pc, #388]	; (8017e40 <http_init_file+0x1bc>)
 8017cba:	2701      	movs	r7, #1
 8017cbc:	9405      	str	r4, [sp, #20]
 8017cbe:	462c      	mov	r4, r5
 8017cc0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017e44 <http_init_file+0x1c0>
 8017cc4:	4698      	mov	r8, r3
 8017cc6:	9304      	str	r3, [sp, #16]
 8017cc8:	e017      	b.n	8017cfa <http_init_file+0x76>
 8017cca:	2d0e      	cmp	r5, #14
      *pair = '\0';
 8017ccc:	f04f 0300 	mov.w	r3, #0
 8017cd0:	bfcc      	ite	gt
 8017cd2:	2500      	movgt	r5, #0
 8017cd4:	2501      	movle	r5, #1
 8017cd6:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 8017cda:	4620      	mov	r0, r4
 8017cdc:	213d      	movs	r1, #61	; 0x3d
 8017cde:	f00d fc01 	bl	80254e4 <strchr>
    if (equals) {
 8017ce2:	b320      	cbz	r0, 8017d2e <http_init_file+0xaa>
      *equals = '\0';
 8017ce4:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017ce8:	f108 0804 	add.w	r8, r8, #4
 8017cec:	3701      	adds	r7, #1
 8017cee:	465c      	mov	r4, fp
      *equals = '\0';
 8017cf0:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8017cf4:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017cf8:	b30d      	cbz	r5, 8017d3e <http_init_file+0xba>
    pair = strchr(pair, '&');
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 8017cfe:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8017d02:	1e7d      	subs	r5, r7, #1
 8017d04:	f00d fbee 	bl	80254e4 <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017d08:	46ba      	mov	sl, r7
    if (pair) {
 8017d0a:	4683      	mov	fp, r0
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	d1dc      	bne.n	8017cca <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8017d10:	4620      	mov	r0, r4
 8017d12:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017d14:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8017d16:	f00d fbe5 	bl	80254e4 <strchr>
      if (pair) {
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	d0dd      	beq.n	8017cda <http_init_file+0x56>
        *pair = '\0';
 8017d1e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8017d22:	213d      	movs	r1, #61	; 0x3d
 8017d24:	4620      	mov	r0, r4
 8017d26:	f00d fbdd 	bl	80254e4 <strchr>
    if (equals) {
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	d1da      	bne.n	8017ce4 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 8017d2e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017d32:	3701      	adds	r7, #1
 8017d34:	f108 0804 	add.w	r8, r8, #4
 8017d38:	465c      	mov	r4, fp
 8017d3a:	2d00      	cmp	r5, #0
 8017d3c:	d1dd      	bne.n	8017cfa <http_init_file+0x76>
 8017d3e:	4652      	mov	r2, sl
 8017d40:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8017d42:	9b04      	ldr	r3, [sp, #16]
 8017d44:	4630      	mov	r0, r6
 8017d46:	9903      	ldr	r1, [sp, #12]
 8017d48:	9300      	str	r3, [sp, #0]
 8017d4a:	4b3e      	ldr	r3, [pc, #248]	; (8017e44 <http_init_file+0x1c0>)
 8017d4c:	f7ee fff4 	bl	8006d38 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017d50:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017d54:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8017d56:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017d58:	db5c      	blt.n	8017e14 <http_init_file+0x190>
    hs->retries = 0;
 8017d5a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 8017d5c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 8017d5e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8017d60:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8017d64:	7c1b      	ldrb	r3, [r3, #16]
 8017d66:	07d9      	lsls	r1, r3, #31
 8017d68:	d526      	bpl.n	8017db8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8017d6a:	9b02      	ldr	r3, [sp, #8]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d132      	bne.n	8017dd6 <http_init_file+0x152>
  if (hs->keepalive) {
 8017d70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8017d74:	b12b      	cbz	r3, 8017d82 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8017d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d054      	beq.n	8017e26 <http_init_file+0x1a2>
      hs->keepalive = 0;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8017d82:	2000      	movs	r0, #0
 8017d84:	b007      	add	sp, #28
 8017d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8017d8a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8017d8e:	f002 f98f 	bl	801a0b0 <mem_malloc>
  if (ret != NULL) {
 8017d92:	4607      	mov	r7, r0
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d088      	beq.n	8017caa <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8017d98:	f44f 7290 	mov.w	r2, #288	; 0x120
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	f00c f979 	bl	8024094 <memset>
        ssi->parsed = file->data;
 8017da2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8017da4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8017da6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8017da8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 8017dac:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8017dae:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8017db0:	2d00      	cmp	r5, #0
 8017db2:	f47f af7d 	bne.w	8017cb0 <http_init_file+0x2c>
 8017db6:	e7cb      	b.n	8017d50 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8017db8:	4b23      	ldr	r3, [pc, #140]	; (8017e48 <http_init_file+0x1c4>)
 8017dba:	f640 1243 	movw	r2, #2371	; 0x943
 8017dbe:	4923      	ldr	r1, [pc, #140]	; (8017e4c <http_init_file+0x1c8>)
 8017dc0:	4823      	ldr	r0, [pc, #140]	; (8017e50 <http_init_file+0x1cc>)
 8017dc2:	f00d f903 	bl	8024fcc <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8017dc6:	9b02      	ldr	r3, [sp, #8]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d0d1      	beq.n	8017d70 <http_init_file+0xec>
 8017dcc:	6963      	ldr	r3, [r4, #20]
 8017dce:	7c1b      	ldrb	r3, [r3, #16]
 8017dd0:	07db      	lsls	r3, r3, #31
 8017dd2:	d5cd      	bpl.n	8017d70 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8017dd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017dd6:	491f      	ldr	r1, [pc, #124]	; (8017e54 <http_init_file+0x1d0>)
 8017dd8:	69a0      	ldr	r0, [r4, #24]
 8017dda:	f001 f823 	bl	8018e24 <lwip_strnstr>
      if (file_start != NULL) {
 8017dde:	2800      	cmp	r0, #0
 8017de0:	d0c6      	beq.n	8017d70 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8017de2:	3004      	adds	r0, #4
 8017de4:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8017de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8017de8:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8017dea:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8017dec:	1a9b      	subs	r3, r3, r2
 8017dee:	6263      	str	r3, [r4, #36]	; 0x24
 8017df0:	e7be      	b.n	8017d70 <http_init_file+0xec>
    hs->file = NULL;
 8017df2:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8017df6:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8017df8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8017dfc:	e7b8      	b.n	8017d70 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8017dfe:	4b12      	ldr	r3, [pc, #72]	; (8017e48 <http_init_file+0x1c4>)
 8017e00:	f640 120b 	movw	r2, #2315	; 0x90b
 8017e04:	4914      	ldr	r1, [pc, #80]	; (8017e58 <http_init_file+0x1d4>)
 8017e06:	4812      	ldr	r0, [pc, #72]	; (8017e50 <http_init_file+0x1cc>)
 8017e08:	f00d f8e0 	bl	8024fcc <iprintf>
    if (tag_check) {
 8017e0c:	2f00      	cmp	r7, #0
 8017e0e:	f43f af4c 	beq.w	8017caa <http_init_file+0x26>
 8017e12:	e7ba      	b.n	8017d8a <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017e14:	f640 1234 	movw	r2, #2356	; 0x934
 8017e18:	4b0b      	ldr	r3, [pc, #44]	; (8017e48 <http_init_file+0x1c4>)
 8017e1a:	4910      	ldr	r1, [pc, #64]	; (8017e5c <http_init_file+0x1d8>)
 8017e1c:	480c      	ldr	r0, [pc, #48]	; (8017e50 <http_init_file+0x1cc>)
 8017e1e:	f00d f8d5 	bl	8024fcc <iprintf>
      hs->left = (u32_t)file->len;
 8017e22:	6872      	ldr	r2, [r6, #4]
 8017e24:	e799      	b.n	8017d5a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8017e26:	6963      	ldr	r3, [r4, #20]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d0aa      	beq.n	8017d82 <http_init_file+0xfe>
 8017e2c:	7c1b      	ldrb	r3, [r3, #16]
 8017e2e:	f003 0303 	and.w	r3, r3, #3
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	d1a5      	bne.n	8017d82 <http_init_file+0xfe>
 8017e36:	e7a1      	b.n	8017d7c <http_init_file+0xf8>
    return (0);
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4b01      	ldr	r3, [pc, #4]	; (8017e40 <http_init_file+0x1bc>)
 8017e3c:	9304      	str	r3, [sp, #16]
 8017e3e:	e780      	b.n	8017d42 <http_init_file+0xbe>
 8017e40:	2001e2f8 	.word	0x2001e2f8
 8017e44:	2001e338 	.word	0x2001e338
 8017e48:	08042778 	.word	0x08042778
 8017e4c:	080427e4 	.word	0x080427e4
 8017e50:	0802bdc0 	.word	0x0802bdc0
 8017e54:	080299dc 	.word	0x080299dc
 8017e58:	080427b0 	.word	0x080427b0
 8017e5c:	080427c4 	.word	0x080427c4

08017e60 <http_find_file>:
{
 8017e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e64:	ed2d 8b02 	vpush	{d8}
 8017e68:	b087      	sub	sp, #28
 8017e6a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	460c      	mov	r4, r1
{
 8017e70:	4690      	mov	r8, r2
 8017e72:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8017e74:	f7e8 f9ee 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017e78:	4606      	mov	r6, r0
 8017e7a:	b148      	cbz	r0, 8017e90 <http_find_file+0x30>
 8017e7c:	f100 39ff 	add.w	r9, r0, #4294967295
 8017e80:	f814 3009 	ldrb.w	r3, [r4, r9]
 8017e84:	2b2f      	cmp	r3, #47	; 0x2f
 8017e86:	d06a      	beq.n	8017f5e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8017e88:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8017e8a:	f04f 0900 	mov.w	r9, #0
 8017e8e:	e001      	b.n	8017e94 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8017e90:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8017e92:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8017e94:	213f      	movs	r1, #63	; 0x3f
 8017e96:	4620      	mov	r0, r4
 8017e98:	f00d fb24 	bl	80254e4 <strchr>
    if (params != NULL) {
 8017e9c:	4606      	mov	r6, r0
 8017e9e:	b118      	cbz	r0, 8017ea8 <http_find_file+0x48>
      *params = '\0';
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8017ea6:	9c05      	ldr	r4, [sp, #20]
 8017ea8:	4621      	mov	r1, r4
 8017eaa:	4628      	mov	r0, r5
 8017eac:	f7ff fe26 	bl	8017afc <fs_open>
    if (err == ERR_OK) {
 8017eb0:	b9b0      	cbnz	r0, 8017ee0 <http_find_file+0x80>
    if (file != NULL) {
 8017eb2:	b1e7      	cbz	r7, 8017eee <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8017eb4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017eb8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8017eba:	f019 0908 	ands.w	r9, r9, #8
 8017ebe:	d01d      	beq.n	8017efc <http_find_file+0x9c>
        tag_check = 1;
 8017ec0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017ec4:	4623      	mov	r3, r4
 8017ec6:	4642      	mov	r2, r8
 8017ec8:	4639      	mov	r1, r7
 8017eca:	4628      	mov	r0, r5
 8017ecc:	9601      	str	r6, [sp, #4]
 8017ece:	f8cd 9000 	str.w	r9, [sp]
 8017ed2:	f7ff fed7 	bl	8017c84 <http_init_file>
}
 8017ed6:	b007      	add	sp, #28
 8017ed8:	ecbd 8b02 	vpop	{d8}
 8017edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8017ee0:	a905      	add	r1, sp, #20
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	f7ff fe6c 	bl	8017bc0 <http_get_404_file>
 8017ee8:	4607      	mov	r7, r0
    if (file != NULL) {
 8017eea:	2f00      	cmp	r7, #0
 8017eec:	d1e2      	bne.n	8017eb4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 8017eee:	a905      	add	r1, sp, #20
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f7ff fe65 	bl	8017bc0 <http_get_404_file>
 8017ef6:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017ef8:	9c05      	ldr	r4, [sp, #20]
 8017efa:	e7e3      	b.n	8017ec4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 8017efc:	213f      	movs	r1, #63	; 0x3f
 8017efe:	4620      	mov	r0, r4
 8017f00:	f00d faf0 	bl	80254e4 <strchr>
    if (param != NULL) {
 8017f04:	4682      	mov	sl, r0
 8017f06:	b108      	cbz	r0, 8017f0c <http_find_file+0xac>
      *param = 0;
 8017f08:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8017f0c:	212e      	movs	r1, #46	; 0x2e
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f00d fae8 	bl	80254e4 <strchr>
 8017f14:	4603      	mov	r3, r0
 8017f16:	b138      	cbz	r0, 8017f28 <http_find_file+0xc8>
 8017f18:	1c58      	adds	r0, r3, #1
 8017f1a:	212e      	movs	r1, #46	; 0x2e
 8017f1c:	461c      	mov	r4, r3
 8017f1e:	f00d fae1 	bl	80254e4 <strchr>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2800      	cmp	r0, #0
 8017f26:	d1f7      	bne.n	8017f18 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8017f28:	4940      	ldr	r1, [pc, #256]	; (801802c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801803c <http_find_file+0x1dc>
 8017f30:	f000 ffa0 	bl	8018e74 <lwip_stricmp>
 8017f34:	b148      	cbz	r0, 8017f4a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8017f36:	4b3e      	ldr	r3, [pc, #248]	; (8018030 <http_find_file+0x1d0>)
 8017f38:	459b      	cmp	fp, r3
 8017f3a:	d008      	beq.n	8017f4e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017f3c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 ff97 	bl	8018e74 <lwip_stricmp>
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d1f5      	bne.n	8017f36 <http_find_file+0xd6>
        tag_check = 1;
 8017f4a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8017f4e:	f1ba 0f00 	cmp.w	sl, #0
 8017f52:	d0d1      	beq.n	8017ef8 <http_find_file+0x98>
      *param = '?';
 8017f54:	233f      	movs	r3, #63	; 0x3f
 8017f56:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017f5a:	9c05      	ldr	r4, [sp, #20]
 8017f5c:	e7b2      	b.n	8017ec4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017f5e:	4b35      	ldr	r3, [pc, #212]	; (8018034 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017f60:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017f62:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017f64:	d106      	bne.n	8017f74 <http_find_file+0x114>
 8017f66:	f1a0 0001 	sub.w	r0, r0, #1
 8017f6a:	fab0 f080 	clz	r0, r0
 8017f6e:	0940      	lsrs	r0, r0, #5
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d057      	beq.n	8018024 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8017f74:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8017f78:	bf28      	it	cs
 8017f7a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 8017f7e:	2e01      	cmp	r6, #1
 8017f80:	d008      	beq.n	8017f94 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8017f82:	464a      	mov	r2, r9
 8017f84:	4621      	mov	r1, r4
 8017f86:	482b      	ldr	r0, [pc, #172]	; (8018034 <http_find_file+0x1d4>)
 8017f88:	f00c f85c 	bl	8024044 <memcpy>
      http_uri_buf[copy_len] = 0;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	9a02      	ldr	r2, [sp, #8]
 8017f90:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8017f94:	462f      	mov	r7, r5
 8017f96:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8017f9a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8018034 <http_find_file+0x1d4>
 8017f9e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8017fa2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8017fa4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8017fa6:	d012      	beq.n	8017fce <http_find_file+0x16e>
        if (len_left > 0) {
 8017fa8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 8017fac:	d113      	bne.n	8017fd6 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 8017fae:	4641      	mov	r1, r8
 8017fb0:	4628      	mov	r0, r5
 8017fb2:	f7ff fda3 	bl	8017afc <fs_open>
      if (err == ERR_OK) {
 8017fb6:	b338      	cbz	r0, 8018008 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8017fb8:	f10b 0b01 	add.w	fp, fp, #1
 8017fbc:	f1bb 0f05 	cmp.w	fp, #5
 8017fc0:	d1ef      	bne.n	8017fa2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8017fc2:	ee18 8a10 	vmov	r8, s16
 8017fc6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8017fc8:	f04f 0900 	mov.w	r9, #0
 8017fcc:	e762      	b.n	8017e94 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 8017fce:	4b1a      	ldr	r3, [pc, #104]	; (8018038 <http_find_file+0x1d8>)
 8017fd0:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8017fd4:	e7eb      	b.n	8017fae <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017fd6:	4b18      	ldr	r3, [pc, #96]	; (8018038 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017fd8:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017fda:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8017fde:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017fe0:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017fe2:	4608      	mov	r0, r1
 8017fe4:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8017fe6:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017fea:	f7e8 f933 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017fee:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017ff0:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017ff2:	4282      	cmp	r2, r0
 8017ff4:	bf28      	it	cs
 8017ff6:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	9203      	str	r2, [sp, #12]
 8017ffc:	f00c f822 	bl	8024044 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8018000:	2300      	movs	r3, #0
 8018002:	9a03      	ldr	r2, [sp, #12]
 8018004:	54a3      	strb	r3, [r4, r2]
 8018006:	e7d2      	b.n	8017fae <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8018008:	4a0b      	ldr	r2, [pc, #44]	; (8018038 <http_find_file+0x1d8>)
        uri = file_name;
 801800a:	4644      	mov	r4, r8
 801800c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8018010:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8018014:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8018016:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 801801a:	2d00      	cmp	r5, #0
 801801c:	f43f af3a 	beq.w	8017e94 <http_find_file+0x34>
  char *params = NULL;
 8018020:	4606      	mov	r6, r0
 8018022:	e74f      	b.n	8017ec4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8018024:	462f      	mov	r7, r5
 8018026:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8018028:	4681      	mov	r9, r0
 801802a:	e733      	b.n	8017e94 <http_find_file+0x34>
 801802c:	08042838 	.word	0x08042838
 8018030:	08042a98 	.word	0x08042a98
 8018034:	2001e378 	.word	0x2001e378
 8018038:	08042aa8 	.word	0x08042aa8
 801803c:	08042a88 	.word	0x08042a88

08018040 <http_post_rxpbuf>:
{
 8018040:	b538      	push	{r3, r4, r5, lr}
 8018042:	4604      	mov	r4, r0
  if (p != NULL) {
 8018044:	b1c9      	cbz	r1, 801807a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8018046:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018048:	890a      	ldrh	r2, [r1, #8]
 801804a:	4293      	cmp	r3, r2
 801804c:	d31a      	bcc.n	8018084 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801804e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8018050:	4620      	mov	r0, r4
 8018052:	6323      	str	r3, [r4, #48]	; 0x30
 8018054:	f7ee ff7e 	bl	8006f54 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8018058:	b178      	cbz	r0, 801807a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801805a:	2300      	movs	r3, #0
 801805c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801805e:	490a      	ldr	r1, [pc, #40]	; (8018088 <http_post_rxpbuf+0x48>)
 8018060:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8018062:	4620      	mov	r0, r4
 8018064:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8018066:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8018068:	f7ee ff84 	bl	8006f74 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801806c:	462a      	mov	r2, r5
 801806e:	4620      	mov	r0, r4
 8018070:	4905      	ldr	r1, [pc, #20]	; (8018088 <http_post_rxpbuf+0x48>)
}
 8018072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8018076:	f7ff bef3 	b.w	8017e60 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801807a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801807c:	2b00      	cmp	r3, #0
 801807e:	d0ee      	beq.n	801805e <http_post_rxpbuf+0x1e>
}
 8018080:	2000      	movs	r0, #0
 8018082:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8018084:	2300      	movs	r3, #0
 8018086:	e7e3      	b.n	8018050 <http_post_rxpbuf+0x10>
 8018088:	2001e378 	.word	0x2001e378

0801808c <http_find_error_file>:
  if (error_nr == 501) {
 801808c:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8018090:	4a17      	ldr	r2, [pc, #92]	; (80180f0 <http_find_error_file+0x64>)
 8018092:	4299      	cmp	r1, r3
 8018094:	4b17      	ldr	r3, [pc, #92]	; (80180f4 <http_find_error_file+0x68>)
 8018096:	4918      	ldr	r1, [pc, #96]	; (80180f8 <http_find_error_file+0x6c>)
{
 8018098:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801809a:	4e18      	ldr	r6, [pc, #96]	; (80180fc <http_find_error_file+0x70>)
 801809c:	bf18      	it	ne
 801809e:	461e      	movne	r6, r3
 80180a0:	4b17      	ldr	r3, [pc, #92]	; (8018100 <http_find_error_file+0x74>)
 80180a2:	bf18      	it	ne
 80180a4:	460b      	movne	r3, r1
{
 80180a6:	b084      	sub	sp, #16
 80180a8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80180aa:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 80180ac:	4d15      	ldr	r5, [pc, #84]	; (8018104 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80180ae:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 80180b0:	bf08      	it	eq
 80180b2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80180b4:	f7ff fd22 	bl	8017afc <fs_open>
 80180b8:	9b03      	ldr	r3, [sp, #12]
 80180ba:	b128      	cbz	r0, 80180c8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 80180bc:	4629      	mov	r1, r5
 80180be:	4620      	mov	r0, r4
 80180c0:	f7ff fd1c 	bl	8017afc <fs_open>
 80180c4:	b948      	cbnz	r0, 80180da <http_find_error_file+0x4e>
    uri = uri2;
 80180c6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 80180c8:	2200      	movs	r2, #0
 80180ca:	4621      	mov	r1, r4
 80180cc:	4620      	mov	r0, r4
 80180ce:	e9cd 2200 	strd	r2, r2, [sp]
 80180d2:	f7ff fdd7 	bl	8017c84 <http_init_file>
}
 80180d6:	b004      	add	sp, #16
 80180d8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 80180da:	4631      	mov	r1, r6
 80180dc:	4620      	mov	r0, r4
 80180de:	f7ff fd0d 	bl	8017afc <fs_open>
 80180e2:	b908      	cbnz	r0, 80180e8 <http_find_error_file+0x5c>
    uri = uri3;
 80180e4:	4633      	mov	r3, r6
 80180e6:	e7ef      	b.n	80180c8 <http_find_error_file+0x3c>
    return ERR_ARG;
 80180e8:	f06f 000f 	mvn.w	r0, #15
 80180ec:	e7f3      	b.n	80180d6 <http_find_error_file+0x4a>
 80180ee:	bf00      	nop
 80180f0:	0804281c 	.word	0x0804281c
 80180f4:	08042834 	.word	0x08042834
 80180f8:	0804284c 	.word	0x0804284c
 80180fc:	08042810 	.word	0x08042810
 8018100:	08042828 	.word	0x08042828
 8018104:	08042840 	.word	0x08042840

08018108 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8018108:	b538      	push	{r3, r4, r5, lr}
 801810a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801810c:	460c      	mov	r4, r1
 801810e:	2900      	cmp	r1, #0
 8018110:	d041      	beq.n	8018196 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8018112:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8018114:	bb83      	cbnz	r3, 8018178 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8018116:	2100      	movs	r1, #0
 8018118:	4628      	mov	r0, r5
 801811a:	f003 fc4f 	bl	801b9bc <tcp_arg>
  altcp_recv(pcb, NULL);
 801811e:	2100      	movs	r1, #0
 8018120:	4628      	mov	r0, r5
 8018122:	f003 fc4f 	bl	801b9c4 <tcp_recv>
  altcp_err(pcb, NULL);
 8018126:	2100      	movs	r1, #0
 8018128:	4628      	mov	r0, r5
 801812a:	f003 fc83 	bl	801ba34 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801812e:	2200      	movs	r2, #0
 8018130:	4628      	mov	r0, r5
 8018132:	4611      	mov	r1, r2
 8018134:	f003 fca0 	bl	801ba78 <tcp_poll>
  altcp_sent(pcb, NULL);
 8018138:	4628      	mov	r0, r5
 801813a:	2100      	movs	r1, #0
 801813c:	f003 fc5e 	bl	801b9fc <tcp_sent>
  if (hs->handle) {
 8018140:	6960      	ldr	r0, [r4, #20]
 8018142:	b118      	cbz	r0, 801814c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8018144:	f7ff fd00 	bl	8017b48 <fs_close>
    hs->handle = NULL;
 8018148:	2300      	movs	r3, #0
 801814a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801814c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801814e:	b118      	cbz	r0, 8018158 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8018150:	f001 fdf2 	bl	8019d38 <mem_free>
    hs->ssi = NULL;
 8018154:	2300      	movs	r3, #0
 8018156:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018158:	6a20      	ldr	r0, [r4, #32]
 801815a:	b118      	cbz	r0, 8018164 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801815c:	f002 fe7c 	bl	801ae58 <pbuf_free>
    hs->req = NULL;
 8018160:	2300      	movs	r3, #0
 8018162:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8018164:	4620      	mov	r0, r4
 8018166:	f001 fde7 	bl	8019d38 <mem_free>
  err = altcp_close(pcb);
 801816a:	4628      	mov	r0, r5
 801816c:	f004 fae2 	bl	801c734 <tcp_close>
  if (err != ERR_OK) {
 8018170:	4604      	mov	r4, r0
 8018172:	b948      	cbnz	r0, 8018188 <http_close_or_abort_conn.constprop.0+0x80>
}
 8018174:	4620      	mov	r0, r4
 8018176:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8018178:	4911      	ldr	r1, [pc, #68]	; (80181c0 <http_close_or_abort_conn.constprop.0+0xb8>)
 801817a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801817c:	223f      	movs	r2, #63	; 0x3f
 801817e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8018180:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8018182:	f7ee fef7 	bl	8006f74 <httpd_post_finished>
 8018186:	e7c6      	b.n	8018116 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8018188:	4628      	mov	r0, r5
 801818a:	2204      	movs	r2, #4
 801818c:	490d      	ldr	r1, [pc, #52]	; (80181c4 <http_close_or_abort_conn.constprop.0+0xbc>)
 801818e:	f003 fc73 	bl	801ba78 <tcp_poll>
}
 8018192:	4620      	mov	r0, r4
 8018194:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8018196:	f003 fc11 	bl	801b9bc <tcp_arg>
  altcp_recv(pcb, NULL);
 801819a:	4621      	mov	r1, r4
 801819c:	4628      	mov	r0, r5
 801819e:	f003 fc11 	bl	801b9c4 <tcp_recv>
  altcp_err(pcb, NULL);
 80181a2:	4621      	mov	r1, r4
 80181a4:	4628      	mov	r0, r5
 80181a6:	f003 fc45 	bl	801ba34 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80181aa:	4621      	mov	r1, r4
 80181ac:	4628      	mov	r0, r5
 80181ae:	4622      	mov	r2, r4
 80181b0:	f003 fc62 	bl	801ba78 <tcp_poll>
  altcp_sent(pcb, NULL);
 80181b4:	4621      	mov	r1, r4
 80181b6:	4628      	mov	r0, r5
 80181b8:	f003 fc20 	bl	801b9fc <tcp_sent>
  if (hs != NULL) {
 80181bc:	e7d5      	b.n	801816a <http_close_or_abort_conn.constprop.0+0x62>
 80181be:	bf00      	nop
 80181c0:	2001e378 	.word	0x2001e378
 80181c4:	08018889 	.word	0x08018889

080181c8 <http_err>:
  if (hs != NULL) {
 80181c8:	b1c0      	cbz	r0, 80181fc <http_err+0x34>
{
 80181ca:	b510      	push	{r4, lr}
 80181cc:	4604      	mov	r4, r0
  if (hs->handle) {
 80181ce:	6940      	ldr	r0, [r0, #20]
 80181d0:	b118      	cbz	r0, 80181da <http_err+0x12>
    fs_close(hs->handle);
 80181d2:	f7ff fcb9 	bl	8017b48 <fs_close>
    hs->handle = NULL;
 80181d6:	2300      	movs	r3, #0
 80181d8:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80181da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80181dc:	b118      	cbz	r0, 80181e6 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 80181de:	f001 fdab 	bl	8019d38 <mem_free>
    hs->ssi = NULL;
 80181e2:	2300      	movs	r3, #0
 80181e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80181e6:	6a20      	ldr	r0, [r4, #32]
 80181e8:	b118      	cbz	r0, 80181f2 <http_err+0x2a>
    pbuf_free(hs->req);
 80181ea:	f002 fe35 	bl	801ae58 <pbuf_free>
    hs->req = NULL;
 80181ee:	2300      	movs	r3, #0
 80181f0:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80181f2:	4620      	mov	r0, r4
}
 80181f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80181f8:	f001 bd9e 	b.w	8019d38 <mem_free>
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop

08018200 <http_eof>:
{
 8018200:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8018202:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8018206:	b1fb      	cbz	r3, 8018248 <http_eof+0x48>
 8018208:	4605      	mov	r5, r0
  if (hs->handle) {
 801820a:	6948      	ldr	r0, [r1, #20]
 801820c:	460c      	mov	r4, r1
 801820e:	b118      	cbz	r0, 8018218 <http_eof+0x18>
    fs_close(hs->handle);
 8018210:	f7ff fc9a 	bl	8017b48 <fs_close>
    hs->handle = NULL;
 8018214:	2300      	movs	r3, #0
 8018216:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8018218:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801821a:	b118      	cbz	r0, 8018224 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801821c:	f001 fd8c 	bl	8019d38 <mem_free>
    hs->ssi = NULL;
 8018220:	2300      	movs	r3, #0
 8018222:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018224:	6a20      	ldr	r0, [r4, #32]
 8018226:	b108      	cbz	r0, 801822c <http_eof+0x2c>
    pbuf_free(hs->req);
 8018228:	f002 fe16 	bl	801ae58 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801822c:	2234      	movs	r2, #52	; 0x34
 801822e:	2100      	movs	r1, #0
 8018230:	4620      	mov	r0, r4
 8018232:	f00b ff2f 	bl	8024094 <memset>
    hs->keepalive = 1;
 8018236:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8018238:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801823a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801823e:	8b6b      	ldrh	r3, [r5, #26]
 8018240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018244:	836b      	strh	r3, [r5, #26]
}
 8018246:	bd38      	pop	{r3, r4, r5, pc}
 8018248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801824c:	f7ff bf5c 	b.w	8018108 <http_close_or_abort_conn.constprop.0>

08018250 <http_send>:
{
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8018254:	460d      	mov	r5, r1
{
 8018256:	b087      	sub	sp, #28
  if (hs == NULL) {
 8018258:	2900      	cmp	r1, #0
 801825a:	f000 824b 	beq.w	80186f4 <http_send+0x4a4>
  if (hs->left == 0) {
 801825e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8018260:	4607      	mov	r7, r0
 8018262:	2b00      	cmp	r3, #0
 8018264:	f000 818c 	beq.w	8018580 <http_send+0x330>
  if (hs->ssi) {
 8018268:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801826a:	2c00      	cmp	r4, #0
 801826c:	f000 819a 	beq.w	80185a4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8018270:	6823      	ldr	r3, [r4, #0]
 8018272:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8018274:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8018278:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801827a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801827e:	f200 80c3 	bhi.w	8018408 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8018282:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8018286:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018288:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801828c:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018290:	2b04      	cmp	r3, #4
 8018292:	d003      	beq.n	801829c <http_send+0x4c>
 8018294:	68e1      	ldr	r1, [r4, #12]
 8018296:	2900      	cmp	r1, #0
 8018298:	f000 8091 	beq.w	80183be <http_send+0x16e>
 801829c:	2e00      	cmp	r6, #0
 801829e:	f040 811b 	bne.w	80184d8 <http_send+0x288>
    if (len == 0) {
 80182a2:	2a00      	cmp	r2, #0
 80182a4:	f000 811b 	beq.w	80184de <http_send+0x28e>
    switch (ssi->tag_state) {
 80182a8:	2b04      	cmp	r3, #4
 80182aa:	d8f1      	bhi.n	8018290 <http_send+0x40>
 80182ac:	e8df f003 	tbb	[pc, r3]
 80182b0:	23407466 	.word	0x23407466
 80182b4:	03          	.byte	0x03
 80182b5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80182b6:	68a3      	ldr	r3, [r4, #8]
 80182b8:	69a9      	ldr	r1, [r5, #24]
 80182ba:	428b      	cmp	r3, r1
 80182bc:	f240 80f1 	bls.w	80184a2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80182c0:	6863      	ldr	r3, [r4, #4]
 80182c2:	4299      	cmp	r1, r3
 80182c4:	f200 81fc 	bhi.w	80186c0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80182c8:	1a5a      	subs	r2, r3, r1
 80182ca:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80182ce:	4282      	cmp	r2, r0
 80182d0:	f340 8117 	ble.w	8018502 <http_send+0x2b2>
 80182d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182d8:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80182dc:	2300      	movs	r3, #0
 80182de:	f10d 0216 	add.w	r2, sp, #22
 80182e2:	4638      	mov	r0, r7
 80182e4:	f7ff fc36 	bl	8017b54 <http_write>
          if (err == ERR_OK) {
 80182e8:	2800      	cmp	r0, #0
 80182ea:	f000 81fe 	beq.w	80186ea <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80182ee:	4606      	mov	r6, r0
    if (len == 0) {
 80182f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80182f4:	e11a      	b.n	801852c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80182f6:	6821      	ldr	r1, [r4, #0]
 80182f8:	8a20      	ldrh	r0, [r4, #16]
 80182fa:	f891 e000 	ldrb.w	lr, [r1]
 80182fe:	2800      	cmp	r0, #0
 8018300:	f040 80b9 	bne.w	8018476 <http_send+0x226>
 8018304:	f1ae 0c09 	sub.w	ip, lr, #9
 8018308:	fa5f fc8c 	uxtb.w	ip, ip
 801830c:	f1bc 0f17 	cmp.w	ip, #23
 8018310:	f200 80b1 	bhi.w	8018476 <http_send+0x226>
 8018314:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 80186bc <http_send+0x46c>
 8018318:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 801831c:	f01c 0f01 	tst.w	ip, #1
 8018320:	f000 80a9 	beq.w	8018476 <http_send+0x226>
          ssi->parsed++;
 8018324:	3101      	adds	r1, #1
 8018326:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8018328:	68e1      	ldr	r1, [r4, #12]
 801832a:	3901      	subs	r1, #1
 801832c:	60e1      	str	r1, [r4, #12]
          break;
 801832e:	e7af      	b.n	8018290 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8018330:	8a20      	ldrh	r0, [r4, #16]
 8018332:	2800      	cmp	r0, #0
 8018334:	f040 8083 	bne.w	801843e <http_send+0x1ee>
 8018338:	6821      	ldr	r1, [r4, #0]
 801833a:	f891 e000 	ldrb.w	lr, [r1]
 801833e:	f1ae 0c09 	sub.w	ip, lr, #9
 8018342:	fa5f fc8c 	uxtb.w	ip, ip
 8018346:	f1bc 0f17 	cmp.w	ip, #23
 801834a:	f240 8110 	bls.w	801856e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801834e:	f8df c350 	ldr.w	ip, [pc, #848]	; 80186a0 <http_send+0x450>
 8018352:	f894 9014 	ldrb.w	r9, [r4, #20]
 8018356:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 801835a:	f8dc c004 	ldr.w	ip, [ip, #4]
 801835e:	f89c c000 	ldrb.w	ip, [ip]
 8018362:	45f4      	cmp	ip, lr
 8018364:	f000 8083 	beq.w	801846e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8018368:	f100 0c01 	add.w	ip, r0, #1
 801836c:	4420      	add	r0, r4
 801836e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8018372:	f891 c000 	ldrb.w	ip, [r1]
 8018376:	f880 c016 	strb.w	ip, [r0, #22]
 801837a:	e7d3      	b.n	8018324 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801837c:	6821      	ldr	r1, [r4, #0]
 801837e:	7808      	ldrb	r0, [r1, #0]
 8018380:	283c      	cmp	r0, #60	; 0x3c
 8018382:	d002      	beq.n	801838a <http_send+0x13a>
 8018384:	282f      	cmp	r0, #47	; 0x2f
 8018386:	d1cd      	bne.n	8018324 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8018388:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 801838a:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 801838c:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 801838e:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8018390:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8018394:	8223      	strh	r3, [r4, #16]
            break;
 8018396:	e7c5      	b.n	8018324 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8018398:	49c1      	ldr	r1, [pc, #772]	; (80186a0 <http_send+0x450>)
 801839a:	7d20      	ldrb	r0, [r4, #20]
 801839c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80183a0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 80183a4:	f811 100c 	ldrb.w	r1, [r1, ip]
 80183a8:	2900      	cmp	r1, #0
 80183aa:	f040 8086 	bne.w	80184ba <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 80183ae:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 80183b0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80183b2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 80183b4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80183b8:	2900      	cmp	r1, #0
 80183ba:	f47f af6f 	bne.w	801829c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80183be:	6823      	ldr	r3, [r4, #0]
 80183c0:	69a9      	ldr	r1, [r5, #24]
 80183c2:	428b      	cmp	r3, r1
 80183c4:	f240 808b 	bls.w	80184de <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80183c8:	1a5b      	subs	r3, r3, r1
 80183ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183ce:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80183d0:	4293      	cmp	r3, r2
 80183d2:	bfa8      	it	ge
 80183d4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183d6:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80183da:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183de:	2300      	movs	r3, #0
 80183e0:	f7ff fbb8 	bl	8017b54 <http_write>
    if (err == ERR_OK) {
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d17a      	bne.n	80184de <http_send+0x28e>
    hs->file += len;
 80183e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 80183ec:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 80183f0:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80183f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80183f4:	440a      	add	r2, r1
    hs->left -= len;
 80183f6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80183f8:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80183fa:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d071      	beq.n	80184e4 <http_send+0x294>
}
 8018400:	4640      	mov	r0, r8
 8018402:	b007      	add	sp, #28
 8018404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018408:	1a5b      	subs	r3, r3, r1
 801840a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801840e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018410:	4293      	cmp	r3, r2
 8018412:	bfa8      	it	ge
 8018414:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018416:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801841a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801841e:	2300      	movs	r3, #0
 8018420:	f7ff fb98 	bl	8017b54 <http_write>
    if (err == ERR_OK) {
 8018424:	4606      	mov	r6, r0
 8018426:	2800      	cmp	r0, #0
 8018428:	f000 8154 	beq.w	80186d4 <http_send+0x484>
  u8_t data_to_send = 0;
 801842c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8018430:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018434:	2b00      	cmp	r3, #0
 8018436:	d052      	beq.n	80184de <http_send+0x28e>
    if (len == 0) {
 8018438:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801843c:	e724      	b.n	8018288 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801843e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80186a0 <http_send+0x450>
 8018442:	7d21      	ldrb	r1, [r4, #20]
 8018444:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8018448:	f8d1 e004 	ldr.w	lr, [r1, #4]
 801844c:	6821      	ldr	r1, [r4, #0]
 801844e:	f89e a000 	ldrb.w	sl, [lr]
 8018452:	f891 c000 	ldrb.w	ip, [r1]
 8018456:	45e2      	cmp	sl, ip
 8018458:	d072      	beq.n	8018540 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 801845a:	f1ac 0c09 	sub.w	ip, ip, #9
 801845e:	fa5f fc8c 	uxtb.w	ip, ip
 8018462:	f1bc 0f17 	cmp.w	ip, #23
 8018466:	d964      	bls.n	8018532 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8018468:	2807      	cmp	r0, #7
 801846a:	f67f af7d 	bls.w	8018368 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 801846e:	2300      	movs	r3, #0
 8018470:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8018474:	e756      	b.n	8018324 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8018476:	f894 9014 	ldrb.w	r9, [r4, #20]
 801847a:	f8df c224 	ldr.w	ip, [pc, #548]	; 80186a0 <http_send+0x450>
 801847e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8018482:	f8dc c004 	ldr.w	ip, [ip, #4]
 8018486:	f81c 9000 	ldrb.w	r9, [ip, r0]
 801848a:	45f1      	cmp	r9, lr
 801848c:	f000 80a1 	beq.w	80185d2 <http_send+0x382>
          ssi->parse_left--;
 8018490:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8018492:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8018494:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8018498:	3b01      	subs	r3, #1
          ssi->parsed++;
 801849a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 801849c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 801849e:	2300      	movs	r3, #0
 80184a0:	e6f8      	b.n	8018294 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 80184a2:	8a21      	ldrh	r1, [r4, #16]
 80184a4:	8a60      	ldrh	r0, [r4, #18]
 80184a6:	4281      	cmp	r1, r0
 80184a8:	f0c0 80e0 	bcc.w	801866c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 80184ac:	6023      	str	r3, [r4, #0]
 80184ae:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 80184b0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 80184b4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 80184b8:	e6ec      	b.n	8018294 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80184ba:	6820      	ldr	r0, [r4, #0]
 80184bc:	f890 e000 	ldrb.w	lr, [r0]
 80184c0:	458e      	cmp	lr, r1
 80184c2:	f000 80ce 	beq.w	8018662 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 80184c6:	2300      	movs	r3, #0
 80184c8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80184cc:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 80184ce:	3001      	adds	r0, #1
          ssi->parse_left--;
 80184d0:	3901      	subs	r1, #1
          ssi->parsed++;
 80184d2:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 80184d4:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80184d6:	e6db      	b.n	8018290 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80184d8:	2b04      	cmp	r3, #4
 80184da:	f47f af70 	bne.w	80183be <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80184de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d18d      	bne.n	8018400 <http_send+0x1b0>
 80184e4:	6968      	ldr	r0, [r5, #20]
 80184e6:	f7ff fb31 	bl	8017b4c <fs_bytes_left>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	dc88      	bgt.n	8018400 <http_send+0x1b0>
      return 0;
 80184ee:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 80184f2:	4638      	mov	r0, r7
 80184f4:	4629      	mov	r1, r5
 80184f6:	f7ff fe83 	bl	8018200 <http_eof>
}
 80184fa:	4640      	mov	r0, r8
 80184fc:	b007      	add	sp, #28
 80184fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018502:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018504:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8018508:	2a00      	cmp	r2, #0
 801850a:	f47f aee7 	bne.w	80182dc <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801850e:	428b      	cmp	r3, r1
 8018510:	d805      	bhi.n	801851e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018512:	68a0      	ldr	r0, [r4, #8]
 8018514:	1ac3      	subs	r3, r0, r3
 8018516:	441a      	add	r2, r3
 8018518:	b292      	uxth	r2, r2
 801851a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 801851e:	4411      	add	r1, r2
 8018520:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8018522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8018524:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8018528:	1a9b      	subs	r3, r3, r2
 801852a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801852c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8018530:	e6ae      	b.n	8018290 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8018532:	f8df a188 	ldr.w	sl, [pc, #392]	; 80186bc <http_send+0x46c>
 8018536:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 801853a:	f01c 0f01 	tst.w	ip, #1
 801853e:	d093      	beq.n	8018468 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8018540:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018542:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8018544:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018548:	f200 80e0 	bhi.w	801870c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801854c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 801854e:	4420      	add	r0, r4
 8018550:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018554:	f89e 3000 	ldrb.w	r3, [lr]
 8018558:	780a      	ldrb	r2, [r1, #0]
 801855a:	429a      	cmp	r2, r3
 801855c:	f000 80cf 	beq.w	80186fe <http_send+0x4ae>
              ssi->tag_index = 0;
 8018560:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018564:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018568:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801856c:	e6da      	b.n	8018324 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801856e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80186bc <http_send+0x46c>
 8018572:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8018576:	f01c 0f01 	tst.w	ip, #1
 801857a:	f47f aed3 	bne.w	8018324 <http_send+0xd4>
 801857e:	e6e6      	b.n	801834e <http_send+0xfe>
  if (hs->handle == NULL) {
 8018580:	6948      	ldr	r0, [r1, #20]
 8018582:	2800      	cmp	r0, #0
 8018584:	d0b3      	beq.n	80184ee <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8018586:	f7ff fae1 	bl	8017b4c <fs_bytes_left>
  if (bytes_left <= 0) {
 801858a:	2800      	cmp	r0, #0
 801858c:	ddaf      	ble.n	80184ee <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801858e:	4b45      	ldr	r3, [pc, #276]	; (80186a4 <http_send+0x454>)
 8018590:	f240 429d 	movw	r2, #1181	; 0x49d
 8018594:	4944      	ldr	r1, [pc, #272]	; (80186a8 <http_send+0x458>)
 8018596:	4845      	ldr	r0, [pc, #276]	; (80186ac <http_send+0x45c>)
 8018598:	f00c fd18 	bl	8024fcc <iprintf>
  if (hs->ssi) {
 801859c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801859e:	2c00      	cmp	r4, #0
 80185a0:	f47f ae66 	bne.w	8018270 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80185a4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80185a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80185ae:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80185b0:	428a      	cmp	r2, r1
 80185b2:	bf88      	it	hi
 80185b4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80185b6:	4623      	mov	r3, r4
 80185b8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80185ba:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80185be:	f10d 0216 	add.w	r2, sp, #22
 80185c2:	f7ff fac7 	bl	8017b54 <http_write>
  if (err == ERR_OK) {
 80185c6:	2800      	cmp	r0, #0
 80185c8:	f43f af0e 	beq.w	80183e8 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80185cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 80185ce:	46a0      	mov	r8, r4
 80185d0:	e714      	b.n	80183fc <http_send+0x1ac>
          ssi->parsed++;
 80185d2:	3101      	adds	r1, #1
          ssi->tag_index++;
 80185d4:	3001      	adds	r0, #1
          ssi->parsed++;
 80185d6:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 80185d8:	b280      	uxth	r0, r0
          ssi->parse_left--;
 80185da:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 80185dc:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 80185de:	3901      	subs	r1, #1
 80185e0:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80185e2:	f81c 1000 	ldrb.w	r1, [ip, r0]
 80185e6:	2900      	cmp	r1, #0
 80185e8:	f47f ae52 	bne.w	8018290 <http_send+0x40>
  ssi = hs->ssi;
 80185ec:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80185f0:	f1b9 0f00 	cmp.w	r9, #0
 80185f4:	f000 8115 	beq.w	8018822 <http_send+0x5d2>
  if (httpd_ssi_handler
 80185f8:	4b2d      	ldr	r3, [pc, #180]	; (80186b0 <http_send+0x460>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	f000 8093 	beq.w	801872a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8018604:	4b2b      	ldr	r3, [pc, #172]	; (80186b4 <http_send+0x464>)
 8018606:	681a      	ldr	r2, [r3, #0]
 8018608:	2a00      	cmp	r2, #0
 801860a:	f000 808e 	beq.w	801872a <http_send+0x4da>
 801860e:	4b2a      	ldr	r3, [pc, #168]	; (80186b8 <http_send+0x468>)
 8018610:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018612:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8018614:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018616:	f340 8088 	ble.w	801872a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801861a:	f109 0a16 	add.w	sl, r9, #22
 801861e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018620:	2300      	movs	r3, #0
 8018622:	9503      	str	r5, [sp, #12]
 8018624:	460d      	mov	r5, r1
 8018626:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801862a:	4656      	mov	r6, sl
 801862c:	461c      	mov	r4, r3
 801862e:	4692      	mov	sl, r2
 8018630:	e003      	b.n	801863a <http_send+0x3ea>
 8018632:	3401      	adds	r4, #1
 8018634:	42a5      	cmp	r5, r4
 8018636:	f000 8105 	beq.w	8018844 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801863a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801863e:	4630      	mov	r0, r6
 8018640:	f7e7 fdfe 	bl	8000240 <strcmp>
 8018644:	2800      	cmp	r0, #0
 8018646:	d1f4      	bne.n	8018632 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8018648:	4623      	mov	r3, r4
 801864a:	22fe      	movs	r2, #254	; 0xfe
 801864c:	f109 011f 	add.w	r1, r9, #31
 8018650:	9e02      	ldr	r6, [sp, #8]
 8018652:	4618      	mov	r0, r3
 8018654:	9b00      	ldr	r3, [sp, #0]
 8018656:	9c01      	ldr	r4, [sp, #4]
 8018658:	9d03      	ldr	r5, [sp, #12]
 801865a:	4798      	blx	r3
 801865c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8018660:	e0a6      	b.n	80187b0 <http_send+0x560>
            ssi->tag_index++;
 8018662:	f10c 0c01 	add.w	ip, ip, #1
 8018666:	f8a4 c010 	strh.w	ip, [r4, #16]
 801866a:	e72f      	b.n	80184cc <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 801866c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801866e:	311f      	adds	r1, #31
 8018670:	f10d 0216 	add.w	r2, sp, #22
 8018674:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8018676:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801867a:	4421      	add	r1, r4
 801867c:	4638      	mov	r0, r7
 801867e:	f7ff fa69 	bl	8017b54 <http_write>
              ssi->tag_index += len;
 8018682:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8018686:	4606      	mov	r6, r0
 8018688:	2800      	cmp	r0, #0
 801868a:	f47f af4f 	bne.w	801852c <http_send+0x2dc>
              ssi->tag_index += len;
 801868e:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8018690:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8018694:	4413      	add	r3, r2
 8018696:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018698:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 801869c:	e5f8      	b.n	8018290 <http_send+0x40>
 801869e:	bf00      	nop
 80186a0:	08042a98 	.word	0x08042a98
 80186a4:	08042778 	.word	0x08042778
 80186a8:	08042858 	.word	0x08042858
 80186ac:	0802bdc0 	.word	0x0802bdc0
 80186b0:	2001e7bc 	.word	0x2001e7bc
 80186b4:	2001e7c0 	.word	0x2001e7c0
 80186b8:	2001e3b8 	.word	0x2001e3b8
 80186bc:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80186c0:	4b63      	ldr	r3, [pc, #396]	; (8018850 <http_send+0x600>)
 80186c2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80186c6:	4963      	ldr	r1, [pc, #396]	; (8018854 <http_send+0x604>)
 80186c8:	4863      	ldr	r0, [pc, #396]	; (8018858 <http_send+0x608>)
 80186ca:	f00c fc7f 	bl	8024fcc <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80186ce:	6863      	ldr	r3, [r4, #4]
 80186d0:	69a9      	ldr	r1, [r5, #24]
 80186d2:	e5f9      	b.n	80182c8 <http_send+0x78>
      hs->file += len;
 80186d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 80186d8:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 80186dc:	69ab      	ldr	r3, [r5, #24]
 80186de:	4413      	add	r3, r2
 80186e0:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 80186e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80186e4:	1a9b      	subs	r3, r3, r2
 80186e6:	626b      	str	r3, [r5, #36]	; 0x24
 80186e8:	e6a2      	b.n	8018430 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 80186ea:	6863      	ldr	r3, [r4, #4]
 80186ec:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80186ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80186f2:	e70c      	b.n	801850e <http_send+0x2be>
    return 0;
 80186f4:	4688      	mov	r8, r1
}
 80186f6:	4640      	mov	r0, r8
 80186f8:	b007      	add	sp, #28
 80186fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 80186fe:	2301      	movs	r3, #1
 8018700:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018702:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018706:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801870a:	e60b      	b.n	8018324 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801870c:	4b50      	ldr	r3, [pc, #320]	; (8018850 <http_send+0x600>)
 801870e:	f240 523a 	movw	r2, #1338	; 0x53a
 8018712:	4952      	ldr	r1, [pc, #328]	; (801885c <http_send+0x60c>)
 8018714:	4850      	ldr	r0, [pc, #320]	; (8018858 <http_send+0x608>)
 8018716:	f00c fc59 	bl	8024fcc <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801871a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801871c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801871e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8018722:	6821      	ldr	r1, [r4, #0]
 8018724:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018728:	e710      	b.n	801854c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801872a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 801872e:	4650      	mov	r0, sl
 8018730:	f7e7 fd90 	bl	8000254 <strlen>
 8018734:	28e4      	cmp	r0, #228	; 0xe4
 8018736:	d865      	bhi.n	8018804 <http_send+0x5b4>
 8018738:	2809      	cmp	r0, #9
 801873a:	bf28      	it	cs
 801873c:	2009      	movcs	r0, #9
 801873e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8018742:	4686      	mov	lr, r0
 8018744:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018746:	f100 0319 	add.w	r3, r0, #25
 801874a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801874c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 801886c <http_send+0x61c>
 8018750:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018754:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8018758:	f8bc 3000 	ldrh.w	r3, [ip]
 801875c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018760:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018764:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018768:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801876a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 801876e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018770:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018774:	f00b fc66 	bl	8024044 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018778:	4b39      	ldr	r3, [pc, #228]	; (8018860 <http_send+0x610>)
 801877a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801877c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801877e:	eb09 0e02 	add.w	lr, r9, r2
 8018782:	6818      	ldr	r0, [r3, #0]
 8018784:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018788:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801878a:	799b      	ldrb	r3, [r3, #6]
 801878c:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8018790:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018794:	f8ae c004 	strh.w	ip, [lr, #4]
 8018798:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801879c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 80187a0:	f7e7 fd58 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80187a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 80187a8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80187aa:	d232      	bcs.n	8018812 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 80187ac:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 80187b0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 80187b2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 80187b4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 80187b6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 80187ba:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 80187bc:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 80187c0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 80187c2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 80187c4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 80187c6:	d802      	bhi.n	80187ce <http_send+0x57e>
    if (len == 0) {
 80187c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80187cc:	e566      	b.n	801829c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80187ce:	1a52      	subs	r2, r2, r1
 80187d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80187d4:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80187d6:	429a      	cmp	r2, r3
 80187d8:	bfa8      	it	ge
 80187da:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80187dc:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80187de:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80187e2:	f10d 0216 	add.w	r2, sp, #22
 80187e6:	f7ff f9b5 	bl	8017b54 <http_write>
              if (err == ERR_OK) {
 80187ea:	4606      	mov	r6, r0
 80187ec:	2800      	cmp	r0, #0
 80187ee:	f47f ad7f 	bne.w	80182f0 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 80187f2:	6861      	ldr	r1, [r4, #4]
 80187f4:	69ab      	ldr	r3, [r5, #24]
 80187f6:	4299      	cmp	r1, r3
 80187f8:	d91b      	bls.n	8018832 <http_send+0x5e2>
                hs->file += len;
 80187fa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80187fe:	4413      	add	r3, r2
 8018800:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8018802:	e68e      	b.n	8018522 <http_send+0x2d2>
 8018804:	233a      	movs	r3, #58	; 0x3a
 8018806:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018808:	f04f 0e09 	mov.w	lr, #9
 801880c:	e9cd 3200 	strd	r3, r2, [sp]
 8018810:	e79c      	b.n	801874c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018812:	4b0f      	ldr	r3, [pc, #60]	; (8018850 <http_send+0x600>)
 8018814:	f240 323f 	movw	r2, #831	; 0x33f
 8018818:	4912      	ldr	r1, [pc, #72]	; (8018864 <http_send+0x614>)
 801881a:	480f      	ldr	r0, [pc, #60]	; (8018858 <http_send+0x608>)
 801881c:	f00c fbd6 	bl	8024fcc <iprintf>
 8018820:	e7c4      	b.n	80187ac <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018822:	4b0b      	ldr	r3, [pc, #44]	; (8018850 <http_send+0x600>)
 8018824:	f240 3206 	movw	r2, #774	; 0x306
 8018828:	490f      	ldr	r1, [pc, #60]	; (8018868 <http_send+0x618>)
 801882a:	480b      	ldr	r0, [pc, #44]	; (8018858 <http_send+0x608>)
 801882c:	f00c fbce 	bl	8024fcc <iprintf>
 8018830:	e6e2      	b.n	80185f8 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018832:	68a2      	ldr	r2, [r4, #8]
 8018834:	1a52      	subs	r2, r2, r1
 8018836:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801883a:	440a      	add	r2, r1
 801883c:	b292      	uxth	r2, r2
 801883e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018842:	e7dc      	b.n	80187fe <http_send+0x5ae>
 8018844:	46b2      	mov	sl, r6
 8018846:	9c01      	ldr	r4, [sp, #4]
 8018848:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 801884c:	e76f      	b.n	801872e <http_send+0x4de>
 801884e:	bf00      	nop
 8018850:	08042778 	.word	0x08042778
 8018854:	080428e0 	.word	0x080428e0
 8018858:	0802bdc0 	.word	0x0802bdc0
 801885c:	08042890 	.word	0x08042890
 8018860:	080428c8 	.word	0x080428c8
 8018864:	080428d0 	.word	0x080428d0
 8018868:	080428a8 	.word	0x080428a8
 801886c:	080428b4 	.word	0x080428b4

08018870 <http_sent>:
{
 8018870:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8018872:	4603      	mov	r3, r0
 8018874:	b130      	cbz	r0, 8018884 <http_sent+0x14>
  hs->retries = 0;
 8018876:	2200      	movs	r2, #0
 8018878:	4608      	mov	r0, r1
  http_send(pcb, hs);
 801887a:	4619      	mov	r1, r3
  hs->retries = 0;
 801887c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8018880:	f7ff fce6 	bl	8018250 <http_send>
}
 8018884:	2000      	movs	r0, #0
 8018886:	bd08      	pop	{r3, pc}

08018888 <http_poll>:
{
 8018888:	b510      	push	{r4, lr}
 801888a:	460c      	mov	r4, r1
  if (hs == NULL) {
 801888c:	b1a8      	cbz	r0, 80188ba <http_poll+0x32>
    hs->retries++;
 801888e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018892:	3301      	adds	r3, #1
 8018894:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018896:	2b04      	cmp	r3, #4
    hs->retries++;
 8018898:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801889c:	d019      	beq.n	80188d2 <http_poll+0x4a>
    if (hs->handle) {
 801889e:	6943      	ldr	r3, [r0, #20]
 80188a0:	b123      	cbz	r3, 80188ac <http_poll+0x24>
      if (http_send(pcb, hs)) {
 80188a2:	4601      	mov	r1, r0
 80188a4:	4620      	mov	r0, r4
 80188a6:	f7ff fcd3 	bl	8018250 <http_send>
 80188aa:	b908      	cbnz	r0, 80188b0 <http_poll+0x28>
  return ERR_OK;
 80188ac:	2000      	movs	r0, #0
}
 80188ae:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 80188b0:	4620      	mov	r0, r4
 80188b2:	f006 fc75 	bl	801f1a0 <tcp_output>
  return ERR_OK;
 80188b6:	2000      	movs	r0, #0
 80188b8:	e7f9      	b.n	80188ae <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 80188ba:	4601      	mov	r1, r0
 80188bc:	4620      	mov	r0, r4
 80188be:	f7ff fc23 	bl	8018108 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 80188c2:	3001      	adds	r0, #1
 80188c4:	d1f2      	bne.n	80188ac <http_poll+0x24>
      altcp_abort(pcb);
 80188c6:	4620      	mov	r0, r4
 80188c8:	f003 fd3c 	bl	801c344 <tcp_abort>
      return ERR_ABRT;
 80188cc:	f06f 000c 	mvn.w	r0, #12
}
 80188d0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 80188d2:	4601      	mov	r1, r0
 80188d4:	4620      	mov	r0, r4
 80188d6:	f7ff fc17 	bl	8018108 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 80188da:	2000      	movs	r0, #0
}
 80188dc:	bd10      	pop	{r4, pc}
 80188de:	bf00      	nop

080188e0 <http_recv>:
{
 80188e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e4:	4605      	mov	r5, r0
 80188e6:	b08d      	sub	sp, #52	; 0x34
 80188e8:	460e      	mov	r6, r1
 80188ea:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80188ec:	b9ab      	cbnz	r3, 801891a <http_recv+0x3a>
 80188ee:	fab2 f782 	clz	r7, r2
 80188f2:	097f      	lsrs	r7, r7, #5
 80188f4:	b1ca      	cbz	r2, 801892a <http_recv+0x4a>
 80188f6:	b188      	cbz	r0, 801891c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 80188f8:	8911      	ldrh	r1, [r2, #8]
 80188fa:	4630      	mov	r0, r6
 80188fc:	f002 ff1e 	bl	801b73c <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8018900:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018902:	2b00      	cmp	r3, #0
 8018904:	f040 813c 	bne.w	8018b80 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8018908:	696b      	ldr	r3, [r5, #20]
 801890a:	b1b3      	cbz	r3, 801893a <http_recv+0x5a>
      pbuf_free(p);
 801890c:	4620      	mov	r0, r4
 801890e:	f002 faa3 	bl	801ae58 <pbuf_free>
}
 8018912:	2000      	movs	r0, #0
 8018914:	b00d      	add	sp, #52	; 0x34
 8018916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 801891a:	b132      	cbz	r2, 801892a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 801891c:	4630      	mov	r0, r6
 801891e:	8921      	ldrh	r1, [r4, #8]
 8018920:	f002 ff0c 	bl	801b73c <tcp_recved>
      pbuf_free(p);
 8018924:	4620      	mov	r0, r4
 8018926:	f002 fa97 	bl	801ae58 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 801892a:	4629      	mov	r1, r5
 801892c:	4630      	mov	r0, r6
 801892e:	f7ff fbeb 	bl	8018108 <http_close_or_abort_conn.constprop.0>
}
 8018932:	2000      	movs	r0, #0
 8018934:	b00d      	add	sp, #52	; 0x34
 8018936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801893a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 801893c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801893e:	2b00      	cmp	r3, #0
 8018940:	f040 8173 	bne.w	8018c2a <http_recv+0x34a>
  if (hs->req == NULL) {
 8018944:	2800      	cmp	r0, #0
 8018946:	f000 8136 	beq.w	8018bb6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 801894a:	4621      	mov	r1, r4
 801894c:	f002 fab6 	bl	801aebc <pbuf_cat>
  pbuf_ref(p);
 8018950:	4620      	mov	r0, r4
 8018952:	f002 fa9f 	bl	801ae94 <pbuf_ref>
  if (hs->req->next != NULL) {
 8018956:	6a28      	ldr	r0, [r5, #32]
 8018958:	6803      	ldr	r3, [r0, #0]
 801895a:	2b00      	cmp	r3, #0
 801895c:	f000 812d 	beq.w	8018bba <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018960:	8907      	ldrh	r7, [r0, #8]
 8018962:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018966:	49bc      	ldr	r1, [pc, #752]	; (8018c58 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018968:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 801896a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801896c:	bf28      	it	cs
 801896e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018970:	2300      	movs	r3, #0
 8018972:	463a      	mov	r2, r7
 8018974:	f002 fb14 	bl	801afa0 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8018978:	2f06      	cmp	r7, #6
 801897a:	f240 80ef 	bls.w	8018b5c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801897e:	463a      	mov	r2, r7
 8018980:	49b6      	ldr	r1, [pc, #728]	; (8018c5c <http_recv+0x37c>)
 8018982:	4640      	mov	r0, r8
 8018984:	f000 fa4e 	bl	8018e24 <lwip_strnstr>
    if (crlf != NULL) {
 8018988:	2800      	cmp	r0, #0
 801898a:	f000 80e7 	beq.w	8018b5c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 801898e:	2204      	movs	r2, #4
 8018990:	49b3      	ldr	r1, [pc, #716]	; (8018c60 <http_recv+0x380>)
 8018992:	4640      	mov	r0, r8
 8018994:	f00d faf6 	bl	8025f84 <strncmp>
 8018998:	4682      	mov	sl, r0
 801899a:	2800      	cmp	r0, #0
 801899c:	f040 8118 	bne.w	8018bd0 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80189a0:	1f3a      	subs	r2, r7, #4
 80189a2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 80189a6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80189aa:	49ae      	ldr	r1, [pc, #696]	; (8018c64 <http_recv+0x384>)
 80189ac:	b292      	uxth	r2, r2
 80189ae:	4658      	mov	r0, fp
 80189b0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80189b4:	f000 fa36 	bl	8018e24 <lwip_strnstr>
      if (sp2 == NULL) {
 80189b8:	9a05      	ldr	r2, [sp, #20]
 80189ba:	4681      	mov	r9, r0
 80189bc:	2800      	cmp	r0, #0
 80189be:	f000 8123 	beq.w	8018c08 <http_recv+0x328>
      int is_09 = 0;
 80189c2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 80189c4:	9305      	str	r3, [sp, #20]
 80189c6:	f1b9 0f00 	cmp.w	r9, #0
 80189ca:	f000 80c7 	beq.w	8018b5c <http_recv+0x27c>
 80189ce:	9b04      	ldr	r3, [sp, #16]
 80189d0:	4599      	cmp	r9, r3
 80189d2:	f240 80c3 	bls.w	8018b5c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80189d6:	463a      	mov	r2, r7
 80189d8:	49a3      	ldr	r1, [pc, #652]	; (8018c68 <http_recv+0x388>)
 80189da:	4640      	mov	r0, r8
 80189dc:	f000 fa22 	bl	8018e24 <lwip_strnstr>
 80189e0:	2800      	cmp	r0, #0
 80189e2:	f000 80bb 	beq.w	8018b5c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80189e6:	9b05      	ldr	r3, [sp, #20]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	f000 812b 	beq.w	8018c44 <http_recv+0x364>
            hs->keepalive = 0;
 80189ee:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80189f0:	eba9 020b 	sub.w	r2, r9, fp
 80189f4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 80189f8:	2100      	movs	r1, #0
 80189fa:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 80189fc:	b292      	uxth	r2, r2
          *sp1 = 0;
 80189fe:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8018a00:	f80b 1002 	strb.w	r1, [fp, r2]
 8018a04:	445a      	add	r2, fp
 8018a06:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8018a08:	f1ba 0f00 	cmp.w	sl, #0
 8018a0c:	f000 8113 	beq.w	8018c36 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018a10:	f109 0301 	add.w	r3, r9, #1
 8018a14:	4994      	ldr	r1, [pc, #592]	; (8018c68 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8018a16:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018a1a:	eba3 0208 	sub.w	r2, r3, r8
 8018a1e:	4618      	mov	r0, r3
 8018a20:	9305      	str	r3, [sp, #20]
 8018a22:	1aba      	subs	r2, r7, r2
 8018a24:	f000 f9fe 	bl	8018e24 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8018a28:	9008      	str	r0, [sp, #32]
 8018a2a:	2800      	cmp	r0, #0
 8018a2c:	f000 8168 	beq.w	8018d00 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018a30:	9b05      	ldr	r3, [sp, #20]
 8018a32:	498e      	ldr	r1, [pc, #568]	; (8018c6c <http_recv+0x38c>)
 8018a34:	1ac2      	subs	r2, r0, r3
 8018a36:	4618      	mov	r0, r3
 8018a38:	f000 f9f4 	bl	8018e24 <lwip_strnstr>
    if (scontent_len != NULL) {
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	9009      	str	r0, [sp, #36]	; 0x24
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f000 812f 	beq.w	8018ca4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018a46:	3310      	adds	r3, #16
 8018a48:	220a      	movs	r2, #10
 8018a4a:	4984      	ldr	r1, [pc, #528]	; (8018c5c <http_recv+0x37c>)
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	9307      	str	r3, [sp, #28]
 8018a50:	f000 f9e8 	bl	8018e24 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8018a54:	2800      	cmp	r0, #0
 8018a56:	f000 8125 	beq.w	8018ca4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8018a5a:	9b07      	ldr	r3, [sp, #28]
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f00b f893 	bl	8023b88 <atoi>
        if (content_len == 0) {
 8018a62:	1e02      	subs	r2, r0, #0
 8018a64:	9207      	str	r2, [sp, #28]
 8018a66:	f040 811b 	bne.w	8018ca0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8018a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a6c:	7c1b      	ldrb	r3, [r3, #16]
 8018a6e:	2b30      	cmp	r3, #48	; 0x30
 8018a70:	f040 8118 	bne.w	8018ca4 <http_recv+0x3c4>
 8018a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a76:	7c5b      	ldrb	r3, [r3, #17]
 8018a78:	2b0d      	cmp	r3, #13
 8018a7a:	f040 8113 	bne.w	8018ca4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018a7e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8018a80:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018a82:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018a84:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018a86:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8018a88:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8018c84 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8018a8c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018a90:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018a94:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8018a96:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018a98:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018a9a:	9a05      	ldr	r2, [sp, #20]
 8018a9c:	bfb4      	ite	lt
 8018a9e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018aa0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018aa4:	429f      	cmp	r7, r3
 8018aa6:	bfa8      	it	ge
 8018aa8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018aaa:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8018aac:	2700      	movs	r7, #0
 8018aae:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8018ab2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018ab4:	9807      	ldr	r0, [sp, #28]
 8018ab6:	f8cd b004 	str.w	fp, [sp, #4]
 8018aba:	9000      	str	r0, [sp, #0]
 8018abc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8018ac0:	9003      	str	r0, [sp, #12]
 8018ac2:	203f      	movs	r0, #63	; 0x3f
 8018ac4:	9002      	str	r0, [sp, #8]
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	f7ee fa4c 	bl	8006f64 <httpd_post_begin>
          if (err == ERR_OK) {
 8018acc:	2800      	cmp	r0, #0
 8018ace:	f040 80f7 	bne.w	8018cc0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8018ad2:	9807      	ldr	r0, [sp, #28]
 8018ad4:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8018ad6:	f1ba 0f00 	cmp.w	sl, #0
 8018ada:	f000 80d5 	beq.w	8018c88 <http_recv+0x3a8>
 8018ade:	4652      	mov	r2, sl
 8018ae0:	e005      	b.n	8018aee <http_recv+0x20e>
              q = q->next;
 8018ae2:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8018ae4:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018ae8:	2a00      	cmp	r2, #0
 8018aea:	f000 80cd 	beq.w	8018c88 <http_recv+0x3a8>
 8018aee:	8953      	ldrh	r3, [r2, #10]
 8018af0:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8018af2:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018af6:	d9f4      	bls.n	8018ae2 <http_recv+0x202>
 8018af8:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8018afa:	4641      	mov	r1, r8
 8018afc:	4610      	mov	r0, r2
 8018afe:	f002 f93b 	bl	801ad78 <pbuf_remove_header>
              pbuf_ref(q);
 8018b02:	4650      	mov	r0, sl
 8018b04:	f002 f9c6 	bl	801ae94 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018b08:	4651      	mov	r1, sl
 8018b0a:	4628      	mov	r0, r5
 8018b0c:	f7ff fa98 	bl	8018040 <http_post_rxpbuf>
 8018b10:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8018b12:	2f00      	cmp	r7, #0
 8018b14:	f000 80ba 	beq.w	8018c8c <http_recv+0x3ac>
              *sp1 = ' ';
 8018b18:	2320      	movs	r3, #32
 8018b1a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8018b1c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8018b20:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018b22:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018b24:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018b28:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8018b2a:	d022      	beq.n	8018b72 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018b2c:	2f00      	cmp	r7, #0
 8018b2e:	d048      	beq.n	8018bc2 <http_recv+0x2e2>
 8018b30:	1d7a      	adds	r2, r7, #5
 8018b32:	f43f aeeb 	beq.w	801890c <http_recv+0x2c>
 8018b36:	f027 0308 	bic.w	r3, r7, #8
 8018b3a:	b25b      	sxtb	r3, r3
 8018b3c:	3310      	adds	r3, #16
 8018b3e:	d12e      	bne.n	8018b9e <http_recv+0x2be>
        if (hs->req != NULL) {
 8018b40:	6a28      	ldr	r0, [r5, #32]
 8018b42:	b3a0      	cbz	r0, 8018bae <http_recv+0x2ce>
          pbuf_free(hs->req);
 8018b44:	f002 f988 	bl	801ae58 <pbuf_free>
          hs->req = NULL;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f002 f983 	bl	801ae58 <pbuf_free>
      if (parsed == ERR_OK) {
 8018b52:	b1df      	cbz	r7, 8018b8c <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8018b54:	3710      	adds	r7, #16
 8018b56:	f43f aee8 	beq.w	801892a <http_recv+0x4a>
 8018b5a:	e6ea      	b.n	8018932 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8018b5c:	6a28      	ldr	r0, [r5, #32]
 8018b5e:	f002 f98f 	bl	801ae80 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8018b62:	6a2b      	ldr	r3, [r5, #32]
 8018b64:	891b      	ldrh	r3, [r3, #8]
 8018b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b6a:	d202      	bcs.n	8018b72 <http_recv+0x292>
 8018b6c:	2805      	cmp	r0, #5
 8018b6e:	f67f aecd 	bls.w	801890c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8018b72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8018b76:	4628      	mov	r0, r5
 8018b78:	f7ff fa88 	bl	801808c <http_find_error_file>
 8018b7c:	4607      	mov	r7, r0
 8018b7e:	e7d5      	b.n	8018b2c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8018b80:	4621      	mov	r1, r4
 8018b82:	4628      	mov	r0, r5
    hs->retries = 0;
 8018b84:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8018b88:	f7ff fa5a 	bl	8018040 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8018b8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	f47f aecf 	bne.w	8018932 <http_recv+0x52>
      http_send(pcb, hs);
 8018b94:	4629      	mov	r1, r5
 8018b96:	4630      	mov	r0, r6
 8018b98:	f7ff fb5a 	bl	8018250 <http_send>
 8018b9c:	e6c9      	b.n	8018932 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018b9e:	4b34      	ldr	r3, [pc, #208]	; (8018c70 <http_recv+0x390>)
 8018ba0:	f640 2204 	movw	r2, #2564	; 0xa04
 8018ba4:	4933      	ldr	r1, [pc, #204]	; (8018c74 <http_recv+0x394>)
 8018ba6:	4834      	ldr	r0, [pc, #208]	; (8018c78 <http_recv+0x398>)
 8018ba8:	f00c fa10 	bl	8024fcc <iprintf>
 8018bac:	e7c8      	b.n	8018b40 <http_recv+0x260>
      pbuf_free(p);
 8018bae:	4620      	mov	r0, r4
 8018bb0:	f002 f952 	bl	801ae58 <pbuf_free>
      if (parsed == ERR_OK) {
 8018bb4:	e7ce      	b.n	8018b54 <http_recv+0x274>
    hs->req = p;
 8018bb6:	622c      	str	r4, [r5, #32]
 8018bb8:	e6ca      	b.n	8018950 <http_recv+0x70>
    data = (char *)p->payload;
 8018bba:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8018bbe:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8018bc0:	e6da      	b.n	8018978 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8018bc2:	1d7b      	adds	r3, r7, #5
 8018bc4:	f43f aea2 	beq.w	801890c <http_recv+0x2c>
        if (hs->req != NULL) {
 8018bc8:	6a28      	ldr	r0, [r5, #32]
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d0be      	beq.n	8018b4c <http_recv+0x26c>
 8018bce:	e7b9      	b.n	8018b44 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8018bd0:	2205      	movs	r2, #5
 8018bd2:	492a      	ldr	r1, [pc, #168]	; (8018c7c <http_recv+0x39c>)
 8018bd4:	4640      	mov	r0, r8
 8018bd6:	f00d f9d5 	bl	8025f84 <strncmp>
 8018bda:	9005      	str	r0, [sp, #20]
 8018bdc:	b9d8      	cbnz	r0, 8018c16 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018bde:	f1a7 0a05 	sub.w	sl, r7, #5
 8018be2:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8018be6:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018bea:	491e      	ldr	r1, [pc, #120]	; (8018c64 <http_recv+0x384>)
 8018bec:	fa1f fa8a 	uxth.w	sl, sl
 8018bf0:	4658      	mov	r0, fp
        sp1 = data + 4;
 8018bf2:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018bf4:	4652      	mov	r2, sl
 8018bf6:	f000 f915 	bl	8018e24 <lwip_strnstr>
      if (sp2 == NULL) {
 8018bfa:	4681      	mov	r9, r0
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	d059      	beq.n	8018cb4 <http_recv+0x3d4>
        is_post = 1;
 8018c00:	f04f 0a01 	mov.w	sl, #1
 8018c04:	9b05      	ldr	r3, [sp, #20]
 8018c06:	e6dd      	b.n	80189c4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018c08:	4914      	ldr	r1, [pc, #80]	; (8018c5c <http_recv+0x37c>)
 8018c0a:	4658      	mov	r0, fp
 8018c0c:	f000 f90a 	bl	8018e24 <lwip_strnstr>
        is_09 = 1;
 8018c10:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018c12:	4681      	mov	r9, r0
        if (is_post) {
 8018c14:	e6d6      	b.n	80189c4 <http_recv+0xe4>
        data[4] = 0;
 8018c16:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8018c18:	f240 11f5 	movw	r1, #501	; 0x1f5
 8018c1c:	4628      	mov	r0, r5
        data[4] = 0;
 8018c1e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8018c22:	f7ff fa33 	bl	801808c <http_find_error_file>
 8018c26:	4607      	mov	r7, r0
 8018c28:	e780      	b.n	8018b2c <http_recv+0x24c>
        if (hs->req != NULL) {
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	f43f ae6e 	beq.w	801890c <http_recv+0x2c>
 8018c30:	f06f 0707 	mvn.w	r7, #7
 8018c34:	e786      	b.n	8018b44 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8018c36:	461a      	mov	r2, r3
 8018c38:	4659      	mov	r1, fp
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	f7ff f910 	bl	8017e60 <http_find_file>
 8018c40:	4607      	mov	r7, r0
 8018c42:	e773      	b.n	8018b2c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018c44:	463a      	mov	r2, r7
 8018c46:	490e      	ldr	r1, [pc, #56]	; (8018c80 <http_recv+0x3a0>)
 8018c48:	4640      	mov	r0, r8
 8018c4a:	f000 f8eb 	bl	8018e24 <lwip_strnstr>
 8018c4e:	9b05      	ldr	r3, [sp, #20]
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d047      	beq.n	8018ce4 <http_recv+0x404>
            hs->keepalive = 1;
 8018c54:	2001      	movs	r0, #1
 8018c56:	e6cb      	b.n	80189f0 <http_recv+0x110>
 8018c58:	2001e3bc 	.word	0x2001e3bc
 8018c5c:	0802af50 	.word	0x0802af50
 8018c60:	080428f8 	.word	0x080428f8
 8018c64:	0802b968 	.word	0x0802b968
 8018c68:	080299dc 	.word	0x080299dc
 8018c6c:	08042938 	.word	0x08042938
 8018c70:	08042778 	.word	0x08042778
 8018c74:	0804294c 	.word	0x0804294c
 8018c78:	0802bdc0 	.word	0x0802bdc0
 8018c7c:	08042900 	.word	0x08042900
 8018c80:	08042908 	.word	0x08042908
 8018c84:	2001e378 	.word	0x2001e378
            } else if (hs->post_content_len_left == 0) {
 8018c88:	9b07      	ldr	r3, [sp, #28]
 8018c8a:	b303      	cbz	r3, 8018cce <http_recv+0x3ee>
        if (hs->req != NULL) {
 8018c8c:	6a28      	ldr	r0, [r5, #32]
 8018c8e:	b398      	cbz	r0, 8018cf8 <http_recv+0x418>
          pbuf_free(hs->req);
 8018c90:	f002 f8e2 	bl	801ae58 <pbuf_free>
          hs->req = NULL;
 8018c94:	2300      	movs	r3, #0
      pbuf_free(p);
 8018c96:	4620      	mov	r0, r4
          hs->req = NULL;
 8018c98:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8018c9a:	f002 f8dd 	bl	801ae58 <pbuf_free>
      if (parsed == ERR_OK) {
 8018c9e:	e775      	b.n	8018b8c <http_recv+0x2ac>
        if (content_len >= 0) {
 8018ca0:	f6bf aeed 	bge.w	8018a7e <http_recv+0x19e>
              *sp1 = ' ';
 8018ca4:	2320      	movs	r3, #32
 8018ca6:	9a04      	ldr	r2, [sp, #16]
 8018ca8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018caa:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018cac:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018cb0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8018cb2:	e75e      	b.n	8018b72 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018cb4:	4652      	mov	r2, sl
 8018cb6:	4658      	mov	r0, fp
 8018cb8:	4915      	ldr	r1, [pc, #84]	; (8018d10 <http_recv+0x430>)
 8018cba:	f000 f8b3 	bl	8018e24 <lwip_strnstr>
        if (is_post) {
 8018cbe:	e758      	b.n	8018b72 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8018cc0:	463a      	mov	r2, r7
 8018cc2:	4659      	mov	r1, fp
 8018cc4:	4628      	mov	r0, r5
 8018cc6:	f7ff f8cb 	bl	8017e60 <http_find_file>
 8018cca:	4607      	mov	r7, r0
 8018ccc:	e721      	b.n	8018b12 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8018cce:	9907      	ldr	r1, [sp, #28]
 8018cd0:	2241      	movs	r2, #65	; 0x41
 8018cd2:	4608      	mov	r0, r1
 8018cd4:	f001 ff0a 	bl	801aaec <pbuf_alloc>
 8018cd8:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8018cda:	4628      	mov	r0, r5
 8018cdc:	f7ff f9b0 	bl	8018040 <http_post_rxpbuf>
 8018ce0:	4607      	mov	r7, r0
 8018ce2:	e716      	b.n	8018b12 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8018ce4:	463a      	mov	r2, r7
 8018ce6:	490b      	ldr	r1, [pc, #44]	; (8018d14 <http_recv+0x434>)
 8018ce8:	4640      	mov	r0, r8
 8018cea:	f000 f89b 	bl	8018e24 <lwip_strnstr>
            hs->keepalive = 1;
 8018cee:	3800      	subs	r0, #0
 8018cf0:	9b05      	ldr	r3, [sp, #20]
 8018cf2:	bf18      	it	ne
 8018cf4:	2001      	movne	r0, #1
 8018cf6:	e67b      	b.n	80189f0 <http_recv+0x110>
      pbuf_free(p);
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f002 f8ad 	bl	801ae58 <pbuf_free>
      if (parsed == ERR_OK) {
 8018cfe:	e745      	b.n	8018b8c <http_recv+0x2ac>
              *sp1 = ' ';
 8018d00:	2320      	movs	r3, #32
 8018d02:	9a04      	ldr	r2, [sp, #16]
 8018d04:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018d06:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018d08:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018d0c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 8018d0e:	e5fd      	b.n	801890c <http_recv+0x2c>
 8018d10:	0802af50 	.word	0x0802af50
 8018d14:	08042920 	.word	0x08042920

08018d18 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8018d18:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8018d1a:	202e      	movs	r0, #46	; 0x2e
 8018d1c:	f003 fc36 	bl	801c58c <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018d20:	b358      	cbz	r0, 8018d7a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8018d22:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018d24:	2101      	movs	r1, #1
 8018d26:	f002 fe13 	bl	801b950 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8018d2a:	2250      	movs	r2, #80	; 0x50
 8018d2c:	4917      	ldr	r1, [pc, #92]	; (8018d8c <httpd_init+0x74>)
 8018d2e:	4620      	mov	r0, r4
 8018d30:	f002 fbe2 	bl	801b4f8 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018d34:	b958      	cbnz	r0, 8018d4e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 8018d36:	4620      	mov	r0, r4
 8018d38:	21ff      	movs	r1, #255	; 0xff
 8018d3a:	f002 fcbf 	bl	801b6bc <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018d3e:	4604      	mov	r4, r0
 8018d40:	b198      	cbz	r0, 8018d6a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8018d42:	4620      	mov	r0, r4
 8018d44:	4912      	ldr	r1, [pc, #72]	; (8018d90 <httpd_init+0x78>)
}
 8018d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8018d4a:	f002 be8f 	b.w	801ba6c <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018d4e:	4b11      	ldr	r3, [pc, #68]	; (8018d94 <httpd_init+0x7c>)
 8018d50:	f640 2257 	movw	r2, #2647	; 0xa57
 8018d54:	4910      	ldr	r1, [pc, #64]	; (8018d98 <httpd_init+0x80>)
 8018d56:	4811      	ldr	r0, [pc, #68]	; (8018d9c <httpd_init+0x84>)
 8018d58:	f00c f938 	bl	8024fcc <iprintf>
    pcb = altcp_listen(pcb);
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	21ff      	movs	r1, #255	; 0xff
 8018d60:	f002 fcac 	bl	801b6bc <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018d64:	4604      	mov	r4, r0
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d1eb      	bne.n	8018d42 <httpd_init+0x2a>
 8018d6a:	4b0a      	ldr	r3, [pc, #40]	; (8018d94 <httpd_init+0x7c>)
 8018d6c:	f640 2259 	movw	r2, #2649	; 0xa59
 8018d70:	490b      	ldr	r1, [pc, #44]	; (8018da0 <httpd_init+0x88>)
 8018d72:	480a      	ldr	r0, [pc, #40]	; (8018d9c <httpd_init+0x84>)
 8018d74:	f00c f92a 	bl	8024fcc <iprintf>
 8018d78:	e7e3      	b.n	8018d42 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018d7a:	4b06      	ldr	r3, [pc, #24]	; (8018d94 <httpd_init+0x7c>)
 8018d7c:	f640 2272 	movw	r2, #2674	; 0xa72
 8018d80:	4908      	ldr	r1, [pc, #32]	; (8018da4 <httpd_init+0x8c>)
 8018d82:	4806      	ldr	r0, [pc, #24]	; (8018d9c <httpd_init+0x84>)
}
 8018d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018d88:	f00c b920 	b.w	8024fcc <iprintf>
 8018d8c:	080452a8 	.word	0x080452a8
 8018d90:	08017c09 	.word	0x08017c09
 8018d94:	08042778 	.word	0x08042778
 8018d98:	08042994 	.word	0x08042994
 8018d9c:	0802bdc0 	.word	0x0802bdc0
 8018da0:	080429b0 	.word	0x080429b0
 8018da4:	08042978 	.word	0x08042978

08018da8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8018da8:	b570      	push	{r4, r5, r6, lr}
 8018daa:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018dac:	4606      	mov	r6, r0
{
 8018dae:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018db0:	b1c8      	cbz	r0, 8018de6 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8018db2:	4b11      	ldr	r3, [pc, #68]	; (8018df8 <http_set_ssi_handler+0x50>)
 8018db4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8018db6:	b175      	cbz	r5, 8018dd6 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018db8:	2c00      	cmp	r4, #0
 8018dba:	dd04      	ble.n	8018dc6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8018dbc:	4a0f      	ldr	r2, [pc, #60]	; (8018dfc <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8018dbe:	4b10      	ldr	r3, [pc, #64]	; (8018e00 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8018dc0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8018dc2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8018dc4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018dc6:	4b0f      	ldr	r3, [pc, #60]	; (8018e04 <http_set_ssi_handler+0x5c>)
 8018dc8:	f640 229f 	movw	r2, #2719	; 0xa9f
 8018dcc:	490e      	ldr	r1, [pc, #56]	; (8018e08 <http_set_ssi_handler+0x60>)
 8018dce:	480f      	ldr	r0, [pc, #60]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018dd0:	f00c f8fc 	bl	8024fcc <iprintf>
 8018dd4:	e7f2      	b.n	8018dbc <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8018dd6:	4b0b      	ldr	r3, [pc, #44]	; (8018e04 <http_set_ssi_handler+0x5c>)
 8018dd8:	f640 229e 	movw	r2, #2718	; 0xa9e
 8018ddc:	490c      	ldr	r1, [pc, #48]	; (8018e10 <http_set_ssi_handler+0x68>)
 8018dde:	480b      	ldr	r0, [pc, #44]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018de0:	f00c f8f4 	bl	8024fcc <iprintf>
 8018de4:	e7e8      	b.n	8018db8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018de6:	4b07      	ldr	r3, [pc, #28]	; (8018e04 <http_set_ssi_handler+0x5c>)
 8018de8:	f640 2297 	movw	r2, #2711	; 0xa97
 8018dec:	4909      	ldr	r1, [pc, #36]	; (8018e14 <http_set_ssi_handler+0x6c>)
 8018dee:	4807      	ldr	r0, [pc, #28]	; (8018e0c <http_set_ssi_handler+0x64>)
 8018df0:	f00c f8ec 	bl	8024fcc <iprintf>
 8018df4:	e7dd      	b.n	8018db2 <http_set_ssi_handler+0xa>
 8018df6:	bf00      	nop
 8018df8:	2001e7bc 	.word	0x2001e7bc
 8018dfc:	2001e7c0 	.word	0x2001e7c0
 8018e00:	2001e3b8 	.word	0x2001e3b8
 8018e04:	08042778 	.word	0x08042778
 8018e08:	080429f8 	.word	0x080429f8
 8018e0c:	0802bdc0 	.word	0x0802bdc0
 8018e10:	080429e8 	.word	0x080429e8
 8018e14:	080429d0 	.word	0x080429d0

08018e18 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8018e18:	ba40      	rev16	r0, r0
}
 8018e1a:	b280      	uxth	r0, r0
 8018e1c:	4770      	bx	lr
 8018e1e:	bf00      	nop

08018e20 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8018e20:	ba00      	rev	r0, r0
 8018e22:	4770      	bx	lr

08018e24 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8018e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e28:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8018e2a:	4608      	mov	r0, r1
{
 8018e2c:	4688      	mov	r8, r1
 8018e2e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8018e30:	f7e7 fa10 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8018e34:	b1c0      	cbz	r0, 8018e68 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018e36:	4605      	mov	r5, r0
 8018e38:	7820      	ldrb	r0, [r4, #0]
 8018e3a:	b1b0      	cbz	r0, 8018e6a <lwip_strnstr+0x46>
 8018e3c:	4426      	add	r6, r4
 8018e3e:	1962      	adds	r2, r4, r5
 8018e40:	4296      	cmp	r6, r2
 8018e42:	d314      	bcc.n	8018e6e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018e44:	f898 7000 	ldrb.w	r7, [r8]
 8018e48:	e005      	b.n	8018e56 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018e4a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8018e4e:	1962      	adds	r2, r4, r5
 8018e50:	b158      	cbz	r0, 8018e6a <lwip_strnstr+0x46>
 8018e52:	4296      	cmp	r6, r2
 8018e54:	d30b      	bcc.n	8018e6e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018e56:	4287      	cmp	r7, r0
 8018e58:	d1f7      	bne.n	8018e4a <lwip_strnstr+0x26>
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	462a      	mov	r2, r5
 8018e5e:	4641      	mov	r1, r8
 8018e60:	f00d f890 	bl	8025f84 <strncmp>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d1f0      	bne.n	8018e4a <lwip_strnstr+0x26>
 8018e68:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8018e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8018e6e:	2000      	movs	r0, #0
}
 8018e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e74 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8018e74:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018e78:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8018e7c:	4293      	cmp	r3, r2
 8018e7e:	d01c      	beq.n	8018eba <lwip_stricmp+0x46>
 8018e80:	f043 0c20 	orr.w	ip, r3, #32
{
 8018e84:	b500      	push	{lr}
 8018e86:	f042 0e20 	orr.w	lr, r2, #32
 8018e8a:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018e8e:	2a19      	cmp	r2, #25
 8018e90:	d810      	bhi.n	8018eb4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8018e92:	45f4      	cmp	ip, lr
 8018e94:	d10e      	bne.n	8018eb4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8018e96:	b1a3      	cbz	r3, 8018ec2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8018e98:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d0f8      	beq.n	8018e96 <lwip_stricmp+0x22>
 8018ea4:	f043 0c20 	orr.w	ip, r3, #32
 8018ea8:	f042 0e20 	orr.w	lr, r2, #32
 8018eac:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018eb0:	2a19      	cmp	r2, #25
 8018eb2:	d9ee      	bls.n	8018e92 <lwip_stricmp+0x1e>
        return 1;
 8018eb4:	2001      	movs	r0, #1
  return 0;
}
 8018eb6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d1da      	bne.n	8018e74 <lwip_stricmp>
  return 0;
 8018ebe:	4618      	mov	r0, r3
}
 8018ec0:	4770      	bx	lr
  return 0;
 8018ec2:	4618      	mov	r0, r3
}
 8018ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08018ec8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8018ec8:	4684      	mov	ip, r0
 8018eca:	b570      	push	{r4, r5, r6, lr}
 8018ecc:	e004      	b.n	8018ed8 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8018ece:	42b4      	cmp	r4, r6
 8018ed0:	d113      	bne.n	8018efa <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8018ed2:	42e8      	cmn	r0, r5
 8018ed4:	d013      	beq.n	8018efe <lwip_strnicmp+0x36>
 8018ed6:	b193      	cbz	r3, 8018efe <lwip_strnicmp+0x36>
    c1 = *str1++;
 8018ed8:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 8018edc:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8018ee0:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018ee4:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8018ee8:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 8018eea:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018eee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8018ef2:	d0ee      	beq.n	8018ed2 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018ef4:	f1be 0f19 	cmp.w	lr, #25
 8018ef8:	d9e9      	bls.n	8018ece <lwip_strnicmp+0x6>
        return 1;
 8018efa:	2001      	movs	r0, #1
  return 0;
}
 8018efc:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8018efe:	2000      	movs	r0, #0
}
 8018f00:	bd70      	pop	{r4, r5, r6, pc}
 8018f02:	bf00      	nop

08018f04 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8018f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f08:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018f0a:	4f24      	ldr	r7, [pc, #144]	; (8018f9c <dns_call_found+0x98>)
 8018f0c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018f10:	4c23      	ldr	r4, [pc, #140]	; (8018fa0 <dns_call_found+0x9c>)
{
 8018f12:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018f14:	012e      	lsls	r6, r5, #4
 8018f16:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8018f1a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 8018f1e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018f22:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8018f26:	6823      	ldr	r3, [r4, #0]
 8018f28:	b143      	cbz	r3, 8018f3c <dns_call_found+0x38>
 8018f2a:	7a22      	ldrb	r2, [r4, #8]
 8018f2c:	42aa      	cmp	r2, r5
 8018f2e:	d105      	bne.n	8018f3c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018f30:	6862      	ldr	r2, [r4, #4]
 8018f32:	4651      	mov	r1, sl
 8018f34:	4640      	mov	r0, r8
 8018f36:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8018f38:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018f3c:	340c      	adds	r4, #12
 8018f3e:	454c      	cmp	r4, r9
 8018f40:	d1f1      	bne.n	8018f26 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018f42:	1973      	adds	r3, r6, r5
 8018f44:	2400      	movs	r4, #0
 8018f46:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8018f4a:	4f14      	ldr	r7, [pc, #80]	; (8018f9c <dns_call_found+0x98>)
 8018f4c:	7bd9      	ldrb	r1, [r3, #15]
 8018f4e:	463a      	mov	r2, r7
    if (i == idx) {
 8018f50:	b2e3      	uxtb	r3, r4
 8018f52:	3401      	adds	r4, #1
 8018f54:	429d      	cmp	r5, r3
 8018f56:	d002      	beq.n	8018f5e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8018f58:	7a93      	ldrb	r3, [r2, #10]
 8018f5a:	2b02      	cmp	r3, #2
 8018f5c:	d015      	beq.n	8018f8a <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018f5e:	2c04      	cmp	r4, #4
 8018f60:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8018f64:	d1f4      	bne.n	8018f50 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018f66:	2903      	cmp	r1, #3
 8018f68:	d80d      	bhi.n	8018f86 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018f6a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018f6c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8018fa4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018f70:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018f74:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8018f78:	f007 f836 	bl	801ffe8 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018f80:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018f82:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8018f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018f8a:	7bd3      	ldrb	r3, [r2, #15]
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	d1e6      	bne.n	8018f5e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018f90:	4435      	add	r5, r6
 8018f92:	2304      	movs	r3, #4
 8018f94:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8018f98:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018f9a:	e7f4      	b.n	8018f86 <dns_call_found+0x82>
 8018f9c:	2001e814 	.word	0x2001e814
 8018fa0:	2001e7d8 	.word	0x2001e7d8
 8018fa4:	2001e7c8 	.word	0x2001e7c8

08018fa8 <dns_send.isra.0>:
dns_send(u8_t idx)
 8018fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018fac:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 8018fae:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018fb0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8018fb4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018fb6:	9301      	str	r3, [sp, #4]
 8018fb8:	4b56      	ldr	r3, [pc, #344]	; (8019114 <dns_send.isra.0+0x16c>)
 8018fba:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8018fbe:	7ae3      	ldrb	r3, [r4, #11]
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d907      	bls.n	8018fd4 <dns_send.isra.0+0x2c>
 8018fc4:	4b54      	ldr	r3, [pc, #336]	; (8019118 <dns_send.isra.0+0x170>)
 8018fc6:	f240 22fa 	movw	r2, #762	; 0x2fa
 8018fca:	4954      	ldr	r1, [pc, #336]	; (801911c <dns_send.isra.0+0x174>)
 8018fcc:	4854      	ldr	r0, [pc, #336]	; (8019120 <dns_send.isra.0+0x178>)
 8018fce:	f00b fffd 	bl	8024fcc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8018fd2:	7ae3      	ldrb	r3, [r4, #11]
 8018fd4:	4a53      	ldr	r2, [pc, #332]	; (8019124 <dns_send.isra.0+0x17c>)
 8018fd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018fda:	2c00      	cmp	r4, #0
 8018fdc:	f000 808b 	beq.w	80190f6 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8018fe0:	9b01      	ldr	r3, [sp, #4]
 8018fe2:	4e4c      	ldr	r6, [pc, #304]	; (8019114 <dns_send.isra.0+0x16c>)
 8018fe4:	eb03 0409 	add.w	r4, r3, r9
 8018fe8:	0124      	lsls	r4, r4, #4
 8018fea:	f104 0510 	add.w	r5, r4, #16
 8018fee:	4435      	add	r5, r6
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	f7e7 f92f 	bl	8000254 <strlen>
 8018ff6:	3012      	adds	r0, #18
 8018ff8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ffc:	b281      	uxth	r1, r0
 8018ffe:	2036      	movs	r0, #54	; 0x36
 8019000:	f001 fd74 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 8019004:	4680      	mov	r8, r0
 8019006:	2800      	cmp	r0, #0
 8019008:	d06d      	beq.n	80190e6 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801900a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801900c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801900e:	260c      	movs	r6, #12
    --hostname;
 8019010:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8019012:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8019014:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8019018:	9305      	str	r3, [sp, #20]
 801901a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801901e:	f7ff fefb 	bl	8018e18 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8019022:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 8019024:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8019028:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801902a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801902e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8019032:	4632      	mov	r2, r6
 8019034:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8019036:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801903a:	f002 f801 	bl	801b040 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801903e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8019040:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8019042:	2b2e      	cmp	r3, #46	; 0x2e
 8019044:	d052      	beq.n	80190ec <dns_send.isra.0+0x144>
 8019046:	2b00      	cmp	r3, #0
 8019048:	d050      	beq.n	80190ec <dns_send.isra.0+0x144>
      ++hostname;
 801904a:	463d      	mov	r5, r7
 801904c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8019050:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8019052:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8019056:	2b2e      	cmp	r3, #46	; 0x2e
 8019058:	b2e4      	uxtb	r4, r4
 801905a:	d001      	beq.n	8019060 <dns_send.isra.0+0xb8>
 801905c:	2b00      	cmp	r3, #0
 801905e:	d1f7      	bne.n	8019050 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 8019060:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8019064:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 8019066:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801906a:	4433      	add	r3, r6
 801906c:	4553      	cmp	r3, sl
 801906e:	dc37      	bgt.n	80190e0 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8019070:	4622      	mov	r2, r4
 8019072:	4631      	mov	r1, r6
 8019074:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8019076:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8019078:	f002 f8ba 	bl	801b1f0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801907c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801907e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8019080:	465a      	mov	r2, fp
 8019082:	4639      	mov	r1, r7
 8019084:	b29b      	uxth	r3, r3
 8019086:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8019088:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801908a:	f002 f83f 	bl	801b10c <pbuf_take_at>
    } while (*hostname != 0);
 801908e:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8019090:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8019092:	2a00      	cmp	r2, #0
 8019094:	d1d3      	bne.n	801903e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8019096:	4631      	mov	r1, r6
 8019098:	4640      	mov	r0, r8
 801909a:	f002 f8a9 	bl	801b1f0 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801909e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 80190a2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80190a4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80190a6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80190aa:	4640      	mov	r0, r8
 80190ac:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80190ae:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80190b2:	2204      	movs	r2, #4
 80190b4:	f002 f82a 	bl	801b10c <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 80190b8:	9b01      	ldr	r3, [sp, #4]
 80190ba:	4a16      	ldr	r2, [pc, #88]	; (8019114 <dns_send.isra.0+0x16c>)
 80190bc:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80190be:	4919      	ldr	r1, [pc, #100]	; (8019124 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 80190c0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80190c2:	4b19      	ldr	r3, [pc, #100]	; (8019128 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 80190c4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 80190c8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80190cc:	f89b 000f 	ldrb.w	r0, [fp, #15]
 80190d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80190d4:	4641      	mov	r1, r8
 80190d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80190da:	2335      	movs	r3, #53	; 0x35
 80190dc:	f006 fee2 	bl	801fea4 <udp_sendto>
    pbuf_free(p);
 80190e0:	4640      	mov	r0, r8
 80190e2:	f001 feb9 	bl	801ae58 <pbuf_free>
}
 80190e6:	b007      	add	sp, #28
 80190e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80190ec:	2300      	movs	r3, #0
      ++hostname;
 80190ee:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80190f0:	469b      	mov	fp, r3
 80190f2:	461c      	mov	r4, r3
 80190f4:	e7b9      	b.n	801906a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 80190f6:	4648      	mov	r0, r9
 80190f8:	4621      	mov	r1, r4
 80190fa:	f7ff ff03 	bl	8018f04 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80190fe:	9b01      	ldr	r3, [sp, #4]
 8019100:	444b      	add	r3, r9
 8019102:	4699      	mov	r9, r3
 8019104:	4b03      	ldr	r3, [pc, #12]	; (8019114 <dns_send.isra.0+0x16c>)
 8019106:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801910a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801910e:	b007      	add	sp, #28
 8019110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019114:	2001e814 	.word	0x2001e814
 8019118:	08042ad0 	.word	0x08042ad0
 801911c:	08042b00 	.word	0x08042b00
 8019120:	0802bdc0 	.word	0x0802bdc0
 8019124:	2001e80c 	.word	0x2001e80c
 8019128:	2001e7c8 	.word	0x2001e7c8

0801912c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801912c:	2803      	cmp	r0, #3
{
 801912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019132:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8019134:	d846      	bhi.n	80191c4 <dns_check_entry+0x98>

  switch (entry->state) {
 8019136:	4e3a      	ldr	r6, [pc, #232]	; (8019220 <dns_check_entry+0xf4>)
 8019138:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801913c:	0125      	lsls	r5, r4, #4
 801913e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8019142:	7a9b      	ldrb	r3, [r3, #10]
 8019144:	2b03      	cmp	r3, #3
 8019146:	d861      	bhi.n	801920c <dns_check_entry+0xe0>
 8019148:	e8df f003 	tbb	[pc, r3]
 801914c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8019150:	192b      	adds	r3, r5, r4
 8019152:	011b      	lsls	r3, r3, #4
 8019154:	58f2      	ldr	r2, [r6, r3]
 8019156:	2a00      	cmp	r2, #0
 8019158:	d140      	bne.n	80191dc <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801915a:	442c      	add	r4, r5
 801915c:	2300      	movs	r3, #0
 801915e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8019162:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8019164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019168:	4f2e      	ldr	r7, [pc, #184]	; (8019224 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801916a:	f00b ffd3 	bl	8025114 <rand>
 801916e:	4b2c      	ldr	r3, [pc, #176]	; (8019220 <dns_check_entry+0xf4>)
 8019170:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019172:	7a9a      	ldrb	r2, [r3, #10]
 8019174:	2a02      	cmp	r2, #2
 8019176:	d02d      	beq.n	80191d4 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019178:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801917c:	429f      	cmp	r7, r3
 801917e:	d1f8      	bne.n	8019172 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8019180:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8019182:	2202      	movs	r2, #2
      entry->tmr = 1;
 8019184:	2301      	movs	r3, #1
      err = dns_send(i);
 8019186:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8019188:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801918c:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801918e:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8019190:	81b3      	strh	r3, [r6, #12]
}
 8019192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8019196:	f7ff bf07 	b.w	8018fa8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801919a:	192a      	adds	r2, r5, r4
 801919c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 80191a0:	7b13      	ldrb	r3, [r2, #12]
 80191a2:	3b01      	subs	r3, #1
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	7313      	strb	r3, [r2, #12]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d1db      	bne.n	8019164 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80191ac:	7b53      	ldrb	r3, [r2, #13]
 80191ae:	3301      	adds	r3, #1
 80191b0:	b2db      	uxtb	r3, r3
 80191b2:	2b04      	cmp	r3, #4
 80191b4:	7353      	strb	r3, [r2, #13]
 80191b6:	d016      	beq.n	80191e6 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 80191b8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 80191ba:	4620      	mov	r0, r4
}
 80191bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80191c0:	f7ff bef2 	b.w	8018fa8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80191c4:	4b18      	ldr	r3, [pc, #96]	; (8019228 <dns_check_entry+0xfc>)
 80191c6:	f240 421c 	movw	r2, #1052	; 0x41c
 80191ca:	4918      	ldr	r1, [pc, #96]	; (801922c <dns_check_entry+0x100>)
 80191cc:	4818      	ldr	r0, [pc, #96]	; (8019230 <dns_check_entry+0x104>)
 80191ce:	f00b fefd 	bl	8024fcc <iprintf>
 80191d2:	e7b0      	b.n	8019136 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80191d4:	891a      	ldrh	r2, [r3, #8]
 80191d6:	428a      	cmp	r2, r1
 80191d8:	d1ce      	bne.n	8019178 <dns_check_entry+0x4c>
 80191da:	e7c6      	b.n	801916a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80191dc:	3a01      	subs	r2, #1
 80191de:	50f2      	str	r2, [r6, r3]
 80191e0:	2a00      	cmp	r2, #0
 80191e2:	d0ba      	beq.n	801915a <dns_check_entry+0x2e>
 80191e4:	e7be      	b.n	8019164 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80191e6:	7ad3      	ldrb	r3, [r2, #11]
 80191e8:	b913      	cbnz	r3, 80191f0 <dns_check_entry+0xc4>
 80191ea:	4b12      	ldr	r3, [pc, #72]	; (8019234 <dns_check_entry+0x108>)
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	b94b      	cbnz	r3, 8019204 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 80191f0:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80191f2:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80191f4:	2100      	movs	r1, #0
 80191f6:	f7ff fe85 	bl	8018f04 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80191fa:	2300      	movs	r3, #0
 80191fc:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8019200:	72b3      	strb	r3, [r6, #10]
            break;
 8019202:	e7af      	b.n	8019164 <dns_check_entry+0x38>
            entry->server_idx++;
 8019204:	2301      	movs	r3, #1
 8019206:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8019208:	8193      	strh	r3, [r2, #12]
 801920a:	e7d6      	b.n	80191ba <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801920c:	4b06      	ldr	r3, [pc, #24]	; (8019228 <dns_check_entry+0xfc>)
 801920e:	f240 425b 	movw	r2, #1115	; 0x45b
 8019212:	4909      	ldr	r1, [pc, #36]	; (8019238 <dns_check_entry+0x10c>)
 8019214:	4806      	ldr	r0, [pc, #24]	; (8019230 <dns_check_entry+0x104>)
}
 8019216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801921a:	f00b bed7 	b.w	8024fcc <iprintf>
 801921e:	bf00      	nop
 8019220:	2001e814 	.word	0x2001e814
 8019224:	2001ec54 	.word	0x2001ec54
 8019228:	08042ad0 	.word	0x08042ad0
 801922c:	08042b18 	.word	0x08042b18
 8019230:	0802bdc0 	.word	0x0802bdc0
 8019234:	2001e80c 	.word	0x2001e80c
 8019238:	08042b34 	.word	0x08042b34

0801923c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019240:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8019242:	8912      	ldrh	r2, [r2, #8]
{
 8019244:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8019246:	2a0f      	cmp	r2, #15
 8019248:	d805      	bhi.n	8019256 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801924a:	4620      	mov	r0, r4
 801924c:	f001 fe04 	bl	801ae58 <pbuf_free>
  return;
}
 8019250:	b00d      	add	sp, #52	; 0x34
 8019252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8019256:	4699      	mov	r9, r3
 8019258:	220c      	movs	r2, #12
 801925a:	2300      	movs	r3, #0
 801925c:	a906      	add	r1, sp, #24
 801925e:	4620      	mov	r0, r4
 8019260:	f001 fe9e 	bl	801afa0 <pbuf_copy_partial>
 8019264:	280c      	cmp	r0, #12
 8019266:	4605      	mov	r5, r0
 8019268:	d1ef      	bne.n	801924a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801926a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8019560 <dns_recv+0x324>
 801926e:	2600      	movs	r6, #0
 8019270:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8019274:	f7ff fdd0 	bl	8018e18 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019278:	4643      	mov	r3, r8
 801927a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801927c:	7a9a      	ldrb	r2, [r3, #10]
 801927e:	2a02      	cmp	r2, #2
 8019280:	d008      	beq.n	8019294 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8019282:	3601      	adds	r6, #1
 8019284:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8019288:	2e04      	cmp	r6, #4
 801928a:	d0de      	beq.n	801924a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801928c:	7a9a      	ldrb	r2, [r3, #10]
 801928e:	b2f7      	uxtb	r7, r6
 8019290:	2a02      	cmp	r2, #2
 8019292:	d1f6      	bne.n	8019282 <dns_recv+0x46>
 8019294:	891a      	ldrh	r2, [r3, #8]
 8019296:	4282      	cmp	r2, r0
 8019298:	d1f3      	bne.n	8019282 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801929a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801929e:	f7ff fdbb 	bl	8018e18 <lwip_htons>
 80192a2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 80192a4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80192a8:	f7ff fdb6 	bl	8018e18 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80192ac:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 80192b0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 80192b2:	09db      	lsrs	r3, r3, #7
 80192b4:	d0c9      	beq.n	801924a <dns_recv+0xe>
 80192b6:	f1ba 0f01 	cmp.w	sl, #1
 80192ba:	d1c6      	bne.n	801924a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 80192bc:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 80192c0:	49a5      	ldr	r1, [pc, #660]	; (8019558 <dns_recv+0x31c>)
 80192c2:	f8d9 2000 	ldr.w	r2, [r9]
 80192c6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 80192ca:	7adb      	ldrb	r3, [r3, #11]
 80192cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d1ba      	bne.n	801924a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80192d4:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80192d8:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80192dc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8019564 <dns_recv+0x328>
 80192e0:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80192e4:	f103 0210 	add.w	r2, r3, #16
 80192e8:	9301      	str	r3, [sp, #4]
 80192ea:	4442      	add	r2, r8
 80192ec:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80192f0:	462e      	mov	r6, r5
 80192f2:	4627      	mov	r7, r4
 80192f4:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 80192f6:	4631      	mov	r1, r6
 80192f8:	4638      	mov	r0, r7
 80192fa:	f001 ff69 	bl	801b1d0 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80192fe:	2800      	cmp	r0, #0
 8019300:	db2d      	blt.n	801935e <dns_recv+0x122>
 8019302:	455e      	cmp	r6, fp
 8019304:	d02b      	beq.n	801935e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8019306:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801930a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801930c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801930e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8019310:	d025      	beq.n	801935e <dns_recv+0x122>
      while (n > 0) {
 8019312:	b330      	cbz	r0, 8019362 <dns_recv+0x126>
 8019314:	46aa      	mov	sl, r5
 8019316:	182c      	adds	r4, r5, r0
 8019318:	e01b      	b.n	8019352 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801931a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801931e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019320:	f819 2000 	ldrb.w	r2, [r9, r0]
 8019324:	4601      	mov	r1, r0
        ++query;
 8019326:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019328:	f002 0203 	and.w	r2, r2, #3
 801932c:	2a01      	cmp	r2, #1
 801932e:	f819 2003 	ldrb.w	r2, [r9, r3]
 8019332:	f002 0203 	and.w	r2, r2, #3
 8019336:	bf08      	it	eq
 8019338:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801933c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801933e:	2a01      	cmp	r2, #1
 8019340:	bf08      	it	eq
 8019342:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8019344:	455e      	cmp	r6, fp
        response_offset++;
 8019346:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8019348:	d009      	beq.n	801935e <dns_recv+0x122>
 801934a:	4299      	cmp	r1, r3
 801934c:	d107      	bne.n	801935e <dns_recv+0x122>
      while (n > 0) {
 801934e:	4554      	cmp	r4, sl
 8019350:	d007      	beq.n	8019362 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8019352:	4631      	mov	r1, r6
 8019354:	4638      	mov	r0, r7
 8019356:	f001 ff3b 	bl	801b1d0 <pbuf_try_get_at>
        if (c < 0) {
 801935a:	1e03      	subs	r3, r0, #0
 801935c:	dadd      	bge.n	801931a <dns_recv+0xde>
 801935e:	463c      	mov	r4, r7
 8019360:	e773      	b.n	801924a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 8019362:	4631      	mov	r1, r6
 8019364:	4638      	mov	r0, r7
 8019366:	f001 ff33 	bl	801b1d0 <pbuf_try_get_at>
    if (n < 0) {
 801936a:	2800      	cmp	r0, #0
      ++query;
 801936c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8019370:	dbf5      	blt.n	801935e <dns_recv+0x122>
  } while (n != 0);
 8019372:	d1c0      	bne.n	80192f6 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 8019374:	4635      	mov	r5, r6
 8019376:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801937a:	463c      	mov	r4, r7
 801937c:	9e03      	ldr	r6, [sp, #12]
 801937e:	454d      	cmp	r5, r9
 8019380:	9f02      	ldr	r7, [sp, #8]
 8019382:	f43f af62 	beq.w	801924a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8019386:	f105 0a01 	add.w	sl, r5, #1
 801938a:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801938e:	45ca      	cmp	sl, r9
 8019390:	f43f af5b 	beq.w	801924a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8019394:	4653      	mov	r3, sl
 8019396:	2204      	movs	r2, #4
 8019398:	a904      	add	r1, sp, #16
 801939a:	4620      	mov	r0, r4
 801939c:	f001 fe00 	bl	801afa0 <pbuf_copy_partial>
 80193a0:	2804      	cmp	r0, #4
 80193a2:	f47f af52 	bne.w	801924a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 80193a6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80193aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80193ae:	f47f af4c 	bne.w	801924a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 80193b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80193b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80193ba:	f47f af46 	bne.w	801924a <dns_recv+0xe>
 80193be:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80193c2:	459a      	cmp	sl, r3
 80193c4:	f63f af41 	bhi.w	801924a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80193c8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80193cc:	071b      	lsls	r3, r3, #28
 80193ce:	d017      	beq.n	8019400 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80193d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80193d4:	fb03 8306 	mla	r3, r3, r6, r8
 80193d8:	7adb      	ldrb	r3, [r3, #11]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f040 80ae 	bne.w	801953c <dns_recv+0x300>
 80193e0:	4b5d      	ldr	r3, [pc, #372]	; (8019558 <dns_recv+0x31c>)
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	f000 80a9 	beq.w	801953c <dns_recv+0x300>
            entry->tmr     = 1;
 80193ea:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 80193ee:	4638      	mov	r0, r7
            entry->tmr     = 1;
 80193f0:	fb03 8606 	mla	r6, r3, r6, r8
 80193f4:	f240 3301 	movw	r3, #769	; 0x301
 80193f8:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 80193fa:	f7ff fe97 	bl	801912c <dns_check_entry>
            goto ignore_packet;
 80193fe:	e724      	b.n	801924a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8019400:	3505      	adds	r5, #5
 8019402:	f8dd a000 	ldr.w	sl, [sp]
 8019406:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8019408:	f1ba 0f00 	cmp.w	sl, #0
 801940c:	f000 8096 	beq.w	801953c <dns_recv+0x300>
 8019410:	8923      	ldrh	r3, [r4, #8]
 8019412:	42ab      	cmp	r3, r5
 8019414:	d80b      	bhi.n	801942e <dns_recv+0x1f2>
 8019416:	e091      	b.n	801953c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 8019418:	8922      	ldrh	r2, [r4, #8]
 801941a:	4293      	cmp	r3, r2
 801941c:	f6bf af15 	bge.w	801924a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 8019420:	4629      	mov	r1, r5
 8019422:	f001 fed5 	bl	801b1d0 <pbuf_try_get_at>
    if (n < 0) {
 8019426:	2800      	cmp	r0, #0
 8019428:	f6ff af0f 	blt.w	801924a <dns_recv+0xe>
  } while (n != 0);
 801942c:	d017      	beq.n	801945e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801942e:	4629      	mov	r1, r5
 8019430:	4620      	mov	r0, r4
 8019432:	f001 fecd 	bl	801b1d0 <pbuf_try_get_at>
 8019436:	f105 0b01 	add.w	fp, r5, #1
 801943a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801943c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801943e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8019442:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8019444:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8019448:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801944a:	f6ff aefe 	blt.w	801924a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801944e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8019450:	f1bb 0f00 	cmp.w	fp, #0
 8019454:	f43f aef9 	beq.w	801924a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8019458:	2ac0      	cmp	r2, #192	; 0xc0
 801945a:	d1dd      	bne.n	8019418 <dns_recv+0x1dc>
 801945c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801945e:	454d      	cmp	r5, r9
 8019460:	f43f aef3 	beq.w	801924a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8019464:	f105 0b01 	add.w	fp, r5, #1
 8019468:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801946c:	45cb      	cmp	fp, r9
 801946e:	f43f aeec 	beq.w	801924a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8019472:	465b      	mov	r3, fp
 8019474:	220a      	movs	r2, #10
 8019476:	a909      	add	r1, sp, #36	; 0x24
 8019478:	4620      	mov	r0, r4
 801947a:	f001 fd91 	bl	801afa0 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801947e:	280a      	cmp	r0, #10
 8019480:	f47f aee3 	bne.w	801924a <dns_recv+0xe>
 8019484:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8019488:	459b      	cmp	fp, r3
 801948a:	f63f aede 	bhi.w	801924a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801948e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019492:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8019494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019498:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801949a:	d013      	beq.n	80194c4 <dns_recv+0x288>
 801949c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80194a0:	f7ff fcba 	bl	8018e18 <lwip_htons>
 80194a4:	4428      	add	r0, r5
 80194a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80194aa:	f6bf aece 	bge.w	801924a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80194ae:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 80194b2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80194b6:	f7ff fcaf 	bl	8018e18 <lwip_htons>
 80194ba:	4405      	add	r5, r0
            --nanswers;
 80194bc:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80194c0:	b2ad      	uxth	r5, r5
            --nanswers;
 80194c2:	e7a1      	b.n	8019408 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80194c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80194c8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80194cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194d0:	d1e6      	bne.n	80194a0 <dns_recv+0x264>
 80194d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80194d6:	d1e3      	bne.n	80194a0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 80194d8:	462b      	mov	r3, r5
 80194da:	2204      	movs	r2, #4
 80194dc:	a905      	add	r1, sp, #20
 80194de:	4620      	mov	r0, r4
 80194e0:	f001 fd5e 	bl	801afa0 <pbuf_copy_partial>
 80194e4:	2804      	cmp	r0, #4
 80194e6:	f47f aeb0 	bne.w	801924a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80194ea:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 80194ee:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80194f0:	fb03 f606 	mul.w	r6, r3, r6
 80194f4:	9b05      	ldr	r3, [sp, #20]
 80194f6:	eb08 0406 	add.w	r4, r8, r6
 80194fa:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 80194fc:	f001 fcac 	bl	801ae58 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019500:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019502:	f7ff fc8d 	bl	8018e20 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8019506:	4a15      	ldr	r2, [pc, #84]	; (801955c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019508:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801950a:	9901      	ldr	r1, [sp, #4]
 801950c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801950e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019510:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 8019514:	bf28      	it	cs
 8019516:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019518:	4441      	add	r1, r8
  entry->ttl = ttl;
 801951a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801951e:	2303      	movs	r3, #3
 8019520:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 8019522:	f7ff fcef 	bl	8018f04 <dns_call_found>
  if (entry->ttl == 0) {
 8019526:	f858 3006 	ldr.w	r3, [r8, r6]
 801952a:	2b00      	cmp	r3, #0
 801952c:	f47f ae90 	bne.w	8019250 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8019530:	7aa2      	ldrb	r2, [r4, #10]
 8019532:	2a03      	cmp	r2, #3
 8019534:	f47f ae8c 	bne.w	8019250 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8019538:	72a3      	strb	r3, [r4, #10]
                  return;
 801953a:	e689      	b.n	8019250 <dns_recv+0x14>
        pbuf_free(p);
 801953c:	4620      	mov	r0, r4
 801953e:	f001 fc8b 	bl	801ae58 <pbuf_free>
        dns_call_found(i, NULL);
 8019542:	2100      	movs	r1, #0
 8019544:	4638      	mov	r0, r7
 8019546:	f7ff fcdd 	bl	8018f04 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801954a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801954e:	2200      	movs	r2, #0
 8019550:	fb03 8606 	mla	r6, r3, r6, r8
 8019554:	72b2      	strb	r2, [r6, #10]
        return;
 8019556:	e67b      	b.n	8019250 <dns_recv+0x14>
 8019558:	2001e80c 	.word	0x2001e80c
 801955c:	00093a80 	.word	0x00093a80
 8019560:	2001e814 	.word	0x2001e814
 8019564:	08045505 	.word	0x08045505

08019568 <dns_init>:
}
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop

0801956c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801956c:	2801      	cmp	r0, #1
 801956e:	d900      	bls.n	8019572 <dns_setserver+0x6>
}
 8019570:	4770      	bx	lr
    if (dnsserver != NULL) {
 8019572:	b121      	cbz	r1, 801957e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8019574:	4b05      	ldr	r3, [pc, #20]	; (801958c <dns_setserver+0x20>)
 8019576:	680a      	ldr	r2, [r1, #0]
 8019578:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801957c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801957e:	4a04      	ldr	r2, [pc, #16]	; (8019590 <dns_setserver+0x24>)
 8019580:	4b02      	ldr	r3, [pc, #8]	; (801958c <dns_setserver+0x20>)
 8019582:	6812      	ldr	r2, [r2, #0]
 8019584:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8019588:	4770      	bx	lr
 801958a:	bf00      	nop
 801958c:	2001e80c 	.word	0x2001e80c
 8019590:	080452a8 	.word	0x080452a8

08019594 <dns_tmr>:
{
 8019594:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8019596:	2000      	movs	r0, #0
 8019598:	f7ff fdc8 	bl	801912c <dns_check_entry>
 801959c:	2001      	movs	r0, #1
 801959e:	f7ff fdc5 	bl	801912c <dns_check_entry>
 80195a2:	2002      	movs	r0, #2
 80195a4:	f7ff fdc2 	bl	801912c <dns_check_entry>
 80195a8:	2003      	movs	r0, #3
}
 80195aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80195ae:	f7ff bdbd 	b.w	801912c <dns_check_entry>
 80195b2:	bf00      	nop

080195b4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80195b4:	2900      	cmp	r1, #0
 80195b6:	f000 812e 	beq.w	8019816 <dns_gethostbyname_addrtype+0x262>
{
 80195ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80195be:	fab0 f780 	clz	r7, r0
{
 80195c2:	b083      	sub	sp, #12
 80195c4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 80195c6:	097f      	lsrs	r7, r7, #5
 80195c8:	2800      	cmp	r0, #0
 80195ca:	f000 8103 	beq.w	80197d4 <dns_gethostbyname_addrtype+0x220>
 80195ce:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 80195d0:	7803      	ldrb	r3, [r0, #0]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	f000 80fe 	beq.w	80197d4 <dns_gethostbyname_addrtype+0x220>
 80195d8:	4615      	mov	r5, r2
 80195da:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80195dc:	f7e6 fe3a 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80195e0:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 80195e2:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80195e4:	f200 80f6 	bhi.w	80197d4 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 80195e8:	4641      	mov	r1, r8
 80195ea:	4630      	mov	r0, r6
 80195ec:	f009 fa1c 	bl	8022a28 <ip4addr_aton>
 80195f0:	b118      	cbz	r0, 80195fa <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 80195f2:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80195f4:	b003      	add	sp, #12
 80195f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195fa:	4f88      	ldr	r7, [pc, #544]	; (801981c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 80195fc:	4604      	mov	r4, r0
 80195fe:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019600:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 8019604:	2b03      	cmp	r3, #3
 8019606:	d03a      	beq.n	801967e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019608:	3401      	adds	r4, #1
 801960a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801960e:	2c04      	cmp	r4, #4
 8019610:	d1f6      	bne.n	8019600 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8019612:	4b83      	ldr	r3, [pc, #524]	; (8019820 <dns_gethostbyname_addrtype+0x26c>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	f000 80f6 	beq.w	8019808 <dns_gethostbyname_addrtype+0x254>
 801961c:	2400      	movs	r4, #0
 801961e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801982c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019622:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 8019626:	fa5f f884 	uxtb.w	r8, r4
 801962a:	2b02      	cmp	r3, #2
 801962c:	d040      	beq.n	80196b0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801962e:	3401      	adds	r4, #1
 8019630:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8019634:	2c04      	cmp	r4, #4
 8019636:	d1f4      	bne.n	8019622 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8019638:	4a7a      	ldr	r2, [pc, #488]	; (8019824 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801963a:	4623      	mov	r3, r4
 801963c:	4f7a      	ldr	r7, [pc, #488]	; (8019828 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801963e:	2400      	movs	r4, #0
 8019640:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 8019642:	46a4      	mov	ip, r4
 8019644:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 8019646:	7a90      	ldrb	r0, [r2, #10]
 8019648:	fa5f f884 	uxtb.w	r8, r4
 801964c:	2800      	cmp	r0, #0
 801964e:	d041      	beq.n	80196d4 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8019650:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019652:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 8019656:	d023      	beq.n	80196a0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019658:	2c04      	cmp	r4, #4
 801965a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801965e:	d1f2      	bne.n	8019646 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8019660:	2b04      	cmp	r3, #4
 8019662:	d007      	beq.n	8019674 <dns_gethostbyname_addrtype+0xc0>
 8019664:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8019668:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801966c:	7aa2      	ldrb	r2, [r4, #10]
 801966e:	2a03      	cmp	r2, #3
 8019670:	f000 80ae 	beq.w	80197d0 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 8019674:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019678:	b003      	add	sp, #12
 801967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801967e:	4651      	mov	r1, sl
 8019680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019684:	4630      	mov	r0, r6
 8019686:	f7ff fc1f 	bl	8018ec8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801968a:	2800      	cmp	r0, #0
 801968c:	d1bc      	bne.n	8019608 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801968e:	4b66      	ldr	r3, [pc, #408]	; (8019828 <dns_gethostbyname_addrtype+0x274>)
 8019690:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019694:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8019698:	6863      	ldr	r3, [r4, #4]
 801969a:	f8c8 3000 	str.w	r3, [r8]
 801969e:	e7a9      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80196a0:	7b90      	ldrb	r0, [r2, #14]
 80196a2:	1a08      	subs	r0, r1, r0
 80196a4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 80196a6:	4560      	cmp	r0, ip
 80196a8:	d9d6      	bls.n	8019658 <dns_gethostbyname_addrtype+0xa4>
 80196aa:	4643      	mov	r3, r8
 80196ac:	4684      	mov	ip, r0
 80196ae:	e7d3      	b.n	8019658 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80196b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80196b4:	4639      	mov	r1, r7
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff fc06 	bl	8018ec8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80196bc:	2800      	cmp	r0, #0
 80196be:	d1b6      	bne.n	801962e <dns_gethostbyname_addrtype+0x7a>
 80196c0:	4b5a      	ldr	r3, [pc, #360]	; (801982c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 80196c2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80196c4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 80196c6:	2a00      	cmp	r2, #0
 80196c8:	f000 8091 	beq.w	80197ee <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80196cc:	3001      	adds	r0, #1
 80196ce:	2804      	cmp	r0, #4
 80196d0:	d1f7      	bne.n	80196c2 <dns_gethostbyname_addrtype+0x10e>
 80196d2:	e7ac      	b.n	801962e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 80196d4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80196d8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80196dc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801982c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 80196e0:	2700      	movs	r7, #0
 80196e2:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 80196e4:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80196e6:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 80196e8:	b12b      	cbz	r3, 80196f6 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80196ea:	3701      	adds	r7, #1
 80196ec:	2f04      	cmp	r7, #4
 80196ee:	d1f9      	bne.n	80196e4 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 80196f0:	f04f 30ff 	mov.w	r0, #4294967295
 80196f4:	e7c0      	b.n	8019678 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 80196f6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 80196fa:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 80196fc:	f104 0010 	add.w	r0, r4, #16
 8019700:	4631      	mov	r1, r6
  req->found = found;
 8019702:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 8019706:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801970a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801970c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 8019710:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 8019714:	2201      	movs	r2, #1
 8019716:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 8019718:	464a      	mov	r2, r9
 801971a:	f00a fc93 	bl	8024044 <memcpy>
  entry->name[namelen] = 0;
 801971e:	44a1      	add	r9, r4
 8019720:	9b01      	ldr	r3, [sp, #4]
 8019722:	461d      	mov	r5, r3
 8019724:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8019728:	007b      	lsls	r3, r7, #1
 801972a:	9301      	str	r3, [sp, #4]
 801972c:	4b40      	ldr	r3, [pc, #256]	; (8019830 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801972e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019732:	b2ee      	uxtb	r6, r5
 8019734:	b30a      	cbz	r2, 801977a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8019736:	3501      	adds	r5, #1
 8019738:	2d04      	cmp	r5, #4
 801973a:	d1f8      	bne.n	801972e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801973c:	483d      	ldr	r0, [pc, #244]	; (8019834 <dns_gethostbyname_addrtype+0x280>)
 801973e:	2304      	movs	r3, #4
 8019740:	7806      	ldrb	r6, [r0, #0]
 8019742:	3601      	adds	r6, #1
 8019744:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019746:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8019748:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801974a:	d901      	bls.n	8019750 <dns_gethostbyname_addrtype+0x19c>
 801974c:	2600      	movs	r6, #0
      idx = 0;
 801974e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8019750:	4d37      	ldr	r5, [pc, #220]	; (8019830 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019752:	1c71      	adds	r1, r6, #1
 8019754:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8019756:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801975a:	2a00      	cmp	r2, #0
 801975c:	d13d      	bne.n	80197da <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801975e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019762:	b2ce      	uxtb	r6, r1
 8019764:	d1ef      	bne.n	8019746 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8019766:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8019768:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801976c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801976e:	443a      	add	r2, r7
 8019770:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8019774:	2304      	movs	r3, #4
 8019776:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8019778:	e73c      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801977a:	202e      	movs	r0, #46	; 0x2e
 801977c:	f006 fc72 	bl	8020064 <udp_new_ip_type>
  if (pcb == NULL) {
 8019780:	4681      	mov	r9, r0
 8019782:	2800      	cmp	r0, #0
 8019784:	d043      	beq.n	801980e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019786:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801983c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801978a:	f00b fcc3 	bl	8025114 <rand>
 801978e:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8019790:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8019794:	d3f9      	bcc.n	801978a <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019796:	4659      	mov	r1, fp
 8019798:	4648      	mov	r0, r9
 801979a:	f006 f9ff 	bl	801fb9c <udp_bind>
  } while (err == ERR_USE);
 801979e:	f110 0f08 	cmn.w	r0, #8
 80197a2:	d0f2      	beq.n	801978a <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 80197a4:	b9d8      	cbnz	r0, 80197de <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 80197a6:	4602      	mov	r2, r0
 80197a8:	4923      	ldr	r1, [pc, #140]	; (8019838 <dns_gethostbyname_addrtype+0x284>)
 80197aa:	4648      	mov	r0, r9
 80197ac:	f006 fc0a 	bl	801ffc4 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 80197b0:	4b1f      	ldr	r3, [pc, #124]	; (8019830 <dns_gethostbyname_addrtype+0x27c>)
 80197b2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 80197b6:	4b1f      	ldr	r3, [pc, #124]	; (8019834 <dns_gethostbyname_addrtype+0x280>)
 80197b8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 80197ba:	4a1a      	ldr	r2, [pc, #104]	; (8019824 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 80197bc:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 80197be:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 80197c0:	7813      	ldrb	r3, [r2, #0]
 80197c2:	3301      	adds	r3, #1
 80197c4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 80197c6:	f7ff fcb1 	bl	801912c <dns_check_entry>
  return ERR_INPROGRESS;
 80197ca:	f06f 0004 	mvn.w	r0, #4
 80197ce:	e711      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 80197d0:	4698      	mov	r8, r3
 80197d2:	e783      	b.n	80196dc <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 80197d4:	f06f 000f 	mvn.w	r0, #15
 80197d8:	e70c      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 80197da:	7006      	strb	r6, [r0, #0]
      return idx;
 80197dc:	e7ed      	b.n	80197ba <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 80197de:	4648      	mov	r0, r9
 80197e0:	f006 fc02 	bl	801ffe8 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 80197e4:	2300      	movs	r3, #0
 80197e6:	4a12      	ldr	r2, [pc, #72]	; (8019830 <dns_gethostbyname_addrtype+0x27c>)
 80197e8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80197ec:	e7a6      	b.n	801973c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 80197ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80197f2:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 80197f6:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 80197fa:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 80197fe:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8019802:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8019806:	e6f5      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8019808:	f06f 0005 	mvn.w	r0, #5
 801980c:	e6f2      	b.n	80195f4 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801980e:	4b08      	ldr	r3, [pc, #32]	; (8019830 <dns_gethostbyname_addrtype+0x27c>)
 8019810:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019814:	e792      	b.n	801973c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8019816:	f06f 000f 	mvn.w	r0, #15
}
 801981a:	4770      	bx	lr
 801981c:	2001e824 	.word	0x2001e824
 8019820:	2001e80c 	.word	0x2001e80c
 8019824:	2001e808 	.word	0x2001e808
 8019828:	2001e814 	.word	0x2001e814
 801982c:	2001e7d8 	.word	0x2001e7d8
 8019830:	2001e7c8 	.word	0x2001e7c8
 8019834:	2001e7c4 	.word	0x2001e7c4
 8019838:	0801923d 	.word	0x0801923d
 801983c:	080452a8 	.word	0x080452a8

08019840 <dns_gethostbyname>:
{
 8019840:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019842:	2400      	movs	r4, #0
{
 8019844:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019846:	9400      	str	r4, [sp, #0]
 8019848:	f7ff feb4 	bl	80195b4 <dns_gethostbyname_addrtype>
}
 801984c:	b002      	add	sp, #8
 801984e:	bd10      	pop	{r4, pc}

08019850 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8019850:	2300      	movs	r3, #0
{
 8019852:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8019854:	4299      	cmp	r1, r3
{
 8019856:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8019858:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801985c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8019860:	dd05      	ble.n	801986e <lwip_standard_chksum+0x1e>
 8019862:	b124      	cbz	r4, 801986e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8019864:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8019868:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801986a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801986e:	2901      	cmp	r1, #1
 8019870:	dd28      	ble.n	80198c4 <lwip_standard_chksum+0x74>
 8019872:	3902      	subs	r1, #2
  u32_t sum = 0;
 8019874:	2300      	movs	r3, #0
 8019876:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801987a:	f10e 0c01 	add.w	ip, lr, #1
 801987e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8019882:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8019886:	4584      	cmp	ip, r0
    sum += *ps++;
 8019888:	4413      	add	r3, r2
  while (len > 1) {
 801988a:	d1fa      	bne.n	8019882 <lwip_standard_chksum+0x32>
    len -= 2;
 801988c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8019890:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8019894:	2901      	cmp	r1, #1
 8019896:	d103      	bne.n	80198a0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8019898:	f89c 2000 	ldrb.w	r2, [ip]
 801989c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80198a0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80198a4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80198a6:	b298      	uxth	r0, r3
 80198a8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80198ac:	b298      	uxth	r0, r3
 80198ae:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80198b2:	b124      	cbz	r4, 80198be <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 80198b4:	0203      	lsls	r3, r0, #8
 80198b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80198be:	b280      	uxth	r0, r0
 80198c0:	b002      	add	sp, #8
 80198c2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 80198c4:	4684      	mov	ip, r0
  u32_t sum = 0;
 80198c6:	2300      	movs	r3, #0
 80198c8:	e7e4      	b.n	8019894 <lwip_standard_chksum+0x44>
 80198ca:	bf00      	nop

080198cc <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80198cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d0:	4688      	mov	r8, r1
 80198d2:	4617      	mov	r7, r2
 80198d4:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80198d6:	b1f8      	cbz	r0, 8019918 <inet_cksum_pseudo_base+0x4c>
 80198d8:	4605      	mov	r5, r0
  int swapped = 0;
 80198da:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80198dc:	8969      	ldrh	r1, [r5, #10]
 80198de:	6868      	ldr	r0, [r5, #4]
 80198e0:	f7ff ffb6 	bl	8019850 <lwip_standard_chksum>
 80198e4:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80198e6:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 80198e8:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 80198ea:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 80198ee:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80198f2:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80198f6:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 80198fa:	d004      	beq.n	8019906 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 80198fc:	b29b      	uxth	r3, r3
 80198fe:	f086 0601 	eor.w	r6, r6, #1
 8019902:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019906:	682d      	ldr	r5, [r5, #0]
 8019908:	2d00      	cmp	r5, #0
 801990a:	d1e7      	bne.n	80198dc <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801990c:	b126      	cbz	r6, 8019918 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801990e:	0222      	lsls	r2, r4, #8
 8019910:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019914:	b292      	uxth	r2, r2
 8019916:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8019918:	4640      	mov	r0, r8
 801991a:	f7ff fa7d 	bl	8018e18 <lwip_htons>
 801991e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8019920:	4638      	mov	r0, r7
 8019922:	f7ff fa79 	bl	8018e18 <lwip_htons>
 8019926:	4428      	add	r0, r5
 8019928:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801992a:	b2a0      	uxth	r0, r4
 801992c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8019930:	b2a0      	uxth	r0, r4
 8019932:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8019936:	43c0      	mvns	r0, r0
}
 8019938:	b280      	uxth	r0, r0
 801993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801993e:	bf00      	nop

08019940 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8019940:	b430      	push	{r4, r5}
 8019942:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8019944:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8019946:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8019948:	0c23      	lsrs	r3, r4, #16
 801994a:	fa13 f384 	uxtah	r3, r3, r4
 801994e:	fa13 f385 	uxtah	r3, r3, r5
 8019952:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8019956:	b29c      	uxth	r4, r3
 8019958:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801995c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801995e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8019962:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019964:	f7ff bfb2 	b.w	80198cc <inet_cksum_pseudo_base>

08019968 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019968:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801996a:	f7ff ff71 	bl	8019850 <lwip_standard_chksum>
 801996e:	43c0      	mvns	r0, r0
}
 8019970:	b280      	uxth	r0, r0
 8019972:	bd08      	pop	{r3, pc}

08019974 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8019974:	b338      	cbz	r0, 80199c6 <inet_chksum_pbuf+0x52>
{
 8019976:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8019978:	2600      	movs	r6, #0
 801997a:	4605      	mov	r5, r0
  acc = 0;
 801997c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801997e:	8969      	ldrh	r1, [r5, #10]
 8019980:	6868      	ldr	r0, [r5, #4]
 8019982:	f7ff ff65 	bl	8019850 <lwip_standard_chksum>
 8019986:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019988:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801998a:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 801998c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8019990:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019994:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019998:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801999c:	d004      	beq.n	80199a8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 801999e:	b29b      	uxth	r3, r3
 80199a0:	f086 0601 	eor.w	r6, r6, #1
 80199a4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80199a8:	682d      	ldr	r5, [r5, #0]
 80199aa:	2d00      	cmp	r5, #0
 80199ac:	d1e7      	bne.n	801997e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80199ae:	b13e      	cbz	r6, 80199c0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80199b0:	0220      	lsls	r0, r4, #8
 80199b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80199b6:	b280      	uxth	r0, r0
 80199b8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80199ba:	43c0      	mvns	r0, r0
 80199bc:	b280      	uxth	r0, r0
}
 80199be:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 80199c0:	43e0      	mvns	r0, r4
 80199c2:	b280      	uxth	r0, r0
}
 80199c4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 80199c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80199ca:	4770      	bx	lr

080199cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80199cc:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80199ce:	f009 fe0d 	bl	80235ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80199d2:	f000 f975 	bl	8019cc0 <mem_init>
  memp_init();
 80199d6:	f000 fcf9 	bl	801a3cc <memp_init>
  pbuf_init();
  netif_init();
 80199da:	f000 fdbd 	bl	801a558 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80199de:	f005 ffd3 	bl	801f988 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80199e2:	f001 fd5f 	bl	801b4a4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80199e6:	f7ff fdbf 	bl	8019568 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80199ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80199ee:	f005 bf23 	b.w	801f838 <sys_timeouts_init>
 80199f2:	bf00      	nop

080199f4 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80199f4:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 80199f8:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 80199fa:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80199fe:	4299      	cmp	r1, r3
 8019a00:	d81b      	bhi.n	8019a3a <mem_link_valid+0x46>
 8019a02:	459c      	cmp	ip, r3
 8019a04:	bf94      	ite	ls
 8019a06:	2200      	movls	r2, #0
 8019a08:	2201      	movhi	r2, #1
 8019a0a:	b9b2      	cbnz	r2, 8019a3a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 8019a0c:	4b0f      	ldr	r3, [pc, #60]	; (8019a4c <mem_link_valid+0x58>)
{
 8019a0e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8019a10:	681c      	ldr	r4, [r3, #0]
 8019a12:	1b03      	subs	r3, r0, r4
 8019a14:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019a16:	4299      	cmp	r1, r3
 8019a18:	d002      	beq.n	8019a20 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019a1a:	5a61      	ldrh	r1, [r4, r1]
 8019a1c:	4299      	cmp	r1, r3
 8019a1e:	d10e      	bne.n	8019a3e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019a20:	4a0b      	ldr	r2, [pc, #44]	; (8019a50 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8019a22:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019a24:	6812      	ldr	r2, [r2, #0]
 8019a26:	42a2      	cmp	r2, r4
 8019a28:	d00d      	beq.n	8019a46 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019a2a:	8860      	ldrh	r0, [r4, #2]
 8019a2c:	1ac0      	subs	r0, r0, r3
 8019a2e:	fab0 f080 	clz	r0, r0
 8019a32:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8019a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a38:	4770      	bx	lr
    return 0;
 8019a3a:	2000      	movs	r0, #0
}
 8019a3c:	4770      	bx	lr
    return 0;
 8019a3e:	4610      	mov	r0, r2
}
 8019a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a44:	4770      	bx	lr
  return 1;
 8019a46:	2001      	movs	r0, #1
 8019a48:	e7f4      	b.n	8019a34 <mem_link_valid+0x40>
 8019a4a:	bf00      	nop
 8019a4c:	2001ec78 	.word	0x2001ec78
 8019a50:	2001ec7c 	.word	0x2001ec7c

08019a54 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8019a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8019a58:	4f5f      	ldr	r7, [pc, #380]	; (8019bd8 <mem_sanity+0x184>)
 8019a5a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8019a5c:	7935      	ldrb	r5, [r6, #4]
 8019a5e:	2d01      	cmp	r5, #1
 8019a60:	d907      	bls.n	8019a72 <mem_sanity+0x1e>
 8019a62:	4b5e      	ldr	r3, [pc, #376]	; (8019bdc <mem_sanity+0x188>)
 8019a64:	f240 223f 	movw	r2, #575	; 0x23f
 8019a68:	495d      	ldr	r1, [pc, #372]	; (8019be0 <mem_sanity+0x18c>)
 8019a6a:	485e      	ldr	r0, [pc, #376]	; (8019be4 <mem_sanity+0x190>)
 8019a6c:	f00b faae 	bl	8024fcc <iprintf>
  last_used = mem->used;
 8019a70:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019a72:	8873      	ldrh	r3, [r6, #2]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	f040 80a7 	bne.w	8019bc8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019a7a:	8834      	ldrh	r4, [r6, #0]
 8019a7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8019a80:	429c      	cmp	r4, r3
 8019a82:	f200 8098 	bhi.w	8019bb6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8019a8a:	429c      	cmp	r4, r3
 8019a8c:	d961      	bls.n	8019b52 <mem_sanity+0xfe>
 8019a8e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8019c00 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019a92:	f8df a148 	ldr.w	sl, [pc, #328]	; 8019bdc <mem_sanity+0x188>
 8019a96:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8019c04 <mem_sanity+0x1b0>
 8019a9a:	4e52      	ldr	r6, [pc, #328]	; (8019be4 <mem_sanity+0x190>)
 8019a9c:	e012      	b.n	8019ac4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019a9e:	2b01      	cmp	r3, #1
 8019aa0:	d006      	beq.n	8019ab0 <mem_sanity+0x5c>
 8019aa2:	4653      	mov	r3, sl
 8019aa4:	f240 2251 	movw	r2, #593	; 0x251
 8019aa8:	494f      	ldr	r1, [pc, #316]	; (8019be8 <mem_sanity+0x194>)
 8019aaa:	4630      	mov	r0, r6
 8019aac:	f00b fa8e 	bl	8024fcc <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	f7ff ff9f 	bl	80199f4 <mem_link_valid>
 8019ab6:	b380      	cbz	r0, 8019b1a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8019abc:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8019abe:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8019ac0:	42a3      	cmp	r3, r4
 8019ac2:	d246      	bcs.n	8019b52 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8019ac4:	f8d8 2000 	ldr.w	r2, [r8]
 8019ac8:	42a2      	cmp	r2, r4
 8019aca:	d942      	bls.n	8019b52 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019acc:	1ce2      	adds	r2, r4, #3
 8019ace:	f022 0203 	bic.w	r2, r2, #3
 8019ad2:	4294      	cmp	r4, r2
 8019ad4:	d006      	beq.n	8019ae4 <mem_sanity+0x90>
 8019ad6:	4653      	mov	r3, sl
 8019ad8:	f240 2249 	movw	r2, #585	; 0x249
 8019adc:	4649      	mov	r1, r9
 8019ade:	4630      	mov	r0, r6
 8019ae0:	f00b fa74 	bl	8024fcc <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019ae4:	8862      	ldrh	r2, [r4, #2]
 8019ae6:	f242 7310 	movw	r3, #10000	; 0x2710
 8019aea:	429a      	cmp	r2, r3
 8019aec:	d81d      	bhi.n	8019b2a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019aee:	8822      	ldrh	r2, [r4, #0]
 8019af0:	f242 7310 	movw	r3, #10000	; 0x2710
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d824      	bhi.n	8019b42 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019af8:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8019afa:	2d00      	cmp	r5, #0
 8019afc:	d0cf      	beq.n	8019a9e <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8019afe:	2b01      	cmp	r3, #1
 8019b00:	d9d6      	bls.n	8019ab0 <mem_sanity+0x5c>
 8019b02:	4653      	mov	r3, sl
 8019b04:	f240 2253 	movw	r2, #595	; 0x253
 8019b08:	4938      	ldr	r1, [pc, #224]	; (8019bec <mem_sanity+0x198>)
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	f00b fa5e 	bl	8024fcc <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019b10:	4620      	mov	r0, r4
 8019b12:	f7ff ff6f 	bl	80199f4 <mem_link_valid>
 8019b16:	2800      	cmp	r0, #0
 8019b18:	d1ce      	bne.n	8019ab8 <mem_sanity+0x64>
 8019b1a:	4653      	mov	r3, sl
 8019b1c:	f240 2256 	movw	r2, #598	; 0x256
 8019b20:	4933      	ldr	r1, [pc, #204]	; (8019bf0 <mem_sanity+0x19c>)
 8019b22:	4630      	mov	r0, r6
 8019b24:	f00b fa52 	bl	8024fcc <iprintf>
 8019b28:	e7c6      	b.n	8019ab8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019b2a:	4653      	mov	r3, sl
 8019b2c:	f240 224a 	movw	r2, #586	; 0x24a
 8019b30:	4930      	ldr	r1, [pc, #192]	; (8019bf4 <mem_sanity+0x1a0>)
 8019b32:	4630      	mov	r0, r6
 8019b34:	f00b fa4a 	bl	8024fcc <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019b38:	8822      	ldrh	r2, [r4, #0]
 8019b3a:	f242 7310 	movw	r3, #10000	; 0x2710
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	d9da      	bls.n	8019af8 <mem_sanity+0xa4>
 8019b42:	4653      	mov	r3, sl
 8019b44:	f240 224b 	movw	r2, #587	; 0x24b
 8019b48:	492b      	ldr	r1, [pc, #172]	; (8019bf8 <mem_sanity+0x1a4>)
 8019b4a:	4630      	mov	r0, r6
 8019b4c:	f00b fa3e 	bl	8024fcc <iprintf>
 8019b50:	e7d2      	b.n	8019af8 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8019b52:	f242 7210 	movw	r2, #10000	; 0x2710
 8019b56:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8019b58:	4294      	cmp	r4, r2
 8019b5a:	d006      	beq.n	8019b6a <mem_sanity+0x116>
 8019b5c:	4b1f      	ldr	r3, [pc, #124]	; (8019bdc <mem_sanity+0x188>)
 8019b5e:	f240 225b 	movw	r2, #603	; 0x25b
 8019b62:	4926      	ldr	r1, [pc, #152]	; (8019bfc <mem_sanity+0x1a8>)
 8019b64:	481f      	ldr	r0, [pc, #124]	; (8019be4 <mem_sanity+0x190>)
 8019b66:	f00b fa31 	bl	8024fcc <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8019b6a:	7923      	ldrb	r3, [r4, #4]
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d006      	beq.n	8019b7e <mem_sanity+0x12a>
 8019b70:	4b1a      	ldr	r3, [pc, #104]	; (8019bdc <mem_sanity+0x188>)
 8019b72:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8019b76:	491a      	ldr	r1, [pc, #104]	; (8019be0 <mem_sanity+0x18c>)
 8019b78:	481a      	ldr	r0, [pc, #104]	; (8019be4 <mem_sanity+0x190>)
 8019b7a:	f00b fa27 	bl	8024fcc <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8019b7e:	8862      	ldrh	r2, [r4, #2]
 8019b80:	f242 7310 	movw	r3, #10000	; 0x2710
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d006      	beq.n	8019b96 <mem_sanity+0x142>
 8019b88:	4b14      	ldr	r3, [pc, #80]	; (8019bdc <mem_sanity+0x188>)
 8019b8a:	f240 225d 	movw	r2, #605	; 0x25d
 8019b8e:	4919      	ldr	r1, [pc, #100]	; (8019bf4 <mem_sanity+0x1a0>)
 8019b90:	4814      	ldr	r0, [pc, #80]	; (8019be4 <mem_sanity+0x190>)
 8019b92:	f00b fa1b 	bl	8024fcc <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019b96:	8822      	ldrh	r2, [r4, #0]
 8019b98:	f242 7310 	movw	r3, #10000	; 0x2710
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	d101      	bne.n	8019ba4 <mem_sanity+0x150>
}
 8019ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019ba4:	4b0d      	ldr	r3, [pc, #52]	; (8019bdc <mem_sanity+0x188>)
 8019ba6:	f240 225e 	movw	r2, #606	; 0x25e
 8019baa:	4913      	ldr	r1, [pc, #76]	; (8019bf8 <mem_sanity+0x1a4>)
 8019bac:	480d      	ldr	r0, [pc, #52]	; (8019be4 <mem_sanity+0x190>)
}
 8019bae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019bb2:	f00b ba0b 	b.w	8024fcc <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019bb6:	4b09      	ldr	r3, [pc, #36]	; (8019bdc <mem_sanity+0x188>)
 8019bb8:	f240 2242 	movw	r2, #578	; 0x242
 8019bbc:	490e      	ldr	r1, [pc, #56]	; (8019bf8 <mem_sanity+0x1a4>)
 8019bbe:	4809      	ldr	r0, [pc, #36]	; (8019be4 <mem_sanity+0x190>)
 8019bc0:	f00b fa04 	bl	8024fcc <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8019bc4:	8834      	ldrh	r4, [r6, #0]
 8019bc6:	e75e      	b.n	8019a86 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019bc8:	4b04      	ldr	r3, [pc, #16]	; (8019bdc <mem_sanity+0x188>)
 8019bca:	f240 2241 	movw	r2, #577	; 0x241
 8019bce:	4909      	ldr	r1, [pc, #36]	; (8019bf4 <mem_sanity+0x1a0>)
 8019bd0:	4804      	ldr	r0, [pc, #16]	; (8019be4 <mem_sanity+0x190>)
 8019bd2:	f00b f9fb 	bl	8024fcc <iprintf>
 8019bd6:	e750      	b.n	8019a7a <mem_sanity+0x26>
 8019bd8:	2001ec78 	.word	0x2001ec78
 8019bdc:	08042b54 	.word	0x08042b54
 8019be0:	08042b84 	.word	0x08042b84
 8019be4:	0802bdc0 	.word	0x0802bdc0
 8019be8:	08042bec 	.word	0x08042bec
 8019bec:	08042c04 	.word	0x08042c04
 8019bf0:	08042c20 	.word	0x08042c20
 8019bf4:	08042b9c 	.word	0x08042b9c
 8019bf8:	08042bb8 	.word	0x08042bb8
 8019bfc:	08042c38 	.word	0x08042c38
 8019c00:	2001ec7c 	.word	0x2001ec7c
 8019c04:	08042bd4 	.word	0x08042bd4

08019c08 <mem_overflow_check_raw>:
{
 8019c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c0c:	1e4c      	subs	r4, r1, #1
 8019c0e:	310f      	adds	r1, #15
 8019c10:	b0a3      	sub	sp, #140	; 0x8c
 8019c12:	4606      	mov	r6, r0
 8019c14:	4615      	mov	r5, r2
 8019c16:	4698      	mov	r8, r3
 8019c18:	4404      	add	r4, r0
 8019c1a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019c1c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8019c94 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8019c20:	f8df b074 	ldr.w	fp, [pc, #116]	; 8019c98 <mem_overflow_check_raw+0x90>
 8019c24:	f8df a074 	ldr.w	sl, [pc, #116]	; 8019c9c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019c28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019c2c:	464a      	mov	r2, r9
 8019c2e:	2180      	movs	r1, #128	; 0x80
 8019c30:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019c32:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019c34:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019c36:	d009      	beq.n	8019c4c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019c38:	f8cd 8000 	str.w	r8, [sp]
 8019c3c:	f00b fb84 	bl	8025348 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019c40:	465b      	mov	r3, fp
 8019c42:	226d      	movs	r2, #109	; 0x6d
 8019c44:	a902      	add	r1, sp, #8
 8019c46:	4650      	mov	r0, sl
 8019c48:	f00b f9c0 	bl	8024fcc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8019c4c:	42bc      	cmp	r4, r7
 8019c4e:	d1eb      	bne.n	8019c28 <mem_overflow_check_raw+0x20>
 8019c50:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019c54:	4f0e      	ldr	r7, [pc, #56]	; (8019c90 <mem_overflow_check_raw+0x88>)
 8019c56:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8019c58:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8019c98 <mem_overflow_check_raw+0x90>
 8019c5c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8019c9c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019c60:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019c64:	463a      	mov	r2, r7
 8019c66:	2180      	movs	r1, #128	; 0x80
 8019c68:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019c6a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019c6c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019c6e:	d009      	beq.n	8019c84 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019c70:	f8cd 8000 	str.w	r8, [sp]
 8019c74:	f00b fb68 	bl	8025348 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019c78:	4653      	mov	r3, sl
 8019c7a:	2278      	movs	r2, #120	; 0x78
 8019c7c:	a902      	add	r1, sp, #8
 8019c7e:	4648      	mov	r0, r9
 8019c80:	f00b f9a4 	bl	8024fcc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8019c84:	42b4      	cmp	r4, r6
 8019c86:	d1eb      	bne.n	8019c60 <mem_overflow_check_raw+0x58>
}
 8019c88:	b023      	add	sp, #140	; 0x8c
 8019c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c8e:	bf00      	nop
 8019c90:	08042c6c 	.word	0x08042c6c
 8019c94:	08042c4c 	.word	0x08042c4c
 8019c98:	08042b54 	.word	0x08042b54
 8019c9c:	0802bdc0 	.word	0x0802bdc0

08019ca0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019ca0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8019ca4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019ca6:	f840 3c10 	str.w	r3, [r0, #-16]
 8019caa:	f840 3c0c 	str.w	r3, [r0, #-12]
 8019cae:	f840 3c08 	str.w	r3, [r0, #-8]
 8019cb2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019cb6:	5043      	str	r3, [r0, r1]
 8019cb8:	6053      	str	r3, [r2, #4]
 8019cba:	6093      	str	r3, [r2, #8]
 8019cbc:	60d3      	str	r3, [r2, #12]
}
 8019cbe:	4770      	bx	lr

08019cc0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019cc0:	4b14      	ldr	r3, [pc, #80]	; (8019d14 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8019cc2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 8019cc6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019cc8:	4913      	ldr	r1, [pc, #76]	; (8019d18 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019cca:	f023 0303 	bic.w	r3, r3, #3
{
 8019cce:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8019cd0:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019cd2:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019cd4:	4c11      	ldr	r4, [pc, #68]	; (8019d1c <mem_init+0x5c>)
  mem->used = 0;
 8019cd6:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019cd8:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8019cda:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8019cde:	4910      	ldr	r1, [pc, #64]	; (8019d20 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019ce0:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 8019ce2:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8019ce4:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 8019ce8:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 8019cec:	f7ff feb2 	bl	8019a54 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8019cf0:	6822      	ldr	r2, [r4, #0]
 8019cf2:	4b0c      	ldr	r3, [pc, #48]	; (8019d24 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019cf4:	480c      	ldr	r0, [pc, #48]	; (8019d28 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 8019cf6:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019cf8:	f009 fc84 	bl	8023604 <sys_mutex_new>
 8019cfc:	b900      	cbnz	r0, 8019d00 <mem_init+0x40>
}
 8019cfe:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019d00:	4b0a      	ldr	r3, [pc, #40]	; (8019d2c <mem_init+0x6c>)
 8019d02:	f240 221f 	movw	r2, #543	; 0x21f
 8019d06:	490a      	ldr	r1, [pc, #40]	; (8019d30 <mem_init+0x70>)
 8019d08:	480a      	ldr	r0, [pc, #40]	; (8019d34 <mem_init+0x74>)
}
 8019d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019d0e:	f00b b95d 	b.w	8024fcc <iprintf>
 8019d12:	bf00      	nop
 8019d14:	2001ec83 	.word	0x2001ec83
 8019d18:	2001ec7c 	.word	0x2001ec7c
 8019d1c:	2001ec78 	.word	0x2001ec78
 8019d20:	27102710 	.word	0x27102710
 8019d24:	2001ec6c 	.word	0x2001ec6c
 8019d28:	2001ec74 	.word	0x2001ec74
 8019d2c:	08042b54 	.word	0x08042b54
 8019d30:	08042c8c 	.word	0x08042c8c
 8019d34:	0802bdc0 	.word	0x0802bdc0

08019d38 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	d07f      	beq.n	8019e3c <mem_free+0x104>
{
 8019d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019d40:	f010 0803 	ands.w	r8, r0, #3
 8019d44:	4604      	mov	r4, r0
 8019d46:	d170      	bne.n	8019e2a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019d48:	4e5c      	ldr	r6, [pc, #368]	; (8019ebc <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019d4a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019d4e:	6833      	ldr	r3, [r6, #0]
 8019d50:	42ab      	cmp	r3, r5
 8019d52:	d805      	bhi.n	8019d60 <mem_free+0x28>
 8019d54:	4f5a      	ldr	r7, [pc, #360]	; (8019ec0 <mem_free+0x188>)
 8019d56:	f100 030c 	add.w	r3, r0, #12
 8019d5a:	683a      	ldr	r2, [r7, #0]
 8019d5c:	429a      	cmp	r2, r3
 8019d5e:	d208      	bcs.n	8019d72 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019d60:	4b58      	ldr	r3, [pc, #352]	; (8019ec4 <mem_free+0x18c>)
 8019d62:	f240 227f 	movw	r2, #639	; 0x27f
 8019d66:	4958      	ldr	r1, [pc, #352]	; (8019ec8 <mem_free+0x190>)
 8019d68:	4858      	ldr	r0, [pc, #352]	; (8019ecc <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8019d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019d6e:	f00b b92d 	b.w	8024fcc <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019d72:	4b57      	ldr	r3, [pc, #348]	; (8019ed0 <mem_free+0x198>)
 8019d74:	4a57      	ldr	r2, [pc, #348]	; (8019ed4 <mem_free+0x19c>)
 8019d76:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8019d7a:	f7ff ff45 	bl	8019c08 <mem_overflow_check_raw>
  if (!mem->used) {
 8019d7e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	f000 8082 	beq.w	8019e8c <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 8019d88:	4628      	mov	r0, r5
 8019d8a:	f7ff fe33 	bl	80199f4 <mem_link_valid>
 8019d8e:	2800      	cmp	r0, #0
 8019d90:	f000 8085 	beq.w	8019e9e <mem_free+0x166>
  mem->used = 0;
 8019d94:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8019d98:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8019ef8 <mem_free+0x1c0>
 8019d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8019da0:	42ab      	cmp	r3, r5
 8019da2:	d901      	bls.n	8019da8 <mem_free+0x70>
    lfree = mem;
 8019da4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019da8:	6833      	ldr	r3, [r6, #0]
 8019daa:	429d      	cmp	r5, r3
 8019dac:	d351      	bcc.n	8019e52 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	429d      	cmp	r5, r3
 8019db2:	d258      	bcs.n	8019e66 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019db4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019db8:	f242 7210 	movw	r2, #10000	; 0x2710
 8019dbc:	4293      	cmp	r3, r2
 8019dbe:	d83e      	bhi.n	8019e3e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 8019dc0:	6832      	ldr	r2, [r6, #0]
 8019dc2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8019dc4:	429d      	cmp	r5, r3
 8019dc6:	d013      	beq.n	8019df0 <mem_free+0xb8>
 8019dc8:	7919      	ldrb	r1, [r3, #4]
 8019dca:	b989      	cbnz	r1, 8019df0 <mem_free+0xb8>
 8019dcc:	6839      	ldr	r1, [r7, #0]
 8019dce:	428b      	cmp	r3, r1
 8019dd0:	d00e      	beq.n	8019df0 <mem_free+0xb8>
    if (lfree == nmem) {
 8019dd2:	f8d8 1000 	ldr.w	r1, [r8]
 8019dd6:	428b      	cmp	r3, r1
 8019dd8:	d06d      	beq.n	8019eb6 <mem_free+0x17e>
    mem->next = nmem->next;
 8019dda:	8819      	ldrh	r1, [r3, #0]
 8019ddc:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019de0:	f242 7110 	movw	r1, #10000	; 0x2710
 8019de4:	881b      	ldrh	r3, [r3, #0]
 8019de6:	428b      	cmp	r3, r1
 8019de8:	d002      	beq.n	8019df0 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8019dea:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8019dec:	1aa9      	subs	r1, r5, r2
 8019dee:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8019df0:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8019df4:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8019df6:	429d      	cmp	r5, r3
 8019df8:	d010      	beq.n	8019e1c <mem_free+0xe4>
 8019dfa:	7918      	ldrb	r0, [r3, #4]
 8019dfc:	b970      	cbnz	r0, 8019e1c <mem_free+0xe4>
    if (lfree == mem) {
 8019dfe:	f8d8 0000 	ldr.w	r0, [r8]
 8019e02:	4285      	cmp	r5, r0
 8019e04:	d054      	beq.n	8019eb0 <mem_free+0x178>
    pmem->next = mem->next;
 8019e06:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019e0a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 8019e0e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019e10:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019e14:	4283      	cmp	r3, r0
 8019e16:	d001      	beq.n	8019e1c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8019e18:	441a      	add	r2, r3
 8019e1a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8019e1c:	f7ff fe1a 	bl	8019a54 <mem_sanity>
  mem_free_count = 1;
 8019e20:	4b2d      	ldr	r3, [pc, #180]	; (8019ed8 <mem_free+0x1a0>)
 8019e22:	2201      	movs	r2, #1
 8019e24:	701a      	strb	r2, [r3, #0]
}
 8019e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019e2a:	4b26      	ldr	r3, [pc, #152]	; (8019ec4 <mem_free+0x18c>)
 8019e2c:	f240 2273 	movw	r2, #627	; 0x273
 8019e30:	492a      	ldr	r1, [pc, #168]	; (8019edc <mem_free+0x1a4>)
 8019e32:	4826      	ldr	r0, [pc, #152]	; (8019ecc <mem_free+0x194>)
}
 8019e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019e38:	f00b b8c8 	b.w	8024fcc <iprintf>
 8019e3c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019e3e:	4b21      	ldr	r3, [pc, #132]	; (8019ec4 <mem_free+0x18c>)
 8019e40:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8019e44:	4926      	ldr	r1, [pc, #152]	; (8019ee0 <mem_free+0x1a8>)
 8019e46:	4821      	ldr	r0, [pc, #132]	; (8019ecc <mem_free+0x194>)
 8019e48:	f00b f8c0 	bl	8024fcc <iprintf>
  nmem = ptr_to_mem(mem->next);
 8019e4c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019e50:	e7b6      	b.n	8019dc0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019e52:	4b1c      	ldr	r3, [pc, #112]	; (8019ec4 <mem_free+0x18c>)
 8019e54:	f240 12df 	movw	r2, #479	; 0x1df
 8019e58:	4922      	ldr	r1, [pc, #136]	; (8019ee4 <mem_free+0x1ac>)
 8019e5a:	481c      	ldr	r0, [pc, #112]	; (8019ecc <mem_free+0x194>)
 8019e5c:	f00b f8b6 	bl	8024fcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019e60:	683b      	ldr	r3, [r7, #0]
 8019e62:	429d      	cmp	r5, r3
 8019e64:	d306      	bcc.n	8019e74 <mem_free+0x13c>
 8019e66:	4b17      	ldr	r3, [pc, #92]	; (8019ec4 <mem_free+0x18c>)
 8019e68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019e6c:	491e      	ldr	r1, [pc, #120]	; (8019ee8 <mem_free+0x1b0>)
 8019e6e:	4817      	ldr	r0, [pc, #92]	; (8019ecc <mem_free+0x194>)
 8019e70:	f00b f8ac 	bl	8024fcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8019e74:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d09b      	beq.n	8019db4 <mem_free+0x7c>
 8019e7c:	4b11      	ldr	r3, [pc, #68]	; (8019ec4 <mem_free+0x18c>)
 8019e7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019e82:	491a      	ldr	r1, [pc, #104]	; (8019eec <mem_free+0x1b4>)
 8019e84:	4811      	ldr	r0, [pc, #68]	; (8019ecc <mem_free+0x194>)
 8019e86:	f00b f8a1 	bl	8024fcc <iprintf>
 8019e8a:	e793      	b.n	8019db4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019e8c:	4b0d      	ldr	r3, [pc, #52]	; (8019ec4 <mem_free+0x18c>)
 8019e8e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8019e92:	4917      	ldr	r1, [pc, #92]	; (8019ef0 <mem_free+0x1b8>)
 8019e94:	480d      	ldr	r0, [pc, #52]	; (8019ecc <mem_free+0x194>)
}
 8019e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019e9a:	f00b b897 	b.w	8024fcc <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8019e9e:	4b09      	ldr	r3, [pc, #36]	; (8019ec4 <mem_free+0x18c>)
 8019ea0:	f240 2295 	movw	r2, #661	; 0x295
 8019ea4:	4913      	ldr	r1, [pc, #76]	; (8019ef4 <mem_free+0x1bc>)
 8019ea6:	4809      	ldr	r0, [pc, #36]	; (8019ecc <mem_free+0x194>)
}
 8019ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8019eac:	f00b b88e 	b.w	8024fcc <iprintf>
      lfree = pmem;
 8019eb0:	f8c8 3000 	str.w	r3, [r8]
 8019eb4:	e7a7      	b.n	8019e06 <mem_free+0xce>
      lfree = mem;
 8019eb6:	f8c8 5000 	str.w	r5, [r8]
 8019eba:	e78e      	b.n	8019dda <mem_free+0xa2>
 8019ebc:	2001ec78 	.word	0x2001ec78
 8019ec0:	2001ec7c 	.word	0x2001ec7c
 8019ec4:	08042b54 	.word	0x08042b54
 8019ec8:	08042ccc 	.word	0x08042ccc
 8019ecc:	0802bdc0 	.word	0x0802bdc0
 8019ed0:	080299e0 	.word	0x080299e0
 8019ed4:	08042ce8 	.word	0x08042ce8
 8019ed8:	2001ec70 	.word	0x2001ec70
 8019edc:	08042ca8 	.word	0x08042ca8
 8019ee0:	08042d9c 	.word	0x08042d9c
 8019ee4:	08042d4c 	.word	0x08042d4c
 8019ee8:	08042d64 	.word	0x08042d64
 8019eec:	08042d80 	.word	0x08042d80
 8019ef0:	08042cf0 	.word	0x08042cf0
 8019ef4:	08042d18 	.word	0x08042d18
 8019ef8:	2001ec6c 	.word	0x2001ec6c

08019efc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8019efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019f00:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019f02:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019f06:	f024 0403 	bic.w	r4, r4, #3
 8019f0a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8019f0c:	2c0c      	cmp	r4, #12
 8019f0e:	bf38      	it	cc
 8019f10:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8019f12:	3420      	adds	r4, #32
 8019f14:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019f16:	429c      	cmp	r4, r3
 8019f18:	d87a      	bhi.n	801a010 <mem_trim+0x114>
 8019f1a:	42a1      	cmp	r1, r4
 8019f1c:	460e      	mov	r6, r1
 8019f1e:	d877      	bhi.n	801a010 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019f20:	4f58      	ldr	r7, [pc, #352]	; (801a084 <mem_trim+0x188>)
 8019f22:	4605      	mov	r5, r0
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	4283      	cmp	r3, r0
 8019f28:	d803      	bhi.n	8019f32 <mem_trim+0x36>
 8019f2a:	4b57      	ldr	r3, [pc, #348]	; (801a088 <mem_trim+0x18c>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	4283      	cmp	r3, r0
 8019f30:	d810      	bhi.n	8019f54 <mem_trim+0x58>
 8019f32:	4b56      	ldr	r3, [pc, #344]	; (801a08c <mem_trim+0x190>)
 8019f34:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019f38:	4955      	ldr	r1, [pc, #340]	; (801a090 <mem_trim+0x194>)
 8019f3a:	4856      	ldr	r0, [pc, #344]	; (801a094 <mem_trim+0x198>)
 8019f3c:	f00b f846 	bl	8024fcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	42ab      	cmp	r3, r5
 8019f44:	d902      	bls.n	8019f4c <mem_trim+0x50>
{
 8019f46:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8019f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019f4c:	4b4e      	ldr	r3, [pc, #312]	; (801a088 <mem_trim+0x18c>)
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	429d      	cmp	r5, r3
 8019f52:	d2f8      	bcs.n	8019f46 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019f54:	4b50      	ldr	r3, [pc, #320]	; (801a098 <mem_trim+0x19c>)
 8019f56:	4628      	mov	r0, r5
 8019f58:	4a50      	ldr	r2, [pc, #320]	; (801a09c <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019f5a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019f5e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8019f62:	f7ff fe51 	bl	8019c08 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8019f66:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019f68:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8019f6c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019f70:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8019f74:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019f78:	eba3 0308 	sub.w	r3, r3, r8
 8019f7c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019f7e:	429c      	cmp	r4, r3
 8019f80:	d83d      	bhi.n	8019ffe <mem_trim+0x102>
  if (newsize == size) {
 8019f82:	d0e0      	beq.n	8019f46 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 8019f84:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 8019f88:	f899 0004 	ldrb.w	r0, [r9, #4]
 8019f8c:	2800      	cmp	r0, #0
 8019f8e:	d142      	bne.n	801a016 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019f90:	f242 7310 	movw	r3, #10000	; 0x2710
 8019f94:	4299      	cmp	r1, r3
 8019f96:	d061      	beq.n	801a05c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019f98:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 8019f9c:	4940      	ldr	r1, [pc, #256]	; (801a0a0 <mem_trim+0x1a4>)
    next = mem2->next;
 8019f9e:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019fa2:	441c      	add	r4, r3
    if (lfree == mem2) {
 8019fa4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019fa6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8019fa8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 8019faa:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 8019fae:	d053      	beq.n	801a058 <mem_trim+0x15c>
    mem2->used = 0;
 8019fb0:	2100      	movs	r1, #0
    mem2->next = next;
 8019fb2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 8019fb4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019fb8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019fba:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019fbe:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019fc2:	881b      	ldrh	r3, [r3, #0]
 8019fc4:	428b      	cmp	r3, r1
 8019fc6:	d001      	beq.n	8019fcc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019fc8:	4413      	add	r3, r2
 8019fca:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019fcc:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8019fd0:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 8019fd2:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019fd6:	f845 3c10 	str.w	r3, [r5, #-16]
 8019fda:	f845 3c0c 	str.w	r3, [r5, #-12]
 8019fde:	f845 3c08 	str.w	r3, [r5, #-8]
 8019fe2:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019fe6:	51ab      	str	r3, [r5, r6]
 8019fe8:	6053      	str	r3, [r2, #4]
 8019fea:	6093      	str	r3, [r2, #8]
 8019fec:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 8019fee:	f7ff fd31 	bl	8019a54 <mem_sanity>
  mem_free_count = 1;
 8019ff2:	4b2c      	ldr	r3, [pc, #176]	; (801a0a4 <mem_trim+0x1a8>)
 8019ff4:	2201      	movs	r2, #1
  return rmem;
 8019ff6:	4628      	mov	r0, r5
  mem_free_count = 1;
 8019ff8:	701a      	strb	r2, [r3, #0]
}
 8019ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019ffe:	4b23      	ldr	r3, [pc, #140]	; (801a08c <mem_trim+0x190>)
 801a000:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801a004:	4928      	ldr	r1, [pc, #160]	; (801a0a8 <mem_trim+0x1ac>)
 801a006:	4823      	ldr	r0, [pc, #140]	; (801a094 <mem_trim+0x198>)
 801a008:	f00a ffe0 	bl	8024fcc <iprintf>
    return NULL;
 801a00c:	2000      	movs	r0, #0
 801a00e:	e79b      	b.n	8019f48 <mem_trim+0x4c>
    return NULL;
 801a010:	2000      	movs	r0, #0
}
 801a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a016:	f104 0014 	add.w	r0, r4, #20
 801a01a:	4298      	cmp	r0, r3
 801a01c:	d8d6      	bhi.n	8019fcc <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a01e:	f108 0308 	add.w	r3, r8, #8
 801a022:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a024:	f242 7310 	movw	r3, #10000	; 0x2710
 801a028:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a02a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a02c:	d01f      	beq.n	801a06e <mem_trim+0x172>
    if (mem2 < lfree) {
 801a02e:	481c      	ldr	r0, [pc, #112]	; (801a0a0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801a030:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801a032:	6807      	ldr	r7, [r0, #0]
 801a034:	429f      	cmp	r7, r3
 801a036:	d900      	bls.n	801a03a <mem_trim+0x13e>
      lfree = mem2;
 801a038:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801a03a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801a03c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801a03e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801a042:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a044:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801a048:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a04c:	881b      	ldrh	r3, [r3, #0]
 801a04e:	428b      	cmp	r3, r1
 801a050:	d0bc      	beq.n	8019fcc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a052:	441a      	add	r2, r3
 801a054:	8054      	strh	r4, [r2, #2]
 801a056:	e7b9      	b.n	8019fcc <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801a058:	600b      	str	r3, [r1, #0]
 801a05a:	e7a9      	b.n	8019fb0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a05c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801a060:	4b0a      	ldr	r3, [pc, #40]	; (801a08c <mem_trim+0x190>)
 801a062:	4912      	ldr	r1, [pc, #72]	; (801a0ac <mem_trim+0x1b0>)
 801a064:	480b      	ldr	r0, [pc, #44]	; (801a094 <mem_trim+0x198>)
 801a066:	f00a ffb1 	bl	8024fcc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	e794      	b.n	8019f98 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a06e:	f240 3216 	movw	r2, #790	; 0x316
 801a072:	490e      	ldr	r1, [pc, #56]	; (801a0ac <mem_trim+0x1b0>)
 801a074:	4b05      	ldr	r3, [pc, #20]	; (801a08c <mem_trim+0x190>)
 801a076:	4807      	ldr	r0, [pc, #28]	; (801a094 <mem_trim+0x198>)
 801a078:	f00a ffa8 	bl	8024fcc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a07c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801a07e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801a082:	e7d4      	b.n	801a02e <mem_trim+0x132>
 801a084:	2001ec78 	.word	0x2001ec78
 801a088:	2001ec7c 	.word	0x2001ec7c
 801a08c:	08042b54 	.word	0x08042b54
 801a090:	08042dc8 	.word	0x08042dc8
 801a094:	0802bdc0 	.word	0x0802bdc0
 801a098:	080299e0 	.word	0x080299e0
 801a09c:	08042ce8 	.word	0x08042ce8
 801a0a0:	2001ec6c 	.word	0x2001ec6c
 801a0a4:	2001ec70 	.word	0x2001ec70
 801a0a8:	08042de0 	.word	0x08042de0
 801a0ac:	08042e00 	.word	0x08042e00

0801a0b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a0b4:	4680      	mov	r8, r0
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	f000 80b2 	beq.w	801a220 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a0bc:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a0c0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a0c4:	f02b 0b03 	bic.w	fp, fp, #3
 801a0c8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801a0cc:	f1bb 0f0c 	cmp.w	fp, #12
 801a0d0:	bf38      	it	cc
 801a0d2:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801a0d6:	f10b 0720 	add.w	r7, fp, #32
 801a0da:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a0dc:	42a7      	cmp	r7, r4
 801a0de:	f200 809f 	bhi.w	801a220 <mem_malloc+0x170>
 801a0e2:	42b8      	cmp	r0, r7
 801a0e4:	bf94      	ite	ls
 801a0e6:	f04f 0a00 	movls.w	sl, #0
 801a0ea:	f04f 0a01 	movhi.w	sl, #1
 801a0ee:	f1ba 0f00 	cmp.w	sl, #0
 801a0f2:	f040 8095 	bne.w	801a220 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a0f6:	4866      	ldr	r0, [pc, #408]	; (801a290 <mem_malloc+0x1e0>)
 801a0f8:	f009 fa94 	bl	8023624 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801a0fc:	4b65      	ldr	r3, [pc, #404]	; (801a294 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a0fe:	eba4 0c07 	sub.w	ip, r4, r7
 801a102:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801a2bc <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801a106:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a108:	f06f 0e07 	mvn.w	lr, #7
 801a10c:	4d62      	ldr	r5, [pc, #392]	; (801a298 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a10e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801a112:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a114:	b2b3      	uxth	r3, r6
 801a116:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801a118:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a11a:	d97a      	bls.n	801a212 <mem_malloc+0x162>
      mem_free_count = 0;
 801a11c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a120:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801a124:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a126:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801a128:	2900      	cmp	r1, #0
 801a12a:	d1f0      	bne.n	801a10e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801a12c:	7923      	ldrb	r3, [r4, #4]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d16b      	bne.n	801a20a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a132:	8821      	ldrh	r1, [r4, #0]
 801a134:	440a      	add	r2, r1
 801a136:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801a138:	42ba      	cmp	r2, r7
 801a13a:	d3ec      	bcc.n	801a116 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a13c:	f107 0314 	add.w	r3, r7, #20
 801a140:	429a      	cmp	r2, r3
 801a142:	d371      	bcc.n	801a228 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a144:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a148:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a14c:	44b2      	add	sl, r6
 801a14e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a152:	459a      	cmp	sl, r3
 801a154:	f000 808f 	beq.w	801a276 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801a158:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801a15c:	2200      	movs	r2, #0
 801a15e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a160:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801a164:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801a168:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801a16a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801a16c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801a170:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a172:	f830 300a 	ldrh.w	r3, [r0, sl]
 801a176:	4293      	cmp	r3, r2
 801a178:	d002      	beq.n	801a180 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801a17a:	4418      	add	r0, r3
 801a17c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801a180:	f8d9 3000 	ldr.w	r3, [r9]
 801a184:	42a3      	cmp	r3, r4
 801a186:	f040 8081 	bne.w	801a28c <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801a18a:	4b42      	ldr	r3, [pc, #264]	; (801a294 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801a18c:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801a18e:	4e43      	ldr	r6, [pc, #268]	; (801a29c <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801a190:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801a194:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801a196:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801a19a:	791a      	ldrb	r2, [r3, #4]
 801a19c:	b942      	cbnz	r2, 801a1b0 <mem_malloc+0x100>
 801a19e:	e009      	b.n	801a1b4 <mem_malloc+0x104>
            mem_free_count = 0;
 801a1a0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801a1a2:	782a      	ldrb	r2, [r5, #0]
 801a1a4:	2a00      	cmp	r2, #0
 801a1a6:	d142      	bne.n	801a22e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801a1ac:	791a      	ldrb	r2, [r3, #4]
 801a1ae:	b10a      	cbz	r2, 801a1b4 <mem_malloc+0x104>
 801a1b0:	4299      	cmp	r1, r3
 801a1b2:	d1f5      	bne.n	801a1a0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801a1b4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a1b8:	f8d9 3000 	ldr.w	r3, [r9]
 801a1bc:	4299      	cmp	r1, r3
 801a1be:	d004      	beq.n	801a1ca <mem_malloc+0x11a>
 801a1c0:	f8d9 3000 	ldr.w	r3, [r9]
 801a1c4:	791b      	ldrb	r3, [r3, #4]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d14d      	bne.n	801a266 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a1ca:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801a1cc:	4830      	ldr	r0, [pc, #192]	; (801a290 <mem_malloc+0x1e0>)
 801a1ce:	f009 fa2f 	bl	8023630 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a1d2:	6833      	ldr	r3, [r6, #0]
 801a1d4:	4427      	add	r7, r4
 801a1d6:	42bb      	cmp	r3, r7
 801a1d8:	d33d      	bcc.n	801a256 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a1da:	07a3      	lsls	r3, r4, #30
 801a1dc:	d12c      	bne.n	801a238 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a1de:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a1e2:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801a1e6:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801a1ea:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a1ee:	60a3      	str	r3, [r4, #8]
 801a1f0:	60e3      	str	r3, [r4, #12]
 801a1f2:	6123      	str	r3, [r4, #16]
 801a1f4:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a1f6:	f845 3008 	str.w	r3, [r5, r8]
 801a1fa:	6053      	str	r3, [r2, #4]
 801a1fc:	6093      	str	r3, [r2, #8]
 801a1fe:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801a200:	f7ff fc28 	bl	8019a54 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801a204:	4628      	mov	r0, r5
 801a206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a20a:	8826      	ldrh	r6, [r4, #0]
 801a20c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a20e:	459c      	cmp	ip, r3
 801a210:	d884      	bhi.n	801a11c <mem_malloc+0x6c>
  return NULL;
 801a212:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801a214:	481e      	ldr	r0, [pc, #120]	; (801a290 <mem_malloc+0x1e0>)
 801a216:	f009 fa0b 	bl	8023630 <sys_mutex_unlock>
}
 801a21a:	4628      	mov	r0, r5
 801a21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801a220:	2500      	movs	r5, #0
}
 801a222:	4628      	mov	r0, r5
 801a224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801a228:	2301      	movs	r3, #1
 801a22a:	7123      	strb	r3, [r4, #4]
 801a22c:	e7a8      	b.n	801a180 <mem_malloc+0xd0>
        if (mem == lfree) {
 801a22e:	f8d9 3000 	ldr.w	r3, [r9]
 801a232:	42a3      	cmp	r3, r4
 801a234:	d0af      	beq.n	801a196 <mem_malloc+0xe6>
 801a236:	e7c8      	b.n	801a1ca <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a238:	4b19      	ldr	r3, [pc, #100]	; (801a2a0 <mem_malloc+0x1f0>)
 801a23a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801a23e:	4919      	ldr	r1, [pc, #100]	; (801a2a4 <mem_malloc+0x1f4>)
 801a240:	4819      	ldr	r0, [pc, #100]	; (801a2a8 <mem_malloc+0x1f8>)
 801a242:	f00a fec3 	bl	8024fcc <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a246:	4b16      	ldr	r3, [pc, #88]	; (801a2a0 <mem_malloc+0x1f0>)
 801a248:	f240 32bd 	movw	r2, #957	; 0x3bd
 801a24c:	4917      	ldr	r1, [pc, #92]	; (801a2ac <mem_malloc+0x1fc>)
 801a24e:	4816      	ldr	r0, [pc, #88]	; (801a2a8 <mem_malloc+0x1f8>)
 801a250:	f00a febc 	bl	8024fcc <iprintf>
 801a254:	e7c3      	b.n	801a1de <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a256:	4b12      	ldr	r3, [pc, #72]	; (801a2a0 <mem_malloc+0x1f0>)
 801a258:	f240 32b9 	movw	r2, #953	; 0x3b9
 801a25c:	4914      	ldr	r1, [pc, #80]	; (801a2b0 <mem_malloc+0x200>)
 801a25e:	4812      	ldr	r0, [pc, #72]	; (801a2a8 <mem_malloc+0x1f8>)
 801a260:	f00a feb4 	bl	8024fcc <iprintf>
 801a264:	e7b9      	b.n	801a1da <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a266:	4b0e      	ldr	r3, [pc, #56]	; (801a2a0 <mem_malloc+0x1f0>)
 801a268:	f240 32b5 	movw	r2, #949	; 0x3b5
 801a26c:	4911      	ldr	r1, [pc, #68]	; (801a2b4 <mem_malloc+0x204>)
 801a26e:	480e      	ldr	r0, [pc, #56]	; (801a2a8 <mem_malloc+0x1f8>)
 801a270:	f00a feac 	bl	8024fcc <iprintf>
 801a274:	e7a9      	b.n	801a1ca <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a276:	4b0a      	ldr	r3, [pc, #40]	; (801a2a0 <mem_malloc+0x1f0>)
 801a278:	f240 3287 	movw	r2, #903	; 0x387
 801a27c:	490e      	ldr	r1, [pc, #56]	; (801a2b8 <mem_malloc+0x208>)
 801a27e:	480a      	ldr	r0, [pc, #40]	; (801a2a8 <mem_malloc+0x1f8>)
 801a280:	f00a fea4 	bl	8024fcc <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a284:	4b03      	ldr	r3, [pc, #12]	; (801a294 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801a286:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a288:	6818      	ldr	r0, [r3, #0]
 801a28a:	e765      	b.n	801a158 <mem_malloc+0xa8>
 801a28c:	4e03      	ldr	r6, [pc, #12]	; (801a29c <mem_malloc+0x1ec>)
 801a28e:	e79c      	b.n	801a1ca <mem_malloc+0x11a>
 801a290:	2001ec74 	.word	0x2001ec74
 801a294:	2001ec78 	.word	0x2001ec78
 801a298:	2001ec70 	.word	0x2001ec70
 801a29c:	2001ec7c 	.word	0x2001ec7c
 801a2a0:	08042b54 	.word	0x08042b54
 801a2a4:	08042e60 	.word	0x08042e60
 801a2a8:	0802bdc0 	.word	0x0802bdc0
 801a2ac:	08042e90 	.word	0x08042e90
 801a2b0:	08042e30 	.word	0x08042e30
 801a2b4:	08042e14 	.word	0x08042e14
 801a2b8:	08042e00 	.word	0x08042e00
 801a2bc:	2001ec6c 	.word	0x2001ec6c

0801a2c0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2c4:	4f12      	ldr	r7, [pc, #72]	; (801a310 <memp_overflow_check_all+0x50>)
 801a2c6:	2308      	movs	r3, #8
 801a2c8:	4c12      	ldr	r4, [pc, #72]	; (801a314 <memp_overflow_check_all+0x54>)
 801a2ca:	4d13      	ldr	r5, [pc, #76]	; (801a318 <memp_overflow_check_all+0x58>)
 801a2cc:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a2d0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801a31c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a2d4:	3403      	adds	r4, #3
 801a2d6:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a2da:	b183      	cbz	r3, 801a2fe <memp_overflow_check_all+0x3e>
 801a2dc:	88a9      	ldrh	r1, [r5, #4]
 801a2de:	2600      	movs	r6, #0
 801a2e0:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a2e2:	f104 001c 	add.w	r0, r4, #28
 801a2e6:	682b      	ldr	r3, [r5, #0]
 801a2e8:	464a      	mov	r2, r9
 801a2ea:	f7ff fc8d 	bl	8019c08 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a2ee:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a2f0:	88e8      	ldrh	r0, [r5, #6]
 801a2f2:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a2f4:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a2f8:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a2fa:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a2fc:	d8f0      	bhi.n	801a2e0 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801a2fe:	45b8      	cmp	r8, r7
 801a300:	d004      	beq.n	801a30c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a302:	f857 5b04 	ldr.w	r5, [r7], #4
 801a306:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a308:	88eb      	ldrh	r3, [r5, #6]
 801a30a:	e7e3      	b.n	801a2d4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801a30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a310:	08043144 	.word	0x08043144
 801a314:	200291a4 	.word	0x200291a4
 801a318:	080430b0 	.word	0x080430b0
 801a31c:	08042eb4 	.word	0x08042eb4

0801a320 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a320:	078b      	lsls	r3, r1, #30
{
 801a322:	b570      	push	{r4, r5, r6, lr}
 801a324:	460c      	mov	r4, r1
 801a326:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a328:	d11f      	bne.n	801a36a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a32a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a32c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801a330:	6811      	ldr	r1, [r2, #0]
 801a332:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801a336:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a338:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801a33c:	b15a      	cbz	r2, 801a356 <do_memp_free_pool+0x36>
      if (t == h) {
 801a33e:	429a      	cmp	r2, r3
 801a340:	d105      	bne.n	801a34e <do_memp_free_pool+0x2e>
 801a342:	e009      	b.n	801a358 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a344:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a346:	b133      	cbz	r3, 801a356 <do_memp_free_pool+0x36>
 801a348:	b12a      	cbz	r2, 801a356 <do_memp_free_pool+0x36>
      if (t == h) {
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d004      	beq.n	801a358 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a34e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a350:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a352:	2a00      	cmp	r2, #0
 801a354:	d1f6      	bne.n	801a344 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801a356:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a358:	4b08      	ldr	r3, [pc, #32]	; (801a37c <do_memp_free_pool+0x5c>)
 801a35a:	f240 1285 	movw	r2, #389	; 0x185
 801a35e:	4908      	ldr	r1, [pc, #32]	; (801a380 <do_memp_free_pool+0x60>)
 801a360:	4808      	ldr	r0, [pc, #32]	; (801a384 <do_memp_free_pool+0x64>)
}
 801a362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a366:	f00a be31 	b.w	8024fcc <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a36a:	4b04      	ldr	r3, [pc, #16]	; (801a37c <do_memp_free_pool+0x5c>)
 801a36c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a370:	4905      	ldr	r1, [pc, #20]	; (801a388 <do_memp_free_pool+0x68>)
 801a372:	4804      	ldr	r0, [pc, #16]	; (801a384 <do_memp_free_pool+0x64>)
 801a374:	f00a fe2a 	bl	8024fcc <iprintf>
 801a378:	e7d7      	b.n	801a32a <do_memp_free_pool+0xa>
 801a37a:	bf00      	nop
 801a37c:	08042ebc 	.word	0x08042ebc
 801a380:	08042f0c 	.word	0x08042f0c
 801a384:	0802bdc0 	.word	0x0802bdc0
 801a388:	08042eec 	.word	0x08042eec

0801a38c <memp_init_pool>:
{
 801a38c:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801a38e:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801a390:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801a392:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801a396:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a398:	b1b1      	cbz	r1, 801a3c8 <memp_init_pool+0x3c>
 801a39a:	3403      	adds	r4, #3
 801a39c:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a39e:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801a3a0:	4616      	mov	r6, r2
 801a3a2:	f024 0403 	bic.w	r4, r4, #3
 801a3a6:	e001      	b.n	801a3ac <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801a3a8:	68eb      	ldr	r3, [r5, #12]
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a3ae:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801a3b2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a3b4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a3b6:	f7ff fc73 	bl	8019ca0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a3ba:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801a3bc:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801a3be:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801a3c2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a3c4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801a3c6:	dcef      	bgt.n	801a3a8 <memp_init_pool+0x1c>
}
 801a3c8:	bd70      	pop	{r4, r5, r6, pc}
 801a3ca:	bf00      	nop

0801a3cc <memp_init>:
{
 801a3cc:	b538      	push	{r3, r4, r5, lr}
 801a3ce:	4c07      	ldr	r4, [pc, #28]	; (801a3ec <memp_init+0x20>)
 801a3d0:	4807      	ldr	r0, [pc, #28]	; (801a3f0 <memp_init+0x24>)
 801a3d2:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801a3d6:	e001      	b.n	801a3dc <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801a3d8:	f854 0b04 	ldr.w	r0, [r4], #4
 801a3dc:	f7ff ffd6 	bl	801a38c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a3e0:	42ac      	cmp	r4, r5
 801a3e2:	d1f9      	bne.n	801a3d8 <memp_init+0xc>
}
 801a3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801a3e8:	f7ff bf6a 	b.w	801a2c0 <memp_overflow_check_all>
 801a3ec:	08043144 	.word	0x08043144
 801a3f0:	080430b0 	.word	0x080430b0

0801a3f4 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a3f4:	280f      	cmp	r0, #15
{
 801a3f6:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a3f8:	d81d      	bhi.n	801a436 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	460e      	mov	r6, r1
 801a3fe:	4615      	mov	r5, r2
 801a400:	f7ff ff5e 	bl	801a2c0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801a404:	4b11      	ldr	r3, [pc, #68]	; (801a44c <memp_malloc_fn+0x58>)
 801a406:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a40a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801a40c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801a40e:	b144      	cbz	r4, 801a422 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801a410:	6822      	ldr	r2, [r4, #0]
 801a412:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801a414:	2300      	movs	r3, #0
 801a416:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a418:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801a41a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a41e:	d102      	bne.n	801a426 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801a420:	341c      	adds	r4, #28
}
 801a422:	4620      	mov	r0, r4
 801a424:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a426:	4b0a      	ldr	r3, [pc, #40]	; (801a450 <memp_malloc_fn+0x5c>)
 801a428:	f44f 728c 	mov.w	r2, #280	; 0x118
 801a42c:	4909      	ldr	r1, [pc, #36]	; (801a454 <memp_malloc_fn+0x60>)
 801a42e:	480a      	ldr	r0, [pc, #40]	; (801a458 <memp_malloc_fn+0x64>)
 801a430:	f00a fdcc 	bl	8024fcc <iprintf>
 801a434:	e7f4      	b.n	801a420 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a436:	2400      	movs	r4, #0
 801a438:	4b05      	ldr	r3, [pc, #20]	; (801a450 <memp_malloc_fn+0x5c>)
 801a43a:	f240 1257 	movw	r2, #343	; 0x157
 801a43e:	4907      	ldr	r1, [pc, #28]	; (801a45c <memp_malloc_fn+0x68>)
 801a440:	4805      	ldr	r0, [pc, #20]	; (801a458 <memp_malloc_fn+0x64>)
 801a442:	f00a fdc3 	bl	8024fcc <iprintf>
}
 801a446:	4620      	mov	r0, r4
 801a448:	bd70      	pop	{r4, r5, r6, pc}
 801a44a:	bf00      	nop
 801a44c:	08043140 	.word	0x08043140
 801a450:	08042ebc 	.word	0x08042ebc
 801a454:	08042f2c 	.word	0x08042f2c
 801a458:	0802bdc0 	.word	0x0802bdc0
 801a45c:	08042f50 	.word	0x08042f50

0801a460 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a460:	280f      	cmp	r0, #15
 801a462:	d80e      	bhi.n	801a482 <memp_free+0x22>
{
 801a464:	b570      	push	{r4, r5, r6, lr}
 801a466:	460d      	mov	r5, r1

  if (mem == NULL) {
 801a468:	b151      	cbz	r1, 801a480 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801a46a:	4604      	mov	r4, r0
 801a46c:	f7ff ff28 	bl	801a2c0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a470:	4b07      	ldr	r3, [pc, #28]	; (801a490 <memp_free+0x30>)
 801a472:	4629      	mov	r1, r5
 801a474:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801a47c:	f7ff bf50 	b.w	801a320 <do_memp_free_pool>
}
 801a480:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a482:	4b04      	ldr	r3, [pc, #16]	; (801a494 <memp_free+0x34>)
 801a484:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801a488:	4903      	ldr	r1, [pc, #12]	; (801a498 <memp_free+0x38>)
 801a48a:	4804      	ldr	r0, [pc, #16]	; (801a49c <memp_free+0x3c>)
 801a48c:	f00a bd9e 	b.w	8024fcc <iprintf>
 801a490:	08043140 	.word	0x08043140
 801a494:	08042ebc 	.word	0x08042ebc
 801a498:	08042f70 	.word	0x08042f70
 801a49c:	0802bdc0 	.word	0x0802bdc0

0801a4a0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801a4a0:	f06f 000b 	mvn.w	r0, #11
 801a4a4:	4770      	bx	lr
 801a4a6:	bf00      	nop

0801a4a8 <netif_issue_reports>:
{
 801a4a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	b150      	cbz	r0, 801a4c4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a4ae:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801a4b2:	f003 0205 	and.w	r2, r3, #5
 801a4b6:	2a05      	cmp	r2, #5
 801a4b8:	d103      	bne.n	801a4c2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a4ba:	6862      	ldr	r2, [r4, #4]
 801a4bc:	b10a      	cbz	r2, 801a4c2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a4be:	071b      	lsls	r3, r3, #28
 801a4c0:	d408      	bmi.n	801a4d4 <netif_issue_reports+0x2c>
}
 801a4c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a4c4:	4b06      	ldr	r3, [pc, #24]	; (801a4e0 <netif_issue_reports+0x38>)
 801a4c6:	f240 326d 	movw	r2, #877	; 0x36d
 801a4ca:	4906      	ldr	r1, [pc, #24]	; (801a4e4 <netif_issue_reports+0x3c>)
 801a4cc:	4806      	ldr	r0, [pc, #24]	; (801a4e8 <netif_issue_reports+0x40>)
 801a4ce:	f00a fd7d 	bl	8024fcc <iprintf>
 801a4d2:	e7ec      	b.n	801a4ae <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801a4d4:	1d21      	adds	r1, r4, #4
 801a4d6:	4620      	mov	r0, r4
}
 801a4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801a4dc:	f007 bf82 	b.w	80223e4 <etharp_request>
 801a4e0:	08043180 	.word	0x08043180
 801a4e4:	080431b4 	.word	0x080431b4
 801a4e8:	0802bdc0 	.word	0x0802bdc0

0801a4ec <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a4ec:	b570      	push	{r4, r5, r6, lr}
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a4f2:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a4f4:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a4f6:	b301      	cbz	r1, 801a53a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a4f8:	686b      	ldr	r3, [r5, #4]
 801a4fa:	6822      	ldr	r2, [r4, #0]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d101      	bne.n	801a504 <netif_do_set_ipaddr.isra.0+0x18>
}
 801a500:	b002      	add	sp, #8
 801a502:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a504:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a506:	4630      	mov	r0, r6
 801a508:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a50a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a50c:	f002 fa30 	bl	801c970 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a510:	a901      	add	r1, sp, #4
 801a512:	4630      	mov	r0, r6
 801a514:	f005 fdba 	bl	802008c <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801a518:	a901      	add	r1, sp, #4
 801a51a:	4630      	mov	r0, r6
 801a51c:	f000 ff42 	bl	801b3a4 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a520:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a522:	2101      	movs	r1, #1
 801a524:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a526:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a528:	f7ff ffbe 	bl	801a4a8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801a52c:	69eb      	ldr	r3, [r5, #28]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d0e6      	beq.n	801a500 <netif_do_set_ipaddr.isra.0+0x14>
 801a532:	4628      	mov	r0, r5
 801a534:	4798      	blx	r3
}
 801a536:	b002      	add	sp, #8
 801a538:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a53a:	4b04      	ldr	r3, [pc, #16]	; (801a54c <netif_do_set_ipaddr.isra.0+0x60>)
 801a53c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801a540:	4903      	ldr	r1, [pc, #12]	; (801a550 <netif_do_set_ipaddr.isra.0+0x64>)
 801a542:	4804      	ldr	r0, [pc, #16]	; (801a554 <netif_do_set_ipaddr.isra.0+0x68>)
 801a544:	f00a fd42 	bl	8024fcc <iprintf>
 801a548:	e7d6      	b.n	801a4f8 <netif_do_set_ipaddr.isra.0+0xc>
 801a54a:	bf00      	nop
 801a54c:	08043180 	.word	0x08043180
 801a550:	080431d8 	.word	0x080431d8
 801a554:	0802bdc0 	.word	0x0802bdc0

0801a558 <netif_init>:
}
 801a558:	4770      	bx	lr
 801a55a:	bf00      	nop

0801a55c <netif_set_addr>:
{
 801a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801a55e:	2900      	cmp	r1, #0
{
 801a560:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801a562:	4b16      	ldr	r3, [pc, #88]	; (801a5bc <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801a564:	460c      	mov	r4, r1
{
 801a566:	b083      	sub	sp, #12
 801a568:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801a56a:	bf14      	ite	ne
 801a56c:	460c      	movne	r4, r1
 801a56e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801a570:	b30a      	cbz	r2, 801a5b6 <netif_set_addr+0x5a>
 801a572:	4616      	mov	r6, r2
  if (gw == NULL) {
 801a574:	b1ef      	cbz	r7, 801a5b2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801a576:	6823      	ldr	r3, [r4, #0]
 801a578:	b993      	cbnz	r3, 801a5a0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a57a:	4621      	mov	r1, r4
 801a57c:	aa01      	add	r2, sp, #4
 801a57e:	4628      	mov	r0, r5
 801a580:	f7ff ffb4 	bl	801a4ec <netif_do_set_ipaddr.isra.0>
 801a584:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a586:	6833      	ldr	r3, [r6, #0]
 801a588:	68aa      	ldr	r2, [r5, #8]
 801a58a:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a58c:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a58e:	bf18      	it	ne
 801a590:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a596:	bf18      	it	ne
 801a598:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801a59a:	b119      	cbz	r1, 801a5a4 <netif_set_addr+0x48>
}
 801a59c:	b003      	add	sp, #12
 801a59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801a5a0:	2100      	movs	r1, #0
 801a5a2:	e7f0      	b.n	801a586 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a5a4:	aa01      	add	r2, sp, #4
 801a5a6:	4621      	mov	r1, r4
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	f7ff ff9f 	bl	801a4ec <netif_do_set_ipaddr.isra.0>
}
 801a5ae:	b003      	add	sp, #12
 801a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801a5b2:	4f02      	ldr	r7, [pc, #8]	; (801a5bc <netif_set_addr+0x60>)
 801a5b4:	e7df      	b.n	801a576 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801a5b6:	461e      	mov	r6, r3
 801a5b8:	e7dc      	b.n	801a574 <netif_set_addr+0x18>
 801a5ba:	bf00      	nop
 801a5bc:	080452a8 	.word	0x080452a8

0801a5c0 <netif_add>:
{
 801a5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a5c6:	4606      	mov	r6, r0
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	f000 8081 	beq.w	801a6d0 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a5ce:	2d00      	cmp	r5, #0
 801a5d0:	f000 8087 	beq.w	801a6e2 <netif_add+0x122>
  if (ipaddr == NULL) {
 801a5d4:	2900      	cmp	r1, #0
 801a5d6:	d06f      	beq.n	801a6b8 <netif_add+0xf8>
  if (netmask == NULL) {
 801a5d8:	2a00      	cmp	r2, #0
 801a5da:	d068      	beq.n	801a6ae <netif_add+0xee>
  if (gw == NULL) {
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d069      	beq.n	801a6b4 <netif_add+0xf4>
  netif->state = state;
 801a5e0:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a5e2:	2400      	movs	r4, #0
  netif->num = netif_num;
 801a5e4:	f8df a128 	ldr.w	sl, [pc, #296]	; 801a710 <netif_add+0x150>
  netif->state = state;
 801a5e8:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801a5ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801a5ec:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801a5ee:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801a5f0:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801a5f4:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801a5f6:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801a5fa:	483e      	ldr	r0, [pc, #248]	; (801a6f4 <netif_add+0x134>)
  netif->flags = 0;
 801a5fc:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801a600:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a602:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a604:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801a606:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801a60a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a60e:	f7ff ffa5 	bl	801a55c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801a612:	4630      	mov	r0, r6
 801a614:	47a8      	blx	r5
 801a616:	2800      	cmp	r0, #0
 801a618:	d157      	bne.n	801a6ca <netif_add+0x10a>
      if (netif->num == 255) {
 801a61a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801a61e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801a714 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a622:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801a704 <netif_add+0x144>
 801a626:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a718 <netif_add+0x158>
 801a62a:	4f33      	ldr	r7, [pc, #204]	; (801a6f8 <netif_add+0x138>)
      if (netif->num == 255) {
 801a62c:	2aff      	cmp	r2, #255	; 0xff
 801a62e:	d102      	bne.n	801a636 <netif_add+0x76>
        netif->num = 0;
 801a630:	2300      	movs	r3, #0
 801a632:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a636:	f8d8 4000 	ldr.w	r4, [r8]
 801a63a:	2c00      	cmp	r4, #0
 801a63c:	d042      	beq.n	801a6c4 <netif_add+0x104>
      num_netifs = 0;
 801a63e:	2500      	movs	r5, #0
 801a640:	e007      	b.n	801a652 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801a642:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a646:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d014      	beq.n	801a678 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a64e:	6824      	ldr	r4, [r4, #0]
 801a650:	b1fc      	cbz	r4, 801a692 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a652:	42a6      	cmp	r6, r4
        num_netifs++;
 801a654:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a658:	d013      	beq.n	801a682 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a65a:	2dff      	cmp	r5, #255	; 0xff
 801a65c:	ddf1      	ble.n	801a642 <netif_add+0x82>
 801a65e:	465b      	mov	r3, fp
 801a660:	f240 128d 	movw	r2, #397	; 0x18d
 801a664:	4925      	ldr	r1, [pc, #148]	; (801a6fc <netif_add+0x13c>)
 801a666:	4638      	mov	r0, r7
 801a668:	f00a fcb0 	bl	8024fcc <iprintf>
        if (netif2->num == netif->num) {
 801a66c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a670:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a674:	429a      	cmp	r2, r3
 801a676:	d1ea      	bne.n	801a64e <netif_add+0x8e>
          netif->num++;
 801a678:	3201      	adds	r2, #1
 801a67a:	b2d2      	uxtb	r2, r2
 801a67c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801a680:	e7d4      	b.n	801a62c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a682:	465b      	mov	r3, fp
 801a684:	f240 128b 	movw	r2, #395	; 0x18b
 801a688:	4649      	mov	r1, r9
 801a68a:	4638      	mov	r0, r7
 801a68c:	f00a fc9e 	bl	8024fcc <iprintf>
 801a690:	e7e3      	b.n	801a65a <netif_add+0x9a>
  netif->next = netif_list;
 801a692:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801a696:	2bfe      	cmp	r3, #254	; 0xfe
 801a698:	d012      	beq.n	801a6c0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801a69a:	3301      	adds	r3, #1
 801a69c:	b2db      	uxtb	r3, r3
  return netif;
 801a69e:	4630      	mov	r0, r6
  netif->next = netif_list;
 801a6a0:	6034      	str	r4, [r6, #0]
 801a6a2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801a6a6:	f8c8 6000 	str.w	r6, [r8]
}
 801a6aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801a6ae:	4a14      	ldr	r2, [pc, #80]	; (801a700 <netif_add+0x140>)
  if (gw == NULL) {
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d195      	bne.n	801a5e0 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801a6b4:	4b12      	ldr	r3, [pc, #72]	; (801a700 <netif_add+0x140>)
 801a6b6:	e793      	b.n	801a5e0 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801a6b8:	4911      	ldr	r1, [pc, #68]	; (801a700 <netif_add+0x140>)
  if (netmask == NULL) {
 801a6ba:	2a00      	cmp	r2, #0
 801a6bc:	d18e      	bne.n	801a5dc <netif_add+0x1c>
 801a6be:	e7f6      	b.n	801a6ae <netif_add+0xee>
    netif_num = 0;
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	e7ec      	b.n	801a69e <netif_add+0xde>
  if (netif->num == 254) {
 801a6c4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a6c8:	e7e5      	b.n	801a696 <netif_add+0xd6>
    return NULL;
 801a6ca:	4620      	mov	r0, r4
}
 801a6cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a6d0:	4b0c      	ldr	r3, [pc, #48]	; (801a704 <netif_add+0x144>)
 801a6d2:	f240 1227 	movw	r2, #295	; 0x127
 801a6d6:	490c      	ldr	r1, [pc, #48]	; (801a708 <netif_add+0x148>)
 801a6d8:	4807      	ldr	r0, [pc, #28]	; (801a6f8 <netif_add+0x138>)
 801a6da:	f00a fc77 	bl	8024fcc <iprintf>
 801a6de:	4630      	mov	r0, r6
 801a6e0:	e7e3      	b.n	801a6aa <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a6e2:	4b08      	ldr	r3, [pc, #32]	; (801a704 <netif_add+0x144>)
 801a6e4:	f44f 7294 	mov.w	r2, #296	; 0x128
 801a6e8:	4908      	ldr	r1, [pc, #32]	; (801a70c <netif_add+0x14c>)
 801a6ea:	4803      	ldr	r0, [pc, #12]	; (801a6f8 <netif_add+0x138>)
 801a6ec:	f00a fc6e 	bl	8024fcc <iprintf>
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	e7da      	b.n	801a6aa <netif_add+0xea>
 801a6f4:	0801a4a1 	.word	0x0801a4a1
 801a6f8:	0802bdc0 	.word	0x0802bdc0
 801a6fc:	0804323c 	.word	0x0804323c
 801a700:	080452a8 	.word	0x080452a8
 801a704:	08043180 	.word	0x08043180
 801a708:	080431e8 	.word	0x080431e8
 801a70c:	08043204 	.word	0x08043204
 801a710:	2002dbcc 	.word	0x2002dbcc
 801a714:	2002dbc8 	.word	0x2002dbc8
 801a718:	08043228 	.word	0x08043228

0801a71c <netif_set_default>:
  netif_default = netif;
 801a71c:	4b01      	ldr	r3, [pc, #4]	; (801a724 <netif_set_default+0x8>)
 801a71e:	6018      	str	r0, [r3, #0]
}
 801a720:	4770      	bx	lr
 801a722:	bf00      	nop
 801a724:	2002dbc4 	.word	0x2002dbc4

0801a728 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a728:	b198      	cbz	r0, 801a752 <netif_set_up+0x2a>
{
 801a72a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a72c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a730:	4604      	mov	r4, r0
 801a732:	07da      	lsls	r2, r3, #31
 801a734:	d40c      	bmi.n	801a750 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a736:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801a73a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a73c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801a740:	b102      	cbz	r2, 801a744 <netif_set_up+0x1c>
 801a742:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a744:	4620      	mov	r0, r4
 801a746:	2103      	movs	r1, #3
}
 801a748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a74c:	f7ff beac 	b.w	801a4a8 <netif_issue_reports>
}
 801a750:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a752:	4b03      	ldr	r3, [pc, #12]	; (801a760 <netif_set_up+0x38>)
 801a754:	f44f 7254 	mov.w	r2, #848	; 0x350
 801a758:	4902      	ldr	r1, [pc, #8]	; (801a764 <netif_set_up+0x3c>)
 801a75a:	4803      	ldr	r0, [pc, #12]	; (801a768 <netif_set_up+0x40>)
 801a75c:	f00a bc36 	b.w	8024fcc <iprintf>
 801a760:	08043180 	.word	0x08043180
 801a764:	0804326c 	.word	0x0804326c
 801a768:	0802bdc0 	.word	0x0802bdc0

0801a76c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a76c:	b1a8      	cbz	r0, 801a79a <netif_set_down+0x2e>
{
 801a76e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801a770:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a774:	4604      	mov	r4, r0
 801a776:	07da      	lsls	r2, r3, #31
 801a778:	d50b      	bpl.n	801a792 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a77a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a77e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a780:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a784:	d406      	bmi.n	801a794 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801a786:	69e3      	ldr	r3, [r4, #28]
 801a788:	b11b      	cbz	r3, 801a792 <netif_set_down+0x26>
 801a78a:	4620      	mov	r0, r4
}
 801a78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801a790:	4718      	bx	r3
}
 801a792:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801a794:	f007 fb9e 	bl	8021ed4 <etharp_cleanup_netif>
 801a798:	e7f5      	b.n	801a786 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a79a:	4b03      	ldr	r3, [pc, #12]	; (801a7a8 <netif_set_down+0x3c>)
 801a79c:	f240 329b 	movw	r2, #923	; 0x39b
 801a7a0:	4902      	ldr	r1, [pc, #8]	; (801a7ac <netif_set_down+0x40>)
 801a7a2:	4803      	ldr	r0, [pc, #12]	; (801a7b0 <netif_set_down+0x44>)
 801a7a4:	f00a bc12 	b.w	8024fcc <iprintf>
 801a7a8:	08043180 	.word	0x08043180
 801a7ac:	08043288 	.word	0x08043288
 801a7b0:	0802bdc0 	.word	0x0802bdc0

0801a7b4 <netif_set_status_callback>:
  if (netif) {
 801a7b4:	b100      	cbz	r0, 801a7b8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801a7b6:	61c1      	str	r1, [r0, #28]
}
 801a7b8:	4770      	bx	lr
 801a7ba:	bf00      	nop

0801a7bc <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a7bc:	b1b8      	cbz	r0, 801a7ee <netif_set_link_up+0x32>
{
 801a7be:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801a7c0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a7c4:	4604      	mov	r4, r0
 801a7c6:	075a      	lsls	r2, r3, #29
 801a7c8:	d500      	bpl.n	801a7cc <netif_set_link_up+0x10>
}
 801a7ca:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801a7cc:	f043 0304 	orr.w	r3, r3, #4
 801a7d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801a7d4:	f006 fd6c 	bl	80212b0 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a7d8:	2103      	movs	r1, #3
 801a7da:	4620      	mov	r0, r4
 801a7dc:	f7ff fe64 	bl	801a4a8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801a7e0:	6a23      	ldr	r3, [r4, #32]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d0f1      	beq.n	801a7ca <netif_set_link_up+0xe>
 801a7e6:	4620      	mov	r0, r4
}
 801a7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801a7ec:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a7ee:	4b03      	ldr	r3, [pc, #12]	; (801a7fc <netif_set_link_up+0x40>)
 801a7f0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801a7f4:	4902      	ldr	r1, [pc, #8]	; (801a800 <netif_set_link_up+0x44>)
 801a7f6:	4803      	ldr	r0, [pc, #12]	; (801a804 <netif_set_link_up+0x48>)
 801a7f8:	f00a bbe8 	b.w	8024fcc <iprintf>
 801a7fc:	08043180 	.word	0x08043180
 801a800:	080432a8 	.word	0x080432a8
 801a804:	0802bdc0 	.word	0x0802bdc0

0801a808 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a808:	b158      	cbz	r0, 801a822 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801a80a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801a80e:	0751      	lsls	r1, r2, #29
 801a810:	d506      	bpl.n	801a820 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a812:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801a816:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a818:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801a81c:	b101      	cbz	r1, 801a820 <netif_set_link_down+0x18>
 801a81e:	4708      	bx	r1
}
 801a820:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a822:	4b03      	ldr	r3, [pc, #12]	; (801a830 <netif_set_link_down+0x28>)
 801a824:	f240 4206 	movw	r2, #1030	; 0x406
 801a828:	4902      	ldr	r1, [pc, #8]	; (801a834 <netif_set_link_down+0x2c>)
 801a82a:	4803      	ldr	r0, [pc, #12]	; (801a838 <netif_set_link_down+0x30>)
 801a82c:	f00a bbce 	b.w	8024fcc <iprintf>
 801a830:	08043180 	.word	0x08043180
 801a834:	080432cc 	.word	0x080432cc
 801a838:	0802bdc0 	.word	0x0802bdc0

0801a83c <netif_set_link_callback>:
  if (netif) {
 801a83c:	b100      	cbz	r0, 801a840 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801a83e:	6201      	str	r1, [r0, #32]
}
 801a840:	4770      	bx	lr
 801a842:	bf00      	nop

0801a844 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801a844:	4602      	mov	r2, r0
 801a846:	b158      	cbz	r0, 801a860 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801a848:	4b06      	ldr	r3, [pc, #24]	; (801a864 <netif_get_by_index+0x20>)
 801a84a:	6818      	ldr	r0, [r3, #0]
 801a84c:	b910      	cbnz	r0, 801a854 <netif_get_by_index+0x10>
 801a84e:	e007      	b.n	801a860 <netif_get_by_index+0x1c>
 801a850:	6800      	ldr	r0, [r0, #0]
 801a852:	b130      	cbz	r0, 801a862 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801a854:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801a858:	3301      	adds	r3, #1
 801a85a:	b2db      	uxtb	r3, r3
 801a85c:	4293      	cmp	r3, r2
 801a85e:	d1f7      	bne.n	801a850 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801a860:	4770      	bx	lr
 801a862:	4770      	bx	lr
 801a864:	2002dbc8 	.word	0x2002dbc8

0801a868 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a868:	4907      	ldr	r1, [pc, #28]	; (801a888 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a86a:	2200      	movs	r2, #0
 801a86c:	4b07      	ldr	r3, [pc, #28]	; (801a88c <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a86e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a870:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a872:	b910      	cbnz	r0, 801a87a <pbuf_free_ooseq_callback+0x12>
 801a874:	e006      	b.n	801a884 <pbuf_free_ooseq_callback+0x1c>
 801a876:	68c0      	ldr	r0, [r0, #12]
 801a878:	b120      	cbz	r0, 801a884 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801a87a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d0fa      	beq.n	801a876 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801a880:	f002 b8a0 	b.w	801c9c4 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801a884:	4770      	bx	lr
 801a886:	bf00      	nop
 801a888:	2002dbd4 	.word	0x2002dbd4
 801a88c:	2002dbcd 	.word	0x2002dbcd

0801a890 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a894:	4604      	mov	r4, r0
 801a896:	2800      	cmp	r0, #0
 801a898:	d052      	beq.n	801a940 <pbuf_free.part.0+0xb0>
  count = 0;
 801a89a:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a89c:	4f29      	ldr	r7, [pc, #164]	; (801a944 <pbuf_free.part.0+0xb4>)
 801a89e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801a954 <pbuf_free.part.0+0xc4>
 801a8a2:	4e29      	ldr	r6, [pc, #164]	; (801a948 <pbuf_free.part.0+0xb8>)
 801a8a4:	e00a      	b.n	801a8bc <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a8a6:	6923      	ldr	r3, [r4, #16]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d03b      	beq.n	801a924 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801a8ac:	4620      	mov	r0, r4
 801a8ae:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801a8b0:	3501      	adds	r5, #1
 801a8b2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a8b4:	f1b9 0f00 	cmp.w	r9, #0
 801a8b8:	d01b      	beq.n	801a8f2 <pbuf_free.part.0+0x62>
 801a8ba:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a8bc:	7ba3      	ldrb	r3, [r4, #14]
 801a8be:	b1db      	cbz	r3, 801a8f8 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801a8c0:	3b01      	subs	r3, #1
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801a8c6:	b9a3      	cbnz	r3, 801a8f2 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a8c8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801a8ca:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a8ce:	079b      	lsls	r3, r3, #30
 801a8d0:	d4e9      	bmi.n	801a8a6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801a8d2:	7b23      	ldrb	r3, [r4, #12]
 801a8d4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a8d8:	2b02      	cmp	r3, #2
 801a8da:	d01e      	beq.n	801a91a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	d02a      	beq.n	801a936 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a8e0:	b99b      	cbnz	r3, 801a90a <pbuf_free.part.0+0x7a>
      count++;
 801a8e2:	3501      	adds	r5, #1
          mem_free(p);
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	f7ff fa27 	bl	8019d38 <mem_free>
      count++;
 801a8ea:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a8ec:	f1b9 0f00 	cmp.w	r9, #0
 801a8f0:	d1e3      	bne.n	801a8ba <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801a8f2:	4628      	mov	r0, r5
 801a8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a8f8:	463b      	mov	r3, r7
 801a8fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 801a8fe:	4641      	mov	r1, r8
 801a900:	4630      	mov	r0, r6
 801a902:	f00a fb63 	bl	8024fcc <iprintf>
    ref = --(p->ref);
 801a906:	7ba3      	ldrb	r3, [r4, #14]
 801a908:	e7da      	b.n	801a8c0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801a90a:	463b      	mov	r3, r7
 801a90c:	f240 320f 	movw	r2, #783	; 0x30f
 801a910:	490e      	ldr	r1, [pc, #56]	; (801a94c <pbuf_free.part.0+0xbc>)
 801a912:	4630      	mov	r0, r6
 801a914:	f00a fb5a 	bl	8024fcc <iprintf>
 801a918:	e7ca      	b.n	801a8b0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801a91a:	4621      	mov	r1, r4
 801a91c:	200f      	movs	r0, #15
 801a91e:	f7ff fd9f 	bl	801a460 <memp_free>
 801a922:	e7c5      	b.n	801a8b0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a924:	463b      	mov	r3, r7
 801a926:	f240 22ff 	movw	r2, #767	; 0x2ff
 801a92a:	4909      	ldr	r1, [pc, #36]	; (801a950 <pbuf_free.part.0+0xc0>)
 801a92c:	4630      	mov	r0, r6
 801a92e:	f00a fb4d 	bl	8024fcc <iprintf>
        pc->custom_free_function(p);
 801a932:	6923      	ldr	r3, [r4, #16]
 801a934:	e7ba      	b.n	801a8ac <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801a936:	4621      	mov	r1, r4
 801a938:	200e      	movs	r0, #14
 801a93a:	f7ff fd91 	bl	801a460 <memp_free>
 801a93e:	e7b7      	b.n	801a8b0 <pbuf_free.part.0+0x20>
  count = 0;
 801a940:	4605      	mov	r5, r0
 801a942:	e7d6      	b.n	801a8f2 <pbuf_free.part.0+0x62>
 801a944:	080432f0 	.word	0x080432f0
 801a948:	0802bdc0 	.word	0x0802bdc0
 801a94c:	0804335c 	.word	0x0804335c
 801a950:	08043338 	.word	0x08043338
 801a954:	08043320 	.word	0x08043320

0801a958 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801a95c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a95e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801aa84 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a962:	4605      	mov	r5, r0
 801a964:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801a966:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a968:	8944      	ldrh	r4, [r0, #10]
 801a96a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a96c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801aa98 <pbuf_copy.part.0+0x140>
 801a970:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801aa8c <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a974:	1be4      	subs	r4, r4, r7
 801a976:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a978:	6868      	ldr	r0, [r5, #4]
 801a97a:	4294      	cmp	r4, r2
 801a97c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a980:	4438      	add	r0, r7
 801a982:	bf28      	it	cs
 801a984:	4614      	movcs	r4, r2
 801a986:	4431      	add	r1, r6
 801a988:	4622      	mov	r2, r4
    offset_to += len;
 801a98a:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a98c:	f009 fb5a 	bl	8024044 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a990:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801a992:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a994:	429f      	cmp	r7, r3
 801a996:	d837      	bhi.n	801aa08 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a998:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a99c:	4296      	cmp	r6, r2
 801a99e:	d829      	bhi.n	801a9f4 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801a9a0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801a9a2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801a9a4:	d317      	bcc.n	801a9d6 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801a9a6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801a9a8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801a9ac:	d04b      	beq.n	801aa46 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a9ae:	f1b8 0f00 	cmp.w	r8, #0
 801a9b2:	d144      	bne.n	801aa3e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a9b4:	892a      	ldrh	r2, [r5, #8]
 801a9b6:	896b      	ldrh	r3, [r5, #10]
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	d14c      	bne.n	801aa56 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a9bc:	6828      	ldr	r0, [r5, #0]
 801a9be:	b140      	cbz	r0, 801a9d2 <pbuf_copy.part.0+0x7a>
 801a9c0:	4b30      	ldr	r3, [pc, #192]	; (801aa84 <pbuf_copy.part.0+0x12c>)
 801a9c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801a9c6:	4930      	ldr	r1, [pc, #192]	; (801aa88 <pbuf_copy.part.0+0x130>)
 801a9c8:	4830      	ldr	r0, [pc, #192]	; (801aa8c <pbuf_copy.part.0+0x134>)
 801a9ca:	f00a faff 	bl	8024fcc <iprintf>
 801a9ce:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801a9d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801a9d6:	429f      	cmp	r7, r3
 801a9d8:	d040      	beq.n	801aa5c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a9da:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d01a      	beq.n	801aa18 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a9e2:	896c      	ldrh	r4, [r5, #10]
 801a9e4:	2d00      	cmp	r5, #0
 801a9e6:	d0c5      	beq.n	801a974 <pbuf_copy.part.0+0x1c>
 801a9e8:	892b      	ldrh	r3, [r5, #8]
 801a9ea:	42a3      	cmp	r3, r4
 801a9ec:	d045      	beq.n	801aa7a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a9ee:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a9f2:	e7bf      	b.n	801a974 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a9f4:	f240 32da 	movw	r2, #986	; 0x3da
 801a9f8:	4653      	mov	r3, sl
 801a9fa:	4925      	ldr	r1, [pc, #148]	; (801aa90 <pbuf_copy.part.0+0x138>)
 801a9fc:	4648      	mov	r0, r9
 801a9fe:	f00a fae5 	bl	8024fcc <iprintf>
    if (offset_from >= p_from->len) {
 801aa02:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801aa06:	e7cb      	b.n	801a9a0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801aa08:	4653      	mov	r3, sl
 801aa0a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801aa0e:	4659      	mov	r1, fp
 801aa10:	4648      	mov	r0, r9
 801aa12:	f00a fadb 	bl	8024fcc <iprintf>
 801aa16:	e7bf      	b.n	801a998 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801aa18:	f8d8 3000 	ldr.w	r3, [r8]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d0e0      	beq.n	801a9e2 <pbuf_copy.part.0+0x8a>
 801aa20:	4b18      	ldr	r3, [pc, #96]	; (801aa84 <pbuf_copy.part.0+0x12c>)
 801aa22:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801aa26:	4918      	ldr	r1, [pc, #96]	; (801aa88 <pbuf_copy.part.0+0x130>)
 801aa28:	4818      	ldr	r0, [pc, #96]	; (801aa8c <pbuf_copy.part.0+0x134>)
 801aa2a:	f00a facf 	bl	8024fcc <iprintf>
 801aa2e:	f06f 0005 	mvn.w	r0, #5
}
 801aa32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801aa36:	f1b8 0f00 	cmp.w	r8, #0
 801aa3a:	d00a      	beq.n	801aa52 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801aa3c:	2700      	movs	r7, #0
 801aa3e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801aa40:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801aa44:	e7c9      	b.n	801a9da <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801aa46:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801aa48:	2d00      	cmp	r5, #0
 801aa4a:	d1f4      	bne.n	801aa36 <pbuf_copy.part.0+0xde>
 801aa4c:	f1b8 0f00 	cmp.w	r8, #0
 801aa50:	d108      	bne.n	801aa64 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801aa52:	2d00      	cmp	r5, #0
 801aa54:	d1ae      	bne.n	801a9b4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801aa56:	2000      	movs	r0, #0
}
 801aa58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801aa5c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801aa5e:	b10d      	cbz	r5, 801aa64 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801aa60:	2700      	movs	r7, #0
 801aa62:	e7ed      	b.n	801aa40 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801aa64:	4b07      	ldr	r3, [pc, #28]	; (801aa84 <pbuf_copy.part.0+0x12c>)
 801aa66:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801aa6a:	490a      	ldr	r1, [pc, #40]	; (801aa94 <pbuf_copy.part.0+0x13c>)
 801aa6c:	4807      	ldr	r0, [pc, #28]	; (801aa8c <pbuf_copy.part.0+0x134>)
 801aa6e:	f00a faad 	bl	8024fcc <iprintf>
 801aa72:	f06f 000f 	mvn.w	r0, #15
}
 801aa76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801aa7a:	682b      	ldr	r3, [r5, #0]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d0b6      	beq.n	801a9ee <pbuf_copy.part.0+0x96>
 801aa80:	e79e      	b.n	801a9c0 <pbuf_copy.part.0+0x68>
 801aa82:	bf00      	nop
 801aa84:	080432f0 	.word	0x080432f0
 801aa88:	080433b4 	.word	0x080433b4
 801aa8c:	0802bdc0 	.word	0x0802bdc0
 801aa90:	08043388 	.word	0x08043388
 801aa94:	080433a4 	.word	0x080433a4
 801aa98:	08043370 	.word	0x08043370

0801aa9c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801aa9c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801aaa0:	2b01      	cmp	r3, #1
{
 801aaa2:	b570      	push	{r4, r5, r6, lr}
 801aaa4:	4614      	mov	r4, r2
 801aaa6:	4606      	mov	r6, r0
 801aaa8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801aaaa:	d110      	bne.n	801aace <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801aaac:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801aab0:	490b      	ldr	r1, [pc, #44]	; (801aae0 <pbuf_alloc_reference+0x44>)
 801aab2:	200e      	movs	r0, #14
 801aab4:	f7ff fc9e 	bl	801a3f4 <memp_malloc_fn>
  if (p == NULL) {
 801aab8:	b140      	cbz	r0, 801aacc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801aaba:	2300      	movs	r3, #0
  p->ref = 1;
 801aabc:	2201      	movs	r2, #1
  p->payload = payload;
 801aabe:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801aac0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801aac2:	6003      	str	r3, [r0, #0]
  p->len = len;
 801aac4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801aac6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801aac8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801aaca:	81c2      	strh	r2, [r0, #14]
}
 801aacc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801aace:	4b04      	ldr	r3, [pc, #16]	; (801aae0 <pbuf_alloc_reference+0x44>)
 801aad0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801aad4:	4903      	ldr	r1, [pc, #12]	; (801aae4 <pbuf_alloc_reference+0x48>)
 801aad6:	4804      	ldr	r0, [pc, #16]	; (801aae8 <pbuf_alloc_reference+0x4c>)
 801aad8:	f00a fa78 	bl	8024fcc <iprintf>
 801aadc:	e7e6      	b.n	801aaac <pbuf_alloc_reference+0x10>
 801aade:	bf00      	nop
 801aae0:	080432f0 	.word	0x080432f0
 801aae4:	080433e0 	.word	0x080433e0
 801aae8:	0802bdc0 	.word	0x0802bdc0

0801aaec <pbuf_alloc>:
  switch (type) {
 801aaec:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf4:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801aaf6:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801aafa:	d03d      	beq.n	801ab78 <pbuf_alloc+0x8c>
 801aafc:	d80e      	bhi.n	801ab1c <pbuf_alloc+0x30>
 801aafe:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801ab02:	2c01      	cmp	r4, #1
 801ab04:	d033      	beq.n	801ab6e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ab06:	4b41      	ldr	r3, [pc, #260]	; (801ac0c <pbuf_alloc+0x120>)
 801ab08:	f240 1227 	movw	r2, #295	; 0x127
 801ab0c:	4940      	ldr	r1, [pc, #256]	; (801ac10 <pbuf_alloc+0x124>)
      return NULL;
 801ab0e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ab10:	4840      	ldr	r0, [pc, #256]	; (801ac14 <pbuf_alloc+0x128>)
 801ab12:	f00a fa5b 	bl	8024fcc <iprintf>
}
 801ab16:	4628      	mov	r0, r5
 801ab18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801ab1c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801ab20:	d1f1      	bne.n	801ab06 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ab22:	f10a 0303 	add.w	r3, sl, #3
 801ab26:	1cca      	adds	r2, r1, #3
 801ab28:	4606      	mov	r6, r0
 801ab2a:	f022 0203 	bic.w	r2, r2, #3
 801ab2e:	f023 0303 	bic.w	r3, r3, #3
 801ab32:	4413      	add	r3, r2
 801ab34:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ab36:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ab3a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ab3c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ab3e:	d34d      	bcc.n	801abdc <pbuf_alloc+0xf0>
 801ab40:	4282      	cmp	r2, r0
 801ab42:	d84b      	bhi.n	801abdc <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801ab44:	f7ff fab4 	bl	801a0b0 <mem_malloc>
      if (p == NULL) {
 801ab48:	4605      	mov	r5, r0
 801ab4a:	2800      	cmp	r0, #0
 801ab4c:	d0e3      	beq.n	801ab16 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801ab4e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801ab50:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801ab52:	4a31      	ldr	r2, [pc, #196]	; (801ac18 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801ab54:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801ab56:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801ab5a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801ab5c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801ab60:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801ab64:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801ab66:	6043      	str	r3, [r0, #4]
}
 801ab68:	4628      	mov	r0, r5
 801ab6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801ab6e:	2000      	movs	r0, #0
}
 801ab70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801ab74:	f7ff bf92 	b.w	801aa9c <pbuf_alloc_reference>
  switch (type) {
 801ab78:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801ab7a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801ac0c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801ab7e:	4f27      	ldr	r7, [pc, #156]	; (801ac1c <pbuf_alloc+0x130>)
  switch (type) {
 801ab80:	4625      	mov	r5, r4
 801ab82:	e009      	b.n	801ab98 <pbuf_alloc+0xac>
          last->next = q;
 801ab84:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801ab86:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801ab8a:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801ab8e:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801ab92:	f1b9 0f00 	cmp.w	r9, #0
 801ab96:	d0be      	beq.n	801ab16 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801ab98:	22f3      	movs	r2, #243	; 0xf3
 801ab9a:	4641      	mov	r1, r8
 801ab9c:	200f      	movs	r0, #15
 801ab9e:	4626      	mov	r6, r4
 801aba0:	f7ff fc28 	bl	801a3f4 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801aba4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801aba8:	2100      	movs	r1, #0
        if (q == NULL) {
 801abaa:	4604      	mov	r4, r0
 801abac:	b1d0      	cbz	r0, 801abe4 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801abae:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801abb2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801abb6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801abba:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801abbe:	3213      	adds	r2, #19
  p->next = NULL;
 801abc0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801abc2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801abc4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801abc8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801abca:	454b      	cmp	r3, r9
  p->payload = payload;
 801abcc:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801abce:	bf28      	it	cs
 801abd0:	464b      	movcs	r3, r9
  p->len = len;
 801abd2:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801abd4:	2d00      	cmp	r5, #0
 801abd6:	d1d5      	bne.n	801ab84 <pbuf_alloc+0x98>
 801abd8:	4605      	mov	r5, r0
 801abda:	e7d4      	b.n	801ab86 <pbuf_alloc+0x9a>
          return NULL;
 801abdc:	2500      	movs	r5, #0
}
 801abde:	4628      	mov	r0, r5
 801abe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801abe4:	4e0e      	ldr	r6, [pc, #56]	; (801ac20 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801abe6:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801abe8:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801abea:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801abec:	b133      	cbz	r3, 801abfc <pbuf_alloc+0x110>
          if (p) {
 801abee:	2d00      	cmp	r5, #0
 801abf0:	d0f4      	beq.n	801abdc <pbuf_alloc+0xf0>
  if (p == NULL) {
 801abf2:	4628      	mov	r0, r5
          return NULL;
 801abf4:	2500      	movs	r5, #0
 801abf6:	f7ff fe4b 	bl	801a890 <pbuf_free.part.0>
 801abfa:	e78c      	b.n	801ab16 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801abfc:	4601      	mov	r1, r0
 801abfe:	4809      	ldr	r0, [pc, #36]	; (801ac24 <pbuf_alloc+0x138>)
 801ac00:	f7fc fefc 	bl	80179fc <tcpip_try_callback>
 801ac04:	2800      	cmp	r0, #0
 801ac06:	d0f2      	beq.n	801abee <pbuf_alloc+0x102>
 801ac08:	7034      	strb	r4, [r6, #0]
 801ac0a:	e7f0      	b.n	801abee <pbuf_alloc+0x102>
 801ac0c:	080432f0 	.word	0x080432f0
 801ac10:	080433f4 	.word	0x080433f4
 801ac14:	0802bdc0 	.word	0x0802bdc0
 801ac18:	00010080 	.word	0x00010080
 801ac1c:	00010082 	.word	0x00010082
 801ac20:	2002dbcd 	.word	0x2002dbcd
 801ac24:	0801a869 	.word	0x0801a869

0801ac28 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ac28:	3003      	adds	r0, #3
 801ac2a:	f020 0003 	bic.w	r0, r0, #3
{
 801ac2e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ac30:	eb01 0e00 	add.w	lr, r1, r0
{
 801ac34:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801ac38:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ac3a:	45e6      	cmp	lr, ip
 801ac3c:	d80d      	bhi.n	801ac5a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801ac3e:	b104      	cbz	r4, 801ac42 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ac40:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801ac42:	4618      	mov	r0, r3
  p->next = NULL;
 801ac44:	2300      	movs	r3, #0
  p->payload = payload;
 801ac46:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801ac48:	2402      	movs	r4, #2
  p->next = NULL;
 801ac4a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801ac4c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801ac4e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801ac50:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801ac52:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801ac54:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801ac56:	81c3      	strh	r3, [r0, #14]
}
 801ac58:	bd10      	pop	{r4, pc}
    return NULL;
 801ac5a:	2000      	movs	r0, #0
}
 801ac5c:	bd10      	pop	{r4, pc}
 801ac5e:	bf00      	nop

0801ac60 <pbuf_realloc>:
{
 801ac60:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ac62:	4604      	mov	r4, r0
{
 801ac64:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ac66:	2800      	cmp	r0, #0
 801ac68:	d037      	beq.n	801acda <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801ac6a:	8922      	ldrh	r2, [r4, #8]
 801ac6c:	42aa      	cmp	r2, r5
 801ac6e:	d91b      	bls.n	801aca8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801ac70:	8963      	ldrh	r3, [r4, #10]
 801ac72:	429d      	cmp	r5, r3
 801ac74:	d90d      	bls.n	801ac92 <pbuf_realloc+0x32>
 801ac76:	1aa9      	subs	r1, r5, r2
 801ac78:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801ac7a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801ac7c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801ac7e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801ac80:	b29d      	uxth	r5, r3
    q = q->next;
 801ac82:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ac84:	2c00      	cmp	r4, #0
 801ac86:	d030      	beq.n	801acea <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801ac88:	8963      	ldrh	r3, [r4, #10]
 801ac8a:	42ab      	cmp	r3, r5
 801ac8c:	d201      	bcs.n	801ac92 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801ac8e:	8922      	ldrh	r2, [r4, #8]
 801ac90:	e7f3      	b.n	801ac7a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801ac92:	7b22      	ldrb	r2, [r4, #12]
 801ac94:	0712      	lsls	r2, r2, #28
 801ac96:	d008      	beq.n	801acaa <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801ac98:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801ac9a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801ac9c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801ac9e:	b108      	cbz	r0, 801aca4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801aca0:	f7ff fdf6 	bl	801a890 <pbuf_free.part.0>
  q->next = NULL;
 801aca4:	2300      	movs	r3, #0
 801aca6:	6023      	str	r3, [r4, #0]
}
 801aca8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801acaa:	429d      	cmp	r5, r3
 801acac:	d0f4      	beq.n	801ac98 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801acae:	7b63      	ldrb	r3, [r4, #13]
 801acb0:	079b      	lsls	r3, r3, #30
 801acb2:	d4f1      	bmi.n	801ac98 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801acb4:	6863      	ldr	r3, [r4, #4]
 801acb6:	4620      	mov	r0, r4
 801acb8:	1b1b      	subs	r3, r3, r4
 801acba:	18e9      	adds	r1, r5, r3
 801acbc:	b289      	uxth	r1, r1
 801acbe:	f7ff f91d 	bl	8019efc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801acc2:	4604      	mov	r4, r0
 801acc4:	2800      	cmp	r0, #0
 801acc6:	d1e7      	bne.n	801ac98 <pbuf_realloc+0x38>
 801acc8:	4b0c      	ldr	r3, [pc, #48]	; (801acfc <pbuf_realloc+0x9c>)
 801acca:	f240 12bd 	movw	r2, #445	; 0x1bd
 801acce:	490c      	ldr	r1, [pc, #48]	; (801ad00 <pbuf_realloc+0xa0>)
 801acd0:	480c      	ldr	r0, [pc, #48]	; (801ad04 <pbuf_realloc+0xa4>)
 801acd2:	f00a f97b 	bl	8024fcc <iprintf>
  q->len = rem_len;
 801acd6:	8164      	strh	r4, [r4, #10]
 801acd8:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801acda:	4b08      	ldr	r3, [pc, #32]	; (801acfc <pbuf_realloc+0x9c>)
 801acdc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ace0:	4909      	ldr	r1, [pc, #36]	; (801ad08 <pbuf_realloc+0xa8>)
 801ace2:	4808      	ldr	r0, [pc, #32]	; (801ad04 <pbuf_realloc+0xa4>)
 801ace4:	f00a f972 	bl	8024fcc <iprintf>
 801ace8:	e7bf      	b.n	801ac6a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801acea:	4b04      	ldr	r3, [pc, #16]	; (801acfc <pbuf_realloc+0x9c>)
 801acec:	f240 12af 	movw	r2, #431	; 0x1af
 801acf0:	4906      	ldr	r1, [pc, #24]	; (801ad0c <pbuf_realloc+0xac>)
 801acf2:	4804      	ldr	r0, [pc, #16]	; (801ad04 <pbuf_realloc+0xa4>)
 801acf4:	f00a f96a 	bl	8024fcc <iprintf>
  while (rem_len > q->len) {
 801acf8:	8963      	ldrh	r3, [r4, #10]
 801acfa:	deff      	udf	#255	; 0xff
 801acfc:	080432f0 	.word	0x080432f0
 801ad00:	08043440 	.word	0x08043440
 801ad04:	0802bdc0 	.word	0x0802bdc0
 801ad08:	08043410 	.word	0x08043410
 801ad0c:	08043428 	.word	0x08043428

0801ad10 <pbuf_add_header>:
{
 801ad10:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ad12:	b310      	cbz	r0, 801ad5a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801ad14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801ad18:	d20c      	bcs.n	801ad34 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801ad1a:	b169      	cbz	r1, 801ad38 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801ad1c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ad20:	8902      	ldrh	r2, [r0, #8]
 801ad22:	4603      	mov	r3, r0
 801ad24:	4462      	add	r2, ip
 801ad26:	b292      	uxth	r2, r2
 801ad28:	4594      	cmp	ip, r2
 801ad2a:	d803      	bhi.n	801ad34 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ad2c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801ad30:	2800      	cmp	r0, #0
 801ad32:	db03      	blt.n	801ad3c <pbuf_add_header+0x2c>
    return 1;
 801ad34:	2001      	movs	r0, #1
}
 801ad36:	bd08      	pop	{r3, pc}
    return 0;
 801ad38:	4608      	mov	r0, r1
}
 801ad3a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801ad3c:	6858      	ldr	r0, [r3, #4]
 801ad3e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ad40:	f103 0010 	add.w	r0, r3, #16
 801ad44:	4281      	cmp	r1, r0
 801ad46:	d3f5      	bcc.n	801ad34 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801ad48:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801ad4c:	2000      	movs	r0, #0
  p->payload = payload;
 801ad4e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ad50:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ad52:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ad54:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801ad58:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ad5a:	4b04      	ldr	r3, [pc, #16]	; (801ad6c <pbuf_add_header+0x5c>)
 801ad5c:	f240 12df 	movw	r2, #479	; 0x1df
 801ad60:	4903      	ldr	r1, [pc, #12]	; (801ad70 <pbuf_add_header+0x60>)
 801ad62:	4804      	ldr	r0, [pc, #16]	; (801ad74 <pbuf_add_header+0x64>)
 801ad64:	f00a f932 	bl	8024fcc <iprintf>
    return 1;
 801ad68:	2001      	movs	r0, #1
}
 801ad6a:	bd08      	pop	{r3, pc}
 801ad6c:	080432f0 	.word	0x080432f0
 801ad70:	08044d1c 	.word	0x08044d1c
 801ad74:	0802bdc0 	.word	0x0802bdc0

0801ad78 <pbuf_remove_header>:
{
 801ad78:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ad7a:	b1c8      	cbz	r0, 801adb0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ad7c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801ad80:	d21f      	bcs.n	801adc2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801ad82:	b199      	cbz	r1, 801adac <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801ad84:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ad88:	8942      	ldrh	r2, [r0, #10]
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	4594      	cmp	ip, r2
 801ad8e:	d81a      	bhi.n	801adc6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ad90:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801ad92:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ad96:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ad9a:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801ad9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ad9e:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801ada2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ada4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ada6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801adaa:	bd08      	pop	{r3, pc}
    return 0;
 801adac:	4608      	mov	r0, r1
}
 801adae:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801adb0:	4b09      	ldr	r3, [pc, #36]	; (801add8 <pbuf_remove_header+0x60>)
 801adb2:	f240 224b 	movw	r2, #587	; 0x24b
 801adb6:	4909      	ldr	r1, [pc, #36]	; (801addc <pbuf_remove_header+0x64>)
 801adb8:	4809      	ldr	r0, [pc, #36]	; (801ade0 <pbuf_remove_header+0x68>)
 801adba:	f00a f907 	bl	8024fcc <iprintf>
    return 1;
 801adbe:	2001      	movs	r0, #1
}
 801adc0:	bd08      	pop	{r3, pc}
    return 1;
 801adc2:	2001      	movs	r0, #1
}
 801adc4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801adc6:	4b04      	ldr	r3, [pc, #16]	; (801add8 <pbuf_remove_header+0x60>)
 801adc8:	f240 2255 	movw	r2, #597	; 0x255
 801adcc:	4905      	ldr	r1, [pc, #20]	; (801ade4 <pbuf_remove_header+0x6c>)
 801adce:	4804      	ldr	r0, [pc, #16]	; (801ade0 <pbuf_remove_header+0x68>)
 801add0:	f00a f8fc 	bl	8024fcc <iprintf>
 801add4:	2001      	movs	r0, #1
}
 801add6:	bd08      	pop	{r3, pc}
 801add8:	080432f0 	.word	0x080432f0
 801addc:	08044d1c 	.word	0x08044d1c
 801ade0:	0802bdc0 	.word	0x0802bdc0
 801ade4:	0804345c 	.word	0x0804345c

0801ade8 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801ade8:	2900      	cmp	r1, #0
 801adea:	db1a      	blt.n	801ae22 <pbuf_header_force+0x3a>
{
 801adec:	b508      	push	{r3, lr}
 801adee:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801adf0:	b1d0      	cbz	r0, 801ae28 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801adf2:	b341      	cbz	r1, 801ae46 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801adf4:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801adf8:	891a      	ldrh	r2, [r3, #8]
 801adfa:	4462      	add	r2, ip
 801adfc:	b292      	uxth	r2, r2
 801adfe:	4594      	cmp	ip, r2
 801ae00:	d81f      	bhi.n	801ae42 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ae02:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801ae06:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801ae08:	6858      	ldr	r0, [r3, #4]
 801ae0a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ae0e:	db14      	blt.n	801ae3a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801ae10:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801ae14:	2000      	movs	r0, #0
  p->payload = payload;
 801ae16:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ae18:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ae1a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ae1c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801ae20:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801ae22:	4249      	negs	r1, r1
 801ae24:	f7ff bfa8 	b.w	801ad78 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801ae28:	4b08      	ldr	r3, [pc, #32]	; (801ae4c <pbuf_header_force+0x64>)
 801ae2a:	f240 12df 	movw	r2, #479	; 0x1df
 801ae2e:	4908      	ldr	r1, [pc, #32]	; (801ae50 <pbuf_header_force+0x68>)
 801ae30:	4808      	ldr	r0, [pc, #32]	; (801ae54 <pbuf_header_force+0x6c>)
 801ae32:	f00a f8cb 	bl	8024fcc <iprintf>
    return 1;
 801ae36:	2001      	movs	r0, #1
}
 801ae38:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ae3a:	f103 0010 	add.w	r0, r3, #16
 801ae3e:	4281      	cmp	r1, r0
 801ae40:	d2e6      	bcs.n	801ae10 <pbuf_header_force+0x28>
    return 1;
 801ae42:	2001      	movs	r0, #1
}
 801ae44:	bd08      	pop	{r3, pc}
    return 0;
 801ae46:	4608      	mov	r0, r1
}
 801ae48:	bd08      	pop	{r3, pc}
 801ae4a:	bf00      	nop
 801ae4c:	080432f0 	.word	0x080432f0
 801ae50:	08044d1c 	.word	0x08044d1c
 801ae54:	0802bdc0 	.word	0x0802bdc0

0801ae58 <pbuf_free>:
  if (p == NULL) {
 801ae58:	b108      	cbz	r0, 801ae5e <pbuf_free+0x6>
 801ae5a:	f7ff bd19 	b.w	801a890 <pbuf_free.part.0>
{
 801ae5e:	b510      	push	{r4, lr}
 801ae60:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801ae62:	4b04      	ldr	r3, [pc, #16]	; (801ae74 <pbuf_free+0x1c>)
 801ae64:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801ae68:	4903      	ldr	r1, [pc, #12]	; (801ae78 <pbuf_free+0x20>)
 801ae6a:	4804      	ldr	r0, [pc, #16]	; (801ae7c <pbuf_free+0x24>)
 801ae6c:	f00a f8ae 	bl	8024fcc <iprintf>
}
 801ae70:	4620      	mov	r0, r4
 801ae72:	bd10      	pop	{r4, pc}
 801ae74:	080432f0 	.word	0x080432f0
 801ae78:	08044d1c 	.word	0x08044d1c
 801ae7c:	0802bdc0 	.word	0x0802bdc0

0801ae80 <pbuf_clen>:
  while (p != NULL) {
 801ae80:	4603      	mov	r3, r0
 801ae82:	b130      	cbz	r0, 801ae92 <pbuf_clen+0x12>
  len = 0;
 801ae84:	2000      	movs	r0, #0
    ++len;
 801ae86:	3001      	adds	r0, #1
    p = p->next;
 801ae88:	681b      	ldr	r3, [r3, #0]
    ++len;
 801ae8a:	b280      	uxth	r0, r0
  while (p != NULL) {
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d1fa      	bne.n	801ae86 <pbuf_clen+0x6>
 801ae90:	4770      	bx	lr
}
 801ae92:	4770      	bx	lr

0801ae94 <pbuf_ref>:
  if (p != NULL) {
 801ae94:	b120      	cbz	r0, 801aea0 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801ae96:	7b83      	ldrb	r3, [r0, #14]
 801ae98:	3301      	adds	r3, #1
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ae9e:	b103      	cbz	r3, 801aea2 <pbuf_ref+0xe>
}
 801aea0:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801aea2:	4b03      	ldr	r3, [pc, #12]	; (801aeb0 <pbuf_ref+0x1c>)
 801aea4:	f240 3242 	movw	r2, #834	; 0x342
 801aea8:	4902      	ldr	r1, [pc, #8]	; (801aeb4 <pbuf_ref+0x20>)
 801aeaa:	4803      	ldr	r0, [pc, #12]	; (801aeb8 <pbuf_ref+0x24>)
 801aeac:	f00a b88e 	b.w	8024fcc <iprintf>
 801aeb0:	080432f0 	.word	0x080432f0
 801aeb4:	0804347c 	.word	0x0804347c
 801aeb8:	0802bdc0 	.word	0x0802bdc0

0801aebc <pbuf_cat>:
{
 801aebc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801aebe:	b330      	cbz	r0, 801af0e <pbuf_cat+0x52>
 801aec0:	460d      	mov	r5, r1
 801aec2:	b321      	cbz	r1, 801af0e <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801aec4:	6803      	ldr	r3, [r0, #0]
 801aec6:	4604      	mov	r4, r0
 801aec8:	b13b      	cbz	r3, 801aeda <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801aeca:	8922      	ldrh	r2, [r4, #8]
 801aecc:	8928      	ldrh	r0, [r5, #8]
 801aece:	4402      	add	r2, r0
 801aed0:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801aed2:	461c      	mov	r4, r3
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d1f7      	bne.n	801aeca <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801aeda:	8963      	ldrh	r3, [r4, #10]
 801aedc:	8922      	ldrh	r2, [r4, #8]
 801aede:	429a      	cmp	r2, r3
 801aee0:	d010      	beq.n	801af04 <pbuf_cat+0x48>
 801aee2:	4b0f      	ldr	r3, [pc, #60]	; (801af20 <pbuf_cat+0x64>)
 801aee4:	f240 3262 	movw	r2, #866	; 0x362
 801aee8:	490e      	ldr	r1, [pc, #56]	; (801af24 <pbuf_cat+0x68>)
 801aeea:	480f      	ldr	r0, [pc, #60]	; (801af28 <pbuf_cat+0x6c>)
 801aeec:	f00a f86e 	bl	8024fcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801aef0:	6823      	ldr	r3, [r4, #0]
 801aef2:	b133      	cbz	r3, 801af02 <pbuf_cat+0x46>
 801aef4:	4b0a      	ldr	r3, [pc, #40]	; (801af20 <pbuf_cat+0x64>)
 801aef6:	f240 3263 	movw	r2, #867	; 0x363
 801aefa:	490c      	ldr	r1, [pc, #48]	; (801af2c <pbuf_cat+0x70>)
 801aefc:	480a      	ldr	r0, [pc, #40]	; (801af28 <pbuf_cat+0x6c>)
 801aefe:	f00a f865 	bl	8024fcc <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801af02:	8923      	ldrh	r3, [r4, #8]
 801af04:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801af06:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801af08:	4413      	add	r3, r2
 801af0a:	8123      	strh	r3, [r4, #8]
}
 801af0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801af0e:	4b04      	ldr	r3, [pc, #16]	; (801af20 <pbuf_cat+0x64>)
 801af10:	f240 3259 	movw	r2, #857	; 0x359
 801af14:	4906      	ldr	r1, [pc, #24]	; (801af30 <pbuf_cat+0x74>)
 801af16:	4804      	ldr	r0, [pc, #16]	; (801af28 <pbuf_cat+0x6c>)
}
 801af18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801af1c:	f00a b856 	b.w	8024fcc <iprintf>
 801af20:	080432f0 	.word	0x080432f0
 801af24:	080434c8 	.word	0x080434c8
 801af28:	0802bdc0 	.word	0x0802bdc0
 801af2c:	080434f8 	.word	0x080434f8
 801af30:	08043490 	.word	0x08043490

0801af34 <pbuf_chain>:
{
 801af34:	b510      	push	{r4, lr}
 801af36:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801af38:	f7ff ffc0 	bl	801aebc <pbuf_cat>
  if (p != NULL) {
 801af3c:	b124      	cbz	r4, 801af48 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801af3e:	7ba3      	ldrb	r3, [r4, #14]
 801af40:	3301      	adds	r3, #1
 801af42:	b2db      	uxtb	r3, r3
 801af44:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801af46:	b103      	cbz	r3, 801af4a <pbuf_chain+0x16>
}
 801af48:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801af4a:	4b04      	ldr	r3, [pc, #16]	; (801af5c <pbuf_chain+0x28>)
 801af4c:	f240 3242 	movw	r2, #834	; 0x342
 801af50:	4903      	ldr	r1, [pc, #12]	; (801af60 <pbuf_chain+0x2c>)
 801af52:	4804      	ldr	r0, [pc, #16]	; (801af64 <pbuf_chain+0x30>)
}
 801af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801af58:	f00a b838 	b.w	8024fcc <iprintf>
 801af5c:	080432f0 	.word	0x080432f0
 801af60:	0804347c 	.word	0x0804347c
 801af64:	0802bdc0 	.word	0x0802bdc0

0801af68 <pbuf_copy>:
{
 801af68:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801af6a:	b140      	cbz	r0, 801af7e <pbuf_copy+0x16>
 801af6c:	b139      	cbz	r1, 801af7e <pbuf_copy+0x16>
 801af6e:	8902      	ldrh	r2, [r0, #8]
 801af70:	890b      	ldrh	r3, [r1, #8]
 801af72:	429a      	cmp	r2, r3
 801af74:	d303      	bcc.n	801af7e <pbuf_copy+0x16>
}
 801af76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801af7a:	f7ff bced 	b.w	801a958 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801af7e:	4b05      	ldr	r3, [pc, #20]	; (801af94 <pbuf_copy+0x2c>)
 801af80:	f240 32c9 	movw	r2, #969	; 0x3c9
 801af84:	4904      	ldr	r1, [pc, #16]	; (801af98 <pbuf_copy+0x30>)
 801af86:	4805      	ldr	r0, [pc, #20]	; (801af9c <pbuf_copy+0x34>)
 801af88:	f00a f820 	bl	8024fcc <iprintf>
}
 801af8c:	f06f 000f 	mvn.w	r0, #15
 801af90:	bd08      	pop	{r3, pc}
 801af92:	bf00      	nop
 801af94:	080432f0 	.word	0x080432f0
 801af98:	08043508 	.word	0x08043508
 801af9c:	0802bdc0 	.word	0x0802bdc0

0801afa0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801afa4:	4605      	mov	r5, r0
 801afa6:	b370      	cbz	r0, 801b006 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801afa8:	460f      	mov	r7, r1
 801afaa:	2900      	cmp	r1, #0
 801afac:	d036      	beq.n	801b01c <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801afae:	4690      	mov	r8, r2
 801afb0:	b392      	cbz	r2, 801b018 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801afb2:	2600      	movs	r6, #0
 801afb4:	e005      	b.n	801afc2 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801afb6:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801afb8:	682d      	ldr	r5, [r5, #0]
 801afba:	f1b8 0f00 	cmp.w	r8, #0
 801afbe:	d01f      	beq.n	801b000 <pbuf_copy_partial+0x60>
 801afc0:	b1f5      	cbz	r5, 801b000 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801afc2:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801afc4:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801afc8:	b11b      	cbz	r3, 801afd2 <pbuf_copy_partial+0x32>
 801afca:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801afcc:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801afd0:	d2f1      	bcs.n	801afb6 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801afd2:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801afd6:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801afd8:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801afdc:	4419      	add	r1, r3
 801afde:	4544      	cmp	r4, r8
 801afe0:	bf28      	it	cs
 801afe2:	4644      	movcs	r4, r8
 801afe4:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801afe6:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801afe8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801afec:	f009 f82a 	bl	8024044 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801aff0:	b2b6      	uxth	r6, r6
      offset = 0;
 801aff2:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801aff4:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aff8:	682d      	ldr	r5, [r5, #0]
 801affa:	f1b8 0f00 	cmp.w	r8, #0
 801affe:	d1df      	bne.n	801afc0 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801b000:	4630      	mov	r0, r6
 801b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b006:	4b0a      	ldr	r3, [pc, #40]	; (801b030 <pbuf_copy_partial+0x90>)
 801b008:	f240 420a 	movw	r2, #1034	; 0x40a
 801b00c:	4909      	ldr	r1, [pc, #36]	; (801b034 <pbuf_copy_partial+0x94>)
 801b00e:	462e      	mov	r6, r5
 801b010:	4809      	ldr	r0, [pc, #36]	; (801b038 <pbuf_copy_partial+0x98>)
 801b012:	f009 ffdb 	bl	8024fcc <iprintf>
 801b016:	e7f3      	b.n	801b000 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801b018:	4616      	mov	r6, r2
 801b01a:	e7f1      	b.n	801b000 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b01c:	4b04      	ldr	r3, [pc, #16]	; (801b030 <pbuf_copy_partial+0x90>)
 801b01e:	f240 420b 	movw	r2, #1035	; 0x40b
 801b022:	4906      	ldr	r1, [pc, #24]	; (801b03c <pbuf_copy_partial+0x9c>)
 801b024:	463e      	mov	r6, r7
 801b026:	4804      	ldr	r0, [pc, #16]	; (801b038 <pbuf_copy_partial+0x98>)
 801b028:	f009 ffd0 	bl	8024fcc <iprintf>
 801b02c:	e7e8      	b.n	801b000 <pbuf_copy_partial+0x60>
 801b02e:	bf00      	nop
 801b030:	080432f0 	.word	0x080432f0
 801b034:	08043538 	.word	0x08043538
 801b038:	0802bdc0 	.word	0x0802bdc0
 801b03c:	08043558 	.word	0x08043558

0801b040 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801b040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b044:	2800      	cmp	r0, #0
 801b046:	d049      	beq.n	801b0dc <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b048:	460f      	mov	r7, r1
 801b04a:	2900      	cmp	r1, #0
 801b04c:	d03c      	beq.n	801b0c8 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b04e:	8903      	ldrh	r3, [r0, #8]
 801b050:	4604      	mov	r4, r0
 801b052:	4690      	mov	r8, r2
 801b054:	4293      	cmp	r3, r2
 801b056:	d32d      	bcc.n	801b0b4 <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b058:	b34a      	cbz	r2, 801b0ae <pbuf_take+0x6e>
 801b05a:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801b05c:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b05e:	f8df b094 	ldr.w	fp, [pc, #148]	; 801b0f4 <pbuf_take+0xb4>
 801b062:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801b108 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801b066:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b068:	19b9      	adds	r1, r7, r6
 801b06a:	6860      	ldr	r0, [r4, #4]
 801b06c:	42aa      	cmp	r2, r5
 801b06e:	bf28      	it	cs
 801b070:	462a      	movcs	r2, r5
 801b072:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801b074:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b076:	f008 ffe5 	bl	8024044 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b07a:	6824      	ldr	r4, [r4, #0]
 801b07c:	ebb5 0509 	subs.w	r5, r5, r9
 801b080:	d009      	beq.n	801b096 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b082:	2c00      	cmp	r4, #0
 801b084:	d1ef      	bne.n	801b066 <pbuf_take+0x26>
 801b086:	465b      	mov	r3, fp
 801b088:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801b08c:	4651      	mov	r1, sl
 801b08e:	4818      	ldr	r0, [pc, #96]	; (801b0f0 <pbuf_take+0xb0>)
 801b090:	f009 ff9c 	bl	8024fcc <iprintf>
 801b094:	e7e7      	b.n	801b066 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801b096:	45b0      	cmp	r8, r6
 801b098:	d009      	beq.n	801b0ae <pbuf_take+0x6e>
 801b09a:	4b16      	ldr	r3, [pc, #88]	; (801b0f4 <pbuf_take+0xb4>)
 801b09c:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801b0a0:	4915      	ldr	r1, [pc, #84]	; (801b0f8 <pbuf_take+0xb8>)
 801b0a2:	4813      	ldr	r0, [pc, #76]	; (801b0f0 <pbuf_take+0xb0>)
 801b0a4:	f009 ff92 	bl	8024fcc <iprintf>
  return ERR_OK;
 801b0a8:	4628      	mov	r0, r5
}
 801b0aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801b0ae:	2000      	movs	r0, #0
}
 801b0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b0b4:	4b0f      	ldr	r3, [pc, #60]	; (801b0f4 <pbuf_take+0xb4>)
 801b0b6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801b0ba:	4910      	ldr	r1, [pc, #64]	; (801b0fc <pbuf_take+0xbc>)
 801b0bc:	480c      	ldr	r0, [pc, #48]	; (801b0f0 <pbuf_take+0xb0>)
 801b0be:	f009 ff85 	bl	8024fcc <iprintf>
 801b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 801b0c6:	e7f3      	b.n	801b0b0 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b0c8:	4b0a      	ldr	r3, [pc, #40]	; (801b0f4 <pbuf_take+0xb4>)
 801b0ca:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801b0ce:	490c      	ldr	r1, [pc, #48]	; (801b100 <pbuf_take+0xc0>)
 801b0d0:	4807      	ldr	r0, [pc, #28]	; (801b0f0 <pbuf_take+0xb0>)
 801b0d2:	f009 ff7b 	bl	8024fcc <iprintf>
 801b0d6:	f06f 000f 	mvn.w	r0, #15
 801b0da:	e7e9      	b.n	801b0b0 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b0dc:	4b05      	ldr	r3, [pc, #20]	; (801b0f4 <pbuf_take+0xb4>)
 801b0de:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801b0e2:	4908      	ldr	r1, [pc, #32]	; (801b104 <pbuf_take+0xc4>)
 801b0e4:	4802      	ldr	r0, [pc, #8]	; (801b0f0 <pbuf_take+0xb0>)
 801b0e6:	f009 ff71 	bl	8024fcc <iprintf>
 801b0ea:	f06f 000f 	mvn.w	r0, #15
 801b0ee:	e7df      	b.n	801b0b0 <pbuf_take+0x70>
 801b0f0:	0802bdc0 	.word	0x0802bdc0
 801b0f4:	080432f0 	.word	0x080432f0
 801b0f8:	080435e8 	.word	0x080435e8
 801b0fc:	080435b0 	.word	0x080435b0
 801b100:	08043594 	.word	0x08043594
 801b104:	0804357c 	.word	0x0804357c
 801b108:	080435d0 	.word	0x080435d0

0801b10c <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b10c:	b390      	cbz	r0, 801b174 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801b10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b112:	460f      	mov	r7, r1
 801b114:	4604      	mov	r4, r0
 801b116:	e002      	b.n	801b11e <pbuf_take_at+0x12>
    q = q->next;
 801b118:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b11a:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801b11c:	b334      	cbz	r4, 801b16c <pbuf_take_at+0x60>
 801b11e:	8965      	ldrh	r5, [r4, #10]
 801b120:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801b122:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801b126:	d9f7      	bls.n	801b118 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801b128:	8921      	ldrh	r1, [r4, #8]
 801b12a:	189e      	adds	r6, r3, r2
 801b12c:	42b1      	cmp	r1, r6
 801b12e:	db1d      	blt.n	801b16c <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801b130:	1ae9      	subs	r1, r5, r3
 801b132:	428a      	cmp	r2, r1
 801b134:	dc07      	bgt.n	801b146 <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b136:	6860      	ldr	r0, [r4, #4]
 801b138:	4639      	mov	r1, r7
 801b13a:	4418      	add	r0, r3
 801b13c:	f008 ff82 	bl	8024044 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801b140:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801b142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b146:	fa1f f881 	uxth.w	r8, r1
 801b14a:	6860      	ldr	r0, [r4, #4]
 801b14c:	4639      	mov	r1, r7
 801b14e:	4642      	mov	r2, r8
 801b150:	4418      	add	r0, r3
 801b152:	f008 ff77 	bl	8024044 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801b156:	1b70      	subs	r0, r6, r5
 801b158:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801b15a:	2a00      	cmp	r2, #0
 801b15c:	d0f0      	beq.n	801b140 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b15e:	eb07 0108 	add.w	r1, r7, r8
 801b162:	6820      	ldr	r0, [r4, #0]
}
 801b164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b168:	f7ff bf6a 	b.w	801b040 <pbuf_take>
  return ERR_MEM;
 801b16c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801b174:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b178:	4770      	bx	lr
 801b17a:	bf00      	nop

0801b17c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b17c:	b538      	push	{r3, r4, r5, lr}
 801b17e:	4615      	mov	r5, r2
 801b180:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b182:	8929      	ldrh	r1, [r5, #8]
 801b184:	f7ff fcb2 	bl	801aaec <pbuf_alloc>
  if (q == NULL) {
 801b188:	4604      	mov	r4, r0
 801b18a:	b138      	cbz	r0, 801b19c <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b18c:	8902      	ldrh	r2, [r0, #8]
 801b18e:	892b      	ldrh	r3, [r5, #8]
 801b190:	429a      	cmp	r2, r3
 801b192:	d305      	bcc.n	801b1a0 <pbuf_clone+0x24>
 801b194:	4629      	mov	r1, r5
 801b196:	f7ff fbdf 	bl	801a958 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b19a:	b940      	cbnz	r0, 801b1ae <pbuf_clone+0x32>
  return q;
}
 801b19c:	4620      	mov	r0, r4
 801b19e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b1a0:	4b07      	ldr	r3, [pc, #28]	; (801b1c0 <pbuf_clone+0x44>)
 801b1a2:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b1a6:	4907      	ldr	r1, [pc, #28]	; (801b1c4 <pbuf_clone+0x48>)
 801b1a8:	4807      	ldr	r0, [pc, #28]	; (801b1c8 <pbuf_clone+0x4c>)
 801b1aa:	f009 ff0f 	bl	8024fcc <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b1ae:	4b04      	ldr	r3, [pc, #16]	; (801b1c0 <pbuf_clone+0x44>)
 801b1b0:	f240 5224 	movw	r2, #1316	; 0x524
 801b1b4:	4905      	ldr	r1, [pc, #20]	; (801b1cc <pbuf_clone+0x50>)
 801b1b6:	4804      	ldr	r0, [pc, #16]	; (801b1c8 <pbuf_clone+0x4c>)
 801b1b8:	f009 ff08 	bl	8024fcc <iprintf>
}
 801b1bc:	4620      	mov	r0, r4
 801b1be:	bd38      	pop	{r3, r4, r5, pc}
 801b1c0:	080432f0 	.word	0x080432f0
 801b1c4:	08043508 	.word	0x08043508
 801b1c8:	0802bdc0 	.word	0x0802bdc0
 801b1cc:	08043600 	.word	0x08043600

0801b1d0 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b1d0:	b140      	cbz	r0, 801b1e4 <pbuf_try_get_at+0x14>
 801b1d2:	8943      	ldrh	r3, [r0, #10]
 801b1d4:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b1d6:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b1da:	d806      	bhi.n	801b1ea <pbuf_try_get_at+0x1a>
    q = q->next;
 801b1dc:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b1de:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b1e0:	2800      	cmp	r0, #0
 801b1e2:	d1f6      	bne.n	801b1d2 <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 801b1e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b1e8:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801b1ea:	6843      	ldr	r3, [r0, #4]
 801b1ec:	5c58      	ldrb	r0, [r3, r1]
 801b1ee:	4770      	bx	lr

0801b1f0 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b1f0:	b918      	cbnz	r0, 801b1fa <pbuf_put_at+0xa>
 801b1f2:	e00a      	b.n	801b20a <pbuf_put_at+0x1a>
    q = q->next;
 801b1f4:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b1f6:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b1f8:	b130      	cbz	r0, 801b208 <pbuf_put_at+0x18>
 801b1fa:	8943      	ldrh	r3, [r0, #10]
 801b1fc:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b1fe:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b202:	d9f7      	bls.n	801b1f4 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801b204:	6843      	ldr	r3, [r0, #4]
 801b206:	545a      	strb	r2, [r3, r1]
  }
}
 801b208:	4770      	bx	lr
 801b20a:	4770      	bx	lr

0801b20c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801b20c:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801b20e:	8905      	ldrh	r5, [r0, #8]
 801b210:	18cc      	adds	r4, r1, r3
 801b212:	42a5      	cmp	r5, r4
 801b214:	db2e      	blt.n	801b274 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801b216:	8944      	ldrh	r4, [r0, #10]
 801b218:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801b21a:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b21e:	d803      	bhi.n	801b228 <pbuf_memcmp+0x1c>
    q = q->next;
 801b220:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801b222:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b224:	2800      	cmp	r0, #0
 801b226:	d1f6      	bne.n	801b216 <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801b228:	b1f3      	cbz	r3, 801b268 <pbuf_memcmp+0x5c>
 801b22a:	2500      	movs	r5, #0
 801b22c:	1e56      	subs	r6, r2, #1
 801b22e:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801b230:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801b234:	4604      	mov	r4, r0
 801b236:	fa1f fc8c 	uxth.w	ip, ip
 801b23a:	b920      	cbnz	r0, 801b246 <pbuf_memcmp+0x3a>
 801b23c:	e00b      	b.n	801b256 <pbuf_memcmp+0x4a>
    q = q->next;
 801b23e:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b240:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b244:	b13c      	cbz	r4, 801b256 <pbuf_memcmp+0x4a>
 801b246:	8962      	ldrh	r2, [r4, #10]
 801b248:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801b24a:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b24e:	d2f6      	bcs.n	801b23e <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801b250:	6862      	ldr	r2, [r4, #4]
 801b252:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801b256:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801b25a:	42a2      	cmp	r2, r4
 801b25c:	d106      	bne.n	801b26c <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801b25e:	3501      	adds	r5, #1
 801b260:	fa1f fe85 	uxth.w	lr, r5
 801b264:	4573      	cmp	r3, lr
 801b266:	d8e3      	bhi.n	801b230 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801b268:	2000      	movs	r0, #0
}
 801b26a:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801b26c:	f10e 0001 	add.w	r0, lr, #1
 801b270:	b280      	uxth	r0, r0
}
 801b272:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801b274:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b278:	bd70      	pop	{r4, r5, r6, pc}
 801b27a:	bf00      	nop

0801b27c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b27e:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b280:	8905      	ldrh	r5, [r0, #8]
{
 801b282:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801b284:	4422      	add	r2, r4
 801b286:	4295      	cmp	r5, r2
 801b288:	db15      	blt.n	801b2b6 <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b28a:	1aed      	subs	r5, r5, r3
 801b28c:	4606      	mov	r6, r0
 801b28e:	460f      	mov	r7, r1
 801b290:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b292:	42a5      	cmp	r5, r4
 801b294:	d204      	bcs.n	801b2a0 <pbuf_memfind+0x24>
 801b296:	e00e      	b.n	801b2b6 <pbuf_memfind+0x3a>
 801b298:	fa1f f48c 	uxth.w	r4, ip
 801b29c:	42a5      	cmp	r5, r4
 801b29e:	d30a      	bcc.n	801b2b6 <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801b2a0:	4621      	mov	r1, r4
 801b2a2:	463a      	mov	r2, r7
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	f7ff ffb1 	bl	801b20c <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b2aa:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801b2ae:	2800      	cmp	r0, #0
 801b2b0:	d1f2      	bne.n	801b298 <pbuf_memfind+0x1c>
 801b2b2:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801b2b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b2bc <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801b2bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b2c0:	4e33      	ldr	r6, [pc, #204]	; (801b390 <raw_input+0xd4>)
{
 801b2c2:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b2c4:	6831      	ldr	r1, [r6, #0]
 801b2c6:	6970      	ldr	r0, [r6, #20]
 801b2c8:	f007 fb90 	bl	80229ec <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801b2cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b2d0:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801b2d2:	4b30      	ldr	r3, [pc, #192]	; (801b394 <raw_input+0xd8>)
 801b2d4:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801b2d6:	2c00      	cmp	r4, #0
 801b2d8:	d056      	beq.n	801b388 <raw_input+0xcc>
 801b2da:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b2dc:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b2de:	f106 0b10 	add.w	fp, r6, #16
 801b2e2:	46ca      	mov	sl, r9
  prev = NULL;
 801b2e4:	4606      	mov	r6, r0
 801b2e6:	e004      	b.n	801b2f2 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801b2e8:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801b2ea:	4626      	mov	r6, r4
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d037      	beq.n	801b360 <raw_input+0xa4>
 801b2f0:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b2f2:	7c23      	ldrb	r3, [r4, #16]
 801b2f4:	42ab      	cmp	r3, r5
 801b2f6:	d1f7      	bne.n	801b2e8 <raw_input+0x2c>
 801b2f8:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b2fa:	b13a      	cbz	r2, 801b30c <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b2fc:	4b24      	ldr	r3, [pc, #144]	; (801b390 <raw_input+0xd4>)
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b304:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b306:	b2db      	uxtb	r3, r3
 801b308:	429a      	cmp	r2, r3
 801b30a:	d1ed      	bne.n	801b2e8 <raw_input+0x2c>
 801b30c:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801b30e:	f1ba 0f00 	cmp.w	sl, #0
 801b312:	d027      	beq.n	801b364 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801b314:	2b00      	cmp	r3, #0
 801b316:	d1e7      	bne.n	801b2e8 <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b318:	7c63      	ldrb	r3, [r4, #17]
 801b31a:	07db      	lsls	r3, r3, #31
 801b31c:	d504      	bpl.n	801b328 <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801b31e:	4b1c      	ldr	r3, [pc, #112]	; (801b390 <raw_input+0xd4>)
 801b320:	6862      	ldr	r2, [r4, #4]
 801b322:	691b      	ldr	r3, [r3, #16]
 801b324:	429a      	cmp	r2, r3
 801b326:	d1df      	bne.n	801b2e8 <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801b328:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801b32c:	f1b9 0f00 	cmp.w	r9, #0
 801b330:	d0da      	beq.n	801b2e8 <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b332:	465b      	mov	r3, fp
 801b334:	4642      	mov	r2, r8
 801b336:	4621      	mov	r1, r4
 801b338:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801b33a:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b33e:	47c8      	blx	r9
        if (eaten != 0) {
 801b340:	b9c8      	cbnz	r0, 801b376 <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801b342:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b346:	42bb      	cmp	r3, r7
 801b348:	d013      	beq.n	801b372 <raw_input+0xb6>
 801b34a:	4b13      	ldr	r3, [pc, #76]	; (801b398 <raw_input+0xdc>)
 801b34c:	22c0      	movs	r2, #192	; 0xc0
 801b34e:	4913      	ldr	r1, [pc, #76]	; (801b39c <raw_input+0xe0>)
 801b350:	4626      	mov	r6, r4
 801b352:	4813      	ldr	r0, [pc, #76]	; (801b3a0 <raw_input+0xe4>)
 801b354:	f009 fe3a 	bl	8024fcc <iprintf>
    pcb = pcb->next;
 801b358:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801b35a:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d1c7      	bne.n	801b2f0 <raw_input+0x34>
  }
  return ret;
}
 801b360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801b364:	2b00      	cmp	r3, #0
 801b366:	d0d7      	beq.n	801b318 <raw_input+0x5c>
 801b368:	4a09      	ldr	r2, [pc, #36]	; (801b390 <raw_input+0xd4>)
 801b36a:	6952      	ldr	r2, [r2, #20]
 801b36c:	4293      	cmp	r3, r2
 801b36e:	d1bb      	bne.n	801b2e8 <raw_input+0x2c>
 801b370:	e7d2      	b.n	801b318 <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801b372:	2002      	movs	r0, #2
 801b374:	e7b8      	b.n	801b2e8 <raw_input+0x2c>
          if (prev != NULL) {
 801b376:	b14e      	cbz	r6, 801b38c <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801b378:	4906      	ldr	r1, [pc, #24]	; (801b394 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801b37a:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801b37c:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801b37e:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801b380:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801b382:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801b384:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801b386:	e7eb      	b.n	801b360 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b388:	4620      	mov	r0, r4
 801b38a:	e7e9      	b.n	801b360 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801b38c:	2001      	movs	r0, #1
 801b38e:	e7e7      	b.n	801b360 <raw_input+0xa4>
 801b390:	2001ec54 	.word	0x2001ec54
 801b394:	2002dbd0 	.word	0x2002dbd0
 801b398:	08043614 	.word	0x08043614
 801b39c:	08043644 	.word	0x08043644
 801b3a0:	0802bdc0 	.word	0x0802bdc0

0801b3a4 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b3a4:	b110      	cbz	r0, 801b3ac <raw_netif_ip_addr_changed+0x8>
 801b3a6:	6802      	ldr	r2, [r0, #0]
 801b3a8:	b101      	cbz	r1, 801b3ac <raw_netif_ip_addr_changed+0x8>
 801b3aa:	b902      	cbnz	r2, 801b3ae <raw_netif_ip_addr_changed+0xa>
 801b3ac:	4770      	bx	lr
 801b3ae:	680b      	ldr	r3, [r1, #0]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d0fb      	beq.n	801b3ac <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b3b4:	4b08      	ldr	r3, [pc, #32]	; (801b3d8 <raw_netif_ip_addr_changed+0x34>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d0f7      	beq.n	801b3ac <raw_netif_ip_addr_changed+0x8>
{
 801b3bc:	b410      	push	{r4}
 801b3be:	e000      	b.n	801b3c2 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801b3c0:	6802      	ldr	r2, [r0, #0]
 801b3c2:	681c      	ldr	r4, [r3, #0]
 801b3c4:	4294      	cmp	r4, r2
 801b3c6:	d101      	bne.n	801b3cc <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801b3c8:	680a      	ldr	r2, [r1, #0]
 801b3ca:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d1f6      	bne.n	801b3c0 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801b3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3d6:	4770      	bx	lr
 801b3d8:	2002dbd0 	.word	0x2002dbd0

0801b3dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b3dc:	b4f0      	push	{r4, r5, r6, r7}
 801b3de:	4f13      	ldr	r7, [pc, #76]	; (801b42c <tcp_new_port+0x50>)
 801b3e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b3e4:	4e12      	ldr	r6, [pc, #72]	; (801b430 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b3e6:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b3ea:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b3ec:	4d11      	ldr	r5, [pc, #68]	; (801b434 <tcp_new_port+0x58>)
  tcp_port++;
 801b3ee:	3001      	adds	r0, #1
 801b3f0:	4c11      	ldr	r4, [pc, #68]	; (801b438 <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b3f2:	462b      	mov	r3, r5
  tcp_port++;
 801b3f4:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b3f6:	4560      	cmp	r0, ip
 801b3f8:	bf08      	it	eq
 801b3fa:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	b913      	cbnz	r3, 801b408 <tcp_new_port+0x2c>
 801b402:	e00b      	b.n	801b41c <tcp_new_port+0x40>
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	b14b      	cbz	r3, 801b41c <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801b408:	8ada      	ldrh	r2, [r3, #22]
 801b40a:	4282      	cmp	r2, r0
 801b40c:	d1fa      	bne.n	801b404 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b40e:	3901      	subs	r1, #1
 801b410:	b289      	uxth	r1, r1
 801b412:	2900      	cmp	r1, #0
 801b414:	d1eb      	bne.n	801b3ee <tcp_new_port+0x12>
 801b416:	8038      	strh	r0, [r7, #0]
          return 0;
 801b418:	4608      	mov	r0, r1
 801b41a:	e005      	b.n	801b428 <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b41c:	42b4      	cmp	r4, r6
 801b41e:	d002      	beq.n	801b426 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b420:	f854 3b04 	ldr.w	r3, [r4], #4
 801b424:	e7eb      	b.n	801b3fe <tcp_new_port+0x22>
 801b426:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801b428:	bcf0      	pop	{r4, r5, r6, r7}
 801b42a:	4770      	bx	lr
 801b42c:	20000414 	.word	0x20000414
 801b430:	08043d84 	.word	0x08043d84
 801b434:	2002dbe0 	.word	0x2002dbe0
 801b438:	08043d78 	.word	0x08043d78

0801b43c <tcp_close_shutdown_fin>:
{
 801b43c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b43e:	4604      	mov	r4, r0
 801b440:	b310      	cbz	r0, 801b488 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801b442:	7d23      	ldrb	r3, [r4, #20]
 801b444:	2b04      	cmp	r3, #4
 801b446:	d005      	beq.n	801b454 <tcp_close_shutdown_fin+0x18>
 801b448:	2b07      	cmp	r3, #7
 801b44a:	d00e      	beq.n	801b46a <tcp_close_shutdown_fin+0x2e>
 801b44c:	2b03      	cmp	r3, #3
 801b44e:	d001      	beq.n	801b454 <tcp_close_shutdown_fin+0x18>
 801b450:	2000      	movs	r0, #0
}
 801b452:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b454:	4620      	mov	r0, r4
 801b456:	f003 fd33 	bl	801eec0 <tcp_send_fin>
      if (err == ERR_OK) {
 801b45a:	b950      	cbnz	r0, 801b472 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801b45c:	2305      	movs	r3, #5
 801b45e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801b460:	4620      	mov	r0, r4
 801b462:	f003 fe9d 	bl	801f1a0 <tcp_output>
 801b466:	2000      	movs	r0, #0
}
 801b468:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b46a:	4620      	mov	r0, r4
 801b46c:	f003 fd28 	bl	801eec0 <tcp_send_fin>
      if (err == ERR_OK) {
 801b470:	b138      	cbz	r0, 801b482 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801b472:	1c43      	adds	r3, r0, #1
 801b474:	d1ed      	bne.n	801b452 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b476:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801b478:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b47a:	f043 0308 	orr.w	r3, r3, #8
 801b47e:	8363      	strh	r3, [r4, #26]
}
 801b480:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801b482:	2309      	movs	r3, #9
 801b484:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801b486:	e7eb      	b.n	801b460 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b488:	4b03      	ldr	r3, [pc, #12]	; (801b498 <tcp_close_shutdown_fin+0x5c>)
 801b48a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801b48e:	4903      	ldr	r1, [pc, #12]	; (801b49c <tcp_close_shutdown_fin+0x60>)
 801b490:	4803      	ldr	r0, [pc, #12]	; (801b4a0 <tcp_close_shutdown_fin+0x64>)
 801b492:	f009 fd9b 	bl	8024fcc <iprintf>
 801b496:	e7d4      	b.n	801b442 <tcp_close_shutdown_fin+0x6>
 801b498:	08043690 	.word	0x08043690
 801b49c:	080436c0 	.word	0x080436c0
 801b4a0:	0802bdc0 	.word	0x0802bdc0

0801b4a4 <tcp_init>:
{
 801b4a4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b4a6:	f009 fe35 	bl	8025114 <rand>
 801b4aa:	4b02      	ldr	r3, [pc, #8]	; (801b4b4 <tcp_init+0x10>)
 801b4ac:	4a02      	ldr	r2, [pc, #8]	; (801b4b8 <tcp_init+0x14>)
 801b4ae:	4303      	orrs	r3, r0
 801b4b0:	8013      	strh	r3, [r2, #0]
}
 801b4b2:	bd08      	pop	{r3, pc}
 801b4b4:	ffffc000 	.word	0xffffc000
 801b4b8:	20000414 	.word	0x20000414

0801b4bc <tcp_free>:
{
 801b4bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b4be:	7d03      	ldrb	r3, [r0, #20]
{
 801b4c0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b4c2:	2b01      	cmp	r3, #1
 801b4c4:	d005      	beq.n	801b4d2 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801b4c6:	4621      	mov	r1, r4
 801b4c8:	2002      	movs	r0, #2
}
 801b4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b4ce:	f7fe bfc7 	b.w	801a460 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b4d2:	4906      	ldr	r1, [pc, #24]	; (801b4ec <tcp_free+0x30>)
 801b4d4:	22d4      	movs	r2, #212	; 0xd4
 801b4d6:	4b06      	ldr	r3, [pc, #24]	; (801b4f0 <tcp_free+0x34>)
 801b4d8:	4806      	ldr	r0, [pc, #24]	; (801b4f4 <tcp_free+0x38>)
 801b4da:	f009 fd77 	bl	8024fcc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b4de:	4621      	mov	r1, r4
 801b4e0:	2002      	movs	r0, #2
}
 801b4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b4e6:	f7fe bfbb 	b.w	801a460 <memp_free>
 801b4ea:	bf00      	nop
 801b4ec:	080436cc 	.word	0x080436cc
 801b4f0:	08043690 	.word	0x08043690
 801b4f4:	0802bdc0 	.word	0x0802bdc0

0801b4f8 <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801b4f8:	2900      	cmp	r1, #0
{
 801b4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801b4fc:	4b26      	ldr	r3, [pc, #152]	; (801b598 <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801b4fe:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801b500:	bf14      	ite	ne
 801b502:	460e      	movne	r6, r1
 801b504:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b506:	2800      	cmp	r0, #0
 801b508:	d03c      	beq.n	801b584 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b50a:	7d03      	ldrb	r3, [r0, #20]
 801b50c:	4607      	mov	r7, r0
 801b50e:	bb7b      	cbnz	r3, 801b570 <tcp_bind+0x78>
  if (port == 0) {
 801b510:	b31a      	cbz	r2, 801b55a <tcp_bind+0x62>
 801b512:	4922      	ldr	r1, [pc, #136]	; (801b59c <tcp_bind+0xa4>)
 801b514:	4b22      	ldr	r3, [pc, #136]	; (801b5a0 <tcp_bind+0xa8>)
 801b516:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	b913      	cbnz	r3, 801b524 <tcp_bind+0x2c>
 801b51e:	e00e      	b.n	801b53e <tcp_bind+0x46>
 801b520:	68db      	ldr	r3, [r3, #12]
 801b522:	b163      	cbz	r3, 801b53e <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801b524:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801b528:	4594      	cmp	ip, r2
 801b52a:	d1f9      	bne.n	801b520 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b52c:	681c      	ldr	r4, [r3, #0]
 801b52e:	b11c      	cbz	r4, 801b538 <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801b530:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b532:	b10d      	cbz	r5, 801b538 <tcp_bind+0x40>
 801b534:	42ac      	cmp	r4, r5
 801b536:	d1f3      	bne.n	801b520 <tcp_bind+0x28>
              return ERR_USE;
 801b538:	f06f 0007 	mvn.w	r0, #7
}
 801b53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801b53e:	4281      	cmp	r1, r0
 801b540:	d113      	bne.n	801b56a <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801b542:	6833      	ldr	r3, [r6, #0]
 801b544:	b103      	cbz	r3, 801b548 <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b546:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b548:	4b16      	ldr	r3, [pc, #88]	; (801b5a4 <tcp_bind+0xac>)
  pcb->local_port = port;
 801b54a:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b54c:	681a      	ldr	r2, [r3, #0]
 801b54e:	601f      	str	r7, [r3, #0]
 801b550:	60fa      	str	r2, [r7, #12]
 801b552:	f004 f951 	bl	801f7f8 <tcp_timer_needed>
  return ERR_OK;
 801b556:	2000      	movs	r0, #0
}
 801b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801b55a:	f7ff ff3f 	bl	801b3dc <tcp_new_port>
    if (port == 0) {
 801b55e:	4602      	mov	r2, r0
 801b560:	2800      	cmp	r0, #0
 801b562:	d1ee      	bne.n	801b542 <tcp_bind+0x4a>
      return ERR_BUF;
 801b564:	f06f 0001 	mvn.w	r0, #1
}
 801b568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b56a:	f851 3b04 	ldr.w	r3, [r1], #4
 801b56e:	e7d4      	b.n	801b51a <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b570:	4b0d      	ldr	r3, [pc, #52]	; (801b5a8 <tcp_bind+0xb0>)
 801b572:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b576:	490d      	ldr	r1, [pc, #52]	; (801b5ac <tcp_bind+0xb4>)
 801b578:	480d      	ldr	r0, [pc, #52]	; (801b5b0 <tcp_bind+0xb8>)
 801b57a:	f009 fd27 	bl	8024fcc <iprintf>
 801b57e:	f06f 0005 	mvn.w	r0, #5
}
 801b582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b584:	4b08      	ldr	r3, [pc, #32]	; (801b5a8 <tcp_bind+0xb0>)
 801b586:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b58a:	490a      	ldr	r1, [pc, #40]	; (801b5b4 <tcp_bind+0xbc>)
 801b58c:	4808      	ldr	r0, [pc, #32]	; (801b5b0 <tcp_bind+0xb8>)
 801b58e:	f009 fd1d 	bl	8024fcc <iprintf>
 801b592:	f06f 000f 	mvn.w	r0, #15
}
 801b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b598:	080452a8 	.word	0x080452a8
 801b59c:	08043d78 	.word	0x08043d78
 801b5a0:	2002dbe0 	.word	0x2002dbe0
 801b5a4:	2002dbdc 	.word	0x2002dbdc
 801b5a8:	08043690 	.word	0x08043690
 801b5ac:	080436f8 	.word	0x080436f8
 801b5b0:	0802bdc0 	.word	0x0802bdc0
 801b5b4:	080436e0 	.word	0x080436e0

0801b5b8 <tcp_listen_with_backlog_and_err>:
{
 801b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b5ba:	4604      	mov	r4, r0
{
 801b5bc:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b5be:	2800      	cmp	r0, #0
 801b5c0:	d060      	beq.n	801b684 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b5c2:	7d05      	ldrb	r5, [r0, #20]
 801b5c4:	2d00      	cmp	r5, #0
 801b5c6:	d14a      	bne.n	801b65e <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b5c8:	f240 3272 	movw	r2, #882	; 0x372
 801b5cc:	4933      	ldr	r1, [pc, #204]	; (801b69c <tcp_listen_with_backlog_and_err+0xe4>)
 801b5ce:	2003      	movs	r0, #3
 801b5d0:	f7fe ff10 	bl	801a3f4 <memp_malloc_fn>
  if (lpcb == NULL) {
 801b5d4:	4606      	mov	r6, r0
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	d051      	beq.n	801b67e <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801b5da:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801b5dc:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801b5de:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801b5e0:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801b5e2:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801b5e4:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801b5e6:	7d62      	ldrb	r2, [r4, #21]
 801b5e8:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801b5ea:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b5ec:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801b5ee:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801b5f0:	7ae2      	ldrb	r2, [r4, #11]
 801b5f2:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801b5f4:	7aa2      	ldrb	r2, [r4, #10]
 801b5f6:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b5f8:	6822      	ldr	r2, [r4, #0]
 801b5fa:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801b5fc:	b99b      	cbnz	r3, 801b626 <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b5fe:	7d23      	ldrb	r3, [r4, #20]
 801b600:	2b01      	cmp	r3, #1
 801b602:	d020      	beq.n	801b646 <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b604:	4621      	mov	r1, r4
 801b606:	2002      	movs	r0, #2
 801b608:	f7fe ff2a 	bl	801a460 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b60c:	4b24      	ldr	r3, [pc, #144]	; (801b6a0 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801b60e:	4925      	ldr	r1, [pc, #148]	; (801b6a4 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b610:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801b612:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b614:	60f2      	str	r2, [r6, #12]
 801b616:	601e      	str	r6, [r3, #0]
 801b618:	f004 f8ee 	bl	801f7f8 <tcp_timer_needed>
  res = ERR_OK;
 801b61c:	2300      	movs	r3, #0
  if (err != NULL) {
 801b61e:	b107      	cbz	r7, 801b622 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801b620:	703b      	strb	r3, [r7, #0]
}
 801b622:	4630      	mov	r0, r6
 801b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b626:	4a20      	ldr	r2, [pc, #128]	; (801b6a8 <tcp_listen_with_backlog_and_err+0xf0>)
 801b628:	6813      	ldr	r3, [r2, #0]
 801b62a:	42a3      	cmp	r3, r4
 801b62c:	d012      	beq.n	801b654 <tcp_listen_with_backlog_and_err+0x9c>
 801b62e:	b12b      	cbz	r3, 801b63c <tcp_listen_with_backlog_and_err+0x84>
 801b630:	68d9      	ldr	r1, [r3, #12]
 801b632:	42a1      	cmp	r1, r4
 801b634:	d01e      	beq.n	801b674 <tcp_listen_with_backlog_and_err+0xbc>
 801b636:	460b      	mov	r3, r1
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d1f9      	bne.n	801b630 <tcp_listen_with_backlog_and_err+0x78>
 801b63c:	2300      	movs	r3, #0
 801b63e:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b640:	7d23      	ldrb	r3, [r4, #20]
 801b642:	2b01      	cmp	r3, #1
 801b644:	d1de      	bne.n	801b604 <tcp_listen_with_backlog_and_err+0x4c>
 801b646:	4b15      	ldr	r3, [pc, #84]	; (801b69c <tcp_listen_with_backlog_and_err+0xe4>)
 801b648:	22d4      	movs	r2, #212	; 0xd4
 801b64a:	4918      	ldr	r1, [pc, #96]	; (801b6ac <tcp_listen_with_backlog_and_err+0xf4>)
 801b64c:	4818      	ldr	r0, [pc, #96]	; (801b6b0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b64e:	f009 fcbd 	bl	8024fcc <iprintf>
 801b652:	e7d7      	b.n	801b604 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b654:	68e3      	ldr	r3, [r4, #12]
 801b656:	6013      	str	r3, [r2, #0]
 801b658:	2300      	movs	r3, #0
 801b65a:	60e3      	str	r3, [r4, #12]
 801b65c:	e7f0      	b.n	801b640 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b65e:	4b0f      	ldr	r3, [pc, #60]	; (801b69c <tcp_listen_with_backlog_and_err+0xe4>)
 801b660:	f240 325a 	movw	r2, #858	; 0x35a
 801b664:	4913      	ldr	r1, [pc, #76]	; (801b6b4 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b666:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b668:	4811      	ldr	r0, [pc, #68]	; (801b6b0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b66a:	f009 fcaf 	bl	8024fcc <iprintf>
 801b66e:	f06f 030e 	mvn.w	r3, #14
 801b672:	e7d4      	b.n	801b61e <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b674:	68e2      	ldr	r2, [r4, #12]
 801b676:	60da      	str	r2, [r3, #12]
 801b678:	2300      	movs	r3, #0
 801b67a:	60e3      	str	r3, [r4, #12]
 801b67c:	e7e0      	b.n	801b640 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801b67e:	f04f 33ff 	mov.w	r3, #4294967295
 801b682:	e7cc      	b.n	801b61e <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b684:	4b05      	ldr	r3, [pc, #20]	; (801b69c <tcp_listen_with_backlog_and_err+0xe4>)
 801b686:	f240 3259 	movw	r2, #857	; 0x359
 801b68a:	490b      	ldr	r1, [pc, #44]	; (801b6b8 <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b68c:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b68e:	4808      	ldr	r0, [pc, #32]	; (801b6b0 <tcp_listen_with_backlog_and_err+0xf8>)
 801b690:	f009 fc9c 	bl	8024fcc <iprintf>
 801b694:	f06f 030f 	mvn.w	r3, #15
 801b698:	e7c1      	b.n	801b61e <tcp_listen_with_backlog_and_err+0x66>
 801b69a:	bf00      	nop
 801b69c:	08043690 	.word	0x08043690
 801b6a0:	2002dbe0 	.word	0x2002dbe0
 801b6a4:	0801c34d 	.word	0x0801c34d
 801b6a8:	2002dbdc 	.word	0x2002dbdc
 801b6ac:	080436cc 	.word	0x080436cc
 801b6b0:	0802bdc0 	.word	0x0802bdc0
 801b6b4:	08043750 	.word	0x08043750
 801b6b8:	08043720 	.word	0x08043720

0801b6bc <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801b6bc:	2200      	movs	r2, #0
 801b6be:	f7ff bf7b 	b.w	801b5b8 <tcp_listen_with_backlog_and_err>
 801b6c2:	bf00      	nop

0801b6c4 <tcp_update_rcv_ann_wnd>:
{
 801b6c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b6c6:	4604      	mov	r4, r0
 801b6c8:	b1c0      	cbz	r0, 801b6fc <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b6ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b6cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b6ce:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b6d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b6d4:	1ad0      	subs	r0, r2, r3
 801b6d6:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801b6da:	4428      	add	r0, r5
 801b6dc:	bf94      	ite	ls
 801b6de:	eba0 010c 	subls.w	r1, r0, ip
 801b6e2:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801b6e6:	2900      	cmp	r1, #0
 801b6e8:	db01      	blt.n	801b6ee <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b6ea:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801b6ec:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b6ee:	1aea      	subs	r2, r5, r3
 801b6f0:	2a00      	cmp	r2, #0
 801b6f2:	dd0b      	ble.n	801b70c <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801b6f4:	2300      	movs	r3, #0
    return 0;
 801b6f6:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801b6f8:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801b6fa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b6fc:	4b0b      	ldr	r3, [pc, #44]	; (801b72c <tcp_update_rcv_ann_wnd+0x68>)
 801b6fe:	f240 32a6 	movw	r2, #934	; 0x3a6
 801b702:	490b      	ldr	r1, [pc, #44]	; (801b730 <tcp_update_rcv_ann_wnd+0x6c>)
 801b704:	480b      	ldr	r0, [pc, #44]	; (801b734 <tcp_update_rcv_ann_wnd+0x70>)
 801b706:	f009 fc61 	bl	8024fcc <iprintf>
 801b70a:	e7de      	b.n	801b6ca <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b70c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b70e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801b712:	d202      	bcs.n	801b71a <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801b714:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b716:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801b718:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b71a:	4b04      	ldr	r3, [pc, #16]	; (801b72c <tcp_update_rcv_ann_wnd+0x68>)
 801b71c:	f240 32b6 	movw	r2, #950	; 0x3b6
 801b720:	4905      	ldr	r1, [pc, #20]	; (801b738 <tcp_update_rcv_ann_wnd+0x74>)
 801b722:	4804      	ldr	r0, [pc, #16]	; (801b734 <tcp_update_rcv_ann_wnd+0x70>)
 801b724:	f009 fc52 	bl	8024fcc <iprintf>
 801b728:	e7f4      	b.n	801b714 <tcp_update_rcv_ann_wnd+0x50>
 801b72a:	bf00      	nop
 801b72c:	08043690 	.word	0x08043690
 801b730:	08043788 	.word	0x08043788
 801b734:	0802bdc0 	.word	0x0802bdc0
 801b738:	080437ac 	.word	0x080437ac

0801b73c <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b73c:	b340      	cbz	r0, 801b790 <tcp_recved+0x54>
{
 801b73e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b740:	7d03      	ldrb	r3, [r0, #20]
 801b742:	4605      	mov	r5, r0
 801b744:	460c      	mov	r4, r1
 801b746:	2b01      	cmp	r3, #1
 801b748:	d01a      	beq.n	801b780 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b74a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b74c:	1919      	adds	r1, r3, r4
 801b74e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b750:	428b      	cmp	r3, r1
 801b752:	d802      	bhi.n	801b75a <tcp_recved+0x1e>
 801b754:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801b758:	d901      	bls.n	801b75e <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b75a:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b75e:	4628      	mov	r0, r5
 801b760:	8529      	strh	r1, [r5, #40]	; 0x28
 801b762:	f7ff ffaf 	bl	801b6c4 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b766:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801b76a:	d200      	bcs.n	801b76e <tcp_recved+0x32>
}
 801b76c:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801b76e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801b770:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801b772:	f043 0302 	orr.w	r3, r3, #2
 801b776:	836b      	strh	r3, [r5, #26]
}
 801b778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801b77c:	f003 bd10 	b.w	801f1a0 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b780:	4b07      	ldr	r3, [pc, #28]	; (801b7a0 <tcp_recved+0x64>)
 801b782:	f240 32d2 	movw	r2, #978	; 0x3d2
 801b786:	4907      	ldr	r1, [pc, #28]	; (801b7a4 <tcp_recved+0x68>)
 801b788:	4807      	ldr	r0, [pc, #28]	; (801b7a8 <tcp_recved+0x6c>)
 801b78a:	f009 fc1f 	bl	8024fcc <iprintf>
 801b78e:	e7dc      	b.n	801b74a <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b790:	4b03      	ldr	r3, [pc, #12]	; (801b7a0 <tcp_recved+0x64>)
 801b792:	f240 32cf 	movw	r2, #975	; 0x3cf
 801b796:	4905      	ldr	r1, [pc, #20]	; (801b7ac <tcp_recved+0x70>)
 801b798:	4803      	ldr	r0, [pc, #12]	; (801b7a8 <tcp_recved+0x6c>)
 801b79a:	f009 bc17 	b.w	8024fcc <iprintf>
 801b79e:	bf00      	nop
 801b7a0:	08043690 	.word	0x08043690
 801b7a4:	080437e0 	.word	0x080437e0
 801b7a8:	0802bdc0 	.word	0x0802bdc0
 801b7ac:	080437c8 	.word	0x080437c8

0801b7b0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b7b2:	2800      	cmp	r0, #0
 801b7b4:	f000 808c 	beq.w	801b8d0 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b7b8:	2900      	cmp	r1, #0
 801b7ba:	d07f      	beq.n	801b8bc <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b7bc:	461e      	mov	r6, r3
 801b7be:	7d03      	ldrb	r3, [r0, #20]
 801b7c0:	4604      	mov	r4, r0
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d16a      	bne.n	801b89c <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b7c6:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b7c8:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801b7ca:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b7cc:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d049      	beq.n	801b866 <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801b7d2:	f7ff f837 	bl	801a844 <netif_get_by_index>
 801b7d6:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801b7d8:	2d00      	cmp	r5, #0
 801b7da:	d06c      	beq.n	801b8b6 <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b7dc:	6823      	ldr	r3, [r4, #0]
 801b7de:	b90b      	cbnz	r3, 801b7e4 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b7e0:	686b      	ldr	r3, [r5, #4]
 801b7e2:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801b7e4:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801b7e6:	b927      	cbnz	r7, 801b7f2 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801b7e8:	f7ff fdf8 	bl	801b3dc <tcp_new_port>
 801b7ec:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801b7ee:	2800      	cmp	r0, #0
 801b7f0:	d05e      	beq.n	801b8b0 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b7f2:	4b3c      	ldr	r3, [pc, #240]	; (801b8e4 <tcp_connect+0x134>)
 801b7f4:	4a3c      	ldr	r2, [pc, #240]	; (801b8e8 <tcp_connect+0x138>)
 801b7f6:	6811      	ldr	r1, [r2, #0]
 801b7f8:	681a      	ldr	r2, [r3, #0]
 801b7fa:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801b7fc:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801b800:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801b802:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801b804:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b806:	4b39      	ldr	r3, [pc, #228]	; (801b8ec <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801b808:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b80a:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801b80c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801b80e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801b812:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801b816:	2200      	movs	r2, #0
 801b818:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b81a:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d037      	beq.n	801b890 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b820:	2b28      	cmp	r3, #40	; 0x28
 801b822:	d907      	bls.n	801b834 <tcp_connect+0x84>
 801b824:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b828:	b292      	uxth	r2, r2
 801b82a:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801b82e:	bf28      	it	cs
 801b830:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801b834:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b836:	2102      	movs	r1, #2
 801b838:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801b83a:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801b83c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801b840:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b844:	f003 fa90 	bl	801ed68 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801b848:	4605      	mov	r5, r0
 801b84a:	b9f8      	cbnz	r0, 801b88c <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801b84c:	2302      	movs	r3, #2
 801b84e:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801b850:	b187      	cbz	r7, 801b874 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b852:	4a27      	ldr	r2, [pc, #156]	; (801b8f0 <tcp_connect+0x140>)
 801b854:	6813      	ldr	r3, [r2, #0]
 801b856:	42a3      	cmp	r3, r4
 801b858:	d01d      	beq.n	801b896 <tcp_connect+0xe6>
 801b85a:	b15b      	cbz	r3, 801b874 <tcp_connect+0xc4>
 801b85c:	68da      	ldr	r2, [r3, #12]
 801b85e:	42a2      	cmp	r2, r4
 801b860:	d006      	beq.n	801b870 <tcp_connect+0xc0>
 801b862:	4613      	mov	r3, r2
 801b864:	e7f9      	b.n	801b85a <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b866:	1d20      	adds	r0, r4, #4
 801b868:	f006 fee4 	bl	8022634 <ip4_route>
 801b86c:	4605      	mov	r5, r0
 801b86e:	e7b3      	b.n	801b7d8 <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b870:	68e2      	ldr	r2, [r4, #12]
 801b872:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801b874:	4b1f      	ldr	r3, [pc, #124]	; (801b8f4 <tcp_connect+0x144>)
 801b876:	681a      	ldr	r2, [r3, #0]
 801b878:	601c      	str	r4, [r3, #0]
 801b87a:	60e2      	str	r2, [r4, #12]
 801b87c:	f003 ffbc 	bl	801f7f8 <tcp_timer_needed>
 801b880:	4b1d      	ldr	r3, [pc, #116]	; (801b8f8 <tcp_connect+0x148>)
 801b882:	2201      	movs	r2, #1
    tcp_output(pcb);
 801b884:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801b886:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801b888:	f003 fc8a 	bl	801f1a0 <tcp_output>
}
 801b88c:	4628      	mov	r0, r5
 801b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b890:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b894:	e7ce      	b.n	801b834 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b896:	68e3      	ldr	r3, [r4, #12]
 801b898:	6013      	str	r3, [r2, #0]
 801b89a:	e7eb      	b.n	801b874 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b89c:	4b17      	ldr	r3, [pc, #92]	; (801b8fc <tcp_connect+0x14c>)
 801b89e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801b8a2:	4917      	ldr	r1, [pc, #92]	; (801b900 <tcp_connect+0x150>)
 801b8a4:	f06f 0509 	mvn.w	r5, #9
 801b8a8:	4816      	ldr	r0, [pc, #88]	; (801b904 <tcp_connect+0x154>)
 801b8aa:	f009 fb8f 	bl	8024fcc <iprintf>
 801b8ae:	e7ed      	b.n	801b88c <tcp_connect+0xdc>
      return ERR_BUF;
 801b8b0:	f06f 0501 	mvn.w	r5, #1
 801b8b4:	e7ea      	b.n	801b88c <tcp_connect+0xdc>
    return ERR_RTE;
 801b8b6:	f06f 0503 	mvn.w	r5, #3
 801b8ba:	e7e7      	b.n	801b88c <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b8bc:	4b0f      	ldr	r3, [pc, #60]	; (801b8fc <tcp_connect+0x14c>)
 801b8be:	f240 4236 	movw	r2, #1078	; 0x436
 801b8c2:	4911      	ldr	r1, [pc, #68]	; (801b908 <tcp_connect+0x158>)
 801b8c4:	f06f 050f 	mvn.w	r5, #15
 801b8c8:	480e      	ldr	r0, [pc, #56]	; (801b904 <tcp_connect+0x154>)
 801b8ca:	f009 fb7f 	bl	8024fcc <iprintf>
 801b8ce:	e7dd      	b.n	801b88c <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8d0:	4b0a      	ldr	r3, [pc, #40]	; (801b8fc <tcp_connect+0x14c>)
 801b8d2:	f240 4235 	movw	r2, #1077	; 0x435
 801b8d6:	490d      	ldr	r1, [pc, #52]	; (801b90c <tcp_connect+0x15c>)
 801b8d8:	f06f 050f 	mvn.w	r5, #15
 801b8dc:	4809      	ldr	r0, [pc, #36]	; (801b904 <tcp_connect+0x154>)
 801b8de:	f009 fb75 	bl	8024fcc <iprintf>
 801b8e2:	e7d3      	b.n	801b88c <tcp_connect+0xdc>
 801b8e4:	20000410 	.word	0x20000410
 801b8e8:	2002dbe4 	.word	0x2002dbe4
 801b8ec:	08600860 	.word	0x08600860
 801b8f0:	2002dbdc 	.word	0x2002dbdc
 801b8f4:	2002dbd4 	.word	0x2002dbd4
 801b8f8:	2002dbd8 	.word	0x2002dbd8
 801b8fc:	08043690 	.word	0x08043690
 801b900:	08043840 	.word	0x08043840
 801b904:	0802bdc0 	.word	0x0802bdc0
 801b908:	08043824 	.word	0x08043824
 801b90c:	08043808 	.word	0x08043808

0801b910 <tcp_segs_free>:
  while (seg != NULL) {
 801b910:	b170      	cbz	r0, 801b930 <tcp_segs_free+0x20>
{
 801b912:	b538      	push	{r3, r4, r5, lr}
 801b914:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801b916:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801b918:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b91a:	6868      	ldr	r0, [r5, #4]
 801b91c:	b108      	cbz	r0, 801b922 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801b91e:	f7ff fa9b 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b922:	4629      	mov	r1, r5
 801b924:	2004      	movs	r0, #4
 801b926:	f7fe fd9b 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801b92a:	2c00      	cmp	r4, #0
 801b92c:	d1f3      	bne.n	801b916 <tcp_segs_free+0x6>
}
 801b92e:	bd38      	pop	{r3, r4, r5, pc}
 801b930:	4770      	bx	lr
 801b932:	bf00      	nop

0801b934 <tcp_seg_free>:
  if (seg != NULL) {
 801b934:	b158      	cbz	r0, 801b94e <tcp_seg_free+0x1a>
{
 801b936:	b510      	push	{r4, lr}
 801b938:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801b93a:	6840      	ldr	r0, [r0, #4]
 801b93c:	b108      	cbz	r0, 801b942 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801b93e:	f7ff fa8b 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b942:	4621      	mov	r1, r4
 801b944:	2004      	movs	r0, #4
}
 801b946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801b94a:	f7fe bd89 	b.w	801a460 <memp_free>
 801b94e:	4770      	bx	lr

0801b950 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b950:	b108      	cbz	r0, 801b956 <tcp_setprio+0x6>
  pcb->prio = prio;
 801b952:	7541      	strb	r1, [r0, #21]
}
 801b954:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b956:	4b03      	ldr	r3, [pc, #12]	; (801b964 <tcp_setprio+0x14>)
 801b958:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801b95c:	4902      	ldr	r1, [pc, #8]	; (801b968 <tcp_setprio+0x18>)
 801b95e:	4803      	ldr	r0, [pc, #12]	; (801b96c <tcp_setprio+0x1c>)
 801b960:	f009 bb34 	b.w	8024fcc <iprintf>
 801b964:	08043690 	.word	0x08043690
 801b968:	08043870 	.word	0x08043870
 801b96c:	0802bdc0 	.word	0x0802bdc0

0801b970 <tcp_seg_copy>:
{
 801b970:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b972:	4605      	mov	r5, r0
 801b974:	b1a0      	cbz	r0, 801b9a0 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801b976:	f240 6284 	movw	r2, #1668	; 0x684
 801b97a:	490d      	ldr	r1, [pc, #52]	; (801b9b0 <tcp_seg_copy+0x40>)
 801b97c:	2004      	movs	r0, #4
 801b97e:	f7fe fd39 	bl	801a3f4 <memp_malloc_fn>
  if (cseg == NULL) {
 801b982:	4604      	mov	r4, r0
 801b984:	b150      	cbz	r0, 801b99c <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b986:	6868      	ldr	r0, [r5, #4]
 801b988:	6829      	ldr	r1, [r5, #0]
 801b98a:	68aa      	ldr	r2, [r5, #8]
 801b98c:	68eb      	ldr	r3, [r5, #12]
 801b98e:	6060      	str	r0, [r4, #4]
 801b990:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801b992:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b994:	60a2      	str	r2, [r4, #8]
 801b996:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801b998:	f7ff fa7c 	bl	801ae94 <pbuf_ref>
}
 801b99c:	4620      	mov	r0, r4
 801b99e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b9a0:	4b03      	ldr	r3, [pc, #12]	; (801b9b0 <tcp_seg_copy+0x40>)
 801b9a2:	f240 6282 	movw	r2, #1666	; 0x682
 801b9a6:	4903      	ldr	r1, [pc, #12]	; (801b9b4 <tcp_seg_copy+0x44>)
 801b9a8:	4803      	ldr	r0, [pc, #12]	; (801b9b8 <tcp_seg_copy+0x48>)
 801b9aa:	f009 fb0f 	bl	8024fcc <iprintf>
 801b9ae:	e7e2      	b.n	801b976 <tcp_seg_copy+0x6>
 801b9b0:	08043690 	.word	0x08043690
 801b9b4:	0804388c 	.word	0x0804388c
 801b9b8:	0802bdc0 	.word	0x0802bdc0

0801b9bc <tcp_arg>:
  if (pcb != NULL) {
 801b9bc:	b100      	cbz	r0, 801b9c0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801b9be:	6101      	str	r1, [r0, #16]
}
 801b9c0:	4770      	bx	lr
 801b9c2:	bf00      	nop

0801b9c4 <tcp_recv>:
  if (pcb != NULL) {
 801b9c4:	b140      	cbz	r0, 801b9d8 <tcp_recv+0x14>
{
 801b9c6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b9c8:	7d03      	ldrb	r3, [r0, #20]
 801b9ca:	4604      	mov	r4, r0
 801b9cc:	460d      	mov	r5, r1
 801b9ce:	2b01      	cmp	r3, #1
 801b9d0:	d003      	beq.n	801b9da <tcp_recv+0x16>
    pcb->recv = recv;
 801b9d2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b9d6:	bd38      	pop	{r3, r4, r5, pc}
 801b9d8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b9da:	4b05      	ldr	r3, [pc, #20]	; (801b9f0 <tcp_recv+0x2c>)
 801b9dc:	f240 72df 	movw	r2, #2015	; 0x7df
 801b9e0:	4904      	ldr	r1, [pc, #16]	; (801b9f4 <tcp_recv+0x30>)
 801b9e2:	4805      	ldr	r0, [pc, #20]	; (801b9f8 <tcp_recv+0x34>)
 801b9e4:	f009 faf2 	bl	8024fcc <iprintf>
    pcb->recv = recv;
 801b9e8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b9ec:	bd38      	pop	{r3, r4, r5, pc}
 801b9ee:	bf00      	nop
 801b9f0:	08043690 	.word	0x08043690
 801b9f4:	080438a8 	.word	0x080438a8
 801b9f8:	0802bdc0 	.word	0x0802bdc0

0801b9fc <tcp_sent>:
  if (pcb != NULL) {
 801b9fc:	b140      	cbz	r0, 801ba10 <tcp_sent+0x14>
{
 801b9fe:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ba00:	7d03      	ldrb	r3, [r0, #20]
 801ba02:	4604      	mov	r4, r0
 801ba04:	460d      	mov	r5, r1
 801ba06:	2b01      	cmp	r3, #1
 801ba08:	d003      	beq.n	801ba12 <tcp_sent+0x16>
    pcb->sent = sent;
 801ba0a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801ba0e:	bd38      	pop	{r3, r4, r5, pc}
 801ba10:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ba12:	4b05      	ldr	r3, [pc, #20]	; (801ba28 <tcp_sent+0x2c>)
 801ba14:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801ba18:	4904      	ldr	r1, [pc, #16]	; (801ba2c <tcp_sent+0x30>)
 801ba1a:	4805      	ldr	r0, [pc, #20]	; (801ba30 <tcp_sent+0x34>)
 801ba1c:	f009 fad6 	bl	8024fcc <iprintf>
    pcb->sent = sent;
 801ba20:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801ba24:	bd38      	pop	{r3, r4, r5, pc}
 801ba26:	bf00      	nop
 801ba28:	08043690 	.word	0x08043690
 801ba2c:	080438d0 	.word	0x080438d0
 801ba30:	0802bdc0 	.word	0x0802bdc0

0801ba34 <tcp_err>:
  if (pcb != NULL) {
 801ba34:	b140      	cbz	r0, 801ba48 <tcp_err+0x14>
{
 801ba36:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ba38:	7d03      	ldrb	r3, [r0, #20]
 801ba3a:	4604      	mov	r4, r0
 801ba3c:	460d      	mov	r5, r1
 801ba3e:	2b01      	cmp	r3, #1
 801ba40:	d003      	beq.n	801ba4a <tcp_err+0x16>
    pcb->errf = err;
 801ba42:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801ba46:	bd38      	pop	{r3, r4, r5, pc}
 801ba48:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ba4a:	4b05      	ldr	r3, [pc, #20]	; (801ba60 <tcp_err+0x2c>)
 801ba4c:	f640 020d 	movw	r2, #2061	; 0x80d
 801ba50:	4904      	ldr	r1, [pc, #16]	; (801ba64 <tcp_err+0x30>)
 801ba52:	4805      	ldr	r0, [pc, #20]	; (801ba68 <tcp_err+0x34>)
 801ba54:	f009 faba 	bl	8024fcc <iprintf>
    pcb->errf = err;
 801ba58:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801ba5c:	bd38      	pop	{r3, r4, r5, pc}
 801ba5e:	bf00      	nop
 801ba60:	08043690 	.word	0x08043690
 801ba64:	080438f8 	.word	0x080438f8
 801ba68:	0802bdc0 	.word	0x0802bdc0

0801ba6c <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801ba6c:	b118      	cbz	r0, 801ba76 <tcp_accept+0xa>
 801ba6e:	7d03      	ldrb	r3, [r0, #20]
 801ba70:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801ba72:	bf08      	it	eq
 801ba74:	6181      	streq	r1, [r0, #24]
}
 801ba76:	4770      	bx	lr

0801ba78 <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ba78:	b1a8      	cbz	r0, 801baa6 <tcp_poll+0x2e>
{
 801ba7a:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ba7c:	7d03      	ldrb	r3, [r0, #20]
 801ba7e:	460e      	mov	r6, r1
 801ba80:	4604      	mov	r4, r0
 801ba82:	4615      	mov	r5, r2
 801ba84:	2b01      	cmp	r3, #1
 801ba86:	d003      	beq.n	801ba90 <tcp_poll+0x18>
  pcb->poll = poll;
 801ba88:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801ba8c:	7765      	strb	r5, [r4, #29]
}
 801ba8e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801ba90:	4b08      	ldr	r3, [pc, #32]	; (801bab4 <tcp_poll+0x3c>)
 801ba92:	f640 023e 	movw	r2, #2110	; 0x83e
 801ba96:	4908      	ldr	r1, [pc, #32]	; (801bab8 <tcp_poll+0x40>)
 801ba98:	4808      	ldr	r0, [pc, #32]	; (801babc <tcp_poll+0x44>)
 801ba9a:	f009 fa97 	bl	8024fcc <iprintf>
  pcb->poll = poll;
 801ba9e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801baa2:	7765      	strb	r5, [r4, #29]
}
 801baa4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801baa6:	4b03      	ldr	r3, [pc, #12]	; (801bab4 <tcp_poll+0x3c>)
 801baa8:	f640 023d 	movw	r2, #2109	; 0x83d
 801baac:	4904      	ldr	r1, [pc, #16]	; (801bac0 <tcp_poll+0x48>)
 801baae:	4803      	ldr	r0, [pc, #12]	; (801babc <tcp_poll+0x44>)
 801bab0:	f009 ba8c 	b.w	8024fcc <iprintf>
 801bab4:	08043690 	.word	0x08043690
 801bab8:	08043938 	.word	0x08043938
 801babc:	0802bdc0 	.word	0x0802bdc0
 801bac0:	08043920 	.word	0x08043920

0801bac4 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bac4:	2800      	cmp	r0, #0
 801bac6:	d041      	beq.n	801bb4c <tcp_pcb_purge+0x88>
{
 801bac8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801baca:	7d03      	ldrb	r3, [r0, #20]
 801bacc:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801bace:	2b0a      	cmp	r3, #10
 801bad0:	d001      	beq.n	801bad6 <tcp_pcb_purge+0x12>
 801bad2:	2b01      	cmp	r3, #1
 801bad4:	d800      	bhi.n	801bad8 <tcp_pcb_purge+0x14>
}
 801bad6:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801bad8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801bada:	b118      	cbz	r0, 801bae4 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801badc:	f7ff f9bc 	bl	801ae58 <pbuf_free>
      pcb->refused_data = NULL;
 801bae0:	2300      	movs	r3, #0
 801bae2:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801bae4:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801bae6:	b164      	cbz	r4, 801bb02 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801bae8:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801baea:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801baec:	6870      	ldr	r0, [r6, #4]
 801baee:	b108      	cbz	r0, 801baf4 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801baf0:	f7ff f9b2 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801baf4:	4631      	mov	r1, r6
 801baf6:	2004      	movs	r0, #4
 801baf8:	f7fe fcb2 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801bafc:	2c00      	cmp	r4, #0
 801bafe:	d1f3      	bne.n	801bae8 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801bb00:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801bb02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801bb06:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801bb08:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801bb0a:	b15c      	cbz	r4, 801bb24 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801bb0c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bb0e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bb10:	6870      	ldr	r0, [r6, #4]
 801bb12:	b108      	cbz	r0, 801bb18 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801bb14:	f7ff f9a0 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bb18:	4631      	mov	r1, r6
 801bb1a:	2004      	movs	r0, #4
 801bb1c:	f7fe fca0 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801bb20:	2c00      	cmp	r4, #0
 801bb22:	d1f3      	bne.n	801bb0c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801bb24:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801bb26:	b15c      	cbz	r4, 801bb40 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801bb28:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bb2a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bb2c:	6870      	ldr	r0, [r6, #4]
 801bb2e:	b108      	cbz	r0, 801bb34 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801bb30:	f7ff f992 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bb34:	4631      	mov	r1, r6
 801bb36:	2004      	movs	r0, #4
 801bb38:	f7fe fc92 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801bb3c:	2c00      	cmp	r4, #0
 801bb3e:	d1f3      	bne.n	801bb28 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801bb40:	2300      	movs	r3, #0
 801bb42:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801bb46:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801bb4a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bb4c:	4b03      	ldr	r3, [pc, #12]	; (801bb5c <tcp_pcb_purge+0x98>)
 801bb4e:	f640 0251 	movw	r2, #2129	; 0x851
 801bb52:	4903      	ldr	r1, [pc, #12]	; (801bb60 <tcp_pcb_purge+0x9c>)
 801bb54:	4803      	ldr	r0, [pc, #12]	; (801bb64 <tcp_pcb_purge+0xa0>)
 801bb56:	f009 ba39 	b.w	8024fcc <iprintf>
 801bb5a:	bf00      	nop
 801bb5c:	08043690 	.word	0x08043690
 801bb60:	08043958 	.word	0x08043958
 801bb64:	0802bdc0 	.word	0x0802bdc0

0801bb68 <tcp_slowtmr>:
{
 801bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801bb6c:	4da9      	ldr	r5, [pc, #676]	; (801be14 <tcp_slowtmr+0x2ac>)
{
 801bb6e:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801bb70:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801be40 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801bb74:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bb76:	4fa8      	ldr	r7, [pc, #672]	; (801be18 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801bb78:	3301      	adds	r3, #1
 801bb7a:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801bb7c:	f89b 3000 	ldrb.w	r3, [fp]
 801bb80:	3301      	adds	r3, #1
 801bb82:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801bb86:	4ba5      	ldr	r3, [pc, #660]	; (801be1c <tcp_slowtmr+0x2b4>)
 801bb88:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801bb8a:	2c00      	cmp	r4, #0
 801bb8c:	f000 808a 	beq.w	801bca4 <tcp_slowtmr+0x13c>
  prev = NULL;
 801bb90:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bb92:	46b1      	mov	r9, r6
 801bb94:	7d23      	ldrb	r3, [r4, #20]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	f000 80fc 	beq.w	801bd94 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bb9c:	2b01      	cmp	r3, #1
 801bb9e:	f000 8104 	beq.w	801bdaa <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bba2:	2b0a      	cmp	r3, #10
 801bba4:	f000 810c 	beq.w	801bdc0 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bba8:	f89b 2000 	ldrb.w	r2, [fp]
 801bbac:	7fa3      	ldrb	r3, [r4, #30]
 801bbae:	4293      	cmp	r3, r2
 801bbb0:	f000 8113 	beq.w	801bdda <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bbb4:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801bbb6:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bbb8:	2b02      	cmp	r3, #2
 801bbba:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801bbbe:	f000 8112 	beq.w	801bde6 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801bbc2:	2a0b      	cmp	r2, #11
 801bbc4:	f240 80cb 	bls.w	801bd5e <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801bbc8:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801bbcc:	2b06      	cmp	r3, #6
 801bbce:	f000 80b7 	beq.w	801bd40 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801bbd2:	f894 a009 	ldrb.w	sl, [r4, #9]
 801bbd6:	f01a 0a08 	ands.w	sl, sl, #8
 801bbda:	d01d      	beq.n	801bc18 <tcp_slowtmr+0xb0>
 801bbdc:	2b04      	cmp	r3, #4
 801bbde:	d007      	beq.n	801bbf0 <tcp_slowtmr+0x88>
 801bbe0:	f1a3 0307 	sub.w	r3, r3, #7
 801bbe4:	fab3 f383 	clz	r3, r3
 801bbe8:	095b      	lsrs	r3, r3, #5
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f000 80b4 	beq.w	801bd58 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bbf0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801bbf4:	4b8a      	ldr	r3, [pc, #552]	; (801be20 <tcp_slowtmr+0x2b8>)
 801bbf6:	488b      	ldr	r0, [pc, #556]	; (801be24 <tcp_slowtmr+0x2bc>)
 801bbf8:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bbfa:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bbfc:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bc00:	6a20      	ldr	r0, [r4, #32]
 801bc02:	1a12      	subs	r2, r2, r0
 801bc04:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801bc08:	f240 8160 	bls.w	801becc <tcp_slowtmr+0x364>
        ++pcb_remove;
 801bc0c:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801bc10:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801bc14:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801bc18:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801bc1a:	b156      	cbz	r6, 801bc32 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801bc1c:	682b      	ldr	r3, [r5, #0]
 801bc1e:	6a22      	ldr	r2, [r4, #32]
 801bc20:	1a9a      	subs	r2, r3, r2
 801bc22:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801bc26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801bc2a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801bc2e:	f080 80e1 	bcs.w	801bdf4 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801bc32:	7d23      	ldrb	r3, [r4, #20]
 801bc34:	2b03      	cmp	r3, #3
 801bc36:	d057      	beq.n	801bce8 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801bc38:	2b09      	cmp	r3, #9
 801bc3a:	d15a      	bne.n	801bcf2 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bc3c:	682b      	ldr	r3, [r5, #0]
 801bc3e:	6a22      	ldr	r2, [r4, #32]
 801bc40:	1a9b      	subs	r3, r3, r2
 801bc42:	2bf0      	cmp	r3, #240	; 0xf0
 801bc44:	d955      	bls.n	801bcf2 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801bc46:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801bc48:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801bc4c:	f7ff ff3a 	bl	801bac4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801bc50:	4b72      	ldr	r3, [pc, #456]	; (801be1c <tcp_slowtmr+0x2b4>)
 801bc52:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801bc54:	f1b9 0f00 	cmp.w	r9, #0
 801bc58:	f000 817e 	beq.w	801bf58 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801bc5c:	42a3      	cmp	r3, r4
 801bc5e:	f000 81df 	beq.w	801c020 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801bc62:	68e3      	ldr	r3, [r4, #12]
 801bc64:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801bc68:	f1ba 0f00 	cmp.w	sl, #0
 801bc6c:	f040 8147 	bne.w	801befe <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bc70:	7d23      	ldrb	r3, [r4, #20]
 801bc72:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801bc74:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bc78:	f000 8153 	beq.w	801bf22 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801bc7c:	4621      	mov	r1, r4
 801bc7e:	2002      	movs	r0, #2
 801bc80:	f7fe fbee 	bl	801a460 <memp_free>
      tcp_active_pcbs_changed = 0;
 801bc84:	4c68      	ldr	r4, [pc, #416]	; (801be28 <tcp_slowtmr+0x2c0>)
 801bc86:	2300      	movs	r3, #0
 801bc88:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801bc8a:	b13e      	cbz	r6, 801bc9c <tcp_slowtmr+0x134>
 801bc8c:	f06f 010c 	mvn.w	r1, #12
 801bc90:	4650      	mov	r0, sl
 801bc92:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801bc94:	7823      	ldrb	r3, [r4, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	f47f af75 	bne.w	801bb86 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801bc9c:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801bc9e:	2c00      	cmp	r4, #0
 801bca0:	f47f af78 	bne.w	801bb94 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801bca4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801be44 <tcp_slowtmr+0x2dc>
 801bca8:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801bcac:	b1cc      	cbz	r4, 801bce2 <tcp_slowtmr+0x17a>
  prev = NULL;
 801bcae:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bcb0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801be18 <tcp_slowtmr+0x2b0>
 801bcb4:	f8df a190 	ldr.w	sl, [pc, #400]	; 801be48 <tcp_slowtmr+0x2e0>
 801bcb8:	4f5c      	ldr	r7, [pc, #368]	; (801be2c <tcp_slowtmr+0x2c4>)
 801bcba:	7d23      	ldrb	r3, [r4, #20]
 801bcbc:	2b0a      	cmp	r3, #10
 801bcbe:	d006      	beq.n	801bcce <tcp_slowtmr+0x166>
 801bcc0:	4643      	mov	r3, r8
 801bcc2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801bcc6:	4651      	mov	r1, sl
 801bcc8:	4638      	mov	r0, r7
 801bcca:	f009 f97f 	bl	8024fcc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bcce:	682b      	ldr	r3, [r5, #0]
 801bcd0:	6a22      	ldr	r2, [r4, #32]
 801bcd2:	1a9b      	subs	r3, r3, r2
 801bcd4:	2bf0      	cmp	r3, #240	; 0xf0
 801bcd6:	f200 80d4 	bhi.w	801be82 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801bcda:	4626      	mov	r6, r4
 801bcdc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801bcde:	2c00      	cmp	r4, #0
 801bce0:	d1eb      	bne.n	801bcba <tcp_slowtmr+0x152>
}
 801bce2:	b007      	add	sp, #28
 801bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bce8:	682b      	ldr	r3, [r5, #0]
 801bcea:	6a22      	ldr	r2, [r4, #32]
 801bcec:	1a9b      	subs	r3, r3, r2
 801bcee:	2b28      	cmp	r3, #40	; 0x28
 801bcf0:	d8a9      	bhi.n	801bc46 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801bcf2:	f1b8 0f00 	cmp.w	r8, #0
 801bcf6:	d1a6      	bne.n	801bc46 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801bcf8:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801bcfa:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801bcfc:	3301      	adds	r3, #1
      pcb = pcb->next;
 801bcfe:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801bd00:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801bd02:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801bd04:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801bd06:	d815      	bhi.n	801bd34 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801bd08:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801be28 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801bd0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801bd10:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801bd14:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	f000 80ce 	beq.w	801beba <tcp_slowtmr+0x352>
 801bd1e:	4621      	mov	r1, r4
 801bd20:	6920      	ldr	r0, [r4, #16]
 801bd22:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801bd24:	f899 3000 	ldrb.w	r3, [r9]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	f47f af2c 	bne.w	801bb86 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801bd2e:	2800      	cmp	r0, #0
 801bd30:	f000 80c3 	beq.w	801beba <tcp_slowtmr+0x352>
 801bd34:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bd36:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801bd38:	2c00      	cmp	r4, #0
 801bd3a:	f47f af2b 	bne.w	801bb94 <tcp_slowtmr+0x2c>
 801bd3e:	e7b1      	b.n	801bca4 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801bd40:	8b63      	ldrh	r3, [r4, #26]
 801bd42:	06db      	lsls	r3, r3, #27
 801bd44:	d508      	bpl.n	801bd58 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bd46:	682b      	ldr	r3, [r5, #0]
 801bd48:	6a22      	ldr	r2, [r4, #32]
 801bd4a:	1a9b      	subs	r3, r3, r2
 801bd4c:	2b28      	cmp	r3, #40	; 0x28
 801bd4e:	d903      	bls.n	801bd58 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801bd50:	f108 0801 	add.w	r8, r8, #1
 801bd54:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801bd58:	f04f 0a00 	mov.w	sl, #0
 801bd5c:	e75c      	b.n	801bc18 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801bd5e:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801bd62:	f1b8 0f00 	cmp.w	r8, #0
 801bd66:	d071      	beq.n	801be4c <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801bd68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd6a:	b133      	cbz	r3, 801bd7a <tcp_slowtmr+0x212>
 801bd6c:	463b      	mov	r3, r7
 801bd6e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801bd72:	492f      	ldr	r1, [pc, #188]	; (801be30 <tcp_slowtmr+0x2c8>)
 801bd74:	482d      	ldr	r0, [pc, #180]	; (801be2c <tcp_slowtmr+0x2c4>)
 801bd76:	f009 f929 	bl	8024fcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801bd7a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	f000 8171 	beq.w	801c064 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801bd82:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801bd86:	2b0b      	cmp	r3, #11
 801bd88:	f240 80d2 	bls.w	801bf30 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801bd8c:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801bd8e:	f04f 0801 	mov.w	r8, #1
 801bd92:	e71b      	b.n	801bbcc <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bd94:	463b      	mov	r3, r7
 801bd96:	f240 42be 	movw	r2, #1214	; 0x4be
 801bd9a:	4926      	ldr	r1, [pc, #152]	; (801be34 <tcp_slowtmr+0x2cc>)
 801bd9c:	4823      	ldr	r0, [pc, #140]	; (801be2c <tcp_slowtmr+0x2c4>)
 801bd9e:	f009 f915 	bl	8024fcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bda2:	7d23      	ldrb	r3, [r4, #20]
 801bda4:	2b01      	cmp	r3, #1
 801bda6:	f47f aefc 	bne.w	801bba2 <tcp_slowtmr+0x3a>
 801bdaa:	463b      	mov	r3, r7
 801bdac:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801bdb0:	4921      	ldr	r1, [pc, #132]	; (801be38 <tcp_slowtmr+0x2d0>)
 801bdb2:	481e      	ldr	r0, [pc, #120]	; (801be2c <tcp_slowtmr+0x2c4>)
 801bdb4:	f009 f90a 	bl	8024fcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bdb8:	7d23      	ldrb	r3, [r4, #20]
 801bdba:	2b0a      	cmp	r3, #10
 801bdbc:	f47f aef4 	bne.w	801bba8 <tcp_slowtmr+0x40>
 801bdc0:	463b      	mov	r3, r7
 801bdc2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801bdc6:	491d      	ldr	r1, [pc, #116]	; (801be3c <tcp_slowtmr+0x2d4>)
 801bdc8:	4818      	ldr	r0, [pc, #96]	; (801be2c <tcp_slowtmr+0x2c4>)
 801bdca:	f009 f8ff 	bl	8024fcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bdce:	f89b 2000 	ldrb.w	r2, [fp]
 801bdd2:	7fa3      	ldrb	r3, [r4, #30]
 801bdd4:	4293      	cmp	r3, r2
 801bdd6:	f47f aeed 	bne.w	801bbb4 <tcp_slowtmr+0x4c>
      continue;
 801bdda:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bddc:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801bdde:	2c00      	cmp	r4, #0
 801bde0:	f47f aed8 	bne.w	801bb94 <tcp_slowtmr+0x2c>
 801bde4:	e75e      	b.n	801bca4 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bde6:	2a05      	cmp	r2, #5
 801bde8:	d9b9      	bls.n	801bd5e <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801bdea:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801bdee:	f04f 0801 	mov.w	r8, #1
 801bdf2:	e711      	b.n	801bc18 <tcp_slowtmr+0xb0>
 801bdf4:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801bdf6:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801bdf8:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801bdfa:	6860      	ldr	r0, [r4, #4]
 801bdfc:	b108      	cbz	r0, 801be02 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801bdfe:	f7ff f82b 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801be02:	4621      	mov	r1, r4
 801be04:	2004      	movs	r0, #4
 801be06:	f7fe fb2b 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801be0a:	2e00      	cmp	r6, #0
 801be0c:	d1f3      	bne.n	801bdf6 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801be0e:	9c05      	ldr	r4, [sp, #20]
 801be10:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801be12:	e70e      	b.n	801bc32 <tcp_slowtmr+0xca>
 801be14:	2002dbe4 	.word	0x2002dbe4
 801be18:	08043690 	.word	0x08043690
 801be1c:	2002dbd4 	.word	0x2002dbd4
 801be20:	000a4cb8 	.word	0x000a4cb8
 801be24:	10624dd3 	.word	0x10624dd3
 801be28:	2002dbd8 	.word	0x2002dbd8
 801be2c:	0802bdc0 	.word	0x0802bdc0
 801be30:	080439fc 	.word	0x080439fc
 801be34:	08043974 	.word	0x08043974
 801be38:	080439a0 	.word	0x080439a0
 801be3c:	080439cc 	.word	0x080439cc
 801be40:	2002dbe9 	.word	0x2002dbe9
 801be44:	2002dbec 	.word	0x2002dbec
 801be48:	08043ac0 	.word	0x08043ac0
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801be4c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801be50:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801be54:	b291      	uxth	r1, r2
 801be56:	4281      	cmp	r1, r0
 801be58:	d802      	bhi.n	801be60 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801be5a:	1c4a      	adds	r2, r1, #1
 801be5c:	b212      	sxth	r2, r2
 801be5e:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801be60:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801be64:	4291      	cmp	r1, r2
 801be66:	f73f aeb1 	bgt.w	801bbcc <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801be6a:	4620      	mov	r0, r4
 801be6c:	f003 f85a 	bl	801ef24 <tcp_rexmit_rto_prepare>
 801be70:	2800      	cmp	r0, #0
 801be72:	f000 80a0 	beq.w	801bfb6 <tcp_slowtmr+0x44e>
 801be76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801be78:	2b00      	cmp	r3, #0
 801be7a:	f000 8098 	beq.w	801bfae <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801be7e:	7d23      	ldrb	r3, [r4, #20]
 801be80:	e6a4      	b.n	801bbcc <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801be82:	4620      	mov	r0, r4
 801be84:	f7ff fe1e 	bl	801bac4 <tcp_pcb_purge>
      if (prev != NULL) {
 801be88:	2e00      	cmp	r6, #0
 801be8a:	f000 80d1 	beq.w	801c030 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801be8e:	f8d9 3000 	ldr.w	r3, [r9]
 801be92:	42a3      	cmp	r3, r4
 801be94:	f000 80ee 	beq.w	801c074 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801be98:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801be9c:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bea0:	7d23      	ldrb	r3, [r4, #20]
 801bea2:	2b01      	cmp	r3, #1
 801bea4:	f000 80d7 	beq.w	801c056 <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801bea8:	4621      	mov	r1, r4
      pcb = pcb->next;
 801beaa:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801beac:	2002      	movs	r0, #2
 801beae:	f7fe fad7 	bl	801a460 <memp_free>
  while (pcb != NULL) {
 801beb2:	2c00      	cmp	r4, #0
 801beb4:	f47f af01 	bne.w	801bcba <tcp_slowtmr+0x152>
 801beb8:	e713      	b.n	801bce2 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801beba:	4620      	mov	r0, r4
 801bebc:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bebe:	4634      	mov	r4, r6
          tcp_output(prev);
 801bec0:	f003 f96e 	bl	801f1a0 <tcp_output>
  while (pcb != NULL) {
 801bec4:	2c00      	cmp	r4, #0
 801bec6:	f47f ae65 	bne.w	801bb94 <tcp_slowtmr+0x2c>
 801beca:	e6eb      	b.n	801bca4 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801becc:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801bed0:	4870      	ldr	r0, [pc, #448]	; (801c094 <tcp_slowtmr+0x52c>)
 801bed2:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801bed6:	4b70      	ldr	r3, [pc, #448]	; (801c098 <tcp_slowtmr+0x530>)
 801bed8:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bedc:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801bee0:	f67f af3a 	bls.w	801bd58 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801bee4:	4620      	mov	r0, r4
 801bee6:	f003 fb91 	bl	801f60c <tcp_keepalive>
        if (err == ERR_OK) {
 801beea:	2800      	cmp	r0, #0
 801beec:	f47f af34 	bne.w	801bd58 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801bef0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801bef4:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801bef6:	3301      	adds	r3, #1
 801bef8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801befc:	e68c      	b.n	801bc18 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801befe:	8b23      	ldrh	r3, [r4, #24]
 801bf00:	4620      	mov	r0, r4
 801bf02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bf04:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801bf06:	9302      	str	r3, [sp, #8]
 801bf08:	8ae3      	ldrh	r3, [r4, #22]
 801bf0a:	9301      	str	r3, [sp, #4]
 801bf0c:	1d23      	adds	r3, r4, #4
 801bf0e:	9300      	str	r3, [sp, #0]
 801bf10:	4623      	mov	r3, r4
 801bf12:	f003 f8cb 	bl	801f0ac <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bf16:	7d23      	ldrb	r3, [r4, #20]
 801bf18:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801bf1a:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bf1e:	f47f aead 	bne.w	801bc7c <tcp_slowtmr+0x114>
 801bf22:	463b      	mov	r3, r7
 801bf24:	22d4      	movs	r2, #212	; 0xd4
 801bf26:	495d      	ldr	r1, [pc, #372]	; (801c09c <tcp_slowtmr+0x534>)
 801bf28:	485d      	ldr	r0, [pc, #372]	; (801c0a0 <tcp_slowtmr+0x538>)
 801bf2a:	f009 f84f 	bl	8024fcc <iprintf>
 801bf2e:	e6a5      	b.n	801bc7c <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801bf30:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801bf34:	4a5b      	ldr	r2, [pc, #364]	; (801c0a4 <tcp_slowtmr+0x53c>)
 801bf36:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801bf38:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801bf3c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801bf40:	4293      	cmp	r3, r2
 801bf42:	d216      	bcs.n	801bf72 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801bf44:	3301      	adds	r3, #1
 801bf46:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801bf48:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801bf4a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801bf4e:	d210      	bcs.n	801bf72 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801bf50:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801bf52:	f04f 0800 	mov.w	r8, #0
 801bf56:	e639      	b.n	801bbcc <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801bf58:	42a3      	cmp	r3, r4
 801bf5a:	d006      	beq.n	801bf6a <tcp_slowtmr+0x402>
 801bf5c:	463b      	mov	r3, r7
 801bf5e:	f240 5271 	movw	r2, #1393	; 0x571
 801bf62:	4951      	ldr	r1, [pc, #324]	; (801c0a8 <tcp_slowtmr+0x540>)
 801bf64:	484e      	ldr	r0, [pc, #312]	; (801c0a0 <tcp_slowtmr+0x538>)
 801bf66:	f009 f831 	bl	8024fcc <iprintf>
        tcp_active_pcbs = pcb->next;
 801bf6a:	68e3      	ldr	r3, [r4, #12]
 801bf6c:	4a4f      	ldr	r2, [pc, #316]	; (801c0ac <tcp_slowtmr+0x544>)
 801bf6e:	6013      	str	r3, [r2, #0]
 801bf70:	e67a      	b.n	801bc68 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801bf72:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801bf76:	b936      	cbnz	r6, 801bf86 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801bf78:	4620      	mov	r0, r4
 801bf7a:	f003 fb6d 	bl	801f658 <tcp_zero_window_probe>
 801bf7e:	b140      	cbz	r0, 801bf92 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801bf80:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801bf82:	7d23      	ldrb	r3, [r4, #20]
 801bf84:	e622      	b.n	801bbcc <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801bf86:	4631      	mov	r1, r6
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f002 fe17 	bl	801ebbc <tcp_split_unsent_seg>
 801bf8e:	2800      	cmp	r0, #0
 801bf90:	d078      	beq.n	801c084 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bf92:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801bf96:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bf9a:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801bf9c:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801bfa0:	f63f af6d 	bhi.w	801be7e <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801bfa4:	3301      	adds	r3, #1
 801bfa6:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801bfaa:	7d23      	ldrb	r3, [r4, #20]
 801bfac:	e60e      	b.n	801bbcc <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801bfae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	f43f af64 	beq.w	801be7e <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801bfb6:	7d23      	ldrb	r3, [r4, #20]
 801bfb8:	2b02      	cmp	r3, #2
 801bfba:	d014      	beq.n	801bfe6 <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801bfbc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801bfc0:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801bfc4:	2a0c      	cmp	r2, #12
 801bfc6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801bfca:	bf28      	it	cs
 801bfcc:	220c      	movcs	r2, #12
 801bfce:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801bfd2:	4937      	ldr	r1, [pc, #220]	; (801c0b0 <tcp_slowtmr+0x548>)
 801bfd4:	5c8a      	ldrb	r2, [r1, r2]
 801bfd6:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801bfd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bfdc:	4293      	cmp	r3, r2
 801bfde:	bfa8      	it	ge
 801bfe0:	4613      	movge	r3, r2
 801bfe2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801bfe6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801bfea:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801bfec:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801bff0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801bff2:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801bff4:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801bff8:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801bffc:	bf28      	it	cs
 801bffe:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c000:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c002:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801c006:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c00a:	bf88      	it	hi
 801c00c:	4613      	movhi	r3, r2
 801c00e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801c012:	2300      	movs	r3, #0
 801c014:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801c016:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c01a:	f003 faab 	bl	801f574 <tcp_rexmit_rto_commit>
 801c01e:	e72e      	b.n	801be7e <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c020:	463b      	mov	r3, r7
 801c022:	f240 526d 	movw	r2, #1389	; 0x56d
 801c026:	4923      	ldr	r1, [pc, #140]	; (801c0b4 <tcp_slowtmr+0x54c>)
 801c028:	481d      	ldr	r0, [pc, #116]	; (801c0a0 <tcp_slowtmr+0x538>)
 801c02a:	f008 ffcf 	bl	8024fcc <iprintf>
 801c02e:	e618      	b.n	801bc62 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801c030:	f8d9 3000 	ldr.w	r3, [r9]
 801c034:	42a3      	cmp	r3, r4
 801c036:	d006      	beq.n	801c046 <tcp_slowtmr+0x4de>
 801c038:	4643      	mov	r3, r8
 801c03a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801c03e:	491e      	ldr	r1, [pc, #120]	; (801c0b8 <tcp_slowtmr+0x550>)
 801c040:	4638      	mov	r0, r7
 801c042:	f008 ffc3 	bl	8024fcc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c046:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801c048:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c04c:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801c04e:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c052:	f47f af29 	bne.w	801bea8 <tcp_slowtmr+0x340>
 801c056:	4643      	mov	r3, r8
 801c058:	22d4      	movs	r2, #212	; 0xd4
 801c05a:	4910      	ldr	r1, [pc, #64]	; (801c09c <tcp_slowtmr+0x534>)
 801c05c:	4638      	mov	r0, r7
 801c05e:	f008 ffb5 	bl	8024fcc <iprintf>
 801c062:	e721      	b.n	801bea8 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c064:	463b      	mov	r3, r7
 801c066:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801c06a:	4914      	ldr	r1, [pc, #80]	; (801c0bc <tcp_slowtmr+0x554>)
 801c06c:	480c      	ldr	r0, [pc, #48]	; (801c0a0 <tcp_slowtmr+0x538>)
 801c06e:	f008 ffad 	bl	8024fcc <iprintf>
 801c072:	e686      	b.n	801bd82 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c074:	4643      	mov	r3, r8
 801c076:	f240 52af 	movw	r2, #1455	; 0x5af
 801c07a:	4911      	ldr	r1, [pc, #68]	; (801c0c0 <tcp_slowtmr+0x558>)
 801c07c:	4638      	mov	r0, r7
 801c07e:	f008 ffa5 	bl	8024fcc <iprintf>
 801c082:	e709      	b.n	801be98 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801c084:	4620      	mov	r0, r4
 801c086:	f003 f88b 	bl	801f1a0 <tcp_output>
 801c08a:	2800      	cmp	r0, #0
 801c08c:	d181      	bne.n	801bf92 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801c08e:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801c090:	7d23      	ldrb	r3, [r4, #20]
 801c092:	e59b      	b.n	801bbcc <tcp_slowtmr+0x64>
 801c094:	000124f8 	.word	0x000124f8
 801c098:	10624dd3 	.word	0x10624dd3
 801c09c:	080436cc 	.word	0x080436cc
 801c0a0:	0802bdc0 	.word	0x0802bdc0
 801c0a4:	08043d84 	.word	0x08043d84
 801c0a8:	08043a94 	.word	0x08043a94
 801c0ac:	2002dbd4 	.word	0x2002dbd4
 801c0b0:	08043d64 	.word	0x08043d64
 801c0b4:	08043a68 	.word	0x08043a68
 801c0b8:	08043b18 	.word	0x08043b18
 801c0bc:	08043a30 	.word	0x08043a30
 801c0c0:	08043af0 	.word	0x08043af0

0801c0c4 <tcp_pcb_remove>:
{
 801c0c4:	b538      	push	{r3, r4, r5, lr}
 801c0c6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c0c8:	460c      	mov	r4, r1
 801c0ca:	2900      	cmp	r1, #0
 801c0cc:	d04a      	beq.n	801c164 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c0ce:	2d00      	cmp	r5, #0
 801c0d0:	d051      	beq.n	801c176 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801c0d2:	682b      	ldr	r3, [r5, #0]
 801c0d4:	42a3      	cmp	r3, r4
 801c0d6:	d032      	beq.n	801c13e <tcp_pcb_remove+0x7a>
 801c0d8:	b12b      	cbz	r3, 801c0e6 <tcp_pcb_remove+0x22>
 801c0da:	68da      	ldr	r2, [r3, #12]
 801c0dc:	42a2      	cmp	r2, r4
 801c0de:	d03e      	beq.n	801c15e <tcp_pcb_remove+0x9a>
 801c0e0:	4613      	mov	r3, r2
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d1f9      	bne.n	801c0da <tcp_pcb_remove+0x16>
 801c0e6:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801c0e8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801c0ea:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801c0ec:	f7ff fcea 	bl	801bac4 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801c0f0:	7d23      	ldrb	r3, [r4, #20]
 801c0f2:	2b0a      	cmp	r3, #10
 801c0f4:	d02d      	beq.n	801c152 <tcp_pcb_remove+0x8e>
 801c0f6:	2b01      	cmp	r3, #1
 801c0f8:	d01d      	beq.n	801c136 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801c0fa:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801c0fc:	07da      	lsls	r2, r3, #31
 801c0fe:	d421      	bmi.n	801c144 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c100:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c102:	b133      	cbz	r3, 801c112 <tcp_pcb_remove+0x4e>
 801c104:	4b20      	ldr	r3, [pc, #128]	; (801c188 <tcp_pcb_remove+0xc4>)
 801c106:	f640 0293 	movw	r2, #2195	; 0x893
 801c10a:	4920      	ldr	r1, [pc, #128]	; (801c18c <tcp_pcb_remove+0xc8>)
 801c10c:	4820      	ldr	r0, [pc, #128]	; (801c190 <tcp_pcb_remove+0xcc>)
 801c10e:	f008 ff5d 	bl	8024fcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c112:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c114:	b133      	cbz	r3, 801c124 <tcp_pcb_remove+0x60>
 801c116:	4b1c      	ldr	r3, [pc, #112]	; (801c188 <tcp_pcb_remove+0xc4>)
 801c118:	f640 0294 	movw	r2, #2196	; 0x894
 801c11c:	491d      	ldr	r1, [pc, #116]	; (801c194 <tcp_pcb_remove+0xd0>)
 801c11e:	481c      	ldr	r0, [pc, #112]	; (801c190 <tcp_pcb_remove+0xcc>)
 801c120:	f008 ff54 	bl	8024fcc <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c124:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c126:	b133      	cbz	r3, 801c136 <tcp_pcb_remove+0x72>
 801c128:	4b17      	ldr	r3, [pc, #92]	; (801c188 <tcp_pcb_remove+0xc4>)
 801c12a:	f640 0296 	movw	r2, #2198	; 0x896
 801c12e:	491a      	ldr	r1, [pc, #104]	; (801c198 <tcp_pcb_remove+0xd4>)
 801c130:	4817      	ldr	r0, [pc, #92]	; (801c190 <tcp_pcb_remove+0xcc>)
 801c132:	f008 ff4b 	bl	8024fcc <iprintf>
  pcb->state = CLOSED;
 801c136:	2300      	movs	r3, #0
 801c138:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801c13a:	82e3      	strh	r3, [r4, #22]
}
 801c13c:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801c13e:	68e3      	ldr	r3, [r4, #12]
 801c140:	602b      	str	r3, [r5, #0]
 801c142:	e7d0      	b.n	801c0e6 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801c144:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801c148:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801c14a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801c14c:	f003 f828 	bl	801f1a0 <tcp_output>
  if (pcb->state != LISTEN) {
 801c150:	7d23      	ldrb	r3, [r4, #20]
 801c152:	2b01      	cmp	r3, #1
 801c154:	d0ef      	beq.n	801c136 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c156:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d1d3      	bne.n	801c104 <tcp_pcb_remove+0x40>
 801c15c:	e7d9      	b.n	801c112 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801c15e:	68e2      	ldr	r2, [r4, #12]
 801c160:	60da      	str	r2, [r3, #12]
 801c162:	e7c0      	b.n	801c0e6 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c164:	4b08      	ldr	r3, [pc, #32]	; (801c188 <tcp_pcb_remove+0xc4>)
 801c166:	f640 0283 	movw	r2, #2179	; 0x883
 801c16a:	490c      	ldr	r1, [pc, #48]	; (801c19c <tcp_pcb_remove+0xd8>)
 801c16c:	4808      	ldr	r0, [pc, #32]	; (801c190 <tcp_pcb_remove+0xcc>)
 801c16e:	f008 ff2d 	bl	8024fcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c172:	2d00      	cmp	r5, #0
 801c174:	d1ad      	bne.n	801c0d2 <tcp_pcb_remove+0xe>
 801c176:	4b04      	ldr	r3, [pc, #16]	; (801c188 <tcp_pcb_remove+0xc4>)
 801c178:	f640 0284 	movw	r2, #2180	; 0x884
 801c17c:	4908      	ldr	r1, [pc, #32]	; (801c1a0 <tcp_pcb_remove+0xdc>)
 801c17e:	4804      	ldr	r0, [pc, #16]	; (801c190 <tcp_pcb_remove+0xcc>)
 801c180:	f008 ff24 	bl	8024fcc <iprintf>
 801c184:	e7a5      	b.n	801c0d2 <tcp_pcb_remove+0xe>
 801c186:	bf00      	nop
 801c188:	08043690 	.word	0x08043690
 801c18c:	08043b7c 	.word	0x08043b7c
 801c190:	0802bdc0 	.word	0x0802bdc0
 801c194:	08043b94 	.word	0x08043b94
 801c198:	08043bb0 	.word	0x08043bb0
 801c19c:	08043b40 	.word	0x08043b40
 801c1a0:	08043b5c 	.word	0x08043b5c

0801c1a4 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	f000 80ad 	beq.w	801c304 <tcp_abandon+0x160>
{
 801c1aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c1ae:	7d03      	ldrb	r3, [r0, #20]
{
 801c1b0:	b087      	sub	sp, #28
 801c1b2:	4605      	mov	r5, r0
 801c1b4:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c1b6:	2b01      	cmp	r3, #1
 801c1b8:	f000 808b 	beq.w	801c2d2 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801c1bc:	2b0a      	cmp	r3, #10
 801c1be:	f000 8093 	beq.w	801c2e8 <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801c1c2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801c1c4:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801c1c8:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801c1cc:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801c1d0:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801c1d2:	b96b      	cbnz	r3, 801c1f0 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801c1d4:	8aef      	ldrh	r7, [r5, #22]
 801c1d6:	2f00      	cmp	r7, #0
 801c1d8:	d052      	beq.n	801c280 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c1da:	4a51      	ldr	r2, [pc, #324]	; (801c320 <tcp_abandon+0x17c>)
 801c1dc:	6813      	ldr	r3, [r2, #0]
 801c1de:	42ab      	cmp	r3, r5
 801c1e0:	d074      	beq.n	801c2cc <tcp_abandon+0x128>
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d050      	beq.n	801c288 <tcp_abandon+0xe4>
 801c1e6:	68da      	ldr	r2, [r3, #12]
 801c1e8:	42aa      	cmp	r2, r5
 801c1ea:	d04b      	beq.n	801c284 <tcp_abandon+0xe0>
 801c1ec:	4613      	mov	r3, r2
 801c1ee:	e7f8      	b.n	801c1e2 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c1f0:	4629      	mov	r1, r5
 801c1f2:	484c      	ldr	r0, [pc, #304]	; (801c324 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801c1f4:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c1f6:	f7ff ff65 	bl	801c0c4 <tcp_pcb_remove>
 801c1fa:	4b4b      	ldr	r3, [pc, #300]	; (801c328 <tcp_abandon+0x184>)
 801c1fc:	2201      	movs	r2, #1
 801c1fe:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801c200:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801c202:	b164      	cbz	r4, 801c21e <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801c204:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c206:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c208:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c20c:	b108      	cbz	r0, 801c212 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801c20e:	f7fe fe23 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c212:	4651      	mov	r1, sl
 801c214:	2004      	movs	r0, #4
 801c216:	f7fe f923 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801c21a:	2c00      	cmp	r4, #0
 801c21c:	d1f2      	bne.n	801c204 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801c21e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801c220:	b164      	cbz	r4, 801c23c <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801c222:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c224:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c226:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c22a:	b108      	cbz	r0, 801c230 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801c22c:	f7fe fe14 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c230:	4651      	mov	r1, sl
 801c232:	2004      	movs	r0, #4
 801c234:	f7fe f914 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801c238:	2c00      	cmp	r4, #0
 801c23a:	d1f2      	bne.n	801c222 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801c23c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801c23e:	b164      	cbz	r4, 801c25a <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801c240:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c242:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c244:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c248:	b108      	cbz	r0, 801c24e <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801c24a:	f7fe fe05 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c24e:	4651      	mov	r1, sl
 801c250:	2004      	movs	r0, #4
 801c252:	f7fe f905 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801c256:	2c00      	cmp	r4, #0
 801c258:	d1f2      	bne.n	801c240 <tcp_abandon+0x9c>
    if (send_rst) {
 801c25a:	b9ce      	cbnz	r6, 801c290 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c25c:	7d2b      	ldrb	r3, [r5, #20]
 801c25e:	2b01      	cmp	r3, #1
 801c260:	d024      	beq.n	801c2ac <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801c262:	4629      	mov	r1, r5
 801c264:	2002      	movs	r0, #2
 801c266:	f7fe f8fb 	bl	801a460 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c26a:	f1b8 0f00 	cmp.w	r8, #0
 801c26e:	d02a      	beq.n	801c2c6 <tcp_abandon+0x122>
 801c270:	f06f 010c 	mvn.w	r1, #12
 801c274:	4648      	mov	r0, r9
 801c276:	4643      	mov	r3, r8
}
 801c278:	b007      	add	sp, #28
 801c27a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c27e:	4718      	bx	r3
    int send_rst = 0;
 801c280:	461e      	mov	r6, r3
 801c282:	e7bd      	b.n	801c200 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c284:	68ea      	ldr	r2, [r5, #12]
 801c286:	60da      	str	r2, [r3, #12]
 801c288:	2700      	movs	r7, #0
    int send_rst = 0;
 801c28a:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c28c:	60ef      	str	r7, [r5, #12]
 801c28e:	e7b7      	b.n	801c200 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c290:	9701      	str	r7, [sp, #4]
 801c292:	465a      	mov	r2, fp
 801c294:	8b2b      	ldrh	r3, [r5, #24]
 801c296:	4628      	mov	r0, r5
 801c298:	9905      	ldr	r1, [sp, #20]
 801c29a:	9302      	str	r3, [sp, #8]
 801c29c:	1d2b      	adds	r3, r5, #4
 801c29e:	9300      	str	r3, [sp, #0]
 801c2a0:	462b      	mov	r3, r5
 801c2a2:	f002 ff03 	bl	801f0ac <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c2a6:	7d2b      	ldrb	r3, [r5, #20]
 801c2a8:	2b01      	cmp	r3, #1
 801c2aa:	d1da      	bne.n	801c262 <tcp_abandon+0xbe>
 801c2ac:	491f      	ldr	r1, [pc, #124]	; (801c32c <tcp_abandon+0x188>)
 801c2ae:	22d4      	movs	r2, #212	; 0xd4
 801c2b0:	4b1f      	ldr	r3, [pc, #124]	; (801c330 <tcp_abandon+0x18c>)
 801c2b2:	4820      	ldr	r0, [pc, #128]	; (801c334 <tcp_abandon+0x190>)
 801c2b4:	f008 fe8a 	bl	8024fcc <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801c2b8:	4629      	mov	r1, r5
 801c2ba:	2002      	movs	r0, #2
 801c2bc:	f7fe f8d0 	bl	801a460 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c2c0:	f1b8 0f00 	cmp.w	r8, #0
 801c2c4:	d1d4      	bne.n	801c270 <tcp_abandon+0xcc>
}
 801c2c6:	b007      	add	sp, #28
 801c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c2cc:	68eb      	ldr	r3, [r5, #12]
 801c2ce:	6013      	str	r3, [r2, #0]
 801c2d0:	e7da      	b.n	801c288 <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c2d2:	4b17      	ldr	r3, [pc, #92]	; (801c330 <tcp_abandon+0x18c>)
 801c2d4:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c2d8:	4917      	ldr	r1, [pc, #92]	; (801c338 <tcp_abandon+0x194>)
 801c2da:	4816      	ldr	r0, [pc, #88]	; (801c334 <tcp_abandon+0x190>)
 801c2dc:	f008 fe76 	bl	8024fcc <iprintf>
  if (pcb->state == TIME_WAIT) {
 801c2e0:	7d2b      	ldrb	r3, [r5, #20]
 801c2e2:	2b0a      	cmp	r3, #10
 801c2e4:	f47f af6d 	bne.w	801c1c2 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	4814      	ldr	r0, [pc, #80]	; (801c33c <tcp_abandon+0x198>)
 801c2ec:	f7ff feea 	bl	801c0c4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c2f0:	7d2b      	ldrb	r3, [r5, #20]
 801c2f2:	2b01      	cmp	r3, #1
 801c2f4:	d00d      	beq.n	801c312 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801c2f6:	4629      	mov	r1, r5
 801c2f8:	2002      	movs	r0, #2
}
 801c2fa:	b007      	add	sp, #28
 801c2fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c300:	f7fe b8ae 	b.w	801a460 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c304:	4b0a      	ldr	r3, [pc, #40]	; (801c330 <tcp_abandon+0x18c>)
 801c306:	f240 223d 	movw	r2, #573	; 0x23d
 801c30a:	490d      	ldr	r1, [pc, #52]	; (801c340 <tcp_abandon+0x19c>)
 801c30c:	4809      	ldr	r0, [pc, #36]	; (801c334 <tcp_abandon+0x190>)
 801c30e:	f008 be5d 	b.w	8024fcc <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c312:	4b07      	ldr	r3, [pc, #28]	; (801c330 <tcp_abandon+0x18c>)
 801c314:	22d4      	movs	r2, #212	; 0xd4
 801c316:	4905      	ldr	r1, [pc, #20]	; (801c32c <tcp_abandon+0x188>)
 801c318:	4806      	ldr	r0, [pc, #24]	; (801c334 <tcp_abandon+0x190>)
 801c31a:	f008 fe57 	bl	8024fcc <iprintf>
 801c31e:	e7ea      	b.n	801c2f6 <tcp_abandon+0x152>
 801c320:	2002dbdc 	.word	0x2002dbdc
 801c324:	2002dbd4 	.word	0x2002dbd4
 801c328:	2002dbd8 	.word	0x2002dbd8
 801c32c:	080436cc 	.word	0x080436cc
 801c330:	08043690 	.word	0x08043690
 801c334:	0802bdc0 	.word	0x0802bdc0
 801c338:	08043be4 	.word	0x08043be4
 801c33c:	2002dbec 	.word	0x2002dbec
 801c340:	08043bc8 	.word	0x08043bc8

0801c344 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801c344:	2101      	movs	r1, #1
 801c346:	f7ff bf2d 	b.w	801c1a4 <tcp_abandon>
 801c34a:	bf00      	nop

0801c34c <tcp_accept_null>:
{
 801c34c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c34e:	460c      	mov	r4, r1
 801c350:	b131      	cbz	r1, 801c360 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801c352:	4620      	mov	r0, r4
 801c354:	2101      	movs	r1, #1
 801c356:	f7ff ff25 	bl	801c1a4 <tcp_abandon>
}
 801c35a:	f06f 000c 	mvn.w	r0, #12
 801c35e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c360:	4b06      	ldr	r3, [pc, #24]	; (801c37c <tcp_accept_null+0x30>)
 801c362:	f240 320f 	movw	r2, #783	; 0x30f
 801c366:	4906      	ldr	r1, [pc, #24]	; (801c380 <tcp_accept_null+0x34>)
 801c368:	4806      	ldr	r0, [pc, #24]	; (801c384 <tcp_accept_null+0x38>)
 801c36a:	f008 fe2f 	bl	8024fcc <iprintf>
  tcp_abandon(pcb, 1);
 801c36e:	4620      	mov	r0, r4
 801c370:	2101      	movs	r1, #1
 801c372:	f7ff ff17 	bl	801c1a4 <tcp_abandon>
}
 801c376:	f06f 000c 	mvn.w	r0, #12
 801c37a:	bd10      	pop	{r4, pc}
 801c37c:	08043690 	.word	0x08043690
 801c380:	08043c18 	.word	0x08043c18
 801c384:	0802bdc0 	.word	0x0802bdc0

0801c388 <tcp_netif_ip_addr_changed_pcblist>:
{
 801c388:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c38a:	4605      	mov	r5, r0
{
 801c38c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c38e:	b178      	cbz	r0, 801c3b0 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801c390:	b134      	cbz	r4, 801c3a0 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c392:	6822      	ldr	r2, [r4, #0]
 801c394:	682b      	ldr	r3, [r5, #0]
 801c396:	429a      	cmp	r2, r3
 801c398:	d003      	beq.n	801c3a2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801c39a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c39c:	2c00      	cmp	r4, #0
 801c39e:	d1f8      	bne.n	801c392 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801c3a0:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801c3a2:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801c3a4:	4620      	mov	r0, r4
 801c3a6:	2101      	movs	r1, #1
      pcb = next;
 801c3a8:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801c3aa:	f7ff fefb 	bl	801c1a4 <tcp_abandon>
      pcb = next;
 801c3ae:	e7ef      	b.n	801c390 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c3b0:	4b03      	ldr	r3, [pc, #12]	; (801c3c0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801c3b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c3b6:	4903      	ldr	r1, [pc, #12]	; (801c3c4 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801c3b8:	4803      	ldr	r0, [pc, #12]	; (801c3c8 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801c3ba:	f008 fe07 	bl	8024fcc <iprintf>
 801c3be:	e7e7      	b.n	801c390 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801c3c0:	08043690 	.word	0x08043690
 801c3c4:	08043c38 	.word	0x08043c38
 801c3c8:	0802bdc0 	.word	0x0802bdc0

0801c3cc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3cc:	4b0f      	ldr	r3, [pc, #60]	; (801c40c <tcp_kill_state+0x40>)
 801c3ce:	6819      	ldr	r1, [r3, #0]
 801c3d0:	b1d1      	cbz	r1, 801c408 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c3d2:	4b0f      	ldr	r3, [pc, #60]	; (801c410 <tcp_kill_state+0x44>)
  inactivity = 0;
 801c3d4:	2200      	movs	r2, #0
{
 801c3d6:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c3d8:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801c3da:	4614      	mov	r4, r2
 801c3dc:	e001      	b.n	801c3e2 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3de:	68c9      	ldr	r1, [r1, #12]
 801c3e0:	b159      	cbz	r1, 801c3fa <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801c3e2:	7d0b      	ldrb	r3, [r1, #20]
 801c3e4:	4283      	cmp	r3, r0
 801c3e6:	d1fa      	bne.n	801c3de <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c3e8:	6a0b      	ldr	r3, [r1, #32]
 801c3ea:	1aeb      	subs	r3, r5, r3
 801c3ec:	4293      	cmp	r3, r2
 801c3ee:	d3f6      	bcc.n	801c3de <tcp_kill_state+0x12>
 801c3f0:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3f2:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c3f4:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3f6:	2900      	cmp	r1, #0
 801c3f8:	d1f3      	bne.n	801c3e2 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801c3fa:	b11c      	cbz	r4, 801c404 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801c3fc:	4620      	mov	r0, r4
}
 801c3fe:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801c400:	f7ff bed0 	b.w	801c1a4 <tcp_abandon>
}
 801c404:	bc30      	pop	{r4, r5}
 801c406:	4770      	bx	lr
 801c408:	4770      	bx	lr
 801c40a:	bf00      	nop
 801c40c:	2002dbd4 	.word	0x2002dbd4
 801c410:	2002dbe4 	.word	0x2002dbe4

0801c414 <tcp_alloc>:
{
 801c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c416:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801c41a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c41c:	494f      	ldr	r1, [pc, #316]	; (801c55c <tcp_alloc+0x148>)
 801c41e:	2002      	movs	r0, #2
 801c420:	f7fd ffe8 	bl	801a3f4 <memp_malloc_fn>
  if (pcb == NULL) {
 801c424:	4603      	mov	r3, r0
 801c426:	b320      	cbz	r0, 801c472 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c428:	229c      	movs	r2, #156	; 0x9c
 801c42a:	2100      	movs	r1, #0
 801c42c:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801c42e:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c432:	f007 fe2f 	bl	8024094 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801c436:	494a      	ldr	r1, [pc, #296]	; (801c560 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c438:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c43a:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801c43c:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801c43e:	4849      	ldr	r0, [pc, #292]	; (801c564 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801c444:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c446:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801c448:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c44a:	4a47      	ldr	r2, [pc, #284]	; (801c568 <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801c44c:	4947      	ldr	r1, [pc, #284]	; (801c56c <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801c44e:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801c452:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801c454:	4c46      	ldr	r4, [pc, #280]	; (801c570 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801c456:	4847      	ldr	r0, [pc, #284]	; (801c574 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801c458:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c45c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801c460:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c462:	4945      	ldr	r1, [pc, #276]	; (801c578 <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801c464:	6498      	str	r0, [r3, #72]	; 0x48
}
 801c466:	4618      	mov	r0, r3
    pcb->prio = prio;
 801c468:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801c46a:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c46c:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801c46e:	72da      	strb	r2, [r3, #11]
}
 801c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c472:	4e42      	ldr	r6, [pc, #264]	; (801c57c <tcp_alloc+0x168>)
 801c474:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801c476:	b15c      	cbz	r4, 801c490 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801c478:	4620      	mov	r0, r4
 801c47a:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801c47c:	8b43      	ldrh	r3, [r0, #26]
 801c47e:	0719      	lsls	r1, r3, #28
 801c480:	d5f9      	bpl.n	801c476 <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c482:	f023 0308 	bic.w	r3, r3, #8
 801c486:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801c488:	f7fe ffd8 	bl	801b43c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801c48c:	2c00      	cmp	r4, #0
 801c48e:	d1f3      	bne.n	801c478 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c490:	4b3b      	ldr	r3, [pc, #236]	; (801c580 <tcp_alloc+0x16c>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	b193      	cbz	r3, 801c4bc <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c496:	4a33      	ldr	r2, [pc, #204]	; (801c564 <tcp_alloc+0x150>)
 801c498:	4618      	mov	r0, r3
 801c49a:	6a19      	ldr	r1, [r3, #32]
 801c49c:	6814      	ldr	r4, [r2, #0]
 801c49e:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4a0:	68db      	ldr	r3, [r3, #12]
 801c4a2:	b143      	cbz	r3, 801c4b6 <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c4a4:	6a1a      	ldr	r2, [r3, #32]
 801c4a6:	1aa2      	subs	r2, r4, r2
 801c4a8:	428a      	cmp	r2, r1
 801c4aa:	d3f9      	bcc.n	801c4a0 <tcp_alloc+0x8c>
 801c4ac:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4ae:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c4b0:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d1f6      	bne.n	801c4a4 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801c4b6:	2101      	movs	r1, #1
 801c4b8:	f7ff fe74 	bl	801c1a4 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c4bc:	f240 7239 	movw	r2, #1849	; 0x739
 801c4c0:	4926      	ldr	r1, [pc, #152]	; (801c55c <tcp_alloc+0x148>)
 801c4c2:	2002      	movs	r0, #2
 801c4c4:	f7fd ff96 	bl	801a3f4 <memp_malloc_fn>
    if (pcb == NULL) {
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	d1ac      	bne.n	801c428 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801c4ce:	2009      	movs	r0, #9
 801c4d0:	f7ff ff7c 	bl	801c3cc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c4d4:	f240 723f 	movw	r2, #1855	; 0x73f
 801c4d8:	4920      	ldr	r1, [pc, #128]	; (801c55c <tcp_alloc+0x148>)
 801c4da:	2002      	movs	r0, #2
 801c4dc:	f7fd ff8a 	bl	801a3f4 <memp_malloc_fn>
      if (pcb == NULL) {
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	d1a0      	bne.n	801c428 <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801c4e6:	2008      	movs	r0, #8
 801c4e8:	f7ff ff70 	bl	801c3cc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c4ec:	f240 7245 	movw	r2, #1861	; 0x745
 801c4f0:	491a      	ldr	r1, [pc, #104]	; (801c55c <tcp_alloc+0x148>)
 801c4f2:	2002      	movs	r0, #2
 801c4f4:	f7fd ff7e 	bl	801a3f4 <memp_malloc_fn>
        if (pcb == NULL) {
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	2800      	cmp	r0, #0
 801c4fc:	d194      	bne.n	801c428 <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c4fe:	062a      	lsls	r2, r5, #24
 801c500:	d42a      	bmi.n	801c558 <tcp_alloc+0x144>
  if (mprio == 0) {
 801c502:	b1ed      	cbz	r5, 801c540 <tcp_alloc+0x12c>
 801c504:	462a      	mov	r2, r5
  mprio--;
 801c506:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c508:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801c50a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c50c:	b1c2      	cbz	r2, 801c540 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c50e:	4815      	ldr	r0, [pc, #84]	; (801c564 <tcp_alloc+0x150>)
  inactivity = 0;
 801c510:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c512:	6807      	ldr	r7, [r0, #0]
 801c514:	e005      	b.n	801c522 <tcp_alloc+0x10e>
 801c516:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801c518:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801c51a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801c51c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c51e:	68d2      	ldr	r2, [r2, #12]
 801c520:	b14a      	cbz	r2, 801c536 <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801c522:	7d50      	ldrb	r0, [r2, #21]
 801c524:	4288      	cmp	r0, r1
 801c526:	d3f6      	bcc.n	801c516 <tcp_alloc+0x102>
 801c528:	d1f9      	bne.n	801c51e <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c52a:	6a14      	ldr	r4, [r2, #32]
 801c52c:	eba7 0e04 	sub.w	lr, r7, r4
 801c530:	45b6      	cmp	lr, r6
 801c532:	d3f4      	bcc.n	801c51e <tcp_alloc+0x10a>
 801c534:	e7f0      	b.n	801c518 <tcp_alloc+0x104>
  if (inactive != NULL) {
 801c536:	b11b      	cbz	r3, 801c540 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801c538:	2101      	movs	r1, #1
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7ff fe32 	bl	801c1a4 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c540:	f240 724b 	movw	r2, #1867	; 0x74b
 801c544:	4905      	ldr	r1, [pc, #20]	; (801c55c <tcp_alloc+0x148>)
 801c546:	2002      	movs	r0, #2
 801c548:	f7fd ff54 	bl	801a3f4 <memp_malloc_fn>
  if (pcb != NULL) {
 801c54c:	4603      	mov	r3, r0
 801c54e:	2800      	cmp	r0, #0
 801c550:	f47f af6a 	bne.w	801c428 <tcp_alloc+0x14>
}
 801c554:	4618      	mov	r0, r3
 801c556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c558:	227f      	movs	r2, #127	; 0x7f
 801c55a:	e7d4      	b.n	801c506 <tcp_alloc+0xf2>
 801c55c:	08043690 	.word	0x08043690
 801c560:	2002dbe9 	.word	0x2002dbe9
 801c564:	2002dbe4 	.word	0x2002dbe4
 801c568:	006ddd00 	.word	0x006ddd00
 801c56c:	0801c771 	.word	0x0801c771
 801c570:	0218ffff 	.word	0x0218ffff
 801c574:	04300001 	.word	0x04300001
 801c578:	08600860 	.word	0x08600860
 801c57c:	2002dbd4 	.word	0x2002dbd4
 801c580:	2002dbec 	.word	0x2002dbec

0801c584 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801c584:	2040      	movs	r0, #64	; 0x40
 801c586:	f7ff bf45 	b.w	801c414 <tcp_alloc>
 801c58a:	bf00      	nop

0801c58c <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c58c:	2040      	movs	r0, #64	; 0x40
 801c58e:	f7ff bf41 	b.w	801c414 <tcp_alloc>
 801c592:	bf00      	nop

0801c594 <tcp_close_shutdown>:
{
 801c594:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c596:	4604      	mov	r4, r0
{
 801c598:	b085      	sub	sp, #20
 801c59a:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c59c:	2800      	cmp	r0, #0
 801c59e:	d06a      	beq.n	801c676 <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c5a0:	7d23      	ldrb	r3, [r4, #20]
 801c5a2:	b11d      	cbz	r5, 801c5ac <tcp_close_shutdown+0x18>
 801c5a4:	2b04      	cmp	r3, #4
 801c5a6:	d00c      	beq.n	801c5c2 <tcp_close_shutdown+0x2e>
 801c5a8:	2b07      	cmp	r3, #7
 801c5aa:	d00a      	beq.n	801c5c2 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801c5ac:	2b01      	cmp	r3, #1
 801c5ae:	d06a      	beq.n	801c686 <tcp_close_shutdown+0xf2>
 801c5b0:	2b02      	cmp	r3, #2
 801c5b2:	d030      	beq.n	801c616 <tcp_close_shutdown+0x82>
 801c5b4:	b333      	cbz	r3, 801c604 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801c5b6:	4620      	mov	r0, r4
}
 801c5b8:	b005      	add	sp, #20
 801c5ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801c5be:	f7fe bf3d 	b.w	801b43c <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c5c2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c5c4:	2a00      	cmp	r2, #0
 801c5c6:	d037      	beq.n	801c638 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c5c8:	8b63      	ldrh	r3, [r4, #26]
 801c5ca:	06db      	lsls	r3, r3, #27
 801c5cc:	f140 8084 	bpl.w	801c6d8 <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c5d0:	8b21      	ldrh	r1, [r4, #24]
 801c5d2:	1d20      	adds	r0, r4, #4
 801c5d4:	8ae2      	ldrh	r2, [r4, #22]
 801c5d6:	4623      	mov	r3, r4
 801c5d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c5dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c5de:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c5e0:	9000      	str	r0, [sp, #0]
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	f002 fd62 	bl	801f0ac <tcp_rst>
      tcp_pcb_purge(pcb);
 801c5e8:	4620      	mov	r0, r4
 801c5ea:	f7ff fa6b 	bl	801bac4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c5ee:	4a45      	ldr	r2, [pc, #276]	; (801c704 <tcp_close_shutdown+0x170>)
 801c5f0:	6813      	ldr	r3, [r2, #0]
 801c5f2:	42a3      	cmp	r3, r4
 801c5f4:	d030      	beq.n	801c658 <tcp_close_shutdown+0xc4>
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d030      	beq.n	801c65c <tcp_close_shutdown+0xc8>
 801c5fa:	68da      	ldr	r2, [r3, #12]
 801c5fc:	42a2      	cmp	r2, r4
 801c5fe:	d068      	beq.n	801c6d2 <tcp_close_shutdown+0x13e>
 801c600:	4613      	mov	r3, r2
 801c602:	e7f8      	b.n	801c5f6 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801c604:	8ae3      	ldrh	r3, [r4, #22]
 801c606:	b9e3      	cbnz	r3, 801c642 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801c608:	4621      	mov	r1, r4
 801c60a:	2002      	movs	r0, #2
 801c60c:	f7fd ff28 	bl	801a460 <memp_free>
}
 801c610:	2000      	movs	r0, #0
 801c612:	b005      	add	sp, #20
 801c614:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c616:	4621      	mov	r1, r4
 801c618:	483a      	ldr	r0, [pc, #232]	; (801c704 <tcp_close_shutdown+0x170>)
 801c61a:	f7ff fd53 	bl	801c0c4 <tcp_pcb_remove>
 801c61e:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c620:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c622:	4a39      	ldr	r2, [pc, #228]	; (801c708 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c624:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c626:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c628:	d1ee      	bne.n	801c608 <tcp_close_shutdown+0x74>
 801c62a:	4b38      	ldr	r3, [pc, #224]	; (801c70c <tcp_close_shutdown+0x178>)
 801c62c:	22d4      	movs	r2, #212	; 0xd4
 801c62e:	4938      	ldr	r1, [pc, #224]	; (801c710 <tcp_close_shutdown+0x17c>)
 801c630:	4838      	ldr	r0, [pc, #224]	; (801c714 <tcp_close_shutdown+0x180>)
 801c632:	f008 fccb 	bl	8024fcc <iprintf>
 801c636:	e7e7      	b.n	801c608 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c638:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c63a:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801c63e:	d0b5      	beq.n	801c5ac <tcp_close_shutdown+0x18>
 801c640:	e7c2      	b.n	801c5c8 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c642:	4a35      	ldr	r2, [pc, #212]	; (801c718 <tcp_close_shutdown+0x184>)
 801c644:	6813      	ldr	r3, [r2, #0]
 801c646:	42a3      	cmp	r3, r4
 801c648:	d051      	beq.n	801c6ee <tcp_close_shutdown+0x15a>
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d03e      	beq.n	801c6cc <tcp_close_shutdown+0x138>
 801c64e:	68da      	ldr	r2, [r3, #12]
 801c650:	42a2      	cmp	r2, r4
 801c652:	d039      	beq.n	801c6c8 <tcp_close_shutdown+0x134>
 801c654:	4613      	mov	r3, r2
 801c656:	e7f8      	b.n	801c64a <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801c658:	68e3      	ldr	r3, [r4, #12]
 801c65a:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c65c:	4b2f      	ldr	r3, [pc, #188]	; (801c71c <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801c65e:	2000      	movs	r0, #0
 801c660:	4a29      	ldr	r2, [pc, #164]	; (801c708 <tcp_close_shutdown+0x174>)
 801c662:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801c664:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801c666:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801c668:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801c66a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c66c:	d03c      	beq.n	801c6e8 <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c66e:	7d23      	ldrb	r3, [r4, #20]
 801c670:	2b01      	cmp	r3, #1
 801c672:	d1c9      	bne.n	801c608 <tcp_close_shutdown+0x74>
 801c674:	e7d9      	b.n	801c62a <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c676:	4b25      	ldr	r3, [pc, #148]	; (801c70c <tcp_close_shutdown+0x178>)
 801c678:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801c67c:	4928      	ldr	r1, [pc, #160]	; (801c720 <tcp_close_shutdown+0x18c>)
 801c67e:	4825      	ldr	r0, [pc, #148]	; (801c714 <tcp_close_shutdown+0x180>)
 801c680:	f008 fca4 	bl	8024fcc <iprintf>
 801c684:	e78c      	b.n	801c5a0 <tcp_close_shutdown+0xc>
 801c686:	4927      	ldr	r1, [pc, #156]	; (801c724 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801c688:	2000      	movs	r0, #0
  switch (pcb->state) {
 801c68a:	4b23      	ldr	r3, [pc, #140]	; (801c718 <tcp_close_shutdown+0x184>)
 801c68c:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c690:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c692:	b133      	cbz	r3, 801c6a2 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801c694:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801c696:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801c698:	bf08      	it	eq
 801c69a:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c69c:	68db      	ldr	r3, [r3, #12]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d1f8      	bne.n	801c694 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801c6a2:	42a9      	cmp	r1, r5
 801c6a4:	d002      	beq.n	801c6ac <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c6a6:	f851 3b04 	ldr.w	r3, [r1], #4
 801c6aa:	e7f1      	b.n	801c690 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801c6ac:	4621      	mov	r1, r4
 801c6ae:	481e      	ldr	r0, [pc, #120]	; (801c728 <tcp_close_shutdown+0x194>)
 801c6b0:	f7ff fd08 	bl	801c0c4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c6b4:	7d23      	ldrb	r3, [r4, #20]
 801c6b6:	2b01      	cmp	r3, #1
 801c6b8:	d01c      	beq.n	801c6f4 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	2003      	movs	r0, #3
 801c6be:	f7fd fecf 	bl	801a460 <memp_free>
}
 801c6c2:	2000      	movs	r0, #0
 801c6c4:	b005      	add	sp, #20
 801c6c6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c6c8:	68e2      	ldr	r2, [r4, #12]
 801c6ca:	60da      	str	r2, [r3, #12]
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	60e3      	str	r3, [r4, #12]
 801c6d0:	e79a      	b.n	801c608 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801c6d2:	68e2      	ldr	r2, [r4, #12]
 801c6d4:	60da      	str	r2, [r3, #12]
 801c6d6:	e7c1      	b.n	801c65c <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c6d8:	4b0c      	ldr	r3, [pc, #48]	; (801c70c <tcp_close_shutdown+0x178>)
 801c6da:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801c6de:	4913      	ldr	r1, [pc, #76]	; (801c72c <tcp_close_shutdown+0x198>)
 801c6e0:	480c      	ldr	r0, [pc, #48]	; (801c714 <tcp_close_shutdown+0x180>)
 801c6e2:	f008 fc73 	bl	8024fcc <iprintf>
 801c6e6:	e773      	b.n	801c5d0 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801c6e8:	f001 fd9e 	bl	801e228 <tcp_trigger_input_pcb_close>
 801c6ec:	e790      	b.n	801c610 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c6ee:	68e3      	ldr	r3, [r4, #12]
 801c6f0:	6013      	str	r3, [r2, #0]
 801c6f2:	e7eb      	b.n	801c6cc <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c6f4:	4b05      	ldr	r3, [pc, #20]	; (801c70c <tcp_close_shutdown+0x178>)
 801c6f6:	22df      	movs	r2, #223	; 0xdf
 801c6f8:	490d      	ldr	r1, [pc, #52]	; (801c730 <tcp_close_shutdown+0x19c>)
 801c6fa:	4806      	ldr	r0, [pc, #24]	; (801c714 <tcp_close_shutdown+0x180>)
 801c6fc:	f008 fc66 	bl	8024fcc <iprintf>
 801c700:	e7db      	b.n	801c6ba <tcp_close_shutdown+0x126>
 801c702:	bf00      	nop
 801c704:	2002dbd4 	.word	0x2002dbd4
 801c708:	2002dbd8 	.word	0x2002dbd8
 801c70c:	08043690 	.word	0x08043690
 801c710:	080436cc 	.word	0x080436cc
 801c714:	0802bdc0 	.word	0x0802bdc0
 801c718:	2002dbdc 	.word	0x2002dbdc
 801c71c:	2002dc18 	.word	0x2002dc18
 801c720:	08043c6c 	.word	0x08043c6c
 801c724:	08043d7c 	.word	0x08043d7c
 801c728:	2002dbe0 	.word	0x2002dbe0
 801c72c:	08043c8c 	.word	0x08043c8c
 801c730:	08043ca8 	.word	0x08043ca8

0801c734 <tcp_close>:
{
 801c734:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c736:	b158      	cbz	r0, 801c750 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801c738:	7d03      	ldrb	r3, [r0, #20]
 801c73a:	2b01      	cmp	r3, #1
 801c73c:	d003      	beq.n	801c746 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c73e:	8b43      	ldrh	r3, [r0, #26]
 801c740:	f043 0310 	orr.w	r3, r3, #16
 801c744:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801c746:	2101      	movs	r1, #1
}
 801c748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801c74c:	f7ff bf22 	b.w	801c594 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c750:	4b04      	ldr	r3, [pc, #16]	; (801c764 <tcp_close+0x30>)
 801c752:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801c756:	4904      	ldr	r1, [pc, #16]	; (801c768 <tcp_close+0x34>)
 801c758:	4804      	ldr	r0, [pc, #16]	; (801c76c <tcp_close+0x38>)
 801c75a:	f008 fc37 	bl	8024fcc <iprintf>
}
 801c75e:	f06f 000f 	mvn.w	r0, #15
 801c762:	bd08      	pop	{r3, pc}
 801c764:	08043690 	.word	0x08043690
 801c768:	08043cc4 	.word	0x08043cc4
 801c76c:	0802bdc0 	.word	0x0802bdc0

0801c770 <tcp_recv_null>:
{
 801c770:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c772:	b1c9      	cbz	r1, 801c7a8 <tcp_recv_null+0x38>
  if (p != NULL) {
 801c774:	4614      	mov	r4, r2
 801c776:	4608      	mov	r0, r1
 801c778:	b13a      	cbz	r2, 801c78a <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801c77a:	8911      	ldrh	r1, [r2, #8]
 801c77c:	f7fe ffde 	bl	801b73c <tcp_recved>
    pbuf_free(p);
 801c780:	4620      	mov	r0, r4
 801c782:	f7fe fb69 	bl	801ae58 <pbuf_free>
  return ERR_OK;
 801c786:	2000      	movs	r0, #0
}
 801c788:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801c78a:	b10b      	cbz	r3, 801c790 <tcp_recv_null+0x20>
  return ERR_OK;
 801c78c:	4610      	mov	r0, r2
}
 801c78e:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801c790:	7d0b      	ldrb	r3, [r1, #20]
 801c792:	2b01      	cmp	r3, #1
 801c794:	d003      	beq.n	801c79e <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c796:	8b4b      	ldrh	r3, [r1, #26]
 801c798:	f043 0310 	orr.w	r3, r3, #16
 801c79c:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801c79e:	2101      	movs	r1, #1
}
 801c7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801c7a4:	f7ff bef6 	b.w	801c594 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c7a8:	4b04      	ldr	r3, [pc, #16]	; (801c7bc <tcp_recv_null+0x4c>)
 801c7aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c7ae:	4904      	ldr	r1, [pc, #16]	; (801c7c0 <tcp_recv_null+0x50>)
 801c7b0:	4804      	ldr	r0, [pc, #16]	; (801c7c4 <tcp_recv_null+0x54>)
 801c7b2:	f008 fc0b 	bl	8024fcc <iprintf>
 801c7b6:	f06f 000f 	mvn.w	r0, #15
}
 801c7ba:	bd10      	pop	{r4, pc}
 801c7bc:	08043690 	.word	0x08043690
 801c7c0:	08043cdc 	.word	0x08043cdc
 801c7c4:	0802bdc0 	.word	0x0802bdc0

0801c7c8 <tcp_process_refused_data>:
{
 801c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c7ca:	b378      	cbz	r0, 801c82c <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801c7cc:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801c7ce:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c7d0:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801c7d4:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801c7d6:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801c7d8:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c7da:	b156      	cbz	r6, 801c7f2 <tcp_process_refused_data+0x2a>
 801c7dc:	4601      	mov	r1, r0
 801c7de:	462a      	mov	r2, r5
 801c7e0:	6900      	ldr	r0, [r0, #16]
 801c7e2:	47b0      	blx	r6
    if (err == ERR_OK) {
 801c7e4:	b158      	cbz	r0, 801c7fe <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801c7e6:	300d      	adds	r0, #13
 801c7e8:	d01d      	beq.n	801c826 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801c7ea:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801c7ee:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801c7f2:	8929      	ldrh	r1, [r5, #8]
 801c7f4:	f7fe ffa2 	bl	801b73c <tcp_recved>
    pbuf_free(p);
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f7fe fb2d 	bl	801ae58 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801c7fe:	06bb      	lsls	r3, r7, #26
 801c800:	d50f      	bpl.n	801c822 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c802:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c804:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c808:	d001      	beq.n	801c80e <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801c80a:	3301      	adds	r3, #1
 801c80c:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801c80e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801c812:	b135      	cbz	r5, 801c822 <tcp_process_refused_data+0x5a>
 801c814:	2300      	movs	r3, #0
 801c816:	4621      	mov	r1, r4
 801c818:	6920      	ldr	r0, [r4, #16]
 801c81a:	461a      	mov	r2, r3
 801c81c:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801c81e:	300d      	adds	r0, #13
 801c820:	d001      	beq.n	801c826 <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801c822:	2000      	movs	r0, #0
}
 801c824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801c826:	f06f 000c 	mvn.w	r0, #12
}
 801c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c82c:	4b04      	ldr	r3, [pc, #16]	; (801c840 <tcp_process_refused_data+0x78>)
 801c82e:	f240 6209 	movw	r2, #1545	; 0x609
 801c832:	4904      	ldr	r1, [pc, #16]	; (801c844 <tcp_process_refused_data+0x7c>)
 801c834:	4804      	ldr	r0, [pc, #16]	; (801c848 <tcp_process_refused_data+0x80>)
 801c836:	f008 fbc9 	bl	8024fcc <iprintf>
 801c83a:	f06f 000f 	mvn.w	r0, #15
}
 801c83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c840:	08043690 	.word	0x08043690
 801c844:	08043cf8 	.word	0x08043cf8
 801c848:	0802bdc0 	.word	0x0802bdc0

0801c84c <tcp_fasttmr>:
{
 801c84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801c850:	4d1c      	ldr	r5, [pc, #112]	; (801c8c4 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801c852:	2700      	movs	r7, #0
 801c854:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801c8cc <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801c858:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801c85a:	4e1b      	ldr	r6, [pc, #108]	; (801c8c8 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801c85c:	3301      	adds	r3, #1
 801c85e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801c860:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801c864:	b1bc      	cbz	r4, 801c896 <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801c866:	782a      	ldrb	r2, [r5, #0]
 801c868:	7fa3      	ldrb	r3, [r4, #30]
 801c86a:	4293      	cmp	r3, r2
 801c86c:	d015      	beq.n	801c89a <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801c86e:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801c870:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801c872:	07d9      	lsls	r1, r3, #31
 801c874:	d41a      	bmi.n	801c8ac <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801c876:	071a      	lsls	r2, r3, #28
 801c878:	d411      	bmi.n	801c89e <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801c87a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801c87c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801c880:	b133      	cbz	r3, 801c890 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801c882:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801c884:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801c886:	f7ff ff9f 	bl	801c7c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801c88a:	7833      	ldrb	r3, [r6, #0]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d1e7      	bne.n	801c860 <tcp_fasttmr+0x14>
      pcb = next;
 801c890:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801c892:	2c00      	cmp	r4, #0
 801c894:	d1e7      	bne.n	801c866 <tcp_fasttmr+0x1a>
}
 801c896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801c89a:	68e4      	ldr	r4, [r4, #12]
 801c89c:	e7e2      	b.n	801c864 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c89e:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801c8a2:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c8a4:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801c8a6:	f7fe fdc9 	bl	801b43c <tcp_close_shutdown_fin>
 801c8aa:	e7e6      	b.n	801c87a <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801c8ac:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801c8b0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801c8b2:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801c8b4:	f002 fc74 	bl	801f1a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c8b8:	8b63      	ldrh	r3, [r4, #26]
 801c8ba:	f023 0303 	bic.w	r3, r3, #3
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	8363      	strh	r3, [r4, #26]
 801c8c2:	e7d8      	b.n	801c876 <tcp_fasttmr+0x2a>
 801c8c4:	2002dbe9 	.word	0x2002dbe9
 801c8c8:	2002dbd8 	.word	0x2002dbd8
 801c8cc:	2002dbd4 	.word	0x2002dbd4

0801c8d0 <tcp_tmr>:
{
 801c8d0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801c8d2:	f7ff ffbb 	bl	801c84c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801c8d6:	4a06      	ldr	r2, [pc, #24]	; (801c8f0 <tcp_tmr+0x20>)
 801c8d8:	7813      	ldrb	r3, [r2, #0]
 801c8da:	3301      	adds	r3, #1
 801c8dc:	b2db      	uxtb	r3, r3
 801c8de:	7013      	strb	r3, [r2, #0]
 801c8e0:	07db      	lsls	r3, r3, #31
 801c8e2:	d400      	bmi.n	801c8e6 <tcp_tmr+0x16>
}
 801c8e4:	bd08      	pop	{r3, pc}
 801c8e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801c8ea:	f7ff b93d 	b.w	801bb68 <tcp_slowtmr>
 801c8ee:	bf00      	nop
 801c8f0:	2002dbe8 	.word	0x2002dbe8

0801c8f4 <tcp_next_iss>:
{
 801c8f4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c8f6:	b130      	cbz	r0, 801c906 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801c8f8:	4b07      	ldr	r3, [pc, #28]	; (801c918 <tcp_next_iss+0x24>)
 801c8fa:	4a08      	ldr	r2, [pc, #32]	; (801c91c <tcp_next_iss+0x28>)
 801c8fc:	6818      	ldr	r0, [r3, #0]
 801c8fe:	6812      	ldr	r2, [r2, #0]
 801c900:	4410      	add	r0, r2
 801c902:	6018      	str	r0, [r3, #0]
}
 801c904:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c906:	4b06      	ldr	r3, [pc, #24]	; (801c920 <tcp_next_iss+0x2c>)
 801c908:	f640 02af 	movw	r2, #2223	; 0x8af
 801c90c:	4905      	ldr	r1, [pc, #20]	; (801c924 <tcp_next_iss+0x30>)
 801c90e:	4806      	ldr	r0, [pc, #24]	; (801c928 <tcp_next_iss+0x34>)
 801c910:	f008 fb5c 	bl	8024fcc <iprintf>
 801c914:	e7f0      	b.n	801c8f8 <tcp_next_iss+0x4>
 801c916:	bf00      	nop
 801c918:	20000410 	.word	0x20000410
 801c91c:	2002dbe4 	.word	0x2002dbe4
 801c920:	08043690 	.word	0x08043690
 801c924:	08043d20 	.word	0x08043d20
 801c928:	0802bdc0 	.word	0x0802bdc0

0801c92c <tcp_eff_send_mss_netif>:
{
 801c92c:	b538      	push	{r3, r4, r5, lr}
 801c92e:	4605      	mov	r5, r0
 801c930:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c932:	b172      	cbz	r2, 801c952 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801c934:	b144      	cbz	r4, 801c948 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801c936:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801c938:	b133      	cbz	r3, 801c948 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c93a:	2b28      	cmp	r3, #40	; 0x28
 801c93c:	d906      	bls.n	801c94c <tcp_eff_send_mss_netif+0x20>
 801c93e:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c940:	b29b      	uxth	r3, r3
 801c942:	429d      	cmp	r5, r3
 801c944:	bf28      	it	cs
 801c946:	461d      	movcs	r5, r3
}
 801c948:	4628      	mov	r0, r5
 801c94a:	bd38      	pop	{r3, r4, r5, pc}
 801c94c:	2500      	movs	r5, #0
 801c94e:	4628      	mov	r0, r5
 801c950:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c952:	4b04      	ldr	r3, [pc, #16]	; (801c964 <tcp_eff_send_mss_netif+0x38>)
 801c954:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c958:	4903      	ldr	r1, [pc, #12]	; (801c968 <tcp_eff_send_mss_netif+0x3c>)
 801c95a:	4804      	ldr	r0, [pc, #16]	; (801c96c <tcp_eff_send_mss_netif+0x40>)
 801c95c:	f008 fb36 	bl	8024fcc <iprintf>
 801c960:	e7e8      	b.n	801c934 <tcp_eff_send_mss_netif+0x8>
 801c962:	bf00      	nop
 801c964:	08043690 	.word	0x08043690
 801c968:	08043d3c 	.word	0x08043d3c
 801c96c:	0802bdc0 	.word	0x0802bdc0

0801c970 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801c970:	b308      	cbz	r0, 801c9b6 <tcp_netif_ip_addr_changed+0x46>
{
 801c972:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801c974:	6803      	ldr	r3, [r0, #0]
 801c976:	4604      	mov	r4, r0
 801c978:	b903      	cbnz	r3, 801c97c <tcp_netif_ip_addr_changed+0xc>
}
 801c97a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c97c:	4b0e      	ldr	r3, [pc, #56]	; (801c9b8 <tcp_netif_ip_addr_changed+0x48>)
 801c97e:	460d      	mov	r5, r1
 801c980:	6819      	ldr	r1, [r3, #0]
 801c982:	f7ff fd01 	bl	801c388 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c986:	4b0d      	ldr	r3, [pc, #52]	; (801c9bc <tcp_netif_ip_addr_changed+0x4c>)
 801c988:	4620      	mov	r0, r4
 801c98a:	6819      	ldr	r1, [r3, #0]
 801c98c:	f7ff fcfc 	bl	801c388 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801c990:	2d00      	cmp	r5, #0
 801c992:	d0f2      	beq.n	801c97a <tcp_netif_ip_addr_changed+0xa>
 801c994:	682b      	ldr	r3, [r5, #0]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d0ef      	beq.n	801c97a <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c99a:	4b09      	ldr	r3, [pc, #36]	; (801c9c0 <tcp_netif_ip_addr_changed+0x50>)
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d0eb      	beq.n	801c97a <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c9a2:	6819      	ldr	r1, [r3, #0]
 801c9a4:	6822      	ldr	r2, [r4, #0]
 801c9a6:	4291      	cmp	r1, r2
 801c9a8:	d101      	bne.n	801c9ae <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c9aa:	682a      	ldr	r2, [r5, #0]
 801c9ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d1f6      	bne.n	801c9a2 <tcp_netif_ip_addr_changed+0x32>
}
 801c9b4:	bd38      	pop	{r3, r4, r5, pc}
 801c9b6:	4770      	bx	lr
 801c9b8:	2002dbd4 	.word	0x2002dbd4
 801c9bc:	2002dbdc 	.word	0x2002dbdc
 801c9c0:	2002dbe0 	.word	0x2002dbe0

0801c9c4 <tcp_free_ooseq>:
{
 801c9c4:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801c9c6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801c9c8:	b16c      	cbz	r4, 801c9e6 <tcp_free_ooseq+0x22>
 801c9ca:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801c9cc:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801c9ce:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c9d0:	6868      	ldr	r0, [r5, #4]
 801c9d2:	b108      	cbz	r0, 801c9d8 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801c9d4:	f7fe fa40 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c9d8:	4629      	mov	r1, r5
 801c9da:	2004      	movs	r0, #4
 801c9dc:	f7fd fd40 	bl	801a460 <memp_free>
  while (seg != NULL) {
 801c9e0:	2c00      	cmp	r4, #0
 801c9e2:	d1f3      	bne.n	801c9cc <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801c9e4:	6774      	str	r4, [r6, #116]	; 0x74
}
 801c9e6:	bd70      	pop	{r4, r5, r6, pc}

0801c9e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c9ea:	4605      	mov	r5, r0
{
 801c9ec:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c9ee:	2800      	cmp	r0, #0
 801c9f0:	d03e      	beq.n	801ca70 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c9f2:	68eb      	ldr	r3, [r5, #12]
 801c9f4:	8998      	ldrh	r0, [r3, #12]
 801c9f6:	f7fc fa0f 	bl	8018e18 <lwip_htons>
 801c9fa:	07c2      	lsls	r2, r0, #31
 801c9fc:	d432      	bmi.n	801ca64 <tcp_oos_insert_segment+0x7c>
 801c9fe:	4e20      	ldr	r6, [pc, #128]	; (801ca80 <tcp_oos_insert_segment+0x98>)
 801ca00:	e005      	b.n	801ca0e <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801ca02:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801ca04:	4620      	mov	r0, r4
 801ca06:	f7fe ff95 	bl	801b934 <tcp_seg_free>
    while (next &&
 801ca0a:	463c      	mov	r4, r7
 801ca0c:	b1ef      	cbz	r7, 801ca4a <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801ca0e:	68e1      	ldr	r1, [r4, #12]
 801ca10:	8923      	ldrh	r3, [r4, #8]
 801ca12:	6837      	ldr	r7, [r6, #0]
 801ca14:	892a      	ldrh	r2, [r5, #8]
 801ca16:	6848      	ldr	r0, [r1, #4]
 801ca18:	443a      	add	r2, r7
 801ca1a:	4403      	add	r3, r0
 801ca1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	db15      	blt.n	801ca4e <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ca22:	8988      	ldrh	r0, [r1, #12]
 801ca24:	f7fc f9f8 	bl	8018e18 <lwip_htons>
 801ca28:	07c3      	lsls	r3, r0, #31
 801ca2a:	d5ea      	bpl.n	801ca02 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ca2c:	68eb      	ldr	r3, [r5, #12]
 801ca2e:	2001      	movs	r0, #1
 801ca30:	899f      	ldrh	r7, [r3, #12]
 801ca32:	f7fc f9f1 	bl	8018e18 <lwip_htons>
 801ca36:	68eb      	ldr	r3, [r5, #12]
 801ca38:	4338      	orrs	r0, r7
      next = next->next;
 801ca3a:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ca3c:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801ca3e:	4620      	mov	r0, r4
 801ca40:	f7fe ff78 	bl	801b934 <tcp_seg_free>
    while (next &&
 801ca44:	463c      	mov	r4, r7
 801ca46:	2f00      	cmp	r7, #0
 801ca48:	d1e1      	bne.n	801ca0e <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801ca4a:	602c      	str	r4, [r5, #0]
}
 801ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ca4e:	1a12      	subs	r2, r2, r0
    if (next &&
 801ca50:	2a00      	cmp	r2, #0
 801ca52:	ddfa      	ble.n	801ca4a <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ca54:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801ca56:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ca58:	b289      	uxth	r1, r1
 801ca5a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ca5c:	f7fe f900 	bl	801ac60 <pbuf_realloc>
  cseg->next = next;
 801ca60:	602c      	str	r4, [r5, #0]
}
 801ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801ca64:	4620      	mov	r0, r4
    next = NULL;
 801ca66:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801ca68:	f7fe ff52 	bl	801b910 <tcp_segs_free>
  cseg->next = next;
 801ca6c:	602c      	str	r4, [r5, #0]
}
 801ca6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ca70:	4b04      	ldr	r3, [pc, #16]	; (801ca84 <tcp_oos_insert_segment+0x9c>)
 801ca72:	f240 421f 	movw	r2, #1055	; 0x41f
 801ca76:	4904      	ldr	r1, [pc, #16]	; (801ca88 <tcp_oos_insert_segment+0xa0>)
 801ca78:	4804      	ldr	r0, [pc, #16]	; (801ca8c <tcp_oos_insert_segment+0xa4>)
 801ca7a:	f008 faa7 	bl	8024fcc <iprintf>
 801ca7e:	e7b8      	b.n	801c9f2 <tcp_oos_insert_segment+0xa>
 801ca80:	2002dc14 	.word	0x2002dc14
 801ca84:	08043d8c 	.word	0x08043d8c
 801ca88:	08043dc0 	.word	0x08043dc0
 801ca8c:	0802bdc0 	.word	0x0802bdc0

0801ca90 <tcp_input_delayed_close>:
{
 801ca90:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ca92:	4604      	mov	r4, r0
 801ca94:	b1c8      	cbz	r0, 801caca <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801ca96:	4b11      	ldr	r3, [pc, #68]	; (801cadc <tcp_input_delayed_close+0x4c>)
 801ca98:	781b      	ldrb	r3, [r3, #0]
 801ca9a:	f013 0310 	ands.w	r3, r3, #16
 801ca9e:	d101      	bne.n	801caa4 <tcp_input_delayed_close+0x14>
  return 0;
 801caa0:	4618      	mov	r0, r3
}
 801caa2:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801caa4:	8b63      	ldrh	r3, [r4, #26]
 801caa6:	06db      	lsls	r3, r3, #27
 801caa8:	d406      	bmi.n	801cab8 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801caaa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801caae:	b11b      	cbz	r3, 801cab8 <tcp_input_delayed_close+0x28>
 801cab0:	f06f 010e 	mvn.w	r1, #14
 801cab4:	6920      	ldr	r0, [r4, #16]
 801cab6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cab8:	4621      	mov	r1, r4
 801caba:	4809      	ldr	r0, [pc, #36]	; (801cae0 <tcp_input_delayed_close+0x50>)
 801cabc:	f7ff fb02 	bl	801c0c4 <tcp_pcb_remove>
    tcp_free(pcb);
 801cac0:	4620      	mov	r0, r4
 801cac2:	f7fe fcfb 	bl	801b4bc <tcp_free>
 801cac6:	2001      	movs	r0, #1
}
 801cac8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801caca:	4b06      	ldr	r3, [pc, #24]	; (801cae4 <tcp_input_delayed_close+0x54>)
 801cacc:	f240 225a 	movw	r2, #602	; 0x25a
 801cad0:	4905      	ldr	r1, [pc, #20]	; (801cae8 <tcp_input_delayed_close+0x58>)
 801cad2:	4806      	ldr	r0, [pc, #24]	; (801caec <tcp_input_delayed_close+0x5c>)
 801cad4:	f008 fa7a 	bl	8024fcc <iprintf>
 801cad8:	e7dd      	b.n	801ca96 <tcp_input_delayed_close+0x6>
 801cada:	bf00      	nop
 801cadc:	2002dc10 	.word	0x2002dc10
 801cae0:	2002dbd4 	.word	0x2002dbd4
 801cae4:	08043d8c 	.word	0x08043d8c
 801cae8:	08043de8 	.word	0x08043de8
 801caec:	0802bdc0 	.word	0x0802bdc0

0801caf0 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caf4:	b083      	sub	sp, #12
 801caf6:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801caf8:	2900      	cmp	r1, #0
 801cafa:	d03d      	beq.n	801cb78 <tcp_free_acked_segments.constprop.0+0x88>
 801cafc:	4607      	mov	r7, r0
 801cafe:	460c      	mov	r4, r1
 801cb00:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801cbc8 <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cb04:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801cbbc <tcp_free_acked_segments.constprop.0+0xcc>
 801cb08:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801cbcc <tcp_free_acked_segments.constprop.0+0xdc>
 801cb0c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801cbc4 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801cb10:	68e3      	ldr	r3, [r4, #12]
 801cb12:	6858      	ldr	r0, [r3, #4]
 801cb14:	f7fc f984 	bl	8018e20 <lwip_htonl>
 801cb18:	68e3      	ldr	r3, [r4, #12]
 801cb1a:	4605      	mov	r5, r0
 801cb1c:	8926      	ldrh	r6, [r4, #8]
 801cb1e:	8998      	ldrh	r0, [r3, #12]
 801cb20:	f7fc f97a 	bl	8018e18 <lwip_htons>
 801cb24:	f8d8 3000 	ldr.w	r3, [r8]
 801cb28:	f010 0003 	ands.w	r0, r0, #3
 801cb2c:	eba5 0503 	sub.w	r5, r5, r3
 801cb30:	bf18      	it	ne
 801cb32:	2001      	movne	r0, #1
 801cb34:	4435      	add	r5, r6
 801cb36:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	dc37      	bgt.n	801cbac <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801cb3c:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801cb40:	f7fe f99e 	bl	801ae80 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cb44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801cb48:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cb4a:	4298      	cmp	r0, r3
 801cb4c:	d824      	bhi.n	801cb98 <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cb4e:	491a      	ldr	r1, [pc, #104]	; (801cbb8 <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cb50:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cb52:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801cb54:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cb56:	880d      	ldrh	r5, [r1, #0]
 801cb58:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cb5a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cb5e:	1953      	adds	r3, r2, r5
 801cb60:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801cb62:	f7fe fee7 	bl	801b934 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801cb66:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cb6a:	b11b      	cbz	r3, 801cb74 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cb6c:	9b01      	ldr	r3, [sp, #4]
 801cb6e:	ea56 0503 	orrs.w	r5, r6, r3
 801cb72:	d006      	beq.n	801cb82 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801cb74:	2e00      	cmp	r6, #0
 801cb76:	d1cb      	bne.n	801cb10 <tcp_free_acked_segments.constprop.0+0x20>
 801cb78:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801cb7a:	4628      	mov	r0, r5
 801cb7c:	b003      	add	sp, #12
 801cb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cb82:	4b0e      	ldr	r3, [pc, #56]	; (801cbbc <tcp_free_acked_segments.constprop.0+0xcc>)
 801cb84:	f240 4261 	movw	r2, #1121	; 0x461
 801cb88:	490d      	ldr	r1, [pc, #52]	; (801cbc0 <tcp_free_acked_segments.constprop.0+0xd0>)
 801cb8a:	480e      	ldr	r0, [pc, #56]	; (801cbc4 <tcp_free_acked_segments.constprop.0+0xd4>)
 801cb8c:	f008 fa1e 	bl	8024fcc <iprintf>
}
 801cb90:	4628      	mov	r0, r5
 801cb92:	b003      	add	sp, #12
 801cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cb98:	465b      	mov	r3, fp
 801cb9a:	f240 4257 	movw	r2, #1111	; 0x457
 801cb9e:	4651      	mov	r1, sl
 801cba0:	4648      	mov	r0, r9
 801cba2:	f008 fa13 	bl	8024fcc <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cba6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cbaa:	e7d0      	b.n	801cb4e <tcp_free_acked_segments.constprop.0+0x5e>
 801cbac:	4625      	mov	r5, r4
}
 801cbae:	4628      	mov	r0, r5
 801cbb0:	b003      	add	sp, #12
 801cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbb6:	bf00      	nop
 801cbb8:	2002dc08 	.word	0x2002dc08
 801cbbc:	08043d8c 	.word	0x08043d8c
 801cbc0:	08043e38 	.word	0x08043e38
 801cbc4:	0802bdc0 	.word	0x0802bdc0
 801cbc8:	2002dbf0 	.word	0x2002dbf0
 801cbcc:	08043e10 	.word	0x08043e10

0801cbd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801cbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cbd4:	4604      	mov	r4, r0
 801cbd6:	2800      	cmp	r0, #0
 801cbd8:	f000 8200 	beq.w	801cfdc <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801cbdc:	7d23      	ldrb	r3, [r4, #20]
 801cbde:	2b03      	cmp	r3, #3
 801cbe0:	f240 811e 	bls.w	801ce20 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801cbe4:	4bb4      	ldr	r3, [pc, #720]	; (801ceb8 <tcp_receive+0x2e8>)
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	06dd      	lsls	r5, r3, #27
 801cbea:	f100 8097 	bmi.w	801cd1c <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cbee:	4fb3      	ldr	r7, [pc, #716]	; (801cebc <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cbf0:	4eb3      	ldr	r6, [pc, #716]	; (801cec0 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cbf2:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cbf4:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cbf6:	2900      	cmp	r1, #0
 801cbf8:	d07f      	beq.n	801ccfa <tcp_receive+0x12a>
 801cbfa:	7d22      	ldrb	r2, [r4, #20]
 801cbfc:	2a06      	cmp	r2, #6
 801cbfe:	d87c      	bhi.n	801ccfa <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cc00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cc02:	eba2 0803 	sub.w	r8, r2, r3
 801cc06:	f1b8 0f01 	cmp.w	r8, #1
 801cc0a:	d405      	bmi.n	801cc18 <tcp_receive+0x48>
 801cc0c:	1c50      	adds	r0, r2, #1
 801cc0e:	1ac0      	subs	r0, r0, r3
 801cc10:	1a41      	subs	r1, r0, r1
 801cc12:	2900      	cmp	r1, #0
 801cc14:	f340 81f3 	ble.w	801cffe <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801cc18:	1a99      	subs	r1, r3, r2
 801cc1a:	2900      	cmp	r1, #0
 801cc1c:	f2c0 81ea 	blt.w	801cff4 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cc20:	f103 0c01 	add.w	ip, r3, #1
 801cc24:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801cc26:	ebac 0102 	sub.w	r1, ip, r2
 801cc2a:	1a09      	subs	r1, r1, r0
 801cc2c:	2900      	cmp	r1, #0
 801cc2e:	dc39      	bgt.n	801cca4 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801cc30:	429a      	cmp	r2, r3
 801cc32:	f000 8470 	beq.w	801d516 <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801cc36:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801cc38:	2d00      	cmp	r5, #0
 801cc3a:	f000 8378 	beq.w	801d32e <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801cc3e:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801cc40:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cc44:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801cc48:	6842      	ldr	r2, [r0, #4]
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	d019      	beq.n	801cc82 <tcp_receive+0xb2>
              if (prev == NULL) {
 801cc4e:	f1b8 0f00 	cmp.w	r8, #0
 801cc52:	f000 815b 	beq.w	801cf0c <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cc56:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801cc5a:	6849      	ldr	r1, [r1, #4]
 801cc5c:	ebae 0101 	sub.w	r1, lr, r1
 801cc60:	2900      	cmp	r1, #0
 801cc62:	db04      	blt.n	801cc6e <tcp_receive+0x9e>
 801cc64:	ebac 0102 	sub.w	r1, ip, r2
 801cc68:	2900      	cmp	r1, #0
 801cc6a:	f340 8369 	ble.w	801d340 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801cc6e:	6829      	ldr	r1, [r5, #0]
 801cc70:	46a8      	mov	r8, r5
 801cc72:	2900      	cmp	r1, #0
 801cc74:	f000 8159 	beq.w	801cf2a <tcp_receive+0x35a>
 801cc78:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801cc7a:	68e8      	ldr	r0, [r5, #12]
 801cc7c:	6842      	ldr	r2, [r0, #4]
 801cc7e:	429a      	cmp	r2, r3
 801cc80:	d1e5      	bne.n	801cc4e <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801cc82:	4890      	ldr	r0, [pc, #576]	; (801cec4 <tcp_receive+0x2f4>)
 801cc84:	892b      	ldrh	r3, [r5, #8]
 801cc86:	8902      	ldrh	r2, [r0, #8]
 801cc88:	429a      	cmp	r2, r3
 801cc8a:	d90b      	bls.n	801cca4 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cc8c:	f7fe fe70 	bl	801b970 <tcp_seg_copy>
                if (cseg != NULL) {
 801cc90:	b140      	cbz	r0, 801cca4 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801cc92:	f1b8 0f00 	cmp.w	r8, #0
 801cc96:	f000 8414 	beq.w	801d4c2 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801cc9a:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801cc9e:	4629      	mov	r1, r5
 801cca0:	f7ff fea2 	bl	801c9e8 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801cca4:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801cca6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801ccaa:	f002 ba47 	b.w	801f13c <tcp_send_empty_ack>
      if (tcplen == 0) {
 801ccae:	4f83      	ldr	r7, [pc, #524]	; (801cebc <tcp_receive+0x2ec>)
 801ccb0:	8839      	ldrh	r1, [r7, #0]
 801ccb2:	2900      	cmp	r1, #0
 801ccb4:	f040 8116 	bne.w	801cee4 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801ccb8:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ccba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ccbc:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801ccc0:	4470      	add	r0, lr
 801ccc2:	4560      	cmp	r0, ip
 801ccc4:	f040 810e 	bne.w	801cee4 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801ccc8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801ccca:	0400      	lsls	r0, r0, #16
 801cccc:	f100 810a 	bmi.w	801cee4 <tcp_receive+0x314>
 801ccd0:	4590      	cmp	r8, r2
 801ccd2:	f040 8107 	bne.w	801cee4 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ccd6:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801ccda:	28ff      	cmp	r0, #255	; 0xff
 801ccdc:	f000 8393 	beq.w	801d406 <tcp_receive+0x836>
                ++pcb->dupacks;
 801cce0:	3001      	adds	r0, #1
 801cce2:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801cce4:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801cce6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801ccea:	f200 838c 	bhi.w	801d406 <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801ccee:	f000 8396 	beq.w	801d41e <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801ccf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ccf4:	2800      	cmp	r0, #0
 801ccf6:	f040 80b6 	bne.w	801ce66 <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ccfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ccfc:	1a99      	subs	r1, r3, r2
 801ccfe:	2900      	cmp	r1, #0
 801cd00:	db06      	blt.n	801cd10 <tcp_receive+0x140>
 801cd02:	f1c2 0201 	rsb	r2, r2, #1
 801cd06:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801cd08:	1a52      	subs	r2, r2, r1
 801cd0a:	4413      	add	r3, r2
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	dd03      	ble.n	801cd18 <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801cd10:	8b63      	ldrh	r3, [r4, #26]
 801cd12:	f043 0302 	orr.w	r3, r3, #2
 801cd16:	8363      	strh	r3, [r4, #26]
}
 801cd18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd1c:	4e68      	ldr	r6, [pc, #416]	; (801cec0 <tcp_receive+0x2f0>)
 801cd1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801cd20:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cd22:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd26:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cd28:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd2c:	2900      	cmp	r1, #0
 801cd2e:	db7f      	blt.n	801ce30 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd30:	4d65      	ldr	r5, [pc, #404]	; (801cec8 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd32:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd34:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd36:	f000 80d9 	beq.w	801ceec <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd3a:	4594      	cmp	ip, r2
 801cd3c:	f000 80df 	beq.w	801cefe <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801cd40:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801cd44:	eba2 0108 	sub.w	r1, r2, r8
 801cd48:	2900      	cmp	r1, #0
 801cd4a:	ddb0      	ble.n	801ccae <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cd4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801cd4e:	1ad3      	subs	r3, r2, r3
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	dc7d      	bgt.n	801ce50 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801cd54:	8b63      	ldrh	r3, [r4, #26]
 801cd56:	0758      	lsls	r0, r3, #29
 801cd58:	d509      	bpl.n	801cd6e <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801cd5a:	f023 0304 	bic.w	r3, r3, #4
 801cd5e:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801cd60:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801cd64:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801cd68:	2300      	movs	r3, #0
 801cd6a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cd6e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801cd72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801cd74:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cd76:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801cd7a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cd7c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801cd80:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801cd82:	f04f 0300 	mov.w	r3, #0
 801cd86:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801cd8a:	d913      	bls.n	801cdb4 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801cd8c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cd90:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801cd92:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801cd96:	429a      	cmp	r2, r3
 801cd98:	f200 81c9 	bhi.w	801d12e <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cd9c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801cda0:	4411      	add	r1, r2
 801cda2:	b289      	uxth	r1, r1
 801cda4:	428a      	cmp	r2, r1
 801cda6:	f200 82a9 	bhi.w	801d2fc <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801cdaa:	428b      	cmp	r3, r1
 801cdac:	f240 82a8 	bls.w	801d300 <tcp_receive+0x730>
 801cdb0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801cdba:	f7ff fe99 	bl	801caf0 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cdbe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801cdc0:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cdc2:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7ff fe93 	bl	801caf0 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801cdca:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cdcc:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801cdce:	fab2 f382 	clz	r3, r2
 801cdd2:	095b      	lsrs	r3, r3, #5
 801cdd4:	425b      	negs	r3, r3
 801cdd6:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801cdd8:	2300      	movs	r3, #0
 801cdda:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801cddc:	2800      	cmp	r0, #0
 801cdde:	f000 81a3 	beq.w	801d128 <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cde2:	4b3a      	ldr	r3, [pc, #232]	; (801cecc <tcp_receive+0x2fc>)
 801cde4:	8819      	ldrh	r1, [r3, #0]
 801cde6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801cdea:	440b      	add	r3, r1
 801cdec:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801cdf0:	8b63      	ldrh	r3, [r4, #26]
 801cdf2:	0519      	lsls	r1, r3, #20
 801cdf4:	f140 80fa 	bpl.w	801cfec <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801cdf8:	2a00      	cmp	r2, #0
 801cdfa:	f000 81af 	beq.w	801d15c <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801cdfe:	68d3      	ldr	r3, [r2, #12]
 801ce00:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801ce02:	6858      	ldr	r0, [r3, #4]
 801ce04:	f7fc f80c 	bl	8018e20 <lwip_htonl>
 801ce08:	1a38      	subs	r0, r7, r0
 801ce0a:	2800      	cmp	r0, #0
 801ce0c:	f300 80ee 	bgt.w	801cfec <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801ce10:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce12:	4f2a      	ldr	r7, [pc, #168]	; (801cebc <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801ce14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce18:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801ce1a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ce1c:	6833      	ldr	r3, [r6, #0]
 801ce1e:	e01d      	b.n	801ce5c <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ce20:	4b2b      	ldr	r3, [pc, #172]	; (801ced0 <tcp_receive+0x300>)
 801ce22:	f240 427c 	movw	r2, #1148	; 0x47c
 801ce26:	492b      	ldr	r1, [pc, #172]	; (801ced4 <tcp_receive+0x304>)
 801ce28:	482b      	ldr	r0, [pc, #172]	; (801ced8 <tcp_receive+0x308>)
 801ce2a:	f008 f8cf 	bl	8024fcc <iprintf>
 801ce2e:	e6d9      	b.n	801cbe4 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ce30:	4a2a      	ldr	r2, [pc, #168]	; (801cedc <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ce32:	4d25      	ldr	r5, [pc, #148]	; (801cec8 <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ce34:	6812      	ldr	r2, [r2, #0]
 801ce36:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ce38:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ce3a:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ce3e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ce42:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801ce44:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ce48:	bf38      	it	cc
 801ce4a:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801ce4e:	e777      	b.n	801cd40 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce50:	4f1a      	ldr	r7, [pc, #104]	; (801cebc <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801ce52:	4620      	mov	r0, r4
 801ce54:	f002 f972 	bl	801f13c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ce58:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce5a:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801ce5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ce5e:	2800      	cmp	r0, #0
 801ce60:	f43f aec9 	beq.w	801cbf6 <tcp_receive+0x26>
 801ce64:	682a      	ldr	r2, [r5, #0]
 801ce66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801ce68:	1aaa      	subs	r2, r5, r2
 801ce6a:	2a00      	cmp	r2, #0
 801ce6c:	f6bf aec3 	bge.w	801cbf6 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801ce70:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801ce74:	b280      	uxth	r0, r0
 801ce76:	4a1a      	ldr	r2, [pc, #104]	; (801cee0 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801ce78:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801ce7c:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801ce80:	ebae 020c 	sub.w	r2, lr, ip
 801ce84:	1a12      	subs	r2, r2, r0
 801ce86:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801ce88:	4415      	add	r5, r2
      if (m < 0) {
 801ce8a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801ce8e:	b22d      	sxth	r5, r5
 801ce90:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801ce92:	d003      	beq.n	801ce9c <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801ce94:	ebac 0c0e 	sub.w	ip, ip, lr
 801ce98:	4460      	add	r0, ip
 801ce9a:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801ce9c:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801cea0:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801cea4:	4410      	add	r0, r2
      pcb->rttest = 0;
 801cea6:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801cea8:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801ceaa:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ceac:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801ceb0:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ceb2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801ceb6:	e69e      	b.n	801cbf6 <tcp_receive+0x26>
 801ceb8:	2002dbf4 	.word	0x2002dbf4
 801cebc:	2002dc2e 	.word	0x2002dc2e
 801cec0:	2002dc14 	.word	0x2002dc14
 801cec4:	2002dbf8 	.word	0x2002dbf8
 801cec8:	2002dbf0 	.word	0x2002dbf0
 801cecc:	2002dc08 	.word	0x2002dc08
 801ced0:	08043d8c 	.word	0x08043d8c
 801ced4:	08043e74 	.word	0x08043e74
 801ced8:	0802bdc0 	.word	0x0802bdc0
 801cedc:	2002dc20 	.word	0x2002dc20
 801cee0:	2002dbe4 	.word	0x2002dbe4
        pcb->dupacks = 0;
 801cee4:	2200      	movs	r2, #0
 801cee6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ceea:	e7b7      	b.n	801ce5c <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ceec:	ebac 0102 	sub.w	r1, ip, r2
 801cef0:	2900      	cmp	r1, #0
 801cef2:	f6bf af22 	bge.w	801cd3a <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801cef6:	49ac      	ldr	r1, [pc, #688]	; (801d1a8 <tcp_receive+0x5d8>)
 801cef8:	6809      	ldr	r1, [r1, #0]
 801cefa:	89c9      	ldrh	r1, [r1, #14]
 801cefc:	e79d      	b.n	801ce3a <tcp_receive+0x26a>
 801cefe:	49aa      	ldr	r1, [pc, #680]	; (801d1a8 <tcp_receive+0x5d8>)
 801cf00:	6809      	ldr	r1, [r1, #0]
 801cf02:	89c9      	ldrh	r1, [r1, #14]
 801cf04:	458e      	cmp	lr, r1
 801cf06:	f4bf af1b 	bcs.w	801cd40 <tcp_receive+0x170>
 801cf0a:	e796      	b.n	801ce3a <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cf0c:	1a99      	subs	r1, r3, r2
 801cf0e:	2900      	cmp	r1, #0
 801cf10:	f6bf aead 	bge.w	801cc6e <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf14:	48a5      	ldr	r0, [pc, #660]	; (801d1ac <tcp_receive+0x5dc>)
 801cf16:	f7fe fd2b 	bl	801b970 <tcp_seg_copy>
                  if (cseg != NULL) {
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	f43f aec2 	beq.w	801cca4 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801cf20:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801cf22:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cf24:	f7ff fd60 	bl	801c9e8 <tcp_oos_insert_segment>
 801cf28:	e6bc      	b.n	801cca4 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801cf2a:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	f77f aeb9 	ble.w	801cca4 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cf32:	8980      	ldrh	r0, [r0, #12]
 801cf34:	f7fb ff70 	bl	8018e18 <lwip_htons>
 801cf38:	07c1      	lsls	r1, r0, #31
 801cf3a:	f53f aeb3 	bmi.w	801cca4 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801cf3e:	489b      	ldr	r0, [pc, #620]	; (801d1ac <tcp_receive+0x5dc>)
 801cf40:	f7fe fd16 	bl	801b970 <tcp_seg_copy>
 801cf44:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801cf46:	2800      	cmp	r0, #0
 801cf48:	f43f aeac 	beq.w	801cca4 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801cf4c:	68eb      	ldr	r3, [r5, #12]
 801cf4e:	892a      	ldrh	r2, [r5, #8]
 801cf50:	6859      	ldr	r1, [r3, #4]
 801cf52:	6833      	ldr	r3, [r6, #0]
 801cf54:	440a      	add	r2, r1
 801cf56:	1ad2      	subs	r2, r2, r3
 801cf58:	2a00      	cmp	r2, #0
 801cf5a:	dd05      	ble.n	801cf68 <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801cf5c:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801cf5e:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801cf60:	b299      	uxth	r1, r3
 801cf62:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801cf64:	f7fd fe7c 	bl	801ac60 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801cf68:	6832      	ldr	r2, [r6, #0]
 801cf6a:	883b      	ldrh	r3, [r7, #0]
 801cf6c:	4413      	add	r3, r2
 801cf6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cf70:	1a9b      	subs	r3, r3, r2
 801cf72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801cf74:	1a9b      	subs	r3, r3, r2
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	f77f ae94 	ble.w	801cca4 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801cf7c:	682b      	ldr	r3, [r5, #0]
 801cf7e:	68db      	ldr	r3, [r3, #12]
 801cf80:	8998      	ldrh	r0, [r3, #12]
 801cf82:	f7fb ff49 	bl	8018e18 <lwip_htons>
 801cf86:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801cf88:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801cf8a:	f100 82b1 	bmi.w	801d4f0 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801cf8e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801cf90:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801cf92:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801cf94:	1a89      	subs	r1, r1, r2
 801cf96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cf98:	4411      	add	r1, r2
 801cf9a:	b289      	uxth	r1, r1
 801cf9c:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801cf9e:	f7fd fe5f 	bl	801ac60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801cfa2:	682b      	ldr	r3, [r5, #0]
 801cfa4:	891d      	ldrh	r5, [r3, #8]
 801cfa6:	68db      	ldr	r3, [r3, #12]
 801cfa8:	8998      	ldrh	r0, [r3, #12]
 801cfaa:	f7fb ff35 	bl	8018e18 <lwip_htons>
 801cfae:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfb2:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801cfb4:	bf18      	it	ne
 801cfb6:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801cfba:	442b      	add	r3, r5
 801cfbc:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfbe:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801cfc0:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cfc4:	4413      	add	r3, r2
 801cfc6:	4299      	cmp	r1, r3
 801cfc8:	f43f ae6c 	beq.w	801cca4 <tcp_receive+0xd4>
 801cfcc:	4b78      	ldr	r3, [pc, #480]	; (801d1b0 <tcp_receive+0x5e0>)
 801cfce:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801cfd2:	4978      	ldr	r1, [pc, #480]	; (801d1b4 <tcp_receive+0x5e4>)
 801cfd4:	4878      	ldr	r0, [pc, #480]	; (801d1b8 <tcp_receive+0x5e8>)
 801cfd6:	f007 fff9 	bl	8024fcc <iprintf>
 801cfda:	e663      	b.n	801cca4 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cfdc:	4b74      	ldr	r3, [pc, #464]	; (801d1b0 <tcp_receive+0x5e0>)
 801cfde:	f240 427b 	movw	r2, #1147	; 0x47b
 801cfe2:	4976      	ldr	r1, [pc, #472]	; (801d1bc <tcp_receive+0x5ec>)
 801cfe4:	4874      	ldr	r0, [pc, #464]	; (801d1b8 <tcp_receive+0x5e8>)
 801cfe6:	f007 fff1 	bl	8024fcc <iprintf>
 801cfea:	e5f7      	b.n	801cbdc <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfec:	4f74      	ldr	r7, [pc, #464]	; (801d1c0 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfee:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cff0:	8839      	ldrh	r1, [r7, #0]
 801cff2:	e733      	b.n	801ce5c <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801cff4:	8b63      	ldrh	r3, [r4, #26]
 801cff6:	f043 0302 	orr.w	r3, r3, #2
 801cffa:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cffc:	e652      	b.n	801cca4 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801cffe:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d1ac <tcp_receive+0x5dc>
 801d002:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d006:	2d00      	cmp	r5, #0
 801d008:	f000 8170 	beq.w	801d2ec <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d00c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d010:	4598      	cmp	r8, r3
 801d012:	f200 80c0 	bhi.w	801d196 <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d016:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801d01a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d01e:	891a      	ldrh	r2, [r3, #8]
 801d020:	4542      	cmp	r2, r8
 801d022:	f0c0 80ad 	bcc.w	801d180 <tcp_receive+0x5b0>
      inseg.len -= off;
 801d026:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d02a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801d02e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d032:	b292      	uxth	r2, r2
      inseg.len -= off;
 801d034:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801d038:	896b      	ldrh	r3, [r5, #10]
 801d03a:	4543      	cmp	r3, r8
 801d03c:	d20a      	bcs.n	801d054 <tcp_receive+0x484>
        p->len = 0;
 801d03e:	2100      	movs	r1, #0
        off -= p->len;
 801d040:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801d044:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801d046:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801d048:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801d04a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801d04e:	896b      	ldrh	r3, [r5, #10]
 801d050:	4543      	cmp	r3, r8
 801d052:	d3f5      	bcc.n	801d040 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801d054:	4641      	mov	r1, r8
 801d056:	4628      	mov	r0, r5
 801d058:	f7fd fe8e 	bl	801ad78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d05c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d05e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d062:	6033      	str	r3, [r6, #0]
 801d064:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d068:	2b00      	cmp	r3, #0
 801d06a:	f43f ae1b 	beq.w	801cca4 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801d06e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d072:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d076:	8998      	ldrh	r0, [r3, #12]
 801d078:	f7fb fece 	bl	8018e18 <lwip_htons>
 801d07c:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801d080:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801d082:	bf18      	it	ne
 801d084:	2301      	movne	r3, #1
 801d086:	442b      	add	r3, r5
 801d088:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801d08a:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801d08c:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801d08e:	f0c0 8181 	bcc.w	801d394 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801d092:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d094:	2b00      	cmp	r3, #0
 801d096:	f000 80a0 	beq.w	801d1da <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d09a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d09e:	8998      	ldrh	r0, [r3, #12]
 801d0a0:	f7fb feba 	bl	8018e18 <lwip_htons>
 801d0a4:	07c2      	lsls	r2, r0, #31
 801d0a6:	f100 8095 	bmi.w	801d1d4 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801d0aa:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801d0ac:	b955      	cbnz	r5, 801d0c4 <tcp_receive+0x4f4>
 801d0ae:	e1f4      	b.n	801d49a <tcp_receive+0x8ca>
              next = next->next;
 801d0b0:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801d0b4:	4628      	mov	r0, r5
 801d0b6:	f7fe fc3d 	bl	801b934 <tcp_seg_free>
            while (next &&
 801d0ba:	4645      	mov	r5, r8
 801d0bc:	f1b8 0f00 	cmp.w	r8, #0
 801d0c0:	f000 81eb 	beq.w	801d49a <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d0c4:	68e8      	ldr	r0, [r5, #12]
 801d0c6:	883a      	ldrh	r2, [r7, #0]
 801d0c8:	f8d6 e000 	ldr.w	lr, [r6]
 801d0cc:	892b      	ldrh	r3, [r5, #8]
 801d0ce:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801d0d2:	eb02 010e 	add.w	r1, r2, lr
 801d0d6:	4463      	add	r3, ip
 801d0d8:	1acb      	subs	r3, r1, r3
            while (next &&
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	f2c0 81a5 	blt.w	801d42a <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d0e0:	8980      	ldrh	r0, [r0, #12]
 801d0e2:	f7fb fe99 	bl	8018e18 <lwip_htons>
 801d0e6:	07c3      	lsls	r3, r0, #31
 801d0e8:	d5e2      	bpl.n	801d0b0 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d0ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d0ee:	8998      	ldrh	r0, [r3, #12]
 801d0f0:	f7fb fe92 	bl	8018e18 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d0f4:	0780      	lsls	r0, r0, #30
 801d0f6:	d4db      	bmi.n	801d0b0 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d0f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d0fc:	2001      	movs	r0, #1
 801d0fe:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d102:	f7fb fe89 	bl	8018e18 <lwip_htons>
 801d106:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d10a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801d10e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d112:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d114:	b280      	uxth	r0, r0
 801d116:	f7fb fe7f 	bl	8018e18 <lwip_htons>
 801d11a:	f010 0003 	ands.w	r0, r0, #3
 801d11e:	bf18      	it	ne
 801d120:	2001      	movne	r0, #1
 801d122:	4440      	add	r0, r8
 801d124:	8038      	strh	r0, [r7, #0]
 801d126:	e7c3      	b.n	801d0b0 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801d128:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801d12c:	e659      	b.n	801cde2 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d12e:	8b62      	ldrh	r2, [r4, #26]
 801d130:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d134:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d136:	bf14      	ite	ne
 801d138:	2001      	movne	r0, #1
 801d13a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d13c:	fb12 f200 	smulbb	r2, r2, r0
 801d140:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801d142:	428a      	cmp	r2, r1
 801d144:	bf94      	ite	ls
 801d146:	1898      	addls	r0, r3, r2
 801d148:	1858      	addhi	r0, r3, r1
 801d14a:	b282      	uxth	r2, r0
 801d14c:	4293      	cmp	r3, r2
 801d14e:	f240 80e0 	bls.w	801d312 <tcp_receive+0x742>
 801d152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d156:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801d15a:	e62b      	b.n	801cdb4 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801d15c:	b148      	cbz	r0, 801d172 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d15e:	68c3      	ldr	r3, [r0, #12]
 801d160:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801d162:	6858      	ldr	r0, [r3, #4]
 801d164:	f7fb fe5c 	bl	8018e20 <lwip_htonl>
 801d168:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801d16a:	2800      	cmp	r0, #0
 801d16c:	f73f af3e 	bgt.w	801cfec <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801d170:	8b63      	ldrh	r3, [r4, #26]
 801d172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d176:	4f12      	ldr	r7, [pc, #72]	; (801d1c0 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801d178:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d17a:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d17c:	6833      	ldr	r3, [r6, #0]
 801d17e:	e66d      	b.n	801ce5c <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d180:	4b0b      	ldr	r3, [pc, #44]	; (801d1b0 <tcp_receive+0x5e0>)
 801d182:	f240 5297 	movw	r2, #1431	; 0x597
 801d186:	490f      	ldr	r1, [pc, #60]	; (801d1c4 <tcp_receive+0x5f4>)
 801d188:	480b      	ldr	r0, [pc, #44]	; (801d1b8 <tcp_receive+0x5e8>)
 801d18a:	f007 ff1f 	bl	8024fcc <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d18e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d192:	891a      	ldrh	r2, [r3, #8]
 801d194:	e747      	b.n	801d026 <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d196:	4b06      	ldr	r3, [pc, #24]	; (801d1b0 <tcp_receive+0x5e0>)
 801d198:	f240 5295 	movw	r2, #1429	; 0x595
 801d19c:	490a      	ldr	r1, [pc, #40]	; (801d1c8 <tcp_receive+0x5f8>)
 801d19e:	4806      	ldr	r0, [pc, #24]	; (801d1b8 <tcp_receive+0x5e8>)
 801d1a0:	f007 ff14 	bl	8024fcc <iprintf>
 801d1a4:	e737      	b.n	801d016 <tcp_receive+0x446>
 801d1a6:	bf00      	nop
 801d1a8:	2002dc20 	.word	0x2002dc20
 801d1ac:	2002dbf8 	.word	0x2002dbf8
 801d1b0:	08043d8c 	.word	0x08043d8c
 801d1b4:	08043ec0 	.word	0x08043ec0
 801d1b8:	0802bdc0 	.word	0x0802bdc0
 801d1bc:	08043e58 	.word	0x08043e58
 801d1c0:	2002dc2e 	.word	0x2002dc2e
 801d1c4:	08043eb0 	.word	0x08043eb0
 801d1c8:	08043ea0 	.word	0x08043ea0
              pcb->ooseq = pcb->ooseq->next;
 801d1cc:	6803      	ldr	r3, [r0, #0]
 801d1ce:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d1d0:	f7fe fbb0 	bl	801b934 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d1d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	d1f8      	bne.n	801d1cc <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801d1da:	883a      	ldrh	r2, [r7, #0]
 801d1dc:	6831      	ldr	r1, [r6, #0]
 801d1de:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d1e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801d1e2:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	f0c0 80cb 	bcc.w	801d380 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801d1ea:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801d1ec:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801d1ee:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801d1f0:	f7fe fa68 	bl	801b6c4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801d1f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d1f8:	891a      	ldrh	r2, [r3, #8]
 801d1fa:	b122      	cbz	r2, 801d206 <tcp_receive+0x636>
          recv_data = inseg.p;
 801d1fc:	4ab2      	ldr	r2, [pc, #712]	; (801d4c8 <tcp_receive+0x8f8>)
 801d1fe:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801d200:	2300      	movs	r3, #0
 801d202:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d206:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d20a:	8998      	ldrh	r0, [r3, #12]
 801d20c:	f7fb fe04 	bl	8018e18 <lwip_htons>
 801d210:	07c2      	lsls	r2, r0, #31
 801d212:	d504      	bpl.n	801d21e <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801d214:	4aad      	ldr	r2, [pc, #692]	; (801d4cc <tcp_receive+0x8fc>)
 801d216:	7813      	ldrb	r3, [r2, #0]
 801d218:	f043 0320 	orr.w	r3, r3, #32
 801d21c:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801d21e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d220:	2d00      	cmp	r5, #0
 801d222:	d07b      	beq.n	801d31c <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d224:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801d4d4 <tcp_receive+0x904>
 801d228:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801d4ec <tcp_receive+0x91c>
 801d22c:	4fa8      	ldr	r7, [pc, #672]	; (801d4d0 <tcp_receive+0x900>)
 801d22e:	e033      	b.n	801d298 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d230:	68eb      	ldr	r3, [r5, #12]
 801d232:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d236:	8998      	ldrh	r0, [r3, #12]
 801d238:	f7fb fdee 	bl	8018e18 <lwip_htons>
 801d23c:	f010 0003 	ands.w	r0, r0, #3
 801d240:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d242:	bf18      	it	ne
 801d244:	2001      	movne	r0, #1
 801d246:	4450      	add	r0, sl
 801d248:	1a18      	subs	r0, r3, r0
 801d24a:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801d24c:	4620      	mov	r0, r4
 801d24e:	f7fe fa39 	bl	801b6c4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801d252:	6869      	ldr	r1, [r5, #4]
 801d254:	890b      	ldrh	r3, [r1, #8]
 801d256:	b13b      	cbz	r3, 801d268 <tcp_receive+0x698>
            if (recv_data) {
 801d258:	4b9b      	ldr	r3, [pc, #620]	; (801d4c8 <tcp_receive+0x8f8>)
 801d25a:	6818      	ldr	r0, [r3, #0]
 801d25c:	2800      	cmp	r0, #0
 801d25e:	d05b      	beq.n	801d318 <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801d260:	f7fd fe2c 	bl	801aebc <pbuf_cat>
            cseg->p = NULL;
 801d264:	2300      	movs	r3, #0
 801d266:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d268:	68eb      	ldr	r3, [r5, #12]
 801d26a:	8998      	ldrh	r0, [r3, #12]
 801d26c:	f7fb fdd4 	bl	8018e18 <lwip_htons>
 801d270:	07c3      	lsls	r3, r0, #31
 801d272:	d509      	bpl.n	801d288 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801d274:	4a95      	ldr	r2, [pc, #596]	; (801d4cc <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d276:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801d278:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d27a:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801d27c:	f043 0320 	orr.w	r3, r3, #32
 801d280:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d282:	d101      	bne.n	801d288 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801d284:	2307      	movs	r3, #7
 801d286:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801d288:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801d28a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801d28c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801d28e:	f7fe fb51 	bl	801b934 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d292:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d294:	2d00      	cmp	r5, #0
 801d296:	d041      	beq.n	801d31c <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d298:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801d29a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d29c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801d29e:	428b      	cmp	r3, r1
 801d2a0:	d13c      	bne.n	801d31c <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801d2a2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d2a4:	8990      	ldrh	r0, [r2, #12]
 801d2a6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d2aa:	f7fb fdb5 	bl	8018e18 <lwip_htons>
 801d2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2b0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d2b4:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d2b8:	bf18      	it	ne
 801d2ba:	2001      	movne	r0, #1
 801d2bc:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d2be:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d2c0:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d2c2:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d2c6:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d2c8:	8998      	ldrh	r0, [r3, #12]
 801d2ca:	f7fb fda5 	bl	8018e18 <lwip_htons>
 801d2ce:	f010 0003 	ands.w	r0, r0, #3
 801d2d2:	bf18      	it	ne
 801d2d4:	2001      	movne	r0, #1
 801d2d6:	4458      	add	r0, fp
 801d2d8:	4582      	cmp	sl, r0
 801d2da:	d2a9      	bcs.n	801d230 <tcp_receive+0x660>
 801d2dc:	464b      	mov	r3, r9
 801d2de:	f240 622b 	movw	r2, #1579	; 0x62b
 801d2e2:	4641      	mov	r1, r8
 801d2e4:	4638      	mov	r0, r7
 801d2e6:	f007 fe71 	bl	8024fcc <iprintf>
 801d2ea:	e7a1      	b.n	801d230 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d2ec:	4b79      	ldr	r3, [pc, #484]	; (801d4d4 <tcp_receive+0x904>)
 801d2ee:	f240 5294 	movw	r2, #1428	; 0x594
 801d2f2:	4979      	ldr	r1, [pc, #484]	; (801d4d8 <tcp_receive+0x908>)
 801d2f4:	4876      	ldr	r0, [pc, #472]	; (801d4d0 <tcp_receive+0x900>)
 801d2f6:	f007 fe69 	bl	8024fcc <iprintf>
 801d2fa:	e687      	b.n	801d00c <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d2fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d300:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d302:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d304:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d306:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d30a:	b292      	uxth	r2, r2
 801d30c:	4293      	cmp	r3, r2
 801d30e:	f63f af20 	bhi.w	801d152 <tcp_receive+0x582>
 801d312:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801d316:	e54d      	b.n	801cdb4 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801d318:	6019      	str	r1, [r3, #0]
 801d31a:	e7a3      	b.n	801d264 <tcp_receive+0x694>
        tcp_ack(pcb);
 801d31c:	8b63      	ldrh	r3, [r4, #26]
 801d31e:	07d8      	lsls	r0, r3, #31
 801d320:	d50a      	bpl.n	801d338 <tcp_receive+0x768>
 801d322:	f023 0301 	bic.w	r3, r3, #1
 801d326:	f043 0302 	orr.w	r3, r3, #2
 801d32a:	8363      	strh	r3, [r4, #26]
 801d32c:	e4f4      	b.n	801cd18 <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d32e:	486b      	ldr	r0, [pc, #428]	; (801d4dc <tcp_receive+0x90c>)
 801d330:	f7fe fb1e 	bl	801b970 <tcp_seg_copy>
 801d334:	6760      	str	r0, [r4, #116]	; 0x74
 801d336:	e4b5      	b.n	801cca4 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801d338:	f043 0301 	orr.w	r3, r3, #1
 801d33c:	8363      	strh	r3, [r4, #26]
 801d33e:	e4eb      	b.n	801cd18 <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d340:	4866      	ldr	r0, [pc, #408]	; (801d4dc <tcp_receive+0x90c>)
 801d342:	f7fe fb15 	bl	801b970 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d346:	4607      	mov	r7, r0
 801d348:	2800      	cmp	r0, #0
 801d34a:	f43f acab 	beq.w	801cca4 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d352:	6832      	ldr	r2, [r6, #0]
 801d354:	6859      	ldr	r1, [r3, #4]
 801d356:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801d35a:	440b      	add	r3, r1
 801d35c:	1a9b      	subs	r3, r3, r2
 801d35e:	2b00      	cmp	r3, #0
 801d360:	dd07      	ble.n	801d372 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d362:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801d364:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d368:	b291      	uxth	r1, r2
 801d36a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d36e:	f7fd fc77 	bl	801ac60 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801d372:	4629      	mov	r1, r5
 801d374:	4638      	mov	r0, r7
                    prev->next = cseg;
 801d376:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801d37a:	f7ff fb35 	bl	801c9e8 <tcp_oos_insert_segment>
 801d37e:	e491      	b.n	801cca4 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d380:	4b54      	ldr	r3, [pc, #336]	; (801d4d4 <tcp_receive+0x904>)
 801d382:	f240 6207 	movw	r2, #1543	; 0x607
 801d386:	4956      	ldr	r1, [pc, #344]	; (801d4e0 <tcp_receive+0x910>)
 801d388:	4851      	ldr	r0, [pc, #324]	; (801d4d0 <tcp_receive+0x900>)
 801d38a:	f007 fe1f 	bl	8024fcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d38e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d390:	883a      	ldrh	r2, [r7, #0]
 801d392:	e72a      	b.n	801d1ea <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d394:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d398:	8998      	ldrh	r0, [r3, #12]
 801d39a:	f7fb fd3d 	bl	8018e18 <lwip_htons>
 801d39e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d3a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d3a4:	d47d      	bmi.n	801d4a2 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d3a6:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d3a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d3aa:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d3ae:	f7fb fd33 	bl	8018e18 <lwip_htons>
 801d3b2:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801d3b4:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d3b8:	d503      	bpl.n	801d3c2 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801d3ba:	3901      	subs	r1, #1
 801d3bc:	b289      	uxth	r1, r1
 801d3be:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801d3c2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d3c6:	f7fd fc4b 	bl	801ac60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d3ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d3ce:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d3d2:	8998      	ldrh	r0, [r3, #12]
 801d3d4:	f7fb fd20 	bl	8018e18 <lwip_htons>
 801d3d8:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3dc:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801d3de:	bf18      	it	ne
 801d3e0:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801d3e4:	442b      	add	r3, r5
 801d3e6:	b29b      	uxth	r3, r3
 801d3e8:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d3ea:	4413      	add	r3, r2
 801d3ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d3ee:	440a      	add	r2, r1
 801d3f0:	4293      	cmp	r3, r2
 801d3f2:	f43f ae4e 	beq.w	801d092 <tcp_receive+0x4c2>
 801d3f6:	4b37      	ldr	r3, [pc, #220]	; (801d4d4 <tcp_receive+0x904>)
 801d3f8:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d3fc:	4939      	ldr	r1, [pc, #228]	; (801d4e4 <tcp_receive+0x914>)
 801d3fe:	4834      	ldr	r0, [pc, #208]	; (801d4d0 <tcp_receive+0x900>)
 801d400:	f007 fde4 	bl	8024fcc <iprintf>
 801d404:	e645      	b.n	801d092 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d406:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801d40a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d40e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801d410:	4413      	add	r3, r2
 801d412:	b29b      	uxth	r3, r3
 801d414:	429a      	cmp	r2, r3
 801d416:	bf88      	it	hi
 801d418:	460b      	movhi	r3, r1
 801d41a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801d41e:	4620      	mov	r0, r4
 801d420:	f001 fe0a 	bl	801f038 <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d424:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d426:	6833      	ldr	r3, [r6, #0]
 801d428:	e518      	b.n	801ce5c <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801d42a:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801d42e:	2b00      	cmp	r3, #0
 801d430:	dc01      	bgt.n	801d436 <tcp_receive+0x866>
            pcb->ooseq = next;
 801d432:	6765      	str	r5, [r4, #116]	; 0x74
 801d434:	e6d4      	b.n	801d1e0 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d436:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d43a:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d43e:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d442:	8998      	ldrh	r0, [r3, #12]
 801d444:	f7fb fce8 	bl	8018e18 <lwip_htons>
 801d448:	0781      	lsls	r1, r0, #30
 801d44a:	d504      	bpl.n	801d456 <tcp_receive+0x886>
                inseg.len -= 1;
 801d44c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d450:	3b01      	subs	r3, #1
 801d452:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801d456:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801d45a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d45e:	f7fd fbff 	bl	801ac60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d462:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d466:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801d46a:	8998      	ldrh	r0, [r3, #12]
 801d46c:	f7fb fcd4 	bl	8018e18 <lwip_htons>
 801d470:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d474:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801d476:	bf18      	it	ne
 801d478:	2001      	movne	r0, #1
 801d47a:	eb08 0200 	add.w	r2, r8, r0
 801d47e:	b292      	uxth	r2, r2
 801d480:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d482:	6859      	ldr	r1, [r3, #4]
 801d484:	6833      	ldr	r3, [r6, #0]
 801d486:	4413      	add	r3, r2
 801d488:	428b      	cmp	r3, r1
 801d48a:	d0d2      	beq.n	801d432 <tcp_receive+0x862>
 801d48c:	4b11      	ldr	r3, [pc, #68]	; (801d4d4 <tcp_receive+0x904>)
 801d48e:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d492:	4915      	ldr	r1, [pc, #84]	; (801d4e8 <tcp_receive+0x918>)
 801d494:	480e      	ldr	r0, [pc, #56]	; (801d4d0 <tcp_receive+0x900>)
 801d496:	f007 fd99 	bl	8024fcc <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801d49a:	883a      	ldrh	r2, [r7, #0]
 801d49c:	6831      	ldr	r1, [r6, #0]
 801d49e:	4411      	add	r1, r2
 801d4a0:	e7c7      	b.n	801d432 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d4a2:	899d      	ldrh	r5, [r3, #12]
 801d4a4:	4628      	mov	r0, r5
 801d4a6:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801d4aa:	f7fb fcb5 	bl	8018e18 <lwip_htons>
 801d4ae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d4b2:	f7fb fcb1 	bl	8018e18 <lwip_htons>
 801d4b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4ba:	4328      	orrs	r0, r5
 801d4bc:	8198      	strh	r0, [r3, #12]
 801d4be:	b280      	uxth	r0, r0
 801d4c0:	e772      	b.n	801d3a8 <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801d4c2:	6760      	str	r0, [r4, #116]	; 0x74
 801d4c4:	f7ff bbeb 	b.w	801cc9e <tcp_receive+0xce>
 801d4c8:	2002dc0c 	.word	0x2002dc0c
 801d4cc:	2002dc10 	.word	0x2002dc10
 801d4d0:	0802bdc0 	.word	0x0802bdc0
 801d4d4:	08043d8c 	.word	0x08043d8c
 801d4d8:	08043e90 	.word	0x08043e90
 801d4dc:	2002dbf8 	.word	0x2002dbf8
 801d4e0:	08043f34 	.word	0x08043f34
 801d4e4:	08043ec0 	.word	0x08043ec0
 801d4e8:	08043ef8 	.word	0x08043ef8
 801d4ec:	08043f54 	.word	0x08043f54
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d4f0:	68db      	ldr	r3, [r3, #12]
 801d4f2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d4f6:	4640      	mov	r0, r8
 801d4f8:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801d4fc:	f7fb fc8c 	bl	8018e18 <lwip_htons>
 801d500:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d504:	f7fb fc88 	bl	8018e18 <lwip_htons>
 801d508:	682b      	ldr	r3, [r5, #0]
 801d50a:	ea48 0800 	orr.w	r8, r8, r0
 801d50e:	68da      	ldr	r2, [r3, #12]
 801d510:	f8a2 800c 	strh.w	r8, [r2, #12]
 801d514:	e53b      	b.n	801cf8e <tcp_receive+0x3be>
 801d516:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801d51c <tcp_receive+0x94c>
 801d51a:	e5a8      	b.n	801d06e <tcp_receive+0x49e>
 801d51c:	2002dbf8 	.word	0x2002dbf8

0801d520 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d520:	494a      	ldr	r1, [pc, #296]	; (801d64c <tcp_parseopt.part.0+0x12c>)
 801d522:	4b4b      	ldr	r3, [pc, #300]	; (801d650 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d524:	4a4b      	ldr	r2, [pc, #300]	; (801d654 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801d526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d52a:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d52e:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d530:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d532:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d536:	4b48      	ldr	r3, [pc, #288]	; (801d658 <tcp_parseopt.part.0+0x138>)
 801d538:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801d65c <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d53c:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801d53e:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d542:	681d      	ldr	r5, [r3, #0]
 801d544:	f8b9 2000 	ldrh.w	r2, [r9]
 801d548:	f102 0c14 	add.w	ip, r2, #20
 801d54c:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d54e:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801d550:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d554:	d96d      	bls.n	801d632 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801d556:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d558:	b1ac      	cbz	r4, 801d586 <tcp_parseopt.part.0+0x66>
 801d55a:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801d55c:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d560:	d811      	bhi.n	801d586 <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801d562:	b2c9      	uxtb	r1, r1
 801d564:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801d566:	2901      	cmp	r1, #1
 801d568:	d011      	beq.n	801d58e <tcp_parseopt.part.0+0x6e>
 801d56a:	2902      	cmp	r1, #2
 801d56c:	d017      	beq.n	801d59e <tcp_parseopt.part.0+0x7e>
 801d56e:	b191      	cbz	r1, 801d596 <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d570:	b10c      	cbz	r4, 801d576 <tcp_parseopt.part.0+0x56>
 801d572:	4573      	cmp	r3, lr
 801d574:	d242      	bcs.n	801d5fc <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801d576:	442b      	add	r3, r5
 801d578:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801d57a:	2b01      	cmp	r3, #1
 801d57c:	d961      	bls.n	801d642 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d57e:	441a      	add	r2, r3
 801d580:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d582:	2101      	movs	r1, #1
 801d584:	e7e0      	b.n	801d548 <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801d586:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801d58a:	2901      	cmp	r1, #1
 801d58c:	d1ed      	bne.n	801d56a <tcp_parseopt.part.0+0x4a>
 801d58e:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801d592:	461a      	mov	r2, r3
 801d594:	e7db      	b.n	801d54e <tcp_parseopt.part.0+0x2e>
 801d596:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801d59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801d59e:	1c91      	adds	r1, r2, #2
 801d5a0:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d5a2:	b10c      	cbz	r4, 801d5a8 <tcp_parseopt.part.0+0x88>
 801d5a4:	4573      	cmp	r3, lr
 801d5a6:	d224      	bcs.n	801d5f2 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801d5a8:	442b      	add	r3, r5
 801d5aa:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d5ac:	2b04      	cmp	r3, #4
 801d5ae:	d145      	bne.n	801d63c <tcp_parseopt.part.0+0x11c>
 801d5b0:	1c4b      	adds	r3, r1, #1
 801d5b2:	42b3      	cmp	r3, r6
 801d5b4:	da42      	bge.n	801d63c <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801d5b6:	1cd3      	adds	r3, r2, #3
 801d5b8:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d5ba:	b384      	cbz	r4, 801d61e <tcp_parseopt.part.0+0xfe>
 801d5bc:	458e      	cmp	lr, r1
 801d5be:	d822      	bhi.n	801d606 <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d5c0:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801d5c4:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d5c6:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801d5c8:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801d5ca:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d5cc:	f814 c001 	ldrb.w	ip, [r4, r1]
 801d5d0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d5d4:	d820      	bhi.n	801d618 <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d5d6:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801d5da:	b2c9      	uxtb	r1, r1
 801d5dc:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801d5de:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d5e2:	1e59      	subs	r1, r3, #1
 801d5e4:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801d5e8:	bf28      	it	cs
 801d5ea:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801d5ee:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801d5f0:	e7c7      	b.n	801d582 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d5f2:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d5f6:	b2db      	uxtb	r3, r3
 801d5f8:	5ce3      	ldrb	r3, [r4, r3]
 801d5fa:	e7d7      	b.n	801d5ac <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d5fc:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d600:	b2db      	uxtb	r3, r3
 801d602:	5ce3      	ldrb	r3, [r4, r3]
 801d604:	e7b9      	b.n	801d57a <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801d606:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d608:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d60a:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d60c:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d610:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d612:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d616:	d9de      	bls.n	801d5d6 <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801d618:	442b      	add	r3, r5
 801d61a:	7d1b      	ldrb	r3, [r3, #20]
 801d61c:	e7df      	b.n	801d5de <tcp_parseopt.part.0+0xbe>
 801d61e:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d620:	3204      	adds	r2, #4
    return opts[optidx];
 801d622:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d624:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d628:	b292      	uxth	r2, r2
    return opts[optidx];
 801d62a:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d62c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801d630:	e7d5      	b.n	801d5de <tcp_parseopt.part.0+0xbe>
 801d632:	2900      	cmp	r1, #0
 801d634:	d0b1      	beq.n	801d59a <tcp_parseopt.part.0+0x7a>
 801d636:	f8a9 2000 	strh.w	r2, [r9]
 801d63a:	e7ae      	b.n	801d59a <tcp_parseopt.part.0+0x7a>
 801d63c:	f8a9 1000 	strh.w	r1, [r9]
 801d640:	e7ab      	b.n	801d59a <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801d642:	3202      	adds	r2, #2
 801d644:	f8a9 2000 	strh.w	r2, [r9]
 801d648:	e7a7      	b.n	801d59a <tcp_parseopt.part.0+0x7a>
 801d64a:	bf00      	nop
 801d64c:	2002dc24 	.word	0x2002dc24
 801d650:	2002dc28 	.word	0x2002dc28
 801d654:	2002dc2c 	.word	0x2002dc2c
 801d658:	2002dc20 	.word	0x2002dc20
 801d65c:	2002dc1c 	.word	0x2002dc1c

0801d660 <tcp_input>:
{
 801d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d664:	4604      	mov	r4, r0
{
 801d666:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d668:	2800      	cmp	r0, #0
 801d66a:	f000 80d2 	beq.w	801d812 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801d66e:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801d670:	4e6b      	ldr	r6, [pc, #428]	; (801d820 <tcp_input+0x1c0>)
 801d672:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801d674:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801d676:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801d678:	d805      	bhi.n	801d686 <tcp_input+0x26>
  pbuf_free(p);
 801d67a:	4620      	mov	r0, r4
}
 801d67c:	b009      	add	sp, #36	; 0x24
 801d67e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801d682:	f7fd bbe9 	b.w	801ae58 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d686:	4f67      	ldr	r7, [pc, #412]	; (801d824 <tcp_input+0x1c4>)
 801d688:	6839      	ldr	r1, [r7, #0]
 801d68a:	6978      	ldr	r0, [r7, #20]
 801d68c:	f005 f9ae 	bl	80229ec <ip4_addr_isbroadcast_u32>
 801d690:	2800      	cmp	r0, #0
 801d692:	d1f2      	bne.n	801d67a <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d694:	697b      	ldr	r3, [r7, #20]
 801d696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d69a:	2be0      	cmp	r3, #224	; 0xe0
 801d69c:	d0ed      	beq.n	801d67a <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d69e:	f107 0314 	add.w	r3, r7, #20
 801d6a2:	f107 0910 	add.w	r9, r7, #16
 801d6a6:	2106      	movs	r1, #6
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	9300      	str	r3, [sp, #0]
 801d6ac:	464b      	mov	r3, r9
 801d6ae:	8922      	ldrh	r2, [r4, #8]
 801d6b0:	f7fc f946 	bl	8019940 <ip_chksum_pseudo>
    if (chksum != 0) {
 801d6b4:	4605      	mov	r5, r0
 801d6b6:	2800      	cmp	r0, #0
 801d6b8:	d1df      	bne.n	801d67a <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d6ba:	6833      	ldr	r3, [r6, #0]
 801d6bc:	8998      	ldrh	r0, [r3, #12]
 801d6be:	f7fb fbab 	bl	8018e18 <lwip_htons>
 801d6c2:	0a80      	lsrs	r0, r0, #10
 801d6c4:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d6c8:	2913      	cmp	r1, #19
 801d6ca:	d9d6      	bls.n	801d67a <tcp_input+0x1a>
 801d6cc:	8923      	ldrh	r3, [r4, #8]
 801d6ce:	b28a      	uxth	r2, r1
 801d6d0:	428b      	cmp	r3, r1
 801d6d2:	d3d2      	bcc.n	801d67a <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d6d4:	f1a2 0314 	sub.w	r3, r2, #20
 801d6d8:	4853      	ldr	r0, [pc, #332]	; (801d828 <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801d6da:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d854 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d6de:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801d6e0:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d6e4:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801d6e6:	8960      	ldrh	r0, [r4, #10]
 801d6e8:	4290      	cmp	r0, r2
 801d6ea:	f080 819f 	bcs.w	801da2c <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d6ee:	6823      	ldr	r3, [r4, #0]
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	f000 837b 	beq.w	801ddec <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801d6f6:	2114      	movs	r1, #20
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	f7fd fb3d 	bl	801ad78 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d6fe:	4b4a      	ldr	r3, [pc, #296]	; (801d828 <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801d700:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d702:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d704:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801d708:	4b48      	ldr	r3, [pc, #288]	; (801d82c <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801d70a:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d70c:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801d710:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d712:	f7fd fb31 	bl	801ad78 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801d716:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d718:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801d71c:	8943      	ldrh	r3, [r0, #10]
 801d71e:	455b      	cmp	r3, fp
 801d720:	d3ab      	bcc.n	801d67a <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d722:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801d724:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d726:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801d72a:	f7fd fb25 	bl	801ad78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d72e:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d730:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d732:	442b      	add	r3, r5
 801d734:	eba3 030a 	sub.w	r3, r3, sl
 801d738:	b29b      	uxth	r3, r3
 801d73a:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d73c:	2a00      	cmp	r2, #0
 801d73e:	f040 835c 	bne.w	801ddfa <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d742:	6822      	ldr	r2, [r4, #0]
 801d744:	8912      	ldrh	r2, [r2, #8]
 801d746:	429a      	cmp	r2, r3
 801d748:	d005      	beq.n	801d756 <tcp_input+0xf6>
 801d74a:	4b39      	ldr	r3, [pc, #228]	; (801d830 <tcp_input+0x1d0>)
 801d74c:	22e0      	movs	r2, #224	; 0xe0
 801d74e:	4939      	ldr	r1, [pc, #228]	; (801d834 <tcp_input+0x1d4>)
 801d750:	4839      	ldr	r0, [pc, #228]	; (801d838 <tcp_input+0x1d8>)
 801d752:	f007 fc3b 	bl	8024fcc <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d756:	6835      	ldr	r5, [r6, #0]
 801d758:	8828      	ldrh	r0, [r5, #0]
 801d75a:	f7fb fb5d 	bl	8018e18 <lwip_htons>
 801d75e:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d760:	6835      	ldr	r5, [r6, #0]
 801d762:	8868      	ldrh	r0, [r5, #2]
 801d764:	f7fb fb58 	bl	8018e18 <lwip_htons>
 801d768:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d76a:	6835      	ldr	r5, [r6, #0]
 801d76c:	6868      	ldr	r0, [r5, #4]
 801d76e:	f7fb fb57 	bl	8018e20 <lwip_htonl>
 801d772:	4b32      	ldr	r3, [pc, #200]	; (801d83c <tcp_input+0x1dc>)
 801d774:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d776:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d778:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d77a:	68a8      	ldr	r0, [r5, #8]
 801d77c:	f7fb fb50 	bl	8018e20 <lwip_htonl>
 801d780:	4b2f      	ldr	r3, [pc, #188]	; (801d840 <tcp_input+0x1e0>)
 801d782:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d784:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d786:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d788:	89e8      	ldrh	r0, [r5, #14]
 801d78a:	f7fb fb45 	bl	8018e18 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801d78e:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d790:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801d792:	8998      	ldrh	r0, [r3, #12]
 801d794:	f7fb fb40 	bl	8018e18 <lwip_htons>
 801d798:	492a      	ldr	r1, [pc, #168]	; (801d844 <tcp_input+0x1e4>)
 801d79a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801d79e:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801d7a0:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d7a2:	0782      	lsls	r2, r0, #30
 801d7a4:	f040 8139 	bne.w	801da1a <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801d7a8:	4a27      	ldr	r2, [pc, #156]	; (801d848 <tcp_input+0x1e8>)
 801d7aa:	9205      	str	r2, [sp, #20]
 801d7ac:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d7ae:	4b27      	ldr	r3, [pc, #156]	; (801d84c <tcp_input+0x1ec>)
 801d7b0:	681d      	ldr	r5, [r3, #0]
 801d7b2:	2d00      	cmp	r5, #0
 801d7b4:	f000 80e0 	beq.w	801d978 <tcp_input+0x318>
  prev = NULL;
 801d7b8:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d7bc:	4b1c      	ldr	r3, [pc, #112]	; (801d830 <tcp_input+0x1d0>)
 801d7be:	f8df b098 	ldr.w	fp, [pc, #152]	; 801d858 <tcp_input+0x1f8>
 801d7c2:	f8df a074 	ldr.w	sl, [pc, #116]	; 801d838 <tcp_input+0x1d8>
 801d7c6:	e019      	b.n	801d7fc <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d7c8:	2a0a      	cmp	r2, #10
 801d7ca:	f000 80cd 	beq.w	801d968 <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d7ce:	2a01      	cmp	r2, #1
 801d7d0:	f000 80c3 	beq.w	801d95a <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d7d4:	7a29      	ldrb	r1, [r5, #8]
 801d7d6:	b131      	cbz	r1, 801d7e6 <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d7d8:	687a      	ldr	r2, [r7, #4]
 801d7da:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801d7de:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d7e0:	b2d2      	uxtb	r2, r2
 801d7e2:	4291      	cmp	r1, r2
 801d7e4:	d104      	bne.n	801d7f0 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801d7e6:	6832      	ldr	r2, [r6, #0]
 801d7e8:	8b28      	ldrh	r0, [r5, #24]
 801d7ea:	8811      	ldrh	r1, [r2, #0]
 801d7ec:	4288      	cmp	r0, r1
 801d7ee:	d035      	beq.n	801d85c <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d7f0:	68ea      	ldr	r2, [r5, #12]
 801d7f2:	46a8      	mov	r8, r5
 801d7f4:	2a00      	cmp	r2, #0
 801d7f6:	f000 80bf 	beq.w	801d978 <tcp_input+0x318>
 801d7fa:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d7fc:	7d2a      	ldrb	r2, [r5, #20]
 801d7fe:	2a00      	cmp	r2, #0
 801d800:	d1e2      	bne.n	801d7c8 <tcp_input+0x168>
 801d802:	22fb      	movs	r2, #251	; 0xfb
 801d804:	4659      	mov	r1, fp
 801d806:	4650      	mov	r0, sl
 801d808:	f007 fbe0 	bl	8024fcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d80c:	7d2a      	ldrb	r2, [r5, #20]
 801d80e:	4b08      	ldr	r3, [pc, #32]	; (801d830 <tcp_input+0x1d0>)
 801d810:	e7da      	b.n	801d7c8 <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d812:	4b07      	ldr	r3, [pc, #28]	; (801d830 <tcp_input+0x1d0>)
 801d814:	2283      	movs	r2, #131	; 0x83
 801d816:	490e      	ldr	r1, [pc, #56]	; (801d850 <tcp_input+0x1f0>)
 801d818:	4807      	ldr	r0, [pc, #28]	; (801d838 <tcp_input+0x1d8>)
 801d81a:	f007 fbd7 	bl	8024fcc <iprintf>
 801d81e:	e726      	b.n	801d66e <tcp_input+0xe>
 801d820:	2002dc20 	.word	0x2002dc20
 801d824:	2001ec54 	.word	0x2001ec54
 801d828:	2002dc2c 	.word	0x2002dc2c
 801d82c:	2002dc24 	.word	0x2002dc24
 801d830:	08043d8c 	.word	0x08043d8c
 801d834:	08043fb0 	.word	0x08043fb0
 801d838:	0802bdc0 	.word	0x0802bdc0
 801d83c:	2002dc14 	.word	0x2002dc14
 801d840:	2002dbf0 	.word	0x2002dbf0
 801d844:	2002dbf4 	.word	0x2002dbf4
 801d848:	2002dc2e 	.word	0x2002dc2e
 801d84c:	2002dbd4 	.word	0x2002dbd4
 801d850:	08043f7c 	.word	0x08043f7c
 801d854:	2002dc28 	.word	0x2002dc28
 801d858:	08043fd0 	.word	0x08043fd0
    if (pcb->remote_port == tcphdr->src &&
 801d85c:	8852      	ldrh	r2, [r2, #2]
 801d85e:	8ae9      	ldrh	r1, [r5, #22]
 801d860:	4291      	cmp	r1, r2
 801d862:	d1c5      	bne.n	801d7f0 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801d864:	6869      	ldr	r1, [r5, #4]
 801d866:	693a      	ldr	r2, [r7, #16]
 801d868:	4291      	cmp	r1, r2
 801d86a:	d1c1      	bne.n	801d7f0 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d86c:	6829      	ldr	r1, [r5, #0]
 801d86e:	697a      	ldr	r2, [r7, #20]
 801d870:	4291      	cmp	r1, r2
 801d872:	d1bd      	bne.n	801d7f0 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d874:	68eb      	ldr	r3, [r5, #12]
 801d876:	42ab      	cmp	r3, r5
 801d878:	f000 846e 	beq.w	801e158 <tcp_input+0xaf8>
      if (prev != NULL) {
 801d87c:	f1b8 0f00 	cmp.w	r8, #0
 801d880:	d009      	beq.n	801d896 <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801d882:	4a75      	ldr	r2, [pc, #468]	; (801da58 <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801d884:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801d888:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801d88a:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801d88c:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d88e:	68eb      	ldr	r3, [r5, #12]
 801d890:	42ab      	cmp	r3, r5
 801d892:	f000 8447 	beq.w	801e124 <tcp_input+0xac4>
    inseg.next = NULL;
 801d896:	2300      	movs	r3, #0
 801d898:	4f70      	ldr	r7, [pc, #448]	; (801da5c <tcp_input+0x3fc>)
    recv_data = NULL;
 801d89a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801da84 <tcp_input+0x424>
    recv_flags = 0;
 801d89e:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801da88 <tcp_input+0x428>
    recv_acked = 0;
 801d8a2:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801da8c <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801d8a6:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801d8a8:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801d8aa:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801d8ae:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801d8b2:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801d8b6:	4b6a      	ldr	r3, [pc, #424]	; (801da60 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801d8b8:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801d8ba:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801d8bc:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801d8be:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801d8c0:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801d8c2:	071a      	lsls	r2, r3, #28
 801d8c4:	d503      	bpl.n	801d8ce <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801d8c6:	7b62      	ldrb	r2, [r4, #13]
 801d8c8:	f042 0201 	orr.w	r2, r2, #1
 801d8cc:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801d8ce:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801d8d0:	b172      	cbz	r2, 801d8f0 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d8d2:	4628      	mov	r0, r5
 801d8d4:	f7fe ff78 	bl	801c7c8 <tcp_process_refused_data>
 801d8d8:	300d      	adds	r0, #13
 801d8da:	f000 8296 	beq.w	801de0a <tcp_input+0x7aa>
 801d8de:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d8e0:	b123      	cbz	r3, 801d8ec <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d8e2:	9b05      	ldr	r3, [sp, #20]
 801d8e4:	881b      	ldrh	r3, [r3, #0]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	f040 828f 	bne.w	801de0a <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801d8ec:	4b5c      	ldr	r3, [pc, #368]	; (801da60 <tcp_input+0x400>)
 801d8ee:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801d8f0:	4c5c      	ldr	r4, [pc, #368]	; (801da64 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801d8f2:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801d8f4:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801d8f6:	f140 8163 	bpl.w	801dbc0 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801d8fa:	7d29      	ldrb	r1, [r5, #20]
 801d8fc:	2902      	cmp	r1, #2
 801d8fe:	f000 8350 	beq.w	801dfa2 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801d902:	4b59      	ldr	r3, [pc, #356]	; (801da68 <tcp_input+0x408>)
 801d904:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	429a      	cmp	r2, r3
 801d90a:	f000 844a 	beq.w	801e1a2 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d90e:	1a9b      	subs	r3, r3, r2
 801d910:	d404      	bmi.n	801d91c <tcp_input+0x2bc>
 801d912:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801d914:	1a9b      	subs	r3, r3, r2
 801d916:	2b00      	cmp	r3, #0
 801d918:	f340 833e 	ble.w	801df98 <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801d91c:	f89a 3000 	ldrb.w	r3, [sl]
 801d920:	0718      	lsls	r0, r3, #28
 801d922:	f140 8278 	bpl.w	801de16 <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801d926:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801d92a:	b11b      	cbz	r3, 801d934 <tcp_input+0x2d4>
 801d92c:	f06f 010d 	mvn.w	r1, #13
 801d930:	6928      	ldr	r0, [r5, #16]
 801d932:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d934:	4848      	ldr	r0, [pc, #288]	; (801da58 <tcp_input+0x3f8>)
 801d936:	4629      	mov	r1, r5
 801d938:	f7fe fbc4 	bl	801c0c4 <tcp_pcb_remove>
        tcp_free(pcb);
 801d93c:	4628      	mov	r0, r5
 801d93e:	f7fd fdbd 	bl	801b4bc <tcp_free>
    tcp_input_pcb = NULL;
 801d942:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801d944:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801d946:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801d948:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801d94c:	b110      	cbz	r0, 801d954 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801d94e:	f7fd fa83 	bl	801ae58 <pbuf_free>
      inseg.p = NULL;
 801d952:	607d      	str	r5, [r7, #4]
}
 801d954:	b009      	add	sp, #36	; 0x24
 801d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d95a:	22fd      	movs	r2, #253	; 0xfd
 801d95c:	4943      	ldr	r1, [pc, #268]	; (801da6c <tcp_input+0x40c>)
 801d95e:	4650      	mov	r0, sl
 801d960:	f007 fb34 	bl	8024fcc <iprintf>
 801d964:	4b42      	ldr	r3, [pc, #264]	; (801da70 <tcp_input+0x410>)
 801d966:	e735      	b.n	801d7d4 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d968:	22fc      	movs	r2, #252	; 0xfc
 801d96a:	4942      	ldr	r1, [pc, #264]	; (801da74 <tcp_input+0x414>)
 801d96c:	4650      	mov	r0, sl
 801d96e:	f007 fb2d 	bl	8024fcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d972:	7d2a      	ldrb	r2, [r5, #20]
 801d974:	4b3e      	ldr	r3, [pc, #248]	; (801da70 <tcp_input+0x410>)
 801d976:	e72a      	b.n	801d7ce <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d978:	4b3f      	ldr	r3, [pc, #252]	; (801da78 <tcp_input+0x418>)
 801d97a:	681d      	ldr	r5, [r3, #0]
 801d97c:	2d00      	cmp	r5, #0
 801d97e:	d05b      	beq.n	801da38 <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d980:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801da70 <tcp_input+0x410>
 801d984:	f8df b108 	ldr.w	fp, [pc, #264]	; 801da90 <tcp_input+0x430>
 801d988:	f8df a108 	ldr.w	sl, [pc, #264]	; 801da94 <tcp_input+0x434>
 801d98c:	e002      	b.n	801d994 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d98e:	68ed      	ldr	r5, [r5, #12]
 801d990:	2d00      	cmp	r5, #0
 801d992:	d051      	beq.n	801da38 <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d994:	7d2b      	ldrb	r3, [r5, #20]
 801d996:	2b0a      	cmp	r3, #10
 801d998:	4643      	mov	r3, r8
 801d99a:	d005      	beq.n	801d9a8 <tcp_input+0x348>
 801d99c:	f240 121f 	movw	r2, #287	; 0x11f
 801d9a0:	4659      	mov	r1, fp
 801d9a2:	4650      	mov	r0, sl
 801d9a4:	f007 fb12 	bl	8024fcc <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9a8:	7a2a      	ldrb	r2, [r5, #8]
 801d9aa:	b132      	cbz	r2, 801d9ba <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d9b2:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9b4:	b2db      	uxtb	r3, r3
 801d9b6:	429a      	cmp	r2, r3
 801d9b8:	d1e9      	bne.n	801d98e <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801d9ba:	6832      	ldr	r2, [r6, #0]
 801d9bc:	8b2b      	ldrh	r3, [r5, #24]
 801d9be:	8811      	ldrh	r1, [r2, #0]
 801d9c0:	428b      	cmp	r3, r1
 801d9c2:	d1e4      	bne.n	801d98e <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d9c4:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801d9c6:	8ae8      	ldrh	r0, [r5, #22]
 801d9c8:	4290      	cmp	r0, r2
 801d9ca:	d1e0      	bne.n	801d98e <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d9cc:	6869      	ldr	r1, [r5, #4]
 801d9ce:	693a      	ldr	r2, [r7, #16]
 801d9d0:	4291      	cmp	r1, r2
 801d9d2:	d1dc      	bne.n	801d98e <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d9d4:	6829      	ldr	r1, [r5, #0]
 801d9d6:	697a      	ldr	r2, [r7, #20]
 801d9d8:	4291      	cmp	r1, r2
 801d9da:	d1d8      	bne.n	801d98e <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801d9dc:	4a20      	ldr	r2, [pc, #128]	; (801da60 <tcp_input+0x400>)
 801d9de:	7812      	ldrb	r2, [r2, #0]
 801d9e0:	0757      	lsls	r7, r2, #29
 801d9e2:	f53f ae4a 	bmi.w	801d67a <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801d9e6:	0796      	lsls	r6, r2, #30
 801d9e8:	f140 8395 	bpl.w	801e116 <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d9ec:	4a1e      	ldr	r2, [pc, #120]	; (801da68 <tcp_input+0x408>)
 801d9ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801d9f0:	6812      	ldr	r2, [r2, #0]
 801d9f2:	1a51      	subs	r1, r2, r1
 801d9f4:	d404      	bmi.n	801da00 <tcp_input+0x3a0>
 801d9f6:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801d9f8:	1b89      	subs	r1, r1, r6
 801d9fa:	2900      	cmp	r1, #0
 801d9fc:	f340 83ba 	ble.w	801e174 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801da00:	9b05      	ldr	r3, [sp, #20]
 801da02:	881b      	ldrh	r3, [r3, #0]
 801da04:	2b00      	cmp	r3, #0
 801da06:	f43f ae38 	beq.w	801d67a <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801da0a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801da0c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801da0e:	f043 0302 	orr.w	r3, r3, #2
 801da12:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801da14:	f001 fbc4 	bl	801f1a0 <tcp_output>
        pbuf_free(p);
 801da18:	e62f      	b.n	801d67a <tcp_input+0x1a>
    tcplen++;
 801da1a:	1c5a      	adds	r2, r3, #1
 801da1c:	4917      	ldr	r1, [pc, #92]	; (801da7c <tcp_input+0x41c>)
 801da1e:	b292      	uxth	r2, r2
 801da20:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801da22:	4293      	cmp	r3, r2
    tcplen++;
 801da24:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801da26:	f67f aec2 	bls.w	801d7ae <tcp_input+0x14e>
 801da2a:	e626      	b.n	801d67a <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801da2c:	4a14      	ldr	r2, [pc, #80]	; (801da80 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801da2e:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801da30:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801da32:	f7fd f9a1 	bl	801ad78 <pbuf_remove_header>
 801da36:	e68e      	b.n	801d756 <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801da38:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801da98 <tcp_input+0x438>
 801da3c:	f8da 8000 	ldr.w	r8, [sl]
 801da40:	f1b8 0f00 	cmp.w	r8, #0
 801da44:	f000 8237 	beq.w	801deb6 <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801da48:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801da4c:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801da4e:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801da50:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801da52:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801da56:	e027      	b.n	801daa8 <tcp_input+0x448>
 801da58:	2002dbd4 	.word	0x2002dbd4
 801da5c:	2002dbf8 	.word	0x2002dbf8
 801da60:	2002dbf4 	.word	0x2002dbf4
 801da64:	2002dc18 	.word	0x2002dc18
 801da68:	2002dc14 	.word	0x2002dc14
 801da6c:	08044024 	.word	0x08044024
 801da70:	08043d8c 	.word	0x08043d8c
 801da74:	08043ff8 	.word	0x08043ff8
 801da78:	2002dbec 	.word	0x2002dbec
 801da7c:	2002dc2e 	.word	0x2002dc2e
 801da80:	2002dc24 	.word	0x2002dc24
 801da84:	2002dc0c 	.word	0x2002dc0c
 801da88:	2002dc10 	.word	0x2002dc10
 801da8c:	2002dc08 	.word	0x2002dc08
 801da90:	080440a4 	.word	0x080440a4
 801da94:	0802bdc0 	.word	0x0802bdc0
 801da98:	2002dbe0 	.word	0x2002dbe0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801da9c:	68eb      	ldr	r3, [r5, #12]
 801da9e:	4629      	mov	r1, r5
 801daa0:	461d      	mov	r5, r3
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	f000 8208 	beq.w	801deb8 <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801daa8:	7a2a      	ldrb	r2, [r5, #8]
 801daaa:	b12a      	cbz	r2, 801dab8 <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801daac:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801dab0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801dab2:	b2db      	uxtb	r3, r3
 801dab4:	429a      	cmp	r2, r3
 801dab6:	d1f1      	bne.n	801da9c <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801dab8:	8aea      	ldrh	r2, [r5, #22]
 801daba:	8843      	ldrh	r3, [r0, #2]
 801dabc:	429a      	cmp	r2, r3
 801dabe:	d1ed      	bne.n	801da9c <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801dac0:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801dac2:	b10a      	cbz	r2, 801dac8 <tcp_input+0x468>
 801dac4:	4572      	cmp	r2, lr
 801dac6:	d1e9      	bne.n	801da9c <tcp_input+0x43c>
      if (prev != NULL) {
 801dac8:	b129      	cbz	r1, 801dad6 <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801daca:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801dacc:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801dad0:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801dad2:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801dad6:	4a9d      	ldr	r2, [pc, #628]	; (801dd4c <tcp_input+0x6ec>)
 801dad8:	7812      	ldrb	r2, [r2, #0]
 801dada:	0751      	lsls	r1, r2, #29
 801dadc:	f53f adcd 	bmi.w	801d67a <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801dae0:	f012 0810 	ands.w	r8, r2, #16
 801dae4:	f040 8273 	bne.w	801dfce <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801dae8:	0791      	lsls	r1, r2, #30
 801daea:	f57f adc6 	bpl.w	801d67a <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801daee:	7d68      	ldrb	r0, [r5, #21]
 801daf0:	f7fe fc90 	bl	801c414 <tcp_alloc>
    if (npcb == NULL) {
 801daf4:	4681      	mov	r9, r0
 801daf6:	2800      	cmp	r0, #0
 801daf8:	f000 82ce 	beq.w	801e098 <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801dafc:	4b94      	ldr	r3, [pc, #592]	; (801dd50 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801dafe:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801db00:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801db02:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801db04:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801db06:	7849      	ldrb	r1, [r1, #1]
 801db08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801db0c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801db0e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801db10:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801db12:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801db14:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801db16:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801db18:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801db1a:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801db1c:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801db1e:	2303      	movs	r3, #3
 801db20:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801db22:	f7fe fee7 	bl	801c8f4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801db26:	4b8a      	ldr	r3, [pc, #552]	; (801dd50 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801db28:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801db2c:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801db2e:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801db32:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801db34:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801db38:	4a86      	ldr	r2, [pc, #536]	; (801dd54 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801db3a:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801db3e:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801db40:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801db44:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801db48:	7a6b      	ldrb	r3, [r5, #9]
 801db4a:	f003 030c 	and.w	r3, r3, #12
 801db4e:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801db52:	7a2b      	ldrb	r3, [r5, #8]
 801db54:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801db58:	6813      	ldr	r3, [r2, #0]
 801db5a:	f8c2 9000 	str.w	r9, [r2]
 801db5e:	f8c9 300c 	str.w	r3, [r9, #12]
 801db62:	f001 fe49 	bl	801f7f8 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801db66:	4b7c      	ldr	r3, [pc, #496]	; (801dd58 <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801db68:	4a7c      	ldr	r2, [pc, #496]	; (801dd5c <tcp_input+0x6fc>)
 801db6a:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801db6c:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801db6e:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801db70:	b12b      	cbz	r3, 801db7e <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801db72:	4b7b      	ldr	r3, [pc, #492]	; (801dd60 <tcp_input+0x700>)
 801db74:	4648      	mov	r0, r9
 801db76:	f8a3 8000 	strh.w	r8, [r3]
 801db7a:	f7ff fcd1 	bl	801d520 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801db7e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801db80:	f109 0204 	add.w	r2, r9, #4
 801db84:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801db88:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801db8a:	4610      	mov	r0, r2
 801db8c:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801db8e:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801db92:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801db96:	f004 fd4d 	bl	8022634 <ip4_route>
 801db9a:	9a05      	ldr	r2, [sp, #20]
 801db9c:	4601      	mov	r1, r0
 801db9e:	4628      	mov	r0, r5
 801dba0:	f7fe fec4 	bl	801c92c <tcp_eff_send_mss_netif>
 801dba4:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801dba6:	2112      	movs	r1, #18
 801dba8:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801dbaa:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801dbae:	f001 f8db 	bl	801ed68 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	f040 82ca 	bne.w	801e14c <tcp_input+0xaec>
    tcp_output(npcb);
 801dbb8:	4648      	mov	r0, r9
 801dbba:	f001 faf1 	bl	801f1a0 <tcp_output>
 801dbbe:	e55c      	b.n	801d67a <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801dbc0:	f013 0102 	ands.w	r1, r3, #2
 801dbc4:	d004      	beq.n	801dbd0 <tcp_input+0x570>
 801dbc6:	7d2a      	ldrb	r2, [r5, #20]
 801dbc8:	3a02      	subs	r2, #2
 801dbca:	2a01      	cmp	r2, #1
 801dbcc:	f200 81e4 	bhi.w	801df98 <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801dbd0:	8b6a      	ldrh	r2, [r5, #26]
 801dbd2:	06d0      	lsls	r0, r2, #27
 801dbd4:	d402      	bmi.n	801dbdc <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801dbd6:	4a63      	ldr	r2, [pc, #396]	; (801dd64 <tcp_input+0x704>)
 801dbd8:	6812      	ldr	r2, [r2, #0]
 801dbda:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801dbdc:	4a5e      	ldr	r2, [pc, #376]	; (801dd58 <tcp_input+0x6f8>)
 801dbde:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801dbe0:	2200      	movs	r2, #0
 801dbe2:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801dbe6:	b140      	cbz	r0, 801dbfa <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dbe8:	485d      	ldr	r0, [pc, #372]	; (801dd60 <tcp_input+0x700>)
 801dbea:	8002      	strh	r2, [r0, #0]
 801dbec:	4628      	mov	r0, r5
 801dbee:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801dbf2:	f7ff fc95 	bl	801d520 <tcp_parseopt.part.0>
 801dbf6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801dbfa:	7d2a      	ldrb	r2, [r5, #20]
 801dbfc:	3a02      	subs	r2, #2
 801dbfe:	2a07      	cmp	r2, #7
 801dc00:	f63f ae8c 	bhi.w	801d91c <tcp_input+0x2bc>
 801dc04:	e8df f002 	tbb	[pc, r2]
 801dc08:	89041331 	.word	0x89041331
 801dc0c:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801dc10:	4628      	mov	r0, r5
 801dc12:	f7fe ffdd 	bl	801cbd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801dc16:	f89a 3000 	ldrb.w	r3, [sl]
 801dc1a:	069e      	lsls	r6, r3, #26
 801dc1c:	f57f ae7e 	bpl.w	801d91c <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801dc20:	8b6b      	ldrh	r3, [r5, #26]
 801dc22:	f043 0302 	orr.w	r3, r3, #2
 801dc26:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801dc28:	2307      	movs	r3, #7
 801dc2a:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801dc2c:	e676      	b.n	801d91c <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801dc2e:	06da      	lsls	r2, r3, #27
 801dc30:	f140 821c 	bpl.w	801e06c <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dc34:	4b4c      	ldr	r3, [pc, #304]	; (801dd68 <tcp_input+0x708>)
 801dc36:	6819      	ldr	r1, [r3, #0]
 801dc38:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801dc3a:	43db      	mvns	r3, r3
 801dc3c:	42cb      	cmn	r3, r1
 801dc3e:	d404      	bmi.n	801dc4a <tcp_input+0x5ea>
 801dc40:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801dc42:	1acb      	subs	r3, r1, r3
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	f340 823a 	ble.w	801e0be <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dc4a:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dc4c:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dc4e:	8810      	ldrh	r0, [r2, #0]
 801dc50:	4a3f      	ldr	r2, [pc, #252]	; (801dd50 <tcp_input+0x6f0>)
 801dc52:	6812      	ldr	r2, [r2, #0]
 801dc54:	4402      	add	r2, r0
 801dc56:	8818      	ldrh	r0, [r3, #0]
 801dc58:	9002      	str	r0, [sp, #8]
 801dc5a:	4628      	mov	r0, r5
 801dc5c:	885b      	ldrh	r3, [r3, #2]
 801dc5e:	e9cd 9300 	strd	r9, r3, [sp]
 801dc62:	4b42      	ldr	r3, [pc, #264]	; (801dd6c <tcp_input+0x70c>)
 801dc64:	f001 fa22 	bl	801f0ac <tcp_rst>
    if (err != ERR_ABRT) {
 801dc68:	e658      	b.n	801d91c <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801dc6a:	f003 0212 	and.w	r2, r3, #18
 801dc6e:	2a12      	cmp	r2, #18
 801dc70:	f000 813b 	beq.w	801deea <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801dc74:	06d9      	lsls	r1, r3, #27
 801dc76:	f57f ae51 	bpl.w	801d91c <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dc7a:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dc7c:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dc7e:	8811      	ldrh	r1, [r2, #0]
 801dc80:	4a33      	ldr	r2, [pc, #204]	; (801dd50 <tcp_input+0x6f0>)
 801dc82:	8818      	ldrh	r0, [r3, #0]
 801dc84:	6812      	ldr	r2, [r2, #0]
 801dc86:	440a      	add	r2, r1
 801dc88:	4937      	ldr	r1, [pc, #220]	; (801dd68 <tcp_input+0x708>)
 801dc8a:	6809      	ldr	r1, [r1, #0]
 801dc8c:	9002      	str	r0, [sp, #8]
 801dc8e:	4628      	mov	r0, r5
 801dc90:	885b      	ldrh	r3, [r3, #2]
 801dc92:	e9cd 9300 	strd	r9, r3, [sp]
 801dc96:	4b35      	ldr	r3, [pc, #212]	; (801dd6c <tcp_input+0x70c>)
 801dc98:	f001 fa08 	bl	801f0ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801dc9c:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801dca0:	2b05      	cmp	r3, #5
 801dca2:	f63f ae3b 	bhi.w	801d91c <tcp_input+0x2bc>
          pcb->rtime = 0;
 801dca6:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801dca8:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801dcaa:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801dcac:	f001 fc80 	bl	801f5b0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801dcb0:	e634      	b.n	801d91c <tcp_input+0x2bc>
      tcp_receive(pcb);
 801dcb2:	4628      	mov	r0, r5
 801dcb4:	f7fe ff8c 	bl	801cbd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801dcb8:	4b24      	ldr	r3, [pc, #144]	; (801dd4c <tcp_input+0x6ec>)
 801dcba:	781b      	ldrb	r3, [r3, #0]
 801dcbc:	06de      	lsls	r6, r3, #27
 801dcbe:	f57f ae2d 	bpl.w	801d91c <tcp_input+0x2bc>
 801dcc2:	4b29      	ldr	r3, [pc, #164]	; (801dd68 <tcp_input+0x708>)
 801dcc4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	f47f ae27 	bne.w	801d91c <tcp_input+0x2bc>
 801dcce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	f47f ae23 	bne.w	801d91c <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801dcd6:	f89a 3000 	ldrb.w	r3, [sl]
 801dcda:	f043 0310 	orr.w	r3, r3, #16
 801dcde:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801dce2:	e61b      	b.n	801d91c <tcp_input+0x2bc>
      tcp_receive(pcb);
 801dce4:	4628      	mov	r0, r5
 801dce6:	f7fe ff73 	bl	801cbd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801dcea:	f89a 3000 	ldrb.w	r3, [sl]
 801dcee:	069a      	lsls	r2, r3, #26
 801dcf0:	f57f ae14 	bpl.w	801d91c <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801dcf4:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801dcf6:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801dcf8:	f043 0302 	orr.w	r3, r3, #2
 801dcfc:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801dcfe:	f7fd fee1 	bl	801bac4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801dd02:	4b14      	ldr	r3, [pc, #80]	; (801dd54 <tcp_input+0x6f4>)
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	42ab      	cmp	r3, r5
 801dd08:	d061      	beq.n	801ddce <tcp_input+0x76e>
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d062      	beq.n	801ddd4 <tcp_input+0x774>
 801dd0e:	68da      	ldr	r2, [r3, #12]
 801dd10:	42aa      	cmp	r2, r5
 801dd12:	f000 8210 	beq.w	801e136 <tcp_input+0xad6>
 801dd16:	4613      	mov	r3, r2
 801dd18:	e7f7      	b.n	801dd0a <tcp_input+0x6aa>
      tcp_receive(pcb);
 801dd1a:	4628      	mov	r0, r5
 801dd1c:	f7fe ff58 	bl	801cbd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801dd20:	f89a 3000 	ldrb.w	r3, [sl]
 801dd24:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dd28:	4b08      	ldr	r3, [pc, #32]	; (801dd4c <tcp_input+0x6ec>)
 801dd2a:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801dd2c:	f000 818e 	beq.w	801e04c <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dd30:	06d8      	lsls	r0, r3, #27
 801dd32:	d504      	bpl.n	801dd3e <tcp_input+0x6de>
 801dd34:	4b0c      	ldr	r3, [pc, #48]	; (801dd68 <tcp_input+0x708>)
 801dd36:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	429a      	cmp	r2, r3
 801dd3c:	d038      	beq.n	801ddb0 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801dd3e:	8b6b      	ldrh	r3, [r5, #26]
 801dd40:	f043 0302 	orr.w	r3, r3, #2
 801dd44:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801dd46:	2308      	movs	r3, #8
 801dd48:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801dd4a:	e5e7      	b.n	801d91c <tcp_input+0x2bc>
 801dd4c:	2002dbf4 	.word	0x2002dbf4
 801dd50:	2002dc14 	.word	0x2002dc14
 801dd54:	2002dbd4 	.word	0x2002dbd4
 801dd58:	2002dc2c 	.word	0x2002dc2c
 801dd5c:	2002dbd8 	.word	0x2002dbd8
 801dd60:	2002dc1c 	.word	0x2002dc1c
 801dd64:	2002dbe4 	.word	0x2002dbe4
 801dd68:	2002dbf0 	.word	0x2002dbf0
 801dd6c:	2001ec68 	.word	0x2001ec68
      tcp_receive(pcb);
 801dd70:	4628      	mov	r0, r5
 801dd72:	f7fe ff2d 	bl	801cbd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801dd76:	4ba8      	ldr	r3, [pc, #672]	; (801e018 <tcp_input+0x9b8>)
 801dd78:	781b      	ldrb	r3, [r3, #0]
 801dd7a:	06db      	lsls	r3, r3, #27
 801dd7c:	f57f adce 	bpl.w	801d91c <tcp_input+0x2bc>
 801dd80:	4ba6      	ldr	r3, [pc, #664]	; (801e01c <tcp_input+0x9bc>)
 801dd82:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	429a      	cmp	r2, r3
 801dd88:	f47f adc8 	bne.w	801d91c <tcp_input+0x2bc>
 801dd8c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	f47f adc4 	bne.w	801d91c <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801dd94:	4628      	mov	r0, r5
 801dd96:	f7fd fe95 	bl	801bac4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801dd9a:	4ba1      	ldr	r3, [pc, #644]	; (801e020 <tcp_input+0x9c0>)
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	42ab      	cmp	r3, r5
 801dda0:	d015      	beq.n	801ddce <tcp_input+0x76e>
 801dda2:	b1bb      	cbz	r3, 801ddd4 <tcp_input+0x774>
 801dda4:	68da      	ldr	r2, [r3, #12]
 801dda6:	42aa      	cmp	r2, r5
 801dda8:	f000 81c5 	beq.w	801e136 <tcp_input+0xad6>
 801ddac:	4613      	mov	r3, r2
 801ddae:	e7f8      	b.n	801dda2 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ddb0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d1c3      	bne.n	801dd3e <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801ddb6:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801ddb8:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801ddba:	f043 0302 	orr.w	r3, r3, #2
 801ddbe:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801ddc0:	f7fd fe80 	bl	801bac4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801ddc4:	4b96      	ldr	r3, [pc, #600]	; (801e020 <tcp_input+0x9c0>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	42ab      	cmp	r3, r5
 801ddca:	f040 81b7 	bne.w	801e13c <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801ddce:	68eb      	ldr	r3, [r5, #12]
 801ddd0:	4a93      	ldr	r2, [pc, #588]	; (801e020 <tcp_input+0x9c0>)
 801ddd2:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ddd4:	4b93      	ldr	r3, [pc, #588]	; (801e024 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801ddd6:	220a      	movs	r2, #10
 801ddd8:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ddda:	681a      	ldr	r2, [r3, #0]
 801dddc:	601d      	str	r5, [r3, #0]
 801ddde:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801dde0:	2201      	movs	r2, #1
 801dde2:	4b91      	ldr	r3, [pc, #580]	; (801e028 <tcp_input+0x9c8>)
 801dde4:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801dde6:	f001 fd07 	bl	801f7f8 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801ddea:	e597      	b.n	801d91c <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ddec:	4b8f      	ldr	r3, [pc, #572]	; (801e02c <tcp_input+0x9cc>)
 801ddee:	22c2      	movs	r2, #194	; 0xc2
 801ddf0:	498f      	ldr	r1, [pc, #572]	; (801e030 <tcp_input+0x9d0>)
 801ddf2:	4890      	ldr	r0, [pc, #576]	; (801e034 <tcp_input+0x9d4>)
 801ddf4:	f007 f8ea 	bl	8024fcc <iprintf>
 801ddf8:	e47d      	b.n	801d6f6 <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ddfa:	4b8c      	ldr	r3, [pc, #560]	; (801e02c <tcp_input+0x9cc>)
 801ddfc:	22df      	movs	r2, #223	; 0xdf
 801ddfe:	498e      	ldr	r1, [pc, #568]	; (801e038 <tcp_input+0x9d8>)
 801de00:	488c      	ldr	r0, [pc, #560]	; (801e034 <tcp_input+0x9d4>)
 801de02:	f007 f8e3 	bl	8024fcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801de06:	8923      	ldrh	r3, [r4, #8]
 801de08:	e49b      	b.n	801d742 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801de0a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	f000 80d9 	beq.w	801dfc4 <tcp_input+0x964>
 801de12:	4c8a      	ldr	r4, [pc, #552]	; (801e03c <tcp_input+0x9dc>)
 801de14:	e595      	b.n	801d942 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801de16:	f8bb 2000 	ldrh.w	r2, [fp]
 801de1a:	b15a      	cbz	r2, 801de34 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801de1c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801de20:	b12b      	cbz	r3, 801de2e <tcp_input+0x7ce>
 801de22:	4629      	mov	r1, r5
 801de24:	6928      	ldr	r0, [r5, #16]
 801de26:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801de28:	300d      	adds	r0, #13
 801de2a:	f43f ad8a 	beq.w	801d942 <tcp_input+0x2e2>
          recv_acked = 0;
 801de2e:	2300      	movs	r3, #0
 801de30:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801de34:	4628      	mov	r0, r5
 801de36:	f7fe fe2b 	bl	801ca90 <tcp_input_delayed_close>
 801de3a:	2800      	cmp	r0, #0
 801de3c:	f47f ad81 	bne.w	801d942 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801de40:	f8d8 3000 	ldr.w	r3, [r8]
 801de44:	b1fb      	cbz	r3, 801de86 <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801de46:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801de48:	b133      	cbz	r3, 801de58 <tcp_input+0x7f8>
 801de4a:	4b78      	ldr	r3, [pc, #480]	; (801e02c <tcp_input+0x9cc>)
 801de4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801de50:	497b      	ldr	r1, [pc, #492]	; (801e040 <tcp_input+0x9e0>)
 801de52:	4878      	ldr	r0, [pc, #480]	; (801e034 <tcp_input+0x9d4>)
 801de54:	f007 f8ba 	bl	8024fcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801de58:	8b6b      	ldrh	r3, [r5, #26]
 801de5a:	f013 0310 	ands.w	r3, r3, #16
 801de5e:	f040 8113 	bne.w	801e088 <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801de62:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801de66:	2e00      	cmp	r6, #0
 801de68:	f000 8121 	beq.w	801e0ae <tcp_input+0xa4e>
 801de6c:	f8d8 2000 	ldr.w	r2, [r8]
 801de70:	4629      	mov	r1, r5
 801de72:	6928      	ldr	r0, [r5, #16]
 801de74:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801de76:	f110 0f0d 	cmn.w	r0, #13
 801de7a:	f43f ad62 	beq.w	801d942 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801de7e:	b110      	cbz	r0, 801de86 <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801de80:	f8d8 3000 	ldr.w	r3, [r8]
 801de84:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801de86:	f89a 3000 	ldrb.w	r3, [sl]
 801de8a:	0699      	lsls	r1, r3, #26
 801de8c:	d507      	bpl.n	801de9e <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801de8e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801de90:	2b00      	cmp	r3, #0
 801de92:	f000 80ad 	beq.w	801dff0 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801de96:	7b5a      	ldrb	r2, [r3, #13]
 801de98:	f042 0220 	orr.w	r2, r2, #32
 801de9c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801de9e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801dea0:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801dea2:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801dea4:	f7fe fdf4 	bl	801ca90 <tcp_input_delayed_close>
 801dea8:	2800      	cmp	r0, #0
 801deaa:	f47f ad4a 	bne.w	801d942 <tcp_input+0x2e2>
        tcp_output(pcb);
 801deae:	4628      	mov	r0, r5
 801deb0:	f001 f976 	bl	801f1a0 <tcp_output>
 801deb4:	e545      	b.n	801d942 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801deb6:	6830      	ldr	r0, [r6, #0]
 801deb8:	8980      	ldrh	r0, [r0, #12]
 801deba:	f7fa ffad 	bl	8018e18 <lwip_htons>
 801debe:	f010 0004 	ands.w	r0, r0, #4
 801dec2:	f47f abda 	bne.w	801d67a <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dec6:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dec8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801deca:	8811      	ldrh	r1, [r2, #0]
 801decc:	4a5d      	ldr	r2, [pc, #372]	; (801e044 <tcp_input+0x9e4>)
 801dece:	881d      	ldrh	r5, [r3, #0]
 801ded0:	6812      	ldr	r2, [r2, #0]
 801ded2:	440a      	add	r2, r1
 801ded4:	4951      	ldr	r1, [pc, #324]	; (801e01c <tcp_input+0x9bc>)
 801ded6:	6809      	ldr	r1, [r1, #0]
 801ded8:	9502      	str	r5, [sp, #8]
 801deda:	885b      	ldrh	r3, [r3, #2]
 801dedc:	e9cd 9300 	strd	r9, r3, [sp]
 801dee0:	4b59      	ldr	r3, [pc, #356]	; (801e048 <tcp_input+0x9e8>)
 801dee2:	f001 f8e3 	bl	801f0ac <tcp_rst>
 801dee6:	f7ff bbc8 	b.w	801d67a <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801deea:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801deec:	494b      	ldr	r1, [pc, #300]	; (801e01c <tcp_input+0x9bc>)
 801deee:	3201      	adds	r2, #1
 801def0:	6809      	ldr	r1, [r1, #0]
 801def2:	428a      	cmp	r2, r1
 801def4:	f47f aebe 	bne.w	801dc74 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801def8:	4b52      	ldr	r3, [pc, #328]	; (801e044 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801defa:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801defc:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801defe:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801df00:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801df02:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801df04:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801df06:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801df08:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801df0a:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801df0c:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801df0e:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801df10:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801df12:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801df14:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801df18:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801df1a:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801df1e:	9205      	str	r2, [sp, #20]
 801df20:	f004 fb88 	bl	8022634 <ip4_route>
 801df24:	9a05      	ldr	r2, [sp, #20]
 801df26:	4601      	mov	r1, r0
 801df28:	4630      	mov	r0, r6
 801df2a:	f7fe fcff 	bl	801c92c <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801df2e:	f241 131c 	movw	r3, #4380	; 0x111c
 801df32:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801df34:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801df36:	0081      	lsls	r1, r0, #2
 801df38:	429a      	cmp	r2, r3
 801df3a:	4616      	mov	r6, r2
 801df3c:	bf38      	it	cc
 801df3e:	461e      	movcc	r6, r3
 801df40:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801df44:	f240 814d 	bls.w	801e1e2 <tcp_input+0xb82>
 801df48:	b28b      	uxth	r3, r1
 801df4a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801df4e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801df52:	2b00      	cmp	r3, #0
 801df54:	f000 813d 	beq.w	801e1d2 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801df58:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801df5c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801df5e:	3b01      	subs	r3, #1
 801df60:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801df64:	2e00      	cmp	r6, #0
 801df66:	f000 812f 	beq.w	801e1c8 <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801df6a:	6833      	ldr	r3, [r6, #0]
 801df6c:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801df6e:	4630      	mov	r0, r6
 801df70:	f7fd fce0 	bl	801b934 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801df74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801df76:	2b00      	cmp	r3, #0
 801df78:	f000 8122 	beq.w	801e1c0 <tcp_input+0xb60>
          pcb->rtime = 0;
 801df7c:	2300      	movs	r3, #0
 801df7e:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801df80:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801df84:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801df88:	b133      	cbz	r3, 801df98 <tcp_input+0x938>
 801df8a:	2200      	movs	r2, #0
 801df8c:	4629      	mov	r1, r5
 801df8e:	6928      	ldr	r0, [r5, #16]
 801df90:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801df92:	300d      	adds	r0, #13
 801df94:	f43f acd5 	beq.w	801d942 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801df98:	8b6b      	ldrh	r3, [r5, #26]
 801df9a:	f043 0302 	orr.w	r3, r3, #2
 801df9e:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801dfa0:	e4bc      	b.n	801d91c <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801dfa2:	4b1e      	ldr	r3, [pc, #120]	; (801e01c <tcp_input+0x9bc>)
 801dfa4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dfa6:	681b      	ldr	r3, [r3, #0]
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	f47f acb7 	bne.w	801d91c <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801dfae:	f89a 3000 	ldrb.w	r3, [sl]
 801dfb2:	f043 0308 	orr.w	r3, r3, #8
 801dfb6:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801dfba:	8b6b      	ldrh	r3, [r5, #26]
 801dfbc:	f023 0301 	bic.w	r3, r3, #1
 801dfc0:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801dfc2:	e4ab      	b.n	801d91c <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801dfc4:	4628      	mov	r0, r5
 801dfc6:	4c1d      	ldr	r4, [pc, #116]	; (801e03c <tcp_input+0x9dc>)
 801dfc8:	f001 f8b8 	bl	801f13c <tcp_send_empty_ack>
 801dfcc:	e4b9      	b.n	801d942 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dfce:	8802      	ldrh	r2, [r0, #0]
 801dfd0:	e9cd 9300 	strd	r9, r3, [sp]
 801dfd4:	9b05      	ldr	r3, [sp, #20]
 801dfd6:	9202      	str	r2, [sp, #8]
 801dfd8:	881a      	ldrh	r2, [r3, #0]
 801dfda:	4b1a      	ldr	r3, [pc, #104]	; (801e044 <tcp_input+0x9e4>)
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	441a      	add	r2, r3
 801dfe0:	4b0e      	ldr	r3, [pc, #56]	; (801e01c <tcp_input+0x9bc>)
 801dfe2:	4628      	mov	r0, r5
 801dfe4:	6819      	ldr	r1, [r3, #0]
 801dfe6:	4b18      	ldr	r3, [pc, #96]	; (801e048 <tcp_input+0x9e8>)
 801dfe8:	f001 f860 	bl	801f0ac <tcp_rst>
 801dfec:	f7ff bb45 	b.w	801d67a <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801dff0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801dff2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801dff6:	d001      	beq.n	801dffc <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801dff8:	3301      	adds	r3, #1
 801dffa:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801dffc:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801e000:	2e00      	cmp	r6, #0
 801e002:	f43f af4c 	beq.w	801de9e <tcp_input+0x83e>
 801e006:	2300      	movs	r3, #0
 801e008:	4629      	mov	r1, r5
 801e00a:	6928      	ldr	r0, [r5, #16]
 801e00c:	461a      	mov	r2, r3
 801e00e:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801e010:	300d      	adds	r0, #13
 801e012:	f47f af44 	bne.w	801de9e <tcp_input+0x83e>
 801e016:	e494      	b.n	801d942 <tcp_input+0x2e2>
 801e018:	2002dbf4 	.word	0x2002dbf4
 801e01c:	2002dbf0 	.word	0x2002dbf0
 801e020:	2002dbd4 	.word	0x2002dbd4
 801e024:	2002dbec 	.word	0x2002dbec
 801e028:	2002dbd8 	.word	0x2002dbd8
 801e02c:	08043d8c 	.word	0x08043d8c
 801e030:	08043f94 	.word	0x08043f94
 801e034:	0802bdc0 	.word	0x0802bdc0
 801e038:	08043fa4 	.word	0x08043fa4
 801e03c:	2002dc18 	.word	0x2002dc18
 801e040:	08044140 	.word	0x08044140
 801e044:	2002dc14 	.word	0x2002dc14
 801e048:	2001ec68 	.word	0x2001ec68
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e04c:	06d9      	lsls	r1, r3, #27
 801e04e:	f57f ac65 	bpl.w	801d91c <tcp_input+0x2bc>
 801e052:	4b6a      	ldr	r3, [pc, #424]	; (801e1fc <tcp_input+0xb9c>)
 801e054:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	429a      	cmp	r2, r3
 801e05a:	f47f ac5f 	bne.w	801d91c <tcp_input+0x2bc>
 801e05e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e060:	2b00      	cmp	r3, #0
 801e062:	f47f ac5b 	bne.w	801d91c <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801e066:	2306      	movs	r3, #6
 801e068:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e06a:	e457      	b.n	801d91c <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e06c:	2900      	cmp	r1, #0
 801e06e:	f43f ac55 	beq.w	801d91c <tcp_input+0x2bc>
 801e072:	4b63      	ldr	r3, [pc, #396]	; (801e200 <tcp_input+0xba0>)
 801e074:	681a      	ldr	r2, [r3, #0]
 801e076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e078:	3b01      	subs	r3, #1
 801e07a:	4293      	cmp	r3, r2
 801e07c:	f47f ac4e 	bne.w	801d91c <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801e080:	4628      	mov	r0, r5
 801e082:	f000 ff95 	bl	801efb0 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801e086:	e449      	b.n	801d91c <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801e088:	f8d8 0000 	ldr.w	r0, [r8]
 801e08c:	f7fc fee4 	bl	801ae58 <pbuf_free>
            tcp_abort(pcb);
 801e090:	4628      	mov	r0, r5
 801e092:	f7fe f957 	bl	801c344 <tcp_abort>
            goto aborted;
 801e096:	e454      	b.n	801d942 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e098:	69ab      	ldr	r3, [r5, #24]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	f43f aaed 	beq.w	801d67a <tcp_input+0x1a>
 801e0a0:	4601      	mov	r1, r0
 801e0a2:	f04f 32ff 	mov.w	r2, #4294967295
 801e0a6:	6928      	ldr	r0, [r5, #16]
 801e0a8:	4798      	blx	r3
 801e0aa:	f7ff bae6 	b.w	801d67a <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801e0ae:	4633      	mov	r3, r6
 801e0b0:	4630      	mov	r0, r6
 801e0b2:	f8d8 2000 	ldr.w	r2, [r8]
 801e0b6:	4629      	mov	r1, r5
 801e0b8:	f7fe fb5a 	bl	801c770 <tcp_recv_null>
 801e0bc:	e6db      	b.n	801de76 <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801e0be:	2304      	movs	r3, #4
 801e0c0:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801e0c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d0e3      	beq.n	801e090 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e0c8:	699b      	ldr	r3, [r3, #24]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d05d      	beq.n	801e18a <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	4629      	mov	r1, r5
 801e0d2:	6928      	ldr	r0, [r5, #16]
 801e0d4:	4798      	blx	r3
          if (err != ERR_OK) {
 801e0d6:	2800      	cmp	r0, #0
 801e0d8:	d153      	bne.n	801e182 <tcp_input+0xb22>
          tcp_receive(pcb);
 801e0da:	4628      	mov	r0, r5
 801e0dc:	f7fe fd78 	bl	801cbd0 <tcp_receive>
          if (recv_acked != 0) {
 801e0e0:	f8bb 3000 	ldrh.w	r3, [fp]
 801e0e4:	b113      	cbz	r3, 801e0ec <tcp_input+0xa8c>
            recv_acked--;
 801e0e6:	3b01      	subs	r3, #1
 801e0e8:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e0ec:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801e0ee:	f241 131c 	movw	r3, #4380	; 0x111c
 801e0f2:	004a      	lsls	r2, r1, #1
 801e0f4:	0088      	lsls	r0, r1, #2
 801e0f6:	429a      	cmp	r2, r3
 801e0f8:	4616      	mov	r6, r2
 801e0fa:	bf38      	it	cc
 801e0fc:	461e      	movcc	r6, r3
 801e0fe:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801e102:	d959      	bls.n	801e1b8 <tcp_input+0xb58>
 801e104:	b283      	uxth	r3, r0
 801e106:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801e10a:	f89a 3000 	ldrb.w	r3, [sl]
 801e10e:	069b      	lsls	r3, r3, #26
 801e110:	f57f ac04 	bpl.w	801d91c <tcp_input+0x2bc>
 801e114:	e584      	b.n	801dc20 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801e116:	07d0      	lsls	r0, r2, #31
 801e118:	f57f ac72 	bpl.w	801da00 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801e11c:	4b39      	ldr	r3, [pc, #228]	; (801e204 <tcp_input+0xba4>)
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	622b      	str	r3, [r5, #32]
 801e122:	e46d      	b.n	801da00 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801e124:	4b38      	ldr	r3, [pc, #224]	; (801e208 <tcp_input+0xba8>)
 801e126:	f240 1215 	movw	r2, #277	; 0x115
 801e12a:	4938      	ldr	r1, [pc, #224]	; (801e20c <tcp_input+0xbac>)
 801e12c:	4838      	ldr	r0, [pc, #224]	; (801e210 <tcp_input+0xbb0>)
 801e12e:	f006 ff4d 	bl	8024fcc <iprintf>
 801e132:	f7ff bbb0 	b.w	801d896 <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801e136:	68ea      	ldr	r2, [r5, #12]
 801e138:	60da      	str	r2, [r3, #12]
 801e13a:	e64b      	b.n	801ddd4 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	f43f ae49 	beq.w	801ddd4 <tcp_input+0x774>
 801e142:	68da      	ldr	r2, [r3, #12]
 801e144:	42aa      	cmp	r2, r5
 801e146:	d0f6      	beq.n	801e136 <tcp_input+0xad6>
 801e148:	4613      	mov	r3, r2
 801e14a:	e7f7      	b.n	801e13c <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801e14c:	2100      	movs	r1, #0
 801e14e:	4648      	mov	r0, r9
 801e150:	f7fe f828 	bl	801c1a4 <tcp_abandon>
      return;
 801e154:	f7ff ba91 	b.w	801d67a <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801e158:	4b2b      	ldr	r3, [pc, #172]	; (801e208 <tcp_input+0xba8>)
 801e15a:	f240 120d 	movw	r2, #269	; 0x10d
 801e15e:	492d      	ldr	r1, [pc, #180]	; (801e214 <tcp_input+0xbb4>)
 801e160:	482b      	ldr	r0, [pc, #172]	; (801e210 <tcp_input+0xbb0>)
 801e162:	f006 ff33 	bl	8024fcc <iprintf>
      if (prev != NULL) {
 801e166:	f1b8 0f00 	cmp.w	r8, #0
 801e16a:	f43f ab90 	beq.w	801d88e <tcp_input+0x22e>
 801e16e:	68eb      	ldr	r3, [r5, #12]
 801e170:	f7ff bb87 	b.w	801d882 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e174:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801e178:	9b05      	ldr	r3, [sp, #20]
 801e17a:	f8cd 9000 	str.w	r9, [sp]
 801e17e:	881b      	ldrh	r3, [r3, #0]
 801e180:	e72d      	b.n	801dfde <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801e182:	300d      	adds	r0, #13
 801e184:	f43f abdd 	beq.w	801d942 <tcp_input+0x2e2>
 801e188:	e782      	b.n	801e090 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e18a:	4b1f      	ldr	r3, [pc, #124]	; (801e208 <tcp_input+0xba8>)
 801e18c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e190:	4921      	ldr	r1, [pc, #132]	; (801e218 <tcp_input+0xbb8>)
 801e192:	481f      	ldr	r0, [pc, #124]	; (801e210 <tcp_input+0xbb0>)
 801e194:	f006 ff1a 	bl	8024fcc <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e198:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e19a:	699b      	ldr	r3, [r3, #24]
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d196      	bne.n	801e0ce <tcp_input+0xa6e>
 801e1a0:	e776      	b.n	801e090 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e1a2:	2900      	cmp	r1, #0
 801e1a4:	f47f af03 	bne.w	801dfae <tcp_input+0x94e>
 801e1a8:	4b17      	ldr	r3, [pc, #92]	; (801e208 <tcp_input+0xba8>)
 801e1aa:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e1ae:	491b      	ldr	r1, [pc, #108]	; (801e21c <tcp_input+0xbbc>)
 801e1b0:	4817      	ldr	r0, [pc, #92]	; (801e210 <tcp_input+0xbb0>)
 801e1b2:	f006 ff0b 	bl	8024fcc <iprintf>
 801e1b6:	e6fa      	b.n	801dfae <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e1b8:	429a      	cmp	r2, r3
 801e1ba:	bf88      	it	hi
 801e1bc:	b293      	uxthhi	r3, r2
 801e1be:	e7a2      	b.n	801e106 <tcp_input+0xaa6>
          pcb->rtime = -1;
 801e1c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e1c4:	862b      	strh	r3, [r5, #48]	; 0x30
 801e1c6:	e6dd      	b.n	801df84 <tcp_input+0x924>
          rseg = pcb->unsent;
 801e1c8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e1ca:	b176      	cbz	r6, 801e1ea <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801e1cc:	6833      	ldr	r3, [r6, #0]
 801e1ce:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e1d0:	e6cd      	b.n	801df6e <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e1d2:	4b0d      	ldr	r3, [pc, #52]	; (801e208 <tcp_input+0xba8>)
 801e1d4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e1d8:	4911      	ldr	r1, [pc, #68]	; (801e220 <tcp_input+0xbc0>)
 801e1da:	480d      	ldr	r0, [pc, #52]	; (801e210 <tcp_input+0xbb0>)
 801e1dc:	f006 fef6 	bl	8024fcc <iprintf>
 801e1e0:	e6ba      	b.n	801df58 <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e1e2:	429a      	cmp	r2, r3
 801e1e4:	bf88      	it	hi
 801e1e6:	b293      	uxthhi	r3, r2
 801e1e8:	e6af      	b.n	801df4a <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e1ea:	4b07      	ldr	r3, [pc, #28]	; (801e208 <tcp_input+0xba8>)
 801e1ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e1f0:	490c      	ldr	r1, [pc, #48]	; (801e224 <tcp_input+0xbc4>)
 801e1f2:	4807      	ldr	r0, [pc, #28]	; (801e210 <tcp_input+0xbb0>)
 801e1f4:	f006 feea 	bl	8024fcc <iprintf>
 801e1f8:	e7e8      	b.n	801e1cc <tcp_input+0xb6c>
 801e1fa:	bf00      	nop
 801e1fc:	2002dbf0 	.word	0x2002dbf0
 801e200:	2002dc14 	.word	0x2002dc14
 801e204:	2002dbe4 	.word	0x2002dbe4
 801e208:	08043d8c 	.word	0x08043d8c
 801e20c:	08044078 	.word	0x08044078
 801e210:	0802bdc0 	.word	0x0802bdc0
 801e214:	0804404c 	.word	0x0804404c
 801e218:	08044120 	.word	0x08044120
 801e21c:	080440d4 	.word	0x080440d4
 801e220:	080440f4 	.word	0x080440f4
 801e224:	0804410c 	.word	0x0804410c

0801e228 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801e228:	4a02      	ldr	r2, [pc, #8]	; (801e234 <tcp_trigger_input_pcb_close+0xc>)
 801e22a:	7813      	ldrb	r3, [r2, #0]
 801e22c:	f043 0310 	orr.w	r3, r3, #16
 801e230:	7013      	strb	r3, [r2, #0]
}
 801e232:	4770      	bx	lr
 801e234:	2002dc10 	.word	0x2002dc10

0801e238 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e23c:	9f08      	ldr	r7, [sp, #32]
 801e23e:	4680      	mov	r8, r0
 801e240:	460d      	mov	r5, r1
 801e242:	4614      	mov	r4, r2
 801e244:	461e      	mov	r6, r3
 801e246:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e24a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e24e:	2f00      	cmp	r7, #0
 801e250:	d033      	beq.n	801e2ba <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801e252:	42a5      	cmp	r5, r4
 801e254:	d20e      	bcs.n	801e274 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e256:	f019 0f02 	tst.w	r9, #2
 801e25a:	d008      	beq.n	801e26e <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e25c:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801e260:	f021 0103 	bic.w	r1, r1, #3
 801e264:	428c      	cmp	r4, r1
 801e266:	bf28      	it	cs
 801e268:	460c      	movcs	r4, r1
 801e26a:	b2a1      	uxth	r1, r4
 801e26c:	e003      	b.n	801e276 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e26e:	8b7b      	ldrh	r3, [r7, #26]
 801e270:	065b      	lsls	r3, r3, #25
 801e272:	d518      	bpl.n	801e2a6 <tcp_pbuf_prealloc+0x6e>
 801e274:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e276:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e27a:	4640      	mov	r0, r8
 801e27c:	f7fc fc36 	bl	801aaec <pbuf_alloc>
  if (p == NULL) {
 801e280:	4604      	mov	r4, r0
 801e282:	b168      	cbz	r0, 801e2a0 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e284:	6803      	ldr	r3, [r0, #0]
 801e286:	b133      	cbz	r3, 801e296 <tcp_pbuf_prealloc+0x5e>
 801e288:	4b0f      	ldr	r3, [pc, #60]	; (801e2c8 <tcp_pbuf_prealloc+0x90>)
 801e28a:	f240 120b 	movw	r2, #267	; 0x10b
 801e28e:	490f      	ldr	r1, [pc, #60]	; (801e2cc <tcp_pbuf_prealloc+0x94>)
 801e290:	480f      	ldr	r0, [pc, #60]	; (801e2d0 <tcp_pbuf_prealloc+0x98>)
 801e292:	f006 fe9b 	bl	8024fcc <iprintf>
  *oversize = p->len - length;
 801e296:	8963      	ldrh	r3, [r4, #10]
 801e298:	1b5b      	subs	r3, r3, r5
 801e29a:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e29c:	8125      	strh	r5, [r4, #8]
 801e29e:	8165      	strh	r5, [r4, #10]
  return p;
}
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801e2a6:	f1ba 0f00 	cmp.w	sl, #0
 801e2aa:	d0d7      	beq.n	801e25c <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801e2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d1d4      	bne.n	801e25c <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801e2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d1d1      	bne.n	801e25c <tcp_pbuf_prealloc+0x24>
 801e2b8:	e7dc      	b.n	801e274 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e2ba:	4b03      	ldr	r3, [pc, #12]	; (801e2c8 <tcp_pbuf_prealloc+0x90>)
 801e2bc:	22e9      	movs	r2, #233	; 0xe9
 801e2be:	4905      	ldr	r1, [pc, #20]	; (801e2d4 <tcp_pbuf_prealloc+0x9c>)
 801e2c0:	4803      	ldr	r0, [pc, #12]	; (801e2d0 <tcp_pbuf_prealloc+0x98>)
 801e2c2:	f006 fe83 	bl	8024fcc <iprintf>
 801e2c6:	e7c4      	b.n	801e252 <tcp_pbuf_prealloc+0x1a>
 801e2c8:	0804415c 	.word	0x0804415c
 801e2cc:	080441b0 	.word	0x080441b0
 801e2d0:	0802bdc0 	.word	0x0802bdc0
 801e2d4:	08044190 	.word	0x08044190

0801e2d8 <tcp_create_segment>:
{
 801e2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2dc:	460e      	mov	r6, r1
 801e2de:	f89d a020 	ldrb.w	sl, [sp, #32]
 801e2e2:	4690      	mov	r8, r2
 801e2e4:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e2e6:	4607      	mov	r7, r0
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	d04c      	beq.n	801e386 <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e2ec:	2e00      	cmp	r6, #0
 801e2ee:	d052      	beq.n	801e396 <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e2f0:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e2f4:	22a8      	movs	r2, #168	; 0xa8
 801e2f6:	4931      	ldr	r1, [pc, #196]	; (801e3bc <tcp_create_segment+0xe4>)
 801e2f8:	2004      	movs	r0, #4
 801e2fa:	f7fc f87b 	bl	801a3f4 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e2fe:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e302:	4604      	mov	r4, r0
 801e304:	2800      	cmp	r0, #0
 801e306:	d054      	beq.n	801e3b2 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801e308:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801e30c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e30e:	8932      	ldrh	r2, [r6, #8]
 801e310:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801e314:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e316:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801e318:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e31a:	d32c      	bcc.n	801e376 <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801e31c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e320:	4630      	mov	r0, r6
 801e322:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801e324:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e326:	f7fc fcf3 	bl	801ad10 <pbuf_add_header>
 801e32a:	4606      	mov	r6, r0
 801e32c:	2800      	cmp	r0, #0
 801e32e:	d139      	bne.n	801e3a4 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e330:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e332:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e334:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e336:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e33a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e33e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e342:	f7fa fd69 	bl	8018e18 <lwip_htons>
 801e346:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e34a:	8b38      	ldrh	r0, [r7, #24]
 801e34c:	68e7      	ldr	r7, [r4, #12]
 801e34e:	f7fa fd63 	bl	8018e18 <lwip_htons>
 801e352:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e354:	4648      	mov	r0, r9
 801e356:	68e7      	ldr	r7, [r4, #12]
 801e358:	f7fa fd62 	bl	8018e20 <lwip_htonl>
 801e35c:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e35e:	ea45 0008 	orr.w	r0, r5, r8
 801e362:	68e7      	ldr	r7, [r4, #12]
 801e364:	f7fa fd58 	bl	8018e18 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801e368:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e36a:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801e36c:	749e      	strb	r6, [r3, #18]
 801e36e:	74de      	strb	r6, [r3, #19]
}
 801e370:	4620      	mov	r0, r4
 801e372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e376:	22b0      	movs	r2, #176	; 0xb0
 801e378:	4b10      	ldr	r3, [pc, #64]	; (801e3bc <tcp_create_segment+0xe4>)
 801e37a:	4911      	ldr	r1, [pc, #68]	; (801e3c0 <tcp_create_segment+0xe8>)
 801e37c:	4811      	ldr	r0, [pc, #68]	; (801e3c4 <tcp_create_segment+0xec>)
 801e37e:	f006 fe25 	bl	8024fcc <iprintf>
  seg->len = p->tot_len - optlen;
 801e382:	8932      	ldrh	r2, [r6, #8]
 801e384:	e7ca      	b.n	801e31c <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e386:	4b0d      	ldr	r3, [pc, #52]	; (801e3bc <tcp_create_segment+0xe4>)
 801e388:	22a3      	movs	r2, #163	; 0xa3
 801e38a:	490f      	ldr	r1, [pc, #60]	; (801e3c8 <tcp_create_segment+0xf0>)
 801e38c:	480d      	ldr	r0, [pc, #52]	; (801e3c4 <tcp_create_segment+0xec>)
 801e38e:	f006 fe1d 	bl	8024fcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e392:	2e00      	cmp	r6, #0
 801e394:	d1ac      	bne.n	801e2f0 <tcp_create_segment+0x18>
 801e396:	4b09      	ldr	r3, [pc, #36]	; (801e3bc <tcp_create_segment+0xe4>)
 801e398:	22a4      	movs	r2, #164	; 0xa4
 801e39a:	490c      	ldr	r1, [pc, #48]	; (801e3cc <tcp_create_segment+0xf4>)
 801e39c:	4809      	ldr	r0, [pc, #36]	; (801e3c4 <tcp_create_segment+0xec>)
 801e39e:	f006 fe15 	bl	8024fcc <iprintf>
 801e3a2:	e7a5      	b.n	801e2f0 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801e3a4:	4620      	mov	r0, r4
    return NULL;
 801e3a6:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801e3a8:	f7fd fac4 	bl	801b934 <tcp_seg_free>
}
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801e3b2:	4630      	mov	r0, r6
 801e3b4:	f7fc fd50 	bl	801ae58 <pbuf_free>
    return NULL;
 801e3b8:	e7da      	b.n	801e370 <tcp_create_segment+0x98>
 801e3ba:	bf00      	nop
 801e3bc:	0804415c 	.word	0x0804415c
 801e3c0:	08044208 	.word	0x08044208
 801e3c4:	0802bdc0 	.word	0x0802bdc0
 801e3c8:	080441c4 	.word	0x080441c4
 801e3cc:	080441e4 	.word	0x080441e4

0801e3d0 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e3d0:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e3d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e3d6:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e3d8:	4606      	mov	r6, r0
 801e3da:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e3dc:	2022      	movs	r0, #34	; 0x22
 801e3de:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e3e2:	461c      	mov	r4, r3
 801e3e4:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e3e8:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e3ec:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e3f0:	f7fc fb7c 	bl	801aaec <pbuf_alloc>
  if (p != NULL) {
 801e3f4:	4605      	mov	r5, r0
 801e3f6:	b300      	cbz	r0, 801e43a <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e3f8:	8943      	ldrh	r3, [r0, #10]
 801e3fa:	2b13      	cmp	r3, #19
 801e3fc:	d920      	bls.n	801e440 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801e3fe:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801e400:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801e402:	f7fa fd09 	bl	8018e18 <lwip_htons>
 801e406:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e408:	4650      	mov	r0, sl
 801e40a:	f7fa fd05 	bl	8018e18 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801e40e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801e410:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801e412:	4630      	mov	r0, r6
 801e414:	f7fa fd04 	bl	8018e20 <lwip_htonl>
 801e418:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e41a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801e41e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e420:	f7fa fcfa 	bl	8018e18 <lwip_htons>
 801e424:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801e426:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e428:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e42a:	f7fa fcf5 	bl	8018e18 <lwip_htons>
    tcphdr->chksum = 0;
 801e42e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801e430:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801e432:	7423      	strb	r3, [r4, #16]
 801e434:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801e436:	74a3      	strb	r3, [r4, #18]
 801e438:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801e43a:	4628      	mov	r0, r5
 801e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e440:	4b03      	ldr	r3, [pc, #12]	; (801e450 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801e442:	f240 7223 	movw	r2, #1827	; 0x723
 801e446:	4903      	ldr	r1, [pc, #12]	; (801e454 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801e448:	4803      	ldr	r0, [pc, #12]	; (801e458 <tcp_output_alloc_header_common.constprop.0+0x88>)
 801e44a:	f006 fdbf 	bl	8024fcc <iprintf>
 801e44e:	e7d6      	b.n	801e3fe <tcp_output_alloc_header_common.constprop.0+0x2e>
 801e450:	0804415c 	.word	0x0804415c
 801e454:	08044220 	.word	0x08044220
 801e458:	0802bdc0 	.word	0x0802bdc0

0801e45c <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e45c:	b570      	push	{r4, r5, r6, lr}
 801e45e:	460d      	mov	r5, r1
 801e460:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e462:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e464:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e466:	b190      	cbz	r0, 801e48e <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801e46a:	2210      	movs	r2, #16
 801e46c:	8b21      	ldrh	r1, [r4, #24]
 801e46e:	9302      	str	r3, [sp, #8]
 801e470:	e9cd 1200 	strd	r1, r2, [sp]
 801e474:	4632      	mov	r2, r6
 801e476:	4629      	mov	r1, r5
 801e478:	8ae3      	ldrh	r3, [r4, #22]
 801e47a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e47c:	f7ff ffa8 	bl	801e3d0 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e480:	b118      	cbz	r0, 801e48a <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e482:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e486:	4413      	add	r3, r2
 801e488:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801e48a:	b004      	add	sp, #16
 801e48c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e48e:	4b04      	ldr	r3, [pc, #16]	; (801e4a0 <tcp_output_alloc_header.constprop.0+0x44>)
 801e490:	f240 7242 	movw	r2, #1858	; 0x742
 801e494:	4903      	ldr	r1, [pc, #12]	; (801e4a4 <tcp_output_alloc_header.constprop.0+0x48>)
 801e496:	4804      	ldr	r0, [pc, #16]	; (801e4a8 <tcp_output_alloc_header.constprop.0+0x4c>)
 801e498:	f006 fd98 	bl	8024fcc <iprintf>
 801e49c:	e7e4      	b.n	801e468 <tcp_output_alloc_header.constprop.0+0xc>
 801e49e:	bf00      	nop
 801e4a0:	0804415c 	.word	0x0804415c
 801e4a4:	08044250 	.word	0x08044250
 801e4a8:	0802bdc0 	.word	0x0802bdc0

0801e4ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4b0:	4605      	mov	r5, r0
 801e4b2:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e4b4:	460c      	mov	r4, r1
{
 801e4b6:	4690      	mov	r8, r2
 801e4b8:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e4ba:	2900      	cmp	r1, #0
 801e4bc:	d034      	beq.n	801e528 <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e4be:	2d00      	cmp	r5, #0
 801e4c0:	d03a      	beq.n	801e538 <tcp_output_control_segment+0x8c>
 801e4c2:	7a28      	ldrb	r0, [r5, #8]
 801e4c4:	bb10      	cbnz	r0, 801e50c <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801e4c6:	4630      	mov	r0, r6
 801e4c8:	f004 f8b4 	bl	8022634 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801e4cc:	4607      	mov	r7, r0
 801e4ce:	b310      	cbz	r0, 801e516 <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e4d0:	9600      	str	r6, [sp, #0]
 801e4d2:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e4d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e4d8:	2106      	movs	r1, #6
 801e4da:	8922      	ldrh	r2, [r4, #8]
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f7fb fa2f 	bl	8019940 <ip_chksum_pseudo>
 801e4e2:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e4e6:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801e4e8:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e4ea:	9500      	str	r5, [sp, #0]
 801e4ec:	2506      	movs	r5, #6
 801e4ee:	4632      	mov	r2, r6
 801e4f0:	4641      	mov	r1, r8
 801e4f2:	9501      	str	r5, [sp, #4]
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	9702      	str	r7, [sp, #8]
 801e4f8:	f004 fa66 	bl	80229c8 <ip4_output_if>
 801e4fc:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e4fe:	4620      	mov	r0, r4
 801e500:	f7fc fcaa 	bl	801ae58 <pbuf_free>
  return err;
}
 801e504:	4628      	mov	r0, r5
 801e506:	b005      	add	sp, #20
 801e508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801e50c:	f7fc f99a 	bl	801a844 <netif_get_by_index>
  if (netif == NULL) {
 801e510:	4607      	mov	r7, r0
 801e512:	2800      	cmp	r0, #0
 801e514:	d1dc      	bne.n	801e4d0 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801e516:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801e51a:	4620      	mov	r0, r4
 801e51c:	f7fc fc9c 	bl	801ae58 <pbuf_free>
}
 801e520:	4628      	mov	r0, r5
 801e522:	b005      	add	sp, #20
 801e524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e528:	4b0d      	ldr	r3, [pc, #52]	; (801e560 <tcp_output_control_segment+0xb4>)
 801e52a:	f240 7287 	movw	r2, #1927	; 0x787
 801e52e:	490d      	ldr	r1, [pc, #52]	; (801e564 <tcp_output_control_segment+0xb8>)
 801e530:	480d      	ldr	r0, [pc, #52]	; (801e568 <tcp_output_control_segment+0xbc>)
 801e532:	f006 fd4b 	bl	8024fcc <iprintf>
 801e536:	e7c2      	b.n	801e4be <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801e538:	4630      	mov	r0, r6
 801e53a:	f004 f87b 	bl	8022634 <ip4_route>
  if (netif == NULL) {
 801e53e:	4607      	mov	r7, r0
 801e540:	2800      	cmp	r0, #0
 801e542:	d0e8      	beq.n	801e516 <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e544:	9600      	str	r6, [sp, #0]
 801e546:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e548:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e54c:	2106      	movs	r1, #6
 801e54e:	8922      	ldrh	r2, [r4, #8]
 801e550:	4620      	mov	r0, r4
 801e552:	f7fb f9f5 	bl	8019940 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801e556:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e558:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801e55c:	e7c5      	b.n	801e4ea <tcp_output_control_segment+0x3e>
 801e55e:	bf00      	nop
 801e560:	0804415c 	.word	0x0804415c
 801e564:	08044278 	.word	0x08044278
 801e568:	0802bdc0 	.word	0x0802bdc0

0801e56c <tcp_write>:
{
 801e56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801e570:	2400      	movs	r4, #0
{
 801e572:	b091      	sub	sp, #68	; 0x44
 801e574:	9107      	str	r1, [sp, #28]
 801e576:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801e578:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e57c:	2800      	cmp	r0, #0
 801e57e:	f000 82fc 	beq.w	801eb7a <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e582:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801e586:	4692      	mov	sl, r2
 801e588:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e58a:	4681      	mov	r9, r0
 801e58c:	085b      	lsrs	r3, r3, #1
 801e58e:	4293      	cmp	r3, r2
 801e590:	bf28      	it	cs
 801e592:	4613      	movcs	r3, r2
 801e594:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801e596:	2b00      	cmp	r3, #0
 801e598:	bf08      	it	eq
 801e59a:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e59c:	9b07      	ldr	r3, [sp, #28]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	f000 82df 	beq.w	801eb62 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801e5a4:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e5a6:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801e5a8:	2a02      	cmp	r2, #2
 801e5aa:	d902      	bls.n	801e5b2 <tcp_write+0x46>
 801e5ac:	2b07      	cmp	r3, #7
 801e5ae:	f040 829c 	bne.w	801eaea <tcp_write+0x57e>
  } else if (len == 0) {
 801e5b2:	f1ba 0f00 	cmp.w	sl, #0
 801e5b6:	f000 80ec 	beq.w	801e792 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801e5ba:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e5be:	4553      	cmp	r3, sl
 801e5c0:	f0c0 82b6 	bcc.w	801eb30 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e5c4:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e5c8:	2e08      	cmp	r6, #8
 801e5ca:	f200 82b1 	bhi.w	801eb30 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e5ce:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801e5d2:	2e00      	cmp	r6, #0
 801e5d4:	f000 80d3 	beq.w	801e77e <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	f040 80dc 	bne.w	801e796 <tcp_write+0x22a>
 801e5de:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e5e2:	f1b8 0f00 	cmp.w	r8, #0
 801e5e6:	f000 8263 	beq.w	801eab0 <tcp_write+0x544>
 801e5ea:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e5ec:	461a      	mov	r2, r3
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d1fb      	bne.n	801e5ec <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e5f4:	7a94      	ldrb	r4, [r2, #10]
 801e5f6:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e5f8:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e5fa:	00a4      	lsls	r4, r4, #2
 801e5fc:	920b      	str	r2, [sp, #44]	; 0x2c
 801e5fe:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e602:	191a      	adds	r2, r3, r4
 801e604:	4593      	cmp	fp, r2
 801e606:	f2c0 81a6 	blt.w	801e956 <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e60a:	ebab 0404 	sub.w	r4, fp, r4
 801e60e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801e610:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e614:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801e616:	930a      	str	r3, [sp, #40]	; 0x28
 801e618:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	f000 80cf 	beq.w	801e7c0 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e622:	42a3      	cmp	r3, r4
 801e624:	f200 818a 	bhi.w	801e93c <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e628:	45a2      	cmp	sl, r4
 801e62a:	4653      	mov	r3, sl
 801e62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e62e:	bf28      	it	cs
 801e630:	4623      	movcs	r3, r4
 801e632:	4293      	cmp	r3, r2
 801e634:	bf28      	it	cs
 801e636:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801e638:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801e63a:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e63c:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801e63e:	b292      	uxth	r2, r2
      space -= oversize_used;
 801e640:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801e642:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e646:	2a00      	cmp	r2, #0
 801e648:	f000 8183 	beq.w	801e952 <tcp_write+0x3e6>
 801e64c:	459a      	cmp	sl, r3
 801e64e:	f000 8180 	beq.w	801e952 <tcp_write+0x3e6>
 801e652:	4bb2      	ldr	r3, [pc, #712]	; (801e91c <tcp_write+0x3b0>)
 801e654:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e658:	49b1      	ldr	r1, [pc, #708]	; (801e920 <tcp_write+0x3b4>)
 801e65a:	48b2      	ldr	r0, [pc, #712]	; (801e924 <tcp_write+0x3b8>)
 801e65c:	f006 fcb6 	bl	8024fcc <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e662:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e664:	459a      	cmp	sl, r3
 801e666:	f200 80b0 	bhi.w	801e7ca <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801e66a:	2300      	movs	r3, #0
 801e66c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e66e:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801e670:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801e672:	45a2      	cmp	sl, r4
 801e674:	f240 80ee 	bls.w	801e854 <tcp_write+0x2e8>
 801e678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e67a:	f04f 0800 	mov.w	r8, #0
 801e67e:	f003 0301 	and.w	r3, r3, #1
 801e682:	f8cd 8014 	str.w	r8, [sp, #20]
 801e686:	9308      	str	r3, [sp, #32]
 801e688:	4643      	mov	r3, r8
 801e68a:	46d8      	mov	r8, fp
 801e68c:	469b      	mov	fp, r3
 801e68e:	e042      	b.n	801e716 <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e690:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e694:	2b00      	cmp	r3, #0
 801e696:	f040 80f0 	bne.w	801e87a <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e69a:	2201      	movs	r2, #1
 801e69c:	4629      	mov	r1, r5
 801e69e:	2036      	movs	r0, #54	; 0x36
 801e6a0:	f7fc fa24 	bl	801aaec <pbuf_alloc>
 801e6a4:	2800      	cmp	r0, #0
 801e6a6:	f000 8100 	beq.w	801e8aa <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e6aa:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e6ac:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e6ae:	9006      	str	r0, [sp, #24]
 801e6b0:	4422      	add	r2, r4
 801e6b2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e6b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e6b8:	2036      	movs	r0, #54	; 0x36
 801e6ba:	f7fc fa17 	bl	801aaec <pbuf_alloc>
 801e6be:	9b06      	ldr	r3, [sp, #24]
 801e6c0:	4607      	mov	r7, r0
 801e6c2:	2800      	cmp	r0, #0
 801e6c4:	f000 8195 	beq.w	801e9f2 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801e6c8:	4619      	mov	r1, r3
 801e6ca:	f7fc fbf7 	bl	801aebc <pbuf_cat>
    queuelen += pbuf_clen(p);
 801e6ce:	4638      	mov	r0, r7
 801e6d0:	f7fc fbd6 	bl	801ae80 <pbuf_clen>
 801e6d4:	4430      	add	r0, r6
 801e6d6:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e6d8:	2e09      	cmp	r6, #9
 801e6da:	d84a      	bhi.n	801e772 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e6dc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	4639      	mov	r1, r7
 801e6e4:	4648      	mov	r0, r9
 801e6e6:	4423      	add	r3, r4
 801e6e8:	9200      	str	r2, [sp, #0]
 801e6ea:	f7ff fdf5 	bl	801e2d8 <tcp_create_segment>
 801e6ee:	4607      	mov	r7, r0
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	f000 80da 	beq.w	801e8aa <tcp_write+0x33e>
    if (queue == NULL) {
 801e6f6:	9b05      	ldr	r3, [sp, #20]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	f000 80a3 	beq.w	801e844 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e6fe:	f1bb 0f00 	cmp.w	fp, #0
 801e702:	f000 80c2 	beq.w	801e88a <tcp_write+0x31e>
    pos += seglen;
 801e706:	442c      	add	r4, r5
      prev_seg->next = seg;
 801e708:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801e70c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e70e:	45a2      	cmp	sl, r4
 801e710:	f240 809e 	bls.w	801e850 <tcp_write+0x2e4>
 801e714:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801e716:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e71a:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e71c:	b2ad      	uxth	r5, r5
 801e71e:	4545      	cmp	r5, r8
 801e720:	bf28      	it	cs
 801e722:	4645      	movcs	r5, r8
 801e724:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e726:	2b00      	cmp	r3, #0
 801e728:	d0b2      	beq.n	801e690 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e72c:	4642      	mov	r2, r8
 801e72e:	4629      	mov	r1, r5
 801e730:	2036      	movs	r0, #54	; 0x36
 801e732:	e9cd 9300 	strd	r9, r3, [sp]
 801e736:	9b05      	ldr	r3, [sp, #20]
 801e738:	fab3 f383 	clz	r3, r3
 801e73c:	095b      	lsrs	r3, r3, #5
 801e73e:	9302      	str	r3, [sp, #8]
 801e740:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801e744:	f7ff fd78 	bl	801e238 <tcp_pbuf_prealloc>
 801e748:	4607      	mov	r7, r0
 801e74a:	2800      	cmp	r0, #0
 801e74c:	f000 80ad 	beq.w	801e8aa <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e750:	8943      	ldrh	r3, [r0, #10]
 801e752:	42ab      	cmp	r3, r5
 801e754:	f0c0 80a1 	bcc.w	801e89a <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e758:	9b07      	ldr	r3, [sp, #28]
 801e75a:	462a      	mov	r2, r5
 801e75c:	6878      	ldr	r0, [r7, #4]
 801e75e:	1919      	adds	r1, r3, r4
 801e760:	f005 fc70 	bl	8024044 <memcpy>
    queuelen += pbuf_clen(p);
 801e764:	4638      	mov	r0, r7
 801e766:	f7fc fb8b 	bl	801ae80 <pbuf_clen>
 801e76a:	4430      	add	r0, r6
 801e76c:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e76e:	2e09      	cmp	r6, #9
 801e770:	d9b4      	bls.n	801e6dc <tcp_write+0x170>
      pbuf_free(p);
 801e772:	4638      	mov	r0, r7
 801e774:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e778:	f7fc fb6e 	bl	801ae58 <pbuf_free>
      goto memerr;
 801e77c:	e097      	b.n	801e8ae <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e77e:	2b00      	cmp	r3, #0
 801e780:	f000 80b6 	beq.w	801e8f0 <tcp_write+0x384>
 801e784:	4b65      	ldr	r3, [pc, #404]	; (801e91c <tcp_write+0x3b0>)
 801e786:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801e78a:	4967      	ldr	r1, [pc, #412]	; (801e928 <tcp_write+0x3bc>)
 801e78c:	4865      	ldr	r0, [pc, #404]	; (801e924 <tcp_write+0x3b8>)
 801e78e:	f006 fc1d 	bl	8024fcc <iprintf>
  queuelen = pcb->snd_queuelen;
 801e792:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801e796:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e79a:	f1b8 0f00 	cmp.w	r8, #0
 801e79e:	f47f af24 	bne.w	801e5ea <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e7a2:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	f040 80ac 	bne.w	801e904 <tcp_write+0x398>
  while (pos < len) {
 801e7ac:	f1ba 0f00 	cmp.w	sl, #0
 801e7b0:	f000 81c7 	beq.w	801eb42 <tcp_write+0x5d6>
          extendlen = seglen;
 801e7b4:	2400      	movs	r4, #0
 801e7b6:	940d      	str	r4, [sp, #52]	; 0x34
 801e7b8:	940c      	str	r4, [sp, #48]	; 0x30
 801e7ba:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801e7be:	e75b      	b.n	801e678 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e7c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7c4:	459a      	cmp	sl, r3
 801e7c6:	f67f af50 	bls.w	801e66a <tcp_write+0xfe>
 801e7ca:	2c00      	cmp	r4, #0
 801e7cc:	f43f af4d 	beq.w	801e66a <tcp_write+0xfe>
 801e7d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7d2:	8912      	ldrh	r2, [r2, #8]
 801e7d4:	920d      	str	r2, [sp, #52]	; 0x34
 801e7d6:	2a00      	cmp	r2, #0
 801e7d8:	f000 809c 	beq.w	801e914 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e7dc:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e7e2:	42a7      	cmp	r7, r4
 801e7e4:	bfa8      	it	ge
 801e7e6:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e7e8:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e7ea:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e7ec:	f100 8187 	bmi.w	801eafe <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7f2:	685a      	ldr	r2, [r3, #4]
 801e7f4:	4613      	mov	r3, r2
 801e7f6:	6812      	ldr	r2, [r2, #0]
 801e7f8:	2a00      	cmp	r2, #0
 801e7fa:	d1fb      	bne.n	801e7f4 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e7fc:	920c      	str	r2, [sp, #48]	; 0x30
 801e7fe:	7b1a      	ldrb	r2, [r3, #12]
 801e800:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801e804:	d106      	bne.n	801e814 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e806:	895a      	ldrh	r2, [r3, #10]
 801e808:	685b      	ldr	r3, [r3, #4]
 801e80a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e80c:	9a07      	ldr	r2, [sp, #28]
 801e80e:	429a      	cmp	r2, r3
 801e810:	f000 8167 	beq.w	801eae2 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e814:	2201      	movs	r2, #1
 801e816:	4629      	mov	r1, r5
 801e818:	2000      	movs	r0, #0
 801e81a:	f7fc f967 	bl	801aaec <pbuf_alloc>
 801e81e:	900c      	str	r0, [sp, #48]	; 0x30
 801e820:	2800      	cmp	r0, #0
 801e822:	f000 813e 	beq.w	801eaa2 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e826:	9b07      	ldr	r3, [sp, #28]
 801e828:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e82a:	440b      	add	r3, r1
 801e82c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801e82e:	f7fc fb27 	bl	801ae80 <pbuf_clen>
 801e832:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801e834:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801e836:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801e838:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e83c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e83e:	18ec      	adds	r4, r5, r3
 801e840:	b2a4      	uxth	r4, r4
 801e842:	e716      	b.n	801e672 <tcp_write+0x106>
    pos += seglen;
 801e844:	442c      	add	r4, r5
 801e846:	9005      	str	r0, [sp, #20]
 801e848:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e84a:	45a2      	cmp	sl, r4
 801e84c:	f63f af62 	bhi.w	801e714 <tcp_write+0x1a8>
 801e850:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801e854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e856:	2b00      	cmp	r3, #0
 801e858:	f000 80db 	beq.w	801ea12 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801e85c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e85e:	6854      	ldr	r4, [r2, #4]
 801e860:	2c00      	cmp	r4, #0
 801e862:	f000 8090 	beq.w	801e986 <tcp_write+0x41a>
 801e866:	469b      	mov	fp, r3
 801e868:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801e86a:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801e86c:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801e86e:	445b      	add	r3, fp
 801e870:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801e872:	2a00      	cmp	r2, #0
 801e874:	d079      	beq.n	801e96a <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801e876:	4614      	mov	r4, r2
 801e878:	e7f7      	b.n	801e86a <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e87a:	4b28      	ldr	r3, [pc, #160]	; (801e91c <tcp_write+0x3b0>)
 801e87c:	f240 2271 	movw	r2, #625	; 0x271
 801e880:	492a      	ldr	r1, [pc, #168]	; (801e92c <tcp_write+0x3c0>)
 801e882:	4828      	ldr	r0, [pc, #160]	; (801e924 <tcp_write+0x3b8>)
 801e884:	f006 fba2 	bl	8024fcc <iprintf>
 801e888:	e707      	b.n	801e69a <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e88a:	4b24      	ldr	r3, [pc, #144]	; (801e91c <tcp_write+0x3b0>)
 801e88c:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e890:	4927      	ldr	r1, [pc, #156]	; (801e930 <tcp_write+0x3c4>)
 801e892:	4824      	ldr	r0, [pc, #144]	; (801e924 <tcp_write+0x3b8>)
 801e894:	f006 fb9a 	bl	8024fcc <iprintf>
 801e898:	e735      	b.n	801e706 <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e89a:	4b20      	ldr	r3, [pc, #128]	; (801e91c <tcp_write+0x3b0>)
 801e89c:	f240 2266 	movw	r2, #614	; 0x266
 801e8a0:	4924      	ldr	r1, [pc, #144]	; (801e934 <tcp_write+0x3c8>)
 801e8a2:	4820      	ldr	r0, [pc, #128]	; (801e924 <tcp_write+0x3b8>)
 801e8a4:	f006 fb92 	bl	8024fcc <iprintf>
 801e8a8:	e756      	b.n	801e758 <tcp_write+0x1ec>
 801e8aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e8ae:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801e8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8b6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801e8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8bc:	b113      	cbz	r3, 801e8c4 <tcp_write+0x358>
    pbuf_free(concat_p);
 801e8be:	4618      	mov	r0, r3
 801e8c0:	f7fc faca 	bl	801ae58 <pbuf_free>
  if (queue != NULL) {
 801e8c4:	f1b8 0f00 	cmp.w	r8, #0
 801e8c8:	d002      	beq.n	801e8d0 <tcp_write+0x364>
    tcp_segs_free(queue);
 801e8ca:	4640      	mov	r0, r8
 801e8cc:	f7fd f820 	bl	801b910 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801e8d0:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801e8d4:	b13b      	cbz	r3, 801e8e6 <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e8d6:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e8da:	b923      	cbnz	r3, 801e8e6 <tcp_write+0x37a>
 801e8dc:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	f000 808c 	beq.w	801e9fe <tcp_write+0x492>
  return ERR_MEM;
 801e8e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e8ea:	b011      	add	sp, #68	; 0x44
 801e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e8f0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	f47f af45 	bne.w	801e784 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e8fa:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	f43f af58 	beq.w	801e7b4 <tcp_write+0x248>
 801e904:	4b05      	ldr	r3, [pc, #20]	; (801e91c <tcp_write+0x3b0>)
 801e906:	f240 224a 	movw	r2, #586	; 0x24a
 801e90a:	490b      	ldr	r1, [pc, #44]	; (801e938 <tcp_write+0x3cc>)
 801e90c:	4805      	ldr	r0, [pc, #20]	; (801e924 <tcp_write+0x3b8>)
 801e90e:	f006 fb5d 	bl	8024fcc <iprintf>
 801e912:	e74b      	b.n	801e7ac <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801e914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e918:	930c      	str	r3, [sp, #48]	; 0x30
 801e91a:	e6ad      	b.n	801e678 <tcp_write+0x10c>
 801e91c:	0804415c 	.word	0x0804415c
 801e920:	08044398 	.word	0x08044398
 801e924:	0802bdc0 	.word	0x0802bdc0
 801e928:	0804432c 	.word	0x0804432c
 801e92c:	08044454 	.word	0x08044454
 801e930:	08044464 	.word	0x08044464
 801e934:	08044414 	.word	0x08044414
 801e938:	080443e4 	.word	0x080443e4
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e93c:	4b94      	ldr	r3, [pc, #592]	; (801eb90 <tcp_write+0x624>)
 801e93e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801e942:	4994      	ldr	r1, [pc, #592]	; (801eb94 <tcp_write+0x628>)
 801e944:	4894      	ldr	r0, [pc, #592]	; (801eb98 <tcp_write+0x62c>)
 801e946:	f006 fb41 	bl	8024fcc <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e94a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e94e:	930a      	str	r3, [sp, #40]	; 0x28
 801e950:	e66a      	b.n	801e628 <tcp_write+0xbc>
 801e952:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e954:	e735      	b.n	801e7c2 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e956:	4b8e      	ldr	r3, [pc, #568]	; (801eb90 <tcp_write+0x624>)
 801e958:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e95c:	498f      	ldr	r1, [pc, #572]	; (801eb9c <tcp_write+0x630>)
 801e95e:	488e      	ldr	r0, [pc, #568]	; (801eb98 <tcp_write+0x62c>)
 801e960:	f006 fb34 	bl	8024fcc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e966:	891b      	ldrh	r3, [r3, #8]
 801e968:	e64f      	b.n	801e60a <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e96a:	8963      	ldrh	r3, [r4, #10]
 801e96c:	465a      	mov	r2, fp
 801e96e:	6860      	ldr	r0, [r4, #4]
 801e970:	4629      	mov	r1, r5
 801e972:	4418      	add	r0, r3
 801e974:	f005 fb66 	bl	8024044 <memcpy>
        p->len += oversize_used;
 801e978:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e97a:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801e97c:	445b      	add	r3, fp
 801e97e:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e980:	2a00      	cmp	r2, #0
 801e982:	f47f af78 	bne.w	801e876 <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801e986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e988:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e98a:	8913      	ldrh	r3, [r2, #8]
 801e98c:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801e98e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801e992:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801e994:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d061      	beq.n	801ea62 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801e99e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e9a2:	6860      	ldr	r0, [r4, #4]
 801e9a4:	4629      	mov	r1, r5
 801e9a6:	f7fc fa89 	bl	801aebc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e9aa:	892a      	ldrh	r2, [r5, #8]
 801e9ac:	8923      	ldrh	r3, [r4, #8]
 801e9ae:	4413      	add	r3, r2
 801e9b0:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801e9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9b4:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801e9b8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801e9bc:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801e9c0:	4453      	add	r3, sl
 801e9c2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e9c6:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e9ca:	eba3 0a0a 	sub.w	sl, r3, sl
 801e9ce:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801e9d2:	b11e      	cbz	r6, 801e9dc <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e9d4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d036      	beq.n	801ea4a <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e9dc:	b12f      	cbz	r7, 801e9ea <tcp_write+0x47e>
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	b11b      	cbz	r3, 801e9ea <tcp_write+0x47e>
 801e9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9e4:	f012 0502 	ands.w	r5, r2, #2
 801e9e8:	d025      	beq.n	801ea36 <tcp_write+0x4ca>
  return ERR_OK;
 801e9ea:	2000      	movs	r0, #0
}
 801e9ec:	b011      	add	sp, #68	; 0x44
 801e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e9f8:	f7fc fa2e 	bl	801ae58 <pbuf_free>
        goto memerr;
 801e9fc:	e757      	b.n	801e8ae <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e9fe:	4b64      	ldr	r3, [pc, #400]	; (801eb90 <tcp_write+0x624>)
 801ea00:	f240 3227 	movw	r2, #807	; 0x327
 801ea04:	4966      	ldr	r1, [pc, #408]	; (801eba0 <tcp_write+0x634>)
 801ea06:	4864      	ldr	r0, [pc, #400]	; (801eb98 <tcp_write+0x62c>)
 801ea08:	f006 fae0 	bl	8024fcc <iprintf>
  return ERR_MEM;
 801ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ea10:	e76b      	b.n	801e8ea <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801ea12:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea16:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801ea1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d051      	beq.n	801eac4 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ea20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d1bb      	bne.n	801e99e <tcp_write+0x432>
 801ea26:	4b5a      	ldr	r3, [pc, #360]	; (801eb90 <tcp_write+0x624>)
 801ea28:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801ea2c:	495d      	ldr	r1, [pc, #372]	; (801eba4 <tcp_write+0x638>)
 801ea2e:	485a      	ldr	r0, [pc, #360]	; (801eb98 <tcp_write+0x62c>)
 801ea30:	f006 facc 	bl	8024fcc <iprintf>
 801ea34:	e7b3      	b.n	801e99e <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ea36:	2008      	movs	r0, #8
 801ea38:	899c      	ldrh	r4, [r3, #12]
 801ea3a:	f7fa f9ed 	bl	8018e18 <lwip_htons>
 801ea3e:	4602      	mov	r2, r0
 801ea40:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801ea42:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ea44:	4314      	orrs	r4, r2
 801ea46:	819c      	strh	r4, [r3, #12]
 801ea48:	e74f      	b.n	801e8ea <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ea4a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d1c4      	bne.n	801e9dc <tcp_write+0x470>
 801ea52:	4b4f      	ldr	r3, [pc, #316]	; (801eb90 <tcp_write+0x624>)
 801ea54:	f240 3212 	movw	r2, #786	; 0x312
 801ea58:	4951      	ldr	r1, [pc, #324]	; (801eba0 <tcp_write+0x634>)
 801ea5a:	484f      	ldr	r0, [pc, #316]	; (801eb98 <tcp_write+0x62c>)
 801ea5c:	f006 fab6 	bl	8024fcc <iprintf>
 801ea60:	e7bc      	b.n	801e9dc <tcp_write+0x470>
  } else if (extendlen > 0) {
 801ea62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d0a4      	beq.n	801e9b2 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ea68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea6a:	6859      	ldr	r1, [r3, #4]
 801ea6c:	2900      	cmp	r1, #0
 801ea6e:	d02e      	beq.n	801eace <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ea70:	680a      	ldr	r2, [r1, #0]
 801ea72:	2a00      	cmp	r2, #0
 801ea74:	d07f      	beq.n	801eb76 <tcp_write+0x60a>
 801ea76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea78:	e000      	b.n	801ea7c <tcp_write+0x510>
 801ea7a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801ea7c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ea7e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801ea80:	4423      	add	r3, r4
 801ea82:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ea84:	4611      	mov	r1, r2
 801ea86:	2800      	cmp	r0, #0
 801ea88:	d1f7      	bne.n	801ea7a <tcp_write+0x50e>
    p->tot_len += extendlen;
 801ea8a:	8913      	ldrh	r3, [r2, #8]
 801ea8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ea8e:	440b      	add	r3, r1
 801ea90:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801ea92:	8953      	ldrh	r3, [r2, #10]
 801ea94:	440b      	add	r3, r1
 801ea96:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801ea98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ea9a:	8913      	ldrh	r3, [r2, #8]
 801ea9c:	440b      	add	r3, r1
 801ea9e:	8113      	strh	r3, [r2, #8]
 801eaa0:	e787      	b.n	801e9b2 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eaa2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801eaa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eaaa:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801eaae:	e70f      	b.n	801e8d0 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801eab0:	4b37      	ldr	r3, [pc, #220]	; (801eb90 <tcp_write+0x624>)
 801eab2:	f240 1255 	movw	r2, #341	; 0x155
 801eab6:	493c      	ldr	r1, [pc, #240]	; (801eba8 <tcp_write+0x63c>)
 801eab8:	4837      	ldr	r0, [pc, #220]	; (801eb98 <tcp_write+0x62c>)
 801eaba:	f006 fa87 	bl	8024fcc <iprintf>
  queuelen = pcb->snd_queuelen;
 801eabe:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801eac2:	e668      	b.n	801e796 <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801eac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eac6:	b19b      	cbz	r3, 801eaf0 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801eac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d1cc      	bne.n	801ea68 <tcp_write+0x4fc>
 801eace:	4b30      	ldr	r3, [pc, #192]	; (801eb90 <tcp_write+0x624>)
 801ead0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ead4:	4935      	ldr	r1, [pc, #212]	; (801ebac <tcp_write+0x640>)
 801ead6:	4830      	ldr	r0, [pc, #192]	; (801eb98 <tcp_write+0x62c>)
 801ead8:	f006 fa78 	bl	8024fcc <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801eadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eade:	6859      	ldr	r1, [r3, #4]
 801eae0:	e7c6      	b.n	801ea70 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801eae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eae4:	bba3      	cbnz	r3, 801eb50 <tcp_write+0x5e4>
          extendlen = seglen;
 801eae6:	950d      	str	r5, [sp, #52]	; 0x34
 801eae8:	e6a7      	b.n	801e83a <tcp_write+0x2ce>
    return ERR_CONN;
 801eaea:	f06f 000a 	mvn.w	r0, #10
 801eaee:	e6fc      	b.n	801e8ea <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801eaf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	f47f af5d 	bne.w	801e9b2 <tcp_write+0x446>
    pcb->unsent = queue;
 801eaf8:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801eafc:	e75c      	b.n	801e9b8 <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801eafe:	e9cd 9300 	strd	r9, r3, [sp]
 801eb02:	2301      	movs	r3, #1
 801eb04:	4622      	mov	r2, r4
 801eb06:	4629      	mov	r1, r5
 801eb08:	2000      	movs	r0, #0
 801eb0a:	9302      	str	r3, [sp, #8]
 801eb0c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801eb10:	f7ff fb92 	bl	801e238 <tcp_pbuf_prealloc>
 801eb14:	4603      	mov	r3, r0
 801eb16:	4604      	mov	r4, r0
 801eb18:	900c      	str	r0, [sp, #48]	; 0x30
 801eb1a:	2800      	cmp	r0, #0
 801eb1c:	d0c1      	beq.n	801eaa2 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801eb1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb20:	462a      	mov	r2, r5
 801eb22:	9907      	ldr	r1, [sp, #28]
 801eb24:	4401      	add	r1, r0
 801eb26:	6858      	ldr	r0, [r3, #4]
 801eb28:	f005 fa8c 	bl	8024044 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801eb2c:	4620      	mov	r0, r4
 801eb2e:	e67e      	b.n	801e82e <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eb30:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801eb34:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eb38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb3c:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801eb40:	e6d3      	b.n	801e8ea <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801eb42:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801eb46:	46d0      	mov	r8, sl
 801eb48:	4657      	mov	r7, sl
 801eb4a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801eb4e:	e7d3      	b.n	801eaf8 <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801eb50:	4b0f      	ldr	r3, [pc, #60]	; (801eb90 <tcp_write+0x624>)
 801eb52:	f240 2231 	movw	r2, #561	; 0x231
 801eb56:	4916      	ldr	r1, [pc, #88]	; (801ebb0 <tcp_write+0x644>)
 801eb58:	480f      	ldr	r0, [pc, #60]	; (801eb98 <tcp_write+0x62c>)
 801eb5a:	f006 fa37 	bl	8024fcc <iprintf>
          extendlen = seglen;
 801eb5e:	950d      	str	r5, [sp, #52]	; 0x34
 801eb60:	e66b      	b.n	801e83a <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801eb62:	4b0b      	ldr	r3, [pc, #44]	; (801eb90 <tcp_write+0x624>)
 801eb64:	f240 12ad 	movw	r2, #429	; 0x1ad
 801eb68:	4912      	ldr	r1, [pc, #72]	; (801ebb4 <tcp_write+0x648>)
 801eb6a:	480b      	ldr	r0, [pc, #44]	; (801eb98 <tcp_write+0x62c>)
 801eb6c:	f006 fa2e 	bl	8024fcc <iprintf>
 801eb70:	f06f 000f 	mvn.w	r0, #15
 801eb74:	e6b9      	b.n	801e8ea <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801eb76:	460a      	mov	r2, r1
 801eb78:	e787      	b.n	801ea8a <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801eb7a:	4b05      	ldr	r3, [pc, #20]	; (801eb90 <tcp_write+0x624>)
 801eb7c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801eb80:	490d      	ldr	r1, [pc, #52]	; (801ebb8 <tcp_write+0x64c>)
 801eb82:	4805      	ldr	r0, [pc, #20]	; (801eb98 <tcp_write+0x62c>)
 801eb84:	f006 fa22 	bl	8024fcc <iprintf>
 801eb88:	f06f 000f 	mvn.w	r0, #15
 801eb8c:	e6ad      	b.n	801e8ea <tcp_write+0x37e>
 801eb8e:	bf00      	nop
 801eb90:	0804415c 	.word	0x0804415c
 801eb94:	08044378 	.word	0x08044378
 801eb98:	0802bdc0 	.word	0x0802bdc0
 801eb9c:	08044360 	.word	0x08044360
 801eba0:	080444e8 	.word	0x080444e8
 801eba4:	08044478 	.word	0x08044478
 801eba8:	080442f0 	.word	0x080442f0
 801ebac:	080444b0 	.word	0x080444b0
 801ebb0:	080443b8 	.word	0x080443b8
 801ebb4:	080442bc 	.word	0x080442bc
 801ebb8:	080442a4 	.word	0x080442a4

0801ebbc <tcp_split_unsent_seg>:
{
 801ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ebc0:	4605      	mov	r5, r0
{
 801ebc2:	b083      	sub	sp, #12
 801ebc4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	f000 80a7 	beq.w	801ed1a <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801ebcc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801ebce:	b376      	cbz	r6, 801ec2e <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801ebd0:	2c00      	cmp	r4, #0
 801ebd2:	f000 80b3 	beq.w	801ed3c <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801ebd6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ebda:	45a1      	cmp	r9, r4
 801ebdc:	f240 8099 	bls.w	801ed12 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ebe0:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801ebe2:	42a3      	cmp	r3, r4
 801ebe4:	d328      	bcc.n	801ec38 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801ebe6:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801ebea:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ebee:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ebf2:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ebf4:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801ebf8:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ebfc:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ec00:	eb08 010b 	add.w	r1, r8, fp
 801ec04:	b289      	uxth	r1, r1
 801ec06:	f7fb ff71 	bl	801aaec <pbuf_alloc>
  if (p == NULL) {
 801ec0a:	4607      	mov	r7, r0
 801ec0c:	b178      	cbz	r0, 801ec2e <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801ec0e:	6870      	ldr	r0, [r6, #4]
 801ec10:	8932      	ldrh	r2, [r6, #8]
 801ec12:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ec14:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801ec16:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ec18:	4642      	mov	r2, r8
 801ec1a:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801ec1c:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ec1e:	b29b      	uxth	r3, r3
 801ec20:	f7fc f9be 	bl	801afa0 <pbuf_copy_partial>
 801ec24:	4540      	cmp	r0, r8
 801ec26:	d01d      	beq.n	801ec64 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801ec28:	4638      	mov	r0, r7
 801ec2a:	f7fc f915 	bl	801ae58 <pbuf_free>
  return ERR_MEM;
 801ec2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ec32:	b003      	add	sp, #12
 801ec34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ec38:	4b45      	ldr	r3, [pc, #276]	; (801ed50 <tcp_split_unsent_seg+0x194>)
 801ec3a:	f240 325b 	movw	r2, #859	; 0x35b
 801ec3e:	4945      	ldr	r1, [pc, #276]	; (801ed54 <tcp_split_unsent_seg+0x198>)
 801ec40:	4845      	ldr	r0, [pc, #276]	; (801ed58 <tcp_split_unsent_seg+0x19c>)
 801ec42:	f006 f9c3 	bl	8024fcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ec46:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ec4a:	f1b9 0f00 	cmp.w	r9, #0
 801ec4e:	d1ca      	bne.n	801ebe6 <tcp_split_unsent_seg+0x2a>
 801ec50:	4b3f      	ldr	r3, [pc, #252]	; (801ed50 <tcp_split_unsent_seg+0x194>)
 801ec52:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ec56:	4941      	ldr	r1, [pc, #260]	; (801ed5c <tcp_split_unsent_seg+0x1a0>)
 801ec58:	483f      	ldr	r0, [pc, #252]	; (801ed58 <tcp_split_unsent_seg+0x19c>)
 801ec5a:	f006 f9b7 	bl	8024fcc <iprintf>
  remainder = useg->len - split;
 801ec5e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ec62:	e7c0      	b.n	801ebe6 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ec64:	68f3      	ldr	r3, [r6, #12]
 801ec66:	8998      	ldrh	r0, [r3, #12]
 801ec68:	f7fa f8d6 	bl	8018e18 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801ec6c:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ec70:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801ec74:	d159      	bne.n	801ed2a <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ec76:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801ec7a:	f018 0f01 	tst.w	r8, #1
 801ec7e:	d003      	beq.n	801ec88 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801ec80:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801ec84:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801ec88:	68f3      	ldr	r3, [r6, #12]
 801ec8a:	6858      	ldr	r0, [r3, #4]
 801ec8c:	f7fa f8c8 	bl	8018e20 <lwip_htonl>
 801ec90:	f8cd a000 	str.w	sl, [sp]
 801ec94:	1823      	adds	r3, r4, r0
 801ec96:	465a      	mov	r2, fp
 801ec98:	4639      	mov	r1, r7
 801ec9a:	4628      	mov	r0, r5
 801ec9c:	f7ff fb1c 	bl	801e2d8 <tcp_create_segment>
  if (seg == NULL) {
 801eca0:	4682      	mov	sl, r0
 801eca2:	2800      	cmp	r0, #0
 801eca4:	d0c0      	beq.n	801ec28 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eca6:	6870      	ldr	r0, [r6, #4]
 801eca8:	eba4 0409 	sub.w	r4, r4, r9
 801ecac:	f7fc f8e8 	bl	801ae80 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ecb0:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ecb2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801ecb6:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ecb8:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ecba:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ecbc:	4610      	mov	r0, r2
 801ecbe:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ecc0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ecc4:	b289      	uxth	r1, r1
 801ecc6:	f7fb ffcb 	bl	801ac60 <pbuf_realloc>
  useg->len -= remainder;
 801ecca:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eccc:	4640      	mov	r0, r8
  useg->len -= remainder;
 801ecce:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ecd0:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801ecd2:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ecd4:	899c      	ldrh	r4, [r3, #12]
 801ecd6:	f7fa f89f 	bl	8018e18 <lwip_htons>
 801ecda:	68f3      	ldr	r3, [r6, #12]
 801ecdc:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ecde:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ece0:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ece2:	f7fc f8cd 	bl	801ae80 <pbuf_clen>
 801ece6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801ecea:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ecec:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ecf0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ecf4:	f7fc f8c4 	bl	801ae80 <pbuf_clen>
 801ecf8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801ecfc:	4418      	add	r0, r3
  seg->next = useg->next;
 801ecfe:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ed00:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801ed04:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801ed08:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801ed0c:	f8da 3000 	ldr.w	r3, [sl]
 801ed10:	b183      	cbz	r3, 801ed34 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801ed12:	2000      	movs	r0, #0
}
 801ed14:	b003      	add	sp, #12
 801ed16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ed1a:	4b0d      	ldr	r3, [pc, #52]	; (801ed50 <tcp_split_unsent_seg+0x194>)
 801ed1c:	f240 324b 	movw	r2, #843	; 0x34b
 801ed20:	490f      	ldr	r1, [pc, #60]	; (801ed60 <tcp_split_unsent_seg+0x1a4>)
 801ed22:	480d      	ldr	r0, [pc, #52]	; (801ed58 <tcp_split_unsent_seg+0x19c>)
 801ed24:	f006 f952 	bl	8024fcc <iprintf>
 801ed28:	e750      	b.n	801ebcc <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801ed2a:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801ed2e:	f04f 0b08 	mov.w	fp, #8
 801ed32:	e7a2      	b.n	801ec7a <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801ed34:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801ed36:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801ed3a:	e77a      	b.n	801ec32 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ed3c:	4b04      	ldr	r3, [pc, #16]	; (801ed50 <tcp_split_unsent_seg+0x194>)
 801ed3e:	f240 3253 	movw	r2, #851	; 0x353
 801ed42:	4908      	ldr	r1, [pc, #32]	; (801ed64 <tcp_split_unsent_seg+0x1a8>)
 801ed44:	4804      	ldr	r0, [pc, #16]	; (801ed58 <tcp_split_unsent_seg+0x19c>)
 801ed46:	f006 f941 	bl	8024fcc <iprintf>
    return ERR_VAL;
 801ed4a:	f06f 0005 	mvn.w	r0, #5
 801ed4e:	e770      	b.n	801ec32 <tcp_split_unsent_seg+0x76>
 801ed50:	0804415c 	.word	0x0804415c
 801ed54:	08044550 	.word	0x08044550
 801ed58:	0802bdc0 	.word	0x0802bdc0
 801ed5c:	08044560 	.word	0x08044560
 801ed60:	08044508 	.word	0x08044508
 801ed64:	0804452c 	.word	0x0804452c

0801ed68 <tcp_enqueue_flags>:
{
 801ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ed6c:	f011 0703 	ands.w	r7, r1, #3
{
 801ed70:	b082      	sub	sp, #8
 801ed72:	460d      	mov	r5, r1
 801ed74:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ed76:	d05e      	beq.n	801ee36 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ed78:	2c00      	cmp	r4, #0
 801ed7a:	d065      	beq.n	801ee48 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801ed7c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ed80:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801ed84:	d049      	beq.n	801ee1a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ed86:	2104      	movs	r1, #4
 801ed88:	2036      	movs	r0, #54	; 0x36
 801ed8a:	f7fb feaf 	bl	801aaec <pbuf_alloc>
 801ed8e:	4606      	mov	r6, r0
 801ed90:	2800      	cmp	r0, #0
 801ed92:	d049      	beq.n	801ee28 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ed94:	8943      	ldrh	r3, [r0, #10]
 801ed96:	2b03      	cmp	r3, #3
 801ed98:	d872      	bhi.n	801ee80 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801ed9a:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ed9e:	4b40      	ldr	r3, [pc, #256]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801eda0:	f240 4239 	movw	r2, #1081	; 0x439
 801eda4:	493f      	ldr	r1, [pc, #252]	; (801eea4 <tcp_enqueue_flags+0x13c>)
 801eda6:	4840      	ldr	r0, [pc, #256]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801eda8:	f006 f910 	bl	8024fcc <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801edac:	4631      	mov	r1, r6
 801edae:	f8cd 8000 	str.w	r8, [sp]
 801edb2:	462a      	mov	r2, r5
 801edb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801edb6:	4620      	mov	r0, r4
 801edb8:	f7ff fa8e 	bl	801e2d8 <tcp_create_segment>
 801edbc:	4606      	mov	r6, r0
 801edbe:	2800      	cmp	r0, #0
 801edc0:	d032      	beq.n	801ee28 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801edc2:	68c3      	ldr	r3, [r0, #12]
 801edc4:	079a      	lsls	r2, r3, #30
 801edc6:	d153      	bne.n	801ee70 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801edc8:	8933      	ldrh	r3, [r6, #8]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d144      	bne.n	801ee58 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801edce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d04b      	beq.n	801ee6c <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801edd4:	461a      	mov	r2, r3
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d1fb      	bne.n	801edd4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801eddc:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801edde:	2300      	movs	r3, #0
 801ede0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ede4:	b117      	cbz	r7, 801edec <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801ede6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801ede8:	3301      	adds	r3, #1
 801edea:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801edec:	07eb      	lsls	r3, r5, #31
 801edee:	d503      	bpl.n	801edf8 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801edf0:	8b63      	ldrh	r3, [r4, #26]
 801edf2:	f043 0320 	orr.w	r3, r3, #32
 801edf6:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801edf8:	6870      	ldr	r0, [r6, #4]
 801edfa:	f7fc f841 	bl	801ae80 <pbuf_clen>
 801edfe:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801ee02:	4418      	add	r0, r3
 801ee04:	b280      	uxth	r0, r0
 801ee06:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801ee0a:	b118      	cbz	r0, 801ee14 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ee0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801ee0e:	2800      	cmp	r0, #0
 801ee10:	d039      	beq.n	801ee86 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801ee12:	2000      	movs	r0, #0
}
 801ee14:	b002      	add	sp, #8
 801ee16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ee1a:	4641      	mov	r1, r8
 801ee1c:	2036      	movs	r0, #54	; 0x36
 801ee1e:	f7fb fe65 	bl	801aaec <pbuf_alloc>
 801ee22:	4606      	mov	r6, r0
 801ee24:	2800      	cmp	r0, #0
 801ee26:	d1c1      	bne.n	801edac <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ee28:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801ee2a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ee2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee32:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801ee34:	e7ee      	b.n	801ee14 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ee36:	4b1a      	ldr	r3, [pc, #104]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801ee38:	f240 4211 	movw	r2, #1041	; 0x411
 801ee3c:	491b      	ldr	r1, [pc, #108]	; (801eeac <tcp_enqueue_flags+0x144>)
 801ee3e:	481a      	ldr	r0, [pc, #104]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801ee40:	f006 f8c4 	bl	8024fcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ee44:	2c00      	cmp	r4, #0
 801ee46:	d199      	bne.n	801ed7c <tcp_enqueue_flags+0x14>
 801ee48:	4b15      	ldr	r3, [pc, #84]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801ee4a:	f240 4213 	movw	r2, #1043	; 0x413
 801ee4e:	4918      	ldr	r1, [pc, #96]	; (801eeb0 <tcp_enqueue_flags+0x148>)
 801ee50:	4815      	ldr	r0, [pc, #84]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801ee52:	f006 f8bb 	bl	8024fcc <iprintf>
 801ee56:	e791      	b.n	801ed7c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ee58:	4b11      	ldr	r3, [pc, #68]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801ee5a:	f240 4243 	movw	r2, #1091	; 0x443
 801ee5e:	4915      	ldr	r1, [pc, #84]	; (801eeb4 <tcp_enqueue_flags+0x14c>)
 801ee60:	4811      	ldr	r0, [pc, #68]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801ee62:	f006 f8b3 	bl	8024fcc <iprintf>
  if (pcb->unsent == NULL) {
 801ee66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d1b3      	bne.n	801edd4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801ee6c:	66e6      	str	r6, [r4, #108]	; 0x6c
 801ee6e:	e7b6      	b.n	801edde <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ee70:	4b0b      	ldr	r3, [pc, #44]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801ee72:	f240 4242 	movw	r2, #1090	; 0x442
 801ee76:	4910      	ldr	r1, [pc, #64]	; (801eeb8 <tcp_enqueue_flags+0x150>)
 801ee78:	480b      	ldr	r0, [pc, #44]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801ee7a:	f006 f8a7 	bl	8024fcc <iprintf>
 801ee7e:	e7a3      	b.n	801edc8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801ee80:	f04f 0801 	mov.w	r8, #1
 801ee84:	e792      	b.n	801edac <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ee86:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801ee88:	2c00      	cmp	r4, #0
 801ee8a:	d1c3      	bne.n	801ee14 <tcp_enqueue_flags+0xac>
 801ee8c:	4b04      	ldr	r3, [pc, #16]	; (801eea0 <tcp_enqueue_flags+0x138>)
 801ee8e:	f240 4265 	movw	r2, #1125	; 0x465
 801ee92:	490a      	ldr	r1, [pc, #40]	; (801eebc <tcp_enqueue_flags+0x154>)
 801ee94:	4804      	ldr	r0, [pc, #16]	; (801eea8 <tcp_enqueue_flags+0x140>)
 801ee96:	f006 f899 	bl	8024fcc <iprintf>
  return ERR_OK;
 801ee9a:	4620      	mov	r0, r4
 801ee9c:	e7ba      	b.n	801ee14 <tcp_enqueue_flags+0xac>
 801ee9e:	bf00      	nop
 801eea0:	0804415c 	.word	0x0804415c
 801eea4:	080445e8 	.word	0x080445e8
 801eea8:	0802bdc0 	.word	0x0802bdc0
 801eeac:	08044570 	.word	0x08044570
 801eeb0:	080445c8 	.word	0x080445c8
 801eeb4:	0804463c 	.word	0x0804463c
 801eeb8:	08044624 	.word	0x08044624
 801eebc:	08044668 	.word	0x08044668

0801eec0 <tcp_send_fin>:
{
 801eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801eec2:	4606      	mov	r6, r0
 801eec4:	b188      	cbz	r0, 801eeea <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801eec6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801eec8:	b14c      	cbz	r4, 801eede <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eeca:	4625      	mov	r5, r4
 801eecc:	6824      	ldr	r4, [r4, #0]
 801eece:	2c00      	cmp	r4, #0
 801eed0:	d1fb      	bne.n	801eeca <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801eed2:	68eb      	ldr	r3, [r5, #12]
 801eed4:	8998      	ldrh	r0, [r3, #12]
 801eed6:	f7f9 ff9f 	bl	8018e18 <lwip_htons>
 801eeda:	0743      	lsls	r3, r0, #29
 801eedc:	d00d      	beq.n	801eefa <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801eede:	4630      	mov	r0, r6
 801eee0:	2101      	movs	r1, #1
}
 801eee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801eee6:	f7ff bf3f 	b.w	801ed68 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801eeea:	4b0b      	ldr	r3, [pc, #44]	; (801ef18 <tcp_send_fin+0x58>)
 801eeec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801eef0:	490a      	ldr	r1, [pc, #40]	; (801ef1c <tcp_send_fin+0x5c>)
 801eef2:	480b      	ldr	r0, [pc, #44]	; (801ef20 <tcp_send_fin+0x60>)
 801eef4:	f006 f86a 	bl	8024fcc <iprintf>
 801eef8:	e7e5      	b.n	801eec6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801eefa:	68eb      	ldr	r3, [r5, #12]
 801eefc:	2001      	movs	r0, #1
 801eefe:	899f      	ldrh	r7, [r3, #12]
 801ef00:	f7f9 ff8a 	bl	8018e18 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ef04:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ef06:	4338      	orrs	r0, r7
 801ef08:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ef0a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ef0e:	8190      	strh	r0, [r2, #12]
}
 801ef10:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801ef12:	8373      	strh	r3, [r6, #26]
}
 801ef14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef16:	bf00      	nop
 801ef18:	0804415c 	.word	0x0804415c
 801ef1c:	08044690 	.word	0x08044690
 801ef20:	0802bdc0 	.word	0x0802bdc0

0801ef24 <tcp_rexmit_rto_prepare>:
{
 801ef24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ef26:	4605      	mov	r5, r0
 801ef28:	2800      	cmp	r0, #0
 801ef2a:	d032      	beq.n	801ef92 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801ef2c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801ef2e:	b132      	cbz	r2, 801ef3e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ef30:	6813      	ldr	r3, [r2, #0]
 801ef32:	4614      	mov	r4, r2
 801ef34:	b15b      	cbz	r3, 801ef4e <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801ef36:	6863      	ldr	r3, [r4, #4]
 801ef38:	7b9b      	ldrb	r3, [r3, #14]
 801ef3a:	2b01      	cmp	r3, #1
 801ef3c:	d003      	beq.n	801ef46 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801ef3e:	f06f 0305 	mvn.w	r3, #5
}
 801ef42:	4618      	mov	r0, r3
 801ef44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ef46:	6824      	ldr	r4, [r4, #0]
 801ef48:	6823      	ldr	r3, [r4, #0]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d1f3      	bne.n	801ef36 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801ef4e:	6863      	ldr	r3, [r4, #4]
 801ef50:	7b9b      	ldrb	r3, [r3, #14]
 801ef52:	2b01      	cmp	r3, #1
 801ef54:	d1f3      	bne.n	801ef3e <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801ef56:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801ef58:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801ef5a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801ef5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801ef60:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801ef62:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ef64:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801ef66:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ef6a:	6858      	ldr	r0, [r3, #4]
 801ef6c:	f7f9 ff58 	bl	8018e20 <lwip_htonl>
 801ef70:	68e3      	ldr	r3, [r4, #12]
 801ef72:	4606      	mov	r6, r0
 801ef74:	8924      	ldrh	r4, [r4, #8]
 801ef76:	8998      	ldrh	r0, [r3, #12]
 801ef78:	f7f9 ff4e 	bl	8018e18 <lwip_htons>
 801ef7c:	f010 0003 	ands.w	r0, r0, #3
 801ef80:	4426      	add	r6, r4
  return ERR_OK;
 801ef82:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ef84:	bf18      	it	ne
 801ef86:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801ef88:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ef8a:	4430      	add	r0, r6
 801ef8c:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801ef8e:	4618      	mov	r0, r3
 801ef90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ef92:	4b04      	ldr	r3, [pc, #16]	; (801efa4 <tcp_rexmit_rto_prepare+0x80>)
 801ef94:	f240 6263 	movw	r2, #1635	; 0x663
 801ef98:	4903      	ldr	r1, [pc, #12]	; (801efa8 <tcp_rexmit_rto_prepare+0x84>)
 801ef9a:	4804      	ldr	r0, [pc, #16]	; (801efac <tcp_rexmit_rto_prepare+0x88>)
 801ef9c:	f006 f816 	bl	8024fcc <iprintf>
 801efa0:	e7c4      	b.n	801ef2c <tcp_rexmit_rto_prepare+0x8>
 801efa2:	bf00      	nop
 801efa4:	0804415c 	.word	0x0804415c
 801efa8:	080446ac 	.word	0x080446ac
 801efac:	0802bdc0 	.word	0x0802bdc0

0801efb0 <tcp_rexmit>:
{
 801efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801efb2:	4607      	mov	r7, r0
 801efb4:	2800      	cmp	r0, #0
 801efb6:	d031      	beq.n	801f01c <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801efb8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801efba:	b34e      	cbz	r6, 801f010 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801efbc:	6873      	ldr	r3, [r6, #4]
 801efbe:	7b9b      	ldrb	r3, [r3, #14]
 801efc0:	2b01      	cmp	r3, #1
 801efc2:	d125      	bne.n	801f010 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801efc4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801efc6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801efca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801efcc:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801efce:	b91b      	cbnz	r3, 801efd8 <tcp_rexmit+0x28>
 801efd0:	e00f      	b.n	801eff2 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801efd2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801efd4:	682b      	ldr	r3, [r5, #0]
 801efd6:	b163      	cbz	r3, 801eff2 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801efd8:	68db      	ldr	r3, [r3, #12]
 801efda:	6858      	ldr	r0, [r3, #4]
 801efdc:	f7f9 ff20 	bl	8018e20 <lwip_htonl>
 801efe0:	68f3      	ldr	r3, [r6, #12]
 801efe2:	4604      	mov	r4, r0
 801efe4:	6858      	ldr	r0, [r3, #4]
 801efe6:	f7f9 ff1b 	bl	8018e20 <lwip_htonl>
 801efea:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801efec:	2c00      	cmp	r4, #0
 801efee:	dbf0      	blt.n	801efd2 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801eff0:	682b      	ldr	r3, [r5, #0]
 801eff2:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801eff4:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801eff6:	6833      	ldr	r3, [r6, #0]
 801eff8:	b16b      	cbz	r3, 801f016 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801effa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801effe:	2bff      	cmp	r3, #255	; 0xff
 801f000:	d002      	beq.n	801f008 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801f002:	3301      	adds	r3, #1
 801f004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801f008:	2300      	movs	r3, #0
  return ERR_OK;
 801f00a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801f00c:	637b      	str	r3, [r7, #52]	; 0x34
}
 801f00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801f010:	f06f 0005 	mvn.w	r0, #5
}
 801f014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801f016:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801f01a:	e7ee      	b.n	801effa <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f01c:	4b03      	ldr	r3, [pc, #12]	; (801f02c <tcp_rexmit+0x7c>)
 801f01e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f022:	4903      	ldr	r1, [pc, #12]	; (801f030 <tcp_rexmit+0x80>)
 801f024:	4803      	ldr	r0, [pc, #12]	; (801f034 <tcp_rexmit+0x84>)
 801f026:	f005 ffd1 	bl	8024fcc <iprintf>
 801f02a:	e7c5      	b.n	801efb8 <tcp_rexmit+0x8>
 801f02c:	0804415c 	.word	0x0804415c
 801f030:	080446d0 	.word	0x080446d0
 801f034:	0802bdc0 	.word	0x0802bdc0

0801f038 <tcp_rexmit_fast>:
{
 801f038:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f03a:	4604      	mov	r4, r0
 801f03c:	b340      	cbz	r0, 801f090 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f03e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f040:	b113      	cbz	r3, 801f048 <tcp_rexmit_fast+0x10>
 801f042:	8b63      	ldrh	r3, [r4, #26]
 801f044:	075b      	lsls	r3, r3, #29
 801f046:	d500      	bpl.n	801f04a <tcp_rexmit_fast+0x12>
}
 801f048:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f04a:	4620      	mov	r0, r4
 801f04c:	f7ff ffb0 	bl	801efb0 <tcp_rexmit>
 801f050:	2800      	cmp	r0, #0
 801f052:	d1f9      	bne.n	801f048 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f054:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801f058:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f05c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f05e:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f060:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f064:	bf28      	it	cs
 801f066:	4619      	movcs	r1, r3
 801f068:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f06a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f06e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f072:	d902      	bls.n	801f07a <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801f074:	b283      	uxth	r3, r0
 801f076:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801f07a:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f07c:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801f07e:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f082:	4413      	add	r3, r2
      pcb->rtime = 0;
 801f084:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f086:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f08a:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801f08c:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801f08e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f090:	4b03      	ldr	r3, [pc, #12]	; (801f0a0 <tcp_rexmit_fast+0x68>)
 801f092:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f096:	4903      	ldr	r1, [pc, #12]	; (801f0a4 <tcp_rexmit_fast+0x6c>)
 801f098:	4803      	ldr	r0, [pc, #12]	; (801f0a8 <tcp_rexmit_fast+0x70>)
 801f09a:	f005 ff97 	bl	8024fcc <iprintf>
 801f09e:	e7ce      	b.n	801f03e <tcp_rexmit_fast+0x6>
 801f0a0:	0804415c 	.word	0x0804415c
 801f0a4:	080446e8 	.word	0x080446e8
 801f0a8:	0802bdc0 	.word	0x0802bdc0

0801f0ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0b0:	b084      	sub	sp, #16
 801f0b2:	4607      	mov	r7, r0
 801f0b4:	460e      	mov	r6, r1
 801f0b6:	4615      	mov	r5, r2
 801f0b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f0bc:	461c      	mov	r4, r3
{
 801f0be:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f0c2:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f0c6:	b1fb      	cbz	r3, 801f108 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f0c8:	f1b8 0f00 	cmp.w	r8, #0
 801f0cc:	d026      	beq.n	801f11c <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f0ce:	4630      	mov	r0, r6
 801f0d0:	f7f9 fea6 	bl	8018e20 <lwip_htonl>
 801f0d4:	2114      	movs	r1, #20
 801f0d6:	4602      	mov	r2, r0
 801f0d8:	4628      	mov	r0, r5
 801f0da:	f246 0508 	movw	r5, #24584	; 0x6008
 801f0de:	464b      	mov	r3, r9
 801f0e0:	f8cd a000 	str.w	sl, [sp]
 801f0e4:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801f0e8:	2100      	movs	r1, #0
 801f0ea:	f7ff f971 	bl	801e3d0 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f0ee:	4601      	mov	r1, r0
 801f0f0:	b138      	cbz	r0, 801f102 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f0f2:	4643      	mov	r3, r8
 801f0f4:	4622      	mov	r2, r4
 801f0f6:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f0f8:	b004      	add	sp, #16
 801f0fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f0fe:	f7ff b9d5 	b.w	801e4ac <tcp_output_control_segment>
}
 801f102:	b004      	add	sp, #16
 801f104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f108:	4b08      	ldr	r3, [pc, #32]	; (801f12c <tcp_rst+0x80>)
 801f10a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f10e:	4908      	ldr	r1, [pc, #32]	; (801f130 <tcp_rst+0x84>)
 801f110:	4808      	ldr	r0, [pc, #32]	; (801f134 <tcp_rst+0x88>)
 801f112:	f005 ff5b 	bl	8024fcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f116:	f1b8 0f00 	cmp.w	r8, #0
 801f11a:	d1d8      	bne.n	801f0ce <tcp_rst+0x22>
 801f11c:	4b03      	ldr	r3, [pc, #12]	; (801f12c <tcp_rst+0x80>)
 801f11e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f122:	4905      	ldr	r1, [pc, #20]	; (801f138 <tcp_rst+0x8c>)
 801f124:	4803      	ldr	r0, [pc, #12]	; (801f134 <tcp_rst+0x88>)
 801f126:	f005 ff51 	bl	8024fcc <iprintf>
 801f12a:	e7d0      	b.n	801f0ce <tcp_rst+0x22>
 801f12c:	0804415c 	.word	0x0804415c
 801f130:	08044708 	.word	0x08044708
 801f134:	0802bdc0 	.word	0x0802bdc0
 801f138:	08044724 	.word	0x08044724

0801f13c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f13c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f13e:	4604      	mov	r4, r0
 801f140:	b1c0      	cbz	r0, 801f174 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f142:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f144:	f7f9 fe6c 	bl	8018e20 <lwip_htonl>
 801f148:	2100      	movs	r1, #0
 801f14a:	4602      	mov	r2, r0
 801f14c:	4620      	mov	r0, r4
 801f14e:	f7ff f985 	bl	801e45c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f152:	4601      	mov	r1, r0
 801f154:	b1b0      	cbz	r0, 801f184 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f156:	1d23      	adds	r3, r4, #4
 801f158:	4622      	mov	r2, r4
 801f15a:	4620      	mov	r0, r4
 801f15c:	f7ff f9a6 	bl	801e4ac <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f160:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801f162:	b118      	cbz	r0, 801f16c <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f164:	f043 0303 	orr.w	r3, r3, #3
 801f168:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801f16a:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f16c:	f023 0303 	bic.w	r3, r3, #3
 801f170:	8363      	strh	r3, [r4, #26]
}
 801f172:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f174:	4b07      	ldr	r3, [pc, #28]	; (801f194 <tcp_send_empty_ack+0x58>)
 801f176:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f17a:	4907      	ldr	r1, [pc, #28]	; (801f198 <tcp_send_empty_ack+0x5c>)
 801f17c:	4807      	ldr	r0, [pc, #28]	; (801f19c <tcp_send_empty_ack+0x60>)
 801f17e:	f005 ff25 	bl	8024fcc <iprintf>
 801f182:	e7de      	b.n	801f142 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f184:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801f186:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f18a:	f043 0303 	orr.w	r3, r3, #3
 801f18e:	8363      	strh	r3, [r4, #26]
}
 801f190:	bd10      	pop	{r4, pc}
 801f192:	bf00      	nop
 801f194:	0804415c 	.word	0x0804415c
 801f198:	08044740 	.word	0x08044740
 801f19c:	0802bdc0 	.word	0x0802bdc0

0801f1a0 <tcp_output>:
{
 801f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f1a4:	4604      	mov	r4, r0
{
 801f1a6:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f1a8:	2800      	cmp	r0, #0
 801f1aa:	f000 81bc 	beq.w	801f526 <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f1ae:	7d23      	ldrb	r3, [r4, #20]
 801f1b0:	2b01      	cmp	r3, #1
 801f1b2:	f000 8173 	beq.w	801f49c <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801f1b6:	4bb3      	ldr	r3, [pc, #716]	; (801f484 <tcp_output+0x2e4>)
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	42a3      	cmp	r3, r4
 801f1bc:	f000 817a 	beq.w	801f4b4 <tcp_output+0x314>
  seg = pcb->unsent;
 801f1c0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f1c2:	b345      	cbz	r5, 801f216 <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f1c4:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801f1c6:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f1ca:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801f1ce:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f1d2:	2800      	cmp	r0, #0
 801f1d4:	f040 81af 	bne.w	801f536 <tcp_output+0x396>
    return ip_route(src, dst);
 801f1d8:	4648      	mov	r0, r9
 801f1da:	f003 fa2b 	bl	8022634 <ip4_route>
 801f1de:	4682      	mov	sl, r0
  if (netif == NULL) {
 801f1e0:	f1ba 0f00 	cmp.w	sl, #0
 801f1e4:	f000 81b9 	beq.w	801f55a <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801f1e8:	6823      	ldr	r3, [r4, #0]
 801f1ea:	b913      	cbnz	r3, 801f1f2 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801f1ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f1f0:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f1f2:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f1f4:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f1f6:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f1f8:	bf28      	it	cs
 801f1fa:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f1fc:	f7f9 fe10 	bl	8018e20 <lwip_htonl>
 801f200:	892b      	ldrh	r3, [r5, #8]
 801f202:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801f204:	1a9b      	subs	r3, r3, r2
 801f206:	4418      	add	r0, r3
 801f208:	42b8      	cmp	r0, r7
 801f20a:	d90f      	bls.n	801f22c <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f20c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801f210:	42bb      	cmp	r3, r7
 801f212:	f000 8159 	beq.w	801f4c8 <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801f216:	8b62      	ldrh	r2, [r4, #26]
 801f218:	0791      	lsls	r1, r2, #30
 801f21a:	f100 814f 	bmi.w	801f4bc <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f21e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801f222:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f224:	8362      	strh	r2, [r4, #26]
}
 801f226:	b005      	add	sp, #20
 801f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801f22c:	2300      	movs	r3, #0
 801f22e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801f232:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801f234:	2b00      	cmp	r3, #0
 801f236:	f000 8157 	beq.w	801f4e8 <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801f23a:	4698      	mov	r8, r3
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d1fb      	bne.n	801f23a <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801f242:	464e      	mov	r6, r9
 801f244:	e0b7      	b.n	801f3b6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f246:	68eb      	ldr	r3, [r5, #12]
 801f248:	2010      	movs	r0, #16
 801f24a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801f24e:	f7f9 fde3 	bl	8018e18 <lwip_htons>
 801f252:	ea49 0000 	orr.w	r0, r9, r0
 801f256:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f25a:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801f25e:	686b      	ldr	r3, [r5, #4]
 801f260:	7b9b      	ldrb	r3, [r3, #14]
 801f262:	2b01      	cmp	r3, #1
 801f264:	d160      	bne.n	801f328 <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f266:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f268:	f7f9 fdda 	bl	8018e20 <lwip_htonl>
 801f26c:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f270:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801f272:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f276:	f7f9 fdcf 	bl	8018e18 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f27a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801f27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f27e:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f282:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f284:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f288:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f28a:	7aab      	ldrb	r3, [r5, #10]
 801f28c:	07db      	lsls	r3, r3, #31
 801f28e:	f100 80d0 	bmi.w	801f432 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f292:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801f296:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	da01      	bge.n	801f2a2 <tcp_output+0x102>
    pcb->rtime = 0;
 801f29e:	2300      	movs	r3, #0
 801f2a0:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801f2a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	f000 80b9 	beq.w	801f41c <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f2aa:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801f2ac:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f2b0:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801f2b2:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f2b4:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801f2b8:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801f2ba:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f2be:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801f2c0:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801f2c2:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801f2c4:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801f2c6:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801f2c8:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801f2ca:	f889 c010 	strb.w	ip, [r9, #16]
 801f2ce:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f2d2:	7aab      	ldrb	r3, [r5, #10]
 801f2d4:	009b      	lsls	r3, r3, #2
 801f2d6:	f003 0304 	and.w	r3, r3, #4
 801f2da:	3314      	adds	r3, #20
 801f2dc:	444b      	add	r3, r9
 801f2de:	459b      	cmp	fp, r3
 801f2e0:	d00a      	beq.n	801f2f8 <tcp_output+0x158>
 801f2e2:	f240 621c 	movw	r2, #1564	; 0x61c
 801f2e6:	4b68      	ldr	r3, [pc, #416]	; (801f488 <tcp_output+0x2e8>)
 801f2e8:	4968      	ldr	r1, [pc, #416]	; (801f48c <tcp_output+0x2ec>)
 801f2ea:	4869      	ldr	r0, [pc, #420]	; (801f490 <tcp_output+0x2f0>)
 801f2ec:	f005 fe6e 	bl	8024fcc <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801f2f0:	6868      	ldr	r0, [r5, #4]
 801f2f2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f2f6:	8902      	ldrh	r2, [r0, #8]
 801f2f8:	4623      	mov	r3, r4
 801f2fa:	2106      	movs	r1, #6
 801f2fc:	9600      	str	r6, [sp, #0]
 801f2fe:	f7fa fb1f 	bl	8019940 <ip_chksum_pseudo>
 801f302:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f306:	6868      	ldr	r0, [r5, #4]
 801f308:	4632      	mov	r2, r6
 801f30a:	f8cd a008 	str.w	sl, [sp, #8]
 801f30e:	4621      	mov	r1, r4
 801f310:	7aa3      	ldrb	r3, [r4, #10]
 801f312:	9300      	str	r3, [sp, #0]
 801f314:	2306      	movs	r3, #6
 801f316:	9301      	str	r3, [sp, #4]
 801f318:	7ae3      	ldrb	r3, [r4, #11]
 801f31a:	f003 fb55 	bl	80229c8 <ip4_output_if>
    if (err != ERR_OK) {
 801f31e:	2800      	cmp	r0, #0
 801f320:	f040 8116 	bne.w	801f550 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f324:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801f328:	682b      	ldr	r3, [r5, #0]
 801f32a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f32c:	7d23      	ldrb	r3, [r4, #20]
 801f32e:	2b02      	cmp	r3, #2
 801f330:	d003      	beq.n	801f33a <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f332:	8b63      	ldrh	r3, [r4, #26]
 801f334:	f023 0303 	bic.w	r3, r3, #3
 801f338:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f33a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f33e:	f7f9 fd6f 	bl	8018e20 <lwip_htonl>
 801f342:	68eb      	ldr	r3, [r5, #12]
 801f344:	4681      	mov	r9, r0
 801f346:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801f34a:	8998      	ldrh	r0, [r3, #12]
 801f34c:	f7f9 fd64 	bl	8018e18 <lwip_htons>
 801f350:	f010 0003 	ands.w	r0, r0, #3
 801f354:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f356:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f358:	bf18      	it	ne
 801f35a:	2001      	movne	r0, #1
 801f35c:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801f35e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f362:	1a1b      	subs	r3, r3, r0
 801f364:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801f366:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801f368:	bfb8      	it	lt
 801f36a:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801f36c:	8998      	ldrh	r0, [r3, #12]
 801f36e:	f7f9 fd53 	bl	8018e18 <lwip_htons>
 801f372:	f010 0003 	ands.w	r0, r0, #3
 801f376:	bf18      	it	ne
 801f378:	2001      	movne	r0, #1
 801f37a:	eb10 0f09 	cmn.w	r0, r9
 801f37e:	d046      	beq.n	801f40e <tcp_output+0x26e>
      seg->next = NULL;
 801f380:	2300      	movs	r3, #0
 801f382:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801f384:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f386:	2b00      	cmp	r3, #0
 801f388:	d045      	beq.n	801f416 <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f38a:	68eb      	ldr	r3, [r5, #12]
 801f38c:	6858      	ldr	r0, [r3, #4]
 801f38e:	f7f9 fd47 	bl	8018e20 <lwip_htonl>
 801f392:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f396:	4681      	mov	r9, r0
 801f398:	6858      	ldr	r0, [r3, #4]
 801f39a:	f7f9 fd41 	bl	8018e20 <lwip_htonl>
 801f39e:	eba9 0000 	sub.w	r0, r9, r0
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	f2c0 80a2 	blt.w	801f4ec <tcp_output+0x34c>
          useg->next = seg;
 801f3a8:	f8c8 5000 	str.w	r5, [r8]
 801f3ac:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801f3ae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801f3b0:	2d00      	cmp	r5, #0
 801f3b2:	f000 80c4 	beq.w	801f53e <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f3b6:	68eb      	ldr	r3, [r5, #12]
 801f3b8:	6858      	ldr	r0, [r3, #4]
 801f3ba:	f7f9 fd31 	bl	8018e20 <lwip_htonl>
 801f3be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801f3c0:	1ac0      	subs	r0, r0, r3
 801f3c2:	892b      	ldrh	r3, [r5, #8]
 801f3c4:	4418      	add	r0, r3
  while (seg != NULL &&
 801f3c6:	42b8      	cmp	r0, r7
 801f3c8:	f200 80bb 	bhi.w	801f542 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801f3cc:	68eb      	ldr	r3, [r5, #12]
 801f3ce:	8998      	ldrh	r0, [r3, #12]
 801f3d0:	f7f9 fd22 	bl	8018e18 <lwip_htons>
 801f3d4:	0742      	lsls	r2, r0, #29
 801f3d6:	d412      	bmi.n	801f3fe <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f3d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f3da:	b14b      	cbz	r3, 801f3f0 <tcp_output+0x250>
 801f3dc:	8b63      	ldrh	r3, [r4, #26]
 801f3de:	f013 0f44 	tst.w	r3, #68	; 0x44
 801f3e2:	461a      	mov	r2, r3
 801f3e4:	d104      	bne.n	801f3f0 <tcp_output+0x250>
 801f3e6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f3e8:	2900      	cmp	r1, #0
 801f3ea:	d038      	beq.n	801f45e <tcp_output+0x2be>
 801f3ec:	6808      	ldr	r0, [r1, #0]
 801f3ee:	b388      	cbz	r0, 801f454 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801f3f0:	7d23      	ldrb	r3, [r4, #20]
 801f3f2:	2b02      	cmp	r3, #2
 801f3f4:	f47f af27 	bne.w	801f246 <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f3f8:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f3fc:	e72f      	b.n	801f25e <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801f3fe:	4b22      	ldr	r3, [pc, #136]	; (801f488 <tcp_output+0x2e8>)
 801f400:	f240 5236 	movw	r2, #1334	; 0x536
 801f404:	4923      	ldr	r1, [pc, #140]	; (801f494 <tcp_output+0x2f4>)
 801f406:	4822      	ldr	r0, [pc, #136]	; (801f490 <tcp_output+0x2f0>)
 801f408:	f005 fde0 	bl	8024fcc <iprintf>
 801f40c:	e7e4      	b.n	801f3d8 <tcp_output+0x238>
      tcp_seg_free(seg);
 801f40e:	4628      	mov	r0, r5
 801f410:	f7fc fa90 	bl	801b934 <tcp_seg_free>
 801f414:	e7cb      	b.n	801f3ae <tcp_output+0x20e>
        pcb->unacked = seg;
 801f416:	46a8      	mov	r8, r5
 801f418:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801f41a:	e7c8      	b.n	801f3ae <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801f41c:	4b1e      	ldr	r3, [pc, #120]	; (801f498 <tcp_output+0x2f8>)
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f422:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f426:	f7f9 fcfb 	bl	8018e20 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f42a:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f42e:	63a0      	str	r0, [r4, #56]	; 0x38
 801f430:	e73b      	b.n	801f2aa <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f432:	4632      	mov	r2, r6
 801f434:	4651      	mov	r1, sl
 801f436:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801f43a:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f43e:	f7fd fa75 	bl	801c92c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f442:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801f446:	f7f9 fceb 	bl	8018e20 <lwip_htonl>
 801f44a:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f44e:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f452:	e720      	b.n	801f296 <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f454:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f458:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801f45a:	4584      	cmp	ip, r0
 801f45c:	d2c8      	bcs.n	801f3f0 <tcp_output+0x250>
 801f45e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801f462:	2800      	cmp	r0, #0
 801f464:	d0c4      	beq.n	801f3f0 <tcp_output+0x250>
 801f466:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801f46a:	2808      	cmp	r0, #8
 801f46c:	d8c0      	bhi.n	801f3f0 <tcp_output+0x250>
 801f46e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801f472:	d1bd      	bne.n	801f3f0 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801f474:	2900      	cmp	r1, #0
 801f476:	f47f aed2 	bne.w	801f21e <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801f47a:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f47c:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801f47e:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801f482:	e6cc      	b.n	801f21e <tcp_output+0x7e>
 801f484:	2002dc18 	.word	0x2002dc18
 801f488:	0804415c 	.word	0x0804415c
 801f48c:	080447b8 	.word	0x080447b8
 801f490:	0802bdc0 	.word	0x0802bdc0
 801f494:	080447a0 	.word	0x080447a0
 801f498:	2002dbe4 	.word	0x2002dbe4
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f49c:	4b30      	ldr	r3, [pc, #192]	; (801f560 <tcp_output+0x3c0>)
 801f49e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f4a2:	4930      	ldr	r1, [pc, #192]	; (801f564 <tcp_output+0x3c4>)
 801f4a4:	4830      	ldr	r0, [pc, #192]	; (801f568 <tcp_output+0x3c8>)
 801f4a6:	f005 fd91 	bl	8024fcc <iprintf>
  if (tcp_input_pcb == pcb) {
 801f4aa:	4b30      	ldr	r3, [pc, #192]	; (801f56c <tcp_output+0x3cc>)
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	42a3      	cmp	r3, r4
 801f4b0:	f47f ae86 	bne.w	801f1c0 <tcp_output+0x20>
    return ERR_OK;
 801f4b4:	2000      	movs	r0, #0
}
 801f4b6:	b005      	add	sp, #20
 801f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801f4bc:	4620      	mov	r0, r4
}
 801f4be:	b005      	add	sp, #20
 801f4c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801f4c4:	f7ff be3a 	b.w	801f13c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f4c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	f47f aea3 	bne.w	801f216 <tcp_output+0x76>
 801f4d0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	f47f ae9e 	bne.w	801f216 <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801f4da:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801f4de:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801f4e2:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801f4e6:	e696      	b.n	801f216 <tcp_output+0x76>
 801f4e8:	4698      	mov	r8, r3
 801f4ea:	e6aa      	b.n	801f242 <tcp_output+0xa2>
          while (*cur_seg &&
 801f4ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f4ee:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801f4f2:	b92b      	cbnz	r3, 801f500 <tcp_output+0x360>
 801f4f4:	e013      	b.n	801f51e <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801f4f6:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801f4fa:	f8db 3000 	ldr.w	r3, [fp]
 801f4fe:	b173      	cbz	r3, 801f51e <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f500:	68db      	ldr	r3, [r3, #12]
 801f502:	6858      	ldr	r0, [r3, #4]
 801f504:	f7f9 fc8c 	bl	8018e20 <lwip_htonl>
 801f508:	68eb      	ldr	r3, [r5, #12]
 801f50a:	4681      	mov	r9, r0
 801f50c:	6858      	ldr	r0, [r3, #4]
 801f50e:	f7f9 fc87 	bl	8018e20 <lwip_htonl>
 801f512:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801f516:	2800      	cmp	r0, #0
 801f518:	dbed      	blt.n	801f4f6 <tcp_output+0x356>
          seg->next = (*cur_seg);
 801f51a:	f8db 3000 	ldr.w	r3, [fp]
 801f51e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801f520:	f8cb 5000 	str.w	r5, [fp]
 801f524:	e743      	b.n	801f3ae <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f526:	4b0e      	ldr	r3, [pc, #56]	; (801f560 <tcp_output+0x3c0>)
 801f528:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f52c:	4910      	ldr	r1, [pc, #64]	; (801f570 <tcp_output+0x3d0>)
 801f52e:	480e      	ldr	r0, [pc, #56]	; (801f568 <tcp_output+0x3c8>)
 801f530:	f005 fd4c 	bl	8024fcc <iprintf>
 801f534:	e63b      	b.n	801f1ae <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801f536:	f7fb f985 	bl	801a844 <netif_get_by_index>
 801f53a:	4682      	mov	sl, r0
 801f53c:	e650      	b.n	801f1e0 <tcp_output+0x40>
 801f53e:	8b63      	ldrh	r3, [r4, #26]
 801f540:	e79b      	b.n	801f47a <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f542:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801f544:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f546:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801f548:	2900      	cmp	r1, #0
 801f54a:	f47f ae68 	bne.w	801f21e <tcp_output+0x7e>
 801f54e:	e794      	b.n	801f47a <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f550:	8b63      	ldrh	r3, [r4, #26]
 801f552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f556:	8363      	strh	r3, [r4, #26]
      return err;
 801f558:	e665      	b.n	801f226 <tcp_output+0x86>
    return ERR_RTE;
 801f55a:	f06f 0003 	mvn.w	r0, #3
 801f55e:	e662      	b.n	801f226 <tcp_output+0x86>
 801f560:	0804415c 	.word	0x0804415c
 801f564:	08044778 	.word	0x08044778
 801f568:	0802bdc0 	.word	0x0802bdc0
 801f56c:	2002dc18 	.word	0x2002dc18
 801f570:	08044760 	.word	0x08044760

0801f574 <tcp_rexmit_rto_commit>:
{
 801f574:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f576:	4604      	mov	r4, r0
 801f578:	b158      	cbz	r0, 801f592 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801f57a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f57e:	2bff      	cmp	r3, #255	; 0xff
 801f580:	d002      	beq.n	801f588 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801f582:	3301      	adds	r3, #1
 801f584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f588:	4620      	mov	r0, r4
}
 801f58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f58e:	f7ff be07 	b.w	801f1a0 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f592:	4b04      	ldr	r3, [pc, #16]	; (801f5a4 <tcp_rexmit_rto_commit+0x30>)
 801f594:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f598:	4903      	ldr	r1, [pc, #12]	; (801f5a8 <tcp_rexmit_rto_commit+0x34>)
 801f59a:	4804      	ldr	r0, [pc, #16]	; (801f5ac <tcp_rexmit_rto_commit+0x38>)
 801f59c:	f005 fd16 	bl	8024fcc <iprintf>
 801f5a0:	e7eb      	b.n	801f57a <tcp_rexmit_rto_commit+0x6>
 801f5a2:	bf00      	nop
 801f5a4:	0804415c 	.word	0x0804415c
 801f5a8:	080447cc 	.word	0x080447cc
 801f5ac:	0802bdc0 	.word	0x0802bdc0

0801f5b0 <tcp_rexmit_rto>:
{
 801f5b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f5b2:	4604      	mov	r4, r0
 801f5b4:	b118      	cbz	r0, 801f5be <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f5b6:	f7ff fcb5 	bl	801ef24 <tcp_rexmit_rto_prepare>
 801f5ba:	b198      	cbz	r0, 801f5e4 <tcp_rexmit_rto+0x34>
}
 801f5bc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f5be:	4b0f      	ldr	r3, [pc, #60]	; (801f5fc <tcp_rexmit_rto+0x4c>)
 801f5c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f5c4:	490e      	ldr	r1, [pc, #56]	; (801f600 <tcp_rexmit_rto+0x50>)
 801f5c6:	480f      	ldr	r0, [pc, #60]	; (801f604 <tcp_rexmit_rto+0x54>)
 801f5c8:	f005 fd00 	bl	8024fcc <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f5cc:	4620      	mov	r0, r4
 801f5ce:	f7ff fca9 	bl	801ef24 <tcp_rexmit_rto_prepare>
 801f5d2:	2800      	cmp	r0, #0
 801f5d4:	d1f2      	bne.n	801f5bc <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f5d6:	4b09      	ldr	r3, [pc, #36]	; (801f5fc <tcp_rexmit_rto+0x4c>)
 801f5d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f5dc:	490a      	ldr	r1, [pc, #40]	; (801f608 <tcp_rexmit_rto+0x58>)
 801f5de:	4809      	ldr	r0, [pc, #36]	; (801f604 <tcp_rexmit_rto+0x54>)
 801f5e0:	f005 fcf4 	bl	8024fcc <iprintf>
  if (pcb->nrtx < 0xFF) {
 801f5e4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f5e8:	2bff      	cmp	r3, #255	; 0xff
 801f5ea:	d002      	beq.n	801f5f2 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801f5ec:	3301      	adds	r3, #1
 801f5ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f5f2:	4620      	mov	r0, r4
}
 801f5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f5f8:	f7ff bdd2 	b.w	801f1a0 <tcp_output>
 801f5fc:	0804415c 	.word	0x0804415c
 801f600:	080447f0 	.word	0x080447f0
 801f604:	0802bdc0 	.word	0x0802bdc0
 801f608:	080447cc 	.word	0x080447cc

0801f60c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f60c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f60e:	4604      	mov	r4, r0
 801f610:	b188      	cbz	r0, 801f636 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f612:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f614:	3801      	subs	r0, #1
 801f616:	f7f9 fc03 	bl	8018e20 <lwip_htonl>
 801f61a:	2100      	movs	r1, #0
 801f61c:	4602      	mov	r2, r0
 801f61e:	4620      	mov	r0, r4
 801f620:	f7fe ff1c 	bl	801e45c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f624:	4601      	mov	r1, r0
 801f626:	b170      	cbz	r0, 801f646 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f628:	1d23      	adds	r3, r4, #4
 801f62a:	4622      	mov	r2, r4
 801f62c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f632:	f7fe bf3b 	b.w	801e4ac <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f636:	4b05      	ldr	r3, [pc, #20]	; (801f64c <tcp_keepalive+0x40>)
 801f638:	f640 0224 	movw	r2, #2084	; 0x824
 801f63c:	4904      	ldr	r1, [pc, #16]	; (801f650 <tcp_keepalive+0x44>)
 801f63e:	4805      	ldr	r0, [pc, #20]	; (801f654 <tcp_keepalive+0x48>)
 801f640:	f005 fcc4 	bl	8024fcc <iprintf>
 801f644:	e7e5      	b.n	801f612 <tcp_keepalive+0x6>
}
 801f646:	f04f 30ff 	mov.w	r0, #4294967295
 801f64a:	bd10      	pop	{r4, pc}
 801f64c:	0804415c 	.word	0x0804415c
 801f650:	0804480c 	.word	0x0804480c
 801f654:	0802bdc0 	.word	0x0802bdc0

0801f658 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f65c:	4604      	mov	r4, r0
 801f65e:	2800      	cmp	r0, #0
 801f660:	d051      	beq.n	801f706 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f662:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f664:	2d00      	cmp	r5, #0
 801f666:	d04b      	beq.n	801f700 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f668:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801f66c:	2bff      	cmp	r3, #255	; 0xff
 801f66e:	d002      	beq.n	801f676 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801f670:	3301      	adds	r3, #1
 801f672:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f676:	68eb      	ldr	r3, [r5, #12]
 801f678:	8998      	ldrh	r0, [r3, #12]
 801f67a:	f7f9 fbcd 	bl	8018e18 <lwip_htons>
 801f67e:	07c3      	lsls	r3, r0, #31
 801f680:	d527      	bpl.n	801f6d2 <tcp_zero_window_probe+0x7a>
 801f682:	8929      	ldrh	r1, [r5, #8]
 801f684:	bb29      	cbnz	r1, 801f6d2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f686:	68eb      	ldr	r3, [r5, #12]
 801f688:	4620      	mov	r0, r4
 801f68a:	685a      	ldr	r2, [r3, #4]
 801f68c:	f7fe fee6 	bl	801e45c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f690:	4606      	mov	r6, r0
 801f692:	b388      	cbz	r0, 801f6f8 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f694:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f698:	2011      	movs	r0, #17
 801f69a:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801f69e:	f7f9 fbbb 	bl	8018e18 <lwip_htons>
 801f6a2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801f6a6:	4338      	orrs	r0, r7
 801f6a8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f6ac:	68eb      	ldr	r3, [r5, #12]
 801f6ae:	6858      	ldr	r0, [r3, #4]
 801f6b0:	f7f9 fbb6 	bl	8018e20 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f6b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f6b6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f6b8:	4622      	mov	r2, r4
 801f6ba:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f6bc:	1a1b      	subs	r3, r3, r0
 801f6be:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f6c0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801f6c4:	bfb8      	it	lt
 801f6c6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f6c8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f6ce:	f7fe beed 	b.w	801e4ac <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f6d2:	68eb      	ldr	r3, [r5, #12]
 801f6d4:	2101      	movs	r1, #1
 801f6d6:	4620      	mov	r0, r4
 801f6d8:	685a      	ldr	r2, [r3, #4]
 801f6da:	f7fe febf 	bl	801e45c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f6de:	4606      	mov	r6, r0
 801f6e0:	b150      	cbz	r0, 801f6f8 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f6e2:	6868      	ldr	r0, [r5, #4]
 801f6e4:	892a      	ldrh	r2, [r5, #8]
 801f6e6:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801f6e8:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f6ea:	1a9b      	subs	r3, r3, r2
 801f6ec:	2201      	movs	r2, #1
 801f6ee:	3114      	adds	r1, #20
 801f6f0:	b29b      	uxth	r3, r3
 801f6f2:	f7fb fc55 	bl	801afa0 <pbuf_copy_partial>
 801f6f6:	e7d9      	b.n	801f6ac <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801f6f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801f700:	4628      	mov	r0, r5
}
 801f702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f706:	4b04      	ldr	r3, [pc, #16]	; (801f718 <tcp_zero_window_probe+0xc0>)
 801f708:	f640 024f 	movw	r2, #2127	; 0x84f
 801f70c:	4903      	ldr	r1, [pc, #12]	; (801f71c <tcp_zero_window_probe+0xc4>)
 801f70e:	4804      	ldr	r0, [pc, #16]	; (801f720 <tcp_zero_window_probe+0xc8>)
 801f710:	f005 fc5c 	bl	8024fcc <iprintf>
 801f714:	e7a5      	b.n	801f662 <tcp_zero_window_probe+0xa>
 801f716:	bf00      	nop
 801f718:	0804415c 	.word	0x0804415c
 801f71c:	08044828 	.word	0x08044828
 801f720:	0802bdc0 	.word	0x0802bdc0

0801f724 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f724:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f726:	22bc      	movs	r2, #188	; 0xbc
{
 801f728:	b570      	push	{r4, r5, r6, lr}
 801f72a:	460e      	mov	r6, r1
 801f72c:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f72e:	4910      	ldr	r1, [pc, #64]	; (801f770 <sys_timeout_abs+0x4c>)
 801f730:	200c      	movs	r0, #12
{
 801f732:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f734:	f7fa fe5e 	bl	801a3f4 <memp_malloc_fn>
  if (timeout == NULL) {
 801f738:	b190      	cbz	r0, 801f760 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801f73a:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f73c:	490d      	ldr	r1, [pc, #52]	; (801f774 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801f73e:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801f740:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801f742:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801f746:	680b      	ldr	r3, [r1, #0]
 801f748:	b91b      	cbnz	r3, 801f752 <sys_timeout_abs+0x2e>
 801f74a:	e007      	b.n	801f75c <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f74c:	4619      	mov	r1, r3
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	b11b      	cbz	r3, 801f75a <sys_timeout_abs+0x36>
 801f752:	685a      	ldr	r2, [r3, #4]
 801f754:	1aa2      	subs	r2, r4, r2
 801f756:	2a00      	cmp	r2, #0
 801f758:	daf8      	bge.n	801f74c <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801f75a:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801f75c:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801f75e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f760:	4b03      	ldr	r3, [pc, #12]	; (801f770 <sys_timeout_abs+0x4c>)
 801f762:	22be      	movs	r2, #190	; 0xbe
 801f764:	4904      	ldr	r1, [pc, #16]	; (801f778 <sys_timeout_abs+0x54>)
 801f766:	4805      	ldr	r0, [pc, #20]	; (801f77c <sys_timeout_abs+0x58>)
}
 801f768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f76c:	f005 bc2e 	b.w	8024fcc <iprintf>
 801f770:	0804484c 	.word	0x0804484c
 801f774:	2002dc34 	.word	0x2002dc34
 801f778:	08044880 	.word	0x08044880
 801f77c:	0802bdc0 	.word	0x0802bdc0

0801f780 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f780:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f782:	6843      	ldr	r3, [r0, #4]
{
 801f784:	4604      	mov	r4, r0
  cyclic->handler();
 801f786:	4798      	blx	r3

  now = sys_now();
 801f788:	f7f4 fd9c 	bl	80142c4 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f78c:	4b09      	ldr	r3, [pc, #36]	; (801f7b4 <lwip_cyclic_timer+0x34>)
 801f78e:	6825      	ldr	r5, [r4, #0]
 801f790:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f792:	4909      	ldr	r1, [pc, #36]	; (801f7b8 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f794:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f796:	1a1a      	subs	r2, r3, r0
 801f798:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f79a:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f79c:	da04      	bge.n	801f7a8 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f79e:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f7a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f7a4:	f7ff bfbe 	b.w	801f724 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f7a8:	4618      	mov	r0, r3
}
 801f7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f7ae:	f7ff bfb9 	b.w	801f724 <sys_timeout_abs>
 801f7b2:	bf00      	nop
 801f7b4:	2002dc30 	.word	0x2002dc30
 801f7b8:	0801f781 	.word	0x0801f781

0801f7bc <tcpip_tcp_timer>:
{
 801f7bc:	b508      	push	{r3, lr}
  tcp_tmr();
 801f7be:	f7fd f887 	bl	801c8d0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f7c2:	4b09      	ldr	r3, [pc, #36]	; (801f7e8 <tcpip_tcp_timer+0x2c>)
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	b143      	cbz	r3, 801f7da <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f7c8:	f7f4 fd7c 	bl	80142c4 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f7cc:	2200      	movs	r2, #0
 801f7ce:	4907      	ldr	r1, [pc, #28]	; (801f7ec <tcpip_tcp_timer+0x30>)
 801f7d0:	30fa      	adds	r0, #250	; 0xfa
}
 801f7d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f7d6:	f7ff bfa5 	b.w	801f724 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f7da:	4b05      	ldr	r3, [pc, #20]	; (801f7f0 <tcpip_tcp_timer+0x34>)
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d1f2      	bne.n	801f7c8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801f7e2:	4a04      	ldr	r2, [pc, #16]	; (801f7f4 <tcpip_tcp_timer+0x38>)
 801f7e4:	6013      	str	r3, [r2, #0]
}
 801f7e6:	bd08      	pop	{r3, pc}
 801f7e8:	2002dbd4 	.word	0x2002dbd4
 801f7ec:	0801f7bd 	.word	0x0801f7bd
 801f7f0:	2002dbec 	.word	0x2002dbec
 801f7f4:	2002dc38 	.word	0x2002dc38

0801f7f8 <tcp_timer_needed>:
{
 801f7f8:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f7fa:	4b0b      	ldr	r3, [pc, #44]	; (801f828 <tcp_timer_needed+0x30>)
 801f7fc:	681a      	ldr	r2, [r3, #0]
 801f7fe:	b98a      	cbnz	r2, 801f824 <tcp_timer_needed+0x2c>
 801f800:	4a0a      	ldr	r2, [pc, #40]	; (801f82c <tcp_timer_needed+0x34>)
 801f802:	6812      	ldr	r2, [r2, #0]
 801f804:	b152      	cbz	r2, 801f81c <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801f806:	2201      	movs	r2, #1
 801f808:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f80a:	f7f4 fd5b 	bl	80142c4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f80e:	2200      	movs	r2, #0
 801f810:	4907      	ldr	r1, [pc, #28]	; (801f830 <tcp_timer_needed+0x38>)
 801f812:	30fa      	adds	r0, #250	; 0xfa
}
 801f814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f818:	f7ff bf84 	b.w	801f724 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f81c:	4a05      	ldr	r2, [pc, #20]	; (801f834 <tcp_timer_needed+0x3c>)
 801f81e:	6812      	ldr	r2, [r2, #0]
 801f820:	2a00      	cmp	r2, #0
 801f822:	d1f0      	bne.n	801f806 <tcp_timer_needed+0xe>
}
 801f824:	bd08      	pop	{r3, pc}
 801f826:	bf00      	nop
 801f828:	2002dc38 	.word	0x2002dc38
 801f82c:	2002dbd4 	.word	0x2002dbd4
 801f830:	0801f7bd 	.word	0x0801f7bd
 801f834:	2002dbec 	.word	0x2002dbec

0801f838 <sys_timeouts_init>:
{
 801f838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f83c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801f840:	4c11      	ldr	r4, [pc, #68]	; (801f888 <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f842:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801f894 <sys_timeouts_init+0x5c>
 801f846:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f84a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801f898 <sys_timeouts_init+0x60>
 801f84e:	f104 0620 	add.w	r6, r4, #32
 801f852:	4f0e      	ldr	r7, [pc, #56]	; (801f88c <sys_timeouts_init+0x54>)
 801f854:	d20d      	bcs.n	801f872 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f856:	f7f4 fd35 	bl	80142c4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f85a:	4622      	mov	r2, r4
 801f85c:	490c      	ldr	r1, [pc, #48]	; (801f890 <sys_timeouts_init+0x58>)
 801f85e:	4428      	add	r0, r5
 801f860:	f7ff ff60 	bl	801f724 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f864:	42b4      	cmp	r4, r6
 801f866:	d00c      	beq.n	801f882 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f868:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f86c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f870:	d3f1      	bcc.n	801f856 <sys_timeouts_init+0x1e>
 801f872:	464b      	mov	r3, r9
 801f874:	4641      	mov	r1, r8
 801f876:	f240 1229 	movw	r2, #297	; 0x129
 801f87a:	4638      	mov	r0, r7
 801f87c:	f005 fba6 	bl	8024fcc <iprintf>
 801f880:	e7e9      	b.n	801f856 <sys_timeouts_init+0x1e>
}
 801f882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f886:	bf00      	nop
 801f888:	08044900 	.word	0x08044900
 801f88c:	0802bdc0 	.word	0x0802bdc0
 801f890:	0801f781 	.word	0x0801f781
 801f894:	0804484c 	.word	0x0804484c
 801f898:	080448c0 	.word	0x080448c0

0801f89c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f89c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801f8a0:	b570      	push	{r4, r5, r6, lr}
 801f8a2:	4604      	mov	r4, r0
 801f8a4:	460d      	mov	r5, r1
 801f8a6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f8a8:	d208      	bcs.n	801f8bc <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f8aa:	f7f4 fd0b 	bl	80142c4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f8ae:	4632      	mov	r2, r6
 801f8b0:	4629      	mov	r1, r5
 801f8b2:	4420      	add	r0, r4
#endif
}
 801f8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f8b8:	f7ff bf34 	b.w	801f724 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f8bc:	4b03      	ldr	r3, [pc, #12]	; (801f8cc <sys_timeout+0x30>)
 801f8be:	f240 1229 	movw	r2, #297	; 0x129
 801f8c2:	4903      	ldr	r1, [pc, #12]	; (801f8d0 <sys_timeout+0x34>)
 801f8c4:	4803      	ldr	r0, [pc, #12]	; (801f8d4 <sys_timeout+0x38>)
 801f8c6:	f005 fb81 	bl	8024fcc <iprintf>
 801f8ca:	e7ee      	b.n	801f8aa <sys_timeout+0xe>
 801f8cc:	0804484c 	.word	0x0804484c
 801f8d0:	080448c0 	.word	0x080448c0
 801f8d4:	0802bdc0 	.word	0x0802bdc0

0801f8d8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801f8d8:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f8da:	4d0d      	ldr	r5, [pc, #52]	; (801f910 <sys_untimeout+0x38>)
 801f8dc:	682b      	ldr	r3, [r5, #0]
 801f8de:	b19b      	cbz	r3, 801f908 <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f8e0:	2400      	movs	r4, #0
 801f8e2:	e003      	b.n	801f8ec <sys_untimeout+0x14>
 801f8e4:	681a      	ldr	r2, [r3, #0]
 801f8e6:	461c      	mov	r4, r3
 801f8e8:	4613      	mov	r3, r2
 801f8ea:	b16a      	cbz	r2, 801f908 <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801f8ec:	689a      	ldr	r2, [r3, #8]
 801f8ee:	4282      	cmp	r2, r0
 801f8f0:	d1f8      	bne.n	801f8e4 <sys_untimeout+0xc>
 801f8f2:	68da      	ldr	r2, [r3, #12]
 801f8f4:	428a      	cmp	r2, r1
 801f8f6:	d1f5      	bne.n	801f8e4 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801f8f8:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801f8fa:	b13c      	cbz	r4, 801f90c <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801f8fc:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f8fe:	4619      	mov	r1, r3
 801f900:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801f902:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f904:	f7fa bdac 	b.w	801a460 <memp_free>
}
 801f908:	bc30      	pop	{r4, r5}
 801f90a:	4770      	bx	lr
        next_timeout = t->next;
 801f90c:	602a      	str	r2, [r5, #0]
 801f90e:	e7f6      	b.n	801f8fe <sys_untimeout+0x26>
 801f910:	2002dc34 	.word	0x2002dc34

0801f914 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f918:	f7f4 fcd4 	bl	80142c4 <sys_now>
 801f91c:	4c0f      	ldr	r4, [pc, #60]	; (801f95c <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801f91e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801f960 <sys_check_timeouts+0x4c>
  now = sys_now();
 801f922:	4607      	mov	r7, r0
 801f924:	e00f      	b.n	801f946 <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f926:	685a      	ldr	r2, [r3, #4]
 801f928:	eba7 0c02 	sub.w	ip, r7, r2
 801f92c:	f1bc 0f00 	cmp.w	ip, #0
 801f930:	db0e      	blt.n	801f950 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801f932:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801f934:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801f936:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801f93a:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801f93e:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f940:	f7fa fd8e 	bl	801a460 <memp_free>
    if (handler != NULL) {
 801f944:	b935      	cbnz	r5, 801f954 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801f946:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f948:	200c      	movs	r0, #12
 801f94a:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d1ea      	bne.n	801f926 <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801f954:	4648      	mov	r0, r9
 801f956:	47a8      	blx	r5
 801f958:	e7f5      	b.n	801f946 <sys_check_timeouts+0x32>
 801f95a:	bf00      	nop
 801f95c:	2002dc34 	.word	0x2002dc34
 801f960:	2002dc30 	.word	0x2002dc30

0801f964 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f964:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f966:	4c07      	ldr	r4, [pc, #28]	; (801f984 <sys_timeouts_sleeptime+0x20>)
 801f968:	6823      	ldr	r3, [r4, #0]
 801f96a:	b13b      	cbz	r3, 801f97c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801f96c:	f7f4 fcaa 	bl	80142c4 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f970:	6823      	ldr	r3, [r4, #0]
 801f972:	685b      	ldr	r3, [r3, #4]
    return 0;
 801f974:	1a18      	subs	r0, r3, r0
 801f976:	bf48      	it	mi
 801f978:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801f97a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f97c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f980:	bd10      	pop	{r4, pc}
 801f982:	bf00      	nop
 801f984:	2002dc34 	.word	0x2002dc34

0801f988 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f988:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f98a:	f005 fbc3 	bl	8025114 <rand>
 801f98e:	4b02      	ldr	r3, [pc, #8]	; (801f998 <udp_init+0x10>)
 801f990:	4a02      	ldr	r2, [pc, #8]	; (801f99c <udp_init+0x14>)
 801f992:	4303      	orrs	r3, r0
 801f994:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801f996:	bd08      	pop	{r3, pc}
 801f998:	ffffc000 	.word	0xffffc000
 801f99c:	20000416 	.word	0x20000416

0801f9a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f9a4:	4680      	mov	r8, r0
{
 801f9a6:	b085      	sub	sp, #20
 801f9a8:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f9aa:	2800      	cmp	r0, #0
 801f9ac:	f000 80af 	beq.w	801fb0e <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f9b0:	2f00      	cmp	r7, #0
 801f9b2:	f000 80b5 	beq.w	801fb20 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f9b6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801f9ba:	2b07      	cmp	r3, #7
 801f9bc:	f240 8091 	bls.w	801fae2 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f9c0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801fb98 <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801f9c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f9c8:	f8d9 1000 	ldr.w	r1, [r9]
 801f9cc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f9d0:	f003 f80c 	bl	80229ec <ip4_addr_isbroadcast_u32>
 801f9d4:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f9d6:	8820      	ldrh	r0, [r4, #0]
 801f9d8:	f7f9 fa1e 	bl	8018e18 <lwip_htons>
 801f9dc:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801f9de:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801f9e0:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801f9e2:	f7f9 fa19 	bl	8018e18 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9e6:	4b64      	ldr	r3, [pc, #400]	; (801fb78 <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801f9e8:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9ea:	681c      	ldr	r4, [r3, #0]
 801f9ec:	2c00      	cmp	r4, #0
 801f9ee:	d064      	beq.n	801faba <udp_input+0x11a>
  uncon_pcb = NULL;
 801f9f0:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f9f4:	f8df c190 	ldr.w	ip, [pc, #400]	; 801fb88 <udp_input+0x1e8>
 801f9f8:	4960      	ldr	r1, [pc, #384]	; (801fb7c <udp_input+0x1dc>)
  prev = NULL;
 801f9fa:	465e      	mov	r6, fp
 801f9fc:	e004      	b.n	801fa08 <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9fe:	68e2      	ldr	r2, [r4, #12]
 801fa00:	4626      	mov	r6, r4
 801fa02:	2a00      	cmp	r2, #0
 801fa04:	d056      	beq.n	801fab4 <udp_input+0x114>
 801fa06:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fa08:	8a62      	ldrh	r2, [r4, #18]
 801fa0a:	42aa      	cmp	r2, r5
 801fa0c:	d1f7      	bne.n	801f9fe <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fa0e:	2f00      	cmp	r7, #0
 801fa10:	d06d      	beq.n	801faee <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fa12:	7a20      	ldrb	r0, [r4, #8]
 801fa14:	b138      	cbz	r0, 801fa26 <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fa16:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801fa1a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801fa1e:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fa20:	b2d2      	uxtb	r2, r2
 801fa22:	4290      	cmp	r0, r2
 801fa24:	d1eb      	bne.n	801f9fe <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa26:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801fa28:	f1ba 0f00 	cmp.w	sl, #0
 801fa2c:	d038      	beq.n	801faa0 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa2e:	b13a      	cbz	r2, 801fa40 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fa30:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa34:	1c43      	adds	r3, r0, #1
 801fa36:	d003      	beq.n	801fa40 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801fa38:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fa3a:	68bb      	ldr	r3, [r7, #8]
 801fa3c:	4218      	tst	r0, r3
 801fa3e:	d1de      	bne.n	801f9fe <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fa40:	7c20      	ldrb	r0, [r4, #16]
 801fa42:	0743      	lsls	r3, r0, #29
 801fa44:	d409      	bmi.n	801fa5a <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801fa46:	f1bb 0f00 	cmp.w	fp, #0
 801fa4a:	d059      	beq.n	801fb00 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fa4c:	f1ba 0f00 	cmp.w	sl, #0
 801fa50:	d003      	beq.n	801fa5a <udp_input+0xba>
 801fa52:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fa56:	3001      	adds	r0, #1
 801fa58:	d069      	beq.n	801fb2e <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fa5a:	8aa2      	ldrh	r2, [r4, #20]
 801fa5c:	9803      	ldr	r0, [sp, #12]
 801fa5e:	4282      	cmp	r2, r0
 801fa60:	d1cd      	bne.n	801f9fe <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fa62:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801fa64:	b11a      	cbz	r2, 801fa6e <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fa66:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801fa6a:	4282      	cmp	r2, r0
 801fa6c:	d1c7      	bne.n	801f9fe <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fa6e:	b12e      	cbz	r6, 801fa7c <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fa70:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801fa72:	4a41      	ldr	r2, [pc, #260]	; (801fb78 <udp_input+0x1d8>)
          prev->next = pcb->next;
 801fa74:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801fa76:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801fa78:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801fa7a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fa7c:	2108      	movs	r1, #8
 801fa7e:	4640      	mov	r0, r8
 801fa80:	f7fb f97a 	bl	801ad78 <pbuf_remove_header>
 801fa84:	2800      	cmp	r0, #0
 801fa86:	d15b      	bne.n	801fb40 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fa88:	69a5      	ldr	r5, [r4, #24]
 801fa8a:	b355      	cbz	r5, 801fae2 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fa8c:	9b03      	ldr	r3, [sp, #12]
 801fa8e:	4642      	mov	r2, r8
 801fa90:	69e0      	ldr	r0, [r4, #28]
 801fa92:	4621      	mov	r1, r4
 801fa94:	9300      	str	r3, [sp, #0]
 801fa96:	4b3a      	ldr	r3, [pc, #232]	; (801fb80 <udp_input+0x1e0>)
 801fa98:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fa9a:	b005      	add	sp, #20
 801fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801faa0:	2a00      	cmp	r2, #0
 801faa2:	d0cd      	beq.n	801fa40 <udp_input+0xa0>
 801faa4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801faa8:	4282      	cmp	r2, r0
 801faaa:	d0c9      	beq.n	801fa40 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801faac:	68e2      	ldr	r2, [r4, #12]
 801faae:	4626      	mov	r6, r4
 801fab0:	2a00      	cmp	r2, #0
 801fab2:	d1a8      	bne.n	801fa06 <udp_input+0x66>
  if (pcb != NULL) {
 801fab4:	f1bb 0f00 	cmp.w	fp, #0
 801fab8:	d15b      	bne.n	801fb72 <udp_input+0x1d2>
  if (for_us) {
 801faba:	687a      	ldr	r2, [r7, #4]
 801fabc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801fac0:	429a      	cmp	r2, r3
 801fac2:	d10e      	bne.n	801fae2 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fac4:	2108      	movs	r1, #8
 801fac6:	4640      	mov	r0, r8
 801fac8:	f7fb f956 	bl	801ad78 <pbuf_remove_header>
 801facc:	2800      	cmp	r0, #0
 801face:	d137      	bne.n	801fb40 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fad0:	f1ba 0f00 	cmp.w	sl, #0
 801fad4:	d105      	bne.n	801fae2 <udp_input+0x142>
 801fad6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801fada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fade:	2be0      	cmp	r3, #224	; 0xe0
 801fae0:	d13b      	bne.n	801fb5a <udp_input+0x1ba>
      pbuf_free(p);
 801fae2:	4640      	mov	r0, r8
}
 801fae4:	b005      	add	sp, #20
 801fae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801faea:	f7fb b9b5 	b.w	801ae58 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801faee:	4663      	mov	r3, ip
 801faf0:	2288      	movs	r2, #136	; 0x88
 801faf2:	4824      	ldr	r0, [pc, #144]	; (801fb84 <udp_input+0x1e4>)
 801faf4:	f005 fa6a 	bl	8024fcc <iprintf>
 801faf8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801fb88 <udp_input+0x1e8>
 801fafc:	491f      	ldr	r1, [pc, #124]	; (801fb7c <udp_input+0x1dc>)
 801fafe:	e788      	b.n	801fa12 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801fb00:	8aa2      	ldrh	r2, [r4, #20]
 801fb02:	46a3      	mov	fp, r4
 801fb04:	9803      	ldr	r0, [sp, #12]
 801fb06:	4282      	cmp	r2, r0
 801fb08:	f47f af79 	bne.w	801f9fe <udp_input+0x5e>
 801fb0c:	e7a9      	b.n	801fa62 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fb0e:	4b1e      	ldr	r3, [pc, #120]	; (801fb88 <udp_input+0x1e8>)
 801fb10:	22cf      	movs	r2, #207	; 0xcf
 801fb12:	491e      	ldr	r1, [pc, #120]	; (801fb8c <udp_input+0x1ec>)
 801fb14:	481b      	ldr	r0, [pc, #108]	; (801fb84 <udp_input+0x1e4>)
 801fb16:	f005 fa59 	bl	8024fcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fb1a:	2f00      	cmp	r7, #0
 801fb1c:	f47f af4b 	bne.w	801f9b6 <udp_input+0x16>
 801fb20:	4b19      	ldr	r3, [pc, #100]	; (801fb88 <udp_input+0x1e8>)
 801fb22:	22d0      	movs	r2, #208	; 0xd0
 801fb24:	491a      	ldr	r1, [pc, #104]	; (801fb90 <udp_input+0x1f0>)
 801fb26:	4817      	ldr	r0, [pc, #92]	; (801fb84 <udp_input+0x1e4>)
 801fb28:	f005 fa50 	bl	8024fcc <iprintf>
 801fb2c:	e743      	b.n	801f9b6 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fb2e:	6878      	ldr	r0, [r7, #4]
 801fb30:	f8db 3000 	ldr.w	r3, [fp]
 801fb34:	4283      	cmp	r3, r0
 801fb36:	d090      	beq.n	801fa5a <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fb38:	4290      	cmp	r0, r2
 801fb3a:	bf08      	it	eq
 801fb3c:	46a3      	moveq	fp, r4
 801fb3e:	e78c      	b.n	801fa5a <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fb40:	4b11      	ldr	r3, [pc, #68]	; (801fb88 <udp_input+0x1e8>)
 801fb42:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fb46:	4913      	ldr	r1, [pc, #76]	; (801fb94 <udp_input+0x1f4>)
 801fb48:	480e      	ldr	r0, [pc, #56]	; (801fb84 <udp_input+0x1e4>)
 801fb4a:	f005 fa3f 	bl	8024fcc <iprintf>
      pbuf_free(p);
 801fb4e:	4640      	mov	r0, r8
}
 801fb50:	b005      	add	sp, #20
 801fb52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801fb56:	f7fb b97f 	b.w	801ae58 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fb5a:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801fb5e:	4640      	mov	r0, r8
 801fb60:	3108      	adds	r1, #8
 801fb62:	b209      	sxth	r1, r1
 801fb64:	f7fb f940 	bl	801ade8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fb68:	2103      	movs	r1, #3
 801fb6a:	4640      	mov	r0, r8
 801fb6c:	f002 fd5a 	bl	8022624 <icmp_dest_unreach>
 801fb70:	e7b7      	b.n	801fae2 <udp_input+0x142>
 801fb72:	465c      	mov	r4, fp
 801fb74:	e782      	b.n	801fa7c <udp_input+0xdc>
 801fb76:	bf00      	nop
 801fb78:	2002dc3c 	.word	0x2002dc3c
 801fb7c:	0804498c 	.word	0x0804498c
 801fb80:	2001ec64 	.word	0x2001ec64
 801fb84:	0802bdc0 	.word	0x0802bdc0
 801fb88:	08044928 	.word	0x08044928
 801fb8c:	08044958 	.word	0x08044958
 801fb90:	08044970 	.word	0x08044970
 801fb94:	080449b4 	.word	0x080449b4
 801fb98:	2001ec54 	.word	0x2001ec54

0801fb9c <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801fb9c:	4b38      	ldr	r3, [pc, #224]	; (801fc80 <udp_bind+0xe4>)
 801fb9e:	2900      	cmp	r1, #0
{
 801fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801fba4:	bf08      	it	eq
 801fba6:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fba8:	2800      	cmp	r0, #0
 801fbaa:	d05e      	beq.n	801fc6a <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fbac:	4f35      	ldr	r7, [pc, #212]	; (801fc84 <udp_bind+0xe8>)
 801fbae:	683e      	ldr	r6, [r7, #0]
 801fbb0:	b34e      	cbz	r6, 801fc06 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fbb2:	42b0      	cmp	r0, r6
 801fbb4:	d031      	beq.n	801fc1a <udp_bind+0x7e>
 801fbb6:	4634      	mov	r4, r6
 801fbb8:	e001      	b.n	801fbbe <udp_bind+0x22>
 801fbba:	42a0      	cmp	r0, r4
 801fbbc:	d02d      	beq.n	801fc1a <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fbbe:	68e4      	ldr	r4, [r4, #12]
 801fbc0:	2c00      	cmp	r4, #0
 801fbc2:	d1fa      	bne.n	801fbba <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fbc4:	b362      	cbz	r2, 801fc20 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fbc6:	680d      	ldr	r5, [r1, #0]
 801fbc8:	4633      	mov	r3, r6
 801fbca:	e001      	b.n	801fbd0 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fbcc:	68db      	ldr	r3, [r3, #12]
 801fbce:	b19b      	cbz	r3, 801fbf8 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801fbd0:	4298      	cmp	r0, r3
 801fbd2:	d0fb      	beq.n	801fbcc <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801fbd4:	8a59      	ldrh	r1, [r3, #18]
 801fbd6:	4291      	cmp	r1, r2
 801fbd8:	d1f8      	bne.n	801fbcc <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fbda:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801fbdc:	2900      	cmp	r1, #0
 801fbde:	bf18      	it	ne
 801fbe0:	42a9      	cmpne	r1, r5
 801fbe2:	d001      	beq.n	801fbe8 <udp_bind+0x4c>
 801fbe4:	2d00      	cmp	r5, #0
 801fbe6:	d1f1      	bne.n	801fbcc <udp_bind+0x30>
      return ERR_USE;
 801fbe8:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801fbec:	4618      	mov	r0, r3
 801fbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fbf2:	680d      	ldr	r5, [r1, #0]
 801fbf4:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fbf8:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801fbfa:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801fbfc:	b13c      	cbz	r4, 801fc0e <udp_bind+0x72>
  return ERR_OK;
 801fbfe:	2300      	movs	r3, #0
}
 801fc00:	4618      	mov	r0, r3
 801fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801fc06:	b372      	cbz	r2, 801fc66 <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fc08:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801fc0a:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fc0c:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801fc0e:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801fc10:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801fc12:	6038      	str	r0, [r7, #0]
}
 801fc14:	4618      	mov	r0, r3
 801fc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801fc1a:	2401      	movs	r4, #1
  if (port == 0) {
 801fc1c:	2a00      	cmp	r2, #0
 801fc1e:	d1d2      	bne.n	801fbc6 <udp_bind+0x2a>
 801fc20:	f8df e070 	ldr.w	lr, [pc, #112]	; 801fc94 <udp_bind+0xf8>
  rebind = 0;
 801fc24:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801fc28:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801fc2c:	f8be 2000 	ldrh.w	r2, [lr]
 801fc30:	4542      	cmp	r2, r8
 801fc32:	d015      	beq.n	801fc60 <udp_bind+0xc4>
 801fc34:	3201      	adds	r2, #1
 801fc36:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fc38:	2e00      	cmp	r6, #0
 801fc3a:	d0da      	beq.n	801fbf2 <udp_bind+0x56>
 801fc3c:	4633      	mov	r3, r6
 801fc3e:	e002      	b.n	801fc46 <udp_bind+0xaa>
 801fc40:	68db      	ldr	r3, [r3, #12]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d0d5      	beq.n	801fbf2 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801fc46:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801fc4a:	4594      	cmp	ip, r2
 801fc4c:	d1f8      	bne.n	801fc40 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801fc4e:	3d01      	subs	r5, #1
 801fc50:	b2ad      	uxth	r5, r5
 801fc52:	2d00      	cmp	r5, #0
 801fc54:	d1ec      	bne.n	801fc30 <udp_bind+0x94>
      return ERR_USE;
 801fc56:	f06f 0307 	mvn.w	r3, #7
 801fc5a:	f8ae 2000 	strh.w	r2, [lr]
 801fc5e:	e7cf      	b.n	801fc00 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801fc60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801fc64:	e7e8      	b.n	801fc38 <udp_bind+0x9c>
  rebind = 0;
 801fc66:	4634      	mov	r4, r6
 801fc68:	e7da      	b.n	801fc20 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc6a:	4b07      	ldr	r3, [pc, #28]	; (801fc88 <udp_bind+0xec>)
 801fc6c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fc70:	4906      	ldr	r1, [pc, #24]	; (801fc8c <udp_bind+0xf0>)
 801fc72:	4807      	ldr	r0, [pc, #28]	; (801fc90 <udp_bind+0xf4>)
 801fc74:	f005 f9aa 	bl	8024fcc <iprintf>
 801fc78:	f06f 030f 	mvn.w	r3, #15
 801fc7c:	e7c0      	b.n	801fc00 <udp_bind+0x64>
 801fc7e:	bf00      	nop
 801fc80:	080452a8 	.word	0x080452a8
 801fc84:	2002dc3c 	.word	0x2002dc3c
 801fc88:	08044928 	.word	0x08044928
 801fc8c:	080449d0 	.word	0x080449d0
 801fc90:	0802bdc0 	.word	0x0802bdc0
 801fc94:	20000416 	.word	0x20000416

0801fc98 <udp_sendto_if_src>:
{
 801fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc9c:	b085      	sub	sp, #20
 801fc9e:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fca2:	2800      	cmp	r0, #0
 801fca4:	f000 8087 	beq.w	801fdb6 <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fca8:	460d      	mov	r5, r1
 801fcaa:	2900      	cmp	r1, #0
 801fcac:	d079      	beq.n	801fda2 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fcae:	4690      	mov	r8, r2
 801fcb0:	2a00      	cmp	r2, #0
 801fcb2:	d06c      	beq.n	801fd8e <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fcb4:	f1ba 0f00 	cmp.w	sl, #0
 801fcb8:	d05f      	beq.n	801fd7a <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fcba:	f1bb 0f00 	cmp.w	fp, #0
 801fcbe:	f000 8084 	beq.w	801fdca <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 801fcc2:	8a42      	ldrh	r2, [r0, #18]
 801fcc4:	4699      	mov	r9, r3
 801fcc6:	4604      	mov	r4, r0
 801fcc8:	b39a      	cbz	r2, 801fd32 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fcca:	892a      	ldrh	r2, [r5, #8]
 801fccc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801fcd0:	429a      	cmp	r2, r3
 801fcd2:	d84f      	bhi.n	801fd74 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fcd4:	2108      	movs	r1, #8
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	f7fb f81a 	bl	801ad10 <pbuf_add_header>
 801fcdc:	bb98      	cbnz	r0, 801fd46 <udp_sendto_if_src+0xae>
 801fcde:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fce0:	8973      	ldrh	r3, [r6, #10]
 801fce2:	2b07      	cmp	r3, #7
 801fce4:	d93e      	bls.n	801fd64 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 801fce6:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801fce8:	8a60      	ldrh	r0, [r4, #18]
 801fcea:	f7f9 f895 	bl	8018e18 <lwip_htons>
 801fcee:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fcf0:	4648      	mov	r0, r9
 801fcf2:	f7f9 f891 	bl	8018e18 <lwip_htons>
  udphdr->chksum = 0x0000;
 801fcf6:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801fcf8:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 801fcfa:	71bb      	strb	r3, [r7, #6]
 801fcfc:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801fcfe:	8930      	ldrh	r0, [r6, #8]
 801fd00:	f7f9 f88a 	bl	8018e18 <lwip_htons>
 801fd04:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fd06:	f8cd b008 	str.w	fp, [sp, #8]
 801fd0a:	2011      	movs	r0, #17
 801fd0c:	7aa3      	ldrb	r3, [r4, #10]
 801fd0e:	4642      	mov	r2, r8
 801fd10:	4651      	mov	r1, sl
 801fd12:	9300      	str	r3, [sp, #0]
 801fd14:	7ae3      	ldrb	r3, [r4, #11]
 801fd16:	9001      	str	r0, [sp, #4]
 801fd18:	4630      	mov	r0, r6
 801fd1a:	f002 fdb9 	bl	8022890 <ip4_output_if_src>
  if (q != p) {
 801fd1e:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fd20:	4607      	mov	r7, r0
  if (q != p) {
 801fd22:	d002      	beq.n	801fd2a <udp_sendto_if_src+0x92>
    pbuf_free(q);
 801fd24:	4630      	mov	r0, r6
 801fd26:	f7fb f897 	bl	801ae58 <pbuf_free>
}
 801fd2a:	4638      	mov	r0, r7
 801fd2c:	b005      	add	sp, #20
 801fd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fd32:	4601      	mov	r1, r0
 801fd34:	f7ff ff32 	bl	801fb9c <udp_bind>
    if (err != ERR_OK) {
 801fd38:	4607      	mov	r7, r0
 801fd3a:	2800      	cmp	r0, #0
 801fd3c:	d0c5      	beq.n	801fcca <udp_sendto_if_src+0x32>
}
 801fd3e:	4638      	mov	r0, r7
 801fd40:	b005      	add	sp, #20
 801fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fd46:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fd4a:	2108      	movs	r1, #8
 801fd4c:	2022      	movs	r0, #34	; 0x22
 801fd4e:	f7fa fecd 	bl	801aaec <pbuf_alloc>
    if (q == NULL) {
 801fd52:	4606      	mov	r6, r0
 801fd54:	b170      	cbz	r0, 801fd74 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 801fd56:	892b      	ldrh	r3, [r5, #8]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d0c1      	beq.n	801fce0 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 801fd5c:	4629      	mov	r1, r5
 801fd5e:	f7fb f8e9 	bl	801af34 <pbuf_chain>
 801fd62:	e7bd      	b.n	801fce0 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fd64:	4b1e      	ldr	r3, [pc, #120]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fd66:	f240 320d 	movw	r2, #781	; 0x30d
 801fd6a:	491e      	ldr	r1, [pc, #120]	; (801fde4 <udp_sendto_if_src+0x14c>)
 801fd6c:	481e      	ldr	r0, [pc, #120]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fd6e:	f005 f92d 	bl	8024fcc <iprintf>
 801fd72:	e7b8      	b.n	801fce6 <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 801fd74:	f04f 37ff 	mov.w	r7, #4294967295
 801fd78:	e7d7      	b.n	801fd2a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fd7a:	4b19      	ldr	r3, [pc, #100]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fd7c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fd80:	491a      	ldr	r1, [pc, #104]	; (801fdec <udp_sendto_if_src+0x154>)
 801fd82:	f06f 070f 	mvn.w	r7, #15
 801fd86:	4818      	ldr	r0, [pc, #96]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fd88:	f005 f920 	bl	8024fcc <iprintf>
 801fd8c:	e7cd      	b.n	801fd2a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fd8e:	4b14      	ldr	r3, [pc, #80]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fd90:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fd94:	4916      	ldr	r1, [pc, #88]	; (801fdf0 <udp_sendto_if_src+0x158>)
 801fd96:	f06f 070f 	mvn.w	r7, #15
 801fd9a:	4813      	ldr	r0, [pc, #76]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fd9c:	f005 f916 	bl	8024fcc <iprintf>
 801fda0:	e7c3      	b.n	801fd2a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fda2:	4b0f      	ldr	r3, [pc, #60]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fda4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fda8:	4912      	ldr	r1, [pc, #72]	; (801fdf4 <udp_sendto_if_src+0x15c>)
 801fdaa:	f06f 070f 	mvn.w	r7, #15
 801fdae:	480e      	ldr	r0, [pc, #56]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fdb0:	f005 f90c 	bl	8024fcc <iprintf>
 801fdb4:	e7b9      	b.n	801fd2a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fdb6:	4b0a      	ldr	r3, [pc, #40]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fdb8:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fdbc:	490e      	ldr	r1, [pc, #56]	; (801fdf8 <udp_sendto_if_src+0x160>)
 801fdbe:	f06f 070f 	mvn.w	r7, #15
 801fdc2:	4809      	ldr	r0, [pc, #36]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fdc4:	f005 f902 	bl	8024fcc <iprintf>
 801fdc8:	e7af      	b.n	801fd2a <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fdca:	4b05      	ldr	r3, [pc, #20]	; (801fde0 <udp_sendto_if_src+0x148>)
 801fdcc:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fdd0:	490a      	ldr	r1, [pc, #40]	; (801fdfc <udp_sendto_if_src+0x164>)
 801fdd2:	f06f 070f 	mvn.w	r7, #15
 801fdd6:	4804      	ldr	r0, [pc, #16]	; (801fde8 <udp_sendto_if_src+0x150>)
 801fdd8:	f005 f8f8 	bl	8024fcc <iprintf>
 801fddc:	e7a5      	b.n	801fd2a <udp_sendto_if_src+0x92>
 801fdde:	bf00      	nop
 801fde0:	08044928 	.word	0x08044928
 801fde4:	08044a94 	.word	0x08044a94
 801fde8:	0802bdc0 	.word	0x0802bdc0
 801fdec:	08044a4c 	.word	0x08044a4c
 801fdf0:	08044a28 	.word	0x08044a28
 801fdf4:	08044a08 	.word	0x08044a08
 801fdf8:	080449e8 	.word	0x080449e8
 801fdfc:	08044a70 	.word	0x08044a70

0801fe00 <udp_sendto_if>:
{
 801fe00:	b570      	push	{r4, r5, r6, lr}
 801fe02:	b082      	sub	sp, #8
 801fe04:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe06:	2800      	cmp	r0, #0
 801fe08:	d036      	beq.n	801fe78 <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fe0a:	b359      	cbz	r1, 801fe64 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fe0c:	b302      	cbz	r2, 801fe50 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fe0e:	b1ac      	cbz	r4, 801fe3c <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe10:	6805      	ldr	r5, [r0, #0]
 801fe12:	b935      	cbnz	r5, 801fe22 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801fe14:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fe16:	e9cd 4500 	strd	r4, r5, [sp]
 801fe1a:	f7ff ff3d 	bl	801fc98 <udp_sendto_if_src>
}
 801fe1e:	b002      	add	sp, #8
 801fe20:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fe22:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe26:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 801fe2a:	d0f3      	beq.n	801fe14 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fe2c:	6866      	ldr	r6, [r4, #4]
 801fe2e:	42b5      	cmp	r5, r6
 801fe30:	d101      	bne.n	801fe36 <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fe32:	4605      	mov	r5, r0
 801fe34:	e7ef      	b.n	801fe16 <udp_sendto_if+0x16>
        return ERR_RTE;
 801fe36:	f06f 0003 	mvn.w	r0, #3
 801fe3a:	e7f0      	b.n	801fe1e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fe3c:	4b13      	ldr	r3, [pc, #76]	; (801fe8c <udp_sendto_if+0x8c>)
 801fe3e:	f240 2283 	movw	r2, #643	; 0x283
 801fe42:	4913      	ldr	r1, [pc, #76]	; (801fe90 <udp_sendto_if+0x90>)
 801fe44:	4813      	ldr	r0, [pc, #76]	; (801fe94 <udp_sendto_if+0x94>)
 801fe46:	f005 f8c1 	bl	8024fcc <iprintf>
 801fe4a:	f06f 000f 	mvn.w	r0, #15
 801fe4e:	e7e6      	b.n	801fe1e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fe50:	4b0e      	ldr	r3, [pc, #56]	; (801fe8c <udp_sendto_if+0x8c>)
 801fe52:	f240 2282 	movw	r2, #642	; 0x282
 801fe56:	4910      	ldr	r1, [pc, #64]	; (801fe98 <udp_sendto_if+0x98>)
 801fe58:	480e      	ldr	r0, [pc, #56]	; (801fe94 <udp_sendto_if+0x94>)
 801fe5a:	f005 f8b7 	bl	8024fcc <iprintf>
 801fe5e:	f06f 000f 	mvn.w	r0, #15
 801fe62:	e7dc      	b.n	801fe1e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fe64:	4b09      	ldr	r3, [pc, #36]	; (801fe8c <udp_sendto_if+0x8c>)
 801fe66:	f240 2281 	movw	r2, #641	; 0x281
 801fe6a:	490c      	ldr	r1, [pc, #48]	; (801fe9c <udp_sendto_if+0x9c>)
 801fe6c:	4809      	ldr	r0, [pc, #36]	; (801fe94 <udp_sendto_if+0x94>)
 801fe6e:	f005 f8ad 	bl	8024fcc <iprintf>
 801fe72:	f06f 000f 	mvn.w	r0, #15
 801fe76:	e7d2      	b.n	801fe1e <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe78:	4b04      	ldr	r3, [pc, #16]	; (801fe8c <udp_sendto_if+0x8c>)
 801fe7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe7e:	4908      	ldr	r1, [pc, #32]	; (801fea0 <udp_sendto_if+0xa0>)
 801fe80:	4804      	ldr	r0, [pc, #16]	; (801fe94 <udp_sendto_if+0x94>)
 801fe82:	f005 f8a3 	bl	8024fcc <iprintf>
 801fe86:	f06f 000f 	mvn.w	r0, #15
 801fe8a:	e7c8      	b.n	801fe1e <udp_sendto_if+0x1e>
 801fe8c:	08044928 	.word	0x08044928
 801fe90:	08044b1c 	.word	0x08044b1c
 801fe94:	0802bdc0 	.word	0x0802bdc0
 801fe98:	08044afc 	.word	0x08044afc
 801fe9c:	08044ae0 	.word	0x08044ae0
 801fea0:	08044ac4 	.word	0x08044ac4

0801fea4 <udp_sendto>:
{
 801fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fea8:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801feaa:	b388      	cbz	r0, 801ff10 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801feac:	460e      	mov	r6, r1
 801feae:	b329      	cbz	r1, 801fefc <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801feb0:	4615      	mov	r5, r2
 801feb2:	b1ca      	cbz	r2, 801fee8 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801feb4:	4604      	mov	r4, r0
 801feb6:	7a00      	ldrb	r0, [r0, #8]
 801feb8:	4698      	mov	r8, r3
 801feba:	b168      	cbz	r0, 801fed8 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 801febc:	f7fa fcc2 	bl	801a844 <netif_get_by_index>
 801fec0:	4607      	mov	r7, r0
  if (netif == NULL) {
 801fec2:	b177      	cbz	r7, 801fee2 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fec4:	4643      	mov	r3, r8
 801fec6:	462a      	mov	r2, r5
 801fec8:	4631      	mov	r1, r6
 801feca:	4620      	mov	r0, r4
 801fecc:	9700      	str	r7, [sp, #0]
 801fece:	f7ff ff97 	bl	801fe00 <udp_sendto_if>
}
 801fed2:	b002      	add	sp, #8
 801fed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fed8:	4610      	mov	r0, r2
 801feda:	f002 fbab 	bl	8022634 <ip4_route>
 801fede:	4607      	mov	r7, r0
 801fee0:	e7ef      	b.n	801fec2 <udp_sendto+0x1e>
    return ERR_RTE;
 801fee2:	f06f 0003 	mvn.w	r0, #3
 801fee6:	e7f4      	b.n	801fed2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fee8:	4b0e      	ldr	r3, [pc, #56]	; (801ff24 <udp_sendto+0x80>)
 801feea:	f240 221a 	movw	r2, #538	; 0x21a
 801feee:	490e      	ldr	r1, [pc, #56]	; (801ff28 <udp_sendto+0x84>)
 801fef0:	480e      	ldr	r0, [pc, #56]	; (801ff2c <udp_sendto+0x88>)
 801fef2:	f005 f86b 	bl	8024fcc <iprintf>
 801fef6:	f06f 000f 	mvn.w	r0, #15
 801fefa:	e7ea      	b.n	801fed2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fefc:	4b09      	ldr	r3, [pc, #36]	; (801ff24 <udp_sendto+0x80>)
 801fefe:	f240 2219 	movw	r2, #537	; 0x219
 801ff02:	490b      	ldr	r1, [pc, #44]	; (801ff30 <udp_sendto+0x8c>)
 801ff04:	4809      	ldr	r0, [pc, #36]	; (801ff2c <udp_sendto+0x88>)
 801ff06:	f005 f861 	bl	8024fcc <iprintf>
 801ff0a:	f06f 000f 	mvn.w	r0, #15
 801ff0e:	e7e0      	b.n	801fed2 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff10:	4b04      	ldr	r3, [pc, #16]	; (801ff24 <udp_sendto+0x80>)
 801ff12:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ff16:	4907      	ldr	r1, [pc, #28]	; (801ff34 <udp_sendto+0x90>)
 801ff18:	4804      	ldr	r0, [pc, #16]	; (801ff2c <udp_sendto+0x88>)
 801ff1a:	f005 f857 	bl	8024fcc <iprintf>
 801ff1e:	f06f 000f 	mvn.w	r0, #15
 801ff22:	e7d6      	b.n	801fed2 <udp_sendto+0x2e>
 801ff24:	08044928 	.word	0x08044928
 801ff28:	08044b70 	.word	0x08044b70
 801ff2c:	0802bdc0 	.word	0x0802bdc0
 801ff30:	08044b54 	.word	0x08044b54
 801ff34:	08044b3c 	.word	0x08044b3c

0801ff38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ff38:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff3a:	b320      	cbz	r0, 801ff86 <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801ff3c:	460d      	mov	r5, r1
 801ff3e:	b361      	cbz	r1, 801ff9a <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801ff40:	4616      	mov	r6, r2
 801ff42:	8a42      	ldrh	r2, [r0, #18]
 801ff44:	4604      	mov	r4, r0
 801ff46:	b1c2      	cbz	r2, 801ff7a <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801ff48:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801ff4a:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff4c:	4918      	ldr	r1, [pc, #96]	; (801ffb0 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801ff4e:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801ff52:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff54:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801ff56:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801ff58:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff5a:	b142      	cbz	r2, 801ff6e <udp_connect+0x36>
    if (pcb == ipcb) {
 801ff5c:	4294      	cmp	r4, r2
 801ff5e:	d00a      	beq.n	801ff76 <udp_connect+0x3e>
 801ff60:	4613      	mov	r3, r2
 801ff62:	e001      	b.n	801ff68 <udp_connect+0x30>
 801ff64:	429c      	cmp	r4, r3
 801ff66:	d006      	beq.n	801ff76 <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff68:	68db      	ldr	r3, [r3, #12]
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d1fa      	bne.n	801ff64 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801ff6e:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801ff70:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801ff72:	600c      	str	r4, [r1, #0]
}
 801ff74:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801ff76:	2000      	movs	r0, #0
}
 801ff78:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ff7a:	4601      	mov	r1, r0
 801ff7c:	f7ff fe0e 	bl	801fb9c <udp_bind>
    if (err != ERR_OK) {
 801ff80:	2800      	cmp	r0, #0
 801ff82:	d0e1      	beq.n	801ff48 <udp_connect+0x10>
}
 801ff84:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff86:	4b0b      	ldr	r3, [pc, #44]	; (801ffb4 <udp_connect+0x7c>)
 801ff88:	f240 4235 	movw	r2, #1077	; 0x435
 801ff8c:	490a      	ldr	r1, [pc, #40]	; (801ffb8 <udp_connect+0x80>)
 801ff8e:	480b      	ldr	r0, [pc, #44]	; (801ffbc <udp_connect+0x84>)
 801ff90:	f005 f81c 	bl	8024fcc <iprintf>
 801ff94:	f06f 000f 	mvn.w	r0, #15
}
 801ff98:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801ff9a:	4b06      	ldr	r3, [pc, #24]	; (801ffb4 <udp_connect+0x7c>)
 801ff9c:	f240 4236 	movw	r2, #1078	; 0x436
 801ffa0:	4907      	ldr	r1, [pc, #28]	; (801ffc0 <udp_connect+0x88>)
 801ffa2:	4806      	ldr	r0, [pc, #24]	; (801ffbc <udp_connect+0x84>)
 801ffa4:	f005 f812 	bl	8024fcc <iprintf>
 801ffa8:	f06f 000f 	mvn.w	r0, #15
}
 801ffac:	bd70      	pop	{r4, r5, r6, pc}
 801ffae:	bf00      	nop
 801ffb0:	2002dc3c 	.word	0x2002dc3c
 801ffb4:	08044928 	.word	0x08044928
 801ffb8:	08044b8c 	.word	0x08044b8c
 801ffbc:	0802bdc0 	.word	0x0802bdc0
 801ffc0:	08044ba8 	.word	0x08044ba8

0801ffc4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ffc4:	b110      	cbz	r0, 801ffcc <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801ffc6:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801ffca:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ffcc:	4b03      	ldr	r3, [pc, #12]	; (801ffdc <udp_recv+0x18>)
 801ffce:	f240 428a 	movw	r2, #1162	; 0x48a
 801ffd2:	4903      	ldr	r1, [pc, #12]	; (801ffe0 <udp_recv+0x1c>)
 801ffd4:	4803      	ldr	r0, [pc, #12]	; (801ffe4 <udp_recv+0x20>)
 801ffd6:	f004 bff9 	b.w	8024fcc <iprintf>
 801ffda:	bf00      	nop
 801ffdc:	08044928 	.word	0x08044928
 801ffe0:	08044bc4 	.word	0x08044bc4
 801ffe4:	0802bdc0 	.word	0x0802bdc0

0801ffe8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ffe8:	4601      	mov	r1, r0
 801ffea:	b1c0      	cbz	r0, 802001e <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ffec:	4b0f      	ldr	r3, [pc, #60]	; (802002c <udp_remove+0x44>)
 801ffee:	681a      	ldr	r2, [r3, #0]
 801fff0:	4282      	cmp	r2, r0
 801fff2:	d00a      	beq.n	802000a <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fff4:	b132      	cbz	r2, 8020004 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fff6:	68d3      	ldr	r3, [r2, #12]
 801fff8:	428b      	cmp	r3, r1
 801fffa:	d100      	bne.n	801fffe <udp_remove+0x16>
 801fffc:	b953      	cbnz	r3, 8020014 <udp_remove+0x2c>
 801fffe:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020000:	2a00      	cmp	r2, #0
 8020002:	d1f8      	bne.n	801fff6 <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8020004:	2001      	movs	r0, #1
 8020006:	f7fa ba2b 	b.w	801a460 <memp_free>
    udp_pcbs = udp_pcbs->next;
 802000a:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802000c:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 802000e:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8020010:	f7fa ba26 	b.w	801a460 <memp_free>
        pcb2->next = pcb->next;
 8020014:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8020016:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 8020018:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802001a:	f7fa ba21 	b.w	801a460 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802001e:	4b04      	ldr	r3, [pc, #16]	; (8020030 <udp_remove+0x48>)
 8020020:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8020024:	4903      	ldr	r1, [pc, #12]	; (8020034 <udp_remove+0x4c>)
 8020026:	4804      	ldr	r0, [pc, #16]	; (8020038 <udp_remove+0x50>)
 8020028:	f004 bfd0 	b.w	8024fcc <iprintf>
 802002c:	2002dc3c 	.word	0x2002dc3c
 8020030:	08044928 	.word	0x08044928
 8020034:	08044bdc 	.word	0x08044bdc
 8020038:	0802bdc0 	.word	0x0802bdc0

0802003c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 802003c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802003e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8020042:	4907      	ldr	r1, [pc, #28]	; (8020060 <udp_new+0x24>)
 8020044:	2001      	movs	r0, #1
 8020046:	f7fa f9d5 	bl	801a3f4 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802004a:	4604      	mov	r4, r0
 802004c:	b128      	cbz	r0, 802005a <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 802004e:	2220      	movs	r2, #32
 8020050:	2100      	movs	r1, #0
 8020052:	f004 f81f 	bl	8024094 <memset>
    pcb->ttl = UDP_TTL;
 8020056:	23ff      	movs	r3, #255	; 0xff
 8020058:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 802005a:	4620      	mov	r0, r4
 802005c:	bd10      	pop	{r4, pc}
 802005e:	bf00      	nop
 8020060:	08044928 	.word	0x08044928

08020064 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020064:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020066:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802006a:	4907      	ldr	r1, [pc, #28]	; (8020088 <udp_new_ip_type+0x24>)
 802006c:	2001      	movs	r0, #1
 802006e:	f7fa f9c1 	bl	801a3f4 <memp_malloc_fn>
  if (pcb != NULL) {
 8020072:	4604      	mov	r4, r0
 8020074:	b128      	cbz	r0, 8020082 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020076:	2220      	movs	r2, #32
 8020078:	2100      	movs	r1, #0
 802007a:	f004 f80b 	bl	8024094 <memset>
    pcb->ttl = UDP_TTL;
 802007e:	23ff      	movs	r3, #255	; 0xff
 8020080:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8020082:	4620      	mov	r0, r4
 8020084:	bd10      	pop	{r4, pc}
 8020086:	bf00      	nop
 8020088:	08044928 	.word	0x08044928

0802008c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802008c:	b110      	cbz	r0, 8020094 <udp_netif_ip_addr_changed+0x8>
 802008e:	6802      	ldr	r2, [r0, #0]
 8020090:	b101      	cbz	r1, 8020094 <udp_netif_ip_addr_changed+0x8>
 8020092:	b902      	cbnz	r2, 8020096 <udp_netif_ip_addr_changed+0xa>
 8020094:	4770      	bx	lr
 8020096:	680b      	ldr	r3, [r1, #0]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d0fb      	beq.n	8020094 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802009c:	4b08      	ldr	r3, [pc, #32]	; (80200c0 <udp_netif_ip_addr_changed+0x34>)
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	d0f7      	beq.n	8020094 <udp_netif_ip_addr_changed+0x8>
{
 80200a4:	b410      	push	{r4}
 80200a6:	e000      	b.n	80200aa <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80200a8:	6802      	ldr	r2, [r0, #0]
 80200aa:	681c      	ldr	r4, [r3, #0]
 80200ac:	4294      	cmp	r4, r2
 80200ae:	d101      	bne.n	80200b4 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80200b0:	680a      	ldr	r2, [r1, #0]
 80200b2:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80200b4:	68db      	ldr	r3, [r3, #12]
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d1f6      	bne.n	80200a8 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 80200ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200be:	4770      	bx	lr
 80200c0:	2002dc3c 	.word	0x2002dc3c

080200c4 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80200c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80200c6:	1d07      	adds	r7, r0, #4
{
 80200c8:	4604      	mov	r4, r0
 80200ca:	460d      	mov	r5, r1
 80200cc:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80200ce:	2f44      	cmp	r7, #68	; 0x44
 80200d0:	d80e      	bhi.n	80200f0 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80200d2:	0e33      	lsrs	r3, r6, #24
 80200d4:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80200d6:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80200d8:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80200da:	b292      	uxth	r2, r2
 80200dc:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80200de:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80200e0:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80200e2:	0a32      	lsrs	r2, r6, #8
 80200e4:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80200e6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80200e8:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 80200ea:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80200ec:	552e      	strb	r6, [r5, r4]
}
 80200ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80200f0:	4b03      	ldr	r3, [pc, #12]	; (8020100 <dhcp_option_long+0x3c>)
 80200f2:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80200f6:	4903      	ldr	r1, [pc, #12]	; (8020104 <dhcp_option_long+0x40>)
 80200f8:	4803      	ldr	r0, [pc, #12]	; (8020108 <dhcp_option_long+0x44>)
 80200fa:	f004 ff67 	bl	8024fcc <iprintf>
 80200fe:	e7e8      	b.n	80200d2 <dhcp_option_long+0xe>
 8020100:	08044bf4 	.word	0x08044bf4
 8020104:	08044c2c 	.word	0x08044c2c
 8020108:	0802bdc0 	.word	0x0802bdc0

0802010c <dhcp_check>:
{
 802010c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802010e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 8020110:	7963      	ldrb	r3, [r4, #5]
 8020112:	2b08      	cmp	r3, #8
 8020114:	d004      	beq.n	8020120 <dhcp_check+0x14>
    dhcp->tries = 0;
 8020116:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020118:	2208      	movs	r2, #8
    dhcp->tries = 0;
 802011a:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 802011c:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 802011e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8020120:	2200      	movs	r2, #0
 8020122:	f104 011c 	add.w	r1, r4, #28
 8020126:	f001 ffab 	bl	8022080 <etharp_query>
  if (dhcp->tries < 255) {
 802012a:	79a3      	ldrb	r3, [r4, #6]
 802012c:	2bff      	cmp	r3, #255	; 0xff
 802012e:	d001      	beq.n	8020134 <dhcp_check+0x28>
    dhcp->tries++;
 8020130:	3301      	adds	r3, #1
 8020132:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020134:	2301      	movs	r3, #1
 8020136:	8123      	strh	r3, [r4, #8]
}
 8020138:	bd10      	pop	{r4, pc}
 802013a:	bf00      	nop

0802013c <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 802013c:	2800      	cmp	r0, #0
 802013e:	f000 808e 	beq.w	802025e <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 8020142:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020144:	2900      	cmp	r1, #0
 8020146:	f000 8091 	beq.w	802026c <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802014a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 802014c:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802014e:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 8020152:	b500      	push	{lr}
  dhcp->lease_used = 0;
 8020154:	824a      	strh	r2, [r1, #18]
{
 8020156:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8020158:	d00e      	beq.n	8020178 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802015a:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 802015c:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020160:	d258      	bcs.n	8020214 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020162:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 8020166:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020168:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 802016c:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 8020170:	f200 8083 	bhi.w	802027a <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 8020174:	2301      	movs	r3, #1
 8020176:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8020178:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802017a:	1c5a      	adds	r2, r3, #1
 802017c:	d050      	beq.n	8020220 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802017e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020180:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020184:	d241      	bcs.n	802020a <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020186:	4a40      	ldr	r2, [pc, #256]	; (8020288 <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 8020188:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802018a:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 802018e:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8020192:	d874      	bhi.n	802027e <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8020194:	2301      	movs	r3, #1
 8020196:	469c      	mov	ip, r3
 8020198:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802019a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 802019c:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80201a0:	1c53      	adds	r3, r2, #1
 80201a2:	d042      	beq.n	802022a <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80201a4:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 80201a6:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80201aa:	d24b      	bcs.n	8020244 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80201ac:	4b36      	ldr	r3, [pc, #216]	; (8020288 <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 80201ae:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80201b0:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80201b4:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 80201b8:	d864      	bhi.n	8020284 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 80201ba:	2201      	movs	r2, #1
 80201bc:	4613      	mov	r3, r2
 80201be:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80201c0:	2201      	movs	r2, #1
 80201c2:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80201c4:	459c      	cmp	ip, r3
 80201c6:	d302      	bcc.n	80201ce <dhcp_bind+0x92>
 80201c8:	b10a      	cbz	r2, 80201ce <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 80201ca:	2300      	movs	r3, #0
 80201cc:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 80201ce:	79cb      	ldrb	r3, [r1, #7]
 80201d0:	2b00      	cmp	r3, #0
 80201d2:	d02f      	beq.n	8020234 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80201d4:	6a0b      	ldr	r3, [r1, #32]
 80201d6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80201d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80201da:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80201dc:	b92b      	cbnz	r3, 80201ea <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80201de:	69cb      	ldr	r3, [r1, #28]
 80201e0:	9a00      	ldr	r2, [sp, #0]
 80201e2:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80201e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80201e8:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 80201ea:	794b      	ldrb	r3, [r1, #5]
 80201ec:	2b0a      	cmp	r3, #10
 80201ee:	d004      	beq.n	80201fa <dhcp_bind+0xbe>
    dhcp->tries = 0;
 80201f0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80201f2:	220a      	movs	r2, #10
    dhcp->tries = 0;
 80201f4:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 80201f6:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 80201f8:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80201fa:	ab01      	add	r3, sp, #4
 80201fc:	466a      	mov	r2, sp
 80201fe:	311c      	adds	r1, #28
 8020200:	f7fa f9ac 	bl	801a55c <netif_set_addr>
}
 8020204:	b003      	add	sp, #12
 8020206:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802020a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802020e:	469c      	mov	ip, r3
 8020210:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 8020212:	e7c2      	b.n	802019a <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 8020214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020218:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802021a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802021c:	1c5a      	adds	r2, r3, #1
 802021e:	d1ae      	bne.n	802017e <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020220:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8020222:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020226:	1c53      	adds	r3, r2, #1
 8020228:	d1bc      	bne.n	80201a4 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 802022a:	898b      	ldrh	r3, [r1, #12]
 802022c:	1e1a      	subs	r2, r3, #0
 802022e:	bf18      	it	ne
 8020230:	2201      	movne	r2, #1
 8020232:	e7c7      	b.n	80201c4 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 8020234:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8020238:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 802023a:	2b00      	cmp	r3, #0
 802023c:	db07      	blt.n	802024e <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 802023e:	23ff      	movs	r3, #255	; 0xff
 8020240:	9300      	str	r3, [sp, #0]
 8020242:	e7c9      	b.n	80201d8 <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 8020244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020248:	4613      	mov	r3, r2
 802024a:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 802024c:	e7b8      	b.n	80201c0 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 802024e:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8020250:	bf8c      	ite	hi
 8020252:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8020256:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 802025a:	9300      	str	r3, [sp, #0]
 802025c:	e7bc      	b.n	80201d8 <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 802025e:	4b0b      	ldr	r3, [pc, #44]	; (802028c <dhcp_bind+0x150>)
 8020260:	f240 4215 	movw	r2, #1045	; 0x415
 8020264:	490a      	ldr	r1, [pc, #40]	; (8020290 <dhcp_bind+0x154>)
 8020266:	480b      	ldr	r0, [pc, #44]	; (8020294 <dhcp_bind+0x158>)
 8020268:	f004 beb0 	b.w	8024fcc <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 802026c:	4b07      	ldr	r3, [pc, #28]	; (802028c <dhcp_bind+0x150>)
 802026e:	f240 4217 	movw	r2, #1047	; 0x417
 8020272:	4909      	ldr	r1, [pc, #36]	; (8020298 <dhcp_bind+0x15c>)
 8020274:	4807      	ldr	r0, [pc, #28]	; (8020294 <dhcp_bind+0x158>)
 8020276:	f004 bea9 	b.w	8024fcc <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 802027a:	828a      	strh	r2, [r1, #20]
 802027c:	e77c      	b.n	8020178 <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 802027e:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8020282:	e78a      	b.n	802019a <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8020284:	818b      	strh	r3, [r1, #12]
 8020286:	e79b      	b.n	80201c0 <dhcp_bind+0x84>
 8020288:	88888889 	.word	0x88888889
 802028c:	08044bf4 	.word	0x08044bf4
 8020290:	08044c68 	.word	0x08044c68
 8020294:	0802bdc0 	.word	0x0802bdc0
 8020298:	08044c84 	.word	0x08044c84

0802029c <dhcp_inc_pcb_refcount>:
{
 802029c:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 802029e:	4c15      	ldr	r4, [pc, #84]	; (80202f4 <dhcp_inc_pcb_refcount+0x58>)
 80202a0:	7823      	ldrb	r3, [r4, #0]
 80202a2:	b9fb      	cbnz	r3, 80202e4 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80202a4:	4d14      	ldr	r5, [pc, #80]	; (80202f8 <dhcp_inc_pcb_refcount+0x5c>)
 80202a6:	682b      	ldr	r3, [r5, #0]
 80202a8:	b12b      	cbz	r3, 80202b6 <dhcp_inc_pcb_refcount+0x1a>
 80202aa:	4b14      	ldr	r3, [pc, #80]	; (80202fc <dhcp_inc_pcb_refcount+0x60>)
 80202ac:	22e5      	movs	r2, #229	; 0xe5
 80202ae:	4914      	ldr	r1, [pc, #80]	; (8020300 <dhcp_inc_pcb_refcount+0x64>)
 80202b0:	4814      	ldr	r0, [pc, #80]	; (8020304 <dhcp_inc_pcb_refcount+0x68>)
 80202b2:	f004 fe8b 	bl	8024fcc <iprintf>
    dhcp_pcb = udp_new();
 80202b6:	f7ff fec1 	bl	802003c <udp_new>
 80202ba:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 80202bc:	b1b0      	cbz	r0, 80202ec <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80202be:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80202c0:	4911      	ldr	r1, [pc, #68]	; (8020308 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80202c2:	f042 0220 	orr.w	r2, r2, #32
 80202c6:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80202c8:	2244      	movs	r2, #68	; 0x44
 80202ca:	f7ff fc67 	bl	801fb9c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80202ce:	2243      	movs	r2, #67	; 0x43
 80202d0:	490d      	ldr	r1, [pc, #52]	; (8020308 <dhcp_inc_pcb_refcount+0x6c>)
 80202d2:	6828      	ldr	r0, [r5, #0]
 80202d4:	f7ff fe30 	bl	801ff38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80202d8:	2200      	movs	r2, #0
 80202da:	490c      	ldr	r1, [pc, #48]	; (802030c <dhcp_inc_pcb_refcount+0x70>)
 80202dc:	6828      	ldr	r0, [r5, #0]
 80202de:	f7ff fe71 	bl	801ffc4 <udp_recv>
  dhcp_pcb_refcount++;
 80202e2:	7823      	ldrb	r3, [r4, #0]
 80202e4:	3301      	adds	r3, #1
  return ERR_OK;
 80202e6:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80202e8:	7023      	strb	r3, [r4, #0]
}
 80202ea:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80202ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80202f0:	bd38      	pop	{r3, r4, r5, pc}
 80202f2:	bf00      	nop
 80202f4:	2002dc44 	.word	0x2002dc44
 80202f8:	2002dc40 	.word	0x2002dc40
 80202fc:	08044bf4 	.word	0x08044bf4
 8020300:	08044c9c 	.word	0x08044c9c
 8020304:	0802bdc0 	.word	0x0802bdc0
 8020308:	080452a8 	.word	0x080452a8
 802030c:	08020bb5 	.word	0x08020bb5

08020310 <dhcp_dec_pcb_refcount>:
{
 8020310:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8020312:	4d0b      	ldr	r5, [pc, #44]	; (8020340 <dhcp_dec_pcb_refcount+0x30>)
 8020314:	782c      	ldrb	r4, [r5, #0]
 8020316:	b154      	cbz	r4, 802032e <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 8020318:	3c01      	subs	r4, #1
 802031a:	b2e4      	uxtb	r4, r4
 802031c:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 802031e:	b104      	cbz	r4, 8020322 <dhcp_dec_pcb_refcount+0x12>
}
 8020320:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8020322:	4d08      	ldr	r5, [pc, #32]	; (8020344 <dhcp_dec_pcb_refcount+0x34>)
 8020324:	6828      	ldr	r0, [r5, #0]
 8020326:	f7ff fe5f 	bl	801ffe8 <udp_remove>
    dhcp_pcb = NULL;
 802032a:	602c      	str	r4, [r5, #0]
}
 802032c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 802032e:	4b06      	ldr	r3, [pc, #24]	; (8020348 <dhcp_dec_pcb_refcount+0x38>)
 8020330:	22ff      	movs	r2, #255	; 0xff
 8020332:	4906      	ldr	r1, [pc, #24]	; (802034c <dhcp_dec_pcb_refcount+0x3c>)
 8020334:	4806      	ldr	r0, [pc, #24]	; (8020350 <dhcp_dec_pcb_refcount+0x40>)
 8020336:	f004 fe49 	bl	8024fcc <iprintf>
  dhcp_pcb_refcount--;
 802033a:	782c      	ldrb	r4, [r5, #0]
 802033c:	e7ec      	b.n	8020318 <dhcp_dec_pcb_refcount+0x8>
 802033e:	bf00      	nop
 8020340:	2002dc44 	.word	0x2002dc44
 8020344:	2002dc40 	.word	0x2002dc40
 8020348:	08044bf4 	.word	0x08044bf4
 802034c:	08044cc4 	.word	0x08044cc4
 8020350:	0802bdc0 	.word	0x0802bdc0

08020354 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8020354:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020356:	4d29      	ldr	r5, [pc, #164]	; (80203fc <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8020358:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 802035a:	b083      	sub	sp, #12
 802035c:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 802035e:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020360:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020364:	b112      	cbz	r2, 802036c <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8020366:	4b26      	ldr	r3, [pc, #152]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 8020368:	68db      	ldr	r3, [r3, #12]
 802036a:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 802036c:	792b      	ldrb	r3, [r5, #4]
 802036e:	2b00      	cmp	r3, #0
 8020370:	d041      	beq.n	80203f6 <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8020372:	4b23      	ldr	r3, [pc, #140]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 8020374:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8020376:	796a      	ldrb	r2, [r5, #5]
 8020378:	62e3      	str	r3, [r4, #44]	; 0x2c
 802037a:	b312      	cbz	r2, 80203c2 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 802037c:	4b20      	ldr	r3, [pc, #128]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 802037e:	695b      	ldr	r3, [r3, #20]
 8020380:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020382:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020384:	690a      	ldr	r2, [r1, #16]
 8020386:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020388:	bb2b      	cbnz	r3, 80203d6 <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 802038a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 802038c:	79eb      	ldrb	r3, [r5, #7]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d12b      	bne.n	80203ea <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8020392:	7a2b      	ldrb	r3, [r5, #8]
 8020394:	b19b      	cbz	r3, 80203be <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020396:	4c1a      	ldr	r4, [pc, #104]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 8020398:	6a20      	ldr	r0, [r4, #32]
 802039a:	f7f8 fd41 	bl	8018e20 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 802039e:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80203a0:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 80203a2:	2000      	movs	r0, #0
 80203a4:	f7f9 f8e2 	bl	801956c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80203a8:	7a6b      	ldrb	r3, [r5, #9]
 80203aa:	b143      	cbz	r3, 80203be <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80203ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80203ae:	f7f8 fd37 	bl	8018e20 <lwip_htonl>
 80203b2:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 80203b4:	a901      	add	r1, sp, #4
 80203b6:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80203b8:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 80203ba:	f7f9 f8d7 	bl	801956c <dns_setserver>
}
 80203be:	b003      	add	sp, #12
 80203c0:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80203c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80203c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80203c8:	08db      	lsrs	r3, r3, #3
 80203ca:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80203cc:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80203ce:	690a      	ldr	r2, [r1, #16]
 80203d0:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d0d9      	beq.n	802038a <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80203d6:	4b0a      	ldr	r3, [pc, #40]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 80203d8:	6998      	ldr	r0, [r3, #24]
 80203da:	f7f8 fd21 	bl	8018e20 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80203de:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80203e0:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 80203e2:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80203e4:	79eb      	ldrb	r3, [r5, #7]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d0d3      	beq.n	8020392 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80203ea:	4b05      	ldr	r3, [pc, #20]	; (8020400 <dhcp_handle_ack.isra.0+0xac>)
 80203ec:	69d8      	ldr	r0, [r3, #28]
 80203ee:	f7f8 fd17 	bl	8018e20 <lwip_htonl>
 80203f2:	6260      	str	r0, [r4, #36]	; 0x24
 80203f4:	e7cd      	b.n	8020392 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80203f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80203f8:	085b      	lsrs	r3, r3, #1
 80203fa:	e7bc      	b.n	8020376 <dhcp_handle_ack.isra.0+0x22>
 80203fc:	2002dc48 	.word	0x2002dc48
 8020400:	2002dc54 	.word	0x2002dc54

08020404 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8020404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8020408:	4681      	mov	r9, r0
 802040a:	2800      	cmp	r0, #0
 802040c:	f000 8097 	beq.w	802053e <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8020410:	460c      	mov	r4, r1
 8020412:	2900      	cmp	r1, #0
 8020414:	f000 808a 	beq.w	802052c <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8020418:	4616      	mov	r6, r2
 802041a:	f44f 719a 	mov.w	r1, #308	; 0x134
 802041e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020422:	2036      	movs	r0, #54	; 0x36
 8020424:	461f      	mov	r7, r3
 8020426:	f7fa fb61 	bl	801aaec <pbuf_alloc>
  if (p_out == NULL) {
 802042a:	4605      	mov	r5, r0
 802042c:	2800      	cmp	r0, #0
 802042e:	d049      	beq.n	80204c4 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8020430:	8943      	ldrh	r3, [r0, #10]
 8020432:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8020436:	d371      	bcc.n	802051c <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8020438:	2e03      	cmp	r6, #3
 802043a:	d051      	beq.n	80204e0 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 802043c:	79a3      	ldrb	r3, [r4, #6]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d043      	beq.n	80204ca <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8020442:	4b43      	ldr	r3, [pc, #268]	; (8020550 <dhcp_create_msg+0x14c>)
 8020444:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8020446:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802044a:	f44f 729a 	mov.w	r2, #308	; 0x134
 802044e:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8020450:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8020452:	4640      	mov	r0, r8
 8020454:	f003 fe1e 	bl	8024094 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8020458:	2301      	movs	r3, #1
 802045a:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 802045e:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020462:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8020466:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802046a:	6820      	ldr	r0, [r4, #0]
 802046c:	f7f8 fcd8 	bl	8018e20 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020470:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020472:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020476:	d12d      	bne.n	80204d4 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8020478:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802047c:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020480:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8020484:	f109 0434 	add.w	r4, r9, #52	; 0x34
 8020488:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 802048c:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020490:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020492:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020496:	d1f9      	bne.n	802048c <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020498:	2363      	movs	r3, #99	; 0x63
 802049a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 802049e:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80204a2:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 80204a6:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 80204aa:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80204ac:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 80204b0:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 80204b2:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 80204b6:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80204b8:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 80204bc:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 80204c0:	2303      	movs	r3, #3
 80204c2:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 80204c4:	4628      	mov	r0, r5
 80204c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 80204ca:	f004 fe23 	bl	8025114 <rand>
 80204ce:	4b20      	ldr	r3, [pc, #128]	; (8020550 <dhcp_create_msg+0x14c>)
 80204d0:	6018      	str	r0, [r3, #0]
 80204d2:	e7b8      	b.n	8020446 <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80204d4:	1ff3      	subs	r3, r6, #7
 80204d6:	2b01      	cmp	r3, #1
 80204d8:	d9ce      	bls.n	8020478 <dhcp_create_msg+0x74>
 80204da:	2e03      	cmp	r6, #3
 80204dc:	d1d0      	bne.n	8020480 <dhcp_create_msg+0x7c>
 80204de:	e018      	b.n	8020512 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80204e0:	7963      	ldrb	r3, [r4, #5]
 80204e2:	2b03      	cmp	r3, #3
 80204e4:	d0aa      	beq.n	802043c <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 80204e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80204ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80204ee:	2100      	movs	r1, #0
 80204f0:	4640      	mov	r0, r8
 80204f2:	f003 fdcf 	bl	8024094 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80204f6:	2301      	movs	r3, #1
 80204f8:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80204fc:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020500:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8020504:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020508:	6820      	ldr	r0, [r4, #0]
 802050a:	f7f8 fc89 	bl	8018e20 <lwip_htonl>
 802050e:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8020512:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8020514:	3b04      	subs	r3, #4
 8020516:	2b01      	cmp	r3, #1
 8020518:	d8b2      	bhi.n	8020480 <dhcp_create_msg+0x7c>
 802051a:	e7ad      	b.n	8020478 <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 802051c:	4b0d      	ldr	r3, [pc, #52]	; (8020554 <dhcp_create_msg+0x150>)
 802051e:	f240 7271 	movw	r2, #1905	; 0x771
 8020522:	490d      	ldr	r1, [pc, #52]	; (8020558 <dhcp_create_msg+0x154>)
 8020524:	480d      	ldr	r0, [pc, #52]	; (802055c <dhcp_create_msg+0x158>)
 8020526:	f004 fd51 	bl	8024fcc <iprintf>
 802052a:	e785      	b.n	8020438 <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 802052c:	4b09      	ldr	r3, [pc, #36]	; (8020554 <dhcp_create_msg+0x150>)
 802052e:	f240 726a 	movw	r2, #1898	; 0x76a
 8020532:	490b      	ldr	r1, [pc, #44]	; (8020560 <dhcp_create_msg+0x15c>)
 8020534:	4625      	mov	r5, r4
 8020536:	4809      	ldr	r0, [pc, #36]	; (802055c <dhcp_create_msg+0x158>)
 8020538:	f004 fd48 	bl	8024fcc <iprintf>
 802053c:	e7c2      	b.n	80204c4 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 802053e:	4b05      	ldr	r3, [pc, #20]	; (8020554 <dhcp_create_msg+0x150>)
 8020540:	f240 7269 	movw	r2, #1897	; 0x769
 8020544:	4907      	ldr	r1, [pc, #28]	; (8020564 <dhcp_create_msg+0x160>)
 8020546:	464d      	mov	r5, r9
 8020548:	4804      	ldr	r0, [pc, #16]	; (802055c <dhcp_create_msg+0x158>)
 802054a:	f004 fd3f 	bl	8024fcc <iprintf>
 802054e:	e7b9      	b.n	80204c4 <dhcp_create_msg+0xc0>
 8020550:	2002dc7c 	.word	0x2002dc7c
 8020554:	08044bf4 	.word	0x08044bf4
 8020558:	08044d28 	.word	0x08044d28
 802055c:	0802bdc0 	.word	0x0802bdc0
 8020560:	08044d08 	.word	0x08044d08
 8020564:	08044ce8 	.word	0x08044ce8

08020568 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8020568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802056c:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8020570:	b087      	sub	sp, #28
 8020572:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8020574:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8020578:	2b03      	cmp	r3, #3
 802057a:	d007      	beq.n	802058c <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 802057c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802057e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8020580:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8020584:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 8020588:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802058c:	f10d 0316 	add.w	r3, sp, #22
 8020590:	2203      	movs	r2, #3
 8020592:	4651      	mov	r1, sl
 8020594:	4648      	mov	r0, r9
 8020596:	f7ff ff35 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 802059a:	4607      	mov	r7, r0
 802059c:	2800      	cmp	r0, #0
 802059e:	f000 808d 	beq.w	80206bc <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80205a2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80205a6:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80205a8:	f104 0804 	add.w	r8, r4, #4
 80205ac:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80205ae:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80205b0:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80205b4:	f200 80a3 	bhi.w	80206fe <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 80205b8:	2239      	movs	r2, #57	; 0x39
 80205ba:	1c63      	adds	r3, r4, #1
 80205bc:	fa1f fb85 	uxth.w	fp, r5
 80205c0:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80205c2:	b29b      	uxth	r3, r3
 80205c4:	2202      	movs	r2, #2
 80205c6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80205c8:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80205cc:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80205d0:	2b44      	cmp	r3, #68	; 0x44
 80205d2:	f200 80ac 	bhi.w	802072e <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80205d6:	2202      	movs	r2, #2
 80205d8:	1ce3      	adds	r3, r4, #3
 80205da:	fa1f f588 	uxth.w	r5, r8
 80205de:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80205e2:	b29b      	uxth	r3, r3
 80205e4:	2240      	movs	r2, #64	; 0x40
 80205e6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80205e8:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80205ea:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80205ee:	2b44      	cmp	r3, #68	; 0x44
 80205f0:	f200 8095 	bhi.w	802071e <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 80205f4:	1d63      	adds	r3, r4, #5
 80205f6:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80205f8:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 80205fa:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80205fc:	b29b      	uxth	r3, r3
 80205fe:	2204      	movs	r2, #4
 8020600:	b2a4      	uxth	r4, r4
 8020602:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020604:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020608:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802060c:	f7f8 fc08 	bl	8018e20 <lwip_htonl>
 8020610:	4631      	mov	r1, r6
 8020612:	4602      	mov	r2, r0
 8020614:	4620      	mov	r0, r4
 8020616:	f7ff fd55 	bl	80200c4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802061a:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802061c:	4605      	mov	r5, r0
 802061e:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020622:	2b44      	cmp	r3, #68	; 0x44
 8020624:	9303      	str	r3, [sp, #12]
 8020626:	d872      	bhi.n	802070e <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8020628:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 802062a:	2237      	movs	r2, #55	; 0x37
 802062c:	1c6b      	adds	r3, r5, #1
 802062e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8020764 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8020632:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8020634:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8020636:	b29b      	uxth	r3, r3
 8020638:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802063a:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802063c:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8020640:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020642:	493f      	ldr	r1, [pc, #252]	; (8020740 <dhcp_reboot.isra.0+0x1d8>)
 8020644:	4b3f      	ldr	r3, [pc, #252]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020646:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802064a:	d80c      	bhi.n	8020666 <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 802064c:	1c62      	adds	r2, r4, #1
 802064e:	f806 b004 	strb.w	fp, [r6, r4]
 8020652:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020654:	4a3c      	ldr	r2, [pc, #240]	; (8020748 <dhcp_reboot.isra.0+0x1e0>)
 8020656:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020658:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802065c:	d00b      	beq.n	8020676 <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802065e:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020660:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020664:	d9f2      	bls.n	802064c <dhcp_reboot.isra.0+0xe4>
 8020666:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802066a:	4838      	ldr	r0, [pc, #224]	; (802074c <dhcp_reboot.isra.0+0x1e4>)
 802066c:	f004 fcae 	bl	8024fcc <iprintf>
 8020670:	4b34      	ldr	r3, [pc, #208]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
 8020672:	4933      	ldr	r1, [pc, #204]	; (8020740 <dhcp_reboot.isra.0+0x1d8>)
 8020674:	e7ea      	b.n	802064c <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8020676:	1de8      	adds	r0, r5, #7
 8020678:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802067c:	22ff      	movs	r2, #255	; 0xff
 802067e:	b280      	uxth	r0, r0
 8020680:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020682:	2843      	cmp	r0, #67	; 0x43
 8020684:	d808      	bhi.n	8020698 <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8020686:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 802068a:	4430      	add	r0, r6
 802068c:	2100      	movs	r1, #0
 802068e:	b2ad      	uxth	r5, r5
 8020690:	1c6a      	adds	r2, r5, #1
 8020692:	f003 fcff 	bl	8024094 <memset>
 8020696:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020698:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802069c:	4638      	mov	r0, r7
 802069e:	b289      	uxth	r1, r1
 80206a0:	f7fa fade 	bl	801ac60 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80206a4:	482a      	ldr	r0, [pc, #168]	; (8020750 <dhcp_reboot.isra.0+0x1e8>)
 80206a6:	2343      	movs	r3, #67	; 0x43
 80206a8:	4a2a      	ldr	r2, [pc, #168]	; (8020754 <dhcp_reboot.isra.0+0x1ec>)
 80206aa:	6800      	ldr	r0, [r0, #0]
 80206ac:	4639      	mov	r1, r7
 80206ae:	f8cd 9000 	str.w	r9, [sp]
 80206b2:	f7ff fba5 	bl	801fe00 <udp_sendto_if>
    pbuf_free(p_out);
 80206b6:	4638      	mov	r0, r7
 80206b8:	f7fa fbce 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 80206bc:	f89a 3006 	ldrb.w	r3, [sl, #6]
 80206c0:	2bff      	cmp	r3, #255	; 0xff
 80206c2:	d016      	beq.n	80206f2 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 80206c4:	3301      	adds	r3, #1
 80206c6:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80206c8:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80206ca:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80206ce:	d810      	bhi.n	80206f2 <dhcp_reboot.isra.0+0x18a>
 80206d0:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80206d4:	4a20      	ldr	r2, [pc, #128]	; (8020758 <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80206d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80206da:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80206dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80206e0:	b29b      	uxth	r3, r3
 80206e2:	fba2 2303 	umull	r2, r3, r2, r3
 80206e6:	095b      	lsrs	r3, r3, #5
 80206e8:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 80206ec:	b007      	add	sp, #28
 80206ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 80206f2:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80206f4:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 80206f8:	b007      	add	sp, #28
 80206fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80206fe:	4b11      	ldr	r3, [pc, #68]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
 8020700:	f240 529a 	movw	r2, #1434	; 0x59a
 8020704:	4915      	ldr	r1, [pc, #84]	; (802075c <dhcp_reboot.isra.0+0x1f4>)
 8020706:	4811      	ldr	r0, [pc, #68]	; (802074c <dhcp_reboot.isra.0+0x1e4>)
 8020708:	f004 fc60 	bl	8024fcc <iprintf>
 802070c:	e754      	b.n	80205b8 <dhcp_reboot.isra.0+0x50>
 802070e:	4b0d      	ldr	r3, [pc, #52]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
 8020710:	f240 529a 	movw	r2, #1434	; 0x59a
 8020714:	4911      	ldr	r1, [pc, #68]	; (802075c <dhcp_reboot.isra.0+0x1f4>)
 8020716:	480d      	ldr	r0, [pc, #52]	; (802074c <dhcp_reboot.isra.0+0x1e4>)
 8020718:	f004 fc58 	bl	8024fcc <iprintf>
 802071c:	e784      	b.n	8020628 <dhcp_reboot.isra.0+0xc0>
 802071e:	4b09      	ldr	r3, [pc, #36]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
 8020720:	f240 529a 	movw	r2, #1434	; 0x59a
 8020724:	490d      	ldr	r1, [pc, #52]	; (802075c <dhcp_reboot.isra.0+0x1f4>)
 8020726:	4809      	ldr	r0, [pc, #36]	; (802074c <dhcp_reboot.isra.0+0x1e4>)
 8020728:	f004 fc50 	bl	8024fcc <iprintf>
 802072c:	e762      	b.n	80205f4 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802072e:	4b05      	ldr	r3, [pc, #20]	; (8020744 <dhcp_reboot.isra.0+0x1dc>)
 8020730:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020734:	490a      	ldr	r1, [pc, #40]	; (8020760 <dhcp_reboot.isra.0+0x1f8>)
 8020736:	4805      	ldr	r0, [pc, #20]	; (802074c <dhcp_reboot.isra.0+0x1e4>)
 8020738:	f004 fc48 	bl	8024fcc <iprintf>
 802073c:	e74b      	b.n	80205d6 <dhcp_reboot.isra.0+0x6e>
 802073e:	bf00      	nop
 8020740:	08044de8 	.word	0x08044de8
 8020744:	08044bf4 	.word	0x08044bf4
 8020748:	08044f70 	.word	0x08044f70
 802074c:	0802bdc0 	.word	0x0802bdc0
 8020750:	2002dc40 	.word	0x2002dc40
 8020754:	080452ac 	.word	0x080452ac
 8020758:	10624dd3 	.word	0x10624dd3
 802075c:	08044d68 	.word	0x08044d68
 8020760:	08044dac 	.word	0x08044dac
 8020764:	08044f6d 	.word	0x08044f6d

08020768 <dhcp_discover>:
{
 8020768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802076c:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 802076e:	2300      	movs	r3, #0
{
 8020770:	b087      	sub	sp, #28
 8020772:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020774:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020776:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8020778:	2a06      	cmp	r2, #6
 802077a:	d003      	beq.n	8020784 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 802077c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 802077e:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8020780:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8020782:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8020784:	f10d 0316 	add.w	r3, sp, #22
 8020788:	2201      	movs	r2, #1
 802078a:	4639      	mov	r1, r7
 802078c:	4658      	mov	r0, fp
 802078e:	f7ff fe39 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 8020792:	4605      	mov	r5, r0
 8020794:	2800      	cmp	r0, #0
 8020796:	f000 8081 	beq.w	802089c <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802079a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802079e:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207a0:	f104 0804 	add.w	r8, r4, #4
 80207a4:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207a8:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207aa:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80207ae:	f200 809a 	bhi.w	80208e6 <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 80207b2:	2239      	movs	r2, #57	; 0x39
 80207b4:	1c63      	adds	r3, r4, #1
 80207b6:	fa1f f189 	uxth.w	r1, r9
 80207ba:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80207bc:	b29b      	uxth	r3, r3
 80207be:	2202      	movs	r2, #2
 80207c0:	9103      	str	r1, [sp, #12]
 80207c2:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80207c4:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80207c6:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80207ca:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207cc:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80207d0:	f200 8091 	bhi.w	80208f6 <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80207d4:	1ce3      	adds	r3, r4, #3
 80207d6:	fa1f f988 	uxth.w	r9, r8
 80207da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80207de:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80207e0:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80207e2:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80207e4:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207e8:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80207ec:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207f0:	2b44      	cmp	r3, #68	; 0x44
 80207f2:	d870      	bhi.n	80208d6 <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 80207f4:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 80207f8:	2237      	movs	r2, #55	; 0x37
 80207fa:	1d63      	adds	r3, r4, #5
 80207fc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8020930 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8020800:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020804:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020808:	b29b      	uxth	r3, r3
 802080a:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802080c:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020810:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020814:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020816:	493c      	ldr	r1, [pc, #240]	; (8020908 <dhcp_discover+0x1a0>)
 8020818:	4b3c      	ldr	r3, [pc, #240]	; (802090c <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802081a:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802081e:	d80f      	bhi.n	8020840 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8020820:	f108 0201 	add.w	r2, r8, #1
 8020824:	f806 9008 	strb.w	r9, [r6, r8]
 8020828:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802082c:	4a38      	ldr	r2, [pc, #224]	; (8020910 <dhcp_discover+0x1a8>)
 802082e:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020830:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020834:	d00c      	beq.n	8020850 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020836:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802083a:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802083e:	d9ef      	bls.n	8020820 <dhcp_discover+0xb8>
 8020840:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020844:	4833      	ldr	r0, [pc, #204]	; (8020914 <dhcp_discover+0x1ac>)
 8020846:	f004 fbc1 	bl	8024fcc <iprintf>
 802084a:	4b30      	ldr	r3, [pc, #192]	; (802090c <dhcp_discover+0x1a4>)
 802084c:	492e      	ldr	r1, [pc, #184]	; (8020908 <dhcp_discover+0x1a0>)
 802084e:	e7e7      	b.n	8020820 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8020850:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8020854:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020858:	22ff      	movs	r2, #255	; 0xff
 802085a:	b280      	uxth	r0, r0
 802085c:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802085e:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020860:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020862:	d808      	bhi.n	8020876 <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8020864:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8020868:	4430      	add	r0, r6
 802086a:	2100      	movs	r1, #0
 802086c:	b2a4      	uxth	r4, r4
 802086e:	1c62      	adds	r2, r4, #1
 8020870:	f003 fc10 	bl	8024094 <memset>
 8020874:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020876:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802087a:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802087c:	4c26      	ldr	r4, [pc, #152]	; (8020918 <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802087e:	b289      	uxth	r1, r1
 8020880:	f7fa f9ee 	bl	801ac60 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020884:	4825      	ldr	r0, [pc, #148]	; (802091c <dhcp_discover+0x1b4>)
 8020886:	2343      	movs	r3, #67	; 0x43
 8020888:	4a25      	ldr	r2, [pc, #148]	; (8020920 <dhcp_discover+0x1b8>)
 802088a:	6800      	ldr	r0, [r0, #0]
 802088c:	4629      	mov	r1, r5
 802088e:	e9cd b400 	strd	fp, r4, [sp]
 8020892:	f7ff fa01 	bl	801fc98 <udp_sendto_if_src>
    pbuf_free(p_out);
 8020896:	4628      	mov	r0, r5
 8020898:	f7fa fade 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 802089c:	79bb      	ldrb	r3, [r7, #6]
 802089e:	2bff      	cmp	r3, #255	; 0xff
 80208a0:	d013      	beq.n	80208ca <dhcp_discover+0x162>
    dhcp->tries++;
 80208a2:	3301      	adds	r3, #1
 80208a4:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80208a6:	2a05      	cmp	r2, #5
    dhcp->tries++;
 80208a8:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80208aa:	d80e      	bhi.n	80208ca <dhcp_discover+0x162>
 80208ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208b0:	491c      	ldr	r1, [pc, #112]	; (8020924 <dhcp_discover+0x1bc>)
}
 80208b2:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80208b4:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208b6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	fba1 2303 	umull	r2, r3, r1, r3
 80208c0:	095b      	lsrs	r3, r3, #5
 80208c2:	813b      	strh	r3, [r7, #8]
}
 80208c4:	b007      	add	sp, #28
 80208c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 80208ca:	2378      	movs	r3, #120	; 0x78
}
 80208cc:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208ce:	813b      	strh	r3, [r7, #8]
}
 80208d0:	b007      	add	sp, #28
 80208d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80208d6:	4b0d      	ldr	r3, [pc, #52]	; (802090c <dhcp_discover+0x1a4>)
 80208d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80208dc:	4912      	ldr	r1, [pc, #72]	; (8020928 <dhcp_discover+0x1c0>)
 80208de:	480d      	ldr	r0, [pc, #52]	; (8020914 <dhcp_discover+0x1ac>)
 80208e0:	f004 fb74 	bl	8024fcc <iprintf>
 80208e4:	e786      	b.n	80207f4 <dhcp_discover+0x8c>
 80208e6:	4b09      	ldr	r3, [pc, #36]	; (802090c <dhcp_discover+0x1a4>)
 80208e8:	f240 529a 	movw	r2, #1434	; 0x59a
 80208ec:	490e      	ldr	r1, [pc, #56]	; (8020928 <dhcp_discover+0x1c0>)
 80208ee:	4809      	ldr	r0, [pc, #36]	; (8020914 <dhcp_discover+0x1ac>)
 80208f0:	f004 fb6c 	bl	8024fcc <iprintf>
 80208f4:	e75d      	b.n	80207b2 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80208f6:	4b05      	ldr	r3, [pc, #20]	; (802090c <dhcp_discover+0x1a4>)
 80208f8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80208fc:	490b      	ldr	r1, [pc, #44]	; (802092c <dhcp_discover+0x1c4>)
 80208fe:	4805      	ldr	r0, [pc, #20]	; (8020914 <dhcp_discover+0x1ac>)
 8020900:	f004 fb64 	bl	8024fcc <iprintf>
 8020904:	e766      	b.n	80207d4 <dhcp_discover+0x6c>
 8020906:	bf00      	nop
 8020908:	08044de8 	.word	0x08044de8
 802090c:	08044bf4 	.word	0x08044bf4
 8020910:	08044f70 	.word	0x08044f70
 8020914:	0802bdc0 	.word	0x0802bdc0
 8020918:	080452a8 	.word	0x080452a8
 802091c:	2002dc40 	.word	0x2002dc40
 8020920:	080452ac 	.word	0x080452ac
 8020924:	10624dd3 	.word	0x10624dd3
 8020928:	08044d68 	.word	0x08044d68
 802092c:	08044dac 	.word	0x08044dac
 8020930:	08044f6d 	.word	0x08044f6d

08020934 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020934:	2800      	cmp	r0, #0
 8020936:	f000 8112 	beq.w	8020b5e <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 802093a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 802093e:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8020940:	b087      	sub	sp, #28
 8020942:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020944:	2e00      	cmp	r6, #0
 8020946:	f000 8111 	beq.w	8020b6c <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 802094a:	7973      	ldrb	r3, [r6, #5]
 802094c:	2b01      	cmp	r3, #1
 802094e:	d004      	beq.n	802095a <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8020950:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020952:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8020954:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 8020956:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8020958:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802095a:	f10d 0316 	add.w	r3, sp, #22
 802095e:	2203      	movs	r2, #3
 8020960:	4631      	mov	r1, r6
 8020962:	4658      	mov	r0, fp
 8020964:	f7ff fd4e 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 8020968:	4605      	mov	r5, r0
 802096a:	2800      	cmp	r0, #0
 802096c:	f000 80b4 	beq.w	8020ad8 <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020970:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8020974:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020976:	f107 0804 	add.w	r8, r7, #4
 802097a:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802097e:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020980:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020984:	f200 80cb 	bhi.w	8020b1e <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 8020988:	2239      	movs	r2, #57	; 0x39
 802098a:	1c7b      	adds	r3, r7, #1
 802098c:	fa1f f189 	uxth.w	r1, r9
 8020990:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020992:	b29b      	uxth	r3, r3
 8020994:	2202      	movs	r2, #2
 8020996:	9103      	str	r1, [sp, #12]
 8020998:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802099a:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802099c:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80209a0:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80209a2:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80209a6:	f200 80c2 	bhi.w	8020b2e <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80209aa:	1cfb      	adds	r3, r7, #3
 80209ac:	fa1f f988 	uxth.w	r9, r8
 80209b0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80209b4:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80209b6:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80209b8:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80209ba:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209be:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80209c2:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209c6:	2b44      	cmp	r3, #68	; 0x44
 80209c8:	f200 80b9 	bhi.w	8020b3e <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 80209cc:	1d7b      	adds	r3, r7, #5
 80209ce:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80209d0:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 80209d2:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 80209d6:	b29b      	uxth	r3, r3
 80209d8:	2204      	movs	r2, #4
 80209da:	b2bf      	uxth	r7, r7
 80209dc:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209de:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80209e0:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209e4:	f7f8 fa1c 	bl	8018e20 <lwip_htonl>
 80209e8:	4621      	mov	r1, r4
 80209ea:	4602      	mov	r2, r0
 80209ec:	4638      	mov	r0, r7
 80209ee:	f7ff fb69 	bl	80200c4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209f2:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209f4:	4607      	mov	r7, r0
 80209f6:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209fa:	2b44      	cmp	r3, #68	; 0x44
 80209fc:	f200 80a7 	bhi.w	8020b4e <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8020a00:	2236      	movs	r2, #54	; 0x36
 8020a02:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8020a04:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 8020a08:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020a0a:	b29b      	uxth	r3, r3
 8020a0c:	2204      	movs	r2, #4
 8020a0e:	fa1f f888 	uxth.w	r8, r8
 8020a12:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020a14:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020a16:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020a1a:	f7f8 fa01 	bl	8018e20 <lwip_htonl>
 8020a1e:	4621      	mov	r1, r4
 8020a20:	4602      	mov	r2, r0
 8020a22:	4640      	mov	r0, r8
 8020a24:	f7ff fb4e 	bl	80200c4 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020a28:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020a2a:	4680      	mov	r8, r0
 8020a2c:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020a30:	2b44      	cmp	r3, #68	; 0x44
 8020a32:	9303      	str	r3, [sp, #12]
 8020a34:	d86b      	bhi.n	8020b0e <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 8020a36:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 8020a3a:	2237      	movs	r2, #55	; 0x37
 8020a3c:	f108 0301 	add.w	r3, r8, #1
 8020a40:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8020bb0 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8020a44:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 8020a46:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 8020a4a:	b29b      	uxth	r3, r3
 8020a4c:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a4e:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a50:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020a54:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a56:	494a      	ldr	r1, [pc, #296]	; (8020b80 <dhcp_select.isra.0+0x24c>)
 8020a58:	4b4a      	ldr	r3, [pc, #296]	; (8020b84 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a5a:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a5e:	d80c      	bhi.n	8020a7a <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8020a60:	1c7a      	adds	r2, r7, #1
 8020a62:	f804 a007 	strb.w	sl, [r4, r7]
 8020a66:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a68:	4a47      	ldr	r2, [pc, #284]	; (8020b88 <dhcp_select.isra.0+0x254>)
 8020a6a:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a6c:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a70:	d00b      	beq.n	8020a8a <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a72:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a74:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a78:	d9f2      	bls.n	8020a60 <dhcp_select.isra.0+0x12c>
 8020a7a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020a7e:	4843      	ldr	r0, [pc, #268]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020a80:	f004 faa4 	bl	8024fcc <iprintf>
 8020a84:	4b3f      	ldr	r3, [pc, #252]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020a86:	493e      	ldr	r1, [pc, #248]	; (8020b80 <dhcp_select.isra.0+0x24c>)
 8020a88:	e7ea      	b.n	8020a60 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 8020a8a:	f108 0007 	add.w	r0, r8, #7
 8020a8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020a92:	22ff      	movs	r2, #255	; 0xff
 8020a94:	b280      	uxth	r0, r0
 8020a96:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020a98:	2843      	cmp	r0, #67	; 0x43
 8020a9a:	d80a      	bhi.n	8020ab2 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8020a9c:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8020aa0:	4420      	add	r0, r4
 8020aa2:	2100      	movs	r1, #0
 8020aa4:	fa1f f888 	uxth.w	r8, r8
 8020aa8:	f108 0201 	add.w	r2, r8, #1
 8020aac:	f003 faf2 	bl	8024094 <memset>
 8020ab0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020ab2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020ab6:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020ab8:	4c35      	ldr	r4, [pc, #212]	; (8020b90 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020aba:	b289      	uxth	r1, r1
 8020abc:	f7fa f8d0 	bl	801ac60 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020ac0:	4834      	ldr	r0, [pc, #208]	; (8020b94 <dhcp_select.isra.0+0x260>)
 8020ac2:	2343      	movs	r3, #67	; 0x43
 8020ac4:	4a34      	ldr	r2, [pc, #208]	; (8020b98 <dhcp_select.isra.0+0x264>)
 8020ac6:	6800      	ldr	r0, [r0, #0]
 8020ac8:	4629      	mov	r1, r5
 8020aca:	e9cd b400 	strd	fp, r4, [sp]
 8020ace:	f7ff f8e3 	bl	801fc98 <udp_sendto_if_src>
    pbuf_free(p_out);
 8020ad2:	4628      	mov	r0, r5
 8020ad4:	f7fa f9c0 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 8020ad8:	79b3      	ldrb	r3, [r6, #6]
 8020ada:	2bff      	cmp	r3, #255	; 0xff
 8020adc:	d012      	beq.n	8020b04 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8020ade:	3301      	adds	r3, #1
 8020ae0:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020ae2:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020ae4:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020ae6:	d80d      	bhi.n	8020b04 <dhcp_select.isra.0+0x1d0>
 8020ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020aec:	492b      	ldr	r1, [pc, #172]	; (8020b9c <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020aee:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020af0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020af4:	b29b      	uxth	r3, r3
 8020af6:	fba1 2303 	umull	r2, r3, r1, r3
 8020afa:	095b      	lsrs	r3, r3, #5
 8020afc:	8133      	strh	r3, [r6, #8]
}
 8020afe:	b007      	add	sp, #28
 8020b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020b04:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020b06:	8133      	strh	r3, [r6, #8]
}
 8020b08:	b007      	add	sp, #28
 8020b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b0e:	4b1d      	ldr	r3, [pc, #116]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b10:	f240 529a 	movw	r2, #1434	; 0x59a
 8020b14:	4922      	ldr	r1, [pc, #136]	; (8020ba0 <dhcp_select.isra.0+0x26c>)
 8020b16:	481d      	ldr	r0, [pc, #116]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b18:	f004 fa58 	bl	8024fcc <iprintf>
 8020b1c:	e78b      	b.n	8020a36 <dhcp_select.isra.0+0x102>
 8020b1e:	4b19      	ldr	r3, [pc, #100]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b20:	f240 529a 	movw	r2, #1434	; 0x59a
 8020b24:	491e      	ldr	r1, [pc, #120]	; (8020ba0 <dhcp_select.isra.0+0x26c>)
 8020b26:	4819      	ldr	r0, [pc, #100]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b28:	f004 fa50 	bl	8024fcc <iprintf>
 8020b2c:	e72c      	b.n	8020988 <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020b2e:	4b15      	ldr	r3, [pc, #84]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b30:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020b34:	491b      	ldr	r1, [pc, #108]	; (8020ba4 <dhcp_select.isra.0+0x270>)
 8020b36:	4815      	ldr	r0, [pc, #84]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b38:	f004 fa48 	bl	8024fcc <iprintf>
 8020b3c:	e735      	b.n	80209aa <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b3e:	4b11      	ldr	r3, [pc, #68]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b40:	f240 529a 	movw	r2, #1434	; 0x59a
 8020b44:	4916      	ldr	r1, [pc, #88]	; (8020ba0 <dhcp_select.isra.0+0x26c>)
 8020b46:	4811      	ldr	r0, [pc, #68]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b48:	f004 fa40 	bl	8024fcc <iprintf>
 8020b4c:	e73e      	b.n	80209cc <dhcp_select.isra.0+0x98>
 8020b4e:	4b0d      	ldr	r3, [pc, #52]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b50:	f240 529a 	movw	r2, #1434	; 0x59a
 8020b54:	4912      	ldr	r1, [pc, #72]	; (8020ba0 <dhcp_select.isra.0+0x26c>)
 8020b56:	480d      	ldr	r0, [pc, #52]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b58:	f004 fa38 	bl	8024fcc <iprintf>
 8020b5c:	e750      	b.n	8020a00 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020b5e:	4b09      	ldr	r3, [pc, #36]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b60:	f240 1277 	movw	r2, #375	; 0x177
 8020b64:	4910      	ldr	r1, [pc, #64]	; (8020ba8 <dhcp_select.isra.0+0x274>)
 8020b66:	4809      	ldr	r0, [pc, #36]	; (8020b8c <dhcp_select.isra.0+0x258>)
 8020b68:	f004 ba30 	b.w	8024fcc <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020b6c:	4b05      	ldr	r3, [pc, #20]	; (8020b84 <dhcp_select.isra.0+0x250>)
 8020b6e:	f240 1279 	movw	r2, #377	; 0x179
 8020b72:	490e      	ldr	r1, [pc, #56]	; (8020bac <dhcp_select.isra.0+0x278>)
 8020b74:	4805      	ldr	r0, [pc, #20]	; (8020b8c <dhcp_select.isra.0+0x258>)
}
 8020b76:	b007      	add	sp, #28
 8020b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020b7c:	f004 ba26 	b.w	8024fcc <iprintf>
 8020b80:	08044de8 	.word	0x08044de8
 8020b84:	08044bf4 	.word	0x08044bf4
 8020b88:	08044f70 	.word	0x08044f70
 8020b8c:	0802bdc0 	.word	0x0802bdc0
 8020b90:	080452a8 	.word	0x080452a8
 8020b94:	2002dc40 	.word	0x2002dc40
 8020b98:	080452ac 	.word	0x080452ac
 8020b9c:	10624dd3 	.word	0x10624dd3
 8020ba0:	08044d68 	.word	0x08044d68
 8020ba4:	08044dac 	.word	0x08044dac
 8020ba8:	08044e20 	.word	0x08044e20
 8020bac:	08044e3c 	.word	0x08044e3c
 8020bb0:	08044f6d 	.word	0x08044f6d

08020bb4 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8020bb4:	4ba5      	ldr	r3, [pc, #660]	; (8020e4c <dhcp_recv+0x298>)
{
 8020bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8020bba:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8020bbe:	b08b      	sub	sp, #44	; 0x2c
 8020bc0:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020bc2:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8020bc6:	f1b9 0f00 	cmp.w	r9, #0
 8020bca:	d04b      	beq.n	8020c64 <dhcp_recv+0xb0>
 8020bcc:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d047      	beq.n	8020c64 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8020bd4:	8953      	ldrh	r3, [r2, #10]
 8020bd6:	2b2b      	cmp	r3, #43	; 0x2b
 8020bd8:	d944      	bls.n	8020c64 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8020bda:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8020bdc:	782b      	ldrb	r3, [r5, #0]
 8020bde:	2b02      	cmp	r3, #2
 8020be0:	d140      	bne.n	8020c64 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020be2:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8020be6:	b186      	cbz	r6, 8020c0a <dhcp_recv+0x56>
 8020be8:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8020bec:	f105 021c 	add.w	r2, r5, #28
 8020bf0:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020bf6:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020bf8:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020bfc:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020bfe:	4284      	cmp	r4, r0
 8020c00:	d130      	bne.n	8020c64 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020c02:	2b06      	cmp	r3, #6
 8020c04:	d001      	beq.n	8020c0a <dhcp_recv+0x56>
 8020c06:	42b3      	cmp	r3, r6
 8020c08:	d3f3      	bcc.n	8020bf2 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8020c0a:	6868      	ldr	r0, [r5, #4]
 8020c0c:	f7f8 f908 	bl	8018e20 <lwip_htonl>
 8020c10:	f8d9 3000 	ldr.w	r3, [r9]
 8020c14:	4298      	cmp	r0, r3
 8020c16:	d125      	bne.n	8020c64 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8020c18:	4b8d      	ldr	r3, [pc, #564]	; (8020e50 <dhcp_recv+0x29c>)
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	605a      	str	r2, [r3, #4]
 8020c1e:	811a      	strh	r2, [r3, #8]
 8020c20:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8020c22:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8020c26:	2b2b      	cmp	r3, #43	; 0x2b
 8020c28:	d91c      	bls.n	8020c64 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 8020c2a:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8020c2e:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8020c30:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8020c34:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 8020c38:	4693      	mov	fp, r2
 8020c3a:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020c3e:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8020c42:	e000      	b.n	8020c46 <dhcp_recv+0x92>
 8020c44:	896b      	ldrh	r3, [r5, #10]
 8020c46:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 8020c48:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8020c4c:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8020c50:	d80e      	bhi.n	8020c70 <dhcp_recv+0xbc>
    q = q->next;
 8020c52:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8020c54:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8020c58:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8020c5c:	2d00      	cmp	r5, #0
 8020c5e:	d1f1      	bne.n	8020c44 <dhcp_recv+0x90>
 8020c60:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8020c64:	4658      	mov	r0, fp
}
 8020c66:	b00b      	add	sp, #44	; 0x2c
 8020c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8020c6c:	f7fa b8f4 	b.w	801ae58 <pbuf_free>
  options = (u8_t *)q->payload;
 8020c70:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020c72:	45d8      	cmp	r8, fp
 8020c74:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 8020c78:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020c7a:	f080 8140 	bcs.w	8020efe <dhcp_recv+0x34a>
 8020c7e:	9c02      	ldr	r4, [sp, #8]
 8020c80:	9b01      	ldr	r3, [sp, #4]
 8020c82:	5d1a      	ldrb	r2, [r3, r4]
 8020c84:	2aff      	cmp	r2, #255	; 0xff
 8020c86:	f000 813a 	beq.w	8020efe <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 8020c8a:	1ca7      	adds	r7, r4, #2
 8020c8c:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8020c8e:	42bc      	cmp	r4, r7
 8020c90:	d8e6      	bhi.n	8020c60 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8020c92:	1c61      	adds	r1, r4, #1
 8020c94:	896b      	ldrh	r3, [r5, #10]
 8020c96:	4299      	cmp	r1, r3
 8020c98:	f280 8129 	bge.w	8020eee <dhcp_recv+0x33a>
      len = options[offset + 1];
 8020c9c:	9801      	ldr	r0, [sp, #4]
 8020c9e:	4420      	add	r0, r4
 8020ca0:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8020ca2:	2a3b      	cmp	r2, #59	; 0x3b
 8020ca4:	d83e      	bhi.n	8020d24 <dhcp_recv+0x170>
 8020ca6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8020caa:	0040      	.short	0x0040
 8020cac:	003d0053 	.word	0x003d0053
 8020cb0:	003d00b4 	.word	0x003d00b4
 8020cb4:	009f003d 	.word	0x009f003d
 8020cb8:	003d003d 	.word	0x003d003d
 8020cbc:	003d003d 	.word	0x003d003d
 8020cc0:	003d003d 	.word	0x003d003d
 8020cc4:	003d003d 	.word	0x003d003d
 8020cc8:	003d003d 	.word	0x003d003d
 8020ccc:	003d003d 	.word	0x003d003d
 8020cd0:	003d003d 	.word	0x003d003d
 8020cd4:	003d003d 	.word	0x003d003d
 8020cd8:	003d003d 	.word	0x003d003d
 8020cdc:	003d003d 	.word	0x003d003d
 8020ce0:	003d003d 	.word	0x003d003d
 8020ce4:	003d003d 	.word	0x003d003d
 8020ce8:	003d003d 	.word	0x003d003d
 8020cec:	003d003d 	.word	0x003d003d
 8020cf0:	003d003d 	.word	0x003d003d
 8020cf4:	003d003d 	.word	0x003d003d
 8020cf8:	003d003d 	.word	0x003d003d
 8020cfc:	003d003d 	.word	0x003d003d
 8020d00:	003d003d 	.word	0x003d003d
 8020d04:	003d003d 	.word	0x003d003d
 8020d08:	003d003d 	.word	0x003d003d
 8020d0c:	003d003d 	.word	0x003d003d
 8020d10:	00f80115 	.word	0x00f80115
 8020d14:	00df0109 	.word	0x00df0109
 8020d18:	003d003d 	.word	0x003d003d
 8020d1c:	00ec003d 	.word	0x00ec003d
 8020d20:	00c3      	.short	0x00c3
 8020d22:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8020d24:	2a00      	cmp	r2, #0
 8020d26:	f040 82a2 	bne.w	802126e <dhcp_recv+0x6ba>
      offset++;
 8020d2a:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8020d2c:	429c      	cmp	r4, r3
 8020d2e:	f0c0 80e3 	bcc.w	8020ef8 <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8020d32:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8020d34:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 8020d38:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8020d3a:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8020d3e:	455c      	cmp	r4, fp
 8020d40:	d28e      	bcs.n	8020c60 <dhcp_recv+0xac>
        q = q->next;
 8020d42:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020d44:	2d00      	cmp	r5, #0
 8020d46:	f000 81e1 	beq.w	802110c <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 8020d4a:	686b      	ldr	r3, [r5, #4]
 8020d4c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020d4e:	e797      	b.n	8020c80 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020d50:	2e04      	cmp	r6, #4
 8020d52:	f040 81b5 	bne.w	80210c0 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 8020d56:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020d5a:	429c      	cmp	r4, r3
 8020d5c:	dc80      	bgt.n	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d5e:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8020d60:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8020d64:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 8020d66:	2300      	movs	r3, #0
 8020d68:	9405      	str	r4, [sp, #20]
 8020d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8020d6c:	4b38      	ldr	r3, [pc, #224]	; (8020e50 <dhcp_recv+0x29c>)
 8020d6e:	eb03 0908 	add.w	r9, r3, r8
 8020d72:	4b38      	ldr	r3, [pc, #224]	; (8020e54 <dhcp_recv+0x2a0>)
 8020d74:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8020d78:	e02b      	b.n	8020dd2 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8020d7a:	f899 3000 	ldrb.w	r3, [r9]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	f040 81a8 	bne.w	80210d4 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8020d84:	2e04      	cmp	r6, #4
 8020d86:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020d88:	463b      	mov	r3, r7
 8020d8a:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8020d8c:	bf28      	it	cs
 8020d8e:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020d90:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8020d92:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020d94:	4622      	mov	r2, r4
 8020d96:	f7fa f903 	bl	801afa0 <pbuf_copy_partial>
 8020d9a:	4284      	cmp	r4, r0
 8020d9c:	f47f af60 	bne.w	8020c60 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8020da0:	2e04      	cmp	r6, #4
 8020da2:	f240 819a 	bls.w	80210da <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020da6:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 8020daa:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020dae:	f040 81a3 	bne.w	80210f8 <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8020db2:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020db4:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 8020db6:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 8020db8:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020dbc:	f7f8 f830 	bl	8018e20 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8020dc0:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8020dc2:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020dc4:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 8020dc8:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 8020dca:	429f      	cmp	r7, r3
            goto decode_next;
 8020dcc:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8020dce:	f63f af47 	bhi.w	8020c60 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8020dd2:	f1b8 0f09 	cmp.w	r8, #9
 8020dd6:	d9d0      	bls.n	8020d7a <dhcp_recv+0x1c6>
 8020dd8:	4b1f      	ldr	r3, [pc, #124]	; (8020e58 <dhcp_recv+0x2a4>)
 8020dda:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8020dde:	491f      	ldr	r1, [pc, #124]	; (8020e5c <dhcp_recv+0x2a8>)
 8020de0:	481f      	ldr	r0, [pc, #124]	; (8020e60 <dhcp_recv+0x2ac>)
 8020de2:	f004 f8f3 	bl	8024fcc <iprintf>
 8020de6:	e7c8      	b.n	8020d7a <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020de8:	07b2      	lsls	r2, r6, #30
 8020dea:	f040 81ae 	bne.w	802114a <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8020dee:	2e08      	cmp	r6, #8
 8020df0:	4632      	mov	r2, r6
 8020df2:	bf28      	it	cs
 8020df4:	2208      	movcs	r2, #8
 8020df6:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020df8:	42b2      	cmp	r2, r6
 8020dfa:	f240 8241 	bls.w	8021280 <dhcp_recv+0x6cc>
 8020dfe:	4b16      	ldr	r3, [pc, #88]	; (8020e58 <dhcp_recv+0x2a4>)
 8020e00:	f240 623c 	movw	r2, #1596	; 0x63c
 8020e04:	4917      	ldr	r1, [pc, #92]	; (8020e64 <dhcp_recv+0x2b0>)
 8020e06:	4816      	ldr	r0, [pc, #88]	; (8020e60 <dhcp_recv+0x2ac>)
 8020e08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020e0c:	f004 f8de 	bl	8024fcc <iprintf>
 8020e10:	e728      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020e12:	2e03      	cmp	r6, #3
 8020e14:	f240 814a 	bls.w	80210ac <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 8020e18:	4434      	add	r4, r6
 8020e1a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020e1e:	429c      	cmp	r4, r3
 8020e20:	f73f af1e 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020e24:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8020e26:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8020e2a:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 8020e2c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020e2e:	e79a      	b.n	8020d66 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020e30:	2e04      	cmp	r6, #4
 8020e32:	f040 8131 	bne.w	8021098 <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 8020e36:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020e3a:	429c      	cmp	r4, r3
 8020e3c:	f73f af10 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020e40:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8020e42:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 8020e46:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020e48:	e78d      	b.n	8020d66 <dhcp_recv+0x1b2>
 8020e4a:	bf00      	nop
 8020e4c:	2001ec54 	.word	0x2001ec54
 8020e50:	2002dc48 	.word	0x2002dc48
 8020e54:	2002dc54 	.word	0x2002dc54
 8020e58:	08044bf4 	.word	0x08044bf4
 8020e5c:	08044eac 	.word	0x08044eac
 8020e60:	0802bdc0 	.word	0x0802bdc0
 8020e64:	08044e64 	.word	0x08044e64
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020e68:	2e04      	cmp	r6, #4
 8020e6a:	f040 80ed 	bne.w	8021048 <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8020e6e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020e72:	429c      	cmp	r4, r3
 8020e74:	f73f aef4 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020e78:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8020e7a:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8020e7e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020e80:	e771      	b.n	8020d66 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020e82:	2e04      	cmp	r6, #4
 8020e84:	f040 80d6 	bne.w	8021034 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 8020e88:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020e8c:	429c      	cmp	r4, r3
 8020e8e:	f73f aee7 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020e92:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8020e94:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020e96:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020e98:	e765      	b.n	8020d66 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020e9a:	2e01      	cmp	r6, #1
 8020e9c:	f040 80e8 	bne.w	8021070 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020ea0:	9b02      	ldr	r3, [sp, #8]
 8020ea2:	2bf0      	cmp	r3, #240	; 0xf0
 8020ea4:	f040 8147 	bne.w	8021136 <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 8020ea8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020eac:	4299      	cmp	r1, r3
 8020eae:	f43f aed7 	beq.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020eb2:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8020eb4:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 8020eb8:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020eba:	e754      	b.n	8020d66 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020ebc:	2e01      	cmp	r6, #1
 8020ebe:	f040 80cd 	bne.w	802105c <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8020ec2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020ec6:	4299      	cmp	r1, r3
 8020ec8:	f43f aeca 	beq.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020ecc:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8020ece:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020ed0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020ed2:	e748      	b.n	8020d66 <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020ed4:	2e04      	cmp	r6, #4
 8020ed6:	f040 80d5 	bne.w	8021084 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 8020eda:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020ede:	429c      	cmp	r4, r3
 8020ee0:	f73f aebe 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020ee4:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8020ee6:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 8020eea:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020eec:	e73b      	b.n	8020d66 <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020eee:	6828      	ldr	r0, [r5, #0]
 8020ef0:	b310      	cbz	r0, 8020f38 <dhcp_recv+0x384>
 8020ef2:	6840      	ldr	r0, [r0, #4]
 8020ef4:	7806      	ldrb	r6, [r0, #0]
 8020ef6:	e6d4      	b.n	8020ca2 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020ef8:	455c      	cmp	r4, fp
 8020efa:	f4ff aec1 	bcc.w	8020c80 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020efe:	4bb7      	ldr	r3, [pc, #732]	; (80211dc <dhcp_recv+0x628>)
 8020f00:	781b      	ldrb	r3, [r3, #0]
 8020f02:	b163      	cbz	r3, 8020f1e <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020f04:	2300      	movs	r3, #0
 8020f06:	4ab5      	ldr	r2, [pc, #724]	; (80211dc <dhcp_recv+0x628>)
 8020f08:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020f0a:	4bb5      	ldr	r3, [pc, #724]	; (80211e0 <dhcp_recv+0x62c>)
 8020f0c:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8020f0e:	2b01      	cmp	r3, #1
 8020f10:	f000 8108 	beq.w	8021124 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8020f14:	2b02      	cmp	r3, #2
 8020f16:	d006      	beq.n	8020f26 <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8020f18:	2b03      	cmp	r3, #3
 8020f1a:	f000 8101 	beq.w	8021120 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8020f1e:	9b04      	ldr	r3, [sp, #16]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	f000 811c 	beq.w	802115e <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 8020f26:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8020f28:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8020f2c:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8020f2e:	232c      	movs	r3, #44	; 0x2c
 8020f30:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020f32:	9b03      	ldr	r3, [sp, #12]
 8020f34:	895b      	ldrh	r3, [r3, #10]
 8020f36:	e682      	b.n	8020c3e <dhcp_recv+0x8a>
    switch (op) {
 8020f38:	1e50      	subs	r0, r2, #1
 8020f3a:	283a      	cmp	r0, #58	; 0x3a
 8020f3c:	f63f aef1 	bhi.w	8020d22 <dhcp_recv+0x16e>
 8020f40:	a601      	add	r6, pc, #4	; (adr r6, 8020f48 <dhcp_recv+0x394>)
 8020f42:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8020f46:	bf00      	nop
 8020f48:	080210c1 	.word	0x080210c1
 8020f4c:	08020d23 	.word	0x08020d23
 8020f50:	080210ad 	.word	0x080210ad
 8020f54:	08020d23 	.word	0x08020d23
 8020f58:	08020d23 	.word	0x08020d23
 8020f5c:	08020d23 	.word	0x08020d23
 8020f60:	08020d23 	.word	0x08020d23
 8020f64:	08020d23 	.word	0x08020d23
 8020f68:	08020d23 	.word	0x08020d23
 8020f6c:	08020d23 	.word	0x08020d23
 8020f70:	08020d23 	.word	0x08020d23
 8020f74:	08020d23 	.word	0x08020d23
 8020f78:	08020d23 	.word	0x08020d23
 8020f7c:	08020d23 	.word	0x08020d23
 8020f80:	08020d23 	.word	0x08020d23
 8020f84:	08020d23 	.word	0x08020d23
 8020f88:	08020d23 	.word	0x08020d23
 8020f8c:	08020d23 	.word	0x08020d23
 8020f90:	08020d23 	.word	0x08020d23
 8020f94:	08020d23 	.word	0x08020d23
 8020f98:	08020d23 	.word	0x08020d23
 8020f9c:	08020d23 	.word	0x08020d23
 8020fa0:	08020d23 	.word	0x08020d23
 8020fa4:	08020d23 	.word	0x08020d23
 8020fa8:	08020d23 	.word	0x08020d23
 8020fac:	08020d23 	.word	0x08020d23
 8020fb0:	08020d23 	.word	0x08020d23
 8020fb4:	08020d23 	.word	0x08020d23
 8020fb8:	08020d23 	.word	0x08020d23
 8020fbc:	08020d23 	.word	0x08020d23
 8020fc0:	08020d23 	.word	0x08020d23
 8020fc4:	08020d23 	.word	0x08020d23
 8020fc8:	08020d23 	.word	0x08020d23
 8020fcc:	08020d23 	.word	0x08020d23
 8020fd0:	08020d23 	.word	0x08020d23
 8020fd4:	08020d23 	.word	0x08020d23
 8020fd8:	08020d23 	.word	0x08020d23
 8020fdc:	08020d23 	.word	0x08020d23
 8020fe0:	08020d23 	.word	0x08020d23
 8020fe4:	08020d23 	.word	0x08020d23
 8020fe8:	08020d23 	.word	0x08020d23
 8020fec:	08020d23 	.word	0x08020d23
 8020ff0:	08020d23 	.word	0x08020d23
 8020ff4:	08020d23 	.word	0x08020d23
 8020ff8:	08020d23 	.word	0x08020d23
 8020ffc:	08020d23 	.word	0x08020d23
 8021000:	08020d23 	.word	0x08020d23
 8021004:	08020d23 	.word	0x08020d23
 8021008:	08020d23 	.word	0x08020d23
 802100c:	08020d23 	.word	0x08020d23
 8021010:	08021085 	.word	0x08021085
 8021014:	08021071 	.word	0x08021071
 8021018:	0802105d 	.word	0x0802105d
 802101c:	08021049 	.word	0x08021049
 8021020:	08020d23 	.word	0x08020d23
 8021024:	08020d23 	.word	0x08020d23
 8021028:	08020d23 	.word	0x08020d23
 802102c:	08021035 	.word	0x08021035
 8021030:	08021099 	.word	0x08021099
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021034:	4b6b      	ldr	r3, [pc, #428]	; (80211e4 <dhcp_recv+0x630>)
 8021036:	f240 625d 	movw	r2, #1629	; 0x65d
 802103a:	496b      	ldr	r1, [pc, #428]	; (80211e8 <dhcp_recv+0x634>)
 802103c:	486b      	ldr	r0, [pc, #428]	; (80211ec <dhcp_recv+0x638>)
 802103e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021042:	f003 ffc3 	bl	8024fcc <iprintf>
 8021046:	e60d      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021048:	4b66      	ldr	r3, [pc, #408]	; (80211e4 <dhcp_recv+0x630>)
 802104a:	f240 6259 	movw	r2, #1625	; 0x659
 802104e:	4966      	ldr	r1, [pc, #408]	; (80211e8 <dhcp_recv+0x634>)
 8021050:	4866      	ldr	r0, [pc, #408]	; (80211ec <dhcp_recv+0x638>)
 8021052:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021056:	f003 ffb9 	bl	8024fcc <iprintf>
 802105a:	e603      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802105c:	4b61      	ldr	r3, [pc, #388]	; (80211e4 <dhcp_recv+0x630>)
 802105e:	f240 6255 	movw	r2, #1621	; 0x655
 8021062:	4963      	ldr	r1, [pc, #396]	; (80211f0 <dhcp_recv+0x63c>)
 8021064:	4861      	ldr	r0, [pc, #388]	; (80211ec <dhcp_recv+0x638>)
 8021066:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802106a:	f003 ffaf 	bl	8024fcc <iprintf>
 802106e:	e5f9      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021070:	4b5c      	ldr	r3, [pc, #368]	; (80211e4 <dhcp_recv+0x630>)
 8021072:	f240 624f 	movw	r2, #1615	; 0x64f
 8021076:	495e      	ldr	r1, [pc, #376]	; (80211f0 <dhcp_recv+0x63c>)
 8021078:	485c      	ldr	r0, [pc, #368]	; (80211ec <dhcp_recv+0x638>)
 802107a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802107e:	f003 ffa5 	bl	8024fcc <iprintf>
 8021082:	e5ef      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021084:	4b57      	ldr	r3, [pc, #348]	; (80211e4 <dhcp_recv+0x630>)
 8021086:	f240 6241 	movw	r2, #1601	; 0x641
 802108a:	4957      	ldr	r1, [pc, #348]	; (80211e8 <dhcp_recv+0x634>)
 802108c:	4857      	ldr	r0, [pc, #348]	; (80211ec <dhcp_recv+0x638>)
 802108e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021092:	f003 ff9b 	bl	8024fcc <iprintf>
 8021096:	e5e5      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021098:	4b52      	ldr	r3, [pc, #328]	; (80211e4 <dhcp_recv+0x630>)
 802109a:	f240 6261 	movw	r2, #1633	; 0x661
 802109e:	4952      	ldr	r1, [pc, #328]	; (80211e8 <dhcp_recv+0x634>)
 80210a0:	4852      	ldr	r0, [pc, #328]	; (80211ec <dhcp_recv+0x638>)
 80210a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80210a6:	f003 ff91 	bl	8024fcc <iprintf>
 80210aa:	e5db      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80210ac:	4b4d      	ldr	r3, [pc, #308]	; (80211e4 <dhcp_recv+0x630>)
 80210ae:	f240 6233 	movw	r2, #1587	; 0x633
 80210b2:	4950      	ldr	r1, [pc, #320]	; (80211f4 <dhcp_recv+0x640>)
 80210b4:	484d      	ldr	r0, [pc, #308]	; (80211ec <dhcp_recv+0x638>)
 80210b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80210ba:	f003 ff87 	bl	8024fcc <iprintf>
 80210be:	e5d1      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80210c0:	4b48      	ldr	r3, [pc, #288]	; (80211e4 <dhcp_recv+0x630>)
 80210c2:	f240 622e 	movw	r2, #1582	; 0x62e
 80210c6:	4948      	ldr	r1, [pc, #288]	; (80211e8 <dhcp_recv+0x634>)
 80210c8:	4848      	ldr	r0, [pc, #288]	; (80211ec <dhcp_recv+0x638>)
 80210ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80210ce:	f003 ff7d 	bl	8024fcc <iprintf>
 80210d2:	e5c7      	b.n	8020c64 <dhcp_recv+0xb0>
 80210d4:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 80210d6:	896b      	ldrh	r3, [r5, #10]
 80210d8:	e628      	b.n	8020d2c <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 80210da:	9c05      	ldr	r4, [sp, #20]
 80210dc:	d027      	beq.n	802112e <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80210de:	2e01      	cmp	r6, #1
 80210e0:	f040 80bb 	bne.w	802125a <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 80210e4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 80210e8:	4b3d      	ldr	r3, [pc, #244]	; (80211e0 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 80210ea:	4a3c      	ldr	r2, [pc, #240]	; (80211dc <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 80210ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 80210f0:	2301      	movs	r3, #1
 80210f2:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80210f6:	e7ee      	b.n	80210d6 <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80210f8:	4b3a      	ldr	r3, [pc, #232]	; (80211e4 <dhcp_recv+0x630>)
 80210fa:	f240 6281 	movw	r2, #1665	; 0x681
 80210fe:	493e      	ldr	r1, [pc, #248]	; (80211f8 <dhcp_recv+0x644>)
 8021100:	483a      	ldr	r0, [pc, #232]	; (80211ec <dhcp_recv+0x638>)
 8021102:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021106:	f003 ff61 	bl	8024fcc <iprintf>
 802110a:	e5ab      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 802110c:	4b35      	ldr	r3, [pc, #212]	; (80211e4 <dhcp_recv+0x630>)
 802110e:	f240 629d 	movw	r2, #1693	; 0x69d
 8021112:	493a      	ldr	r1, [pc, #232]	; (80211fc <dhcp_recv+0x648>)
 8021114:	4835      	ldr	r0, [pc, #212]	; (80211ec <dhcp_recv+0x638>)
 8021116:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802111a:	f003 ff57 	bl	8024fcc <iprintf>
 802111e:	e5a1      	b.n	8020c64 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8021120:	2301      	movs	r3, #1
 8021122:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8021124:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8021126:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 802112a:	9302      	str	r3, [sp, #8]
 802112c:	e701      	b.n	8020f32 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 802112e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021130:	f7f7 fe76 	bl	8018e20 <lwip_htonl>
 8021134:	e7d8      	b.n	80210e8 <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8021136:	4b2b      	ldr	r3, [pc, #172]	; (80211e4 <dhcp_recv+0x630>)
 8021138:	f240 6251 	movw	r2, #1617	; 0x651
 802113c:	4930      	ldr	r1, [pc, #192]	; (8021200 <dhcp_recv+0x64c>)
 802113e:	482b      	ldr	r0, [pc, #172]	; (80211ec <dhcp_recv+0x638>)
 8021140:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021144:	f003 ff42 	bl	8024fcc <iprintf>
 8021148:	e58c      	b.n	8020c64 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802114a:	4b26      	ldr	r3, [pc, #152]	; (80211e4 <dhcp_recv+0x630>)
 802114c:	f240 6239 	movw	r2, #1593	; 0x639
 8021150:	492c      	ldr	r1, [pc, #176]	; (8021204 <dhcp_recv+0x650>)
 8021152:	4826      	ldr	r0, [pc, #152]	; (80211ec <dhcp_recv+0x638>)
 8021154:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021158:	f003 ff38 	bl	8024fcc <iprintf>
 802115c:	e582      	b.n	8020c64 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 802115e:	4b1f      	ldr	r3, [pc, #124]	; (80211dc <dhcp_recv+0x628>)
 8021160:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021164:	785b      	ldrb	r3, [r3, #1]
 8021166:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 802116a:	2b00      	cmp	r3, #0
 802116c:	f43f ad7a 	beq.w	8020c64 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021170:	4a1b      	ldr	r2, [pc, #108]	; (80211e0 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8021172:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021176:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8021178:	2b05      	cmp	r3, #5
 802117a:	d01d      	beq.n	80211b8 <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 802117c:	2b06      	cmp	r3, #6
 802117e:	d043      	beq.n	8021208 <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8021180:	2b02      	cmp	r3, #2
 8021182:	f47f ad6f 	bne.w	8020c64 <dhcp_recv+0xb0>
 8021186:	f899 3005 	ldrb.w	r3, [r9, #5]
 802118a:	2b06      	cmp	r3, #6
 802118c:	f47f ad6a 	bne.w	8020c64 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8021190:	4b12      	ldr	r3, [pc, #72]	; (80211dc <dhcp_recv+0x628>)
 8021192:	789b      	ldrb	r3, [r3, #2]
 8021194:	2b00      	cmp	r3, #0
 8021196:	f43f ad65 	beq.w	8020c64 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802119a:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 802119e:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80211a0:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80211a2:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80211a4:	f7f7 fe3c 	bl	8018e20 <lwip_htonl>
 80211a8:	4603      	mov	r3, r0
    dhcp_select(netif);
 80211aa:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80211ac:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80211ae:	6923      	ldr	r3, [r4, #16]
 80211b0:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 80211b2:	f7ff fbbf 	bl	8020934 <dhcp_select.isra.0>
 80211b6:	e555      	b.n	8020c64 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80211b8:	f899 3005 	ldrb.w	r3, [r9, #5]
 80211bc:	2b01      	cmp	r3, #1
 80211be:	d03f      	beq.n	8021240 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80211c0:	3b03      	subs	r3, #3
 80211c2:	2b02      	cmp	r3, #2
 80211c4:	f63f ad4e 	bhi.w	8020c64 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80211c8:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80211cc:	4621      	mov	r1, r4
 80211ce:	f7ff f8c1 	bl	8020354 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80211d2:	4650      	mov	r0, sl
 80211d4:	f7fe ffb2 	bl	802013c <dhcp_bind>
 80211d8:	e544      	b.n	8020c64 <dhcp_recv+0xb0>
 80211da:	bf00      	nop
 80211dc:	2002dc48 	.word	0x2002dc48
 80211e0:	2002dc54 	.word	0x2002dc54
 80211e4:	08044bf4 	.word	0x08044bf4
 80211e8:	08044e58 	.word	0x08044e58
 80211ec:	0802bdc0 	.word	0x0802bdc0
 80211f0:	08044e88 	.word	0x08044e88
 80211f4:	08044e64 	.word	0x08044e64
 80211f8:	08044ec0 	.word	0x08044ec0
 80211fc:	08044eec 	.word	0x08044eec
 8021200:	08044e94 	.word	0x08044e94
 8021204:	08044e78 	.word	0x08044e78
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021208:	f899 3005 	ldrb.w	r3, [r9, #5]
 802120c:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 802120e:	2a02      	cmp	r2, #2
 8021210:	d902      	bls.n	8021218 <dhcp_recv+0x664>
 8021212:	2b01      	cmp	r3, #1
 8021214:	f47f ad26 	bne.w	8020c64 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021218:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 802121c:	795a      	ldrb	r2, [r3, #5]
 802121e:	2a0c      	cmp	r2, #12
 8021220:	d004      	beq.n	802122c <dhcp_recv+0x678>
    dhcp->tries = 0;
 8021222:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8021224:	210c      	movs	r1, #12
    dhcp->tries = 0;
 8021226:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 8021228:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 802122a:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 802122c:	4b1c      	ldr	r3, [pc, #112]	; (80212a0 <dhcp_recv+0x6ec>)
 802122e:	4650      	mov	r0, sl
 8021230:	461a      	mov	r2, r3
 8021232:	4619      	mov	r1, r3
 8021234:	f7f9 f992 	bl	801a55c <netif_set_addr>
  dhcp_discover(netif);
 8021238:	4650      	mov	r0, sl
 802123a:	f7ff fa95 	bl	8020768 <dhcp_discover>
}
 802123e:	e511      	b.n	8020c64 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8021240:	4621      	mov	r1, r4
 8021242:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8021246:	f7ff f885 	bl	8020354 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 802124a:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 802124e:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8021250:	0719      	lsls	r1, r3, #28
 8021252:	d5bf      	bpl.n	80211d4 <dhcp_recv+0x620>
        dhcp_check(netif);
 8021254:	f7fe ff5a 	bl	802010c <dhcp_check>
 8021258:	e504      	b.n	8020c64 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802125a:	4b12      	ldr	r3, [pc, #72]	; (80212a4 <dhcp_recv+0x6f0>)
 802125c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8021260:	4911      	ldr	r1, [pc, #68]	; (80212a8 <dhcp_recv+0x6f4>)
 8021262:	4812      	ldr	r0, [pc, #72]	; (80212ac <dhcp_recv+0x6f8>)
 8021264:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021268:	f003 feb0 	bl	8024fcc <iprintf>
 802126c:	e4fa      	b.n	8020c64 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 802126e:	4434      	add	r4, r6
 8021270:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8021274:	4294      	cmp	r4, r2
 8021276:	f73f acf3 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802127a:	19bc      	adds	r4, r7, r6
 802127c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802127e:	e555      	b.n	8020d2c <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8021280:	4434      	add	r4, r6
 8021282:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8021286:	428c      	cmp	r4, r1
 8021288:	f73f acea 	bgt.w	8020c60 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802128c:	19bc      	adds	r4, r7, r6
 802128e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021290:	2e00      	cmp	r6, #0
 8021292:	f43f ad4b 	beq.w	8020d2c <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8021296:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8021298:	f04f 0808 	mov.w	r8, #8
 802129c:	e563      	b.n	8020d66 <dhcp_recv+0x1b2>
 802129e:	bf00      	nop
 80212a0:	080452a8 	.word	0x080452a8
 80212a4:	08044bf4 	.word	0x08044bf4
 80212a8:	08044ed8 	.word	0x08044ed8
 80212ac:	0802bdc0 	.word	0x0802bdc0

080212b0 <dhcp_network_changed>:
{
 80212b0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80212b2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 80212b4:	b135      	cbz	r5, 80212c4 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 80212b6:	796b      	ldrb	r3, [r5, #5]
 80212b8:	4604      	mov	r4, r0
 80212ba:	2b05      	cmp	r3, #5
 80212bc:	d803      	bhi.n	80212c6 <dhcp_network_changed+0x16>
 80212be:	2b02      	cmp	r3, #2
 80212c0:	d813      	bhi.n	80212ea <dhcp_network_changed+0x3a>
 80212c2:	b95b      	cbnz	r3, 80212dc <dhcp_network_changed+0x2c>
}
 80212c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 80212c6:	2b0a      	cmp	r3, #10
 80212c8:	d00f      	beq.n	80212ea <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80212ca:	2b0c      	cmp	r3, #12
 80212cc:	d906      	bls.n	80212dc <dhcp_network_changed+0x2c>
 80212ce:	4b0a      	ldr	r3, [pc, #40]	; (80212f8 <dhcp_network_changed+0x48>)
 80212d0:	f240 326d 	movw	r2, #877	; 0x36d
 80212d4:	4909      	ldr	r1, [pc, #36]	; (80212fc <dhcp_network_changed+0x4c>)
 80212d6:	480a      	ldr	r0, [pc, #40]	; (8021300 <dhcp_network_changed+0x50>)
 80212d8:	f003 fe78 	bl	8024fcc <iprintf>
      dhcp->tries = 0;
 80212dc:	2300      	movs	r3, #0
      dhcp_discover(netif);
 80212de:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80212e0:	71ab      	strb	r3, [r5, #6]
}
 80212e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80212e6:	f7ff ba3f 	b.w	8020768 <dhcp_discover>
      dhcp->tries = 0;
 80212ea:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 80212ec:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80212ee:	71ab      	strb	r3, [r5, #6]
}
 80212f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 80212f4:	f7ff b938 	b.w	8020568 <dhcp_reboot.isra.0>
 80212f8:	08044bf4 	.word	0x08044bf4
 80212fc:	08044f34 	.word	0x08044f34
 8021300:	0802bdc0 	.word	0x0802bdc0

08021304 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021304:	2800      	cmp	r0, #0
 8021306:	d066      	beq.n	80213d6 <dhcp_arp_reply+0xd2>
{
 8021308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 802130c:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 802130e:	b085      	sub	sp, #20
 8021310:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8021312:	b115      	cbz	r5, 802131a <dhcp_arp_reply+0x16>
 8021314:	796b      	ldrb	r3, [r5, #5]
 8021316:	2b08      	cmp	r3, #8
 8021318:	d002      	beq.n	8021320 <dhcp_arp_reply+0x1c>
}
 802131a:	b005      	add	sp, #20
 802131c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8021320:	680a      	ldr	r2, [r1, #0]
 8021322:	69eb      	ldr	r3, [r5, #28]
 8021324:	429a      	cmp	r2, r3
 8021326:	d1f8      	bne.n	802131a <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 8021328:	2200      	movs	r2, #0
    dhcp->state = new_state;
 802132a:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 802132c:	4629      	mov	r1, r5
    dhcp->tries = 0;
 802132e:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8021330:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8021332:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 8021336:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8021338:	2204      	movs	r2, #4
 802133a:	f7ff f863 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 802133e:	4606      	mov	r6, r0
 8021340:	2800      	cmp	r0, #0
 8021342:	d040      	beq.n	80213c6 <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021344:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8021348:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802134a:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802134e:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021350:	2b44      	cmp	r3, #68	; 0x44
 8021352:	d847      	bhi.n	80213e4 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8021354:	2232      	movs	r2, #50	; 0x32
 8021356:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 802135a:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 802135e:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8021362:	b29b      	uxth	r3, r3
 8021364:	2204      	movs	r2, #4
 8021366:	fa1f f888 	uxth.w	r8, r8
 802136a:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802136c:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802136e:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021372:	f7f7 fd55 	bl	8018e20 <lwip_htonl>
 8021376:	4639      	mov	r1, r7
 8021378:	4602      	mov	r2, r0
 802137a:	4640      	mov	r0, r8
 802137c:	f7fe fea2 	bl	80200c4 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021380:	1c41      	adds	r1, r0, #1
 8021382:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021384:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8021388:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802138a:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 802138c:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802138e:	2943      	cmp	r1, #67	; 0x43
 8021390:	d807      	bhi.n	80213a2 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8021392:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8021396:	1878      	adds	r0, r7, r1
 8021398:	2100      	movs	r1, #0
 802139a:	b292      	uxth	r2, r2
 802139c:	f002 fe7a 	bl	8024094 <memset>
 80213a0:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80213a2:	31f0      	adds	r1, #240	; 0xf0
 80213a4:	4630      	mov	r0, r6
 80213a6:	b289      	uxth	r1, r1
 80213a8:	f7f9 fc5a 	bl	801ac60 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80213ac:	4911      	ldr	r1, [pc, #68]	; (80213f4 <dhcp_arp_reply+0xf0>)
 80213ae:	4a12      	ldr	r2, [pc, #72]	; (80213f8 <dhcp_arp_reply+0xf4>)
 80213b0:	2343      	movs	r3, #67	; 0x43
 80213b2:	9400      	str	r4, [sp, #0]
 80213b4:	6808      	ldr	r0, [r1, #0]
 80213b6:	4631      	mov	r1, r6
 80213b8:	9201      	str	r2, [sp, #4]
 80213ba:	4a10      	ldr	r2, [pc, #64]	; (80213fc <dhcp_arp_reply+0xf8>)
 80213bc:	f7fe fc6c 	bl	801fc98 <udp_sendto_if_src>
    pbuf_free(p_out);
 80213c0:	4630      	mov	r0, r6
 80213c2:	f7f9 fd49 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 80213c6:	79ab      	ldrb	r3, [r5, #6]
 80213c8:	2bff      	cmp	r3, #255	; 0xff
 80213ca:	d001      	beq.n	80213d0 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 80213cc:	3301      	adds	r3, #1
 80213ce:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80213d0:	2314      	movs	r3, #20
 80213d2:	812b      	strh	r3, [r5, #8]
  return result;
 80213d4:	e7a1      	b.n	802131a <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80213d6:	4b0a      	ldr	r3, [pc, #40]	; (8021400 <dhcp_arp_reply+0xfc>)
 80213d8:	f240 328b 	movw	r2, #907	; 0x38b
 80213dc:	4909      	ldr	r1, [pc, #36]	; (8021404 <dhcp_arp_reply+0x100>)
 80213de:	480a      	ldr	r0, [pc, #40]	; (8021408 <dhcp_arp_reply+0x104>)
 80213e0:	f003 bdf4 	b.w	8024fcc <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80213e4:	4b06      	ldr	r3, [pc, #24]	; (8021400 <dhcp_arp_reply+0xfc>)
 80213e6:	f240 529a 	movw	r2, #1434	; 0x59a
 80213ea:	4908      	ldr	r1, [pc, #32]	; (802140c <dhcp_arp_reply+0x108>)
 80213ec:	4806      	ldr	r0, [pc, #24]	; (8021408 <dhcp_arp_reply+0x104>)
 80213ee:	f003 fded 	bl	8024fcc <iprintf>
 80213f2:	e7af      	b.n	8021354 <dhcp_arp_reply+0x50>
 80213f4:	2002dc40 	.word	0x2002dc40
 80213f8:	080452a8 	.word	0x080452a8
 80213fc:	080452ac 	.word	0x080452ac
 8021400:	08044bf4 	.word	0x08044bf4
 8021404:	0802c670 	.word	0x0802c670
 8021408:	0802bdc0 	.word	0x0802bdc0
 802140c:	08044d68 	.word	0x08044d68

08021410 <dhcp_renew>:
{
 8021410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021414:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8021416:	b087      	sub	sp, #28
 8021418:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 802141a:	797b      	ldrb	r3, [r7, #5]
 802141c:	2b05      	cmp	r3, #5
 802141e:	d004      	beq.n	802142a <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8021420:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021422:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8021424:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 8021426:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 8021428:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802142a:	f10d 0316 	add.w	r3, sp, #22
 802142e:	2203      	movs	r2, #3
 8021430:	4639      	mov	r1, r7
 8021432:	4658      	mov	r0, fp
 8021434:	f7fe ffe6 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 8021438:	4605      	mov	r5, r0
 802143a:	2800      	cmp	r0, #0
 802143c:	f000 80b9 	beq.w	80215b2 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021440:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021444:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021446:	f104 0804 	add.w	r8, r4, #4
 802144a:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802144e:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021450:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021454:	f200 8095 	bhi.w	8021582 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 8021458:	2239      	movs	r2, #57	; 0x39
 802145a:	1c63      	adds	r3, r4, #1
 802145c:	fa1f f189 	uxth.w	r1, r9
 8021460:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021462:	b29b      	uxth	r3, r3
 8021464:	2202      	movs	r2, #2
 8021466:	9103      	str	r1, [sp, #12]
 8021468:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802146a:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802146c:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021470:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021472:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021476:	f200 8094 	bhi.w	80215a2 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802147a:	1ce3      	adds	r3, r4, #3
 802147c:	fa1f f988 	uxth.w	r9, r8
 8021480:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021484:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021486:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021488:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802148a:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802148e:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021492:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021496:	2b44      	cmp	r3, #68	; 0x44
 8021498:	d87b      	bhi.n	8021592 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 802149a:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 802149e:	2237      	movs	r2, #55	; 0x37
 80214a0:	1d63      	adds	r3, r4, #5
 80214a2:	f8df a134 	ldr.w	sl, [pc, #308]	; 80215d8 <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 80214a6:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 80214aa:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 80214ae:	b29b      	uxth	r3, r3
 80214b0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80214b2:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80214b6:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 80214ba:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80214bc:	493e      	ldr	r1, [pc, #248]	; (80215b8 <dhcp_renew+0x1a8>)
 80214be:	4b3f      	ldr	r3, [pc, #252]	; (80215bc <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80214c0:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80214c4:	d80f      	bhi.n	80214e6 <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 80214c6:	f108 0201 	add.w	r2, r8, #1
 80214ca:	f806 9008 	strb.w	r9, [r6, r8]
 80214ce:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80214d2:	4a3b      	ldr	r2, [pc, #236]	; (80215c0 <dhcp_renew+0x1b0>)
 80214d4:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80214d6:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80214da:	d00c      	beq.n	80214f6 <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80214dc:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80214e0:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80214e4:	d9ef      	bls.n	80214c6 <dhcp_renew+0xb6>
 80214e6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80214ea:	4836      	ldr	r0, [pc, #216]	; (80215c4 <dhcp_renew+0x1b4>)
 80214ec:	f003 fd6e 	bl	8024fcc <iprintf>
 80214f0:	4b32      	ldr	r3, [pc, #200]	; (80215bc <dhcp_renew+0x1ac>)
 80214f2:	4931      	ldr	r1, [pc, #196]	; (80215b8 <dhcp_renew+0x1a8>)
 80214f4:	e7e7      	b.n	80214c6 <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 80214f6:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 80214fa:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80214fe:	22ff      	movs	r2, #255	; 0xff
 8021500:	b280      	uxth	r0, r0
 8021502:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021504:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021506:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021508:	d808      	bhi.n	802151c <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 802150a:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 802150e:	4430      	add	r0, r6
 8021510:	2100      	movs	r1, #0
 8021512:	b2a4      	uxth	r4, r4
 8021514:	1c62      	adds	r2, r4, #1
 8021516:	f002 fdbd 	bl	8024094 <memset>
 802151a:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802151c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021520:	4628      	mov	r0, r5
 8021522:	b289      	uxth	r1, r1
 8021524:	f7f9 fb9c 	bl	801ac60 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021528:	4827      	ldr	r0, [pc, #156]	; (80215c8 <dhcp_renew+0x1b8>)
 802152a:	2343      	movs	r3, #67	; 0x43
 802152c:	f107 0218 	add.w	r2, r7, #24
 8021530:	6800      	ldr	r0, [r0, #0]
 8021532:	4629      	mov	r1, r5
 8021534:	f8cd b000 	str.w	fp, [sp]
 8021538:	f7fe fc62 	bl	801fe00 <udp_sendto_if>
 802153c:	4604      	mov	r4, r0
    pbuf_free(p_out);
 802153e:	4628      	mov	r0, r5
 8021540:	f7f9 fc8a 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 8021544:	79bb      	ldrb	r3, [r7, #6]
 8021546:	2bff      	cmp	r3, #255	; 0xff
 8021548:	d015      	beq.n	8021576 <dhcp_renew+0x166>
    dhcp->tries++;
 802154a:	3301      	adds	r3, #1
 802154c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 802154e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021550:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021552:	d810      	bhi.n	8021576 <dhcp_renew+0x166>
 8021554:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021558:	4a1c      	ldr	r2, [pc, #112]	; (80215cc <dhcp_renew+0x1bc>)
}
 802155a:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 802155c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021560:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021562:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021566:	b29b      	uxth	r3, r3
 8021568:	fba2 2303 	umull	r2, r3, r2, r3
 802156c:	095b      	lsrs	r3, r3, #5
 802156e:	813b      	strh	r3, [r7, #8]
}
 8021570:	b007      	add	sp, #28
 8021572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 8021576:	2328      	movs	r3, #40	; 0x28
}
 8021578:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802157a:	813b      	strh	r3, [r7, #8]
}
 802157c:	b007      	add	sp, #28
 802157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021582:	4b0e      	ldr	r3, [pc, #56]	; (80215bc <dhcp_renew+0x1ac>)
 8021584:	f240 529a 	movw	r2, #1434	; 0x59a
 8021588:	4911      	ldr	r1, [pc, #68]	; (80215d0 <dhcp_renew+0x1c0>)
 802158a:	480e      	ldr	r0, [pc, #56]	; (80215c4 <dhcp_renew+0x1b4>)
 802158c:	f003 fd1e 	bl	8024fcc <iprintf>
 8021590:	e762      	b.n	8021458 <dhcp_renew+0x48>
 8021592:	4b0a      	ldr	r3, [pc, #40]	; (80215bc <dhcp_renew+0x1ac>)
 8021594:	f240 529a 	movw	r2, #1434	; 0x59a
 8021598:	490d      	ldr	r1, [pc, #52]	; (80215d0 <dhcp_renew+0x1c0>)
 802159a:	480a      	ldr	r0, [pc, #40]	; (80215c4 <dhcp_renew+0x1b4>)
 802159c:	f003 fd16 	bl	8024fcc <iprintf>
 80215a0:	e77b      	b.n	802149a <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80215a2:	4b06      	ldr	r3, [pc, #24]	; (80215bc <dhcp_renew+0x1ac>)
 80215a4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80215a8:	490a      	ldr	r1, [pc, #40]	; (80215d4 <dhcp_renew+0x1c4>)
 80215aa:	4806      	ldr	r0, [pc, #24]	; (80215c4 <dhcp_renew+0x1b4>)
 80215ac:	f003 fd0e 	bl	8024fcc <iprintf>
 80215b0:	e763      	b.n	802147a <dhcp_renew+0x6a>
    result = ERR_MEM;
 80215b2:	f04f 34ff 	mov.w	r4, #4294967295
 80215b6:	e7c5      	b.n	8021544 <dhcp_renew+0x134>
 80215b8:	08044de8 	.word	0x08044de8
 80215bc:	08044bf4 	.word	0x08044bf4
 80215c0:	08044f70 	.word	0x08044f70
 80215c4:	0802bdc0 	.word	0x0802bdc0
 80215c8:	2002dc40 	.word	0x2002dc40
 80215cc:	10624dd3 	.word	0x10624dd3
 80215d0:	08044d68 	.word	0x08044d68
 80215d4:	08044dac 	.word	0x08044dac
 80215d8:	08044f6d 	.word	0x08044f6d

080215dc <dhcp_release_and_stop>:
{
 80215dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80215e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80215e2:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 80215e4:	2c00      	cmp	r4, #0
 80215e6:	d06c      	beq.n	80216c2 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 80215e8:	7962      	ldrb	r2, [r4, #5]
 80215ea:	2a00      	cmp	r2, #0
 80215ec:	d069      	beq.n	80216c2 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80215ee:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80215f0:	2300      	movs	r3, #0
 80215f2:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80215f4:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80215f6:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80215f8:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80215fa:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80215fc:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80215fe:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8021600:	81e3      	strh	r3, [r4, #14]
 8021602:	6123      	str	r3, [r4, #16]
 8021604:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021606:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802160a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802160e:	d901      	bls.n	8021614 <dhcp_release_and_stop+0x38>
 8021610:	2a0a      	cmp	r2, #10
 8021612:	d148      	bne.n	80216a6 <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8021614:	f10d 030a 	add.w	r3, sp, #10
 8021618:	2207      	movs	r2, #7
 802161a:	4621      	mov	r1, r4
 802161c:	4628      	mov	r0, r5
 802161e:	f7fe fef1 	bl	8020404 <dhcp_create_msg>
    if (p_out != NULL) {
 8021622:	4606      	mov	r6, r0
 8021624:	2800      	cmp	r0, #0
 8021626:	d03e      	beq.n	80216a6 <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021628:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 802162c:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802162e:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021632:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021634:	2b44      	cmp	r3, #68	; 0x44
 8021636:	d84e      	bhi.n	80216d6 <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8021638:	f108 0301 	add.w	r3, r8, #1
 802163c:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 802163e:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8021640:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8021644:	2204      	movs	r2, #4
 8021646:	f108 0802 	add.w	r8, r8, #2
 802164a:	54fa      	strb	r2, [r7, r3]
 802164c:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021650:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021652:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021656:	f7f7 fbe3 	bl	8018e20 <lwip_htonl>
 802165a:	4639      	mov	r1, r7
 802165c:	4602      	mov	r2, r0
 802165e:	4640      	mov	r0, r8
 8021660:	f7fe fd30 	bl	80200c4 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021664:	1c43      	adds	r3, r0, #1
 8021666:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021668:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 802166c:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802166e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021670:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021672:	2b43      	cmp	r3, #67	; 0x43
 8021674:	d807      	bhi.n	8021686 <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8021676:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802167a:	18f8      	adds	r0, r7, r3
 802167c:	2100      	movs	r1, #0
 802167e:	b292      	uxth	r2, r2
 8021680:	f002 fd08 	bl	8024094 <memset>
 8021684:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021686:	33f0      	adds	r3, #240	; 0xf0
 8021688:	4630      	mov	r0, r6
 802168a:	b299      	uxth	r1, r3
 802168c:	f7f9 fae8 	bl	801ac60 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021690:	4a15      	ldr	r2, [pc, #84]	; (80216e8 <dhcp_release_and_stop+0x10c>)
 8021692:	9500      	str	r5, [sp, #0]
 8021694:	2343      	movs	r3, #67	; 0x43
 8021696:	6810      	ldr	r0, [r2, #0]
 8021698:	4631      	mov	r1, r6
 802169a:	aa03      	add	r2, sp, #12
 802169c:	f7fe fbb0 	bl	801fe00 <udp_sendto_if>
      pbuf_free(p_out);
 80216a0:	4630      	mov	r0, r6
 80216a2:	f7f9 fbd9 	bl	801ae58 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80216a6:	4b11      	ldr	r3, [pc, #68]	; (80216ec <dhcp_release_and_stop+0x110>)
 80216a8:	4628      	mov	r0, r5
 80216aa:	461a      	mov	r2, r3
 80216ac:	4619      	mov	r1, r3
 80216ae:	f7f8 ff55 	bl	801a55c <netif_set_addr>
  if (new_state != dhcp->state) {
 80216b2:	7963      	ldrb	r3, [r4, #5]
 80216b4:	b11b      	cbz	r3, 80216be <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 80216b6:	2300      	movs	r3, #0
 80216b8:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 80216ba:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 80216bc:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 80216be:	7923      	ldrb	r3, [r4, #4]
 80216c0:	b913      	cbnz	r3, 80216c8 <dhcp_release_and_stop+0xec>
}
 80216c2:	b004      	add	sp, #16
 80216c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80216c8:	f7fe fe22 	bl	8020310 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80216cc:	2300      	movs	r3, #0
 80216ce:	7123      	strb	r3, [r4, #4]
}
 80216d0:	b004      	add	sp, #16
 80216d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80216d6:	4b06      	ldr	r3, [pc, #24]	; (80216f0 <dhcp_release_and_stop+0x114>)
 80216d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80216dc:	4905      	ldr	r1, [pc, #20]	; (80216f4 <dhcp_release_and_stop+0x118>)
 80216de:	4806      	ldr	r0, [pc, #24]	; (80216f8 <dhcp_release_and_stop+0x11c>)
 80216e0:	f003 fc74 	bl	8024fcc <iprintf>
 80216e4:	e7a8      	b.n	8021638 <dhcp_release_and_stop+0x5c>
 80216e6:	bf00      	nop
 80216e8:	2002dc40 	.word	0x2002dc40
 80216ec:	080452a8 	.word	0x080452a8
 80216f0:	08044bf4 	.word	0x08044bf4
 80216f4:	08044d68 	.word	0x08044d68
 80216f8:	0802bdc0 	.word	0x0802bdc0

080216fc <dhcp_start>:
{
 80216fc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80216fe:	2800      	cmp	r0, #0
 8021700:	d046      	beq.n	8021790 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021702:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8021706:	4604      	mov	r4, r0
 8021708:	07da      	lsls	r2, r3, #31
 802170a:	d537      	bpl.n	802177c <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 802170c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 802170e:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021710:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021714:	d32f      	bcc.n	8021776 <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8021716:	b33d      	cbz	r5, 8021768 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8021718:	792b      	ldrb	r3, [r5, #4]
 802171a:	bb13      	cbnz	r3, 8021762 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 802171c:	2234      	movs	r2, #52	; 0x34
 802171e:	2100      	movs	r1, #0
 8021720:	4628      	mov	r0, r5
 8021722:	f002 fcb7 	bl	8024094 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8021726:	f7fe fdb9 	bl	802029c <dhcp_inc_pcb_refcount>
 802172a:	4606      	mov	r6, r0
 802172c:	bb18      	cbnz	r0, 8021776 <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 802172e:	2301      	movs	r3, #1
 8021730:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8021732:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8021736:	075b      	lsls	r3, r3, #29
 8021738:	d408      	bmi.n	802174c <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 802173a:	796b      	ldrb	r3, [r5, #5]
 802173c:	2b02      	cmp	r3, #2
 802173e:	d003      	beq.n	8021748 <dhcp_start+0x4c>
    dhcp->state = new_state;
 8021740:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8021742:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8021744:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8021746:	716b      	strb	r3, [r5, #5]
}
 8021748:	4630      	mov	r0, r6
 802174a:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 802174c:	4620      	mov	r0, r4
 802174e:	f7ff f80b 	bl	8020768 <dhcp_discover>
  if (result != ERR_OK) {
 8021752:	2800      	cmp	r0, #0
 8021754:	d0f8      	beq.n	8021748 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8021756:	4620      	mov	r0, r4
    return ERR_MEM;
 8021758:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 802175c:	f7ff ff3e 	bl	80215dc <dhcp_release_and_stop>
    return ERR_MEM;
 8021760:	e7f2      	b.n	8021748 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021762:	f7fe fdd5 	bl	8020310 <dhcp_dec_pcb_refcount>
 8021766:	e7d9      	b.n	802171c <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021768:	2034      	movs	r0, #52	; 0x34
 802176a:	f7f8 fca1 	bl	801a0b0 <mem_malloc>
    if (dhcp == NULL) {
 802176e:	4605      	mov	r5, r0
 8021770:	b108      	cbz	r0, 8021776 <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021772:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8021774:	e7d2      	b.n	802171c <dhcp_start+0x20>
    return ERR_MEM;
 8021776:	f04f 36ff 	mov.w	r6, #4294967295
 802177a:	e7e5      	b.n	8021748 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 802177c:	4b09      	ldr	r3, [pc, #36]	; (80217a4 <dhcp_start+0xa8>)
 802177e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021782:	4909      	ldr	r1, [pc, #36]	; (80217a8 <dhcp_start+0xac>)
 8021784:	f06f 060f 	mvn.w	r6, #15
 8021788:	4808      	ldr	r0, [pc, #32]	; (80217ac <dhcp_start+0xb0>)
 802178a:	f003 fc1f 	bl	8024fcc <iprintf>
 802178e:	e7db      	b.n	8021748 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021790:	4b04      	ldr	r3, [pc, #16]	; (80217a4 <dhcp_start+0xa8>)
 8021792:	f240 22e7 	movw	r2, #743	; 0x2e7
 8021796:	4906      	ldr	r1, [pc, #24]	; (80217b0 <dhcp_start+0xb4>)
 8021798:	f06f 060f 	mvn.w	r6, #15
 802179c:	4803      	ldr	r0, [pc, #12]	; (80217ac <dhcp_start+0xb0>)
 802179e:	f003 fc15 	bl	8024fcc <iprintf>
 80217a2:	e7d1      	b.n	8021748 <dhcp_start+0x4c>
 80217a4:	08044bf4 	.word	0x08044bf4
 80217a8:	08044f48 	.word	0x08044f48
 80217ac:	0802bdc0 	.word	0x0802bdc0
 80217b0:	0802c670 	.word	0x0802c670

080217b4 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80217b4:	4b8a      	ldr	r3, [pc, #552]	; (80219e0 <dhcp_coarse_tmr+0x22c>)
{
 80217b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80217ba:	681d      	ldr	r5, [r3, #0]
{
 80217bc:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 80217be:	b1dd      	cbz	r5, 80217f8 <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80217c0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80217c2:	b1b4      	cbz	r4, 80217f2 <dhcp_coarse_tmr+0x3e>
 80217c4:	7963      	ldrb	r3, [r4, #5]
 80217c6:	b1a3      	cbz	r3, 80217f2 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80217c8:	8aa1      	ldrh	r1, [r4, #20]
 80217ca:	b129      	cbz	r1, 80217d8 <dhcp_coarse_tmr+0x24>
 80217cc:	8a62      	ldrh	r2, [r4, #18]
 80217ce:	3201      	adds	r2, #1
 80217d0:	b292      	uxth	r2, r2
 80217d2:	4291      	cmp	r1, r2
 80217d4:	8262      	strh	r2, [r4, #18]
 80217d6:	d012      	beq.n	80217fe <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80217d8:	8a22      	ldrh	r2, [r4, #16]
 80217da:	b11a      	cbz	r2, 80217e4 <dhcp_coarse_tmr+0x30>
 80217dc:	1e51      	subs	r1, r2, #1
 80217de:	2a01      	cmp	r2, #1
 80217e0:	8221      	strh	r1, [r4, #16]
 80217e2:	d013      	beq.n	802180c <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80217e4:	89e2      	ldrh	r2, [r4, #14]
 80217e6:	b122      	cbz	r2, 80217f2 <dhcp_coarse_tmr+0x3e>
 80217e8:	1e51      	subs	r1, r2, #1
 80217ea:	2a01      	cmp	r2, #1
 80217ec:	81e1      	strh	r1, [r4, #14]
 80217ee:	f000 8087 	beq.w	8021900 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 80217f2:	682d      	ldr	r5, [r5, #0]
 80217f4:	2d00      	cmp	r5, #0
 80217f6:	d1e3      	bne.n	80217c0 <dhcp_coarse_tmr+0xc>
}
 80217f8:	b007      	add	sp, #28
 80217fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 80217fe:	4628      	mov	r0, r5
 8021800:	f7ff feec 	bl	80215dc <dhcp_release_and_stop>
        dhcp_start(netif);
 8021804:	4628      	mov	r0, r5
 8021806:	f7ff ff79 	bl	80216fc <dhcp_start>
 802180a:	e7f2      	b.n	80217f2 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 802180c:	1e5a      	subs	r2, r3, #1
 802180e:	b2d1      	uxtb	r1, r2
 8021810:	2909      	cmp	r1, #9
 8021812:	d8ee      	bhi.n	80217f2 <dhcp_coarse_tmr+0x3e>
 8021814:	f240 2219 	movw	r2, #537	; 0x219
 8021818:	40ca      	lsrs	r2, r1
 802181a:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802181c:	f012 0201 	ands.w	r2, r2, #1
 8021820:	d1e7      	bne.n	80217f2 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8021822:	2b04      	cmp	r3, #4
 8021824:	d003      	beq.n	802182e <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8021826:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8021828:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 802182a:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 802182c:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802182e:	f10d 0316 	add.w	r3, sp, #22
 8021832:	2203      	movs	r2, #3
 8021834:	4621      	mov	r1, r4
 8021836:	4628      	mov	r0, r5
 8021838:	f7fe fde4 	bl	8020404 <dhcp_create_msg>
  if (p_out != NULL) {
 802183c:	4607      	mov	r7, r0
 802183e:	2800      	cmp	r0, #0
 8021840:	f000 8096 	beq.w	8021970 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021844:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8021848:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802184a:	f106 0904 	add.w	r9, r6, #4
 802184e:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021852:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021856:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 802185a:	f200 80b9 	bhi.w	80219d0 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 802185e:	2239      	movs	r2, #57	; 0x39
 8021860:	1c73      	adds	r3, r6, #1
 8021862:	fa1f fb8a 	uxth.w	fp, sl
 8021866:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 802186a:	b29b      	uxth	r3, r3
 802186c:	2202      	movs	r2, #2
 802186e:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021872:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021876:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021878:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802187a:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802187e:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021880:	f200 809e 	bhi.w	80219c0 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021884:	9903      	ldr	r1, [sp, #12]
 8021886:	1cf3      	adds	r3, r6, #3
 8021888:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802188c:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802188e:	0a0a      	lsrs	r2, r1, #8
 8021890:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021894:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021898:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802189c:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80218a0:	2b44      	cmp	r3, #68	; 0x44
 80218a2:	f200 8085 	bhi.w	80219b0 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 80218a6:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 80218aa:	2237      	movs	r2, #55	; 0x37
 80218ac:	1d73      	adds	r3, r6, #5
 80218ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8021a08 <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 80218b2:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 80218b6:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 80218ba:	b29b      	uxth	r3, r3
 80218bc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218be:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80218c2:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 80218c6:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80218ca:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218ce:	d80f      	bhi.n	80218f0 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 80218d0:	f808 a009 	strb.w	sl, [r8, r9]
 80218d4:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218d8:	4b42      	ldr	r3, [pc, #264]	; (80219e4 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 80218da:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218de:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80218e0:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218e4:	d01f      	beq.n	8021926 <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218e6:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80218ea:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218ee:	d9ef      	bls.n	80218d0 <dhcp_coarse_tmr+0x11c>
 80218f0:	4b3d      	ldr	r3, [pc, #244]	; (80219e8 <dhcp_coarse_tmr+0x234>)
 80218f2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80218f6:	493d      	ldr	r1, [pc, #244]	; (80219ec <dhcp_coarse_tmr+0x238>)
 80218f8:	483d      	ldr	r0, [pc, #244]	; (80219f0 <dhcp_coarse_tmr+0x23c>)
 80218fa:	f003 fb67 	bl	8024fcc <iprintf>
 80218fe:	e7e7      	b.n	80218d0 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021900:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8021904:	2a01      	cmp	r2, #1
 8021906:	d002      	beq.n	802190e <dhcp_coarse_tmr+0x15a>
 8021908:	2b0a      	cmp	r3, #10
 802190a:	f47f af72 	bne.w	80217f2 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 802190e:	4628      	mov	r0, r5
 8021910:	f7ff fd7e 	bl	8021410 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021914:	89a3      	ldrh	r3, [r4, #12]
 8021916:	8a62      	ldrh	r2, [r4, #18]
 8021918:	1a9b      	subs	r3, r3, r2
 802191a:	2b01      	cmp	r3, #1
 802191c:	f77f af69 	ble.w	80217f2 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8021920:	105b      	asrs	r3, r3, #1
 8021922:	81e3      	strh	r3, [r4, #14]
 8021924:	e765      	b.n	80217f2 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8021926:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 802192a:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 802192e:	22ff      	movs	r2, #255	; 0xff
 8021930:	b280      	uxth	r0, r0
 8021932:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021934:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021936:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802193a:	d808      	bhi.n	802194e <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 802193c:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8021940:	4440      	add	r0, r8
 8021942:	2100      	movs	r1, #0
 8021944:	b292      	uxth	r2, r2
 8021946:	3201      	adds	r2, #1
 8021948:	f002 fba4 	bl	8024094 <memset>
 802194c:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802194e:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021952:	4638      	mov	r0, r7
 8021954:	b289      	uxth	r1, r1
 8021956:	f7f9 f983 	bl	801ac60 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802195a:	4b26      	ldr	r3, [pc, #152]	; (80219f4 <dhcp_coarse_tmr+0x240>)
 802195c:	9500      	str	r5, [sp, #0]
 802195e:	4639      	mov	r1, r7
 8021960:	6818      	ldr	r0, [r3, #0]
 8021962:	2343      	movs	r3, #67	; 0x43
 8021964:	4a24      	ldr	r2, [pc, #144]	; (80219f8 <dhcp_coarse_tmr+0x244>)
 8021966:	f7fe fa4b 	bl	801fe00 <udp_sendto_if>
    pbuf_free(p_out);
 802196a:	4638      	mov	r0, r7
 802196c:	f7f9 fa74 	bl	801ae58 <pbuf_free>
  if (dhcp->tries < 255) {
 8021970:	79a3      	ldrb	r3, [r4, #6]
 8021972:	2bff      	cmp	r3, #255	; 0xff
 8021974:	d01a      	beq.n	80219ac <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8021976:	3301      	adds	r3, #1
 8021978:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802197a:	2b09      	cmp	r3, #9
    dhcp->tries++;
 802197c:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802197e:	d815      	bhi.n	80219ac <dhcp_coarse_tmr+0x1f8>
 8021980:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8021984:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021988:	4a1c      	ldr	r2, [pc, #112]	; (80219fc <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802198a:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802198c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021990:	b29b      	uxth	r3, r3
 8021992:	fba2 2303 	umull	r2, r3, r2, r3
 8021996:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021998:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802199a:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802199c:	8aa3      	ldrh	r3, [r4, #20]
 802199e:	1a9b      	subs	r3, r3, r2
 80219a0:	2b01      	cmp	r3, #1
 80219a2:	f77f af26 	ble.w	80217f2 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80219a6:	105b      	asrs	r3, r3, #1
 80219a8:	8223      	strh	r3, [r4, #16]
 80219aa:	e722      	b.n	80217f2 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 80219ac:	2314      	movs	r3, #20
 80219ae:	e7f3      	b.n	8021998 <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80219b0:	4b0d      	ldr	r3, [pc, #52]	; (80219e8 <dhcp_coarse_tmr+0x234>)
 80219b2:	f240 529a 	movw	r2, #1434	; 0x59a
 80219b6:	4912      	ldr	r1, [pc, #72]	; (8021a00 <dhcp_coarse_tmr+0x24c>)
 80219b8:	480d      	ldr	r0, [pc, #52]	; (80219f0 <dhcp_coarse_tmr+0x23c>)
 80219ba:	f003 fb07 	bl	8024fcc <iprintf>
 80219be:	e772      	b.n	80218a6 <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80219c0:	4b09      	ldr	r3, [pc, #36]	; (80219e8 <dhcp_coarse_tmr+0x234>)
 80219c2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80219c6:	490f      	ldr	r1, [pc, #60]	; (8021a04 <dhcp_coarse_tmr+0x250>)
 80219c8:	4809      	ldr	r0, [pc, #36]	; (80219f0 <dhcp_coarse_tmr+0x23c>)
 80219ca:	f003 faff 	bl	8024fcc <iprintf>
 80219ce:	e759      	b.n	8021884 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80219d0:	4b05      	ldr	r3, [pc, #20]	; (80219e8 <dhcp_coarse_tmr+0x234>)
 80219d2:	f240 529a 	movw	r2, #1434	; 0x59a
 80219d6:	490a      	ldr	r1, [pc, #40]	; (8021a00 <dhcp_coarse_tmr+0x24c>)
 80219d8:	4805      	ldr	r0, [pc, #20]	; (80219f0 <dhcp_coarse_tmr+0x23c>)
 80219da:	f003 faf7 	bl	8024fcc <iprintf>
 80219de:	e73e      	b.n	802185e <dhcp_coarse_tmr+0xaa>
 80219e0:	2002dbc8 	.word	0x2002dbc8
 80219e4:	08044f70 	.word	0x08044f70
 80219e8:	08044bf4 	.word	0x08044bf4
 80219ec:	08044de8 	.word	0x08044de8
 80219f0:	0802bdc0 	.word	0x0802bdc0
 80219f4:	2002dc40 	.word	0x2002dc40
 80219f8:	080452ac 	.word	0x080452ac
 80219fc:	10624dd3 	.word	0x10624dd3
 8021a00:	08044d68 	.word	0x08044d68
 8021a04:	08044dac 	.word	0x08044dac
 8021a08:	08044f6d 	.word	0x08044f6d

08021a0c <dhcp_fine_tmr>:
{
 8021a0c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8021a0e:	4b21      	ldr	r3, [pc, #132]	; (8021a94 <dhcp_fine_tmr+0x88>)
 8021a10:	681c      	ldr	r4, [r3, #0]
 8021a12:	b1fc      	cbz	r4, 8021a54 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8021a14:	2500      	movs	r5, #0
 8021a16:	e003      	b.n	8021a20 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8021a18:	3a01      	subs	r2, #1
 8021a1a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8021a1c:	6824      	ldr	r4, [r4, #0]
 8021a1e:	b1cc      	cbz	r4, 8021a54 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d0fa      	beq.n	8021a1c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8021a26:	891a      	ldrh	r2, [r3, #8]
 8021a28:	2a01      	cmp	r2, #1
 8021a2a:	d8f5      	bhi.n	8021a18 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8021a2c:	d1f6      	bne.n	8021a1c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021a2e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8021a30:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021a32:	2a0c      	cmp	r2, #12
 8021a34:	d016      	beq.n	8021a64 <dhcp_fine_tmr+0x58>
 8021a36:	2a06      	cmp	r2, #6
 8021a38:	d014      	beq.n	8021a64 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8021a3a:	2a01      	cmp	r2, #1
 8021a3c:	d016      	beq.n	8021a6c <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8021a3e:	2a08      	cmp	r2, #8
 8021a40:	d009      	beq.n	8021a56 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8021a42:	2a03      	cmp	r2, #3
 8021a44:	d1ea      	bne.n	8021a1c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8021a46:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8021a48:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8021a4a:	2b01      	cmp	r3, #1
 8021a4c:	d91e      	bls.n	8021a8c <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8021a4e:	f7fe fe8b 	bl	8020768 <dhcp_discover>
 8021a52:	e7e3      	b.n	8021a1c <dhcp_fine_tmr+0x10>
}
 8021a54:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8021a56:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8021a58:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8021a5a:	2b01      	cmp	r3, #1
 8021a5c:	d913      	bls.n	8021a86 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8021a5e:	f7fe fb6d 	bl	802013c <dhcp_bind>
 8021a62:	e7db      	b.n	8021a1c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8021a64:	4620      	mov	r0, r4
 8021a66:	f7fe fe7f 	bl	8020768 <dhcp_discover>
 8021a6a:	e7d7      	b.n	8021a1c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8021a6c:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8021a6e:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8021a70:	2b05      	cmp	r3, #5
 8021a72:	d802      	bhi.n	8021a7a <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8021a74:	f7fe ff5e 	bl	8020934 <dhcp_select.isra.0>
 8021a78:	e7d0      	b.n	8021a1c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8021a7a:	f7ff fdaf 	bl	80215dc <dhcp_release_and_stop>
      dhcp_start(netif);
 8021a7e:	4620      	mov	r0, r4
 8021a80:	f7ff fe3c 	bl	80216fc <dhcp_start>
 8021a84:	e7ca      	b.n	8021a1c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8021a86:	f7fe fb41 	bl	802010c <dhcp_check>
 8021a8a:	e7c7      	b.n	8021a1c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8021a8c:	f7fe fd6c 	bl	8020568 <dhcp_reboot.isra.0>
 8021a90:	e7c4      	b.n	8021a1c <dhcp_fine_tmr+0x10>
 8021a92:	bf00      	nop
 8021a94:	2002dbc8 	.word	0x2002dbc8

08021a98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021a9c:	4f1a      	ldr	r7, [pc, #104]	; (8021b08 <etharp_free_entry+0x70>)
 8021a9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8021aa2:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8021aa4:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8021aa8:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8021aac:	b32c      	cbz	r4, 8021afa <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021aae:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8021b0c <etharp_free_entry+0x74>
 8021ab2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8021b10 <etharp_free_entry+0x78>
 8021ab6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8021b14 <etharp_free_entry+0x7c>
 8021aba:	e006      	b.n	8021aca <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8021abc:	f7f9 f9cc 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021ac0:	4629      	mov	r1, r5
 8021ac2:	200b      	movs	r0, #11
 8021ac4:	f7f8 fccc 	bl	801a460 <memp_free>
  while (q) {
 8021ac8:	b19c      	cbz	r4, 8021af2 <etharp_free_entry+0x5a>
    q = q->next;
 8021aca:	4625      	mov	r5, r4
 8021acc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021ace:	6868      	ldr	r0, [r5, #4]
 8021ad0:	2800      	cmp	r0, #0
 8021ad2:	d1f3      	bne.n	8021abc <etharp_free_entry+0x24>
 8021ad4:	4651      	mov	r1, sl
 8021ad6:	465b      	mov	r3, fp
 8021ad8:	229a      	movs	r2, #154	; 0x9a
 8021ada:	4648      	mov	r0, r9
 8021adc:	f003 fa76 	bl	8024fcc <iprintf>
    pbuf_free(r->p);
 8021ae0:	6868      	ldr	r0, [r5, #4]
 8021ae2:	f7f9 f9b9 	bl	801ae58 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021ae6:	4629      	mov	r1, r5
 8021ae8:	200b      	movs	r0, #11
 8021aea:	f7f8 fcb9 	bl	801a460 <memp_free>
  while (q) {
 8021aee:	2c00      	cmp	r4, #0
 8021af0:	d1eb      	bne.n	8021aca <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8021af2:	eb08 0306 	add.w	r3, r8, r6
 8021af6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021afa:	4446      	add	r6, r8
 8021afc:	2300      	movs	r3, #0
 8021afe:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8021b02:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b08:	2002dc80 	.word	0x2002dc80
 8021b0c:	08044f70 	.word	0x08044f70
 8021b10:	08044fa8 	.word	0x08044fa8
 8021b14:	0802bdc0 	.word	0x0802bdc0

08021b18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b1c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021b1e:	f04f 0820 	mov.w	r8, #32
{
 8021b22:	b083      	sub	sp, #12
 8021b24:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021b26:	469e      	mov	lr, r3
 8021b28:	469b      	mov	fp, r3
{
 8021b2a:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021b2c:	469a      	mov	sl, r3
 8021b2e:	4948      	ldr	r1, [pc, #288]	; (8021c50 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8021b30:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021b32:	46c4      	mov	ip, r8
 8021b34:	4691      	mov	r9, r2
 8021b36:	f8cd 8004 	str.w	r8, [sp, #4]
 8021b3a:	e004      	b.n	8021b46 <etharp_find_entry+0x2e>
 8021b3c:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b3e:	3301      	adds	r3, #1
 8021b40:	3118      	adds	r1, #24
 8021b42:	2b20      	cmp	r3, #32
 8021b44:	d015      	beq.n	8021b72 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021b46:	2c20      	cmp	r4, #32
 8021b48:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8021b4a:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021b4c:	d134      	bne.n	8021bb8 <etharp_find_entry+0xa0>
 8021b4e:	2800      	cmp	r0, #0
 8021b50:	d0f4      	beq.n	8021b3c <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021b52:	b11d      	cbz	r5, 8021b5c <etharp_find_entry+0x44>
 8021b54:	682f      	ldr	r7, [r5, #0]
 8021b56:	684e      	ldr	r6, [r1, #4]
 8021b58:	42b7      	cmp	r7, r6
 8021b5a:	d038      	beq.n	8021bce <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021b5c:	2801      	cmp	r0, #1
 8021b5e:	d02e      	beq.n	8021bbe <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021b60:	8a48      	ldrh	r0, [r1, #18]
 8021b62:	4570      	cmp	r0, lr
 8021b64:	d3eb      	bcc.n	8021b3e <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b66:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8021b68:	4686      	mov	lr, r0
 8021b6a:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b6c:	3118      	adds	r1, #24
 8021b6e:	2b20      	cmp	r3, #32
 8021b70:	d1e9      	bne.n	8021b46 <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021b72:	9b00      	ldr	r3, [sp, #0]
 8021b74:	464e      	mov	r6, r9
 8021b76:	2b01      	cmp	r3, #1
 8021b78:	d166      	bne.n	8021c48 <etharp_find_entry+0x130>
 8021b7a:	2c20      	cmp	r4, #32
 8021b7c:	d040      	beq.n	8021c00 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021b7e:	46a1      	mov	r9, r4
 8021b80:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8021b84:	4a32      	ldr	r2, [pc, #200]	; (8021c50 <etharp_find_entry+0x138>)
 8021b86:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8021b8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021b8e:	7d1b      	ldrb	r3, [r3, #20]
 8021b90:	bb73      	cbnz	r3, 8021bf0 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021b92:	b135      	cbz	r5, 8021ba2 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021b94:	eb08 0309 	add.w	r3, r8, r9
 8021b98:	492d      	ldr	r1, [pc, #180]	; (8021c50 <etharp_find_entry+0x138>)
 8021b9a:	682a      	ldr	r2, [r5, #0]
 8021b9c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8021ba0:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8021ba2:	44c8      	add	r8, r9
 8021ba4:	4a2a      	ldr	r2, [pc, #168]	; (8021c50 <etharp_find_entry+0x138>)
 8021ba6:	2300      	movs	r3, #0
 8021ba8:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8021bac:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021bae:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	b003      	add	sp, #12
 8021bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8021bb8:	2800      	cmp	r0, #0
 8021bba:	d0c0      	beq.n	8021b3e <etharp_find_entry+0x26>
 8021bbc:	e7c9      	b.n	8021b52 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8021bbe:	6808      	ldr	r0, [r1, #0]
 8021bc0:	b180      	cbz	r0, 8021be4 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8021bc2:	8a48      	ldrh	r0, [r1, #18]
 8021bc4:	4550      	cmp	r0, sl
 8021bc6:	d3ba      	bcc.n	8021b3e <etharp_find_entry+0x26>
 8021bc8:	4682      	mov	sl, r0
 8021bca:	4690      	mov	r8, r2
 8021bcc:	e7b7      	b.n	8021b3e <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021bce:	f1b9 0f00 	cmp.w	r9, #0
 8021bd2:	d002      	beq.n	8021bda <etharp_find_entry+0xc2>
 8021bd4:	688e      	ldr	r6, [r1, #8]
 8021bd6:	454e      	cmp	r6, r9
 8021bd8:	d1c0      	bne.n	8021b5c <etharp_find_entry+0x44>
 8021bda:	4614      	mov	r4, r2
}
 8021bdc:	4620      	mov	r0, r4
 8021bde:	b003      	add	sp, #12
 8021be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8021be4:	8a48      	ldrh	r0, [r1, #18]
 8021be6:	4558      	cmp	r0, fp
 8021be8:	d3a9      	bcc.n	8021b3e <etharp_find_entry+0x26>
 8021bea:	4683      	mov	fp, r0
 8021bec:	9201      	str	r2, [sp, #4]
 8021bee:	e7a6      	b.n	8021b3e <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021bf0:	4b18      	ldr	r3, [pc, #96]	; (8021c54 <etharp_find_entry+0x13c>)
 8021bf2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8021bf6:	4918      	ldr	r1, [pc, #96]	; (8021c58 <etharp_find_entry+0x140>)
 8021bf8:	4818      	ldr	r0, [pc, #96]	; (8021c5c <etharp_find_entry+0x144>)
 8021bfa:	f003 f9e7 	bl	8024fcc <iprintf>
 8021bfe:	e7c8      	b.n	8021b92 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8021c00:	f1bc 0f20 	cmp.w	ip, #32
 8021c04:	d012      	beq.n	8021c2c <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021c06:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8021c0a:	4a11      	ldr	r2, [pc, #68]	; (8021c50 <etharp_find_entry+0x138>)
 8021c0c:	46e1      	mov	r9, ip
 8021c0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021c12:	b1bb      	cbz	r3, 8021c44 <etharp_find_entry+0x12c>
 8021c14:	464c      	mov	r4, r9
 8021c16:	4b0f      	ldr	r3, [pc, #60]	; (8021c54 <etharp_find_entry+0x13c>)
 8021c18:	f240 126d 	movw	r2, #365	; 0x16d
 8021c1c:	4910      	ldr	r1, [pc, #64]	; (8021c60 <etharp_find_entry+0x148>)
 8021c1e:	480f      	ldr	r0, [pc, #60]	; (8021c5c <etharp_find_entry+0x144>)
 8021c20:	f003 f9d4 	bl	8024fcc <iprintf>
    etharp_free_entry(i);
 8021c24:	4648      	mov	r0, r9
 8021c26:	f7ff ff37 	bl	8021a98 <etharp_free_entry>
 8021c2a:	e7a9      	b.n	8021b80 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021c2c:	9b01      	ldr	r3, [sp, #4]
 8021c2e:	2b20      	cmp	r3, #32
 8021c30:	d105      	bne.n	8021c3e <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021c32:	f1b8 0f20 	cmp.w	r8, #32
 8021c36:	d007      	beq.n	8021c48 <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8021c38:	4644      	mov	r4, r8
 8021c3a:	46c1      	mov	r9, r8
 8021c3c:	e7f2      	b.n	8021c24 <etharp_find_entry+0x10c>
 8021c3e:	461c      	mov	r4, r3
 8021c40:	4699      	mov	r9, r3
 8021c42:	e7ef      	b.n	8021c24 <etharp_find_entry+0x10c>
 8021c44:	4664      	mov	r4, ip
 8021c46:	e7ed      	b.n	8021c24 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8021c48:	f04f 34ff 	mov.w	r4, #4294967295
 8021c4c:	e7b0      	b.n	8021bb0 <etharp_find_entry+0x98>
 8021c4e:	bf00      	nop
 8021c50:	2002dc80 	.word	0x2002dc80
 8021c54:	08044f70 	.word	0x08044f70
 8021c58:	08044fd0 	.word	0x08044fd0
 8021c5c:	0802bdc0 	.word	0x0802bdc0
 8021c60:	08044fb8 	.word	0x08044fb8

08021c64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8021c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c68:	b082      	sub	sp, #8
 8021c6a:	4688      	mov	r8, r1
 8021c6c:	4691      	mov	r9, r2
 8021c6e:	461f      	mov	r7, r3
 8021c70:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021c74:	4606      	mov	r6, r0
{
 8021c76:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021c7a:	2800      	cmp	r0, #0
 8021c7c:	d050      	beq.n	8021d20 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8021c7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021c82:	211c      	movs	r1, #28
 8021c84:	200e      	movs	r0, #14
 8021c86:	f7f8 ff31 	bl	801aaec <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8021c8a:	4605      	mov	r5, r0
 8021c8c:	2800      	cmp	r0, #0
 8021c8e:	d04f      	beq.n	8021d30 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021c90:	8943      	ldrh	r3, [r0, #10]
 8021c92:	2b1b      	cmp	r3, #27
 8021c94:	d93c      	bls.n	8021d10 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8021c96:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8021c98:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8021c9a:	f7f7 f8bd 	bl	8018e18 <lwip_htons>
 8021c9e:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8021ca0:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8021ca4:	2b06      	cmp	r3, #6
 8021ca6:	d006      	beq.n	8021cb6 <etharp_raw+0x52>
 8021ca8:	4b23      	ldr	r3, [pc, #140]	; (8021d38 <etharp_raw+0xd4>)
 8021caa:	f240 4269 	movw	r2, #1129	; 0x469
 8021cae:	4923      	ldr	r1, [pc, #140]	; (8021d3c <etharp_raw+0xd8>)
 8021cb0:	4823      	ldr	r0, [pc, #140]	; (8021d40 <etharp_raw+0xdc>)
 8021cb2:	f003 f98b 	bl	8024fcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021cb6:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021cb8:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021cba:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021cbc:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021cbe:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021cc0:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021cc2:	88b9      	ldrh	r1, [r7, #4]
 8021cc4:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8021cc6:	f8da 1000 	ldr.w	r1, [sl]
 8021cca:	f8c4 1012 	str.w	r1, [r4, #18]
 8021cce:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8021cd2:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021cd6:	6809      	ldr	r1, [r1, #0]
 8021cd8:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021cdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021cde:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021ce0:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021ce2:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021ce4:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021ce6:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021ce8:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021cea:	2108      	movs	r1, #8
 8021cec:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8021cee:	2106      	movs	r1, #6
 8021cf0:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021cf2:	2104      	movs	r1, #4
 8021cf4:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021cf6:	f640 0106 	movw	r1, #2054	; 0x806
 8021cfa:	9100      	str	r1, [sp, #0]
 8021cfc:	4629      	mov	r1, r5
 8021cfe:	f001 fbf5 	bl	80234ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8021d02:	4628      	mov	r0, r5
 8021d04:	f7f9 f8a8 	bl	801ae58 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8021d08:	4630      	mov	r0, r6
}
 8021d0a:	b002      	add	sp, #8
 8021d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021d10:	4b09      	ldr	r3, [pc, #36]	; (8021d38 <etharp_raw+0xd4>)
 8021d12:	f240 4262 	movw	r2, #1122	; 0x462
 8021d16:	490b      	ldr	r1, [pc, #44]	; (8021d44 <etharp_raw+0xe0>)
 8021d18:	4809      	ldr	r0, [pc, #36]	; (8021d40 <etharp_raw+0xdc>)
 8021d1a:	f003 f957 	bl	8024fcc <iprintf>
 8021d1e:	e7ba      	b.n	8021c96 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021d20:	4b05      	ldr	r3, [pc, #20]	; (8021d38 <etharp_raw+0xd4>)
 8021d22:	f240 4257 	movw	r2, #1111	; 0x457
 8021d26:	4908      	ldr	r1, [pc, #32]	; (8021d48 <etharp_raw+0xe4>)
 8021d28:	4805      	ldr	r0, [pc, #20]	; (8021d40 <etharp_raw+0xdc>)
 8021d2a:	f003 f94f 	bl	8024fcc <iprintf>
 8021d2e:	e7a6      	b.n	8021c7e <etharp_raw+0x1a>
    return ERR_MEM;
 8021d30:	f04f 30ff 	mov.w	r0, #4294967295
 8021d34:	e7e9      	b.n	8021d0a <etharp_raw+0xa6>
 8021d36:	bf00      	nop
 8021d38:	08044f70 	.word	0x08044f70
 8021d3c:	08045030 	.word	0x08045030
 8021d40:	0802bdc0 	.word	0x0802bdc0
 8021d44:	08044ffc 	.word	0x08044ffc
 8021d48:	0802c670 	.word	0x0802c670

08021d4c <etharp_output_to_arp_index>:
{
 8021d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021d50:	4f37      	ldr	r7, [pc, #220]	; (8021e30 <etharp_output_to_arp_index+0xe4>)
 8021d52:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 8021d56:	b085      	sub	sp, #20
 8021d58:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021d5a:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8021d5e:	4605      	mov	r5, r0
 8021d60:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021d62:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021d66:	f899 3014 	ldrb.w	r3, [r9, #20]
 8021d6a:	2b01      	cmp	r3, #1
 8021d6c:	d93c      	bls.n	8021de8 <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021d6e:	2b02      	cmp	r3, #2
 8021d70:	d011      	beq.n	8021d96 <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021d72:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021d74:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021d78:	fb02 7404 	mla	r4, r2, r4, r7
 8021d7c:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021d7e:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8021d82:	4623      	mov	r3, r4
 8021d84:	464a      	mov	r2, r9
 8021d86:	4631      	mov	r1, r6
 8021d88:	4628      	mov	r0, r5
 8021d8a:	9700      	str	r7, [sp, #0]
 8021d8c:	f001 fbae 	bl	80234ec <ethernet_output>
}
 8021d90:	b005      	add	sp, #20
 8021d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021d96:	44a0      	add	r8, r4
 8021d98:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8021d9c:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8021da0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8021da4:	d82a      	bhi.n	8021dfc <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021da6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021daa:	d3e2      	bcc.n	8021d72 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021dac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021db0:	2301      	movs	r3, #1
 8021db2:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021db6:	4628      	mov	r0, r5
 8021db8:	00e4      	lsls	r4, r4, #3
 8021dba:	9303      	str	r3, [sp, #12]
 8021dbc:	4b1d      	ldr	r3, [pc, #116]	; (8021e34 <etharp_output_to_arp_index+0xe8>)
 8021dbe:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021dc0:	f104 020c 	add.w	r2, r4, #12
 8021dc4:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021dc8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021dca:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021dcc:	18bc      	adds	r4, r7, r2
 8021dce:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021dd0:	9300      	str	r3, [sp, #0]
 8021dd2:	464b      	mov	r3, r9
 8021dd4:	4622      	mov	r2, r4
 8021dd6:	9702      	str	r7, [sp, #8]
 8021dd8:	f7ff ff44 	bl	8021c64 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021ddc:	2800      	cmp	r0, #0
 8021dde:	d1ce      	bne.n	8021d7e <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021de0:	2303      	movs	r3, #3
 8021de2:	f888 3014 	strb.w	r3, [r8, #20]
 8021de6:	e7ca      	b.n	8021d7e <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021de8:	4b13      	ldr	r3, [pc, #76]	; (8021e38 <etharp_output_to_arp_index+0xec>)
 8021dea:	f240 22ee 	movw	r2, #750	; 0x2ee
 8021dee:	4913      	ldr	r1, [pc, #76]	; (8021e3c <etharp_output_to_arp_index+0xf0>)
 8021df0:	4813      	ldr	r0, [pc, #76]	; (8021e40 <etharp_output_to_arp_index+0xf4>)
 8021df2:	f003 f8eb 	bl	8024fcc <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021df6:	f899 3014 	ldrb.w	r3, [r9, #20]
 8021dfa:	e7b8      	b.n	8021d6e <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021dfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021e00:	2301      	movs	r3, #1
 8021e02:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021e06:	4a0f      	ldr	r2, [pc, #60]	; (8021e44 <etharp_output_to_arp_index+0xf8>)
 8021e08:	00e4      	lsls	r4, r4, #3
 8021e0a:	9303      	str	r3, [sp, #12]
 8021e0c:	4649      	mov	r1, r9
 8021e0e:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021e10:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021e12:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021e14:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021e16:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021e18:	9302      	str	r3, [sp, #8]
 8021e1a:	4b06      	ldr	r3, [pc, #24]	; (8021e34 <etharp_output_to_arp_index+0xe8>)
 8021e1c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021e1e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021e20:	9300      	str	r3, [sp, #0]
 8021e22:	464b      	mov	r3, r9
 8021e24:	f7ff ff1e 	bl	8021c64 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021e28:	2800      	cmp	r0, #0
 8021e2a:	d0d9      	beq.n	8021de0 <etharp_output_to_arp_index+0x94>
 8021e2c:	e7a7      	b.n	8021d7e <etharp_output_to_arp_index+0x32>
 8021e2e:	bf00      	nop
 8021e30:	2002dc80 	.word	0x2002dc80
 8021e34:	080454a8 	.word	0x080454a8
 8021e38:	08044f70 	.word	0x08044f70
 8021e3c:	08045074 	.word	0x08045074
 8021e40:	0802bdc0 	.word	0x0802bdc0
 8021e44:	080454a0 	.word	0x080454a0

08021e48 <etharp_tmr>:
{
 8021e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e4c:	4c1e      	ldr	r4, [pc, #120]	; (8021ec8 <etharp_tmr+0x80>)
 8021e4e:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e50:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021e52:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8021ed0 <etharp_tmr+0x88>
 8021e56:	4f1d      	ldr	r7, [pc, #116]	; (8021ecc <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021e58:	2602      	movs	r6, #2
 8021e5a:	e00d      	b.n	8021e78 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021e5c:	2a01      	cmp	r2, #1
 8021e5e:	d101      	bne.n	8021e64 <etharp_tmr+0x1c>
 8021e60:	2b04      	cmp	r3, #4
 8021e62:	d813      	bhi.n	8021e8c <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021e64:	2a03      	cmp	r2, #3
 8021e66:	d01b      	beq.n	8021ea0 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021e68:	2a04      	cmp	r2, #4
 8021e6a:	d01c      	beq.n	8021ea6 <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021e6c:	2a01      	cmp	r2, #1
 8021e6e:	d01c      	beq.n	8021eaa <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e70:	3501      	adds	r5, #1
 8021e72:	3418      	adds	r4, #24
 8021e74:	2d20      	cmp	r5, #32
 8021e76:	d010      	beq.n	8021e9a <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 8021e78:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8021e7a:	2a00      	cmp	r2, #0
 8021e7c:	d0f8      	beq.n	8021e70 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8021e7e:	89e3      	ldrh	r3, [r4, #14]
 8021e80:	3301      	adds	r3, #1
 8021e82:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021e84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8021e88:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021e8a:	d3e7      	bcc.n	8021e5c <etharp_tmr+0x14>
        etharp_free_entry(i);
 8021e8c:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e8e:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8021e90:	f7ff fe02 	bl	8021a98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e94:	3418      	adds	r4, #24
 8021e96:	2d20      	cmp	r5, #32
 8021e98:	d1ee      	bne.n	8021e78 <etharp_tmr+0x30>
}
 8021e9a:	b004      	add	sp, #16
 8021e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8021ea0:	2304      	movs	r3, #4
 8021ea2:	7423      	strb	r3, [r4, #16]
 8021ea4:	e7e4      	b.n	8021e70 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021ea6:	7426      	strb	r6, [r4, #16]
 8021ea8:	e7e2      	b.n	8021e70 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8021eaa:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021eac:	f8cd 8004 	str.w	r8, [sp, #4]
 8021eb0:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021eb4:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021eb6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021eba:	9100      	str	r1, [sp, #0]
 8021ebc:	463a      	mov	r2, r7
 8021ebe:	4619      	mov	r1, r3
 8021ec0:	f7ff fed0 	bl	8021c64 <etharp_raw>
 8021ec4:	e7d4      	b.n	8021e70 <etharp_tmr+0x28>
 8021ec6:	bf00      	nop
 8021ec8:	2002dc84 	.word	0x2002dc84
 8021ecc:	080454a0 	.word	0x080454a0
 8021ed0:	080454a8 	.word	0x080454a8

08021ed4 <etharp_cleanup_netif>:
{
 8021ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ed6:	4c0c      	ldr	r4, [pc, #48]	; (8021f08 <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021ed8:	2500      	movs	r5, #0
{
 8021eda:	4607      	mov	r7, r0
 8021edc:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8021ee0:	e003      	b.n	8021eea <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021ee2:	3418      	adds	r4, #24
 8021ee4:	3501      	adds	r5, #1
 8021ee6:	42b4      	cmp	r4, r6
 8021ee8:	d00c      	beq.n	8021f04 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021eea:	7d23      	ldrb	r3, [r4, #20]
 8021eec:	2b00      	cmp	r3, #0
 8021eee:	d0f8      	beq.n	8021ee2 <etharp_cleanup_netif+0xe>
 8021ef0:	68a3      	ldr	r3, [r4, #8]
 8021ef2:	42bb      	cmp	r3, r7
 8021ef4:	d1f5      	bne.n	8021ee2 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021ef6:	3418      	adds	r4, #24
      etharp_free_entry(i);
 8021ef8:	4628      	mov	r0, r5
 8021efa:	f7ff fdcd 	bl	8021a98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021efe:	3501      	adds	r5, #1
 8021f00:	42b4      	cmp	r4, r6
 8021f02:	d1f2      	bne.n	8021eea <etharp_cleanup_netif+0x16>
}
 8021f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f06:	bf00      	nop
 8021f08:	2002dc80 	.word	0x2002dc80

08021f0c <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021f0c:	2900      	cmp	r1, #0
 8021f0e:	f000 808e 	beq.w	802202e <etharp_input+0x122>
{
 8021f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 8021f16:	6846      	ldr	r6, [r0, #4]
{
 8021f18:	b087      	sub	sp, #28
 8021f1a:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021f1c:	8833      	ldrh	r3, [r6, #0]
 8021f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021f22:	d102      	bne.n	8021f2a <etharp_input+0x1e>
 8021f24:	7933      	ldrb	r3, [r6, #4]
 8021f26:	2b06      	cmp	r3, #6
 8021f28:	d005      	beq.n	8021f36 <etharp_input+0x2a>
    pbuf_free(p);
 8021f2a:	4620      	mov	r0, r4
}
 8021f2c:	b007      	add	sp, #28
 8021f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8021f32:	f7f8 bf91 	b.w	801ae58 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021f36:	7973      	ldrb	r3, [r6, #5]
 8021f38:	2b04      	cmp	r3, #4
 8021f3a:	d1f6      	bne.n	8021f2a <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021f3c:	8873      	ldrh	r3, [r6, #2]
 8021f3e:	2b08      	cmp	r3, #8
 8021f40:	d1f3      	bne.n	8021f2a <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021f42:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8021f46:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021f48:	684b      	ldr	r3, [r1, #4]
 8021f4a:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021f4e:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d073      	beq.n	802203c <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021f54:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021f58:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021f5c:	faba fa8a 	clz	sl, sl
 8021f60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021f64:	f1ca 0702 	rsb	r7, sl, #2
 8021f68:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021f6a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8021f6e:	2b06      	cmp	r3, #6
 8021f70:	d007      	beq.n	8021f82 <etharp_input+0x76>
 8021f72:	4b3e      	ldr	r3, [pc, #248]	; (802206c <etharp_input+0x160>)
 8021f74:	f240 12a9 	movw	r2, #425	; 0x1a9
 8021f78:	493d      	ldr	r1, [pc, #244]	; (8022070 <etharp_input+0x164>)
 8021f7a:	483e      	ldr	r0, [pc, #248]	; (8022074 <etharp_input+0x168>)
 8021f7c:	f003 f826 	bl	8024fcc <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8021f80:	9805      	ldr	r0, [sp, #20]
 8021f82:	2800      	cmp	r0, #0
 8021f84:	d042      	beq.n	802200c <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021f86:	4629      	mov	r1, r5
 8021f88:	f000 fd30 	bl	80229ec <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8021f8c:	4681      	mov	r9, r0
 8021f8e:	2800      	cmp	r0, #0
 8021f90:	d13c      	bne.n	802200c <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8021f92:	9b05      	ldr	r3, [sp, #20]
 8021f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021f98:	2be0      	cmp	r3, #224	; 0xe0
 8021f9a:	d037      	beq.n	802200c <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8021f9c:	4639      	mov	r1, r7
 8021f9e:	462a      	mov	r2, r5
 8021fa0:	a805      	add	r0, sp, #20
 8021fa2:	f7ff fdb9 	bl	8021b18 <etharp_find_entry>
  if (i < 0) {
 8021fa6:	2800      	cmp	r0, #0
 8021fa8:	db30      	blt.n	802200c <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021faa:	4a33      	ldr	r2, [pc, #204]	; (8022078 <etharp_input+0x16c>)
 8021fac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021fb0:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021fb2:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021fb6:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 8021fba:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021fbc:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8021fbe:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021fc0:	fb10 330c 	smlabb	r3, r0, ip, r3
 8021fc4:	f8d8 0000 	ldr.w	r0, [r8]
 8021fc8:	50d0      	str	r0, [r2, r3]
 8021fca:	18d0      	adds	r0, r2, r3
 8021fcc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8021fd0:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8021fd2:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 8021fd6:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 8021fda:	b1b9      	cbz	r1, 802200c <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021fdc:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8021fe0:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021fe2:	200b      	movs	r0, #11
    p = q->p;
 8021fe4:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 8021fe8:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021fea:	f7f8 fa39 	bl	801a460 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021ff2:	4659      	mov	r1, fp
 8021ff4:	464a      	mov	r2, r9
 8021ff6:	9300      	str	r3, [sp, #0]
 8021ff8:	4628      	mov	r0, r5
 8021ffa:	4643      	mov	r3, r8
 8021ffc:	f001 fa76 	bl	80234ec <ethernet_output>
    pbuf_free(p);
 8022000:	4658      	mov	r0, fp
 8022002:	f7f8 ff29 	bl	801ae58 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8022006:	6839      	ldr	r1, [r7, #0]
 8022008:	2900      	cmp	r1, #0
 802200a:	d1e9      	bne.n	8021fe0 <etharp_input+0xd4>
  switch (hdr->opcode) {
 802200c:	88f3      	ldrh	r3, [r6, #6]
 802200e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022012:	d018      	beq.n	8022046 <etharp_input+0x13a>
 8022014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022018:	d103      	bne.n	8022022 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802201a:	a905      	add	r1, sp, #20
 802201c:	4628      	mov	r0, r5
 802201e:	f7ff f971 	bl	8021304 <dhcp_arp_reply>
  pbuf_free(p);
 8022022:	4620      	mov	r0, r4
 8022024:	f7f8 ff18 	bl	801ae58 <pbuf_free>
}
 8022028:	b007      	add	sp, #28
 802202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802202e:	4b0f      	ldr	r3, [pc, #60]	; (802206c <etharp_input+0x160>)
 8022030:	f240 228a 	movw	r2, #650	; 0x28a
 8022034:	4911      	ldr	r1, [pc, #68]	; (802207c <etharp_input+0x170>)
 8022036:	480f      	ldr	r0, [pc, #60]	; (8022074 <etharp_input+0x168>)
 8022038:	f002 bfc8 	b.w	8024fcc <iprintf>
    for_us = 0;
 802203c:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802203e:	f106 0808 	add.w	r8, r6, #8
 8022042:	2702      	movs	r7, #2
 8022044:	e791      	b.n	8021f6a <etharp_input+0x5e>
      if (for_us) {
 8022046:	f1ba 0f00 	cmp.w	sl, #0
 802204a:	d0ea      	beq.n	8022022 <etharp_input+0x116>
        etharp_raw(netif,
 802204c:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802204e:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8022052:	4642      	mov	r2, r8
 8022054:	4628      	mov	r0, r5
 8022056:	9103      	str	r1, [sp, #12]
 8022058:	a905      	add	r1, sp, #20
 802205a:	f8cd 8004 	str.w	r8, [sp, #4]
 802205e:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022060:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8022062:	9100      	str	r1, [sp, #0]
 8022064:	4619      	mov	r1, r3
 8022066:	f7ff fdfd 	bl	8021c64 <etharp_raw>
 802206a:	e7da      	b.n	8022022 <etharp_input+0x116>
 802206c:	08044f70 	.word	0x08044f70
 8022070:	080450c4 	.word	0x080450c4
 8022074:	0802bdc0 	.word	0x0802bdc0
 8022078:	2002dc80 	.word	0x2002dc80
 802207c:	0802c670 	.word	0x0802c670

08022080 <etharp_query>:
{
 8022080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022084:	468a      	mov	sl, r1
 8022086:	b085      	sub	sp, #20
 8022088:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802208a:	4601      	mov	r1, r0
 802208c:	f8da 0000 	ldr.w	r0, [sl]
{
 8022090:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022092:	f000 fcab 	bl	80229ec <ip4_addr_isbroadcast_u32>
 8022096:	2800      	cmp	r0, #0
 8022098:	f040 80d1 	bne.w	802223e <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 802209c:	f8da 3000 	ldr.w	r3, [sl]
 80220a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 80220a4:	2ae0      	cmp	r2, #224	; 0xe0
 80220a6:	f000 80ca 	beq.w	802223e <etharp_query+0x1be>
 80220aa:	2b00      	cmp	r3, #0
 80220ac:	f000 80c7 	beq.w	802223e <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80220b0:	462a      	mov	r2, r5
 80220b2:	2101      	movs	r1, #1
 80220b4:	4650      	mov	r0, sl
 80220b6:	f7ff fd2f 	bl	8021b18 <etharp_find_entry>
  if (i_err < 0) {
 80220ba:	1e07      	subs	r7, r0, #0
 80220bc:	db52      	blt.n	8022164 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80220be:	2f7e      	cmp	r7, #126	; 0x7e
 80220c0:	dc48      	bgt.n	8022154 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 80220c2:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80220c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8022274 <etharp_query+0x1f4>
 80220c8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80220cc:	ea4f 0947 	mov.w	r9, r7, lsl #1
 80220d0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80220d4:	7d1a      	ldrb	r2, [r3, #20]
 80220d6:	b18a      	cbz	r2, 80220fc <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80220d8:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80220dc:	2e00      	cmp	r6, #0
 80220de:	f000 80a0 	beq.w	8022222 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80220e2:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 80220e6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80220ea:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80220ee:	7d13      	ldrb	r3, [r2, #20]
 80220f0:	2b01      	cmp	r3, #1
 80220f2:	d81e      	bhi.n	8022132 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80220f4:	d03a      	beq.n	802216c <etharp_query+0xec>
}
 80220f6:	b005      	add	sp, #20
 80220f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80220fc:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80220fe:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8022102:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8022104:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 8022108:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802210a:	4628      	mov	r0, r5
 802210c:	4b53      	ldr	r3, [pc, #332]	; (802225c <etharp_query+0x1dc>)
 802210e:	4659      	mov	r1, fp
 8022110:	9203      	str	r2, [sp, #12]
 8022112:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022114:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022116:	4a52      	ldr	r2, [pc, #328]	; (8022260 <etharp_query+0x1e0>)
 8022118:	9300      	str	r3, [sp, #0]
 802211a:	465b      	mov	r3, fp
 802211c:	f7ff fda2 	bl	8021c64 <etharp_raw>
    if (q == NULL) {
 8022120:	2e00      	cmp	r6, #0
 8022122:	d0e8      	beq.n	80220f6 <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022124:	eb09 0207 	add.w	r2, r9, r7
 8022128:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 802212c:	7d13      	ldrb	r3, [r2, #20]
 802212e:	2b01      	cmp	r3, #1
 8022130:	d9e0      	bls.n	80220f4 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022132:	2318      	movs	r3, #24
 8022134:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8022138:	465a      	mov	r2, fp
 802213a:	4631      	mov	r1, r6
 802213c:	fb03 8307 	mla	r3, r3, r7, r8
 8022140:	4628      	mov	r0, r5
 8022142:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8022144:	4c47      	ldr	r4, [pc, #284]	; (8022264 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022146:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8022148:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802214a:	f001 f9cf 	bl	80234ec <ethernet_output>
}
 802214e:	b005      	add	sp, #20
 8022150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022154:	4b44      	ldr	r3, [pc, #272]	; (8022268 <etharp_query+0x1e8>)
 8022156:	f240 32c1 	movw	r2, #961	; 0x3c1
 802215a:	4944      	ldr	r1, [pc, #272]	; (802226c <etharp_query+0x1ec>)
 802215c:	4844      	ldr	r0, [pc, #272]	; (8022270 <etharp_query+0x1f0>)
 802215e:	f002 ff35 	bl	8024fcc <iprintf>
 8022162:	e7ae      	b.n	80220c2 <etharp_query+0x42>
    return (err_t)i_err;
 8022164:	b278      	sxtb	r0, r7
}
 8022166:	b005      	add	sp, #20
 8022168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802216c:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802216e:	4d3e      	ldr	r5, [pc, #248]	; (8022268 <etharp_query+0x1e8>)
 8022170:	f8df b104 	ldr.w	fp, [pc, #260]	; 8022278 <etharp_query+0x1f8>
 8022174:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8022270 <etharp_query+0x1f0>
 8022178:	e005      	b.n	8022186 <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802217a:	7b23      	ldrb	r3, [r4, #12]
 802217c:	065a      	lsls	r2, r3, #25
 802217e:	d413      	bmi.n	80221a8 <etharp_query+0x128>
      p = p->next;
 8022180:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8022182:	2c00      	cmp	r4, #0
 8022184:	d038      	beq.n	80221f8 <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022186:	8962      	ldrh	r2, [r4, #10]
 8022188:	8923      	ldrh	r3, [r4, #8]
 802218a:	429a      	cmp	r2, r3
 802218c:	d1f5      	bne.n	802217a <etharp_query+0xfa>
 802218e:	6822      	ldr	r2, [r4, #0]
 8022190:	462b      	mov	r3, r5
 8022192:	b132      	cbz	r2, 80221a2 <etharp_query+0x122>
 8022194:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8022198:	4659      	mov	r1, fp
 802219a:	4650      	mov	r0, sl
 802219c:	f002 ff16 	bl	8024fcc <iprintf>
 80221a0:	e7eb      	b.n	802217a <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 80221a2:	7b23      	ldrb	r3, [r4, #12]
 80221a4:	065b      	lsls	r3, r3, #25
 80221a6:	d527      	bpl.n	80221f8 <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80221a8:	4632      	mov	r2, r6
 80221aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80221ae:	200e      	movs	r0, #14
 80221b0:	f7f8 ffe4 	bl	801b17c <pbuf_clone>
    if (p != NULL) {
 80221b4:	4606      	mov	r6, r0
 80221b6:	2800      	cmp	r0, #0
 80221b8:	d047      	beq.n	802224a <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 80221ba:	f240 4206 	movw	r2, #1030	; 0x406
 80221be:	492a      	ldr	r1, [pc, #168]	; (8022268 <etharp_query+0x1e8>)
 80221c0:	200b      	movs	r0, #11
 80221c2:	f7f8 f917 	bl	801a3f4 <memp_malloc_fn>
      if (new_entry != NULL) {
 80221c6:	4602      	mov	r2, r0
 80221c8:	2800      	cmp	r0, #0
 80221ca:	d041      	beq.n	8022250 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 80221cc:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 80221d0:	2100      	movs	r1, #0
        new_entry->p = p;
 80221d2:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 80221d4:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 80221d6:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 80221d8:	f858 5003 	ldr.w	r5, [r8, r3]
 80221dc:	b1ed      	cbz	r5, 802221a <etharp_query+0x19a>
          while (r->next != NULL) {
 80221de:	682c      	ldr	r4, [r5, #0]
 80221e0:	b384      	cbz	r4, 8022244 <etharp_query+0x1c4>
          qlen++;
 80221e2:	2301      	movs	r3, #1
            qlen++;
 80221e4:	4620      	mov	r0, r4
          while (r->next != NULL) {
 80221e6:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80221e8:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80221ea:	2c00      	cmp	r4, #0
 80221ec:	d1fa      	bne.n	80221e4 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 80221ee:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80221f0:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80221f2:	d805      	bhi.n	8022200 <etharp_query+0x180>
        result = ERR_OK;
 80221f4:	4620      	mov	r0, r4
 80221f6:	e77e      	b.n	80220f6 <etharp_query+0x76>
      pbuf_ref(p);
 80221f8:	4630      	mov	r0, r6
 80221fa:	f7f8 fe4b 	bl	801ae94 <pbuf_ref>
    if (p != NULL) {
 80221fe:	e7dc      	b.n	80221ba <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8022200:	682b      	ldr	r3, [r5, #0]
 8022202:	444f      	add	r7, r9
          pbuf_free(old->p);
 8022204:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 8022206:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802220a:	f7f8 fe25 	bl	801ae58 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 802220e:	200b      	movs	r0, #11
 8022210:	4629      	mov	r1, r5
 8022212:	f7f8 f925 	bl	801a460 <memp_free>
        result = ERR_OK;
 8022216:	4620      	mov	r0, r4
 8022218:	e76d      	b.n	80220f6 <etharp_query+0x76>
 802221a:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 802221c:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8022220:	e769      	b.n	80220f6 <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022222:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022224:	2301      	movs	r3, #1
 8022226:	4c0d      	ldr	r4, [pc, #52]	; (802225c <etharp_query+0x1dc>)
 8022228:	4659      	mov	r1, fp
 802222a:	4628      	mov	r0, r5
 802222c:	e9cd a302 	strd	sl, r3, [sp, #8]
 8022230:	e9cd 2400 	strd	r2, r4, [sp]
 8022234:	465b      	mov	r3, fp
 8022236:	4a0a      	ldr	r2, [pc, #40]	; (8022260 <etharp_query+0x1e0>)
 8022238:	f7ff fd14 	bl	8021c64 <etharp_raw>
    if (q == NULL) {
 802223c:	e75b      	b.n	80220f6 <etharp_query+0x76>
    return ERR_ARG;
 802223e:	f06f 000f 	mvn.w	r0, #15
 8022242:	e758      	b.n	80220f6 <etharp_query+0x76>
        result = ERR_OK;
 8022244:	4620      	mov	r0, r4
          r->next = new_entry;
 8022246:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8022248:	e755      	b.n	80220f6 <etharp_query+0x76>
      result = ERR_MEM;
 802224a:	f04f 30ff 	mov.w	r0, #4294967295
 802224e:	e752      	b.n	80220f6 <etharp_query+0x76>
        pbuf_free(p);
 8022250:	4630      	mov	r0, r6
 8022252:	f7f8 fe01 	bl	801ae58 <pbuf_free>
        result = ERR_MEM;
 8022256:	f04f 30ff 	mov.w	r0, #4294967295
 802225a:	e74c      	b.n	80220f6 <etharp_query+0x76>
 802225c:	080454a8 	.word	0x080454a8
 8022260:	080454a0 	.word	0x080454a0
 8022264:	2002df80 	.word	0x2002df80
 8022268:	08044f70 	.word	0x08044f70
 802226c:	080450e8 	.word	0x080450e8
 8022270:	0802bdc0 	.word	0x0802bdc0
 8022274:	2002dc80 	.word	0x2002dc80
 8022278:	080450f8 	.word	0x080450f8

0802227c <etharp_output>:
{
 802227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022280:	460f      	mov	r7, r1
 8022282:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022284:	4605      	mov	r5, r0
{
 8022286:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022288:	2800      	cmp	r0, #0
 802228a:	f000 8086 	beq.w	802239a <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 802228e:	2f00      	cmp	r7, #0
 8022290:	d072      	beq.n	8022378 <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022292:	2e00      	cmp	r6, #0
 8022294:	d079      	beq.n	802238a <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8022296:	4629      	mov	r1, r5
 8022298:	6830      	ldr	r0, [r6, #0]
 802229a:	f000 fba7 	bl	80229ec <ip4_addr_isbroadcast_u32>
 802229e:	2800      	cmp	r0, #0
 80222a0:	d160      	bne.n	8022364 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80222a2:	6833      	ldr	r3, [r6, #0]
 80222a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80222a8:	2ae0      	cmp	r2, #224	; 0xe0
 80222aa:	d03b      	beq.n	8022324 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80222ac:	686a      	ldr	r2, [r5, #4]
 80222ae:	68a9      	ldr	r1, [r5, #8]
 80222b0:	405a      	eors	r2, r3
 80222b2:	420a      	tst	r2, r1
 80222b4:	d009      	beq.n	80222ca <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 80222b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80222b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80222bc:	4293      	cmp	r3, r2
 80222be:	d004      	beq.n	80222ca <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80222c0:	68eb      	ldr	r3, [r5, #12]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d07b      	beq.n	80223be <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 80222c6:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80222ca:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80223e0 <etharp_output+0x164>
 80222ce:	4b3d      	ldr	r3, [pc, #244]	; (80223c4 <etharp_output+0x148>)
 80222d0:	f898 2000 	ldrb.w	r2, [r8]
 80222d4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80222d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80222dc:	7d19      	ldrb	r1, [r3, #20]
 80222de:	2901      	cmp	r1, #1
 80222e0:	d902      	bls.n	80222e8 <etharp_output+0x6c>
 80222e2:	6899      	ldr	r1, [r3, #8]
 80222e4:	42a9      	cmp	r1, r5
 80222e6:	d063      	beq.n	80223b0 <etharp_output+0x134>
 80222e8:	4c36      	ldr	r4, [pc, #216]	; (80223c4 <etharp_output+0x148>)
{
 80222ea:	2300      	movs	r3, #0
 80222ec:	e003      	b.n	80222f6 <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80222ee:	2b20      	cmp	r3, #32
 80222f0:	f104 0418 	add.w	r4, r4, #24
 80222f4:	d038      	beq.n	8022368 <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80222f6:	f894 c014 	ldrb.w	ip, [r4, #20]
 80222fa:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80222fc:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80222fe:	f1bc 0f01 	cmp.w	ip, #1
 8022302:	d9f4      	bls.n	80222ee <etharp_output+0x72>
 8022304:	68a0      	ldr	r0, [r4, #8]
 8022306:	42a8      	cmp	r0, r5
 8022308:	d1f1      	bne.n	80222ee <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 802230a:	6860      	ldr	r0, [r4, #4]
 802230c:	6831      	ldr	r1, [r6, #0]
 802230e:	4281      	cmp	r1, r0
 8022310:	d1ed      	bne.n	80222ee <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8022312:	4639      	mov	r1, r7
 8022314:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 8022316:	f888 2000 	strb.w	r2, [r8]
}
 802231a:	b004      	add	sp, #16
 802231c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8022320:	f7ff bd14 	b.w	8021d4c <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022324:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022326:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022328:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802232a:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802232e:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022332:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022334:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022336:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802233a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802233e:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8022342:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022344:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022348:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 802234c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8022350:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8022354:	4639      	mov	r1, r7
 8022356:	4628      	mov	r0, r5
 8022358:	9400      	str	r4, [sp, #0]
 802235a:	f001 f8c7 	bl	80234ec <ethernet_output>
}
 802235e:	b004      	add	sp, #16
 8022360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8022364:	4b18      	ldr	r3, [pc, #96]	; (80223c8 <etharp_output+0x14c>)
 8022366:	e7f1      	b.n	802234c <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8022368:	463a      	mov	r2, r7
 802236a:	4631      	mov	r1, r6
 802236c:	4628      	mov	r0, r5
}
 802236e:	b004      	add	sp, #16
 8022370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8022374:	f7ff be84 	b.w	8022080 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022378:	4b14      	ldr	r3, [pc, #80]	; (80223cc <etharp_output+0x150>)
 802237a:	f240 321f 	movw	r2, #799	; 0x31f
 802237e:	4914      	ldr	r1, [pc, #80]	; (80223d0 <etharp_output+0x154>)
 8022380:	4814      	ldr	r0, [pc, #80]	; (80223d4 <etharp_output+0x158>)
 8022382:	f002 fe23 	bl	8024fcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022386:	2e00      	cmp	r6, #0
 8022388:	d185      	bne.n	8022296 <etharp_output+0x1a>
 802238a:	4b10      	ldr	r3, [pc, #64]	; (80223cc <etharp_output+0x150>)
 802238c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022390:	4911      	ldr	r1, [pc, #68]	; (80223d8 <etharp_output+0x15c>)
 8022392:	4810      	ldr	r0, [pc, #64]	; (80223d4 <etharp_output+0x158>)
 8022394:	f002 fe1a 	bl	8024fcc <iprintf>
 8022398:	e77d      	b.n	8022296 <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802239a:	4b0c      	ldr	r3, [pc, #48]	; (80223cc <etharp_output+0x150>)
 802239c:	f240 321e 	movw	r2, #798	; 0x31e
 80223a0:	490e      	ldr	r1, [pc, #56]	; (80223dc <etharp_output+0x160>)
 80223a2:	480c      	ldr	r0, [pc, #48]	; (80223d4 <etharp_output+0x158>)
 80223a4:	f002 fe12 	bl	8024fcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80223a8:	2f00      	cmp	r7, #0
 80223aa:	f47f af72 	bne.w	8022292 <etharp_output+0x16>
 80223ae:	e7e3      	b.n	8022378 <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 80223b0:	685b      	ldr	r3, [r3, #4]
 80223b2:	6831      	ldr	r1, [r6, #0]
 80223b4:	4299      	cmp	r1, r3
 80223b6:	d197      	bne.n	80222e8 <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80223b8:	4639      	mov	r1, r7
 80223ba:	4628      	mov	r0, r5
 80223bc:	e7ad      	b.n	802231a <etharp_output+0x9e>
            return ERR_RTE;
 80223be:	f06f 0003 	mvn.w	r0, #3
 80223c2:	e7cc      	b.n	802235e <etharp_output+0xe2>
 80223c4:	2002dc80 	.word	0x2002dc80
 80223c8:	080454a0 	.word	0x080454a0
 80223cc:	08044f70 	.word	0x08044f70
 80223d0:	08045114 	.word	0x08045114
 80223d4:	0802bdc0 	.word	0x0802bdc0
 80223d8:	080450a4 	.word	0x080450a4
 80223dc:	0802c670 	.word	0x0802c670
 80223e0:	2002df80 	.word	0x2002df80

080223e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80223e4:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80223e6:	2301      	movs	r3, #1
{
 80223e8:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80223ea:	4c07      	ldr	r4, [pc, #28]	; (8022408 <etharp_request+0x24>)
 80223ec:	4a07      	ldr	r2, [pc, #28]	; (802240c <etharp_request+0x28>)
 80223ee:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80223f0:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80223f2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80223f6:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 80223fa:	9400      	str	r4, [sp, #0]
 80223fc:	4619      	mov	r1, r3
 80223fe:	f7ff fc31 	bl	8021c64 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8022402:	b004      	add	sp, #16
 8022404:	bd10      	pop	{r4, pc}
 8022406:	bf00      	nop
 8022408:	080454a8 	.word	0x080454a8
 802240c:	080454a0 	.word	0x080454a0

08022410 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8022410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022412:	460e      	mov	r6, r1
 8022414:	b087      	sub	sp, #28
 8022416:	4617      	mov	r7, r2
 8022418:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802241a:	2124      	movs	r1, #36	; 0x24
 802241c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022420:	2022      	movs	r0, #34	; 0x22
 8022422:	f7f8 fb63 	bl	801aaec <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8022426:	b3a8      	cbz	r0, 8022494 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022428:	8943      	ldrh	r3, [r0, #10]
 802242a:	4605      	mov	r5, r0
 802242c:	2b23      	cmp	r3, #35	; 0x23
 802242e:	d933      	bls.n	8022498 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8022430:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8022432:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8022434:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8022436:	2600      	movs	r6, #0
  icmphdr->code = code;
 8022438:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 802243a:	7126      	strb	r6, [r4, #4]
 802243c:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 802243e:	71a6      	strb	r6, [r4, #6]
 8022440:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022442:	6818      	ldr	r0, [r3, #0]
 8022444:	6859      	ldr	r1, [r3, #4]
 8022446:	689a      	ldr	r2, [r3, #8]
 8022448:	68df      	ldr	r7, [r3, #12]
 802244a:	60a0      	str	r0, [r4, #8]
 802244c:	6167      	str	r7, [r4, #20]
 802244e:	60e1      	str	r1, [r4, #12]
 8022450:	6122      	str	r2, [r4, #16]
 8022452:	6918      	ldr	r0, [r3, #16]
 8022454:	6959      	ldr	r1, [r3, #20]
 8022456:	699a      	ldr	r2, [r3, #24]
 8022458:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802245a:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802245c:	61e1      	str	r1, [r4, #28]
 802245e:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8022460:	68db      	ldr	r3, [r3, #12]
 8022462:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8022464:	f000 f8e6 	bl	8022634 <ip4_route>
#endif
  if (netif != NULL) {
 8022468:	4607      	mov	r7, r0
 802246a:	b180      	cbz	r0, 802248e <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802246c:	8969      	ldrh	r1, [r5, #10]
 802246e:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8022470:	70a6      	strb	r6, [r4, #2]
 8022472:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022474:	f7f7 fa78 	bl	8019968 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022478:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802247a:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802247c:	aa05      	add	r2, sp, #20
 802247e:	4631      	mov	r1, r6
 8022480:	4628      	mov	r0, r5
 8022482:	9600      	str	r6, [sp, #0]
 8022484:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8022488:	23ff      	movs	r3, #255	; 0xff
 802248a:	f000 fa9d 	bl	80229c8 <ip4_output_if>
  }
  pbuf_free(q);
 802248e:	4628      	mov	r0, r5
 8022490:	f7f8 fce2 	bl	801ae58 <pbuf_free>
}
 8022494:	b007      	add	sp, #28
 8022496:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022498:	4b03      	ldr	r3, [pc, #12]	; (80224a8 <icmp_send_response+0x98>)
 802249a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802249e:	4903      	ldr	r1, [pc, #12]	; (80224ac <icmp_send_response+0x9c>)
 80224a0:	4803      	ldr	r0, [pc, #12]	; (80224b0 <icmp_send_response+0xa0>)
 80224a2:	f002 fd93 	bl	8024fcc <iprintf>
 80224a6:	e7c3      	b.n	8022430 <icmp_send_response+0x20>
 80224a8:	08045120 	.word	0x08045120
 80224ac:	08045158 	.word	0x08045158
 80224b0:	0802bdc0 	.word	0x0802bdc0

080224b4 <icmp_input>:
{
 80224b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 80224b8:	4f54      	ldr	r7, [pc, #336]	; (802260c <icmp_input+0x158>)
{
 80224ba:	b086      	sub	sp, #24
 80224bc:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 80224be:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80224c2:	f898 4000 	ldrb.w	r4, [r8]
 80224c6:	f004 040f 	and.w	r4, r4, #15
 80224ca:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 80224cc:	2c13      	cmp	r4, #19
 80224ce:	d913      	bls.n	80224f8 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 80224d0:	8943      	ldrh	r3, [r0, #10]
 80224d2:	2b03      	cmp	r3, #3
 80224d4:	d910      	bls.n	80224f8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 80224d6:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80224d8:	781b      	ldrb	r3, [r3, #0]
 80224da:	2b08      	cmp	r3, #8
 80224dc:	d10c      	bne.n	80224f8 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80224de:	6978      	ldr	r0, [r7, #20]
 80224e0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80224e4:	2be0      	cmp	r3, #224	; 0xe0
 80224e6:	d007      	beq.n	80224f8 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80224e8:	460e      	mov	r6, r1
 80224ea:	6839      	ldr	r1, [r7, #0]
 80224ec:	f000 fa7e 	bl	80229ec <ip4_addr_isbroadcast_u32>
 80224f0:	b910      	cbnz	r0, 80224f8 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80224f2:	892b      	ldrh	r3, [r5, #8]
 80224f4:	2b07      	cmp	r3, #7
 80224f6:	d805      	bhi.n	8022504 <icmp_input+0x50>
  pbuf_free(p);
 80224f8:	4628      	mov	r0, r5
}
 80224fa:	b006      	add	sp, #24
 80224fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8022500:	f7f8 bcaa 	b.w	801ae58 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8022504:	4628      	mov	r0, r5
 8022506:	f7f7 fa35 	bl	8019974 <inet_chksum_pbuf>
 802250a:	2800      	cmp	r0, #0
 802250c:	d1f4      	bne.n	80224f8 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802250e:	f104 010e 	add.w	r1, r4, #14
 8022512:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8022514:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022518:	9105      	str	r1, [sp, #20]
 802251a:	f7f8 fbf9 	bl	801ad10 <pbuf_add_header>
 802251e:	9905      	ldr	r1, [sp, #20]
 8022520:	2800      	cmp	r0, #0
 8022522:	d058      	beq.n	80225d6 <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022524:	892b      	ldrh	r3, [r5, #8]
 8022526:	eb03 0109 	add.w	r1, r3, r9
 802252a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 802252c:	428b      	cmp	r3, r1
 802252e:	d8e3      	bhi.n	80224f8 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022530:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022534:	200e      	movs	r0, #14
 8022536:	f7f8 fad9 	bl	801aaec <pbuf_alloc>
        if (r == NULL) {
 802253a:	4682      	mov	sl, r0
 802253c:	2800      	cmp	r0, #0
 802253e:	d0db      	beq.n	80224f8 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022540:	8942      	ldrh	r2, [r0, #10]
 8022542:	f104 0308 	add.w	r3, r4, #8
 8022546:	429a      	cmp	r2, r3
 8022548:	d351      	bcc.n	80225ee <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 802254a:	4641      	mov	r1, r8
 802254c:	4622      	mov	r2, r4
 802254e:	6840      	ldr	r0, [r0, #4]
 8022550:	f001 fd78 	bl	8024044 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8022554:	4621      	mov	r1, r4
 8022556:	4650      	mov	r0, sl
 8022558:	f7f8 fc0e 	bl	801ad78 <pbuf_remove_header>
 802255c:	2800      	cmp	r0, #0
 802255e:	d14a      	bne.n	80225f6 <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8022560:	4629      	mov	r1, r5
 8022562:	4650      	mov	r0, sl
 8022564:	f7f8 fd00 	bl	801af68 <pbuf_copy>
 8022568:	2800      	cmp	r0, #0
 802256a:	d140      	bne.n	80225ee <icmp_input+0x13a>
        pbuf_free(p);
 802256c:	4628      	mov	r0, r5
 802256e:	4655      	mov	r5, sl
 8022570:	f7f8 fc72 	bl	801ae58 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8022574:	4621      	mov	r1, r4
 8022576:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8022578:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 802257c:	f7f8 fbc8 	bl	801ad10 <pbuf_add_header>
 8022580:	2800      	cmp	r0, #0
 8022582:	d1b9      	bne.n	80224f8 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022584:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8022586:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 802258a:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802258c:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 802258e:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022590:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8022592:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022594:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8022596:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802259a:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802259e:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80225a0:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80225a2:	bf8c      	ite	hi
 80225a4:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80225a6:	3308      	addls	r3, #8
 80225a8:	b29b      	uxth	r3, r3
 80225aa:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80225ae:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 80225b2:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80225b4:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80225b8:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80225ba:	f7f7 f9d5 	bl	8019968 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80225be:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80225c0:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80225c2:	4643      	mov	r3, r8
 80225c4:	4912      	ldr	r1, [pc, #72]	; (8022610 <icmp_input+0x15c>)
 80225c6:	4628      	mov	r0, r5
 80225c8:	9700      	str	r7, [sp, #0]
 80225ca:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80225ce:	463a      	mov	r2, r7
 80225d0:	f000 f9fa 	bl	80229c8 <ip4_output_if>
  pbuf_free(p);
 80225d4:	e790      	b.n	80224f8 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80225d6:	4628      	mov	r0, r5
 80225d8:	f7f8 fbce 	bl	801ad78 <pbuf_remove_header>
 80225dc:	2800      	cmp	r0, #0
 80225de:	d0c9      	beq.n	8022574 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80225e0:	4b0c      	ldr	r3, [pc, #48]	; (8022614 <icmp_input+0x160>)
 80225e2:	22c7      	movs	r2, #199	; 0xc7
 80225e4:	490c      	ldr	r1, [pc, #48]	; (8022618 <icmp_input+0x164>)
 80225e6:	480d      	ldr	r0, [pc, #52]	; (802261c <icmp_input+0x168>)
 80225e8:	f002 fcf0 	bl	8024fcc <iprintf>
          goto icmperr;
 80225ec:	e784      	b.n	80224f8 <icmp_input+0x44>
          pbuf_free(r);
 80225ee:	4650      	mov	r0, sl
 80225f0:	f7f8 fc32 	bl	801ae58 <pbuf_free>
          goto icmperr;
 80225f4:	e780      	b.n	80224f8 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80225f6:	4b07      	ldr	r3, [pc, #28]	; (8022614 <icmp_input+0x160>)
 80225f8:	22b6      	movs	r2, #182	; 0xb6
 80225fa:	4909      	ldr	r1, [pc, #36]	; (8022620 <icmp_input+0x16c>)
 80225fc:	4807      	ldr	r0, [pc, #28]	; (802261c <icmp_input+0x168>)
 80225fe:	f002 fce5 	bl	8024fcc <iprintf>
          pbuf_free(r);
 8022602:	4650      	mov	r0, sl
 8022604:	f7f8 fc28 	bl	801ae58 <pbuf_free>
          goto icmperr;
 8022608:	e776      	b.n	80224f8 <icmp_input+0x44>
 802260a:	bf00      	nop
 802260c:	2001ec54 	.word	0x2001ec54
 8022610:	2001ec68 	.word	0x2001ec68
 8022614:	08045120 	.word	0x08045120
 8022618:	080451bc 	.word	0x080451bc
 802261c:	0802bdc0 	.word	0x0802bdc0
 8022620:	08045184 	.word	0x08045184

08022624 <icmp_dest_unreach>:
{
 8022624:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8022626:	2103      	movs	r1, #3
 8022628:	f7ff bef2 	b.w	8022410 <icmp_send_response>

0802262c <icmp_time_exceeded>:
{
 802262c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 802262e:	210b      	movs	r1, #11
 8022630:	f7ff beee 	b.w	8022410 <icmp_send_response>

08022634 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8022634:	4b19      	ldr	r3, [pc, #100]	; (802269c <ip4_route+0x68>)
{
 8022636:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	b1ab      	cbz	r3, 8022668 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802263c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022640:	07d4      	lsls	r4, r2, #31
 8022642:	d5f9      	bpl.n	8022638 <ip4_route+0x4>
 8022644:	0751      	lsls	r1, r2, #29
 8022646:	d5f7      	bpl.n	8022638 <ip4_route+0x4>
 8022648:	6859      	ldr	r1, [r3, #4]
 802264a:	2900      	cmp	r1, #0
 802264c:	d0f4      	beq.n	8022638 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802264e:	6804      	ldr	r4, [r0, #0]
 8022650:	689d      	ldr	r5, [r3, #8]
 8022652:	4061      	eors	r1, r4
 8022654:	4229      	tst	r1, r5
 8022656:	d004      	beq.n	8022662 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022658:	0792      	lsls	r2, r2, #30
 802265a:	d4ed      	bmi.n	8022638 <ip4_route+0x4>
 802265c:	68da      	ldr	r2, [r3, #12]
 802265e:	4294      	cmp	r4, r2
 8022660:	d1ea      	bne.n	8022638 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8022662:	4618      	mov	r0, r3
 8022664:	bc30      	pop	{r4, r5}
 8022666:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022668:	4b0d      	ldr	r3, [pc, #52]	; (80226a0 <ip4_route+0x6c>)
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	2b00      	cmp	r3, #0
 802266e:	d0f8      	beq.n	8022662 <ip4_route+0x2e>
 8022670:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022674:	f002 0205 	and.w	r2, r2, #5
 8022678:	2a05      	cmp	r2, #5
 802267a:	d108      	bne.n	802268e <ip4_route+0x5a>
 802267c:	685a      	ldr	r2, [r3, #4]
 802267e:	b152      	cbz	r2, 8022696 <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022680:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8022682:	2a7f      	cmp	r2, #127	; 0x7f
 8022684:	bf08      	it	eq
 8022686:	2300      	moveq	r3, #0
}
 8022688:	bc30      	pop	{r4, r5}
 802268a:	4618      	mov	r0, r3
 802268c:	4770      	bx	lr
    return NULL;
 802268e:	2300      	movs	r3, #0
}
 8022690:	bc30      	pop	{r4, r5}
 8022692:	4618      	mov	r0, r3
 8022694:	4770      	bx	lr
    return NULL;
 8022696:	4613      	mov	r3, r2
 8022698:	e7e3      	b.n	8022662 <ip4_route+0x2e>
 802269a:	bf00      	nop
 802269c:	2002dbc8 	.word	0x2002dbc8
 80226a0:	2002dbc4 	.word	0x2002dbc4

080226a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80226a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80226a8:	6847      	ldr	r7, [r0, #4]
{
 80226aa:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 80226ac:	783b      	ldrb	r3, [r7, #0]
 80226ae:	091a      	lsrs	r2, r3, #4
 80226b0:	2a04      	cmp	r2, #4
 80226b2:	f040 80a8 	bne.w	8022806 <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80226b6:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80226ba:	8878      	ldrh	r0, [r7, #2]
 80226bc:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80226be:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80226c2:	f7f6 fba9 	bl	8018e18 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80226c6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80226c8:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80226ca:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 80226cc:	4283      	cmp	r3, r0
 80226ce:	f200 80a0 	bhi.w	8022812 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80226d2:	8963      	ldrh	r3, [r4, #10]
 80226d4:	42ab      	cmp	r3, r5
 80226d6:	f0c0 8096 	bcc.w	8022806 <ip4_input+0x162>
 80226da:	8923      	ldrh	r3, [r4, #8]
 80226dc:	4543      	cmp	r3, r8
 80226de:	f0c0 8092 	bcc.w	8022806 <ip4_input+0x162>
 80226e2:	2d13      	cmp	r5, #19
 80226e4:	f240 808f 	bls.w	8022806 <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80226e8:	693b      	ldr	r3, [r7, #16]
 80226ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 802288c <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80226ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80226f2:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80226f6:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80226f8:	68f8      	ldr	r0, [r7, #12]
 80226fa:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80226fe:	d073      	beq.n	80227e8 <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022700:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8022704:	07d2      	lsls	r2, r2, #31
 8022706:	d503      	bpl.n	8022710 <ip4_input+0x6c>
 8022708:	6872      	ldr	r2, [r6, #4]
 802270a:	2a00      	cmp	r2, #0
 802270c:	f040 8094 	bne.w	8022838 <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022710:	b2db      	uxtb	r3, r3
 8022712:	2b7f      	cmp	r3, #127	; 0x7f
 8022714:	d06c      	beq.n	80227f0 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022716:	4b5c      	ldr	r3, [pc, #368]	; (8022888 <ip4_input+0x1e4>)
 8022718:	681d      	ldr	r5, [r3, #0]
 802271a:	b935      	cbnz	r5, 802272a <ip4_input+0x86>
 802271c:	e068      	b.n	80227f0 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802271e:	f000 f965 	bl	80229ec <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022722:	b980      	cbnz	r0, 8022746 <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8022724:	682d      	ldr	r5, [r5, #0]
 8022726:	2d00      	cmp	r5, #0
 8022728:	d062      	beq.n	80227f0 <ip4_input+0x14c>
          if (netif == inp) {
 802272a:	42ae      	cmp	r6, r5
 802272c:	d0fa      	beq.n	8022724 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802272e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022732:	07db      	lsls	r3, r3, #31
 8022734:	d5f6      	bpl.n	8022724 <ip4_input+0x80>
 8022736:	686b      	ldr	r3, [r5, #4]
 8022738:	2b00      	cmp	r3, #0
 802273a:	d0f3      	beq.n	8022724 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802273c:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022740:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022742:	4283      	cmp	r3, r0
 8022744:	d1eb      	bne.n	802271e <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022746:	f8d8 0010 	ldr.w	r0, [r8, #16]
 802274a:	2800      	cmp	r0, #0
 802274c:	d157      	bne.n	80227fe <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802274e:	88fb      	ldrh	r3, [r7, #6]
 8022750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8022754:	b133      	cbz	r3, 8022764 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022756:	4620      	mov	r0, r4
 8022758:	f000 fb1c 	bl	8022d94 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802275c:	4604      	mov	r4, r0
 802275e:	2800      	cmp	r0, #0
 8022760:	d054      	beq.n	802280c <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022762:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8022764:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8022768:	4631      	mov	r1, r6
 802276a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 802276c:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022770:	783b      	ldrb	r3, [r7, #0]
 8022772:	f003 030f 	and.w	r3, r3, #15
 8022776:	009b      	lsls	r3, r3, #2
 8022778:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 802277c:	f7f8 fd9e 	bl	801b2bc <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8022780:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8022782:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8022784:	d024      	beq.n	80227d0 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022786:	4649      	mov	r1, r9
 8022788:	4620      	mov	r0, r4
 802278a:	f7f8 faf5 	bl	801ad78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802278e:	7a7b      	ldrb	r3, [r7, #9]
 8022790:	2b06      	cmp	r3, #6
 8022792:	d065      	beq.n	8022860 <ip4_input+0x1bc>
 8022794:	2b11      	cmp	r3, #17
 8022796:	d05e      	beq.n	8022856 <ip4_input+0x1b2>
 8022798:	2b01      	cmp	r3, #1
 802279a:	d057      	beq.n	802284c <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 802279c:	f1ba 0f02 	cmp.w	sl, #2
 80227a0:	d013      	beq.n	80227ca <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80227a2:	4629      	mov	r1, r5
 80227a4:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80227a8:	f000 f920 	bl	80229ec <ip4_addr_isbroadcast_u32>
 80227ac:	b968      	cbnz	r0, 80227ca <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80227ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80227b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80227b6:	2be0      	cmp	r3, #224	; 0xe0
 80227b8:	d007      	beq.n	80227ca <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80227ba:	4649      	mov	r1, r9
 80227bc:	4620      	mov	r0, r4
 80227be:	f7f8 fb13 	bl	801ade8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80227c2:	2102      	movs	r1, #2
 80227c4:	4620      	mov	r0, r4
 80227c6:	f7ff ff2d 	bl	8022624 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80227ca:	4620      	mov	r0, r4
 80227cc:	f7f8 fb44 	bl	801ae58 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80227d0:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80227d2:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 80227d4:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 80227d8:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 80227dc:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80227e0:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 80227e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80227e8:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80227ec:	07d9      	lsls	r1, r3, #31
 80227ee:	d41e      	bmi.n	802282e <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80227f0:	7a7b      	ldrb	r3, [r7, #9]
 80227f2:	2b11      	cmp	r3, #17
 80227f4:	d039      	beq.n	802286a <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80227f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80227fa:	b120      	cbz	r0, 8022806 <ip4_input+0x162>
 80227fc:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80227fe:	4631      	mov	r1, r6
 8022800:	f000 f8f4 	bl	80229ec <ip4_addr_isbroadcast_u32>
 8022804:	b150      	cbz	r0, 802281c <ip4_input+0x178>
    pbuf_free(p);
 8022806:	4620      	mov	r0, r4
 8022808:	f7f8 fb26 	bl	801ae58 <pbuf_free>
}
 802280c:	2000      	movs	r0, #0
 802280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8022812:	4601      	mov	r1, r0
 8022814:	4620      	mov	r0, r4
 8022816:	f7f8 fa23 	bl	801ac60 <pbuf_realloc>
 802281a:	e75a      	b.n	80226d2 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802281c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8022820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022824:	2be0      	cmp	r3, #224	; 0xe0
 8022826:	d0ee      	beq.n	8022806 <ip4_input+0x162>
  if (netif == NULL) {
 8022828:	2d00      	cmp	r5, #0
 802282a:	d190      	bne.n	802274e <ip4_input+0xaa>
 802282c:	e7eb      	b.n	8022806 <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802282e:	6873      	ldr	r3, [r6, #4]
 8022830:	2b00      	cmp	r3, #0
 8022832:	d0dd      	beq.n	80227f0 <ip4_input+0x14c>
 8022834:	4635      	mov	r5, r6
 8022836:	e788      	b.n	802274a <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022838:	4293      	cmp	r3, r2
 802283a:	d0fb      	beq.n	8022834 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802283c:	4618      	mov	r0, r3
 802283e:	4631      	mov	r1, r6
 8022840:	f000 f8d4 	bl	80229ec <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022844:	b9e0      	cbnz	r0, 8022880 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022846:	f8d8 3014 	ldr.w	r3, [r8, #20]
 802284a:	e761      	b.n	8022710 <ip4_input+0x6c>
        icmp_input(p, inp);
 802284c:	4631      	mov	r1, r6
 802284e:	4620      	mov	r0, r4
 8022850:	f7ff fe30 	bl	80224b4 <icmp_input>
        break;
 8022854:	e7bc      	b.n	80227d0 <ip4_input+0x12c>
        udp_input(p, inp);
 8022856:	4631      	mov	r1, r6
 8022858:	4620      	mov	r0, r4
 802285a:	f7fd f8a1 	bl	801f9a0 <udp_input>
        break;
 802285e:	e7b7      	b.n	80227d0 <ip4_input+0x12c>
        tcp_input(p, inp);
 8022860:	4631      	mov	r1, r6
 8022862:	4620      	mov	r0, r4
 8022864:	f7fa fefc 	bl	801d660 <tcp_input>
        break;
 8022868:	e7b2      	b.n	80227d0 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 802286a:	eb07 0309 	add.w	r3, r7, r9
 802286e:	885b      	ldrh	r3, [r3, #2]
 8022870:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022874:	d1bf      	bne.n	80227f6 <ip4_input+0x152>
 8022876:	4635      	mov	r5, r6
  if (netif == NULL) {
 8022878:	2d00      	cmp	r5, #0
 802287a:	f47f af68 	bne.w	802274e <ip4_input+0xaa>
 802287e:	e7c2      	b.n	8022806 <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022880:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022884:	4635      	mov	r5, r6
 8022886:	e760      	b.n	802274a <ip4_input+0xa6>
 8022888:	2002dbc8 	.word	0x2002dbc8
 802288c:	2001ec54 	.word	0x2001ec54

08022890 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022894:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022896:	7b83      	ldrb	r3, [r0, #14]
{
 8022898:	b083      	sub	sp, #12
 802289a:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802289c:	2b01      	cmp	r3, #1
{
 802289e:	4689      	mov	r9, r1
 80228a0:	4617      	mov	r7, r2
 80228a2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80228a6:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 80228aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80228ae:	d158      	bne.n	8022962 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80228b0:	2f00      	cmp	r7, #0
 80228b2:	d05f      	beq.n	8022974 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80228b4:	2114      	movs	r1, #20
 80228b6:	4620      	mov	r0, r4
 80228b8:	f7f8 fa2a 	bl	801ad10 <pbuf_add_header>
 80228bc:	2800      	cmp	r0, #0
 80228be:	d174      	bne.n	80229aa <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80228c0:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80228c2:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80228c4:	2b13      	cmp	r3, #19
 80228c6:	d95d      	bls.n	8022984 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80228c8:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80228cc:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 80228d0:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80228d4:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 80228d6:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80228d8:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80228da:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 80228dc:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80228de:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 80228e2:	fa10 f383 	uxtah	r3, r0, r3
 80228e6:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80228e8:	ea4f 252a 	mov.w	r5, sl, asr #8
 80228ec:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80228f0:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80228f4:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80228f6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80229c4 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80228fa:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80228fc:	8920      	ldrh	r0, [r4, #8]
 80228fe:	f7f6 fa8b 	bl	8018e18 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8022902:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8022904:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022906:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8022908:	71b3      	strb	r3, [r6, #6]
 802290a:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802290c:	f8ba 0000 	ldrh.w	r0, [sl]
 8022910:	f7f6 fa82 	bl	8018e18 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022914:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8022918:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802291a:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 802291c:	3201      	adds	r2, #1
 802291e:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8022922:	f1b9 0f00 	cmp.w	r9, #0
 8022926:	d035      	beq.n	8022994 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022928:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 802292c:	fa13 f382 	uxtah	r3, r3, r2
 8022930:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8022932:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8022936:	b29a      	uxth	r2, r3
 8022938:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 802293c:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8022940:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8022942:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022944:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8022948:	b113      	cbz	r3, 8022950 <ip4_output_if_src+0xc0>
 802294a:	8922      	ldrh	r2, [r4, #8]
 802294c:	429a      	cmp	r2, r3
 802294e:	d824      	bhi.n	802299a <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022950:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022954:	463a      	mov	r2, r7
 8022956:	4621      	mov	r1, r4
 8022958:	4640      	mov	r0, r8
 802295a:	4798      	blx	r3
}
 802295c:	b003      	add	sp, #12
 802295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022962:	4b13      	ldr	r3, [pc, #76]	; (80229b0 <ip4_output_if_src+0x120>)
 8022964:	f44f 7255 	mov.w	r2, #852	; 0x354
 8022968:	4912      	ldr	r1, [pc, #72]	; (80229b4 <ip4_output_if_src+0x124>)
 802296a:	4813      	ldr	r0, [pc, #76]	; (80229b8 <ip4_output_if_src+0x128>)
 802296c:	f002 fb2e 	bl	8024fcc <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8022970:	2f00      	cmp	r7, #0
 8022972:	d19f      	bne.n	80228b4 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8022974:	8963      	ldrh	r3, [r4, #10]
 8022976:	2b13      	cmp	r3, #19
 8022978:	d917      	bls.n	80229aa <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 802297a:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 802297c:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 802297e:	691b      	ldr	r3, [r3, #16]
 8022980:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8022982:	e7df      	b.n	8022944 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022984:	4b0a      	ldr	r3, [pc, #40]	; (80229b0 <ip4_output_if_src+0x120>)
 8022986:	f44f 7262 	mov.w	r2, #904	; 0x388
 802298a:	490c      	ldr	r1, [pc, #48]	; (80229bc <ip4_output_if_src+0x12c>)
 802298c:	480a      	ldr	r0, [pc, #40]	; (80229b8 <ip4_output_if_src+0x128>)
 802298e:	f002 fb1d 	bl	8024fcc <iprintf>
 8022992:	e799      	b.n	80228c8 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022994:	4a0a      	ldr	r2, [pc, #40]	; (80229c0 <ip4_output_if_src+0x130>)
 8022996:	6812      	ldr	r2, [r2, #0]
 8022998:	e7c8      	b.n	802292c <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 802299a:	463a      	mov	r2, r7
 802299c:	4641      	mov	r1, r8
 802299e:	4620      	mov	r0, r4
 80229a0:	f000 fc36 	bl	8023210 <ip4_frag>
}
 80229a4:	b003      	add	sp, #12
 80229a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 80229aa:	f06f 0001 	mvn.w	r0, #1
 80229ae:	e7d5      	b.n	802295c <ip4_output_if_src+0xcc>
 80229b0:	080451f0 	.word	0x080451f0
 80229b4:	08045224 	.word	0x08045224
 80229b8:	0802bdc0 	.word	0x0802bdc0
 80229bc:	08045230 	.word	0x08045230
 80229c0:	080452a8 	.word	0x080452a8
 80229c4:	2002df82 	.word	0x2002df82

080229c8 <ip4_output_if>:
{
 80229c8:	b4f0      	push	{r4, r5, r6, r7}
 80229ca:	9c06      	ldr	r4, [sp, #24]
 80229cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80229d0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80229d4:	b11a      	cbz	r2, 80229de <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80229d6:	b109      	cbz	r1, 80229dc <ip4_output_if+0x14>
 80229d8:	680f      	ldr	r7, [r1, #0]
 80229da:	b907      	cbnz	r7, 80229de <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80229dc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80229de:	9504      	str	r5, [sp, #16]
 80229e0:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 80229e4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80229e6:	f7ff bf53 	b.w	8022890 <ip4_output_if_src>
 80229ea:	bf00      	nop

080229ec <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80229ec:	1e43      	subs	r3, r0, #1
 80229ee:	3303      	adds	r3, #3
 80229f0:	d814      	bhi.n	8022a1c <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80229f2:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80229f6:	f013 0302 	ands.w	r3, r3, #2
 80229fa:	d00d      	beq.n	8022a18 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80229fc:	684b      	ldr	r3, [r1, #4]
 80229fe:	4283      	cmp	r3, r0
 8022a00:	d00f      	beq.n	8022a22 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022a02:	688a      	ldr	r2, [r1, #8]
 8022a04:	4043      	eors	r3, r0
 8022a06:	4213      	tst	r3, r2
 8022a08:	d10b      	bne.n	8022a22 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022a0a:	43d3      	mvns	r3, r2
 8022a0c:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8022a10:	1ac3      	subs	r3, r0, r3
 8022a12:	fab3 f383 	clz	r3, r3
 8022a16:	095b      	lsrs	r3, r3, #5
  }
}
 8022a18:	4618      	mov	r0, r3
 8022a1a:	4770      	bx	lr
    return 1;
 8022a1c:	2301      	movs	r3, #1
}
 8022a1e:	4618      	mov	r0, r3
 8022a20:	4770      	bx	lr
    return 0;
 8022a22:	2300      	movs	r3, #0
}
 8022a24:	4618      	mov	r0, r3
 8022a26:	4770      	bx	lr

08022a28 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022a2c:	4e4f      	ldr	r6, [pc, #316]	; (8022b6c <ip4addr_aton+0x144>)
{
 8022a2e:	b085      	sub	sp, #20
  c = *cp;
 8022a30:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8022a32:	5cf2      	ldrb	r2, [r6, r3]
 8022a34:	0754      	lsls	r4, r2, #29
 8022a36:	d538      	bpl.n	8022aaa <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8022a38:	46e9      	mov	r9, sp
 8022a3a:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8022a3c:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8022a40:	464f      	mov	r7, r9
    if (c == '0') {
 8022a42:	2b30      	cmp	r3, #48	; 0x30
 8022a44:	d035      	beq.n	8022ab2 <ip4addr_aton+0x8a>
    base = 10;
 8022a46:	210a      	movs	r1, #10
 8022a48:	1c42      	adds	r2, r0, #1
 8022a4a:	2400      	movs	r4, #0
 8022a4c:	e003      	b.n	8022a56 <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8022a4e:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8022a52:	7813      	ldrb	r3, [r2, #0]
 8022a54:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8022a56:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022a5a:	f103 0e0a 	add.w	lr, r3, #10
 8022a5e:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8022a62:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8022a66:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022a6a:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8022a6e:	d1ee      	bne.n	8022a4e <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022a70:	2910      	cmp	r1, #16
 8022a72:	d10d      	bne.n	8022a90 <ip4addr_aton+0x68>
 8022a74:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8022a78:	d00a      	beq.n	8022a90 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022a7a:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8022a7e:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022a80:	bf0c      	ite	eq
 8022a82:	2061      	moveq	r0, #97	; 0x61
 8022a84:	2041      	movne	r0, #65	; 0x41
 8022a86:	ebae 0e00 	sub.w	lr, lr, r0
 8022a8a:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8022a8e:	e7e1      	b.n	8022a54 <ip4addr_aton+0x2c>
    if (c == '.') {
 8022a90:	2b2e      	cmp	r3, #46	; 0x2e
 8022a92:	d11a      	bne.n	8022aca <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8022a94:	4547      	cmp	r7, r8
 8022a96:	d008      	beq.n	8022aaa <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8022a98:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022a9c:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8022aa0:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8022aa4:	5cf2      	ldrb	r2, [r6, r3]
 8022aa6:	0752      	lsls	r2, r2, #29
 8022aa8:	d4cb      	bmi.n	8022a42 <ip4addr_aton+0x1a>
      return 0;
 8022aaa:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8022aac:	b005      	add	sp, #20
 8022aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8022ab2:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8022ab4:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8022ab8:	2a58      	cmp	r2, #88	; 0x58
 8022aba:	d002      	beq.n	8022ac2 <ip4addr_aton+0x9a>
      c = *++cp;
 8022abc:	3001      	adds	r0, #1
        base = 8;
 8022abe:	2108      	movs	r1, #8
 8022ac0:	e7c2      	b.n	8022a48 <ip4addr_aton+0x20>
        c = *++cp;
 8022ac2:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8022ac4:	2110      	movs	r1, #16
        c = *++cp;
 8022ac6:	3002      	adds	r0, #2
 8022ac8:	e7be      	b.n	8022a48 <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8022aca:	b113      	cbz	r3, 8022ad2 <ip4addr_aton+0xaa>
 8022acc:	f01c 0f08 	tst.w	ip, #8
 8022ad0:	d0eb      	beq.n	8022aaa <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8022ad2:	eba7 0009 	sub.w	r0, r7, r9
 8022ad6:	1080      	asrs	r0, r0, #2
 8022ad8:	3001      	adds	r0, #1
 8022ada:	2804      	cmp	r0, #4
 8022adc:	d83e      	bhi.n	8022b5c <ip4addr_aton+0x134>
 8022ade:	a301      	add	r3, pc, #4	; (adr r3, 8022ae4 <ip4addr_aton+0xbc>)
 8022ae0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022ae4:	08022aad 	.word	0x08022aad
 8022ae8:	08022b09 	.word	0x08022b09
 8022aec:	08022af9 	.word	0x08022af9
 8022af0:	08022b3d 	.word	0x08022b3d
 8022af4:	08022b19 	.word	0x08022b19
      if (val > 0xffffffUL) {
 8022af8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8022afc:	d2d5      	bcs.n	8022aaa <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8022afe:	9b00      	ldr	r3, [sp, #0]
 8022b00:	2bff      	cmp	r3, #255	; 0xff
 8022b02:	d8d2      	bhi.n	8022aaa <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022b04:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8022b08:	b335      	cbz	r5, 8022b58 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022b0a:	4620      	mov	r0, r4
 8022b0c:	f7f6 f988 	bl	8018e20 <lwip_htonl>
 8022b10:	4603      	mov	r3, r0
  return 1;
 8022b12:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022b14:	602b      	str	r3, [r5, #0]
 8022b16:	e7c9      	b.n	8022aac <ip4addr_aton+0x84>
      if (val > 0xff) {
 8022b18:	2cff      	cmp	r4, #255	; 0xff
 8022b1a:	d8c6      	bhi.n	8022aaa <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8022b1c:	9900      	ldr	r1, [sp, #0]
 8022b1e:	29ff      	cmp	r1, #255	; 0xff
 8022b20:	d8c3      	bhi.n	8022aaa <ip4addr_aton+0x82>
 8022b22:	9b01      	ldr	r3, [sp, #4]
 8022b24:	2bff      	cmp	r3, #255	; 0xff
 8022b26:	d8c0      	bhi.n	8022aaa <ip4addr_aton+0x82>
 8022b28:	9a02      	ldr	r2, [sp, #8]
 8022b2a:	2aff      	cmp	r2, #255	; 0xff
 8022b2c:	d8bd      	bhi.n	8022aaa <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8022b2e:	041b      	lsls	r3, r3, #16
 8022b30:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8022b34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022b38:	431c      	orrs	r4, r3
      break;
 8022b3a:	e7e5      	b.n	8022b08 <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8022b3c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8022b40:	d2b3      	bcs.n	8022aaa <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8022b42:	9a00      	ldr	r2, [sp, #0]
 8022b44:	2aff      	cmp	r2, #255	; 0xff
 8022b46:	d8b0      	bhi.n	8022aaa <ip4addr_aton+0x82>
 8022b48:	9b01      	ldr	r3, [sp, #4]
 8022b4a:	2bff      	cmp	r3, #255	; 0xff
 8022b4c:	d8ad      	bhi.n	8022aaa <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8022b4e:	041b      	lsls	r3, r3, #16
 8022b50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022b54:	431c      	orrs	r4, r3
      break;
 8022b56:	e7d7      	b.n	8022b08 <ip4addr_aton+0xe0>
  return 1;
 8022b58:	2001      	movs	r0, #1
 8022b5a:	e7a7      	b.n	8022aac <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8022b5c:	4b04      	ldr	r3, [pc, #16]	; (8022b70 <ip4addr_aton+0x148>)
 8022b5e:	22f9      	movs	r2, #249	; 0xf9
 8022b60:	4904      	ldr	r1, [pc, #16]	; (8022b74 <ip4addr_aton+0x14c>)
 8022b62:	4805      	ldr	r0, [pc, #20]	; (8022b78 <ip4addr_aton+0x150>)
 8022b64:	f002 fa32 	bl	8024fcc <iprintf>
      break;
 8022b68:	e7ce      	b.n	8022b08 <ip4addr_aton+0xe0>
 8022b6a:	bf00      	nop
 8022b6c:	08045505 	.word	0x08045505
 8022b70:	08045260 	.word	0x08045260
 8022b74:	0804529c 	.word	0x0804529c
 8022b78:	0802bdc0 	.word	0x0802bdc0

08022b7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022b7c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022b7e:	4604      	mov	r4, r0
 8022b80:	b148      	cbz	r0, 8022b96 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8022b82:	6960      	ldr	r0, [r4, #20]
 8022b84:	b108      	cbz	r0, 8022b8a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8022b86:	f7f8 f967 	bl	801ae58 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8022b8a:	4621      	mov	r1, r4
 8022b8c:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8022b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8022b92:	f7f7 bc65 	b.w	801a460 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022b96:	4b04      	ldr	r3, [pc, #16]	; (8022ba8 <ipfrag_free_pbuf_custom+0x2c>)
 8022b98:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022b9c:	4903      	ldr	r1, [pc, #12]	; (8022bac <ipfrag_free_pbuf_custom+0x30>)
 8022b9e:	4804      	ldr	r0, [pc, #16]	; (8022bb0 <ipfrag_free_pbuf_custom+0x34>)
 8022ba0:	f002 fa14 	bl	8024fcc <iprintf>
 8022ba4:	e7ed      	b.n	8022b82 <ipfrag_free_pbuf_custom+0x6>
 8022ba6:	bf00      	nop
 8022ba8:	080452b0 	.word	0x080452b0
 8022bac:	080452ec 	.word	0x080452ec
 8022bb0:	0802bdc0 	.word	0x0802bdc0

08022bb4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022bb4:	4281      	cmp	r1, r0
{
 8022bb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bba:	4606      	mov	r6, r0
 8022bbc:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022bbe:	d075      	beq.n	8022cac <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8022bc0:	b147      	cbz	r7, 8022bd4 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022bc2:	683b      	ldr	r3, [r7, #0]
 8022bc4:	42b3      	cmp	r3, r6
 8022bc6:	d005      	beq.n	8022bd4 <ip_reass_free_complete_datagram+0x20>
 8022bc8:	4b40      	ldr	r3, [pc, #256]	; (8022ccc <ip_reass_free_complete_datagram+0x118>)
 8022bca:	22ad      	movs	r2, #173	; 0xad
 8022bcc:	4940      	ldr	r1, [pc, #256]	; (8022cd0 <ip_reass_free_complete_datagram+0x11c>)
 8022bce:	4841      	ldr	r0, [pc, #260]	; (8022cd4 <ip_reass_free_complete_datagram+0x120>)
 8022bd0:	f002 f9fc 	bl	8024fcc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022bd4:	6875      	ldr	r5, [r6, #4]
 8022bd6:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8022bd8:	889a      	ldrh	r2, [r3, #4]
 8022bda:	2a00      	cmp	r2, #0
 8022bdc:	d047      	beq.n	8022c6e <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8022bde:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022be2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8022ccc <ip_reass_free_complete_datagram+0x118>
 8022be6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8022cec <ip_reass_free_complete_datagram+0x138>
 8022bea:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8022cd4 <ip_reass_free_complete_datagram+0x120>
 8022bee:	e005      	b.n	8022bfc <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8022bf0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022bf2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022bf4:	f7f8 f930 	bl	801ae58 <pbuf_free>
  while (p != NULL) {
 8022bf8:	b1b4      	cbz	r4, 8022c28 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022bfa:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8022bfc:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8022bfe:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8022c00:	f7f8 f93e 	bl	801ae80 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022c04:	4458      	add	r0, fp
 8022c06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022c0a:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022c0e:	dbef      	blt.n	8022bf0 <ip_reass_free_complete_datagram+0x3c>
 8022c10:	4653      	mov	r3, sl
 8022c12:	22cc      	movs	r2, #204	; 0xcc
 8022c14:	4649      	mov	r1, r9
 8022c16:	4640      	mov	r0, r8
 8022c18:	f002 f9d8 	bl	8024fcc <iprintf>
    pbuf_free(pcur);
 8022c1c:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022c1e:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022c20:	f7f8 f91a 	bl	801ae58 <pbuf_free>
  while (p != NULL) {
 8022c24:	2c00      	cmp	r4, #0
 8022c26:	d1e8      	bne.n	8022bfa <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8022c28:	4b2b      	ldr	r3, [pc, #172]	; (8022cd8 <ip_reass_free_complete_datagram+0x124>)
 8022c2a:	681a      	ldr	r2, [r3, #0]
 8022c2c:	4296      	cmp	r6, r2
 8022c2e:	d03a      	beq.n	8022ca6 <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022c30:	2f00      	cmp	r7, #0
 8022c32:	d042      	beq.n	8022cba <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8022c34:	6833      	ldr	r3, [r6, #0]
 8022c36:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022c38:	4c28      	ldr	r4, [pc, #160]	; (8022cdc <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8022c3a:	4631      	mov	r1, r6
 8022c3c:	2005      	movs	r0, #5
 8022c3e:	f7f7 fc0f 	bl	801a460 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022c42:	8823      	ldrh	r3, [r4, #0]
 8022c44:	455b      	cmp	r3, fp
 8022c46:	d305      	bcc.n	8022c54 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022c48:	eba3 030b 	sub.w	r3, r3, fp
}
 8022c4c:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022c4e:	8023      	strh	r3, [r4, #0]
}
 8022c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022c54:	4b1d      	ldr	r3, [pc, #116]	; (8022ccc <ip_reass_free_complete_datagram+0x118>)
 8022c56:	22d2      	movs	r2, #210	; 0xd2
 8022c58:	4921      	ldr	r1, [pc, #132]	; (8022ce0 <ip_reass_free_complete_datagram+0x12c>)
 8022c5a:	481e      	ldr	r0, [pc, #120]	; (8022cd4 <ip_reass_free_complete_datagram+0x120>)
 8022c5c:	f002 f9b6 	bl	8024fcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022c60:	8823      	ldrh	r3, [r4, #0]
}
 8022c62:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022c64:	eba3 030b 	sub.w	r3, r3, fp
 8022c68:	8023      	strh	r3, [r4, #0]
}
 8022c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8022c6e:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022c70:	6930      	ldr	r0, [r6, #16]
 8022c72:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8022c74:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022c76:	68f4      	ldr	r4, [r6, #12]
 8022c78:	68b2      	ldr	r2, [r6, #8]
 8022c7a:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022c7c:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022c7e:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022c80:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022c82:	601a      	str	r2, [r3, #0]
 8022c84:	605c      	str	r4, [r3, #4]
 8022c86:	69b2      	ldr	r2, [r6, #24]
 8022c88:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022c8a:	f7ff fccf 	bl	802262c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8022c8e:	4628      	mov	r0, r5
 8022c90:	f7f8 f8f6 	bl	801ae80 <pbuf_clen>
 8022c94:	4683      	mov	fp, r0
    pbuf_free(p);
 8022c96:	4628      	mov	r0, r5
 8022c98:	f7f8 f8de 	bl	801ae58 <pbuf_free>
  p = ipr->p;
 8022c9c:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8022c9e:	2d00      	cmp	r5, #0
 8022ca0:	d0c2      	beq.n	8022c28 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022ca2:	686b      	ldr	r3, [r5, #4]
 8022ca4:	e79d      	b.n	8022be2 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 8022ca6:	6832      	ldr	r2, [r6, #0]
 8022ca8:	601a      	str	r2, [r3, #0]
 8022caa:	e7c5      	b.n	8022c38 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022cac:	4b07      	ldr	r3, [pc, #28]	; (8022ccc <ip_reass_free_complete_datagram+0x118>)
 8022cae:	22ab      	movs	r2, #171	; 0xab
 8022cb0:	490c      	ldr	r1, [pc, #48]	; (8022ce4 <ip_reass_free_complete_datagram+0x130>)
 8022cb2:	4808      	ldr	r0, [pc, #32]	; (8022cd4 <ip_reass_free_complete_datagram+0x120>)
 8022cb4:	f002 f98a 	bl	8024fcc <iprintf>
 8022cb8:	e782      	b.n	8022bc0 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022cba:	4b04      	ldr	r3, [pc, #16]	; (8022ccc <ip_reass_free_complete_datagram+0x118>)
 8022cbc:	f240 1245 	movw	r2, #325	; 0x145
 8022cc0:	4909      	ldr	r1, [pc, #36]	; (8022ce8 <ip_reass_free_complete_datagram+0x134>)
 8022cc2:	4804      	ldr	r0, [pc, #16]	; (8022cd4 <ip_reass_free_complete_datagram+0x120>)
 8022cc4:	f002 f982 	bl	8024fcc <iprintf>
 8022cc8:	e7b4      	b.n	8022c34 <ip_reass_free_complete_datagram+0x80>
 8022cca:	bf00      	nop
 8022ccc:	080452b0 	.word	0x080452b0
 8022cd0:	08045304 	.word	0x08045304
 8022cd4:	0802bdc0 	.word	0x0802bdc0
 8022cd8:	2002df88 	.word	0x2002df88
 8022cdc:	2002df84 	.word	0x2002df84
 8022ce0:	08045354 	.word	0x08045354
 8022ce4:	080452f8 	.word	0x080452f8
 8022ce8:	08045338 	.word	0x08045338
 8022cec:	08045318 	.word	0x08045318

08022cf0 <ip_reass_remove_oldest_datagram>:
{
 8022cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8022cf4:	2700      	movs	r7, #0
 8022cf6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8022d60 <ip_reass_remove_oldest_datagram+0x70>
{
 8022cfa:	4605      	mov	r5, r0
 8022cfc:	460e      	mov	r6, r1
    r = reassdatagrams;
 8022cfe:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8022d02:	b1f3      	cbz	r3, 8022d42 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8022d04:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022d06:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8022d0a:	4621      	mov	r1, r4
    prev = NULL;
 8022d0c:	46a4      	mov	ip, r4
    oldest = NULL;
 8022d0e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022d10:	695a      	ldr	r2, [r3, #20]
 8022d12:	4572      	cmp	r2, lr
 8022d14:	d018      	beq.n	8022d48 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8022d16:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8022d18:	b120      	cbz	r0, 8022d24 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 8022d1a:	f893 901f 	ldrb.w	r9, [r3, #31]
 8022d1e:	7fc2      	ldrb	r2, [r0, #31]
 8022d20:	4591      	cmp	r9, r2
 8022d22:	d801      	bhi.n	8022d28 <ip_reass_remove_oldest_datagram+0x38>
 8022d24:	4661      	mov	r1, ip
 8022d26:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8022d28:	681a      	ldr	r2, [r3, #0]
 8022d2a:	469c      	mov	ip, r3
 8022d2c:	4613      	mov	r3, r2
 8022d2e:	2a00      	cmp	r2, #0
 8022d30:	d1ee      	bne.n	8022d10 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8022d32:	b110      	cbz	r0, 8022d3a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022d34:	f7ff ff3e 	bl	8022bb4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8022d38:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8022d3a:	42b7      	cmp	r7, r6
 8022d3c:	da01      	bge.n	8022d42 <ip_reass_remove_oldest_datagram+0x52>
 8022d3e:	2c01      	cmp	r4, #1
 8022d40:	dcdd      	bgt.n	8022cfe <ip_reass_remove_oldest_datagram+0xe>
}
 8022d42:	4638      	mov	r0, r7
 8022d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022d48:	699a      	ldr	r2, [r3, #24]
 8022d4a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8022d4e:	454a      	cmp	r2, r9
 8022d50:	d1e1      	bne.n	8022d16 <ip_reass_remove_oldest_datagram+0x26>
 8022d52:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8022d56:	88aa      	ldrh	r2, [r5, #4]
 8022d58:	4591      	cmp	r9, r2
 8022d5a:	d1dc      	bne.n	8022d16 <ip_reass_remove_oldest_datagram+0x26>
 8022d5c:	e7e4      	b.n	8022d28 <ip_reass_remove_oldest_datagram+0x38>
 8022d5e:	bf00      	nop
 8022d60:	2002df88 	.word	0x2002df88

08022d64 <ip_reass_tmr>:
{
 8022d64:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8022d66:	4b0a      	ldr	r3, [pc, #40]	; (8022d90 <ip_reass_tmr+0x2c>)
 8022d68:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8022d6a:	b140      	cbz	r0, 8022d7e <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8022d6c:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8022d6e:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8022d70:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8022d72:	b12b      	cbz	r3, 8022d80 <ip_reass_tmr+0x1c>
 8022d74:	4604      	mov	r4, r0
      r->timer--;
 8022d76:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8022d78:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8022d7a:	2800      	cmp	r0, #0
 8022d7c:	d1f7      	bne.n	8022d6e <ip_reass_tmr+0xa>
}
 8022d7e:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8022d80:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8022d82:	4621      	mov	r1, r4
 8022d84:	f7ff ff16 	bl	8022bb4 <ip_reass_free_complete_datagram>
      r = r->next;
 8022d88:	4628      	mov	r0, r5
  while (r != NULL) {
 8022d8a:	2800      	cmp	r0, #0
 8022d8c:	d1ef      	bne.n	8022d6e <ip_reass_tmr+0xa>
 8022d8e:	e7f6      	b.n	8022d7e <ip_reass_tmr+0x1a>
 8022d90:	2002df88 	.word	0x2002df88

08022d94 <ip4_reass>:
{
 8022d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8022d98:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8022d9c:	b085      	sub	sp, #20
 8022d9e:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022da0:	f89a 3000 	ldrb.w	r3, [sl]
 8022da4:	f003 030f 	and.w	r3, r3, #15
 8022da8:	2b05      	cmp	r3, #5
 8022daa:	f040 8089 	bne.w	8022ec0 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022dae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8022db2:	f7f6 f831 	bl	8018e18 <lwip_htons>
 8022db6:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022db8:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8022dbc:	f7f6 f82c 	bl	8018e18 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8022dc0:	f89a 2000 	ldrb.w	r2, [sl]
 8022dc4:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8022dc8:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022dcc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8022dd0:	d376      	bcc.n	8022ec0 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8022dd2:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022dd4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80230cc <ip4_reass+0x338>
  clen = pbuf_clen(p);
 8022dd8:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8022dda:	b29b      	uxth	r3, r3
 8022ddc:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8022dde:	f7f8 f84f 	bl	801ae80 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022de2:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8022de6:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022de8:	4403      	add	r3, r0
 8022dea:	2b0a      	cmp	r3, #10
 8022dec:	f300 80e5 	bgt.w	8022fba <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022df0:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80230d0 <ip4_reass+0x33c>
 8022df4:	f8d9 4000 	ldr.w	r4, [r9]
 8022df8:	2c00      	cmp	r4, #0
 8022dfa:	f000 80ec 	beq.w	8022fd6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022dfe:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022e02:	e003      	b.n	8022e0c <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022e04:	6824      	ldr	r4, [r4, #0]
 8022e06:	2c00      	cmp	r4, #0
 8022e08:	f000 80e5 	beq.w	8022fd6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022e0c:	6963      	ldr	r3, [r4, #20]
 8022e0e:	4293      	cmp	r3, r2
 8022e10:	d1f8      	bne.n	8022e04 <ip4_reass+0x70>
 8022e12:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022e16:	69a1      	ldr	r1, [r4, #24]
 8022e18:	4299      	cmp	r1, r3
 8022e1a:	d1f3      	bne.n	8022e04 <ip4_reass+0x70>
 8022e1c:	89a1      	ldrh	r1, [r4, #12]
 8022e1e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8022e22:	4299      	cmp	r1, r3
 8022e24:	d1ee      	bne.n	8022e04 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022e26:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8022e2a:	f7f5 fff5 	bl	8018e18 <lwip_htons>
 8022e2e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022e32:	2800      	cmp	r0, #0
 8022e34:	f000 80a9 	beq.w	8022f8a <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022e38:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022e3c:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8022e40:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022e44:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8022e48:	9301      	str	r3, [sp, #4]
 8022e4a:	d108      	bne.n	8022e5e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8022e4c:	9b00      	ldr	r3, [sp, #0]
 8022e4e:	18f3      	adds	r3, r6, r3
 8022e50:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022e52:	429e      	cmp	r6, r3
 8022e54:	d812      	bhi.n	8022e7c <ip4_reass+0xe8>
 8022e56:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8022e5a:	4293      	cmp	r3, r2
 8022e5c:	d80e      	bhi.n	8022e7c <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8022e5e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022e62:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8022e66:	f7f5 ffd7 	bl	8018e18 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8022e6a:	f89a 2000 	ldrb.w	r2, [sl]
 8022e6e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8022e72:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022e76:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8022e7a:	d229      	bcs.n	8022ed0 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8022e7c:	6866      	ldr	r6, [r4, #4]
 8022e7e:	b9fe      	cbnz	r6, 8022ec0 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022e80:	f8d9 3000 	ldr.w	r3, [r9]
 8022e84:	42a3      	cmp	r3, r4
 8022e86:	d014      	beq.n	8022eb2 <ip4_reass+0x11e>
 8022e88:	4b8c      	ldr	r3, [pc, #560]	; (80230bc <ip4_reass+0x328>)
 8022e8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022e8e:	498c      	ldr	r1, [pc, #560]	; (80230c0 <ip4_reass+0x32c>)
 8022e90:	488c      	ldr	r0, [pc, #560]	; (80230c4 <ip4_reass+0x330>)
 8022e92:	f002 f89b 	bl	8024fcc <iprintf>
  if (reassdatagrams == ipr) {
 8022e96:	f8d9 3000 	ldr.w	r3, [r9]
 8022e9a:	429c      	cmp	r4, r3
 8022e9c:	d009      	beq.n	8022eb2 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022e9e:	4b87      	ldr	r3, [pc, #540]	; (80230bc <ip4_reass+0x328>)
 8022ea0:	f240 1245 	movw	r2, #325	; 0x145
 8022ea4:	4988      	ldr	r1, [pc, #544]	; (80230c8 <ip4_reass+0x334>)
 8022ea6:	4887      	ldr	r0, [pc, #540]	; (80230c4 <ip4_reass+0x330>)
 8022ea8:	f002 f890 	bl	8024fcc <iprintf>
    prev->next = ipr->next;
 8022eac:	6823      	ldr	r3, [r4, #0]
 8022eae:	6033      	str	r3, [r6, #0]
 8022eb0:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8022eb2:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8022eb4:	4621      	mov	r1, r4
 8022eb6:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 8022eb8:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8022ebc:	f7f7 fad0 	bl	801a460 <memp_free>
  pbuf_free(p);
 8022ec0:	4628      	mov	r0, r5
  return NULL;
 8022ec2:	2600      	movs	r6, #0
  pbuf_free(p);
 8022ec4:	f7f7 ffc8 	bl	801ae58 <pbuf_free>
}
 8022ec8:	4630      	mov	r0, r6
 8022eca:	b005      	add	sp, #20
 8022ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8022ed0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022ed2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 8022ed6:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022eda:	f7f5 ff9d 	bl	8018e18 <lwip_htons>
 8022ede:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022ee2:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022ee6:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022ee8:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8022eec:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8022ef0:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8022ef4:	f8ab 3006 	strh.w	r3, [fp, #6]
 8022ef8:	b29b      	uxth	r3, r3
 8022efa:	4619      	mov	r1, r3
 8022efc:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8022efe:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8022f00:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8022f02:	f88b 3000 	strb.w	r3, [fp]
 8022f06:	f88b 3001 	strb.w	r3, [fp, #1]
 8022f0a:	f88b 3002 	strb.w	r3, [fp, #2]
 8022f0e:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8022f12:	d8b3      	bhi.n	8022e7c <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8022f14:	6861      	ldr	r1, [r4, #4]
 8022f16:	2900      	cmp	r1, #0
 8022f18:	f000 80c4 	beq.w	80230a4 <ip4_reass+0x310>
  int valid = 1;
 8022f1c:	f04f 0a01 	mov.w	sl, #1
 8022f20:	4694      	mov	ip, r2
 8022f22:	e00e      	b.n	8022f42 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8022f24:	d0cc      	beq.n	8022ec0 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8022f26:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8022f2a:	45f4      	cmp	ip, lr
 8022f2c:	d3c8      	bcc.n	8022ec0 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8022f2e:	b122      	cbz	r2, 8022f3a <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8022f30:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8022f32:	4282      	cmp	r2, r0
 8022f34:	bf18      	it	ne
 8022f36:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8022f3a:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8022f3c:	2900      	cmp	r1, #0
 8022f3e:	f000 808a 	beq.w	8023056 <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022f42:	461a      	mov	r2, r3
 8022f44:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8022f46:	8898      	ldrh	r0, [r3, #4]
 8022f48:	4584      	cmp	ip, r0
 8022f4a:	d2eb      	bcs.n	8022f24 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8022f4c:	4613      	mov	r3, r2
 8022f4e:	f8cb 1000 	str.w	r1, [fp]
 8022f52:	4662      	mov	r2, ip
 8022f54:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d066      	beq.n	8023028 <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8022f5a:	88db      	ldrh	r3, [r3, #6]
 8022f5c:	429a      	cmp	r2, r3
 8022f5e:	d3af      	bcc.n	8022ec0 <ip4_reass+0x12c>
 8022f60:	9903      	ldr	r1, [sp, #12]
 8022f62:	4281      	cmp	r1, r0
 8022f64:	d8ac      	bhi.n	8022ec0 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 8022f66:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8022f68:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8022f6c:	d061      	beq.n	8023032 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022f6e:	9b01      	ldr	r3, [sp, #4]
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	f000 808a 	beq.w	802308a <ip4_reass+0x2f6>
 8022f76:	7fa3      	ldrb	r3, [r4, #30]
 8022f78:	07db      	lsls	r3, r3, #31
 8022f7a:	d462      	bmi.n	8023042 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022f7c:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8022f80:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022f82:	441f      	add	r7, r3
 8022f84:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022f88:	e79e      	b.n	8022ec8 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022f8a:	89e0      	ldrh	r0, [r4, #14]
 8022f8c:	f7f5 ff44 	bl	8018e18 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022f90:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022f94:	2800      	cmp	r0, #0
 8022f96:	f43f af4f 	beq.w	8022e38 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022f9a:	f8da 3000 	ldr.w	r3, [sl]
 8022f9e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8022fa2:	f8da 1008 	ldr.w	r1, [sl, #8]
 8022fa6:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022faa:	60a3      	str	r3, [r4, #8]
 8022fac:	60e0      	str	r0, [r4, #12]
 8022fae:	6121      	str	r1, [r4, #16]
 8022fb0:	6162      	str	r2, [r4, #20]
 8022fb2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022fb6:	61a3      	str	r3, [r4, #24]
 8022fb8:	e73e      	b.n	8022e38 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022fba:	4601      	mov	r1, r0
 8022fbc:	4650      	mov	r0, sl
 8022fbe:	f7ff fe97 	bl	8022cf0 <ip_reass_remove_oldest_datagram>
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	f43f af7c 	beq.w	8022ec0 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8022fc8:	f8b8 3000 	ldrh.w	r3, [r8]
 8022fcc:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022fce:	2b0a      	cmp	r3, #10
 8022fd0:	f77f af0e 	ble.w	8022df0 <ip4_reass+0x5c>
 8022fd4:	e774      	b.n	8022ec0 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022fd6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8022fda:	4938      	ldr	r1, [pc, #224]	; (80230bc <ip4_reass+0x328>)
 8022fdc:	2005      	movs	r0, #5
 8022fde:	f7f7 fa09 	bl	801a3f4 <memp_malloc_fn>
  if (ipr == NULL) {
 8022fe2:	4604      	mov	r4, r0
 8022fe4:	b178      	cbz	r0, 8023006 <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8022fe6:	2300      	movs	r3, #0
 8022fe8:	61e3      	str	r3, [r4, #28]
 8022fea:	60a3      	str	r3, [r4, #8]
 8022fec:	60e3      	str	r3, [r4, #12]
 8022fee:	6123      	str	r3, [r4, #16]
 8022ff0:	6163      	str	r3, [r4, #20]
 8022ff2:	61a3      	str	r3, [r4, #24]
 8022ff4:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8022ff6:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 8022ffa:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8022ffe:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8023000:	230f      	movs	r3, #15
 8023002:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8023004:	e7c9      	b.n	8022f9a <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8023006:	4639      	mov	r1, r7
 8023008:	4650      	mov	r0, sl
 802300a:	f7ff fe71 	bl	8022cf0 <ip_reass_remove_oldest_datagram>
 802300e:	4287      	cmp	r7, r0
 8023010:	f73f af56 	bgt.w	8022ec0 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023014:	f44f 7291 	mov.w	r2, #290	; 0x122
 8023018:	4928      	ldr	r1, [pc, #160]	; (80230bc <ip4_reass+0x328>)
 802301a:	2005      	movs	r0, #5
 802301c:	f7f7 f9ea 	bl	801a3f4 <memp_malloc_fn>
    if (ipr == NULL)
 8023020:	4604      	mov	r4, r0
 8023022:	2800      	cmp	r0, #0
 8023024:	d1df      	bne.n	8022fe6 <ip4_reass+0x252>
 8023026:	e74b      	b.n	8022ec0 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8023028:	9b03      	ldr	r3, [sp, #12]
 802302a:	4283      	cmp	r3, r0
 802302c:	f63f af48 	bhi.w	8022ec0 <ip4_reass+0x12c>
        ipr->p = new_p;
 8023030:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023032:	9b01      	ldr	r3, [sp, #4]
 8023034:	b19b      	cbz	r3, 802305e <ip4_reass+0x2ca>
 8023036:	7fa3      	ldrb	r3, [r4, #30]
 8023038:	07d9      	lsls	r1, r3, #31
 802303a:	d59f      	bpl.n	8022f7c <ip4_reass+0x1e8>
    if (valid) {
 802303c:	f1ba 0f00 	cmp.w	sl, #0
 8023040:	d138      	bne.n	80230b4 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023042:	f8b8 3000 	ldrh.w	r3, [r8]
 8023046:	441f      	add	r7, r3
 8023048:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 802304c:	2600      	movs	r6, #0
}
 802304e:	4630      	mov	r0, r6
 8023050:	b005      	add	sp, #20
 8023052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 8023056:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8023058:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802305a:	d188      	bne.n	8022f6e <ip4_reass+0x1da>
 802305c:	e7e9      	b.n	8023032 <ip4_reass+0x29e>
    if (valid) {
 802305e:	f1ba 0f00 	cmp.w	sl, #0
 8023062:	d012      	beq.n	802308a <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023064:	6863      	ldr	r3, [r4, #4]
 8023066:	b183      	cbz	r3, 802308a <ip4_reass+0x2f6>
 8023068:	6859      	ldr	r1, [r3, #4]
 802306a:	888b      	ldrh	r3, [r1, #4]
 802306c:	2b00      	cmp	r3, #0
 802306e:	d031      	beq.n	80230d4 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023070:	f8b8 3000 	ldrh.w	r3, [r8]
 8023074:	441f      	add	r7, r3
  if (is_last) {
 8023076:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023078:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 802307c:	2b00      	cmp	r3, #0
 802307e:	d1e5      	bne.n	802304c <ip4_reass+0x2b8>
 8023080:	e008      	b.n	8023094 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023082:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8023086:	4659      	mov	r1, fp
 8023088:	b323      	cbz	r3, 80230d4 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802308a:	f8b8 3000 	ldrh.w	r3, [r8]
 802308e:	441f      	add	r7, r3
 8023090:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023094:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8023096:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023098:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 802309c:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802309e:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80230a0:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80230a2:	e7d3      	b.n	802304c <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80230a4:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80230a6:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	d0ea      	beq.n	8023082 <ip4_reass+0x2ee>
 80230ac:	7fa3      	ldrb	r3, [r4, #30]
 80230ae:	07da      	lsls	r2, r3, #31
 80230b0:	f57f af64 	bpl.w	8022f7c <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80230b4:	6863      	ldr	r3, [r4, #4]
 80230b6:	2b00      	cmp	r3, #0
 80230b8:	d0c3      	beq.n	8023042 <ip4_reass+0x2ae>
 80230ba:	e7d5      	b.n	8023068 <ip4_reass+0x2d4>
 80230bc:	080452b0 	.word	0x080452b0
 80230c0:	080453c8 	.word	0x080453c8
 80230c4:	0802bdc0 	.word	0x0802bdc0
 80230c8:	08045338 	.word	0x08045338
 80230cc:	2002df84 	.word	0x2002df84
 80230d0:	2002df88 	.word	0x2002df88
        q = iprh->next_pbuf;
 80230d4:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 80230d8:	b153      	cbz	r3, 80230f0 <ip4_reass+0x35c>
 80230da:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 80230dc:	4610      	mov	r0, r2
 80230de:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80230e0:	88c0      	ldrh	r0, [r0, #6]
 80230e2:	8893      	ldrh	r3, [r2, #4]
 80230e4:	4298      	cmp	r0, r3
 80230e6:	d1c3      	bne.n	8023070 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 80230e8:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d1f6      	bne.n	80230dc <ip4_reass+0x348>
 80230ee:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 80230f0:	9b02      	ldr	r3, [sp, #8]
 80230f2:	428b      	cmp	r3, r1
 80230f4:	d110      	bne.n	8023118 <ip4_reass+0x384>
 80230f6:	4b40      	ldr	r3, [pc, #256]	; (80231f8 <ip4_reass+0x464>)
 80230f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80230fc:	493f      	ldr	r1, [pc, #252]	; (80231fc <ip4_reass+0x468>)
 80230fe:	4840      	ldr	r0, [pc, #256]	; (8023200 <ip4_reass+0x46c>)
 8023100:	f001 ff64 	bl	8024fcc <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8023104:	9b02      	ldr	r3, [sp, #8]
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	b133      	cbz	r3, 8023118 <ip4_reass+0x384>
 802310a:	4b3b      	ldr	r3, [pc, #236]	; (80231f8 <ip4_reass+0x464>)
 802310c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8023110:	493c      	ldr	r1, [pc, #240]	; (8023204 <ip4_reass+0x470>)
 8023112:	483b      	ldr	r0, [pc, #236]	; (8023200 <ip4_reass+0x46c>)
 8023114:	f001 ff5a 	bl	8024fcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023118:	f8b8 3000 	ldrh.w	r3, [r8]
 802311c:	441f      	add	r7, r3
  if (is_last) {
 802311e:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023120:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8023124:	2b00      	cmp	r3, #0
 8023126:	d15b      	bne.n	80231e0 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 8023128:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802312a:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802312c:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802312e:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8023132:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023134:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8023136:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023138:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802313a:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802313c:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802313e:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023140:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023142:	68a3      	ldr	r3, [r4, #8]
 8023144:	6921      	ldr	r1, [r4, #16]
 8023146:	6962      	ldr	r2, [r4, #20]
 8023148:	6075      	str	r5, [r6, #4]
 802314a:	60b1      	str	r1, [r6, #8]
 802314c:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802314e:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023150:	6033      	str	r3, [r6, #0]
 8023152:	69a3      	ldr	r3, [r4, #24]
 8023154:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023156:	f7f5 fe5f 	bl	8018e18 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802315a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802315c:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802315e:	2114      	movs	r1, #20
 8023160:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8023162:	71b3      	strb	r3, [r6, #6]
 8023164:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8023166:	72b3      	strb	r3, [r6, #10]
 8023168:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802316a:	f7f6 fbfd 	bl	8019968 <inet_chksum>
 802316e:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8023170:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8023172:	b15d      	cbz	r5, 802318c <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8023174:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8023176:	4628      	mov	r0, r5
 8023178:	2114      	movs	r1, #20
 802317a:	f7f7 fdfd 	bl	801ad78 <pbuf_remove_header>
      pbuf_cat(p, r);
 802317e:	4629      	mov	r1, r5
 8023180:	4630      	mov	r0, r6
 8023182:	f7f7 fe9b 	bl	801aebc <pbuf_cat>
      r = iprh->next_pbuf;
 8023186:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8023188:	2d00      	cmp	r5, #0
 802318a:	d1f3      	bne.n	8023174 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 802318c:	f8d9 5000 	ldr.w	r5, [r9]
 8023190:	42a5      	cmp	r5, r4
 8023192:	d005      	beq.n	80231a0 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023194:	b335      	cbz	r5, 80231e4 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 8023196:	682b      	ldr	r3, [r5, #0]
 8023198:	42a3      	cmp	r3, r4
 802319a:	d014      	beq.n	80231c6 <ip4_reass+0x432>
 802319c:	461d      	mov	r5, r3
 802319e:	e7f9      	b.n	8023194 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 80231a0:	6823      	ldr	r3, [r4, #0]
 80231a2:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80231a6:	4621      	mov	r1, r4
 80231a8:	2005      	movs	r0, #5
 80231aa:	f7f7 f959 	bl	801a460 <memp_free>
    clen = pbuf_clen(p);
 80231ae:	4630      	mov	r0, r6
 80231b0:	f7f7 fe66 	bl	801ae80 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80231b4:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 80231b8:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80231ba:	4283      	cmp	r3, r0
 80231bc:	d306      	bcc.n	80231cc <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80231be:	1b1b      	subs	r3, r3, r4
 80231c0:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80231c4:	e680      	b.n	8022ec8 <ip4_reass+0x134>
    prev->next = ipr->next;
 80231c6:	6823      	ldr	r3, [r4, #0]
 80231c8:	602b      	str	r3, [r5, #0]
 80231ca:	e7ec      	b.n	80231a6 <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80231cc:	4b0a      	ldr	r3, [pc, #40]	; (80231f8 <ip4_reass+0x464>)
 80231ce:	f240 229b 	movw	r2, #667	; 0x29b
 80231d2:	490d      	ldr	r1, [pc, #52]	; (8023208 <ip4_reass+0x474>)
 80231d4:	480a      	ldr	r0, [pc, #40]	; (8023200 <ip4_reass+0x46c>)
 80231d6:	f001 fef9 	bl	8024fcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80231da:	f8b8 3000 	ldrh.w	r3, [r8]
 80231de:	e7ee      	b.n	80231be <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80231e0:	8ba0      	ldrh	r0, [r4, #28]
 80231e2:	e7a9      	b.n	8023138 <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80231e4:	4b04      	ldr	r3, [pc, #16]	; (80231f8 <ip4_reass+0x464>)
 80231e6:	f240 1245 	movw	r2, #325	; 0x145
 80231ea:	4908      	ldr	r1, [pc, #32]	; (802320c <ip4_reass+0x478>)
 80231ec:	4804      	ldr	r0, [pc, #16]	; (8023200 <ip4_reass+0x46c>)
 80231ee:	f001 feed 	bl	8024fcc <iprintf>
    prev->next = ipr->next;
 80231f2:	6823      	ldr	r3, [r4, #0]
 80231f4:	602b      	str	r3, [r5, #0]
 80231f6:	deff      	udf	#255	; 0xff
 80231f8:	080452b0 	.word	0x080452b0
 80231fc:	08045378 	.word	0x08045378
 8023200:	0802bdc0 	.word	0x0802bdc0
 8023204:	08045388 	.word	0x08045388
 8023208:	080453ac 	.word	0x080453ac
 802320c:	08045338 	.word	0x08045338

08023210 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023214:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 8023216:	b08f      	sub	sp, #60	; 0x3c
 8023218:	4605      	mov	r5, r0
 802321a:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802321c:	f1b3 0214 	subs.w	r2, r3, #20
{
 8023220:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023222:	bf48      	it	mi
 8023224:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023228:	6843      	ldr	r3, [r0, #4]
 802322a:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802322c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023230:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023232:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023234:	f003 030f 	and.w	r3, r3, #15
 8023238:	2b05      	cmp	r3, #5
 802323a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 802323e:	f040 80ea 	bne.w	8023416 <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023242:	8943      	ldrh	r3, [r0, #10]
 8023244:	2b13      	cmp	r3, #19
 8023246:	f240 80e9 	bls.w	802341c <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802324a:	9b04      	ldr	r3, [sp, #16]
 802324c:	88d8      	ldrh	r0, [r3, #6]
 802324e:	f7f5 fde3 	bl	8018e18 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023252:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8023254:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8023258:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802325a:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 802325c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8023260:	b29b      	uxth	r3, r3
 8023262:	920d      	str	r2, [sp, #52]	; 0x34
 8023264:	9305      	str	r3, [sp, #20]

  while (left) {
 8023266:	2b00      	cmp	r3, #0
 8023268:	f000 809d 	beq.w	80233a6 <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802326c:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 802326e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023270:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 802343c <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023274:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023276:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8023444 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802327a:	b29b      	uxth	r3, r3
 802327c:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802327e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023282:	2114      	movs	r1, #20
 8023284:	200e      	movs	r0, #14
 8023286:	f7f7 fc31 	bl	801aaec <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802328a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802328c:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 802328e:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023290:	4293      	cmp	r3, r2
 8023292:	bf28      	it	cs
 8023294:	4613      	movcs	r3, r2
 8023296:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8023298:	2800      	cmp	r0, #0
 802329a:	f000 80b9 	beq.w	8023410 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802329e:	8943      	ldrh	r3, [r0, #10]
 80232a0:	2b13      	cmp	r3, #19
 80232a2:	f240 8091 	bls.w	80233c8 <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80232a6:	9904      	ldr	r1, [sp, #16]
 80232a8:	9b03      	ldr	r3, [sp, #12]
 80232aa:	680a      	ldr	r2, [r1, #0]
 80232ac:	685b      	ldr	r3, [r3, #4]
 80232ae:	684f      	ldr	r7, [r1, #4]
 80232b0:	6888      	ldr	r0, [r1, #8]
 80232b2:	68c9      	ldr	r1, [r1, #12]
 80232b4:	605f      	str	r7, [r3, #4]
 80232b6:	60d9      	str	r1, [r3, #12]
 80232b8:	9904      	ldr	r1, [sp, #16]
 80232ba:	601a      	str	r2, [r3, #0]
 80232bc:	6098      	str	r0, [r3, #8]
 80232be:	690a      	ldr	r2, [r1, #16]
 80232c0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80232c2:	9b03      	ldr	r3, [sp, #12]
 80232c4:	685b      	ldr	r3, [r3, #4]
 80232c6:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 80232c8:	9b06      	ldr	r3, [sp, #24]
 80232ca:	2b00      	cmp	r3, #0
 80232cc:	d034      	beq.n	8023338 <ip4_frag+0x128>
 80232ce:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80232d0:	896b      	ldrh	r3, [r5, #10]
 80232d2:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80232d4:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80232d6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80232d8:	d36e      	bcc.n	80233b8 <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80232da:	454c      	cmp	r4, r9
 80232dc:	bf28      	it	cs
 80232de:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80232e0:	2c00      	cmp	r4, #0
 80232e2:	d062      	beq.n	80233aa <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80232e4:	4641      	mov	r1, r8
 80232e6:	f240 22bd 	movw	r2, #701	; 0x2bd
 80232ea:	2006      	movs	r0, #6
 80232ec:	f7f7 f882 	bl	801a3f4 <memp_malloc_fn>
 80232f0:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80232f2:	2241      	movs	r2, #65	; 0x41
 80232f4:	4621      	mov	r1, r4
 80232f6:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80232f8:	f1bb 0f00 	cmp.w	fp, #0
 80232fc:	d06f      	beq.n	80233de <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80232fe:	9401      	str	r4, [sp, #4]
 8023300:	465b      	mov	r3, fp
 8023302:	686f      	ldr	r7, [r5, #4]
 8023304:	4437      	add	r7, r6
 8023306:	9700      	str	r7, [sp, #0]
 8023308:	f7f7 fc8e 	bl	801ac28 <pbuf_alloced_custom>
 802330c:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 802330e:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8023310:	2f00      	cmp	r7, #0
 8023312:	d06e      	beq.n	80233f2 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023314:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8023318:	f7f7 fdbc 	bl	801ae94 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802331c:	4a44      	ldr	r2, [pc, #272]	; (8023430 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 802331e:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023320:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8023324:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8023326:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802332a:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 802332e:	f7f7 fdc5 	bl	801aebc <pbuf_cat>
      if (left_to_copy) {
 8023332:	f1b9 0f00 	cmp.w	r9, #0
 8023336:	d138      	bne.n	80233aa <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8023338:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 802333a:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802333c:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 802333e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8023340:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8023342:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8023346:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8023348:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 802334a:	4293      	cmp	r3, r2
 802334c:	dd44      	ble.n	80233d8 <ip4_frag+0x1c8>
 802334e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023350:	2b00      	cmp	r3, #0
 8023352:	d141      	bne.n	80233d8 <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023354:	f7f5 fd60 	bl	8018e18 <lwip_htons>
 8023358:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802335a:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802335c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802335e:	f103 0014 	add.w	r0, r3, #20
 8023362:	b280      	uxth	r0, r0
 8023364:	f7f5 fd58 	bl	8018e18 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8023368:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802336a:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 802336c:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 802336e:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023370:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8023372:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023374:	f7f6 faf8 	bl	8019968 <inet_chksum>
 8023378:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802337a:	9f03      	ldr	r7, [sp, #12]
 802337c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802337e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023380:	4639      	mov	r1, r7
 8023382:	6943      	ldr	r3, [r0, #20]
 8023384:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023386:	4638      	mov	r0, r7
 8023388:	f7f7 fd66 	bl	801ae58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802338c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8023390:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8023392:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8023396:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8023398:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802339a:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 802339c:	b292      	uxth	r2, r2
 802339e:	9207      	str	r2, [sp, #28]
  while (left) {
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	f47f af6c 	bne.w	802327e <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80233a6:	2000      	movs	r0, #0
 80233a8:	e020      	b.n	80233ec <ip4_frag+0x1dc>
        p = p->next;
 80233aa:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 80233ac:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 80233ae:	896b      	ldrh	r3, [r5, #10]
 80233b0:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80233b2:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80233b4:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80233b6:	d290      	bcs.n	80232da <ip4_frag+0xca>
 80233b8:	4643      	mov	r3, r8
 80233ba:	f240 322d 	movw	r2, #813	; 0x32d
 80233be:	491d      	ldr	r1, [pc, #116]	; (8023434 <ip4_frag+0x224>)
 80233c0:	4650      	mov	r0, sl
 80233c2:	f001 fe03 	bl	8024fcc <iprintf>
 80233c6:	e788      	b.n	80232da <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80233c8:	4643      	mov	r3, r8
 80233ca:	f44f 7249 	mov.w	r2, #804	; 0x324
 80233ce:	491a      	ldr	r1, [pc, #104]	; (8023438 <ip4_frag+0x228>)
 80233d0:	4650      	mov	r0, sl
 80233d2:	f001 fdfb 	bl	8024fcc <iprintf>
 80233d6:	e766      	b.n	80232a6 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 80233d8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80233dc:	e7ba      	b.n	8023354 <ip4_frag+0x144>
        pbuf_free(rambuf);
 80233de:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80233e2:	4658      	mov	r0, fp
 80233e4:	f7f7 fd38 	bl	801ae58 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80233e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80233ec:	b00f      	add	sp, #60	; 0x3c
 80233ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 80233f2:	46d9      	mov	r9, fp
 80233f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80233f8:	2006      	movs	r0, #6
 80233fa:	4649      	mov	r1, r9
 80233fc:	f7f7 f830 	bl	801a460 <memp_free>
        pbuf_free(rambuf);
 8023400:	4658      	mov	r0, fp
 8023402:	f7f7 fd29 	bl	801ae58 <pbuf_free>
  return ERR_MEM;
 8023406:	f04f 30ff 	mov.w	r0, #4294967295
}
 802340a:	b00f      	add	sp, #60	; 0x3c
 802340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8023410:	f04f 30ff 	mov.w	r0, #4294967295
 8023414:	e7ea      	b.n	80233ec <ip4_frag+0x1dc>
    return ERR_VAL;
 8023416:	f06f 0005 	mvn.w	r0, #5
 802341a:	e7e7      	b.n	80233ec <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802341c:	4b07      	ldr	r3, [pc, #28]	; (802343c <ip4_frag+0x22c>)
 802341e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8023422:	4907      	ldr	r1, [pc, #28]	; (8023440 <ip4_frag+0x230>)
 8023424:	4807      	ldr	r0, [pc, #28]	; (8023444 <ip4_frag+0x234>)
 8023426:	f001 fdd1 	bl	8024fcc <iprintf>
 802342a:	f06f 0005 	mvn.w	r0, #5
 802342e:	e7dd      	b.n	80233ec <ip4_frag+0x1dc>
 8023430:	08022b7d 	.word	0x08022b7d
 8023434:	08045424 	.word	0x08045424
 8023438:	08045404 	.word	0x08045404
 802343c:	080452b0 	.word	0x080452b0
 8023440:	080453e8 	.word	0x080453e8
 8023444:	0802bdc0 	.word	0x0802bdc0

08023448 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8023448:	8943      	ldrh	r3, [r0, #10]
 802344a:	2b0e      	cmp	r3, #14
{
 802344c:	b570      	push	{r4, r5, r6, lr}
 802344e:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8023450:	d91b      	bls.n	802348a <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023452:	7bc3      	ldrb	r3, [r0, #15]
 8023454:	460d      	mov	r5, r1
 8023456:	b91b      	cbnz	r3, 8023460 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8023458:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 802345c:	3301      	adds	r3, #1
 802345e:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023460:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023462:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8023464:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8023466:	07d9      	lsls	r1, r3, #31
 8023468:	d50a      	bpl.n	8023480 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802346a:	2b01      	cmp	r3, #1
 802346c:	d030      	beq.n	80234d0 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802346e:	2206      	movs	r2, #6
 8023470:	491d      	ldr	r1, [pc, #116]	; (80234e8 <ethernet_input+0xa0>)
 8023472:	f000 fdd7 	bl	8024024 <memcmp>
 8023476:	b918      	cbnz	r0, 8023480 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8023478:	7b63      	ldrb	r3, [r4, #13]
 802347a:	f043 0308 	orr.w	r3, r3, #8
 802347e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8023480:	2e08      	cmp	r6, #8
 8023482:	d016      	beq.n	80234b2 <ethernet_input+0x6a>
 8023484:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8023488:	d004      	beq.n	8023494 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802348a:	4620      	mov	r0, r4
 802348c:	f7f7 fce4 	bl	801ae58 <pbuf_free>
  return ERR_OK;
}
 8023490:	2000      	movs	r0, #0
 8023492:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023494:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8023498:	071b      	lsls	r3, r3, #28
 802349a:	d5f6      	bpl.n	802348a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802349c:	210e      	movs	r1, #14
 802349e:	4620      	mov	r0, r4
 80234a0:	f7f7 fc6a 	bl	801ad78 <pbuf_remove_header>
 80234a4:	2800      	cmp	r0, #0
 80234a6:	d1f0      	bne.n	802348a <ethernet_input+0x42>
        etharp_input(p, netif);
 80234a8:	4629      	mov	r1, r5
 80234aa:	4620      	mov	r0, r4
 80234ac:	f7fe fd2e 	bl	8021f0c <etharp_input>
      break;
 80234b0:	e7ee      	b.n	8023490 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80234b2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80234b6:	071a      	lsls	r2, r3, #28
 80234b8:	d5e7      	bpl.n	802348a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80234ba:	210e      	movs	r1, #14
 80234bc:	4620      	mov	r0, r4
 80234be:	f7f7 fc5b 	bl	801ad78 <pbuf_remove_header>
 80234c2:	2800      	cmp	r0, #0
 80234c4:	d1e1      	bne.n	802348a <ethernet_input+0x42>
        ip4_input(p, netif);
 80234c6:	4629      	mov	r1, r5
 80234c8:	4620      	mov	r0, r4
 80234ca:	f7ff f8eb 	bl	80226a4 <ip4_input>
      break;
 80234ce:	e7df      	b.n	8023490 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80234d0:	7843      	ldrb	r3, [r0, #1]
 80234d2:	2b00      	cmp	r3, #0
 80234d4:	d1d4      	bne.n	8023480 <ethernet_input+0x38>
 80234d6:	7883      	ldrb	r3, [r0, #2]
 80234d8:	2b5e      	cmp	r3, #94	; 0x5e
 80234da:	d1d1      	bne.n	8023480 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 80234dc:	7b63      	ldrb	r3, [r4, #13]
 80234de:	f043 0310 	orr.w	r3, r3, #16
 80234e2:	7363      	strb	r3, [r4, #13]
 80234e4:	e7cc      	b.n	8023480 <ethernet_input+0x38>
 80234e6:	bf00      	nop
 80234e8:	080454a0 	.word	0x080454a0

080234ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80234ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234f0:	460c      	mov	r4, r1
 80234f2:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80234f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80234f8:	4616      	mov	r6, r2
 80234fa:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80234fc:	f7f5 fc8c 	bl	8018e18 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023500:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8023502:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023504:	4620      	mov	r0, r4
 8023506:	f7f7 fc03 	bl	801ad10 <pbuf_add_header>
 802350a:	b9e0      	cbnz	r0, 8023546 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802350c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 802350e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023512:	683b      	ldr	r3, [r7, #0]
 8023514:	600b      	str	r3, [r1, #0]
 8023516:	88bb      	ldrh	r3, [r7, #4]
 8023518:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802351a:	6833      	ldr	r3, [r6, #0]
 802351c:	f8c1 3006 	str.w	r3, [r1, #6]
 8023520:	88b3      	ldrh	r3, [r6, #4]
 8023522:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023524:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8023528:	2b06      	cmp	r3, #6
 802352a:	d006      	beq.n	802353a <ethernet_output+0x4e>
 802352c:	4b08      	ldr	r3, [pc, #32]	; (8023550 <ethernet_output+0x64>)
 802352e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8023532:	4908      	ldr	r1, [pc, #32]	; (8023554 <ethernet_output+0x68>)
 8023534:	4808      	ldr	r0, [pc, #32]	; (8023558 <ethernet_output+0x6c>)
 8023536:	f001 fd49 	bl	8024fcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802353a:	69ab      	ldr	r3, [r5, #24]
 802353c:	4621      	mov	r1, r4
 802353e:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8023540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8023544:	4718      	bx	r3
}
 8023546:	f06f 0001 	mvn.w	r0, #1
 802354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802354e:	bf00      	nop
 8023550:	08045434 	.word	0x08045434
 8023554:	0804546c 	.word	0x0804546c
 8023558:	0802bdc0 	.word	0x0802bdc0

0802355c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802355c:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802355e:	2300      	movs	r3, #0
{
 8023560:	b085      	sub	sp, #20
 8023562:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8023564:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023566:	4619      	mov	r1, r3
{
 8023568:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802356a:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 802356c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023570:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023574:	f7f1 feba 	bl	80152ec <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8023578:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802357c:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 802357e:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8023580:	4258      	negs	r0, r3
 8023582:	b005      	add	sp, #20
 8023584:	bd30      	pop	{r4, r5, pc}
 8023586:	bf00      	nop

08023588 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8023588:	2200      	movs	r2, #0
 802358a:	6800      	ldr	r0, [r0, #0]
{
 802358c:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802358e:	f7f1 fec1 	bl	8015314 <osMessagePut>
 8023592:	3800      	subs	r0, #0
 8023594:	bf18      	it	ne
 8023596:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8023598:	4240      	negs	r0, r0
 802359a:	bd08      	pop	{r3, pc}

0802359c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802359e:	4614      	mov	r4, r2
 80235a0:	b085      	sub	sp, #20
 80235a2:	4605      	mov	r5, r0
 80235a4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80235a6:	f7f1 fd67 	bl	8015078 <osKernelSysTick>
 80235aa:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80235ac:	b15c      	cbz	r4, 80235c6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80235ae:	4622      	mov	r2, r4
 80235b0:	6829      	ldr	r1, [r5, #0]
 80235b2:	a801      	add	r0, sp, #4
 80235b4:	f7f1 feda 	bl	801536c <osMessageGet>

    if(event.status == osEventMessage)
 80235b8:	9b01      	ldr	r3, [sp, #4]
 80235ba:	2b10      	cmp	r3, #16
 80235bc:	d009      	beq.n	80235d2 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80235be:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80235c2:	b005      	add	sp, #20
 80235c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 80235c6:	f04f 32ff 	mov.w	r2, #4294967295
 80235ca:	6829      	ldr	r1, [r5, #0]
 80235cc:	a801      	add	r0, sp, #4
 80235ce:	f7f1 fecd 	bl	801536c <osMessageGet>
    *msg = (void *)event.value.v;
 80235d2:	9b02      	ldr	r3, [sp, #8]
 80235d4:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 80235d6:	f7f1 fd4f 	bl	8015078 <osKernelSysTick>
 80235da:	1b80      	subs	r0, r0, r6
}
 80235dc:	b005      	add	sp, #20
 80235de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080235e0 <sys_mbox_valid>:
 80235e0:	6800      	ldr	r0, [r0, #0]
 80235e2:	3800      	subs	r0, #0
 80235e4:	bf18      	it	ne
 80235e6:	2001      	movne	r0, #1
 80235e8:	4770      	bx	lr
 80235ea:	bf00      	nop

080235ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80235ec:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80235ee:	4803      	ldr	r0, [pc, #12]	; (80235fc <sys_init+0x10>)
 80235f0:	f7f1 fda6 	bl	8015140 <osMutexCreate>
 80235f4:	4b02      	ldr	r3, [pc, #8]	; (8023600 <sys_init+0x14>)
 80235f6:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80235f8:	bd08      	pop	{r3, pc}
 80235fa:	bf00      	nop
 80235fc:	080454b0 	.word	0x080454b0
 8023600:	2002df8c 	.word	0x2002df8c

08023604 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023604:	b510      	push	{r4, lr}
 8023606:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8023608:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802360a:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802360c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 802360e:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8023612:	f7f1 fd95 	bl	8015140 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8023616:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802361a:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 802361c:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 802361e:	4258      	negs	r0, r3
 8023620:	b002      	add	sp, #8
 8023622:	bd10      	pop	{r4, pc}

08023624 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8023624:	f04f 31ff 	mov.w	r1, #4294967295
 8023628:	6800      	ldr	r0, [r0, #0]
 802362a:	f7f1 bd91 	b.w	8015150 <osMutexWait>
 802362e:	bf00      	nop

08023630 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8023630:	6800      	ldr	r0, [r0, #0]
 8023632:	f7f1 bdb9 	b.w	80151a8 <osMutexRelease>
 8023636:	bf00      	nop

08023638 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8023638:	b510      	push	{r4, lr}
 802363a:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802363c:	2400      	movs	r4, #0
 802363e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8023642:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8023644:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8023648:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802364a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 802364e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8023652:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8023656:	f7f1 fd17 	bl	8015088 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802365a:	b008      	add	sp, #32
 802365c:	bd10      	pop	{r4, pc}
 802365e:	bf00      	nop

08023660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023662:	2200      	movs	r2, #0
 8023664:	4917      	ldr	r1, [pc, #92]	; (80236c4 <MX_USB_DEVICE_Init+0x64>)
 8023666:	4818      	ldr	r0, [pc, #96]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 8023668:	f7f1 f878 	bl	801475c <USBD_Init>
 802366c:	b970      	cbnz	r0, 802368c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802366e:	4917      	ldr	r1, [pc, #92]	; (80236cc <MX_USB_DEVICE_Init+0x6c>)
 8023670:	4815      	ldr	r0, [pc, #84]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 8023672:	f7f1 f88b 	bl	801478c <USBD_RegisterClass>
 8023676:	b988      	cbnz	r0, 802369c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023678:	4915      	ldr	r1, [pc, #84]	; (80236d0 <MX_USB_DEVICE_Init+0x70>)
 802367a:	4813      	ldr	r0, [pc, #76]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 802367c:	f7f1 f838 	bl	80146f0 <USBD_CDC_RegisterInterface>
 8023680:	b9a0      	cbnz	r0, 80236ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023682:	4811      	ldr	r0, [pc, #68]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 8023684:	f7f1 f898 	bl	80147b8 <USBD_Start>
 8023688:	b9b8      	cbnz	r0, 80236ba <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802368a:	bd08      	pop	{r3, pc}
    Error_Handler();
 802368c:	f7df fde2 	bl	8003254 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023690:	490e      	ldr	r1, [pc, #56]	; (80236cc <MX_USB_DEVICE_Init+0x6c>)
 8023692:	480d      	ldr	r0, [pc, #52]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 8023694:	f7f1 f87a 	bl	801478c <USBD_RegisterClass>
 8023698:	2800      	cmp	r0, #0
 802369a:	d0ed      	beq.n	8023678 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 802369c:	f7df fdda 	bl	8003254 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80236a0:	490b      	ldr	r1, [pc, #44]	; (80236d0 <MX_USB_DEVICE_Init+0x70>)
 80236a2:	4809      	ldr	r0, [pc, #36]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 80236a4:	f7f1 f824 	bl	80146f0 <USBD_CDC_RegisterInterface>
 80236a8:	2800      	cmp	r0, #0
 80236aa:	d0ea      	beq.n	8023682 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80236ac:	f7df fdd2 	bl	8003254 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80236b0:	4805      	ldr	r0, [pc, #20]	; (80236c8 <MX_USB_DEVICE_Init+0x68>)
 80236b2:	f7f1 f881 	bl	80147b8 <USBD_Start>
 80236b6:	2800      	cmp	r0, #0
 80236b8:	d0e7      	beq.n	802368a <MX_USB_DEVICE_Init+0x2a>
}
 80236ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80236be:	f7df bdc9 	b.w	8003254 <Error_Handler>
 80236c2:	bf00      	nop
 80236c4:	2000042c 	.word	0x2000042c
 80236c8:	2002df90 	.word	0x2002df90
 80236cc:	200002fc 	.word	0x200002fc
 80236d0:	20000418 	.word	0x20000418

080236d4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80236d4:	2000      	movs	r0, #0
 80236d6:	4770      	bx	lr

080236d8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80236d8:	2000      	movs	r0, #0
 80236da:	4770      	bx	lr

080236dc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80236dc:	2000      	movs	r0, #0
 80236de:	4770      	bx	lr

080236e0 <CDC_Receive_FS>:
{
 80236e0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80236e2:	4c05      	ldr	r4, [pc, #20]	; (80236f8 <CDC_Receive_FS+0x18>)
{
 80236e4:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7f1 f814 	bl	8014714 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80236ec:	4620      	mov	r0, r4
 80236ee:	f7f1 f819 	bl	8014724 <USBD_CDC_ReceivePacket>
}
 80236f2:	2000      	movs	r0, #0
 80236f4:	bd10      	pop	{r4, pc}
 80236f6:	bf00      	nop
 80236f8:	2002df90 	.word	0x2002df90

080236fc <CDC_Init_FS>:
{
 80236fc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80236fe:	4c06      	ldr	r4, [pc, #24]	; (8023718 <CDC_Init_FS+0x1c>)
 8023700:	2200      	movs	r2, #0
 8023702:	4906      	ldr	r1, [pc, #24]	; (802371c <CDC_Init_FS+0x20>)
 8023704:	4620      	mov	r0, r4
 8023706:	f7f0 fffb 	bl	8014700 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802370a:	4905      	ldr	r1, [pc, #20]	; (8023720 <CDC_Init_FS+0x24>)
 802370c:	4620      	mov	r0, r4
 802370e:	f7f1 f801 	bl	8014714 <USBD_CDC_SetRxBuffer>
}
 8023712:	2000      	movs	r0, #0
 8023714:	bd10      	pop	{r4, pc}
 8023716:	bf00      	nop
 8023718:	2002df90 	.word	0x2002df90
 802371c:	2002ea60 	.word	0x2002ea60
 8023720:	2002e260 	.word	0x2002e260

08023724 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023724:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8023726:	4801      	ldr	r0, [pc, #4]	; (802372c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8023728:	800b      	strh	r3, [r1, #0]
}
 802372a:	4770      	bx	lr
 802372c:	20000458 	.word	0x20000458

08023730 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023730:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8023732:	4801      	ldr	r0, [pc, #4]	; (8023738 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8023734:	800b      	strh	r3, [r1, #0]
}
 8023736:	4770      	bx	lr
 8023738:	2000046c 	.word	0x2000046c

0802373c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 802373c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 802373e:	4801      	ldr	r0, [pc, #4]	; (8023744 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8023740:	800b      	strh	r3, [r1, #0]
}
 8023742:	4770      	bx	lr
 8023744:	2000044c 	.word	0x2000044c

08023748 <USBD_FS_ManufacturerStrDescriptor>:
{
 8023748:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802374a:	4c04      	ldr	r4, [pc, #16]	; (802375c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 802374c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802374e:	4804      	ldr	r0, [pc, #16]	; (8023760 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8023750:	4621      	mov	r1, r4
 8023752:	f7f1 fbf5 	bl	8014f40 <USBD_GetString>
}
 8023756:	4620      	mov	r0, r4
 8023758:	bd10      	pop	{r4, pc}
 802375a:	bf00      	nop
 802375c:	2002f260 	.word	0x2002f260
 8023760:	080454b8 	.word	0x080454b8

08023764 <USBD_FS_ProductStrDescriptor>:
{
 8023764:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023766:	4c04      	ldr	r4, [pc, #16]	; (8023778 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8023768:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802376a:	4804      	ldr	r0, [pc, #16]	; (802377c <USBD_FS_ProductStrDescriptor+0x18>)
 802376c:	4621      	mov	r1, r4
 802376e:	f7f1 fbe7 	bl	8014f40 <USBD_GetString>
}
 8023772:	4620      	mov	r0, r4
 8023774:	bd10      	pop	{r4, pc}
 8023776:	bf00      	nop
 8023778:	2002f260 	.word	0x2002f260
 802377c:	080454cc 	.word	0x080454cc

08023780 <USBD_FS_ConfigStrDescriptor>:
{
 8023780:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023782:	4c04      	ldr	r4, [pc, #16]	; (8023794 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8023784:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023786:	4804      	ldr	r0, [pc, #16]	; (8023798 <USBD_FS_ConfigStrDescriptor+0x18>)
 8023788:	4621      	mov	r1, r4
 802378a:	f7f1 fbd9 	bl	8014f40 <USBD_GetString>
}
 802378e:	4620      	mov	r0, r4
 8023790:	bd10      	pop	{r4, pc}
 8023792:	bf00      	nop
 8023794:	2002f260 	.word	0x2002f260
 8023798:	080454e4 	.word	0x080454e4

0802379c <USBD_FS_InterfaceStrDescriptor>:
{
 802379c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802379e:	4c04      	ldr	r4, [pc, #16]	; (80237b0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80237a0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80237a2:	4804      	ldr	r0, [pc, #16]	; (80237b4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80237a4:	4621      	mov	r1, r4
 80237a6:	f7f1 fbcb 	bl	8014f40 <USBD_GetString>
}
 80237aa:	4620      	mov	r0, r4
 80237ac:	bd10      	pop	{r4, pc}
 80237ae:	bf00      	nop
 80237b0:	2002f260 	.word	0x2002f260
 80237b4:	080454f0 	.word	0x080454f0

080237b8 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80237b8:	4b21      	ldr	r3, [pc, #132]	; (8023840 <USBD_FS_SerialStrDescriptor+0x88>)
 80237ba:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80237be:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 80237c2:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 80237c4:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 80237c6:	f04f 041a 	mov.w	r4, #26
 80237ca:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 80237cc:	d101      	bne.n	80237d2 <USBD_FS_SerialStrDescriptor+0x1a>
}
 80237ce:	481d      	ldr	r0, [pc, #116]	; (8023844 <USBD_FS_SerialStrDescriptor+0x8c>)
 80237d0:	bd30      	pop	{r4, r5, pc}
 80237d2:	491c      	ldr	r1, [pc, #112]	; (8023844 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80237d4:	f04f 0e00 	mov.w	lr, #0
 80237d8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80237dc:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80237de:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 80237e0:	0f13      	lsrs	r3, r2, #28
 80237e2:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 80237e6:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 80237ea:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 80237ee:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80237f2:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 80237f6:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 80237fa:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 80237fe:	bf34      	ite	cc
 8023800:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023804:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8023808:	f1be 0f10 	cmp.w	lr, #16
 802380c:	d1e8      	bne.n	80237e0 <USBD_FS_SerialStrDescriptor+0x28>
 802380e:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8023810:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8023812:	0f03      	lsrs	r3, r0, #28
 8023814:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023818:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 802381c:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 802381e:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023822:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023826:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 802382a:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 802382e:	bf34      	ite	cc
 8023830:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023834:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8023836:	2a08      	cmp	r2, #8
 8023838:	d1eb      	bne.n	8023812 <USBD_FS_SerialStrDescriptor+0x5a>
}
 802383a:	4802      	ldr	r0, [pc, #8]	; (8023844 <USBD_FS_SerialStrDescriptor+0x8c>)
 802383c:	bd30      	pop	{r4, r5, pc}
 802383e:	bf00      	nop
 8023840:	1ff0f000 	.word	0x1ff0f000
 8023844:	20000470 	.word	0x20000470

08023848 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8023848:	6803      	ldr	r3, [r0, #0]
{
 802384a:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 802384c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8023850:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023852:	f04f 0400 	mov.w	r4, #0
 8023856:	e9cd 4403 	strd	r4, r4, [sp, #12]
 802385a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 802385e:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8023860:	d001      	beq.n	8023866 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023862:	b009      	add	sp, #36	; 0x24
 8023864:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023866:	4d1e      	ldr	r5, [pc, #120]	; (80238e0 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8023868:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802386c:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802386e:	481d      	ldr	r0, [pc, #116]	; (80238e4 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023870:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023872:	f043 0301 	orr.w	r3, r3, #1
 8023876:	632b      	str	r3, [r5, #48]	; 0x30
 8023878:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802387a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802387e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023882:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023884:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023886:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023888:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802388a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802388c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023890:	f7e7 fd9a 	bl	800b3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8023894:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023898:	a903      	add	r1, sp, #12
 802389a:	4812      	ldr	r0, [pc, #72]	; (80238e4 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802389c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802389e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80238a2:	f7e7 fd91 	bl	800b3c8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80238a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80238a8:	4622      	mov	r2, r4
 80238aa:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80238ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80238b0:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80238b2:	636b      	str	r3, [r5, #52]	; 0x34
 80238b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80238b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80238ba:	9301      	str	r3, [sp, #4]
 80238bc:	9b01      	ldr	r3, [sp, #4]
 80238be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80238c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80238c4:	646b      	str	r3, [r5, #68]	; 0x44
 80238c6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80238c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80238cc:	9302      	str	r3, [sp, #8]
 80238ce:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80238d0:	f7e4 fefc 	bl	80086cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80238d4:	2043      	movs	r0, #67	; 0x43
 80238d6:	f7e4 ff43 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 80238da:	b009      	add	sp, #36	; 0x24
 80238dc:	bd30      	pop	{r4, r5, pc}
 80238de:	bf00      	nop
 80238e0:	40023800 	.word	0x40023800
 80238e4:	40020000 	.word	0x40020000

080238e8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80238e8:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80238ec:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80238f0:	f7f0 bf74 	b.w	80147dc <USBD_LL_SetupStage>

080238f4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80238f4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80238f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80238fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023900:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8023904:	f7f0 bf98 	b.w	8014838 <USBD_LL_DataOutStage>

08023908 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023908:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802390c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023910:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023916:	f7f0 bfc5 	b.w	80148a4 <USBD_LL_DataInStage>
 802391a:	bf00      	nop

0802391c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802391c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023920:	f7f1 b85c 	b.w	80149dc <USBD_LL_SOF>

08023924 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023924:	68c1      	ldr	r1, [r0, #12]
{
 8023926:	b510      	push	{r4, lr}
 8023928:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802392a:	b111      	cbz	r1, 8023932 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802392c:	2902      	cmp	r1, #2
 802392e:	d10a      	bne.n	8023946 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8023930:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023932:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8023936:	f7f1 f839 	bl	80149ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802393a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 802393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023942:	f7f1 b80b 	b.w	801495c <USBD_LL_Reset>
    Error_Handler();
 8023946:	f7df fc85 	bl	8003254 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802394a:	2101      	movs	r1, #1
 802394c:	e7f1      	b.n	8023932 <HAL_PCD_ResetCallback+0xe>
 802394e:	bf00      	nop

08023950 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023950:	b510      	push	{r4, lr}
 8023952:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023954:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023958:	f7f1 f82c 	bl	80149b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802395c:	6822      	ldr	r2, [r4, #0]
 802395e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023962:	f043 0301 	orr.w	r3, r3, #1
 8023966:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802396a:	6a23      	ldr	r3, [r4, #32]
 802396c:	b123      	cbz	r3, 8023978 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802396e:	4a03      	ldr	r2, [pc, #12]	; (802397c <HAL_PCD_SuspendCallback+0x2c>)
 8023970:	6913      	ldr	r3, [r2, #16]
 8023972:	f043 0306 	orr.w	r3, r3, #6
 8023976:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8023978:	bd10      	pop	{r4, pc}
 802397a:	bf00      	nop
 802397c:	e000ed00 	.word	0xe000ed00

08023980 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023980:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023984:	f7f1 b820 	b.w	80149c8 <USBD_LL_Resume>

08023988 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023988:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 802398c:	f7f1 b836 	b.w	80149fc <USBD_LL_IsoOUTIncomplete>

08023990 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023990:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023994:	f7f1 b830 	b.w	80149f8 <USBD_LL_IsoINIncomplete>

08023998 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8023998:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 802399c:	f7f1 b830 	b.w	8014a00 <USBD_LL_DevConnected>

080239a0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80239a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80239a4:	f7f1 b82e 	b.w	8014a04 <USBD_LL_DevDisconnected>

080239a8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80239a8:	7802      	ldrb	r2, [r0, #0]
 80239aa:	b10a      	cbz	r2, 80239b0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 80239ac:	2000      	movs	r0, #0
 80239ae:	4770      	bx	lr
{
 80239b0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80239b2:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 80239b4:	4b14      	ldr	r3, [pc, #80]	; (8023a08 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80239b6:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80239b8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80239bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80239be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 80239c0:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80239c4:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80239c8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80239ca:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80239cc:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80239ce:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80239d0:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80239d4:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80239d8:	2206      	movs	r2, #6
 80239da:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80239dc:	f7e8 fe2c 	bl	800c638 <HAL_PCD_Init>
 80239e0:	b978      	cbnz	r0, 8023a02 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80239e2:	2180      	movs	r1, #128	; 0x80
 80239e4:	4808      	ldr	r0, [pc, #32]	; (8023a08 <USBD_LL_Init+0x60>)
 80239e6:	f7e9 fb91 	bl	800d10c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80239ea:	2240      	movs	r2, #64	; 0x40
 80239ec:	2100      	movs	r1, #0
 80239ee:	4806      	ldr	r0, [pc, #24]	; (8023a08 <USBD_LL_Init+0x60>)
 80239f0:	f7e9 fb62 	bl	800d0b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80239f4:	2280      	movs	r2, #128	; 0x80
 80239f6:	2101      	movs	r1, #1
 80239f8:	4803      	ldr	r0, [pc, #12]	; (8023a08 <USBD_LL_Init+0x60>)
 80239fa:	f7e9 fb5d 	bl	800d0b8 <HAL_PCDEx_SetTxFiFo>
}
 80239fe:	2000      	movs	r0, #0
 8023a00:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023a02:	f7df fc27 	bl	8003254 <Error_Handler>
 8023a06:	e7ec      	b.n	80239e2 <USBD_LL_Init+0x3a>
 8023a08:	2002f460 	.word	0x2002f460

08023a0c <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8023a0c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023a10:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023a12:	f7e8 febf 	bl	800c794 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8023a16:	2803      	cmp	r0, #3
 8023a18:	d802      	bhi.n	8023a20 <USBD_LL_Start+0x14>
 8023a1a:	4b02      	ldr	r3, [pc, #8]	; (8023a24 <USBD_LL_Start+0x18>)
 8023a1c:	5c18      	ldrb	r0, [r3, r0]
}
 8023a1e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023a20:	2003      	movs	r0, #3
}
 8023a22:	bd08      	pop	{r3, pc}
 8023a24:	08045500 	.word	0x08045500

08023a28 <USBD_LL_OpenEP>:
{
 8023a28:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023a2a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023a2e:	461a      	mov	r2, r3
 8023a30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023a32:	4663      	mov	r3, ip
 8023a34:	f7e9 f9f2 	bl	800ce1c <HAL_PCD_EP_Open>
  switch (hal_status)
 8023a38:	2803      	cmp	r0, #3
 8023a3a:	d802      	bhi.n	8023a42 <USBD_LL_OpenEP+0x1a>
 8023a3c:	4b02      	ldr	r3, [pc, #8]	; (8023a48 <USBD_LL_OpenEP+0x20>)
 8023a3e:	5c18      	ldrb	r0, [r3, r0]
}
 8023a40:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023a42:	2003      	movs	r0, #3
}
 8023a44:	bd08      	pop	{r3, pc}
 8023a46:	bf00      	nop
 8023a48:	08045500 	.word	0x08045500

08023a4c <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023a4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023a50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023a52:	f7e9 fa21 	bl	800ce98 <HAL_PCD_EP_Close>
  switch (hal_status)
 8023a56:	2803      	cmp	r0, #3
 8023a58:	d802      	bhi.n	8023a60 <USBD_LL_CloseEP+0x14>
 8023a5a:	4b02      	ldr	r3, [pc, #8]	; (8023a64 <USBD_LL_CloseEP+0x18>)
 8023a5c:	5c18      	ldrb	r0, [r3, r0]
}
 8023a5e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023a60:	2003      	movs	r0, #3
}
 8023a62:	bd08      	pop	{r3, pc}
 8023a64:	08045500 	.word	0x08045500

08023a68 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023a68:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023a6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023a6e:	f7e9 faa3 	bl	800cfb8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023a72:	2803      	cmp	r0, #3
 8023a74:	d802      	bhi.n	8023a7c <USBD_LL_StallEP+0x14>
 8023a76:	4b02      	ldr	r3, [pc, #8]	; (8023a80 <USBD_LL_StallEP+0x18>)
 8023a78:	5c18      	ldrb	r0, [r3, r0]
}
 8023a7a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023a7c:	2003      	movs	r0, #3
}
 8023a7e:	bd08      	pop	{r3, pc}
 8023a80:	08045500 	.word	0x08045500

08023a84 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023a84:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023a88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023a8a:	f7e9 fad9 	bl	800d040 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8023a8e:	2803      	cmp	r0, #3
 8023a90:	d802      	bhi.n	8023a98 <USBD_LL_ClearStallEP+0x14>
 8023a92:	4b02      	ldr	r3, [pc, #8]	; (8023a9c <USBD_LL_ClearStallEP+0x18>)
 8023a94:	5c18      	ldrb	r0, [r3, r0]
}
 8023a96:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023a98:	2003      	movs	r0, #3
}
 8023a9a:	bd08      	pop	{r3, pc}
 8023a9c:	08045500 	.word	0x08045500

08023aa0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8023aa0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023aa2:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8023aa6:	d406      	bmi.n	8023ab6 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023aa8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023aac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023ab0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8023ab4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023ab6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8023aba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023abe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023ac2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8023ac6:	4770      	bx	lr

08023ac8 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ac8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023acc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ace:	f7e9 f98f 	bl	800cdf0 <HAL_PCD_SetAddress>
  switch (hal_status)
 8023ad2:	2803      	cmp	r0, #3
 8023ad4:	d802      	bhi.n	8023adc <USBD_LL_SetUSBAddress+0x14>
 8023ad6:	4b02      	ldr	r3, [pc, #8]	; (8023ae0 <USBD_LL_SetUSBAddress+0x18>)
 8023ad8:	5c18      	ldrb	r0, [r3, r0]
}
 8023ada:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023adc:	2003      	movs	r0, #3
}
 8023ade:	bd08      	pop	{r3, pc}
 8023ae0:	08045500 	.word	0x08045500

08023ae4 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ae4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023ae8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023aea:	f7e9 fa3d 	bl	800cf68 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8023aee:	2803      	cmp	r0, #3
 8023af0:	d802      	bhi.n	8023af8 <USBD_LL_Transmit+0x14>
 8023af2:	4b02      	ldr	r3, [pc, #8]	; (8023afc <USBD_LL_Transmit+0x18>)
 8023af4:	5c18      	ldrb	r0, [r3, r0]
}
 8023af6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023af8:	2003      	movs	r0, #3
}
 8023afa:	bd08      	pop	{r3, pc}
 8023afc:	08045500 	.word	0x08045500

08023b00 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023b00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023b04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023b06:	f7e9 f9fd 	bl	800cf04 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8023b0a:	2803      	cmp	r0, #3
 8023b0c:	d802      	bhi.n	8023b14 <USBD_LL_PrepareReceive+0x14>
 8023b0e:	4b02      	ldr	r3, [pc, #8]	; (8023b18 <USBD_LL_PrepareReceive+0x18>)
 8023b10:	5c18      	ldrb	r0, [r3, r0]
}
 8023b12:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023b14:	2003      	movs	r0, #3
}
 8023b16:	bd08      	pop	{r3, pc}
 8023b18:	08045500 	.word	0x08045500

08023b1c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023b1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8023b20:	f7e9 ba18 	b.w	800cf54 <HAL_PCD_EP_GetRxCount>

08023b24 <HAL_PCDEx_LPM_Callback>:
{
 8023b24:	b510      	push	{r4, lr}
 8023b26:	4604      	mov	r4, r0
  switch (msg)
 8023b28:	b1a1      	cbz	r1, 8023b54 <HAL_PCDEx_LPM_Callback+0x30>
 8023b2a:	2901      	cmp	r1, #1
 8023b2c:	d111      	bne.n	8023b52 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023b2e:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023b30:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023b34:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023b38:	f043 0301 	orr.w	r3, r3, #1
 8023b3c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8023b40:	f7f0 ff38 	bl	80149b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023b44:	6a23      	ldr	r3, [r4, #32]
 8023b46:	b123      	cbz	r3, 8023b52 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023b48:	4a0e      	ldr	r2, [pc, #56]	; (8023b84 <HAL_PCDEx_LPM_Callback+0x60>)
 8023b4a:	6913      	ldr	r3, [r2, #16]
 8023b4c:	f043 0306 	orr.w	r3, r3, #6
 8023b50:	6113      	str	r3, [r2, #16]
}
 8023b52:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8023b54:	6a03      	ldr	r3, [r0, #32]
 8023b56:	b963      	cbnz	r3, 8023b72 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023b58:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8023b5a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023b5e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023b62:	f023 0301 	bic.w	r3, r3, #1
}
 8023b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023b6a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8023b6e:	f7f0 bf2b 	b.w	80149c8 <USBD_LL_Resume>
  SystemClock_Config();
 8023b72:	f7df fb77 	bl	8003264 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023b76:	4a03      	ldr	r2, [pc, #12]	; (8023b84 <HAL_PCDEx_LPM_Callback+0x60>)
 8023b78:	6913      	ldr	r3, [r2, #16]
 8023b7a:	f023 0306 	bic.w	r3, r3, #6
 8023b7e:	6113      	str	r3, [r2, #16]
 8023b80:	e7ea      	b.n	8023b58 <HAL_PCDEx_LPM_Callback+0x34>
 8023b82:	bf00      	nop
 8023b84:	e000ed00 	.word	0xe000ed00

08023b88 <atoi>:
 8023b88:	220a      	movs	r2, #10
 8023b8a:	2100      	movs	r1, #0
 8023b8c:	f002 baa6 	b.w	80260dc <strtol>

08023b90 <ctime>:
 8023b90:	b508      	push	{r3, lr}
 8023b92:	f000 f91f 	bl	8023dd4 <localtime>
 8023b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023b9a:	f002 be39 	b.w	8026810 <asctime>
 8023b9e:	Address 0x0000000008023b9e is out of bounds.


08023ba0 <std>:
 8023ba0:	2300      	movs	r3, #0
 8023ba2:	b510      	push	{r4, lr}
 8023ba4:	4604      	mov	r4, r0
 8023ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8023baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023bae:	6083      	str	r3, [r0, #8]
 8023bb0:	8181      	strh	r1, [r0, #12]
 8023bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8023bb4:	81c2      	strh	r2, [r0, #14]
 8023bb6:	6183      	str	r3, [r0, #24]
 8023bb8:	4619      	mov	r1, r3
 8023bba:	2208      	movs	r2, #8
 8023bbc:	305c      	adds	r0, #92	; 0x5c
 8023bbe:	f000 fa69 	bl	8024094 <memset>
 8023bc2:	4b05      	ldr	r3, [pc, #20]	; (8023bd8 <std+0x38>)
 8023bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8023bc6:	4b05      	ldr	r3, [pc, #20]	; (8023bdc <std+0x3c>)
 8023bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8023bca:	4b05      	ldr	r3, [pc, #20]	; (8023be0 <std+0x40>)
 8023bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023bce:	4b05      	ldr	r3, [pc, #20]	; (8023be4 <std+0x44>)
 8023bd0:	6224      	str	r4, [r4, #32]
 8023bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8023bd4:	bd10      	pop	{r4, pc}
 8023bd6:	bf00      	nop
 8023bd8:	08025449 	.word	0x08025449
 8023bdc:	0802546f 	.word	0x0802546f
 8023be0:	080254a7 	.word	0x080254a7
 8023be4:	080254cb 	.word	0x080254cb

08023be8 <_cleanup_r>:
 8023be8:	4901      	ldr	r1, [pc, #4]	; (8023bf0 <_cleanup_r+0x8>)
 8023bea:	f000 b8af 	b.w	8023d4c <_fwalk_reent>
 8023bee:	bf00      	nop
 8023bf0:	08027635 	.word	0x08027635

08023bf4 <__sfmoreglue>:
 8023bf4:	b570      	push	{r4, r5, r6, lr}
 8023bf6:	2268      	movs	r2, #104	; 0x68
 8023bf8:	1e4d      	subs	r5, r1, #1
 8023bfa:	4355      	muls	r5, r2
 8023bfc:	460e      	mov	r6, r1
 8023bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023c02:	f000 fd2d 	bl	8024660 <_malloc_r>
 8023c06:	4604      	mov	r4, r0
 8023c08:	b140      	cbz	r0, 8023c1c <__sfmoreglue+0x28>
 8023c0a:	2100      	movs	r1, #0
 8023c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8023c10:	300c      	adds	r0, #12
 8023c12:	60a0      	str	r0, [r4, #8]
 8023c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023c18:	f000 fa3c 	bl	8024094 <memset>
 8023c1c:	4620      	mov	r0, r4
 8023c1e:	bd70      	pop	{r4, r5, r6, pc}

08023c20 <__sfp_lock_acquire>:
 8023c20:	4801      	ldr	r0, [pc, #4]	; (8023c28 <__sfp_lock_acquire+0x8>)
 8023c22:	f000 b9eb 	b.w	8023ffc <__retarget_lock_acquire_recursive>
 8023c26:	bf00      	nop
 8023c28:	2002f866 	.word	0x2002f866

08023c2c <__sfp_lock_release>:
 8023c2c:	4801      	ldr	r0, [pc, #4]	; (8023c34 <__sfp_lock_release+0x8>)
 8023c2e:	f000 b9e7 	b.w	8024000 <__retarget_lock_release_recursive>
 8023c32:	bf00      	nop
 8023c34:	2002f866 	.word	0x2002f866

08023c38 <__sinit_lock_acquire>:
 8023c38:	4801      	ldr	r0, [pc, #4]	; (8023c40 <__sinit_lock_acquire+0x8>)
 8023c3a:	f000 b9df 	b.w	8023ffc <__retarget_lock_acquire_recursive>
 8023c3e:	bf00      	nop
 8023c40:	2002f867 	.word	0x2002f867

08023c44 <__sinit_lock_release>:
 8023c44:	4801      	ldr	r0, [pc, #4]	; (8023c4c <__sinit_lock_release+0x8>)
 8023c46:	f000 b9db 	b.w	8024000 <__retarget_lock_release_recursive>
 8023c4a:	bf00      	nop
 8023c4c:	2002f867 	.word	0x2002f867

08023c50 <__sinit>:
 8023c50:	b510      	push	{r4, lr}
 8023c52:	4604      	mov	r4, r0
 8023c54:	f7ff fff0 	bl	8023c38 <__sinit_lock_acquire>
 8023c58:	69a3      	ldr	r3, [r4, #24]
 8023c5a:	b11b      	cbz	r3, 8023c64 <__sinit+0x14>
 8023c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c60:	f7ff bff0 	b.w	8023c44 <__sinit_lock_release>
 8023c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023c68:	6523      	str	r3, [r4, #80]	; 0x50
 8023c6a:	4b13      	ldr	r3, [pc, #76]	; (8023cb8 <__sinit+0x68>)
 8023c6c:	4a13      	ldr	r2, [pc, #76]	; (8023cbc <__sinit+0x6c>)
 8023c6e:	681b      	ldr	r3, [r3, #0]
 8023c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8023c72:	42a3      	cmp	r3, r4
 8023c74:	bf04      	itt	eq
 8023c76:	2301      	moveq	r3, #1
 8023c78:	61a3      	streq	r3, [r4, #24]
 8023c7a:	4620      	mov	r0, r4
 8023c7c:	f000 f820 	bl	8023cc0 <__sfp>
 8023c80:	6060      	str	r0, [r4, #4]
 8023c82:	4620      	mov	r0, r4
 8023c84:	f000 f81c 	bl	8023cc0 <__sfp>
 8023c88:	60a0      	str	r0, [r4, #8]
 8023c8a:	4620      	mov	r0, r4
 8023c8c:	f000 f818 	bl	8023cc0 <__sfp>
 8023c90:	2200      	movs	r2, #0
 8023c92:	60e0      	str	r0, [r4, #12]
 8023c94:	2104      	movs	r1, #4
 8023c96:	6860      	ldr	r0, [r4, #4]
 8023c98:	f7ff ff82 	bl	8023ba0 <std>
 8023c9c:	68a0      	ldr	r0, [r4, #8]
 8023c9e:	2201      	movs	r2, #1
 8023ca0:	2109      	movs	r1, #9
 8023ca2:	f7ff ff7d 	bl	8023ba0 <std>
 8023ca6:	68e0      	ldr	r0, [r4, #12]
 8023ca8:	2202      	movs	r2, #2
 8023caa:	2112      	movs	r1, #18
 8023cac:	f7ff ff78 	bl	8023ba0 <std>
 8023cb0:	2301      	movs	r3, #1
 8023cb2:	61a3      	str	r3, [r4, #24]
 8023cb4:	e7d2      	b.n	8023c5c <__sinit+0xc>
 8023cb6:	bf00      	nop
 8023cb8:	08045668 	.word	0x08045668
 8023cbc:	08023be9 	.word	0x08023be9

08023cc0 <__sfp>:
 8023cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cc2:	4607      	mov	r7, r0
 8023cc4:	f7ff ffac 	bl	8023c20 <__sfp_lock_acquire>
 8023cc8:	4b1e      	ldr	r3, [pc, #120]	; (8023d44 <__sfp+0x84>)
 8023cca:	681e      	ldr	r6, [r3, #0]
 8023ccc:	69b3      	ldr	r3, [r6, #24]
 8023cce:	b913      	cbnz	r3, 8023cd6 <__sfp+0x16>
 8023cd0:	4630      	mov	r0, r6
 8023cd2:	f7ff ffbd 	bl	8023c50 <__sinit>
 8023cd6:	3648      	adds	r6, #72	; 0x48
 8023cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023cdc:	3b01      	subs	r3, #1
 8023cde:	d503      	bpl.n	8023ce8 <__sfp+0x28>
 8023ce0:	6833      	ldr	r3, [r6, #0]
 8023ce2:	b30b      	cbz	r3, 8023d28 <__sfp+0x68>
 8023ce4:	6836      	ldr	r6, [r6, #0]
 8023ce6:	e7f7      	b.n	8023cd8 <__sfp+0x18>
 8023ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023cec:	b9d5      	cbnz	r5, 8023d24 <__sfp+0x64>
 8023cee:	4b16      	ldr	r3, [pc, #88]	; (8023d48 <__sfp+0x88>)
 8023cf0:	60e3      	str	r3, [r4, #12]
 8023cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8023cf8:	f000 f97e 	bl	8023ff8 <__retarget_lock_init_recursive>
 8023cfc:	f7ff ff96 	bl	8023c2c <__sfp_lock_release>
 8023d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023d08:	6025      	str	r5, [r4, #0]
 8023d0a:	61a5      	str	r5, [r4, #24]
 8023d0c:	2208      	movs	r2, #8
 8023d0e:	4629      	mov	r1, r5
 8023d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023d14:	f000 f9be 	bl	8024094 <memset>
 8023d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023d20:	4620      	mov	r0, r4
 8023d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d24:	3468      	adds	r4, #104	; 0x68
 8023d26:	e7d9      	b.n	8023cdc <__sfp+0x1c>
 8023d28:	2104      	movs	r1, #4
 8023d2a:	4638      	mov	r0, r7
 8023d2c:	f7ff ff62 	bl	8023bf4 <__sfmoreglue>
 8023d30:	4604      	mov	r4, r0
 8023d32:	6030      	str	r0, [r6, #0]
 8023d34:	2800      	cmp	r0, #0
 8023d36:	d1d5      	bne.n	8023ce4 <__sfp+0x24>
 8023d38:	f7ff ff78 	bl	8023c2c <__sfp_lock_release>
 8023d3c:	230c      	movs	r3, #12
 8023d3e:	603b      	str	r3, [r7, #0]
 8023d40:	e7ee      	b.n	8023d20 <__sfp+0x60>
 8023d42:	bf00      	nop
 8023d44:	08045668 	.word	0x08045668
 8023d48:	ffff0001 	.word	0xffff0001

08023d4c <_fwalk_reent>:
 8023d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d50:	4606      	mov	r6, r0
 8023d52:	4688      	mov	r8, r1
 8023d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023d58:	2700      	movs	r7, #0
 8023d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8023d62:	d505      	bpl.n	8023d70 <_fwalk_reent+0x24>
 8023d64:	6824      	ldr	r4, [r4, #0]
 8023d66:	2c00      	cmp	r4, #0
 8023d68:	d1f7      	bne.n	8023d5a <_fwalk_reent+0xe>
 8023d6a:	4638      	mov	r0, r7
 8023d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d70:	89ab      	ldrh	r3, [r5, #12]
 8023d72:	2b01      	cmp	r3, #1
 8023d74:	d907      	bls.n	8023d86 <_fwalk_reent+0x3a>
 8023d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023d7a:	3301      	adds	r3, #1
 8023d7c:	d003      	beq.n	8023d86 <_fwalk_reent+0x3a>
 8023d7e:	4629      	mov	r1, r5
 8023d80:	4630      	mov	r0, r6
 8023d82:	47c0      	blx	r8
 8023d84:	4307      	orrs	r7, r0
 8023d86:	3568      	adds	r5, #104	; 0x68
 8023d88:	e7e9      	b.n	8023d5e <_fwalk_reent+0x12>
 8023d8a:	Address 0x0000000008023d8a is out of bounds.


08023d8c <__libc_init_array>:
 8023d8c:	b570      	push	{r4, r5, r6, lr}
 8023d8e:	4d0d      	ldr	r5, [pc, #52]	; (8023dc4 <__libc_init_array+0x38>)
 8023d90:	4c0d      	ldr	r4, [pc, #52]	; (8023dc8 <__libc_init_array+0x3c>)
 8023d92:	1b64      	subs	r4, r4, r5
 8023d94:	10a4      	asrs	r4, r4, #2
 8023d96:	2600      	movs	r6, #0
 8023d98:	42a6      	cmp	r6, r4
 8023d9a:	d109      	bne.n	8023db0 <__libc_init_array+0x24>
 8023d9c:	4d0b      	ldr	r5, [pc, #44]	; (8023dcc <__libc_init_array+0x40>)
 8023d9e:	4c0c      	ldr	r4, [pc, #48]	; (8023dd0 <__libc_init_array+0x44>)
 8023da0:	f005 f950 	bl	8029044 <_init>
 8023da4:	1b64      	subs	r4, r4, r5
 8023da6:	10a4      	asrs	r4, r4, #2
 8023da8:	2600      	movs	r6, #0
 8023daa:	42a6      	cmp	r6, r4
 8023dac:	d105      	bne.n	8023dba <__libc_init_array+0x2e>
 8023dae:	bd70      	pop	{r4, r5, r6, pc}
 8023db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8023db4:	4798      	blx	r3
 8023db6:	3601      	adds	r6, #1
 8023db8:	e7ee      	b.n	8023d98 <__libc_init_array+0xc>
 8023dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8023dbe:	4798      	blx	r3
 8023dc0:	3601      	adds	r6, #1
 8023dc2:	e7f2      	b.n	8023daa <__libc_init_array+0x1e>
 8023dc4:	08045df4 	.word	0x08045df4
 8023dc8:	08045df4 	.word	0x08045df4
 8023dcc:	08045df4 	.word	0x08045df4
 8023dd0:	08045df8 	.word	0x08045df8

08023dd4 <localtime>:
 8023dd4:	b538      	push	{r3, r4, r5, lr}
 8023dd6:	4b0b      	ldr	r3, [pc, #44]	; (8023e04 <localtime+0x30>)
 8023dd8:	681d      	ldr	r5, [r3, #0]
 8023dda:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8023ddc:	4604      	mov	r4, r0
 8023dde:	b953      	cbnz	r3, 8023df6 <localtime+0x22>
 8023de0:	2024      	movs	r0, #36	; 0x24
 8023de2:	f000 f90f 	bl	8024004 <malloc>
 8023de6:	4602      	mov	r2, r0
 8023de8:	63e8      	str	r0, [r5, #60]	; 0x3c
 8023dea:	b920      	cbnz	r0, 8023df6 <localtime+0x22>
 8023dec:	4b06      	ldr	r3, [pc, #24]	; (8023e08 <localtime+0x34>)
 8023dee:	4807      	ldr	r0, [pc, #28]	; (8023e0c <localtime+0x38>)
 8023df0:	2132      	movs	r1, #50	; 0x32
 8023df2:	f002 fd55 	bl	80268a0 <__assert_func>
 8023df6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023df8:	4620      	mov	r0, r4
 8023dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023dfe:	f000 b807 	b.w	8023e10 <localtime_r>
 8023e02:	bf00      	nop
 8023e04:	2000048c 	.word	0x2000048c
 8023e08:	0804566c 	.word	0x0804566c
 8023e0c:	08045683 	.word	0x08045683

08023e10 <localtime_r>:
 8023e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023e14:	4680      	mov	r8, r0
 8023e16:	9101      	str	r1, [sp, #4]
 8023e18:	f003 fc9e 	bl	8027758 <__gettzinfo>
 8023e1c:	9901      	ldr	r1, [sp, #4]
 8023e1e:	4605      	mov	r5, r0
 8023e20:	4640      	mov	r0, r8
 8023e22:	f003 fc9d 	bl	8027760 <gmtime_r>
 8023e26:	6943      	ldr	r3, [r0, #20]
 8023e28:	0799      	lsls	r1, r3, #30
 8023e2a:	4604      	mov	r4, r0
 8023e2c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8023e30:	d105      	bne.n	8023e3e <localtime_r+0x2e>
 8023e32:	2264      	movs	r2, #100	; 0x64
 8023e34:	fb97 f3f2 	sdiv	r3, r7, r2
 8023e38:	fb02 7313 	mls	r3, r2, r3, r7
 8023e3c:	bb73      	cbnz	r3, 8023e9c <localtime_r+0x8c>
 8023e3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023e42:	fb97 f6f3 	sdiv	r6, r7, r3
 8023e46:	fb03 7616 	mls	r6, r3, r6, r7
 8023e4a:	fab6 f386 	clz	r3, r6
 8023e4e:	095b      	lsrs	r3, r3, #5
 8023e50:	4e67      	ldr	r6, [pc, #412]	; (8023ff0 <localtime_r+0x1e0>)
 8023e52:	2230      	movs	r2, #48	; 0x30
 8023e54:	fb02 6603 	mla	r6, r2, r3, r6
 8023e58:	f002 fa72 	bl	8026340 <__tz_lock>
 8023e5c:	f002 fa7c 	bl	8026358 <_tzset_unlocked>
 8023e60:	4b64      	ldr	r3, [pc, #400]	; (8023ff4 <localtime_r+0x1e4>)
 8023e62:	681b      	ldr	r3, [r3, #0]
 8023e64:	b34b      	cbz	r3, 8023eba <localtime_r+0xaa>
 8023e66:	686b      	ldr	r3, [r5, #4]
 8023e68:	42bb      	cmp	r3, r7
 8023e6a:	d119      	bne.n	8023ea0 <localtime_r+0x90>
 8023e6c:	682f      	ldr	r7, [r5, #0]
 8023e6e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8023e72:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8023e76:	b9df      	cbnz	r7, 8023eb0 <localtime_r+0xa0>
 8023e78:	4282      	cmp	r2, r0
 8023e7a:	eb73 0101 	sbcs.w	r1, r3, r1
 8023e7e:	da23      	bge.n	8023ec8 <localtime_r+0xb8>
 8023e80:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8023e84:	4282      	cmp	r2, r0
 8023e86:	eb73 0701 	sbcs.w	r7, r3, r1
 8023e8a:	bfb4      	ite	lt
 8023e8c:	2701      	movlt	r7, #1
 8023e8e:	2700      	movge	r7, #0
 8023e90:	4282      	cmp	r2, r0
 8023e92:	418b      	sbcs	r3, r1
 8023e94:	6227      	str	r7, [r4, #32]
 8023e96:	db19      	blt.n	8023ecc <localtime_r+0xbc>
 8023e98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8023e9a:	e018      	b.n	8023ece <localtime_r+0xbe>
 8023e9c:	2301      	movs	r3, #1
 8023e9e:	e7d7      	b.n	8023e50 <localtime_r+0x40>
 8023ea0:	4638      	mov	r0, r7
 8023ea2:	f002 f9a3 	bl	80261ec <__tzcalc_limits>
 8023ea6:	2800      	cmp	r0, #0
 8023ea8:	d1e0      	bne.n	8023e6c <localtime_r+0x5c>
 8023eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8023eae:	e004      	b.n	8023eba <localtime_r+0xaa>
 8023eb0:	4282      	cmp	r2, r0
 8023eb2:	eb73 0101 	sbcs.w	r1, r3, r1
 8023eb6:	da02      	bge.n	8023ebe <localtime_r+0xae>
 8023eb8:	2300      	movs	r3, #0
 8023eba:	6223      	str	r3, [r4, #32]
 8023ebc:	e7ec      	b.n	8023e98 <localtime_r+0x88>
 8023ebe:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8023ec2:	4282      	cmp	r2, r0
 8023ec4:	418b      	sbcs	r3, r1
 8023ec6:	daf7      	bge.n	8023eb8 <localtime_r+0xa8>
 8023ec8:	2301      	movs	r3, #1
 8023eca:	6223      	str	r3, [r4, #32]
 8023ecc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8023ece:	6861      	ldr	r1, [r4, #4]
 8023ed0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8023ed4:	203c      	movs	r0, #60	; 0x3c
 8023ed6:	fb93 f5f2 	sdiv	r5, r3, r2
 8023eda:	fb02 3315 	mls	r3, r2, r5, r3
 8023ede:	fb93 f2f0 	sdiv	r2, r3, r0
 8023ee2:	fb00 3012 	mls	r0, r0, r2, r3
 8023ee6:	6823      	ldr	r3, [r4, #0]
 8023ee8:	1a89      	subs	r1, r1, r2
 8023eea:	68a2      	ldr	r2, [r4, #8]
 8023eec:	6061      	str	r1, [r4, #4]
 8023eee:	1a1b      	subs	r3, r3, r0
 8023ef0:	1b52      	subs	r2, r2, r5
 8023ef2:	2b3b      	cmp	r3, #59	; 0x3b
 8023ef4:	6023      	str	r3, [r4, #0]
 8023ef6:	60a2      	str	r2, [r4, #8]
 8023ef8:	dd35      	ble.n	8023f66 <localtime_r+0x156>
 8023efa:	3101      	adds	r1, #1
 8023efc:	6061      	str	r1, [r4, #4]
 8023efe:	3b3c      	subs	r3, #60	; 0x3c
 8023f00:	6023      	str	r3, [r4, #0]
 8023f02:	6863      	ldr	r3, [r4, #4]
 8023f04:	2b3b      	cmp	r3, #59	; 0x3b
 8023f06:	dd34      	ble.n	8023f72 <localtime_r+0x162>
 8023f08:	3201      	adds	r2, #1
 8023f0a:	60a2      	str	r2, [r4, #8]
 8023f0c:	3b3c      	subs	r3, #60	; 0x3c
 8023f0e:	6063      	str	r3, [r4, #4]
 8023f10:	68a3      	ldr	r3, [r4, #8]
 8023f12:	2b17      	cmp	r3, #23
 8023f14:	dd33      	ble.n	8023f7e <localtime_r+0x16e>
 8023f16:	69e2      	ldr	r2, [r4, #28]
 8023f18:	3201      	adds	r2, #1
 8023f1a:	61e2      	str	r2, [r4, #28]
 8023f1c:	69a2      	ldr	r2, [r4, #24]
 8023f1e:	3201      	adds	r2, #1
 8023f20:	2a06      	cmp	r2, #6
 8023f22:	bfc8      	it	gt
 8023f24:	2200      	movgt	r2, #0
 8023f26:	61a2      	str	r2, [r4, #24]
 8023f28:	68e2      	ldr	r2, [r4, #12]
 8023f2a:	3b18      	subs	r3, #24
 8023f2c:	3201      	adds	r2, #1
 8023f2e:	60a3      	str	r3, [r4, #8]
 8023f30:	6923      	ldr	r3, [r4, #16]
 8023f32:	60e2      	str	r2, [r4, #12]
 8023f34:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8023f38:	428a      	cmp	r2, r1
 8023f3a:	dd0e      	ble.n	8023f5a <localtime_r+0x14a>
 8023f3c:	2b0b      	cmp	r3, #11
 8023f3e:	eba2 0201 	sub.w	r2, r2, r1
 8023f42:	60e2      	str	r2, [r4, #12]
 8023f44:	f103 0201 	add.w	r2, r3, #1
 8023f48:	bf09      	itett	eq
 8023f4a:	6963      	ldreq	r3, [r4, #20]
 8023f4c:	6122      	strne	r2, [r4, #16]
 8023f4e:	2200      	moveq	r2, #0
 8023f50:	3301      	addeq	r3, #1
 8023f52:	bf02      	ittt	eq
 8023f54:	6122      	streq	r2, [r4, #16]
 8023f56:	6163      	streq	r3, [r4, #20]
 8023f58:	61e2      	streq	r2, [r4, #28]
 8023f5a:	f002 f9f7 	bl	802634c <__tz_unlock>
 8023f5e:	4620      	mov	r0, r4
 8023f60:	b002      	add	sp, #8
 8023f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	dacb      	bge.n	8023f02 <localtime_r+0xf2>
 8023f6a:	3901      	subs	r1, #1
 8023f6c:	6061      	str	r1, [r4, #4]
 8023f6e:	333c      	adds	r3, #60	; 0x3c
 8023f70:	e7c6      	b.n	8023f00 <localtime_r+0xf0>
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	dacc      	bge.n	8023f10 <localtime_r+0x100>
 8023f76:	3a01      	subs	r2, #1
 8023f78:	60a2      	str	r2, [r4, #8]
 8023f7a:	333c      	adds	r3, #60	; 0x3c
 8023f7c:	e7c7      	b.n	8023f0e <localtime_r+0xfe>
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	daeb      	bge.n	8023f5a <localtime_r+0x14a>
 8023f82:	69e2      	ldr	r2, [r4, #28]
 8023f84:	3a01      	subs	r2, #1
 8023f86:	61e2      	str	r2, [r4, #28]
 8023f88:	69a2      	ldr	r2, [r4, #24]
 8023f8a:	3a01      	subs	r2, #1
 8023f8c:	bf48      	it	mi
 8023f8e:	2206      	movmi	r2, #6
 8023f90:	61a2      	str	r2, [r4, #24]
 8023f92:	68e2      	ldr	r2, [r4, #12]
 8023f94:	3318      	adds	r3, #24
 8023f96:	3a01      	subs	r2, #1
 8023f98:	60e2      	str	r2, [r4, #12]
 8023f9a:	60a3      	str	r3, [r4, #8]
 8023f9c:	2a00      	cmp	r2, #0
 8023f9e:	d1dc      	bne.n	8023f5a <localtime_r+0x14a>
 8023fa0:	6923      	ldr	r3, [r4, #16]
 8023fa2:	3b01      	subs	r3, #1
 8023fa4:	d405      	bmi.n	8023fb2 <localtime_r+0x1a2>
 8023fa6:	6123      	str	r3, [r4, #16]
 8023fa8:	6923      	ldr	r3, [r4, #16]
 8023faa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023fae:	60e3      	str	r3, [r4, #12]
 8023fb0:	e7d3      	b.n	8023f5a <localtime_r+0x14a>
 8023fb2:	230b      	movs	r3, #11
 8023fb4:	6123      	str	r3, [r4, #16]
 8023fb6:	6963      	ldr	r3, [r4, #20]
 8023fb8:	1e5a      	subs	r2, r3, #1
 8023fba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8023fbe:	6162      	str	r2, [r4, #20]
 8023fc0:	079a      	lsls	r2, r3, #30
 8023fc2:	d105      	bne.n	8023fd0 <localtime_r+0x1c0>
 8023fc4:	2164      	movs	r1, #100	; 0x64
 8023fc6:	fb93 f2f1 	sdiv	r2, r3, r1
 8023fca:	fb01 3212 	mls	r2, r1, r2, r3
 8023fce:	b962      	cbnz	r2, 8023fea <localtime_r+0x1da>
 8023fd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023fd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8023fd8:	fb02 3311 	mls	r3, r2, r1, r3
 8023fdc:	fab3 f383 	clz	r3, r3
 8023fe0:	095b      	lsrs	r3, r3, #5
 8023fe2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8023fe6:	61e3      	str	r3, [r4, #28]
 8023fe8:	e7de      	b.n	8023fa8 <localtime_r+0x198>
 8023fea:	2301      	movs	r3, #1
 8023fec:	e7f9      	b.n	8023fe2 <localtime_r+0x1d2>
 8023fee:	bf00      	nop
 8023ff0:	08045740 	.word	0x08045740
 8023ff4:	2002f894 	.word	0x2002f894

08023ff8 <__retarget_lock_init_recursive>:
 8023ff8:	4770      	bx	lr

08023ffa <__retarget_lock_acquire>:
 8023ffa:	4770      	bx	lr

08023ffc <__retarget_lock_acquire_recursive>:
 8023ffc:	4770      	bx	lr

08023ffe <__retarget_lock_release>:
 8023ffe:	4770      	bx	lr

08024000 <__retarget_lock_release_recursive>:
 8024000:	4770      	bx	lr
 8024002:	Address 0x0000000008024002 is out of bounds.


08024004 <malloc>:
 8024004:	4b02      	ldr	r3, [pc, #8]	; (8024010 <malloc+0xc>)
 8024006:	4601      	mov	r1, r0
 8024008:	6818      	ldr	r0, [r3, #0]
 802400a:	f000 bb29 	b.w	8024660 <_malloc_r>
 802400e:	bf00      	nop
 8024010:	2000048c 	.word	0x2000048c

08024014 <free>:
 8024014:	4b02      	ldr	r3, [pc, #8]	; (8024020 <free+0xc>)
 8024016:	4601      	mov	r1, r0
 8024018:	6818      	ldr	r0, [r3, #0]
 802401a:	f000 bab5 	b.w	8024588 <_free_r>
 802401e:	bf00      	nop
 8024020:	2000048c 	.word	0x2000048c

08024024 <memcmp>:
 8024024:	b510      	push	{r4, lr}
 8024026:	3901      	subs	r1, #1
 8024028:	4402      	add	r2, r0
 802402a:	4290      	cmp	r0, r2
 802402c:	d101      	bne.n	8024032 <memcmp+0xe>
 802402e:	2000      	movs	r0, #0
 8024030:	e005      	b.n	802403e <memcmp+0x1a>
 8024032:	7803      	ldrb	r3, [r0, #0]
 8024034:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024038:	42a3      	cmp	r3, r4
 802403a:	d001      	beq.n	8024040 <memcmp+0x1c>
 802403c:	1b18      	subs	r0, r3, r4
 802403e:	bd10      	pop	{r4, pc}
 8024040:	3001      	adds	r0, #1
 8024042:	e7f2      	b.n	802402a <memcmp+0x6>

08024044 <memcpy>:
 8024044:	440a      	add	r2, r1
 8024046:	4291      	cmp	r1, r2
 8024048:	f100 33ff 	add.w	r3, r0, #4294967295
 802404c:	d100      	bne.n	8024050 <memcpy+0xc>
 802404e:	4770      	bx	lr
 8024050:	b510      	push	{r4, lr}
 8024052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024056:	f803 4f01 	strb.w	r4, [r3, #1]!
 802405a:	4291      	cmp	r1, r2
 802405c:	d1f9      	bne.n	8024052 <memcpy+0xe>
 802405e:	bd10      	pop	{r4, pc}

08024060 <memmove>:
 8024060:	4288      	cmp	r0, r1
 8024062:	b510      	push	{r4, lr}
 8024064:	eb01 0402 	add.w	r4, r1, r2
 8024068:	d902      	bls.n	8024070 <memmove+0x10>
 802406a:	4284      	cmp	r4, r0
 802406c:	4623      	mov	r3, r4
 802406e:	d807      	bhi.n	8024080 <memmove+0x20>
 8024070:	1e43      	subs	r3, r0, #1
 8024072:	42a1      	cmp	r1, r4
 8024074:	d008      	beq.n	8024088 <memmove+0x28>
 8024076:	f811 2b01 	ldrb.w	r2, [r1], #1
 802407a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802407e:	e7f8      	b.n	8024072 <memmove+0x12>
 8024080:	4402      	add	r2, r0
 8024082:	4601      	mov	r1, r0
 8024084:	428a      	cmp	r2, r1
 8024086:	d100      	bne.n	802408a <memmove+0x2a>
 8024088:	bd10      	pop	{r4, pc}
 802408a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802408e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024092:	e7f7      	b.n	8024084 <memmove+0x24>

08024094 <memset>:
 8024094:	4402      	add	r2, r0
 8024096:	4603      	mov	r3, r0
 8024098:	4293      	cmp	r3, r2
 802409a:	d100      	bne.n	802409e <memset+0xa>
 802409c:	4770      	bx	lr
 802409e:	f803 1b01 	strb.w	r1, [r3], #1
 80240a2:	e7f9      	b.n	8024098 <memset+0x4>

080240a4 <validate_structure>:
 80240a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80240a6:	6801      	ldr	r1, [r0, #0]
 80240a8:	293b      	cmp	r1, #59	; 0x3b
 80240aa:	4604      	mov	r4, r0
 80240ac:	d911      	bls.n	80240d2 <validate_structure+0x2e>
 80240ae:	223c      	movs	r2, #60	; 0x3c
 80240b0:	4668      	mov	r0, sp
 80240b2:	f002 fc23 	bl	80268fc <div>
 80240b6:	9a01      	ldr	r2, [sp, #4]
 80240b8:	6863      	ldr	r3, [r4, #4]
 80240ba:	9900      	ldr	r1, [sp, #0]
 80240bc:	2a00      	cmp	r2, #0
 80240be:	440b      	add	r3, r1
 80240c0:	6063      	str	r3, [r4, #4]
 80240c2:	bfbb      	ittet	lt
 80240c4:	323c      	addlt	r2, #60	; 0x3c
 80240c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80240ca:	6022      	strge	r2, [r4, #0]
 80240cc:	6022      	strlt	r2, [r4, #0]
 80240ce:	bfb8      	it	lt
 80240d0:	6063      	strlt	r3, [r4, #4]
 80240d2:	6861      	ldr	r1, [r4, #4]
 80240d4:	293b      	cmp	r1, #59	; 0x3b
 80240d6:	d911      	bls.n	80240fc <validate_structure+0x58>
 80240d8:	223c      	movs	r2, #60	; 0x3c
 80240da:	4668      	mov	r0, sp
 80240dc:	f002 fc0e 	bl	80268fc <div>
 80240e0:	9a01      	ldr	r2, [sp, #4]
 80240e2:	68a3      	ldr	r3, [r4, #8]
 80240e4:	9900      	ldr	r1, [sp, #0]
 80240e6:	2a00      	cmp	r2, #0
 80240e8:	440b      	add	r3, r1
 80240ea:	60a3      	str	r3, [r4, #8]
 80240ec:	bfbb      	ittet	lt
 80240ee:	323c      	addlt	r2, #60	; 0x3c
 80240f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80240f4:	6062      	strge	r2, [r4, #4]
 80240f6:	6062      	strlt	r2, [r4, #4]
 80240f8:	bfb8      	it	lt
 80240fa:	60a3      	strlt	r3, [r4, #8]
 80240fc:	68a1      	ldr	r1, [r4, #8]
 80240fe:	2917      	cmp	r1, #23
 8024100:	d911      	bls.n	8024126 <validate_structure+0x82>
 8024102:	2218      	movs	r2, #24
 8024104:	4668      	mov	r0, sp
 8024106:	f002 fbf9 	bl	80268fc <div>
 802410a:	9a01      	ldr	r2, [sp, #4]
 802410c:	68e3      	ldr	r3, [r4, #12]
 802410e:	9900      	ldr	r1, [sp, #0]
 8024110:	2a00      	cmp	r2, #0
 8024112:	440b      	add	r3, r1
 8024114:	60e3      	str	r3, [r4, #12]
 8024116:	bfbb      	ittet	lt
 8024118:	3218      	addlt	r2, #24
 802411a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802411e:	60a2      	strge	r2, [r4, #8]
 8024120:	60a2      	strlt	r2, [r4, #8]
 8024122:	bfb8      	it	lt
 8024124:	60e3      	strlt	r3, [r4, #12]
 8024126:	6921      	ldr	r1, [r4, #16]
 8024128:	290b      	cmp	r1, #11
 802412a:	d911      	bls.n	8024150 <validate_structure+0xac>
 802412c:	220c      	movs	r2, #12
 802412e:	4668      	mov	r0, sp
 8024130:	f002 fbe4 	bl	80268fc <div>
 8024134:	9a01      	ldr	r2, [sp, #4]
 8024136:	6963      	ldr	r3, [r4, #20]
 8024138:	9900      	ldr	r1, [sp, #0]
 802413a:	2a00      	cmp	r2, #0
 802413c:	440b      	add	r3, r1
 802413e:	6163      	str	r3, [r4, #20]
 8024140:	bfbb      	ittet	lt
 8024142:	320c      	addlt	r2, #12
 8024144:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8024148:	6122      	strge	r2, [r4, #16]
 802414a:	6122      	strlt	r2, [r4, #16]
 802414c:	bfb8      	it	lt
 802414e:	6163      	strlt	r3, [r4, #20]
 8024150:	6963      	ldr	r3, [r4, #20]
 8024152:	0798      	lsls	r0, r3, #30
 8024154:	d120      	bne.n	8024198 <validate_structure+0xf4>
 8024156:	2164      	movs	r1, #100	; 0x64
 8024158:	fb93 f2f1 	sdiv	r2, r3, r1
 802415c:	fb01 3212 	mls	r2, r1, r2, r3
 8024160:	b9e2      	cbnz	r2, 802419c <validate_structure+0xf8>
 8024162:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8024166:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802416a:	fb93 f1f2 	sdiv	r1, r3, r2
 802416e:	fb02 3311 	mls	r3, r2, r1, r3
 8024172:	2b00      	cmp	r3, #0
 8024174:	bf14      	ite	ne
 8024176:	231c      	movne	r3, #28
 8024178:	231d      	moveq	r3, #29
 802417a:	68e2      	ldr	r2, [r4, #12]
 802417c:	2a00      	cmp	r2, #0
 802417e:	dc0f      	bgt.n	80241a0 <validate_structure+0xfc>
 8024180:	4f33      	ldr	r7, [pc, #204]	; (8024250 <validate_structure+0x1ac>)
 8024182:	260b      	movs	r6, #11
 8024184:	2064      	movs	r0, #100	; 0x64
 8024186:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802418a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802418e:	f1bc 0f00 	cmp.w	ip, #0
 8024192:	dd31      	ble.n	80241f8 <validate_structure+0x154>
 8024194:	b003      	add	sp, #12
 8024196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024198:	231c      	movs	r3, #28
 802419a:	e7ee      	b.n	802417a <validate_structure+0xd6>
 802419c:	231d      	movs	r3, #29
 802419e:	e7ec      	b.n	802417a <validate_structure+0xd6>
 80241a0:	4e2b      	ldr	r6, [pc, #172]	; (8024250 <validate_structure+0x1ac>)
 80241a2:	2700      	movs	r7, #0
 80241a4:	2064      	movs	r0, #100	; 0x64
 80241a6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80241aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80241ae:	2a01      	cmp	r2, #1
 80241b0:	bf14      	ite	ne
 80241b2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80241b6:	469c      	moveq	ip, r3
 80241b8:	4561      	cmp	r1, ip
 80241ba:	ddeb      	ble.n	8024194 <validate_structure+0xf0>
 80241bc:	3201      	adds	r2, #1
 80241be:	eba1 010c 	sub.w	r1, r1, ip
 80241c2:	2a0c      	cmp	r2, #12
 80241c4:	60e1      	str	r1, [r4, #12]
 80241c6:	6122      	str	r2, [r4, #16]
 80241c8:	d1ef      	bne.n	80241aa <validate_structure+0x106>
 80241ca:	6963      	ldr	r3, [r4, #20]
 80241cc:	1c5a      	adds	r2, r3, #1
 80241ce:	0791      	lsls	r1, r2, #30
 80241d0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80241d4:	d137      	bne.n	8024246 <validate_structure+0x1a2>
 80241d6:	fb92 f1f0 	sdiv	r1, r2, r0
 80241da:	fb00 2211 	mls	r2, r0, r1, r2
 80241de:	2a00      	cmp	r2, #0
 80241e0:	d133      	bne.n	802424a <validate_structure+0x1a6>
 80241e2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80241e6:	fb93 f2f5 	sdiv	r2, r3, r5
 80241ea:	fb05 3312 	mls	r3, r5, r2, r3
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	bf14      	ite	ne
 80241f2:	231c      	movne	r3, #28
 80241f4:	231d      	moveq	r3, #29
 80241f6:	e7d8      	b.n	80241aa <validate_structure+0x106>
 80241f8:	6921      	ldr	r1, [r4, #16]
 80241fa:	3901      	subs	r1, #1
 80241fc:	6121      	str	r1, [r4, #16]
 80241fe:	3101      	adds	r1, #1
 8024200:	d114      	bne.n	802422c <validate_structure+0x188>
 8024202:	6963      	ldr	r3, [r4, #20]
 8024204:	1e5a      	subs	r2, r3, #1
 8024206:	0791      	lsls	r1, r2, #30
 8024208:	e9c4 6204 	strd	r6, r2, [r4, #16]
 802420c:	d117      	bne.n	802423e <validate_structure+0x19a>
 802420e:	fb92 f1f0 	sdiv	r1, r2, r0
 8024212:	fb00 2211 	mls	r2, r0, r1, r2
 8024216:	b9a2      	cbnz	r2, 8024242 <validate_structure+0x19e>
 8024218:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802421c:	fb93 f2f5 	sdiv	r2, r3, r5
 8024220:	fb05 3312 	mls	r3, r5, r2, r3
 8024224:	2b00      	cmp	r3, #0
 8024226:	bf14      	ite	ne
 8024228:	231c      	movne	r3, #28
 802422a:	231d      	moveq	r3, #29
 802422c:	6922      	ldr	r2, [r4, #16]
 802422e:	2a01      	cmp	r2, #1
 8024230:	bf14      	ite	ne
 8024232:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8024236:	461a      	moveq	r2, r3
 8024238:	4462      	add	r2, ip
 802423a:	60e2      	str	r2, [r4, #12]
 802423c:	e7a5      	b.n	802418a <validate_structure+0xe6>
 802423e:	231c      	movs	r3, #28
 8024240:	e7f4      	b.n	802422c <validate_structure+0x188>
 8024242:	231d      	movs	r3, #29
 8024244:	e7f2      	b.n	802422c <validate_structure+0x188>
 8024246:	231c      	movs	r3, #28
 8024248:	e7af      	b.n	80241aa <validate_structure+0x106>
 802424a:	231d      	movs	r3, #29
 802424c:	e7ad      	b.n	80241aa <validate_structure+0x106>
 802424e:	bf00      	nop
 8024250:	080456e0 	.word	0x080456e0

08024254 <mktime>:
 8024254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024258:	b085      	sub	sp, #20
 802425a:	4607      	mov	r7, r0
 802425c:	f003 fa7c 	bl	8027758 <__gettzinfo>
 8024260:	4681      	mov	r9, r0
 8024262:	4638      	mov	r0, r7
 8024264:	f7ff ff1e 	bl	80240a4 <validate_structure>
 8024268:	e9d7 4000 	ldrd	r4, r0, [r7]
 802426c:	233c      	movs	r3, #60	; 0x3c
 802426e:	fb03 4400 	mla	r4, r3, r0, r4
 8024272:	68b8      	ldr	r0, [r7, #8]
 8024274:	4abc      	ldr	r2, [pc, #752]	; (8024568 <mktime+0x314>)
 8024276:	697e      	ldr	r6, [r7, #20]
 8024278:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802427c:	fb03 4400 	mla	r4, r3, r0, r4
 8024280:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8024284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8024288:	3d01      	subs	r5, #1
 802428a:	2b01      	cmp	r3, #1
 802428c:	4415      	add	r5, r2
 802428e:	dd11      	ble.n	80242b4 <mktime+0x60>
 8024290:	07b1      	lsls	r1, r6, #30
 8024292:	d10f      	bne.n	80242b4 <mktime+0x60>
 8024294:	2264      	movs	r2, #100	; 0x64
 8024296:	fb96 f3f2 	sdiv	r3, r6, r2
 802429a:	fb02 6313 	mls	r3, r2, r3, r6
 802429e:	b943      	cbnz	r3, 80242b2 <mktime+0x5e>
 80242a0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80242a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80242a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80242ac:	fb02 3311 	mls	r3, r2, r1, r3
 80242b0:	b903      	cbnz	r3, 80242b4 <mktime+0x60>
 80242b2:	3501      	adds	r5, #1
 80242b4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80242b8:	3310      	adds	r3, #16
 80242ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80242be:	4293      	cmp	r3, r2
 80242c0:	61fd      	str	r5, [r7, #28]
 80242c2:	f200 815d 	bhi.w	8024580 <mktime+0x32c>
 80242c6:	2e46      	cmp	r6, #70	; 0x46
 80242c8:	dd71      	ble.n	80243ae <mktime+0x15a>
 80242ca:	2346      	movs	r3, #70	; 0x46
 80242cc:	f240 1c6d 	movw	ip, #365	; 0x16d
 80242d0:	2164      	movs	r1, #100	; 0x64
 80242d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80242d6:	079a      	lsls	r2, r3, #30
 80242d8:	d163      	bne.n	80243a2 <mktime+0x14e>
 80242da:	fb93 f2f1 	sdiv	r2, r3, r1
 80242de:	fb01 3212 	mls	r2, r1, r2, r3
 80242e2:	2a00      	cmp	r2, #0
 80242e4:	d160      	bne.n	80243a8 <mktime+0x154>
 80242e6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80242ea:	fb92 fef0 	sdiv	lr, r2, r0
 80242ee:	fb00 221e 	mls	r2, r0, lr, r2
 80242f2:	2a00      	cmp	r2, #0
 80242f4:	bf14      	ite	ne
 80242f6:	4662      	movne	r2, ip
 80242f8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80242fc:	3301      	adds	r3, #1
 80242fe:	429e      	cmp	r6, r3
 8024300:	4415      	add	r5, r2
 8024302:	d1e8      	bne.n	80242d6 <mktime+0x82>
 8024304:	4b99      	ldr	r3, [pc, #612]	; (802456c <mktime+0x318>)
 8024306:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802430a:	fbc5 4803 	smlal	r4, r8, r5, r3
 802430e:	f002 f817 	bl	8026340 <__tz_lock>
 8024312:	f002 f821 	bl	8026358 <_tzset_unlocked>
 8024316:	4b96      	ldr	r3, [pc, #600]	; (8024570 <mktime+0x31c>)
 8024318:	f8d3 b000 	ldr.w	fp, [r3]
 802431c:	f1bb 0f00 	cmp.w	fp, #0
 8024320:	d039      	beq.n	8024396 <mktime+0x142>
 8024322:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8024326:	6978      	ldr	r0, [r7, #20]
 8024328:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802432c:	f1bb 0f01 	cmp.w	fp, #1
 8024330:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024334:	46da      	mov	sl, fp
 8024336:	bfa8      	it	ge
 8024338:	f04f 0a01 	movge.w	sl, #1
 802433c:	4283      	cmp	r3, r0
 802433e:	d178      	bne.n	8024432 <mktime+0x1de>
 8024340:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8024344:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8024348:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 802434c:	1a5b      	subs	r3, r3, r1
 802434e:	9302      	str	r3, [sp, #8]
 8024350:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8024354:	9303      	str	r3, [sp, #12]
 8024356:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802435a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 802435e:	9301      	str	r3, [sp, #4]
 8024360:	ebb3 0c02 	subs.w	ip, r3, r2
 8024364:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8024368:	4564      	cmp	r4, ip
 802436a:	eb78 0300 	sbcs.w	r3, r8, r0
 802436e:	da66      	bge.n	802443e <mktime+0x1ea>
 8024370:	f8d9 3000 	ldr.w	r3, [r9]
 8024374:	2b00      	cmp	r3, #0
 8024376:	d06f      	beq.n	8024458 <mktime+0x204>
 8024378:	9b02      	ldr	r3, [sp, #8]
 802437a:	429c      	cmp	r4, r3
 802437c:	9b03      	ldr	r3, [sp, #12]
 802437e:	eb78 0303 	sbcs.w	r3, r8, r3
 8024382:	db03      	blt.n	802438c <mktime+0x138>
 8024384:	4564      	cmp	r4, ip
 8024386:	eb78 0300 	sbcs.w	r3, r8, r0
 802438a:	db6b      	blt.n	8024464 <mktime+0x210>
 802438c:	f1bb 0f00 	cmp.w	fp, #0
 8024390:	f04f 0b00 	mov.w	fp, #0
 8024394:	da6b      	bge.n	802446e <mktime+0x21a>
 8024396:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802439a:	190c      	adds	r4, r1, r4
 802439c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80243a0:	e0a9      	b.n	80244f6 <mktime+0x2a2>
 80243a2:	f240 126d 	movw	r2, #365	; 0x16d
 80243a6:	e7a9      	b.n	80242fc <mktime+0xa8>
 80243a8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80243ac:	e7a6      	b.n	80242fc <mktime+0xa8>
 80243ae:	d0a9      	beq.n	8024304 <mktime+0xb0>
 80243b0:	2345      	movs	r3, #69	; 0x45
 80243b2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80243b6:	2164      	movs	r1, #100	; 0x64
 80243b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80243bc:	e012      	b.n	80243e4 <mktime+0x190>
 80243be:	bb62      	cbnz	r2, 802441a <mktime+0x1c6>
 80243c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80243c4:	fb01 3212 	mls	r2, r1, r2, r3
 80243c8:	bb52      	cbnz	r2, 8024420 <mktime+0x1cc>
 80243ca:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80243ce:	fb92 fef0 	sdiv	lr, r2, r0
 80243d2:	fb00 221e 	mls	r2, r0, lr, r2
 80243d6:	2a00      	cmp	r2, #0
 80243d8:	bf14      	ite	ne
 80243da:	4662      	movne	r2, ip
 80243dc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80243e0:	1aad      	subs	r5, r5, r2
 80243e2:	3b01      	subs	r3, #1
 80243e4:	429e      	cmp	r6, r3
 80243e6:	f003 0203 	and.w	r2, r3, #3
 80243ea:	dbe8      	blt.n	80243be <mktime+0x16a>
 80243ec:	b9da      	cbnz	r2, 8024426 <mktime+0x1d2>
 80243ee:	2264      	movs	r2, #100	; 0x64
 80243f0:	fb96 f3f2 	sdiv	r3, r6, r2
 80243f4:	fb02 6313 	mls	r3, r2, r3, r6
 80243f8:	b9c3      	cbnz	r3, 802442c <mktime+0x1d8>
 80243fa:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80243fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024402:	fb93 f1f2 	sdiv	r1, r3, r2
 8024406:	fb02 3311 	mls	r3, r2, r1, r3
 802440a:	2b00      	cmp	r3, #0
 802440c:	f240 136d 	movw	r3, #365	; 0x16d
 8024410:	bf08      	it	eq
 8024412:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8024416:	1aed      	subs	r5, r5, r3
 8024418:	e774      	b.n	8024304 <mktime+0xb0>
 802441a:	f240 126d 	movw	r2, #365	; 0x16d
 802441e:	e7df      	b.n	80243e0 <mktime+0x18c>
 8024420:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024424:	e7dc      	b.n	80243e0 <mktime+0x18c>
 8024426:	f240 136d 	movw	r3, #365	; 0x16d
 802442a:	e7f4      	b.n	8024416 <mktime+0x1c2>
 802442c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8024430:	e7f1      	b.n	8024416 <mktime+0x1c2>
 8024432:	f001 fedb 	bl	80261ec <__tzcalc_limits>
 8024436:	2800      	cmp	r0, #0
 8024438:	d182      	bne.n	8024340 <mktime+0xec>
 802443a:	46d3      	mov	fp, sl
 802443c:	e050      	b.n	80244e0 <mktime+0x28c>
 802443e:	9b01      	ldr	r3, [sp, #4]
 8024440:	1a5b      	subs	r3, r3, r1
 8024442:	9301      	str	r3, [sp, #4]
 8024444:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8024448:	eb6e 0e03 	sbc.w	lr, lr, r3
 802444c:	9b01      	ldr	r3, [sp, #4]
 802444e:	429c      	cmp	r4, r3
 8024450:	eb78 030e 	sbcs.w	r3, r8, lr
 8024454:	dbf1      	blt.n	802443a <mktime+0x1e6>
 8024456:	e78b      	b.n	8024370 <mktime+0x11c>
 8024458:	9b02      	ldr	r3, [sp, #8]
 802445a:	429c      	cmp	r4, r3
 802445c:	9b03      	ldr	r3, [sp, #12]
 802445e:	eb78 0303 	sbcs.w	r3, r8, r3
 8024462:	db8f      	blt.n	8024384 <mktime+0x130>
 8024464:	f1bb 0f00 	cmp.w	fp, #0
 8024468:	db3e      	blt.n	80244e8 <mktime+0x294>
 802446a:	f04f 0b01 	mov.w	fp, #1
 802446e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8024472:	f1ba 0f01 	cmp.w	sl, #1
 8024476:	d133      	bne.n	80244e0 <mktime+0x28c>
 8024478:	f1bb 0f00 	cmp.w	fp, #0
 802447c:	d04e      	beq.n	802451c <mktime+0x2c8>
 802447e:	1a52      	subs	r2, r2, r1
 8024480:	683b      	ldr	r3, [r7, #0]
 8024482:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8024486:	4413      	add	r3, r2
 8024488:	1914      	adds	r4, r2, r4
 802448a:	603b      	str	r3, [r7, #0]
 802448c:	4638      	mov	r0, r7
 802448e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8024492:	f7ff fe07 	bl	80240a4 <validate_structure>
 8024496:	68fa      	ldr	r2, [r7, #12]
 8024498:	ebb2 020a 	subs.w	r2, r2, sl
 802449c:	d020      	beq.n	80244e0 <mktime+0x28c>
 802449e:	2a01      	cmp	r2, #1
 80244a0:	dc3e      	bgt.n	8024520 <mktime+0x2cc>
 80244a2:	1c90      	adds	r0, r2, #2
 80244a4:	bfd8      	it	le
 80244a6:	2201      	movle	r2, #1
 80244a8:	69fb      	ldr	r3, [r7, #28]
 80244aa:	18d3      	adds	r3, r2, r3
 80244ac:	4415      	add	r5, r2
 80244ae:	d540      	bpl.n	8024532 <mktime+0x2de>
 80244b0:	1e73      	subs	r3, r6, #1
 80244b2:	0799      	lsls	r1, r3, #30
 80244b4:	d137      	bne.n	8024526 <mktime+0x2d2>
 80244b6:	2264      	movs	r2, #100	; 0x64
 80244b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80244bc:	fb02 3311 	mls	r3, r2, r1, r3
 80244c0:	bba3      	cbnz	r3, 802452c <mktime+0x2d8>
 80244c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80244c6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80244ca:	fb96 f2f3 	sdiv	r2, r6, r3
 80244ce:	fb03 6612 	mls	r6, r3, r2, r6
 80244d2:	2e00      	cmp	r6, #0
 80244d4:	f240 136d 	movw	r3, #365	; 0x16d
 80244d8:	bf18      	it	ne
 80244da:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80244de:	61fb      	str	r3, [r7, #28]
 80244e0:	f1bb 0f01 	cmp.w	fp, #1
 80244e4:	f47f af57 	bne.w	8024396 <mktime+0x142>
 80244e8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80244ec:	190c      	adds	r4, r1, r4
 80244ee:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80244f2:	f04f 0b01 	mov.w	fp, #1
 80244f6:	f001 ff29 	bl	802634c <__tz_unlock>
 80244fa:	3504      	adds	r5, #4
 80244fc:	2307      	movs	r3, #7
 80244fe:	fb95 f3f3 	sdiv	r3, r5, r3
 8024502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8024506:	1aed      	subs	r5, r5, r3
 8024508:	bf48      	it	mi
 802450a:	3507      	addmi	r5, #7
 802450c:	f8c7 b020 	str.w	fp, [r7, #32]
 8024510:	61bd      	str	r5, [r7, #24]
 8024512:	4620      	mov	r0, r4
 8024514:	4641      	mov	r1, r8
 8024516:	b005      	add	sp, #20
 8024518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802451c:	1a8a      	subs	r2, r1, r2
 802451e:	e7af      	b.n	8024480 <mktime+0x22c>
 8024520:	f04f 32ff 	mov.w	r2, #4294967295
 8024524:	e7c0      	b.n	80244a8 <mktime+0x254>
 8024526:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802452a:	e7d8      	b.n	80244de <mktime+0x28a>
 802452c:	f240 136d 	movw	r3, #365	; 0x16d
 8024530:	e7d5      	b.n	80244de <mktime+0x28a>
 8024532:	07b2      	lsls	r2, r6, #30
 8024534:	d11e      	bne.n	8024574 <mktime+0x320>
 8024536:	2164      	movs	r1, #100	; 0x64
 8024538:	fb96 f2f1 	sdiv	r2, r6, r1
 802453c:	fb01 6212 	mls	r2, r1, r2, r6
 8024540:	b9da      	cbnz	r2, 802457a <mktime+0x326>
 8024542:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024546:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802454a:	fb96 f1f2 	sdiv	r1, r6, r2
 802454e:	fb02 6611 	mls	r6, r2, r1, r6
 8024552:	2e00      	cmp	r6, #0
 8024554:	f240 126d 	movw	r2, #365	; 0x16d
 8024558:	bf08      	it	eq
 802455a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802455e:	4293      	cmp	r3, r2
 8024560:	bfa8      	it	ge
 8024562:	1a9b      	subge	r3, r3, r2
 8024564:	e7bb      	b.n	80244de <mktime+0x28a>
 8024566:	bf00      	nop
 8024568:	08045710 	.word	0x08045710
 802456c:	00015180 	.word	0x00015180
 8024570:	2002f894 	.word	0x2002f894
 8024574:	f240 126d 	movw	r2, #365	; 0x16d
 8024578:	e7f1      	b.n	802455e <mktime+0x30a>
 802457a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802457e:	e7ee      	b.n	802455e <mktime+0x30a>
 8024580:	f04f 34ff 	mov.w	r4, #4294967295
 8024584:	46a0      	mov	r8, r4
 8024586:	e7c4      	b.n	8024512 <mktime+0x2be>

08024588 <_free_r>:
 8024588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802458a:	2900      	cmp	r1, #0
 802458c:	d044      	beq.n	8024618 <_free_r+0x90>
 802458e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024592:	9001      	str	r0, [sp, #4]
 8024594:	2b00      	cmp	r3, #0
 8024596:	f1a1 0404 	sub.w	r4, r1, #4
 802459a:	bfb8      	it	lt
 802459c:	18e4      	addlt	r4, r4, r3
 802459e:	f003 fa0b 	bl	80279b8 <__malloc_lock>
 80245a2:	4a1e      	ldr	r2, [pc, #120]	; (802461c <_free_r+0x94>)
 80245a4:	9801      	ldr	r0, [sp, #4]
 80245a6:	6813      	ldr	r3, [r2, #0]
 80245a8:	b933      	cbnz	r3, 80245b8 <_free_r+0x30>
 80245aa:	6063      	str	r3, [r4, #4]
 80245ac:	6014      	str	r4, [r2, #0]
 80245ae:	b003      	add	sp, #12
 80245b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80245b4:	f003 ba06 	b.w	80279c4 <__malloc_unlock>
 80245b8:	42a3      	cmp	r3, r4
 80245ba:	d908      	bls.n	80245ce <_free_r+0x46>
 80245bc:	6825      	ldr	r5, [r4, #0]
 80245be:	1961      	adds	r1, r4, r5
 80245c0:	428b      	cmp	r3, r1
 80245c2:	bf01      	itttt	eq
 80245c4:	6819      	ldreq	r1, [r3, #0]
 80245c6:	685b      	ldreq	r3, [r3, #4]
 80245c8:	1949      	addeq	r1, r1, r5
 80245ca:	6021      	streq	r1, [r4, #0]
 80245cc:	e7ed      	b.n	80245aa <_free_r+0x22>
 80245ce:	461a      	mov	r2, r3
 80245d0:	685b      	ldr	r3, [r3, #4]
 80245d2:	b10b      	cbz	r3, 80245d8 <_free_r+0x50>
 80245d4:	42a3      	cmp	r3, r4
 80245d6:	d9fa      	bls.n	80245ce <_free_r+0x46>
 80245d8:	6811      	ldr	r1, [r2, #0]
 80245da:	1855      	adds	r5, r2, r1
 80245dc:	42a5      	cmp	r5, r4
 80245de:	d10b      	bne.n	80245f8 <_free_r+0x70>
 80245e0:	6824      	ldr	r4, [r4, #0]
 80245e2:	4421      	add	r1, r4
 80245e4:	1854      	adds	r4, r2, r1
 80245e6:	42a3      	cmp	r3, r4
 80245e8:	6011      	str	r1, [r2, #0]
 80245ea:	d1e0      	bne.n	80245ae <_free_r+0x26>
 80245ec:	681c      	ldr	r4, [r3, #0]
 80245ee:	685b      	ldr	r3, [r3, #4]
 80245f0:	6053      	str	r3, [r2, #4]
 80245f2:	4421      	add	r1, r4
 80245f4:	6011      	str	r1, [r2, #0]
 80245f6:	e7da      	b.n	80245ae <_free_r+0x26>
 80245f8:	d902      	bls.n	8024600 <_free_r+0x78>
 80245fa:	230c      	movs	r3, #12
 80245fc:	6003      	str	r3, [r0, #0]
 80245fe:	e7d6      	b.n	80245ae <_free_r+0x26>
 8024600:	6825      	ldr	r5, [r4, #0]
 8024602:	1961      	adds	r1, r4, r5
 8024604:	428b      	cmp	r3, r1
 8024606:	bf04      	itt	eq
 8024608:	6819      	ldreq	r1, [r3, #0]
 802460a:	685b      	ldreq	r3, [r3, #4]
 802460c:	6063      	str	r3, [r4, #4]
 802460e:	bf04      	itt	eq
 8024610:	1949      	addeq	r1, r1, r5
 8024612:	6021      	streq	r1, [r4, #0]
 8024614:	6054      	str	r4, [r2, #4]
 8024616:	e7ca      	b.n	80245ae <_free_r+0x26>
 8024618:	b003      	add	sp, #12
 802461a:	bd30      	pop	{r4, r5, pc}
 802461c:	2002f86c 	.word	0x2002f86c

08024620 <sbrk_aligned>:
 8024620:	b570      	push	{r4, r5, r6, lr}
 8024622:	4e0e      	ldr	r6, [pc, #56]	; (802465c <sbrk_aligned+0x3c>)
 8024624:	460c      	mov	r4, r1
 8024626:	6831      	ldr	r1, [r6, #0]
 8024628:	4605      	mov	r5, r0
 802462a:	b911      	cbnz	r1, 8024632 <sbrk_aligned+0x12>
 802462c:	f000 fe7c 	bl	8025328 <_sbrk_r>
 8024630:	6030      	str	r0, [r6, #0]
 8024632:	4621      	mov	r1, r4
 8024634:	4628      	mov	r0, r5
 8024636:	f000 fe77 	bl	8025328 <_sbrk_r>
 802463a:	1c43      	adds	r3, r0, #1
 802463c:	d00a      	beq.n	8024654 <sbrk_aligned+0x34>
 802463e:	1cc4      	adds	r4, r0, #3
 8024640:	f024 0403 	bic.w	r4, r4, #3
 8024644:	42a0      	cmp	r0, r4
 8024646:	d007      	beq.n	8024658 <sbrk_aligned+0x38>
 8024648:	1a21      	subs	r1, r4, r0
 802464a:	4628      	mov	r0, r5
 802464c:	f000 fe6c 	bl	8025328 <_sbrk_r>
 8024650:	3001      	adds	r0, #1
 8024652:	d101      	bne.n	8024658 <sbrk_aligned+0x38>
 8024654:	f04f 34ff 	mov.w	r4, #4294967295
 8024658:	4620      	mov	r0, r4
 802465a:	bd70      	pop	{r4, r5, r6, pc}
 802465c:	2002f870 	.word	0x2002f870

08024660 <_malloc_r>:
 8024660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024664:	1ccd      	adds	r5, r1, #3
 8024666:	f025 0503 	bic.w	r5, r5, #3
 802466a:	3508      	adds	r5, #8
 802466c:	2d0c      	cmp	r5, #12
 802466e:	bf38      	it	cc
 8024670:	250c      	movcc	r5, #12
 8024672:	2d00      	cmp	r5, #0
 8024674:	4607      	mov	r7, r0
 8024676:	db01      	blt.n	802467c <_malloc_r+0x1c>
 8024678:	42a9      	cmp	r1, r5
 802467a:	d905      	bls.n	8024688 <_malloc_r+0x28>
 802467c:	230c      	movs	r3, #12
 802467e:	603b      	str	r3, [r7, #0]
 8024680:	2600      	movs	r6, #0
 8024682:	4630      	mov	r0, r6
 8024684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024688:	4e2e      	ldr	r6, [pc, #184]	; (8024744 <_malloc_r+0xe4>)
 802468a:	f003 f995 	bl	80279b8 <__malloc_lock>
 802468e:	6833      	ldr	r3, [r6, #0]
 8024690:	461c      	mov	r4, r3
 8024692:	bb34      	cbnz	r4, 80246e2 <_malloc_r+0x82>
 8024694:	4629      	mov	r1, r5
 8024696:	4638      	mov	r0, r7
 8024698:	f7ff ffc2 	bl	8024620 <sbrk_aligned>
 802469c:	1c43      	adds	r3, r0, #1
 802469e:	4604      	mov	r4, r0
 80246a0:	d14d      	bne.n	802473e <_malloc_r+0xde>
 80246a2:	6834      	ldr	r4, [r6, #0]
 80246a4:	4626      	mov	r6, r4
 80246a6:	2e00      	cmp	r6, #0
 80246a8:	d140      	bne.n	802472c <_malloc_r+0xcc>
 80246aa:	6823      	ldr	r3, [r4, #0]
 80246ac:	4631      	mov	r1, r6
 80246ae:	4638      	mov	r0, r7
 80246b0:	eb04 0803 	add.w	r8, r4, r3
 80246b4:	f000 fe38 	bl	8025328 <_sbrk_r>
 80246b8:	4580      	cmp	r8, r0
 80246ba:	d13a      	bne.n	8024732 <_malloc_r+0xd2>
 80246bc:	6821      	ldr	r1, [r4, #0]
 80246be:	3503      	adds	r5, #3
 80246c0:	1a6d      	subs	r5, r5, r1
 80246c2:	f025 0503 	bic.w	r5, r5, #3
 80246c6:	3508      	adds	r5, #8
 80246c8:	2d0c      	cmp	r5, #12
 80246ca:	bf38      	it	cc
 80246cc:	250c      	movcc	r5, #12
 80246ce:	4629      	mov	r1, r5
 80246d0:	4638      	mov	r0, r7
 80246d2:	f7ff ffa5 	bl	8024620 <sbrk_aligned>
 80246d6:	3001      	adds	r0, #1
 80246d8:	d02b      	beq.n	8024732 <_malloc_r+0xd2>
 80246da:	6823      	ldr	r3, [r4, #0]
 80246dc:	442b      	add	r3, r5
 80246de:	6023      	str	r3, [r4, #0]
 80246e0:	e00e      	b.n	8024700 <_malloc_r+0xa0>
 80246e2:	6822      	ldr	r2, [r4, #0]
 80246e4:	1b52      	subs	r2, r2, r5
 80246e6:	d41e      	bmi.n	8024726 <_malloc_r+0xc6>
 80246e8:	2a0b      	cmp	r2, #11
 80246ea:	d916      	bls.n	802471a <_malloc_r+0xba>
 80246ec:	1961      	adds	r1, r4, r5
 80246ee:	42a3      	cmp	r3, r4
 80246f0:	6025      	str	r5, [r4, #0]
 80246f2:	bf18      	it	ne
 80246f4:	6059      	strne	r1, [r3, #4]
 80246f6:	6863      	ldr	r3, [r4, #4]
 80246f8:	bf08      	it	eq
 80246fa:	6031      	streq	r1, [r6, #0]
 80246fc:	5162      	str	r2, [r4, r5]
 80246fe:	604b      	str	r3, [r1, #4]
 8024700:	4638      	mov	r0, r7
 8024702:	f104 060b 	add.w	r6, r4, #11
 8024706:	f003 f95d 	bl	80279c4 <__malloc_unlock>
 802470a:	f026 0607 	bic.w	r6, r6, #7
 802470e:	1d23      	adds	r3, r4, #4
 8024710:	1af2      	subs	r2, r6, r3
 8024712:	d0b6      	beq.n	8024682 <_malloc_r+0x22>
 8024714:	1b9b      	subs	r3, r3, r6
 8024716:	50a3      	str	r3, [r4, r2]
 8024718:	e7b3      	b.n	8024682 <_malloc_r+0x22>
 802471a:	6862      	ldr	r2, [r4, #4]
 802471c:	42a3      	cmp	r3, r4
 802471e:	bf0c      	ite	eq
 8024720:	6032      	streq	r2, [r6, #0]
 8024722:	605a      	strne	r2, [r3, #4]
 8024724:	e7ec      	b.n	8024700 <_malloc_r+0xa0>
 8024726:	4623      	mov	r3, r4
 8024728:	6864      	ldr	r4, [r4, #4]
 802472a:	e7b2      	b.n	8024692 <_malloc_r+0x32>
 802472c:	4634      	mov	r4, r6
 802472e:	6876      	ldr	r6, [r6, #4]
 8024730:	e7b9      	b.n	80246a6 <_malloc_r+0x46>
 8024732:	230c      	movs	r3, #12
 8024734:	603b      	str	r3, [r7, #0]
 8024736:	4638      	mov	r0, r7
 8024738:	f003 f944 	bl	80279c4 <__malloc_unlock>
 802473c:	e7a1      	b.n	8024682 <_malloc_r+0x22>
 802473e:	6025      	str	r5, [r4, #0]
 8024740:	e7de      	b.n	8024700 <_malloc_r+0xa0>
 8024742:	bf00      	nop
 8024744:	2002f86c 	.word	0x2002f86c

08024748 <__cvt>:
 8024748:	b5f0      	push	{r4, r5, r6, r7, lr}
 802474a:	ed2d 8b02 	vpush	{d8}
 802474e:	eeb0 8b40 	vmov.f64	d8, d0
 8024752:	b085      	sub	sp, #20
 8024754:	4617      	mov	r7, r2
 8024756:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024758:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802475a:	ee18 2a90 	vmov	r2, s17
 802475e:	f025 0520 	bic.w	r5, r5, #32
 8024762:	2a00      	cmp	r2, #0
 8024764:	bfb6      	itet	lt
 8024766:	222d      	movlt	r2, #45	; 0x2d
 8024768:	2200      	movge	r2, #0
 802476a:	eeb1 8b40 	vneglt.f64	d8, d0
 802476e:	2d46      	cmp	r5, #70	; 0x46
 8024770:	460c      	mov	r4, r1
 8024772:	701a      	strb	r2, [r3, #0]
 8024774:	d004      	beq.n	8024780 <__cvt+0x38>
 8024776:	2d45      	cmp	r5, #69	; 0x45
 8024778:	d100      	bne.n	802477c <__cvt+0x34>
 802477a:	3401      	adds	r4, #1
 802477c:	2102      	movs	r1, #2
 802477e:	e000      	b.n	8024782 <__cvt+0x3a>
 8024780:	2103      	movs	r1, #3
 8024782:	ab03      	add	r3, sp, #12
 8024784:	9301      	str	r3, [sp, #4]
 8024786:	ab02      	add	r3, sp, #8
 8024788:	9300      	str	r3, [sp, #0]
 802478a:	4622      	mov	r2, r4
 802478c:	4633      	mov	r3, r6
 802478e:	eeb0 0b48 	vmov.f64	d0, d8
 8024792:	f002 f955 	bl	8026a40 <_dtoa_r>
 8024796:	2d47      	cmp	r5, #71	; 0x47
 8024798:	d101      	bne.n	802479e <__cvt+0x56>
 802479a:	07fb      	lsls	r3, r7, #31
 802479c:	d51a      	bpl.n	80247d4 <__cvt+0x8c>
 802479e:	2d46      	cmp	r5, #70	; 0x46
 80247a0:	eb00 0204 	add.w	r2, r0, r4
 80247a4:	d10c      	bne.n	80247c0 <__cvt+0x78>
 80247a6:	7803      	ldrb	r3, [r0, #0]
 80247a8:	2b30      	cmp	r3, #48	; 0x30
 80247aa:	d107      	bne.n	80247bc <__cvt+0x74>
 80247ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80247b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247b4:	bf1c      	itt	ne
 80247b6:	f1c4 0401 	rsbne	r4, r4, #1
 80247ba:	6034      	strne	r4, [r6, #0]
 80247bc:	6833      	ldr	r3, [r6, #0]
 80247be:	441a      	add	r2, r3
 80247c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80247c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247c8:	bf08      	it	eq
 80247ca:	9203      	streq	r2, [sp, #12]
 80247cc:	2130      	movs	r1, #48	; 0x30
 80247ce:	9b03      	ldr	r3, [sp, #12]
 80247d0:	4293      	cmp	r3, r2
 80247d2:	d307      	bcc.n	80247e4 <__cvt+0x9c>
 80247d4:	9b03      	ldr	r3, [sp, #12]
 80247d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80247d8:	1a1b      	subs	r3, r3, r0
 80247da:	6013      	str	r3, [r2, #0]
 80247dc:	b005      	add	sp, #20
 80247de:	ecbd 8b02 	vpop	{d8}
 80247e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247e4:	1c5c      	adds	r4, r3, #1
 80247e6:	9403      	str	r4, [sp, #12]
 80247e8:	7019      	strb	r1, [r3, #0]
 80247ea:	e7f0      	b.n	80247ce <__cvt+0x86>

080247ec <__exponent>:
 80247ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80247ee:	4603      	mov	r3, r0
 80247f0:	2900      	cmp	r1, #0
 80247f2:	bfb8      	it	lt
 80247f4:	4249      	neglt	r1, r1
 80247f6:	f803 2b02 	strb.w	r2, [r3], #2
 80247fa:	bfb4      	ite	lt
 80247fc:	222d      	movlt	r2, #45	; 0x2d
 80247fe:	222b      	movge	r2, #43	; 0x2b
 8024800:	2909      	cmp	r1, #9
 8024802:	7042      	strb	r2, [r0, #1]
 8024804:	dd2a      	ble.n	802485c <__exponent+0x70>
 8024806:	f10d 0407 	add.w	r4, sp, #7
 802480a:	46a4      	mov	ip, r4
 802480c:	270a      	movs	r7, #10
 802480e:	46a6      	mov	lr, r4
 8024810:	460a      	mov	r2, r1
 8024812:	fb91 f6f7 	sdiv	r6, r1, r7
 8024816:	fb07 1516 	mls	r5, r7, r6, r1
 802481a:	3530      	adds	r5, #48	; 0x30
 802481c:	2a63      	cmp	r2, #99	; 0x63
 802481e:	f104 34ff 	add.w	r4, r4, #4294967295
 8024822:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024826:	4631      	mov	r1, r6
 8024828:	dcf1      	bgt.n	802480e <__exponent+0x22>
 802482a:	3130      	adds	r1, #48	; 0x30
 802482c:	f1ae 0502 	sub.w	r5, lr, #2
 8024830:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024834:	1c44      	adds	r4, r0, #1
 8024836:	4629      	mov	r1, r5
 8024838:	4561      	cmp	r1, ip
 802483a:	d30a      	bcc.n	8024852 <__exponent+0x66>
 802483c:	f10d 0209 	add.w	r2, sp, #9
 8024840:	eba2 020e 	sub.w	r2, r2, lr
 8024844:	4565      	cmp	r5, ip
 8024846:	bf88      	it	hi
 8024848:	2200      	movhi	r2, #0
 802484a:	4413      	add	r3, r2
 802484c:	1a18      	subs	r0, r3, r0
 802484e:	b003      	add	sp, #12
 8024850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024856:	f804 2f01 	strb.w	r2, [r4, #1]!
 802485a:	e7ed      	b.n	8024838 <__exponent+0x4c>
 802485c:	2330      	movs	r3, #48	; 0x30
 802485e:	3130      	adds	r1, #48	; 0x30
 8024860:	7083      	strb	r3, [r0, #2]
 8024862:	70c1      	strb	r1, [r0, #3]
 8024864:	1d03      	adds	r3, r0, #4
 8024866:	e7f1      	b.n	802484c <__exponent+0x60>

08024868 <_printf_float>:
 8024868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802486c:	b08b      	sub	sp, #44	; 0x2c
 802486e:	460c      	mov	r4, r1
 8024870:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8024874:	4616      	mov	r6, r2
 8024876:	461f      	mov	r7, r3
 8024878:	4605      	mov	r5, r0
 802487a:	f003 f821 	bl	80278c0 <_localeconv_r>
 802487e:	f8d0 b000 	ldr.w	fp, [r0]
 8024882:	4658      	mov	r0, fp
 8024884:	f7db fce6 	bl	8000254 <strlen>
 8024888:	2300      	movs	r3, #0
 802488a:	9308      	str	r3, [sp, #32]
 802488c:	f8d8 3000 	ldr.w	r3, [r8]
 8024890:	f894 9018 	ldrb.w	r9, [r4, #24]
 8024894:	6822      	ldr	r2, [r4, #0]
 8024896:	3307      	adds	r3, #7
 8024898:	f023 0307 	bic.w	r3, r3, #7
 802489c:	f103 0108 	add.w	r1, r3, #8
 80248a0:	f8c8 1000 	str.w	r1, [r8]
 80248a4:	4682      	mov	sl, r0
 80248a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80248aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80248ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024b10 <_printf_float+0x2a8>
 80248b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80248b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80248ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80248be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248c2:	dd24      	ble.n	802490e <_printf_float+0xa6>
 80248c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80248c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248cc:	d502      	bpl.n	80248d4 <_printf_float+0x6c>
 80248ce:	232d      	movs	r3, #45	; 0x2d
 80248d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80248d4:	4b90      	ldr	r3, [pc, #576]	; (8024b18 <_printf_float+0x2b0>)
 80248d6:	4891      	ldr	r0, [pc, #580]	; (8024b1c <_printf_float+0x2b4>)
 80248d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80248dc:	bf94      	ite	ls
 80248de:	4698      	movls	r8, r3
 80248e0:	4680      	movhi	r8, r0
 80248e2:	2303      	movs	r3, #3
 80248e4:	6123      	str	r3, [r4, #16]
 80248e6:	f022 0204 	bic.w	r2, r2, #4
 80248ea:	2300      	movs	r3, #0
 80248ec:	6022      	str	r2, [r4, #0]
 80248ee:	9304      	str	r3, [sp, #16]
 80248f0:	9700      	str	r7, [sp, #0]
 80248f2:	4633      	mov	r3, r6
 80248f4:	aa09      	add	r2, sp, #36	; 0x24
 80248f6:	4621      	mov	r1, r4
 80248f8:	4628      	mov	r0, r5
 80248fa:	f000 f9d3 	bl	8024ca4 <_printf_common>
 80248fe:	3001      	adds	r0, #1
 8024900:	f040 808a 	bne.w	8024a18 <_printf_float+0x1b0>
 8024904:	f04f 30ff 	mov.w	r0, #4294967295
 8024908:	b00b      	add	sp, #44	; 0x2c
 802490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802490e:	eeb4 0b40 	vcmp.f64	d0, d0
 8024912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024916:	d709      	bvc.n	802492c <_printf_float+0xc4>
 8024918:	ee10 3a90 	vmov	r3, s1
 802491c:	2b00      	cmp	r3, #0
 802491e:	bfbc      	itt	lt
 8024920:	232d      	movlt	r3, #45	; 0x2d
 8024922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024926:	487e      	ldr	r0, [pc, #504]	; (8024b20 <_printf_float+0x2b8>)
 8024928:	4b7e      	ldr	r3, [pc, #504]	; (8024b24 <_printf_float+0x2bc>)
 802492a:	e7d5      	b.n	80248d8 <_printf_float+0x70>
 802492c:	6863      	ldr	r3, [r4, #4]
 802492e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8024932:	9104      	str	r1, [sp, #16]
 8024934:	1c59      	adds	r1, r3, #1
 8024936:	d13c      	bne.n	80249b2 <_printf_float+0x14a>
 8024938:	2306      	movs	r3, #6
 802493a:	6063      	str	r3, [r4, #4]
 802493c:	2300      	movs	r3, #0
 802493e:	9303      	str	r3, [sp, #12]
 8024940:	ab08      	add	r3, sp, #32
 8024942:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802494a:	ab07      	add	r3, sp, #28
 802494c:	6861      	ldr	r1, [r4, #4]
 802494e:	9300      	str	r3, [sp, #0]
 8024950:	6022      	str	r2, [r4, #0]
 8024952:	f10d 031b 	add.w	r3, sp, #27
 8024956:	4628      	mov	r0, r5
 8024958:	f7ff fef6 	bl	8024748 <__cvt>
 802495c:	9b04      	ldr	r3, [sp, #16]
 802495e:	9907      	ldr	r1, [sp, #28]
 8024960:	2b47      	cmp	r3, #71	; 0x47
 8024962:	4680      	mov	r8, r0
 8024964:	d108      	bne.n	8024978 <_printf_float+0x110>
 8024966:	1cc8      	adds	r0, r1, #3
 8024968:	db02      	blt.n	8024970 <_printf_float+0x108>
 802496a:	6863      	ldr	r3, [r4, #4]
 802496c:	4299      	cmp	r1, r3
 802496e:	dd41      	ble.n	80249f4 <_printf_float+0x18c>
 8024970:	f1a9 0902 	sub.w	r9, r9, #2
 8024974:	fa5f f989 	uxtb.w	r9, r9
 8024978:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802497c:	d820      	bhi.n	80249c0 <_printf_float+0x158>
 802497e:	3901      	subs	r1, #1
 8024980:	464a      	mov	r2, r9
 8024982:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024986:	9107      	str	r1, [sp, #28]
 8024988:	f7ff ff30 	bl	80247ec <__exponent>
 802498c:	9a08      	ldr	r2, [sp, #32]
 802498e:	9004      	str	r0, [sp, #16]
 8024990:	1813      	adds	r3, r2, r0
 8024992:	2a01      	cmp	r2, #1
 8024994:	6123      	str	r3, [r4, #16]
 8024996:	dc02      	bgt.n	802499e <_printf_float+0x136>
 8024998:	6822      	ldr	r2, [r4, #0]
 802499a:	07d2      	lsls	r2, r2, #31
 802499c:	d501      	bpl.n	80249a2 <_printf_float+0x13a>
 802499e:	3301      	adds	r3, #1
 80249a0:	6123      	str	r3, [r4, #16]
 80249a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	d0a2      	beq.n	80248f0 <_printf_float+0x88>
 80249aa:	232d      	movs	r3, #45	; 0x2d
 80249ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80249b0:	e79e      	b.n	80248f0 <_printf_float+0x88>
 80249b2:	9904      	ldr	r1, [sp, #16]
 80249b4:	2947      	cmp	r1, #71	; 0x47
 80249b6:	d1c1      	bne.n	802493c <_printf_float+0xd4>
 80249b8:	2b00      	cmp	r3, #0
 80249ba:	d1bf      	bne.n	802493c <_printf_float+0xd4>
 80249bc:	2301      	movs	r3, #1
 80249be:	e7bc      	b.n	802493a <_printf_float+0xd2>
 80249c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80249c4:	d118      	bne.n	80249f8 <_printf_float+0x190>
 80249c6:	2900      	cmp	r1, #0
 80249c8:	6863      	ldr	r3, [r4, #4]
 80249ca:	dd0b      	ble.n	80249e4 <_printf_float+0x17c>
 80249cc:	6121      	str	r1, [r4, #16]
 80249ce:	b913      	cbnz	r3, 80249d6 <_printf_float+0x16e>
 80249d0:	6822      	ldr	r2, [r4, #0]
 80249d2:	07d0      	lsls	r0, r2, #31
 80249d4:	d502      	bpl.n	80249dc <_printf_float+0x174>
 80249d6:	3301      	adds	r3, #1
 80249d8:	440b      	add	r3, r1
 80249da:	6123      	str	r3, [r4, #16]
 80249dc:	2300      	movs	r3, #0
 80249de:	65a1      	str	r1, [r4, #88]	; 0x58
 80249e0:	9304      	str	r3, [sp, #16]
 80249e2:	e7de      	b.n	80249a2 <_printf_float+0x13a>
 80249e4:	b913      	cbnz	r3, 80249ec <_printf_float+0x184>
 80249e6:	6822      	ldr	r2, [r4, #0]
 80249e8:	07d2      	lsls	r2, r2, #31
 80249ea:	d501      	bpl.n	80249f0 <_printf_float+0x188>
 80249ec:	3302      	adds	r3, #2
 80249ee:	e7f4      	b.n	80249da <_printf_float+0x172>
 80249f0:	2301      	movs	r3, #1
 80249f2:	e7f2      	b.n	80249da <_printf_float+0x172>
 80249f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80249f8:	9b08      	ldr	r3, [sp, #32]
 80249fa:	4299      	cmp	r1, r3
 80249fc:	db05      	blt.n	8024a0a <_printf_float+0x1a2>
 80249fe:	6823      	ldr	r3, [r4, #0]
 8024a00:	6121      	str	r1, [r4, #16]
 8024a02:	07d8      	lsls	r0, r3, #31
 8024a04:	d5ea      	bpl.n	80249dc <_printf_float+0x174>
 8024a06:	1c4b      	adds	r3, r1, #1
 8024a08:	e7e7      	b.n	80249da <_printf_float+0x172>
 8024a0a:	2900      	cmp	r1, #0
 8024a0c:	bfd4      	ite	le
 8024a0e:	f1c1 0202 	rsble	r2, r1, #2
 8024a12:	2201      	movgt	r2, #1
 8024a14:	4413      	add	r3, r2
 8024a16:	e7e0      	b.n	80249da <_printf_float+0x172>
 8024a18:	6823      	ldr	r3, [r4, #0]
 8024a1a:	055a      	lsls	r2, r3, #21
 8024a1c:	d407      	bmi.n	8024a2e <_printf_float+0x1c6>
 8024a1e:	6923      	ldr	r3, [r4, #16]
 8024a20:	4642      	mov	r2, r8
 8024a22:	4631      	mov	r1, r6
 8024a24:	4628      	mov	r0, r5
 8024a26:	47b8      	blx	r7
 8024a28:	3001      	adds	r0, #1
 8024a2a:	d12a      	bne.n	8024a82 <_printf_float+0x21a>
 8024a2c:	e76a      	b.n	8024904 <_printf_float+0x9c>
 8024a2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024a32:	f240 80e2 	bls.w	8024bfa <_printf_float+0x392>
 8024a36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024a3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a42:	d133      	bne.n	8024aac <_printf_float+0x244>
 8024a44:	4a38      	ldr	r2, [pc, #224]	; (8024b28 <_printf_float+0x2c0>)
 8024a46:	2301      	movs	r3, #1
 8024a48:	4631      	mov	r1, r6
 8024a4a:	4628      	mov	r0, r5
 8024a4c:	47b8      	blx	r7
 8024a4e:	3001      	adds	r0, #1
 8024a50:	f43f af58 	beq.w	8024904 <_printf_float+0x9c>
 8024a54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024a58:	429a      	cmp	r2, r3
 8024a5a:	db02      	blt.n	8024a62 <_printf_float+0x1fa>
 8024a5c:	6823      	ldr	r3, [r4, #0]
 8024a5e:	07d8      	lsls	r0, r3, #31
 8024a60:	d50f      	bpl.n	8024a82 <_printf_float+0x21a>
 8024a62:	4653      	mov	r3, sl
 8024a64:	465a      	mov	r2, fp
 8024a66:	4631      	mov	r1, r6
 8024a68:	4628      	mov	r0, r5
 8024a6a:	47b8      	blx	r7
 8024a6c:	3001      	adds	r0, #1
 8024a6e:	f43f af49 	beq.w	8024904 <_printf_float+0x9c>
 8024a72:	f04f 0800 	mov.w	r8, #0
 8024a76:	f104 091a 	add.w	r9, r4, #26
 8024a7a:	9b08      	ldr	r3, [sp, #32]
 8024a7c:	3b01      	subs	r3, #1
 8024a7e:	4543      	cmp	r3, r8
 8024a80:	dc09      	bgt.n	8024a96 <_printf_float+0x22e>
 8024a82:	6823      	ldr	r3, [r4, #0]
 8024a84:	079b      	lsls	r3, r3, #30
 8024a86:	f100 8108 	bmi.w	8024c9a <_printf_float+0x432>
 8024a8a:	68e0      	ldr	r0, [r4, #12]
 8024a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a8e:	4298      	cmp	r0, r3
 8024a90:	bfb8      	it	lt
 8024a92:	4618      	movlt	r0, r3
 8024a94:	e738      	b.n	8024908 <_printf_float+0xa0>
 8024a96:	2301      	movs	r3, #1
 8024a98:	464a      	mov	r2, r9
 8024a9a:	4631      	mov	r1, r6
 8024a9c:	4628      	mov	r0, r5
 8024a9e:	47b8      	blx	r7
 8024aa0:	3001      	adds	r0, #1
 8024aa2:	f43f af2f 	beq.w	8024904 <_printf_float+0x9c>
 8024aa6:	f108 0801 	add.w	r8, r8, #1
 8024aaa:	e7e6      	b.n	8024a7a <_printf_float+0x212>
 8024aac:	9b07      	ldr	r3, [sp, #28]
 8024aae:	2b00      	cmp	r3, #0
 8024ab0:	dc3c      	bgt.n	8024b2c <_printf_float+0x2c4>
 8024ab2:	4a1d      	ldr	r2, [pc, #116]	; (8024b28 <_printf_float+0x2c0>)
 8024ab4:	2301      	movs	r3, #1
 8024ab6:	4631      	mov	r1, r6
 8024ab8:	4628      	mov	r0, r5
 8024aba:	47b8      	blx	r7
 8024abc:	3001      	adds	r0, #1
 8024abe:	f43f af21 	beq.w	8024904 <_printf_float+0x9c>
 8024ac2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024ac6:	4313      	orrs	r3, r2
 8024ac8:	d102      	bne.n	8024ad0 <_printf_float+0x268>
 8024aca:	6823      	ldr	r3, [r4, #0]
 8024acc:	07d9      	lsls	r1, r3, #31
 8024ace:	d5d8      	bpl.n	8024a82 <_printf_float+0x21a>
 8024ad0:	4653      	mov	r3, sl
 8024ad2:	465a      	mov	r2, fp
 8024ad4:	4631      	mov	r1, r6
 8024ad6:	4628      	mov	r0, r5
 8024ad8:	47b8      	blx	r7
 8024ada:	3001      	adds	r0, #1
 8024adc:	f43f af12 	beq.w	8024904 <_printf_float+0x9c>
 8024ae0:	f04f 0900 	mov.w	r9, #0
 8024ae4:	f104 0a1a 	add.w	sl, r4, #26
 8024ae8:	9b07      	ldr	r3, [sp, #28]
 8024aea:	425b      	negs	r3, r3
 8024aec:	454b      	cmp	r3, r9
 8024aee:	dc01      	bgt.n	8024af4 <_printf_float+0x28c>
 8024af0:	9b08      	ldr	r3, [sp, #32]
 8024af2:	e795      	b.n	8024a20 <_printf_float+0x1b8>
 8024af4:	2301      	movs	r3, #1
 8024af6:	4652      	mov	r2, sl
 8024af8:	4631      	mov	r1, r6
 8024afa:	4628      	mov	r0, r5
 8024afc:	47b8      	blx	r7
 8024afe:	3001      	adds	r0, #1
 8024b00:	f43f af00 	beq.w	8024904 <_printf_float+0x9c>
 8024b04:	f109 0901 	add.w	r9, r9, #1
 8024b08:	e7ee      	b.n	8024ae8 <_printf_float+0x280>
 8024b0a:	bf00      	nop
 8024b0c:	f3af 8000 	nop.w
 8024b10:	ffffffff 	.word	0xffffffff
 8024b14:	7fefffff 	.word	0x7fefffff
 8024b18:	080457a0 	.word	0x080457a0
 8024b1c:	080457a4 	.word	0x080457a4
 8024b20:	080457ac 	.word	0x080457ac
 8024b24:	080457a8 	.word	0x080457a8
 8024b28:	08045dc9 	.word	0x08045dc9
 8024b2c:	9a08      	ldr	r2, [sp, #32]
 8024b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024b30:	429a      	cmp	r2, r3
 8024b32:	bfa8      	it	ge
 8024b34:	461a      	movge	r2, r3
 8024b36:	2a00      	cmp	r2, #0
 8024b38:	4691      	mov	r9, r2
 8024b3a:	dc38      	bgt.n	8024bae <_printf_float+0x346>
 8024b3c:	2300      	movs	r3, #0
 8024b3e:	9305      	str	r3, [sp, #20]
 8024b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024b44:	f104 021a 	add.w	r2, r4, #26
 8024b48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024b4a:	9905      	ldr	r1, [sp, #20]
 8024b4c:	9304      	str	r3, [sp, #16]
 8024b4e:	eba3 0309 	sub.w	r3, r3, r9
 8024b52:	428b      	cmp	r3, r1
 8024b54:	dc33      	bgt.n	8024bbe <_printf_float+0x356>
 8024b56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024b5a:	429a      	cmp	r2, r3
 8024b5c:	db3c      	blt.n	8024bd8 <_printf_float+0x370>
 8024b5e:	6823      	ldr	r3, [r4, #0]
 8024b60:	07da      	lsls	r2, r3, #31
 8024b62:	d439      	bmi.n	8024bd8 <_printf_float+0x370>
 8024b64:	9b08      	ldr	r3, [sp, #32]
 8024b66:	9a04      	ldr	r2, [sp, #16]
 8024b68:	9907      	ldr	r1, [sp, #28]
 8024b6a:	1a9a      	subs	r2, r3, r2
 8024b6c:	eba3 0901 	sub.w	r9, r3, r1
 8024b70:	4591      	cmp	r9, r2
 8024b72:	bfa8      	it	ge
 8024b74:	4691      	movge	r9, r2
 8024b76:	f1b9 0f00 	cmp.w	r9, #0
 8024b7a:	dc35      	bgt.n	8024be8 <_printf_float+0x380>
 8024b7c:	f04f 0800 	mov.w	r8, #0
 8024b80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024b84:	f104 0a1a 	add.w	sl, r4, #26
 8024b88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024b8c:	1a9b      	subs	r3, r3, r2
 8024b8e:	eba3 0309 	sub.w	r3, r3, r9
 8024b92:	4543      	cmp	r3, r8
 8024b94:	f77f af75 	ble.w	8024a82 <_printf_float+0x21a>
 8024b98:	2301      	movs	r3, #1
 8024b9a:	4652      	mov	r2, sl
 8024b9c:	4631      	mov	r1, r6
 8024b9e:	4628      	mov	r0, r5
 8024ba0:	47b8      	blx	r7
 8024ba2:	3001      	adds	r0, #1
 8024ba4:	f43f aeae 	beq.w	8024904 <_printf_float+0x9c>
 8024ba8:	f108 0801 	add.w	r8, r8, #1
 8024bac:	e7ec      	b.n	8024b88 <_printf_float+0x320>
 8024bae:	4613      	mov	r3, r2
 8024bb0:	4631      	mov	r1, r6
 8024bb2:	4642      	mov	r2, r8
 8024bb4:	4628      	mov	r0, r5
 8024bb6:	47b8      	blx	r7
 8024bb8:	3001      	adds	r0, #1
 8024bba:	d1bf      	bne.n	8024b3c <_printf_float+0x2d4>
 8024bbc:	e6a2      	b.n	8024904 <_printf_float+0x9c>
 8024bbe:	2301      	movs	r3, #1
 8024bc0:	4631      	mov	r1, r6
 8024bc2:	4628      	mov	r0, r5
 8024bc4:	9204      	str	r2, [sp, #16]
 8024bc6:	47b8      	blx	r7
 8024bc8:	3001      	adds	r0, #1
 8024bca:	f43f ae9b 	beq.w	8024904 <_printf_float+0x9c>
 8024bce:	9b05      	ldr	r3, [sp, #20]
 8024bd0:	9a04      	ldr	r2, [sp, #16]
 8024bd2:	3301      	adds	r3, #1
 8024bd4:	9305      	str	r3, [sp, #20]
 8024bd6:	e7b7      	b.n	8024b48 <_printf_float+0x2e0>
 8024bd8:	4653      	mov	r3, sl
 8024bda:	465a      	mov	r2, fp
 8024bdc:	4631      	mov	r1, r6
 8024bde:	4628      	mov	r0, r5
 8024be0:	47b8      	blx	r7
 8024be2:	3001      	adds	r0, #1
 8024be4:	d1be      	bne.n	8024b64 <_printf_float+0x2fc>
 8024be6:	e68d      	b.n	8024904 <_printf_float+0x9c>
 8024be8:	9a04      	ldr	r2, [sp, #16]
 8024bea:	464b      	mov	r3, r9
 8024bec:	4442      	add	r2, r8
 8024bee:	4631      	mov	r1, r6
 8024bf0:	4628      	mov	r0, r5
 8024bf2:	47b8      	blx	r7
 8024bf4:	3001      	adds	r0, #1
 8024bf6:	d1c1      	bne.n	8024b7c <_printf_float+0x314>
 8024bf8:	e684      	b.n	8024904 <_printf_float+0x9c>
 8024bfa:	9a08      	ldr	r2, [sp, #32]
 8024bfc:	2a01      	cmp	r2, #1
 8024bfe:	dc01      	bgt.n	8024c04 <_printf_float+0x39c>
 8024c00:	07db      	lsls	r3, r3, #31
 8024c02:	d537      	bpl.n	8024c74 <_printf_float+0x40c>
 8024c04:	2301      	movs	r3, #1
 8024c06:	4642      	mov	r2, r8
 8024c08:	4631      	mov	r1, r6
 8024c0a:	4628      	mov	r0, r5
 8024c0c:	47b8      	blx	r7
 8024c0e:	3001      	adds	r0, #1
 8024c10:	f43f ae78 	beq.w	8024904 <_printf_float+0x9c>
 8024c14:	4653      	mov	r3, sl
 8024c16:	465a      	mov	r2, fp
 8024c18:	4631      	mov	r1, r6
 8024c1a:	4628      	mov	r0, r5
 8024c1c:	47b8      	blx	r7
 8024c1e:	3001      	adds	r0, #1
 8024c20:	f43f ae70 	beq.w	8024904 <_printf_float+0x9c>
 8024c24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024c28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c30:	d01b      	beq.n	8024c6a <_printf_float+0x402>
 8024c32:	9b08      	ldr	r3, [sp, #32]
 8024c34:	f108 0201 	add.w	r2, r8, #1
 8024c38:	3b01      	subs	r3, #1
 8024c3a:	4631      	mov	r1, r6
 8024c3c:	4628      	mov	r0, r5
 8024c3e:	47b8      	blx	r7
 8024c40:	3001      	adds	r0, #1
 8024c42:	d10e      	bne.n	8024c62 <_printf_float+0x3fa>
 8024c44:	e65e      	b.n	8024904 <_printf_float+0x9c>
 8024c46:	2301      	movs	r3, #1
 8024c48:	464a      	mov	r2, r9
 8024c4a:	4631      	mov	r1, r6
 8024c4c:	4628      	mov	r0, r5
 8024c4e:	47b8      	blx	r7
 8024c50:	3001      	adds	r0, #1
 8024c52:	f43f ae57 	beq.w	8024904 <_printf_float+0x9c>
 8024c56:	f108 0801 	add.w	r8, r8, #1
 8024c5a:	9b08      	ldr	r3, [sp, #32]
 8024c5c:	3b01      	subs	r3, #1
 8024c5e:	4543      	cmp	r3, r8
 8024c60:	dcf1      	bgt.n	8024c46 <_printf_float+0x3de>
 8024c62:	9b04      	ldr	r3, [sp, #16]
 8024c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8024c68:	e6db      	b.n	8024a22 <_printf_float+0x1ba>
 8024c6a:	f04f 0800 	mov.w	r8, #0
 8024c6e:	f104 091a 	add.w	r9, r4, #26
 8024c72:	e7f2      	b.n	8024c5a <_printf_float+0x3f2>
 8024c74:	2301      	movs	r3, #1
 8024c76:	4642      	mov	r2, r8
 8024c78:	e7df      	b.n	8024c3a <_printf_float+0x3d2>
 8024c7a:	2301      	movs	r3, #1
 8024c7c:	464a      	mov	r2, r9
 8024c7e:	4631      	mov	r1, r6
 8024c80:	4628      	mov	r0, r5
 8024c82:	47b8      	blx	r7
 8024c84:	3001      	adds	r0, #1
 8024c86:	f43f ae3d 	beq.w	8024904 <_printf_float+0x9c>
 8024c8a:	f108 0801 	add.w	r8, r8, #1
 8024c8e:	68e3      	ldr	r3, [r4, #12]
 8024c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024c92:	1a5b      	subs	r3, r3, r1
 8024c94:	4543      	cmp	r3, r8
 8024c96:	dcf0      	bgt.n	8024c7a <_printf_float+0x412>
 8024c98:	e6f7      	b.n	8024a8a <_printf_float+0x222>
 8024c9a:	f04f 0800 	mov.w	r8, #0
 8024c9e:	f104 0919 	add.w	r9, r4, #25
 8024ca2:	e7f4      	b.n	8024c8e <_printf_float+0x426>

08024ca4 <_printf_common>:
 8024ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ca8:	4616      	mov	r6, r2
 8024caa:	4699      	mov	r9, r3
 8024cac:	688a      	ldr	r2, [r1, #8]
 8024cae:	690b      	ldr	r3, [r1, #16]
 8024cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024cb4:	4293      	cmp	r3, r2
 8024cb6:	bfb8      	it	lt
 8024cb8:	4613      	movlt	r3, r2
 8024cba:	6033      	str	r3, [r6, #0]
 8024cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024cc0:	4607      	mov	r7, r0
 8024cc2:	460c      	mov	r4, r1
 8024cc4:	b10a      	cbz	r2, 8024cca <_printf_common+0x26>
 8024cc6:	3301      	adds	r3, #1
 8024cc8:	6033      	str	r3, [r6, #0]
 8024cca:	6823      	ldr	r3, [r4, #0]
 8024ccc:	0699      	lsls	r1, r3, #26
 8024cce:	bf42      	ittt	mi
 8024cd0:	6833      	ldrmi	r3, [r6, #0]
 8024cd2:	3302      	addmi	r3, #2
 8024cd4:	6033      	strmi	r3, [r6, #0]
 8024cd6:	6825      	ldr	r5, [r4, #0]
 8024cd8:	f015 0506 	ands.w	r5, r5, #6
 8024cdc:	d106      	bne.n	8024cec <_printf_common+0x48>
 8024cde:	f104 0a19 	add.w	sl, r4, #25
 8024ce2:	68e3      	ldr	r3, [r4, #12]
 8024ce4:	6832      	ldr	r2, [r6, #0]
 8024ce6:	1a9b      	subs	r3, r3, r2
 8024ce8:	42ab      	cmp	r3, r5
 8024cea:	dc26      	bgt.n	8024d3a <_printf_common+0x96>
 8024cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024cf0:	1e13      	subs	r3, r2, #0
 8024cf2:	6822      	ldr	r2, [r4, #0]
 8024cf4:	bf18      	it	ne
 8024cf6:	2301      	movne	r3, #1
 8024cf8:	0692      	lsls	r2, r2, #26
 8024cfa:	d42b      	bmi.n	8024d54 <_printf_common+0xb0>
 8024cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024d00:	4649      	mov	r1, r9
 8024d02:	4638      	mov	r0, r7
 8024d04:	47c0      	blx	r8
 8024d06:	3001      	adds	r0, #1
 8024d08:	d01e      	beq.n	8024d48 <_printf_common+0xa4>
 8024d0a:	6823      	ldr	r3, [r4, #0]
 8024d0c:	68e5      	ldr	r5, [r4, #12]
 8024d0e:	6832      	ldr	r2, [r6, #0]
 8024d10:	f003 0306 	and.w	r3, r3, #6
 8024d14:	2b04      	cmp	r3, #4
 8024d16:	bf08      	it	eq
 8024d18:	1aad      	subeq	r5, r5, r2
 8024d1a:	68a3      	ldr	r3, [r4, #8]
 8024d1c:	6922      	ldr	r2, [r4, #16]
 8024d1e:	bf0c      	ite	eq
 8024d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024d24:	2500      	movne	r5, #0
 8024d26:	4293      	cmp	r3, r2
 8024d28:	bfc4      	itt	gt
 8024d2a:	1a9b      	subgt	r3, r3, r2
 8024d2c:	18ed      	addgt	r5, r5, r3
 8024d2e:	2600      	movs	r6, #0
 8024d30:	341a      	adds	r4, #26
 8024d32:	42b5      	cmp	r5, r6
 8024d34:	d11a      	bne.n	8024d6c <_printf_common+0xc8>
 8024d36:	2000      	movs	r0, #0
 8024d38:	e008      	b.n	8024d4c <_printf_common+0xa8>
 8024d3a:	2301      	movs	r3, #1
 8024d3c:	4652      	mov	r2, sl
 8024d3e:	4649      	mov	r1, r9
 8024d40:	4638      	mov	r0, r7
 8024d42:	47c0      	blx	r8
 8024d44:	3001      	adds	r0, #1
 8024d46:	d103      	bne.n	8024d50 <_printf_common+0xac>
 8024d48:	f04f 30ff 	mov.w	r0, #4294967295
 8024d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d50:	3501      	adds	r5, #1
 8024d52:	e7c6      	b.n	8024ce2 <_printf_common+0x3e>
 8024d54:	18e1      	adds	r1, r4, r3
 8024d56:	1c5a      	adds	r2, r3, #1
 8024d58:	2030      	movs	r0, #48	; 0x30
 8024d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024d5e:	4422      	add	r2, r4
 8024d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024d68:	3302      	adds	r3, #2
 8024d6a:	e7c7      	b.n	8024cfc <_printf_common+0x58>
 8024d6c:	2301      	movs	r3, #1
 8024d6e:	4622      	mov	r2, r4
 8024d70:	4649      	mov	r1, r9
 8024d72:	4638      	mov	r0, r7
 8024d74:	47c0      	blx	r8
 8024d76:	3001      	adds	r0, #1
 8024d78:	d0e6      	beq.n	8024d48 <_printf_common+0xa4>
 8024d7a:	3601      	adds	r6, #1
 8024d7c:	e7d9      	b.n	8024d32 <_printf_common+0x8e>
 8024d7e:	Address 0x0000000008024d7e is out of bounds.


08024d80 <_printf_i>:
 8024d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024d84:	7e0f      	ldrb	r7, [r1, #24]
 8024d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024d88:	2f78      	cmp	r7, #120	; 0x78
 8024d8a:	4691      	mov	r9, r2
 8024d8c:	4680      	mov	r8, r0
 8024d8e:	460c      	mov	r4, r1
 8024d90:	469a      	mov	sl, r3
 8024d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024d96:	d807      	bhi.n	8024da8 <_printf_i+0x28>
 8024d98:	2f62      	cmp	r7, #98	; 0x62
 8024d9a:	d80a      	bhi.n	8024db2 <_printf_i+0x32>
 8024d9c:	2f00      	cmp	r7, #0
 8024d9e:	f000 80d8 	beq.w	8024f52 <_printf_i+0x1d2>
 8024da2:	2f58      	cmp	r7, #88	; 0x58
 8024da4:	f000 80a3 	beq.w	8024eee <_printf_i+0x16e>
 8024da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024db0:	e03a      	b.n	8024e28 <_printf_i+0xa8>
 8024db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024db6:	2b15      	cmp	r3, #21
 8024db8:	d8f6      	bhi.n	8024da8 <_printf_i+0x28>
 8024dba:	a101      	add	r1, pc, #4	; (adr r1, 8024dc0 <_printf_i+0x40>)
 8024dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024dc0:	08024e19 	.word	0x08024e19
 8024dc4:	08024e2d 	.word	0x08024e2d
 8024dc8:	08024da9 	.word	0x08024da9
 8024dcc:	08024da9 	.word	0x08024da9
 8024dd0:	08024da9 	.word	0x08024da9
 8024dd4:	08024da9 	.word	0x08024da9
 8024dd8:	08024e2d 	.word	0x08024e2d
 8024ddc:	08024da9 	.word	0x08024da9
 8024de0:	08024da9 	.word	0x08024da9
 8024de4:	08024da9 	.word	0x08024da9
 8024de8:	08024da9 	.word	0x08024da9
 8024dec:	08024f39 	.word	0x08024f39
 8024df0:	08024e5d 	.word	0x08024e5d
 8024df4:	08024f1b 	.word	0x08024f1b
 8024df8:	08024da9 	.word	0x08024da9
 8024dfc:	08024da9 	.word	0x08024da9
 8024e00:	08024f5b 	.word	0x08024f5b
 8024e04:	08024da9 	.word	0x08024da9
 8024e08:	08024e5d 	.word	0x08024e5d
 8024e0c:	08024da9 	.word	0x08024da9
 8024e10:	08024da9 	.word	0x08024da9
 8024e14:	08024f23 	.word	0x08024f23
 8024e18:	682b      	ldr	r3, [r5, #0]
 8024e1a:	1d1a      	adds	r2, r3, #4
 8024e1c:	681b      	ldr	r3, [r3, #0]
 8024e1e:	602a      	str	r2, [r5, #0]
 8024e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024e28:	2301      	movs	r3, #1
 8024e2a:	e0a3      	b.n	8024f74 <_printf_i+0x1f4>
 8024e2c:	6820      	ldr	r0, [r4, #0]
 8024e2e:	6829      	ldr	r1, [r5, #0]
 8024e30:	0606      	lsls	r6, r0, #24
 8024e32:	f101 0304 	add.w	r3, r1, #4
 8024e36:	d50a      	bpl.n	8024e4e <_printf_i+0xce>
 8024e38:	680e      	ldr	r6, [r1, #0]
 8024e3a:	602b      	str	r3, [r5, #0]
 8024e3c:	2e00      	cmp	r6, #0
 8024e3e:	da03      	bge.n	8024e48 <_printf_i+0xc8>
 8024e40:	232d      	movs	r3, #45	; 0x2d
 8024e42:	4276      	negs	r6, r6
 8024e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024e48:	485e      	ldr	r0, [pc, #376]	; (8024fc4 <_printf_i+0x244>)
 8024e4a:	230a      	movs	r3, #10
 8024e4c:	e019      	b.n	8024e82 <_printf_i+0x102>
 8024e4e:	680e      	ldr	r6, [r1, #0]
 8024e50:	602b      	str	r3, [r5, #0]
 8024e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024e56:	bf18      	it	ne
 8024e58:	b236      	sxthne	r6, r6
 8024e5a:	e7ef      	b.n	8024e3c <_printf_i+0xbc>
 8024e5c:	682b      	ldr	r3, [r5, #0]
 8024e5e:	6820      	ldr	r0, [r4, #0]
 8024e60:	1d19      	adds	r1, r3, #4
 8024e62:	6029      	str	r1, [r5, #0]
 8024e64:	0601      	lsls	r1, r0, #24
 8024e66:	d501      	bpl.n	8024e6c <_printf_i+0xec>
 8024e68:	681e      	ldr	r6, [r3, #0]
 8024e6a:	e002      	b.n	8024e72 <_printf_i+0xf2>
 8024e6c:	0646      	lsls	r6, r0, #25
 8024e6e:	d5fb      	bpl.n	8024e68 <_printf_i+0xe8>
 8024e70:	881e      	ldrh	r6, [r3, #0]
 8024e72:	4854      	ldr	r0, [pc, #336]	; (8024fc4 <_printf_i+0x244>)
 8024e74:	2f6f      	cmp	r7, #111	; 0x6f
 8024e76:	bf0c      	ite	eq
 8024e78:	2308      	moveq	r3, #8
 8024e7a:	230a      	movne	r3, #10
 8024e7c:	2100      	movs	r1, #0
 8024e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024e82:	6865      	ldr	r5, [r4, #4]
 8024e84:	60a5      	str	r5, [r4, #8]
 8024e86:	2d00      	cmp	r5, #0
 8024e88:	bfa2      	ittt	ge
 8024e8a:	6821      	ldrge	r1, [r4, #0]
 8024e8c:	f021 0104 	bicge.w	r1, r1, #4
 8024e90:	6021      	strge	r1, [r4, #0]
 8024e92:	b90e      	cbnz	r6, 8024e98 <_printf_i+0x118>
 8024e94:	2d00      	cmp	r5, #0
 8024e96:	d04d      	beq.n	8024f34 <_printf_i+0x1b4>
 8024e98:	4615      	mov	r5, r2
 8024e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8024e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8024ea2:	5dc7      	ldrb	r7, [r0, r7]
 8024ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024ea8:	4637      	mov	r7, r6
 8024eaa:	42bb      	cmp	r3, r7
 8024eac:	460e      	mov	r6, r1
 8024eae:	d9f4      	bls.n	8024e9a <_printf_i+0x11a>
 8024eb0:	2b08      	cmp	r3, #8
 8024eb2:	d10b      	bne.n	8024ecc <_printf_i+0x14c>
 8024eb4:	6823      	ldr	r3, [r4, #0]
 8024eb6:	07de      	lsls	r6, r3, #31
 8024eb8:	d508      	bpl.n	8024ecc <_printf_i+0x14c>
 8024eba:	6923      	ldr	r3, [r4, #16]
 8024ebc:	6861      	ldr	r1, [r4, #4]
 8024ebe:	4299      	cmp	r1, r3
 8024ec0:	bfde      	ittt	le
 8024ec2:	2330      	movle	r3, #48	; 0x30
 8024ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024ecc:	1b52      	subs	r2, r2, r5
 8024ece:	6122      	str	r2, [r4, #16]
 8024ed0:	f8cd a000 	str.w	sl, [sp]
 8024ed4:	464b      	mov	r3, r9
 8024ed6:	aa03      	add	r2, sp, #12
 8024ed8:	4621      	mov	r1, r4
 8024eda:	4640      	mov	r0, r8
 8024edc:	f7ff fee2 	bl	8024ca4 <_printf_common>
 8024ee0:	3001      	adds	r0, #1
 8024ee2:	d14c      	bne.n	8024f7e <_printf_i+0x1fe>
 8024ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8024ee8:	b004      	add	sp, #16
 8024eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024eee:	4835      	ldr	r0, [pc, #212]	; (8024fc4 <_printf_i+0x244>)
 8024ef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024ef4:	6829      	ldr	r1, [r5, #0]
 8024ef6:	6823      	ldr	r3, [r4, #0]
 8024ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8024efc:	6029      	str	r1, [r5, #0]
 8024efe:	061d      	lsls	r5, r3, #24
 8024f00:	d514      	bpl.n	8024f2c <_printf_i+0x1ac>
 8024f02:	07df      	lsls	r7, r3, #31
 8024f04:	bf44      	itt	mi
 8024f06:	f043 0320 	orrmi.w	r3, r3, #32
 8024f0a:	6023      	strmi	r3, [r4, #0]
 8024f0c:	b91e      	cbnz	r6, 8024f16 <_printf_i+0x196>
 8024f0e:	6823      	ldr	r3, [r4, #0]
 8024f10:	f023 0320 	bic.w	r3, r3, #32
 8024f14:	6023      	str	r3, [r4, #0]
 8024f16:	2310      	movs	r3, #16
 8024f18:	e7b0      	b.n	8024e7c <_printf_i+0xfc>
 8024f1a:	6823      	ldr	r3, [r4, #0]
 8024f1c:	f043 0320 	orr.w	r3, r3, #32
 8024f20:	6023      	str	r3, [r4, #0]
 8024f22:	2378      	movs	r3, #120	; 0x78
 8024f24:	4828      	ldr	r0, [pc, #160]	; (8024fc8 <_printf_i+0x248>)
 8024f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024f2a:	e7e3      	b.n	8024ef4 <_printf_i+0x174>
 8024f2c:	0659      	lsls	r1, r3, #25
 8024f2e:	bf48      	it	mi
 8024f30:	b2b6      	uxthmi	r6, r6
 8024f32:	e7e6      	b.n	8024f02 <_printf_i+0x182>
 8024f34:	4615      	mov	r5, r2
 8024f36:	e7bb      	b.n	8024eb0 <_printf_i+0x130>
 8024f38:	682b      	ldr	r3, [r5, #0]
 8024f3a:	6826      	ldr	r6, [r4, #0]
 8024f3c:	6961      	ldr	r1, [r4, #20]
 8024f3e:	1d18      	adds	r0, r3, #4
 8024f40:	6028      	str	r0, [r5, #0]
 8024f42:	0635      	lsls	r5, r6, #24
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	d501      	bpl.n	8024f4c <_printf_i+0x1cc>
 8024f48:	6019      	str	r1, [r3, #0]
 8024f4a:	e002      	b.n	8024f52 <_printf_i+0x1d2>
 8024f4c:	0670      	lsls	r0, r6, #25
 8024f4e:	d5fb      	bpl.n	8024f48 <_printf_i+0x1c8>
 8024f50:	8019      	strh	r1, [r3, #0]
 8024f52:	2300      	movs	r3, #0
 8024f54:	6123      	str	r3, [r4, #16]
 8024f56:	4615      	mov	r5, r2
 8024f58:	e7ba      	b.n	8024ed0 <_printf_i+0x150>
 8024f5a:	682b      	ldr	r3, [r5, #0]
 8024f5c:	1d1a      	adds	r2, r3, #4
 8024f5e:	602a      	str	r2, [r5, #0]
 8024f60:	681d      	ldr	r5, [r3, #0]
 8024f62:	6862      	ldr	r2, [r4, #4]
 8024f64:	2100      	movs	r1, #0
 8024f66:	4628      	mov	r0, r5
 8024f68:	f7db f982 	bl	8000270 <memchr>
 8024f6c:	b108      	cbz	r0, 8024f72 <_printf_i+0x1f2>
 8024f6e:	1b40      	subs	r0, r0, r5
 8024f70:	6060      	str	r0, [r4, #4]
 8024f72:	6863      	ldr	r3, [r4, #4]
 8024f74:	6123      	str	r3, [r4, #16]
 8024f76:	2300      	movs	r3, #0
 8024f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024f7c:	e7a8      	b.n	8024ed0 <_printf_i+0x150>
 8024f7e:	6923      	ldr	r3, [r4, #16]
 8024f80:	462a      	mov	r2, r5
 8024f82:	4649      	mov	r1, r9
 8024f84:	4640      	mov	r0, r8
 8024f86:	47d0      	blx	sl
 8024f88:	3001      	adds	r0, #1
 8024f8a:	d0ab      	beq.n	8024ee4 <_printf_i+0x164>
 8024f8c:	6823      	ldr	r3, [r4, #0]
 8024f8e:	079b      	lsls	r3, r3, #30
 8024f90:	d413      	bmi.n	8024fba <_printf_i+0x23a>
 8024f92:	68e0      	ldr	r0, [r4, #12]
 8024f94:	9b03      	ldr	r3, [sp, #12]
 8024f96:	4298      	cmp	r0, r3
 8024f98:	bfb8      	it	lt
 8024f9a:	4618      	movlt	r0, r3
 8024f9c:	e7a4      	b.n	8024ee8 <_printf_i+0x168>
 8024f9e:	2301      	movs	r3, #1
 8024fa0:	4632      	mov	r2, r6
 8024fa2:	4649      	mov	r1, r9
 8024fa4:	4640      	mov	r0, r8
 8024fa6:	47d0      	blx	sl
 8024fa8:	3001      	adds	r0, #1
 8024faa:	d09b      	beq.n	8024ee4 <_printf_i+0x164>
 8024fac:	3501      	adds	r5, #1
 8024fae:	68e3      	ldr	r3, [r4, #12]
 8024fb0:	9903      	ldr	r1, [sp, #12]
 8024fb2:	1a5b      	subs	r3, r3, r1
 8024fb4:	42ab      	cmp	r3, r5
 8024fb6:	dcf2      	bgt.n	8024f9e <_printf_i+0x21e>
 8024fb8:	e7eb      	b.n	8024f92 <_printf_i+0x212>
 8024fba:	2500      	movs	r5, #0
 8024fbc:	f104 0619 	add.w	r6, r4, #25
 8024fc0:	e7f5      	b.n	8024fae <_printf_i+0x22e>
 8024fc2:	bf00      	nop
 8024fc4:	080457b0 	.word	0x080457b0
 8024fc8:	080457c1 	.word	0x080457c1

08024fcc <iprintf>:
 8024fcc:	b40f      	push	{r0, r1, r2, r3}
 8024fce:	4b0a      	ldr	r3, [pc, #40]	; (8024ff8 <iprintf+0x2c>)
 8024fd0:	b513      	push	{r0, r1, r4, lr}
 8024fd2:	681c      	ldr	r4, [r3, #0]
 8024fd4:	b124      	cbz	r4, 8024fe0 <iprintf+0x14>
 8024fd6:	69a3      	ldr	r3, [r4, #24]
 8024fd8:	b913      	cbnz	r3, 8024fe0 <iprintf+0x14>
 8024fda:	4620      	mov	r0, r4
 8024fdc:	f7fe fe38 	bl	8023c50 <__sinit>
 8024fe0:	ab05      	add	r3, sp, #20
 8024fe2:	9a04      	ldr	r2, [sp, #16]
 8024fe4:	68a1      	ldr	r1, [r4, #8]
 8024fe6:	9301      	str	r3, [sp, #4]
 8024fe8:	4620      	mov	r0, r4
 8024fea:	f003 fc11 	bl	8028810 <_vfiprintf_r>
 8024fee:	b002      	add	sp, #8
 8024ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ff4:	b004      	add	sp, #16
 8024ff6:	4770      	bx	lr
 8024ff8:	2000048c 	.word	0x2000048c

08024ffc <putchar>:
 8024ffc:	4b09      	ldr	r3, [pc, #36]	; (8025024 <putchar+0x28>)
 8024ffe:	b513      	push	{r0, r1, r4, lr}
 8025000:	681c      	ldr	r4, [r3, #0]
 8025002:	4601      	mov	r1, r0
 8025004:	b134      	cbz	r4, 8025014 <putchar+0x18>
 8025006:	69a3      	ldr	r3, [r4, #24]
 8025008:	b923      	cbnz	r3, 8025014 <putchar+0x18>
 802500a:	9001      	str	r0, [sp, #4]
 802500c:	4620      	mov	r0, r4
 802500e:	f7fe fe1f 	bl	8023c50 <__sinit>
 8025012:	9901      	ldr	r1, [sp, #4]
 8025014:	68a2      	ldr	r2, [r4, #8]
 8025016:	4620      	mov	r0, r4
 8025018:	b002      	add	sp, #8
 802501a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802501e:	f003 be79 	b.w	8028d14 <_putc_r>
 8025022:	bf00      	nop
 8025024:	2000048c 	.word	0x2000048c

08025028 <_puts_r>:
 8025028:	b570      	push	{r4, r5, r6, lr}
 802502a:	460e      	mov	r6, r1
 802502c:	4605      	mov	r5, r0
 802502e:	b118      	cbz	r0, 8025038 <_puts_r+0x10>
 8025030:	6983      	ldr	r3, [r0, #24]
 8025032:	b90b      	cbnz	r3, 8025038 <_puts_r+0x10>
 8025034:	f7fe fe0c 	bl	8023c50 <__sinit>
 8025038:	69ab      	ldr	r3, [r5, #24]
 802503a:	68ac      	ldr	r4, [r5, #8]
 802503c:	b913      	cbnz	r3, 8025044 <_puts_r+0x1c>
 802503e:	4628      	mov	r0, r5
 8025040:	f7fe fe06 	bl	8023c50 <__sinit>
 8025044:	4b2c      	ldr	r3, [pc, #176]	; (80250f8 <_puts_r+0xd0>)
 8025046:	429c      	cmp	r4, r3
 8025048:	d120      	bne.n	802508c <_puts_r+0x64>
 802504a:	686c      	ldr	r4, [r5, #4]
 802504c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802504e:	07db      	lsls	r3, r3, #31
 8025050:	d405      	bmi.n	802505e <_puts_r+0x36>
 8025052:	89a3      	ldrh	r3, [r4, #12]
 8025054:	0598      	lsls	r0, r3, #22
 8025056:	d402      	bmi.n	802505e <_puts_r+0x36>
 8025058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802505a:	f7fe ffcf 	bl	8023ffc <__retarget_lock_acquire_recursive>
 802505e:	89a3      	ldrh	r3, [r4, #12]
 8025060:	0719      	lsls	r1, r3, #28
 8025062:	d51d      	bpl.n	80250a0 <_puts_r+0x78>
 8025064:	6923      	ldr	r3, [r4, #16]
 8025066:	b1db      	cbz	r3, 80250a0 <_puts_r+0x78>
 8025068:	3e01      	subs	r6, #1
 802506a:	68a3      	ldr	r3, [r4, #8]
 802506c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025070:	3b01      	subs	r3, #1
 8025072:	60a3      	str	r3, [r4, #8]
 8025074:	bb39      	cbnz	r1, 80250c6 <_puts_r+0x9e>
 8025076:	2b00      	cmp	r3, #0
 8025078:	da38      	bge.n	80250ec <_puts_r+0xc4>
 802507a:	4622      	mov	r2, r4
 802507c:	210a      	movs	r1, #10
 802507e:	4628      	mov	r0, r5
 8025080:	f001 faf0 	bl	8026664 <__swbuf_r>
 8025084:	3001      	adds	r0, #1
 8025086:	d011      	beq.n	80250ac <_puts_r+0x84>
 8025088:	250a      	movs	r5, #10
 802508a:	e011      	b.n	80250b0 <_puts_r+0x88>
 802508c:	4b1b      	ldr	r3, [pc, #108]	; (80250fc <_puts_r+0xd4>)
 802508e:	429c      	cmp	r4, r3
 8025090:	d101      	bne.n	8025096 <_puts_r+0x6e>
 8025092:	68ac      	ldr	r4, [r5, #8]
 8025094:	e7da      	b.n	802504c <_puts_r+0x24>
 8025096:	4b1a      	ldr	r3, [pc, #104]	; (8025100 <_puts_r+0xd8>)
 8025098:	429c      	cmp	r4, r3
 802509a:	bf08      	it	eq
 802509c:	68ec      	ldreq	r4, [r5, #12]
 802509e:	e7d5      	b.n	802504c <_puts_r+0x24>
 80250a0:	4621      	mov	r1, r4
 80250a2:	4628      	mov	r0, r5
 80250a4:	f001 fb42 	bl	802672c <__swsetup_r>
 80250a8:	2800      	cmp	r0, #0
 80250aa:	d0dd      	beq.n	8025068 <_puts_r+0x40>
 80250ac:	f04f 35ff 	mov.w	r5, #4294967295
 80250b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80250b2:	07da      	lsls	r2, r3, #31
 80250b4:	d405      	bmi.n	80250c2 <_puts_r+0x9a>
 80250b6:	89a3      	ldrh	r3, [r4, #12]
 80250b8:	059b      	lsls	r3, r3, #22
 80250ba:	d402      	bmi.n	80250c2 <_puts_r+0x9a>
 80250bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80250be:	f7fe ff9f 	bl	8024000 <__retarget_lock_release_recursive>
 80250c2:	4628      	mov	r0, r5
 80250c4:	bd70      	pop	{r4, r5, r6, pc}
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	da04      	bge.n	80250d4 <_puts_r+0xac>
 80250ca:	69a2      	ldr	r2, [r4, #24]
 80250cc:	429a      	cmp	r2, r3
 80250ce:	dc06      	bgt.n	80250de <_puts_r+0xb6>
 80250d0:	290a      	cmp	r1, #10
 80250d2:	d004      	beq.n	80250de <_puts_r+0xb6>
 80250d4:	6823      	ldr	r3, [r4, #0]
 80250d6:	1c5a      	adds	r2, r3, #1
 80250d8:	6022      	str	r2, [r4, #0]
 80250da:	7019      	strb	r1, [r3, #0]
 80250dc:	e7c5      	b.n	802506a <_puts_r+0x42>
 80250de:	4622      	mov	r2, r4
 80250e0:	4628      	mov	r0, r5
 80250e2:	f001 fabf 	bl	8026664 <__swbuf_r>
 80250e6:	3001      	adds	r0, #1
 80250e8:	d1bf      	bne.n	802506a <_puts_r+0x42>
 80250ea:	e7df      	b.n	80250ac <_puts_r+0x84>
 80250ec:	6823      	ldr	r3, [r4, #0]
 80250ee:	250a      	movs	r5, #10
 80250f0:	1c5a      	adds	r2, r3, #1
 80250f2:	6022      	str	r2, [r4, #0]
 80250f4:	701d      	strb	r5, [r3, #0]
 80250f6:	e7db      	b.n	80250b0 <_puts_r+0x88>
 80250f8:	08045628 	.word	0x08045628
 80250fc:	08045648 	.word	0x08045648
 8025100:	08045608 	.word	0x08045608

08025104 <puts>:
 8025104:	4b02      	ldr	r3, [pc, #8]	; (8025110 <puts+0xc>)
 8025106:	4601      	mov	r1, r0
 8025108:	6818      	ldr	r0, [r3, #0]
 802510a:	f7ff bf8d 	b.w	8025028 <_puts_r>
 802510e:	bf00      	nop
 8025110:	2000048c 	.word	0x2000048c

08025114 <rand>:
 8025114:	4b16      	ldr	r3, [pc, #88]	; (8025170 <rand+0x5c>)
 8025116:	b510      	push	{r4, lr}
 8025118:	681c      	ldr	r4, [r3, #0]
 802511a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802511c:	b9b3      	cbnz	r3, 802514c <rand+0x38>
 802511e:	2018      	movs	r0, #24
 8025120:	f7fe ff70 	bl	8024004 <malloc>
 8025124:	63a0      	str	r0, [r4, #56]	; 0x38
 8025126:	b928      	cbnz	r0, 8025134 <rand+0x20>
 8025128:	4602      	mov	r2, r0
 802512a:	4b12      	ldr	r3, [pc, #72]	; (8025174 <rand+0x60>)
 802512c:	4812      	ldr	r0, [pc, #72]	; (8025178 <rand+0x64>)
 802512e:	214e      	movs	r1, #78	; 0x4e
 8025130:	f001 fbb6 	bl	80268a0 <__assert_func>
 8025134:	4a11      	ldr	r2, [pc, #68]	; (802517c <rand+0x68>)
 8025136:	4b12      	ldr	r3, [pc, #72]	; (8025180 <rand+0x6c>)
 8025138:	e9c0 2300 	strd	r2, r3, [r0]
 802513c:	4b11      	ldr	r3, [pc, #68]	; (8025184 <rand+0x70>)
 802513e:	6083      	str	r3, [r0, #8]
 8025140:	230b      	movs	r3, #11
 8025142:	8183      	strh	r3, [r0, #12]
 8025144:	2201      	movs	r2, #1
 8025146:	2300      	movs	r3, #0
 8025148:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802514c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802514e:	4a0e      	ldr	r2, [pc, #56]	; (8025188 <rand+0x74>)
 8025150:	6920      	ldr	r0, [r4, #16]
 8025152:	6963      	ldr	r3, [r4, #20]
 8025154:	490d      	ldr	r1, [pc, #52]	; (802518c <rand+0x78>)
 8025156:	4342      	muls	r2, r0
 8025158:	fb01 2203 	mla	r2, r1, r3, r2
 802515c:	fba0 0101 	umull	r0, r1, r0, r1
 8025160:	1c43      	adds	r3, r0, #1
 8025162:	eb42 0001 	adc.w	r0, r2, r1
 8025166:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802516a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802516e:	bd10      	pop	{r4, pc}
 8025170:	2000048c 	.word	0x2000048c
 8025174:	0804566c 	.word	0x0804566c
 8025178:	080457d2 	.word	0x080457d2
 802517c:	abcd330e 	.word	0xabcd330e
 8025180:	e66d1234 	.word	0xe66d1234
 8025184:	0005deec 	.word	0x0005deec
 8025188:	5851f42d 	.word	0x5851f42d
 802518c:	4c957f2d 	.word	0x4c957f2d

08025190 <realloc>:
 8025190:	4b02      	ldr	r3, [pc, #8]	; (802519c <realloc+0xc>)
 8025192:	460a      	mov	r2, r1
 8025194:	4601      	mov	r1, r0
 8025196:	6818      	ldr	r0, [r3, #0]
 8025198:	f002 bfb4 	b.w	8028104 <_realloc_r>
 802519c:	2000048c 	.word	0x2000048c

080251a0 <cleanup_glue>:
 80251a0:	b538      	push	{r3, r4, r5, lr}
 80251a2:	460c      	mov	r4, r1
 80251a4:	6809      	ldr	r1, [r1, #0]
 80251a6:	4605      	mov	r5, r0
 80251a8:	b109      	cbz	r1, 80251ae <cleanup_glue+0xe>
 80251aa:	f7ff fff9 	bl	80251a0 <cleanup_glue>
 80251ae:	4621      	mov	r1, r4
 80251b0:	4628      	mov	r0, r5
 80251b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80251b6:	f7ff b9e7 	b.w	8024588 <_free_r>
 80251ba:	Address 0x00000000080251ba is out of bounds.


080251bc <_reclaim_reent>:
 80251bc:	4b2c      	ldr	r3, [pc, #176]	; (8025270 <_reclaim_reent+0xb4>)
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	4283      	cmp	r3, r0
 80251c2:	b570      	push	{r4, r5, r6, lr}
 80251c4:	4604      	mov	r4, r0
 80251c6:	d051      	beq.n	802526c <_reclaim_reent+0xb0>
 80251c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80251ca:	b143      	cbz	r3, 80251de <_reclaim_reent+0x22>
 80251cc:	68db      	ldr	r3, [r3, #12]
 80251ce:	2b00      	cmp	r3, #0
 80251d0:	d14a      	bne.n	8025268 <_reclaim_reent+0xac>
 80251d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80251d4:	6819      	ldr	r1, [r3, #0]
 80251d6:	b111      	cbz	r1, 80251de <_reclaim_reent+0x22>
 80251d8:	4620      	mov	r0, r4
 80251da:	f7ff f9d5 	bl	8024588 <_free_r>
 80251de:	6961      	ldr	r1, [r4, #20]
 80251e0:	b111      	cbz	r1, 80251e8 <_reclaim_reent+0x2c>
 80251e2:	4620      	mov	r0, r4
 80251e4:	f7ff f9d0 	bl	8024588 <_free_r>
 80251e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80251ea:	b111      	cbz	r1, 80251f2 <_reclaim_reent+0x36>
 80251ec:	4620      	mov	r0, r4
 80251ee:	f7ff f9cb 	bl	8024588 <_free_r>
 80251f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80251f4:	b111      	cbz	r1, 80251fc <_reclaim_reent+0x40>
 80251f6:	4620      	mov	r0, r4
 80251f8:	f7ff f9c6 	bl	8024588 <_free_r>
 80251fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80251fe:	b111      	cbz	r1, 8025206 <_reclaim_reent+0x4a>
 8025200:	4620      	mov	r0, r4
 8025202:	f7ff f9c1 	bl	8024588 <_free_r>
 8025206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025208:	b111      	cbz	r1, 8025210 <_reclaim_reent+0x54>
 802520a:	4620      	mov	r0, r4
 802520c:	f7ff f9bc 	bl	8024588 <_free_r>
 8025210:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8025212:	b111      	cbz	r1, 802521a <_reclaim_reent+0x5e>
 8025214:	4620      	mov	r0, r4
 8025216:	f7ff f9b7 	bl	8024588 <_free_r>
 802521a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802521c:	b111      	cbz	r1, 8025224 <_reclaim_reent+0x68>
 802521e:	4620      	mov	r0, r4
 8025220:	f7ff f9b2 	bl	8024588 <_free_r>
 8025224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025226:	b111      	cbz	r1, 802522e <_reclaim_reent+0x72>
 8025228:	4620      	mov	r0, r4
 802522a:	f7ff f9ad 	bl	8024588 <_free_r>
 802522e:	69a3      	ldr	r3, [r4, #24]
 8025230:	b1e3      	cbz	r3, 802526c <_reclaim_reent+0xb0>
 8025232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8025234:	4620      	mov	r0, r4
 8025236:	4798      	blx	r3
 8025238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802523a:	b1b9      	cbz	r1, 802526c <_reclaim_reent+0xb0>
 802523c:	4620      	mov	r0, r4
 802523e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025242:	f7ff bfad 	b.w	80251a0 <cleanup_glue>
 8025246:	5949      	ldr	r1, [r1, r5]
 8025248:	b941      	cbnz	r1, 802525c <_reclaim_reent+0xa0>
 802524a:	3504      	adds	r5, #4
 802524c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802524e:	2d80      	cmp	r5, #128	; 0x80
 8025250:	68d9      	ldr	r1, [r3, #12]
 8025252:	d1f8      	bne.n	8025246 <_reclaim_reent+0x8a>
 8025254:	4620      	mov	r0, r4
 8025256:	f7ff f997 	bl	8024588 <_free_r>
 802525a:	e7ba      	b.n	80251d2 <_reclaim_reent+0x16>
 802525c:	680e      	ldr	r6, [r1, #0]
 802525e:	4620      	mov	r0, r4
 8025260:	f7ff f992 	bl	8024588 <_free_r>
 8025264:	4631      	mov	r1, r6
 8025266:	e7ef      	b.n	8025248 <_reclaim_reent+0x8c>
 8025268:	2500      	movs	r5, #0
 802526a:	e7ef      	b.n	802524c <_reclaim_reent+0x90>
 802526c:	bd70      	pop	{r4, r5, r6, pc}
 802526e:	bf00      	nop
 8025270:	2000048c 	.word	0x2000048c

08025274 <modf>:
 8025274:	b570      	push	{r4, r5, r6, lr}
 8025276:	ed2d 8b02 	vpush	{d8}
 802527a:	eeb0 8b40 	vmov.f64	d8, d0
 802527e:	ee18 5a90 	vmov	r5, s17
 8025282:	4604      	mov	r4, r0
 8025284:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8025288:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 802528c:	2b13      	cmp	r3, #19
 802528e:	ee10 1a10 	vmov	r1, s0
 8025292:	dc23      	bgt.n	80252dc <modf+0x68>
 8025294:	2b00      	cmp	r3, #0
 8025296:	da09      	bge.n	80252ac <modf+0x38>
 8025298:	2200      	movs	r2, #0
 802529a:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802529e:	e9c4 2300 	strd	r2, r3, [r4]
 80252a2:	eeb0 0b48 	vmov.f64	d0, d8
 80252a6:	ecbd 8b02 	vpop	{d8}
 80252aa:	bd70      	pop	{r4, r5, r6, pc}
 80252ac:	481d      	ldr	r0, [pc, #116]	; (8025324 <modf+0xb0>)
 80252ae:	4118      	asrs	r0, r3
 80252b0:	ea05 0300 	and.w	r3, r5, r0
 80252b4:	4319      	orrs	r1, r3
 80252b6:	d107      	bne.n	80252c8 <modf+0x54>
 80252b8:	ed84 0b00 	vstr	d0, [r4]
 80252bc:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80252c0:	460a      	mov	r2, r1
 80252c2:	ec43 2b18 	vmov	d8, r2, r3
 80252c6:	e7ec      	b.n	80252a2 <modf+0x2e>
 80252c8:	2200      	movs	r2, #0
 80252ca:	ea25 0300 	bic.w	r3, r5, r0
 80252ce:	ec43 2b17 	vmov	d7, r2, r3
 80252d2:	e9c4 2300 	strd	r2, r3, [r4]
 80252d6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80252da:	e7e2      	b.n	80252a2 <modf+0x2e>
 80252dc:	2b33      	cmp	r3, #51	; 0x33
 80252de:	dd0d      	ble.n	80252fc <modf+0x88>
 80252e0:	ed84 0b00 	vstr	d0, [r4]
 80252e4:	f003 fd70 	bl	8028dc8 <__fpclassifyd>
 80252e8:	b920      	cbnz	r0, 80252f4 <modf+0x80>
 80252ea:	ee38 8b08 	vadd.f64	d8, d8, d8
 80252ee:	ed84 8b00 	vstr	d8, [r4]
 80252f2:	e7d6      	b.n	80252a2 <modf+0x2e>
 80252f4:	2200      	movs	r2, #0
 80252f6:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80252fa:	e7e2      	b.n	80252c2 <modf+0x4e>
 80252fc:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8025300:	f04f 30ff 	mov.w	r0, #4294967295
 8025304:	40d8      	lsrs	r0, r3
 8025306:	ea11 0600 	ands.w	r6, r1, r0
 802530a:	d105      	bne.n	8025318 <modf+0xa4>
 802530c:	ed84 0b00 	vstr	d0, [r4]
 8025310:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025314:	4632      	mov	r2, r6
 8025316:	e7d4      	b.n	80252c2 <modf+0x4e>
 8025318:	ee18 3a90 	vmov	r3, s17
 802531c:	ea21 0200 	bic.w	r2, r1, r0
 8025320:	e7d5      	b.n	80252ce <modf+0x5a>
 8025322:	bf00      	nop
 8025324:	000fffff 	.word	0x000fffff

08025328 <_sbrk_r>:
 8025328:	b538      	push	{r3, r4, r5, lr}
 802532a:	4d06      	ldr	r5, [pc, #24]	; (8025344 <_sbrk_r+0x1c>)
 802532c:	2300      	movs	r3, #0
 802532e:	4604      	mov	r4, r0
 8025330:	4608      	mov	r0, r1
 8025332:	602b      	str	r3, [r5, #0]
 8025334:	f7e1 f986 	bl	8006644 <_sbrk>
 8025338:	1c43      	adds	r3, r0, #1
 802533a:	d102      	bne.n	8025342 <_sbrk_r+0x1a>
 802533c:	682b      	ldr	r3, [r5, #0]
 802533e:	b103      	cbz	r3, 8025342 <_sbrk_r+0x1a>
 8025340:	6023      	str	r3, [r4, #0]
 8025342:	bd38      	pop	{r3, r4, r5, pc}
 8025344:	2002f874 	.word	0x2002f874

08025348 <sniprintf>:
 8025348:	b40c      	push	{r2, r3}
 802534a:	b530      	push	{r4, r5, lr}
 802534c:	4b17      	ldr	r3, [pc, #92]	; (80253ac <sniprintf+0x64>)
 802534e:	1e0c      	subs	r4, r1, #0
 8025350:	681d      	ldr	r5, [r3, #0]
 8025352:	b09d      	sub	sp, #116	; 0x74
 8025354:	da08      	bge.n	8025368 <sniprintf+0x20>
 8025356:	238b      	movs	r3, #139	; 0x8b
 8025358:	602b      	str	r3, [r5, #0]
 802535a:	f04f 30ff 	mov.w	r0, #4294967295
 802535e:	b01d      	add	sp, #116	; 0x74
 8025360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025364:	b002      	add	sp, #8
 8025366:	4770      	bx	lr
 8025368:	f44f 7302 	mov.w	r3, #520	; 0x208
 802536c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025370:	bf14      	ite	ne
 8025372:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025376:	4623      	moveq	r3, r4
 8025378:	9304      	str	r3, [sp, #16]
 802537a:	9307      	str	r3, [sp, #28]
 802537c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025380:	9002      	str	r0, [sp, #8]
 8025382:	9006      	str	r0, [sp, #24]
 8025384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025388:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802538a:	ab21      	add	r3, sp, #132	; 0x84
 802538c:	a902      	add	r1, sp, #8
 802538e:	4628      	mov	r0, r5
 8025390:	9301      	str	r3, [sp, #4]
 8025392:	f002 ff41 	bl	8028218 <_svfiprintf_r>
 8025396:	1c43      	adds	r3, r0, #1
 8025398:	bfbc      	itt	lt
 802539a:	238b      	movlt	r3, #139	; 0x8b
 802539c:	602b      	strlt	r3, [r5, #0]
 802539e:	2c00      	cmp	r4, #0
 80253a0:	d0dd      	beq.n	802535e <sniprintf+0x16>
 80253a2:	9b02      	ldr	r3, [sp, #8]
 80253a4:	2200      	movs	r2, #0
 80253a6:	701a      	strb	r2, [r3, #0]
 80253a8:	e7d9      	b.n	802535e <sniprintf+0x16>
 80253aa:	bf00      	nop
 80253ac:	2000048c 	.word	0x2000048c

080253b0 <siprintf>:
 80253b0:	b40e      	push	{r1, r2, r3}
 80253b2:	b500      	push	{lr}
 80253b4:	b09c      	sub	sp, #112	; 0x70
 80253b6:	ab1d      	add	r3, sp, #116	; 0x74
 80253b8:	9002      	str	r0, [sp, #8]
 80253ba:	9006      	str	r0, [sp, #24]
 80253bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80253c0:	4809      	ldr	r0, [pc, #36]	; (80253e8 <siprintf+0x38>)
 80253c2:	9107      	str	r1, [sp, #28]
 80253c4:	9104      	str	r1, [sp, #16]
 80253c6:	4909      	ldr	r1, [pc, #36]	; (80253ec <siprintf+0x3c>)
 80253c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80253cc:	9105      	str	r1, [sp, #20]
 80253ce:	6800      	ldr	r0, [r0, #0]
 80253d0:	9301      	str	r3, [sp, #4]
 80253d2:	a902      	add	r1, sp, #8
 80253d4:	f002 ff20 	bl	8028218 <_svfiprintf_r>
 80253d8:	9b02      	ldr	r3, [sp, #8]
 80253da:	2200      	movs	r2, #0
 80253dc:	701a      	strb	r2, [r3, #0]
 80253de:	b01c      	add	sp, #112	; 0x70
 80253e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80253e4:	b003      	add	sp, #12
 80253e6:	4770      	bx	lr
 80253e8:	2000048c 	.word	0x2000048c
 80253ec:	ffff0208 	.word	0xffff0208

080253f0 <siscanf>:
 80253f0:	b40e      	push	{r1, r2, r3}
 80253f2:	b510      	push	{r4, lr}
 80253f4:	b09f      	sub	sp, #124	; 0x7c
 80253f6:	ac21      	add	r4, sp, #132	; 0x84
 80253f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80253fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8025400:	9201      	str	r2, [sp, #4]
 8025402:	f8ad 101c 	strh.w	r1, [sp, #28]
 8025406:	9004      	str	r0, [sp, #16]
 8025408:	9008      	str	r0, [sp, #32]
 802540a:	f7da ff23 	bl	8000254 <strlen>
 802540e:	4b0c      	ldr	r3, [pc, #48]	; (8025440 <siscanf+0x50>)
 8025410:	9005      	str	r0, [sp, #20]
 8025412:	9009      	str	r0, [sp, #36]	; 0x24
 8025414:	930d      	str	r3, [sp, #52]	; 0x34
 8025416:	480b      	ldr	r0, [pc, #44]	; (8025444 <siscanf+0x54>)
 8025418:	9a01      	ldr	r2, [sp, #4]
 802541a:	6800      	ldr	r0, [r0, #0]
 802541c:	9403      	str	r4, [sp, #12]
 802541e:	2300      	movs	r3, #0
 8025420:	9311      	str	r3, [sp, #68]	; 0x44
 8025422:	9316      	str	r3, [sp, #88]	; 0x58
 8025424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025428:	f8ad 301e 	strh.w	r3, [sp, #30]
 802542c:	a904      	add	r1, sp, #16
 802542e:	4623      	mov	r3, r4
 8025430:	f003 f84c 	bl	80284cc <__ssvfiscanf_r>
 8025434:	b01f      	add	sp, #124	; 0x7c
 8025436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802543a:	b003      	add	sp, #12
 802543c:	4770      	bx	lr
 802543e:	bf00      	nop
 8025440:	0802546b 	.word	0x0802546b
 8025444:	2000048c 	.word	0x2000048c

08025448 <__sread>:
 8025448:	b510      	push	{r4, lr}
 802544a:	460c      	mov	r4, r1
 802544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025450:	f003 fca8 	bl	8028da4 <_read_r>
 8025454:	2800      	cmp	r0, #0
 8025456:	bfab      	itete	ge
 8025458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802545a:	89a3      	ldrhlt	r3, [r4, #12]
 802545c:	181b      	addge	r3, r3, r0
 802545e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025462:	bfac      	ite	ge
 8025464:	6563      	strge	r3, [r4, #84]	; 0x54
 8025466:	81a3      	strhlt	r3, [r4, #12]
 8025468:	bd10      	pop	{r4, pc}

0802546a <__seofread>:
 802546a:	2000      	movs	r0, #0
 802546c:	4770      	bx	lr

0802546e <__swrite>:
 802546e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025472:	461f      	mov	r7, r3
 8025474:	898b      	ldrh	r3, [r1, #12]
 8025476:	05db      	lsls	r3, r3, #23
 8025478:	4605      	mov	r5, r0
 802547a:	460c      	mov	r4, r1
 802547c:	4616      	mov	r6, r2
 802547e:	d505      	bpl.n	802548c <__swrite+0x1e>
 8025480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025484:	2302      	movs	r3, #2
 8025486:	2200      	movs	r2, #0
 8025488:	f002 fa1e 	bl	80278c8 <_lseek_r>
 802548c:	89a3      	ldrh	r3, [r4, #12]
 802548e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025496:	81a3      	strh	r3, [r4, #12]
 8025498:	4632      	mov	r2, r6
 802549a:	463b      	mov	r3, r7
 802549c:	4628      	mov	r0, r5
 802549e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80254a2:	f001 b931 	b.w	8026708 <_write_r>

080254a6 <__sseek>:
 80254a6:	b510      	push	{r4, lr}
 80254a8:	460c      	mov	r4, r1
 80254aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254ae:	f002 fa0b 	bl	80278c8 <_lseek_r>
 80254b2:	1c43      	adds	r3, r0, #1
 80254b4:	89a3      	ldrh	r3, [r4, #12]
 80254b6:	bf15      	itete	ne
 80254b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80254ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80254be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80254c2:	81a3      	strheq	r3, [r4, #12]
 80254c4:	bf18      	it	ne
 80254c6:	81a3      	strhne	r3, [r4, #12]
 80254c8:	bd10      	pop	{r4, pc}

080254ca <__sclose>:
 80254ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80254ce:	f001 ba05 	b.w	80268dc <_close_r>

080254d2 <stpcpy>:
 80254d2:	4603      	mov	r3, r0
 80254d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80254d8:	4618      	mov	r0, r3
 80254da:	f803 2b01 	strb.w	r2, [r3], #1
 80254de:	2a00      	cmp	r2, #0
 80254e0:	d1f8      	bne.n	80254d4 <stpcpy+0x2>
 80254e2:	4770      	bx	lr

080254e4 <strchr>:
 80254e4:	b2c9      	uxtb	r1, r1
 80254e6:	4603      	mov	r3, r0
 80254e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80254ec:	b11a      	cbz	r2, 80254f6 <strchr+0x12>
 80254ee:	428a      	cmp	r2, r1
 80254f0:	d1f9      	bne.n	80254e6 <strchr+0x2>
 80254f2:	4618      	mov	r0, r3
 80254f4:	4770      	bx	lr
 80254f6:	2900      	cmp	r1, #0
 80254f8:	bf18      	it	ne
 80254fa:	2300      	movne	r3, #0
 80254fc:	e7f9      	b.n	80254f2 <strchr+0xe>

080254fe <strcpy>:
 80254fe:	4603      	mov	r3, r0
 8025500:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025504:	f803 2b01 	strb.w	r2, [r3], #1
 8025508:	2a00      	cmp	r2, #0
 802550a:	d1f9      	bne.n	8025500 <strcpy+0x2>
 802550c:	4770      	bx	lr
 802550e:	Address 0x000000000802550e is out of bounds.


08025510 <iso_year_adjust>:
 8025510:	6942      	ldr	r2, [r0, #20]
 8025512:	2a00      	cmp	r2, #0
 8025514:	f240 736c 	movw	r3, #1900	; 0x76c
 8025518:	bfa8      	it	ge
 802551a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802551e:	4413      	add	r3, r2
 8025520:	0792      	lsls	r2, r2, #30
 8025522:	d105      	bne.n	8025530 <iso_year_adjust+0x20>
 8025524:	2164      	movs	r1, #100	; 0x64
 8025526:	fb93 f2f1 	sdiv	r2, r3, r1
 802552a:	fb01 3212 	mls	r2, r1, r2, r3
 802552e:	b9da      	cbnz	r2, 8025568 <iso_year_adjust+0x58>
 8025530:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025534:	fb93 f1f2 	sdiv	r1, r3, r2
 8025538:	fb02 3311 	mls	r3, r2, r1, r3
 802553c:	fab3 f383 	clz	r3, r3
 8025540:	095b      	lsrs	r3, r3, #5
 8025542:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8025546:	0040      	lsls	r0, r0, #1
 8025548:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802554c:	4418      	add	r0, r3
 802554e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8025552:	4298      	cmp	r0, r3
 8025554:	d03a      	beq.n	80255cc <iso_year_adjust+0xbc>
 8025556:	dc21      	bgt.n	802559c <iso_year_adjust+0x8c>
 8025558:	2801      	cmp	r0, #1
 802555a:	dc1a      	bgt.n	8025592 <iso_year_adjust+0x82>
 802555c:	2800      	cmp	r0, #0
 802555e:	bfb4      	ite	lt
 8025560:	2000      	movlt	r0, #0
 8025562:	f04f 30ff 	movge.w	r0, #4294967295
 8025566:	4770      	bx	lr
 8025568:	2301      	movs	r3, #1
 802556a:	e7ea      	b.n	8025542 <iso_year_adjust+0x32>
 802556c:	2817      	cmp	r0, #23
 802556e:	d813      	bhi.n	8025598 <iso_year_adjust+0x88>
 8025570:	e8df f000 	tbb	[pc, r0]
 8025574:	0c0c0c0c 	.word	0x0c0c0c0c
 8025578:	0c0c1212 	.word	0x0c0c1212
 802557c:	12121212 	.word	0x12121212
 8025580:	12121212 	.word	0x12121212
 8025584:	0c0c1212 	.word	0x0c0c1212
 8025588:	0c0c1212 	.word	0x0c0c1212
 802558c:	f04f 30ff 	mov.w	r0, #4294967295
 8025590:	4770      	bx	lr
 8025592:	380a      	subs	r0, #10
 8025594:	2817      	cmp	r0, #23
 8025596:	d9e9      	bls.n	802556c <iso_year_adjust+0x5c>
 8025598:	2000      	movs	r0, #0
 802559a:	4770      	bx	lr
 802559c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80255a0:	4298      	cmp	r0, r3
 80255a2:	dc06      	bgt.n	80255b2 <iso_year_adjust+0xa2>
 80255a4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80255a8:	4298      	cmp	r0, r3
 80255aa:	bfd4      	ite	le
 80255ac:	2000      	movle	r0, #0
 80255ae:	2001      	movgt	r0, #1
 80255b0:	4770      	bx	lr
 80255b2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80255b6:	3802      	subs	r0, #2
 80255b8:	2815      	cmp	r0, #21
 80255ba:	d8ed      	bhi.n	8025598 <iso_year_adjust+0x88>
 80255bc:	2301      	movs	r3, #1
 80255be:	4083      	lsls	r3, r0
 80255c0:	4803      	ldr	r0, [pc, #12]	; (80255d0 <iso_year_adjust+0xc0>)
 80255c2:	4018      	ands	r0, r3
 80255c4:	3800      	subs	r0, #0
 80255c6:	bf18      	it	ne
 80255c8:	2001      	movne	r0, #1
 80255ca:	4770      	bx	lr
 80255cc:	2001      	movs	r0, #1
 80255ce:	4770      	bx	lr
 80255d0:	002a001f 	.word	0x002a001f

080255d4 <__strftime.isra.0>:
 80255d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255d8:	b08f      	sub	sp, #60	; 0x3c
 80255da:	461e      	mov	r6, r3
 80255dc:	2300      	movs	r3, #0
 80255de:	4607      	mov	r7, r0
 80255e0:	460d      	mov	r5, r1
 80255e2:	9302      	str	r3, [sp, #8]
 80255e4:	461c      	mov	r4, r3
 80255e6:	7813      	ldrb	r3, [r2, #0]
 80255e8:	2b00      	cmp	r3, #0
 80255ea:	f000 84ba 	beq.w	8025f62 <__strftime.isra.0+0x98e>
 80255ee:	2b25      	cmp	r3, #37	; 0x25
 80255f0:	d11f      	bne.n	8025632 <__strftime.isra.0+0x5e>
 80255f2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80255f6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80255fa:	d024      	beq.n	8025646 <__strftime.isra.0+0x72>
 80255fc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025600:	d021      	beq.n	8025646 <__strftime.isra.0+0x72>
 8025602:	f102 0801 	add.w	r8, r2, #1
 8025606:	f04f 0b00 	mov.w	fp, #0
 802560a:	f898 2000 	ldrb.w	r2, [r8]
 802560e:	3a31      	subs	r2, #49	; 0x31
 8025610:	2a08      	cmp	r2, #8
 8025612:	d81b      	bhi.n	802564c <__strftime.isra.0+0x78>
 8025614:	4640      	mov	r0, r8
 8025616:	220a      	movs	r2, #10
 8025618:	a906      	add	r1, sp, #24
 802561a:	f000 fddd 	bl	80261d8 <strtoul>
 802561e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025622:	4681      	mov	r9, r0
 8025624:	f898 2000 	ldrb.w	r2, [r8]
 8025628:	2a45      	cmp	r2, #69	; 0x45
 802562a:	d112      	bne.n	8025652 <__strftime.isra.0+0x7e>
 802562c:	f108 0801 	add.w	r8, r8, #1
 8025630:	e011      	b.n	8025656 <__strftime.isra.0+0x82>
 8025632:	1e69      	subs	r1, r5, #1
 8025634:	42a1      	cmp	r1, r4
 8025636:	d802      	bhi.n	802563e <__strftime.isra.0+0x6a>
 8025638:	2400      	movs	r4, #0
 802563a:	f000 bc95 	b.w	8025f68 <__strftime.isra.0+0x994>
 802563e:	553b      	strb	r3, [r7, r4]
 8025640:	3201      	adds	r2, #1
 8025642:	3401      	adds	r4, #1
 8025644:	e7cf      	b.n	80255e6 <__strftime.isra.0+0x12>
 8025646:	f102 0802 	add.w	r8, r2, #2
 802564a:	e7de      	b.n	802560a <__strftime.isra.0+0x36>
 802564c:	f04f 0900 	mov.w	r9, #0
 8025650:	e7e8      	b.n	8025624 <__strftime.isra.0+0x50>
 8025652:	2a4f      	cmp	r2, #79	; 0x4f
 8025654:	d0ea      	beq.n	802562c <__strftime.isra.0+0x58>
 8025656:	f898 0000 	ldrb.w	r0, [r8]
 802565a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 802565e:	2a55      	cmp	r2, #85	; 0x55
 8025660:	d8ea      	bhi.n	8025638 <__strftime.isra.0+0x64>
 8025662:	a301      	add	r3, pc, #4	; (adr r3, 8025668 <__strftime.isra.0+0x94>)
 8025664:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8025668:	08025f57 	.word	0x08025f57
 802566c:	08025639 	.word	0x08025639
 8025670:	08025639 	.word	0x08025639
 8025674:	08025639 	.word	0x08025639
 8025678:	08025639 	.word	0x08025639
 802567c:	08025639 	.word	0x08025639
 8025680:	08025639 	.word	0x08025639
 8025684:	08025639 	.word	0x08025639
 8025688:	08025639 	.word	0x08025639
 802568c:	08025639 	.word	0x08025639
 8025690:	08025639 	.word	0x08025639
 8025694:	08025639 	.word	0x08025639
 8025698:	08025639 	.word	0x08025639
 802569c:	08025639 	.word	0x08025639
 80256a0:	08025639 	.word	0x08025639
 80256a4:	08025639 	.word	0x08025639
 80256a8:	08025639 	.word	0x08025639
 80256ac:	08025639 	.word	0x08025639
 80256b0:	08025639 	.word	0x08025639
 80256b4:	08025639 	.word	0x08025639
 80256b8:	08025639 	.word	0x08025639
 80256bc:	08025639 	.word	0x08025639
 80256c0:	08025639 	.word	0x08025639
 80256c4:	08025639 	.word	0x08025639
 80256c8:	08025639 	.word	0x08025639
 80256cc:	08025639 	.word	0x08025639
 80256d0:	08025639 	.word	0x08025639
 80256d4:	08025639 	.word	0x08025639
 80256d8:	080257fd 	.word	0x080257fd
 80256dc:	08025855 	.word	0x08025855
 80256e0:	080258c3 	.word	0x080258c3
 80256e4:	08025961 	.word	0x08025961
 80256e8:	08025639 	.word	0x08025639
 80256ec:	080259ad 	.word	0x080259ad
 80256f0:	08025a99 	.word	0x08025a99
 80256f4:	08025b73 	.word	0x08025b73
 80256f8:	08025b81 	.word	0x08025b81
 80256fc:	08025639 	.word	0x08025639
 8025700:	08025639 	.word	0x08025639
 8025704:	08025639 	.word	0x08025639
 8025708:	08025bb1 	.word	0x08025bb1
 802570c:	08025639 	.word	0x08025639
 8025710:	08025639 	.word	0x08025639
 8025714:	08025bc5 	.word	0x08025bc5
 8025718:	08025639 	.word	0x08025639
 802571c:	08025c17 	.word	0x08025c17
 8025720:	08025d2b 	.word	0x08025d2b
 8025724:	08025d3b 	.word	0x08025d3b
 8025728:	08025d63 	.word	0x08025d63
 802572c:	08025d9d 	.word	0x08025d9d
 8025730:	08025e11 	.word	0x08025e11
 8025734:	080258bb 	.word	0x080258bb
 8025738:	08025e3d 	.word	0x08025e3d
 802573c:	08025f05 	.word	0x08025f05
 8025740:	08025639 	.word	0x08025639
 8025744:	08025639 	.word	0x08025639
 8025748:	08025639 	.word	0x08025639
 802574c:	08025639 	.word	0x08025639
 8025750:	08025639 	.word	0x08025639
 8025754:	08025639 	.word	0x08025639
 8025758:	080257c1 	.word	0x080257c1
 802575c:	0802582b 	.word	0x0802582b
 8025760:	08025881 	.word	0x08025881
 8025764:	0802593d 	.word	0x0802593d
 8025768:	0802593d 	.word	0x0802593d
 802576c:	08025639 	.word	0x08025639
 8025770:	080259ff 	.word	0x080259ff
 8025774:	0802582b 	.word	0x0802582b
 8025778:	08025639 	.word	0x08025639
 802577c:	08025ba3 	.word	0x08025ba3
 8025780:	08025b73 	.word	0x08025b73
 8025784:	08025b81 	.word	0x08025b81
 8025788:	08025bab 	.word	0x08025bab
 802578c:	08025bb5 	.word	0x08025bb5
 8025790:	08025639 	.word	0x08025639
 8025794:	08025bc5 	.word	0x08025bc5
 8025798:	08025639 	.word	0x08025639
 802579c:	080258ab 	.word	0x080258ab
 80257a0:	08025c29 	.word	0x08025c29
 80257a4:	08025d2f 	.word	0x08025d2f
 80257a8:	08025d49 	.word	0x08025d49
 80257ac:	08025639 	.word	0x08025639
 80257b0:	08025e03 	.word	0x08025e03
 80257b4:	080258b3 	.word	0x080258b3
 80257b8:	08025e21 	.word	0x08025e21
 80257bc:	08025e8f 	.word	0x08025e8f
 80257c0:	69b3      	ldr	r3, [r6, #24]
 80257c2:	4aa9      	ldr	r2, [pc, #676]	; (8025a68 <__strftime.isra.0+0x494>)
 80257c4:	3318      	adds	r3, #24
 80257c6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80257ca:	4648      	mov	r0, r9
 80257cc:	f7da fd42 	bl	8000254 <strlen>
 80257d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80257d4:	4420      	add	r0, r4
 80257d6:	1e6b      	subs	r3, r5, #1
 80257d8:	42a0      	cmp	r0, r4
 80257da:	d107      	bne.n	80257ec <__strftime.isra.0+0x218>
 80257dc:	f898 3000 	ldrb.w	r3, [r8]
 80257e0:	2b00      	cmp	r3, #0
 80257e2:	f000 83be 	beq.w	8025f62 <__strftime.isra.0+0x98e>
 80257e6:	f108 0201 	add.w	r2, r8, #1
 80257ea:	e6fc      	b.n	80255e6 <__strftime.isra.0+0x12>
 80257ec:	42a3      	cmp	r3, r4
 80257ee:	f67f af23 	bls.w	8025638 <__strftime.isra.0+0x64>
 80257f2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80257f6:	553a      	strb	r2, [r7, r4]
 80257f8:	3401      	adds	r4, #1
 80257fa:	e7ed      	b.n	80257d8 <__strftime.isra.0+0x204>
 80257fc:	69b2      	ldr	r2, [r6, #24]
 80257fe:	4b9a      	ldr	r3, [pc, #616]	; (8025a68 <__strftime.isra.0+0x494>)
 8025800:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025804:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025808:	4648      	mov	r0, r9
 802580a:	f7da fd23 	bl	8000254 <strlen>
 802580e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025812:	4420      	add	r0, r4
 8025814:	1e6b      	subs	r3, r5, #1
 8025816:	42a0      	cmp	r0, r4
 8025818:	d0e0      	beq.n	80257dc <__strftime.isra.0+0x208>
 802581a:	42a3      	cmp	r3, r4
 802581c:	f67f af0c 	bls.w	8025638 <__strftime.isra.0+0x64>
 8025820:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025824:	553a      	strb	r2, [r7, r4]
 8025826:	3401      	adds	r4, #1
 8025828:	e7f5      	b.n	8025816 <__strftime.isra.0+0x242>
 802582a:	4b8f      	ldr	r3, [pc, #572]	; (8025a68 <__strftime.isra.0+0x494>)
 802582c:	6932      	ldr	r2, [r6, #16]
 802582e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8025832:	4648      	mov	r0, r9
 8025834:	f7da fd0e 	bl	8000254 <strlen>
 8025838:	f109 39ff 	add.w	r9, r9, #4294967295
 802583c:	4420      	add	r0, r4
 802583e:	1e6b      	subs	r3, r5, #1
 8025840:	42a0      	cmp	r0, r4
 8025842:	d0cb      	beq.n	80257dc <__strftime.isra.0+0x208>
 8025844:	42a3      	cmp	r3, r4
 8025846:	f67f aef7 	bls.w	8025638 <__strftime.isra.0+0x64>
 802584a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802584e:	553a      	strb	r2, [r7, r4]
 8025850:	3401      	adds	r4, #1
 8025852:	e7f5      	b.n	8025840 <__strftime.isra.0+0x26c>
 8025854:	6933      	ldr	r3, [r6, #16]
 8025856:	4a84      	ldr	r2, [pc, #528]	; (8025a68 <__strftime.isra.0+0x494>)
 8025858:	330c      	adds	r3, #12
 802585a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802585e:	4648      	mov	r0, r9
 8025860:	f7da fcf8 	bl	8000254 <strlen>
 8025864:	f109 39ff 	add.w	r9, r9, #4294967295
 8025868:	4420      	add	r0, r4
 802586a:	1e6b      	subs	r3, r5, #1
 802586c:	42a0      	cmp	r0, r4
 802586e:	d0b5      	beq.n	80257dc <__strftime.isra.0+0x208>
 8025870:	42a3      	cmp	r3, r4
 8025872:	f67f aee1 	bls.w	8025638 <__strftime.isra.0+0x64>
 8025876:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802587a:	553a      	strb	r2, [r7, r4]
 802587c:	3401      	adds	r4, #1
 802587e:	e7f5      	b.n	802586c <__strftime.isra.0+0x298>
 8025880:	4b79      	ldr	r3, [pc, #484]	; (8025a68 <__strftime.isra.0+0x494>)
 8025882:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8025886:	4648      	mov	r0, r9
 8025888:	f7da fce4 	bl	8000254 <strlen>
 802588c:	f899 3000 	ldrb.w	r3, [r9]
 8025890:	2b00      	cmp	r3, #0
 8025892:	d0a3      	beq.n	80257dc <__strftime.isra.0+0x208>
 8025894:	4633      	mov	r3, r6
 8025896:	464a      	mov	r2, r9
 8025898:	1b29      	subs	r1, r5, r4
 802589a:	1938      	adds	r0, r7, r4
 802589c:	f7ff fe9a 	bl	80255d4 <__strftime.isra.0>
 80258a0:	2800      	cmp	r0, #0
 80258a2:	f77f aec9 	ble.w	8025638 <__strftime.isra.0+0x64>
 80258a6:	4404      	add	r4, r0
 80258a8:	e798      	b.n	80257dc <__strftime.isra.0+0x208>
 80258aa:	4b6f      	ldr	r3, [pc, #444]	; (8025a68 <__strftime.isra.0+0x494>)
 80258ac:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80258b0:	e7e9      	b.n	8025886 <__strftime.isra.0+0x2b2>
 80258b2:	4b6d      	ldr	r3, [pc, #436]	; (8025a68 <__strftime.isra.0+0x494>)
 80258b4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80258b8:	e7e5      	b.n	8025886 <__strftime.isra.0+0x2b2>
 80258ba:	4b6b      	ldr	r3, [pc, #428]	; (8025a68 <__strftime.isra.0+0x494>)
 80258bc:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80258c0:	e7e1      	b.n	8025886 <__strftime.isra.0+0x2b2>
 80258c2:	496a      	ldr	r1, [pc, #424]	; (8025a6c <__strftime.isra.0+0x498>)
 80258c4:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80258c8:	458a      	cmp	sl, r1
 80258ca:	bfac      	ite	ge
 80258cc:	2100      	movge	r1, #0
 80258ce:	2101      	movlt	r1, #1
 80258d0:	f1ba 0f00 	cmp.w	sl, #0
 80258d4:	db11      	blt.n	80258fa <__strftime.isra.0+0x326>
 80258d6:	2064      	movs	r0, #100	; 0x64
 80258d8:	fb9a f0f0 	sdiv	r0, sl, r0
 80258dc:	3013      	adds	r0, #19
 80258de:	f1bb 0f00 	cmp.w	fp, #0
 80258e2:	d014      	beq.n	802590e <__strftime.isra.0+0x33a>
 80258e4:	2863      	cmp	r0, #99	; 0x63
 80258e6:	dd27      	ble.n	8025938 <__strftime.isra.0+0x364>
 80258e8:	4b61      	ldr	r3, [pc, #388]	; (8025a70 <__strftime.isra.0+0x49c>)
 80258ea:	4a62      	ldr	r2, [pc, #392]	; (8025a74 <__strftime.isra.0+0x4a0>)
 80258ec:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80258f0:	bf18      	it	ne
 80258f2:	461a      	movne	r2, r3
 80258f4:	f8df c198 	ldr.w	ip, [pc, #408]	; 8025a90 <__strftime.isra.0+0x4bc>
 80258f8:	e00c      	b.n	8025914 <__strftime.isra.0+0x340>
 80258fa:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80258fe:	9103      	str	r1, [sp, #12]
 8025900:	f000 ff82 	bl	8026808 <abs>
 8025904:	2264      	movs	r2, #100	; 0x64
 8025906:	9903      	ldr	r1, [sp, #12]
 8025908:	fb90 f0f2 	sdiv	r0, r0, r2
 802590c:	e7e7      	b.n	80258de <__strftime.isra.0+0x30a>
 802590e:	4a58      	ldr	r2, [pc, #352]	; (8025a70 <__strftime.isra.0+0x49c>)
 8025910:	f8df c180 	ldr.w	ip, [pc, #384]	; 8025a94 <__strftime.isra.0+0x4c0>
 8025914:	4b58      	ldr	r3, [pc, #352]	; (8025a78 <__strftime.isra.0+0x4a4>)
 8025916:	9001      	str	r0, [sp, #4]
 8025918:	f1b9 0f02 	cmp.w	r9, #2
 802591c:	bf2c      	ite	cs
 802591e:	ebc1 0109 	rsbcs	r1, r1, r9
 8025922:	f1c1 0102 	rsbcc	r1, r1, #2
 8025926:	9100      	str	r1, [sp, #0]
 8025928:	4950      	ldr	r1, [pc, #320]	; (8025a6c <__strftime.isra.0+0x498>)
 802592a:	458a      	cmp	sl, r1
 802592c:	bfa8      	it	ge
 802592e:	4613      	movge	r3, r2
 8025930:	4662      	mov	r2, ip
 8025932:	1b29      	subs	r1, r5, r4
 8025934:	1938      	adds	r0, r7, r4
 8025936:	e028      	b.n	802598a <__strftime.isra.0+0x3b6>
 8025938:	4a4d      	ldr	r2, [pc, #308]	; (8025a70 <__strftime.isra.0+0x49c>)
 802593a:	e7db      	b.n	80258f4 <__strftime.isra.0+0x320>
 802593c:	494f      	ldr	r1, [pc, #316]	; (8025a7c <__strftime.isra.0+0x4a8>)
 802593e:	4a50      	ldr	r2, [pc, #320]	; (8025a80 <__strftime.isra.0+0x4ac>)
 8025940:	68f3      	ldr	r3, [r6, #12]
 8025942:	2864      	cmp	r0, #100	; 0x64
 8025944:	bf08      	it	eq
 8025946:	460a      	moveq	r2, r1
 8025948:	1b29      	subs	r1, r5, r4
 802594a:	1938      	adds	r0, r7, r4
 802594c:	f7ff fcfc 	bl	8025348 <sniprintf>
 8025950:	2800      	cmp	r0, #0
 8025952:	f6ff ae71 	blt.w	8025638 <__strftime.isra.0+0x64>
 8025956:	4404      	add	r4, r0
 8025958:	42a5      	cmp	r5, r4
 802595a:	f63f af3f 	bhi.w	80257dc <__strftime.isra.0+0x208>
 802595e:	e66b      	b.n	8025638 <__strftime.isra.0+0x64>
 8025960:	6970      	ldr	r0, [r6, #20]
 8025962:	6933      	ldr	r3, [r6, #16]
 8025964:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8025968:	2800      	cmp	r0, #0
 802596a:	eb07 0904 	add.w	r9, r7, r4
 802596e:	eba5 0104 	sub.w	r1, r5, r4
 8025972:	f103 0301 	add.w	r3, r3, #1
 8025976:	db0b      	blt.n	8025990 <__strftime.isra.0+0x3bc>
 8025978:	2264      	movs	r2, #100	; 0x64
 802597a:	fb90 fcf2 	sdiv	ip, r0, r2
 802597e:	fb02 001c 	mls	r0, r2, ip, r0
 8025982:	4a40      	ldr	r2, [pc, #256]	; (8025a84 <__strftime.isra.0+0x4b0>)
 8025984:	e9cd a000 	strd	sl, r0, [sp]
 8025988:	4648      	mov	r0, r9
 802598a:	f7ff fcdd 	bl	8025348 <sniprintf>
 802598e:	e7df      	b.n	8025950 <__strftime.isra.0+0x37c>
 8025990:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025994:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8025998:	f000 ff36 	bl	8026808 <abs>
 802599c:	2264      	movs	r2, #100	; 0x64
 802599e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80259a2:	fb90 fcf2 	sdiv	ip, r0, r2
 80259a6:	fb0c 0012 	mls	r0, ip, r2, r0
 80259aa:	e7ea      	b.n	8025982 <__strftime.isra.0+0x3ae>
 80259ac:	2225      	movs	r2, #37	; 0x25
 80259ae:	f88d 2018 	strb.w	r2, [sp, #24]
 80259b2:	f1bb 0f00 	cmp.w	fp, #0
 80259b6:	d011      	beq.n	80259dc <__strftime.isra.0+0x408>
 80259b8:	f1b9 0f06 	cmp.w	r9, #6
 80259bc:	bf38      	it	cc
 80259be:	f04f 0906 	movcc.w	r9, #6
 80259c2:	f1b9 0306 	subs.w	r3, r9, #6
 80259c6:	f88d b019 	strb.w	fp, [sp, #25]
 80259ca:	d10c      	bne.n	80259e6 <__strftime.isra.0+0x412>
 80259cc:	f10d 001a 	add.w	r0, sp, #26
 80259d0:	492d      	ldr	r1, [pc, #180]	; (8025a88 <__strftime.isra.0+0x4b4>)
 80259d2:	f7ff fd94 	bl	80254fe <strcpy>
 80259d6:	4633      	mov	r3, r6
 80259d8:	aa06      	add	r2, sp, #24
 80259da:	e75d      	b.n	8025898 <__strftime.isra.0+0x2c4>
 80259dc:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80259e0:	f04f 090a 	mov.w	r9, #10
 80259e4:	e7ed      	b.n	80259c2 <__strftime.isra.0+0x3ee>
 80259e6:	4a29      	ldr	r2, [pc, #164]	; (8025a8c <__strftime.isra.0+0x4b8>)
 80259e8:	211e      	movs	r1, #30
 80259ea:	f10d 001a 	add.w	r0, sp, #26
 80259ee:	f7ff fcab 	bl	8025348 <sniprintf>
 80259f2:	2800      	cmp	r0, #0
 80259f4:	ddea      	ble.n	80259cc <__strftime.isra.0+0x3f8>
 80259f6:	f10d 031a 	add.w	r3, sp, #26
 80259fa:	4418      	add	r0, r3
 80259fc:	e7e8      	b.n	80259d0 <__strftime.isra.0+0x3fc>
 80259fe:	4630      	mov	r0, r6
 8025a00:	f7ff fd86 	bl	8025510 <iso_year_adjust>
 8025a04:	4681      	mov	r9, r0
 8025a06:	6970      	ldr	r0, [r6, #20]
 8025a08:	2800      	cmp	r0, #0
 8025a0a:	db11      	blt.n	8025a30 <__strftime.isra.0+0x45c>
 8025a0c:	2364      	movs	r3, #100	; 0x64
 8025a0e:	fb90 f2f3 	sdiv	r2, r0, r3
 8025a12:	fb03 0012 	mls	r0, r3, r2, r0
 8025a16:	2264      	movs	r2, #100	; 0x64
 8025a18:	4481      	add	r9, r0
 8025a1a:	fb99 f3f2 	sdiv	r3, r9, r2
 8025a1e:	fb02 9913 	mls	r9, r2, r3, r9
 8025a22:	4491      	add	r9, r2
 8025a24:	fbb9 f3f2 	udiv	r3, r9, r2
 8025a28:	fb02 9313 	mls	r3, r2, r3, r9
 8025a2c:	4a13      	ldr	r2, [pc, #76]	; (8025a7c <__strftime.isra.0+0x4a8>)
 8025a2e:	e78b      	b.n	8025948 <__strftime.isra.0+0x374>
 8025a30:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025a34:	f000 fee8 	bl	8026808 <abs>
 8025a38:	2364      	movs	r3, #100	; 0x64
 8025a3a:	f1b9 0f00 	cmp.w	r9, #0
 8025a3e:	fb90 f2f3 	sdiv	r2, r0, r3
 8025a42:	fb02 0013 	mls	r0, r2, r3, r0
 8025a46:	da07      	bge.n	8025a58 <__strftime.isra.0+0x484>
 8025a48:	6972      	ldr	r2, [r6, #20]
 8025a4a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8025a4e:	429a      	cmp	r2, r3
 8025a50:	bfb8      	it	lt
 8025a52:	f04f 0901 	movlt.w	r9, #1
 8025a56:	e7de      	b.n	8025a16 <__strftime.isra.0+0x442>
 8025a58:	d0dd      	beq.n	8025a16 <__strftime.isra.0+0x442>
 8025a5a:	6972      	ldr	r2, [r6, #20]
 8025a5c:	4b03      	ldr	r3, [pc, #12]	; (8025a6c <__strftime.isra.0+0x498>)
 8025a5e:	429a      	cmp	r2, r3
 8025a60:	bfb8      	it	lt
 8025a62:	f04f 39ff 	movlt.w	r9, #4294967295
 8025a66:	e7d6      	b.n	8025a16 <__strftime.isra.0+0x442>
 8025a68:	080459b4 	.word	0x080459b4
 8025a6c:	fffff894 	.word	0xfffff894
 8025a70:	08045b67 	.word	0x08045b67
 8025a74:	0804583c 	.word	0x0804583c
 8025a78:	08045dc6 	.word	0x08045dc6
 8025a7c:	0804584c 	.word	0x0804584c
 8025a80:	0804583e 	.word	0x0804583e
 8025a84:	08045842 	.word	0x08045842
 8025a88:	08045855 	.word	0x08045855
 8025a8c:	08045851 	.word	0x08045851
 8025a90:	08045834 	.word	0x08045834
 8025a94:	0804582d 	.word	0x0804582d
 8025a98:	6971      	ldr	r1, [r6, #20]
 8025a9a:	4ab6      	ldr	r2, [pc, #728]	; (8025d74 <__strftime.isra.0+0x7a0>)
 8025a9c:	4291      	cmp	r1, r2
 8025a9e:	bfac      	ite	ge
 8025aa0:	2300      	movge	r3, #0
 8025aa2:	2301      	movlt	r3, #1
 8025aa4:	4630      	mov	r0, r6
 8025aa6:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8025aaa:	f7ff fd31 	bl	8025510 <iso_year_adjust>
 8025aae:	9904      	ldr	r1, [sp, #16]
 8025ab0:	2900      	cmp	r1, #0
 8025ab2:	4682      	mov	sl, r0
 8025ab4:	db2c      	blt.n	8025b10 <__strftime.isra.0+0x53c>
 8025ab6:	2264      	movs	r2, #100	; 0x64
 8025ab8:	fb91 f2f2 	sdiv	r2, r1, r2
 8025abc:	3213      	adds	r2, #19
 8025abe:	6970      	ldr	r0, [r6, #20]
 8025ac0:	2800      	cmp	r0, #0
 8025ac2:	db30      	blt.n	8025b26 <__strftime.isra.0+0x552>
 8025ac4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025ac8:	fb90 fefc 	sdiv	lr, r0, ip
 8025acc:	fb0c 001e 	mls	r0, ip, lr, r0
 8025ad0:	f1ba 0f00 	cmp.w	sl, #0
 8025ad4:	da36      	bge.n	8025b44 <__strftime.isra.0+0x570>
 8025ad6:	6971      	ldr	r1, [r6, #20]
 8025ad8:	4ba7      	ldr	r3, [pc, #668]	; (8025d78 <__strftime.isra.0+0x7a4>)
 8025ada:	4299      	cmp	r1, r3
 8025adc:	db3d      	blt.n	8025b5a <__strftime.isra.0+0x586>
 8025ade:	4482      	add	sl, r0
 8025ae0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8025ae4:	d13e      	bne.n	8025b64 <__strftime.isra.0+0x590>
 8025ae6:	3a01      	subs	r2, #1
 8025ae8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8025aec:	9b03      	ldr	r3, [sp, #12]
 8025aee:	2064      	movs	r0, #100	; 0x64
 8025af0:	fb00 aa02 	mla	sl, r0, r2, sl
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	f000 81ad 	beq.w	8025e54 <__strftime.isra.0+0x880>
 8025afa:	222d      	movs	r2, #45	; 0x2d
 8025afc:	f88d 2018 	strb.w	r2, [sp, #24]
 8025b00:	f1b9 0f00 	cmp.w	r9, #0
 8025b04:	d001      	beq.n	8025b0a <__strftime.isra.0+0x536>
 8025b06:	f109 39ff 	add.w	r9, r9, #4294967295
 8025b0a:	f10d 0219 	add.w	r2, sp, #25
 8025b0e:	e1ac      	b.n	8025e6a <__strftime.isra.0+0x896>
 8025b10:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8025b14:	9104      	str	r1, [sp, #16]
 8025b16:	f000 fe77 	bl	8026808 <abs>
 8025b1a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025b1e:	9904      	ldr	r1, [sp, #16]
 8025b20:	fb90 f2fc 	sdiv	r2, r0, ip
 8025b24:	e7cb      	b.n	8025abe <__strftime.isra.0+0x4ea>
 8025b26:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025b2a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8025b2e:	f000 fe6b 	bl	8026808 <abs>
 8025b32:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025b36:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8025b3a:	fb90 fefc 	sdiv	lr, r0, ip
 8025b3e:	fb0e 001c 	mls	r0, lr, ip, r0
 8025b42:	e7c5      	b.n	8025ad0 <__strftime.isra.0+0x4fc>
 8025b44:	d0cb      	beq.n	8025ade <__strftime.isra.0+0x50a>
 8025b46:	4b8b      	ldr	r3, [pc, #556]	; (8025d74 <__strftime.isra.0+0x7a0>)
 8025b48:	4299      	cmp	r1, r3
 8025b4a:	bfb4      	ite	lt
 8025b4c:	2301      	movlt	r3, #1
 8025b4e:	2300      	movge	r3, #0
 8025b50:	9303      	str	r3, [sp, #12]
 8025b52:	bfb8      	it	lt
 8025b54:	f04f 3aff 	movlt.w	sl, #4294967295
 8025b58:	e7c1      	b.n	8025ade <__strftime.isra.0+0x50a>
 8025b5a:	f04f 0a01 	mov.w	sl, #1
 8025b5e:	f8cd a00c 	str.w	sl, [sp, #12]
 8025b62:	e7bc      	b.n	8025ade <__strftime.isra.0+0x50a>
 8025b64:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8025b68:	bf04      	itt	eq
 8025b6a:	3201      	addeq	r2, #1
 8025b6c:	f04f 0a00 	moveq.w	sl, #0
 8025b70:	e7bc      	b.n	8025aec <__strftime.isra.0+0x518>
 8025b72:	4982      	ldr	r1, [pc, #520]	; (8025d7c <__strftime.isra.0+0x7a8>)
 8025b74:	4a82      	ldr	r2, [pc, #520]	; (8025d80 <__strftime.isra.0+0x7ac>)
 8025b76:	68b3      	ldr	r3, [r6, #8]
 8025b78:	286b      	cmp	r0, #107	; 0x6b
 8025b7a:	bf08      	it	eq
 8025b7c:	460a      	moveq	r2, r1
 8025b7e:	e6e3      	b.n	8025948 <__strftime.isra.0+0x374>
 8025b80:	68b3      	ldr	r3, [r6, #8]
 8025b82:	b163      	cbz	r3, 8025b9e <__strftime.isra.0+0x5ca>
 8025b84:	2b0c      	cmp	r3, #12
 8025b86:	d004      	beq.n	8025b92 <__strftime.isra.0+0x5be>
 8025b88:	210c      	movs	r1, #12
 8025b8a:	fb93 f2f1 	sdiv	r2, r3, r1
 8025b8e:	fb01 3312 	mls	r3, r1, r2, r3
 8025b92:	497b      	ldr	r1, [pc, #492]	; (8025d80 <__strftime.isra.0+0x7ac>)
 8025b94:	4a79      	ldr	r2, [pc, #484]	; (8025d7c <__strftime.isra.0+0x7a8>)
 8025b96:	2849      	cmp	r0, #73	; 0x49
 8025b98:	bf08      	it	eq
 8025b9a:	460a      	moveq	r2, r1
 8025b9c:	e6d4      	b.n	8025948 <__strftime.isra.0+0x374>
 8025b9e:	230c      	movs	r3, #12
 8025ba0:	e7f7      	b.n	8025b92 <__strftime.isra.0+0x5be>
 8025ba2:	69f3      	ldr	r3, [r6, #28]
 8025ba4:	4a77      	ldr	r2, [pc, #476]	; (8025d84 <__strftime.isra.0+0x7b0>)
 8025ba6:	3301      	adds	r3, #1
 8025ba8:	e6ce      	b.n	8025948 <__strftime.isra.0+0x374>
 8025baa:	6933      	ldr	r3, [r6, #16]
 8025bac:	3301      	adds	r3, #1
 8025bae:	e73d      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025bb0:	6873      	ldr	r3, [r6, #4]
 8025bb2:	e73b      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025bb4:	1e6b      	subs	r3, r5, #1
 8025bb6:	429c      	cmp	r4, r3
 8025bb8:	f4bf ad3e 	bcs.w	8025638 <__strftime.isra.0+0x64>
 8025bbc:	230a      	movs	r3, #10
 8025bbe:	553b      	strb	r3, [r7, r4]
 8025bc0:	3401      	adds	r4, #1
 8025bc2:	e60b      	b.n	80257dc <__strftime.isra.0+0x208>
 8025bc4:	68b3      	ldr	r3, [r6, #8]
 8025bc6:	2b0b      	cmp	r3, #11
 8025bc8:	4b6f      	ldr	r3, [pc, #444]	; (8025d88 <__strftime.isra.0+0x7b4>)
 8025bca:	bfd4      	ite	le
 8025bcc:	2200      	movle	r2, #0
 8025bce:	2201      	movgt	r2, #1
 8025bd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025bd4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8025bd8:	4648      	mov	r0, r9
 8025bda:	f7da fb3b 	bl	8000254 <strlen>
 8025bde:	f109 32ff 	add.w	r2, r9, #4294967295
 8025be2:	4420      	add	r0, r4
 8025be4:	f105 3cff 	add.w	ip, r5, #4294967295
 8025be8:	42a0      	cmp	r0, r4
 8025bea:	f43f adf7 	beq.w	80257dc <__strftime.isra.0+0x208>
 8025bee:	45a4      	cmp	ip, r4
 8025bf0:	f67f ad22 	bls.w	8025638 <__strftime.isra.0+0x64>
 8025bf4:	f898 1000 	ldrb.w	r1, [r8]
 8025bf8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025bfc:	2950      	cmp	r1, #80	; 0x50
 8025bfe:	d107      	bne.n	8025c10 <__strftime.isra.0+0x63c>
 8025c00:	4962      	ldr	r1, [pc, #392]	; (8025d8c <__strftime.isra.0+0x7b8>)
 8025c02:	5cc9      	ldrb	r1, [r1, r3]
 8025c04:	f001 0103 	and.w	r1, r1, #3
 8025c08:	2901      	cmp	r1, #1
 8025c0a:	bf08      	it	eq
 8025c0c:	3320      	addeq	r3, #32
 8025c0e:	b2db      	uxtb	r3, r3
 8025c10:	553b      	strb	r3, [r7, r4]
 8025c12:	3401      	adds	r4, #1
 8025c14:	e7e8      	b.n	8025be8 <__strftime.isra.0+0x614>
 8025c16:	6873      	ldr	r3, [r6, #4]
 8025c18:	9300      	str	r3, [sp, #0]
 8025c1a:	4a5d      	ldr	r2, [pc, #372]	; (8025d90 <__strftime.isra.0+0x7bc>)
 8025c1c:	68b3      	ldr	r3, [r6, #8]
 8025c1e:	1b29      	subs	r1, r5, r4
 8025c20:	1938      	adds	r0, r7, r4
 8025c22:	f7ff fb91 	bl	8025348 <sniprintf>
 8025c26:	e693      	b.n	8025950 <__strftime.isra.0+0x37c>
 8025c28:	6a33      	ldr	r3, [r6, #32]
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	db7a      	blt.n	8025d24 <__strftime.isra.0+0x750>
 8025c2e:	f000 fb87 	bl	8026340 <__tz_lock>
 8025c32:	9b02      	ldr	r3, [sp, #8]
 8025c34:	b90b      	cbnz	r3, 8025c3a <__strftime.isra.0+0x666>
 8025c36:	f000 fb8f 	bl	8026358 <_tzset_unlocked>
 8025c3a:	f001 fd8d 	bl	8027758 <__gettzinfo>
 8025c3e:	6a33      	ldr	r3, [r6, #32]
 8025c40:	2b00      	cmp	r3, #0
 8025c42:	bfd4      	ite	le
 8025c44:	2200      	movle	r2, #0
 8025c46:	2201      	movgt	r2, #1
 8025c48:	2328      	movs	r3, #40	; 0x28
 8025c4a:	fb02 3303 	mla	r3, r2, r3, r3
 8025c4e:	58c3      	ldr	r3, [r0, r3]
 8025c50:	f1c3 0900 	rsb	r9, r3, #0
 8025c54:	f000 fb7a 	bl	802634c <__tz_unlock>
 8025c58:	2301      	movs	r3, #1
 8025c5a:	9302      	str	r3, [sp, #8]
 8025c5c:	6972      	ldr	r2, [r6, #20]
 8025c5e:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8025c62:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8025c66:	f16c 0c00 	sbc.w	ip, ip, #0
 8025c6a:	f1bc 0f00 	cmp.w	ip, #0
 8025c6e:	eba5 0104 	sub.w	r1, r5, r4
 8025c72:	eb07 0004 	add.w	r0, r7, r4
 8025c76:	da02      	bge.n	8025c7e <__strftime.isra.0+0x6aa>
 8025c78:	3303      	adds	r3, #3
 8025c7a:	f14c 0c00 	adc.w	ip, ip, #0
 8025c7e:	089b      	lsrs	r3, r3, #2
 8025c80:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8025c84:	f102 3aff 	add.w	sl, r2, #4294967295
 8025c88:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8025c8c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8025c90:	fb9a fefe 	sdiv	lr, sl, lr
 8025c94:	ebb3 030e 	subs.w	r3, r3, lr
 8025c98:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8025c9c:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8025ca0:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8025ca4:	fb9a fefe 	sdiv	lr, sl, lr
 8025ca8:	eb13 030e 	adds.w	r3, r3, lr
 8025cac:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8025cb0:	3a46      	subs	r2, #70	; 0x46
 8025cb2:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025cb6:	fb0c f202 	mul.w	r2, ip, r2
 8025cba:	189b      	adds	r3, r3, r2
 8025cbc:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8025cc0:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8025cc4:	f04f 0c18 	mov.w	ip, #24
 8025cc8:	eb13 030e 	adds.w	r3, r3, lr
 8025ccc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025cd0:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025cd4:	fb0c e202 	mla	r2, ip, r2, lr
 8025cd8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8025cdc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8025ce0:	eb13 030e 	adds.w	r3, r3, lr
 8025ce4:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8025ce8:	fba3 320c 	umull	r3, r2, r3, ip
 8025cec:	fb0c 220e 	mla	r2, ip, lr, r2
 8025cf0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025cf4:	eb13 030e 	adds.w	r3, r3, lr
 8025cf8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025cfc:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025d00:	fb0c e202 	mla	r2, ip, r2, lr
 8025d04:	f8d6 e000 	ldr.w	lr, [r6]
 8025d08:	eb13 030e 	adds.w	r3, r3, lr
 8025d0c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025d10:	ebb3 0309 	subs.w	r3, r3, r9
 8025d14:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8025d18:	e9cd 3200 	strd	r3, r2, [sp]
 8025d1c:	4a1d      	ldr	r2, [pc, #116]	; (8025d94 <__strftime.isra.0+0x7c0>)
 8025d1e:	f7ff fb13 	bl	8025348 <sniprintf>
 8025d22:	e615      	b.n	8025950 <__strftime.isra.0+0x37c>
 8025d24:	f04f 0900 	mov.w	r9, #0
 8025d28:	e798      	b.n	8025c5c <__strftime.isra.0+0x688>
 8025d2a:	6833      	ldr	r3, [r6, #0]
 8025d2c:	e67e      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025d2e:	1e6b      	subs	r3, r5, #1
 8025d30:	429c      	cmp	r4, r3
 8025d32:	f4bf ac81 	bcs.w	8025638 <__strftime.isra.0+0x64>
 8025d36:	2309      	movs	r3, #9
 8025d38:	e741      	b.n	8025bbe <__strftime.isra.0+0x5ea>
 8025d3a:	6833      	ldr	r3, [r6, #0]
 8025d3c:	9301      	str	r3, [sp, #4]
 8025d3e:	6873      	ldr	r3, [r6, #4]
 8025d40:	9300      	str	r3, [sp, #0]
 8025d42:	4a15      	ldr	r2, [pc, #84]	; (8025d98 <__strftime.isra.0+0x7c4>)
 8025d44:	68b3      	ldr	r3, [r6, #8]
 8025d46:	e5f4      	b.n	8025932 <__strftime.isra.0+0x35e>
 8025d48:	1e6b      	subs	r3, r5, #1
 8025d4a:	429c      	cmp	r4, r3
 8025d4c:	f4bf ac74 	bcs.w	8025638 <__strftime.isra.0+0x64>
 8025d50:	69b3      	ldr	r3, [r6, #24]
 8025d52:	1c62      	adds	r2, r4, #1
 8025d54:	b91b      	cbnz	r3, 8025d5e <__strftime.isra.0+0x78a>
 8025d56:	2337      	movs	r3, #55	; 0x37
 8025d58:	553b      	strb	r3, [r7, r4]
 8025d5a:	4614      	mov	r4, r2
 8025d5c:	e53e      	b.n	80257dc <__strftime.isra.0+0x208>
 8025d5e:	3330      	adds	r3, #48	; 0x30
 8025d60:	e7fa      	b.n	8025d58 <__strftime.isra.0+0x784>
 8025d62:	69f3      	ldr	r3, [r6, #28]
 8025d64:	69b2      	ldr	r2, [r6, #24]
 8025d66:	3307      	adds	r3, #7
 8025d68:	1a9b      	subs	r3, r3, r2
 8025d6a:	2207      	movs	r2, #7
 8025d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025d70:	e65c      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025d72:	bf00      	nop
 8025d74:	fffff894 	.word	0xfffff894
 8025d78:	fffff895 	.word	0xfffff895
 8025d7c:	0804583e 	.word	0x0804583e
 8025d80:	0804584c 	.word	0x0804584c
 8025d84:	08045861 	.word	0x08045861
 8025d88:	080459b4 	.word	0x080459b4
 8025d8c:	08045505 	.word	0x08045505
 8025d90:	08045870 	.word	0x08045870
 8025d94:	08045866 	.word	0x08045866
 8025d98:	0804586b 	.word	0x0804586b
 8025d9c:	4630      	mov	r0, r6
 8025d9e:	f7ff fbb7 	bl	8025510 <iso_year_adjust>
 8025da2:	69b2      	ldr	r2, [r6, #24]
 8025da4:	b132      	cbz	r2, 8025db4 <__strftime.isra.0+0x7e0>
 8025da6:	3a01      	subs	r2, #1
 8025da8:	2800      	cmp	r0, #0
 8025daa:	dc28      	bgt.n	8025dfe <__strftime.isra.0+0x82a>
 8025dac:	69f3      	ldr	r3, [r6, #28]
 8025dae:	d103      	bne.n	8025db8 <__strftime.isra.0+0x7e4>
 8025db0:	330a      	adds	r3, #10
 8025db2:	e7d9      	b.n	8025d68 <__strftime.isra.0+0x794>
 8025db4:	2206      	movs	r2, #6
 8025db6:	e7f7      	b.n	8025da8 <__strftime.isra.0+0x7d4>
 8025db8:	6971      	ldr	r1, [r6, #20]
 8025dba:	2900      	cmp	r1, #0
 8025dbc:	eba2 0203 	sub.w	r2, r2, r3
 8025dc0:	f240 736b 	movw	r3, #1899	; 0x76b
 8025dc4:	bfa8      	it	ge
 8025dc6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8025dca:	440b      	add	r3, r1
 8025dcc:	0799      	lsls	r1, r3, #30
 8025dce:	d105      	bne.n	8025ddc <__strftime.isra.0+0x808>
 8025dd0:	2064      	movs	r0, #100	; 0x64
 8025dd2:	fb93 f1f0 	sdiv	r1, r3, r0
 8025dd6:	fb00 3111 	mls	r1, r0, r1, r3
 8025dda:	b971      	cbnz	r1, 8025dfa <__strftime.isra.0+0x826>
 8025ddc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8025de0:	fb93 f0f1 	sdiv	r0, r3, r1
 8025de4:	fb01 3310 	mls	r3, r1, r0, r3
 8025de8:	fab3 f383 	clz	r3, r3
 8025dec:	095b      	lsrs	r3, r3, #5
 8025dee:	1ad3      	subs	r3, r2, r3
 8025df0:	2b05      	cmp	r3, #5
 8025df2:	bfb4      	ite	lt
 8025df4:	2335      	movlt	r3, #53	; 0x35
 8025df6:	2334      	movge	r3, #52	; 0x34
 8025df8:	e618      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025dfa:	2301      	movs	r3, #1
 8025dfc:	e7f7      	b.n	8025dee <__strftime.isra.0+0x81a>
 8025dfe:	2301      	movs	r3, #1
 8025e00:	e614      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025e02:	1e6b      	subs	r3, r5, #1
 8025e04:	429c      	cmp	r4, r3
 8025e06:	f4bf ac17 	bcs.w	8025638 <__strftime.isra.0+0x64>
 8025e0a:	69b3      	ldr	r3, [r6, #24]
 8025e0c:	3330      	adds	r3, #48	; 0x30
 8025e0e:	e6d6      	b.n	8025bbe <__strftime.isra.0+0x5ea>
 8025e10:	69b2      	ldr	r2, [r6, #24]
 8025e12:	b11a      	cbz	r2, 8025e1c <__strftime.isra.0+0x848>
 8025e14:	3a01      	subs	r2, #1
 8025e16:	69f3      	ldr	r3, [r6, #28]
 8025e18:	3307      	adds	r3, #7
 8025e1a:	e7a5      	b.n	8025d68 <__strftime.isra.0+0x794>
 8025e1c:	2206      	movs	r2, #6
 8025e1e:	e7fa      	b.n	8025e16 <__strftime.isra.0+0x842>
 8025e20:	6970      	ldr	r0, [r6, #20]
 8025e22:	2800      	cmp	r0, #0
 8025e24:	db05      	blt.n	8025e32 <__strftime.isra.0+0x85e>
 8025e26:	2364      	movs	r3, #100	; 0x64
 8025e28:	fb90 f2f3 	sdiv	r2, r0, r3
 8025e2c:	fb02 0313 	mls	r3, r2, r3, r0
 8025e30:	e5fc      	b.n	8025a2c <__strftime.isra.0+0x458>
 8025e32:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025e36:	f000 fce7 	bl	8026808 <abs>
 8025e3a:	e7f4      	b.n	8025e26 <__strftime.isra.0+0x852>
 8025e3c:	6972      	ldr	r2, [r6, #20]
 8025e3e:	494c      	ldr	r1, [pc, #304]	; (8025f70 <__strftime.isra.0+0x99c>)
 8025e40:	428a      	cmp	r2, r1
 8025e42:	da05      	bge.n	8025e50 <__strftime.isra.0+0x87c>
 8025e44:	202d      	movs	r0, #45	; 0x2d
 8025e46:	f88d 0018 	strb.w	r0, [sp, #24]
 8025e4a:	eba1 0a02 	sub.w	sl, r1, r2
 8025e4e:	e657      	b.n	8025b00 <__strftime.isra.0+0x52c>
 8025e50:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8025e54:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025e58:	d106      	bne.n	8025e68 <__strftime.isra.0+0x894>
 8025e5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8025e5e:	4592      	cmp	sl, r2
 8025e60:	d902      	bls.n	8025e68 <__strftime.isra.0+0x894>
 8025e62:	f88d b018 	strb.w	fp, [sp, #24]
 8025e66:	e64b      	b.n	8025b00 <__strftime.isra.0+0x52c>
 8025e68:	aa06      	add	r2, sp, #24
 8025e6a:	2125      	movs	r1, #37	; 0x25
 8025e6c:	7011      	strb	r1, [r2, #0]
 8025e6e:	f1bb 0f00 	cmp.w	fp, #0
 8025e72:	d108      	bne.n	8025e86 <__strftime.isra.0+0x8b2>
 8025e74:	1c50      	adds	r0, r2, #1
 8025e76:	493f      	ldr	r1, [pc, #252]	; (8025f74 <__strftime.isra.0+0x9a0>)
 8025e78:	f7ff fb41 	bl	80254fe <strcpy>
 8025e7c:	f8cd a000 	str.w	sl, [sp]
 8025e80:	464b      	mov	r3, r9
 8025e82:	aa06      	add	r2, sp, #24
 8025e84:	e6cb      	b.n	8025c1e <__strftime.isra.0+0x64a>
 8025e86:	2330      	movs	r3, #48	; 0x30
 8025e88:	1c90      	adds	r0, r2, #2
 8025e8a:	7053      	strb	r3, [r2, #1]
 8025e8c:	e7f3      	b.n	8025e76 <__strftime.isra.0+0x8a2>
 8025e8e:	6a33      	ldr	r3, [r6, #32]
 8025e90:	2b00      	cmp	r3, #0
 8025e92:	f6ff aca3 	blt.w	80257dc <__strftime.isra.0+0x208>
 8025e96:	f000 fa53 	bl	8026340 <__tz_lock>
 8025e9a:	9b02      	ldr	r3, [sp, #8]
 8025e9c:	b90b      	cbnz	r3, 8025ea2 <__strftime.isra.0+0x8ce>
 8025e9e:	f000 fa5b 	bl	8026358 <_tzset_unlocked>
 8025ea2:	f001 fc59 	bl	8027758 <__gettzinfo>
 8025ea6:	6a33      	ldr	r3, [r6, #32]
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	bfd4      	ite	le
 8025eac:	2200      	movle	r2, #0
 8025eae:	2201      	movgt	r2, #1
 8025eb0:	2328      	movs	r3, #40	; 0x28
 8025eb2:	fb02 3303 	mla	r3, r2, r3, r3
 8025eb6:	eb07 0a04 	add.w	sl, r7, r4
 8025eba:	58c3      	ldr	r3, [r0, r3]
 8025ebc:	f1c3 0900 	rsb	r9, r3, #0
 8025ec0:	f000 fa44 	bl	802634c <__tz_unlock>
 8025ec4:	233c      	movs	r3, #60	; 0x3c
 8025ec6:	fb99 f0f3 	sdiv	r0, r9, r3
 8025eca:	f001 fcf5 	bl	80278b8 <labs>
 8025ece:	233c      	movs	r3, #60	; 0x3c
 8025ed0:	eba5 0b04 	sub.w	fp, r5, r4
 8025ed4:	fb90 f2f3 	sdiv	r2, r0, r3
 8025ed8:	fb02 0013 	mls	r0, r2, r3, r0
 8025edc:	9000      	str	r0, [sp, #0]
 8025ede:	4a26      	ldr	r2, [pc, #152]	; (8025f78 <__strftime.isra.0+0x9a4>)
 8025ee0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025ee4:	4659      	mov	r1, fp
 8025ee6:	4650      	mov	r0, sl
 8025ee8:	fb99 f3f3 	sdiv	r3, r9, r3
 8025eec:	f7ff fa2c 	bl	8025348 <sniprintf>
 8025ef0:	2800      	cmp	r0, #0
 8025ef2:	f6ff aba1 	blt.w	8025638 <__strftime.isra.0+0x64>
 8025ef6:	4404      	add	r4, r0
 8025ef8:	42a5      	cmp	r5, r4
 8025efa:	f67f ab9d 	bls.w	8025638 <__strftime.isra.0+0x64>
 8025efe:	2301      	movs	r3, #1
 8025f00:	9302      	str	r3, [sp, #8]
 8025f02:	e46b      	b.n	80257dc <__strftime.isra.0+0x208>
 8025f04:	6a33      	ldr	r3, [r6, #32]
 8025f06:	2b00      	cmp	r3, #0
 8025f08:	f6ff ac68 	blt.w	80257dc <__strftime.isra.0+0x208>
 8025f0c:	f000 fa18 	bl	8026340 <__tz_lock>
 8025f10:	9b02      	ldr	r3, [sp, #8]
 8025f12:	b90b      	cbnz	r3, 8025f18 <__strftime.isra.0+0x944>
 8025f14:	f000 fa20 	bl	8026358 <_tzset_unlocked>
 8025f18:	6a33      	ldr	r3, [r6, #32]
 8025f1a:	4a18      	ldr	r2, [pc, #96]	; (8025f7c <__strftime.isra.0+0x9a8>)
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	bfd4      	ite	le
 8025f20:	2300      	movle	r3, #0
 8025f22:	2301      	movgt	r3, #1
 8025f24:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025f28:	4648      	mov	r0, r9
 8025f2a:	f7da f993 	bl	8000254 <strlen>
 8025f2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025f32:	4420      	add	r0, r4
 8025f34:	1e6b      	subs	r3, r5, #1
 8025f36:	42a0      	cmp	r0, r4
 8025f38:	d102      	bne.n	8025f40 <__strftime.isra.0+0x96c>
 8025f3a:	f000 fa07 	bl	802634c <__tz_unlock>
 8025f3e:	e7de      	b.n	8025efe <__strftime.isra.0+0x92a>
 8025f40:	42a3      	cmp	r3, r4
 8025f42:	d904      	bls.n	8025f4e <__strftime.isra.0+0x97a>
 8025f44:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025f48:	553a      	strb	r2, [r7, r4]
 8025f4a:	3401      	adds	r4, #1
 8025f4c:	e7f3      	b.n	8025f36 <__strftime.isra.0+0x962>
 8025f4e:	f000 f9fd 	bl	802634c <__tz_unlock>
 8025f52:	f7ff bb71 	b.w	8025638 <__strftime.isra.0+0x64>
 8025f56:	1e6b      	subs	r3, r5, #1
 8025f58:	429c      	cmp	r4, r3
 8025f5a:	f4bf ab6d 	bcs.w	8025638 <__strftime.isra.0+0x64>
 8025f5e:	2325      	movs	r3, #37	; 0x25
 8025f60:	e62d      	b.n	8025bbe <__strftime.isra.0+0x5ea>
 8025f62:	b10d      	cbz	r5, 8025f68 <__strftime.isra.0+0x994>
 8025f64:	2300      	movs	r3, #0
 8025f66:	553b      	strb	r3, [r7, r4]
 8025f68:	4620      	mov	r0, r4
 8025f6a:	b00f      	add	sp, #60	; 0x3c
 8025f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f70:	fffff894 	.word	0xfffff894
 8025f74:	0804585d 	.word	0x0804585d
 8025f78:	0804587a 	.word	0x0804587a
 8025f7c:	200004f0 	.word	0x200004f0

08025f80 <strftime>:
 8025f80:	f7ff bb28 	b.w	80255d4 <__strftime.isra.0>

08025f84 <strncmp>:
 8025f84:	b510      	push	{r4, lr}
 8025f86:	b17a      	cbz	r2, 8025fa8 <strncmp+0x24>
 8025f88:	4603      	mov	r3, r0
 8025f8a:	3901      	subs	r1, #1
 8025f8c:	1884      	adds	r4, r0, r2
 8025f8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025f92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025f96:	4290      	cmp	r0, r2
 8025f98:	d101      	bne.n	8025f9e <strncmp+0x1a>
 8025f9a:	42a3      	cmp	r3, r4
 8025f9c:	d101      	bne.n	8025fa2 <strncmp+0x1e>
 8025f9e:	1a80      	subs	r0, r0, r2
 8025fa0:	bd10      	pop	{r4, pc}
 8025fa2:	2800      	cmp	r0, #0
 8025fa4:	d1f3      	bne.n	8025f8e <strncmp+0xa>
 8025fa6:	e7fa      	b.n	8025f9e <strncmp+0x1a>
 8025fa8:	4610      	mov	r0, r2
 8025faa:	e7f9      	b.n	8025fa0 <strncmp+0x1c>

08025fac <strncpy>:
 8025fac:	b510      	push	{r4, lr}
 8025fae:	3901      	subs	r1, #1
 8025fb0:	4603      	mov	r3, r0
 8025fb2:	b132      	cbz	r2, 8025fc2 <strncpy+0x16>
 8025fb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025fb8:	f803 4b01 	strb.w	r4, [r3], #1
 8025fbc:	3a01      	subs	r2, #1
 8025fbe:	2c00      	cmp	r4, #0
 8025fc0:	d1f7      	bne.n	8025fb2 <strncpy+0x6>
 8025fc2:	441a      	add	r2, r3
 8025fc4:	2100      	movs	r1, #0
 8025fc6:	4293      	cmp	r3, r2
 8025fc8:	d100      	bne.n	8025fcc <strncpy+0x20>
 8025fca:	bd10      	pop	{r4, pc}
 8025fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8025fd0:	e7f9      	b.n	8025fc6 <strncpy+0x1a>
 8025fd2:	Address 0x0000000008025fd2 is out of bounds.


08025fd4 <_strtol_l.constprop.0>:
 8025fd4:	2b01      	cmp	r3, #1
 8025fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025fda:	d001      	beq.n	8025fe0 <_strtol_l.constprop.0+0xc>
 8025fdc:	2b24      	cmp	r3, #36	; 0x24
 8025fde:	d906      	bls.n	8025fee <_strtol_l.constprop.0+0x1a>
 8025fe0:	f001 fa9c 	bl	802751c <__errno>
 8025fe4:	2316      	movs	r3, #22
 8025fe6:	6003      	str	r3, [r0, #0]
 8025fe8:	2000      	movs	r0, #0
 8025fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80260d4 <_strtol_l.constprop.0+0x100>
 8025ff2:	460d      	mov	r5, r1
 8025ff4:	462e      	mov	r6, r5
 8025ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025ffa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8025ffe:	f017 0708 	ands.w	r7, r7, #8
 8026002:	d1f7      	bne.n	8025ff4 <_strtol_l.constprop.0+0x20>
 8026004:	2c2d      	cmp	r4, #45	; 0x2d
 8026006:	d132      	bne.n	802606e <_strtol_l.constprop.0+0x9a>
 8026008:	782c      	ldrb	r4, [r5, #0]
 802600a:	2701      	movs	r7, #1
 802600c:	1cb5      	adds	r5, r6, #2
 802600e:	2b00      	cmp	r3, #0
 8026010:	d05b      	beq.n	80260ca <_strtol_l.constprop.0+0xf6>
 8026012:	2b10      	cmp	r3, #16
 8026014:	d109      	bne.n	802602a <_strtol_l.constprop.0+0x56>
 8026016:	2c30      	cmp	r4, #48	; 0x30
 8026018:	d107      	bne.n	802602a <_strtol_l.constprop.0+0x56>
 802601a:	782c      	ldrb	r4, [r5, #0]
 802601c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8026020:	2c58      	cmp	r4, #88	; 0x58
 8026022:	d14d      	bne.n	80260c0 <_strtol_l.constprop.0+0xec>
 8026024:	786c      	ldrb	r4, [r5, #1]
 8026026:	2310      	movs	r3, #16
 8026028:	3502      	adds	r5, #2
 802602a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802602e:	f108 38ff 	add.w	r8, r8, #4294967295
 8026032:	f04f 0c00 	mov.w	ip, #0
 8026036:	fbb8 f9f3 	udiv	r9, r8, r3
 802603a:	4666      	mov	r6, ip
 802603c:	fb03 8a19 	mls	sl, r3, r9, r8
 8026040:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8026044:	f1be 0f09 	cmp.w	lr, #9
 8026048:	d816      	bhi.n	8026078 <_strtol_l.constprop.0+0xa4>
 802604a:	4674      	mov	r4, lr
 802604c:	42a3      	cmp	r3, r4
 802604e:	dd24      	ble.n	802609a <_strtol_l.constprop.0+0xc6>
 8026050:	f1bc 0f00 	cmp.w	ip, #0
 8026054:	db1e      	blt.n	8026094 <_strtol_l.constprop.0+0xc0>
 8026056:	45b1      	cmp	r9, r6
 8026058:	d31c      	bcc.n	8026094 <_strtol_l.constprop.0+0xc0>
 802605a:	d101      	bne.n	8026060 <_strtol_l.constprop.0+0x8c>
 802605c:	45a2      	cmp	sl, r4
 802605e:	db19      	blt.n	8026094 <_strtol_l.constprop.0+0xc0>
 8026060:	fb06 4603 	mla	r6, r6, r3, r4
 8026064:	f04f 0c01 	mov.w	ip, #1
 8026068:	f815 4b01 	ldrb.w	r4, [r5], #1
 802606c:	e7e8      	b.n	8026040 <_strtol_l.constprop.0+0x6c>
 802606e:	2c2b      	cmp	r4, #43	; 0x2b
 8026070:	bf04      	itt	eq
 8026072:	782c      	ldrbeq	r4, [r5, #0]
 8026074:	1cb5      	addeq	r5, r6, #2
 8026076:	e7ca      	b.n	802600e <_strtol_l.constprop.0+0x3a>
 8026078:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802607c:	f1be 0f19 	cmp.w	lr, #25
 8026080:	d801      	bhi.n	8026086 <_strtol_l.constprop.0+0xb2>
 8026082:	3c37      	subs	r4, #55	; 0x37
 8026084:	e7e2      	b.n	802604c <_strtol_l.constprop.0+0x78>
 8026086:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802608a:	f1be 0f19 	cmp.w	lr, #25
 802608e:	d804      	bhi.n	802609a <_strtol_l.constprop.0+0xc6>
 8026090:	3c57      	subs	r4, #87	; 0x57
 8026092:	e7db      	b.n	802604c <_strtol_l.constprop.0+0x78>
 8026094:	f04f 3cff 	mov.w	ip, #4294967295
 8026098:	e7e6      	b.n	8026068 <_strtol_l.constprop.0+0x94>
 802609a:	f1bc 0f00 	cmp.w	ip, #0
 802609e:	da05      	bge.n	80260ac <_strtol_l.constprop.0+0xd8>
 80260a0:	2322      	movs	r3, #34	; 0x22
 80260a2:	6003      	str	r3, [r0, #0]
 80260a4:	4646      	mov	r6, r8
 80260a6:	b942      	cbnz	r2, 80260ba <_strtol_l.constprop.0+0xe6>
 80260a8:	4630      	mov	r0, r6
 80260aa:	e79e      	b.n	8025fea <_strtol_l.constprop.0+0x16>
 80260ac:	b107      	cbz	r7, 80260b0 <_strtol_l.constprop.0+0xdc>
 80260ae:	4276      	negs	r6, r6
 80260b0:	2a00      	cmp	r2, #0
 80260b2:	d0f9      	beq.n	80260a8 <_strtol_l.constprop.0+0xd4>
 80260b4:	f1bc 0f00 	cmp.w	ip, #0
 80260b8:	d000      	beq.n	80260bc <_strtol_l.constprop.0+0xe8>
 80260ba:	1e69      	subs	r1, r5, #1
 80260bc:	6011      	str	r1, [r2, #0]
 80260be:	e7f3      	b.n	80260a8 <_strtol_l.constprop.0+0xd4>
 80260c0:	2430      	movs	r4, #48	; 0x30
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	d1b1      	bne.n	802602a <_strtol_l.constprop.0+0x56>
 80260c6:	2308      	movs	r3, #8
 80260c8:	e7af      	b.n	802602a <_strtol_l.constprop.0+0x56>
 80260ca:	2c30      	cmp	r4, #48	; 0x30
 80260cc:	d0a5      	beq.n	802601a <_strtol_l.constprop.0+0x46>
 80260ce:	230a      	movs	r3, #10
 80260d0:	e7ab      	b.n	802602a <_strtol_l.constprop.0+0x56>
 80260d2:	bf00      	nop
 80260d4:	08045505 	.word	0x08045505

080260d8 <_strtol_r>:
 80260d8:	f7ff bf7c 	b.w	8025fd4 <_strtol_l.constprop.0>

080260dc <strtol>:
 80260dc:	4613      	mov	r3, r2
 80260de:	460a      	mov	r2, r1
 80260e0:	4601      	mov	r1, r0
 80260e2:	4802      	ldr	r0, [pc, #8]	; (80260ec <strtol+0x10>)
 80260e4:	6800      	ldr	r0, [r0, #0]
 80260e6:	f7ff bf75 	b.w	8025fd4 <_strtol_l.constprop.0>
 80260ea:	bf00      	nop
 80260ec:	2000048c 	.word	0x2000048c

080260f0 <_strtoul_l.constprop.0>:
 80260f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80260f4:	4f36      	ldr	r7, [pc, #216]	; (80261d0 <_strtoul_l.constprop.0+0xe0>)
 80260f6:	4686      	mov	lr, r0
 80260f8:	460d      	mov	r5, r1
 80260fa:	4628      	mov	r0, r5
 80260fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026100:	5de6      	ldrb	r6, [r4, r7]
 8026102:	f016 0608 	ands.w	r6, r6, #8
 8026106:	d1f8      	bne.n	80260fa <_strtoul_l.constprop.0+0xa>
 8026108:	2c2d      	cmp	r4, #45	; 0x2d
 802610a:	d12f      	bne.n	802616c <_strtoul_l.constprop.0+0x7c>
 802610c:	782c      	ldrb	r4, [r5, #0]
 802610e:	2601      	movs	r6, #1
 8026110:	1c85      	adds	r5, r0, #2
 8026112:	2b00      	cmp	r3, #0
 8026114:	d057      	beq.n	80261c6 <_strtoul_l.constprop.0+0xd6>
 8026116:	2b10      	cmp	r3, #16
 8026118:	d109      	bne.n	802612e <_strtoul_l.constprop.0+0x3e>
 802611a:	2c30      	cmp	r4, #48	; 0x30
 802611c:	d107      	bne.n	802612e <_strtoul_l.constprop.0+0x3e>
 802611e:	7828      	ldrb	r0, [r5, #0]
 8026120:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8026124:	2858      	cmp	r0, #88	; 0x58
 8026126:	d149      	bne.n	80261bc <_strtoul_l.constprop.0+0xcc>
 8026128:	786c      	ldrb	r4, [r5, #1]
 802612a:	2310      	movs	r3, #16
 802612c:	3502      	adds	r5, #2
 802612e:	f04f 38ff 	mov.w	r8, #4294967295
 8026132:	2700      	movs	r7, #0
 8026134:	fbb8 f8f3 	udiv	r8, r8, r3
 8026138:	fb03 f908 	mul.w	r9, r3, r8
 802613c:	ea6f 0909 	mvn.w	r9, r9
 8026140:	4638      	mov	r0, r7
 8026142:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8026146:	f1bc 0f09 	cmp.w	ip, #9
 802614a:	d814      	bhi.n	8026176 <_strtoul_l.constprop.0+0x86>
 802614c:	4664      	mov	r4, ip
 802614e:	42a3      	cmp	r3, r4
 8026150:	dd22      	ble.n	8026198 <_strtoul_l.constprop.0+0xa8>
 8026152:	2f00      	cmp	r7, #0
 8026154:	db1d      	blt.n	8026192 <_strtoul_l.constprop.0+0xa2>
 8026156:	4580      	cmp	r8, r0
 8026158:	d31b      	bcc.n	8026192 <_strtoul_l.constprop.0+0xa2>
 802615a:	d101      	bne.n	8026160 <_strtoul_l.constprop.0+0x70>
 802615c:	45a1      	cmp	r9, r4
 802615e:	db18      	blt.n	8026192 <_strtoul_l.constprop.0+0xa2>
 8026160:	fb00 4003 	mla	r0, r0, r3, r4
 8026164:	2701      	movs	r7, #1
 8026166:	f815 4b01 	ldrb.w	r4, [r5], #1
 802616a:	e7ea      	b.n	8026142 <_strtoul_l.constprop.0+0x52>
 802616c:	2c2b      	cmp	r4, #43	; 0x2b
 802616e:	bf04      	itt	eq
 8026170:	782c      	ldrbeq	r4, [r5, #0]
 8026172:	1c85      	addeq	r5, r0, #2
 8026174:	e7cd      	b.n	8026112 <_strtoul_l.constprop.0+0x22>
 8026176:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802617a:	f1bc 0f19 	cmp.w	ip, #25
 802617e:	d801      	bhi.n	8026184 <_strtoul_l.constprop.0+0x94>
 8026180:	3c37      	subs	r4, #55	; 0x37
 8026182:	e7e4      	b.n	802614e <_strtoul_l.constprop.0+0x5e>
 8026184:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8026188:	f1bc 0f19 	cmp.w	ip, #25
 802618c:	d804      	bhi.n	8026198 <_strtoul_l.constprop.0+0xa8>
 802618e:	3c57      	subs	r4, #87	; 0x57
 8026190:	e7dd      	b.n	802614e <_strtoul_l.constprop.0+0x5e>
 8026192:	f04f 37ff 	mov.w	r7, #4294967295
 8026196:	e7e6      	b.n	8026166 <_strtoul_l.constprop.0+0x76>
 8026198:	2f00      	cmp	r7, #0
 802619a:	da07      	bge.n	80261ac <_strtoul_l.constprop.0+0xbc>
 802619c:	2322      	movs	r3, #34	; 0x22
 802619e:	f8ce 3000 	str.w	r3, [lr]
 80261a2:	f04f 30ff 	mov.w	r0, #4294967295
 80261a6:	b932      	cbnz	r2, 80261b6 <_strtoul_l.constprop.0+0xc6>
 80261a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80261ac:	b106      	cbz	r6, 80261b0 <_strtoul_l.constprop.0+0xc0>
 80261ae:	4240      	negs	r0, r0
 80261b0:	2a00      	cmp	r2, #0
 80261b2:	d0f9      	beq.n	80261a8 <_strtoul_l.constprop.0+0xb8>
 80261b4:	b107      	cbz	r7, 80261b8 <_strtoul_l.constprop.0+0xc8>
 80261b6:	1e69      	subs	r1, r5, #1
 80261b8:	6011      	str	r1, [r2, #0]
 80261ba:	e7f5      	b.n	80261a8 <_strtoul_l.constprop.0+0xb8>
 80261bc:	2430      	movs	r4, #48	; 0x30
 80261be:	2b00      	cmp	r3, #0
 80261c0:	d1b5      	bne.n	802612e <_strtoul_l.constprop.0+0x3e>
 80261c2:	2308      	movs	r3, #8
 80261c4:	e7b3      	b.n	802612e <_strtoul_l.constprop.0+0x3e>
 80261c6:	2c30      	cmp	r4, #48	; 0x30
 80261c8:	d0a9      	beq.n	802611e <_strtoul_l.constprop.0+0x2e>
 80261ca:	230a      	movs	r3, #10
 80261cc:	e7af      	b.n	802612e <_strtoul_l.constprop.0+0x3e>
 80261ce:	bf00      	nop
 80261d0:	08045505 	.word	0x08045505

080261d4 <_strtoul_r>:
 80261d4:	f7ff bf8c 	b.w	80260f0 <_strtoul_l.constprop.0>

080261d8 <strtoul>:
 80261d8:	4613      	mov	r3, r2
 80261da:	460a      	mov	r2, r1
 80261dc:	4601      	mov	r1, r0
 80261de:	4802      	ldr	r0, [pc, #8]	; (80261e8 <strtoul+0x10>)
 80261e0:	6800      	ldr	r0, [r0, #0]
 80261e2:	f7ff bf85 	b.w	80260f0 <_strtoul_l.constprop.0>
 80261e6:	bf00      	nop
 80261e8:	2000048c 	.word	0x2000048c

080261ec <__tzcalc_limits>:
 80261ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261f0:	4605      	mov	r5, r0
 80261f2:	f001 fab1 	bl	8027758 <__gettzinfo>
 80261f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80261fa:	429d      	cmp	r5, r3
 80261fc:	f340 8099 	ble.w	8026332 <__tzcalc_limits+0x146>
 8026200:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8026204:	18ac      	adds	r4, r5, r2
 8026206:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802620a:	f240 126d 	movw	r2, #365	; 0x16d
 802620e:	10a4      	asrs	r4, r4, #2
 8026210:	fb02 4403 	mla	r4, r2, r3, r4
 8026214:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8026218:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802621c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026220:	441c      	add	r4, r3
 8026222:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8026226:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802622a:	fb95 fcf3 	sdiv	ip, r5, r3
 802622e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8026232:	186a      	adds	r2, r5, r1
 8026234:	fabc f68c 	clz	r6, ip
 8026238:	fbb2 f2f3 	udiv	r2, r2, r3
 802623c:	f005 0303 	and.w	r3, r5, #3
 8026240:	4414      	add	r4, r2
 8026242:	2264      	movs	r2, #100	; 0x64
 8026244:	6045      	str	r5, [r0, #4]
 8026246:	fb95 f7f2 	sdiv	r7, r5, r2
 802624a:	0976      	lsrs	r6, r6, #5
 802624c:	fb02 5717 	mls	r7, r2, r7, r5
 8026250:	4601      	mov	r1, r0
 8026252:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8026256:	9300      	str	r3, [sp, #0]
 8026258:	f04f 0a07 	mov.w	sl, #7
 802625c:	7a0d      	ldrb	r5, [r1, #8]
 802625e:	694b      	ldr	r3, [r1, #20]
 8026260:	2d4a      	cmp	r5, #74	; 0x4a
 8026262:	d12d      	bne.n	80262c0 <__tzcalc_limits+0xd4>
 8026264:	9a00      	ldr	r2, [sp, #0]
 8026266:	eb04 0e03 	add.w	lr, r4, r3
 802626a:	b902      	cbnz	r2, 802626e <__tzcalc_limits+0x82>
 802626c:	b917      	cbnz	r7, 8026274 <__tzcalc_limits+0x88>
 802626e:	f1bc 0f00 	cmp.w	ip, #0
 8026272:	d123      	bne.n	80262bc <__tzcalc_limits+0xd0>
 8026274:	2b3b      	cmp	r3, #59	; 0x3b
 8026276:	bfd4      	ite	le
 8026278:	2300      	movle	r3, #0
 802627a:	2301      	movgt	r3, #1
 802627c:	4473      	add	r3, lr
 802627e:	3b01      	subs	r3, #1
 8026280:	698d      	ldr	r5, [r1, #24]
 8026282:	4a2d      	ldr	r2, [pc, #180]	; (8026338 <__tzcalc_limits+0x14c>)
 8026284:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8026288:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802628c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802628e:	18ed      	adds	r5, r5, r3
 8026290:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8026294:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8026298:	3128      	adds	r1, #40	; 0x28
 802629a:	458b      	cmp	fp, r1
 802629c:	d1de      	bne.n	802625c <__tzcalc_limits+0x70>
 802629e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80262a2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80262a6:	428c      	cmp	r4, r1
 80262a8:	eb72 0303 	sbcs.w	r3, r2, r3
 80262ac:	bfb4      	ite	lt
 80262ae:	2301      	movlt	r3, #1
 80262b0:	2300      	movge	r3, #0
 80262b2:	6003      	str	r3, [r0, #0]
 80262b4:	2001      	movs	r0, #1
 80262b6:	b003      	add	sp, #12
 80262b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262bc:	2300      	movs	r3, #0
 80262be:	e7dd      	b.n	802627c <__tzcalc_limits+0x90>
 80262c0:	2d44      	cmp	r5, #68	; 0x44
 80262c2:	d101      	bne.n	80262c8 <__tzcalc_limits+0xdc>
 80262c4:	4423      	add	r3, r4
 80262c6:	e7db      	b.n	8026280 <__tzcalc_limits+0x94>
 80262c8:	9a00      	ldr	r2, [sp, #0]
 80262ca:	bb62      	cbnz	r2, 8026326 <__tzcalc_limits+0x13a>
 80262cc:	2f00      	cmp	r7, #0
 80262ce:	bf0c      	ite	eq
 80262d0:	4635      	moveq	r5, r6
 80262d2:	2501      	movne	r5, #1
 80262d4:	68ca      	ldr	r2, [r1, #12]
 80262d6:	9201      	str	r2, [sp, #4]
 80262d8:	4a18      	ldr	r2, [pc, #96]	; (802633c <__tzcalc_limits+0x150>)
 80262da:	f04f 0930 	mov.w	r9, #48	; 0x30
 80262de:	fb09 2505 	mla	r5, r9, r5, r2
 80262e2:	46a6      	mov	lr, r4
 80262e4:	f04f 0800 	mov.w	r8, #0
 80262e8:	3d04      	subs	r5, #4
 80262ea:	9a01      	ldr	r2, [sp, #4]
 80262ec:	f108 0801 	add.w	r8, r8, #1
 80262f0:	4542      	cmp	r2, r8
 80262f2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80262f6:	dc18      	bgt.n	802632a <__tzcalc_limits+0x13e>
 80262f8:	f10e 0504 	add.w	r5, lr, #4
 80262fc:	fb95 f8fa 	sdiv	r8, r5, sl
 8026300:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8026304:	eba5 0808 	sub.w	r8, r5, r8
 8026308:	ebb3 0808 	subs.w	r8, r3, r8
 802630c:	690b      	ldr	r3, [r1, #16]
 802630e:	f103 33ff 	add.w	r3, r3, #4294967295
 8026312:	bf48      	it	mi
 8026314:	f108 0807 	addmi.w	r8, r8, #7
 8026318:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802631c:	4443      	add	r3, r8
 802631e:	454b      	cmp	r3, r9
 8026320:	da05      	bge.n	802632e <__tzcalc_limits+0x142>
 8026322:	4473      	add	r3, lr
 8026324:	e7ac      	b.n	8026280 <__tzcalc_limits+0x94>
 8026326:	4635      	mov	r5, r6
 8026328:	e7d4      	b.n	80262d4 <__tzcalc_limits+0xe8>
 802632a:	44ce      	add	lr, r9
 802632c:	e7dd      	b.n	80262ea <__tzcalc_limits+0xfe>
 802632e:	3b07      	subs	r3, #7
 8026330:	e7f5      	b.n	802631e <__tzcalc_limits+0x132>
 8026332:	2000      	movs	r0, #0
 8026334:	e7bf      	b.n	80262b6 <__tzcalc_limits+0xca>
 8026336:	bf00      	nop
 8026338:	00015180 	.word	0x00015180
 802633c:	08045740 	.word	0x08045740

08026340 <__tz_lock>:
 8026340:	4801      	ldr	r0, [pc, #4]	; (8026348 <__tz_lock+0x8>)
 8026342:	f7fd be5a 	b.w	8023ffa <__retarget_lock_acquire>
 8026346:	bf00      	nop
 8026348:	2002f868 	.word	0x2002f868

0802634c <__tz_unlock>:
 802634c:	4801      	ldr	r0, [pc, #4]	; (8026354 <__tz_unlock+0x8>)
 802634e:	f7fd be56 	b.w	8023ffe <__retarget_lock_release>
 8026352:	bf00      	nop
 8026354:	2002f868 	.word	0x2002f868

08026358 <_tzset_unlocked>:
 8026358:	4b01      	ldr	r3, [pc, #4]	; (8026360 <_tzset_unlocked+0x8>)
 802635a:	6818      	ldr	r0, [r3, #0]
 802635c:	f000 b802 	b.w	8026364 <_tzset_unlocked_r>
 8026360:	2000048c 	.word	0x2000048c

08026364 <_tzset_unlocked_r>:
 8026364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026368:	b08d      	sub	sp, #52	; 0x34
 802636a:	4607      	mov	r7, r0
 802636c:	f001 f9f4 	bl	8027758 <__gettzinfo>
 8026370:	49b0      	ldr	r1, [pc, #704]	; (8026634 <_tzset_unlocked_r+0x2d0>)
 8026372:	4eb1      	ldr	r6, [pc, #708]	; (8026638 <_tzset_unlocked_r+0x2d4>)
 8026374:	4605      	mov	r5, r0
 8026376:	4638      	mov	r0, r7
 8026378:	f001 f9e6 	bl	8027748 <_getenv_r>
 802637c:	4604      	mov	r4, r0
 802637e:	b970      	cbnz	r0, 802639e <_tzset_unlocked_r+0x3a>
 8026380:	4bae      	ldr	r3, [pc, #696]	; (802663c <_tzset_unlocked_r+0x2d8>)
 8026382:	4aaf      	ldr	r2, [pc, #700]	; (8026640 <_tzset_unlocked_r+0x2dc>)
 8026384:	6018      	str	r0, [r3, #0]
 8026386:	4baf      	ldr	r3, [pc, #700]	; (8026644 <_tzset_unlocked_r+0x2e0>)
 8026388:	6018      	str	r0, [r3, #0]
 802638a:	4baf      	ldr	r3, [pc, #700]	; (8026648 <_tzset_unlocked_r+0x2e4>)
 802638c:	6830      	ldr	r0, [r6, #0]
 802638e:	e9c3 2200 	strd	r2, r2, [r3]
 8026392:	f7fd fe3f 	bl	8024014 <free>
 8026396:	6034      	str	r4, [r6, #0]
 8026398:	b00d      	add	sp, #52	; 0x34
 802639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802639e:	6831      	ldr	r1, [r6, #0]
 80263a0:	2900      	cmp	r1, #0
 80263a2:	d162      	bne.n	802646a <_tzset_unlocked_r+0x106>
 80263a4:	6830      	ldr	r0, [r6, #0]
 80263a6:	f7fd fe35 	bl	8024014 <free>
 80263aa:	4620      	mov	r0, r4
 80263ac:	f7d9 ff52 	bl	8000254 <strlen>
 80263b0:	1c41      	adds	r1, r0, #1
 80263b2:	4638      	mov	r0, r7
 80263b4:	f7fe f954 	bl	8024660 <_malloc_r>
 80263b8:	6030      	str	r0, [r6, #0]
 80263ba:	2800      	cmp	r0, #0
 80263bc:	d15a      	bne.n	8026474 <_tzset_unlocked_r+0x110>
 80263be:	7823      	ldrb	r3, [r4, #0]
 80263c0:	4aa2      	ldr	r2, [pc, #648]	; (802664c <_tzset_unlocked_r+0x2e8>)
 80263c2:	49a3      	ldr	r1, [pc, #652]	; (8026650 <_tzset_unlocked_r+0x2ec>)
 80263c4:	2b3a      	cmp	r3, #58	; 0x3a
 80263c6:	bf08      	it	eq
 80263c8:	3401      	addeq	r4, #1
 80263ca:	ae0a      	add	r6, sp, #40	; 0x28
 80263cc:	4633      	mov	r3, r6
 80263ce:	4620      	mov	r0, r4
 80263d0:	f7ff f80e 	bl	80253f0 <siscanf>
 80263d4:	2800      	cmp	r0, #0
 80263d6:	dddf      	ble.n	8026398 <_tzset_unlocked_r+0x34>
 80263d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263da:	18e7      	adds	r7, r4, r3
 80263dc:	5ce3      	ldrb	r3, [r4, r3]
 80263de:	2b2d      	cmp	r3, #45	; 0x2d
 80263e0:	d14c      	bne.n	802647c <_tzset_unlocked_r+0x118>
 80263e2:	3701      	adds	r7, #1
 80263e4:	f04f 38ff 	mov.w	r8, #4294967295
 80263e8:	f10d 0a20 	add.w	sl, sp, #32
 80263ec:	f10d 0b1e 	add.w	fp, sp, #30
 80263f0:	2400      	movs	r4, #0
 80263f2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80263f6:	4997      	ldr	r1, [pc, #604]	; (8026654 <_tzset_unlocked_r+0x2f0>)
 80263f8:	9603      	str	r6, [sp, #12]
 80263fa:	f8cd b000 	str.w	fp, [sp]
 80263fe:	4633      	mov	r3, r6
 8026400:	aa07      	add	r2, sp, #28
 8026402:	4638      	mov	r0, r7
 8026404:	f8ad 401e 	strh.w	r4, [sp, #30]
 8026408:	f8ad 4020 	strh.w	r4, [sp, #32]
 802640c:	f7fe fff0 	bl	80253f0 <siscanf>
 8026410:	42a0      	cmp	r0, r4
 8026412:	ddc1      	ble.n	8026398 <_tzset_unlocked_r+0x34>
 8026414:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026418:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802641c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8026660 <_tzset_unlocked_r+0x2fc>
 8026420:	213c      	movs	r1, #60	; 0x3c
 8026422:	fb01 3302 	mla	r3, r1, r2, r3
 8026426:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802642a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802642e:	fb01 3302 	mla	r3, r1, r2, r3
 8026432:	fb08 f303 	mul.w	r3, r8, r3
 8026436:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8026648 <_tzset_unlocked_r+0x2e4>
 802643a:	62ab      	str	r3, [r5, #40]	; 0x28
 802643c:	4b83      	ldr	r3, [pc, #524]	; (802664c <_tzset_unlocked_r+0x2e8>)
 802643e:	f8c8 3000 	str.w	r3, [r8]
 8026442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026444:	4982      	ldr	r1, [pc, #520]	; (8026650 <_tzset_unlocked_r+0x2ec>)
 8026446:	441f      	add	r7, r3
 8026448:	464a      	mov	r2, r9
 802644a:	4633      	mov	r3, r6
 802644c:	4638      	mov	r0, r7
 802644e:	f7fe ffcf 	bl	80253f0 <siscanf>
 8026452:	42a0      	cmp	r0, r4
 8026454:	dc18      	bgt.n	8026488 <_tzset_unlocked_r+0x124>
 8026456:	f8d8 3000 	ldr.w	r3, [r8]
 802645a:	f8c8 3004 	str.w	r3, [r8, #4]
 802645e:	4b77      	ldr	r3, [pc, #476]	; (802663c <_tzset_unlocked_r+0x2d8>)
 8026460:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8026462:	601a      	str	r2, [r3, #0]
 8026464:	4b77      	ldr	r3, [pc, #476]	; (8026644 <_tzset_unlocked_r+0x2e0>)
 8026466:	601c      	str	r4, [r3, #0]
 8026468:	e796      	b.n	8026398 <_tzset_unlocked_r+0x34>
 802646a:	f7d9 fee9 	bl	8000240 <strcmp>
 802646e:	2800      	cmp	r0, #0
 8026470:	d198      	bne.n	80263a4 <_tzset_unlocked_r+0x40>
 8026472:	e791      	b.n	8026398 <_tzset_unlocked_r+0x34>
 8026474:	4621      	mov	r1, r4
 8026476:	f7ff f842 	bl	80254fe <strcpy>
 802647a:	e7a0      	b.n	80263be <_tzset_unlocked_r+0x5a>
 802647c:	2b2b      	cmp	r3, #43	; 0x2b
 802647e:	bf08      	it	eq
 8026480:	3701      	addeq	r7, #1
 8026482:	f04f 0801 	mov.w	r8, #1
 8026486:	e7af      	b.n	80263e8 <_tzset_unlocked_r+0x84>
 8026488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802648a:	f8c8 9004 	str.w	r9, [r8, #4]
 802648e:	18fc      	adds	r4, r7, r3
 8026490:	5cfb      	ldrb	r3, [r7, r3]
 8026492:	2b2d      	cmp	r3, #45	; 0x2d
 8026494:	f040 808b 	bne.w	80265ae <_tzset_unlocked_r+0x24a>
 8026498:	3401      	adds	r4, #1
 802649a:	f04f 37ff 	mov.w	r7, #4294967295
 802649e:	2300      	movs	r3, #0
 80264a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80264a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80264a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80264ac:	930a      	str	r3, [sp, #40]	; 0x28
 80264ae:	e9cd a602 	strd	sl, r6, [sp, #8]
 80264b2:	e9cd b600 	strd	fp, r6, [sp]
 80264b6:	4967      	ldr	r1, [pc, #412]	; (8026654 <_tzset_unlocked_r+0x2f0>)
 80264b8:	4633      	mov	r3, r6
 80264ba:	aa07      	add	r2, sp, #28
 80264bc:	4620      	mov	r0, r4
 80264be:	f7fe ff97 	bl	80253f0 <siscanf>
 80264c2:	2800      	cmp	r0, #0
 80264c4:	dc78      	bgt.n	80265b8 <_tzset_unlocked_r+0x254>
 80264c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80264c8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80264cc:	652b      	str	r3, [r5, #80]	; 0x50
 80264ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264d0:	462f      	mov	r7, r5
 80264d2:	441c      	add	r4, r3
 80264d4:	f04f 0900 	mov.w	r9, #0
 80264d8:	7823      	ldrb	r3, [r4, #0]
 80264da:	2b2c      	cmp	r3, #44	; 0x2c
 80264dc:	bf08      	it	eq
 80264de:	3401      	addeq	r4, #1
 80264e0:	f894 8000 	ldrb.w	r8, [r4]
 80264e4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80264e8:	d178      	bne.n	80265dc <_tzset_unlocked_r+0x278>
 80264ea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80264ee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80264f2:	ab09      	add	r3, sp, #36	; 0x24
 80264f4:	9300      	str	r3, [sp, #0]
 80264f6:	4958      	ldr	r1, [pc, #352]	; (8026658 <_tzset_unlocked_r+0x2f4>)
 80264f8:	9603      	str	r6, [sp, #12]
 80264fa:	4633      	mov	r3, r6
 80264fc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8026500:	4620      	mov	r0, r4
 8026502:	f7fe ff75 	bl	80253f0 <siscanf>
 8026506:	2803      	cmp	r0, #3
 8026508:	f47f af46 	bne.w	8026398 <_tzset_unlocked_r+0x34>
 802650c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8026510:	1e4b      	subs	r3, r1, #1
 8026512:	2b0b      	cmp	r3, #11
 8026514:	f63f af40 	bhi.w	8026398 <_tzset_unlocked_r+0x34>
 8026518:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802651c:	1e53      	subs	r3, r2, #1
 802651e:	2b04      	cmp	r3, #4
 8026520:	f63f af3a 	bhi.w	8026398 <_tzset_unlocked_r+0x34>
 8026524:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8026528:	2b06      	cmp	r3, #6
 802652a:	f63f af35 	bhi.w	8026398 <_tzset_unlocked_r+0x34>
 802652e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8026532:	f887 8008 	strb.w	r8, [r7, #8]
 8026536:	617b      	str	r3, [r7, #20]
 8026538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802653a:	eb04 0803 	add.w	r8, r4, r3
 802653e:	2302      	movs	r3, #2
 8026540:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026544:	2300      	movs	r3, #0
 8026546:	f8ad 301e 	strh.w	r3, [sp, #30]
 802654a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802654e:	930a      	str	r3, [sp, #40]	; 0x28
 8026550:	f898 3000 	ldrb.w	r3, [r8]
 8026554:	2b2f      	cmp	r3, #47	; 0x2f
 8026556:	d109      	bne.n	802656c <_tzset_unlocked_r+0x208>
 8026558:	e9cd a602 	strd	sl, r6, [sp, #8]
 802655c:	e9cd b600 	strd	fp, r6, [sp]
 8026560:	493e      	ldr	r1, [pc, #248]	; (802665c <_tzset_unlocked_r+0x2f8>)
 8026562:	4633      	mov	r3, r6
 8026564:	aa07      	add	r2, sp, #28
 8026566:	4640      	mov	r0, r8
 8026568:	f7fe ff42 	bl	80253f0 <siscanf>
 802656c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026570:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026574:	213c      	movs	r1, #60	; 0x3c
 8026576:	fb01 3302 	mla	r3, r1, r2, r3
 802657a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802657e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8026582:	fb01 3302 	mla	r3, r1, r2, r3
 8026586:	61bb      	str	r3, [r7, #24]
 8026588:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802658a:	3728      	adds	r7, #40	; 0x28
 802658c:	4444      	add	r4, r8
 802658e:	f1b9 0f00 	cmp.w	r9, #0
 8026592:	d020      	beq.n	80265d6 <_tzset_unlocked_r+0x272>
 8026594:	6868      	ldr	r0, [r5, #4]
 8026596:	f7ff fe29 	bl	80261ec <__tzcalc_limits>
 802659a:	4b28      	ldr	r3, [pc, #160]	; (802663c <_tzset_unlocked_r+0x2d8>)
 802659c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802659e:	601a      	str	r2, [r3, #0]
 80265a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80265a2:	1a9b      	subs	r3, r3, r2
 80265a4:	4a27      	ldr	r2, [pc, #156]	; (8026644 <_tzset_unlocked_r+0x2e0>)
 80265a6:	bf18      	it	ne
 80265a8:	2301      	movne	r3, #1
 80265aa:	6013      	str	r3, [r2, #0]
 80265ac:	e6f4      	b.n	8026398 <_tzset_unlocked_r+0x34>
 80265ae:	2b2b      	cmp	r3, #43	; 0x2b
 80265b0:	bf08      	it	eq
 80265b2:	3401      	addeq	r4, #1
 80265b4:	2701      	movs	r7, #1
 80265b6:	e772      	b.n	802649e <_tzset_unlocked_r+0x13a>
 80265b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80265bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80265c0:	213c      	movs	r1, #60	; 0x3c
 80265c2:	fb01 3302 	mla	r3, r1, r2, r3
 80265c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80265ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80265ce:	fb01 3302 	mla	r3, r1, r2, r3
 80265d2:	437b      	muls	r3, r7
 80265d4:	e77a      	b.n	80264cc <_tzset_unlocked_r+0x168>
 80265d6:	f04f 0901 	mov.w	r9, #1
 80265da:	e77d      	b.n	80264d8 <_tzset_unlocked_r+0x174>
 80265dc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80265e0:	bf06      	itte	eq
 80265e2:	3401      	addeq	r4, #1
 80265e4:	4643      	moveq	r3, r8
 80265e6:	2344      	movne	r3, #68	; 0x44
 80265e8:	220a      	movs	r2, #10
 80265ea:	a90b      	add	r1, sp, #44	; 0x2c
 80265ec:	4620      	mov	r0, r4
 80265ee:	9305      	str	r3, [sp, #20]
 80265f0:	f7ff fdf2 	bl	80261d8 <strtoul>
 80265f4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80265f8:	9b05      	ldr	r3, [sp, #20]
 80265fa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80265fe:	45a0      	cmp	r8, r4
 8026600:	d114      	bne.n	802662c <_tzset_unlocked_r+0x2c8>
 8026602:	234d      	movs	r3, #77	; 0x4d
 8026604:	f1b9 0f00 	cmp.w	r9, #0
 8026608:	d107      	bne.n	802661a <_tzset_unlocked_r+0x2b6>
 802660a:	722b      	strb	r3, [r5, #8]
 802660c:	2103      	movs	r1, #3
 802660e:	2302      	movs	r3, #2
 8026610:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8026614:	f8c5 9014 	str.w	r9, [r5, #20]
 8026618:	e791      	b.n	802653e <_tzset_unlocked_r+0x1da>
 802661a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802661e:	220b      	movs	r2, #11
 8026620:	2301      	movs	r3, #1
 8026622:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8026626:	2300      	movs	r3, #0
 8026628:	63eb      	str	r3, [r5, #60]	; 0x3c
 802662a:	e788      	b.n	802653e <_tzset_unlocked_r+0x1da>
 802662c:	b280      	uxth	r0, r0
 802662e:	723b      	strb	r3, [r7, #8]
 8026630:	6178      	str	r0, [r7, #20]
 8026632:	e784      	b.n	802653e <_tzset_unlocked_r+0x1da>
 8026634:	08045ab0 	.word	0x08045ab0
 8026638:	2002f890 	.word	0x2002f890
 802663c:	2002f898 	.word	0x2002f898
 8026640:	08045ab3 	.word	0x08045ab3
 8026644:	2002f894 	.word	0x2002f894
 8026648:	200004f0 	.word	0x200004f0
 802664c:	2002f883 	.word	0x2002f883
 8026650:	08045ab7 	.word	0x08045ab7
 8026654:	08045ada 	.word	0x08045ada
 8026658:	08045ac6 	.word	0x08045ac6
 802665c:	08045ad9 	.word	0x08045ad9
 8026660:	2002f878 	.word	0x2002f878

08026664 <__swbuf_r>:
 8026664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026666:	460e      	mov	r6, r1
 8026668:	4614      	mov	r4, r2
 802666a:	4605      	mov	r5, r0
 802666c:	b118      	cbz	r0, 8026676 <__swbuf_r+0x12>
 802666e:	6983      	ldr	r3, [r0, #24]
 8026670:	b90b      	cbnz	r3, 8026676 <__swbuf_r+0x12>
 8026672:	f7fd faed 	bl	8023c50 <__sinit>
 8026676:	4b21      	ldr	r3, [pc, #132]	; (80266fc <__swbuf_r+0x98>)
 8026678:	429c      	cmp	r4, r3
 802667a:	d12b      	bne.n	80266d4 <__swbuf_r+0x70>
 802667c:	686c      	ldr	r4, [r5, #4]
 802667e:	69a3      	ldr	r3, [r4, #24]
 8026680:	60a3      	str	r3, [r4, #8]
 8026682:	89a3      	ldrh	r3, [r4, #12]
 8026684:	071a      	lsls	r2, r3, #28
 8026686:	d52f      	bpl.n	80266e8 <__swbuf_r+0x84>
 8026688:	6923      	ldr	r3, [r4, #16]
 802668a:	b36b      	cbz	r3, 80266e8 <__swbuf_r+0x84>
 802668c:	6923      	ldr	r3, [r4, #16]
 802668e:	6820      	ldr	r0, [r4, #0]
 8026690:	1ac0      	subs	r0, r0, r3
 8026692:	6963      	ldr	r3, [r4, #20]
 8026694:	b2f6      	uxtb	r6, r6
 8026696:	4283      	cmp	r3, r0
 8026698:	4637      	mov	r7, r6
 802669a:	dc04      	bgt.n	80266a6 <__swbuf_r+0x42>
 802669c:	4621      	mov	r1, r4
 802669e:	4628      	mov	r0, r5
 80266a0:	f000 ffc8 	bl	8027634 <_fflush_r>
 80266a4:	bb30      	cbnz	r0, 80266f4 <__swbuf_r+0x90>
 80266a6:	68a3      	ldr	r3, [r4, #8]
 80266a8:	3b01      	subs	r3, #1
 80266aa:	60a3      	str	r3, [r4, #8]
 80266ac:	6823      	ldr	r3, [r4, #0]
 80266ae:	1c5a      	adds	r2, r3, #1
 80266b0:	6022      	str	r2, [r4, #0]
 80266b2:	701e      	strb	r6, [r3, #0]
 80266b4:	6963      	ldr	r3, [r4, #20]
 80266b6:	3001      	adds	r0, #1
 80266b8:	4283      	cmp	r3, r0
 80266ba:	d004      	beq.n	80266c6 <__swbuf_r+0x62>
 80266bc:	89a3      	ldrh	r3, [r4, #12]
 80266be:	07db      	lsls	r3, r3, #31
 80266c0:	d506      	bpl.n	80266d0 <__swbuf_r+0x6c>
 80266c2:	2e0a      	cmp	r6, #10
 80266c4:	d104      	bne.n	80266d0 <__swbuf_r+0x6c>
 80266c6:	4621      	mov	r1, r4
 80266c8:	4628      	mov	r0, r5
 80266ca:	f000 ffb3 	bl	8027634 <_fflush_r>
 80266ce:	b988      	cbnz	r0, 80266f4 <__swbuf_r+0x90>
 80266d0:	4638      	mov	r0, r7
 80266d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80266d4:	4b0a      	ldr	r3, [pc, #40]	; (8026700 <__swbuf_r+0x9c>)
 80266d6:	429c      	cmp	r4, r3
 80266d8:	d101      	bne.n	80266de <__swbuf_r+0x7a>
 80266da:	68ac      	ldr	r4, [r5, #8]
 80266dc:	e7cf      	b.n	802667e <__swbuf_r+0x1a>
 80266de:	4b09      	ldr	r3, [pc, #36]	; (8026704 <__swbuf_r+0xa0>)
 80266e0:	429c      	cmp	r4, r3
 80266e2:	bf08      	it	eq
 80266e4:	68ec      	ldreq	r4, [r5, #12]
 80266e6:	e7ca      	b.n	802667e <__swbuf_r+0x1a>
 80266e8:	4621      	mov	r1, r4
 80266ea:	4628      	mov	r0, r5
 80266ec:	f000 f81e 	bl	802672c <__swsetup_r>
 80266f0:	2800      	cmp	r0, #0
 80266f2:	d0cb      	beq.n	802668c <__swbuf_r+0x28>
 80266f4:	f04f 37ff 	mov.w	r7, #4294967295
 80266f8:	e7ea      	b.n	80266d0 <__swbuf_r+0x6c>
 80266fa:	bf00      	nop
 80266fc:	08045628 	.word	0x08045628
 8026700:	08045648 	.word	0x08045648
 8026704:	08045608 	.word	0x08045608

08026708 <_write_r>:
 8026708:	b538      	push	{r3, r4, r5, lr}
 802670a:	4d07      	ldr	r5, [pc, #28]	; (8026728 <_write_r+0x20>)
 802670c:	4604      	mov	r4, r0
 802670e:	4608      	mov	r0, r1
 8026710:	4611      	mov	r1, r2
 8026712:	2200      	movs	r2, #0
 8026714:	602a      	str	r2, [r5, #0]
 8026716:	461a      	mov	r2, r3
 8026718:	f7db ff12 	bl	8002540 <_write>
 802671c:	1c43      	adds	r3, r0, #1
 802671e:	d102      	bne.n	8026726 <_write_r+0x1e>
 8026720:	682b      	ldr	r3, [r5, #0]
 8026722:	b103      	cbz	r3, 8026726 <_write_r+0x1e>
 8026724:	6023      	str	r3, [r4, #0]
 8026726:	bd38      	pop	{r3, r4, r5, pc}
 8026728:	2002f874 	.word	0x2002f874

0802672c <__swsetup_r>:
 802672c:	4b32      	ldr	r3, [pc, #200]	; (80267f8 <__swsetup_r+0xcc>)
 802672e:	b570      	push	{r4, r5, r6, lr}
 8026730:	681d      	ldr	r5, [r3, #0]
 8026732:	4606      	mov	r6, r0
 8026734:	460c      	mov	r4, r1
 8026736:	b125      	cbz	r5, 8026742 <__swsetup_r+0x16>
 8026738:	69ab      	ldr	r3, [r5, #24]
 802673a:	b913      	cbnz	r3, 8026742 <__swsetup_r+0x16>
 802673c:	4628      	mov	r0, r5
 802673e:	f7fd fa87 	bl	8023c50 <__sinit>
 8026742:	4b2e      	ldr	r3, [pc, #184]	; (80267fc <__swsetup_r+0xd0>)
 8026744:	429c      	cmp	r4, r3
 8026746:	d10f      	bne.n	8026768 <__swsetup_r+0x3c>
 8026748:	686c      	ldr	r4, [r5, #4]
 802674a:	89a3      	ldrh	r3, [r4, #12]
 802674c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026750:	0719      	lsls	r1, r3, #28
 8026752:	d42c      	bmi.n	80267ae <__swsetup_r+0x82>
 8026754:	06dd      	lsls	r5, r3, #27
 8026756:	d411      	bmi.n	802677c <__swsetup_r+0x50>
 8026758:	2309      	movs	r3, #9
 802675a:	6033      	str	r3, [r6, #0]
 802675c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026760:	81a3      	strh	r3, [r4, #12]
 8026762:	f04f 30ff 	mov.w	r0, #4294967295
 8026766:	e03e      	b.n	80267e6 <__swsetup_r+0xba>
 8026768:	4b25      	ldr	r3, [pc, #148]	; (8026800 <__swsetup_r+0xd4>)
 802676a:	429c      	cmp	r4, r3
 802676c:	d101      	bne.n	8026772 <__swsetup_r+0x46>
 802676e:	68ac      	ldr	r4, [r5, #8]
 8026770:	e7eb      	b.n	802674a <__swsetup_r+0x1e>
 8026772:	4b24      	ldr	r3, [pc, #144]	; (8026804 <__swsetup_r+0xd8>)
 8026774:	429c      	cmp	r4, r3
 8026776:	bf08      	it	eq
 8026778:	68ec      	ldreq	r4, [r5, #12]
 802677a:	e7e6      	b.n	802674a <__swsetup_r+0x1e>
 802677c:	0758      	lsls	r0, r3, #29
 802677e:	d512      	bpl.n	80267a6 <__swsetup_r+0x7a>
 8026780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026782:	b141      	cbz	r1, 8026796 <__swsetup_r+0x6a>
 8026784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026788:	4299      	cmp	r1, r3
 802678a:	d002      	beq.n	8026792 <__swsetup_r+0x66>
 802678c:	4630      	mov	r0, r6
 802678e:	f7fd fefb 	bl	8024588 <_free_r>
 8026792:	2300      	movs	r3, #0
 8026794:	6363      	str	r3, [r4, #52]	; 0x34
 8026796:	89a3      	ldrh	r3, [r4, #12]
 8026798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802679c:	81a3      	strh	r3, [r4, #12]
 802679e:	2300      	movs	r3, #0
 80267a0:	6063      	str	r3, [r4, #4]
 80267a2:	6923      	ldr	r3, [r4, #16]
 80267a4:	6023      	str	r3, [r4, #0]
 80267a6:	89a3      	ldrh	r3, [r4, #12]
 80267a8:	f043 0308 	orr.w	r3, r3, #8
 80267ac:	81a3      	strh	r3, [r4, #12]
 80267ae:	6923      	ldr	r3, [r4, #16]
 80267b0:	b94b      	cbnz	r3, 80267c6 <__swsetup_r+0x9a>
 80267b2:	89a3      	ldrh	r3, [r4, #12]
 80267b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80267b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80267bc:	d003      	beq.n	80267c6 <__swsetup_r+0x9a>
 80267be:	4621      	mov	r1, r4
 80267c0:	4630      	mov	r0, r6
 80267c2:	f001 f8b9 	bl	8027938 <__smakebuf_r>
 80267c6:	89a0      	ldrh	r0, [r4, #12]
 80267c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80267cc:	f010 0301 	ands.w	r3, r0, #1
 80267d0:	d00a      	beq.n	80267e8 <__swsetup_r+0xbc>
 80267d2:	2300      	movs	r3, #0
 80267d4:	60a3      	str	r3, [r4, #8]
 80267d6:	6963      	ldr	r3, [r4, #20]
 80267d8:	425b      	negs	r3, r3
 80267da:	61a3      	str	r3, [r4, #24]
 80267dc:	6923      	ldr	r3, [r4, #16]
 80267de:	b943      	cbnz	r3, 80267f2 <__swsetup_r+0xc6>
 80267e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80267e4:	d1ba      	bne.n	802675c <__swsetup_r+0x30>
 80267e6:	bd70      	pop	{r4, r5, r6, pc}
 80267e8:	0781      	lsls	r1, r0, #30
 80267ea:	bf58      	it	pl
 80267ec:	6963      	ldrpl	r3, [r4, #20]
 80267ee:	60a3      	str	r3, [r4, #8]
 80267f0:	e7f4      	b.n	80267dc <__swsetup_r+0xb0>
 80267f2:	2000      	movs	r0, #0
 80267f4:	e7f7      	b.n	80267e6 <__swsetup_r+0xba>
 80267f6:	bf00      	nop
 80267f8:	2000048c 	.word	0x2000048c
 80267fc:	08045628 	.word	0x08045628
 8026800:	08045648 	.word	0x08045648
 8026804:	08045608 	.word	0x08045608

08026808 <abs>:
 8026808:	2800      	cmp	r0, #0
 802680a:	bfb8      	it	lt
 802680c:	4240      	neglt	r0, r0
 802680e:	4770      	bx	lr

08026810 <asctime>:
 8026810:	4b0d      	ldr	r3, [pc, #52]	; (8026848 <asctime+0x38>)
 8026812:	b570      	push	{r4, r5, r6, lr}
 8026814:	681d      	ldr	r5, [r3, #0]
 8026816:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8026818:	4604      	mov	r4, r0
 802681a:	b976      	cbnz	r6, 802683a <asctime+0x2a>
 802681c:	201a      	movs	r0, #26
 802681e:	f7fd fbf1 	bl	8024004 <malloc>
 8026822:	4602      	mov	r2, r0
 8026824:	6428      	str	r0, [r5, #64]	; 0x40
 8026826:	b920      	cbnz	r0, 8026832 <asctime+0x22>
 8026828:	4b08      	ldr	r3, [pc, #32]	; (802684c <asctime+0x3c>)
 802682a:	4809      	ldr	r0, [pc, #36]	; (8026850 <asctime+0x40>)
 802682c:	2137      	movs	r1, #55	; 0x37
 802682e:	f000 f837 	bl	80268a0 <__assert_func>
 8026832:	221a      	movs	r2, #26
 8026834:	4631      	mov	r1, r6
 8026836:	f7fd fc2d 	bl	8024094 <memset>
 802683a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 802683c:	4620      	mov	r0, r4
 802683e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026842:	f000 b807 	b.w	8026854 <asctime_r>
 8026846:	bf00      	nop
 8026848:	2000048c 	.word	0x2000048c
 802684c:	0804566c 	.word	0x0804566c
 8026850:	08045aec 	.word	0x08045aec

08026854 <asctime_r>:
 8026854:	b510      	push	{r4, lr}
 8026856:	460c      	mov	r4, r1
 8026858:	6941      	ldr	r1, [r0, #20]
 802685a:	6903      	ldr	r3, [r0, #16]
 802685c:	6982      	ldr	r2, [r0, #24]
 802685e:	b086      	sub	sp, #24
 8026860:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8026864:	9104      	str	r1, [sp, #16]
 8026866:	6801      	ldr	r1, [r0, #0]
 8026868:	9103      	str	r1, [sp, #12]
 802686a:	6841      	ldr	r1, [r0, #4]
 802686c:	9102      	str	r1, [sp, #8]
 802686e:	6881      	ldr	r1, [r0, #8]
 8026870:	9101      	str	r1, [sp, #4]
 8026872:	68c1      	ldr	r1, [r0, #12]
 8026874:	9100      	str	r1, [sp, #0]
 8026876:	4907      	ldr	r1, [pc, #28]	; (8026894 <asctime_r+0x40>)
 8026878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802687c:	440b      	add	r3, r1
 802687e:	4906      	ldr	r1, [pc, #24]	; (8026898 <asctime_r+0x44>)
 8026880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026884:	440a      	add	r2, r1
 8026886:	4620      	mov	r0, r4
 8026888:	4904      	ldr	r1, [pc, #16]	; (802689c <asctime_r+0x48>)
 802688a:	f7fe fd91 	bl	80253b0 <siprintf>
 802688e:	4620      	mov	r0, r4
 8026890:	b006      	add	sp, #24
 8026892:	bd10      	pop	{r4, pc}
 8026894:	08045b7d 	.word	0x08045b7d
 8026898:	08045b68 	.word	0x08045b68
 802689c:	08045b48 	.word	0x08045b48

080268a0 <__assert_func>:
 80268a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80268a2:	4614      	mov	r4, r2
 80268a4:	461a      	mov	r2, r3
 80268a6:	4b09      	ldr	r3, [pc, #36]	; (80268cc <__assert_func+0x2c>)
 80268a8:	681b      	ldr	r3, [r3, #0]
 80268aa:	4605      	mov	r5, r0
 80268ac:	68d8      	ldr	r0, [r3, #12]
 80268ae:	b14c      	cbz	r4, 80268c4 <__assert_func+0x24>
 80268b0:	4b07      	ldr	r3, [pc, #28]	; (80268d0 <__assert_func+0x30>)
 80268b2:	9100      	str	r1, [sp, #0]
 80268b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80268b8:	4906      	ldr	r1, [pc, #24]	; (80268d4 <__assert_func+0x34>)
 80268ba:	462b      	mov	r3, r5
 80268bc:	f000 fef6 	bl	80276ac <fiprintf>
 80268c0:	f002 fb1e 	bl	8028f00 <abort>
 80268c4:	4b04      	ldr	r3, [pc, #16]	; (80268d8 <__assert_func+0x38>)
 80268c6:	461c      	mov	r4, r3
 80268c8:	e7f3      	b.n	80268b2 <__assert_func+0x12>
 80268ca:	bf00      	nop
 80268cc:	2000048c 	.word	0x2000048c
 80268d0:	08045ba1 	.word	0x08045ba1
 80268d4:	08045bae 	.word	0x08045bae
 80268d8:	08045b67 	.word	0x08045b67

080268dc <_close_r>:
 80268dc:	b538      	push	{r3, r4, r5, lr}
 80268de:	4d06      	ldr	r5, [pc, #24]	; (80268f8 <_close_r+0x1c>)
 80268e0:	2300      	movs	r3, #0
 80268e2:	4604      	mov	r4, r0
 80268e4:	4608      	mov	r0, r1
 80268e6:	602b      	str	r3, [r5, #0]
 80268e8:	f7df fe9e 	bl	8006628 <_close>
 80268ec:	1c43      	adds	r3, r0, #1
 80268ee:	d102      	bne.n	80268f6 <_close_r+0x1a>
 80268f0:	682b      	ldr	r3, [r5, #0]
 80268f2:	b103      	cbz	r3, 80268f6 <_close_r+0x1a>
 80268f4:	6023      	str	r3, [r4, #0]
 80268f6:	bd38      	pop	{r3, r4, r5, pc}
 80268f8:	2002f874 	.word	0x2002f874

080268fc <div>:
 80268fc:	2900      	cmp	r1, #0
 80268fe:	b510      	push	{r4, lr}
 8026900:	fb91 f4f2 	sdiv	r4, r1, r2
 8026904:	fb02 1314 	mls	r3, r2, r4, r1
 8026908:	db06      	blt.n	8026918 <div+0x1c>
 802690a:	2b00      	cmp	r3, #0
 802690c:	da01      	bge.n	8026912 <div+0x16>
 802690e:	3401      	adds	r4, #1
 8026910:	1a9b      	subs	r3, r3, r2
 8026912:	e9c0 4300 	strd	r4, r3, [r0]
 8026916:	bd10      	pop	{r4, pc}
 8026918:	2b00      	cmp	r3, #0
 802691a:	bfc4      	itt	gt
 802691c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8026920:	189b      	addgt	r3, r3, r2
 8026922:	e7f6      	b.n	8026912 <div+0x16>

08026924 <quorem>:
 8026924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026928:	6903      	ldr	r3, [r0, #16]
 802692a:	690c      	ldr	r4, [r1, #16]
 802692c:	42a3      	cmp	r3, r4
 802692e:	4607      	mov	r7, r0
 8026930:	f2c0 8081 	blt.w	8026a36 <quorem+0x112>
 8026934:	3c01      	subs	r4, #1
 8026936:	f101 0814 	add.w	r8, r1, #20
 802693a:	f100 0514 	add.w	r5, r0, #20
 802693e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026942:	9301      	str	r3, [sp, #4]
 8026944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802694c:	3301      	adds	r3, #1
 802694e:	429a      	cmp	r2, r3
 8026950:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026958:	fbb2 f6f3 	udiv	r6, r2, r3
 802695c:	d331      	bcc.n	80269c2 <quorem+0x9e>
 802695e:	f04f 0e00 	mov.w	lr, #0
 8026962:	4640      	mov	r0, r8
 8026964:	46ac      	mov	ip, r5
 8026966:	46f2      	mov	sl, lr
 8026968:	f850 2b04 	ldr.w	r2, [r0], #4
 802696c:	b293      	uxth	r3, r2
 802696e:	fb06 e303 	mla	r3, r6, r3, lr
 8026972:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026976:	b29b      	uxth	r3, r3
 8026978:	ebaa 0303 	sub.w	r3, sl, r3
 802697c:	f8dc a000 	ldr.w	sl, [ip]
 8026980:	0c12      	lsrs	r2, r2, #16
 8026982:	fa13 f38a 	uxtah	r3, r3, sl
 8026986:	fb06 e202 	mla	r2, r6, r2, lr
 802698a:	9300      	str	r3, [sp, #0]
 802698c:	9b00      	ldr	r3, [sp, #0]
 802698e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026992:	b292      	uxth	r2, r2
 8026994:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802699c:	f8bd 3000 	ldrh.w	r3, [sp]
 80269a0:	4581      	cmp	r9, r0
 80269a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80269a6:	f84c 3b04 	str.w	r3, [ip], #4
 80269aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80269ae:	d2db      	bcs.n	8026968 <quorem+0x44>
 80269b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80269b4:	b92b      	cbnz	r3, 80269c2 <quorem+0x9e>
 80269b6:	9b01      	ldr	r3, [sp, #4]
 80269b8:	3b04      	subs	r3, #4
 80269ba:	429d      	cmp	r5, r3
 80269bc:	461a      	mov	r2, r3
 80269be:	d32e      	bcc.n	8026a1e <quorem+0xfa>
 80269c0:	613c      	str	r4, [r7, #16]
 80269c2:	4638      	mov	r0, r7
 80269c4:	f001 fa86 	bl	8027ed4 <__mcmp>
 80269c8:	2800      	cmp	r0, #0
 80269ca:	db24      	blt.n	8026a16 <quorem+0xf2>
 80269cc:	3601      	adds	r6, #1
 80269ce:	4628      	mov	r0, r5
 80269d0:	f04f 0c00 	mov.w	ip, #0
 80269d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80269d8:	f8d0 e000 	ldr.w	lr, [r0]
 80269dc:	b293      	uxth	r3, r2
 80269de:	ebac 0303 	sub.w	r3, ip, r3
 80269e2:	0c12      	lsrs	r2, r2, #16
 80269e4:	fa13 f38e 	uxtah	r3, r3, lr
 80269e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80269ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80269f0:	b29b      	uxth	r3, r3
 80269f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80269f6:	45c1      	cmp	r9, r8
 80269f8:	f840 3b04 	str.w	r3, [r0], #4
 80269fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026a00:	d2e8      	bcs.n	80269d4 <quorem+0xb0>
 8026a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026a0a:	b922      	cbnz	r2, 8026a16 <quorem+0xf2>
 8026a0c:	3b04      	subs	r3, #4
 8026a0e:	429d      	cmp	r5, r3
 8026a10:	461a      	mov	r2, r3
 8026a12:	d30a      	bcc.n	8026a2a <quorem+0x106>
 8026a14:	613c      	str	r4, [r7, #16]
 8026a16:	4630      	mov	r0, r6
 8026a18:	b003      	add	sp, #12
 8026a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a1e:	6812      	ldr	r2, [r2, #0]
 8026a20:	3b04      	subs	r3, #4
 8026a22:	2a00      	cmp	r2, #0
 8026a24:	d1cc      	bne.n	80269c0 <quorem+0x9c>
 8026a26:	3c01      	subs	r4, #1
 8026a28:	e7c7      	b.n	80269ba <quorem+0x96>
 8026a2a:	6812      	ldr	r2, [r2, #0]
 8026a2c:	3b04      	subs	r3, #4
 8026a2e:	2a00      	cmp	r2, #0
 8026a30:	d1f0      	bne.n	8026a14 <quorem+0xf0>
 8026a32:	3c01      	subs	r4, #1
 8026a34:	e7eb      	b.n	8026a0e <quorem+0xea>
 8026a36:	2000      	movs	r0, #0
 8026a38:	e7ee      	b.n	8026a18 <quorem+0xf4>
 8026a3a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8026a3e:	Address 0x0000000008026a3e is out of bounds.


08026a40 <_dtoa_r>:
 8026a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a44:	ed2d 8b02 	vpush	{d8}
 8026a48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026a4a:	b091      	sub	sp, #68	; 0x44
 8026a4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026a50:	ec59 8b10 	vmov	r8, r9, d0
 8026a54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026a56:	9106      	str	r1, [sp, #24]
 8026a58:	4606      	mov	r6, r0
 8026a5a:	9208      	str	r2, [sp, #32]
 8026a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8026a5e:	b975      	cbnz	r5, 8026a7e <_dtoa_r+0x3e>
 8026a60:	2010      	movs	r0, #16
 8026a62:	f7fd facf 	bl	8024004 <malloc>
 8026a66:	4602      	mov	r2, r0
 8026a68:	6270      	str	r0, [r6, #36]	; 0x24
 8026a6a:	b920      	cbnz	r0, 8026a76 <_dtoa_r+0x36>
 8026a6c:	4baa      	ldr	r3, [pc, #680]	; (8026d18 <_dtoa_r+0x2d8>)
 8026a6e:	21ea      	movs	r1, #234	; 0xea
 8026a70:	48aa      	ldr	r0, [pc, #680]	; (8026d1c <_dtoa_r+0x2dc>)
 8026a72:	f7ff ff15 	bl	80268a0 <__assert_func>
 8026a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026a7a:	6005      	str	r5, [r0, #0]
 8026a7c:	60c5      	str	r5, [r0, #12]
 8026a7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026a80:	6819      	ldr	r1, [r3, #0]
 8026a82:	b151      	cbz	r1, 8026a9a <_dtoa_r+0x5a>
 8026a84:	685a      	ldr	r2, [r3, #4]
 8026a86:	604a      	str	r2, [r1, #4]
 8026a88:	2301      	movs	r3, #1
 8026a8a:	4093      	lsls	r3, r2
 8026a8c:	608b      	str	r3, [r1, #8]
 8026a8e:	4630      	mov	r0, r6
 8026a90:	f000 ffde 	bl	8027a50 <_Bfree>
 8026a94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026a96:	2200      	movs	r2, #0
 8026a98:	601a      	str	r2, [r3, #0]
 8026a9a:	f1b9 0300 	subs.w	r3, r9, #0
 8026a9e:	bfbb      	ittet	lt
 8026aa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026aa4:	9303      	strlt	r3, [sp, #12]
 8026aa6:	2300      	movge	r3, #0
 8026aa8:	2201      	movlt	r2, #1
 8026aaa:	bfac      	ite	ge
 8026aac:	6023      	strge	r3, [r4, #0]
 8026aae:	6022      	strlt	r2, [r4, #0]
 8026ab0:	4b9b      	ldr	r3, [pc, #620]	; (8026d20 <_dtoa_r+0x2e0>)
 8026ab2:	9c03      	ldr	r4, [sp, #12]
 8026ab4:	43a3      	bics	r3, r4
 8026ab6:	d11c      	bne.n	8026af2 <_dtoa_r+0xb2>
 8026ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8026abe:	6013      	str	r3, [r2, #0]
 8026ac0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8026ac4:	ea53 0308 	orrs.w	r3, r3, r8
 8026ac8:	f000 84fd 	beq.w	80274c6 <_dtoa_r+0xa86>
 8026acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026ace:	b963      	cbnz	r3, 8026aea <_dtoa_r+0xaa>
 8026ad0:	4b94      	ldr	r3, [pc, #592]	; (8026d24 <_dtoa_r+0x2e4>)
 8026ad2:	e01f      	b.n	8026b14 <_dtoa_r+0xd4>
 8026ad4:	4b94      	ldr	r3, [pc, #592]	; (8026d28 <_dtoa_r+0x2e8>)
 8026ad6:	9301      	str	r3, [sp, #4]
 8026ad8:	3308      	adds	r3, #8
 8026ada:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026adc:	6013      	str	r3, [r2, #0]
 8026ade:	9801      	ldr	r0, [sp, #4]
 8026ae0:	b011      	add	sp, #68	; 0x44
 8026ae2:	ecbd 8b02 	vpop	{d8}
 8026ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aea:	4b8e      	ldr	r3, [pc, #568]	; (8026d24 <_dtoa_r+0x2e4>)
 8026aec:	9301      	str	r3, [sp, #4]
 8026aee:	3303      	adds	r3, #3
 8026af0:	e7f3      	b.n	8026ada <_dtoa_r+0x9a>
 8026af2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8026af6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026afe:	d10b      	bne.n	8026b18 <_dtoa_r+0xd8>
 8026b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026b02:	2301      	movs	r3, #1
 8026b04:	6013      	str	r3, [r2, #0]
 8026b06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026b08:	2b00      	cmp	r3, #0
 8026b0a:	f000 84d9 	beq.w	80274c0 <_dtoa_r+0xa80>
 8026b0e:	4887      	ldr	r0, [pc, #540]	; (8026d2c <_dtoa_r+0x2ec>)
 8026b10:	6018      	str	r0, [r3, #0]
 8026b12:	1e43      	subs	r3, r0, #1
 8026b14:	9301      	str	r3, [sp, #4]
 8026b16:	e7e2      	b.n	8026ade <_dtoa_r+0x9e>
 8026b18:	a90f      	add	r1, sp, #60	; 0x3c
 8026b1a:	aa0e      	add	r2, sp, #56	; 0x38
 8026b1c:	4630      	mov	r0, r6
 8026b1e:	eeb0 0b48 	vmov.f64	d0, d8
 8026b22:	f001 fa7d 	bl	8028020 <__d2b>
 8026b26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8026b2a:	4605      	mov	r5, r0
 8026b2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026b2e:	2900      	cmp	r1, #0
 8026b30:	d046      	beq.n	8026bc0 <_dtoa_r+0x180>
 8026b32:	ee18 4a90 	vmov	r4, s17
 8026b36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026b3a:	ec53 2b18 	vmov	r2, r3, d8
 8026b3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026b42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026b46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8026b4a:	2400      	movs	r4, #0
 8026b4c:	ec43 2b16 	vmov	d6, r2, r3
 8026b50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026b54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026d00 <_dtoa_r+0x2c0>
 8026b58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8026b5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026d08 <_dtoa_r+0x2c8>
 8026b60:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026b64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026d10 <_dtoa_r+0x2d0>
 8026b68:	ee07 1a90 	vmov	s15, r1
 8026b6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026b70:	eeb0 7b46 	vmov.f64	d7, d6
 8026b74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026b78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8026b7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b84:	ee16 ba90 	vmov	fp, s13
 8026b88:	940a      	str	r4, [sp, #40]	; 0x28
 8026b8a:	d508      	bpl.n	8026b9e <_dtoa_r+0x15e>
 8026b8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8026b90:	eeb4 6b47 	vcmp.f64	d6, d7
 8026b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b98:	bf18      	it	ne
 8026b9a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8026b9e:	f1bb 0f16 	cmp.w	fp, #22
 8026ba2:	d82f      	bhi.n	8026c04 <_dtoa_r+0x1c4>
 8026ba4:	4b62      	ldr	r3, [pc, #392]	; (8026d30 <_dtoa_r+0x2f0>)
 8026ba6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026baa:	ed93 7b00 	vldr	d7, [r3]
 8026bae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bb6:	d501      	bpl.n	8026bbc <_dtoa_r+0x17c>
 8026bb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026bbc:	2300      	movs	r3, #0
 8026bbe:	e022      	b.n	8026c06 <_dtoa_r+0x1c6>
 8026bc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026bc2:	4401      	add	r1, r0
 8026bc4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8026bc8:	2b20      	cmp	r3, #32
 8026bca:	bfc1      	itttt	gt
 8026bcc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026bd0:	fa04 f303 	lslgt.w	r3, r4, r3
 8026bd4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8026bd8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8026bdc:	bfd6      	itet	le
 8026bde:	f1c3 0320 	rsble	r3, r3, #32
 8026be2:	ea43 0808 	orrgt.w	r8, r3, r8
 8026be6:	fa08 f803 	lslle.w	r8, r8, r3
 8026bea:	ee07 8a90 	vmov	s15, r8
 8026bee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026bf2:	3901      	subs	r1, #1
 8026bf4:	ee17 4a90 	vmov	r4, s15
 8026bf8:	ec53 2b17 	vmov	r2, r3, d7
 8026bfc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026c00:	2401      	movs	r4, #1
 8026c02:	e7a3      	b.n	8026b4c <_dtoa_r+0x10c>
 8026c04:	2301      	movs	r3, #1
 8026c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c08:	1a43      	subs	r3, r0, r1
 8026c0a:	1e5a      	subs	r2, r3, #1
 8026c0c:	bf45      	ittet	mi
 8026c0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8026c12:	9304      	strmi	r3, [sp, #16]
 8026c14:	2300      	movpl	r3, #0
 8026c16:	2300      	movmi	r3, #0
 8026c18:	9205      	str	r2, [sp, #20]
 8026c1a:	bf54      	ite	pl
 8026c1c:	9304      	strpl	r3, [sp, #16]
 8026c1e:	9305      	strmi	r3, [sp, #20]
 8026c20:	f1bb 0f00 	cmp.w	fp, #0
 8026c24:	db18      	blt.n	8026c58 <_dtoa_r+0x218>
 8026c26:	9b05      	ldr	r3, [sp, #20]
 8026c28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8026c2c:	445b      	add	r3, fp
 8026c2e:	9305      	str	r3, [sp, #20]
 8026c30:	2300      	movs	r3, #0
 8026c32:	9a06      	ldr	r2, [sp, #24]
 8026c34:	2a09      	cmp	r2, #9
 8026c36:	d849      	bhi.n	8026ccc <_dtoa_r+0x28c>
 8026c38:	2a05      	cmp	r2, #5
 8026c3a:	bfc4      	itt	gt
 8026c3c:	3a04      	subgt	r2, #4
 8026c3e:	9206      	strgt	r2, [sp, #24]
 8026c40:	9a06      	ldr	r2, [sp, #24]
 8026c42:	f1a2 0202 	sub.w	r2, r2, #2
 8026c46:	bfcc      	ite	gt
 8026c48:	2400      	movgt	r4, #0
 8026c4a:	2401      	movle	r4, #1
 8026c4c:	2a03      	cmp	r2, #3
 8026c4e:	d848      	bhi.n	8026ce2 <_dtoa_r+0x2a2>
 8026c50:	e8df f002 	tbb	[pc, r2]
 8026c54:	3a2c2e0b 	.word	0x3a2c2e0b
 8026c58:	9b04      	ldr	r3, [sp, #16]
 8026c5a:	2200      	movs	r2, #0
 8026c5c:	eba3 030b 	sub.w	r3, r3, fp
 8026c60:	9304      	str	r3, [sp, #16]
 8026c62:	9209      	str	r2, [sp, #36]	; 0x24
 8026c64:	f1cb 0300 	rsb	r3, fp, #0
 8026c68:	e7e3      	b.n	8026c32 <_dtoa_r+0x1f2>
 8026c6a:	2200      	movs	r2, #0
 8026c6c:	9207      	str	r2, [sp, #28]
 8026c6e:	9a08      	ldr	r2, [sp, #32]
 8026c70:	2a00      	cmp	r2, #0
 8026c72:	dc39      	bgt.n	8026ce8 <_dtoa_r+0x2a8>
 8026c74:	f04f 0a01 	mov.w	sl, #1
 8026c78:	46d1      	mov	r9, sl
 8026c7a:	4652      	mov	r2, sl
 8026c7c:	f8cd a020 	str.w	sl, [sp, #32]
 8026c80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8026c82:	2100      	movs	r1, #0
 8026c84:	6079      	str	r1, [r7, #4]
 8026c86:	2004      	movs	r0, #4
 8026c88:	f100 0c14 	add.w	ip, r0, #20
 8026c8c:	4594      	cmp	ip, r2
 8026c8e:	6879      	ldr	r1, [r7, #4]
 8026c90:	d92f      	bls.n	8026cf2 <_dtoa_r+0x2b2>
 8026c92:	4630      	mov	r0, r6
 8026c94:	930d      	str	r3, [sp, #52]	; 0x34
 8026c96:	f000 fe9b 	bl	80279d0 <_Balloc>
 8026c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026c9c:	9001      	str	r0, [sp, #4]
 8026c9e:	4602      	mov	r2, r0
 8026ca0:	2800      	cmp	r0, #0
 8026ca2:	d149      	bne.n	8026d38 <_dtoa_r+0x2f8>
 8026ca4:	4b23      	ldr	r3, [pc, #140]	; (8026d34 <_dtoa_r+0x2f4>)
 8026ca6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026caa:	e6e1      	b.n	8026a70 <_dtoa_r+0x30>
 8026cac:	2201      	movs	r2, #1
 8026cae:	e7dd      	b.n	8026c6c <_dtoa_r+0x22c>
 8026cb0:	2200      	movs	r2, #0
 8026cb2:	9207      	str	r2, [sp, #28]
 8026cb4:	9a08      	ldr	r2, [sp, #32]
 8026cb6:	eb0b 0a02 	add.w	sl, fp, r2
 8026cba:	f10a 0901 	add.w	r9, sl, #1
 8026cbe:	464a      	mov	r2, r9
 8026cc0:	2a01      	cmp	r2, #1
 8026cc2:	bfb8      	it	lt
 8026cc4:	2201      	movlt	r2, #1
 8026cc6:	e7db      	b.n	8026c80 <_dtoa_r+0x240>
 8026cc8:	2201      	movs	r2, #1
 8026cca:	e7f2      	b.n	8026cb2 <_dtoa_r+0x272>
 8026ccc:	2401      	movs	r4, #1
 8026cce:	2200      	movs	r2, #0
 8026cd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8026cd4:	f04f 3aff 	mov.w	sl, #4294967295
 8026cd8:	2100      	movs	r1, #0
 8026cda:	46d1      	mov	r9, sl
 8026cdc:	2212      	movs	r2, #18
 8026cde:	9108      	str	r1, [sp, #32]
 8026ce0:	e7ce      	b.n	8026c80 <_dtoa_r+0x240>
 8026ce2:	2201      	movs	r2, #1
 8026ce4:	9207      	str	r2, [sp, #28]
 8026ce6:	e7f5      	b.n	8026cd4 <_dtoa_r+0x294>
 8026ce8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026cec:	46d1      	mov	r9, sl
 8026cee:	4652      	mov	r2, sl
 8026cf0:	e7c6      	b.n	8026c80 <_dtoa_r+0x240>
 8026cf2:	3101      	adds	r1, #1
 8026cf4:	6079      	str	r1, [r7, #4]
 8026cf6:	0040      	lsls	r0, r0, #1
 8026cf8:	e7c6      	b.n	8026c88 <_dtoa_r+0x248>
 8026cfa:	bf00      	nop
 8026cfc:	f3af 8000 	nop.w
 8026d00:	636f4361 	.word	0x636f4361
 8026d04:	3fd287a7 	.word	0x3fd287a7
 8026d08:	8b60c8b3 	.word	0x8b60c8b3
 8026d0c:	3fc68a28 	.word	0x3fc68a28
 8026d10:	509f79fb 	.word	0x509f79fb
 8026d14:	3fd34413 	.word	0x3fd34413
 8026d18:	0804566c 	.word	0x0804566c
 8026d1c:	08045bea 	.word	0x08045bea
 8026d20:	7ff00000 	.word	0x7ff00000
 8026d24:	08045be6 	.word	0x08045be6
 8026d28:	08045bdd 	.word	0x08045bdd
 8026d2c:	08045dca 	.word	0x08045dca
 8026d30:	08045ce0 	.word	0x08045ce0
 8026d34:	08045c45 	.word	0x08045c45
 8026d38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8026d3a:	9901      	ldr	r1, [sp, #4]
 8026d3c:	6011      	str	r1, [r2, #0]
 8026d3e:	f1b9 0f0e 	cmp.w	r9, #14
 8026d42:	d86c      	bhi.n	8026e1e <_dtoa_r+0x3de>
 8026d44:	2c00      	cmp	r4, #0
 8026d46:	d06a      	beq.n	8026e1e <_dtoa_r+0x3de>
 8026d48:	f1bb 0f00 	cmp.w	fp, #0
 8026d4c:	f340 80a0 	ble.w	8026e90 <_dtoa_r+0x450>
 8026d50:	49c1      	ldr	r1, [pc, #772]	; (8027058 <_dtoa_r+0x618>)
 8026d52:	f00b 020f 	and.w	r2, fp, #15
 8026d56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8026d5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8026d5e:	ed92 7b00 	vldr	d7, [r2]
 8026d62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8026d66:	f000 8087 	beq.w	8026e78 <_dtoa_r+0x438>
 8026d6a:	4abc      	ldr	r2, [pc, #752]	; (802705c <_dtoa_r+0x61c>)
 8026d6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026d70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026d74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026d78:	f001 010f 	and.w	r1, r1, #15
 8026d7c:	2203      	movs	r2, #3
 8026d7e:	48b7      	ldr	r0, [pc, #732]	; (802705c <_dtoa_r+0x61c>)
 8026d80:	2900      	cmp	r1, #0
 8026d82:	d17b      	bne.n	8026e7c <_dtoa_r+0x43c>
 8026d84:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026d88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026d92:	2900      	cmp	r1, #0
 8026d94:	f000 80a2 	beq.w	8026edc <_dtoa_r+0x49c>
 8026d98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8026d9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026da0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026da8:	f140 8098 	bpl.w	8026edc <_dtoa_r+0x49c>
 8026dac:	f1b9 0f00 	cmp.w	r9, #0
 8026db0:	f000 8094 	beq.w	8026edc <_dtoa_r+0x49c>
 8026db4:	f1ba 0f00 	cmp.w	sl, #0
 8026db8:	dd2f      	ble.n	8026e1a <_dtoa_r+0x3da>
 8026dba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8026dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026dc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026dc6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8026dca:	3201      	adds	r2, #1
 8026dcc:	4650      	mov	r0, sl
 8026dce:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026dd2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8026dd6:	ee07 2a90 	vmov	s15, r2
 8026dda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8026dde:	eea7 5b06 	vfma.f64	d5, d7, d6
 8026de2:	ee15 4a90 	vmov	r4, s11
 8026de6:	ec52 1b15 	vmov	r1, r2, d5
 8026dea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8026dee:	2800      	cmp	r0, #0
 8026df0:	d177      	bne.n	8026ee2 <_dtoa_r+0x4a2>
 8026df2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026df6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8026dfa:	ec42 1b17 	vmov	d7, r1, r2
 8026dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e06:	f300 8263 	bgt.w	80272d0 <_dtoa_r+0x890>
 8026e0a:	eeb1 7b47 	vneg.f64	d7, d7
 8026e0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e16:	f100 8258 	bmi.w	80272ca <_dtoa_r+0x88a>
 8026e1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026e20:	2a00      	cmp	r2, #0
 8026e22:	f2c0 811d 	blt.w	8027060 <_dtoa_r+0x620>
 8026e26:	f1bb 0f0e 	cmp.w	fp, #14
 8026e2a:	f300 8119 	bgt.w	8027060 <_dtoa_r+0x620>
 8026e2e:	4b8a      	ldr	r3, [pc, #552]	; (8027058 <_dtoa_r+0x618>)
 8026e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026e34:	ed93 6b00 	vldr	d6, [r3]
 8026e38:	9b08      	ldr	r3, [sp, #32]
 8026e3a:	2b00      	cmp	r3, #0
 8026e3c:	f280 80b7 	bge.w	8026fae <_dtoa_r+0x56e>
 8026e40:	f1b9 0f00 	cmp.w	r9, #0
 8026e44:	f300 80b3 	bgt.w	8026fae <_dtoa_r+0x56e>
 8026e48:	f040 823f 	bne.w	80272ca <_dtoa_r+0x88a>
 8026e4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026e50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026e54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026e58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e60:	464c      	mov	r4, r9
 8026e62:	464f      	mov	r7, r9
 8026e64:	f280 8215 	bge.w	8027292 <_dtoa_r+0x852>
 8026e68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026e6c:	2331      	movs	r3, #49	; 0x31
 8026e6e:	f808 3b01 	strb.w	r3, [r8], #1
 8026e72:	f10b 0b01 	add.w	fp, fp, #1
 8026e76:	e211      	b.n	802729c <_dtoa_r+0x85c>
 8026e78:	2202      	movs	r2, #2
 8026e7a:	e780      	b.n	8026d7e <_dtoa_r+0x33e>
 8026e7c:	07cc      	lsls	r4, r1, #31
 8026e7e:	d504      	bpl.n	8026e8a <_dtoa_r+0x44a>
 8026e80:	ed90 6b00 	vldr	d6, [r0]
 8026e84:	3201      	adds	r2, #1
 8026e86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026e8a:	1049      	asrs	r1, r1, #1
 8026e8c:	3008      	adds	r0, #8
 8026e8e:	e777      	b.n	8026d80 <_dtoa_r+0x340>
 8026e90:	d022      	beq.n	8026ed8 <_dtoa_r+0x498>
 8026e92:	f1cb 0100 	rsb	r1, fp, #0
 8026e96:	4a70      	ldr	r2, [pc, #448]	; (8027058 <_dtoa_r+0x618>)
 8026e98:	f001 000f 	and.w	r0, r1, #15
 8026e9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026ea0:	ed92 7b00 	vldr	d7, [r2]
 8026ea4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8026ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026eac:	486b      	ldr	r0, [pc, #428]	; (802705c <_dtoa_r+0x61c>)
 8026eae:	1109      	asrs	r1, r1, #4
 8026eb0:	2400      	movs	r4, #0
 8026eb2:	2202      	movs	r2, #2
 8026eb4:	b929      	cbnz	r1, 8026ec2 <_dtoa_r+0x482>
 8026eb6:	2c00      	cmp	r4, #0
 8026eb8:	f43f af6a 	beq.w	8026d90 <_dtoa_r+0x350>
 8026ebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026ec0:	e766      	b.n	8026d90 <_dtoa_r+0x350>
 8026ec2:	07cf      	lsls	r7, r1, #31
 8026ec4:	d505      	bpl.n	8026ed2 <_dtoa_r+0x492>
 8026ec6:	ed90 6b00 	vldr	d6, [r0]
 8026eca:	3201      	adds	r2, #1
 8026ecc:	2401      	movs	r4, #1
 8026ece:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026ed2:	1049      	asrs	r1, r1, #1
 8026ed4:	3008      	adds	r0, #8
 8026ed6:	e7ed      	b.n	8026eb4 <_dtoa_r+0x474>
 8026ed8:	2202      	movs	r2, #2
 8026eda:	e759      	b.n	8026d90 <_dtoa_r+0x350>
 8026edc:	465f      	mov	r7, fp
 8026ede:	4648      	mov	r0, r9
 8026ee0:	e775      	b.n	8026dce <_dtoa_r+0x38e>
 8026ee2:	ec42 1b17 	vmov	d7, r1, r2
 8026ee6:	4a5c      	ldr	r2, [pc, #368]	; (8027058 <_dtoa_r+0x618>)
 8026ee8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026eec:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026ef0:	9a01      	ldr	r2, [sp, #4]
 8026ef2:	1814      	adds	r4, r2, r0
 8026ef4:	9a07      	ldr	r2, [sp, #28]
 8026ef6:	b352      	cbz	r2, 8026f4e <_dtoa_r+0x50e>
 8026ef8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8026efc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026f00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026f04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026f08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026f0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026f10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026f14:	ee14 2a90 	vmov	r2, s9
 8026f18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026f1c:	3230      	adds	r2, #48	; 0x30
 8026f1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026f22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f2a:	f808 2b01 	strb.w	r2, [r8], #1
 8026f2e:	d439      	bmi.n	8026fa4 <_dtoa_r+0x564>
 8026f30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026f34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f3c:	d472      	bmi.n	8027024 <_dtoa_r+0x5e4>
 8026f3e:	45a0      	cmp	r8, r4
 8026f40:	f43f af6b 	beq.w	8026e1a <_dtoa_r+0x3da>
 8026f44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026f48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026f4c:	e7e0      	b.n	8026f10 <_dtoa_r+0x4d0>
 8026f4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026f52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026f56:	4621      	mov	r1, r4
 8026f58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026f5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026f60:	ee14 2a90 	vmov	r2, s9
 8026f64:	3230      	adds	r2, #48	; 0x30
 8026f66:	f808 2b01 	strb.w	r2, [r8], #1
 8026f6a:	45a0      	cmp	r8, r4
 8026f6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026f70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026f74:	d118      	bne.n	8026fa8 <_dtoa_r+0x568>
 8026f76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8026f7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8026f7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8026f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f86:	dc4d      	bgt.n	8027024 <_dtoa_r+0x5e4>
 8026f88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026f8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f94:	f57f af41 	bpl.w	8026e1a <_dtoa_r+0x3da>
 8026f98:	4688      	mov	r8, r1
 8026f9a:	3901      	subs	r1, #1
 8026f9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8026fa0:	2b30      	cmp	r3, #48	; 0x30
 8026fa2:	d0f9      	beq.n	8026f98 <_dtoa_r+0x558>
 8026fa4:	46bb      	mov	fp, r7
 8026fa6:	e02a      	b.n	8026ffe <_dtoa_r+0x5be>
 8026fa8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026fac:	e7d6      	b.n	8026f5c <_dtoa_r+0x51c>
 8026fae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026fb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8026fb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026fba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8026fbe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8026fc2:	ee15 3a10 	vmov	r3, s10
 8026fc6:	3330      	adds	r3, #48	; 0x30
 8026fc8:	f808 3b01 	strb.w	r3, [r8], #1
 8026fcc:	9b01      	ldr	r3, [sp, #4]
 8026fce:	eba8 0303 	sub.w	r3, r8, r3
 8026fd2:	4599      	cmp	r9, r3
 8026fd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8026fd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8026fdc:	d133      	bne.n	8027046 <_dtoa_r+0x606>
 8026fde:	ee37 7b07 	vadd.f64	d7, d7, d7
 8026fe2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fea:	dc1a      	bgt.n	8027022 <_dtoa_r+0x5e2>
 8026fec:	eeb4 7b46 	vcmp.f64	d7, d6
 8026ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ff4:	d103      	bne.n	8026ffe <_dtoa_r+0x5be>
 8026ff6:	ee15 3a10 	vmov	r3, s10
 8026ffa:	07d9      	lsls	r1, r3, #31
 8026ffc:	d411      	bmi.n	8027022 <_dtoa_r+0x5e2>
 8026ffe:	4629      	mov	r1, r5
 8027000:	4630      	mov	r0, r6
 8027002:	f000 fd25 	bl	8027a50 <_Bfree>
 8027006:	2300      	movs	r3, #0
 8027008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802700a:	f888 3000 	strb.w	r3, [r8]
 802700e:	f10b 0301 	add.w	r3, fp, #1
 8027012:	6013      	str	r3, [r2, #0]
 8027014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027016:	2b00      	cmp	r3, #0
 8027018:	f43f ad61 	beq.w	8026ade <_dtoa_r+0x9e>
 802701c:	f8c3 8000 	str.w	r8, [r3]
 8027020:	e55d      	b.n	8026ade <_dtoa_r+0x9e>
 8027022:	465f      	mov	r7, fp
 8027024:	4643      	mov	r3, r8
 8027026:	4698      	mov	r8, r3
 8027028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802702c:	2a39      	cmp	r2, #57	; 0x39
 802702e:	d106      	bne.n	802703e <_dtoa_r+0x5fe>
 8027030:	9a01      	ldr	r2, [sp, #4]
 8027032:	429a      	cmp	r2, r3
 8027034:	d1f7      	bne.n	8027026 <_dtoa_r+0x5e6>
 8027036:	9901      	ldr	r1, [sp, #4]
 8027038:	2230      	movs	r2, #48	; 0x30
 802703a:	3701      	adds	r7, #1
 802703c:	700a      	strb	r2, [r1, #0]
 802703e:	781a      	ldrb	r2, [r3, #0]
 8027040:	3201      	adds	r2, #1
 8027042:	701a      	strb	r2, [r3, #0]
 8027044:	e7ae      	b.n	8026fa4 <_dtoa_r+0x564>
 8027046:	ee27 7b04 	vmul.f64	d7, d7, d4
 802704a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027052:	d1b2      	bne.n	8026fba <_dtoa_r+0x57a>
 8027054:	e7d3      	b.n	8026ffe <_dtoa_r+0x5be>
 8027056:	bf00      	nop
 8027058:	08045ce0 	.word	0x08045ce0
 802705c:	08045cb8 	.word	0x08045cb8
 8027060:	9907      	ldr	r1, [sp, #28]
 8027062:	2900      	cmp	r1, #0
 8027064:	f000 80d0 	beq.w	8027208 <_dtoa_r+0x7c8>
 8027068:	9906      	ldr	r1, [sp, #24]
 802706a:	2901      	cmp	r1, #1
 802706c:	f300 80b4 	bgt.w	80271d8 <_dtoa_r+0x798>
 8027070:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027072:	2900      	cmp	r1, #0
 8027074:	f000 80ac 	beq.w	80271d0 <_dtoa_r+0x790>
 8027078:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802707c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027080:	461c      	mov	r4, r3
 8027082:	930a      	str	r3, [sp, #40]	; 0x28
 8027084:	9b04      	ldr	r3, [sp, #16]
 8027086:	4413      	add	r3, r2
 8027088:	9304      	str	r3, [sp, #16]
 802708a:	9b05      	ldr	r3, [sp, #20]
 802708c:	2101      	movs	r1, #1
 802708e:	4413      	add	r3, r2
 8027090:	4630      	mov	r0, r6
 8027092:	9305      	str	r3, [sp, #20]
 8027094:	f000 fd94 	bl	8027bc0 <__i2b>
 8027098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802709a:	4607      	mov	r7, r0
 802709c:	f1b8 0f00 	cmp.w	r8, #0
 80270a0:	dd0d      	ble.n	80270be <_dtoa_r+0x67e>
 80270a2:	9a05      	ldr	r2, [sp, #20]
 80270a4:	2a00      	cmp	r2, #0
 80270a6:	dd0a      	ble.n	80270be <_dtoa_r+0x67e>
 80270a8:	4542      	cmp	r2, r8
 80270aa:	9904      	ldr	r1, [sp, #16]
 80270ac:	bfa8      	it	ge
 80270ae:	4642      	movge	r2, r8
 80270b0:	1a89      	subs	r1, r1, r2
 80270b2:	9104      	str	r1, [sp, #16]
 80270b4:	9905      	ldr	r1, [sp, #20]
 80270b6:	eba8 0802 	sub.w	r8, r8, r2
 80270ba:	1a8a      	subs	r2, r1, r2
 80270bc:	9205      	str	r2, [sp, #20]
 80270be:	b303      	cbz	r3, 8027102 <_dtoa_r+0x6c2>
 80270c0:	9a07      	ldr	r2, [sp, #28]
 80270c2:	2a00      	cmp	r2, #0
 80270c4:	f000 80a5 	beq.w	8027212 <_dtoa_r+0x7d2>
 80270c8:	2c00      	cmp	r4, #0
 80270ca:	dd13      	ble.n	80270f4 <_dtoa_r+0x6b4>
 80270cc:	4639      	mov	r1, r7
 80270ce:	4622      	mov	r2, r4
 80270d0:	4630      	mov	r0, r6
 80270d2:	930d      	str	r3, [sp, #52]	; 0x34
 80270d4:	f000 fe34 	bl	8027d40 <__pow5mult>
 80270d8:	462a      	mov	r2, r5
 80270da:	4601      	mov	r1, r0
 80270dc:	4607      	mov	r7, r0
 80270de:	4630      	mov	r0, r6
 80270e0:	f000 fd84 	bl	8027bec <__multiply>
 80270e4:	4629      	mov	r1, r5
 80270e6:	900a      	str	r0, [sp, #40]	; 0x28
 80270e8:	4630      	mov	r0, r6
 80270ea:	f000 fcb1 	bl	8027a50 <_Bfree>
 80270ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80270f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270f2:	4615      	mov	r5, r2
 80270f4:	1b1a      	subs	r2, r3, r4
 80270f6:	d004      	beq.n	8027102 <_dtoa_r+0x6c2>
 80270f8:	4629      	mov	r1, r5
 80270fa:	4630      	mov	r0, r6
 80270fc:	f000 fe20 	bl	8027d40 <__pow5mult>
 8027100:	4605      	mov	r5, r0
 8027102:	2101      	movs	r1, #1
 8027104:	4630      	mov	r0, r6
 8027106:	f000 fd5b 	bl	8027bc0 <__i2b>
 802710a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802710c:	2b00      	cmp	r3, #0
 802710e:	4604      	mov	r4, r0
 8027110:	f340 8081 	ble.w	8027216 <_dtoa_r+0x7d6>
 8027114:	461a      	mov	r2, r3
 8027116:	4601      	mov	r1, r0
 8027118:	4630      	mov	r0, r6
 802711a:	f000 fe11 	bl	8027d40 <__pow5mult>
 802711e:	9b06      	ldr	r3, [sp, #24]
 8027120:	2b01      	cmp	r3, #1
 8027122:	4604      	mov	r4, r0
 8027124:	dd7a      	ble.n	802721c <_dtoa_r+0x7dc>
 8027126:	2300      	movs	r3, #0
 8027128:	930a      	str	r3, [sp, #40]	; 0x28
 802712a:	6922      	ldr	r2, [r4, #16]
 802712c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8027130:	6910      	ldr	r0, [r2, #16]
 8027132:	f000 fcf5 	bl	8027b20 <__hi0bits>
 8027136:	f1c0 0020 	rsb	r0, r0, #32
 802713a:	9b05      	ldr	r3, [sp, #20]
 802713c:	4418      	add	r0, r3
 802713e:	f010 001f 	ands.w	r0, r0, #31
 8027142:	f000 808c 	beq.w	802725e <_dtoa_r+0x81e>
 8027146:	f1c0 0220 	rsb	r2, r0, #32
 802714a:	2a04      	cmp	r2, #4
 802714c:	f340 8085 	ble.w	802725a <_dtoa_r+0x81a>
 8027150:	f1c0 001c 	rsb	r0, r0, #28
 8027154:	9b04      	ldr	r3, [sp, #16]
 8027156:	4403      	add	r3, r0
 8027158:	9304      	str	r3, [sp, #16]
 802715a:	9b05      	ldr	r3, [sp, #20]
 802715c:	4403      	add	r3, r0
 802715e:	4480      	add	r8, r0
 8027160:	9305      	str	r3, [sp, #20]
 8027162:	9b04      	ldr	r3, [sp, #16]
 8027164:	2b00      	cmp	r3, #0
 8027166:	dd05      	ble.n	8027174 <_dtoa_r+0x734>
 8027168:	4629      	mov	r1, r5
 802716a:	461a      	mov	r2, r3
 802716c:	4630      	mov	r0, r6
 802716e:	f000 fe41 	bl	8027df4 <__lshift>
 8027172:	4605      	mov	r5, r0
 8027174:	9b05      	ldr	r3, [sp, #20]
 8027176:	2b00      	cmp	r3, #0
 8027178:	dd05      	ble.n	8027186 <_dtoa_r+0x746>
 802717a:	4621      	mov	r1, r4
 802717c:	461a      	mov	r2, r3
 802717e:	4630      	mov	r0, r6
 8027180:	f000 fe38 	bl	8027df4 <__lshift>
 8027184:	4604      	mov	r4, r0
 8027186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027188:	2b00      	cmp	r3, #0
 802718a:	d06a      	beq.n	8027262 <_dtoa_r+0x822>
 802718c:	4621      	mov	r1, r4
 802718e:	4628      	mov	r0, r5
 8027190:	f000 fea0 	bl	8027ed4 <__mcmp>
 8027194:	2800      	cmp	r0, #0
 8027196:	da64      	bge.n	8027262 <_dtoa_r+0x822>
 8027198:	2300      	movs	r3, #0
 802719a:	4629      	mov	r1, r5
 802719c:	220a      	movs	r2, #10
 802719e:	4630      	mov	r0, r6
 80271a0:	f000 fc78 	bl	8027a94 <__multadd>
 80271a4:	9b07      	ldr	r3, [sp, #28]
 80271a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80271aa:	4605      	mov	r5, r0
 80271ac:	2b00      	cmp	r3, #0
 80271ae:	f000 8191 	beq.w	80274d4 <_dtoa_r+0xa94>
 80271b2:	4639      	mov	r1, r7
 80271b4:	2300      	movs	r3, #0
 80271b6:	220a      	movs	r2, #10
 80271b8:	4630      	mov	r0, r6
 80271ba:	f000 fc6b 	bl	8027a94 <__multadd>
 80271be:	f1ba 0f00 	cmp.w	sl, #0
 80271c2:	4607      	mov	r7, r0
 80271c4:	f300 808d 	bgt.w	80272e2 <_dtoa_r+0x8a2>
 80271c8:	9b06      	ldr	r3, [sp, #24]
 80271ca:	2b02      	cmp	r3, #2
 80271cc:	dc50      	bgt.n	8027270 <_dtoa_r+0x830>
 80271ce:	e088      	b.n	80272e2 <_dtoa_r+0x8a2>
 80271d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80271d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80271d6:	e751      	b.n	802707c <_dtoa_r+0x63c>
 80271d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80271dc:	42a3      	cmp	r3, r4
 80271de:	bfbf      	itttt	lt
 80271e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80271e2:	1ae3      	sublt	r3, r4, r3
 80271e4:	18d2      	addlt	r2, r2, r3
 80271e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80271e8:	bfb6      	itet	lt
 80271ea:	4623      	movlt	r3, r4
 80271ec:	1b1c      	subge	r4, r3, r4
 80271ee:	2400      	movlt	r4, #0
 80271f0:	f1b9 0f00 	cmp.w	r9, #0
 80271f4:	bfb5      	itete	lt
 80271f6:	9a04      	ldrlt	r2, [sp, #16]
 80271f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80271fc:	eba2 0809 	sublt.w	r8, r2, r9
 8027200:	464a      	movge	r2, r9
 8027202:	bfb8      	it	lt
 8027204:	2200      	movlt	r2, #0
 8027206:	e73c      	b.n	8027082 <_dtoa_r+0x642>
 8027208:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802720c:	9f07      	ldr	r7, [sp, #28]
 802720e:	461c      	mov	r4, r3
 8027210:	e744      	b.n	802709c <_dtoa_r+0x65c>
 8027212:	461a      	mov	r2, r3
 8027214:	e770      	b.n	80270f8 <_dtoa_r+0x6b8>
 8027216:	9b06      	ldr	r3, [sp, #24]
 8027218:	2b01      	cmp	r3, #1
 802721a:	dc18      	bgt.n	802724e <_dtoa_r+0x80e>
 802721c:	9b02      	ldr	r3, [sp, #8]
 802721e:	b9b3      	cbnz	r3, 802724e <_dtoa_r+0x80e>
 8027220:	9b03      	ldr	r3, [sp, #12]
 8027222:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8027226:	b9a2      	cbnz	r2, 8027252 <_dtoa_r+0x812>
 8027228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802722c:	0d12      	lsrs	r2, r2, #20
 802722e:	0512      	lsls	r2, r2, #20
 8027230:	b18a      	cbz	r2, 8027256 <_dtoa_r+0x816>
 8027232:	9b04      	ldr	r3, [sp, #16]
 8027234:	3301      	adds	r3, #1
 8027236:	9304      	str	r3, [sp, #16]
 8027238:	9b05      	ldr	r3, [sp, #20]
 802723a:	3301      	adds	r3, #1
 802723c:	9305      	str	r3, [sp, #20]
 802723e:	2301      	movs	r3, #1
 8027240:	930a      	str	r3, [sp, #40]	; 0x28
 8027242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027244:	2b00      	cmp	r3, #0
 8027246:	f47f af70 	bne.w	802712a <_dtoa_r+0x6ea>
 802724a:	2001      	movs	r0, #1
 802724c:	e775      	b.n	802713a <_dtoa_r+0x6fa>
 802724e:	2300      	movs	r3, #0
 8027250:	e7f6      	b.n	8027240 <_dtoa_r+0x800>
 8027252:	9b02      	ldr	r3, [sp, #8]
 8027254:	e7f4      	b.n	8027240 <_dtoa_r+0x800>
 8027256:	920a      	str	r2, [sp, #40]	; 0x28
 8027258:	e7f3      	b.n	8027242 <_dtoa_r+0x802>
 802725a:	d082      	beq.n	8027162 <_dtoa_r+0x722>
 802725c:	4610      	mov	r0, r2
 802725e:	301c      	adds	r0, #28
 8027260:	e778      	b.n	8027154 <_dtoa_r+0x714>
 8027262:	f1b9 0f00 	cmp.w	r9, #0
 8027266:	dc37      	bgt.n	80272d8 <_dtoa_r+0x898>
 8027268:	9b06      	ldr	r3, [sp, #24]
 802726a:	2b02      	cmp	r3, #2
 802726c:	dd34      	ble.n	80272d8 <_dtoa_r+0x898>
 802726e:	46ca      	mov	sl, r9
 8027270:	f1ba 0f00 	cmp.w	sl, #0
 8027274:	d10d      	bne.n	8027292 <_dtoa_r+0x852>
 8027276:	4621      	mov	r1, r4
 8027278:	4653      	mov	r3, sl
 802727a:	2205      	movs	r2, #5
 802727c:	4630      	mov	r0, r6
 802727e:	f000 fc09 	bl	8027a94 <__multadd>
 8027282:	4601      	mov	r1, r0
 8027284:	4604      	mov	r4, r0
 8027286:	4628      	mov	r0, r5
 8027288:	f000 fe24 	bl	8027ed4 <__mcmp>
 802728c:	2800      	cmp	r0, #0
 802728e:	f73f adeb 	bgt.w	8026e68 <_dtoa_r+0x428>
 8027292:	9b08      	ldr	r3, [sp, #32]
 8027294:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027298:	ea6f 0b03 	mvn.w	fp, r3
 802729c:	f04f 0900 	mov.w	r9, #0
 80272a0:	4621      	mov	r1, r4
 80272a2:	4630      	mov	r0, r6
 80272a4:	f000 fbd4 	bl	8027a50 <_Bfree>
 80272a8:	2f00      	cmp	r7, #0
 80272aa:	f43f aea8 	beq.w	8026ffe <_dtoa_r+0x5be>
 80272ae:	f1b9 0f00 	cmp.w	r9, #0
 80272b2:	d005      	beq.n	80272c0 <_dtoa_r+0x880>
 80272b4:	45b9      	cmp	r9, r7
 80272b6:	d003      	beq.n	80272c0 <_dtoa_r+0x880>
 80272b8:	4649      	mov	r1, r9
 80272ba:	4630      	mov	r0, r6
 80272bc:	f000 fbc8 	bl	8027a50 <_Bfree>
 80272c0:	4639      	mov	r1, r7
 80272c2:	4630      	mov	r0, r6
 80272c4:	f000 fbc4 	bl	8027a50 <_Bfree>
 80272c8:	e699      	b.n	8026ffe <_dtoa_r+0x5be>
 80272ca:	2400      	movs	r4, #0
 80272cc:	4627      	mov	r7, r4
 80272ce:	e7e0      	b.n	8027292 <_dtoa_r+0x852>
 80272d0:	46bb      	mov	fp, r7
 80272d2:	4604      	mov	r4, r0
 80272d4:	4607      	mov	r7, r0
 80272d6:	e5c7      	b.n	8026e68 <_dtoa_r+0x428>
 80272d8:	9b07      	ldr	r3, [sp, #28]
 80272da:	46ca      	mov	sl, r9
 80272dc:	2b00      	cmp	r3, #0
 80272de:	f000 8100 	beq.w	80274e2 <_dtoa_r+0xaa2>
 80272e2:	f1b8 0f00 	cmp.w	r8, #0
 80272e6:	dd05      	ble.n	80272f4 <_dtoa_r+0x8b4>
 80272e8:	4639      	mov	r1, r7
 80272ea:	4642      	mov	r2, r8
 80272ec:	4630      	mov	r0, r6
 80272ee:	f000 fd81 	bl	8027df4 <__lshift>
 80272f2:	4607      	mov	r7, r0
 80272f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	d05d      	beq.n	80273b6 <_dtoa_r+0x976>
 80272fa:	6879      	ldr	r1, [r7, #4]
 80272fc:	4630      	mov	r0, r6
 80272fe:	f000 fb67 	bl	80279d0 <_Balloc>
 8027302:	4680      	mov	r8, r0
 8027304:	b928      	cbnz	r0, 8027312 <_dtoa_r+0x8d2>
 8027306:	4b82      	ldr	r3, [pc, #520]	; (8027510 <_dtoa_r+0xad0>)
 8027308:	4602      	mov	r2, r0
 802730a:	f240 21ea 	movw	r1, #746	; 0x2ea
 802730e:	f7ff bbaf 	b.w	8026a70 <_dtoa_r+0x30>
 8027312:	693a      	ldr	r2, [r7, #16]
 8027314:	3202      	adds	r2, #2
 8027316:	0092      	lsls	r2, r2, #2
 8027318:	f107 010c 	add.w	r1, r7, #12
 802731c:	300c      	adds	r0, #12
 802731e:	f7fc fe91 	bl	8024044 <memcpy>
 8027322:	2201      	movs	r2, #1
 8027324:	4641      	mov	r1, r8
 8027326:	4630      	mov	r0, r6
 8027328:	f000 fd64 	bl	8027df4 <__lshift>
 802732c:	9b01      	ldr	r3, [sp, #4]
 802732e:	3301      	adds	r3, #1
 8027330:	9304      	str	r3, [sp, #16]
 8027332:	9b01      	ldr	r3, [sp, #4]
 8027334:	4453      	add	r3, sl
 8027336:	9308      	str	r3, [sp, #32]
 8027338:	9b02      	ldr	r3, [sp, #8]
 802733a:	f003 0301 	and.w	r3, r3, #1
 802733e:	46b9      	mov	r9, r7
 8027340:	9307      	str	r3, [sp, #28]
 8027342:	4607      	mov	r7, r0
 8027344:	9b04      	ldr	r3, [sp, #16]
 8027346:	4621      	mov	r1, r4
 8027348:	3b01      	subs	r3, #1
 802734a:	4628      	mov	r0, r5
 802734c:	9302      	str	r3, [sp, #8]
 802734e:	f7ff fae9 	bl	8026924 <quorem>
 8027352:	4603      	mov	r3, r0
 8027354:	3330      	adds	r3, #48	; 0x30
 8027356:	9005      	str	r0, [sp, #20]
 8027358:	4649      	mov	r1, r9
 802735a:	4628      	mov	r0, r5
 802735c:	9309      	str	r3, [sp, #36]	; 0x24
 802735e:	f000 fdb9 	bl	8027ed4 <__mcmp>
 8027362:	463a      	mov	r2, r7
 8027364:	4682      	mov	sl, r0
 8027366:	4621      	mov	r1, r4
 8027368:	4630      	mov	r0, r6
 802736a:	f000 fdcf 	bl	8027f0c <__mdiff>
 802736e:	68c2      	ldr	r2, [r0, #12]
 8027370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027372:	4680      	mov	r8, r0
 8027374:	bb0a      	cbnz	r2, 80273ba <_dtoa_r+0x97a>
 8027376:	4601      	mov	r1, r0
 8027378:	4628      	mov	r0, r5
 802737a:	f000 fdab 	bl	8027ed4 <__mcmp>
 802737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027380:	4602      	mov	r2, r0
 8027382:	4641      	mov	r1, r8
 8027384:	4630      	mov	r0, r6
 8027386:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802738a:	f000 fb61 	bl	8027a50 <_Bfree>
 802738e:	9b06      	ldr	r3, [sp, #24]
 8027390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027392:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027396:	ea43 0102 	orr.w	r1, r3, r2
 802739a:	9b07      	ldr	r3, [sp, #28]
 802739c:	430b      	orrs	r3, r1
 802739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273a0:	d10d      	bne.n	80273be <_dtoa_r+0x97e>
 80273a2:	2b39      	cmp	r3, #57	; 0x39
 80273a4:	d029      	beq.n	80273fa <_dtoa_r+0x9ba>
 80273a6:	f1ba 0f00 	cmp.w	sl, #0
 80273aa:	dd01      	ble.n	80273b0 <_dtoa_r+0x970>
 80273ac:	9b05      	ldr	r3, [sp, #20]
 80273ae:	3331      	adds	r3, #49	; 0x31
 80273b0:	9a02      	ldr	r2, [sp, #8]
 80273b2:	7013      	strb	r3, [r2, #0]
 80273b4:	e774      	b.n	80272a0 <_dtoa_r+0x860>
 80273b6:	4638      	mov	r0, r7
 80273b8:	e7b8      	b.n	802732c <_dtoa_r+0x8ec>
 80273ba:	2201      	movs	r2, #1
 80273bc:	e7e1      	b.n	8027382 <_dtoa_r+0x942>
 80273be:	f1ba 0f00 	cmp.w	sl, #0
 80273c2:	db06      	blt.n	80273d2 <_dtoa_r+0x992>
 80273c4:	9906      	ldr	r1, [sp, #24]
 80273c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80273ca:	9907      	ldr	r1, [sp, #28]
 80273cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80273d0:	d120      	bne.n	8027414 <_dtoa_r+0x9d4>
 80273d2:	2a00      	cmp	r2, #0
 80273d4:	ddec      	ble.n	80273b0 <_dtoa_r+0x970>
 80273d6:	4629      	mov	r1, r5
 80273d8:	2201      	movs	r2, #1
 80273da:	4630      	mov	r0, r6
 80273dc:	9304      	str	r3, [sp, #16]
 80273de:	f000 fd09 	bl	8027df4 <__lshift>
 80273e2:	4621      	mov	r1, r4
 80273e4:	4605      	mov	r5, r0
 80273e6:	f000 fd75 	bl	8027ed4 <__mcmp>
 80273ea:	2800      	cmp	r0, #0
 80273ec:	9b04      	ldr	r3, [sp, #16]
 80273ee:	dc02      	bgt.n	80273f6 <_dtoa_r+0x9b6>
 80273f0:	d1de      	bne.n	80273b0 <_dtoa_r+0x970>
 80273f2:	07da      	lsls	r2, r3, #31
 80273f4:	d5dc      	bpl.n	80273b0 <_dtoa_r+0x970>
 80273f6:	2b39      	cmp	r3, #57	; 0x39
 80273f8:	d1d8      	bne.n	80273ac <_dtoa_r+0x96c>
 80273fa:	9a02      	ldr	r2, [sp, #8]
 80273fc:	2339      	movs	r3, #57	; 0x39
 80273fe:	7013      	strb	r3, [r2, #0]
 8027400:	4643      	mov	r3, r8
 8027402:	4698      	mov	r8, r3
 8027404:	3b01      	subs	r3, #1
 8027406:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802740a:	2a39      	cmp	r2, #57	; 0x39
 802740c:	d051      	beq.n	80274b2 <_dtoa_r+0xa72>
 802740e:	3201      	adds	r2, #1
 8027410:	701a      	strb	r2, [r3, #0]
 8027412:	e745      	b.n	80272a0 <_dtoa_r+0x860>
 8027414:	2a00      	cmp	r2, #0
 8027416:	dd03      	ble.n	8027420 <_dtoa_r+0x9e0>
 8027418:	2b39      	cmp	r3, #57	; 0x39
 802741a:	d0ee      	beq.n	80273fa <_dtoa_r+0x9ba>
 802741c:	3301      	adds	r3, #1
 802741e:	e7c7      	b.n	80273b0 <_dtoa_r+0x970>
 8027420:	9a04      	ldr	r2, [sp, #16]
 8027422:	9908      	ldr	r1, [sp, #32]
 8027424:	f802 3c01 	strb.w	r3, [r2, #-1]
 8027428:	428a      	cmp	r2, r1
 802742a:	d02b      	beq.n	8027484 <_dtoa_r+0xa44>
 802742c:	4629      	mov	r1, r5
 802742e:	2300      	movs	r3, #0
 8027430:	220a      	movs	r2, #10
 8027432:	4630      	mov	r0, r6
 8027434:	f000 fb2e 	bl	8027a94 <__multadd>
 8027438:	45b9      	cmp	r9, r7
 802743a:	4605      	mov	r5, r0
 802743c:	f04f 0300 	mov.w	r3, #0
 8027440:	f04f 020a 	mov.w	r2, #10
 8027444:	4649      	mov	r1, r9
 8027446:	4630      	mov	r0, r6
 8027448:	d107      	bne.n	802745a <_dtoa_r+0xa1a>
 802744a:	f000 fb23 	bl	8027a94 <__multadd>
 802744e:	4681      	mov	r9, r0
 8027450:	4607      	mov	r7, r0
 8027452:	9b04      	ldr	r3, [sp, #16]
 8027454:	3301      	adds	r3, #1
 8027456:	9304      	str	r3, [sp, #16]
 8027458:	e774      	b.n	8027344 <_dtoa_r+0x904>
 802745a:	f000 fb1b 	bl	8027a94 <__multadd>
 802745e:	4639      	mov	r1, r7
 8027460:	4681      	mov	r9, r0
 8027462:	2300      	movs	r3, #0
 8027464:	220a      	movs	r2, #10
 8027466:	4630      	mov	r0, r6
 8027468:	f000 fb14 	bl	8027a94 <__multadd>
 802746c:	4607      	mov	r7, r0
 802746e:	e7f0      	b.n	8027452 <_dtoa_r+0xa12>
 8027470:	f1ba 0f00 	cmp.w	sl, #0
 8027474:	9a01      	ldr	r2, [sp, #4]
 8027476:	bfcc      	ite	gt
 8027478:	46d0      	movgt	r8, sl
 802747a:	f04f 0801 	movle.w	r8, #1
 802747e:	4490      	add	r8, r2
 8027480:	f04f 0900 	mov.w	r9, #0
 8027484:	4629      	mov	r1, r5
 8027486:	2201      	movs	r2, #1
 8027488:	4630      	mov	r0, r6
 802748a:	9302      	str	r3, [sp, #8]
 802748c:	f000 fcb2 	bl	8027df4 <__lshift>
 8027490:	4621      	mov	r1, r4
 8027492:	4605      	mov	r5, r0
 8027494:	f000 fd1e 	bl	8027ed4 <__mcmp>
 8027498:	2800      	cmp	r0, #0
 802749a:	dcb1      	bgt.n	8027400 <_dtoa_r+0x9c0>
 802749c:	d102      	bne.n	80274a4 <_dtoa_r+0xa64>
 802749e:	9b02      	ldr	r3, [sp, #8]
 80274a0:	07db      	lsls	r3, r3, #31
 80274a2:	d4ad      	bmi.n	8027400 <_dtoa_r+0x9c0>
 80274a4:	4643      	mov	r3, r8
 80274a6:	4698      	mov	r8, r3
 80274a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80274ac:	2a30      	cmp	r2, #48	; 0x30
 80274ae:	d0fa      	beq.n	80274a6 <_dtoa_r+0xa66>
 80274b0:	e6f6      	b.n	80272a0 <_dtoa_r+0x860>
 80274b2:	9a01      	ldr	r2, [sp, #4]
 80274b4:	429a      	cmp	r2, r3
 80274b6:	d1a4      	bne.n	8027402 <_dtoa_r+0x9c2>
 80274b8:	f10b 0b01 	add.w	fp, fp, #1
 80274bc:	2331      	movs	r3, #49	; 0x31
 80274be:	e778      	b.n	80273b2 <_dtoa_r+0x972>
 80274c0:	4b14      	ldr	r3, [pc, #80]	; (8027514 <_dtoa_r+0xad4>)
 80274c2:	f7ff bb27 	b.w	8026b14 <_dtoa_r+0xd4>
 80274c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	f47f ab03 	bne.w	8026ad4 <_dtoa_r+0x94>
 80274ce:	4b12      	ldr	r3, [pc, #72]	; (8027518 <_dtoa_r+0xad8>)
 80274d0:	f7ff bb20 	b.w	8026b14 <_dtoa_r+0xd4>
 80274d4:	f1ba 0f00 	cmp.w	sl, #0
 80274d8:	dc03      	bgt.n	80274e2 <_dtoa_r+0xaa2>
 80274da:	9b06      	ldr	r3, [sp, #24]
 80274dc:	2b02      	cmp	r3, #2
 80274de:	f73f aec7 	bgt.w	8027270 <_dtoa_r+0x830>
 80274e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80274e6:	4621      	mov	r1, r4
 80274e8:	4628      	mov	r0, r5
 80274ea:	f7ff fa1b 	bl	8026924 <quorem>
 80274ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80274f2:	f808 3b01 	strb.w	r3, [r8], #1
 80274f6:	9a01      	ldr	r2, [sp, #4]
 80274f8:	eba8 0202 	sub.w	r2, r8, r2
 80274fc:	4592      	cmp	sl, r2
 80274fe:	ddb7      	ble.n	8027470 <_dtoa_r+0xa30>
 8027500:	4629      	mov	r1, r5
 8027502:	2300      	movs	r3, #0
 8027504:	220a      	movs	r2, #10
 8027506:	4630      	mov	r0, r6
 8027508:	f000 fac4 	bl	8027a94 <__multadd>
 802750c:	4605      	mov	r5, r0
 802750e:	e7ea      	b.n	80274e6 <_dtoa_r+0xaa6>
 8027510:	08045c45 	.word	0x08045c45
 8027514:	08045dc9 	.word	0x08045dc9
 8027518:	08045bdd 	.word	0x08045bdd

0802751c <__errno>:
 802751c:	4b01      	ldr	r3, [pc, #4]	; (8027524 <__errno+0x8>)
 802751e:	6818      	ldr	r0, [r3, #0]
 8027520:	4770      	bx	lr
 8027522:	bf00      	nop
 8027524:	2000048c 	.word	0x2000048c

08027528 <__sflush_r>:
 8027528:	898a      	ldrh	r2, [r1, #12]
 802752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802752e:	4605      	mov	r5, r0
 8027530:	0710      	lsls	r0, r2, #28
 8027532:	460c      	mov	r4, r1
 8027534:	d458      	bmi.n	80275e8 <__sflush_r+0xc0>
 8027536:	684b      	ldr	r3, [r1, #4]
 8027538:	2b00      	cmp	r3, #0
 802753a:	dc05      	bgt.n	8027548 <__sflush_r+0x20>
 802753c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802753e:	2b00      	cmp	r3, #0
 8027540:	dc02      	bgt.n	8027548 <__sflush_r+0x20>
 8027542:	2000      	movs	r0, #0
 8027544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802754a:	2e00      	cmp	r6, #0
 802754c:	d0f9      	beq.n	8027542 <__sflush_r+0x1a>
 802754e:	2300      	movs	r3, #0
 8027550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027554:	682f      	ldr	r7, [r5, #0]
 8027556:	602b      	str	r3, [r5, #0]
 8027558:	d032      	beq.n	80275c0 <__sflush_r+0x98>
 802755a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802755c:	89a3      	ldrh	r3, [r4, #12]
 802755e:	075a      	lsls	r2, r3, #29
 8027560:	d505      	bpl.n	802756e <__sflush_r+0x46>
 8027562:	6863      	ldr	r3, [r4, #4]
 8027564:	1ac0      	subs	r0, r0, r3
 8027566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027568:	b10b      	cbz	r3, 802756e <__sflush_r+0x46>
 802756a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802756c:	1ac0      	subs	r0, r0, r3
 802756e:	2300      	movs	r3, #0
 8027570:	4602      	mov	r2, r0
 8027572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027574:	6a21      	ldr	r1, [r4, #32]
 8027576:	4628      	mov	r0, r5
 8027578:	47b0      	blx	r6
 802757a:	1c43      	adds	r3, r0, #1
 802757c:	89a3      	ldrh	r3, [r4, #12]
 802757e:	d106      	bne.n	802758e <__sflush_r+0x66>
 8027580:	6829      	ldr	r1, [r5, #0]
 8027582:	291d      	cmp	r1, #29
 8027584:	d82c      	bhi.n	80275e0 <__sflush_r+0xb8>
 8027586:	4a2a      	ldr	r2, [pc, #168]	; (8027630 <__sflush_r+0x108>)
 8027588:	40ca      	lsrs	r2, r1
 802758a:	07d6      	lsls	r6, r2, #31
 802758c:	d528      	bpl.n	80275e0 <__sflush_r+0xb8>
 802758e:	2200      	movs	r2, #0
 8027590:	6062      	str	r2, [r4, #4]
 8027592:	04d9      	lsls	r1, r3, #19
 8027594:	6922      	ldr	r2, [r4, #16]
 8027596:	6022      	str	r2, [r4, #0]
 8027598:	d504      	bpl.n	80275a4 <__sflush_r+0x7c>
 802759a:	1c42      	adds	r2, r0, #1
 802759c:	d101      	bne.n	80275a2 <__sflush_r+0x7a>
 802759e:	682b      	ldr	r3, [r5, #0]
 80275a0:	b903      	cbnz	r3, 80275a4 <__sflush_r+0x7c>
 80275a2:	6560      	str	r0, [r4, #84]	; 0x54
 80275a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80275a6:	602f      	str	r7, [r5, #0]
 80275a8:	2900      	cmp	r1, #0
 80275aa:	d0ca      	beq.n	8027542 <__sflush_r+0x1a>
 80275ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80275b0:	4299      	cmp	r1, r3
 80275b2:	d002      	beq.n	80275ba <__sflush_r+0x92>
 80275b4:	4628      	mov	r0, r5
 80275b6:	f7fc ffe7 	bl	8024588 <_free_r>
 80275ba:	2000      	movs	r0, #0
 80275bc:	6360      	str	r0, [r4, #52]	; 0x34
 80275be:	e7c1      	b.n	8027544 <__sflush_r+0x1c>
 80275c0:	6a21      	ldr	r1, [r4, #32]
 80275c2:	2301      	movs	r3, #1
 80275c4:	4628      	mov	r0, r5
 80275c6:	47b0      	blx	r6
 80275c8:	1c41      	adds	r1, r0, #1
 80275ca:	d1c7      	bne.n	802755c <__sflush_r+0x34>
 80275cc:	682b      	ldr	r3, [r5, #0]
 80275ce:	2b00      	cmp	r3, #0
 80275d0:	d0c4      	beq.n	802755c <__sflush_r+0x34>
 80275d2:	2b1d      	cmp	r3, #29
 80275d4:	d001      	beq.n	80275da <__sflush_r+0xb2>
 80275d6:	2b16      	cmp	r3, #22
 80275d8:	d101      	bne.n	80275de <__sflush_r+0xb6>
 80275da:	602f      	str	r7, [r5, #0]
 80275dc:	e7b1      	b.n	8027542 <__sflush_r+0x1a>
 80275de:	89a3      	ldrh	r3, [r4, #12]
 80275e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80275e4:	81a3      	strh	r3, [r4, #12]
 80275e6:	e7ad      	b.n	8027544 <__sflush_r+0x1c>
 80275e8:	690f      	ldr	r7, [r1, #16]
 80275ea:	2f00      	cmp	r7, #0
 80275ec:	d0a9      	beq.n	8027542 <__sflush_r+0x1a>
 80275ee:	0793      	lsls	r3, r2, #30
 80275f0:	680e      	ldr	r6, [r1, #0]
 80275f2:	bf08      	it	eq
 80275f4:	694b      	ldreq	r3, [r1, #20]
 80275f6:	600f      	str	r7, [r1, #0]
 80275f8:	bf18      	it	ne
 80275fa:	2300      	movne	r3, #0
 80275fc:	eba6 0807 	sub.w	r8, r6, r7
 8027600:	608b      	str	r3, [r1, #8]
 8027602:	f1b8 0f00 	cmp.w	r8, #0
 8027606:	dd9c      	ble.n	8027542 <__sflush_r+0x1a>
 8027608:	6a21      	ldr	r1, [r4, #32]
 802760a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802760c:	4643      	mov	r3, r8
 802760e:	463a      	mov	r2, r7
 8027610:	4628      	mov	r0, r5
 8027612:	47b0      	blx	r6
 8027614:	2800      	cmp	r0, #0
 8027616:	dc06      	bgt.n	8027626 <__sflush_r+0xfe>
 8027618:	89a3      	ldrh	r3, [r4, #12]
 802761a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802761e:	81a3      	strh	r3, [r4, #12]
 8027620:	f04f 30ff 	mov.w	r0, #4294967295
 8027624:	e78e      	b.n	8027544 <__sflush_r+0x1c>
 8027626:	4407      	add	r7, r0
 8027628:	eba8 0800 	sub.w	r8, r8, r0
 802762c:	e7e9      	b.n	8027602 <__sflush_r+0xda>
 802762e:	bf00      	nop
 8027630:	20400001 	.word	0x20400001

08027634 <_fflush_r>:
 8027634:	b538      	push	{r3, r4, r5, lr}
 8027636:	690b      	ldr	r3, [r1, #16]
 8027638:	4605      	mov	r5, r0
 802763a:	460c      	mov	r4, r1
 802763c:	b913      	cbnz	r3, 8027644 <_fflush_r+0x10>
 802763e:	2500      	movs	r5, #0
 8027640:	4628      	mov	r0, r5
 8027642:	bd38      	pop	{r3, r4, r5, pc}
 8027644:	b118      	cbz	r0, 802764e <_fflush_r+0x1a>
 8027646:	6983      	ldr	r3, [r0, #24]
 8027648:	b90b      	cbnz	r3, 802764e <_fflush_r+0x1a>
 802764a:	f7fc fb01 	bl	8023c50 <__sinit>
 802764e:	4b14      	ldr	r3, [pc, #80]	; (80276a0 <_fflush_r+0x6c>)
 8027650:	429c      	cmp	r4, r3
 8027652:	d11b      	bne.n	802768c <_fflush_r+0x58>
 8027654:	686c      	ldr	r4, [r5, #4]
 8027656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802765a:	2b00      	cmp	r3, #0
 802765c:	d0ef      	beq.n	802763e <_fflush_r+0xa>
 802765e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027660:	07d0      	lsls	r0, r2, #31
 8027662:	d404      	bmi.n	802766e <_fflush_r+0x3a>
 8027664:	0599      	lsls	r1, r3, #22
 8027666:	d402      	bmi.n	802766e <_fflush_r+0x3a>
 8027668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802766a:	f7fc fcc7 	bl	8023ffc <__retarget_lock_acquire_recursive>
 802766e:	4628      	mov	r0, r5
 8027670:	4621      	mov	r1, r4
 8027672:	f7ff ff59 	bl	8027528 <__sflush_r>
 8027676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027678:	07da      	lsls	r2, r3, #31
 802767a:	4605      	mov	r5, r0
 802767c:	d4e0      	bmi.n	8027640 <_fflush_r+0xc>
 802767e:	89a3      	ldrh	r3, [r4, #12]
 8027680:	059b      	lsls	r3, r3, #22
 8027682:	d4dd      	bmi.n	8027640 <_fflush_r+0xc>
 8027684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027686:	f7fc fcbb 	bl	8024000 <__retarget_lock_release_recursive>
 802768a:	e7d9      	b.n	8027640 <_fflush_r+0xc>
 802768c:	4b05      	ldr	r3, [pc, #20]	; (80276a4 <_fflush_r+0x70>)
 802768e:	429c      	cmp	r4, r3
 8027690:	d101      	bne.n	8027696 <_fflush_r+0x62>
 8027692:	68ac      	ldr	r4, [r5, #8]
 8027694:	e7df      	b.n	8027656 <_fflush_r+0x22>
 8027696:	4b04      	ldr	r3, [pc, #16]	; (80276a8 <_fflush_r+0x74>)
 8027698:	429c      	cmp	r4, r3
 802769a:	bf08      	it	eq
 802769c:	68ec      	ldreq	r4, [r5, #12]
 802769e:	e7da      	b.n	8027656 <_fflush_r+0x22>
 80276a0:	08045628 	.word	0x08045628
 80276a4:	08045648 	.word	0x08045648
 80276a8:	08045608 	.word	0x08045608

080276ac <fiprintf>:
 80276ac:	b40e      	push	{r1, r2, r3}
 80276ae:	b503      	push	{r0, r1, lr}
 80276b0:	4601      	mov	r1, r0
 80276b2:	ab03      	add	r3, sp, #12
 80276b4:	4805      	ldr	r0, [pc, #20]	; (80276cc <fiprintf+0x20>)
 80276b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80276ba:	6800      	ldr	r0, [r0, #0]
 80276bc:	9301      	str	r3, [sp, #4]
 80276be:	f001 f8a7 	bl	8028810 <_vfiprintf_r>
 80276c2:	b002      	add	sp, #8
 80276c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80276c8:	b003      	add	sp, #12
 80276ca:	4770      	bx	lr
 80276cc:	2000048c 	.word	0x2000048c

080276d0 <_findenv_r>:
 80276d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276d4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027744 <_findenv_r+0x74>
 80276d8:	4607      	mov	r7, r0
 80276da:	4689      	mov	r9, r1
 80276dc:	4616      	mov	r6, r2
 80276de:	f001 fc17 	bl	8028f10 <__env_lock>
 80276e2:	f8da 4000 	ldr.w	r4, [sl]
 80276e6:	b134      	cbz	r4, 80276f6 <_findenv_r+0x26>
 80276e8:	464b      	mov	r3, r9
 80276ea:	4698      	mov	r8, r3
 80276ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80276f0:	b13a      	cbz	r2, 8027702 <_findenv_r+0x32>
 80276f2:	2a3d      	cmp	r2, #61	; 0x3d
 80276f4:	d1f9      	bne.n	80276ea <_findenv_r+0x1a>
 80276f6:	4638      	mov	r0, r7
 80276f8:	f001 fc10 	bl	8028f1c <__env_unlock>
 80276fc:	2000      	movs	r0, #0
 80276fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027702:	eba8 0809 	sub.w	r8, r8, r9
 8027706:	46a3      	mov	fp, r4
 8027708:	f854 0b04 	ldr.w	r0, [r4], #4
 802770c:	2800      	cmp	r0, #0
 802770e:	d0f2      	beq.n	80276f6 <_findenv_r+0x26>
 8027710:	4642      	mov	r2, r8
 8027712:	4649      	mov	r1, r9
 8027714:	f7fe fc36 	bl	8025f84 <strncmp>
 8027718:	2800      	cmp	r0, #0
 802771a:	d1f4      	bne.n	8027706 <_findenv_r+0x36>
 802771c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8027720:	eb03 0508 	add.w	r5, r3, r8
 8027724:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027728:	2b3d      	cmp	r3, #61	; 0x3d
 802772a:	d1ec      	bne.n	8027706 <_findenv_r+0x36>
 802772c:	f8da 3000 	ldr.w	r3, [sl]
 8027730:	ebab 0303 	sub.w	r3, fp, r3
 8027734:	109b      	asrs	r3, r3, #2
 8027736:	4638      	mov	r0, r7
 8027738:	6033      	str	r3, [r6, #0]
 802773a:	f001 fbef 	bl	8028f1c <__env_unlock>
 802773e:	1c68      	adds	r0, r5, #1
 8027740:	e7dd      	b.n	80276fe <_findenv_r+0x2e>
 8027742:	bf00      	nop
 8027744:	20000278 	.word	0x20000278

08027748 <_getenv_r>:
 8027748:	b507      	push	{r0, r1, r2, lr}
 802774a:	aa01      	add	r2, sp, #4
 802774c:	f7ff ffc0 	bl	80276d0 <_findenv_r>
 8027750:	b003      	add	sp, #12
 8027752:	f85d fb04 	ldr.w	pc, [sp], #4
 8027756:	Address 0x0000000008027756 is out of bounds.


08027758 <__gettzinfo>:
 8027758:	4800      	ldr	r0, [pc, #0]	; (802775c <__gettzinfo+0x4>)
 802775a:	4770      	bx	lr
 802775c:	200004f8 	.word	0x200004f8

08027760 <gmtime_r>:
 8027760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027764:	e9d0 6700 	ldrd	r6, r7, [r0]
 8027768:	460c      	mov	r4, r1
 802776a:	4a4f      	ldr	r2, [pc, #316]	; (80278a8 <gmtime_r+0x148>)
 802776c:	2300      	movs	r3, #0
 802776e:	4630      	mov	r0, r6
 8027770:	4639      	mov	r1, r7
 8027772:	f7d8 fdcd 	bl	8000310 <__aeabi_ldivmod>
 8027776:	4639      	mov	r1, r7
 8027778:	4605      	mov	r5, r0
 802777a:	4a4b      	ldr	r2, [pc, #300]	; (80278a8 <gmtime_r+0x148>)
 802777c:	4630      	mov	r0, r6
 802777e:	2300      	movs	r3, #0
 8027780:	f7d8 fdc6 	bl	8000310 <__aeabi_ldivmod>
 8027784:	2a00      	cmp	r2, #0
 8027786:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802778a:	bfb7      	itett	lt
 802778c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8027790:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8027794:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8027798:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802779c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80277a0:	fbb2 f1f0 	udiv	r1, r2, r0
 80277a4:	fb00 2211 	mls	r2, r0, r1, r2
 80277a8:	203c      	movs	r0, #60	; 0x3c
 80277aa:	60a1      	str	r1, [r4, #8]
 80277ac:	fbb2 f1f0 	udiv	r1, r2, r0
 80277b0:	fb00 2211 	mls	r2, r0, r1, r2
 80277b4:	6061      	str	r1, [r4, #4]
 80277b6:	6022      	str	r2, [r4, #0]
 80277b8:	2107      	movs	r1, #7
 80277ba:	1cda      	adds	r2, r3, #3
 80277bc:	fb92 f1f1 	sdiv	r1, r2, r1
 80277c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80277c4:	1a52      	subs	r2, r2, r1
 80277c6:	bf48      	it	mi
 80277c8:	3207      	addmi	r2, #7
 80277ca:	4d38      	ldr	r5, [pc, #224]	; (80278ac <gmtime_r+0x14c>)
 80277cc:	4838      	ldr	r0, [pc, #224]	; (80278b0 <gmtime_r+0x150>)
 80277ce:	61a2      	str	r2, [r4, #24]
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	bfb7      	itett	lt
 80277d4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80277d8:	fb93 f5f5 	sdivge	r5, r3, r5
 80277dc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80277e0:	fb92 f5f5 	sdivlt	r5, r2, r5
 80277e4:	fb00 3005 	mla	r0, r0, r5, r3
 80277e8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80277ec:	fbb0 f2f2 	udiv	r2, r0, r2
 80277f0:	4402      	add	r2, r0
 80277f2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80277f6:	fbb0 f1f3 	udiv	r1, r0, r3
 80277fa:	1a52      	subs	r2, r2, r1
 80277fc:	f240 1c6d 	movw	ip, #365	; 0x16d
 8027800:	492c      	ldr	r1, [pc, #176]	; (80278b4 <gmtime_r+0x154>)
 8027802:	fbb0 f1f1 	udiv	r1, r0, r1
 8027806:	2764      	movs	r7, #100	; 0x64
 8027808:	1a52      	subs	r2, r2, r1
 802780a:	fbb2 f1fc 	udiv	r1, r2, ip
 802780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027812:	fbb1 f6f7 	udiv	r6, r1, r7
 8027816:	1af3      	subs	r3, r6, r3
 8027818:	4403      	add	r3, r0
 802781a:	fb0c 3311 	mls	r3, ip, r1, r3
 802781e:	2299      	movs	r2, #153	; 0x99
 8027820:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8027824:	f10e 0e02 	add.w	lr, lr, #2
 8027828:	f103 0c01 	add.w	ip, r3, #1
 802782c:	fbbe f0f2 	udiv	r0, lr, r2
 8027830:	4342      	muls	r2, r0
 8027832:	3202      	adds	r2, #2
 8027834:	f04f 0805 	mov.w	r8, #5
 8027838:	fbb2 f2f8 	udiv	r2, r2, r8
 802783c:	ebac 0c02 	sub.w	ip, ip, r2
 8027840:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8027844:	4596      	cmp	lr, r2
 8027846:	bf94      	ite	ls
 8027848:	2202      	movls	r2, #2
 802784a:	f06f 0209 	mvnhi.w	r2, #9
 802784e:	4410      	add	r0, r2
 8027850:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027854:	fb02 1505 	mla	r5, r2, r5, r1
 8027858:	2801      	cmp	r0, #1
 802785a:	bf98      	it	ls
 802785c:	3501      	addls	r5, #1
 802785e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8027862:	d30d      	bcc.n	8027880 <gmtime_r+0x120>
 8027864:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8027868:	61e3      	str	r3, [r4, #28]
 802786a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802786e:	2300      	movs	r3, #0
 8027870:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8027874:	f8c4 c00c 	str.w	ip, [r4, #12]
 8027878:	6223      	str	r3, [r4, #32]
 802787a:	4620      	mov	r0, r4
 802787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027880:	078a      	lsls	r2, r1, #30
 8027882:	d102      	bne.n	802788a <gmtime_r+0x12a>
 8027884:	fb07 1616 	mls	r6, r7, r6, r1
 8027888:	b95e      	cbnz	r6, 80278a2 <gmtime_r+0x142>
 802788a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802788e:	fbb1 f6f2 	udiv	r6, r1, r2
 8027892:	fb02 1216 	mls	r2, r2, r6, r1
 8027896:	fab2 f282 	clz	r2, r2
 802789a:	0952      	lsrs	r2, r2, #5
 802789c:	333b      	adds	r3, #59	; 0x3b
 802789e:	4413      	add	r3, r2
 80278a0:	e7e2      	b.n	8027868 <gmtime_r+0x108>
 80278a2:	2201      	movs	r2, #1
 80278a4:	e7fa      	b.n	802789c <gmtime_r+0x13c>
 80278a6:	bf00      	nop
 80278a8:	00015180 	.word	0x00015180
 80278ac:	00023ab1 	.word	0x00023ab1
 80278b0:	fffdc54f 	.word	0xfffdc54f
 80278b4:	00023ab0 	.word	0x00023ab0

080278b8 <labs>:
 80278b8:	2800      	cmp	r0, #0
 80278ba:	bfb8      	it	lt
 80278bc:	4240      	neglt	r0, r0
 80278be:	4770      	bx	lr

080278c0 <_localeconv_r>:
 80278c0:	4800      	ldr	r0, [pc, #0]	; (80278c4 <_localeconv_r+0x4>)
 80278c2:	4770      	bx	lr
 80278c4:	20000640 	.word	0x20000640

080278c8 <_lseek_r>:
 80278c8:	b538      	push	{r3, r4, r5, lr}
 80278ca:	4d07      	ldr	r5, [pc, #28]	; (80278e8 <_lseek_r+0x20>)
 80278cc:	4604      	mov	r4, r0
 80278ce:	4608      	mov	r0, r1
 80278d0:	4611      	mov	r1, r2
 80278d2:	2200      	movs	r2, #0
 80278d4:	602a      	str	r2, [r5, #0]
 80278d6:	461a      	mov	r2, r3
 80278d8:	f7de feb2 	bl	8006640 <_lseek>
 80278dc:	1c43      	adds	r3, r0, #1
 80278de:	d102      	bne.n	80278e6 <_lseek_r+0x1e>
 80278e0:	682b      	ldr	r3, [r5, #0]
 80278e2:	b103      	cbz	r3, 80278e6 <_lseek_r+0x1e>
 80278e4:	6023      	str	r3, [r4, #0]
 80278e6:	bd38      	pop	{r3, r4, r5, pc}
 80278e8:	2002f874 	.word	0x2002f874

080278ec <__swhatbuf_r>:
 80278ec:	b570      	push	{r4, r5, r6, lr}
 80278ee:	460e      	mov	r6, r1
 80278f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80278f4:	2900      	cmp	r1, #0
 80278f6:	b096      	sub	sp, #88	; 0x58
 80278f8:	4614      	mov	r4, r2
 80278fa:	461d      	mov	r5, r3
 80278fc:	da08      	bge.n	8027910 <__swhatbuf_r+0x24>
 80278fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027902:	2200      	movs	r2, #0
 8027904:	602a      	str	r2, [r5, #0]
 8027906:	061a      	lsls	r2, r3, #24
 8027908:	d410      	bmi.n	802792c <__swhatbuf_r+0x40>
 802790a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802790e:	e00e      	b.n	802792e <__swhatbuf_r+0x42>
 8027910:	466a      	mov	r2, sp
 8027912:	f001 fb09 	bl	8028f28 <_fstat_r>
 8027916:	2800      	cmp	r0, #0
 8027918:	dbf1      	blt.n	80278fe <__swhatbuf_r+0x12>
 802791a:	9a01      	ldr	r2, [sp, #4]
 802791c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027920:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027924:	425a      	negs	r2, r3
 8027926:	415a      	adcs	r2, r3
 8027928:	602a      	str	r2, [r5, #0]
 802792a:	e7ee      	b.n	802790a <__swhatbuf_r+0x1e>
 802792c:	2340      	movs	r3, #64	; 0x40
 802792e:	2000      	movs	r0, #0
 8027930:	6023      	str	r3, [r4, #0]
 8027932:	b016      	add	sp, #88	; 0x58
 8027934:	bd70      	pop	{r4, r5, r6, pc}
 8027936:	Address 0x0000000008027936 is out of bounds.


08027938 <__smakebuf_r>:
 8027938:	898b      	ldrh	r3, [r1, #12]
 802793a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802793c:	079d      	lsls	r5, r3, #30
 802793e:	4606      	mov	r6, r0
 8027940:	460c      	mov	r4, r1
 8027942:	d507      	bpl.n	8027954 <__smakebuf_r+0x1c>
 8027944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027948:	6023      	str	r3, [r4, #0]
 802794a:	6123      	str	r3, [r4, #16]
 802794c:	2301      	movs	r3, #1
 802794e:	6163      	str	r3, [r4, #20]
 8027950:	b002      	add	sp, #8
 8027952:	bd70      	pop	{r4, r5, r6, pc}
 8027954:	ab01      	add	r3, sp, #4
 8027956:	466a      	mov	r2, sp
 8027958:	f7ff ffc8 	bl	80278ec <__swhatbuf_r>
 802795c:	9900      	ldr	r1, [sp, #0]
 802795e:	4605      	mov	r5, r0
 8027960:	4630      	mov	r0, r6
 8027962:	f7fc fe7d 	bl	8024660 <_malloc_r>
 8027966:	b948      	cbnz	r0, 802797c <__smakebuf_r+0x44>
 8027968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802796c:	059a      	lsls	r2, r3, #22
 802796e:	d4ef      	bmi.n	8027950 <__smakebuf_r+0x18>
 8027970:	f023 0303 	bic.w	r3, r3, #3
 8027974:	f043 0302 	orr.w	r3, r3, #2
 8027978:	81a3      	strh	r3, [r4, #12]
 802797a:	e7e3      	b.n	8027944 <__smakebuf_r+0xc>
 802797c:	4b0d      	ldr	r3, [pc, #52]	; (80279b4 <__smakebuf_r+0x7c>)
 802797e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027980:	89a3      	ldrh	r3, [r4, #12]
 8027982:	6020      	str	r0, [r4, #0]
 8027984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027988:	81a3      	strh	r3, [r4, #12]
 802798a:	9b00      	ldr	r3, [sp, #0]
 802798c:	6163      	str	r3, [r4, #20]
 802798e:	9b01      	ldr	r3, [sp, #4]
 8027990:	6120      	str	r0, [r4, #16]
 8027992:	b15b      	cbz	r3, 80279ac <__smakebuf_r+0x74>
 8027994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027998:	4630      	mov	r0, r6
 802799a:	f001 fad7 	bl	8028f4c <_isatty_r>
 802799e:	b128      	cbz	r0, 80279ac <__smakebuf_r+0x74>
 80279a0:	89a3      	ldrh	r3, [r4, #12]
 80279a2:	f023 0303 	bic.w	r3, r3, #3
 80279a6:	f043 0301 	orr.w	r3, r3, #1
 80279aa:	81a3      	strh	r3, [r4, #12]
 80279ac:	89a0      	ldrh	r0, [r4, #12]
 80279ae:	4305      	orrs	r5, r0
 80279b0:	81a5      	strh	r5, [r4, #12]
 80279b2:	e7cd      	b.n	8027950 <__smakebuf_r+0x18>
 80279b4:	08023be9 	.word	0x08023be9

080279b8 <__malloc_lock>:
 80279b8:	4801      	ldr	r0, [pc, #4]	; (80279c0 <__malloc_lock+0x8>)
 80279ba:	f7fc bb1f 	b.w	8023ffc <__retarget_lock_acquire_recursive>
 80279be:	bf00      	nop
 80279c0:	2002f865 	.word	0x2002f865

080279c4 <__malloc_unlock>:
 80279c4:	4801      	ldr	r0, [pc, #4]	; (80279cc <__malloc_unlock+0x8>)
 80279c6:	f7fc bb1b 	b.w	8024000 <__retarget_lock_release_recursive>
 80279ca:	bf00      	nop
 80279cc:	2002f865 	.word	0x2002f865

080279d0 <_Balloc>:
 80279d0:	b570      	push	{r4, r5, r6, lr}
 80279d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80279d4:	4604      	mov	r4, r0
 80279d6:	460d      	mov	r5, r1
 80279d8:	b976      	cbnz	r6, 80279f8 <_Balloc+0x28>
 80279da:	2010      	movs	r0, #16
 80279dc:	f7fc fb12 	bl	8024004 <malloc>
 80279e0:	4602      	mov	r2, r0
 80279e2:	6260      	str	r0, [r4, #36]	; 0x24
 80279e4:	b920      	cbnz	r0, 80279f0 <_Balloc+0x20>
 80279e6:	4b18      	ldr	r3, [pc, #96]	; (8027a48 <_Balloc+0x78>)
 80279e8:	4818      	ldr	r0, [pc, #96]	; (8027a4c <_Balloc+0x7c>)
 80279ea:	2166      	movs	r1, #102	; 0x66
 80279ec:	f7fe ff58 	bl	80268a0 <__assert_func>
 80279f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80279f4:	6006      	str	r6, [r0, #0]
 80279f6:	60c6      	str	r6, [r0, #12]
 80279f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80279fa:	68f3      	ldr	r3, [r6, #12]
 80279fc:	b183      	cbz	r3, 8027a20 <_Balloc+0x50>
 80279fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027a00:	68db      	ldr	r3, [r3, #12]
 8027a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027a06:	b9b8      	cbnz	r0, 8027a38 <_Balloc+0x68>
 8027a08:	2101      	movs	r1, #1
 8027a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8027a0e:	1d72      	adds	r2, r6, #5
 8027a10:	0092      	lsls	r2, r2, #2
 8027a12:	4620      	mov	r0, r4
 8027a14:	f000 fb60 	bl	80280d8 <_calloc_r>
 8027a18:	b160      	cbz	r0, 8027a34 <_Balloc+0x64>
 8027a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027a1e:	e00e      	b.n	8027a3e <_Balloc+0x6e>
 8027a20:	2221      	movs	r2, #33	; 0x21
 8027a22:	2104      	movs	r1, #4
 8027a24:	4620      	mov	r0, r4
 8027a26:	f000 fb57 	bl	80280d8 <_calloc_r>
 8027a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027a2c:	60f0      	str	r0, [r6, #12]
 8027a2e:	68db      	ldr	r3, [r3, #12]
 8027a30:	2b00      	cmp	r3, #0
 8027a32:	d1e4      	bne.n	80279fe <_Balloc+0x2e>
 8027a34:	2000      	movs	r0, #0
 8027a36:	bd70      	pop	{r4, r5, r6, pc}
 8027a38:	6802      	ldr	r2, [r0, #0]
 8027a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027a3e:	2300      	movs	r3, #0
 8027a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027a44:	e7f7      	b.n	8027a36 <_Balloc+0x66>
 8027a46:	bf00      	nop
 8027a48:	0804566c 	.word	0x0804566c
 8027a4c:	08045c56 	.word	0x08045c56

08027a50 <_Bfree>:
 8027a50:	b570      	push	{r4, r5, r6, lr}
 8027a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027a54:	4605      	mov	r5, r0
 8027a56:	460c      	mov	r4, r1
 8027a58:	b976      	cbnz	r6, 8027a78 <_Bfree+0x28>
 8027a5a:	2010      	movs	r0, #16
 8027a5c:	f7fc fad2 	bl	8024004 <malloc>
 8027a60:	4602      	mov	r2, r0
 8027a62:	6268      	str	r0, [r5, #36]	; 0x24
 8027a64:	b920      	cbnz	r0, 8027a70 <_Bfree+0x20>
 8027a66:	4b09      	ldr	r3, [pc, #36]	; (8027a8c <_Bfree+0x3c>)
 8027a68:	4809      	ldr	r0, [pc, #36]	; (8027a90 <_Bfree+0x40>)
 8027a6a:	218a      	movs	r1, #138	; 0x8a
 8027a6c:	f7fe ff18 	bl	80268a0 <__assert_func>
 8027a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027a74:	6006      	str	r6, [r0, #0]
 8027a76:	60c6      	str	r6, [r0, #12]
 8027a78:	b13c      	cbz	r4, 8027a8a <_Bfree+0x3a>
 8027a7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027a7c:	6862      	ldr	r2, [r4, #4]
 8027a7e:	68db      	ldr	r3, [r3, #12]
 8027a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027a84:	6021      	str	r1, [r4, #0]
 8027a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027a8a:	bd70      	pop	{r4, r5, r6, pc}
 8027a8c:	0804566c 	.word	0x0804566c
 8027a90:	08045c56 	.word	0x08045c56

08027a94 <__multadd>:
 8027a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027a98:	690d      	ldr	r5, [r1, #16]
 8027a9a:	4607      	mov	r7, r0
 8027a9c:	460c      	mov	r4, r1
 8027a9e:	461e      	mov	r6, r3
 8027aa0:	f101 0c14 	add.w	ip, r1, #20
 8027aa4:	2000      	movs	r0, #0
 8027aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8027aaa:	b299      	uxth	r1, r3
 8027aac:	fb02 6101 	mla	r1, r2, r1, r6
 8027ab0:	0c1e      	lsrs	r6, r3, #16
 8027ab2:	0c0b      	lsrs	r3, r1, #16
 8027ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8027ab8:	b289      	uxth	r1, r1
 8027aba:	3001      	adds	r0, #1
 8027abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027ac0:	4285      	cmp	r5, r0
 8027ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8027ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027aca:	dcec      	bgt.n	8027aa6 <__multadd+0x12>
 8027acc:	b30e      	cbz	r6, 8027b12 <__multadd+0x7e>
 8027ace:	68a3      	ldr	r3, [r4, #8]
 8027ad0:	42ab      	cmp	r3, r5
 8027ad2:	dc19      	bgt.n	8027b08 <__multadd+0x74>
 8027ad4:	6861      	ldr	r1, [r4, #4]
 8027ad6:	4638      	mov	r0, r7
 8027ad8:	3101      	adds	r1, #1
 8027ada:	f7ff ff79 	bl	80279d0 <_Balloc>
 8027ade:	4680      	mov	r8, r0
 8027ae0:	b928      	cbnz	r0, 8027aee <__multadd+0x5a>
 8027ae2:	4602      	mov	r2, r0
 8027ae4:	4b0c      	ldr	r3, [pc, #48]	; (8027b18 <__multadd+0x84>)
 8027ae6:	480d      	ldr	r0, [pc, #52]	; (8027b1c <__multadd+0x88>)
 8027ae8:	21b5      	movs	r1, #181	; 0xb5
 8027aea:	f7fe fed9 	bl	80268a0 <__assert_func>
 8027aee:	6922      	ldr	r2, [r4, #16]
 8027af0:	3202      	adds	r2, #2
 8027af2:	f104 010c 	add.w	r1, r4, #12
 8027af6:	0092      	lsls	r2, r2, #2
 8027af8:	300c      	adds	r0, #12
 8027afa:	f7fc faa3 	bl	8024044 <memcpy>
 8027afe:	4621      	mov	r1, r4
 8027b00:	4638      	mov	r0, r7
 8027b02:	f7ff ffa5 	bl	8027a50 <_Bfree>
 8027b06:	4644      	mov	r4, r8
 8027b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027b0c:	3501      	adds	r5, #1
 8027b0e:	615e      	str	r6, [r3, #20]
 8027b10:	6125      	str	r5, [r4, #16]
 8027b12:	4620      	mov	r0, r4
 8027b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b18:	08045c45 	.word	0x08045c45
 8027b1c:	08045c56 	.word	0x08045c56

08027b20 <__hi0bits>:
 8027b20:	0c03      	lsrs	r3, r0, #16
 8027b22:	041b      	lsls	r3, r3, #16
 8027b24:	b9d3      	cbnz	r3, 8027b5c <__hi0bits+0x3c>
 8027b26:	0400      	lsls	r0, r0, #16
 8027b28:	2310      	movs	r3, #16
 8027b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8027b2e:	bf04      	itt	eq
 8027b30:	0200      	lsleq	r0, r0, #8
 8027b32:	3308      	addeq	r3, #8
 8027b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027b38:	bf04      	itt	eq
 8027b3a:	0100      	lsleq	r0, r0, #4
 8027b3c:	3304      	addeq	r3, #4
 8027b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027b42:	bf04      	itt	eq
 8027b44:	0080      	lsleq	r0, r0, #2
 8027b46:	3302      	addeq	r3, #2
 8027b48:	2800      	cmp	r0, #0
 8027b4a:	db05      	blt.n	8027b58 <__hi0bits+0x38>
 8027b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027b50:	f103 0301 	add.w	r3, r3, #1
 8027b54:	bf08      	it	eq
 8027b56:	2320      	moveq	r3, #32
 8027b58:	4618      	mov	r0, r3
 8027b5a:	4770      	bx	lr
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	e7e4      	b.n	8027b2a <__hi0bits+0xa>

08027b60 <__lo0bits>:
 8027b60:	6803      	ldr	r3, [r0, #0]
 8027b62:	f013 0207 	ands.w	r2, r3, #7
 8027b66:	4601      	mov	r1, r0
 8027b68:	d00b      	beq.n	8027b82 <__lo0bits+0x22>
 8027b6a:	07da      	lsls	r2, r3, #31
 8027b6c:	d423      	bmi.n	8027bb6 <__lo0bits+0x56>
 8027b6e:	0798      	lsls	r0, r3, #30
 8027b70:	bf49      	itett	mi
 8027b72:	085b      	lsrmi	r3, r3, #1
 8027b74:	089b      	lsrpl	r3, r3, #2
 8027b76:	2001      	movmi	r0, #1
 8027b78:	600b      	strmi	r3, [r1, #0]
 8027b7a:	bf5c      	itt	pl
 8027b7c:	600b      	strpl	r3, [r1, #0]
 8027b7e:	2002      	movpl	r0, #2
 8027b80:	4770      	bx	lr
 8027b82:	b298      	uxth	r0, r3
 8027b84:	b9a8      	cbnz	r0, 8027bb2 <__lo0bits+0x52>
 8027b86:	0c1b      	lsrs	r3, r3, #16
 8027b88:	2010      	movs	r0, #16
 8027b8a:	b2da      	uxtb	r2, r3
 8027b8c:	b90a      	cbnz	r2, 8027b92 <__lo0bits+0x32>
 8027b8e:	3008      	adds	r0, #8
 8027b90:	0a1b      	lsrs	r3, r3, #8
 8027b92:	071a      	lsls	r2, r3, #28
 8027b94:	bf04      	itt	eq
 8027b96:	091b      	lsreq	r3, r3, #4
 8027b98:	3004      	addeq	r0, #4
 8027b9a:	079a      	lsls	r2, r3, #30
 8027b9c:	bf04      	itt	eq
 8027b9e:	089b      	lsreq	r3, r3, #2
 8027ba0:	3002      	addeq	r0, #2
 8027ba2:	07da      	lsls	r2, r3, #31
 8027ba4:	d403      	bmi.n	8027bae <__lo0bits+0x4e>
 8027ba6:	085b      	lsrs	r3, r3, #1
 8027ba8:	f100 0001 	add.w	r0, r0, #1
 8027bac:	d005      	beq.n	8027bba <__lo0bits+0x5a>
 8027bae:	600b      	str	r3, [r1, #0]
 8027bb0:	4770      	bx	lr
 8027bb2:	4610      	mov	r0, r2
 8027bb4:	e7e9      	b.n	8027b8a <__lo0bits+0x2a>
 8027bb6:	2000      	movs	r0, #0
 8027bb8:	4770      	bx	lr
 8027bba:	2020      	movs	r0, #32
 8027bbc:	4770      	bx	lr
 8027bbe:	Address 0x0000000008027bbe is out of bounds.


08027bc0 <__i2b>:
 8027bc0:	b510      	push	{r4, lr}
 8027bc2:	460c      	mov	r4, r1
 8027bc4:	2101      	movs	r1, #1
 8027bc6:	f7ff ff03 	bl	80279d0 <_Balloc>
 8027bca:	4602      	mov	r2, r0
 8027bcc:	b928      	cbnz	r0, 8027bda <__i2b+0x1a>
 8027bce:	4b05      	ldr	r3, [pc, #20]	; (8027be4 <__i2b+0x24>)
 8027bd0:	4805      	ldr	r0, [pc, #20]	; (8027be8 <__i2b+0x28>)
 8027bd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027bd6:	f7fe fe63 	bl	80268a0 <__assert_func>
 8027bda:	2301      	movs	r3, #1
 8027bdc:	6144      	str	r4, [r0, #20]
 8027bde:	6103      	str	r3, [r0, #16]
 8027be0:	bd10      	pop	{r4, pc}
 8027be2:	bf00      	nop
 8027be4:	08045c45 	.word	0x08045c45
 8027be8:	08045c56 	.word	0x08045c56

08027bec <__multiply>:
 8027bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bf0:	4691      	mov	r9, r2
 8027bf2:	690a      	ldr	r2, [r1, #16]
 8027bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027bf8:	429a      	cmp	r2, r3
 8027bfa:	bfb8      	it	lt
 8027bfc:	460b      	movlt	r3, r1
 8027bfe:	460c      	mov	r4, r1
 8027c00:	bfbc      	itt	lt
 8027c02:	464c      	movlt	r4, r9
 8027c04:	4699      	movlt	r9, r3
 8027c06:	6927      	ldr	r7, [r4, #16]
 8027c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027c0c:	68a3      	ldr	r3, [r4, #8]
 8027c0e:	6861      	ldr	r1, [r4, #4]
 8027c10:	eb07 060a 	add.w	r6, r7, sl
 8027c14:	42b3      	cmp	r3, r6
 8027c16:	b085      	sub	sp, #20
 8027c18:	bfb8      	it	lt
 8027c1a:	3101      	addlt	r1, #1
 8027c1c:	f7ff fed8 	bl	80279d0 <_Balloc>
 8027c20:	b930      	cbnz	r0, 8027c30 <__multiply+0x44>
 8027c22:	4602      	mov	r2, r0
 8027c24:	4b44      	ldr	r3, [pc, #272]	; (8027d38 <__multiply+0x14c>)
 8027c26:	4845      	ldr	r0, [pc, #276]	; (8027d3c <__multiply+0x150>)
 8027c28:	f240 115d 	movw	r1, #349	; 0x15d
 8027c2c:	f7fe fe38 	bl	80268a0 <__assert_func>
 8027c30:	f100 0514 	add.w	r5, r0, #20
 8027c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027c38:	462b      	mov	r3, r5
 8027c3a:	2200      	movs	r2, #0
 8027c3c:	4543      	cmp	r3, r8
 8027c3e:	d321      	bcc.n	8027c84 <__multiply+0x98>
 8027c40:	f104 0314 	add.w	r3, r4, #20
 8027c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027c48:	f109 0314 	add.w	r3, r9, #20
 8027c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027c50:	9202      	str	r2, [sp, #8]
 8027c52:	1b3a      	subs	r2, r7, r4
 8027c54:	3a15      	subs	r2, #21
 8027c56:	f022 0203 	bic.w	r2, r2, #3
 8027c5a:	3204      	adds	r2, #4
 8027c5c:	f104 0115 	add.w	r1, r4, #21
 8027c60:	428f      	cmp	r7, r1
 8027c62:	bf38      	it	cc
 8027c64:	2204      	movcc	r2, #4
 8027c66:	9201      	str	r2, [sp, #4]
 8027c68:	9a02      	ldr	r2, [sp, #8]
 8027c6a:	9303      	str	r3, [sp, #12]
 8027c6c:	429a      	cmp	r2, r3
 8027c6e:	d80c      	bhi.n	8027c8a <__multiply+0x9e>
 8027c70:	2e00      	cmp	r6, #0
 8027c72:	dd03      	ble.n	8027c7c <__multiply+0x90>
 8027c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027c78:	2b00      	cmp	r3, #0
 8027c7a:	d05a      	beq.n	8027d32 <__multiply+0x146>
 8027c7c:	6106      	str	r6, [r0, #16]
 8027c7e:	b005      	add	sp, #20
 8027c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c84:	f843 2b04 	str.w	r2, [r3], #4
 8027c88:	e7d8      	b.n	8027c3c <__multiply+0x50>
 8027c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8027c8e:	f1ba 0f00 	cmp.w	sl, #0
 8027c92:	d024      	beq.n	8027cde <__multiply+0xf2>
 8027c94:	f104 0e14 	add.w	lr, r4, #20
 8027c98:	46a9      	mov	r9, r5
 8027c9a:	f04f 0c00 	mov.w	ip, #0
 8027c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8027ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8027ca6:	fa1f fb82 	uxth.w	fp, r2
 8027caa:	b289      	uxth	r1, r1
 8027cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8027cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8027cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8027cb8:	4461      	add	r1, ip
 8027cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8027cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8027cc6:	b289      	uxth	r1, r1
 8027cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027ccc:	4577      	cmp	r7, lr
 8027cce:	f849 1b04 	str.w	r1, [r9], #4
 8027cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027cd6:	d8e2      	bhi.n	8027c9e <__multiply+0xb2>
 8027cd8:	9a01      	ldr	r2, [sp, #4]
 8027cda:	f845 c002 	str.w	ip, [r5, r2]
 8027cde:	9a03      	ldr	r2, [sp, #12]
 8027ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027ce4:	3304      	adds	r3, #4
 8027ce6:	f1b9 0f00 	cmp.w	r9, #0
 8027cea:	d020      	beq.n	8027d2e <__multiply+0x142>
 8027cec:	6829      	ldr	r1, [r5, #0]
 8027cee:	f104 0c14 	add.w	ip, r4, #20
 8027cf2:	46ae      	mov	lr, r5
 8027cf4:	f04f 0a00 	mov.w	sl, #0
 8027cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8027cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027d00:	fb09 220b 	mla	r2, r9, fp, r2
 8027d04:	4492      	add	sl, r2
 8027d06:	b289      	uxth	r1, r1
 8027d08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8027d10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027d14:	f8be 1000 	ldrh.w	r1, [lr]
 8027d18:	0c12      	lsrs	r2, r2, #16
 8027d1a:	fb09 1102 	mla	r1, r9, r2, r1
 8027d1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8027d22:	4567      	cmp	r7, ip
 8027d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027d28:	d8e6      	bhi.n	8027cf8 <__multiply+0x10c>
 8027d2a:	9a01      	ldr	r2, [sp, #4]
 8027d2c:	50a9      	str	r1, [r5, r2]
 8027d2e:	3504      	adds	r5, #4
 8027d30:	e79a      	b.n	8027c68 <__multiply+0x7c>
 8027d32:	3e01      	subs	r6, #1
 8027d34:	e79c      	b.n	8027c70 <__multiply+0x84>
 8027d36:	bf00      	nop
 8027d38:	08045c45 	.word	0x08045c45
 8027d3c:	08045c56 	.word	0x08045c56

08027d40 <__pow5mult>:
 8027d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027d44:	4615      	mov	r5, r2
 8027d46:	f012 0203 	ands.w	r2, r2, #3
 8027d4a:	4606      	mov	r6, r0
 8027d4c:	460f      	mov	r7, r1
 8027d4e:	d007      	beq.n	8027d60 <__pow5mult+0x20>
 8027d50:	4c25      	ldr	r4, [pc, #148]	; (8027de8 <__pow5mult+0xa8>)
 8027d52:	3a01      	subs	r2, #1
 8027d54:	2300      	movs	r3, #0
 8027d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027d5a:	f7ff fe9b 	bl	8027a94 <__multadd>
 8027d5e:	4607      	mov	r7, r0
 8027d60:	10ad      	asrs	r5, r5, #2
 8027d62:	d03d      	beq.n	8027de0 <__pow5mult+0xa0>
 8027d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027d66:	b97c      	cbnz	r4, 8027d88 <__pow5mult+0x48>
 8027d68:	2010      	movs	r0, #16
 8027d6a:	f7fc f94b 	bl	8024004 <malloc>
 8027d6e:	4602      	mov	r2, r0
 8027d70:	6270      	str	r0, [r6, #36]	; 0x24
 8027d72:	b928      	cbnz	r0, 8027d80 <__pow5mult+0x40>
 8027d74:	4b1d      	ldr	r3, [pc, #116]	; (8027dec <__pow5mult+0xac>)
 8027d76:	481e      	ldr	r0, [pc, #120]	; (8027df0 <__pow5mult+0xb0>)
 8027d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027d7c:	f7fe fd90 	bl	80268a0 <__assert_func>
 8027d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027d84:	6004      	str	r4, [r0, #0]
 8027d86:	60c4      	str	r4, [r0, #12]
 8027d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027d90:	b94c      	cbnz	r4, 8027da6 <__pow5mult+0x66>
 8027d92:	f240 2171 	movw	r1, #625	; 0x271
 8027d96:	4630      	mov	r0, r6
 8027d98:	f7ff ff12 	bl	8027bc0 <__i2b>
 8027d9c:	2300      	movs	r3, #0
 8027d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8027da2:	4604      	mov	r4, r0
 8027da4:	6003      	str	r3, [r0, #0]
 8027da6:	f04f 0900 	mov.w	r9, #0
 8027daa:	07eb      	lsls	r3, r5, #31
 8027dac:	d50a      	bpl.n	8027dc4 <__pow5mult+0x84>
 8027dae:	4639      	mov	r1, r7
 8027db0:	4622      	mov	r2, r4
 8027db2:	4630      	mov	r0, r6
 8027db4:	f7ff ff1a 	bl	8027bec <__multiply>
 8027db8:	4639      	mov	r1, r7
 8027dba:	4680      	mov	r8, r0
 8027dbc:	4630      	mov	r0, r6
 8027dbe:	f7ff fe47 	bl	8027a50 <_Bfree>
 8027dc2:	4647      	mov	r7, r8
 8027dc4:	106d      	asrs	r5, r5, #1
 8027dc6:	d00b      	beq.n	8027de0 <__pow5mult+0xa0>
 8027dc8:	6820      	ldr	r0, [r4, #0]
 8027dca:	b938      	cbnz	r0, 8027ddc <__pow5mult+0x9c>
 8027dcc:	4622      	mov	r2, r4
 8027dce:	4621      	mov	r1, r4
 8027dd0:	4630      	mov	r0, r6
 8027dd2:	f7ff ff0b 	bl	8027bec <__multiply>
 8027dd6:	6020      	str	r0, [r4, #0]
 8027dd8:	f8c0 9000 	str.w	r9, [r0]
 8027ddc:	4604      	mov	r4, r0
 8027dde:	e7e4      	b.n	8027daa <__pow5mult+0x6a>
 8027de0:	4638      	mov	r0, r7
 8027de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027de6:	bf00      	nop
 8027de8:	08045da8 	.word	0x08045da8
 8027dec:	0804566c 	.word	0x0804566c
 8027df0:	08045c56 	.word	0x08045c56

08027df4 <__lshift>:
 8027df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027df8:	460c      	mov	r4, r1
 8027dfa:	6849      	ldr	r1, [r1, #4]
 8027dfc:	6923      	ldr	r3, [r4, #16]
 8027dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027e02:	68a3      	ldr	r3, [r4, #8]
 8027e04:	4607      	mov	r7, r0
 8027e06:	4691      	mov	r9, r2
 8027e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027e0c:	f108 0601 	add.w	r6, r8, #1
 8027e10:	42b3      	cmp	r3, r6
 8027e12:	db0b      	blt.n	8027e2c <__lshift+0x38>
 8027e14:	4638      	mov	r0, r7
 8027e16:	f7ff fddb 	bl	80279d0 <_Balloc>
 8027e1a:	4605      	mov	r5, r0
 8027e1c:	b948      	cbnz	r0, 8027e32 <__lshift+0x3e>
 8027e1e:	4602      	mov	r2, r0
 8027e20:	4b2a      	ldr	r3, [pc, #168]	; (8027ecc <__lshift+0xd8>)
 8027e22:	482b      	ldr	r0, [pc, #172]	; (8027ed0 <__lshift+0xdc>)
 8027e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027e28:	f7fe fd3a 	bl	80268a0 <__assert_func>
 8027e2c:	3101      	adds	r1, #1
 8027e2e:	005b      	lsls	r3, r3, #1
 8027e30:	e7ee      	b.n	8027e10 <__lshift+0x1c>
 8027e32:	2300      	movs	r3, #0
 8027e34:	f100 0114 	add.w	r1, r0, #20
 8027e38:	f100 0210 	add.w	r2, r0, #16
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	4553      	cmp	r3, sl
 8027e40:	db37      	blt.n	8027eb2 <__lshift+0xbe>
 8027e42:	6920      	ldr	r0, [r4, #16]
 8027e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027e48:	f104 0314 	add.w	r3, r4, #20
 8027e4c:	f019 091f 	ands.w	r9, r9, #31
 8027e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027e54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027e58:	d02f      	beq.n	8027eba <__lshift+0xc6>
 8027e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8027e5e:	468a      	mov	sl, r1
 8027e60:	f04f 0c00 	mov.w	ip, #0
 8027e64:	681a      	ldr	r2, [r3, #0]
 8027e66:	fa02 f209 	lsl.w	r2, r2, r9
 8027e6a:	ea42 020c 	orr.w	r2, r2, ip
 8027e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8027e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8027e76:	4298      	cmp	r0, r3
 8027e78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027e7c:	d8f2      	bhi.n	8027e64 <__lshift+0x70>
 8027e7e:	1b03      	subs	r3, r0, r4
 8027e80:	3b15      	subs	r3, #21
 8027e82:	f023 0303 	bic.w	r3, r3, #3
 8027e86:	3304      	adds	r3, #4
 8027e88:	f104 0215 	add.w	r2, r4, #21
 8027e8c:	4290      	cmp	r0, r2
 8027e8e:	bf38      	it	cc
 8027e90:	2304      	movcc	r3, #4
 8027e92:	f841 c003 	str.w	ip, [r1, r3]
 8027e96:	f1bc 0f00 	cmp.w	ip, #0
 8027e9a:	d001      	beq.n	8027ea0 <__lshift+0xac>
 8027e9c:	f108 0602 	add.w	r6, r8, #2
 8027ea0:	3e01      	subs	r6, #1
 8027ea2:	4638      	mov	r0, r7
 8027ea4:	612e      	str	r6, [r5, #16]
 8027ea6:	4621      	mov	r1, r4
 8027ea8:	f7ff fdd2 	bl	8027a50 <_Bfree>
 8027eac:	4628      	mov	r0, r5
 8027eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8027eb6:	3301      	adds	r3, #1
 8027eb8:	e7c1      	b.n	8027e3e <__lshift+0x4a>
 8027eba:	3904      	subs	r1, #4
 8027ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8027ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8027ec4:	4298      	cmp	r0, r3
 8027ec6:	d8f9      	bhi.n	8027ebc <__lshift+0xc8>
 8027ec8:	e7ea      	b.n	8027ea0 <__lshift+0xac>
 8027eca:	bf00      	nop
 8027ecc:	08045c45 	.word	0x08045c45
 8027ed0:	08045c56 	.word	0x08045c56

08027ed4 <__mcmp>:
 8027ed4:	b530      	push	{r4, r5, lr}
 8027ed6:	6902      	ldr	r2, [r0, #16]
 8027ed8:	690c      	ldr	r4, [r1, #16]
 8027eda:	1b12      	subs	r2, r2, r4
 8027edc:	d10e      	bne.n	8027efc <__mcmp+0x28>
 8027ede:	f100 0314 	add.w	r3, r0, #20
 8027ee2:	3114      	adds	r1, #20
 8027ee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027ee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027eec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8027ef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027ef4:	42a5      	cmp	r5, r4
 8027ef6:	d003      	beq.n	8027f00 <__mcmp+0x2c>
 8027ef8:	d305      	bcc.n	8027f06 <__mcmp+0x32>
 8027efa:	2201      	movs	r2, #1
 8027efc:	4610      	mov	r0, r2
 8027efe:	bd30      	pop	{r4, r5, pc}
 8027f00:	4283      	cmp	r3, r0
 8027f02:	d3f3      	bcc.n	8027eec <__mcmp+0x18>
 8027f04:	e7fa      	b.n	8027efc <__mcmp+0x28>
 8027f06:	f04f 32ff 	mov.w	r2, #4294967295
 8027f0a:	e7f7      	b.n	8027efc <__mcmp+0x28>

08027f0c <__mdiff>:
 8027f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f10:	460c      	mov	r4, r1
 8027f12:	4606      	mov	r6, r0
 8027f14:	4611      	mov	r1, r2
 8027f16:	4620      	mov	r0, r4
 8027f18:	4690      	mov	r8, r2
 8027f1a:	f7ff ffdb 	bl	8027ed4 <__mcmp>
 8027f1e:	1e05      	subs	r5, r0, #0
 8027f20:	d110      	bne.n	8027f44 <__mdiff+0x38>
 8027f22:	4629      	mov	r1, r5
 8027f24:	4630      	mov	r0, r6
 8027f26:	f7ff fd53 	bl	80279d0 <_Balloc>
 8027f2a:	b930      	cbnz	r0, 8027f3a <__mdiff+0x2e>
 8027f2c:	4b3a      	ldr	r3, [pc, #232]	; (8028018 <__mdiff+0x10c>)
 8027f2e:	4602      	mov	r2, r0
 8027f30:	f240 2132 	movw	r1, #562	; 0x232
 8027f34:	4839      	ldr	r0, [pc, #228]	; (802801c <__mdiff+0x110>)
 8027f36:	f7fe fcb3 	bl	80268a0 <__assert_func>
 8027f3a:	2301      	movs	r3, #1
 8027f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f44:	bfa4      	itt	ge
 8027f46:	4643      	movge	r3, r8
 8027f48:	46a0      	movge	r8, r4
 8027f4a:	4630      	mov	r0, r6
 8027f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027f50:	bfa6      	itte	ge
 8027f52:	461c      	movge	r4, r3
 8027f54:	2500      	movge	r5, #0
 8027f56:	2501      	movlt	r5, #1
 8027f58:	f7ff fd3a 	bl	80279d0 <_Balloc>
 8027f5c:	b920      	cbnz	r0, 8027f68 <__mdiff+0x5c>
 8027f5e:	4b2e      	ldr	r3, [pc, #184]	; (8028018 <__mdiff+0x10c>)
 8027f60:	4602      	mov	r2, r0
 8027f62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027f66:	e7e5      	b.n	8027f34 <__mdiff+0x28>
 8027f68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027f6c:	6926      	ldr	r6, [r4, #16]
 8027f6e:	60c5      	str	r5, [r0, #12]
 8027f70:	f104 0914 	add.w	r9, r4, #20
 8027f74:	f108 0514 	add.w	r5, r8, #20
 8027f78:	f100 0e14 	add.w	lr, r0, #20
 8027f7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027f80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027f84:	f108 0210 	add.w	r2, r8, #16
 8027f88:	46f2      	mov	sl, lr
 8027f8a:	2100      	movs	r1, #0
 8027f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8027f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027f94:	fa1f f883 	uxth.w	r8, r3
 8027f98:	fa11 f18b 	uxtah	r1, r1, fp
 8027f9c:	0c1b      	lsrs	r3, r3, #16
 8027f9e:	eba1 0808 	sub.w	r8, r1, r8
 8027fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027fa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027faa:	fa1f f888 	uxth.w	r8, r8
 8027fae:	1419      	asrs	r1, r3, #16
 8027fb0:	454e      	cmp	r6, r9
 8027fb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8027fba:	d8e7      	bhi.n	8027f8c <__mdiff+0x80>
 8027fbc:	1b33      	subs	r3, r6, r4
 8027fbe:	3b15      	subs	r3, #21
 8027fc0:	f023 0303 	bic.w	r3, r3, #3
 8027fc4:	3304      	adds	r3, #4
 8027fc6:	3415      	adds	r4, #21
 8027fc8:	42a6      	cmp	r6, r4
 8027fca:	bf38      	it	cc
 8027fcc:	2304      	movcc	r3, #4
 8027fce:	441d      	add	r5, r3
 8027fd0:	4473      	add	r3, lr
 8027fd2:	469e      	mov	lr, r3
 8027fd4:	462e      	mov	r6, r5
 8027fd6:	4566      	cmp	r6, ip
 8027fd8:	d30e      	bcc.n	8027ff8 <__mdiff+0xec>
 8027fda:	f10c 0203 	add.w	r2, ip, #3
 8027fde:	1b52      	subs	r2, r2, r5
 8027fe0:	f022 0203 	bic.w	r2, r2, #3
 8027fe4:	3d03      	subs	r5, #3
 8027fe6:	45ac      	cmp	ip, r5
 8027fe8:	bf38      	it	cc
 8027fea:	2200      	movcc	r2, #0
 8027fec:	441a      	add	r2, r3
 8027fee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8027ff2:	b17b      	cbz	r3, 8028014 <__mdiff+0x108>
 8027ff4:	6107      	str	r7, [r0, #16]
 8027ff6:	e7a3      	b.n	8027f40 <__mdiff+0x34>
 8027ff8:	f856 8b04 	ldr.w	r8, [r6], #4
 8027ffc:	fa11 f288 	uxtah	r2, r1, r8
 8028000:	1414      	asrs	r4, r2, #16
 8028002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8028006:	b292      	uxth	r2, r2
 8028008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802800c:	f84e 2b04 	str.w	r2, [lr], #4
 8028010:	1421      	asrs	r1, r4, #16
 8028012:	e7e0      	b.n	8027fd6 <__mdiff+0xca>
 8028014:	3f01      	subs	r7, #1
 8028016:	e7ea      	b.n	8027fee <__mdiff+0xe2>
 8028018:	08045c45 	.word	0x08045c45
 802801c:	08045c56 	.word	0x08045c56

08028020 <__d2b>:
 8028020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028024:	4689      	mov	r9, r1
 8028026:	2101      	movs	r1, #1
 8028028:	ec57 6b10 	vmov	r6, r7, d0
 802802c:	4690      	mov	r8, r2
 802802e:	f7ff fccf 	bl	80279d0 <_Balloc>
 8028032:	4604      	mov	r4, r0
 8028034:	b930      	cbnz	r0, 8028044 <__d2b+0x24>
 8028036:	4602      	mov	r2, r0
 8028038:	4b25      	ldr	r3, [pc, #148]	; (80280d0 <__d2b+0xb0>)
 802803a:	4826      	ldr	r0, [pc, #152]	; (80280d4 <__d2b+0xb4>)
 802803c:	f240 310a 	movw	r1, #778	; 0x30a
 8028040:	f7fe fc2e 	bl	80268a0 <__assert_func>
 8028044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802804c:	bb35      	cbnz	r5, 802809c <__d2b+0x7c>
 802804e:	2e00      	cmp	r6, #0
 8028050:	9301      	str	r3, [sp, #4]
 8028052:	d028      	beq.n	80280a6 <__d2b+0x86>
 8028054:	4668      	mov	r0, sp
 8028056:	9600      	str	r6, [sp, #0]
 8028058:	f7ff fd82 	bl	8027b60 <__lo0bits>
 802805c:	9900      	ldr	r1, [sp, #0]
 802805e:	b300      	cbz	r0, 80280a2 <__d2b+0x82>
 8028060:	9a01      	ldr	r2, [sp, #4]
 8028062:	f1c0 0320 	rsb	r3, r0, #32
 8028066:	fa02 f303 	lsl.w	r3, r2, r3
 802806a:	430b      	orrs	r3, r1
 802806c:	40c2      	lsrs	r2, r0
 802806e:	6163      	str	r3, [r4, #20]
 8028070:	9201      	str	r2, [sp, #4]
 8028072:	9b01      	ldr	r3, [sp, #4]
 8028074:	61a3      	str	r3, [r4, #24]
 8028076:	2b00      	cmp	r3, #0
 8028078:	bf14      	ite	ne
 802807a:	2202      	movne	r2, #2
 802807c:	2201      	moveq	r2, #1
 802807e:	6122      	str	r2, [r4, #16]
 8028080:	b1d5      	cbz	r5, 80280b8 <__d2b+0x98>
 8028082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028086:	4405      	add	r5, r0
 8028088:	f8c9 5000 	str.w	r5, [r9]
 802808c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028090:	f8c8 0000 	str.w	r0, [r8]
 8028094:	4620      	mov	r0, r4
 8028096:	b003      	add	sp, #12
 8028098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802809c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80280a0:	e7d5      	b.n	802804e <__d2b+0x2e>
 80280a2:	6161      	str	r1, [r4, #20]
 80280a4:	e7e5      	b.n	8028072 <__d2b+0x52>
 80280a6:	a801      	add	r0, sp, #4
 80280a8:	f7ff fd5a 	bl	8027b60 <__lo0bits>
 80280ac:	9b01      	ldr	r3, [sp, #4]
 80280ae:	6163      	str	r3, [r4, #20]
 80280b0:	2201      	movs	r2, #1
 80280b2:	6122      	str	r2, [r4, #16]
 80280b4:	3020      	adds	r0, #32
 80280b6:	e7e3      	b.n	8028080 <__d2b+0x60>
 80280b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80280bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80280c0:	f8c9 0000 	str.w	r0, [r9]
 80280c4:	6918      	ldr	r0, [r3, #16]
 80280c6:	f7ff fd2b 	bl	8027b20 <__hi0bits>
 80280ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80280ce:	e7df      	b.n	8028090 <__d2b+0x70>
 80280d0:	08045c45 	.word	0x08045c45
 80280d4:	08045c56 	.word	0x08045c56

080280d8 <_calloc_r>:
 80280d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80280da:	fba1 2402 	umull	r2, r4, r1, r2
 80280de:	b94c      	cbnz	r4, 80280f4 <_calloc_r+0x1c>
 80280e0:	4611      	mov	r1, r2
 80280e2:	9201      	str	r2, [sp, #4]
 80280e4:	f7fc fabc 	bl	8024660 <_malloc_r>
 80280e8:	9a01      	ldr	r2, [sp, #4]
 80280ea:	4605      	mov	r5, r0
 80280ec:	b930      	cbnz	r0, 80280fc <_calloc_r+0x24>
 80280ee:	4628      	mov	r0, r5
 80280f0:	b003      	add	sp, #12
 80280f2:	bd30      	pop	{r4, r5, pc}
 80280f4:	220c      	movs	r2, #12
 80280f6:	6002      	str	r2, [r0, #0]
 80280f8:	2500      	movs	r5, #0
 80280fa:	e7f8      	b.n	80280ee <_calloc_r+0x16>
 80280fc:	4621      	mov	r1, r4
 80280fe:	f7fb ffc9 	bl	8024094 <memset>
 8028102:	e7f4      	b.n	80280ee <_calloc_r+0x16>

08028104 <_realloc_r>:
 8028104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028108:	4680      	mov	r8, r0
 802810a:	4614      	mov	r4, r2
 802810c:	460e      	mov	r6, r1
 802810e:	b921      	cbnz	r1, 802811a <_realloc_r+0x16>
 8028110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028114:	4611      	mov	r1, r2
 8028116:	f7fc baa3 	b.w	8024660 <_malloc_r>
 802811a:	b92a      	cbnz	r2, 8028128 <_realloc_r+0x24>
 802811c:	f7fc fa34 	bl	8024588 <_free_r>
 8028120:	4625      	mov	r5, r4
 8028122:	4628      	mov	r0, r5
 8028124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028128:	f000 ff32 	bl	8028f90 <_malloc_usable_size_r>
 802812c:	4284      	cmp	r4, r0
 802812e:	4607      	mov	r7, r0
 8028130:	d802      	bhi.n	8028138 <_realloc_r+0x34>
 8028132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028136:	d812      	bhi.n	802815e <_realloc_r+0x5a>
 8028138:	4621      	mov	r1, r4
 802813a:	4640      	mov	r0, r8
 802813c:	f7fc fa90 	bl	8024660 <_malloc_r>
 8028140:	4605      	mov	r5, r0
 8028142:	2800      	cmp	r0, #0
 8028144:	d0ed      	beq.n	8028122 <_realloc_r+0x1e>
 8028146:	42bc      	cmp	r4, r7
 8028148:	4622      	mov	r2, r4
 802814a:	4631      	mov	r1, r6
 802814c:	bf28      	it	cs
 802814e:	463a      	movcs	r2, r7
 8028150:	f7fb ff78 	bl	8024044 <memcpy>
 8028154:	4631      	mov	r1, r6
 8028156:	4640      	mov	r0, r8
 8028158:	f7fc fa16 	bl	8024588 <_free_r>
 802815c:	e7e1      	b.n	8028122 <_realloc_r+0x1e>
 802815e:	4635      	mov	r5, r6
 8028160:	e7df      	b.n	8028122 <_realloc_r+0x1e>

08028162 <__ssputs_r>:
 8028162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028166:	688e      	ldr	r6, [r1, #8]
 8028168:	429e      	cmp	r6, r3
 802816a:	4682      	mov	sl, r0
 802816c:	460c      	mov	r4, r1
 802816e:	4690      	mov	r8, r2
 8028170:	461f      	mov	r7, r3
 8028172:	d838      	bhi.n	80281e6 <__ssputs_r+0x84>
 8028174:	898a      	ldrh	r2, [r1, #12]
 8028176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802817a:	d032      	beq.n	80281e2 <__ssputs_r+0x80>
 802817c:	6825      	ldr	r5, [r4, #0]
 802817e:	6909      	ldr	r1, [r1, #16]
 8028180:	eba5 0901 	sub.w	r9, r5, r1
 8028184:	6965      	ldr	r5, [r4, #20]
 8028186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802818a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802818e:	3301      	adds	r3, #1
 8028190:	444b      	add	r3, r9
 8028192:	106d      	asrs	r5, r5, #1
 8028194:	429d      	cmp	r5, r3
 8028196:	bf38      	it	cc
 8028198:	461d      	movcc	r5, r3
 802819a:	0553      	lsls	r3, r2, #21
 802819c:	d531      	bpl.n	8028202 <__ssputs_r+0xa0>
 802819e:	4629      	mov	r1, r5
 80281a0:	f7fc fa5e 	bl	8024660 <_malloc_r>
 80281a4:	4606      	mov	r6, r0
 80281a6:	b950      	cbnz	r0, 80281be <__ssputs_r+0x5c>
 80281a8:	230c      	movs	r3, #12
 80281aa:	f8ca 3000 	str.w	r3, [sl]
 80281ae:	89a3      	ldrh	r3, [r4, #12]
 80281b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80281b4:	81a3      	strh	r3, [r4, #12]
 80281b6:	f04f 30ff 	mov.w	r0, #4294967295
 80281ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80281be:	6921      	ldr	r1, [r4, #16]
 80281c0:	464a      	mov	r2, r9
 80281c2:	f7fb ff3f 	bl	8024044 <memcpy>
 80281c6:	89a3      	ldrh	r3, [r4, #12]
 80281c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80281cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80281d0:	81a3      	strh	r3, [r4, #12]
 80281d2:	6126      	str	r6, [r4, #16]
 80281d4:	6165      	str	r5, [r4, #20]
 80281d6:	444e      	add	r6, r9
 80281d8:	eba5 0509 	sub.w	r5, r5, r9
 80281dc:	6026      	str	r6, [r4, #0]
 80281de:	60a5      	str	r5, [r4, #8]
 80281e0:	463e      	mov	r6, r7
 80281e2:	42be      	cmp	r6, r7
 80281e4:	d900      	bls.n	80281e8 <__ssputs_r+0x86>
 80281e6:	463e      	mov	r6, r7
 80281e8:	6820      	ldr	r0, [r4, #0]
 80281ea:	4632      	mov	r2, r6
 80281ec:	4641      	mov	r1, r8
 80281ee:	f7fb ff37 	bl	8024060 <memmove>
 80281f2:	68a3      	ldr	r3, [r4, #8]
 80281f4:	1b9b      	subs	r3, r3, r6
 80281f6:	60a3      	str	r3, [r4, #8]
 80281f8:	6823      	ldr	r3, [r4, #0]
 80281fa:	4433      	add	r3, r6
 80281fc:	6023      	str	r3, [r4, #0]
 80281fe:	2000      	movs	r0, #0
 8028200:	e7db      	b.n	80281ba <__ssputs_r+0x58>
 8028202:	462a      	mov	r2, r5
 8028204:	f7ff ff7e 	bl	8028104 <_realloc_r>
 8028208:	4606      	mov	r6, r0
 802820a:	2800      	cmp	r0, #0
 802820c:	d1e1      	bne.n	80281d2 <__ssputs_r+0x70>
 802820e:	6921      	ldr	r1, [r4, #16]
 8028210:	4650      	mov	r0, sl
 8028212:	f7fc f9b9 	bl	8024588 <_free_r>
 8028216:	e7c7      	b.n	80281a8 <__ssputs_r+0x46>

08028218 <_svfiprintf_r>:
 8028218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802821c:	4698      	mov	r8, r3
 802821e:	898b      	ldrh	r3, [r1, #12]
 8028220:	061b      	lsls	r3, r3, #24
 8028222:	b09d      	sub	sp, #116	; 0x74
 8028224:	4607      	mov	r7, r0
 8028226:	460d      	mov	r5, r1
 8028228:	4614      	mov	r4, r2
 802822a:	d50e      	bpl.n	802824a <_svfiprintf_r+0x32>
 802822c:	690b      	ldr	r3, [r1, #16]
 802822e:	b963      	cbnz	r3, 802824a <_svfiprintf_r+0x32>
 8028230:	2140      	movs	r1, #64	; 0x40
 8028232:	f7fc fa15 	bl	8024660 <_malloc_r>
 8028236:	6028      	str	r0, [r5, #0]
 8028238:	6128      	str	r0, [r5, #16]
 802823a:	b920      	cbnz	r0, 8028246 <_svfiprintf_r+0x2e>
 802823c:	230c      	movs	r3, #12
 802823e:	603b      	str	r3, [r7, #0]
 8028240:	f04f 30ff 	mov.w	r0, #4294967295
 8028244:	e0d1      	b.n	80283ea <_svfiprintf_r+0x1d2>
 8028246:	2340      	movs	r3, #64	; 0x40
 8028248:	616b      	str	r3, [r5, #20]
 802824a:	2300      	movs	r3, #0
 802824c:	9309      	str	r3, [sp, #36]	; 0x24
 802824e:	2320      	movs	r3, #32
 8028250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028254:	f8cd 800c 	str.w	r8, [sp, #12]
 8028258:	2330      	movs	r3, #48	; 0x30
 802825a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028404 <_svfiprintf_r+0x1ec>
 802825e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028262:	f04f 0901 	mov.w	r9, #1
 8028266:	4623      	mov	r3, r4
 8028268:	469a      	mov	sl, r3
 802826a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802826e:	b10a      	cbz	r2, 8028274 <_svfiprintf_r+0x5c>
 8028270:	2a25      	cmp	r2, #37	; 0x25
 8028272:	d1f9      	bne.n	8028268 <_svfiprintf_r+0x50>
 8028274:	ebba 0b04 	subs.w	fp, sl, r4
 8028278:	d00b      	beq.n	8028292 <_svfiprintf_r+0x7a>
 802827a:	465b      	mov	r3, fp
 802827c:	4622      	mov	r2, r4
 802827e:	4629      	mov	r1, r5
 8028280:	4638      	mov	r0, r7
 8028282:	f7ff ff6e 	bl	8028162 <__ssputs_r>
 8028286:	3001      	adds	r0, #1
 8028288:	f000 80aa 	beq.w	80283e0 <_svfiprintf_r+0x1c8>
 802828c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802828e:	445a      	add	r2, fp
 8028290:	9209      	str	r2, [sp, #36]	; 0x24
 8028292:	f89a 3000 	ldrb.w	r3, [sl]
 8028296:	2b00      	cmp	r3, #0
 8028298:	f000 80a2 	beq.w	80283e0 <_svfiprintf_r+0x1c8>
 802829c:	2300      	movs	r3, #0
 802829e:	f04f 32ff 	mov.w	r2, #4294967295
 80282a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80282a6:	f10a 0a01 	add.w	sl, sl, #1
 80282aa:	9304      	str	r3, [sp, #16]
 80282ac:	9307      	str	r3, [sp, #28]
 80282ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80282b2:	931a      	str	r3, [sp, #104]	; 0x68
 80282b4:	4654      	mov	r4, sl
 80282b6:	2205      	movs	r2, #5
 80282b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80282bc:	4851      	ldr	r0, [pc, #324]	; (8028404 <_svfiprintf_r+0x1ec>)
 80282be:	f7d7 ffd7 	bl	8000270 <memchr>
 80282c2:	9a04      	ldr	r2, [sp, #16]
 80282c4:	b9d8      	cbnz	r0, 80282fe <_svfiprintf_r+0xe6>
 80282c6:	06d0      	lsls	r0, r2, #27
 80282c8:	bf44      	itt	mi
 80282ca:	2320      	movmi	r3, #32
 80282cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80282d0:	0711      	lsls	r1, r2, #28
 80282d2:	bf44      	itt	mi
 80282d4:	232b      	movmi	r3, #43	; 0x2b
 80282d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80282da:	f89a 3000 	ldrb.w	r3, [sl]
 80282de:	2b2a      	cmp	r3, #42	; 0x2a
 80282e0:	d015      	beq.n	802830e <_svfiprintf_r+0xf6>
 80282e2:	9a07      	ldr	r2, [sp, #28]
 80282e4:	4654      	mov	r4, sl
 80282e6:	2000      	movs	r0, #0
 80282e8:	f04f 0c0a 	mov.w	ip, #10
 80282ec:	4621      	mov	r1, r4
 80282ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80282f2:	3b30      	subs	r3, #48	; 0x30
 80282f4:	2b09      	cmp	r3, #9
 80282f6:	d94e      	bls.n	8028396 <_svfiprintf_r+0x17e>
 80282f8:	b1b0      	cbz	r0, 8028328 <_svfiprintf_r+0x110>
 80282fa:	9207      	str	r2, [sp, #28]
 80282fc:	e014      	b.n	8028328 <_svfiprintf_r+0x110>
 80282fe:	eba0 0308 	sub.w	r3, r0, r8
 8028302:	fa09 f303 	lsl.w	r3, r9, r3
 8028306:	4313      	orrs	r3, r2
 8028308:	9304      	str	r3, [sp, #16]
 802830a:	46a2      	mov	sl, r4
 802830c:	e7d2      	b.n	80282b4 <_svfiprintf_r+0x9c>
 802830e:	9b03      	ldr	r3, [sp, #12]
 8028310:	1d19      	adds	r1, r3, #4
 8028312:	681b      	ldr	r3, [r3, #0]
 8028314:	9103      	str	r1, [sp, #12]
 8028316:	2b00      	cmp	r3, #0
 8028318:	bfbb      	ittet	lt
 802831a:	425b      	neglt	r3, r3
 802831c:	f042 0202 	orrlt.w	r2, r2, #2
 8028320:	9307      	strge	r3, [sp, #28]
 8028322:	9307      	strlt	r3, [sp, #28]
 8028324:	bfb8      	it	lt
 8028326:	9204      	strlt	r2, [sp, #16]
 8028328:	7823      	ldrb	r3, [r4, #0]
 802832a:	2b2e      	cmp	r3, #46	; 0x2e
 802832c:	d10c      	bne.n	8028348 <_svfiprintf_r+0x130>
 802832e:	7863      	ldrb	r3, [r4, #1]
 8028330:	2b2a      	cmp	r3, #42	; 0x2a
 8028332:	d135      	bne.n	80283a0 <_svfiprintf_r+0x188>
 8028334:	9b03      	ldr	r3, [sp, #12]
 8028336:	1d1a      	adds	r2, r3, #4
 8028338:	681b      	ldr	r3, [r3, #0]
 802833a:	9203      	str	r2, [sp, #12]
 802833c:	2b00      	cmp	r3, #0
 802833e:	bfb8      	it	lt
 8028340:	f04f 33ff 	movlt.w	r3, #4294967295
 8028344:	3402      	adds	r4, #2
 8028346:	9305      	str	r3, [sp, #20]
 8028348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028414 <_svfiprintf_r+0x1fc>
 802834c:	7821      	ldrb	r1, [r4, #0]
 802834e:	2203      	movs	r2, #3
 8028350:	4650      	mov	r0, sl
 8028352:	f7d7 ff8d 	bl	8000270 <memchr>
 8028356:	b140      	cbz	r0, 802836a <_svfiprintf_r+0x152>
 8028358:	2340      	movs	r3, #64	; 0x40
 802835a:	eba0 000a 	sub.w	r0, r0, sl
 802835e:	fa03 f000 	lsl.w	r0, r3, r0
 8028362:	9b04      	ldr	r3, [sp, #16]
 8028364:	4303      	orrs	r3, r0
 8028366:	3401      	adds	r4, #1
 8028368:	9304      	str	r3, [sp, #16]
 802836a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802836e:	4826      	ldr	r0, [pc, #152]	; (8028408 <_svfiprintf_r+0x1f0>)
 8028370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028374:	2206      	movs	r2, #6
 8028376:	f7d7 ff7b 	bl	8000270 <memchr>
 802837a:	2800      	cmp	r0, #0
 802837c:	d038      	beq.n	80283f0 <_svfiprintf_r+0x1d8>
 802837e:	4b23      	ldr	r3, [pc, #140]	; (802840c <_svfiprintf_r+0x1f4>)
 8028380:	bb1b      	cbnz	r3, 80283ca <_svfiprintf_r+0x1b2>
 8028382:	9b03      	ldr	r3, [sp, #12]
 8028384:	3307      	adds	r3, #7
 8028386:	f023 0307 	bic.w	r3, r3, #7
 802838a:	3308      	adds	r3, #8
 802838c:	9303      	str	r3, [sp, #12]
 802838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028390:	4433      	add	r3, r6
 8028392:	9309      	str	r3, [sp, #36]	; 0x24
 8028394:	e767      	b.n	8028266 <_svfiprintf_r+0x4e>
 8028396:	fb0c 3202 	mla	r2, ip, r2, r3
 802839a:	460c      	mov	r4, r1
 802839c:	2001      	movs	r0, #1
 802839e:	e7a5      	b.n	80282ec <_svfiprintf_r+0xd4>
 80283a0:	2300      	movs	r3, #0
 80283a2:	3401      	adds	r4, #1
 80283a4:	9305      	str	r3, [sp, #20]
 80283a6:	4619      	mov	r1, r3
 80283a8:	f04f 0c0a 	mov.w	ip, #10
 80283ac:	4620      	mov	r0, r4
 80283ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80283b2:	3a30      	subs	r2, #48	; 0x30
 80283b4:	2a09      	cmp	r2, #9
 80283b6:	d903      	bls.n	80283c0 <_svfiprintf_r+0x1a8>
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	d0c5      	beq.n	8028348 <_svfiprintf_r+0x130>
 80283bc:	9105      	str	r1, [sp, #20]
 80283be:	e7c3      	b.n	8028348 <_svfiprintf_r+0x130>
 80283c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80283c4:	4604      	mov	r4, r0
 80283c6:	2301      	movs	r3, #1
 80283c8:	e7f0      	b.n	80283ac <_svfiprintf_r+0x194>
 80283ca:	ab03      	add	r3, sp, #12
 80283cc:	9300      	str	r3, [sp, #0]
 80283ce:	462a      	mov	r2, r5
 80283d0:	4b0f      	ldr	r3, [pc, #60]	; (8028410 <_svfiprintf_r+0x1f8>)
 80283d2:	a904      	add	r1, sp, #16
 80283d4:	4638      	mov	r0, r7
 80283d6:	f7fc fa47 	bl	8024868 <_printf_float>
 80283da:	1c42      	adds	r2, r0, #1
 80283dc:	4606      	mov	r6, r0
 80283de:	d1d6      	bne.n	802838e <_svfiprintf_r+0x176>
 80283e0:	89ab      	ldrh	r3, [r5, #12]
 80283e2:	065b      	lsls	r3, r3, #25
 80283e4:	f53f af2c 	bmi.w	8028240 <_svfiprintf_r+0x28>
 80283e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80283ea:	b01d      	add	sp, #116	; 0x74
 80283ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283f0:	ab03      	add	r3, sp, #12
 80283f2:	9300      	str	r3, [sp, #0]
 80283f4:	462a      	mov	r2, r5
 80283f6:	4b06      	ldr	r3, [pc, #24]	; (8028410 <_svfiprintf_r+0x1f8>)
 80283f8:	a904      	add	r1, sp, #16
 80283fa:	4638      	mov	r0, r7
 80283fc:	f7fc fcc0 	bl	8024d80 <_printf_i>
 8028400:	e7eb      	b.n	80283da <_svfiprintf_r+0x1c2>
 8028402:	bf00      	nop
 8028404:	08045db4 	.word	0x08045db4
 8028408:	08045dbe 	.word	0x08045dbe
 802840c:	08024869 	.word	0x08024869
 8028410:	08028163 	.word	0x08028163
 8028414:	08045dba 	.word	0x08045dba

08028418 <_sungetc_r>:
 8028418:	b538      	push	{r3, r4, r5, lr}
 802841a:	1c4b      	adds	r3, r1, #1
 802841c:	4614      	mov	r4, r2
 802841e:	d103      	bne.n	8028428 <_sungetc_r+0x10>
 8028420:	f04f 35ff 	mov.w	r5, #4294967295
 8028424:	4628      	mov	r0, r5
 8028426:	bd38      	pop	{r3, r4, r5, pc}
 8028428:	8993      	ldrh	r3, [r2, #12]
 802842a:	f023 0320 	bic.w	r3, r3, #32
 802842e:	8193      	strh	r3, [r2, #12]
 8028430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028432:	6852      	ldr	r2, [r2, #4]
 8028434:	b2cd      	uxtb	r5, r1
 8028436:	b18b      	cbz	r3, 802845c <_sungetc_r+0x44>
 8028438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802843a:	4293      	cmp	r3, r2
 802843c:	dd08      	ble.n	8028450 <_sungetc_r+0x38>
 802843e:	6823      	ldr	r3, [r4, #0]
 8028440:	1e5a      	subs	r2, r3, #1
 8028442:	6022      	str	r2, [r4, #0]
 8028444:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028448:	6863      	ldr	r3, [r4, #4]
 802844a:	3301      	adds	r3, #1
 802844c:	6063      	str	r3, [r4, #4]
 802844e:	e7e9      	b.n	8028424 <_sungetc_r+0xc>
 8028450:	4621      	mov	r1, r4
 8028452:	f000 fd1b 	bl	8028e8c <__submore>
 8028456:	2800      	cmp	r0, #0
 8028458:	d0f1      	beq.n	802843e <_sungetc_r+0x26>
 802845a:	e7e1      	b.n	8028420 <_sungetc_r+0x8>
 802845c:	6921      	ldr	r1, [r4, #16]
 802845e:	6823      	ldr	r3, [r4, #0]
 8028460:	b151      	cbz	r1, 8028478 <_sungetc_r+0x60>
 8028462:	4299      	cmp	r1, r3
 8028464:	d208      	bcs.n	8028478 <_sungetc_r+0x60>
 8028466:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802846a:	42a9      	cmp	r1, r5
 802846c:	d104      	bne.n	8028478 <_sungetc_r+0x60>
 802846e:	3b01      	subs	r3, #1
 8028470:	3201      	adds	r2, #1
 8028472:	6023      	str	r3, [r4, #0]
 8028474:	6062      	str	r2, [r4, #4]
 8028476:	e7d5      	b.n	8028424 <_sungetc_r+0xc>
 8028478:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802847c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028480:	6363      	str	r3, [r4, #52]	; 0x34
 8028482:	2303      	movs	r3, #3
 8028484:	63a3      	str	r3, [r4, #56]	; 0x38
 8028486:	4623      	mov	r3, r4
 8028488:	f803 5f46 	strb.w	r5, [r3, #70]!
 802848c:	6023      	str	r3, [r4, #0]
 802848e:	2301      	movs	r3, #1
 8028490:	e7dc      	b.n	802844c <_sungetc_r+0x34>

08028492 <__ssrefill_r>:
 8028492:	b510      	push	{r4, lr}
 8028494:	460c      	mov	r4, r1
 8028496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028498:	b169      	cbz	r1, 80284b6 <__ssrefill_r+0x24>
 802849a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802849e:	4299      	cmp	r1, r3
 80284a0:	d001      	beq.n	80284a6 <__ssrefill_r+0x14>
 80284a2:	f7fc f871 	bl	8024588 <_free_r>
 80284a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80284a8:	6063      	str	r3, [r4, #4]
 80284aa:	2000      	movs	r0, #0
 80284ac:	6360      	str	r0, [r4, #52]	; 0x34
 80284ae:	b113      	cbz	r3, 80284b6 <__ssrefill_r+0x24>
 80284b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80284b2:	6023      	str	r3, [r4, #0]
 80284b4:	bd10      	pop	{r4, pc}
 80284b6:	6923      	ldr	r3, [r4, #16]
 80284b8:	6023      	str	r3, [r4, #0]
 80284ba:	2300      	movs	r3, #0
 80284bc:	6063      	str	r3, [r4, #4]
 80284be:	89a3      	ldrh	r3, [r4, #12]
 80284c0:	f043 0320 	orr.w	r3, r3, #32
 80284c4:	81a3      	strh	r3, [r4, #12]
 80284c6:	f04f 30ff 	mov.w	r0, #4294967295
 80284ca:	e7f3      	b.n	80284b4 <__ssrefill_r+0x22>

080284cc <__ssvfiscanf_r>:
 80284cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284d0:	460c      	mov	r4, r1
 80284d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80284d6:	2100      	movs	r1, #0
 80284d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80284dc:	49a6      	ldr	r1, [pc, #664]	; (8028778 <__ssvfiscanf_r+0x2ac>)
 80284de:	91a0      	str	r1, [sp, #640]	; 0x280
 80284e0:	f10d 0804 	add.w	r8, sp, #4
 80284e4:	49a5      	ldr	r1, [pc, #660]	; (802877c <__ssvfiscanf_r+0x2b0>)
 80284e6:	4fa6      	ldr	r7, [pc, #664]	; (8028780 <__ssvfiscanf_r+0x2b4>)
 80284e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8028784 <__ssvfiscanf_r+0x2b8>
 80284ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80284f0:	4606      	mov	r6, r0
 80284f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80284f4:	9300      	str	r3, [sp, #0]
 80284f6:	7813      	ldrb	r3, [r2, #0]
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	f000 815a 	beq.w	80287b2 <__ssvfiscanf_r+0x2e6>
 80284fe:	5dd9      	ldrb	r1, [r3, r7]
 8028500:	f011 0108 	ands.w	r1, r1, #8
 8028504:	f102 0501 	add.w	r5, r2, #1
 8028508:	d019      	beq.n	802853e <__ssvfiscanf_r+0x72>
 802850a:	6863      	ldr	r3, [r4, #4]
 802850c:	2b00      	cmp	r3, #0
 802850e:	dd0f      	ble.n	8028530 <__ssvfiscanf_r+0x64>
 8028510:	6823      	ldr	r3, [r4, #0]
 8028512:	781a      	ldrb	r2, [r3, #0]
 8028514:	5cba      	ldrb	r2, [r7, r2]
 8028516:	0712      	lsls	r2, r2, #28
 8028518:	d401      	bmi.n	802851e <__ssvfiscanf_r+0x52>
 802851a:	462a      	mov	r2, r5
 802851c:	e7eb      	b.n	80284f6 <__ssvfiscanf_r+0x2a>
 802851e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028520:	3201      	adds	r2, #1
 8028522:	9245      	str	r2, [sp, #276]	; 0x114
 8028524:	6862      	ldr	r2, [r4, #4]
 8028526:	3301      	adds	r3, #1
 8028528:	3a01      	subs	r2, #1
 802852a:	6062      	str	r2, [r4, #4]
 802852c:	6023      	str	r3, [r4, #0]
 802852e:	e7ec      	b.n	802850a <__ssvfiscanf_r+0x3e>
 8028530:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028532:	4621      	mov	r1, r4
 8028534:	4630      	mov	r0, r6
 8028536:	4798      	blx	r3
 8028538:	2800      	cmp	r0, #0
 802853a:	d0e9      	beq.n	8028510 <__ssvfiscanf_r+0x44>
 802853c:	e7ed      	b.n	802851a <__ssvfiscanf_r+0x4e>
 802853e:	2b25      	cmp	r3, #37	; 0x25
 8028540:	d012      	beq.n	8028568 <__ssvfiscanf_r+0x9c>
 8028542:	469a      	mov	sl, r3
 8028544:	6863      	ldr	r3, [r4, #4]
 8028546:	2b00      	cmp	r3, #0
 8028548:	f340 8091 	ble.w	802866e <__ssvfiscanf_r+0x1a2>
 802854c:	6822      	ldr	r2, [r4, #0]
 802854e:	7813      	ldrb	r3, [r2, #0]
 8028550:	4553      	cmp	r3, sl
 8028552:	f040 812e 	bne.w	80287b2 <__ssvfiscanf_r+0x2e6>
 8028556:	6863      	ldr	r3, [r4, #4]
 8028558:	3b01      	subs	r3, #1
 802855a:	6063      	str	r3, [r4, #4]
 802855c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802855e:	3201      	adds	r2, #1
 8028560:	3301      	adds	r3, #1
 8028562:	6022      	str	r2, [r4, #0]
 8028564:	9345      	str	r3, [sp, #276]	; 0x114
 8028566:	e7d8      	b.n	802851a <__ssvfiscanf_r+0x4e>
 8028568:	9141      	str	r1, [sp, #260]	; 0x104
 802856a:	9143      	str	r1, [sp, #268]	; 0x10c
 802856c:	7853      	ldrb	r3, [r2, #1]
 802856e:	2b2a      	cmp	r3, #42	; 0x2a
 8028570:	bf02      	ittt	eq
 8028572:	2310      	moveq	r3, #16
 8028574:	1c95      	addeq	r5, r2, #2
 8028576:	9341      	streq	r3, [sp, #260]	; 0x104
 8028578:	220a      	movs	r2, #10
 802857a:	46aa      	mov	sl, r5
 802857c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8028580:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8028584:	2b09      	cmp	r3, #9
 8028586:	d91d      	bls.n	80285c4 <__ssvfiscanf_r+0xf8>
 8028588:	487e      	ldr	r0, [pc, #504]	; (8028784 <__ssvfiscanf_r+0x2b8>)
 802858a:	2203      	movs	r2, #3
 802858c:	f7d7 fe70 	bl	8000270 <memchr>
 8028590:	b140      	cbz	r0, 80285a4 <__ssvfiscanf_r+0xd8>
 8028592:	2301      	movs	r3, #1
 8028594:	eba0 0009 	sub.w	r0, r0, r9
 8028598:	fa03 f000 	lsl.w	r0, r3, r0
 802859c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802859e:	4318      	orrs	r0, r3
 80285a0:	9041      	str	r0, [sp, #260]	; 0x104
 80285a2:	4655      	mov	r5, sl
 80285a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80285a8:	2b78      	cmp	r3, #120	; 0x78
 80285aa:	d806      	bhi.n	80285ba <__ssvfiscanf_r+0xee>
 80285ac:	2b57      	cmp	r3, #87	; 0x57
 80285ae:	d810      	bhi.n	80285d2 <__ssvfiscanf_r+0x106>
 80285b0:	2b25      	cmp	r3, #37	; 0x25
 80285b2:	d0c6      	beq.n	8028542 <__ssvfiscanf_r+0x76>
 80285b4:	d856      	bhi.n	8028664 <__ssvfiscanf_r+0x198>
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	d064      	beq.n	8028684 <__ssvfiscanf_r+0x1b8>
 80285ba:	2303      	movs	r3, #3
 80285bc:	9347      	str	r3, [sp, #284]	; 0x11c
 80285be:	230a      	movs	r3, #10
 80285c0:	9342      	str	r3, [sp, #264]	; 0x108
 80285c2:	e071      	b.n	80286a8 <__ssvfiscanf_r+0x1dc>
 80285c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80285c6:	fb02 1103 	mla	r1, r2, r3, r1
 80285ca:	3930      	subs	r1, #48	; 0x30
 80285cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80285ce:	4655      	mov	r5, sl
 80285d0:	e7d3      	b.n	802857a <__ssvfiscanf_r+0xae>
 80285d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80285d6:	2a20      	cmp	r2, #32
 80285d8:	d8ef      	bhi.n	80285ba <__ssvfiscanf_r+0xee>
 80285da:	a101      	add	r1, pc, #4	; (adr r1, 80285e0 <__ssvfiscanf_r+0x114>)
 80285dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80285e0:	08028693 	.word	0x08028693
 80285e4:	080285bb 	.word	0x080285bb
 80285e8:	080285bb 	.word	0x080285bb
 80285ec:	080286f1 	.word	0x080286f1
 80285f0:	080285bb 	.word	0x080285bb
 80285f4:	080285bb 	.word	0x080285bb
 80285f8:	080285bb 	.word	0x080285bb
 80285fc:	080285bb 	.word	0x080285bb
 8028600:	080285bb 	.word	0x080285bb
 8028604:	080285bb 	.word	0x080285bb
 8028608:	080285bb 	.word	0x080285bb
 802860c:	08028707 	.word	0x08028707
 8028610:	080286dd 	.word	0x080286dd
 8028614:	0802866b 	.word	0x0802866b
 8028618:	0802866b 	.word	0x0802866b
 802861c:	0802866b 	.word	0x0802866b
 8028620:	080285bb 	.word	0x080285bb
 8028624:	080286e1 	.word	0x080286e1
 8028628:	080285bb 	.word	0x080285bb
 802862c:	080285bb 	.word	0x080285bb
 8028630:	080285bb 	.word	0x080285bb
 8028634:	080285bb 	.word	0x080285bb
 8028638:	08028717 	.word	0x08028717
 802863c:	080286e9 	.word	0x080286e9
 8028640:	0802868b 	.word	0x0802868b
 8028644:	080285bb 	.word	0x080285bb
 8028648:	080285bb 	.word	0x080285bb
 802864c:	08028713 	.word	0x08028713
 8028650:	080285bb 	.word	0x080285bb
 8028654:	080286dd 	.word	0x080286dd
 8028658:	080285bb 	.word	0x080285bb
 802865c:	080285bb 	.word	0x080285bb
 8028660:	08028693 	.word	0x08028693
 8028664:	3b45      	subs	r3, #69	; 0x45
 8028666:	2b02      	cmp	r3, #2
 8028668:	d8a7      	bhi.n	80285ba <__ssvfiscanf_r+0xee>
 802866a:	2305      	movs	r3, #5
 802866c:	e01b      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 802866e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028670:	4621      	mov	r1, r4
 8028672:	4630      	mov	r0, r6
 8028674:	4798      	blx	r3
 8028676:	2800      	cmp	r0, #0
 8028678:	f43f af68 	beq.w	802854c <__ssvfiscanf_r+0x80>
 802867c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802867e:	2800      	cmp	r0, #0
 8028680:	f040 808d 	bne.w	802879e <__ssvfiscanf_r+0x2d2>
 8028684:	f04f 30ff 	mov.w	r0, #4294967295
 8028688:	e08f      	b.n	80287aa <__ssvfiscanf_r+0x2de>
 802868a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802868c:	f042 0220 	orr.w	r2, r2, #32
 8028690:	9241      	str	r2, [sp, #260]	; 0x104
 8028692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028698:	9241      	str	r2, [sp, #260]	; 0x104
 802869a:	2210      	movs	r2, #16
 802869c:	2b6f      	cmp	r3, #111	; 0x6f
 802869e:	9242      	str	r2, [sp, #264]	; 0x108
 80286a0:	bf34      	ite	cc
 80286a2:	2303      	movcc	r3, #3
 80286a4:	2304      	movcs	r3, #4
 80286a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80286a8:	6863      	ldr	r3, [r4, #4]
 80286aa:	2b00      	cmp	r3, #0
 80286ac:	dd42      	ble.n	8028734 <__ssvfiscanf_r+0x268>
 80286ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80286b0:	0659      	lsls	r1, r3, #25
 80286b2:	d404      	bmi.n	80286be <__ssvfiscanf_r+0x1f2>
 80286b4:	6823      	ldr	r3, [r4, #0]
 80286b6:	781a      	ldrb	r2, [r3, #0]
 80286b8:	5cba      	ldrb	r2, [r7, r2]
 80286ba:	0712      	lsls	r2, r2, #28
 80286bc:	d441      	bmi.n	8028742 <__ssvfiscanf_r+0x276>
 80286be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80286c0:	2b02      	cmp	r3, #2
 80286c2:	dc50      	bgt.n	8028766 <__ssvfiscanf_r+0x29a>
 80286c4:	466b      	mov	r3, sp
 80286c6:	4622      	mov	r2, r4
 80286c8:	a941      	add	r1, sp, #260	; 0x104
 80286ca:	4630      	mov	r0, r6
 80286cc:	f000 f9d0 	bl	8028a70 <_scanf_chars>
 80286d0:	2801      	cmp	r0, #1
 80286d2:	d06e      	beq.n	80287b2 <__ssvfiscanf_r+0x2e6>
 80286d4:	2802      	cmp	r0, #2
 80286d6:	f47f af20 	bne.w	802851a <__ssvfiscanf_r+0x4e>
 80286da:	e7cf      	b.n	802867c <__ssvfiscanf_r+0x1b0>
 80286dc:	220a      	movs	r2, #10
 80286de:	e7dd      	b.n	802869c <__ssvfiscanf_r+0x1d0>
 80286e0:	2300      	movs	r3, #0
 80286e2:	9342      	str	r3, [sp, #264]	; 0x108
 80286e4:	2303      	movs	r3, #3
 80286e6:	e7de      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 80286e8:	2308      	movs	r3, #8
 80286ea:	9342      	str	r3, [sp, #264]	; 0x108
 80286ec:	2304      	movs	r3, #4
 80286ee:	e7da      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 80286f0:	4629      	mov	r1, r5
 80286f2:	4640      	mov	r0, r8
 80286f4:	f000 fb92 	bl	8028e1c <__sccl>
 80286f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80286fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80286fe:	9341      	str	r3, [sp, #260]	; 0x104
 8028700:	4605      	mov	r5, r0
 8028702:	2301      	movs	r3, #1
 8028704:	e7cf      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 8028706:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802870c:	9341      	str	r3, [sp, #260]	; 0x104
 802870e:	2300      	movs	r3, #0
 8028710:	e7c9      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 8028712:	2302      	movs	r3, #2
 8028714:	e7c7      	b.n	80286a6 <__ssvfiscanf_r+0x1da>
 8028716:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028718:	06c3      	lsls	r3, r0, #27
 802871a:	f53f aefe 	bmi.w	802851a <__ssvfiscanf_r+0x4e>
 802871e:	9b00      	ldr	r3, [sp, #0]
 8028720:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028722:	1d19      	adds	r1, r3, #4
 8028724:	9100      	str	r1, [sp, #0]
 8028726:	681b      	ldr	r3, [r3, #0]
 8028728:	f010 0f01 	tst.w	r0, #1
 802872c:	bf14      	ite	ne
 802872e:	801a      	strhne	r2, [r3, #0]
 8028730:	601a      	streq	r2, [r3, #0]
 8028732:	e6f2      	b.n	802851a <__ssvfiscanf_r+0x4e>
 8028734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028736:	4621      	mov	r1, r4
 8028738:	4630      	mov	r0, r6
 802873a:	4798      	blx	r3
 802873c:	2800      	cmp	r0, #0
 802873e:	d0b6      	beq.n	80286ae <__ssvfiscanf_r+0x1e2>
 8028740:	e79c      	b.n	802867c <__ssvfiscanf_r+0x1b0>
 8028742:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028744:	3201      	adds	r2, #1
 8028746:	9245      	str	r2, [sp, #276]	; 0x114
 8028748:	6862      	ldr	r2, [r4, #4]
 802874a:	3a01      	subs	r2, #1
 802874c:	2a00      	cmp	r2, #0
 802874e:	6062      	str	r2, [r4, #4]
 8028750:	dd02      	ble.n	8028758 <__ssvfiscanf_r+0x28c>
 8028752:	3301      	adds	r3, #1
 8028754:	6023      	str	r3, [r4, #0]
 8028756:	e7ad      	b.n	80286b4 <__ssvfiscanf_r+0x1e8>
 8028758:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802875a:	4621      	mov	r1, r4
 802875c:	4630      	mov	r0, r6
 802875e:	4798      	blx	r3
 8028760:	2800      	cmp	r0, #0
 8028762:	d0a7      	beq.n	80286b4 <__ssvfiscanf_r+0x1e8>
 8028764:	e78a      	b.n	802867c <__ssvfiscanf_r+0x1b0>
 8028766:	2b04      	cmp	r3, #4
 8028768:	dc0e      	bgt.n	8028788 <__ssvfiscanf_r+0x2bc>
 802876a:	466b      	mov	r3, sp
 802876c:	4622      	mov	r2, r4
 802876e:	a941      	add	r1, sp, #260	; 0x104
 8028770:	4630      	mov	r0, r6
 8028772:	f000 f9d7 	bl	8028b24 <_scanf_i>
 8028776:	e7ab      	b.n	80286d0 <__ssvfiscanf_r+0x204>
 8028778:	08028419 	.word	0x08028419
 802877c:	08028493 	.word	0x08028493
 8028780:	08045505 	.word	0x08045505
 8028784:	08045dba 	.word	0x08045dba
 8028788:	4b0b      	ldr	r3, [pc, #44]	; (80287b8 <__ssvfiscanf_r+0x2ec>)
 802878a:	2b00      	cmp	r3, #0
 802878c:	f43f aec5 	beq.w	802851a <__ssvfiscanf_r+0x4e>
 8028790:	466b      	mov	r3, sp
 8028792:	4622      	mov	r2, r4
 8028794:	a941      	add	r1, sp, #260	; 0x104
 8028796:	4630      	mov	r0, r6
 8028798:	f3af 8000 	nop.w
 802879c:	e798      	b.n	80286d0 <__ssvfiscanf_r+0x204>
 802879e:	89a3      	ldrh	r3, [r4, #12]
 80287a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80287a4:	bf18      	it	ne
 80287a6:	f04f 30ff 	movne.w	r0, #4294967295
 80287aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80287ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80287b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80287b4:	e7f9      	b.n	80287aa <__ssvfiscanf_r+0x2de>
 80287b6:	bf00      	nop
 80287b8:	00000000 	.word	0x00000000

080287bc <__sfputc_r>:
 80287bc:	6893      	ldr	r3, [r2, #8]
 80287be:	3b01      	subs	r3, #1
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	b410      	push	{r4}
 80287c4:	6093      	str	r3, [r2, #8]
 80287c6:	da08      	bge.n	80287da <__sfputc_r+0x1e>
 80287c8:	6994      	ldr	r4, [r2, #24]
 80287ca:	42a3      	cmp	r3, r4
 80287cc:	db01      	blt.n	80287d2 <__sfputc_r+0x16>
 80287ce:	290a      	cmp	r1, #10
 80287d0:	d103      	bne.n	80287da <__sfputc_r+0x1e>
 80287d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287d6:	f7fd bf45 	b.w	8026664 <__swbuf_r>
 80287da:	6813      	ldr	r3, [r2, #0]
 80287dc:	1c58      	adds	r0, r3, #1
 80287de:	6010      	str	r0, [r2, #0]
 80287e0:	7019      	strb	r1, [r3, #0]
 80287e2:	4608      	mov	r0, r1
 80287e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287e8:	4770      	bx	lr

080287ea <__sfputs_r>:
 80287ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287ec:	4606      	mov	r6, r0
 80287ee:	460f      	mov	r7, r1
 80287f0:	4614      	mov	r4, r2
 80287f2:	18d5      	adds	r5, r2, r3
 80287f4:	42ac      	cmp	r4, r5
 80287f6:	d101      	bne.n	80287fc <__sfputs_r+0x12>
 80287f8:	2000      	movs	r0, #0
 80287fa:	e007      	b.n	802880c <__sfputs_r+0x22>
 80287fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028800:	463a      	mov	r2, r7
 8028802:	4630      	mov	r0, r6
 8028804:	f7ff ffda 	bl	80287bc <__sfputc_r>
 8028808:	1c43      	adds	r3, r0, #1
 802880a:	d1f3      	bne.n	80287f4 <__sfputs_r+0xa>
 802880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802880e:	Address 0x000000000802880e is out of bounds.


08028810 <_vfiprintf_r>:
 8028810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028814:	460d      	mov	r5, r1
 8028816:	b09d      	sub	sp, #116	; 0x74
 8028818:	4614      	mov	r4, r2
 802881a:	4698      	mov	r8, r3
 802881c:	4606      	mov	r6, r0
 802881e:	b118      	cbz	r0, 8028828 <_vfiprintf_r+0x18>
 8028820:	6983      	ldr	r3, [r0, #24]
 8028822:	b90b      	cbnz	r3, 8028828 <_vfiprintf_r+0x18>
 8028824:	f7fb fa14 	bl	8023c50 <__sinit>
 8028828:	4b89      	ldr	r3, [pc, #548]	; (8028a50 <_vfiprintf_r+0x240>)
 802882a:	429d      	cmp	r5, r3
 802882c:	d11b      	bne.n	8028866 <_vfiprintf_r+0x56>
 802882e:	6875      	ldr	r5, [r6, #4]
 8028830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028832:	07d9      	lsls	r1, r3, #31
 8028834:	d405      	bmi.n	8028842 <_vfiprintf_r+0x32>
 8028836:	89ab      	ldrh	r3, [r5, #12]
 8028838:	059a      	lsls	r2, r3, #22
 802883a:	d402      	bmi.n	8028842 <_vfiprintf_r+0x32>
 802883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802883e:	f7fb fbdd 	bl	8023ffc <__retarget_lock_acquire_recursive>
 8028842:	89ab      	ldrh	r3, [r5, #12]
 8028844:	071b      	lsls	r3, r3, #28
 8028846:	d501      	bpl.n	802884c <_vfiprintf_r+0x3c>
 8028848:	692b      	ldr	r3, [r5, #16]
 802884a:	b9eb      	cbnz	r3, 8028888 <_vfiprintf_r+0x78>
 802884c:	4629      	mov	r1, r5
 802884e:	4630      	mov	r0, r6
 8028850:	f7fd ff6c 	bl	802672c <__swsetup_r>
 8028854:	b1c0      	cbz	r0, 8028888 <_vfiprintf_r+0x78>
 8028856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028858:	07dc      	lsls	r4, r3, #31
 802885a:	d50e      	bpl.n	802887a <_vfiprintf_r+0x6a>
 802885c:	f04f 30ff 	mov.w	r0, #4294967295
 8028860:	b01d      	add	sp, #116	; 0x74
 8028862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028866:	4b7b      	ldr	r3, [pc, #492]	; (8028a54 <_vfiprintf_r+0x244>)
 8028868:	429d      	cmp	r5, r3
 802886a:	d101      	bne.n	8028870 <_vfiprintf_r+0x60>
 802886c:	68b5      	ldr	r5, [r6, #8]
 802886e:	e7df      	b.n	8028830 <_vfiprintf_r+0x20>
 8028870:	4b79      	ldr	r3, [pc, #484]	; (8028a58 <_vfiprintf_r+0x248>)
 8028872:	429d      	cmp	r5, r3
 8028874:	bf08      	it	eq
 8028876:	68f5      	ldreq	r5, [r6, #12]
 8028878:	e7da      	b.n	8028830 <_vfiprintf_r+0x20>
 802887a:	89ab      	ldrh	r3, [r5, #12]
 802887c:	0598      	lsls	r0, r3, #22
 802887e:	d4ed      	bmi.n	802885c <_vfiprintf_r+0x4c>
 8028880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028882:	f7fb fbbd 	bl	8024000 <__retarget_lock_release_recursive>
 8028886:	e7e9      	b.n	802885c <_vfiprintf_r+0x4c>
 8028888:	2300      	movs	r3, #0
 802888a:	9309      	str	r3, [sp, #36]	; 0x24
 802888c:	2320      	movs	r3, #32
 802888e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028892:	f8cd 800c 	str.w	r8, [sp, #12]
 8028896:	2330      	movs	r3, #48	; 0x30
 8028898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028a5c <_vfiprintf_r+0x24c>
 802889c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80288a0:	f04f 0901 	mov.w	r9, #1
 80288a4:	4623      	mov	r3, r4
 80288a6:	469a      	mov	sl, r3
 80288a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80288ac:	b10a      	cbz	r2, 80288b2 <_vfiprintf_r+0xa2>
 80288ae:	2a25      	cmp	r2, #37	; 0x25
 80288b0:	d1f9      	bne.n	80288a6 <_vfiprintf_r+0x96>
 80288b2:	ebba 0b04 	subs.w	fp, sl, r4
 80288b6:	d00b      	beq.n	80288d0 <_vfiprintf_r+0xc0>
 80288b8:	465b      	mov	r3, fp
 80288ba:	4622      	mov	r2, r4
 80288bc:	4629      	mov	r1, r5
 80288be:	4630      	mov	r0, r6
 80288c0:	f7ff ff93 	bl	80287ea <__sfputs_r>
 80288c4:	3001      	adds	r0, #1
 80288c6:	f000 80aa 	beq.w	8028a1e <_vfiprintf_r+0x20e>
 80288ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80288cc:	445a      	add	r2, fp
 80288ce:	9209      	str	r2, [sp, #36]	; 0x24
 80288d0:	f89a 3000 	ldrb.w	r3, [sl]
 80288d4:	2b00      	cmp	r3, #0
 80288d6:	f000 80a2 	beq.w	8028a1e <_vfiprintf_r+0x20e>
 80288da:	2300      	movs	r3, #0
 80288dc:	f04f 32ff 	mov.w	r2, #4294967295
 80288e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80288e4:	f10a 0a01 	add.w	sl, sl, #1
 80288e8:	9304      	str	r3, [sp, #16]
 80288ea:	9307      	str	r3, [sp, #28]
 80288ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80288f0:	931a      	str	r3, [sp, #104]	; 0x68
 80288f2:	4654      	mov	r4, sl
 80288f4:	2205      	movs	r2, #5
 80288f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80288fa:	4858      	ldr	r0, [pc, #352]	; (8028a5c <_vfiprintf_r+0x24c>)
 80288fc:	f7d7 fcb8 	bl	8000270 <memchr>
 8028900:	9a04      	ldr	r2, [sp, #16]
 8028902:	b9d8      	cbnz	r0, 802893c <_vfiprintf_r+0x12c>
 8028904:	06d1      	lsls	r1, r2, #27
 8028906:	bf44      	itt	mi
 8028908:	2320      	movmi	r3, #32
 802890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802890e:	0713      	lsls	r3, r2, #28
 8028910:	bf44      	itt	mi
 8028912:	232b      	movmi	r3, #43	; 0x2b
 8028914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028918:	f89a 3000 	ldrb.w	r3, [sl]
 802891c:	2b2a      	cmp	r3, #42	; 0x2a
 802891e:	d015      	beq.n	802894c <_vfiprintf_r+0x13c>
 8028920:	9a07      	ldr	r2, [sp, #28]
 8028922:	4654      	mov	r4, sl
 8028924:	2000      	movs	r0, #0
 8028926:	f04f 0c0a 	mov.w	ip, #10
 802892a:	4621      	mov	r1, r4
 802892c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028930:	3b30      	subs	r3, #48	; 0x30
 8028932:	2b09      	cmp	r3, #9
 8028934:	d94e      	bls.n	80289d4 <_vfiprintf_r+0x1c4>
 8028936:	b1b0      	cbz	r0, 8028966 <_vfiprintf_r+0x156>
 8028938:	9207      	str	r2, [sp, #28]
 802893a:	e014      	b.n	8028966 <_vfiprintf_r+0x156>
 802893c:	eba0 0308 	sub.w	r3, r0, r8
 8028940:	fa09 f303 	lsl.w	r3, r9, r3
 8028944:	4313      	orrs	r3, r2
 8028946:	9304      	str	r3, [sp, #16]
 8028948:	46a2      	mov	sl, r4
 802894a:	e7d2      	b.n	80288f2 <_vfiprintf_r+0xe2>
 802894c:	9b03      	ldr	r3, [sp, #12]
 802894e:	1d19      	adds	r1, r3, #4
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	9103      	str	r1, [sp, #12]
 8028954:	2b00      	cmp	r3, #0
 8028956:	bfbb      	ittet	lt
 8028958:	425b      	neglt	r3, r3
 802895a:	f042 0202 	orrlt.w	r2, r2, #2
 802895e:	9307      	strge	r3, [sp, #28]
 8028960:	9307      	strlt	r3, [sp, #28]
 8028962:	bfb8      	it	lt
 8028964:	9204      	strlt	r2, [sp, #16]
 8028966:	7823      	ldrb	r3, [r4, #0]
 8028968:	2b2e      	cmp	r3, #46	; 0x2e
 802896a:	d10c      	bne.n	8028986 <_vfiprintf_r+0x176>
 802896c:	7863      	ldrb	r3, [r4, #1]
 802896e:	2b2a      	cmp	r3, #42	; 0x2a
 8028970:	d135      	bne.n	80289de <_vfiprintf_r+0x1ce>
 8028972:	9b03      	ldr	r3, [sp, #12]
 8028974:	1d1a      	adds	r2, r3, #4
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	9203      	str	r2, [sp, #12]
 802897a:	2b00      	cmp	r3, #0
 802897c:	bfb8      	it	lt
 802897e:	f04f 33ff 	movlt.w	r3, #4294967295
 8028982:	3402      	adds	r4, #2
 8028984:	9305      	str	r3, [sp, #20]
 8028986:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028a6c <_vfiprintf_r+0x25c>
 802898a:	7821      	ldrb	r1, [r4, #0]
 802898c:	2203      	movs	r2, #3
 802898e:	4650      	mov	r0, sl
 8028990:	f7d7 fc6e 	bl	8000270 <memchr>
 8028994:	b140      	cbz	r0, 80289a8 <_vfiprintf_r+0x198>
 8028996:	2340      	movs	r3, #64	; 0x40
 8028998:	eba0 000a 	sub.w	r0, r0, sl
 802899c:	fa03 f000 	lsl.w	r0, r3, r0
 80289a0:	9b04      	ldr	r3, [sp, #16]
 80289a2:	4303      	orrs	r3, r0
 80289a4:	3401      	adds	r4, #1
 80289a6:	9304      	str	r3, [sp, #16]
 80289a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80289ac:	482c      	ldr	r0, [pc, #176]	; (8028a60 <_vfiprintf_r+0x250>)
 80289ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80289b2:	2206      	movs	r2, #6
 80289b4:	f7d7 fc5c 	bl	8000270 <memchr>
 80289b8:	2800      	cmp	r0, #0
 80289ba:	d03f      	beq.n	8028a3c <_vfiprintf_r+0x22c>
 80289bc:	4b29      	ldr	r3, [pc, #164]	; (8028a64 <_vfiprintf_r+0x254>)
 80289be:	bb1b      	cbnz	r3, 8028a08 <_vfiprintf_r+0x1f8>
 80289c0:	9b03      	ldr	r3, [sp, #12]
 80289c2:	3307      	adds	r3, #7
 80289c4:	f023 0307 	bic.w	r3, r3, #7
 80289c8:	3308      	adds	r3, #8
 80289ca:	9303      	str	r3, [sp, #12]
 80289cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80289ce:	443b      	add	r3, r7
 80289d0:	9309      	str	r3, [sp, #36]	; 0x24
 80289d2:	e767      	b.n	80288a4 <_vfiprintf_r+0x94>
 80289d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80289d8:	460c      	mov	r4, r1
 80289da:	2001      	movs	r0, #1
 80289dc:	e7a5      	b.n	802892a <_vfiprintf_r+0x11a>
 80289de:	2300      	movs	r3, #0
 80289e0:	3401      	adds	r4, #1
 80289e2:	9305      	str	r3, [sp, #20]
 80289e4:	4619      	mov	r1, r3
 80289e6:	f04f 0c0a 	mov.w	ip, #10
 80289ea:	4620      	mov	r0, r4
 80289ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80289f0:	3a30      	subs	r2, #48	; 0x30
 80289f2:	2a09      	cmp	r2, #9
 80289f4:	d903      	bls.n	80289fe <_vfiprintf_r+0x1ee>
 80289f6:	2b00      	cmp	r3, #0
 80289f8:	d0c5      	beq.n	8028986 <_vfiprintf_r+0x176>
 80289fa:	9105      	str	r1, [sp, #20]
 80289fc:	e7c3      	b.n	8028986 <_vfiprintf_r+0x176>
 80289fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8028a02:	4604      	mov	r4, r0
 8028a04:	2301      	movs	r3, #1
 8028a06:	e7f0      	b.n	80289ea <_vfiprintf_r+0x1da>
 8028a08:	ab03      	add	r3, sp, #12
 8028a0a:	9300      	str	r3, [sp, #0]
 8028a0c:	462a      	mov	r2, r5
 8028a0e:	4b16      	ldr	r3, [pc, #88]	; (8028a68 <_vfiprintf_r+0x258>)
 8028a10:	a904      	add	r1, sp, #16
 8028a12:	4630      	mov	r0, r6
 8028a14:	f7fb ff28 	bl	8024868 <_printf_float>
 8028a18:	4607      	mov	r7, r0
 8028a1a:	1c78      	adds	r0, r7, #1
 8028a1c:	d1d6      	bne.n	80289cc <_vfiprintf_r+0x1bc>
 8028a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028a20:	07d9      	lsls	r1, r3, #31
 8028a22:	d405      	bmi.n	8028a30 <_vfiprintf_r+0x220>
 8028a24:	89ab      	ldrh	r3, [r5, #12]
 8028a26:	059a      	lsls	r2, r3, #22
 8028a28:	d402      	bmi.n	8028a30 <_vfiprintf_r+0x220>
 8028a2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028a2c:	f7fb fae8 	bl	8024000 <__retarget_lock_release_recursive>
 8028a30:	89ab      	ldrh	r3, [r5, #12]
 8028a32:	065b      	lsls	r3, r3, #25
 8028a34:	f53f af12 	bmi.w	802885c <_vfiprintf_r+0x4c>
 8028a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028a3a:	e711      	b.n	8028860 <_vfiprintf_r+0x50>
 8028a3c:	ab03      	add	r3, sp, #12
 8028a3e:	9300      	str	r3, [sp, #0]
 8028a40:	462a      	mov	r2, r5
 8028a42:	4b09      	ldr	r3, [pc, #36]	; (8028a68 <_vfiprintf_r+0x258>)
 8028a44:	a904      	add	r1, sp, #16
 8028a46:	4630      	mov	r0, r6
 8028a48:	f7fc f99a 	bl	8024d80 <_printf_i>
 8028a4c:	e7e4      	b.n	8028a18 <_vfiprintf_r+0x208>
 8028a4e:	bf00      	nop
 8028a50:	08045628 	.word	0x08045628
 8028a54:	08045648 	.word	0x08045648
 8028a58:	08045608 	.word	0x08045608
 8028a5c:	08045db4 	.word	0x08045db4
 8028a60:	08045dbe 	.word	0x08045dbe
 8028a64:	08024869 	.word	0x08024869
 8028a68:	080287eb 	.word	0x080287eb
 8028a6c:	08045dba 	.word	0x08045dba

08028a70 <_scanf_chars>:
 8028a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028a74:	4615      	mov	r5, r2
 8028a76:	688a      	ldr	r2, [r1, #8]
 8028a78:	4680      	mov	r8, r0
 8028a7a:	460c      	mov	r4, r1
 8028a7c:	b932      	cbnz	r2, 8028a8c <_scanf_chars+0x1c>
 8028a7e:	698a      	ldr	r2, [r1, #24]
 8028a80:	2a00      	cmp	r2, #0
 8028a82:	bf0c      	ite	eq
 8028a84:	2201      	moveq	r2, #1
 8028a86:	f04f 32ff 	movne.w	r2, #4294967295
 8028a8a:	608a      	str	r2, [r1, #8]
 8028a8c:	6822      	ldr	r2, [r4, #0]
 8028a8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028b20 <_scanf_chars+0xb0>
 8028a92:	06d1      	lsls	r1, r2, #27
 8028a94:	bf5f      	itttt	pl
 8028a96:	681a      	ldrpl	r2, [r3, #0]
 8028a98:	1d11      	addpl	r1, r2, #4
 8028a9a:	6019      	strpl	r1, [r3, #0]
 8028a9c:	6816      	ldrpl	r6, [r2, #0]
 8028a9e:	2700      	movs	r7, #0
 8028aa0:	69a0      	ldr	r0, [r4, #24]
 8028aa2:	b188      	cbz	r0, 8028ac8 <_scanf_chars+0x58>
 8028aa4:	2801      	cmp	r0, #1
 8028aa6:	d107      	bne.n	8028ab8 <_scanf_chars+0x48>
 8028aa8:	682a      	ldr	r2, [r5, #0]
 8028aaa:	7811      	ldrb	r1, [r2, #0]
 8028aac:	6962      	ldr	r2, [r4, #20]
 8028aae:	5c52      	ldrb	r2, [r2, r1]
 8028ab0:	b952      	cbnz	r2, 8028ac8 <_scanf_chars+0x58>
 8028ab2:	2f00      	cmp	r7, #0
 8028ab4:	d031      	beq.n	8028b1a <_scanf_chars+0xaa>
 8028ab6:	e022      	b.n	8028afe <_scanf_chars+0x8e>
 8028ab8:	2802      	cmp	r0, #2
 8028aba:	d120      	bne.n	8028afe <_scanf_chars+0x8e>
 8028abc:	682b      	ldr	r3, [r5, #0]
 8028abe:	781b      	ldrb	r3, [r3, #0]
 8028ac0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028ac4:	071b      	lsls	r3, r3, #28
 8028ac6:	d41a      	bmi.n	8028afe <_scanf_chars+0x8e>
 8028ac8:	6823      	ldr	r3, [r4, #0]
 8028aca:	06da      	lsls	r2, r3, #27
 8028acc:	bf5e      	ittt	pl
 8028ace:	682b      	ldrpl	r3, [r5, #0]
 8028ad0:	781b      	ldrbpl	r3, [r3, #0]
 8028ad2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028ad6:	682a      	ldr	r2, [r5, #0]
 8028ad8:	686b      	ldr	r3, [r5, #4]
 8028ada:	3201      	adds	r2, #1
 8028adc:	602a      	str	r2, [r5, #0]
 8028ade:	68a2      	ldr	r2, [r4, #8]
 8028ae0:	3b01      	subs	r3, #1
 8028ae2:	3a01      	subs	r2, #1
 8028ae4:	606b      	str	r3, [r5, #4]
 8028ae6:	3701      	adds	r7, #1
 8028ae8:	60a2      	str	r2, [r4, #8]
 8028aea:	b142      	cbz	r2, 8028afe <_scanf_chars+0x8e>
 8028aec:	2b00      	cmp	r3, #0
 8028aee:	dcd7      	bgt.n	8028aa0 <_scanf_chars+0x30>
 8028af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028af4:	4629      	mov	r1, r5
 8028af6:	4640      	mov	r0, r8
 8028af8:	4798      	blx	r3
 8028afa:	2800      	cmp	r0, #0
 8028afc:	d0d0      	beq.n	8028aa0 <_scanf_chars+0x30>
 8028afe:	6823      	ldr	r3, [r4, #0]
 8028b00:	f013 0310 	ands.w	r3, r3, #16
 8028b04:	d105      	bne.n	8028b12 <_scanf_chars+0xa2>
 8028b06:	68e2      	ldr	r2, [r4, #12]
 8028b08:	3201      	adds	r2, #1
 8028b0a:	60e2      	str	r2, [r4, #12]
 8028b0c:	69a2      	ldr	r2, [r4, #24]
 8028b0e:	b102      	cbz	r2, 8028b12 <_scanf_chars+0xa2>
 8028b10:	7033      	strb	r3, [r6, #0]
 8028b12:	6923      	ldr	r3, [r4, #16]
 8028b14:	443b      	add	r3, r7
 8028b16:	6123      	str	r3, [r4, #16]
 8028b18:	2000      	movs	r0, #0
 8028b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b1e:	bf00      	nop
 8028b20:	08045505 	.word	0x08045505

08028b24 <_scanf_i>:
 8028b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b28:	4698      	mov	r8, r3
 8028b2a:	4b76      	ldr	r3, [pc, #472]	; (8028d04 <_scanf_i+0x1e0>)
 8028b2c:	460c      	mov	r4, r1
 8028b2e:	4682      	mov	sl, r0
 8028b30:	4616      	mov	r6, r2
 8028b32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028b36:	b087      	sub	sp, #28
 8028b38:	ab03      	add	r3, sp, #12
 8028b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028b3e:	4b72      	ldr	r3, [pc, #456]	; (8028d08 <_scanf_i+0x1e4>)
 8028b40:	69a1      	ldr	r1, [r4, #24]
 8028b42:	4a72      	ldr	r2, [pc, #456]	; (8028d0c <_scanf_i+0x1e8>)
 8028b44:	2903      	cmp	r1, #3
 8028b46:	bf18      	it	ne
 8028b48:	461a      	movne	r2, r3
 8028b4a:	68a3      	ldr	r3, [r4, #8]
 8028b4c:	9201      	str	r2, [sp, #4]
 8028b4e:	1e5a      	subs	r2, r3, #1
 8028b50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028b54:	bf88      	it	hi
 8028b56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028b5a:	4627      	mov	r7, r4
 8028b5c:	bf82      	ittt	hi
 8028b5e:	eb03 0905 	addhi.w	r9, r3, r5
 8028b62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028b66:	60a3      	strhi	r3, [r4, #8]
 8028b68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028b6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028b70:	bf98      	it	ls
 8028b72:	f04f 0900 	movls.w	r9, #0
 8028b76:	6023      	str	r3, [r4, #0]
 8028b78:	463d      	mov	r5, r7
 8028b7a:	f04f 0b00 	mov.w	fp, #0
 8028b7e:	6831      	ldr	r1, [r6, #0]
 8028b80:	ab03      	add	r3, sp, #12
 8028b82:	7809      	ldrb	r1, [r1, #0]
 8028b84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028b88:	2202      	movs	r2, #2
 8028b8a:	f7d7 fb71 	bl	8000270 <memchr>
 8028b8e:	b328      	cbz	r0, 8028bdc <_scanf_i+0xb8>
 8028b90:	f1bb 0f01 	cmp.w	fp, #1
 8028b94:	d159      	bne.n	8028c4a <_scanf_i+0x126>
 8028b96:	6862      	ldr	r2, [r4, #4]
 8028b98:	b92a      	cbnz	r2, 8028ba6 <_scanf_i+0x82>
 8028b9a:	6822      	ldr	r2, [r4, #0]
 8028b9c:	2308      	movs	r3, #8
 8028b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028ba2:	6063      	str	r3, [r4, #4]
 8028ba4:	6022      	str	r2, [r4, #0]
 8028ba6:	6822      	ldr	r2, [r4, #0]
 8028ba8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028bac:	6022      	str	r2, [r4, #0]
 8028bae:	68a2      	ldr	r2, [r4, #8]
 8028bb0:	1e51      	subs	r1, r2, #1
 8028bb2:	60a1      	str	r1, [r4, #8]
 8028bb4:	b192      	cbz	r2, 8028bdc <_scanf_i+0xb8>
 8028bb6:	6832      	ldr	r2, [r6, #0]
 8028bb8:	1c51      	adds	r1, r2, #1
 8028bba:	6031      	str	r1, [r6, #0]
 8028bbc:	7812      	ldrb	r2, [r2, #0]
 8028bbe:	f805 2b01 	strb.w	r2, [r5], #1
 8028bc2:	6872      	ldr	r2, [r6, #4]
 8028bc4:	3a01      	subs	r2, #1
 8028bc6:	2a00      	cmp	r2, #0
 8028bc8:	6072      	str	r2, [r6, #4]
 8028bca:	dc07      	bgt.n	8028bdc <_scanf_i+0xb8>
 8028bcc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028bd0:	4631      	mov	r1, r6
 8028bd2:	4650      	mov	r0, sl
 8028bd4:	4790      	blx	r2
 8028bd6:	2800      	cmp	r0, #0
 8028bd8:	f040 8085 	bne.w	8028ce6 <_scanf_i+0x1c2>
 8028bdc:	f10b 0b01 	add.w	fp, fp, #1
 8028be0:	f1bb 0f03 	cmp.w	fp, #3
 8028be4:	d1cb      	bne.n	8028b7e <_scanf_i+0x5a>
 8028be6:	6863      	ldr	r3, [r4, #4]
 8028be8:	b90b      	cbnz	r3, 8028bee <_scanf_i+0xca>
 8028bea:	230a      	movs	r3, #10
 8028bec:	6063      	str	r3, [r4, #4]
 8028bee:	6863      	ldr	r3, [r4, #4]
 8028bf0:	4947      	ldr	r1, [pc, #284]	; (8028d10 <_scanf_i+0x1ec>)
 8028bf2:	6960      	ldr	r0, [r4, #20]
 8028bf4:	1ac9      	subs	r1, r1, r3
 8028bf6:	f000 f911 	bl	8028e1c <__sccl>
 8028bfa:	f04f 0b00 	mov.w	fp, #0
 8028bfe:	68a3      	ldr	r3, [r4, #8]
 8028c00:	6822      	ldr	r2, [r4, #0]
 8028c02:	2b00      	cmp	r3, #0
 8028c04:	d03d      	beq.n	8028c82 <_scanf_i+0x15e>
 8028c06:	6831      	ldr	r1, [r6, #0]
 8028c08:	6960      	ldr	r0, [r4, #20]
 8028c0a:	f891 c000 	ldrb.w	ip, [r1]
 8028c0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028c12:	2800      	cmp	r0, #0
 8028c14:	d035      	beq.n	8028c82 <_scanf_i+0x15e>
 8028c16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8028c1a:	d124      	bne.n	8028c66 <_scanf_i+0x142>
 8028c1c:	0510      	lsls	r0, r2, #20
 8028c1e:	d522      	bpl.n	8028c66 <_scanf_i+0x142>
 8028c20:	f10b 0b01 	add.w	fp, fp, #1
 8028c24:	f1b9 0f00 	cmp.w	r9, #0
 8028c28:	d003      	beq.n	8028c32 <_scanf_i+0x10e>
 8028c2a:	3301      	adds	r3, #1
 8028c2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8028c30:	60a3      	str	r3, [r4, #8]
 8028c32:	6873      	ldr	r3, [r6, #4]
 8028c34:	3b01      	subs	r3, #1
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	6073      	str	r3, [r6, #4]
 8028c3a:	dd1b      	ble.n	8028c74 <_scanf_i+0x150>
 8028c3c:	6833      	ldr	r3, [r6, #0]
 8028c3e:	3301      	adds	r3, #1
 8028c40:	6033      	str	r3, [r6, #0]
 8028c42:	68a3      	ldr	r3, [r4, #8]
 8028c44:	3b01      	subs	r3, #1
 8028c46:	60a3      	str	r3, [r4, #8]
 8028c48:	e7d9      	b.n	8028bfe <_scanf_i+0xda>
 8028c4a:	f1bb 0f02 	cmp.w	fp, #2
 8028c4e:	d1ae      	bne.n	8028bae <_scanf_i+0x8a>
 8028c50:	6822      	ldr	r2, [r4, #0]
 8028c52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028c56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028c5a:	d1bf      	bne.n	8028bdc <_scanf_i+0xb8>
 8028c5c:	2310      	movs	r3, #16
 8028c5e:	6063      	str	r3, [r4, #4]
 8028c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028c64:	e7a2      	b.n	8028bac <_scanf_i+0x88>
 8028c66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028c6a:	6022      	str	r2, [r4, #0]
 8028c6c:	780b      	ldrb	r3, [r1, #0]
 8028c6e:	f805 3b01 	strb.w	r3, [r5], #1
 8028c72:	e7de      	b.n	8028c32 <_scanf_i+0x10e>
 8028c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028c78:	4631      	mov	r1, r6
 8028c7a:	4650      	mov	r0, sl
 8028c7c:	4798      	blx	r3
 8028c7e:	2800      	cmp	r0, #0
 8028c80:	d0df      	beq.n	8028c42 <_scanf_i+0x11e>
 8028c82:	6823      	ldr	r3, [r4, #0]
 8028c84:	05db      	lsls	r3, r3, #23
 8028c86:	d50d      	bpl.n	8028ca4 <_scanf_i+0x180>
 8028c88:	42bd      	cmp	r5, r7
 8028c8a:	d909      	bls.n	8028ca0 <_scanf_i+0x17c>
 8028c8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028c94:	4632      	mov	r2, r6
 8028c96:	4650      	mov	r0, sl
 8028c98:	4798      	blx	r3
 8028c9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8028c9e:	464d      	mov	r5, r9
 8028ca0:	42bd      	cmp	r5, r7
 8028ca2:	d02d      	beq.n	8028d00 <_scanf_i+0x1dc>
 8028ca4:	6822      	ldr	r2, [r4, #0]
 8028ca6:	f012 0210 	ands.w	r2, r2, #16
 8028caa:	d113      	bne.n	8028cd4 <_scanf_i+0x1b0>
 8028cac:	702a      	strb	r2, [r5, #0]
 8028cae:	6863      	ldr	r3, [r4, #4]
 8028cb0:	9e01      	ldr	r6, [sp, #4]
 8028cb2:	4639      	mov	r1, r7
 8028cb4:	4650      	mov	r0, sl
 8028cb6:	47b0      	blx	r6
 8028cb8:	6821      	ldr	r1, [r4, #0]
 8028cba:	f8d8 3000 	ldr.w	r3, [r8]
 8028cbe:	f011 0f20 	tst.w	r1, #32
 8028cc2:	d013      	beq.n	8028cec <_scanf_i+0x1c8>
 8028cc4:	1d1a      	adds	r2, r3, #4
 8028cc6:	f8c8 2000 	str.w	r2, [r8]
 8028cca:	681b      	ldr	r3, [r3, #0]
 8028ccc:	6018      	str	r0, [r3, #0]
 8028cce:	68e3      	ldr	r3, [r4, #12]
 8028cd0:	3301      	adds	r3, #1
 8028cd2:	60e3      	str	r3, [r4, #12]
 8028cd4:	1bed      	subs	r5, r5, r7
 8028cd6:	44ab      	add	fp, r5
 8028cd8:	6925      	ldr	r5, [r4, #16]
 8028cda:	445d      	add	r5, fp
 8028cdc:	6125      	str	r5, [r4, #16]
 8028cde:	2000      	movs	r0, #0
 8028ce0:	b007      	add	sp, #28
 8028ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ce6:	f04f 0b00 	mov.w	fp, #0
 8028cea:	e7ca      	b.n	8028c82 <_scanf_i+0x15e>
 8028cec:	1d1a      	adds	r2, r3, #4
 8028cee:	f8c8 2000 	str.w	r2, [r8]
 8028cf2:	681b      	ldr	r3, [r3, #0]
 8028cf4:	f011 0f01 	tst.w	r1, #1
 8028cf8:	bf14      	ite	ne
 8028cfa:	8018      	strhne	r0, [r3, #0]
 8028cfc:	6018      	streq	r0, [r3, #0]
 8028cfe:	e7e6      	b.n	8028cce <_scanf_i+0x1aa>
 8028d00:	2001      	movs	r0, #1
 8028d02:	e7ed      	b.n	8028ce0 <_scanf_i+0x1bc>
 8028d04:	08029240 	.word	0x08029240
 8028d08:	080261d5 	.word	0x080261d5
 8028d0c:	080260d9 	.word	0x080260d9
 8028d10:	08045dde 	.word	0x08045dde

08028d14 <_putc_r>:
 8028d14:	b570      	push	{r4, r5, r6, lr}
 8028d16:	460d      	mov	r5, r1
 8028d18:	4614      	mov	r4, r2
 8028d1a:	4606      	mov	r6, r0
 8028d1c:	b118      	cbz	r0, 8028d26 <_putc_r+0x12>
 8028d1e:	6983      	ldr	r3, [r0, #24]
 8028d20:	b90b      	cbnz	r3, 8028d26 <_putc_r+0x12>
 8028d22:	f7fa ff95 	bl	8023c50 <__sinit>
 8028d26:	4b1c      	ldr	r3, [pc, #112]	; (8028d98 <_putc_r+0x84>)
 8028d28:	429c      	cmp	r4, r3
 8028d2a:	d124      	bne.n	8028d76 <_putc_r+0x62>
 8028d2c:	6874      	ldr	r4, [r6, #4]
 8028d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028d30:	07d8      	lsls	r0, r3, #31
 8028d32:	d405      	bmi.n	8028d40 <_putc_r+0x2c>
 8028d34:	89a3      	ldrh	r3, [r4, #12]
 8028d36:	0599      	lsls	r1, r3, #22
 8028d38:	d402      	bmi.n	8028d40 <_putc_r+0x2c>
 8028d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028d3c:	f7fb f95e 	bl	8023ffc <__retarget_lock_acquire_recursive>
 8028d40:	68a3      	ldr	r3, [r4, #8]
 8028d42:	3b01      	subs	r3, #1
 8028d44:	2b00      	cmp	r3, #0
 8028d46:	60a3      	str	r3, [r4, #8]
 8028d48:	da05      	bge.n	8028d56 <_putc_r+0x42>
 8028d4a:	69a2      	ldr	r2, [r4, #24]
 8028d4c:	4293      	cmp	r3, r2
 8028d4e:	db1c      	blt.n	8028d8a <_putc_r+0x76>
 8028d50:	b2eb      	uxtb	r3, r5
 8028d52:	2b0a      	cmp	r3, #10
 8028d54:	d019      	beq.n	8028d8a <_putc_r+0x76>
 8028d56:	6823      	ldr	r3, [r4, #0]
 8028d58:	1c5a      	adds	r2, r3, #1
 8028d5a:	6022      	str	r2, [r4, #0]
 8028d5c:	701d      	strb	r5, [r3, #0]
 8028d5e:	b2ed      	uxtb	r5, r5
 8028d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028d62:	07da      	lsls	r2, r3, #31
 8028d64:	d405      	bmi.n	8028d72 <_putc_r+0x5e>
 8028d66:	89a3      	ldrh	r3, [r4, #12]
 8028d68:	059b      	lsls	r3, r3, #22
 8028d6a:	d402      	bmi.n	8028d72 <_putc_r+0x5e>
 8028d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028d6e:	f7fb f947 	bl	8024000 <__retarget_lock_release_recursive>
 8028d72:	4628      	mov	r0, r5
 8028d74:	bd70      	pop	{r4, r5, r6, pc}
 8028d76:	4b09      	ldr	r3, [pc, #36]	; (8028d9c <_putc_r+0x88>)
 8028d78:	429c      	cmp	r4, r3
 8028d7a:	d101      	bne.n	8028d80 <_putc_r+0x6c>
 8028d7c:	68b4      	ldr	r4, [r6, #8]
 8028d7e:	e7d6      	b.n	8028d2e <_putc_r+0x1a>
 8028d80:	4b07      	ldr	r3, [pc, #28]	; (8028da0 <_putc_r+0x8c>)
 8028d82:	429c      	cmp	r4, r3
 8028d84:	bf08      	it	eq
 8028d86:	68f4      	ldreq	r4, [r6, #12]
 8028d88:	e7d1      	b.n	8028d2e <_putc_r+0x1a>
 8028d8a:	4629      	mov	r1, r5
 8028d8c:	4622      	mov	r2, r4
 8028d8e:	4630      	mov	r0, r6
 8028d90:	f7fd fc68 	bl	8026664 <__swbuf_r>
 8028d94:	4605      	mov	r5, r0
 8028d96:	e7e3      	b.n	8028d60 <_putc_r+0x4c>
 8028d98:	08045628 	.word	0x08045628
 8028d9c:	08045648 	.word	0x08045648
 8028da0:	08045608 	.word	0x08045608

08028da4 <_read_r>:
 8028da4:	b538      	push	{r3, r4, r5, lr}
 8028da6:	4d07      	ldr	r5, [pc, #28]	; (8028dc4 <_read_r+0x20>)
 8028da8:	4604      	mov	r4, r0
 8028daa:	4608      	mov	r0, r1
 8028dac:	4611      	mov	r1, r2
 8028dae:	2200      	movs	r2, #0
 8028db0:	602a      	str	r2, [r5, #0]
 8028db2:	461a      	mov	r2, r3
 8028db4:	f7dd fc2a 	bl	800660c <_read>
 8028db8:	1c43      	adds	r3, r0, #1
 8028dba:	d102      	bne.n	8028dc2 <_read_r+0x1e>
 8028dbc:	682b      	ldr	r3, [r5, #0]
 8028dbe:	b103      	cbz	r3, 8028dc2 <_read_r+0x1e>
 8028dc0:	6023      	str	r3, [r4, #0]
 8028dc2:	bd38      	pop	{r3, r4, r5, pc}
 8028dc4:	2002f874 	.word	0x2002f874

08028dc8 <__fpclassifyd>:
 8028dc8:	ec51 0b10 	vmov	r0, r1, d0
 8028dcc:	b510      	push	{r4, lr}
 8028dce:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8028dd2:	460b      	mov	r3, r1
 8028dd4:	d019      	beq.n	8028e0a <__fpclassifyd+0x42>
 8028dd6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8028dda:	490e      	ldr	r1, [pc, #56]	; (8028e14 <__fpclassifyd+0x4c>)
 8028ddc:	428a      	cmp	r2, r1
 8028dde:	d90e      	bls.n	8028dfe <__fpclassifyd+0x36>
 8028de0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8028de4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8028de8:	428a      	cmp	r2, r1
 8028dea:	d908      	bls.n	8028dfe <__fpclassifyd+0x36>
 8028dec:	4a0a      	ldr	r2, [pc, #40]	; (8028e18 <__fpclassifyd+0x50>)
 8028dee:	4213      	tst	r3, r2
 8028df0:	d007      	beq.n	8028e02 <__fpclassifyd+0x3a>
 8028df2:	4294      	cmp	r4, r2
 8028df4:	d107      	bne.n	8028e06 <__fpclassifyd+0x3e>
 8028df6:	fab0 f080 	clz	r0, r0
 8028dfa:	0940      	lsrs	r0, r0, #5
 8028dfc:	bd10      	pop	{r4, pc}
 8028dfe:	2004      	movs	r0, #4
 8028e00:	e7fc      	b.n	8028dfc <__fpclassifyd+0x34>
 8028e02:	2003      	movs	r0, #3
 8028e04:	e7fa      	b.n	8028dfc <__fpclassifyd+0x34>
 8028e06:	2000      	movs	r0, #0
 8028e08:	e7f8      	b.n	8028dfc <__fpclassifyd+0x34>
 8028e0a:	2800      	cmp	r0, #0
 8028e0c:	d1ee      	bne.n	8028dec <__fpclassifyd+0x24>
 8028e0e:	2002      	movs	r0, #2
 8028e10:	e7f4      	b.n	8028dfc <__fpclassifyd+0x34>
 8028e12:	bf00      	nop
 8028e14:	7fdfffff 	.word	0x7fdfffff
 8028e18:	7ff00000 	.word	0x7ff00000

08028e1c <__sccl>:
 8028e1c:	b570      	push	{r4, r5, r6, lr}
 8028e1e:	780b      	ldrb	r3, [r1, #0]
 8028e20:	4604      	mov	r4, r0
 8028e22:	2b5e      	cmp	r3, #94	; 0x5e
 8028e24:	bf0b      	itete	eq
 8028e26:	784b      	ldrbeq	r3, [r1, #1]
 8028e28:	1c48      	addne	r0, r1, #1
 8028e2a:	1c88      	addeq	r0, r1, #2
 8028e2c:	2200      	movne	r2, #0
 8028e2e:	bf08      	it	eq
 8028e30:	2201      	moveq	r2, #1
 8028e32:	1e61      	subs	r1, r4, #1
 8028e34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028e38:	f801 2f01 	strb.w	r2, [r1, #1]!
 8028e3c:	42a9      	cmp	r1, r5
 8028e3e:	d1fb      	bne.n	8028e38 <__sccl+0x1c>
 8028e40:	b90b      	cbnz	r3, 8028e46 <__sccl+0x2a>
 8028e42:	3801      	subs	r0, #1
 8028e44:	bd70      	pop	{r4, r5, r6, pc}
 8028e46:	f082 0201 	eor.w	r2, r2, #1
 8028e4a:	54e2      	strb	r2, [r4, r3]
 8028e4c:	4605      	mov	r5, r0
 8028e4e:	4628      	mov	r0, r5
 8028e50:	f810 1b01 	ldrb.w	r1, [r0], #1
 8028e54:	292d      	cmp	r1, #45	; 0x2d
 8028e56:	d006      	beq.n	8028e66 <__sccl+0x4a>
 8028e58:	295d      	cmp	r1, #93	; 0x5d
 8028e5a:	d0f3      	beq.n	8028e44 <__sccl+0x28>
 8028e5c:	b909      	cbnz	r1, 8028e62 <__sccl+0x46>
 8028e5e:	4628      	mov	r0, r5
 8028e60:	e7f0      	b.n	8028e44 <__sccl+0x28>
 8028e62:	460b      	mov	r3, r1
 8028e64:	e7f1      	b.n	8028e4a <__sccl+0x2e>
 8028e66:	786e      	ldrb	r6, [r5, #1]
 8028e68:	2e5d      	cmp	r6, #93	; 0x5d
 8028e6a:	d0fa      	beq.n	8028e62 <__sccl+0x46>
 8028e6c:	42b3      	cmp	r3, r6
 8028e6e:	dcf8      	bgt.n	8028e62 <__sccl+0x46>
 8028e70:	3502      	adds	r5, #2
 8028e72:	4619      	mov	r1, r3
 8028e74:	3101      	adds	r1, #1
 8028e76:	428e      	cmp	r6, r1
 8028e78:	5462      	strb	r2, [r4, r1]
 8028e7a:	dcfb      	bgt.n	8028e74 <__sccl+0x58>
 8028e7c:	1af1      	subs	r1, r6, r3
 8028e7e:	3901      	subs	r1, #1
 8028e80:	1c58      	adds	r0, r3, #1
 8028e82:	42b3      	cmp	r3, r6
 8028e84:	bfa8      	it	ge
 8028e86:	2100      	movge	r1, #0
 8028e88:	1843      	adds	r3, r0, r1
 8028e8a:	e7e0      	b.n	8028e4e <__sccl+0x32>

08028e8c <__submore>:
 8028e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e90:	460c      	mov	r4, r1
 8028e92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e98:	4299      	cmp	r1, r3
 8028e9a:	d11d      	bne.n	8028ed8 <__submore+0x4c>
 8028e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028ea0:	f7fb fbde 	bl	8024660 <_malloc_r>
 8028ea4:	b918      	cbnz	r0, 8028eae <__submore+0x22>
 8028ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8028eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028eb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8028eb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8028eba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028ebe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028ec2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028ec6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028eca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028ece:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028ed2:	6020      	str	r0, [r4, #0]
 8028ed4:	2000      	movs	r0, #0
 8028ed6:	e7e8      	b.n	8028eaa <__submore+0x1e>
 8028ed8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028eda:	0077      	lsls	r7, r6, #1
 8028edc:	463a      	mov	r2, r7
 8028ede:	f7ff f911 	bl	8028104 <_realloc_r>
 8028ee2:	4605      	mov	r5, r0
 8028ee4:	2800      	cmp	r0, #0
 8028ee6:	d0de      	beq.n	8028ea6 <__submore+0x1a>
 8028ee8:	eb00 0806 	add.w	r8, r0, r6
 8028eec:	4601      	mov	r1, r0
 8028eee:	4632      	mov	r2, r6
 8028ef0:	4640      	mov	r0, r8
 8028ef2:	f7fb f8a7 	bl	8024044 <memcpy>
 8028ef6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028efa:	f8c4 8000 	str.w	r8, [r4]
 8028efe:	e7e9      	b.n	8028ed4 <__submore+0x48>

08028f00 <abort>:
 8028f00:	b508      	push	{r3, lr}
 8028f02:	2006      	movs	r0, #6
 8028f04:	f000 f874 	bl	8028ff0 <raise>
 8028f08:	2001      	movs	r0, #1
 8028f0a:	f7dd fb79 	bl	8006600 <_exit>
 8028f0e:	Address 0x0000000008028f0e is out of bounds.


08028f10 <__env_lock>:
 8028f10:	4801      	ldr	r0, [pc, #4]	; (8028f18 <__env_lock+0x8>)
 8028f12:	f7fb b873 	b.w	8023ffc <__retarget_lock_acquire_recursive>
 8028f16:	bf00      	nop
 8028f18:	2002f864 	.word	0x2002f864

08028f1c <__env_unlock>:
 8028f1c:	4801      	ldr	r0, [pc, #4]	; (8028f24 <__env_unlock+0x8>)
 8028f1e:	f7fb b86f 	b.w	8024000 <__retarget_lock_release_recursive>
 8028f22:	bf00      	nop
 8028f24:	2002f864 	.word	0x2002f864

08028f28 <_fstat_r>:
 8028f28:	b538      	push	{r3, r4, r5, lr}
 8028f2a:	4d07      	ldr	r5, [pc, #28]	; (8028f48 <_fstat_r+0x20>)
 8028f2c:	2300      	movs	r3, #0
 8028f2e:	4604      	mov	r4, r0
 8028f30:	4608      	mov	r0, r1
 8028f32:	4611      	mov	r1, r2
 8028f34:	602b      	str	r3, [r5, #0]
 8028f36:	f7dd fb7b 	bl	8006630 <_fstat>
 8028f3a:	1c43      	adds	r3, r0, #1
 8028f3c:	d102      	bne.n	8028f44 <_fstat_r+0x1c>
 8028f3e:	682b      	ldr	r3, [r5, #0]
 8028f40:	b103      	cbz	r3, 8028f44 <_fstat_r+0x1c>
 8028f42:	6023      	str	r3, [r4, #0]
 8028f44:	bd38      	pop	{r3, r4, r5, pc}
 8028f46:	bf00      	nop
 8028f48:	2002f874 	.word	0x2002f874

08028f4c <_isatty_r>:
 8028f4c:	b538      	push	{r3, r4, r5, lr}
 8028f4e:	4d06      	ldr	r5, [pc, #24]	; (8028f68 <_isatty_r+0x1c>)
 8028f50:	2300      	movs	r3, #0
 8028f52:	4604      	mov	r4, r0
 8028f54:	4608      	mov	r0, r1
 8028f56:	602b      	str	r3, [r5, #0]
 8028f58:	f7dd fb70 	bl	800663c <_isatty>
 8028f5c:	1c43      	adds	r3, r0, #1
 8028f5e:	d102      	bne.n	8028f66 <_isatty_r+0x1a>
 8028f60:	682b      	ldr	r3, [r5, #0]
 8028f62:	b103      	cbz	r3, 8028f66 <_isatty_r+0x1a>
 8028f64:	6023      	str	r3, [r4, #0]
 8028f66:	bd38      	pop	{r3, r4, r5, pc}
 8028f68:	2002f874 	.word	0x2002f874

08028f6c <__ascii_mbtowc>:
 8028f6c:	b082      	sub	sp, #8
 8028f6e:	b901      	cbnz	r1, 8028f72 <__ascii_mbtowc+0x6>
 8028f70:	a901      	add	r1, sp, #4
 8028f72:	b142      	cbz	r2, 8028f86 <__ascii_mbtowc+0x1a>
 8028f74:	b14b      	cbz	r3, 8028f8a <__ascii_mbtowc+0x1e>
 8028f76:	7813      	ldrb	r3, [r2, #0]
 8028f78:	600b      	str	r3, [r1, #0]
 8028f7a:	7812      	ldrb	r2, [r2, #0]
 8028f7c:	1e10      	subs	r0, r2, #0
 8028f7e:	bf18      	it	ne
 8028f80:	2001      	movne	r0, #1
 8028f82:	b002      	add	sp, #8
 8028f84:	4770      	bx	lr
 8028f86:	4610      	mov	r0, r2
 8028f88:	e7fb      	b.n	8028f82 <__ascii_mbtowc+0x16>
 8028f8a:	f06f 0001 	mvn.w	r0, #1
 8028f8e:	e7f8      	b.n	8028f82 <__ascii_mbtowc+0x16>

08028f90 <_malloc_usable_size_r>:
 8028f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028f94:	1f18      	subs	r0, r3, #4
 8028f96:	2b00      	cmp	r3, #0
 8028f98:	bfbc      	itt	lt
 8028f9a:	580b      	ldrlt	r3, [r1, r0]
 8028f9c:	18c0      	addlt	r0, r0, r3
 8028f9e:	4770      	bx	lr

08028fa0 <_raise_r>:
 8028fa0:	291f      	cmp	r1, #31
 8028fa2:	b538      	push	{r3, r4, r5, lr}
 8028fa4:	4604      	mov	r4, r0
 8028fa6:	460d      	mov	r5, r1
 8028fa8:	d904      	bls.n	8028fb4 <_raise_r+0x14>
 8028faa:	2316      	movs	r3, #22
 8028fac:	6003      	str	r3, [r0, #0]
 8028fae:	f04f 30ff 	mov.w	r0, #4294967295
 8028fb2:	bd38      	pop	{r3, r4, r5, pc}
 8028fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028fb6:	b112      	cbz	r2, 8028fbe <_raise_r+0x1e>
 8028fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028fbc:	b94b      	cbnz	r3, 8028fd2 <_raise_r+0x32>
 8028fbe:	4620      	mov	r0, r4
 8028fc0:	f000 f830 	bl	8029024 <_getpid_r>
 8028fc4:	462a      	mov	r2, r5
 8028fc6:	4601      	mov	r1, r0
 8028fc8:	4620      	mov	r0, r4
 8028fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028fce:	f000 b817 	b.w	8029000 <_kill_r>
 8028fd2:	2b01      	cmp	r3, #1
 8028fd4:	d00a      	beq.n	8028fec <_raise_r+0x4c>
 8028fd6:	1c59      	adds	r1, r3, #1
 8028fd8:	d103      	bne.n	8028fe2 <_raise_r+0x42>
 8028fda:	2316      	movs	r3, #22
 8028fdc:	6003      	str	r3, [r0, #0]
 8028fde:	2001      	movs	r0, #1
 8028fe0:	e7e7      	b.n	8028fb2 <_raise_r+0x12>
 8028fe2:	2400      	movs	r4, #0
 8028fe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028fe8:	4628      	mov	r0, r5
 8028fea:	4798      	blx	r3
 8028fec:	2000      	movs	r0, #0
 8028fee:	e7e0      	b.n	8028fb2 <_raise_r+0x12>

08028ff0 <raise>:
 8028ff0:	4b02      	ldr	r3, [pc, #8]	; (8028ffc <raise+0xc>)
 8028ff2:	4601      	mov	r1, r0
 8028ff4:	6818      	ldr	r0, [r3, #0]
 8028ff6:	f7ff bfd3 	b.w	8028fa0 <_raise_r>
 8028ffa:	bf00      	nop
 8028ffc:	2000048c 	.word	0x2000048c

08029000 <_kill_r>:
 8029000:	b538      	push	{r3, r4, r5, lr}
 8029002:	4d07      	ldr	r5, [pc, #28]	; (8029020 <_kill_r+0x20>)
 8029004:	2300      	movs	r3, #0
 8029006:	4604      	mov	r4, r0
 8029008:	4608      	mov	r0, r1
 802900a:	4611      	mov	r1, r2
 802900c:	602b      	str	r3, [r5, #0]
 802900e:	f7dd faef 	bl	80065f0 <_kill>
 8029012:	1c43      	adds	r3, r0, #1
 8029014:	d102      	bne.n	802901c <_kill_r+0x1c>
 8029016:	682b      	ldr	r3, [r5, #0]
 8029018:	b103      	cbz	r3, 802901c <_kill_r+0x1c>
 802901a:	6023      	str	r3, [r4, #0]
 802901c:	bd38      	pop	{r3, r4, r5, pc}
 802901e:	bf00      	nop
 8029020:	2002f874 	.word	0x2002f874

08029024 <_getpid_r>:
 8029024:	f7dd bae2 	b.w	80065ec <_getpid>

08029028 <__ascii_wctomb>:
 8029028:	b149      	cbz	r1, 802903e <__ascii_wctomb+0x16>
 802902a:	2aff      	cmp	r2, #255	; 0xff
 802902c:	bf85      	ittet	hi
 802902e:	238a      	movhi	r3, #138	; 0x8a
 8029030:	6003      	strhi	r3, [r0, #0]
 8029032:	700a      	strbls	r2, [r1, #0]
 8029034:	f04f 30ff 	movhi.w	r0, #4294967295
 8029038:	bf98      	it	ls
 802903a:	2001      	movls	r0, #1
 802903c:	4770      	bx	lr
 802903e:	4608      	mov	r0, r1
 8029040:	4770      	bx	lr
 8029042:	Address 0x0000000008029042 is out of bounds.


08029044 <_init>:
 8029044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029046:	bf00      	nop
 8029048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802904a:	bc08      	pop	{r3}
 802904c:	469e      	mov	lr, r3
 802904e:	4770      	bx	lr

08029050 <_fini>:
 8029050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029052:	bf00      	nop
 8029054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029056:	bc08      	pop	{r3}
 8029058:	469e      	mov	lr, r3
 802905a:	4770      	bx	lr
